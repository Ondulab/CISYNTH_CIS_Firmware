
SSS_CIS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f808  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003590  0801faa8  0801faa8  0002faa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023038  08023038  00043a10  2**0
                  CONTENTS
  4 .ARM          00000008  08023038  08023038  00033038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023040  08023040  00043a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023040  08023040  00033040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023044  08023044  00033044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003a10  24000000  08023048  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006068  24003a10  08026a58  00043a10  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24009a78  08026a58  00049a78  2**0
                  ALLOC
 11 .lwip_sec     000019d0  30040000  08026a58  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00043a10  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006d024  00000000  00000000  00043a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b2a3  00000000  00000000  000b0a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002c28  00000000  00000000  000bbd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000029e0  00000000  00000000  000be930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016961  00000000  00000000  000c1310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004bb8a  00000000  00000000  000d7c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001bee13  00000000  00000000  001237fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d1  00000000  00000000  002e260e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cbbc  00000000  00000000  002e26e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24003a10 	.word	0x24003a10
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801fa90 	.word	0x0801fa90

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24003a14 	.word	0x24003a14
 80002dc:	0801fa90 	.word	0x0801fa90

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a74:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <SystemInit+0x104>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a3e      	ldr	r2, [pc, #248]	; (8000b74 <SystemInit+0x104>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a84:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <SystemInit+0x104>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	4a3a      	ldr	r2, [pc, #232]	; (8000b74 <SystemInit+0x104>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0x108>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f003 030f 	and.w	r3, r3, #15
 8000a98:	2b06      	cmp	r3, #6
 8000a9a:	d807      	bhi.n	8000aac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a9c:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <SystemInit+0x108>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f023 030f 	bic.w	r3, r3, #15
 8000aa4:	4a34      	ldr	r2, [pc, #208]	; (8000b78 <SystemInit+0x108>)
 8000aa6:	f043 0307 	orr.w	r3, r3, #7
 8000aaa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aac:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <SystemInit+0x10c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x10c>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <SystemInit+0x10c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <SystemInit+0x10c>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	492e      	ldr	r1, [pc, #184]	; (8000b7c <SystemInit+0x10c>)
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x110>)
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <SystemInit+0x108>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d007      	beq.n	8000ae6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <SystemInit+0x108>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f023 030f 	bic.w	r3, r3, #15
 8000ade:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <SystemInit+0x108>)
 8000ae0:	f043 0307 	orr.w	r3, r3, #7
 8000ae4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <SystemInit+0x10c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000aec:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <SystemInit+0x10c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <SystemInit+0x10c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <SystemInit+0x10c>)
 8000afa:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <SystemInit+0x114>)
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <SystemInit+0x10c>)
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <SystemInit+0x118>)
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <SystemInit+0x10c>)
 8000b06:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <SystemInit+0x11c>)
 8000b08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <SystemInit+0x10c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <SystemInit+0x10c>)
 8000b12:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <SystemInit+0x11c>)
 8000b14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <SystemInit+0x10c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <SystemInit+0x10c>)
 8000b1e:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <SystemInit+0x11c>)
 8000b20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <SystemInit+0x10c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <SystemInit+0x10c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <SystemInit+0x10c>)
 8000b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <SystemInit+0x10c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <SystemInit+0x120>)
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <SystemInit+0x120>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x124>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <SystemInit+0x128>)
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b52:	d202      	bcs.n	8000b5a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x12c>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <SystemInit+0x130>)
 8000b5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b60:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SystemInit+0x104>)
 8000b64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b68:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	52002000 	.word	0x52002000
 8000b7c:	58024400 	.word	0x58024400
 8000b80:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b84:	02020200 	.word	0x02020200
 8000b88:	01ff0000 	.word	0x01ff0000
 8000b8c:	01010280 	.word	0x01010280
 8000b90:	580000c0 	.word	0x580000c0
 8000b94:	5c001000 	.word	0x5c001000
 8000b98:	ffff0000 	.word	0xffff0000
 8000b9c:	51008108 	.word	0x51008108
 8000ba0:	52004000 	.word	0x52004000

08000ba4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
 8000bc4:	615a      	str	r2, [r3, #20]
 8000bc6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bc8:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000bca:	4a30      	ldr	r2, [pc, #192]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bce:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000bd4:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bda:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000be2:	2204      	movs	r2, #4
 8000be4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000be6:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bec:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf8:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfe:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c04:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c24:	4818      	ldr	r0, [pc, #96]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c26:	f002 fa21 	bl	800306c <HAL_ADC_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c30:	f000 ff60 	bl	8001af4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4812      	ldr	r0, [pc, #72]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c40:	f003 f834 	bl	8003cac <HAL_ADCEx_MultiModeConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000c4a:	f000 ff53 	bl	8001af4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c52:	2306      	movs	r3, #6
 8000c54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c5a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c5e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c60:	2304      	movs	r3, #4
 8000c62:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c72:	f002 fb9b 	bl	80033ac <HAL_ADC_ConfigChannel>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000c7c:	f000 ff3a 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24003c1c 	.word	0x24003c1c
 8000c8c:	40022000 	.word	0x40022000

08000c90 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ca8:	4b29      	ldr	r3, [pc, #164]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000caa:	4a2a      	ldr	r2, [pc, #168]	; (8000d54 <MX_ADC2_Init+0xc4>)
 8000cac:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cae:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000cb4:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cba:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cc6:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ccc:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d04:	4812      	ldr	r0, [pc, #72]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000d06:	f002 f9b1 	bl	800306c <HAL_ADC_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000d10:	f000 fef0 	bl	8001af4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_ADC2_Init+0xc8>)
 8000d16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d18:	2306      	movs	r3, #6
 8000d1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d20:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d24:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d26:	2304      	movs	r3, #4
 8000d28:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	4619      	mov	r1, r3
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000d38:	f002 fb38 	bl	80033ac <HAL_ADC_ConfigChannel>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000d42:	f000 fed7 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	24003bb8 	.word	0x24003bb8
 8000d54:	40022100 	.word	0x40022100
 8000d58:	04300002 	.word	0x04300002

08000d5c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000d76:	4a2a      	ldr	r2, [pc, #168]	; (8000e20 <MX_ADC3_Init+0xc4>)
 8000d78:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d7a:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000d80:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d86:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d92:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d98:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dd0:	4812      	ldr	r0, [pc, #72]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000dd2:	f002 f94b 	bl	800306c <HAL_ADC_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000ddc:	f000 fe8a 	bl	8001af4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <MX_ADC3_Init+0xc8>)
 8000de2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de4:	2306      	movs	r3, #6
 8000de6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000df0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000df2:	2304      	movs	r3, #4
 8000df4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000e04:	f002 fad2 	bl	80033ac <HAL_ADC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000e0e:	f000 fe71 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	24003c80 	.word	0x24003c80
 8000e20:	58026000 	.word	0x58026000
 8000e24:	04300002 	.word	0x04300002

08000e28 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a48      	ldr	r2, [pc, #288]	; (8000f58 <HAL_ADC_MspInit+0x130>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12d      	bne.n	8000e96 <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e3a:	4b48      	ldr	r3, [pc, #288]	; (8000f5c <HAL_ADC_MspInit+0x134>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	4a46      	ldr	r2, [pc, #280]	; (8000f5c <HAL_ADC_MspInit+0x134>)
 8000e42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e44:	4b45      	ldr	r3, [pc, #276]	; (8000f5c <HAL_ADC_MspInit+0x134>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d10e      	bne.n	8000e6a <HAL_ADC_MspInit+0x42>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e4c:	4b44      	ldr	r3, [pc, #272]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000e4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e52:	4a43      	ldr	r2, [pc, #268]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000e54:	f043 0320 	orr.w	r3, r3, #32
 8000e58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e5c:	4b40      	ldr	r3, [pc, #256]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000e5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e62:	f003 0320 	and.w	r3, r3, #32
 8000e66:	61fb      	str	r3, [r7, #28]
 8000e68:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	4a3b      	ldr	r2, [pc, #236]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7a:	4b39      	ldr	r3, [pc, #228]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000e88:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000e8c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000e90:	f001 ff36 	bl	8002d00 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000e94:	e05b      	b.n	8000f4e <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC2)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a32      	ldr	r2, [pc, #200]	; (8000f64 <HAL_ADC_MspInit+0x13c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d12d      	bne.n	8000efc <HAL_ADC_MspInit+0xd4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ea0:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <HAL_ADC_MspInit+0x134>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4a2d      	ldr	r2, [pc, #180]	; (8000f5c <HAL_ADC_MspInit+0x134>)
 8000ea8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <HAL_ADC_MspInit+0x134>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d10e      	bne.n	8000ed0 <HAL_ADC_MspInit+0xa8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000eb2:	4b2b      	ldr	r3, [pc, #172]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000eb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb8:	4a29      	ldr	r2, [pc, #164]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000eba:	f043 0320 	orr.w	r3, r3, #32
 8000ebe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ec2:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000ec4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ec8:	f003 0320 	and.w	r3, r3, #32
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000eee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000ef2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000ef6:	f001 ff03 	bl	8002d00 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000efa:	e028      	b.n	8000f4e <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC3)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_ADC_MspInit+0x140>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d123      	bne.n	8000f4e <HAL_ADC_MspInit+0x126>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000f42:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000f46:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000f4a:	f001 fed9 	bl	8002d00 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000f4e:	bf00      	nop
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40022000 	.word	0x40022000
 8000f5c:	24003a30 	.word	0x24003a30
 8000f60:	58024400 	.word	0x58024400
 8000f64:	40022100 	.word	0x40022100
 8000f68:	58026000 	.word	0x58026000

08000f6c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <MX_CRC_Init+0x3c>)
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <MX_CRC_Init+0x40>)
 8000f74:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_CRC_Init+0x3c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MX_CRC_Init+0x3c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_CRC_Init+0x3c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <MX_CRC_Init+0x3c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_CRC_Init+0x3c>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_CRC_Init+0x3c>)
 8000f96:	f003 f907 	bl	80041a8 <HAL_CRC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000fa0:	f000 fda8 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	24003ce4 	.word	0x24003ce4
 8000fac:	58024c00 	.word	0x58024c00

08000fb0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <HAL_CRC_MspInit+0x3c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d10e      	bne.n	8000fe0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_CRC_MspInit+0x40>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <HAL_CRC_MspInit+0x40>)
 8000fca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <HAL_CRC_MspInit+0x40>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	58024c00 	.word	0x58024c00
 8000ff0:	58024400 	.word	0x58024400

08000ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <MX_DMA_Init+0x3c>)
 8000ffc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <MX_DMA_Init+0x3c>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_DMA_Init+0x3c>)
 800100c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	200b      	movs	r0, #11
 800101e:	f002 fffe 	bl	800401e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001022:	200b      	movs	r0, #11
 8001024:	f003 f815 	bl	8004052 <HAL_NVIC_EnableIRQ>

}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	58024400 	.word	0x58024400

08001034 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	; 0x38
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	619a      	str	r2, [r3, #24]
  FMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001060:	4b32      	ldr	r3, [pc, #200]	; (800112c <MX_FMC_Init+0xf8>)
 8001062:	4a33      	ldr	r2, [pc, #204]	; (8001130 <MX_FMC_Init+0xfc>)
 8001064:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <MX_FMC_Init+0xf8>)
 8001068:	4a32      	ldr	r2, [pc, #200]	; (8001134 <MX_FMC_Init+0x100>)
 800106a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800106c:	4b2f      	ldr	r3, [pc, #188]	; (800112c <MX_FMC_Init+0xf8>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <MX_FMC_Init+0xf8>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001078:	4b2c      	ldr	r3, [pc, #176]	; (800112c <MX_FMC_Init+0xf8>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 800107e:	4b2b      	ldr	r3, [pc, #172]	; (800112c <MX_FMC_Init+0xf8>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001084:	4b29      	ldr	r3, [pc, #164]	; (800112c <MX_FMC_Init+0xf8>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <MX_FMC_Init+0xf8>)
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <MX_FMC_Init+0xf8>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <MX_FMC_Init+0xf8>)
 8001098:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <MX_FMC_Init+0xf8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
 80010a4:	4b21      	ldr	r3, [pc, #132]	; (800112c <MX_FMC_Init+0xf8>)
 80010a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_FMC_Init+0xf8>)
 80010ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010b2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_FMC_Init+0xf8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_FMC_Init+0xf8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_FMC_Init+0xf8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_FMC_Init+0xf8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 8;
 80010cc:	2308      	movs	r3, #8
 80010ce:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80010d0:	230f      	movs	r3, #15
 80010d2:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 10;
 80010d4:	230a      	movs	r3, #10
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 5;
 80010d8:	2305      	movs	r3, #5
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80010dc:	2310      	movs	r3, #16
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80010e0:	2311      	movs	r3, #17
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80010e4:	2300      	movs	r3, #0
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80010e8:	2308      	movs	r3, #8
 80010ea:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80010ec:	230f      	movs	r3, #15
 80010ee:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 10;
 80010f0:	230a      	movs	r3, #10
 80010f2:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 5;
 80010f4:	2305      	movs	r3, #5
 80010f6:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80010f8:	2310      	movs	r3, #16
 80010fa:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80010fc:	2311      	movs	r3, #17
 80010fe:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FMC_ACCESS_MODE_A;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001104:	463a      	mov	r2, r7
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4807      	ldr	r0, [pc, #28]	; (800112c <MX_FMC_Init+0xf8>)
 800110e:	f00a ff63 	bl	800bfd8 <HAL_SRAM_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_FMC_Init+0xe8>
  {
    Error_Handler( );
 8001118:	f000 fcec 	bl	8001af4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800111c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001120:	f001 fe04 	bl	8002d2c <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE END FMC_Init 2 */
}
 8001124:	bf00      	nop
 8001126:	3738      	adds	r7, #56	; 0x38
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	24003d08 	.word	0x24003d08
 8001130:	52004000 	.word	0x52004000
 8001134:	52004104 	.word	0x52004104

08001138 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001138:	b580      	push	{r7, lr}
 800113a:	b0b6      	sub	sp, #216	; 0xd8
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800114e:	4b39      	ldr	r3, [pc, #228]	; (8001234 <HAL_FMC_MspInit+0xfc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d169      	bne.n	800122a <HAL_FMC_MspInit+0xf2>
    return;
  }
  FMC_Initialized = 1;
 8001156:	4b37      	ldr	r3, [pc, #220]	; (8001234 <HAL_FMC_MspInit+0xfc>)
 8001158:	2201      	movs	r2, #1
 800115a:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	22bc      	movs	r2, #188	; 0xbc
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f019 ff47 	bl	801aff8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800116a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800116e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001170:	2300      	movs	r3, #0
 8001172:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	4618      	mov	r0, r3
 800117a:	f007 fa93 	bl	80086a4 <HAL_RCCEx_PeriphCLKConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 8001184:	f000 fcb6 	bl	8001af4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001188:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <HAL_FMC_MspInit+0x100>)
 800118a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800118e:	4a2a      	ldr	r2, [pc, #168]	; (8001238 <HAL_FMC_MspInit+0x100>)
 8001190:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001194:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <HAL_FMC_MspInit+0x100>)
 800119a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800119e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE9   ------> FMC_D6
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4
 80011a6:	f24c 03b3 	movw	r3, #49331	; 0xc0b3
 80011aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c0:	230c      	movs	r3, #12
 80011c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011ca:	4619      	mov	r1, r3
 80011cc:	481b      	ldr	r0, [pc, #108]	; (800123c <HAL_FMC_MspInit+0x104>)
 80011ce:	f006 f861 	bl	8007294 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011ea:	230c      	movs	r3, #12
 80011ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4812      	ldr	r0, [pc, #72]	; (8001240 <HAL_FMC_MspInit+0x108>)
 80011f8:	f006 f84c 	bl	8007294 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_9;
 80011fc:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001200:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001216:	230c      	movs	r3, #12
 8001218:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800121c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001220:	4619      	mov	r1, r3
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <HAL_FMC_MspInit+0x10c>)
 8001224:	f006 f836 	bl	8007294 <HAL_GPIO_Init>
 8001228:	e000      	b.n	800122c <HAL_FMC_MspInit+0xf4>
    return;
 800122a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800122c:	37d8      	adds	r7, #216	; 0xd8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	24003a34 	.word	0x24003a34
 8001238:	58024400 	.word	0x58024400
 800123c:	58020c00 	.word	0x58020c00
 8001240:	58021400 	.word	0x58021400
 8001244:	58021000 	.word	0x58021000

08001248 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001250:	f7ff ff72 	bl	8001138 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08e      	sub	sp, #56	; 0x38
 8001260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	4b8d      	ldr	r3, [pc, #564]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001278:	4a8b      	ldr	r2, [pc, #556]	; (80014a8 <MX_GPIO_Init+0x24c>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001282:	4b89      	ldr	r3, [pc, #548]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	623b      	str	r3, [r7, #32]
 800128e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001290:	4b85      	ldr	r3, [pc, #532]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001296:	4a84      	ldr	r2, [pc, #528]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800129c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a0:	4b81      	ldr	r3, [pc, #516]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	4b7e      	ldr	r3, [pc, #504]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b4:	4a7c      	ldr	r2, [pc, #496]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012be:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	4b76      	ldr	r3, [pc, #472]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d2:	4a75      	ldr	r2, [pc, #468]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012dc:	4b72      	ldr	r3, [pc, #456]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ea:	4b6f      	ldr	r3, [pc, #444]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f0:	4a6d      	ldr	r2, [pc, #436]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fa:	4b6b      	ldr	r3, [pc, #428]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001308:	4b67      	ldr	r3, [pc, #412]	; (80014a8 <MX_GPIO_Init+0x24c>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130e:	4a66      	ldr	r2, [pc, #408]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001318:	4b63      	ldr	r3, [pc, #396]	; (80014a8 <MX_GPIO_Init+0x24c>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001326:	4b60      	ldr	r3, [pc, #384]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132c:	4a5e      	ldr	r2, [pc, #376]	; (80014a8 <MX_GPIO_Init+0x24c>)
 800132e:	f043 0320 	orr.w	r3, r3, #32
 8001332:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001336:	4b5c      	ldr	r3, [pc, #368]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001344:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134a:	4a57      	ldr	r2, [pc, #348]	; (80014a8 <MX_GPIO_Init+0x24c>)
 800134c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001354:	4b54      	ldr	r3, [pc, #336]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RESET_Pin|MEMS_CS_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001368:	4850      	ldr	r0, [pc, #320]	; (80014ac <MX_GPIO_Init+0x250>)
 800136a:	f006 f943 	bl	80075f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CIS_RS_GPIO_Port, CIS_RS_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001374:	484e      	ldr	r0, [pc, #312]	; (80014b0 <MX_GPIO_Init+0x254>)
 8001376:	f006 f93d 	bl	80075f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAC_FLT_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f242 0104 	movw	r1, #8196	; 0x2004
 8001380:	484c      	ldr	r0, [pc, #304]	; (80014b4 <MX_GPIO_Init+0x258>)
 8001382:	f006 f937 	bl	80075f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, EN_12V_Pin|EN_5V_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2124      	movs	r1, #36	; 0x24
 800138a:	484b      	ldr	r0, [pc, #300]	; (80014b8 <MX_GPIO_Init+0x25c>)
 800138c:	f006 f932 	bl	80075f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2140      	movs	r1, #64	; 0x40
 8001394:	4849      	ldr	r0, [pc, #292]	; (80014bc <MX_GPIO_Init+0x260>)
 8001396:	f006 f92d 	bl	80075f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_Pin|DAC_DEMP_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2148      	movs	r1, #72	; 0x48
 800139e:	4848      	ldr	r0, [pc, #288]	; (80014c0 <MX_GPIO_Init+0x264>)
 80013a0:	f006 f928 	bl	80075f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin|MEMS_CS_Pin;
 80013a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4619      	mov	r1, r3
 80013bc:	483b      	ldr	r0, [pc, #236]	; (80014ac <MX_GPIO_Init+0x250>)
 80013be:	f005 ff69 	bl	8007294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_FSYNC_Pin;
 80013c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_FSYNC_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	4836      	ldr	r0, [pc, #216]	; (80014b0 <MX_GPIO_Init+0x254>)
 80013d8:	f005 ff5c 	bl	8007294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CIS_RS_Pin;
 80013dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CIS_RS_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	482e      	ldr	r0, [pc, #184]	; (80014b0 <MX_GPIO_Init+0x254>)
 80013f6:	f005 ff4d 	bl	8007294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAC_FLT_Pin|DAC_XSMT_Pin;
 80013fa:	f242 0304 	movw	r3, #8196	; 0x2004
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	4619      	mov	r1, r3
 8001412:	4828      	ldr	r0, [pc, #160]	; (80014b4 <MX_GPIO_Init+0x258>)
 8001414:	f005 ff3e 	bl	8007294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|EN_5V_Pin;
 8001418:	2324      	movs	r3, #36	; 0x24
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142c:	4619      	mov	r1, r3
 800142e:	4822      	ldr	r0, [pc, #136]	; (80014b8 <MX_GPIO_Init+0x25c>)
 8001430:	f005 ff30 	bl	8007294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_FMT_Pin;
 8001434:	2340      	movs	r3, #64	; 0x40
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_FMT_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	481c      	ldr	r0, [pc, #112]	; (80014bc <MX_GPIO_Init+0x260>)
 800144c:	f005 ff22 	bl	8007294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT_Pin;
 8001450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <MX_GPIO_Init+0x268>)
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	4818      	ldr	r0, [pc, #96]	; (80014c8 <MX_GPIO_Init+0x26c>)
 8001466:	f005 ff15 	bl	8007294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SW_4_Pin|SW_5_Pin|SW_1_Pin|SW_3_Pin
 800146a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SW_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_GPIO_Init+0x268>)
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	4813      	ldr	r0, [pc, #76]	; (80014cc <MX_GPIO_Init+0x270>)
 8001480:	f005 ff08 	bl	8007294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LED_Pin|DAC_DEMP_Pin;
 8001484:	2348      	movs	r3, #72	; 0x48
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	4619      	mov	r1, r3
 800149a:	4809      	ldr	r0, [pc, #36]	; (80014c0 <MX_GPIO_Init+0x264>)
 800149c:	f005 fefa 	bl	8007294 <HAL_GPIO_Init>

}
 80014a0:	bf00      	nop
 80014a2:	3738      	adds	r7, #56	; 0x38
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58020400 	.word	0x58020400
 80014b0:	58020000 	.word	0x58020000
 80014b4:	58020800 	.word	0x58020800
 80014b8:	58021800 	.word	0x58021800
 80014bc:	58021400 	.word	0x58021400
 80014c0:	58021c00 	.word	0x58021c00
 80014c4:	11110000 	.word	0x11110000
 80014c8:	58020c00 	.word	0x58020c00
 80014cc:	58021000 	.word	0x58021000

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	f2ad 4dac 	subw	sp, sp, #1196	; 0x4ac
 80014d6:	af04      	add	r7, sp, #16
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80014d8:	f000 facc 	bl	8001a74 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014dc:	4b8a      	ldr	r3, [pc, #552]	; (8001708 <main+0x238>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d11b      	bne.n	8001520 <main+0x50>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014e8:	f3bf 8f4f 	dsb	sy
}
 80014ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014ee:	f3bf 8f6f 	isb	sy
}
 80014f2:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014f4:	4b84      	ldr	r3, [pc, #528]	; (8001708 <main+0x238>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014fc:	f3bf 8f4f 	dsb	sy
}
 8001500:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001502:	f3bf 8f6f 	isb	sy
}
 8001506:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001508:	4b7f      	ldr	r3, [pc, #508]	; (8001708 <main+0x238>)
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	4a7e      	ldr	r2, [pc, #504]	; (8001708 <main+0x238>)
 800150e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001512:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001514:	f3bf 8f4f 	dsb	sy
}
 8001518:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800151a:	f3bf 8f6f 	isb	sy
}
 800151e:	e000      	b.n	8001522 <main+0x52>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001520:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001522:	4b79      	ldr	r3, [pc, #484]	; (8001708 <main+0x238>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d143      	bne.n	80015b6 <main+0xe6>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800152e:	4b76      	ldr	r3, [pc, #472]	; (8001708 <main+0x238>)
 8001530:	2200      	movs	r2, #0
 8001532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001536:	f3bf 8f4f 	dsb	sy
}
 800153a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800153c:	4b72      	ldr	r3, [pc, #456]	; (8001708 <main+0x238>)
 800153e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001542:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001546:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 800154a:	0b5b      	lsrs	r3, r3, #13
 800154c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001550:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001554:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8001558:	08db      	lsrs	r3, r3, #3
 800155a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800155e:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001562:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001566:	015a      	lsls	r2, r3, #5
 8001568:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800156c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800156e:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8001572:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001574:	4964      	ldr	r1, [pc, #400]	; (8001708 <main+0x238>)
 8001576:	4313      	orrs	r3, r2
 8001578:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800157c:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8001580:	1e5a      	subs	r2, r3, #1
 8001582:	f8c7 2478 	str.w	r2, [r7, #1144]	; 0x478
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1eb      	bne.n	8001562 <main+0x92>
    } while(sets-- != 0U);
 800158a:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 800158e:	1e5a      	subs	r2, r3, #1
 8001590:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1dd      	bne.n	8001554 <main+0x84>
  __ASM volatile ("dsb 0xF":::"memory");
 8001598:	f3bf 8f4f 	dsb	sy
}
 800159c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800159e:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <main+0x238>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	4a59      	ldr	r2, [pc, #356]	; (8001708 <main+0x238>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80015aa:	f3bf 8f4f 	dsb	sy
}
 80015ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015b0:	f3bf 8f6f 	isb	sy
}
 80015b4:	e000      	b.n	80015b8 <main+0xe8>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80015b6:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80015b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015bc:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80015c0:	bf00      	nop
 80015c2:	4b52      	ldr	r3, [pc, #328]	; (800170c <main+0x23c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d006      	beq.n	80015dc <main+0x10c>
 80015ce:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80015d2:	1e5a      	subs	r2, r3, #1
 80015d4:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 80015d8:	2b00      	cmp	r3, #0
 80015da:	dcf2      	bgt.n	80015c2 <main+0xf2>
	if ( timeout < 0 )
 80015dc:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	da01      	bge.n	80015e8 <main+0x118>
	{
		Error_Handler();
 80015e4:	f000 fa86 	bl	8001af4 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e8:	f001 fab4 	bl	8002b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ec:	f000 f990 	bl	8001910 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015f0:	f000 fa14 	bl	8001a1c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80015f4:	4b45      	ldr	r3, [pc, #276]	; (800170c <main+0x23c>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fa:	4a44      	ldr	r2, [pc, #272]	; (800170c <main+0x23c>)
 80015fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001604:	4b41      	ldr	r3, [pc, #260]	; (800170c <main+0x23c>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160a:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800160e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001618:	681b      	ldr	r3, [r3, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800161a:	2000      	movs	r0, #0
 800161c:	f006 f81e 	bl	800765c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8001620:	2100      	movs	r1, #0
 8001622:	2000      	movs	r0, #0
 8001624:	f006 f834 	bl	8007690 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8001628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800162c:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001630:	bf00      	nop
 8001632:	4b36      	ldr	r3, [pc, #216]	; (800170c <main+0x23c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d106      	bne.n	800164c <main+0x17c>
 800163e:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8001642:	1e5a      	subs	r2, r3, #1
 8001644:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 8001648:	2b00      	cmp	r3, #0
 800164a:	dcf2      	bgt.n	8001632 <main+0x162>
	if ( timeout < 0 )
 800164c:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8001650:	2b00      	cmp	r3, #0
 8001652:	da01      	bge.n	8001658 <main+0x188>
	{
		Error_Handler();
 8001654:	f000 fa4e 	bl	8001af4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001658:	f7ff fe00 	bl	800125c <MX_GPIO_Init>
  MX_DMA_Init();
 800165c:	f7ff fcca 	bl	8000ff4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001660:	f7ff faa0 	bl	8000ba4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001664:	f7ff fb14 	bl	8000c90 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001668:	f7ff fb78 	bl	8000d5c <MX_ADC3_Init>
  MX_FMC_Init();
 800166c:	f7ff fce2 	bl	8001034 <MX_FMC_Init>
//  MX_SAI1_Init();
  MX_SPI2_Init();
 8001670:	f000 fa94 	bl	8001b9c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001674:	f001 f834 	bl	80026e0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001678:	f000 fca6 	bl	8001fc8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800167c:	f000 fd34 	bl	80020e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001680:	f000 fd8c 	bl	800219c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001684:	f000 fde4 	bl	8002250 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001688:	f000 fe3c 	bl	8002304 <MX_TIM8_Init>
  MX_RNG_Init();
 800168c:	f000 fa38 	bl	8001b00 <MX_RNG_Init>
  MX_CRC_Init();
 8001690:	f7ff fc6c 	bl	8000f6c <MX_CRC_Init>
  MX_LWIP_Init();
 8001694:	f00c fba8 	bl	800dde8 <MX_LWIP_Init>
  MX_PDM2PCM_Init();
 8001698:	f016 fe4c 	bl	8018334 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	2120      	movs	r1, #32
 80016a0:	481b      	ldr	r0, [pc, #108]	; (8001710 <main+0x240>)
 80016a2:	f005 ffa7 	bl	80075f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	2104      	movs	r1, #4
 80016aa:	4819      	ldr	r0, [pc, #100]	; (8001710 <main+0x240>)
 80016ac:	f005 ffa2 	bl	80075f4 <HAL_GPIO_WritePin>

	//  int8_t timeText[] = {'1', '2', ':', '3', '5'};
	//  uint32_t framecount = 0;

	ssd1362_init();
 80016b0:	f017 fd18 	bl	80190e4 <ssd1362_init>

	ssd1362_clearBuffer();
 80016b4:	f017 fcb6 	bl	8019024 <ssd1362_clearBuffer>
	ssd1362_drawHLine(0, 5, 256,0xF, 0);
 80016b8:	2300      	movs	r3, #0
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	230f      	movs	r3, #15
 80016be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c2:	2105      	movs	r1, #5
 80016c4:	2000      	movs	r0, #0
 80016c6:	f017 fb1b 	bl	8018d00 <ssd1362_drawHLine>
	ssd1362_drawHLine(0, 40, 256,0xF, 0);
 80016ca:	2300      	movs	r3, #0
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	230f      	movs	r3, #15
 80016d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016d4:	2128      	movs	r1, #40	; 0x28
 80016d6:	2000      	movs	r0, #0
 80016d8:	f017 fb12 	bl	8018d00 <ssd1362_drawHLine>
	ssd1362_drawString(16, 15, (int8_t *)"Hello Spectral Sound Scanner", 0xF, 16);
 80016dc:	2310      	movs	r3, #16
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	230f      	movs	r3, #15
 80016e2:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <main+0x244>)
 80016e4:	210f      	movs	r1, #15
 80016e6:	2010      	movs	r0, #16
 80016e8:	f017 fbfb 	bl	8018ee2 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 80016ec:	f017 fcc8 	bl	8019080 <ssd1362_writeFullBuffer>

	HAL_Delay(100);
 80016f0:	2064      	movs	r0, #100	; 0x64
 80016f2:	f001 fac1 	bl	8002c78 <HAL_Delay>

	pcm5102_Init();
 80016f6:	f017 f953 	bl	80189a0 <pcm5102_Init>
	uint32_t aRandom32bit = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
	uint8_t buff[1000];

		for (uint32_t i = 0; i < 1000; i++)
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8001706:	e021      	b.n	800174c <main+0x27c>
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	58024400 	.word	0x58024400
 8001710:	58021800 	.word	0x58021800
 8001714:	0801faa8 	.word	0x0801faa8
		{
			if (HAL_RNG_GenerateRandomNumber(&hrng, &aRandom32bit) != HAL_OK)
 8001718:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800171c:	4619      	mov	r1, r3
 800171e:	4874      	ldr	r0, [pc, #464]	; (80018f0 <main+0x420>)
 8001720:	f009 f9a1 	bl	800aa66 <HAL_RNG_GenerateRandomNumber>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <main+0x25e>
			{
				/* Random number generation error */
				Error_Handler();
 800172a:	f000 f9e3 	bl	8001af4 <Error_Handler>
			}
			buff[i] = aRandom32bit;
 800172e:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8001732:	b2d9      	uxtb	r1, r3
 8001734:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001738:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800173c:	4413      	add	r3, r2
 800173e:	460a      	mov	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < 1000; i++)
 8001742:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001746:	3301      	adds	r3, #1
 8001748:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800174c:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001750:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001754:	d3e0      	bcc.n	8001718 <main+0x248>
		}
	Audio_Player_Play(buff, 1000);
 8001756:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800175a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800175e:	4618      	mov	r0, r3
 8001760:	f017 f93e 	bl	80189e0 <Audio_Player_Play>


	//  HAL_GPIO_WritePin(MEMS_FSYNC_GPIO_Port, MEMS_FSYNC_Pin, GPIO_PIN_RESET);
	icm20602_init();
 8001764:	f016 fe9c 	bl	80184a0 <icm20602_init>
	int16_t accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z, tmp;


	const char* message = "Hello UDP message!\n\r";
 8001768:	4b62      	ldr	r3, [pc, #392]	; (80018f4 <main+0x424>)
 800176a:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c

	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 192, 168, 1, 1);
 800176e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001772:	4a61      	ldr	r2, [pc, #388]	; (80018f8 <main+0x428>)
 8001774:	601a      	str	r2, [r3, #0]

	struct udp_pcb* my_udp = udp_new();
 8001776:	f016 fd95 	bl	80182a4 <udp_new>
 800177a:	f8c7 0488 	str.w	r0, [r7, #1160]	; 0x488
	udp_connect(my_udp, &PC_IPADDR, 55151);
 800177e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001782:	f24d 726f 	movw	r2, #55151	; 0xd76f
 8001786:	4619      	mov	r1, r3
 8001788:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 800178c:	f016 fd1c 	bl	80181c8 <udp_connect>
	struct pbuf* udp_buffer = NULL;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001796:	4b59      	ldr	r3, [pc, #356]	; (80018fc <main+0x42c>)
 8001798:	2200      	movs	r2, #0
 800179a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800179e:	f3bf 8f4f 	dsb	sy
}
 80017a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80017a4:	4b55      	ldr	r3, [pc, #340]	; (80018fc <main+0x42c>)
 80017a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017aa:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80017ae:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80017b2:	0b5b      	lsrs	r3, r3, #13
 80017b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017b8:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80017bc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80017c0:	08db      	lsrs	r3, r3, #3
 80017c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c6:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80017ca:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 80017ce:	015a      	lsls	r2, r3, #5
 80017d0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80017d4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80017d6:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 80017da:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80017dc:	4947      	ldr	r1, [pc, #284]	; (80018fc <main+0x42c>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80017e4:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80017e8:	1e5a      	subs	r2, r3, #1
 80017ea:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1eb      	bne.n	80017ca <main+0x2fa>
    } while(sets-- != 0U);
 80017f2:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 80017f6:	1e5a      	subs	r2, r3, #1
 80017f8:	f8c7 2470 	str.w	r2, [r7, #1136]	; 0x470
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1dd      	bne.n	80017bc <main+0x2ec>
  __ASM volatile ("dsb 0xF":::"memory");
 8001800:	f3bf 8f4f 	dsb	sy
}
 8001804:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001806:	f3bf 8f6f 	isb	sy
}
 800180a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800180c:	bf00      	nop
		//	  ssd1362_writeFullBuffer();
		//	  HAL_Delay(1);

		//	  icm20602_read_accel(&accel_x, &accel_y, &accel_z);
		//	  icm20602_read_gyro(&gyro_x, &gyro_y, &gyro_z);
		icm20602_read_data_raw(&accel_x, &accel_y, &accel_z, &gyro_x, &gyro_y, &gyro_z, &tmp);
 800180e:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8001812:	f107 027a 	add.w	r2, r7, #122	; 0x7a
 8001816:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800181a:	f107 007e 	add.w	r0, r7, #126	; 0x7e
 800181e:	f107 0372 	add.w	r3, r7, #114	; 0x72
 8001822:	9302      	str	r3, [sp, #8]
 8001824:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	4623      	mov	r3, r4
 8001832:	f017 f803 	bl	801883c <icm20602_read_data_raw>

		ssd1362_clearBuffer();
 8001836:	f017 fbf5 	bl	8019024 <ssd1362_clearBuffer>
		char text[100] = {0};
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	3304      	adds	r3, #4
 8001842:	2260      	movs	r2, #96	; 0x60
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f019 fbd6 	bl	801aff8 <memset>
		//	  sprintf(text,"Accel : %.2f  %.2f  %.2f", accel_x, accel_y, accel_z);
		//	  ssd1362_drawString(0, 10, (int8_t *)text, 0xF, 16);
		//	  sprintf(text,"Gyro  : %.2f  %.2f  %.2f", gyro_x, gyro_y, gyro_z);
		//	  ssd1362_drawString(0, 30, (int8_t *)text, 0xF, 16);
		//	  sprintf(text,"temp. : %.2f", tmp);
		sprintf(text,"Accel : %d  %d  %d", accel_x, accel_y, accel_z);
 800184c:	f107 037e 	add.w	r3, r7, #126	; 0x7e
 8001850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001854:	461a      	mov	r2, r3
 8001856:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800185a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185e:	4619      	mov	r1, r3
 8001860:	f107 037a 	add.w	r3, r7, #122	; 0x7a
 8001864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001868:	1d38      	adds	r0, r7, #4
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	460b      	mov	r3, r1
 800186e:	4924      	ldr	r1, [pc, #144]	; (8001900 <main+0x430>)
 8001870:	f01a fb2a 	bl	801bec8 <siprintf>
		ssd1362_drawString(0, 10, (int8_t *)text, 0xF, 16);
 8001874:	1d3a      	adds	r2, r7, #4
 8001876:	2310      	movs	r3, #16
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	230f      	movs	r3, #15
 800187c:	210a      	movs	r1, #10
 800187e:	2000      	movs	r0, #0
 8001880:	f017 fb2f 	bl	8018ee2 <ssd1362_drawString>
		sprintf(text,"Gyro  : %d  %d  %d", gyro_x, gyro_y, gyro_z);
 8001884:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188c:	461a      	mov	r2, r3
 800188e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8001892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001896:	4619      	mov	r1, r3
 8001898:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800189c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a0:	1d38      	adds	r0, r7, #4
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	460b      	mov	r3, r1
 80018a6:	4917      	ldr	r1, [pc, #92]	; (8001904 <main+0x434>)
 80018a8:	f01a fb0e 	bl	801bec8 <siprintf>
		ssd1362_drawString(0, 30, (int8_t *)text, 0xF, 16);
 80018ac:	1d3a      	adds	r2, r7, #4
 80018ae:	2310      	movs	r3, #16
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	230f      	movs	r3, #15
 80018b4:	211e      	movs	r1, #30
 80018b6:	2000      	movs	r0, #0
 80018b8:	f017 fb13 	bl	8018ee2 <ssd1362_drawString>
		sprintf(text,"temp. : %d", tmp);
 80018bc:	f107 0372 	add.w	r3, r7, #114	; 0x72
 80018c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c4:	461a      	mov	r2, r3
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	490f      	ldr	r1, [pc, #60]	; (8001908 <main+0x438>)
 80018ca:	4618      	mov	r0, r3
 80018cc:	f01a fafc 	bl	801bec8 <siprintf>
		ssd1362_drawString(0, 50, (int8_t *)text, 0xF, 16);
 80018d0:	1d3a      	adds	r2, r7, #4
 80018d2:	2310      	movs	r3, #16
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	230f      	movs	r3, #15
 80018d8:	2132      	movs	r1, #50	; 0x32
 80018da:	2000      	movs	r0, #0
 80018dc:	f017 fb01 	bl	8018ee2 <ssd1362_drawString>
		ssd1362_writeFullBuffer();
 80018e0:	f017 fbce 	bl	8019080 <ssd1362_writeFullBuffer>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80018e4:	2140      	movs	r1, #64	; 0x40
 80018e6:	4809      	ldr	r0, [pc, #36]	; (800190c <main+0x43c>)
 80018e8:	f005 fe9d 	bl	8007626 <HAL_GPIO_TogglePin>
	{
 80018ec:	e78f      	b.n	800180e <main+0x33e>
 80018ee:	bf00      	nop
 80018f0:	24003d54 	.word	0x24003d54
 80018f4:	0801fac8 	.word	0x0801fac8
 80018f8:	0101a8c0 	.word	0x0101a8c0
 80018fc:	e000ed00 	.word	0xe000ed00
 8001900:	0801fae0 	.word	0x0801fae0
 8001904:	0801faf4 	.word	0x0801faf4
 8001908:	0801fb08 	.word	0x0801fb08
 800190c:	58021c00 	.word	0x58021c00

08001910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b09c      	sub	sp, #112	; 0x70
 8001914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191a:	224c      	movs	r2, #76	; 0x4c
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f019 fb6a 	bl	801aff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2220      	movs	r2, #32
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f019 fb64 	bl	801aff8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001930:	2004      	movs	r0, #4
 8001932:	f005 fec1 	bl	80076b8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <SystemClock_Config+0x100>)
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	4a34      	ldr	r2, [pc, #208]	; (8001a10 <SystemClock_Config+0x100>)
 8001940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001944:	6193      	str	r3, [r2, #24]
 8001946:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <SystemClock_Config+0x100>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <SystemClock_Config+0x104>)
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	4a2f      	ldr	r2, [pc, #188]	; (8001a14 <SystemClock_Config+0x104>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800195c:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <SystemClock_Config+0x104>)
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001968:	bf00      	nop
 800196a:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <SystemClock_Config+0x100>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001976:	d1f8      	bne.n	800196a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <SystemClock_Config+0x108>)
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	f023 0303 	bic.w	r3, r3, #3
 8001980:	4a25      	ldr	r2, [pc, #148]	; (8001a18 <SystemClock_Config+0x108>)
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001988:	2321      	movs	r3, #33	; 0x21
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800198c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001992:	2301      	movs	r3, #1
 8001994:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001996:	2302      	movs	r3, #2
 8001998:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800199a:	2302      	movs	r3, #2
 800199c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800199e:	2305      	movs	r3, #5
 80019a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 80019a2:	23c0      	movs	r3, #192	; 0xc0
 80019a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019a6:	2302      	movs	r3, #2
 80019a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80019aa:	2308      	movs	r3, #8
 80019ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 80019ae:	2308      	movs	r3, #8
 80019b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80019b2:	2308      	movs	r3, #8
 80019b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c2:	4618      	mov	r0, r3
 80019c4:	f005 fed2 	bl	800776c <HAL_RCC_OscConfig>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019ce:	f000 f891 	bl	8001af4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d2:	233f      	movs	r3, #63	; 0x3f
 80019d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d6:	2303      	movs	r3, #3
 80019d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80019de:	2308      	movs	r3, #8
 80019e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80019e2:	2340      	movs	r3, #64	; 0x40
 80019e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80019e6:	2340      	movs	r3, #64	; 0x40
 80019e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80019ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80019f0:	2340      	movs	r3, #64	; 0x40
 80019f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	2104      	movs	r1, #4
 80019f8:	4618      	mov	r0, r3
 80019fa:	f006 fac7 	bl	8007f8c <HAL_RCC_ClockConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001a04:	f000 f876 	bl	8001af4 <Error_Handler>
  }
}
 8001a08:	bf00      	nop
 8001a0a:	3770      	adds	r7, #112	; 0x70
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	58024800 	.word	0x58024800
 8001a14:	58000400 	.word	0x58000400
 8001a18:	58024400 	.word	0x58024400

08001a1c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b0b0      	sub	sp, #192	; 0xc0
 8001a20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	22bc      	movs	r2, #188	; 0xbc
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f019 fae5 	bl	801aff8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a2e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a32:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 6;
 8001a34:	2306      	movs	r3, #6
 8001a36:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8001a38:	23c0      	movs	r3, #192	; 0xc0
 8001a3a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 10;
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8001a40:	230a      	movs	r3, #10
 8001a42:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 10;
 8001a44:	230a      	movs	r3, #10
 8001a46:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f006 fe21 	bl	80086a4 <HAL_RCCEx_PeriphCLKConfig>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8001a68:	f000 f844 	bl	8001af4 <Error_Handler>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	37c0      	adds	r7, #192	; 0xc0
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a86:	f002 faff 	bl	8004088 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <MPU_Config+0x78>)
 8001a94:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001a96:	2307      	movs	r3, #7
 8001a98:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fb1d 	bl	80040f8 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <MPU_Config+0x7c>)
 8001ac4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001ac6:	230d      	movs	r3, #13
 8001ac8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 fb0d 	bl	80040f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001ade:	2004      	movs	r0, #4
 8001ae0:	f002 faea 	bl	80040b8 <HAL_MPU_Enable>

}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	30040000 	.word	0x30040000
 8001af0:	30044000 	.word	0x30044000

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001afc:	e7fe      	b.n	8001afc <Error_Handler+0x8>
	...

08001b00 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <MX_RNG_Init+0x24>)
 8001b06:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <MX_RNG_Init+0x28>)
 8001b08:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <MX_RNG_Init+0x24>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001b10:	4804      	ldr	r0, [pc, #16]	; (8001b24 <MX_RNG_Init+0x24>)
 8001b12:	f008 ff4d 	bl	800a9b0 <HAL_RNG_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001b1c:	f7ff ffea 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	24003d54 	.word	0x24003d54
 8001b28:	48021800 	.word	0x48021800

08001b2c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b0b2      	sub	sp, #200	; 0xc8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	22bc      	movs	r2, #188	; 0xbc
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f019 fa5b 	bl	801aff8 <memset>
  if(rngHandle->Instance==RNG)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <HAL_RNG_MspInit+0x68>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d11e      	bne.n	8001b8a <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b50:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f006 fda1 	bl	80086a4 <HAL_RCCEx_PeriphCLKConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001b68:	f7ff ffc4 	bl	8001af4 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_RNG_MspInit+0x6c>)
 8001b6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <HAL_RNG_MspInit+0x6c>)
 8001b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b78:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_RNG_MspInit+0x6c>)
 8001b7e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	37c8      	adds	r7, #200	; 0xc8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	48021800 	.word	0x48021800
 8001b98:	58024400 	.word	0x58024400

08001b9c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001ba2:	4a28      	ldr	r2, [pc, #160]	; (8001c44 <MX_SPI2_Init+0xa8>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001ba8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001bac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bae:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001bc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bcc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001bd0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001bd4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bdc:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001be8:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001bee:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_SPI2_Init+0xa4>)
 8001c2c:	f009 f90a 	bl	800ae44 <HAL_SPI_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001c36:	f7ff ff5d 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	24003e78 	.word	0x24003e78
 8001c44:	40003800 	.word	0x40003800

08001c48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b0ba      	sub	sp, #232	; 0xe8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c60:	f107 0318 	add.w	r3, r7, #24
 8001c64:	22bc      	movs	r2, #188	; 0xbc
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f019 f9c5 	bl	801aff8 <memset>
  if(spiHandle->Instance==SPI2)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a40      	ldr	r2, [pc, #256]	; (8001d74 <HAL_SPI_MspInit+0x12c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d178      	bne.n	8001d6a <HAL_SPI_MspInit+0x122>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8001c7e:	2305      	movs	r3, #5
 8001c80:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001c82:	23c0      	movs	r3, #192	; 0xc0
 8001c84:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 8;
 8001c86:	2308      	movs	r3, #8
 8001c88:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001c92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c96:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0.0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca6:	f107 0318 	add.w	r3, r7, #24
 8001caa:	4618      	mov	r0, r3
 8001cac:	f006 fcfa 	bl	80086a4 <HAL_RCCEx_PeriphCLKConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_SPI_MspInit+0x72>
    {
      Error_Handler();
 8001cb6:	f7ff ff1d 	bl	8001af4 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cba:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <HAL_SPI_MspInit+0x130>)
 8001cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cc0:	4a2d      	ldr	r2, [pc, #180]	; (8001d78 <HAL_SPI_MspInit+0x130>)
 8001cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_SPI_MspInit+0x130>)
 8001ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_SPI_MspInit+0x130>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	4a26      	ldr	r2, [pc, #152]	; (8001d78 <HAL_SPI_MspInit+0x130>)
 8001ce0:	f043 0308 	orr.w	r3, r3, #8
 8001ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce8:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <HAL_SPI_MspInit+0x130>)
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_SPI_MspInit+0x130>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <HAL_SPI_MspInit+0x130>)
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <HAL_SPI_MspInit+0x130>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d14:	2308      	movs	r3, #8
 8001d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d2c:	2305      	movs	r3, #5
 8001d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d32:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4810      	ldr	r0, [pc, #64]	; (8001d7c <HAL_SPI_MspInit+0x134>)
 8001d3a:	f005 faab 	bl	8007294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8001d3e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d58:	2305      	movs	r3, #5
 8001d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d62:	4619      	mov	r1, r3
 8001d64:	4806      	ldr	r0, [pc, #24]	; (8001d80 <HAL_SPI_MspInit+0x138>)
 8001d66:	f005 fa95 	bl	8007294 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	37e8      	adds	r7, #232	; 0xe8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40003800 	.word	0x40003800
 8001d78:	58024400 	.word	0x58024400
 8001d7c:	58020c00 	.word	0x58020c00
 8001d80:	58020400 	.word	0x58020400

08001d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_MspInit+0x30>)
 8001d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d90:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_MspInit+0x30>)
 8001d92:	f043 0302 	orr.w	r3, r3, #2
 8001d96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_MspInit+0x30>)
 8001d9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	58024400 	.word	0x58024400

08001db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <NMI_Handler+0x4>

08001dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <HardFault_Handler+0x4>

08001dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <MemManage_Handler+0x4>

08001dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <BusFault_Handler+0x4>

08001dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <UsageFault_Handler+0x4>

08001dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e04:	f000 ff18 	bl	8002c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <DMA1_Stream0_IRQHandler+0x10>)
 8001e12:	f002 fd1d 	bl	8004850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	24003d68 	.word	0x24003d68

08001e20 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <ETH_IRQHandler+0x10>)
 8001e26:	f004 f845 	bl	8005eb4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2400424c 	.word	0x2400424c

08001e34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
	return 1;
 8001e38:	2301      	movs	r3, #1
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_kill>:

int _kill(int pid, int sig)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <_kill+0x20>)
 8001e50:	2216      	movs	r2, #22
 8001e52:	601a      	str	r2, [r3, #0]
	return -1;
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	24009a68 	.word	0x24009a68

08001e68 <_exit>:

void _exit (int status)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ffe5 	bl	8001e44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e7a:	e7fe      	b.n	8001e7a <_exit+0x12>

08001e7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	e00a      	b.n	8001ea4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e8e:	f3af 8000 	nop.w
 8001e92:	4601      	mov	r1, r0
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	60ba      	str	r2, [r7, #8]
 8001e9a:	b2ca      	uxtb	r2, r1
 8001e9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	dbf0      	blt.n	8001e8e <_read+0x12>
	}

return len;
 8001eac:	687b      	ldr	r3, [r7, #4]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e009      	b.n	8001edc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	60ba      	str	r2, [r7, #8]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dbf1      	blt.n	8001ec8 <_write+0x12>
	}
	return len;
 8001ee4:	687b      	ldr	r3, [r7, #4]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_close>:

int _close(int file)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f16:	605a      	str	r2, [r3, #4]
	return 0;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <_isatty>:

int _isatty(int file)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
	return 0;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d205      	bcs.n	8001f94 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <_sbrk+0x6c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f92:	e009      	b.n	8001fa8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <_sbrk+0x64>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a06      	ldr	r2, [pc, #24]	; (8001fbc <_sbrk+0x64>)
 8001fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	24080000 	.word	0x24080000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	24003a38 	.word	0x24003a38
 8001fc0:	24009a78 	.word	0x24009a78
 8001fc4:	24009a68 	.word	0x24009a68

08001fc8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b096      	sub	sp, #88	; 0x58
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	615a      	str	r2, [r3, #20]
 8001fec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	222c      	movs	r2, #44	; 0x2c
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f018 ffff 	bl	801aff8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ffa:	4b39      	ldr	r3, [pc, #228]	; (80020e0 <MX_TIM1_Init+0x118>)
 8001ffc:	4a39      	ldr	r2, [pc, #228]	; (80020e4 <MX_TIM1_Init+0x11c>)
 8001ffe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002000:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <MX_TIM1_Init+0x118>)
 8002002:	2200      	movs	r2, #0
 8002004:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002006:	4b36      	ldr	r3, [pc, #216]	; (80020e0 <MX_TIM1_Init+0x118>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800200c:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <MX_TIM1_Init+0x118>)
 800200e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002012:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002014:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <MX_TIM1_Init+0x118>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800201a:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <MX_TIM1_Init+0x118>)
 800201c:	2200      	movs	r2, #0
 800201e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002020:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <MX_TIM1_Init+0x118>)
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002026:	482e      	ldr	r0, [pc, #184]	; (80020e0 <MX_TIM1_Init+0x118>)
 8002028:	f00a f86a 	bl	800c100 <HAL_TIM_OC_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002032:	f7ff fd5f 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002042:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002046:	4619      	mov	r1, r3
 8002048:	4825      	ldr	r0, [pc, #148]	; (80020e0 <MX_TIM1_Init+0x118>)
 800204a:	f00a fc8f 	bl	800c96c <HAL_TIMEx_MasterConfigSynchronization>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002054:	f7ff fd4e 	bl	8001af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002060:	2300      	movs	r3, #0
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002064:	2300      	movs	r3, #0
 8002066:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800206c:	2300      	movs	r3, #0
 800206e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002070:	2300      	movs	r3, #0
 8002072:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002074:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002078:	2204      	movs	r2, #4
 800207a:	4619      	mov	r1, r3
 800207c:	4818      	ldr	r0, [pc, #96]	; (80020e0 <MX_TIM1_Init+0x118>)
 800207e:	f00a f897 	bl	800c1b0 <HAL_TIM_OC_ConfigChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002088:	f7ff fd34 	bl	8001af4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	4619      	mov	r1, r3
 80020c0:	4807      	ldr	r0, [pc, #28]	; (80020e0 <MX_TIM1_Init+0x118>)
 80020c2:	f00a fcdb 	bl	800ca7c <HAL_TIMEx_ConfigBreakDeadTime>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80020cc:	f7ff fd12 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020d0:	4803      	ldr	r0, [pc, #12]	; (80020e0 <MX_TIM1_Init+0x118>)
 80020d2:	f000 fa25 	bl	8002520 <HAL_TIM_MspPostInit>

}
 80020d6:	bf00      	nop
 80020d8:	3758      	adds	r7, #88	; 0x58
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	24004030 	.word	0x24004030
 80020e4:	40010000 	.word	0x40010000

080020e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	; 0x28
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ee:	f107 031c 	add.w	r3, r7, #28
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020fa:	463b      	mov	r3, r7
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
 8002108:	615a      	str	r2, [r3, #20]
 800210a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800210c:	4b21      	ldr	r3, [pc, #132]	; (8002194 <MX_TIM3_Init+0xac>)
 800210e:	4a22      	ldr	r2, [pc, #136]	; (8002198 <MX_TIM3_Init+0xb0>)
 8002110:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <MX_TIM3_Init+0xac>)
 8002114:	2200      	movs	r2, #0
 8002116:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002118:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <MX_TIM3_Init+0xac>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800211e:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <MX_TIM3_Init+0xac>)
 8002120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002124:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002126:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <MX_TIM3_Init+0xac>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <MX_TIM3_Init+0xac>)
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002132:	4818      	ldr	r0, [pc, #96]	; (8002194 <MX_TIM3_Init+0xac>)
 8002134:	f009 ffe4 	bl	800c100 <HAL_TIM_OC_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800213e:	f7ff fcd9 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	4619      	mov	r1, r3
 8002150:	4810      	ldr	r0, [pc, #64]	; (8002194 <MX_TIM3_Init+0xac>)
 8002152:	f00a fc0b 	bl	800c96c <HAL_TIMEx_MasterConfigSynchronization>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800215c:	f7ff fcca 	bl	8001af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002160:	2300      	movs	r3, #0
 8002162:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002170:	463b      	mov	r3, r7
 8002172:	2200      	movs	r2, #0
 8002174:	4619      	mov	r1, r3
 8002176:	4807      	ldr	r0, [pc, #28]	; (8002194 <MX_TIM3_Init+0xac>)
 8002178:	f00a f81a 	bl	800c1b0 <HAL_TIM_OC_ConfigChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002182:	f7ff fcb7 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002186:	4803      	ldr	r0, [pc, #12]	; (8002194 <MX_TIM3_Init+0xac>)
 8002188:	f000 f9ca 	bl	8002520 <HAL_TIM_MspPostInit>

}
 800218c:	bf00      	nop
 800218e:	3728      	adds	r7, #40	; 0x28
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	24003fe4 	.word	0x24003fe4
 8002198:	40000400 	.word	0x40000400

0800219c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ae:	463b      	mov	r3, r7
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
 80021bc:	615a      	str	r2, [r3, #20]
 80021be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <MX_TIM4_Init+0xac>)
 80021c2:	4a22      	ldr	r2, [pc, #136]	; (800224c <MX_TIM4_Init+0xb0>)
 80021c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <MX_TIM4_Init+0xac>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021cc:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <MX_TIM4_Init+0xac>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <MX_TIM4_Init+0xac>)
 80021d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021da:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <MX_TIM4_Init+0xac>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <MX_TIM4_Init+0xac>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80021e6:	4818      	ldr	r0, [pc, #96]	; (8002248 <MX_TIM4_Init+0xac>)
 80021e8:	f009 ff8a 	bl	800c100 <HAL_TIM_OC_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80021f2:	f7ff fc7f 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	4619      	mov	r1, r3
 8002204:	4810      	ldr	r0, [pc, #64]	; (8002248 <MX_TIM4_Init+0xac>)
 8002206:	f00a fbb1 	bl	800c96c <HAL_TIMEx_MasterConfigSynchronization>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002210:	f7ff fc70 	bl	8001af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002214:	2300      	movs	r3, #0
 8002216:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800221c:	2300      	movs	r3, #0
 800221e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002224:	463b      	mov	r3, r7
 8002226:	2204      	movs	r2, #4
 8002228:	4619      	mov	r1, r3
 800222a:	4807      	ldr	r0, [pc, #28]	; (8002248 <MX_TIM4_Init+0xac>)
 800222c:	f009 ffc0 	bl	800c1b0 <HAL_TIM_OC_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002236:	f7ff fc5d 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800223a:	4803      	ldr	r0, [pc, #12]	; (8002248 <MX_TIM4_Init+0xac>)
 800223c:	f000 f970 	bl	8002520 <HAL_TIM_MspPostInit>

}
 8002240:	bf00      	nop
 8002242:	3728      	adds	r7, #40	; 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	24003f4c 	.word	0x24003f4c
 800224c:	40000800 	.word	0x40000800

08002250 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002262:	463b      	mov	r3, r7
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
 8002270:	615a      	str	r2, [r3, #20]
 8002272:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <MX_TIM5_Init+0xac>)
 8002276:	4a22      	ldr	r2, [pc, #136]	; (8002300 <MX_TIM5_Init+0xb0>)
 8002278:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800227a:	4b20      	ldr	r3, [pc, #128]	; (80022fc <MX_TIM5_Init+0xac>)
 800227c:	2200      	movs	r2, #0
 800227e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <MX_TIM5_Init+0xac>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <MX_TIM5_Init+0xac>)
 8002288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800228c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <MX_TIM5_Init+0xac>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <MX_TIM5_Init+0xac>)
 8002296:	2200      	movs	r2, #0
 8002298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800229a:	4818      	ldr	r0, [pc, #96]	; (80022fc <MX_TIM5_Init+0xac>)
 800229c:	f009 ff30 	bl	800c100 <HAL_TIM_OC_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80022a6:	f7ff fc25 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	4619      	mov	r1, r3
 80022b8:	4810      	ldr	r0, [pc, #64]	; (80022fc <MX_TIM5_Init+0xac>)
 80022ba:	f00a fb57 	bl	800c96c <HAL_TIMEx_MasterConfigSynchronization>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80022c4:	f7ff fc16 	bl	8001af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80022c8:	2300      	movs	r3, #0
 80022ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022d8:	463b      	mov	r3, r7
 80022da:	2208      	movs	r2, #8
 80022dc:	4619      	mov	r1, r3
 80022de:	4807      	ldr	r0, [pc, #28]	; (80022fc <MX_TIM5_Init+0xac>)
 80022e0:	f009 ff66 	bl	800c1b0 <HAL_TIM_OC_ConfigChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80022ea:	f7ff fc03 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80022ee:	4803      	ldr	r0, [pc, #12]	; (80022fc <MX_TIM5_Init+0xac>)
 80022f0:	f000 f916 	bl	8002520 <HAL_TIM_MspPostInit>

}
 80022f4:	bf00      	nop
 80022f6:	3728      	adds	r7, #40	; 0x28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	24003f98 	.word	0x24003f98
 8002300:	40000c00 	.word	0x40000c00

08002304 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b096      	sub	sp, #88	; 0x58
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002316:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	60da      	str	r2, [r3, #12]
 8002324:	611a      	str	r2, [r3, #16]
 8002326:	615a      	str	r2, [r3, #20]
 8002328:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	222c      	movs	r2, #44	; 0x2c
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f018 fe61 	bl	801aff8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002336:	4b39      	ldr	r3, [pc, #228]	; (800241c <MX_TIM8_Init+0x118>)
 8002338:	4a39      	ldr	r2, [pc, #228]	; (8002420 <MX_TIM8_Init+0x11c>)
 800233a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <MX_TIM8_Init+0x118>)
 800233e:	2200      	movs	r2, #0
 8002340:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <MX_TIM8_Init+0x118>)
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002348:	4b34      	ldr	r3, [pc, #208]	; (800241c <MX_TIM8_Init+0x118>)
 800234a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800234e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002350:	4b32      	ldr	r3, [pc, #200]	; (800241c <MX_TIM8_Init+0x118>)
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002356:	4b31      	ldr	r3, [pc, #196]	; (800241c <MX_TIM8_Init+0x118>)
 8002358:	2200      	movs	r2, #0
 800235a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235c:	4b2f      	ldr	r3, [pc, #188]	; (800241c <MX_TIM8_Init+0x118>)
 800235e:	2200      	movs	r2, #0
 8002360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8002362:	482e      	ldr	r0, [pc, #184]	; (800241c <MX_TIM8_Init+0x118>)
 8002364:	f009 fecc 	bl	800c100 <HAL_TIM_OC_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800236e:	f7ff fbc1 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002372:	2300      	movs	r3, #0
 8002374:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800237e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002382:	4619      	mov	r1, r3
 8002384:	4825      	ldr	r0, [pc, #148]	; (800241c <MX_TIM8_Init+0x118>)
 8002386:	f00a faf1 	bl	800c96c <HAL_TIMEx_MasterConfigSynchronization>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8002390:	f7ff fbb0 	bl	8001af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002394:	2300      	movs	r3, #0
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800239c:	2300      	movs	r3, #0
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023a0:	2300      	movs	r3, #0
 80023a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023a8:	2300      	movs	r3, #0
 80023aa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023ac:	2300      	movs	r3, #0
 80023ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023b4:	2208      	movs	r2, #8
 80023b6:	4619      	mov	r1, r3
 80023b8:	4818      	ldr	r0, [pc, #96]	; (800241c <MX_TIM8_Init+0x118>)
 80023ba:	f009 fef9 	bl	800c1b0 <HAL_TIM_OC_ConfigChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80023c4:	f7ff fb96 	bl	8001af4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	4619      	mov	r1, r3
 80023fc:	4807      	ldr	r0, [pc, #28]	; (800241c <MX_TIM8_Init+0x118>)
 80023fe:	f00a fb3d 	bl	800ca7c <HAL_TIMEx_ConfigBreakDeadTime>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002408:	f7ff fb74 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800240c:	4803      	ldr	r0, [pc, #12]	; (800241c <MX_TIM8_Init+0x118>)
 800240e:	f000 f887 	bl	8002520 <HAL_TIM_MspPostInit>

}
 8002412:	bf00      	nop
 8002414:	3758      	adds	r7, #88	; 0x58
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	24003f00 	.word	0x24003f00
 8002420:	40010400 	.word	0x40010400

08002424 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a35      	ldr	r2, [pc, #212]	; (8002508 <HAL_TIM_OC_MspInit+0xe4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d10f      	bne.n	8002456 <HAL_TIM_OC_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002436:	4b35      	ldr	r3, [pc, #212]	; (800250c <HAL_TIM_OC_MspInit+0xe8>)
 8002438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800243c:	4a33      	ldr	r2, [pc, #204]	; (800250c <HAL_TIM_OC_MspInit+0xe8>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002446:	4b31      	ldr	r3, [pc, #196]	; (800250c <HAL_TIM_OC_MspInit+0xe8>)
 8002448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002454:	e052      	b.n	80024fc <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM3)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a2d      	ldr	r2, [pc, #180]	; (8002510 <HAL_TIM_OC_MspInit+0xec>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d10f      	bne.n	8002480 <HAL_TIM_OC_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_TIM_OC_MspInit+0xe8>)
 8002462:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002466:	4a29      	ldr	r2, [pc, #164]	; (800250c <HAL_TIM_OC_MspInit+0xe8>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002470:	4b26      	ldr	r3, [pc, #152]	; (800250c <HAL_TIM_OC_MspInit+0xe8>)
 8002472:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	61bb      	str	r3, [r7, #24]
 800247c:	69bb      	ldr	r3, [r7, #24]
}
 800247e:	e03d      	b.n	80024fc <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM4)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a23      	ldr	r2, [pc, #140]	; (8002514 <HAL_TIM_OC_MspInit+0xf0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10f      	bne.n	80024aa <HAL_TIM_OC_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_TIM_OC_MspInit+0xe8>)
 800248c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002490:	4a1e      	ldr	r2, [pc, #120]	; (800250c <HAL_TIM_OC_MspInit+0xe8>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800249a:	4b1c      	ldr	r3, [pc, #112]	; (800250c <HAL_TIM_OC_MspInit+0xe8>)
 800249c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	697b      	ldr	r3, [r7, #20]
}
 80024a8:	e028      	b.n	80024fc <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM5)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <HAL_TIM_OC_MspInit+0xf4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d10f      	bne.n	80024d4 <HAL_TIM_OC_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_TIM_OC_MspInit+0xe8>)
 80024b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024ba:	4a14      	ldr	r2, [pc, #80]	; (800250c <HAL_TIM_OC_MspInit+0xe8>)
 80024bc:	f043 0308 	orr.w	r3, r3, #8
 80024c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_TIM_OC_MspInit+0xe8>)
 80024c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]
}
 80024d2:	e013      	b.n	80024fc <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM8)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_TIM_OC_MspInit+0xf8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d10e      	bne.n	80024fc <HAL_TIM_OC_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_TIM_OC_MspInit+0xe8>)
 80024e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024e4:	4a09      	ldr	r2, [pc, #36]	; (800250c <HAL_TIM_OC_MspInit+0xe8>)
 80024e6:	f043 0302 	orr.w	r3, r3, #2
 80024ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <HAL_TIM_OC_MspInit+0xe8>)
 80024f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	bf00      	nop
 80024fe:	3724      	adds	r7, #36	; 0x24
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	40010000 	.word	0x40010000
 800250c:	58024400 	.word	0x58024400
 8002510:	40000400 	.word	0x40000400
 8002514:	40000800 	.word	0x40000800
 8002518:	40000c00 	.word	0x40000c00
 800251c:	40010400 	.word	0x40010400

08002520 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a5e      	ldr	r2, [pc, #376]	; (80026b8 <HAL_TIM_MspPostInit+0x198>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d120      	bne.n	8002584 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	4b5e      	ldr	r3, [pc, #376]	; (80026bc <HAL_TIM_MspPostInit+0x19c>)
 8002544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002548:	4a5c      	ldr	r2, [pc, #368]	; (80026bc <HAL_TIM_MspPostInit+0x19c>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002552:	4b5a      	ldr	r3, [pc, #360]	; (80026bc <HAL_TIM_MspPostInit+0x19c>)
 8002554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CIS_CP_Pin;
 8002560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002566:	2302      	movs	r3, #2
 8002568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2300      	movs	r3, #0
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002572:	2301      	movs	r3, #1
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_CP_GPIO_Port, &GPIO_InitStruct);
 8002576:	f107 031c 	add.w	r3, r7, #28
 800257a:	4619      	mov	r1, r3
 800257c:	4850      	ldr	r0, [pc, #320]	; (80026c0 <HAL_TIM_MspPostInit+0x1a0>)
 800257e:	f004 fe89 	bl	8007294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002582:	e095      	b.n	80026b0 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM3)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a4e      	ldr	r2, [pc, #312]	; (80026c4 <HAL_TIM_MspPostInit+0x1a4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d11f      	bne.n	80025ce <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258e:	4b4b      	ldr	r3, [pc, #300]	; (80026bc <HAL_TIM_MspPostInit+0x19c>)
 8002590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002594:	4a49      	ldr	r2, [pc, #292]	; (80026bc <HAL_TIM_MspPostInit+0x19c>)
 8002596:	f043 0304 	orr.w	r3, r3, #4
 800259a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800259e:	4b47      	ldr	r3, [pc, #284]	; (80026bc <HAL_TIM_MspPostInit+0x19c>)
 80025a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = CIS_VLED_R_Pin;
 80025ac:	2340      	movs	r3, #64	; 0x40
 80025ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025bc:	2302      	movs	r3, #2
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_R_GPIO_Port, &GPIO_InitStruct);
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	4619      	mov	r1, r3
 80025c6:	4840      	ldr	r0, [pc, #256]	; (80026c8 <HAL_TIM_MspPostInit+0x1a8>)
 80025c8:	f004 fe64 	bl	8007294 <HAL_GPIO_Init>
}
 80025cc:	e070      	b.n	80026b0 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM4)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a3e      	ldr	r2, [pc, #248]	; (80026cc <HAL_TIM_MspPostInit+0x1ac>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d120      	bne.n	800261a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d8:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_TIM_MspPostInit+0x19c>)
 80025da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025de:	4a37      	ldr	r2, [pc, #220]	; (80026bc <HAL_TIM_MspPostInit+0x19c>)
 80025e0:	f043 0308 	orr.w	r3, r3, #8
 80025e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025e8:	4b34      	ldr	r3, [pc, #208]	; (80026bc <HAL_TIM_MspPostInit+0x19c>)
 80025ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CIS_VLED_G_Pin;
 80025f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002608:	2302      	movs	r3, #2
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_G_GPIO_Port, &GPIO_InitStruct);
 800260c:	f107 031c 	add.w	r3, r7, #28
 8002610:	4619      	mov	r1, r3
 8002612:	482f      	ldr	r0, [pc, #188]	; (80026d0 <HAL_TIM_MspPostInit+0x1b0>)
 8002614:	f004 fe3e 	bl	8007294 <HAL_GPIO_Init>
}
 8002618:	e04a      	b.n	80026b0 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM5)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a2d      	ldr	r2, [pc, #180]	; (80026d4 <HAL_TIM_MspPostInit+0x1b4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d120      	bne.n	8002666 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <HAL_TIM_MspPostInit+0x19c>)
 8002626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800262a:	4a24      	ldr	r2, [pc, #144]	; (80026bc <HAL_TIM_MspPostInit+0x19c>)
 800262c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002634:	4b21      	ldr	r3, [pc, #132]	; (80026bc <HAL_TIM_MspPostInit+0x19c>)
 8002636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CIS_VLED_B_Pin;
 8002642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002650:	2300      	movs	r3, #0
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002654:	2302      	movs	r3, #2
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_B_GPIO_Port, &GPIO_InitStruct);
 8002658:	f107 031c 	add.w	r3, r7, #28
 800265c:	4619      	mov	r1, r3
 800265e:	481e      	ldr	r0, [pc, #120]	; (80026d8 <HAL_TIM_MspPostInit+0x1b8>)
 8002660:	f004 fe18 	bl	8007294 <HAL_GPIO_Init>
}
 8002664:	e024      	b.n	80026b0 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM8)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1c      	ldr	r2, [pc, #112]	; (80026dc <HAL_TIM_MspPostInit+0x1bc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d11f      	bne.n	80026b0 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_TIM_MspPostInit+0x19c>)
 8002672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002676:	4a11      	ldr	r2, [pc, #68]	; (80026bc <HAL_TIM_MspPostInit+0x19c>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <HAL_TIM_MspPostInit+0x19c>)
 8002682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CIS_SP_Pin;
 800268e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026a0:	2303      	movs	r3, #3
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_SP_GPIO_Port, &GPIO_InitStruct);
 80026a4:	f107 031c 	add.w	r3, r7, #28
 80026a8:	4619      	mov	r1, r3
 80026aa:	4807      	ldr	r0, [pc, #28]	; (80026c8 <HAL_TIM_MspPostInit+0x1a8>)
 80026ac:	f004 fdf2 	bl	8007294 <HAL_GPIO_Init>
}
 80026b0:	bf00      	nop
 80026b2:	3730      	adds	r7, #48	; 0x30
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40010000 	.word	0x40010000
 80026bc:	58024400 	.word	0x58024400
 80026c0:	58020000 	.word	0x58020000
 80026c4:	40000400 	.word	0x40000400
 80026c8:	58020800 	.word	0x58020800
 80026cc:	40000800 	.word	0x40000800
 80026d0:	58020c00 	.word	0x58020c00
 80026d4:	40000c00 	.word	0x40000c00
 80026d8:	58021c00 	.word	0x58021c00
 80026dc:	40010400 	.word	0x40010400

080026e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026e4:	4b22      	ldr	r3, [pc, #136]	; (8002770 <MX_USART1_UART_Init+0x90>)
 80026e6:	4a23      	ldr	r2, [pc, #140]	; (8002774 <MX_USART1_UART_Init+0x94>)
 80026e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026ea:	4b21      	ldr	r3, [pc, #132]	; (8002770 <MX_USART1_UART_Init+0x90>)
 80026ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026f2:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <MX_USART1_UART_Init+0x90>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026f8:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <MX_USART1_UART_Init+0x90>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <MX_USART1_UART_Init+0x90>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002704:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <MX_USART1_UART_Init+0x90>)
 8002706:	220c      	movs	r2, #12
 8002708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <MX_USART1_UART_Init+0x90>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002710:	4b17      	ldr	r3, [pc, #92]	; (8002770 <MX_USART1_UART_Init+0x90>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002716:	4b16      	ldr	r3, [pc, #88]	; (8002770 <MX_USART1_UART_Init+0x90>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800271c:	4b14      	ldr	r3, [pc, #80]	; (8002770 <MX_USART1_UART_Init+0x90>)
 800271e:	2200      	movs	r2, #0
 8002720:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002722:	4b13      	ldr	r3, [pc, #76]	; (8002770 <MX_USART1_UART_Init+0x90>)
 8002724:	2200      	movs	r2, #0
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002728:	4811      	ldr	r0, [pc, #68]	; (8002770 <MX_USART1_UART_Init+0x90>)
 800272a:	f00a fa25 	bl	800cb78 <HAL_UART_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002734:	f7ff f9de 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002738:	2100      	movs	r1, #0
 800273a:	480d      	ldr	r0, [pc, #52]	; (8002770 <MX_USART1_UART_Init+0x90>)
 800273c:	f00b f972 	bl	800da24 <HAL_UARTEx_SetTxFifoThreshold>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002746:	f7ff f9d5 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800274a:	2100      	movs	r1, #0
 800274c:	4808      	ldr	r0, [pc, #32]	; (8002770 <MX_USART1_UART_Init+0x90>)
 800274e:	f00b f9a7 	bl	800daa0 <HAL_UARTEx_SetRxFifoThreshold>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002758:	f7ff f9cc 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800275c:	4804      	ldr	r0, [pc, #16]	; (8002770 <MX_USART1_UART_Init+0x90>)
 800275e:	f00b f928 	bl	800d9b2 <HAL_UARTEx_DisableFifoMode>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002768:	f7ff f9c4 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}
 8002770:	2400407c 	.word	0x2400407c
 8002774:	40011000 	.word	0x40011000

08002778 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b0b8      	sub	sp, #224	; 0xe0
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	22bc      	movs	r2, #188	; 0xbc
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f018 fc2d 	bl	801aff8 <memset>
  if(uartHandle->Instance==USART1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a24      	ldr	r2, [pc, #144]	; (8002834 <HAL_UART_MspInit+0xbc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d141      	bne.n	800282c <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027a8:	2301      	movs	r3, #1
 80027aa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b2:	f107 0310 	add.w	r3, r7, #16
 80027b6:	4618      	mov	r0, r3
 80027b8:	f005 ff74 	bl	80086a4 <HAL_RCCEx_PeriphCLKConfig>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027c2:	f7ff f997 	bl	8001af4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <HAL_UART_MspInit+0xc0>)
 80027c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027cc:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <HAL_UART_MspInit+0xc0>)
 80027ce:	f043 0310 	orr.w	r3, r3, #16
 80027d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027d6:	4b18      	ldr	r3, [pc, #96]	; (8002838 <HAL_UART_MspInit+0xc0>)
 80027d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e4:	4b14      	ldr	r3, [pc, #80]	; (8002838 <HAL_UART_MspInit+0xc0>)
 80027e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ea:	4a13      	ldr	r2, [pc, #76]	; (8002838 <HAL_UART_MspInit+0xc0>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027f4:	4b10      	ldr	r3, [pc, #64]	; (8002838 <HAL_UART_MspInit+0xc0>)
 80027f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002802:	23c0      	movs	r3, #192	; 0xc0
 8002804:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002814:	2300      	movs	r3, #0
 8002816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800281a:	2307      	movs	r3, #7
 800281c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002824:	4619      	mov	r1, r3
 8002826:	4805      	ldr	r0, [pc, #20]	; (800283c <HAL_UART_MspInit+0xc4>)
 8002828:	f004 fd34 	bl	8007294 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800282c:	bf00      	nop
 800282e:	37e0      	adds	r7, #224	; 0xe0
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40011000 	.word	0x40011000
 8002838:	58024400 	.word	0x58024400
 800283c:	58020400 	.word	0x58020400

08002840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002878 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002844:	f7fe f914 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002848:	480c      	ldr	r0, [pc, #48]	; (800287c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800284a:	490d      	ldr	r1, [pc, #52]	; (8002880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002860:	4c0a      	ldr	r4, [pc, #40]	; (800288c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800286e:	f018 fb61 	bl	801af34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002872:	f7fe fe2d 	bl	80014d0 <main>
  bx  lr
 8002876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002878:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800287c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002880:	24003a10 	.word	0x24003a10
  ldr r2, =_sidata
 8002884:	08023048 	.word	0x08023048
  ldr r2, =_sbss
 8002888:	24003a10 	.word	0x24003a10
  ldr r4, =_ebss
 800288c:	24009a78 	.word	0x24009a78

08002890 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC3_IRQHandler>

08002892 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00b      	beq.n	80028ba <LAN8742_RegisterBusIO+0x28>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <LAN8742_RegisterBusIO+0x28>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <LAN8742_RegisterBusIO+0x28>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d102      	bne.n	80028c0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028be:	e014      	b.n	80028ea <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d17c      	bne.n	8002a10 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	e01c      	b.n	800296a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f107 0208 	add.w	r2, r7, #8
 8002938:	2112      	movs	r1, #18
 800293a:	6978      	ldr	r0, [r7, #20]
 800293c:	4798      	blx	r3
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	da03      	bge.n	800294c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002944:	f06f 0304 	mvn.w	r3, #4
 8002948:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800294a:	e00b      	b.n	8002964 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	429a      	cmp	r2, r3
 8002956:	d105      	bne.n	8002964 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
         break;
 8002962:	e005      	b.n	8002970 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	3301      	adds	r3, #1
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b1f      	cmp	r3, #31
 800296e:	d9df      	bls.n	8002930 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b1f      	cmp	r3, #31
 8002976:	d902      	bls.n	800297e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002978:	f06f 0302 	mvn.w	r3, #2
 800297c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d145      	bne.n	8002a10 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6810      	ldr	r0, [r2, #0]
 800298c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002990:	2100      	movs	r1, #0
 8002992:	4798      	blx	r3
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	db37      	blt.n	8002a0a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6810      	ldr	r0, [r2, #0]
 80029a2:	f107 0208 	add.w	r2, r7, #8
 80029a6:	2100      	movs	r1, #0
 80029a8:	4798      	blx	r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	db28      	blt.n	8002a02 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4798      	blx	r3
 80029b6:	4603      	mov	r3, r0
 80029b8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80029ba:	e01c      	b.n	80029f6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	4798      	blx	r3
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029ce:	d80e      	bhi.n	80029ee <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6810      	ldr	r0, [r2, #0]
 80029d8:	f107 0208 	add.w	r2, r7, #8
 80029dc:	2100      	movs	r1, #0
 80029de:	4798      	blx	r3
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	da07      	bge.n	80029f6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80029e6:	f06f 0304 	mvn.w	r3, #4
 80029ea:	613b      	str	r3, [r7, #16]
                 break;
 80029ec:	e010      	b.n	8002a10 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80029ee:	f06f 0301 	mvn.w	r3, #1
 80029f2:	613b      	str	r3, [r7, #16]
               break;
 80029f4:	e00c      	b.n	8002a10 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1dd      	bne.n	80029bc <LAN8742_Init+0xc6>
 8002a00:	e006      	b.n	8002a10 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002a02:	f06f 0304 	mvn.w	r3, #4
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	e002      	b.n	8002a10 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002a0a:	f06f 0303 	mvn.w	r3, #3
 8002a0e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d112      	bne.n	8002a3c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	4798      	blx	r3
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002a20:	bf00      	nop
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	4798      	blx	r3
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a34:	d9f5      	bls.n	8002a22 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 }
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6810      	ldr	r0, [r2, #0]
 8002a5a:	f107 020c 	add.w	r2, r7, #12
 8002a5e:	2101      	movs	r1, #1
 8002a60:	4798      	blx	r3
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da02      	bge.n	8002a6e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002a68:	f06f 0304 	mvn.w	r3, #4
 8002a6c:	e06e      	b.n	8002b4c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6810      	ldr	r0, [r2, #0]
 8002a76:	f107 020c 	add.w	r2, r7, #12
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	4798      	blx	r3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	da02      	bge.n	8002a8a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002a84:	f06f 0304 	mvn.w	r3, #4
 8002a88:	e060      	b.n	8002b4c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002a94:	2301      	movs	r3, #1
 8002a96:	e059      	b.n	8002b4c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6810      	ldr	r0, [r2, #0]
 8002aa0:	f107 020c 	add.w	r2, r7, #12
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4798      	blx	r3
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	da02      	bge.n	8002ab4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002aae:	f06f 0304 	mvn.w	r3, #4
 8002ab2:	e04b      	b.n	8002b4c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d11b      	bne.n	8002af6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d006      	beq.n	8002ad6 <LAN8742_GetLinkState+0x90>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e03a      	b.n	8002b4c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e033      	b.n	8002b4c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002aee:	2304      	movs	r3, #4
 8002af0:	e02c      	b.n	8002b4c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002af2:	2305      	movs	r3, #5
 8002af4:	e02a      	b.n	8002b4c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6810      	ldr	r0, [r2, #0]
 8002afe:	f107 020c 	add.w	r2, r7, #12
 8002b02:	211f      	movs	r1, #31
 8002b04:	4798      	blx	r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	da02      	bge.n	8002b12 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002b0c:	f06f 0304 	mvn.w	r3, #4
 8002b10:	e01c      	b.n	8002b4c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002b1c:	2306      	movs	r3, #6
 8002b1e:	e015      	b.n	8002b4c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 031c 	and.w	r3, r3, #28
 8002b26:	2b18      	cmp	r3, #24
 8002b28:	d101      	bne.n	8002b2e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e00e      	b.n	8002b4c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f003 031c 	and.w	r3, r3, #28
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d101      	bne.n	8002b3c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e007      	b.n	8002b4c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 031c 	and.w	r3, r3, #28
 8002b42:	2b14      	cmp	r3, #20
 8002b44:	d101      	bne.n	8002b4a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002b46:	2304      	movs	r3, #4
 8002b48:	e000      	b.n	8002b4c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002b4a:	2305      	movs	r3, #5
    }				
  }
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b5a:	2003      	movs	r0, #3
 8002b5c:	f001 fa54 	bl	8004008 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b60:	f005 fbca 	bl	80082f8 <HAL_RCC_GetSysClockFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_Init+0x68>)
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	4913      	ldr	r1, [pc, #76]	; (8002bc0 <HAL_Init+0x6c>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b7e:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <HAL_Init+0x68>)
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <HAL_Init+0x6c>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
 8002b94:	4a0b      	ldr	r2, [pc, #44]	; (8002bc4 <HAL_Init+0x70>)
 8002b96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b98:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <HAL_Init+0x74>)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f000 f814 	bl	8002bcc <HAL_InitTick>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e002      	b.n	8002bb4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002bae:	f7ff f8e9 	bl	8001d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	08022784 	.word	0x08022784
 8002bc4:	24000404 	.word	0x24000404
 8002bc8:	24000400 	.word	0x24000400

08002bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002bd4:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <HAL_InitTick+0x60>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e021      	b.n	8002c24 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <HAL_InitTick+0x64>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <HAL_InitTick+0x60>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	4619      	mov	r1, r3
 8002bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f001 fa39 	bl	800406e <HAL_SYSTICK_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e00e      	b.n	8002c24 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b0f      	cmp	r3, #15
 8002c0a:	d80a      	bhi.n	8002c22 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c14:	f001 fa03 	bl	800401e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c18:	4a06      	ldr	r2, [pc, #24]	; (8002c34 <HAL_InitTick+0x68>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e000      	b.n	8002c24 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	2400040c 	.word	0x2400040c
 8002c30:	24000400 	.word	0x24000400
 8002c34:	24000408 	.word	0x24000408

08002c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_IncTick+0x20>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_IncTick+0x24>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4413      	add	r3, r2
 8002c48:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <HAL_IncTick+0x24>)
 8002c4a:	6013      	str	r3, [r2, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	2400040c 	.word	0x2400040c
 8002c5c:	2400410c 	.word	0x2400410c

08002c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return uwTick;
 8002c64:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <HAL_GetTick+0x14>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	2400410c 	.word	0x2400410c

08002c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c80:	f7ff ffee 	bl	8002c60 <HAL_GetTick>
 8002c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c90:	d005      	beq.n	8002c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_Delay+0x44>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c9e:	bf00      	nop
 8002ca0:	f7ff ffde 	bl	8002c60 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d8f7      	bhi.n	8002ca0 <HAL_Delay+0x28>
  {
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	2400040c 	.word	0x2400040c

08002cc0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <HAL_GetREVID+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	0c1b      	lsrs	r3, r3, #16
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	5c001000 	.word	0x5c001000

08002cd8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002ce8:	4904      	ldr	r1, [pc, #16]	; (8002cfc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	58000400 	.word	0x58000400

08002d00 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002d0a:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	401a      	ands	r2, r3
 8002d14:	4904      	ldr	r1, [pc, #16]	; (8002d28 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	58000400 	.word	0x58000400

08002d2c <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_SetFMCMemorySwappingConfig+0x24>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d3c:	4904      	ldr	r1, [pc, #16]	; (8002d50 <HAL_SetFMCMemorySwappingConfig+0x24>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	52004000 	.word	0x52004000

08002d54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	609a      	str	r2, [r3, #8]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3360      	adds	r3, #96	; 0x60
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	430b      	orrs	r3, r1
 8002dea:	431a      	orrs	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002df0:	bf00      	nop
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	611a      	str	r2, [r3, #16]
}
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b087      	sub	sp, #28
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	3360      	adds	r3, #96	; 0x60
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	601a      	str	r2, [r3, #0]
  }
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3330      	adds	r3, #48	; 0x30
 8002e74:	461a      	mov	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	4413      	add	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	211f      	movs	r1, #31
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	401a      	ands	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	0e9b      	lsrs	r3, r3, #26
 8002e9c:	f003 011f 	and.w	r1, r3, #31
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002eb0:	bf00      	nop
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3314      	adds	r3, #20
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	0e5b      	lsrs	r3, r3, #25
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	4413      	add	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	0d1b      	lsrs	r3, r3, #20
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2107      	movs	r1, #7
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	0d1b      	lsrs	r3, r3, #20
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	431a      	orrs	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	401a      	ands	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0318 	and.w	r3, r3, #24
 8002f36:	4908      	ldr	r1, [pc, #32]	; (8002f58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f38:	40d9      	lsrs	r1, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	400b      	ands	r3, r1
 8002f3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f42:	431a      	orrs	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	000fffff 	.word	0x000fffff

08002f5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6093      	str	r3, [r2, #8]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	5fffffc0 	.word	0x5fffffc0

08002f80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f94:	d101      	bne.n	8002f9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <LL_ADC_EnableInternalRegulator+0x24>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	6fffffc0 	.word	0x6fffffc0

08002fd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fe4:	d101      	bne.n	8002fea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <LL_ADC_IsEnabled+0x18>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <LL_ADC_IsEnabled+0x1a>
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b04      	cmp	r3, #4
 8003030:	d101      	bne.n	8003036 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b08      	cmp	r3, #8
 8003056:	d101      	bne.n	800305c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b089      	sub	sp, #36	; 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003078:	2300      	movs	r3, #0
 800307a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e18e      	b.n	80033a4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7fd fec7 	bl	8000e28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ff67 	bl	8002f80 <LL_ADC_IsDeepPowerDownEnabled>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d004      	beq.n	80030c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff4d 	bl	8002f5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ff82 	bl	8002fd0 <LL_ADC_IsInternalRegulatorEnabled>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d114      	bne.n	80030fc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ff66 	bl	8002fa8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030dc:	4b9a      	ldr	r3, [pc, #616]	; (8003348 <HAL_ADC_Init+0x2dc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	4a9a      	ldr	r2, [pc, #616]	; (800334c <HAL_ADC_Init+0x2e0>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	3301      	adds	r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030ee:	e002      	b.n	80030f6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f9      	bne.n	80030f0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff65 	bl	8002fd0 <LL_ADC_IsInternalRegulatorEnabled>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10d      	bne.n	8003128 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003110:	f043 0210 	orr.w	r2, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff76 	bl	800301e <LL_ADC_REG_IsConversionOngoing>
 8003132:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	f040 8128 	bne.w	8003392 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f040 8124 	bne.w	8003392 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003152:	f043 0202 	orr.w	r2, r3, #2
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ff4a 	bl	8002ff8 <LL_ADC_IsEnabled>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d136      	bne.n	80031d8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a78      	ldr	r2, [pc, #480]	; (8003350 <HAL_ADC_Init+0x2e4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d004      	beq.n	800317e <HAL_ADC_Init+0x112>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a76      	ldr	r2, [pc, #472]	; (8003354 <HAL_ADC_Init+0x2e8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d10e      	bne.n	800319c <HAL_ADC_Init+0x130>
 800317e:	4874      	ldr	r0, [pc, #464]	; (8003350 <HAL_ADC_Init+0x2e4>)
 8003180:	f7ff ff3a 	bl	8002ff8 <LL_ADC_IsEnabled>
 8003184:	4604      	mov	r4, r0
 8003186:	4873      	ldr	r0, [pc, #460]	; (8003354 <HAL_ADC_Init+0x2e8>)
 8003188:	f7ff ff36 	bl	8002ff8 <LL_ADC_IsEnabled>
 800318c:	4603      	mov	r3, r0
 800318e:	4323      	orrs	r3, r4
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e008      	b.n	80031ae <HAL_ADC_Init+0x142>
 800319c:	486e      	ldr	r0, [pc, #440]	; (8003358 <HAL_ADC_Init+0x2ec>)
 800319e:	f7ff ff2b 	bl	8002ff8 <LL_ADC_IsEnabled>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d012      	beq.n	80031d8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a66      	ldr	r2, [pc, #408]	; (8003350 <HAL_ADC_Init+0x2e4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_ADC_Init+0x15a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a64      	ldr	r2, [pc, #400]	; (8003354 <HAL_ADC_Init+0x2e8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_Init+0x15e>
 80031c6:	4a65      	ldr	r2, [pc, #404]	; (800335c <HAL_ADC_Init+0x2f0>)
 80031c8:	e000      	b.n	80031cc <HAL_ADC_Init+0x160>
 80031ca:	4a65      	ldr	r2, [pc, #404]	; (8003360 <HAL_ADC_Init+0x2f4>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f7ff fdbe 	bl	8002d54 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80031d8:	f7ff fd72 	bl	8002cc0 <HAL_GetREVID>
 80031dc:	4603      	mov	r3, r0
 80031de:	f241 0203 	movw	r2, #4099	; 0x1003
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d914      	bls.n	8003210 <HAL_ADC_Init+0x1a4>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d110      	bne.n	8003210 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	7d5b      	ldrb	r3, [r3, #21]
 80031f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031f8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80031fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7f1b      	ldrb	r3, [r3, #28]
 8003204:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003206:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003208:	f043 030c 	orr.w	r3, r3, #12
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	e00d      	b.n	800322c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7d5b      	ldrb	r3, [r3, #21]
 8003214:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800321a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003220:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	7f1b      	ldrb	r3, [r3, #28]
 8003226:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7f1b      	ldrb	r3, [r3, #28]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d106      	bne.n	8003242 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	3b01      	subs	r3, #1
 800323a:	045b      	lsls	r3, r3, #17
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	4b3f      	ldr	r3, [pc, #252]	; (8003364 <HAL_ADC_Init+0x2f8>)
 8003266:	4013      	ands	r3, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	69b9      	ldr	r1, [r7, #24]
 800326e:	430b      	orrs	r3, r1
 8003270:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fed1 	bl	800301e <LL_ADC_REG_IsConversionOngoing>
 800327c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fede 	bl	8003044 <LL_ADC_INJ_IsConversionOngoing>
 8003288:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d14a      	bne.n	8003326 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d147      	bne.n	8003326 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7d1b      	ldrb	r3, [r3, #20]
 800329a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	4b2f      	ldr	r3, [pc, #188]	; (8003368 <HAL_ADC_Init+0x2fc>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	69b9      	ldr	r1, [r7, #24]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d11b      	bne.n	80032fa <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	4b27      	ldr	r3, [pc, #156]	; (800336c <HAL_ADC_Init+0x300>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032d6:	3a01      	subs	r2, #1
 80032d8:	0411      	lsls	r1, r2, #16
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032de:	4311      	orrs	r1, r2
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032e4:	4311      	orrs	r1, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032ea:	430a      	orrs	r2, r1
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	611a      	str	r2, [r3, #16]
 80032f8:	e007      	b.n	800330a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fb93 	bl	8003a4c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d120      	bne.n	8003370 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f023 010f 	bic.w	r1, r3, #15
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	1e5a      	subs	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
 8003346:	e01b      	b.n	8003380 <HAL_ADC_Init+0x314>
 8003348:	24000400 	.word	0x24000400
 800334c:	053e2d63 	.word	0x053e2d63
 8003350:	40022000 	.word	0x40022000
 8003354:	40022100 	.word	0x40022100
 8003358:	58026000 	.word	0x58026000
 800335c:	40022300 	.word	0x40022300
 8003360:	58026300 	.word	0x58026300
 8003364:	fff0c003 	.word	0xfff0c003
 8003368:	ffffbffc 	.word	0xffffbffc
 800336c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 020f 	bic.w	r2, r2, #15
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	f023 0303 	bic.w	r3, r3, #3
 8003388:	f043 0201 	orr.w	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
 8003390:	e007      	b.n	80033a2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	f043 0210 	orr.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3724      	adds	r7, #36	; 0x24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd90      	pop	{r4, r7, pc}

080033ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b0a1      	sub	sp, #132	; 0x84
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a9d      	ldr	r2, [pc, #628]	; (800363c <HAL_ADC_ConfigChannel+0x290>)
 80033c6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x2a>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e321      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x66e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fe1b 	bl	800301e <LL_ADC_REG_IsConversionOngoing>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f040 8306 	bne.w	80039fc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d108      	bne.n	800340e <HAL_ADC_ConfigChannel+0x62>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	0e9b      	lsrs	r3, r3, #26
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	2201      	movs	r2, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	e016      	b.n	800343c <HAL_ADC_ConfigChannel+0x90>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800341c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800341e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003420:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003426:	2320      	movs	r3, #32
 8003428:	e003      	b.n	8003432 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800342a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800342c:	fab3 f383 	clz	r3, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	2201      	movs	r2, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6812      	ldr	r2, [r2, #0]
 8003440:	69d1      	ldr	r1, [r2, #28]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	430b      	orrs	r3, r1
 8003448:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6859      	ldr	r1, [r3, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	f7ff fd04 	bl	8002e64 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff fddc 	bl	800301e <LL_ADC_REG_IsConversionOngoing>
 8003466:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fde9 	bl	8003044 <LL_ADC_INJ_IsConversionOngoing>
 8003472:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003476:	2b00      	cmp	r3, #0
 8003478:	f040 80b3 	bne.w	80035e2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800347c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 80af 	bne.w	80035e2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	6819      	ldr	r1, [r3, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	461a      	mov	r2, r3
 8003492:	f7ff fd13 	bl	8002ebc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003496:	4b6a      	ldr	r3, [pc, #424]	; (8003640 <HAL_ADC_ConfigChannel+0x294>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800349e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034a2:	d10b      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x110>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	e01d      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x14c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10b      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x136>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	e00a      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x14c>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	089b      	lsrs	r3, r3, #2
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d027      	beq.n	8003552 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6919      	ldr	r1, [r3, #16]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003510:	f7ff fc54 	bl	8002dbc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	6919      	ldr	r1, [r3, #16]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	7e5b      	ldrb	r3, [r3, #25]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d102      	bne.n	800352a <HAL_ADC_ConfigChannel+0x17e>
 8003524:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003528:	e000      	b.n	800352c <HAL_ADC_ConfigChannel+0x180>
 800352a:	2300      	movs	r3, #0
 800352c:	461a      	mov	r2, r3
 800352e:	f7ff fc7e 	bl	8002e2e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6919      	ldr	r1, [r3, #16]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	7e1b      	ldrb	r3, [r3, #24]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d102      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x19c>
 8003542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003546:	e000      	b.n	800354a <HAL_ADC_ConfigChannel+0x19e>
 8003548:	2300      	movs	r3, #0
 800354a:	461a      	mov	r2, r3
 800354c:	f7ff fc56 	bl	8002dfc <LL_ADC_SetDataRightShift>
 8003550:	e047      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003558:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	069b      	lsls	r3, r3, #26
 8003562:	429a      	cmp	r2, r3
 8003564:	d107      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003574:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800357c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	069b      	lsls	r3, r3, #26
 8003586:	429a      	cmp	r2, r3
 8003588:	d107      	bne.n	800359a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003598:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	069b      	lsls	r3, r3, #26
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d107      	bne.n	80035be <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035bc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	069b      	lsls	r3, r3, #26
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d107      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035e0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fd06 	bl	8002ff8 <LL_ADC_IsEnabled>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f040 820d 	bne.w	8003a0e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6819      	ldr	r1, [r3, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	461a      	mov	r2, r3
 8003602:	f7ff fc87 	bl	8002f14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	4a0c      	ldr	r2, [pc, #48]	; (800363c <HAL_ADC_ConfigChannel+0x290>)
 800360c:	4293      	cmp	r3, r2
 800360e:	f040 8133 	bne.w	8003878 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800361e:	2b00      	cmp	r3, #0
 8003620:	d110      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x298>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	0e9b      	lsrs	r3, r3, #26
 8003628:	3301      	adds	r3, #1
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	2b09      	cmp	r3, #9
 8003630:	bf94      	ite	ls
 8003632:	2301      	movls	r3, #1
 8003634:	2300      	movhi	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	e01e      	b.n	8003678 <HAL_ADC_ConfigChannel+0x2cc>
 800363a:	bf00      	nop
 800363c:	47ff0000 	.word	0x47ff0000
 8003640:	5c001000 	.word	0x5c001000
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003654:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800365c:	2320      	movs	r3, #32
 800365e:	e003      	b.n	8003668 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	3301      	adds	r3, #1
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	2b09      	cmp	r3, #9
 8003670:	bf94      	ite	ls
 8003672:	2301      	movls	r3, #1
 8003674:	2300      	movhi	r3, #0
 8003676:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003678:	2b00      	cmp	r3, #0
 800367a:	d079      	beq.n	8003770 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003684:	2b00      	cmp	r3, #0
 8003686:	d107      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x2ec>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	0e9b      	lsrs	r3, r3, #26
 800368e:	3301      	adds	r3, #1
 8003690:	069b      	lsls	r3, r3, #26
 8003692:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003696:	e015      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x318>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80036a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80036aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80036b0:	2320      	movs	r3, #32
 80036b2:	e003      	b.n	80036bc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80036b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	3301      	adds	r3, #1
 80036be:	069b      	lsls	r3, r3, #26
 80036c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d109      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x338>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0e9b      	lsrs	r3, r3, #26
 80036d6:	3301      	adds	r3, #1
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	2101      	movs	r1, #1
 80036de:	fa01 f303 	lsl.w	r3, r1, r3
 80036e2:	e017      	b.n	8003714 <HAL_ADC_ConfigChannel+0x368>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ec:	fa93 f3a3 	rbit	r3, r3
 80036f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80036f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80036f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80036fc:	2320      	movs	r3, #32
 80036fe:	e003      	b.n	8003708 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	3301      	adds	r3, #1
 800370a:	f003 031f 	and.w	r3, r3, #31
 800370e:	2101      	movs	r1, #1
 8003710:	fa01 f303 	lsl.w	r3, r1, r3
 8003714:	ea42 0103 	orr.w	r1, r2, r3
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10a      	bne.n	800373a <HAL_ADC_ConfigChannel+0x38e>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	0e9b      	lsrs	r3, r3, #26
 800372a:	3301      	adds	r3, #1
 800372c:	f003 021f 	and.w	r2, r3, #31
 8003730:	4613      	mov	r3, r2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4413      	add	r3, r2
 8003736:	051b      	lsls	r3, r3, #20
 8003738:	e018      	b.n	800376c <HAL_ADC_ConfigChannel+0x3c0>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003752:	2320      	movs	r3, #32
 8003754:	e003      	b.n	800375e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	3301      	adds	r3, #1
 8003760:	f003 021f 	and.w	r2, r3, #31
 8003764:	4613      	mov	r3, r2
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	4413      	add	r3, r2
 800376a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800376c:	430b      	orrs	r3, r1
 800376e:	e07e      	b.n	800386e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003778:	2b00      	cmp	r3, #0
 800377a:	d107      	bne.n	800378c <HAL_ADC_ConfigChannel+0x3e0>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	0e9b      	lsrs	r3, r3, #26
 8003782:	3301      	adds	r3, #1
 8003784:	069b      	lsls	r3, r3, #26
 8003786:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800378a:	e015      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x40c>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80037a4:	2320      	movs	r3, #32
 80037a6:	e003      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	3301      	adds	r3, #1
 80037b2:	069b      	lsls	r3, r3, #26
 80037b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d109      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x42c>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	0e9b      	lsrs	r3, r3, #26
 80037ca:	3301      	adds	r3, #1
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	2101      	movs	r1, #1
 80037d2:	fa01 f303 	lsl.w	r3, r1, r3
 80037d6:	e017      	b.n	8003808 <HAL_ADC_ConfigChannel+0x45c>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	61bb      	str	r3, [r7, #24]
  return result;
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80037f0:	2320      	movs	r3, #32
 80037f2:	e003      	b.n	80037fc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	3301      	adds	r3, #1
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f303 	lsl.w	r3, r1, r3
 8003808:	ea42 0103 	orr.w	r1, r2, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10d      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x488>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	0e9b      	lsrs	r3, r3, #26
 800381e:	3301      	adds	r3, #1
 8003820:	f003 021f 	and.w	r2, r3, #31
 8003824:	4613      	mov	r3, r2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4413      	add	r3, r2
 800382a:	3b1e      	subs	r3, #30
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003832:	e01b      	b.n	800386c <HAL_ADC_ConfigChannel+0x4c0>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	fa93 f3a3 	rbit	r3, r3
 8003840:	60fb      	str	r3, [r7, #12]
  return result;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800384c:	2320      	movs	r3, #32
 800384e:	e003      	b.n	8003858 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fab3 f383 	clz	r3, r3
 8003856:	b2db      	uxtb	r3, r3
 8003858:	3301      	adds	r3, #1
 800385a:	f003 021f 	and.w	r2, r3, #31
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	3b1e      	subs	r3, #30
 8003866:	051b      	lsls	r3, r3, #20
 8003868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800386c:	430b      	orrs	r3, r1
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	6892      	ldr	r2, [r2, #8]
 8003872:	4619      	mov	r1, r3
 8003874:	f7ff fb22 	bl	8002ebc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f280 80c6 	bge.w	8003a0e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a67      	ldr	r2, [pc, #412]	; (8003a24 <HAL_ADC_ConfigChannel+0x678>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d004      	beq.n	8003896 <HAL_ADC_ConfigChannel+0x4ea>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a65      	ldr	r2, [pc, #404]	; (8003a28 <HAL_ADC_ConfigChannel+0x67c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_ADC_ConfigChannel+0x4ee>
 8003896:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <HAL_ADC_ConfigChannel+0x680>)
 8003898:	e000      	b.n	800389c <HAL_ADC_ConfigChannel+0x4f0>
 800389a:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <HAL_ADC_ConfigChannel+0x684>)
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fa7f 	bl	8002da0 <LL_ADC_GetCommonPathInternalCh>
 80038a2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a5e      	ldr	r2, [pc, #376]	; (8003a24 <HAL_ADC_ConfigChannel+0x678>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_ADC_ConfigChannel+0x50c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a5d      	ldr	r2, [pc, #372]	; (8003a28 <HAL_ADC_ConfigChannel+0x67c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d10e      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x52a>
 80038b8:	485a      	ldr	r0, [pc, #360]	; (8003a24 <HAL_ADC_ConfigChannel+0x678>)
 80038ba:	f7ff fb9d 	bl	8002ff8 <LL_ADC_IsEnabled>
 80038be:	4604      	mov	r4, r0
 80038c0:	4859      	ldr	r0, [pc, #356]	; (8003a28 <HAL_ADC_ConfigChannel+0x67c>)
 80038c2:	f7ff fb99 	bl	8002ff8 <LL_ADC_IsEnabled>
 80038c6:	4603      	mov	r3, r0
 80038c8:	4323      	orrs	r3, r4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	e008      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x53c>
 80038d6:	4857      	ldr	r0, [pc, #348]	; (8003a34 <HAL_ADC_ConfigChannel+0x688>)
 80038d8:	f7ff fb8e 	bl	8002ff8 <LL_ADC_IsEnabled>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bf0c      	ite	eq
 80038e2:	2301      	moveq	r3, #1
 80038e4:	2300      	movne	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d07d      	beq.n	80039e8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a51      	ldr	r2, [pc, #324]	; (8003a38 <HAL_ADC_ConfigChannel+0x68c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d130      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x5ac>
 80038f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d12b      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a4b      	ldr	r2, [pc, #300]	; (8003a34 <HAL_ADC_ConfigChannel+0x688>)
 8003906:	4293      	cmp	r3, r2
 8003908:	f040 8081 	bne.w	8003a0e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a44      	ldr	r2, [pc, #272]	; (8003a24 <HAL_ADC_ConfigChannel+0x678>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_ADC_ConfigChannel+0x574>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a43      	ldr	r2, [pc, #268]	; (8003a28 <HAL_ADC_ConfigChannel+0x67c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d101      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x578>
 8003920:	4a42      	ldr	r2, [pc, #264]	; (8003a2c <HAL_ADC_ConfigChannel+0x680>)
 8003922:	e000      	b.n	8003926 <HAL_ADC_ConfigChannel+0x57a>
 8003924:	4a42      	ldr	r2, [pc, #264]	; (8003a30 <HAL_ADC_ConfigChannel+0x684>)
 8003926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003928:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f7ff fa23 	bl	8002d7a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003934:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <HAL_ADC_ConfigChannel+0x690>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	099b      	lsrs	r3, r3, #6
 800393a:	4a41      	ldr	r2, [pc, #260]	; (8003a40 <HAL_ADC_ConfigChannel+0x694>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	099b      	lsrs	r3, r3, #6
 8003942:	3301      	adds	r3, #1
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003948:	e002      	b.n	8003950 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	3b01      	subs	r3, #1
 800394e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f9      	bne.n	800394a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003956:	e05a      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a39      	ldr	r2, [pc, #228]	; (8003a44 <HAL_ADC_ConfigChannel+0x698>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d11e      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x5f4>
 8003962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d119      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a30      	ldr	r2, [pc, #192]	; (8003a34 <HAL_ADC_ConfigChannel+0x688>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d14b      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a2a      	ldr	r2, [pc, #168]	; (8003a24 <HAL_ADC_ConfigChannel+0x678>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d004      	beq.n	800398a <HAL_ADC_ConfigChannel+0x5de>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a28      	ldr	r2, [pc, #160]	; (8003a28 <HAL_ADC_ConfigChannel+0x67c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d101      	bne.n	800398e <HAL_ADC_ConfigChannel+0x5e2>
 800398a:	4a28      	ldr	r2, [pc, #160]	; (8003a2c <HAL_ADC_ConfigChannel+0x680>)
 800398c:	e000      	b.n	8003990 <HAL_ADC_ConfigChannel+0x5e4>
 800398e:	4a28      	ldr	r2, [pc, #160]	; (8003a30 <HAL_ADC_ConfigChannel+0x684>)
 8003990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003996:	4619      	mov	r1, r3
 8003998:	4610      	mov	r0, r2
 800399a:	f7ff f9ee 	bl	8002d7a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800399e:	e036      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a28      	ldr	r2, [pc, #160]	; (8003a48 <HAL_ADC_ConfigChannel+0x69c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d131      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x662>
 80039aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d12c      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1e      	ldr	r2, [pc, #120]	; (8003a34 <HAL_ADC_ConfigChannel+0x688>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d127      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a18      	ldr	r2, [pc, #96]	; (8003a24 <HAL_ADC_ConfigChannel+0x678>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_ADC_ConfigChannel+0x626>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a16      	ldr	r2, [pc, #88]	; (8003a28 <HAL_ADC_ConfigChannel+0x67c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d101      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x62a>
 80039d2:	4a16      	ldr	r2, [pc, #88]	; (8003a2c <HAL_ADC_ConfigChannel+0x680>)
 80039d4:	e000      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x62c>
 80039d6:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <HAL_ADC_ConfigChannel+0x684>)
 80039d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f7ff f9ca 	bl	8002d7a <LL_ADC_SetCommonPathInternalCh>
 80039e6:	e012      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f043 0220 	orr.w	r2, r3, #32
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80039fa:	e008      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a00:	f043 0220 	orr.w	r2, r3, #32
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3784      	adds	r7, #132	; 0x84
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd90      	pop	{r4, r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40022000 	.word	0x40022000
 8003a28:	40022100 	.word	0x40022100
 8003a2c:	40022300 	.word	0x40022300
 8003a30:	58026300 	.word	0x58026300
 8003a34:	58026000 	.word	0x58026000
 8003a38:	cb840000 	.word	0xcb840000
 8003a3c:	24000400 	.word	0x24000400
 8003a40:	053e2d63 	.word	0x053e2d63
 8003a44:	c7520000 	.word	0xc7520000
 8003a48:	cfb80000 	.word	0xcfb80000

08003a4c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a79      	ldr	r2, [pc, #484]	; (8003c40 <ADC_ConfigureBoostMode+0x1f4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d004      	beq.n	8003a68 <ADC_ConfigureBoostMode+0x1c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a78      	ldr	r2, [pc, #480]	; (8003c44 <ADC_ConfigureBoostMode+0x1f8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d109      	bne.n	8003a7c <ADC_ConfigureBoostMode+0x30>
 8003a68:	4b77      	ldr	r3, [pc, #476]	; (8003c48 <ADC_ConfigureBoostMode+0x1fc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf14      	ite	ne
 8003a74:	2301      	movne	r3, #1
 8003a76:	2300      	moveq	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e008      	b.n	8003a8e <ADC_ConfigureBoostMode+0x42>
 8003a7c:	4b73      	ldr	r3, [pc, #460]	; (8003c4c <ADC_ConfigureBoostMode+0x200>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01c      	beq.n	8003acc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003a92:	f004 fdab 	bl	80085ec <HAL_RCC_GetHCLKFreq>
 8003a96:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003aa0:	d010      	beq.n	8003ac4 <ADC_ConfigureBoostMode+0x78>
 8003aa2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003aa6:	d871      	bhi.n	8003b8c <ADC_ConfigureBoostMode+0x140>
 8003aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aac:	d002      	beq.n	8003ab4 <ADC_ConfigureBoostMode+0x68>
 8003aae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ab2:	d16b      	bne.n	8003b8c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	60fb      	str	r3, [r7, #12]
        break;
 8003ac2:	e066      	b.n	8003b92 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	60fb      	str	r3, [r7, #12]
        break;
 8003aca:	e062      	b.n	8003b92 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003acc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ad0:	f005 fd28 	bl	8009524 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ad4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ade:	d051      	beq.n	8003b84 <ADC_ConfigureBoostMode+0x138>
 8003ae0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ae4:	d854      	bhi.n	8003b90 <ADC_ConfigureBoostMode+0x144>
 8003ae6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003aea:	d047      	beq.n	8003b7c <ADC_ConfigureBoostMode+0x130>
 8003aec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003af0:	d84e      	bhi.n	8003b90 <ADC_ConfigureBoostMode+0x144>
 8003af2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003af6:	d03d      	beq.n	8003b74 <ADC_ConfigureBoostMode+0x128>
 8003af8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003afc:	d848      	bhi.n	8003b90 <ADC_ConfigureBoostMode+0x144>
 8003afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b02:	d033      	beq.n	8003b6c <ADC_ConfigureBoostMode+0x120>
 8003b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b08:	d842      	bhi.n	8003b90 <ADC_ConfigureBoostMode+0x144>
 8003b0a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b0e:	d029      	beq.n	8003b64 <ADC_ConfigureBoostMode+0x118>
 8003b10:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b14:	d83c      	bhi.n	8003b90 <ADC_ConfigureBoostMode+0x144>
 8003b16:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b1a:	d01a      	beq.n	8003b52 <ADC_ConfigureBoostMode+0x106>
 8003b1c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b20:	d836      	bhi.n	8003b90 <ADC_ConfigureBoostMode+0x144>
 8003b22:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b26:	d014      	beq.n	8003b52 <ADC_ConfigureBoostMode+0x106>
 8003b28:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b2c:	d830      	bhi.n	8003b90 <ADC_ConfigureBoostMode+0x144>
 8003b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b32:	d00e      	beq.n	8003b52 <ADC_ConfigureBoostMode+0x106>
 8003b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b38:	d82a      	bhi.n	8003b90 <ADC_ConfigureBoostMode+0x144>
 8003b3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b3e:	d008      	beq.n	8003b52 <ADC_ConfigureBoostMode+0x106>
 8003b40:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b44:	d824      	bhi.n	8003b90 <ADC_ConfigureBoostMode+0x144>
 8003b46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b4a:	d002      	beq.n	8003b52 <ADC_ConfigureBoostMode+0x106>
 8003b4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b50:	d11e      	bne.n	8003b90 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	0c9b      	lsrs	r3, r3, #18
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	60fb      	str	r3, [r7, #12]
        break;
 8003b62:	e016      	b.n	8003b92 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	60fb      	str	r3, [r7, #12]
        break;
 8003b6a:	e012      	b.n	8003b92 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	60fb      	str	r3, [r7, #12]
        break;
 8003b72:	e00e      	b.n	8003b92 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	099b      	lsrs	r3, r3, #6
 8003b78:	60fb      	str	r3, [r7, #12]
        break;
 8003b7a:	e00a      	b.n	8003b92 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	09db      	lsrs	r3, r3, #7
 8003b80:	60fb      	str	r3, [r7, #12]
        break;
 8003b82:	e006      	b.n	8003b92 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	60fb      	str	r3, [r7, #12]
        break;
 8003b8a:	e002      	b.n	8003b92 <ADC_ConfigureBoostMode+0x146>
        break;
 8003b8c:	bf00      	nop
 8003b8e:	e000      	b.n	8003b92 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003b90:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003b92:	f7ff f895 	bl	8002cc0 <HAL_GetREVID>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d815      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4a2b      	ldr	r2, [pc, #172]	; (8003c50 <ADC_ConfigureBoostMode+0x204>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d908      	bls.n	8003bba <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003bb8:	e03e      	b.n	8003c38 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bc8:	609a      	str	r2, [r3, #8]
}
 8003bca:	e035      	b.n	8003c38 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4a1f      	ldr	r2, [pc, #124]	; (8003c54 <ADC_ConfigureBoostMode+0x208>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d808      	bhi.n	8003bec <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003be8:	609a      	str	r2, [r3, #8]
}
 8003bea:	e025      	b.n	8003c38 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a1a      	ldr	r2, [pc, #104]	; (8003c58 <ADC_ConfigureBoostMode+0x20c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d80a      	bhi.n	8003c0a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c06:	609a      	str	r2, [r3, #8]
}
 8003c08:	e016      	b.n	8003c38 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <ADC_ConfigureBoostMode+0x210>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d80a      	bhi.n	8003c28 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c24:	609a      	str	r2, [r3, #8]
}
 8003c26:	e007      	b.n	8003c38 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003c36:	609a      	str	r2, [r3, #8]
}
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40022000 	.word	0x40022000
 8003c44:	40022100 	.word	0x40022100
 8003c48:	40022300 	.word	0x40022300
 8003c4c:	58026300 	.word	0x58026300
 8003c50:	01312d00 	.word	0x01312d00
 8003c54:	005f5e10 	.word	0x005f5e10
 8003c58:	00bebc20 	.word	0x00bebc20
 8003c5c:	017d7840 	.word	0x017d7840

08003c60 <LL_ADC_IsEnabled>:
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <LL_ADC_IsEnabled+0x18>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <LL_ADC_IsEnabled+0x1a>
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <LL_ADC_REG_IsConversionOngoing>:
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d101      	bne.n	8003c9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003cac:	b590      	push	{r4, r7, lr}
 8003cae:	b09f      	sub	sp, #124	; 0x7c
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e0be      	b.n	8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a5c      	ldr	r2, [pc, #368]	; (8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d102      	bne.n	8003cea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ce4:	4b5b      	ldr	r3, [pc, #364]	; (8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	e001      	b.n	8003cee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10b      	bne.n	8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	f043 0220 	orr.w	r2, r3, #32
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e09d      	b.n	8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff ffb9 	bl	8003c86 <LL_ADC_REG_IsConversionOngoing>
 8003d14:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ffb3 	bl	8003c86 <LL_ADC_REG_IsConversionOngoing>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d17f      	bne.n	8003e26 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d17c      	bne.n	8003e26 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a47      	ldr	r2, [pc, #284]	; (8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d004      	beq.n	8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a46      	ldr	r2, [pc, #280]	; (8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003d40:	4b45      	ldr	r3, [pc, #276]	; (8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d42:	e000      	b.n	8003d46 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003d44:	4b45      	ldr	r3, [pc, #276]	; (8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d46:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d039      	beq.n	8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d60:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a3a      	ldr	r2, [pc, #232]	; (8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a38      	ldr	r2, [pc, #224]	; (8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d10e      	bne.n	8003d94 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003d76:	4836      	ldr	r0, [pc, #216]	; (8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d78:	f7ff ff72 	bl	8003c60 <LL_ADC_IsEnabled>
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	4835      	ldr	r0, [pc, #212]	; (8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d80:	f7ff ff6e 	bl	8003c60 <LL_ADC_IsEnabled>
 8003d84:	4603      	mov	r3, r0
 8003d86:	4323      	orrs	r3, r4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	e008      	b.n	8003da6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003d94:	4832      	ldr	r0, [pc, #200]	; (8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003d96:	f7ff ff63 	bl	8003c60 <LL_ADC_IsEnabled>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	bf0c      	ite	eq
 8003da0:	2301      	moveq	r3, #1
 8003da2:	2300      	movne	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d047      	beq.n	8003e3a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	4b2d      	ldr	r3, [pc, #180]	; (8003e64 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	6811      	ldr	r1, [r2, #0]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	6892      	ldr	r2, [r2, #8]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dc2:	e03a      	b.n	8003e3a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1e      	ldr	r2, [pc, #120]	; (8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d10e      	bne.n	8003e02 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003de4:	481a      	ldr	r0, [pc, #104]	; (8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003de6:	f7ff ff3b 	bl	8003c60 <LL_ADC_IsEnabled>
 8003dea:	4604      	mov	r4, r0
 8003dec:	4819      	ldr	r0, [pc, #100]	; (8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dee:	f7ff ff37 	bl	8003c60 <LL_ADC_IsEnabled>
 8003df2:	4603      	mov	r3, r0
 8003df4:	4323      	orrs	r3, r4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bf0c      	ite	eq
 8003dfa:	2301      	moveq	r3, #1
 8003dfc:	2300      	movne	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	e008      	b.n	8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e02:	4817      	ldr	r0, [pc, #92]	; (8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e04:	f7ff ff2c 	bl	8003c60 <LL_ADC_IsEnabled>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	bf0c      	ite	eq
 8003e0e:	2301      	moveq	r3, #1
 8003e10:	2300      	movne	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d010      	beq.n	8003e3a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e22:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e24:	e009      	b.n	8003e3a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2a:	f043 0220 	orr.w	r2, r3, #32
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e38:	e000      	b.n	8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e3a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e44:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	377c      	adds	r7, #124	; 0x7c
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd90      	pop	{r4, r7, pc}
 8003e50:	40022000 	.word	0x40022000
 8003e54:	40022100 	.word	0x40022100
 8003e58:	40022300 	.word	0x40022300
 8003e5c:	58026300 	.word	0x58026300
 8003e60:	58026000 	.word	0x58026000
 8003e64:	fffff0e0 	.word	0xfffff0e0

08003e68 <__NVIC_SetPriorityGrouping>:
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e84:	4013      	ands	r3, r2
 8003e86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <__NVIC_SetPriorityGrouping+0x44>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e96:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	60d3      	str	r3, [r2, #12]
}
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	e000ed00 	.word	0xe000ed00
 8003eac:	05fa0000 	.word	0x05fa0000

08003eb0 <__NVIC_GetPriorityGrouping>:
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	f003 0307 	and.w	r3, r3, #7
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	e000ed00 	.word	0xe000ed00

08003ecc <__NVIC_EnableIRQ>:
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	db0b      	blt.n	8003ef6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	f003 021f 	and.w	r2, r3, #31
 8003ee4:	4907      	ldr	r1, [pc, #28]	; (8003f04 <__NVIC_EnableIRQ+0x38>)
 8003ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	2001      	movs	r0, #1
 8003eee:	fa00 f202 	lsl.w	r2, r0, r2
 8003ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	e000e100 	.word	0xe000e100

08003f08 <__NVIC_SetPriority>:
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	6039      	str	r1, [r7, #0]
 8003f12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	db0a      	blt.n	8003f32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	490c      	ldr	r1, [pc, #48]	; (8003f54 <__NVIC_SetPriority+0x4c>)
 8003f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f26:	0112      	lsls	r2, r2, #4
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f30:	e00a      	b.n	8003f48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	4908      	ldr	r1, [pc, #32]	; (8003f58 <__NVIC_SetPriority+0x50>)
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	3b04      	subs	r3, #4
 8003f40:	0112      	lsls	r2, r2, #4
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	440b      	add	r3, r1
 8003f46:	761a      	strb	r2, [r3, #24]
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	e000e100 	.word	0xe000e100
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <NVIC_EncodePriority>:
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b089      	sub	sp, #36	; 0x24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f1c3 0307 	rsb	r3, r3, #7
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	bf28      	it	cs
 8003f7a:	2304      	movcs	r3, #4
 8003f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	3304      	adds	r3, #4
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d902      	bls.n	8003f8c <NVIC_EncodePriority+0x30>
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3b03      	subs	r3, #3
 8003f8a:	e000      	b.n	8003f8e <NVIC_EncodePriority+0x32>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43da      	mvns	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	401a      	ands	r2, r3
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	fa01 f303 	lsl.w	r3, r1, r3
 8003fae:	43d9      	mvns	r1, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb4:	4313      	orrs	r3, r2
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3724      	adds	r7, #36	; 0x24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fd4:	d301      	bcc.n	8003fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e00f      	b.n	8003ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fda:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <SysTick_Config+0x40>)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fe2:	210f      	movs	r1, #15
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fe8:	f7ff ff8e 	bl	8003f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <SysTick_Config+0x40>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ff2:	4b04      	ldr	r3, [pc, #16]	; (8004004 <SysTick_Config+0x40>)
 8003ff4:	2207      	movs	r2, #7
 8003ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	e000e010 	.word	0xe000e010

08004008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ff29 	bl	8003e68 <__NVIC_SetPriorityGrouping>
}
 8004016:	bf00      	nop
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b086      	sub	sp, #24
 8004022:	af00      	add	r7, sp, #0
 8004024:	4603      	mov	r3, r0
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800402c:	f7ff ff40 	bl	8003eb0 <__NVIC_GetPriorityGrouping>
 8004030:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	6978      	ldr	r0, [r7, #20]
 8004038:	f7ff ff90 	bl	8003f5c <NVIC_EncodePriority>
 800403c:	4602      	mov	r2, r0
 800403e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ff5f 	bl	8003f08 <__NVIC_SetPriority>
}
 800404a:	bf00      	nop
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	4603      	mov	r3, r0
 800405a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800405c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff ff33 	bl	8003ecc <__NVIC_EnableIRQ>
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff ffa4 	bl	8003fc4 <SysTick_Config>
 800407c:	4603      	mov	r3, r0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800408c:	f3bf 8f5f 	dmb	sy
}
 8004090:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004092:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <HAL_MPU_Disable+0x28>)
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	4a06      	ldr	r2, [pc, #24]	; (80040b0 <HAL_MPU_Disable+0x28>)
 8004098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800409e:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_MPU_Disable+0x2c>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	605a      	str	r2, [r3, #4]
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	e000ed00 	.word	0xe000ed00
 80040b4:	e000ed90 	.word	0xe000ed90

080040b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80040c0:	4a0b      	ldr	r2, [pc, #44]	; (80040f0 <HAL_MPU_Enable+0x38>)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <HAL_MPU_Enable+0x3c>)
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <HAL_MPU_Enable+0x3c>)
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80040d6:	f3bf 8f4f 	dsb	sy
}
 80040da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040dc:	f3bf 8f6f 	isb	sy
}
 80040e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	e000ed90 	.word	0xe000ed90
 80040f4:	e000ed00 	.word	0xe000ed00

080040f8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	785a      	ldrb	r2, [r3, #1]
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <HAL_MPU_ConfigRegion+0x84>)
 8004106:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d029      	beq.n	8004164 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004110:	4a1a      	ldr	r2, [pc, #104]	; (800417c <HAL_MPU_ConfigRegion+0x84>)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	7b1b      	ldrb	r3, [r3, #12]
 800411c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7adb      	ldrb	r3, [r3, #11]
 8004122:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004124:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	7a9b      	ldrb	r3, [r3, #10]
 800412a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800412c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	7b5b      	ldrb	r3, [r3, #13]
 8004132:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004134:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	7b9b      	ldrb	r3, [r3, #14]
 800413a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800413c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	7bdb      	ldrb	r3, [r3, #15]
 8004142:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004144:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	7a5b      	ldrb	r3, [r3, #9]
 800414a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800414c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	7a1b      	ldrb	r3, [r3, #8]
 8004152:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004154:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	7812      	ldrb	r2, [r2, #0]
 800415a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800415c:	4a07      	ldr	r2, [pc, #28]	; (800417c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800415e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004160:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004162:	e005      	b.n	8004170 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_MPU_ConfigRegion+0x84>)
 8004166:	2200      	movs	r2, #0
 8004168:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800416a:	4b04      	ldr	r3, [pc, #16]	; (800417c <HAL_MPU_ConfigRegion+0x84>)
 800416c:	2200      	movs	r2, #0
 800416e:	611a      	str	r2, [r3, #16]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000ed90 	.word	0xe000ed90

08004180 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <HAL_GetCurrentCPUID+0x24>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	091b      	lsrs	r3, r3, #4
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	2b07      	cmp	r3, #7
 8004190:	d101      	bne.n	8004196 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8004192:	2303      	movs	r3, #3
 8004194:	e000      	b.n	8004198 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8004196:	2301      	movs	r3, #1
  }
}
 8004198:	4618      	mov	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e054      	b.n	8004264 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	7f5b      	ldrb	r3, [r3, #29]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fc fef0 	bl	8000fb0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	791b      	ldrb	r3, [r3, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10c      	bne.n	80041f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a22      	ldr	r2, [pc, #136]	; (800426c <HAL_CRC_Init+0xc4>)
 80041e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0218 	bic.w	r2, r2, #24
 80041f4:	609a      	str	r2, [r3, #8]
 80041f6:	e00c      	b.n	8004212 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6899      	ldr	r1, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	461a      	mov	r2, r3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f834 	bl	8004270 <HAL_CRCEx_Polynomial_Set>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e028      	b.n	8004264 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	795b      	ldrb	r3, [r3, #5]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004222:	611a      	str	r2, [r3, #16]
 8004224:	e004      	b.n	8004230 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6912      	ldr	r2, [r2, #16]
 800422e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699a      	ldr	r2, [r3, #24]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	04c11db7 	.word	0x04c11db7

08004270 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004280:	231f      	movs	r3, #31
 8004282:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004284:	bf00      	nop
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1e5a      	subs	r2, r3, #1
 800428a:	613a      	str	r2, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d009      	beq.n	80042a4 <HAL_CRCEx_Polynomial_Set+0x34>
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_CRCEx_Polynomial_Set+0x16>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b18      	cmp	r3, #24
 80042a8:	d846      	bhi.n	8004338 <HAL_CRCEx_Polynomial_Set+0xc8>
 80042aa:	a201      	add	r2, pc, #4	; (adr r2, 80042b0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80042ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b0:	0800433f 	.word	0x0800433f
 80042b4:	08004339 	.word	0x08004339
 80042b8:	08004339 	.word	0x08004339
 80042bc:	08004339 	.word	0x08004339
 80042c0:	08004339 	.word	0x08004339
 80042c4:	08004339 	.word	0x08004339
 80042c8:	08004339 	.word	0x08004339
 80042cc:	08004339 	.word	0x08004339
 80042d0:	0800432d 	.word	0x0800432d
 80042d4:	08004339 	.word	0x08004339
 80042d8:	08004339 	.word	0x08004339
 80042dc:	08004339 	.word	0x08004339
 80042e0:	08004339 	.word	0x08004339
 80042e4:	08004339 	.word	0x08004339
 80042e8:	08004339 	.word	0x08004339
 80042ec:	08004339 	.word	0x08004339
 80042f0:	08004321 	.word	0x08004321
 80042f4:	08004339 	.word	0x08004339
 80042f8:	08004339 	.word	0x08004339
 80042fc:	08004339 	.word	0x08004339
 8004300:	08004339 	.word	0x08004339
 8004304:	08004339 	.word	0x08004339
 8004308:	08004339 	.word	0x08004339
 800430c:	08004339 	.word	0x08004339
 8004310:	08004315 	.word	0x08004315
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b06      	cmp	r3, #6
 8004318:	d913      	bls.n	8004342 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800431e:	e010      	b.n	8004342 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b07      	cmp	r3, #7
 8004324:	d90f      	bls.n	8004346 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800432a:	e00c      	b.n	8004346 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b0f      	cmp	r3, #15
 8004330:	d90b      	bls.n	800434a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004336:	e008      	b.n	800434a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	75fb      	strb	r3, [r7, #23]
      break;
 800433c:	e006      	b.n	800434c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800433e:	bf00      	nop
 8004340:	e004      	b.n	800434c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004342:	bf00      	nop
 8004344:	e002      	b.n	800434c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004346:	bf00      	nop
 8004348:	e000      	b.n	800434c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800434a:	bf00      	nop
  }
  if (status == HAL_OK)
 800434c:	7dfb      	ldrb	r3, [r7, #23]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10d      	bne.n	800436e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f023 0118 	bic.w	r1, r3, #24
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	430a      	orrs	r2, r1
 800436c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800436e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004370:	4618      	mov	r0, r3
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e226      	b.n	80047e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_DMA_Start_IT+0x2a>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e21f      	b.n	80047e6 <HAL_DMA_Start_IT+0x46a>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	f040 820a 	bne.w	80047d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a68      	ldr	r2, [pc, #416]	; (8004570 <HAL_DMA_Start_IT+0x1f4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d04a      	beq.n	800446a <HAL_DMA_Start_IT+0xee>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a66      	ldr	r2, [pc, #408]	; (8004574 <HAL_DMA_Start_IT+0x1f8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d045      	beq.n	800446a <HAL_DMA_Start_IT+0xee>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a65      	ldr	r2, [pc, #404]	; (8004578 <HAL_DMA_Start_IT+0x1fc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d040      	beq.n	800446a <HAL_DMA_Start_IT+0xee>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a63      	ldr	r2, [pc, #396]	; (800457c <HAL_DMA_Start_IT+0x200>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d03b      	beq.n	800446a <HAL_DMA_Start_IT+0xee>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a62      	ldr	r2, [pc, #392]	; (8004580 <HAL_DMA_Start_IT+0x204>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d036      	beq.n	800446a <HAL_DMA_Start_IT+0xee>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a60      	ldr	r2, [pc, #384]	; (8004584 <HAL_DMA_Start_IT+0x208>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d031      	beq.n	800446a <HAL_DMA_Start_IT+0xee>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a5f      	ldr	r2, [pc, #380]	; (8004588 <HAL_DMA_Start_IT+0x20c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d02c      	beq.n	800446a <HAL_DMA_Start_IT+0xee>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a5d      	ldr	r2, [pc, #372]	; (800458c <HAL_DMA_Start_IT+0x210>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d027      	beq.n	800446a <HAL_DMA_Start_IT+0xee>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a5c      	ldr	r2, [pc, #368]	; (8004590 <HAL_DMA_Start_IT+0x214>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d022      	beq.n	800446a <HAL_DMA_Start_IT+0xee>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a5a      	ldr	r2, [pc, #360]	; (8004594 <HAL_DMA_Start_IT+0x218>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d01d      	beq.n	800446a <HAL_DMA_Start_IT+0xee>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a59      	ldr	r2, [pc, #356]	; (8004598 <HAL_DMA_Start_IT+0x21c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d018      	beq.n	800446a <HAL_DMA_Start_IT+0xee>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a57      	ldr	r2, [pc, #348]	; (800459c <HAL_DMA_Start_IT+0x220>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d013      	beq.n	800446a <HAL_DMA_Start_IT+0xee>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a56      	ldr	r2, [pc, #344]	; (80045a0 <HAL_DMA_Start_IT+0x224>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00e      	beq.n	800446a <HAL_DMA_Start_IT+0xee>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a54      	ldr	r2, [pc, #336]	; (80045a4 <HAL_DMA_Start_IT+0x228>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d009      	beq.n	800446a <HAL_DMA_Start_IT+0xee>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a53      	ldr	r2, [pc, #332]	; (80045a8 <HAL_DMA_Start_IT+0x22c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d004      	beq.n	800446a <HAL_DMA_Start_IT+0xee>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a51      	ldr	r2, [pc, #324]	; (80045ac <HAL_DMA_Start_IT+0x230>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d108      	bne.n	800447c <HAL_DMA_Start_IT+0x100>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0201 	bic.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e007      	b.n	800448c <HAL_DMA_Start_IT+0x110>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0201 	bic.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f001 f912 	bl	80056bc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a34      	ldr	r2, [pc, #208]	; (8004570 <HAL_DMA_Start_IT+0x1f4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d04a      	beq.n	8004538 <HAL_DMA_Start_IT+0x1bc>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a33      	ldr	r2, [pc, #204]	; (8004574 <HAL_DMA_Start_IT+0x1f8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d045      	beq.n	8004538 <HAL_DMA_Start_IT+0x1bc>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a31      	ldr	r2, [pc, #196]	; (8004578 <HAL_DMA_Start_IT+0x1fc>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d040      	beq.n	8004538 <HAL_DMA_Start_IT+0x1bc>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a30      	ldr	r2, [pc, #192]	; (800457c <HAL_DMA_Start_IT+0x200>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d03b      	beq.n	8004538 <HAL_DMA_Start_IT+0x1bc>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a2e      	ldr	r2, [pc, #184]	; (8004580 <HAL_DMA_Start_IT+0x204>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d036      	beq.n	8004538 <HAL_DMA_Start_IT+0x1bc>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2d      	ldr	r2, [pc, #180]	; (8004584 <HAL_DMA_Start_IT+0x208>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d031      	beq.n	8004538 <HAL_DMA_Start_IT+0x1bc>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a2b      	ldr	r2, [pc, #172]	; (8004588 <HAL_DMA_Start_IT+0x20c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d02c      	beq.n	8004538 <HAL_DMA_Start_IT+0x1bc>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a2a      	ldr	r2, [pc, #168]	; (800458c <HAL_DMA_Start_IT+0x210>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d027      	beq.n	8004538 <HAL_DMA_Start_IT+0x1bc>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a28      	ldr	r2, [pc, #160]	; (8004590 <HAL_DMA_Start_IT+0x214>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d022      	beq.n	8004538 <HAL_DMA_Start_IT+0x1bc>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a27      	ldr	r2, [pc, #156]	; (8004594 <HAL_DMA_Start_IT+0x218>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d01d      	beq.n	8004538 <HAL_DMA_Start_IT+0x1bc>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a25      	ldr	r2, [pc, #148]	; (8004598 <HAL_DMA_Start_IT+0x21c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d018      	beq.n	8004538 <HAL_DMA_Start_IT+0x1bc>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a24      	ldr	r2, [pc, #144]	; (800459c <HAL_DMA_Start_IT+0x220>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d013      	beq.n	8004538 <HAL_DMA_Start_IT+0x1bc>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <HAL_DMA_Start_IT+0x224>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00e      	beq.n	8004538 <HAL_DMA_Start_IT+0x1bc>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a21      	ldr	r2, [pc, #132]	; (80045a4 <HAL_DMA_Start_IT+0x228>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d009      	beq.n	8004538 <HAL_DMA_Start_IT+0x1bc>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1f      	ldr	r2, [pc, #124]	; (80045a8 <HAL_DMA_Start_IT+0x22c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <HAL_DMA_Start_IT+0x1bc>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1e      	ldr	r2, [pc, #120]	; (80045ac <HAL_DMA_Start_IT+0x230>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d101      	bne.n	800453c <HAL_DMA_Start_IT+0x1c0>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <HAL_DMA_Start_IT+0x1c2>
 800453c:	2300      	movs	r3, #0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d036      	beq.n	80045b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 021e 	bic.w	r2, r3, #30
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0216 	orr.w	r2, r2, #22
 8004554:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d03e      	beq.n	80045dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0208 	orr.w	r2, r2, #8
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	e035      	b.n	80045dc <HAL_DMA_Start_IT+0x260>
 8004570:	40020010 	.word	0x40020010
 8004574:	40020028 	.word	0x40020028
 8004578:	40020040 	.word	0x40020040
 800457c:	40020058 	.word	0x40020058
 8004580:	40020070 	.word	0x40020070
 8004584:	40020088 	.word	0x40020088
 8004588:	400200a0 	.word	0x400200a0
 800458c:	400200b8 	.word	0x400200b8
 8004590:	40020410 	.word	0x40020410
 8004594:	40020428 	.word	0x40020428
 8004598:	40020440 	.word	0x40020440
 800459c:	40020458 	.word	0x40020458
 80045a0:	40020470 	.word	0x40020470
 80045a4:	40020488 	.word	0x40020488
 80045a8:	400204a0 	.word	0x400204a0
 80045ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 020e 	bic.w	r2, r3, #14
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 020a 	orr.w	r2, r2, #10
 80045c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d007      	beq.n	80045dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0204 	orr.w	r2, r2, #4
 80045da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a83      	ldr	r2, [pc, #524]	; (80047f0 <HAL_DMA_Start_IT+0x474>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d072      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a82      	ldr	r2, [pc, #520]	; (80047f4 <HAL_DMA_Start_IT+0x478>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d06d      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a80      	ldr	r2, [pc, #512]	; (80047f8 <HAL_DMA_Start_IT+0x47c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d068      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a7f      	ldr	r2, [pc, #508]	; (80047fc <HAL_DMA_Start_IT+0x480>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d063      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a7d      	ldr	r2, [pc, #500]	; (8004800 <HAL_DMA_Start_IT+0x484>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d05e      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a7c      	ldr	r2, [pc, #496]	; (8004804 <HAL_DMA_Start_IT+0x488>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d059      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a7a      	ldr	r2, [pc, #488]	; (8004808 <HAL_DMA_Start_IT+0x48c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d054      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a79      	ldr	r2, [pc, #484]	; (800480c <HAL_DMA_Start_IT+0x490>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d04f      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a77      	ldr	r2, [pc, #476]	; (8004810 <HAL_DMA_Start_IT+0x494>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d04a      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a76      	ldr	r2, [pc, #472]	; (8004814 <HAL_DMA_Start_IT+0x498>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d045      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a74      	ldr	r2, [pc, #464]	; (8004818 <HAL_DMA_Start_IT+0x49c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d040      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a73      	ldr	r2, [pc, #460]	; (800481c <HAL_DMA_Start_IT+0x4a0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d03b      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a71      	ldr	r2, [pc, #452]	; (8004820 <HAL_DMA_Start_IT+0x4a4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d036      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a70      	ldr	r2, [pc, #448]	; (8004824 <HAL_DMA_Start_IT+0x4a8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d031      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a6e      	ldr	r2, [pc, #440]	; (8004828 <HAL_DMA_Start_IT+0x4ac>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d02c      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6d      	ldr	r2, [pc, #436]	; (800482c <HAL_DMA_Start_IT+0x4b0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d027      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a6b      	ldr	r2, [pc, #428]	; (8004830 <HAL_DMA_Start_IT+0x4b4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d022      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a6a      	ldr	r2, [pc, #424]	; (8004834 <HAL_DMA_Start_IT+0x4b8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d01d      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a68      	ldr	r2, [pc, #416]	; (8004838 <HAL_DMA_Start_IT+0x4bc>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d018      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a67      	ldr	r2, [pc, #412]	; (800483c <HAL_DMA_Start_IT+0x4c0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d013      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a65      	ldr	r2, [pc, #404]	; (8004840 <HAL_DMA_Start_IT+0x4c4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00e      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a64      	ldr	r2, [pc, #400]	; (8004844 <HAL_DMA_Start_IT+0x4c8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d009      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a62      	ldr	r2, [pc, #392]	; (8004848 <HAL_DMA_Start_IT+0x4cc>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d004      	beq.n	80046cc <HAL_DMA_Start_IT+0x350>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a61      	ldr	r2, [pc, #388]	; (800484c <HAL_DMA_Start_IT+0x4d0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d101      	bne.n	80046d0 <HAL_DMA_Start_IT+0x354>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <HAL_DMA_Start_IT+0x356>
 80046d0:	2300      	movs	r3, #0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d01a      	beq.n	800470c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800470a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a37      	ldr	r2, [pc, #220]	; (80047f0 <HAL_DMA_Start_IT+0x474>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d04a      	beq.n	80047ac <HAL_DMA_Start_IT+0x430>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a36      	ldr	r2, [pc, #216]	; (80047f4 <HAL_DMA_Start_IT+0x478>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d045      	beq.n	80047ac <HAL_DMA_Start_IT+0x430>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a34      	ldr	r2, [pc, #208]	; (80047f8 <HAL_DMA_Start_IT+0x47c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d040      	beq.n	80047ac <HAL_DMA_Start_IT+0x430>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a33      	ldr	r2, [pc, #204]	; (80047fc <HAL_DMA_Start_IT+0x480>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d03b      	beq.n	80047ac <HAL_DMA_Start_IT+0x430>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a31      	ldr	r2, [pc, #196]	; (8004800 <HAL_DMA_Start_IT+0x484>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d036      	beq.n	80047ac <HAL_DMA_Start_IT+0x430>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a30      	ldr	r2, [pc, #192]	; (8004804 <HAL_DMA_Start_IT+0x488>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d031      	beq.n	80047ac <HAL_DMA_Start_IT+0x430>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a2e      	ldr	r2, [pc, #184]	; (8004808 <HAL_DMA_Start_IT+0x48c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d02c      	beq.n	80047ac <HAL_DMA_Start_IT+0x430>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2d      	ldr	r2, [pc, #180]	; (800480c <HAL_DMA_Start_IT+0x490>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d027      	beq.n	80047ac <HAL_DMA_Start_IT+0x430>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a2b      	ldr	r2, [pc, #172]	; (8004810 <HAL_DMA_Start_IT+0x494>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d022      	beq.n	80047ac <HAL_DMA_Start_IT+0x430>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2a      	ldr	r2, [pc, #168]	; (8004814 <HAL_DMA_Start_IT+0x498>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d01d      	beq.n	80047ac <HAL_DMA_Start_IT+0x430>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a28      	ldr	r2, [pc, #160]	; (8004818 <HAL_DMA_Start_IT+0x49c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d018      	beq.n	80047ac <HAL_DMA_Start_IT+0x430>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a27      	ldr	r2, [pc, #156]	; (800481c <HAL_DMA_Start_IT+0x4a0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <HAL_DMA_Start_IT+0x430>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a25      	ldr	r2, [pc, #148]	; (8004820 <HAL_DMA_Start_IT+0x4a4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00e      	beq.n	80047ac <HAL_DMA_Start_IT+0x430>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a24      	ldr	r2, [pc, #144]	; (8004824 <HAL_DMA_Start_IT+0x4a8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d009      	beq.n	80047ac <HAL_DMA_Start_IT+0x430>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a22      	ldr	r2, [pc, #136]	; (8004828 <HAL_DMA_Start_IT+0x4ac>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_DMA_Start_IT+0x430>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a21      	ldr	r2, [pc, #132]	; (800482c <HAL_DMA_Start_IT+0x4b0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d108      	bne.n	80047be <HAL_DMA_Start_IT+0x442>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	e012      	b.n	80047e4 <HAL_DMA_Start_IT+0x468>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	e009      	b.n	80047e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40020010 	.word	0x40020010
 80047f4:	40020028 	.word	0x40020028
 80047f8:	40020040 	.word	0x40020040
 80047fc:	40020058 	.word	0x40020058
 8004800:	40020070 	.word	0x40020070
 8004804:	40020088 	.word	0x40020088
 8004808:	400200a0 	.word	0x400200a0
 800480c:	400200b8 	.word	0x400200b8
 8004810:	40020410 	.word	0x40020410
 8004814:	40020428 	.word	0x40020428
 8004818:	40020440 	.word	0x40020440
 800481c:	40020458 	.word	0x40020458
 8004820:	40020470 	.word	0x40020470
 8004824:	40020488 	.word	0x40020488
 8004828:	400204a0 	.word	0x400204a0
 800482c:	400204b8 	.word	0x400204b8
 8004830:	58025408 	.word	0x58025408
 8004834:	5802541c 	.word	0x5802541c
 8004838:	58025430 	.word	0x58025430
 800483c:	58025444 	.word	0x58025444
 8004840:	58025458 	.word	0x58025458
 8004844:	5802546c 	.word	0x5802546c
 8004848:	58025480 	.word	0x58025480
 800484c:	58025494 	.word	0x58025494

08004850 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08a      	sub	sp, #40	; 0x28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800485c:	4b67      	ldr	r3, [pc, #412]	; (80049fc <HAL_DMA_IRQHandler+0x1ac>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a67      	ldr	r2, [pc, #412]	; (8004a00 <HAL_DMA_IRQHandler+0x1b0>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	0a9b      	lsrs	r3, r3, #10
 8004868:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004874:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a5f      	ldr	r2, [pc, #380]	; (8004a04 <HAL_DMA_IRQHandler+0x1b4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d04a      	beq.n	8004922 <HAL_DMA_IRQHandler+0xd2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a5d      	ldr	r2, [pc, #372]	; (8004a08 <HAL_DMA_IRQHandler+0x1b8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d045      	beq.n	8004922 <HAL_DMA_IRQHandler+0xd2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a5c      	ldr	r2, [pc, #368]	; (8004a0c <HAL_DMA_IRQHandler+0x1bc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d040      	beq.n	8004922 <HAL_DMA_IRQHandler+0xd2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a5a      	ldr	r2, [pc, #360]	; (8004a10 <HAL_DMA_IRQHandler+0x1c0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d03b      	beq.n	8004922 <HAL_DMA_IRQHandler+0xd2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a59      	ldr	r2, [pc, #356]	; (8004a14 <HAL_DMA_IRQHandler+0x1c4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d036      	beq.n	8004922 <HAL_DMA_IRQHandler+0xd2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a57      	ldr	r2, [pc, #348]	; (8004a18 <HAL_DMA_IRQHandler+0x1c8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d031      	beq.n	8004922 <HAL_DMA_IRQHandler+0xd2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a56      	ldr	r2, [pc, #344]	; (8004a1c <HAL_DMA_IRQHandler+0x1cc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d02c      	beq.n	8004922 <HAL_DMA_IRQHandler+0xd2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a54      	ldr	r2, [pc, #336]	; (8004a20 <HAL_DMA_IRQHandler+0x1d0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d027      	beq.n	8004922 <HAL_DMA_IRQHandler+0xd2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a53      	ldr	r2, [pc, #332]	; (8004a24 <HAL_DMA_IRQHandler+0x1d4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d022      	beq.n	8004922 <HAL_DMA_IRQHandler+0xd2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a51      	ldr	r2, [pc, #324]	; (8004a28 <HAL_DMA_IRQHandler+0x1d8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d01d      	beq.n	8004922 <HAL_DMA_IRQHandler+0xd2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a50      	ldr	r2, [pc, #320]	; (8004a2c <HAL_DMA_IRQHandler+0x1dc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d018      	beq.n	8004922 <HAL_DMA_IRQHandler+0xd2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a4e      	ldr	r2, [pc, #312]	; (8004a30 <HAL_DMA_IRQHandler+0x1e0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d013      	beq.n	8004922 <HAL_DMA_IRQHandler+0xd2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a4d      	ldr	r2, [pc, #308]	; (8004a34 <HAL_DMA_IRQHandler+0x1e4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00e      	beq.n	8004922 <HAL_DMA_IRQHandler+0xd2>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a4b      	ldr	r2, [pc, #300]	; (8004a38 <HAL_DMA_IRQHandler+0x1e8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d009      	beq.n	8004922 <HAL_DMA_IRQHandler+0xd2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a4a      	ldr	r2, [pc, #296]	; (8004a3c <HAL_DMA_IRQHandler+0x1ec>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_DMA_IRQHandler+0xd2>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a48      	ldr	r2, [pc, #288]	; (8004a40 <HAL_DMA_IRQHandler+0x1f0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d101      	bne.n	8004926 <HAL_DMA_IRQHandler+0xd6>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_DMA_IRQHandler+0xd8>
 8004926:	2300      	movs	r3, #0
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 842b 	beq.w	8005184 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	2208      	movs	r2, #8
 8004938:	409a      	lsls	r2, r3
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	4013      	ands	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 80a2 	beq.w	8004a88 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2e      	ldr	r2, [pc, #184]	; (8004a04 <HAL_DMA_IRQHandler+0x1b4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d04a      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x194>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a2d      	ldr	r2, [pc, #180]	; (8004a08 <HAL_DMA_IRQHandler+0x1b8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d045      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x194>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2b      	ldr	r2, [pc, #172]	; (8004a0c <HAL_DMA_IRQHandler+0x1bc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d040      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x194>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a2a      	ldr	r2, [pc, #168]	; (8004a10 <HAL_DMA_IRQHandler+0x1c0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d03b      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x194>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a28      	ldr	r2, [pc, #160]	; (8004a14 <HAL_DMA_IRQHandler+0x1c4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d036      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x194>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a27      	ldr	r2, [pc, #156]	; (8004a18 <HAL_DMA_IRQHandler+0x1c8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d031      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x194>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a25      	ldr	r2, [pc, #148]	; (8004a1c <HAL_DMA_IRQHandler+0x1cc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d02c      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x194>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a24      	ldr	r2, [pc, #144]	; (8004a20 <HAL_DMA_IRQHandler+0x1d0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d027      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x194>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a22      	ldr	r2, [pc, #136]	; (8004a24 <HAL_DMA_IRQHandler+0x1d4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d022      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x194>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a21      	ldr	r2, [pc, #132]	; (8004a28 <HAL_DMA_IRQHandler+0x1d8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d01d      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x194>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1f      	ldr	r2, [pc, #124]	; (8004a2c <HAL_DMA_IRQHandler+0x1dc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d018      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x194>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1e      	ldr	r2, [pc, #120]	; (8004a30 <HAL_DMA_IRQHandler+0x1e0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d013      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x194>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1c      	ldr	r2, [pc, #112]	; (8004a34 <HAL_DMA_IRQHandler+0x1e4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00e      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x194>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <HAL_DMA_IRQHandler+0x1e8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d009      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x194>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a19      	ldr	r2, [pc, #100]	; (8004a3c <HAL_DMA_IRQHandler+0x1ec>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d004      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x194>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a18      	ldr	r2, [pc, #96]	; (8004a40 <HAL_DMA_IRQHandler+0x1f0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d12f      	bne.n	8004a44 <HAL_DMA_IRQHandler+0x1f4>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	bf14      	ite	ne
 80049f2:	2301      	movne	r3, #1
 80049f4:	2300      	moveq	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	e02e      	b.n	8004a58 <HAL_DMA_IRQHandler+0x208>
 80049fa:	bf00      	nop
 80049fc:	24000400 	.word	0x24000400
 8004a00:	1b4e81b5 	.word	0x1b4e81b5
 8004a04:	40020010 	.word	0x40020010
 8004a08:	40020028 	.word	0x40020028
 8004a0c:	40020040 	.word	0x40020040
 8004a10:	40020058 	.word	0x40020058
 8004a14:	40020070 	.word	0x40020070
 8004a18:	40020088 	.word	0x40020088
 8004a1c:	400200a0 	.word	0x400200a0
 8004a20:	400200b8 	.word	0x400200b8
 8004a24:	40020410 	.word	0x40020410
 8004a28:	40020428 	.word	0x40020428
 8004a2c:	40020440 	.word	0x40020440
 8004a30:	40020458 	.word	0x40020458
 8004a34:	40020470 	.word	0x40020470
 8004a38:	40020488 	.word	0x40020488
 8004a3c:	400204a0 	.word	0x400204a0
 8004a40:	400204b8 	.word	0x400204b8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d015      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0204 	bic.w	r2, r2, #4
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	2208      	movs	r2, #8
 8004a76:	409a      	lsls	r2, r3
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	f043 0201 	orr.w	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	fa22 f303 	lsr.w	r3, r2, r3
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d06e      	beq.n	8004b7c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a69      	ldr	r2, [pc, #420]	; (8004c48 <HAL_DMA_IRQHandler+0x3f8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d04a      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x2ee>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a67      	ldr	r2, [pc, #412]	; (8004c4c <HAL_DMA_IRQHandler+0x3fc>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d045      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x2ee>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a66      	ldr	r2, [pc, #408]	; (8004c50 <HAL_DMA_IRQHandler+0x400>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d040      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x2ee>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a64      	ldr	r2, [pc, #400]	; (8004c54 <HAL_DMA_IRQHandler+0x404>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d03b      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x2ee>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a63      	ldr	r2, [pc, #396]	; (8004c58 <HAL_DMA_IRQHandler+0x408>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d036      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x2ee>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a61      	ldr	r2, [pc, #388]	; (8004c5c <HAL_DMA_IRQHandler+0x40c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d031      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x2ee>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a60      	ldr	r2, [pc, #384]	; (8004c60 <HAL_DMA_IRQHandler+0x410>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d02c      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x2ee>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a5e      	ldr	r2, [pc, #376]	; (8004c64 <HAL_DMA_IRQHandler+0x414>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d027      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x2ee>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a5d      	ldr	r2, [pc, #372]	; (8004c68 <HAL_DMA_IRQHandler+0x418>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d022      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x2ee>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a5b      	ldr	r2, [pc, #364]	; (8004c6c <HAL_DMA_IRQHandler+0x41c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d01d      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x2ee>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a5a      	ldr	r2, [pc, #360]	; (8004c70 <HAL_DMA_IRQHandler+0x420>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d018      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x2ee>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a58      	ldr	r2, [pc, #352]	; (8004c74 <HAL_DMA_IRQHandler+0x424>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x2ee>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a57      	ldr	r2, [pc, #348]	; (8004c78 <HAL_DMA_IRQHandler+0x428>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00e      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x2ee>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a55      	ldr	r2, [pc, #340]	; (8004c7c <HAL_DMA_IRQHandler+0x42c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d009      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x2ee>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a54      	ldr	r2, [pc, #336]	; (8004c80 <HAL_DMA_IRQHandler+0x430>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d004      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x2ee>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a52      	ldr	r2, [pc, #328]	; (8004c84 <HAL_DMA_IRQHandler+0x434>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d10a      	bne.n	8004b54 <HAL_DMA_IRQHandler+0x304>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	e003      	b.n	8004b5c <HAL_DMA_IRQHandler+0x30c>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00d      	beq.n	8004b7c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	2201      	movs	r2, #1
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b74:	f043 0202 	orr.w	r2, r3, #2
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	2204      	movs	r2, #4
 8004b86:	409a      	lsls	r2, r3
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 808f 	beq.w	8004cb0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a2c      	ldr	r2, [pc, #176]	; (8004c48 <HAL_DMA_IRQHandler+0x3f8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d04a      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x3e2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a2a      	ldr	r2, [pc, #168]	; (8004c4c <HAL_DMA_IRQHandler+0x3fc>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d045      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x3e2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a29      	ldr	r2, [pc, #164]	; (8004c50 <HAL_DMA_IRQHandler+0x400>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d040      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x3e2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a27      	ldr	r2, [pc, #156]	; (8004c54 <HAL_DMA_IRQHandler+0x404>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d03b      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x3e2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a26      	ldr	r2, [pc, #152]	; (8004c58 <HAL_DMA_IRQHandler+0x408>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d036      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x3e2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a24      	ldr	r2, [pc, #144]	; (8004c5c <HAL_DMA_IRQHandler+0x40c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d031      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x3e2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a23      	ldr	r2, [pc, #140]	; (8004c60 <HAL_DMA_IRQHandler+0x410>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d02c      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x3e2>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <HAL_DMA_IRQHandler+0x414>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d027      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x3e2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a20      	ldr	r2, [pc, #128]	; (8004c68 <HAL_DMA_IRQHandler+0x418>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d022      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x3e2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1e      	ldr	r2, [pc, #120]	; (8004c6c <HAL_DMA_IRQHandler+0x41c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d01d      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x3e2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <HAL_DMA_IRQHandler+0x420>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d018      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x3e2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <HAL_DMA_IRQHandler+0x424>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d013      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x3e2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1a      	ldr	r2, [pc, #104]	; (8004c78 <HAL_DMA_IRQHandler+0x428>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00e      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x3e2>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a18      	ldr	r2, [pc, #96]	; (8004c7c <HAL_DMA_IRQHandler+0x42c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x3e2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a17      	ldr	r2, [pc, #92]	; (8004c80 <HAL_DMA_IRQHandler+0x430>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d004      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x3e2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a15      	ldr	r2, [pc, #84]	; (8004c84 <HAL_DMA_IRQHandler+0x434>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d12a      	bne.n	8004c88 <HAL_DMA_IRQHandler+0x438>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf14      	ite	ne
 8004c40:	2301      	movne	r3, #1
 8004c42:	2300      	moveq	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e023      	b.n	8004c90 <HAL_DMA_IRQHandler+0x440>
 8004c48:	40020010 	.word	0x40020010
 8004c4c:	40020028 	.word	0x40020028
 8004c50:	40020040 	.word	0x40020040
 8004c54:	40020058 	.word	0x40020058
 8004c58:	40020070 	.word	0x40020070
 8004c5c:	40020088 	.word	0x40020088
 8004c60:	400200a0 	.word	0x400200a0
 8004c64:	400200b8 	.word	0x400200b8
 8004c68:	40020410 	.word	0x40020410
 8004c6c:	40020428 	.word	0x40020428
 8004c70:	40020440 	.word	0x40020440
 8004c74:	40020458 	.word	0x40020458
 8004c78:	40020470 	.word	0x40020470
 8004c7c:	40020488 	.word	0x40020488
 8004c80:	400204a0 	.word	0x400204a0
 8004c84:	400204b8 	.word	0x400204b8
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00d      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca8:	f043 0204 	orr.w	r2, r3, #4
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb4:	f003 031f 	and.w	r3, r3, #31
 8004cb8:	2210      	movs	r2, #16
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 80a6 	beq.w	8004e12 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a85      	ldr	r2, [pc, #532]	; (8004ee0 <HAL_DMA_IRQHandler+0x690>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d04a      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x516>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a83      	ldr	r2, [pc, #524]	; (8004ee4 <HAL_DMA_IRQHandler+0x694>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d045      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x516>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a82      	ldr	r2, [pc, #520]	; (8004ee8 <HAL_DMA_IRQHandler+0x698>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d040      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x516>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a80      	ldr	r2, [pc, #512]	; (8004eec <HAL_DMA_IRQHandler+0x69c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d03b      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x516>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a7f      	ldr	r2, [pc, #508]	; (8004ef0 <HAL_DMA_IRQHandler+0x6a0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d036      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x516>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a7d      	ldr	r2, [pc, #500]	; (8004ef4 <HAL_DMA_IRQHandler+0x6a4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d031      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x516>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a7c      	ldr	r2, [pc, #496]	; (8004ef8 <HAL_DMA_IRQHandler+0x6a8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d02c      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x516>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a7a      	ldr	r2, [pc, #488]	; (8004efc <HAL_DMA_IRQHandler+0x6ac>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d027      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x516>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a79      	ldr	r2, [pc, #484]	; (8004f00 <HAL_DMA_IRQHandler+0x6b0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d022      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x516>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a77      	ldr	r2, [pc, #476]	; (8004f04 <HAL_DMA_IRQHandler+0x6b4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d01d      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x516>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a76      	ldr	r2, [pc, #472]	; (8004f08 <HAL_DMA_IRQHandler+0x6b8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d018      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x516>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a74      	ldr	r2, [pc, #464]	; (8004f0c <HAL_DMA_IRQHandler+0x6bc>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d013      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x516>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a73      	ldr	r2, [pc, #460]	; (8004f10 <HAL_DMA_IRQHandler+0x6c0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00e      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x516>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a71      	ldr	r2, [pc, #452]	; (8004f14 <HAL_DMA_IRQHandler+0x6c4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d009      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x516>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a70      	ldr	r2, [pc, #448]	; (8004f18 <HAL_DMA_IRQHandler+0x6c8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d004      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x516>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a6e      	ldr	r2, [pc, #440]	; (8004f1c <HAL_DMA_IRQHandler+0x6cc>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d10a      	bne.n	8004d7c <HAL_DMA_IRQHandler+0x52c>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bf14      	ite	ne
 8004d74:	2301      	movne	r3, #1
 8004d76:	2300      	moveq	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	e009      	b.n	8004d90 <HAL_DMA_IRQHandler+0x540>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bf14      	ite	ne
 8004d8a:	2301      	movne	r3, #1
 8004d8c:	2300      	moveq	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d03e      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	2210      	movs	r2, #16
 8004d9e:	409a      	lsls	r2, r3
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d018      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d108      	bne.n	8004dd2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d024      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	4798      	blx	r3
 8004dd0:	e01f      	b.n	8004e12 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01b      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	4798      	blx	r3
 8004de2:	e016      	b.n	8004e12 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d107      	bne.n	8004e02 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0208 	bic.w	r2, r2, #8
 8004e00:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e16:	f003 031f 	and.w	r3, r3, #31
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 8110 	beq.w	8005048 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a2c      	ldr	r2, [pc, #176]	; (8004ee0 <HAL_DMA_IRQHandler+0x690>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d04a      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x678>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a2b      	ldr	r2, [pc, #172]	; (8004ee4 <HAL_DMA_IRQHandler+0x694>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d045      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x678>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a29      	ldr	r2, [pc, #164]	; (8004ee8 <HAL_DMA_IRQHandler+0x698>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d040      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x678>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a28      	ldr	r2, [pc, #160]	; (8004eec <HAL_DMA_IRQHandler+0x69c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d03b      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x678>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a26      	ldr	r2, [pc, #152]	; (8004ef0 <HAL_DMA_IRQHandler+0x6a0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d036      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x678>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a25      	ldr	r2, [pc, #148]	; (8004ef4 <HAL_DMA_IRQHandler+0x6a4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d031      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x678>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a23      	ldr	r2, [pc, #140]	; (8004ef8 <HAL_DMA_IRQHandler+0x6a8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d02c      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x678>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a22      	ldr	r2, [pc, #136]	; (8004efc <HAL_DMA_IRQHandler+0x6ac>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d027      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x678>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a20      	ldr	r2, [pc, #128]	; (8004f00 <HAL_DMA_IRQHandler+0x6b0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d022      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x678>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1f      	ldr	r2, [pc, #124]	; (8004f04 <HAL_DMA_IRQHandler+0x6b4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d01d      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x678>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1d      	ldr	r2, [pc, #116]	; (8004f08 <HAL_DMA_IRQHandler+0x6b8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d018      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x678>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1c      	ldr	r2, [pc, #112]	; (8004f0c <HAL_DMA_IRQHandler+0x6bc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d013      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x678>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <HAL_DMA_IRQHandler+0x6c0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00e      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x678>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <HAL_DMA_IRQHandler+0x6c4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d009      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x678>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <HAL_DMA_IRQHandler+0x6c8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x678>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a16      	ldr	r2, [pc, #88]	; (8004f1c <HAL_DMA_IRQHandler+0x6cc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d12b      	bne.n	8004f20 <HAL_DMA_IRQHandler+0x6d0>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0310 	and.w	r3, r3, #16
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	bf14      	ite	ne
 8004ed6:	2301      	movne	r3, #1
 8004ed8:	2300      	moveq	r3, #0
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	e02a      	b.n	8004f34 <HAL_DMA_IRQHandler+0x6e4>
 8004ede:	bf00      	nop
 8004ee0:	40020010 	.word	0x40020010
 8004ee4:	40020028 	.word	0x40020028
 8004ee8:	40020040 	.word	0x40020040
 8004eec:	40020058 	.word	0x40020058
 8004ef0:	40020070 	.word	0x40020070
 8004ef4:	40020088 	.word	0x40020088
 8004ef8:	400200a0 	.word	0x400200a0
 8004efc:	400200b8 	.word	0x400200b8
 8004f00:	40020410 	.word	0x40020410
 8004f04:	40020428 	.word	0x40020428
 8004f08:	40020440 	.word	0x40020440
 8004f0c:	40020458 	.word	0x40020458
 8004f10:	40020470 	.word	0x40020470
 8004f14:	40020488 	.word	0x40020488
 8004f18:	400204a0 	.word	0x400204a0
 8004f1c:	400204b8 	.word	0x400204b8
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bf14      	ite	ne
 8004f2e:	2301      	movne	r3, #1
 8004f30:	2300      	moveq	r3, #0
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8087 	beq.w	8005048 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3e:	f003 031f 	and.w	r3, r3, #31
 8004f42:	2220      	movs	r2, #32
 8004f44:	409a      	lsls	r2, r3
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d139      	bne.n	8004fca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0216 	bic.w	r2, r2, #22
 8004f64:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695a      	ldr	r2, [r3, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f74:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d103      	bne.n	8004f86 <HAL_DMA_IRQHandler+0x736>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0208 	bic.w	r2, r2, #8
 8004f94:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	223f      	movs	r2, #63	; 0x3f
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 834a 	beq.w	8005654 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	4798      	blx	r3
          }
          return;
 8004fc8:	e344      	b.n	8005654 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d018      	beq.n	800500a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d108      	bne.n	8004ff8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d02c      	beq.n	8005048 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	4798      	blx	r3
 8004ff6:	e027      	b.n	8005048 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d023      	beq.n	8005048 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	4798      	blx	r3
 8005008:	e01e      	b.n	8005048 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10f      	bne.n	8005038 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0210 	bic.w	r2, r2, #16
 8005026:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8306 	beq.w	800565e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 8088 	beq.w	8005170 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2204      	movs	r2, #4
 8005064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a7a      	ldr	r2, [pc, #488]	; (8005258 <HAL_DMA_IRQHandler+0xa08>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d04a      	beq.n	8005108 <HAL_DMA_IRQHandler+0x8b8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a79      	ldr	r2, [pc, #484]	; (800525c <HAL_DMA_IRQHandler+0xa0c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d045      	beq.n	8005108 <HAL_DMA_IRQHandler+0x8b8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a77      	ldr	r2, [pc, #476]	; (8005260 <HAL_DMA_IRQHandler+0xa10>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d040      	beq.n	8005108 <HAL_DMA_IRQHandler+0x8b8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a76      	ldr	r2, [pc, #472]	; (8005264 <HAL_DMA_IRQHandler+0xa14>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d03b      	beq.n	8005108 <HAL_DMA_IRQHandler+0x8b8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a74      	ldr	r2, [pc, #464]	; (8005268 <HAL_DMA_IRQHandler+0xa18>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d036      	beq.n	8005108 <HAL_DMA_IRQHandler+0x8b8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a73      	ldr	r2, [pc, #460]	; (800526c <HAL_DMA_IRQHandler+0xa1c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d031      	beq.n	8005108 <HAL_DMA_IRQHandler+0x8b8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a71      	ldr	r2, [pc, #452]	; (8005270 <HAL_DMA_IRQHandler+0xa20>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d02c      	beq.n	8005108 <HAL_DMA_IRQHandler+0x8b8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a70      	ldr	r2, [pc, #448]	; (8005274 <HAL_DMA_IRQHandler+0xa24>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d027      	beq.n	8005108 <HAL_DMA_IRQHandler+0x8b8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a6e      	ldr	r2, [pc, #440]	; (8005278 <HAL_DMA_IRQHandler+0xa28>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d022      	beq.n	8005108 <HAL_DMA_IRQHandler+0x8b8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a6d      	ldr	r2, [pc, #436]	; (800527c <HAL_DMA_IRQHandler+0xa2c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d01d      	beq.n	8005108 <HAL_DMA_IRQHandler+0x8b8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a6b      	ldr	r2, [pc, #428]	; (8005280 <HAL_DMA_IRQHandler+0xa30>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d018      	beq.n	8005108 <HAL_DMA_IRQHandler+0x8b8>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a6a      	ldr	r2, [pc, #424]	; (8005284 <HAL_DMA_IRQHandler+0xa34>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d013      	beq.n	8005108 <HAL_DMA_IRQHandler+0x8b8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a68      	ldr	r2, [pc, #416]	; (8005288 <HAL_DMA_IRQHandler+0xa38>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00e      	beq.n	8005108 <HAL_DMA_IRQHandler+0x8b8>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a67      	ldr	r2, [pc, #412]	; (800528c <HAL_DMA_IRQHandler+0xa3c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d009      	beq.n	8005108 <HAL_DMA_IRQHandler+0x8b8>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a65      	ldr	r2, [pc, #404]	; (8005290 <HAL_DMA_IRQHandler+0xa40>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <HAL_DMA_IRQHandler+0x8b8>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a64      	ldr	r2, [pc, #400]	; (8005294 <HAL_DMA_IRQHandler+0xa44>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d108      	bne.n	800511a <HAL_DMA_IRQHandler+0x8ca>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0201 	bic.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	e007      	b.n	800512a <HAL_DMA_IRQHandler+0x8da>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0201 	bic.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3301      	adds	r3, #1
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005132:	429a      	cmp	r2, r3
 8005134:	d307      	bcc.n	8005146 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f2      	bne.n	800512a <HAL_DMA_IRQHandler+0x8da>
 8005144:	e000      	b.n	8005148 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005146:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2203      	movs	r2, #3
 8005162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005166:	e003      	b.n	8005170 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 8272 	beq.w	800565e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	4798      	blx	r3
 8005182:	e26c      	b.n	800565e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a43      	ldr	r2, [pc, #268]	; (8005298 <HAL_DMA_IRQHandler+0xa48>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d022      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x984>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a42      	ldr	r2, [pc, #264]	; (800529c <HAL_DMA_IRQHandler+0xa4c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d01d      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x984>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a40      	ldr	r2, [pc, #256]	; (80052a0 <HAL_DMA_IRQHandler+0xa50>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d018      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x984>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a3f      	ldr	r2, [pc, #252]	; (80052a4 <HAL_DMA_IRQHandler+0xa54>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x984>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a3d      	ldr	r2, [pc, #244]	; (80052a8 <HAL_DMA_IRQHandler+0xa58>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00e      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x984>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a3c      	ldr	r2, [pc, #240]	; (80052ac <HAL_DMA_IRQHandler+0xa5c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d009      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x984>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a3a      	ldr	r2, [pc, #232]	; (80052b0 <HAL_DMA_IRQHandler+0xa60>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x984>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a39      	ldr	r2, [pc, #228]	; (80052b4 <HAL_DMA_IRQHandler+0xa64>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d101      	bne.n	80051d8 <HAL_DMA_IRQHandler+0x988>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <HAL_DMA_IRQHandler+0x98a>
 80051d8:	2300      	movs	r3, #0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 823f 	beq.w	800565e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	2204      	movs	r2, #4
 80051f2:	409a      	lsls	r2, r3
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 80cd 	beq.w	8005398 <HAL_DMA_IRQHandler+0xb48>
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80c7 	beq.w	8005398 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520e:	f003 031f 	and.w	r3, r3, #31
 8005212:	2204      	movs	r2, #4
 8005214:	409a      	lsls	r2, r3
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d049      	beq.n	80052b8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d109      	bne.n	8005242 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 8210 	beq.w	8005658 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005240:	e20a      	b.n	8005658 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 8206 	beq.w	8005658 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005254:	e200      	b.n	8005658 <HAL_DMA_IRQHandler+0xe08>
 8005256:	bf00      	nop
 8005258:	40020010 	.word	0x40020010
 800525c:	40020028 	.word	0x40020028
 8005260:	40020040 	.word	0x40020040
 8005264:	40020058 	.word	0x40020058
 8005268:	40020070 	.word	0x40020070
 800526c:	40020088 	.word	0x40020088
 8005270:	400200a0 	.word	0x400200a0
 8005274:	400200b8 	.word	0x400200b8
 8005278:	40020410 	.word	0x40020410
 800527c:	40020428 	.word	0x40020428
 8005280:	40020440 	.word	0x40020440
 8005284:	40020458 	.word	0x40020458
 8005288:	40020470 	.word	0x40020470
 800528c:	40020488 	.word	0x40020488
 8005290:	400204a0 	.word	0x400204a0
 8005294:	400204b8 	.word	0x400204b8
 8005298:	58025408 	.word	0x58025408
 800529c:	5802541c 	.word	0x5802541c
 80052a0:	58025430 	.word	0x58025430
 80052a4:	58025444 	.word	0x58025444
 80052a8:	58025458 	.word	0x58025458
 80052ac:	5802546c 	.word	0x5802546c
 80052b0:	58025480 	.word	0x58025480
 80052b4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d160      	bne.n	8005384 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a8c      	ldr	r2, [pc, #560]	; (80054f8 <HAL_DMA_IRQHandler+0xca8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d04a      	beq.n	8005362 <HAL_DMA_IRQHandler+0xb12>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a8a      	ldr	r2, [pc, #552]	; (80054fc <HAL_DMA_IRQHandler+0xcac>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d045      	beq.n	8005362 <HAL_DMA_IRQHandler+0xb12>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a89      	ldr	r2, [pc, #548]	; (8005500 <HAL_DMA_IRQHandler+0xcb0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d040      	beq.n	8005362 <HAL_DMA_IRQHandler+0xb12>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a87      	ldr	r2, [pc, #540]	; (8005504 <HAL_DMA_IRQHandler+0xcb4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d03b      	beq.n	8005362 <HAL_DMA_IRQHandler+0xb12>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a86      	ldr	r2, [pc, #536]	; (8005508 <HAL_DMA_IRQHandler+0xcb8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d036      	beq.n	8005362 <HAL_DMA_IRQHandler+0xb12>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a84      	ldr	r2, [pc, #528]	; (800550c <HAL_DMA_IRQHandler+0xcbc>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d031      	beq.n	8005362 <HAL_DMA_IRQHandler+0xb12>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a83      	ldr	r2, [pc, #524]	; (8005510 <HAL_DMA_IRQHandler+0xcc0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d02c      	beq.n	8005362 <HAL_DMA_IRQHandler+0xb12>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a81      	ldr	r2, [pc, #516]	; (8005514 <HAL_DMA_IRQHandler+0xcc4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d027      	beq.n	8005362 <HAL_DMA_IRQHandler+0xb12>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a80      	ldr	r2, [pc, #512]	; (8005518 <HAL_DMA_IRQHandler+0xcc8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d022      	beq.n	8005362 <HAL_DMA_IRQHandler+0xb12>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a7e      	ldr	r2, [pc, #504]	; (800551c <HAL_DMA_IRQHandler+0xccc>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d01d      	beq.n	8005362 <HAL_DMA_IRQHandler+0xb12>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a7d      	ldr	r2, [pc, #500]	; (8005520 <HAL_DMA_IRQHandler+0xcd0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d018      	beq.n	8005362 <HAL_DMA_IRQHandler+0xb12>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a7b      	ldr	r2, [pc, #492]	; (8005524 <HAL_DMA_IRQHandler+0xcd4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d013      	beq.n	8005362 <HAL_DMA_IRQHandler+0xb12>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a7a      	ldr	r2, [pc, #488]	; (8005528 <HAL_DMA_IRQHandler+0xcd8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00e      	beq.n	8005362 <HAL_DMA_IRQHandler+0xb12>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a78      	ldr	r2, [pc, #480]	; (800552c <HAL_DMA_IRQHandler+0xcdc>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d009      	beq.n	8005362 <HAL_DMA_IRQHandler+0xb12>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a77      	ldr	r2, [pc, #476]	; (8005530 <HAL_DMA_IRQHandler+0xce0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d004      	beq.n	8005362 <HAL_DMA_IRQHandler+0xb12>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a75      	ldr	r2, [pc, #468]	; (8005534 <HAL_DMA_IRQHandler+0xce4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d108      	bne.n	8005374 <HAL_DMA_IRQHandler+0xb24>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0208 	bic.w	r2, r2, #8
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e007      	b.n	8005384 <HAL_DMA_IRQHandler+0xb34>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0204 	bic.w	r2, r2, #4
 8005382:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 8165 	beq.w	8005658 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005396:	e15f      	b.n	8005658 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	2202      	movs	r2, #2
 80053a2:	409a      	lsls	r2, r3
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80c5 	beq.w	8005538 <HAL_DMA_IRQHandler+0xce8>
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80bf 	beq.w	8005538 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053be:	f003 031f 	and.w	r3, r3, #31
 80053c2:	2202      	movs	r2, #2
 80053c4:	409a      	lsls	r2, r3
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d018      	beq.n	8005406 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d109      	bne.n	80053f2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 813a 	beq.w	800565c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053f0:	e134      	b.n	800565c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 8130 	beq.w	800565c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005404:	e12a      	b.n	800565c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d168      	bne.n	80054e2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a38      	ldr	r2, [pc, #224]	; (80054f8 <HAL_DMA_IRQHandler+0xca8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d04a      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xc60>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a37      	ldr	r2, [pc, #220]	; (80054fc <HAL_DMA_IRQHandler+0xcac>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d045      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xc60>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a35      	ldr	r2, [pc, #212]	; (8005500 <HAL_DMA_IRQHandler+0xcb0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d040      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xc60>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a34      	ldr	r2, [pc, #208]	; (8005504 <HAL_DMA_IRQHandler+0xcb4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d03b      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xc60>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a32      	ldr	r2, [pc, #200]	; (8005508 <HAL_DMA_IRQHandler+0xcb8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d036      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xc60>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a31      	ldr	r2, [pc, #196]	; (800550c <HAL_DMA_IRQHandler+0xcbc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d031      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xc60>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a2f      	ldr	r2, [pc, #188]	; (8005510 <HAL_DMA_IRQHandler+0xcc0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d02c      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xc60>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a2e      	ldr	r2, [pc, #184]	; (8005514 <HAL_DMA_IRQHandler+0xcc4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d027      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xc60>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a2c      	ldr	r2, [pc, #176]	; (8005518 <HAL_DMA_IRQHandler+0xcc8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d022      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xc60>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a2b      	ldr	r2, [pc, #172]	; (800551c <HAL_DMA_IRQHandler+0xccc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d01d      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xc60>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a29      	ldr	r2, [pc, #164]	; (8005520 <HAL_DMA_IRQHandler+0xcd0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d018      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xc60>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a28      	ldr	r2, [pc, #160]	; (8005524 <HAL_DMA_IRQHandler+0xcd4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d013      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xc60>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a26      	ldr	r2, [pc, #152]	; (8005528 <HAL_DMA_IRQHandler+0xcd8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00e      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xc60>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a25      	ldr	r2, [pc, #148]	; (800552c <HAL_DMA_IRQHandler+0xcdc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d009      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xc60>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a23      	ldr	r2, [pc, #140]	; (8005530 <HAL_DMA_IRQHandler+0xce0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xc60>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a22      	ldr	r2, [pc, #136]	; (8005534 <HAL_DMA_IRQHandler+0xce4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d108      	bne.n	80054c2 <HAL_DMA_IRQHandler+0xc72>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0214 	bic.w	r2, r2, #20
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	e007      	b.n	80054d2 <HAL_DMA_IRQHandler+0xc82>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 020a 	bic.w	r2, r2, #10
 80054d0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 80b8 	beq.w	800565c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054f4:	e0b2      	b.n	800565c <HAL_DMA_IRQHandler+0xe0c>
 80054f6:	bf00      	nop
 80054f8:	40020010 	.word	0x40020010
 80054fc:	40020028 	.word	0x40020028
 8005500:	40020040 	.word	0x40020040
 8005504:	40020058 	.word	0x40020058
 8005508:	40020070 	.word	0x40020070
 800550c:	40020088 	.word	0x40020088
 8005510:	400200a0 	.word	0x400200a0
 8005514:	400200b8 	.word	0x400200b8
 8005518:	40020410 	.word	0x40020410
 800551c:	40020428 	.word	0x40020428
 8005520:	40020440 	.word	0x40020440
 8005524:	40020458 	.word	0x40020458
 8005528:	40020470 	.word	0x40020470
 800552c:	40020488 	.word	0x40020488
 8005530:	400204a0 	.word	0x400204a0
 8005534:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	2208      	movs	r2, #8
 8005542:	409a      	lsls	r2, r3
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	4013      	ands	r3, r2
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 8088 	beq.w	800565e <HAL_DMA_IRQHandler+0xe0e>
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8082 	beq.w	800565e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a41      	ldr	r2, [pc, #260]	; (8005664 <HAL_DMA_IRQHandler+0xe14>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d04a      	beq.n	80055fa <HAL_DMA_IRQHandler+0xdaa>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a3f      	ldr	r2, [pc, #252]	; (8005668 <HAL_DMA_IRQHandler+0xe18>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d045      	beq.n	80055fa <HAL_DMA_IRQHandler+0xdaa>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a3e      	ldr	r2, [pc, #248]	; (800566c <HAL_DMA_IRQHandler+0xe1c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d040      	beq.n	80055fa <HAL_DMA_IRQHandler+0xdaa>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a3c      	ldr	r2, [pc, #240]	; (8005670 <HAL_DMA_IRQHandler+0xe20>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d03b      	beq.n	80055fa <HAL_DMA_IRQHandler+0xdaa>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a3b      	ldr	r2, [pc, #236]	; (8005674 <HAL_DMA_IRQHandler+0xe24>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d036      	beq.n	80055fa <HAL_DMA_IRQHandler+0xdaa>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a39      	ldr	r2, [pc, #228]	; (8005678 <HAL_DMA_IRQHandler+0xe28>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d031      	beq.n	80055fa <HAL_DMA_IRQHandler+0xdaa>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a38      	ldr	r2, [pc, #224]	; (800567c <HAL_DMA_IRQHandler+0xe2c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d02c      	beq.n	80055fa <HAL_DMA_IRQHandler+0xdaa>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a36      	ldr	r2, [pc, #216]	; (8005680 <HAL_DMA_IRQHandler+0xe30>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d027      	beq.n	80055fa <HAL_DMA_IRQHandler+0xdaa>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a35      	ldr	r2, [pc, #212]	; (8005684 <HAL_DMA_IRQHandler+0xe34>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d022      	beq.n	80055fa <HAL_DMA_IRQHandler+0xdaa>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a33      	ldr	r2, [pc, #204]	; (8005688 <HAL_DMA_IRQHandler+0xe38>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d01d      	beq.n	80055fa <HAL_DMA_IRQHandler+0xdaa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a32      	ldr	r2, [pc, #200]	; (800568c <HAL_DMA_IRQHandler+0xe3c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d018      	beq.n	80055fa <HAL_DMA_IRQHandler+0xdaa>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a30      	ldr	r2, [pc, #192]	; (8005690 <HAL_DMA_IRQHandler+0xe40>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d013      	beq.n	80055fa <HAL_DMA_IRQHandler+0xdaa>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2f      	ldr	r2, [pc, #188]	; (8005694 <HAL_DMA_IRQHandler+0xe44>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00e      	beq.n	80055fa <HAL_DMA_IRQHandler+0xdaa>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2d      	ldr	r2, [pc, #180]	; (8005698 <HAL_DMA_IRQHandler+0xe48>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d009      	beq.n	80055fa <HAL_DMA_IRQHandler+0xdaa>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2c      	ldr	r2, [pc, #176]	; (800569c <HAL_DMA_IRQHandler+0xe4c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d004      	beq.n	80055fa <HAL_DMA_IRQHandler+0xdaa>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a2a      	ldr	r2, [pc, #168]	; (80056a0 <HAL_DMA_IRQHandler+0xe50>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d108      	bne.n	800560c <HAL_DMA_IRQHandler+0xdbc>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 021c 	bic.w	r2, r2, #28
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	e007      	b.n	800561c <HAL_DMA_IRQHandler+0xdcc>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 020e 	bic.w	r2, r2, #14
 800561a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	2201      	movs	r2, #1
 8005626:	409a      	lsls	r2, r3
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	4798      	blx	r3
 8005652:	e004      	b.n	800565e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005654:	bf00      	nop
 8005656:	e002      	b.n	800565e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005658:	bf00      	nop
 800565a:	e000      	b.n	800565e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800565c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800565e:	3728      	adds	r7, #40	; 0x28
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40020010 	.word	0x40020010
 8005668:	40020028 	.word	0x40020028
 800566c:	40020040 	.word	0x40020040
 8005670:	40020058 	.word	0x40020058
 8005674:	40020070 	.word	0x40020070
 8005678:	40020088 	.word	0x40020088
 800567c:	400200a0 	.word	0x400200a0
 8005680:	400200b8 	.word	0x400200b8
 8005684:	40020410 	.word	0x40020410
 8005688:	40020428 	.word	0x40020428
 800568c:	40020440 	.word	0x40020440
 8005690:	40020458 	.word	0x40020458
 8005694:	40020470 	.word	0x40020470
 8005698:	40020488 	.word	0x40020488
 800569c:	400204a0 	.word	0x400204a0
 80056a0:	400204b8 	.word	0x400204b8

080056a4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a84      	ldr	r2, [pc, #528]	; (80058ec <DMA_SetConfig+0x230>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d072      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a82      	ldr	r2, [pc, #520]	; (80058f0 <DMA_SetConfig+0x234>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d06d      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a81      	ldr	r2, [pc, #516]	; (80058f4 <DMA_SetConfig+0x238>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d068      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a7f      	ldr	r2, [pc, #508]	; (80058f8 <DMA_SetConfig+0x23c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d063      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a7e      	ldr	r2, [pc, #504]	; (80058fc <DMA_SetConfig+0x240>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d05e      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a7c      	ldr	r2, [pc, #496]	; (8005900 <DMA_SetConfig+0x244>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d059      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a7b      	ldr	r2, [pc, #492]	; (8005904 <DMA_SetConfig+0x248>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d054      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a79      	ldr	r2, [pc, #484]	; (8005908 <DMA_SetConfig+0x24c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d04f      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a78      	ldr	r2, [pc, #480]	; (800590c <DMA_SetConfig+0x250>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d04a      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a76      	ldr	r2, [pc, #472]	; (8005910 <DMA_SetConfig+0x254>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d045      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a75      	ldr	r2, [pc, #468]	; (8005914 <DMA_SetConfig+0x258>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d040      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a73      	ldr	r2, [pc, #460]	; (8005918 <DMA_SetConfig+0x25c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d03b      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a72      	ldr	r2, [pc, #456]	; (800591c <DMA_SetConfig+0x260>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d036      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a70      	ldr	r2, [pc, #448]	; (8005920 <DMA_SetConfig+0x264>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d031      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a6f      	ldr	r2, [pc, #444]	; (8005924 <DMA_SetConfig+0x268>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d02c      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a6d      	ldr	r2, [pc, #436]	; (8005928 <DMA_SetConfig+0x26c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d027      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a6c      	ldr	r2, [pc, #432]	; (800592c <DMA_SetConfig+0x270>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d022      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a6a      	ldr	r2, [pc, #424]	; (8005930 <DMA_SetConfig+0x274>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d01d      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a69      	ldr	r2, [pc, #420]	; (8005934 <DMA_SetConfig+0x278>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d018      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a67      	ldr	r2, [pc, #412]	; (8005938 <DMA_SetConfig+0x27c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d013      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a66      	ldr	r2, [pc, #408]	; (800593c <DMA_SetConfig+0x280>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00e      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a64      	ldr	r2, [pc, #400]	; (8005940 <DMA_SetConfig+0x284>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d009      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a63      	ldr	r2, [pc, #396]	; (8005944 <DMA_SetConfig+0x288>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d004      	beq.n	80057c6 <DMA_SetConfig+0x10a>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a61      	ldr	r2, [pc, #388]	; (8005948 <DMA_SetConfig+0x28c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d101      	bne.n	80057ca <DMA_SetConfig+0x10e>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e000      	b.n	80057cc <DMA_SetConfig+0x110>
 80057ca:	2300      	movs	r3, #0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00d      	beq.n	80057ec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057d8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d004      	beq.n	80057ec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057ea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a3e      	ldr	r2, [pc, #248]	; (80058ec <DMA_SetConfig+0x230>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d04a      	beq.n	800588c <DMA_SetConfig+0x1d0>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a3d      	ldr	r2, [pc, #244]	; (80058f0 <DMA_SetConfig+0x234>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d045      	beq.n	800588c <DMA_SetConfig+0x1d0>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a3b      	ldr	r2, [pc, #236]	; (80058f4 <DMA_SetConfig+0x238>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d040      	beq.n	800588c <DMA_SetConfig+0x1d0>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a3a      	ldr	r2, [pc, #232]	; (80058f8 <DMA_SetConfig+0x23c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d03b      	beq.n	800588c <DMA_SetConfig+0x1d0>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a38      	ldr	r2, [pc, #224]	; (80058fc <DMA_SetConfig+0x240>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d036      	beq.n	800588c <DMA_SetConfig+0x1d0>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a37      	ldr	r2, [pc, #220]	; (8005900 <DMA_SetConfig+0x244>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d031      	beq.n	800588c <DMA_SetConfig+0x1d0>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a35      	ldr	r2, [pc, #212]	; (8005904 <DMA_SetConfig+0x248>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d02c      	beq.n	800588c <DMA_SetConfig+0x1d0>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a34      	ldr	r2, [pc, #208]	; (8005908 <DMA_SetConfig+0x24c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d027      	beq.n	800588c <DMA_SetConfig+0x1d0>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a32      	ldr	r2, [pc, #200]	; (800590c <DMA_SetConfig+0x250>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d022      	beq.n	800588c <DMA_SetConfig+0x1d0>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a31      	ldr	r2, [pc, #196]	; (8005910 <DMA_SetConfig+0x254>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d01d      	beq.n	800588c <DMA_SetConfig+0x1d0>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a2f      	ldr	r2, [pc, #188]	; (8005914 <DMA_SetConfig+0x258>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d018      	beq.n	800588c <DMA_SetConfig+0x1d0>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a2e      	ldr	r2, [pc, #184]	; (8005918 <DMA_SetConfig+0x25c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d013      	beq.n	800588c <DMA_SetConfig+0x1d0>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a2c      	ldr	r2, [pc, #176]	; (800591c <DMA_SetConfig+0x260>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00e      	beq.n	800588c <DMA_SetConfig+0x1d0>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a2b      	ldr	r2, [pc, #172]	; (8005920 <DMA_SetConfig+0x264>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d009      	beq.n	800588c <DMA_SetConfig+0x1d0>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a29      	ldr	r2, [pc, #164]	; (8005924 <DMA_SetConfig+0x268>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d004      	beq.n	800588c <DMA_SetConfig+0x1d0>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a28      	ldr	r2, [pc, #160]	; (8005928 <DMA_SetConfig+0x26c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d101      	bne.n	8005890 <DMA_SetConfig+0x1d4>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <DMA_SetConfig+0x1d6>
 8005890:	2300      	movs	r3, #0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d05a      	beq.n	800594c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	223f      	movs	r2, #63	; 0x3f
 80058a0:	409a      	lsls	r2, r3
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058b4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	d108      	bne.n	80058d8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80058d6:	e087      	b.n	80059e8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	60da      	str	r2, [r3, #12]
}
 80058e8:	e07e      	b.n	80059e8 <DMA_SetConfig+0x32c>
 80058ea:	bf00      	nop
 80058ec:	40020010 	.word	0x40020010
 80058f0:	40020028 	.word	0x40020028
 80058f4:	40020040 	.word	0x40020040
 80058f8:	40020058 	.word	0x40020058
 80058fc:	40020070 	.word	0x40020070
 8005900:	40020088 	.word	0x40020088
 8005904:	400200a0 	.word	0x400200a0
 8005908:	400200b8 	.word	0x400200b8
 800590c:	40020410 	.word	0x40020410
 8005910:	40020428 	.word	0x40020428
 8005914:	40020440 	.word	0x40020440
 8005918:	40020458 	.word	0x40020458
 800591c:	40020470 	.word	0x40020470
 8005920:	40020488 	.word	0x40020488
 8005924:	400204a0 	.word	0x400204a0
 8005928:	400204b8 	.word	0x400204b8
 800592c:	58025408 	.word	0x58025408
 8005930:	5802541c 	.word	0x5802541c
 8005934:	58025430 	.word	0x58025430
 8005938:	58025444 	.word	0x58025444
 800593c:	58025458 	.word	0x58025458
 8005940:	5802546c 	.word	0x5802546c
 8005944:	58025480 	.word	0x58025480
 8005948:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a28      	ldr	r2, [pc, #160]	; (80059f4 <DMA_SetConfig+0x338>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d022      	beq.n	800599c <DMA_SetConfig+0x2e0>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a27      	ldr	r2, [pc, #156]	; (80059f8 <DMA_SetConfig+0x33c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d01d      	beq.n	800599c <DMA_SetConfig+0x2e0>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a25      	ldr	r2, [pc, #148]	; (80059fc <DMA_SetConfig+0x340>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d018      	beq.n	800599c <DMA_SetConfig+0x2e0>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a24      	ldr	r2, [pc, #144]	; (8005a00 <DMA_SetConfig+0x344>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d013      	beq.n	800599c <DMA_SetConfig+0x2e0>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a22      	ldr	r2, [pc, #136]	; (8005a04 <DMA_SetConfig+0x348>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00e      	beq.n	800599c <DMA_SetConfig+0x2e0>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a21      	ldr	r2, [pc, #132]	; (8005a08 <DMA_SetConfig+0x34c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d009      	beq.n	800599c <DMA_SetConfig+0x2e0>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1f      	ldr	r2, [pc, #124]	; (8005a0c <DMA_SetConfig+0x350>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d004      	beq.n	800599c <DMA_SetConfig+0x2e0>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1e      	ldr	r2, [pc, #120]	; (8005a10 <DMA_SetConfig+0x354>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d101      	bne.n	80059a0 <DMA_SetConfig+0x2e4>
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <DMA_SetConfig+0x2e6>
 80059a0:	2300      	movs	r3, #0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d020      	beq.n	80059e8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	2201      	movs	r2, #1
 80059b0:	409a      	lsls	r2, r3
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b40      	cmp	r3, #64	; 0x40
 80059c4:	d108      	bne.n	80059d8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	60da      	str	r2, [r3, #12]
}
 80059d6:	e007      	b.n	80059e8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	60da      	str	r2, [r3, #12]
}
 80059e8:	bf00      	nop
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	58025408 	.word	0x58025408
 80059f8:	5802541c 	.word	0x5802541c
 80059fc:	58025430 	.word	0x58025430
 8005a00:	58025444 	.word	0x58025444
 8005a04:	58025458 	.word	0x58025458
 8005a08:	5802546c 	.word	0x5802546c
 8005a0c:	58025480 	.word	0x58025480
 8005a10:	58025494 	.word	0x58025494

08005a14 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e0c6      	b.n	8005bb4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d102      	bne.n	8005a34 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f008 fb16 	bl	800e060 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2223      	movs	r2, #35	; 0x23
 8005a38:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a3a:	4b60      	ldr	r3, [pc, #384]	; (8005bbc <HAL_ETH_Init+0x1a8>)
 8005a3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a40:	4a5e      	ldr	r2, [pc, #376]	; (8005bbc <HAL_ETH_Init+0x1a8>)
 8005a42:	f043 0302 	orr.w	r3, r3, #2
 8005a46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a4a:	4b5c      	ldr	r3, [pc, #368]	; (8005bbc <HAL_ETH_Init+0x1a8>)
 8005a4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	7a1b      	ldrb	r3, [r3, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d103      	bne.n	8005a68 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005a60:	2000      	movs	r0, #0
 8005a62:	f7fd f939 	bl	8002cd8 <HAL_SYSCFG_ETHInterfaceSelect>
 8005a66:	e003      	b.n	8005a70 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005a68:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005a6c:	f7fd f934 	bl	8002cd8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a88:	f7fd f8ea 	bl	8002c60 <HAL_GetTick>
 8005a8c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005a8e:	e00f      	b.n	8005ab0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005a90:	f7fd f8e6 	bl	8002c60 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a9e:	d907      	bls.n	8005ab0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2204      	movs	r2, #4
 8005aa4:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	22e0      	movs	r2, #224	; 0xe0
 8005aaa:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e081      	b.n	8005bb4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1e6      	bne.n	8005a90 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 f86c 	bl	8006ba0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005ac8:	f002 fd90 	bl	80085ec <HAL_RCC_GetHCLKFreq>
 8005acc:	4603      	mov	r3, r0
 8005ace:	4a3c      	ldr	r2, [pc, #240]	; (8005bc0 <HAL_ETH_Init+0x1ac>)
 8005ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad4:	0c9a      	lsrs	r2, r3, #18
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3a01      	subs	r2, #1
 8005adc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 ffbf 	bl	8006a64 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005afc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005b00:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d007      	beq.n	8005b1e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	22e0      	movs	r2, #224	; 0xe0
 8005b18:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e04a      	b.n	8005bb4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	f241 1308 	movw	r3, #4360	; 0x1108
 8005b26:	4413      	add	r3, r2
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b26      	ldr	r3, [pc, #152]	; (8005bc4 <HAL_ETH_Init+0x1b0>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6952      	ldr	r2, [r2, #20]
 8005b32:	0052      	lsls	r2, r2, #1
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	6809      	ldr	r1, [r1, #0]
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	f241 1308 	movw	r3, #4360	; 0x1108
 8005b3e:	440b      	add	r3, r1
 8005b40:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f001 f884 	bl	8006c50 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f001 f8c8 	bl	8006cde <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	3305      	adds	r3, #5
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	021a      	lsls	r2, r3, #8
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	4619      	mov	r1, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	3303      	adds	r3, #3
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	061a      	lsls	r2, r3, #24
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	3302      	adds	r3, #2
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	041b      	lsls	r3, r3, #16
 8005b80:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	3301      	adds	r3, #1
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005b8c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005b9a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005b9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2210      	movs	r2, #16
 8005baa:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2210      	movs	r2, #16
 8005bb0:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	58024400 	.word	0x58024400
 8005bc0:	431bde83 	.word	0x431bde83
 8005bc4:	ffff8001 	.word	0xffff8001

08005bc8 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	3310      	adds	r3, #16
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <HAL_ETH_DescAssignMemory+0x28>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d904      	bls.n	8005bfa <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e021      	b.n	8005c3e <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00b      	beq.n	8005c30 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c56:	2b10      	cmp	r3, #16
 8005c58:	d14c      	bne.n	8005cf4 <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2223      	movs	r2, #35	; 0x23
 8005c5e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0202 	orr.w	r2, r2, #2
 8005c6e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0201 	orr.w	r2, r2, #1
 8005c90:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	f241 1304 	movw	r3, #4356	; 0x1104
 8005c9c:	4413      	add	r3, r2
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6811      	ldr	r1, [r2, #0]
 8005ca4:	f043 0201 	orr.w	r2, r3, #1
 8005ca8:	f241 1304 	movw	r3, #4356	; 0x1104
 8005cac:	440b      	add	r3, r1
 8005cae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	f241 1308 	movw	r3, #4360	; 0x1108
 8005cb8:	4413      	add	r3, r2
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6811      	ldr	r1, [r2, #0]
 8005cc0:	f043 0201 	orr.w	r2, r3, #1
 8005cc4:	f241 1308 	movw	r3, #4360	; 0x1108
 8005cc8:	440b      	add	r3, r1
 8005cca:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8005cde:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005ce2:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2210      	movs	r2, #16
 8005ce8:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2222      	movs	r2, #34	; 0x22
 8005cee:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e000      	b.n	8005cf6 <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
  }
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d040      	beq.n	8005d94 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2223      	movs	r2, #35	; 0x23
 8005d16:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	f241 1304 	movw	r3, #4356	; 0x1104
 8005d20:	4413      	add	r3, r2
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6811      	ldr	r1, [r2, #0]
 8005d28:	f023 0201 	bic.w	r2, r3, #1
 8005d2c:	f241 1304 	movw	r3, #4356	; 0x1104
 8005d30:	440b      	add	r3, r1
 8005d32:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	f241 1308 	movw	r3, #4360	; 0x1108
 8005d3c:	4413      	add	r3, r2
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6811      	ldr	r1, [r2, #0]
 8005d44:	f023 0201 	bic.w	r2, r3, #1
 8005d48:	f241 1308 	movw	r3, #4360	; 0x1108
 8005d4c:	440b      	add	r3, r1
 8005d4e:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0201 	bic.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 0201 	orr.w	r2, r2, #1
 8005d70:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0202 	bic.w	r2, r2, #2
 8005d82:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2210      	movs	r2, #16
 8005d88:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2210      	movs	r2, #16
 8005d8e:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	e000      	b.n	8005d96 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
  }
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b086      	sub	sp, #24
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d107      	bne.n	8005dc4 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db8:	f043 0201 	orr.w	r2, r3, #1
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e073      	b.n	8005eac <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dc8:	2b10      	cmp	r3, #16
 8005dca:	d16e      	bne.n	8005eaa <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	68b9      	ldr	r1, [r7, #8]
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 ffe1 	bl	8006d98 <ETH_Prepare_Tx_Descriptors>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d007      	beq.n	8005dec <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de0:	f043 0202 	orr.w	r2, r3, #2
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e05f      	b.n	8005eac <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3206      	adds	r2, #6
 8005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df8:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	629a      	str	r2, [r3, #40]	; 0x28
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d904      	bls.n	8005e16 <HAL_ETH_Transmit+0x74>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e10:	1f1a      	subs	r2, r3, #4
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	3106      	adds	r1, #6
 8005e22:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005e26:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005e2a:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8005e2c:	f7fc ff18 	bl	8002c60 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8005e32:	e034      	b.n	8005e9e <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d011      	beq.n	8005e6a <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4a:	f043 0208 	orr.w	r2, r3, #8
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	22e0      	movs	r2, #224	; 0xe0
 8005e64:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e020      	b.n	8005eac <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e70:	d015      	beq.n	8005e9e <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8005e72:	f7fc fef5 	bl	8002c60 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d302      	bcc.n	8005e88 <HAL_ETH_Transmit+0xe6>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8c:	f043 0204 	orr.w	r2, r3, #4
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	22e0      	movs	r2, #224	; 0xe0
 8005e98:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e006      	b.n	8005eac <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	dbc6      	blt.n	8005e34 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e000      	b.n	8005eac <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
  }
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eca:	2b40      	cmp	r3, #64	; 0x40
 8005ecc:	d113      	bne.n	8005ef6 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	f241 1334 	movw	r3, #4404	; 0x1134
 8005ed6:	4413      	add	r3, r2
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ede:	2b40      	cmp	r3, #64	; 0x40
 8005ee0:	d109      	bne.n	8005ef6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f8f2 	bl	80060cc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005ef0:	f248 0240 	movw	r2, #32832	; 0x8040
 8005ef4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d113      	bne.n	8005f30 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	f241 1334 	movw	r3, #4404	; 0x1134
 8005f10:	4413      	add	r3, r2
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d109      	bne.n	8005f30 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f8cb 	bl	80060b8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005f2a:	f248 0201 	movw	r2, #32769	; 0x8001
 8005f2e:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f42:	d149      	bne.n	8005fd8 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	f241 1334 	movw	r3, #4404	; 0x1134
 8005f4c:	4413      	add	r3, r2
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f58:	d13e      	bne.n	8005fd8 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f5e:	f043 0208 	orr.w	r2, r3, #8
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f78:	d11b      	bne.n	8005fb2 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	f241 1302 	movw	r3, #4354	; 0x1102
 8005f88:	4013      	ands	r3, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	f241 1334 	movw	r3, #4404	; 0x1134
 8005f96:	4413      	add	r3, r2
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6811      	ldr	r1, [r2, #0]
 8005f9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fa2:	f241 1334 	movw	r3, #4404	; 0x1134
 8005fa6:	440b      	add	r3, r1
 8005fa8:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	22e0      	movs	r2, #224	; 0xe0
 8005fae:	66da      	str	r2, [r3, #108]	; 0x6c
 8005fb0:	e00f      	b.n	8005fd2 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005fcc:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8005fd0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f884 	bl	80060e0 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fe0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8005fe4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fe8:	d10e      	bne.n	8006008 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	22e0      	movs	r2, #224	; 0xe0
 8005ffa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f879 	bl	80060f4 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b10      	cmp	r3, #16
 8006016:	d10f      	bne.n	8006038 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006020:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f86c 	bl	8006108 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006040:	f003 0320 	and.w	r3, r3, #32
 8006044:	2b20      	cmp	r3, #32
 8006046:	d10f      	bne.n	8006068 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006050:	f003 020f 	and.w	r2, r3, #15
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f85e 	bl	800611c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8006068:	f7fe f88a 	bl	8004180 <HAL_GetCurrentCPUID>
 800606c:	4603      	mov	r3, r0
 800606e:	2b03      	cmp	r3, #3
 8006070:	d10d      	bne.n	800608e <HAL_ETH_IRQHandler+0x1da>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8006072:	4b0f      	ldr	r3, [pc, #60]	; (80060b0 <HAL_ETH_IRQHandler+0x1fc>)
 8006074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d014      	beq.n	80060a8 <HAL_ETH_IRQHandler+0x1f4>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800607e:	4b0c      	ldr	r3, [pc, #48]	; (80060b0 <HAL_ETH_IRQHandler+0x1fc>)
 8006080:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006084:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f852 	bl	8006130 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 800608c:	e00c      	b.n	80060a8 <HAL_ETH_IRQHandler+0x1f4>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800608e:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <HAL_ETH_IRQHandler+0x200>)
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d006      	beq.n	80060a8 <HAL_ETH_IRQHandler+0x1f4>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800609a:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <HAL_ETH_IRQHandler+0x200>)
 800609c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80060a0:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f844 	bl	8006130 <HAL_ETH_WakeUpCallback>
}
 80060a8:	bf00      	nop
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	58000080 	.word	0x58000080
 80060b4:	580000c0 	.word	0x580000c0

080060b8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e03e      	b.n	80061e4 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800616e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	055b      	lsls	r3, r3, #21
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	041b      	lsls	r3, r3, #16
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f043 030c 	orr.w	r3, r3, #12
 8006192:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80061a6:	f7fc fd5b 	bl	8002c60 <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80061ac:	e009      	b.n	80061c2 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80061ae:	f7fc fd57 	bl	8002c60 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061bc:	d901      	bls.n	80061c2 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e010      	b.n	80061e4 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1ed      	bne.n	80061ae <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80061da:	b29b      	uxth	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e03c      	b.n	8006288 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006216:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	055b      	lsls	r3, r3, #21
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	041b      	lsls	r3, r3, #16
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f023 030c 	bic.w	r3, r3, #12
 800623a:	f043 0304 	orr.w	r3, r3, #4
 800623e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f043 0301 	orr.w	r3, r3, #1
 8006246:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	b29a      	uxth	r2, r3
 800624c:	4b10      	ldr	r3, [pc, #64]	; (8006290 <HAL_ETH_WritePHYRegister+0xa4>)
 800624e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8006252:	4a0f      	ldr	r2, [pc, #60]	; (8006290 <HAL_ETH_WritePHYRegister+0xa4>)
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800625a:	f7fc fd01 	bl	8002c60 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006260:	e009      	b.n	8006276 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8006262:	f7fc fcfd 	bl	8002c60 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006270:	d901      	bls.n	8006276 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e008      	b.n	8006288 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1ed      	bne.n	8006262 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40028000 	.word	0x40028000

08006294 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e1c3      	b.n	8006630 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 020c 	and.w	r2, r3, #12
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0310 	and.w	r3, r3, #16
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	bf14      	ite	ne
 80062c4:	2301      	movne	r3, #1
 80062c6:	2300      	moveq	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bf0c      	ite	eq
 80062ee:	2301      	moveq	r3, #1
 80062f0:	2300      	movne	r3, #0
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	461a      	mov	r2, r3
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006306:	2b00      	cmp	r3, #0
 8006308:	bf14      	ite	ne
 800630a:	2301      	movne	r3, #1
 800630c:	2300      	moveq	r3, #0
 800630e:	b2db      	uxtb	r3, r3
 8006310:	461a      	mov	r2, r3
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006320:	2b00      	cmp	r3, #0
 8006322:	bf0c      	ite	eq
 8006324:	2301      	moveq	r3, #1
 8006326:	2300      	movne	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	461a      	mov	r2, r3
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800633a:	2b00      	cmp	r3, #0
 800633c:	bf14      	ite	ne
 800633e:	2301      	movne	r3, #1
 8006340:	2300      	moveq	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006354:	2b00      	cmp	r3, #0
 8006356:	bf14      	ite	ne
 8006358:	2301      	movne	r3, #1
 800635a:	2300      	moveq	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	461a      	mov	r2, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800638a:	2b00      	cmp	r3, #0
 800638c:	bf14      	ite	ne
 800638e:	2301      	movne	r3, #1
 8006390:	2300      	moveq	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	461a      	mov	r2, r3
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	bf0c      	ite	eq
 80063c2:	2301      	moveq	r3, #1
 80063c4:	2300      	movne	r3, #0
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bf14      	ite	ne
 80063dc:	2301      	movne	r3, #1
 80063de:	2300      	moveq	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	461a      	mov	r2, r3
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bf14      	ite	ne
 80063f6:	2301      	movne	r3, #1
 80063f8:	2300      	moveq	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800640c:	2b00      	cmp	r3, #0
 800640e:	bf14      	ite	ne
 8006410:	2301      	movne	r3, #1
 8006412:	2300      	moveq	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	461a      	mov	r2, r3
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006426:	2b00      	cmp	r3, #0
 8006428:	bf14      	ite	ne
 800642a:	2301      	movne	r3, #1
 800642c:	2300      	moveq	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800644e:	2b00      	cmp	r3, #0
 8006450:	bf14      	ite	ne
 8006452:	2301      	movne	r3, #1
 8006454:	2300      	moveq	r3, #0
 8006456:	b2db      	uxtb	r3, r3
 8006458:	461a      	mov	r2, r3
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006484:	2b00      	cmp	r3, #0
 8006486:	bf0c      	ite	eq
 8006488:	2301      	moveq	r3, #1
 800648a:	2300      	movne	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bf14      	ite	ne
 80064a4:	2301      	movne	r3, #1
 80064a6:	2300      	moveq	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bf14      	ite	ne
 80064c0:	2301      	movne	r3, #1
 80064c2:	2300      	moveq	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	461a      	mov	r2, r3
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	bf14      	ite	ne
 80064dc:	2301      	movne	r3, #1
 80064de:	2300      	moveq	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	461a      	mov	r2, r3
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	0e5b      	lsrs	r3, r3, #25
 80064f2:	f003 021f 	and.w	r2, r3, #31
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	bf14      	ite	ne
 8006508:	2301      	movne	r3, #1
 800650a:	2300      	moveq	r3, #0
 800650c:	b2db      	uxtb	r3, r3
 800650e:	461a      	mov	r2, r3
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 020f 	and.w	r2, r3, #15
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	bf14      	ite	ne
 8006532:	2301      	movne	r3, #1
 8006534:	2300      	moveq	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654a:	2b00      	cmp	r3, #0
 800654c:	bf0c      	ite	eq
 800654e:	2301      	moveq	r3, #1
 8006550:	2300      	movne	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006562:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006570:	0c1b      	lsrs	r3, r3, #16
 8006572:	b29a      	uxth	r2, r3
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	bf14      	ite	ne
 8006588:	2301      	movne	r3, #1
 800658a:	2300      	moveq	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	bf14      	ite	ne
 80065a6:	2301      	movne	r3, #1
 80065a8:	2300      	moveq	r3, #0
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80065bc:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80065cc:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80065dc:	f003 0308 	and.w	r3, r3, #8
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bf14      	ite	ne
 80065e4:	2301      	movne	r3, #1
 80065e6:	2300      	moveq	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80065fa:	f003 0310 	and.w	r3, r3, #16
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bf14      	ite	ne
 8006602:	2301      	movne	r3, #1
 8006604:	2300      	moveq	r3, #0
 8006606:	b2db      	uxtb	r3, r3
 8006608:	461a      	mov	r2, r3
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661c:	2b00      	cmp	r3, #0
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	461a      	mov	r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e00a      	b.n	8006666 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006654:	2b10      	cmp	r3, #16
 8006656:	d105      	bne.n	8006664 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f860 	bl	8006720 <ETH_SetMACConfig>

    return HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	e000      	b.n	8006666 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
  }
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006680:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006688:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800668a:	f001 ffaf 	bl	80085ec <HAL_RCC_GetHCLKFreq>
 800668e:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	4a1e      	ldr	r2, [pc, #120]	; (800670c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d908      	bls.n	80066aa <HAL_ETH_SetMDIOClockRange+0x3a>
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4a1d      	ldr	r2, [pc, #116]	; (8006710 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d804      	bhi.n	80066aa <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	e027      	b.n	80066fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	4a18      	ldr	r2, [pc, #96]	; (8006710 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d908      	bls.n	80066c4 <HAL_ETH_SetMDIOClockRange+0x54>
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	4a17      	ldr	r2, [pc, #92]	; (8006714 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d204      	bcs.n	80066c4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	e01a      	b.n	80066fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4a13      	ldr	r2, [pc, #76]	; (8006714 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d303      	bcc.n	80066d4 <HAL_ETH_SetMDIOClockRange+0x64>
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	4a12      	ldr	r2, [pc, #72]	; (8006718 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d911      	bls.n	80066f8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4a10      	ldr	r2, [pc, #64]	; (8006718 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d908      	bls.n	80066ee <HAL_ETH_SetMDIOClockRange+0x7e>
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4a0f      	ldr	r2, [pc, #60]	; (800671c <HAL_ETH_SetMDIOClockRange+0xac>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d804      	bhi.n	80066ee <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	e005      	b.n	80066fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	e000      	b.n	80066fa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80066f8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006704:	bf00      	nop
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	01312cff 	.word	0x01312cff
 8006710:	02160ebf 	.word	0x02160ebf
 8006714:	03938700 	.word	0x03938700
 8006718:	05f5e0ff 	.word	0x05f5e0ff
 800671c:	08f0d17f 	.word	0x08f0d17f

08006720 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8006732:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	791b      	ldrb	r3, [r3, #4]
 8006738:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800673a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	7b1b      	ldrb	r3, [r3, #12]
 8006740:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8006742:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	7b5b      	ldrb	r3, [r3, #13]
 8006748:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800674a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	7b9b      	ldrb	r3, [r3, #14]
 8006750:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8006752:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	7bdb      	ldrb	r3, [r3, #15]
 8006758:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800675a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	7c12      	ldrb	r2, [r2, #16]
 8006760:	2a00      	cmp	r2, #0
 8006762:	d102      	bne.n	800676a <ETH_SetMACConfig+0x4a>
 8006764:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006768:	e000      	b.n	800676c <ETH_SetMACConfig+0x4c>
 800676a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800676c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	7c52      	ldrb	r2, [r2, #17]
 8006772:	2a00      	cmp	r2, #0
 8006774:	d102      	bne.n	800677c <ETH_SetMACConfig+0x5c>
 8006776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800677a:	e000      	b.n	800677e <ETH_SetMACConfig+0x5e>
 800677c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800677e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	7c9b      	ldrb	r3, [r3, #18]
 8006784:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006786:	431a      	orrs	r2, r3
                                macconf->Speed |
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800678c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8006792:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	7f1b      	ldrb	r3, [r3, #28]
 8006798:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800679a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	7f5b      	ldrb	r3, [r3, #29]
 80067a0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80067a2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	7f92      	ldrb	r2, [r2, #30]
 80067a8:	2a00      	cmp	r2, #0
 80067aa:	d102      	bne.n	80067b2 <ETH_SetMACConfig+0x92>
 80067ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067b0:	e000      	b.n	80067b4 <ETH_SetMACConfig+0x94>
 80067b2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80067b4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	7fdb      	ldrb	r3, [r3, #31]
 80067ba:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80067bc:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80067c4:	2a00      	cmp	r2, #0
 80067c6:	d102      	bne.n	80067ce <ETH_SetMACConfig+0xae>
 80067c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067cc:	e000      	b.n	80067d0 <ETH_SetMACConfig+0xb0>
 80067ce:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80067d0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80067d6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067de:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80067e0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	4b56      	ldr	r3, [pc, #344]	; (800694c <ETH_SetMACConfig+0x22c>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	430b      	orrs	r3, r1
 80067fc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800680a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800680c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006814:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006816:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800681e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8006820:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006828:	2a00      	cmp	r2, #0
 800682a:	d102      	bne.n	8006832 <ETH_SetMACConfig+0x112>
 800682c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006830:	e000      	b.n	8006834 <ETH_SetMACConfig+0x114>
 8006832:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006834:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	4b42      	ldr	r3, [pc, #264]	; (8006950 <ETH_SetMACConfig+0x230>)
 8006846:	4013      	ands	r3, r2
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6812      	ldr	r2, [r2, #0]
 800684c:	68f9      	ldr	r1, [r7, #12]
 800684e:	430b      	orrs	r3, r1
 8006850:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006858:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	4b3a      	ldr	r3, [pc, #232]	; (8006954 <ETH_SetMACConfig+0x234>)
 800686a:	4013      	ands	r3, r2
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6812      	ldr	r2, [r2, #0]
 8006870:	68f9      	ldr	r1, [r7, #12]
 8006872:	430b      	orrs	r3, r1
 8006874:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800687c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006882:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800688a:	2a00      	cmp	r2, #0
 800688c:	d101      	bne.n	8006892 <ETH_SetMACConfig+0x172>
 800688e:	2280      	movs	r2, #128	; 0x80
 8006890:	e000      	b.n	8006894 <ETH_SetMACConfig+0x174>
 8006892:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006894:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800689a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068a6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80068aa:	4013      	ands	r3, r2
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	68f9      	ldr	r1, [r7, #12]
 80068b2:	430b      	orrs	r3, r1
 80068b4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80068bc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80068c4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d2:	f023 0103 	bic.w	r1, r3, #3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	430a      	orrs	r2, r1
 80068de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80068ea:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006906:	2a00      	cmp	r2, #0
 8006908:	d101      	bne.n	800690e <ETH_SetMACConfig+0x1ee>
 800690a:	2240      	movs	r2, #64	; 0x40
 800690c:	e000      	b.n	8006910 <ETH_SetMACConfig+0x1f0>
 800690e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006910:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006918:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800691a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006922:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006930:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	430a      	orrs	r2, r1
 800693c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006940:	bf00      	nop
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	00048083 	.word	0x00048083
 8006950:	c0f88000 	.word	0xc0f88000
 8006954:	fffffef0 	.word	0xfffffef0

08006958 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	4b38      	ldr	r3, [pc, #224]	; (8006a50 <ETH_SetDMAConfig+0xf8>)
 800696e:	4013      	ands	r3, r2
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	6812      	ldr	r2, [r2, #0]
 8006974:	6879      	ldr	r1, [r7, #4]
 8006976:	6809      	ldr	r1, [r1, #0]
 8006978:	431a      	orrs	r2, r3
 800697a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800697e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	791b      	ldrb	r3, [r3, #4]
 8006984:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800698a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	7b1b      	ldrb	r3, [r3, #12]
 8006990:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	f241 0304 	movw	r3, #4100	; 0x1004
 800699e:	4413      	add	r3, r2
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	4b2c      	ldr	r3, [pc, #176]	; (8006a54 <ETH_SetDMAConfig+0xfc>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6811      	ldr	r1, [r2, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	431a      	orrs	r2, r3
 80069ae:	f241 0304 	movw	r3, #4100	; 0x1004
 80069b2:	440b      	add	r3, r1
 80069b4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	7b5b      	ldrb	r3, [r3, #13]
 80069ba:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	4b22      	ldr	r3, [pc, #136]	; (8006a58 <ETH_SetDMAConfig+0x100>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6811      	ldr	r1, [r2, #0]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	431a      	orrs	r2, r3
 80069da:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80069de:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	7d1b      	ldrb	r3, [r3, #20]
 80069e8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80069ea:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	7f5b      	ldrb	r3, [r3, #29]
 80069f0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	f241 1304 	movw	r3, #4356	; 0x1104
 80069fe:	4413      	add	r3, r2
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b16      	ldr	r3, [pc, #88]	; (8006a5c <ETH_SetDMAConfig+0x104>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	6811      	ldr	r1, [r2, #0]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	f241 1304 	movw	r3, #4356	; 0x1104
 8006a12:	440b      	add	r3, r1
 8006a14:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	7f1b      	ldrb	r3, [r3, #28]
 8006a1a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	f241 1308 	movw	r3, #4360	; 0x1108
 8006a2c:	4413      	add	r3, r2
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <ETH_SetDMAConfig+0x108>)
 8006a32:	4013      	ands	r3, r2
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6811      	ldr	r1, [r2, #0]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	f241 1308 	movw	r3, #4360	; 0x1108
 8006a40:	440b      	add	r3, r1
 8006a42:	601a      	str	r2, [r3, #0]
}
 8006a44:	bf00      	nop
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	ffff87fd 	.word	0xffff87fd
 8006a54:	ffff2ffe 	.word	0xffff2ffe
 8006a58:	fffec000 	.word	0xfffec000
 8006a5c:	ffc0efef 	.word	0xffc0efef
 8006a60:	7fc0ffff 	.word	0x7fc0ffff

08006a64 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b0a4      	sub	sp, #144	; 0x90
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006a72:	2300      	movs	r3, #0
 8006a74:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006a76:	2300      	movs	r3, #0
 8006a78:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8006a82:	2301      	movs	r3, #1
 8006a84:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006a94:	2300      	movs	r3, #0
 8006a96:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006aa4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006abc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006ac0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006acc:	2301      	movs	r3, #1
 8006ace:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006af0:	2300      	movs	r3, #0
 8006af2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006af6:	2301      	movs	r3, #1
 8006af8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006afc:	2320      	movs	r3, #32
 8006afe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006b0e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006b14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b18:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006b20:	2302      	movs	r3, #2
 8006b22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006b26:	2300      	movs	r3, #0
 8006b28:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7ff fde6 	bl	8006720 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006b54:	2301      	movs	r3, #1
 8006b56:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006b60:	2300      	movs	r3, #0
 8006b62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006b66:	2300      	movs	r3, #0
 8006b68:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006b6e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006b72:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006b78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006b7c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8006b84:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006b8a:	f107 0308 	add.w	r3, r7, #8
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff fee1 	bl	8006958 <ETH_SetDMAConfig>
}
 8006b96:	bf00      	nop
 8006b98:	3790      	adds	r7, #144	; 0x90
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006bb0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006bb8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006bba:	f001 fd17 	bl	80085ec <HAL_RCC_GetHCLKFreq>
 8006bbe:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4a1e      	ldr	r2, [pc, #120]	; (8006c3c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d908      	bls.n	8006bda <ETH_MAC_MDIO_ClkConfig+0x3a>
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4a1d      	ldr	r2, [pc, #116]	; (8006c40 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d804      	bhi.n	8006bda <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	e027      	b.n	8006c2a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	4a18      	ldr	r2, [pc, #96]	; (8006c40 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d908      	bls.n	8006bf4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	4a17      	ldr	r2, [pc, #92]	; (8006c44 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d204      	bcs.n	8006bf4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	e01a      	b.n	8006c2a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4a13      	ldr	r2, [pc, #76]	; (8006c44 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d303      	bcc.n	8006c04 <ETH_MAC_MDIO_ClkConfig+0x64>
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4a12      	ldr	r2, [pc, #72]	; (8006c48 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d911      	bls.n	8006c28 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4a10      	ldr	r2, [pc, #64]	; (8006c48 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d908      	bls.n	8006c1e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4a0f      	ldr	r2, [pc, #60]	; (8006c4c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d804      	bhi.n	8006c1e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	e005      	b.n	8006c2a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	e000      	b.n	8006c2a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006c28:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	01312cff 	.word	0x01312cff
 8006c40:	02160ebf 	.word	0x02160ebf
 8006c44:	03938700 	.word	0x03938700
 8006c48:	05f5e0ff 	.word	0x05f5e0ff
 8006c4c:	08f0d17f 	.word	0x08f0d17f

08006c50 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	e01d      	b.n	8006c9a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68d9      	ldr	r1, [r3, #12]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4613      	mov	r3, r2
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	4413      	add	r3, r2
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	440b      	add	r3, r1
 8006c6e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2200      	movs	r2, #0
 8006c86:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	3206      	adds	r2, #6
 8006c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d9de      	bls.n	8006c5e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	f241 132c 	movw	r3, #4396	; 0x112c
 8006cae:	4413      	add	r3, r2
 8006cb0:	2203      	movs	r2, #3
 8006cb2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68d9      	ldr	r1, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	f241 1314 	movw	r3, #4372	; 0x1114
 8006cc0:	4413      	add	r3, r2
 8006cc2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006cd0:	601a      	str	r2, [r3, #0]
}
 8006cd2:	bf00      	nop
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b085      	sub	sp, #20
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	e024      	b.n	8006d36 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6919      	ldr	r1, [r3, #16]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	4413      	add	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	440b      	add	r3, r1
 8006cfc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2200      	movs	r2, #0
 8006d08:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2200      	movs	r2, #0
 8006d14:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	6879      	ldr	r1, [r7, #4]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3310      	adds	r3, #16
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	440b      	add	r3, r1
 8006d2e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	3301      	adds	r3, #1
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d9d7      	bls.n	8006cec <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	f241 1330 	movw	r3, #4400	; 0x1130
 8006d62:	4413      	add	r3, r2
 8006d64:	2203      	movs	r2, #3
 8006d66:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6919      	ldr	r1, [r3, #16]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	f241 131c 	movw	r3, #4380	; 0x111c
 8006d74:	4413      	add	r3, r2
 8006d76:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	f241 1328 	movw	r3, #4392	; 0x1128
 8006d88:	4413      	add	r3, r2
 8006d8a:	6019      	str	r1, [r3, #0]
}
 8006d8c:	bf00      	nop
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b08d      	sub	sp, #52	; 0x34
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	3318      	adds	r3, #24
 8006da8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8006db6:	2300      	movs	r3, #0
 8006db8:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dda:	d007      	beq.n	8006dec <ETH_Prepare_Tx_Descriptors+0x54>
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de0:	3304      	adds	r3, #4
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8006dec:	2302      	movs	r3, #2
 8006dee:	e24a      	b.n	8007286 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d044      	beq.n	8006e86 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	4b72      	ldr	r3, [pc, #456]	; (8006fcc <ETH_Prepare_Tx_Descriptors+0x234>)
 8006e02:	4013      	ands	r3, r2
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006e28:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0308 	and.w	r3, r3, #8
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d027      	beq.n	8006e86 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	041b      	lsls	r3, r3, #16
 8006e42:	431a      	orrs	r2, r3
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e60:	431a      	orrs	r2, r3
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006e74:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006e84:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0310 	and.w	r3, r3, #16
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00e      	beq.n	8006eb0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	4b4e      	ldr	r3, [pc, #312]	; (8006fd0 <ETH_Prepare_Tx_Descriptors+0x238>)
 8006e98:	4013      	ands	r3, r2
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	6992      	ldr	r2, [r2, #24]
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d105      	bne.n	8006ec8 <ETH_Prepare_Tx_Descriptors+0x130>
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0310 	and.w	r3, r3, #16
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d030      	beq.n	8006f2a <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d902      	bls.n	8006ef2 <ETH_Prepare_Tx_Descriptors+0x15a>
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	3b04      	subs	r3, #4
 8006ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efa:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	3301      	adds	r3, #1
 8006f00:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f0e:	d10c      	bne.n	8006f2a <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f18:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8006f26:	2302      	movs	r3, #2
 8006f28:	e1ad      	b.n	8007286 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	461a      	mov	r2, r3
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	4b24      	ldr	r3, [pc, #144]	; (8006fd0 <ETH_Prepare_Tx_Descriptors+0x238>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	69fa      	ldr	r2, [r7, #28]
 8006f44:	6852      	ldr	r2, [r2, #4]
 8006f46:	431a      	orrs	r2, r3
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d012      	beq.n	8006f7a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	4b1a      	ldr	r3, [pc, #104]	; (8006fd4 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	69fa      	ldr	r2, [r7, #28]
 8006f6e:	6852      	ldr	r2, [r2, #4]
 8006f70:	0412      	lsls	r2, r2, #16
 8006f72:	431a      	orrs	r2, r3
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	609a      	str	r2, [r3, #8]
 8006f78:	e008      	b.n	8006f8c <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8006f86:	4013      	ands	r3, r2
 8006f88:	6a3a      	ldr	r2, [r7, #32]
 8006f8a:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0310 	and.w	r3, r3, #16
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d021      	beq.n	8006fdc <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	04db      	lsls	r3, r3, #19
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <ETH_Prepare_Tx_Descriptors+0x240>)
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	69d2      	ldr	r2, [r2, #28]
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	60da      	str	r2, [r3, #12]
 8006fca:	e02e      	b.n	800702a <ETH_Prepare_Tx_Descriptors+0x292>
 8006fcc:	ffff0000 	.word	0xffff0000
 8006fd0:	ffffc000 	.word	0xffffc000
 8006fd4:	c000ffff 	.word	0xc000ffff
 8006fd8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	4b93      	ldr	r3, [pc, #588]	; (8007230 <ETH_Prepare_Tx_Descriptors+0x498>)
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	6852      	ldr	r2, [r2, #4]
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d008      	beq.n	800700c <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	431a      	orrs	r2, r3
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0320 	and.w	r3, r3, #32
 8007014:	2b00      	cmp	r3, #0
 8007016:	d008      	beq.n	800702a <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	431a      	orrs	r2, r3
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0304 	and.w	r3, r3, #4
 8007032:	2b00      	cmp	r3, #0
 8007034:	d008      	beq.n	8007048 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007042:	431a      	orrs	r2, r3
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 80cb 	beq.w	8007210 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	431a      	orrs	r2, r3
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800708c:	e0c0      	b.n	8007210 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709c:	3301      	adds	r3, #1
 800709e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d902      	bls.n	80070ac <ETH_Prepare_Tx_Descriptors+0x314>
 80070a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a8:	3b04      	subs	r3, #4
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070ce:	d007      	beq.n	80070e0 <ETH_Prepare_Tx_Descriptors+0x348>
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	3304      	adds	r3, #4
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d026      	beq.n	800712e <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ec:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80070ee:	2300      	movs	r3, #0
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
 80070f2:	e016      	b.n	8007122 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	3301      	adds	r3, #1
 8007104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	2b03      	cmp	r3, #3
 800710a:	d902      	bls.n	8007112 <ETH_Prepare_Tx_Descriptors+0x37a>
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	3b04      	subs	r3, #4
 8007110:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711a:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	3301      	adds	r3, #1
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
 8007122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	429a      	cmp	r2, r3
 8007128:	d3e4      	bcc.n	80070f4 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 800712a:	2302      	movs	r3, #2
 800712c:	e0ab      	b.n	8007286 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	3301      	adds	r3, #1
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	4b3a      	ldr	r3, [pc, #232]	; (8007234 <ETH_Prepare_Tx_Descriptors+0x49c>)
 800714a:	4013      	ands	r3, r2
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	6852      	ldr	r2, [r2, #4]
 8007150:	431a      	orrs	r2, r3
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d012      	beq.n	8007184 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	689a      	ldr	r2, [r3, #8]
 8007172:	4b31      	ldr	r3, [pc, #196]	; (8007238 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8007174:	4013      	ands	r3, r2
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	6852      	ldr	r2, [r2, #4]
 800717a:	0412      	lsls	r2, r2, #16
 800717c:	431a      	orrs	r2, r3
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	609a      	str	r2, [r3, #8]
 8007182:	e008      	b.n	8007196 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	2200      	movs	r2, #0
 8007188:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	689a      	ldr	r2, [r3, #8]
 800718e:	4b2a      	ldr	r3, [pc, #168]	; (8007238 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8007190:	4013      	ands	r3, r2
 8007192:	6a3a      	ldr	r2, [r7, #32]
 8007194:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0310 	and.w	r3, r3, #16
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00f      	beq.n	80071c2 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	4b25      	ldr	r3, [pc, #148]	; (800723c <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80071a8:	4013      	ands	r3, r2
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	69d2      	ldr	r2, [r2, #28]
 80071ae:	431a      	orrs	r2, r3
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	60da      	str	r2, [r3, #12]
 80071c0:	e017      	b.n	80071f2 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	4b1a      	ldr	r3, [pc, #104]	; (8007230 <ETH_Prepare_Tx_Descriptors+0x498>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	6852      	ldr	r2, [r2, #4]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d008      	beq.n	80071f2 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	431a      	orrs	r2, r3
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	3301      	adds	r3, #1
 80071f6:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f47f af3a 	bne.w	800708e <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00f      	beq.n	8007240 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	609a      	str	r2, [r3, #8]
 800722c:	e00e      	b.n	800724c <ETH_Prepare_Tx_Descriptors+0x4b4>
 800722e:	bf00      	nop
 8007230:	ffff8000 	.word	0xffff8000
 8007234:	ffffc000 	.word	0xffffc000
 8007238:	c000ffff 	.word	0xc000ffff
 800723c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800725c:	6979      	ldr	r1, [r7, #20]
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	3304      	adds	r3, #4
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	440b      	add	r3, r1
 8007266:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800726c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800726e:	b672      	cpsid	i
}
 8007270:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	4413      	add	r3, r2
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8007280:	b662      	cpsie	i
}
 8007282:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3734      	adds	r7, #52	; 0x34
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop

08007294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007294:	b480      	push	{r7}
 8007296:	b089      	sub	sp, #36	; 0x24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800729e:	2300      	movs	r3, #0
 80072a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80072a2:	4b89      	ldr	r3, [pc, #548]	; (80074c8 <HAL_GPIO_Init+0x234>)
 80072a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80072a6:	e194      	b.n	80075d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	2101      	movs	r1, #1
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	fa01 f303 	lsl.w	r3, r1, r3
 80072b4:	4013      	ands	r3, r2
 80072b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 8186 	beq.w	80075cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d00b      	beq.n	80072e0 <HAL_GPIO_Init+0x4c>
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d007      	beq.n	80072e0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80072d4:	2b11      	cmp	r3, #17
 80072d6:	d003      	beq.n	80072e0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	2b12      	cmp	r3, #18
 80072de:	d130      	bne.n	8007342 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	2203      	movs	r2, #3
 80072ec:	fa02 f303 	lsl.w	r3, r2, r3
 80072f0:	43db      	mvns	r3, r3
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	4013      	ands	r3, r2
 80072f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	fa02 f303 	lsl.w	r3, r2, r3
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	4313      	orrs	r3, r2
 8007308:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007316:	2201      	movs	r2, #1
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	fa02 f303 	lsl.w	r3, r2, r3
 800731e:	43db      	mvns	r3, r3
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	4013      	ands	r3, r2
 8007324:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	091b      	lsrs	r3, r3, #4
 800732c:	f003 0201 	and.w	r2, r3, #1
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	fa02 f303 	lsl.w	r3, r2, r3
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	4313      	orrs	r3, r2
 800733a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	2203      	movs	r2, #3
 800734e:	fa02 f303 	lsl.w	r3, r2, r3
 8007352:	43db      	mvns	r3, r3
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	4013      	ands	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	689a      	ldr	r2, [r3, #8]
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	fa02 f303 	lsl.w	r3, r2, r3
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	4313      	orrs	r3, r2
 800736a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2b02      	cmp	r3, #2
 8007378:	d003      	beq.n	8007382 <HAL_GPIO_Init+0xee>
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2b12      	cmp	r3, #18
 8007380:	d123      	bne.n	80073ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	08da      	lsrs	r2, r3, #3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3208      	adds	r2, #8
 800738a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	220f      	movs	r2, #15
 800739a:	fa02 f303 	lsl.w	r3, r2, r3
 800739e:	43db      	mvns	r3, r3
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	4013      	ands	r3, r2
 80073a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	691a      	ldr	r2, [r3, #16]
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	fa02 f303 	lsl.w	r3, r2, r3
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	08da      	lsrs	r2, r3, #3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3208      	adds	r2, #8
 80073c4:	69b9      	ldr	r1, [r7, #24]
 80073c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	2203      	movs	r2, #3
 80073d6:	fa02 f303 	lsl.w	r3, r2, r3
 80073da:	43db      	mvns	r3, r3
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	4013      	ands	r3, r2
 80073e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f003 0203 	and.w	r2, r3, #3
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	fa02 f303 	lsl.w	r3, r2, r3
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 80e0 	beq.w	80075cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800740c:	4b2f      	ldr	r3, [pc, #188]	; (80074cc <HAL_GPIO_Init+0x238>)
 800740e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007412:	4a2e      	ldr	r2, [pc, #184]	; (80074cc <HAL_GPIO_Init+0x238>)
 8007414:	f043 0302 	orr.w	r3, r3, #2
 8007418:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800741c:	4b2b      	ldr	r3, [pc, #172]	; (80074cc <HAL_GPIO_Init+0x238>)
 800741e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800742a:	4a29      	ldr	r2, [pc, #164]	; (80074d0 <HAL_GPIO_Init+0x23c>)
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	089b      	lsrs	r3, r3, #2
 8007430:	3302      	adds	r3, #2
 8007432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	220f      	movs	r2, #15
 8007442:	fa02 f303 	lsl.w	r3, r2, r3
 8007446:	43db      	mvns	r3, r3
 8007448:	69ba      	ldr	r2, [r7, #24]
 800744a:	4013      	ands	r3, r2
 800744c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a20      	ldr	r2, [pc, #128]	; (80074d4 <HAL_GPIO_Init+0x240>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d052      	beq.n	80074fc <HAL_GPIO_Init+0x268>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a1f      	ldr	r2, [pc, #124]	; (80074d8 <HAL_GPIO_Init+0x244>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d031      	beq.n	80074c2 <HAL_GPIO_Init+0x22e>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a1e      	ldr	r2, [pc, #120]	; (80074dc <HAL_GPIO_Init+0x248>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d02b      	beq.n	80074be <HAL_GPIO_Init+0x22a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a1d      	ldr	r2, [pc, #116]	; (80074e0 <HAL_GPIO_Init+0x24c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d025      	beq.n	80074ba <HAL_GPIO_Init+0x226>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a1c      	ldr	r2, [pc, #112]	; (80074e4 <HAL_GPIO_Init+0x250>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d01f      	beq.n	80074b6 <HAL_GPIO_Init+0x222>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a1b      	ldr	r2, [pc, #108]	; (80074e8 <HAL_GPIO_Init+0x254>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d019      	beq.n	80074b2 <HAL_GPIO_Init+0x21e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a1a      	ldr	r2, [pc, #104]	; (80074ec <HAL_GPIO_Init+0x258>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d013      	beq.n	80074ae <HAL_GPIO_Init+0x21a>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a19      	ldr	r2, [pc, #100]	; (80074f0 <HAL_GPIO_Init+0x25c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d00d      	beq.n	80074aa <HAL_GPIO_Init+0x216>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a18      	ldr	r2, [pc, #96]	; (80074f4 <HAL_GPIO_Init+0x260>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d007      	beq.n	80074a6 <HAL_GPIO_Init+0x212>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a17      	ldr	r2, [pc, #92]	; (80074f8 <HAL_GPIO_Init+0x264>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d101      	bne.n	80074a2 <HAL_GPIO_Init+0x20e>
 800749e:	2309      	movs	r3, #9
 80074a0:	e02d      	b.n	80074fe <HAL_GPIO_Init+0x26a>
 80074a2:	230a      	movs	r3, #10
 80074a4:	e02b      	b.n	80074fe <HAL_GPIO_Init+0x26a>
 80074a6:	2308      	movs	r3, #8
 80074a8:	e029      	b.n	80074fe <HAL_GPIO_Init+0x26a>
 80074aa:	2307      	movs	r3, #7
 80074ac:	e027      	b.n	80074fe <HAL_GPIO_Init+0x26a>
 80074ae:	2306      	movs	r3, #6
 80074b0:	e025      	b.n	80074fe <HAL_GPIO_Init+0x26a>
 80074b2:	2305      	movs	r3, #5
 80074b4:	e023      	b.n	80074fe <HAL_GPIO_Init+0x26a>
 80074b6:	2304      	movs	r3, #4
 80074b8:	e021      	b.n	80074fe <HAL_GPIO_Init+0x26a>
 80074ba:	2303      	movs	r3, #3
 80074bc:	e01f      	b.n	80074fe <HAL_GPIO_Init+0x26a>
 80074be:	2302      	movs	r3, #2
 80074c0:	e01d      	b.n	80074fe <HAL_GPIO_Init+0x26a>
 80074c2:	2301      	movs	r3, #1
 80074c4:	e01b      	b.n	80074fe <HAL_GPIO_Init+0x26a>
 80074c6:	bf00      	nop
 80074c8:	58000080 	.word	0x58000080
 80074cc:	58024400 	.word	0x58024400
 80074d0:	58000400 	.word	0x58000400
 80074d4:	58020000 	.word	0x58020000
 80074d8:	58020400 	.word	0x58020400
 80074dc:	58020800 	.word	0x58020800
 80074e0:	58020c00 	.word	0x58020c00
 80074e4:	58021000 	.word	0x58021000
 80074e8:	58021400 	.word	0x58021400
 80074ec:	58021800 	.word	0x58021800
 80074f0:	58021c00 	.word	0x58021c00
 80074f4:	58022000 	.word	0x58022000
 80074f8:	58022400 	.word	0x58022400
 80074fc:	2300      	movs	r3, #0
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	f002 0203 	and.w	r2, r2, #3
 8007504:	0092      	lsls	r2, r2, #2
 8007506:	4093      	lsls	r3, r2
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	4313      	orrs	r3, r2
 800750c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800750e:	4938      	ldr	r1, [pc, #224]	; (80075f0 <HAL_GPIO_Init+0x35c>)
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	089b      	lsrs	r3, r3, #2
 8007514:	3302      	adds	r3, #2
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	43db      	mvns	r3, r3
 8007526:	69ba      	ldr	r2, [r7, #24]
 8007528:	4013      	ands	r3, r2
 800752a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	4313      	orrs	r3, r2
 800753e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	43db      	mvns	r3, r3
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	4013      	ands	r3, r2
 8007554:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	4313      	orrs	r3, r2
 8007568:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	43db      	mvns	r3, r3
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	4013      	ands	r3, r2
 8007580:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	4313      	orrs	r3, r2
 8007594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800759e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	43db      	mvns	r3, r3
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	4013      	ands	r3, r2
 80075ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80075c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	3301      	adds	r3, #1
 80075d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	fa22 f303 	lsr.w	r3, r2, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f47f ae63 	bne.w	80072a8 <HAL_GPIO_Init+0x14>
  }
}
 80075e2:	bf00      	nop
 80075e4:	bf00      	nop
 80075e6:	3724      	adds	r7, #36	; 0x24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	58000400 	.word	0x58000400

080075f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	807b      	strh	r3, [r7, #2]
 8007600:	4613      	mov	r3, r2
 8007602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007604:	787b      	ldrb	r3, [r7, #1]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800760a:	887a      	ldrh	r2, [r7, #2]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007610:	e003      	b.n	800761a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007612:	887b      	ldrh	r3, [r7, #2]
 8007614:	041a      	lsls	r2, r3, #16
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	619a      	str	r2, [r3, #24]
}
 800761a:	bf00      	nop
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007626:	b480      	push	{r7}
 8007628:	b085      	sub	sp, #20
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	460b      	mov	r3, r1
 8007630:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007638:	887a      	ldrh	r2, [r7, #2]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4013      	ands	r3, r2
 800763e:	041a      	lsls	r2, r3, #16
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	43d9      	mvns	r1, r3
 8007644:	887b      	ldrh	r3, [r7, #2]
 8007646:	400b      	ands	r3, r1
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	619a      	str	r2, [r3, #24]
}
 800764e:	bf00      	nop
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
	...

0800765c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007664:	4a08      	ldr	r2, [pc, #32]	; (8007688 <HAL_HSEM_FastTake+0x2c>)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3320      	adds	r3, #32
 800766a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800766e:	4a07      	ldr	r2, [pc, #28]	; (800768c <HAL_HSEM_FastTake+0x30>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d101      	bne.n	8007678 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	e000      	b.n	800767a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
}
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	58026400 	.word	0x58026400
 800768c:	80000300 	.word	0x80000300

08007690 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800769a:	4906      	ldr	r1, [pc, #24]	; (80076b4 <HAL_HSEM_Release+0x24>)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	58026400 	.word	0x58026400

080076b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80076c0:	4b29      	ldr	r3, [pc, #164]	; (8007768 <HAL_PWREx_ConfigSupply+0xb0>)
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	2b06      	cmp	r3, #6
 80076ca:	d00a      	beq.n	80076e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80076cc:	4b26      	ldr	r3, [pc, #152]	; (8007768 <HAL_PWREx_ConfigSupply+0xb0>)
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d001      	beq.n	80076de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e040      	b.n	8007760 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	e03e      	b.n	8007760 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80076e2:	4b21      	ldr	r3, [pc, #132]	; (8007768 <HAL_PWREx_ConfigSupply+0xb0>)
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80076ea:	491f      	ldr	r1, [pc, #124]	; (8007768 <HAL_PWREx_ConfigSupply+0xb0>)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80076f2:	f7fb fab5 	bl	8002c60 <HAL_GetTick>
 80076f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80076f8:	e009      	b.n	800770e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80076fa:	f7fb fab1 	bl	8002c60 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007708:	d901      	bls.n	800770e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e028      	b.n	8007760 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800770e:	4b16      	ldr	r3, [pc, #88]	; (8007768 <HAL_PWREx_ConfigSupply+0xb0>)
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800771a:	d1ee      	bne.n	80076fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b1e      	cmp	r3, #30
 8007720:	d008      	beq.n	8007734 <HAL_PWREx_ConfigSupply+0x7c>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b2e      	cmp	r3, #46	; 0x2e
 8007726:	d005      	beq.n	8007734 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b1d      	cmp	r3, #29
 800772c:	d002      	beq.n	8007734 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b2d      	cmp	r3, #45	; 0x2d
 8007732:	d114      	bne.n	800775e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007734:	f7fb fa94 	bl	8002c60 <HAL_GetTick>
 8007738:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800773a:	e009      	b.n	8007750 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800773c:	f7fb fa90 	bl	8002c60 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800774a:	d901      	bls.n	8007750 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e007      	b.n	8007760 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007750:	4b05      	ldr	r3, [pc, #20]	; (8007768 <HAL_PWREx_ConfigSupply+0xb0>)
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800775c:	d1ee      	bne.n	800773c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	58024800 	.word	0x58024800

0800776c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08c      	sub	sp, #48	; 0x30
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e3ff      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 8087 	beq.w	800789a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800778c:	4b99      	ldr	r3, [pc, #612]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007796:	4b97      	ldr	r3, [pc, #604]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	2b10      	cmp	r3, #16
 80077a0:	d007      	beq.n	80077b2 <HAL_RCC_OscConfig+0x46>
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	2b18      	cmp	r3, #24
 80077a6:	d110      	bne.n	80077ca <HAL_RCC_OscConfig+0x5e>
 80077a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d10b      	bne.n	80077ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077b2:	4b90      	ldr	r3, [pc, #576]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d06c      	beq.n	8007898 <HAL_RCC_OscConfig+0x12c>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d168      	bne.n	8007898 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e3d9      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077d2:	d106      	bne.n	80077e2 <HAL_RCC_OscConfig+0x76>
 80077d4:	4b87      	ldr	r3, [pc, #540]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a86      	ldr	r2, [pc, #536]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80077da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	e02e      	b.n	8007840 <HAL_RCC_OscConfig+0xd4>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10c      	bne.n	8007804 <HAL_RCC_OscConfig+0x98>
 80077ea:	4b82      	ldr	r3, [pc, #520]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a81      	ldr	r2, [pc, #516]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80077f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077f4:	6013      	str	r3, [r2, #0]
 80077f6:	4b7f      	ldr	r3, [pc, #508]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a7e      	ldr	r2, [pc, #504]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80077fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	e01d      	b.n	8007840 <HAL_RCC_OscConfig+0xd4>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800780c:	d10c      	bne.n	8007828 <HAL_RCC_OscConfig+0xbc>
 800780e:	4b79      	ldr	r3, [pc, #484]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a78      	ldr	r2, [pc, #480]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 8007814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007818:	6013      	str	r3, [r2, #0]
 800781a:	4b76      	ldr	r3, [pc, #472]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a75      	ldr	r2, [pc, #468]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 8007820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	e00b      	b.n	8007840 <HAL_RCC_OscConfig+0xd4>
 8007828:	4b72      	ldr	r3, [pc, #456]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a71      	ldr	r2, [pc, #452]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 800782e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	4b6f      	ldr	r3, [pc, #444]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a6e      	ldr	r2, [pc, #440]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 800783a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800783e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d013      	beq.n	8007870 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007848:	f7fb fa0a 	bl	8002c60 <HAL_GetTick>
 800784c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800784e:	e008      	b.n	8007862 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007850:	f7fb fa06 	bl	8002c60 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b64      	cmp	r3, #100	; 0x64
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e38d      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007862:	4b64      	ldr	r3, [pc, #400]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0f0      	beq.n	8007850 <HAL_RCC_OscConfig+0xe4>
 800786e:	e014      	b.n	800789a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007870:	f7fb f9f6 	bl	8002c60 <HAL_GetTick>
 8007874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007876:	e008      	b.n	800788a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007878:	f7fb f9f2 	bl	8002c60 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	2b64      	cmp	r3, #100	; 0x64
 8007884:	d901      	bls.n	800788a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e379      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800788a:	4b5a      	ldr	r3, [pc, #360]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1f0      	bne.n	8007878 <HAL_RCC_OscConfig+0x10c>
 8007896:	e000      	b.n	800789a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 80ae 	beq.w	8007a04 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078a8:	4b52      	ldr	r3, [pc, #328]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80078b2:	4b50      	ldr	r3, [pc, #320]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80078b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d007      	beq.n	80078ce <HAL_RCC_OscConfig+0x162>
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	2b18      	cmp	r3, #24
 80078c2:	d13a      	bne.n	800793a <HAL_RCC_OscConfig+0x1ce>
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	f003 0303 	and.w	r3, r3, #3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d135      	bne.n	800793a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078ce:	4b49      	ldr	r3, [pc, #292]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d005      	beq.n	80078e6 <HAL_RCC_OscConfig+0x17a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e34b      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078e6:	f7fb f9eb 	bl	8002cc0 <HAL_GetREVID>
 80078ea:	4603      	mov	r3, r0
 80078ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d817      	bhi.n	8007924 <HAL_RCC_OscConfig+0x1b8>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	2b40      	cmp	r3, #64	; 0x40
 80078fa:	d108      	bne.n	800790e <HAL_RCC_OscConfig+0x1a2>
 80078fc:	4b3d      	ldr	r3, [pc, #244]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007904:	4a3b      	ldr	r2, [pc, #236]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 8007906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800790a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800790c:	e07a      	b.n	8007a04 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800790e:	4b39      	ldr	r3, [pc, #228]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	031b      	lsls	r3, r3, #12
 800791c:	4935      	ldr	r1, [pc, #212]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 800791e:	4313      	orrs	r3, r2
 8007920:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007922:	e06f      	b.n	8007a04 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007924:	4b33      	ldr	r3, [pc, #204]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	061b      	lsls	r3, r3, #24
 8007932:	4930      	ldr	r1, [pc, #192]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 8007934:	4313      	orrs	r3, r2
 8007936:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007938:	e064      	b.n	8007a04 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d045      	beq.n	80079ce <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007942:	4b2c      	ldr	r3, [pc, #176]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f023 0219 	bic.w	r2, r3, #25
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	4929      	ldr	r1, [pc, #164]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 8007950:	4313      	orrs	r3, r2
 8007952:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007954:	f7fb f984 	bl	8002c60 <HAL_GetTick>
 8007958:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800795a:	e008      	b.n	800796e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800795c:	f7fb f980 	bl	8002c60 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2b02      	cmp	r3, #2
 8007968:	d901      	bls.n	800796e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e307      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800796e:	4b21      	ldr	r3, [pc, #132]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0304 	and.w	r3, r3, #4
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0f0      	beq.n	800795c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797a:	f7fb f9a1 	bl	8002cc0 <HAL_GetREVID>
 800797e:	4603      	mov	r3, r0
 8007980:	f241 0203 	movw	r2, #4099	; 0x1003
 8007984:	4293      	cmp	r3, r2
 8007986:	d817      	bhi.n	80079b8 <HAL_RCC_OscConfig+0x24c>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	2b40      	cmp	r3, #64	; 0x40
 800798e:	d108      	bne.n	80079a2 <HAL_RCC_OscConfig+0x236>
 8007990:	4b18      	ldr	r3, [pc, #96]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007998:	4a16      	ldr	r2, [pc, #88]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 800799a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800799e:	6053      	str	r3, [r2, #4]
 80079a0:	e030      	b.n	8007a04 <HAL_RCC_OscConfig+0x298>
 80079a2:	4b14      	ldr	r3, [pc, #80]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	031b      	lsls	r3, r3, #12
 80079b0:	4910      	ldr	r1, [pc, #64]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	604b      	str	r3, [r1, #4]
 80079b6:	e025      	b.n	8007a04 <HAL_RCC_OscConfig+0x298>
 80079b8:	4b0e      	ldr	r3, [pc, #56]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	061b      	lsls	r3, r3, #24
 80079c6:	490b      	ldr	r1, [pc, #44]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80079c8:	4313      	orrs	r3, r2
 80079ca:	604b      	str	r3, [r1, #4]
 80079cc:	e01a      	b.n	8007a04 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079ce:	4b09      	ldr	r3, [pc, #36]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a08      	ldr	r2, [pc, #32]	; (80079f4 <HAL_RCC_OscConfig+0x288>)
 80079d4:	f023 0301 	bic.w	r3, r3, #1
 80079d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079da:	f7fb f941 	bl	8002c60 <HAL_GetTick>
 80079de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079e0:	e00a      	b.n	80079f8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079e2:	f7fb f93d 	bl	8002c60 <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d903      	bls.n	80079f8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e2c4      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
 80079f4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079f8:	4ba4      	ldr	r3, [pc, #656]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1ee      	bne.n	80079e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0310 	and.w	r3, r3, #16
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 80a9 	beq.w	8007b64 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a12:	4b9e      	ldr	r3, [pc, #632]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a1c:	4b9b      	ldr	r3, [pc, #620]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a20:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d007      	beq.n	8007a38 <HAL_RCC_OscConfig+0x2cc>
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	2b18      	cmp	r3, #24
 8007a2c:	d13a      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x338>
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f003 0303 	and.w	r3, r3, #3
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d135      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a38:	4b94      	ldr	r3, [pc, #592]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d005      	beq.n	8007a50 <HAL_RCC_OscConfig+0x2e4>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	2b80      	cmp	r3, #128	; 0x80
 8007a4a:	d001      	beq.n	8007a50 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e296      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a50:	f7fb f936 	bl	8002cc0 <HAL_GetREVID>
 8007a54:	4603      	mov	r3, r0
 8007a56:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d817      	bhi.n	8007a8e <HAL_RCC_OscConfig+0x322>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	2b20      	cmp	r3, #32
 8007a64:	d108      	bne.n	8007a78 <HAL_RCC_OscConfig+0x30c>
 8007a66:	4b89      	ldr	r3, [pc, #548]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007a6e:	4a87      	ldr	r2, [pc, #540]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007a70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a74:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a76:	e075      	b.n	8007b64 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a78:	4b84      	ldr	r3, [pc, #528]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	069b      	lsls	r3, r3, #26
 8007a86:	4981      	ldr	r1, [pc, #516]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a8c:	e06a      	b.n	8007b64 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a8e:	4b7f      	ldr	r3, [pc, #508]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	061b      	lsls	r3, r3, #24
 8007a9c:	497b      	ldr	r1, [pc, #492]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007aa2:	e05f      	b.n	8007b64 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d042      	beq.n	8007b32 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007aac:	4b77      	ldr	r3, [pc, #476]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a76      	ldr	r2, [pc, #472]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab8:	f7fb f8d2 	bl	8002c60 <HAL_GetTick>
 8007abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007abe:	e008      	b.n	8007ad2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007ac0:	f7fb f8ce 	bl	8002c60 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e255      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ad2:	4b6e      	ldr	r3, [pc, #440]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d0f0      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ade:	f7fb f8ef 	bl	8002cc0 <HAL_GetREVID>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d817      	bhi.n	8007b1c <HAL_RCC_OscConfig+0x3b0>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d108      	bne.n	8007b06 <HAL_RCC_OscConfig+0x39a>
 8007af4:	4b65      	ldr	r3, [pc, #404]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007afc:	4a63      	ldr	r2, [pc, #396]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007afe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b02:	6053      	str	r3, [r2, #4]
 8007b04:	e02e      	b.n	8007b64 <HAL_RCC_OscConfig+0x3f8>
 8007b06:	4b61      	ldr	r3, [pc, #388]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	069b      	lsls	r3, r3, #26
 8007b14:	495d      	ldr	r1, [pc, #372]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	604b      	str	r3, [r1, #4]
 8007b1a:	e023      	b.n	8007b64 <HAL_RCC_OscConfig+0x3f8>
 8007b1c:	4b5b      	ldr	r3, [pc, #364]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	061b      	lsls	r3, r3, #24
 8007b2a:	4958      	ldr	r1, [pc, #352]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60cb      	str	r3, [r1, #12]
 8007b30:	e018      	b.n	8007b64 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007b32:	4b56      	ldr	r3, [pc, #344]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a55      	ldr	r2, [pc, #340]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b3e:	f7fb f88f 	bl	8002c60 <HAL_GetTick>
 8007b42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b44:	e008      	b.n	8007b58 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007b46:	f7fb f88b 	bl	8002c60 <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d901      	bls.n	8007b58 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e212      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b58:	4b4c      	ldr	r3, [pc, #304]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1f0      	bne.n	8007b46 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0308 	and.w	r3, r3, #8
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d036      	beq.n	8007bde <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d019      	beq.n	8007bac <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b78:	4b44      	ldr	r3, [pc, #272]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b7c:	4a43      	ldr	r2, [pc, #268]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007b7e:	f043 0301 	orr.w	r3, r3, #1
 8007b82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b84:	f7fb f86c 	bl	8002c60 <HAL_GetTick>
 8007b88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b8c:	f7fb f868 	bl	8002c60 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e1ef      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b9e:	4b3b      	ldr	r3, [pc, #236]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ba2:	f003 0302 	and.w	r3, r3, #2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0f0      	beq.n	8007b8c <HAL_RCC_OscConfig+0x420>
 8007baa:	e018      	b.n	8007bde <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bac:	4b37      	ldr	r3, [pc, #220]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb0:	4a36      	ldr	r2, [pc, #216]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007bb2:	f023 0301 	bic.w	r3, r3, #1
 8007bb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bb8:	f7fb f852 	bl	8002c60 <HAL_GetTick>
 8007bbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007bbe:	e008      	b.n	8007bd2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bc0:	f7fb f84e 	bl	8002c60 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d901      	bls.n	8007bd2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e1d5      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007bd2:	4b2e      	ldr	r3, [pc, #184]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1f0      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d036      	beq.n	8007c58 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d019      	beq.n	8007c26 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007bf2:	4b26      	ldr	r3, [pc, #152]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a25      	ldr	r2, [pc, #148]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007bfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007bfe:	f7fb f82f 	bl	8002c60 <HAL_GetTick>
 8007c02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c04:	e008      	b.n	8007c18 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007c06:	f7fb f82b 	bl	8002c60 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d901      	bls.n	8007c18 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e1b2      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c18:	4b1c      	ldr	r3, [pc, #112]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d0f0      	beq.n	8007c06 <HAL_RCC_OscConfig+0x49a>
 8007c24:	e018      	b.n	8007c58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c26:	4b19      	ldr	r3, [pc, #100]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a18      	ldr	r2, [pc, #96]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c32:	f7fb f815 	bl	8002c60 <HAL_GetTick>
 8007c36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c38:	e008      	b.n	8007c4c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007c3a:	f7fb f811 	bl	8002c60 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d901      	bls.n	8007c4c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e198      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c4c:	4b0f      	ldr	r3, [pc, #60]	; (8007c8c <HAL_RCC_OscConfig+0x520>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1f0      	bne.n	8007c3a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 8085 	beq.w	8007d70 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c66:	4b0a      	ldr	r3, [pc, #40]	; (8007c90 <HAL_RCC_OscConfig+0x524>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a09      	ldr	r2, [pc, #36]	; (8007c90 <HAL_RCC_OscConfig+0x524>)
 8007c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c72:	f7fa fff5 	bl	8002c60 <HAL_GetTick>
 8007c76:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c78:	e00c      	b.n	8007c94 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007c7a:	f7fa fff1 	bl	8002c60 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	2b64      	cmp	r3, #100	; 0x64
 8007c86:	d905      	bls.n	8007c94 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e178      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
 8007c8c:	58024400 	.word	0x58024400
 8007c90:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c94:	4b96      	ldr	r3, [pc, #600]	; (8007ef0 <HAL_RCC_OscConfig+0x784>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d0ec      	beq.n	8007c7a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d106      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x54a>
 8007ca8:	4b92      	ldr	r3, [pc, #584]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cac:	4a91      	ldr	r2, [pc, #580]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007cae:	f043 0301 	orr.w	r3, r3, #1
 8007cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8007cb4:	e02d      	b.n	8007d12 <HAL_RCC_OscConfig+0x5a6>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10c      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x56c>
 8007cbe:	4b8d      	ldr	r3, [pc, #564]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc2:	4a8c      	ldr	r2, [pc, #560]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007cc4:	f023 0301 	bic.w	r3, r3, #1
 8007cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8007cca:	4b8a      	ldr	r3, [pc, #552]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cce:	4a89      	ldr	r2, [pc, #548]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007cd0:	f023 0304 	bic.w	r3, r3, #4
 8007cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd6:	e01c      	b.n	8007d12 <HAL_RCC_OscConfig+0x5a6>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	2b05      	cmp	r3, #5
 8007cde:	d10c      	bne.n	8007cfa <HAL_RCC_OscConfig+0x58e>
 8007ce0:	4b84      	ldr	r3, [pc, #528]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce4:	4a83      	ldr	r2, [pc, #524]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007ce6:	f043 0304 	orr.w	r3, r3, #4
 8007cea:	6713      	str	r3, [r2, #112]	; 0x70
 8007cec:	4b81      	ldr	r3, [pc, #516]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf0:	4a80      	ldr	r2, [pc, #512]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007cf2:	f043 0301 	orr.w	r3, r3, #1
 8007cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8007cf8:	e00b      	b.n	8007d12 <HAL_RCC_OscConfig+0x5a6>
 8007cfa:	4b7e      	ldr	r3, [pc, #504]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfe:	4a7d      	ldr	r2, [pc, #500]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007d00:	f023 0301 	bic.w	r3, r3, #1
 8007d04:	6713      	str	r3, [r2, #112]	; 0x70
 8007d06:	4b7b      	ldr	r3, [pc, #492]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0a:	4a7a      	ldr	r2, [pc, #488]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007d0c:	f023 0304 	bic.w	r3, r3, #4
 8007d10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d015      	beq.n	8007d46 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d1a:	f7fa ffa1 	bl	8002c60 <HAL_GetTick>
 8007d1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d20:	e00a      	b.n	8007d38 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d22:	f7fa ff9d 	bl	8002c60 <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d901      	bls.n	8007d38 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e122      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d38:	4b6e      	ldr	r3, [pc, #440]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d0ee      	beq.n	8007d22 <HAL_RCC_OscConfig+0x5b6>
 8007d44:	e014      	b.n	8007d70 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d46:	f7fa ff8b 	bl	8002c60 <HAL_GetTick>
 8007d4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d4c:	e00a      	b.n	8007d64 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d4e:	f7fa ff87 	bl	8002c60 <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d901      	bls.n	8007d64 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e10c      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d64:	4b63      	ldr	r3, [pc, #396]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1ee      	bne.n	8007d4e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 8101 	beq.w	8007f7c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007d7a:	4b5e      	ldr	r3, [pc, #376]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d82:	2b18      	cmp	r3, #24
 8007d84:	f000 80bc 	beq.w	8007f00 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	f040 8095 	bne.w	8007ebc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d92:	4b58      	ldr	r3, [pc, #352]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a57      	ldr	r2, [pc, #348]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007d98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d9e:	f7fa ff5f 	bl	8002c60 <HAL_GetTick>
 8007da2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007da4:	e008      	b.n	8007db8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007da6:	f7fa ff5b 	bl	8002c60 <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d901      	bls.n	8007db8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e0e2      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007db8:	4b4e      	ldr	r3, [pc, #312]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1f0      	bne.n	8007da6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007dc4:	4b4b      	ldr	r3, [pc, #300]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dc8:	4b4b      	ldr	r3, [pc, #300]	; (8007ef8 <HAL_RCC_OscConfig+0x78c>)
 8007dca:	4013      	ands	r3, r2
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007dd4:	0112      	lsls	r2, r2, #4
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	4946      	ldr	r1, [pc, #280]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	628b      	str	r3, [r1, #40]	; 0x28
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de2:	3b01      	subs	r3, #1
 8007de4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dec:	3b01      	subs	r3, #1
 8007dee:	025b      	lsls	r3, r3, #9
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	431a      	orrs	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	041b      	lsls	r3, r3, #16
 8007dfc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e06:	3b01      	subs	r3, #1
 8007e08:	061b      	lsls	r3, r3, #24
 8007e0a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e0e:	4939      	ldr	r1, [pc, #228]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007e14:	4b37      	ldr	r3, [pc, #220]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	4a36      	ldr	r2, [pc, #216]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e1a:	f023 0301 	bic.w	r3, r3, #1
 8007e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e20:	4b34      	ldr	r3, [pc, #208]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e24:	4b35      	ldr	r3, [pc, #212]	; (8007efc <HAL_RCC_OscConfig+0x790>)
 8007e26:	4013      	ands	r3, r2
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007e2c:	00d2      	lsls	r2, r2, #3
 8007e2e:	4931      	ldr	r1, [pc, #196]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007e34:	4b2f      	ldr	r3, [pc, #188]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e38:	f023 020c 	bic.w	r2, r3, #12
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e40:	492c      	ldr	r1, [pc, #176]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007e46:	4b2b      	ldr	r3, [pc, #172]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	f023 0202 	bic.w	r2, r3, #2
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e52:	4928      	ldr	r1, [pc, #160]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e58:	4b26      	ldr	r3, [pc, #152]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	4a25      	ldr	r2, [pc, #148]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e64:	4b23      	ldr	r3, [pc, #140]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	4a22      	ldr	r2, [pc, #136]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007e70:	4b20      	ldr	r3, [pc, #128]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e74:	4a1f      	ldr	r2, [pc, #124]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007e7c:	4b1d      	ldr	r3, [pc, #116]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e80:	4a1c      	ldr	r2, [pc, #112]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e82:	f043 0301 	orr.w	r3, r3, #1
 8007e86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e88:	4b1a      	ldr	r3, [pc, #104]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a19      	ldr	r2, [pc, #100]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e94:	f7fa fee4 	bl	8002c60 <HAL_GetTick>
 8007e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e9a:	e008      	b.n	8007eae <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e9c:	f7fa fee0 	bl	8002c60 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e067      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007eae:	4b11      	ldr	r3, [pc, #68]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0f0      	beq.n	8007e9c <HAL_RCC_OscConfig+0x730>
 8007eba:	e05f      	b.n	8007f7c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a0c      	ldr	r2, [pc, #48]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec8:	f7fa feca 	bl	8002c60 <HAL_GetTick>
 8007ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ece:	e008      	b.n	8007ee2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ed0:	f7fa fec6 	bl	8002c60 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e04d      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ee2:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <HAL_RCC_OscConfig+0x788>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1f0      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x764>
 8007eee:	e045      	b.n	8007f7c <HAL_RCC_OscConfig+0x810>
 8007ef0:	58024800 	.word	0x58024800
 8007ef4:	58024400 	.word	0x58024400
 8007ef8:	fffffc0c 	.word	0xfffffc0c
 8007efc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007f00:	4b21      	ldr	r3, [pc, #132]	; (8007f88 <HAL_RCC_OscConfig+0x81c>)
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007f06:	4b20      	ldr	r3, [pc, #128]	; (8007f88 <HAL_RCC_OscConfig+0x81c>)
 8007f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d031      	beq.n	8007f78 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f003 0203 	and.w	r2, r3, #3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d12a      	bne.n	8007f78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	091b      	lsrs	r3, r3, #4
 8007f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d122      	bne.n	8007f78 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d11a      	bne.n	8007f78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	0a5b      	lsrs	r3, r3, #9
 8007f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d111      	bne.n	8007f78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	0c1b      	lsrs	r3, r3, #16
 8007f58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d108      	bne.n	8007f78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	0e1b      	lsrs	r3, r3, #24
 8007f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d001      	beq.n	8007f7c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e000      	b.n	8007f7e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3730      	adds	r7, #48	; 0x30
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	58024400 	.word	0x58024400

08007f8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e19c      	b.n	80082da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007fa0:	4b8a      	ldr	r3, [pc, #552]	; (80081cc <HAL_RCC_ClockConfig+0x240>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d910      	bls.n	8007fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fae:	4b87      	ldr	r3, [pc, #540]	; (80081cc <HAL_RCC_ClockConfig+0x240>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f023 020f 	bic.w	r2, r3, #15
 8007fb6:	4985      	ldr	r1, [pc, #532]	; (80081cc <HAL_RCC_ClockConfig+0x240>)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fbe:	4b83      	ldr	r3, [pc, #524]	; (80081cc <HAL_RCC_ClockConfig+0x240>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d001      	beq.n	8007fd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e184      	b.n	80082da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0304 	and.w	r3, r3, #4
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d010      	beq.n	8007ffe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691a      	ldr	r2, [r3, #16]
 8007fe0:	4b7b      	ldr	r3, [pc, #492]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d908      	bls.n	8007ffe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007fec:	4b78      	ldr	r3, [pc, #480]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	4975      	ldr	r1, [pc, #468]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0308 	and.w	r3, r3, #8
 8008006:	2b00      	cmp	r3, #0
 8008008:	d010      	beq.n	800802c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	695a      	ldr	r2, [r3, #20]
 800800e:	4b70      	ldr	r3, [pc, #448]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008016:	429a      	cmp	r2, r3
 8008018:	d908      	bls.n	800802c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800801a:	4b6d      	ldr	r3, [pc, #436]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 800801c:	69db      	ldr	r3, [r3, #28]
 800801e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	496a      	ldr	r1, [pc, #424]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 8008028:	4313      	orrs	r3, r2
 800802a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	2b00      	cmp	r3, #0
 8008036:	d010      	beq.n	800805a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	699a      	ldr	r2, [r3, #24]
 800803c:	4b64      	ldr	r3, [pc, #400]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 800803e:	69db      	ldr	r3, [r3, #28]
 8008040:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008044:	429a      	cmp	r2, r3
 8008046:	d908      	bls.n	800805a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008048:	4b61      	ldr	r3, [pc, #388]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	495e      	ldr	r1, [pc, #376]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 8008056:	4313      	orrs	r3, r2
 8008058:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b00      	cmp	r3, #0
 8008064:	d010      	beq.n	8008088 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	69da      	ldr	r2, [r3, #28]
 800806a:	4b59      	ldr	r3, [pc, #356]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008072:	429a      	cmp	r2, r3
 8008074:	d908      	bls.n	8008088 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008076:	4b56      	ldr	r3, [pc, #344]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	4953      	ldr	r1, [pc, #332]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 8008084:	4313      	orrs	r3, r2
 8008086:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d010      	beq.n	80080b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	4b4d      	ldr	r3, [pc, #308]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	f003 030f 	and.w	r3, r3, #15
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d908      	bls.n	80080b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080a4:	4b4a      	ldr	r3, [pc, #296]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	f023 020f 	bic.w	r2, r3, #15
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	4947      	ldr	r1, [pc, #284]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d055      	beq.n	800816e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80080c2:	4b43      	ldr	r3, [pc, #268]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	4940      	ldr	r1, [pc, #256]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d107      	bne.n	80080ec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080dc:	4b3c      	ldr	r3, [pc, #240]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d121      	bne.n	800812c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e0f6      	b.n	80082da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	2b03      	cmp	r3, #3
 80080f2:	d107      	bne.n	8008104 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080f4:	4b36      	ldr	r3, [pc, #216]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d115      	bne.n	800812c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e0ea      	b.n	80082da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d107      	bne.n	800811c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800810c:	4b30      	ldr	r3, [pc, #192]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008114:	2b00      	cmp	r3, #0
 8008116:	d109      	bne.n	800812c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e0de      	b.n	80082da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800811c:	4b2c      	ldr	r3, [pc, #176]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e0d6      	b.n	80082da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800812c:	4b28      	ldr	r3, [pc, #160]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	f023 0207 	bic.w	r2, r3, #7
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	4925      	ldr	r1, [pc, #148]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 800813a:	4313      	orrs	r3, r2
 800813c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800813e:	f7fa fd8f 	bl	8002c60 <HAL_GetTick>
 8008142:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008144:	e00a      	b.n	800815c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008146:	f7fa fd8b 	bl	8002c60 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	f241 3288 	movw	r2, #5000	; 0x1388
 8008154:	4293      	cmp	r3, r2
 8008156:	d901      	bls.n	800815c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e0be      	b.n	80082da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800815c:	4b1c      	ldr	r3, [pc, #112]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	429a      	cmp	r2, r3
 800816c:	d1eb      	bne.n	8008146 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d010      	beq.n	800819c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68da      	ldr	r2, [r3, #12]
 800817e:	4b14      	ldr	r3, [pc, #80]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	f003 030f 	and.w	r3, r3, #15
 8008186:	429a      	cmp	r2, r3
 8008188:	d208      	bcs.n	800819c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800818a:	4b11      	ldr	r3, [pc, #68]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	f023 020f 	bic.w	r2, r3, #15
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	490e      	ldr	r1, [pc, #56]	; (80081d0 <HAL_RCC_ClockConfig+0x244>)
 8008198:	4313      	orrs	r3, r2
 800819a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800819c:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <HAL_RCC_ClockConfig+0x240>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 030f 	and.w	r3, r3, #15
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d214      	bcs.n	80081d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081aa:	4b08      	ldr	r3, [pc, #32]	; (80081cc <HAL_RCC_ClockConfig+0x240>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f023 020f 	bic.w	r2, r3, #15
 80081b2:	4906      	ldr	r1, [pc, #24]	; (80081cc <HAL_RCC_ClockConfig+0x240>)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ba:	4b04      	ldr	r3, [pc, #16]	; (80081cc <HAL_RCC_ClockConfig+0x240>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 030f 	and.w	r3, r3, #15
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d005      	beq.n	80081d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e086      	b.n	80082da <HAL_RCC_ClockConfig+0x34e>
 80081cc:	52002000 	.word	0x52002000
 80081d0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d010      	beq.n	8008202 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	4b3f      	ldr	r3, [pc, #252]	; (80082e4 <HAL_RCC_ClockConfig+0x358>)
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d208      	bcs.n	8008202 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80081f0:	4b3c      	ldr	r3, [pc, #240]	; (80082e4 <HAL_RCC_ClockConfig+0x358>)
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	4939      	ldr	r1, [pc, #228]	; (80082e4 <HAL_RCC_ClockConfig+0x358>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0308 	and.w	r3, r3, #8
 800820a:	2b00      	cmp	r3, #0
 800820c:	d010      	beq.n	8008230 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	695a      	ldr	r2, [r3, #20]
 8008212:	4b34      	ldr	r3, [pc, #208]	; (80082e4 <HAL_RCC_ClockConfig+0x358>)
 8008214:	69db      	ldr	r3, [r3, #28]
 8008216:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800821a:	429a      	cmp	r2, r3
 800821c:	d208      	bcs.n	8008230 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800821e:	4b31      	ldr	r3, [pc, #196]	; (80082e4 <HAL_RCC_ClockConfig+0x358>)
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	492e      	ldr	r1, [pc, #184]	; (80082e4 <HAL_RCC_ClockConfig+0x358>)
 800822c:	4313      	orrs	r3, r2
 800822e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0310 	and.w	r3, r3, #16
 8008238:	2b00      	cmp	r3, #0
 800823a:	d010      	beq.n	800825e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	699a      	ldr	r2, [r3, #24]
 8008240:	4b28      	ldr	r3, [pc, #160]	; (80082e4 <HAL_RCC_ClockConfig+0x358>)
 8008242:	69db      	ldr	r3, [r3, #28]
 8008244:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008248:	429a      	cmp	r2, r3
 800824a:	d208      	bcs.n	800825e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800824c:	4b25      	ldr	r3, [pc, #148]	; (80082e4 <HAL_RCC_ClockConfig+0x358>)
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	4922      	ldr	r1, [pc, #136]	; (80082e4 <HAL_RCC_ClockConfig+0x358>)
 800825a:	4313      	orrs	r3, r2
 800825c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b00      	cmp	r3, #0
 8008268:	d010      	beq.n	800828c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	69da      	ldr	r2, [r3, #28]
 800826e:	4b1d      	ldr	r3, [pc, #116]	; (80082e4 <HAL_RCC_ClockConfig+0x358>)
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008276:	429a      	cmp	r2, r3
 8008278:	d208      	bcs.n	800828c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800827a:	4b1a      	ldr	r3, [pc, #104]	; (80082e4 <HAL_RCC_ClockConfig+0x358>)
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	4917      	ldr	r1, [pc, #92]	; (80082e4 <HAL_RCC_ClockConfig+0x358>)
 8008288:	4313      	orrs	r3, r2
 800828a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800828c:	f000 f834 	bl	80082f8 <HAL_RCC_GetSysClockFreq>
 8008290:	4602      	mov	r2, r0
 8008292:	4b14      	ldr	r3, [pc, #80]	; (80082e4 <HAL_RCC_ClockConfig+0x358>)
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	0a1b      	lsrs	r3, r3, #8
 8008298:	f003 030f 	and.w	r3, r3, #15
 800829c:	4912      	ldr	r1, [pc, #72]	; (80082e8 <HAL_RCC_ClockConfig+0x35c>)
 800829e:	5ccb      	ldrb	r3, [r1, r3]
 80082a0:	f003 031f 	and.w	r3, r3, #31
 80082a4:	fa22 f303 	lsr.w	r3, r2, r3
 80082a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082aa:	4b0e      	ldr	r3, [pc, #56]	; (80082e4 <HAL_RCC_ClockConfig+0x358>)
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	f003 030f 	and.w	r3, r3, #15
 80082b2:	4a0d      	ldr	r2, [pc, #52]	; (80082e8 <HAL_RCC_ClockConfig+0x35c>)
 80082b4:	5cd3      	ldrb	r3, [r2, r3]
 80082b6:	f003 031f 	and.w	r3, r3, #31
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	fa22 f303 	lsr.w	r3, r2, r3
 80082c0:	4a0a      	ldr	r2, [pc, #40]	; (80082ec <HAL_RCC_ClockConfig+0x360>)
 80082c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082c4:	4a0a      	ldr	r2, [pc, #40]	; (80082f0 <HAL_RCC_ClockConfig+0x364>)
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80082ca:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <HAL_RCC_ClockConfig+0x368>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fa fc7c 	bl	8002bcc <HAL_InitTick>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	58024400 	.word	0x58024400
 80082e8:	08022784 	.word	0x08022784
 80082ec:	24000404 	.word	0x24000404
 80082f0:	24000400 	.word	0x24000400
 80082f4:	24000408 	.word	0x24000408

080082f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b089      	sub	sp, #36	; 0x24
 80082fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082fe:	4bb3      	ldr	r3, [pc, #716]	; (80085cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008306:	2b18      	cmp	r3, #24
 8008308:	f200 8155 	bhi.w	80085b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800830c:	a201      	add	r2, pc, #4	; (adr r2, 8008314 <HAL_RCC_GetSysClockFreq+0x1c>)
 800830e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008312:	bf00      	nop
 8008314:	08008379 	.word	0x08008379
 8008318:	080085b7 	.word	0x080085b7
 800831c:	080085b7 	.word	0x080085b7
 8008320:	080085b7 	.word	0x080085b7
 8008324:	080085b7 	.word	0x080085b7
 8008328:	080085b7 	.word	0x080085b7
 800832c:	080085b7 	.word	0x080085b7
 8008330:	080085b7 	.word	0x080085b7
 8008334:	0800839f 	.word	0x0800839f
 8008338:	080085b7 	.word	0x080085b7
 800833c:	080085b7 	.word	0x080085b7
 8008340:	080085b7 	.word	0x080085b7
 8008344:	080085b7 	.word	0x080085b7
 8008348:	080085b7 	.word	0x080085b7
 800834c:	080085b7 	.word	0x080085b7
 8008350:	080085b7 	.word	0x080085b7
 8008354:	080083a5 	.word	0x080083a5
 8008358:	080085b7 	.word	0x080085b7
 800835c:	080085b7 	.word	0x080085b7
 8008360:	080085b7 	.word	0x080085b7
 8008364:	080085b7 	.word	0x080085b7
 8008368:	080085b7 	.word	0x080085b7
 800836c:	080085b7 	.word	0x080085b7
 8008370:	080085b7 	.word	0x080085b7
 8008374:	080083ab 	.word	0x080083ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008378:	4b94      	ldr	r3, [pc, #592]	; (80085cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0320 	and.w	r3, r3, #32
 8008380:	2b00      	cmp	r3, #0
 8008382:	d009      	beq.n	8008398 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008384:	4b91      	ldr	r3, [pc, #580]	; (80085cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	08db      	lsrs	r3, r3, #3
 800838a:	f003 0303 	and.w	r3, r3, #3
 800838e:	4a90      	ldr	r2, [pc, #576]	; (80085d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008390:	fa22 f303 	lsr.w	r3, r2, r3
 8008394:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008396:	e111      	b.n	80085bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008398:	4b8d      	ldr	r3, [pc, #564]	; (80085d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800839a:	61bb      	str	r3, [r7, #24]
    break;
 800839c:	e10e      	b.n	80085bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800839e:	4b8d      	ldr	r3, [pc, #564]	; (80085d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80083a0:	61bb      	str	r3, [r7, #24]
    break;
 80083a2:	e10b      	b.n	80085bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80083a4:	4b8c      	ldr	r3, [pc, #560]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80083a6:	61bb      	str	r3, [r7, #24]
    break;
 80083a8:	e108      	b.n	80085bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083aa:	4b88      	ldr	r3, [pc, #544]	; (80085cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ae:	f003 0303 	and.w	r3, r3, #3
 80083b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80083b4:	4b85      	ldr	r3, [pc, #532]	; (80085cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b8:	091b      	lsrs	r3, r3, #4
 80083ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80083c0:	4b82      	ldr	r3, [pc, #520]	; (80085cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	f003 0301 	and.w	r3, r3, #1
 80083c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80083ca:	4b80      	ldr	r3, [pc, #512]	; (80085cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ce:	08db      	lsrs	r3, r3, #3
 80083d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	fb02 f303 	mul.w	r3, r2, r3
 80083da:	ee07 3a90 	vmov	s15, r3
 80083de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 80e1 	beq.w	80085b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	f000 8083 	beq.w	80084fc <HAL_RCC_GetSysClockFreq+0x204>
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	f200 80a1 	bhi.w	8008540 <HAL_RCC_GetSysClockFreq+0x248>
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <HAL_RCC_GetSysClockFreq+0x114>
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d056      	beq.n	80084b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800840a:	e099      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800840c:	4b6f      	ldr	r3, [pc, #444]	; (80085cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0320 	and.w	r3, r3, #32
 8008414:	2b00      	cmp	r3, #0
 8008416:	d02d      	beq.n	8008474 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008418:	4b6c      	ldr	r3, [pc, #432]	; (80085cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	08db      	lsrs	r3, r3, #3
 800841e:	f003 0303 	and.w	r3, r3, #3
 8008422:	4a6b      	ldr	r2, [pc, #428]	; (80085d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008424:	fa22 f303 	lsr.w	r3, r2, r3
 8008428:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	ee07 3a90 	vmov	s15, r3
 8008430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008442:	4b62      	ldr	r3, [pc, #392]	; (80085cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008452:	ed97 6a02 	vldr	s12, [r7, #8]
 8008456:	eddf 5a61 	vldr	s11, [pc, #388]	; 80085dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800845a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800845e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800846a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800846e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008472:	e087      	b.n	8008584 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	ee07 3a90 	vmov	s15, r3
 800847a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80085e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008486:	4b51      	ldr	r3, [pc, #324]	; (80085cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008496:	ed97 6a02 	vldr	s12, [r7, #8]
 800849a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80085dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800849e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084b6:	e065      	b.n	8008584 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80085e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80084c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ca:	4b40      	ldr	r3, [pc, #256]	; (80085cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d2:	ee07 3a90 	vmov	s15, r3
 80084d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084da:	ed97 6a02 	vldr	s12, [r7, #8]
 80084de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80085dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80084e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084fa:	e043      	b.n	8008584 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	ee07 3a90 	vmov	s15, r3
 8008502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008506:	eddf 6a38 	vldr	s13, [pc, #224]	; 80085e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800850a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800850e:	4b2f      	ldr	r3, [pc, #188]	; (80085cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800851e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008522:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80085dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800852a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800852e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800853e:	e021      	b.n	8008584 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	ee07 3a90 	vmov	s15, r3
 8008546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80085e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800854e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008552:	4b1e      	ldr	r3, [pc, #120]	; (80085cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800855a:	ee07 3a90 	vmov	s15, r3
 800855e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008562:	ed97 6a02 	vldr	s12, [r7, #8]
 8008566:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80085dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800856a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800856e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800857a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800857e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008582:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008584:	4b11      	ldr	r3, [pc, #68]	; (80085cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008588:	0a5b      	lsrs	r3, r3, #9
 800858a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800858e:	3301      	adds	r3, #1
 8008590:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	ee07 3a90 	vmov	s15, r3
 8008598:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800859c:	edd7 6a07 	vldr	s13, [r7, #28]
 80085a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085a8:	ee17 3a90 	vmov	r3, s15
 80085ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80085ae:	e005      	b.n	80085bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	61bb      	str	r3, [r7, #24]
    break;
 80085b4:	e002      	b.n	80085bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80085b6:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80085b8:	61bb      	str	r3, [r7, #24]
    break;
 80085ba:	bf00      	nop
  }

  return sysclockfreq;
 80085bc:	69bb      	ldr	r3, [r7, #24]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3724      	adds	r7, #36	; 0x24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	58024400 	.word	0x58024400
 80085d0:	03d09000 	.word	0x03d09000
 80085d4:	003d0900 	.word	0x003d0900
 80085d8:	017d7840 	.word	0x017d7840
 80085dc:	46000000 	.word	0x46000000
 80085e0:	4c742400 	.word	0x4c742400
 80085e4:	4a742400 	.word	0x4a742400
 80085e8:	4bbebc20 	.word	0x4bbebc20

080085ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80085f2:	f7ff fe81 	bl	80082f8 <HAL_RCC_GetSysClockFreq>
 80085f6:	4602      	mov	r2, r0
 80085f8:	4b10      	ldr	r3, [pc, #64]	; (800863c <HAL_RCC_GetHCLKFreq+0x50>)
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	0a1b      	lsrs	r3, r3, #8
 80085fe:	f003 030f 	and.w	r3, r3, #15
 8008602:	490f      	ldr	r1, [pc, #60]	; (8008640 <HAL_RCC_GetHCLKFreq+0x54>)
 8008604:	5ccb      	ldrb	r3, [r1, r3]
 8008606:	f003 031f 	and.w	r3, r3, #31
 800860a:	fa22 f303 	lsr.w	r3, r2, r3
 800860e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008610:	4b0a      	ldr	r3, [pc, #40]	; (800863c <HAL_RCC_GetHCLKFreq+0x50>)
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	f003 030f 	and.w	r3, r3, #15
 8008618:	4a09      	ldr	r2, [pc, #36]	; (8008640 <HAL_RCC_GetHCLKFreq+0x54>)
 800861a:	5cd3      	ldrb	r3, [r2, r3]
 800861c:	f003 031f 	and.w	r3, r3, #31
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	fa22 f303 	lsr.w	r3, r2, r3
 8008626:	4a07      	ldr	r2, [pc, #28]	; (8008644 <HAL_RCC_GetHCLKFreq+0x58>)
 8008628:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800862a:	4a07      	ldr	r2, [pc, #28]	; (8008648 <HAL_RCC_GetHCLKFreq+0x5c>)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008630:	4b04      	ldr	r3, [pc, #16]	; (8008644 <HAL_RCC_GetHCLKFreq+0x58>)
 8008632:	681b      	ldr	r3, [r3, #0]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	58024400 	.word	0x58024400
 8008640:	08022784 	.word	0x08022784
 8008644:	24000404 	.word	0x24000404
 8008648:	24000400 	.word	0x24000400

0800864c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008650:	f7ff ffcc 	bl	80085ec <HAL_RCC_GetHCLKFreq>
 8008654:	4602      	mov	r2, r0
 8008656:	4b06      	ldr	r3, [pc, #24]	; (8008670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008658:	69db      	ldr	r3, [r3, #28]
 800865a:	091b      	lsrs	r3, r3, #4
 800865c:	f003 0307 	and.w	r3, r3, #7
 8008660:	4904      	ldr	r1, [pc, #16]	; (8008674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008662:	5ccb      	ldrb	r3, [r1, r3]
 8008664:	f003 031f 	and.w	r3, r3, #31
 8008668:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800866c:	4618      	mov	r0, r3
 800866e:	bd80      	pop	{r7, pc}
 8008670:	58024400 	.word	0x58024400
 8008674:	08022784 	.word	0x08022784

08008678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800867c:	f7ff ffb6 	bl	80085ec <HAL_RCC_GetHCLKFreq>
 8008680:	4602      	mov	r2, r0
 8008682:	4b06      	ldr	r3, [pc, #24]	; (800869c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	0a1b      	lsrs	r3, r3, #8
 8008688:	f003 0307 	and.w	r3, r3, #7
 800868c:	4904      	ldr	r1, [pc, #16]	; (80086a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800868e:	5ccb      	ldrb	r3, [r1, r3]
 8008690:	f003 031f 	and.w	r3, r3, #31
 8008694:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008698:	4618      	mov	r0, r3
 800869a:	bd80      	pop	{r7, pc}
 800869c:	58024400 	.word	0x58024400
 80086a0:	08022784 	.word	0x08022784

080086a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80086ac:	2300      	movs	r3, #0
 80086ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086b0:	2300      	movs	r3, #0
 80086b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d03f      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086c8:	d02a      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80086ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086ce:	d824      	bhi.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80086d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086d4:	d018      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80086d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086da:	d81e      	bhi.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d003      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80086e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086e4:	d007      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80086e6:	e018      	b.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e8:	4bab      	ldr	r3, [pc, #684]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	4aaa      	ldr	r2, [pc, #680]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80086ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80086f4:	e015      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3304      	adds	r3, #4
 80086fa:	2102      	movs	r1, #2
 80086fc:	4618      	mov	r0, r3
 80086fe:	f001 fff3 	bl	800a6e8 <RCCEx_PLL2_Config>
 8008702:	4603      	mov	r3, r0
 8008704:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008706:	e00c      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3324      	adds	r3, #36	; 0x24
 800870c:	2102      	movs	r1, #2
 800870e:	4618      	mov	r0, r3
 8008710:	f002 f89c 	bl	800a84c <RCCEx_PLL3_Config>
 8008714:	4603      	mov	r3, r0
 8008716:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008718:	e003      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	75fb      	strb	r3, [r7, #23]
      break;
 800871e:	e000      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d109      	bne.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008728:	4b9b      	ldr	r3, [pc, #620]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800872a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800872c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008734:	4998      	ldr	r1, [pc, #608]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008736:	4313      	orrs	r3, r2
 8008738:	650b      	str	r3, [r1, #80]	; 0x50
 800873a:	e001      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008748:	2b00      	cmp	r3, #0
 800874a:	d03d      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008750:	2b04      	cmp	r3, #4
 8008752:	d826      	bhi.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008754:	a201      	add	r2, pc, #4	; (adr r2, 800875c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875a:	bf00      	nop
 800875c:	08008771 	.word	0x08008771
 8008760:	0800877f 	.word	0x0800877f
 8008764:	08008791 	.word	0x08008791
 8008768:	080087a9 	.word	0x080087a9
 800876c:	080087a9 	.word	0x080087a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008770:	4b89      	ldr	r3, [pc, #548]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008774:	4a88      	ldr	r2, [pc, #544]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800877a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800877c:	e015      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	3304      	adds	r3, #4
 8008782:	2100      	movs	r1, #0
 8008784:	4618      	mov	r0, r3
 8008786:	f001 ffaf 	bl	800a6e8 <RCCEx_PLL2_Config>
 800878a:	4603      	mov	r3, r0
 800878c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800878e:	e00c      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3324      	adds	r3, #36	; 0x24
 8008794:	2100      	movs	r1, #0
 8008796:	4618      	mov	r0, r3
 8008798:	f002 f858 	bl	800a84c <RCCEx_PLL3_Config>
 800879c:	4603      	mov	r3, r0
 800879e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087a0:	e003      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	75fb      	strb	r3, [r7, #23]
      break;
 80087a6:	e000      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80087a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d109      	bne.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087b0:	4b79      	ldr	r3, [pc, #484]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80087b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b4:	f023 0207 	bic.w	r2, r3, #7
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087bc:	4976      	ldr	r1, [pc, #472]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	650b      	str	r3, [r1, #80]	; 0x50
 80087c2:	e001      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d042      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087dc:	d02b      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80087de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087e2:	d825      	bhi.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80087e4:	2bc0      	cmp	r3, #192	; 0xc0
 80087e6:	d028      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80087e8:	2bc0      	cmp	r3, #192	; 0xc0
 80087ea:	d821      	bhi.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80087ec:	2b80      	cmp	r3, #128	; 0x80
 80087ee:	d016      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80087f0:	2b80      	cmp	r3, #128	; 0x80
 80087f2:	d81d      	bhi.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80087f8:	2b40      	cmp	r3, #64	; 0x40
 80087fa:	d007      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x168>
 80087fc:	e018      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087fe:	4b66      	ldr	r3, [pc, #408]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008802:	4a65      	ldr	r2, [pc, #404]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008808:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800880a:	e017      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	3304      	adds	r3, #4
 8008810:	2100      	movs	r1, #0
 8008812:	4618      	mov	r0, r3
 8008814:	f001 ff68 	bl	800a6e8 <RCCEx_PLL2_Config>
 8008818:	4603      	mov	r3, r0
 800881a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800881c:	e00e      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3324      	adds	r3, #36	; 0x24
 8008822:	2100      	movs	r1, #0
 8008824:	4618      	mov	r0, r3
 8008826:	f002 f811 	bl	800a84c <RCCEx_PLL3_Config>
 800882a:	4603      	mov	r3, r0
 800882c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800882e:	e005      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	75fb      	strb	r3, [r7, #23]
      break;
 8008834:	e002      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008836:	bf00      	nop
 8008838:	e000      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800883a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800883c:	7dfb      	ldrb	r3, [r7, #23]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d109      	bne.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008842:	4b55      	ldr	r3, [pc, #340]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008846:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800884e:	4952      	ldr	r1, [pc, #328]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008850:	4313      	orrs	r3, r2
 8008852:	650b      	str	r3, [r1, #80]	; 0x50
 8008854:	e001      	b.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008856:	7dfb      	ldrb	r3, [r7, #23]
 8008858:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008862:	2b00      	cmp	r3, #0
 8008864:	d049      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800886c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008870:	d030      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008872:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008876:	d82a      	bhi.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008878:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800887c:	d02c      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800887e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008882:	d824      	bhi.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008888:	d018      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800888a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800888e:	d81e      	bhi.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008894:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008898:	d007      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800889a:	e018      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800889c:	4b3e      	ldr	r3, [pc, #248]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800889e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a0:	4a3d      	ldr	r2, [pc, #244]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80088a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80088a8:	e017      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	3304      	adds	r3, #4
 80088ae:	2100      	movs	r1, #0
 80088b0:	4618      	mov	r0, r3
 80088b2:	f001 ff19 	bl	800a6e8 <RCCEx_PLL2_Config>
 80088b6:	4603      	mov	r3, r0
 80088b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80088ba:	e00e      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	3324      	adds	r3, #36	; 0x24
 80088c0:	2100      	movs	r1, #0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f001 ffc2 	bl	800a84c <RCCEx_PLL3_Config>
 80088c8:	4603      	mov	r3, r0
 80088ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80088cc:	e005      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	75fb      	strb	r3, [r7, #23]
      break;
 80088d2:	e002      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80088d4:	bf00      	nop
 80088d6:	e000      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80088d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088da:	7dfb      	ldrb	r3, [r7, #23]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10a      	bne.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80088e0:	4b2d      	ldr	r3, [pc, #180]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80088e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088ee:	492a      	ldr	r1, [pc, #168]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80088f0:	4313      	orrs	r3, r2
 80088f2:	658b      	str	r3, [r1, #88]	; 0x58
 80088f4:	e001      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008902:	2b00      	cmp	r3, #0
 8008904:	d04c      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800890c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008910:	d030      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008912:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008916:	d82a      	bhi.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008918:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800891c:	d02c      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800891e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008922:	d824      	bhi.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008928:	d018      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800892a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800892e:	d81e      	bhi.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008938:	d007      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800893a:	e018      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800893c:	4b16      	ldr	r3, [pc, #88]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	4a15      	ldr	r2, [pc, #84]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008946:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008948:	e017      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3304      	adds	r3, #4
 800894e:	2100      	movs	r1, #0
 8008950:	4618      	mov	r0, r3
 8008952:	f001 fec9 	bl	800a6e8 <RCCEx_PLL2_Config>
 8008956:	4603      	mov	r3, r0
 8008958:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800895a:	e00e      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	3324      	adds	r3, #36	; 0x24
 8008960:	2100      	movs	r1, #0
 8008962:	4618      	mov	r0, r3
 8008964:	f001 ff72 	bl	800a84c <RCCEx_PLL3_Config>
 8008968:	4603      	mov	r3, r0
 800896a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800896c:	e005      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	75fb      	strb	r3, [r7, #23]
      break;
 8008972:	e002      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008974:	bf00      	nop
 8008976:	e000      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800897a:	7dfb      	ldrb	r3, [r7, #23]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10d      	bne.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008980:	4b05      	ldr	r3, [pc, #20]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008984:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800898e:	4902      	ldr	r1, [pc, #8]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008990:	4313      	orrs	r3, r2
 8008992:	658b      	str	r3, [r1, #88]	; 0x58
 8008994:	e004      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008996:	bf00      	nop
 8008998:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800899c:	7dfb      	ldrb	r3, [r7, #23]
 800899e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d032      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089b0:	2b30      	cmp	r3, #48	; 0x30
 80089b2:	d01c      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80089b4:	2b30      	cmp	r3, #48	; 0x30
 80089b6:	d817      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80089b8:	2b20      	cmp	r3, #32
 80089ba:	d00c      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80089bc:	2b20      	cmp	r3, #32
 80089be:	d813      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d016      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80089c4:	2b10      	cmp	r3, #16
 80089c6:	d10f      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089c8:	4baf      	ldr	r3, [pc, #700]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	4aae      	ldr	r2, [pc, #696]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80089ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80089d4:	e00e      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	3304      	adds	r3, #4
 80089da:	2102      	movs	r1, #2
 80089dc:	4618      	mov	r0, r3
 80089de:	f001 fe83 	bl	800a6e8 <RCCEx_PLL2_Config>
 80089e2:	4603      	mov	r3, r0
 80089e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80089e6:	e005      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	75fb      	strb	r3, [r7, #23]
      break;
 80089ec:	e002      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80089ee:	bf00      	nop
 80089f0:	e000      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80089f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d109      	bne.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80089fa:	4ba3      	ldr	r3, [pc, #652]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80089fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a06:	49a0      	ldr	r1, [pc, #640]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a0c:	e001      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d047      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a26:	d030      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a2c:	d82a      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008a2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a32:	d02c      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008a34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a38:	d824      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a3e:	d018      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a44:	d81e      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a4e:	d007      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008a50:	e018      	b.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a52:	4b8d      	ldr	r3, [pc, #564]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a56:	4a8c      	ldr	r2, [pc, #560]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a5e:	e017      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	3304      	adds	r3, #4
 8008a64:	2100      	movs	r1, #0
 8008a66:	4618      	mov	r0, r3
 8008a68:	f001 fe3e 	bl	800a6e8 <RCCEx_PLL2_Config>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a70:	e00e      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	3324      	adds	r3, #36	; 0x24
 8008a76:	2100      	movs	r1, #0
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f001 fee7 	bl	800a84c <RCCEx_PLL3_Config>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a82:	e005      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	75fb      	strb	r3, [r7, #23]
      break;
 8008a88:	e002      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008a8a:	bf00      	nop
 8008a8c:	e000      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d109      	bne.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008a96:	4b7c      	ldr	r3, [pc, #496]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a9a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aa2:	4979      	ldr	r1, [pc, #484]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	650b      	str	r3, [r1, #80]	; 0x50
 8008aa8:	e001      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d049      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ac2:	d02e      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ac8:	d828      	bhi.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008aca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ace:	d02a      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008ad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ad4:	d822      	bhi.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008ad6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ada:	d026      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008adc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ae0:	d81c      	bhi.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008ae2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ae6:	d010      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008aec:	d816      	bhi.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d01d      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008af6:	d111      	bne.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	3304      	adds	r3, #4
 8008afc:	2101      	movs	r1, #1
 8008afe:	4618      	mov	r0, r3
 8008b00:	f001 fdf2 	bl	800a6e8 <RCCEx_PLL2_Config>
 8008b04:	4603      	mov	r3, r0
 8008b06:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b08:	e012      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3324      	adds	r3, #36	; 0x24
 8008b0e:	2101      	movs	r1, #1
 8008b10:	4618      	mov	r0, r3
 8008b12:	f001 fe9b 	bl	800a84c <RCCEx_PLL3_Config>
 8008b16:	4603      	mov	r3, r0
 8008b18:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b1a:	e009      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b20:	e006      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008b22:	bf00      	nop
 8008b24:	e004      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008b26:	bf00      	nop
 8008b28:	e002      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008b2a:	bf00      	nop
 8008b2c:	e000      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b30:	7dfb      	ldrb	r3, [r7, #23]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d109      	bne.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008b36:	4b54      	ldr	r3, [pc, #336]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b3a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b42:	4951      	ldr	r1, [pc, #324]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	650b      	str	r3, [r1, #80]	; 0x50
 8008b48:	e001      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b4a:	7dfb      	ldrb	r3, [r7, #23]
 8008b4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d04b      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b64:	d02e      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b6a:	d828      	bhi.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b70:	d02a      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b76:	d822      	bhi.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008b78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b7c:	d026      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008b7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b82:	d81c      	bhi.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b88:	d010      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b8e:	d816      	bhi.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d01d      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008b94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b98:	d111      	bne.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	2101      	movs	r1, #1
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f001 fda1 	bl	800a6e8 <RCCEx_PLL2_Config>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008baa:	e012      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3324      	adds	r3, #36	; 0x24
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f001 fe4a 	bl	800a84c <RCCEx_PLL3_Config>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008bbc:	e009      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8008bc2:	e006      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008bc4:	bf00      	nop
 8008bc6:	e004      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008bc8:	bf00      	nop
 8008bca:	e002      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008bcc:	bf00      	nop
 8008bce:	e000      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10a      	bne.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008bd8:	4b2b      	ldr	r3, [pc, #172]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bdc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008be6:	4928      	ldr	r1, [pc, #160]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	658b      	str	r3, [r1, #88]	; 0x58
 8008bec:	e001      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bee:	7dfb      	ldrb	r3, [r7, #23]
 8008bf0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d02f      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c06:	d00e      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c0c:	d814      	bhi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d015      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c16:	d10f      	bne.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c18:	4b1b      	ldr	r3, [pc, #108]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1c:	4a1a      	ldr	r2, [pc, #104]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c24:	e00c      	b.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	3304      	adds	r3, #4
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f001 fd5b 	bl	800a6e8 <RCCEx_PLL2_Config>
 8008c32:	4603      	mov	r3, r0
 8008c34:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c36:	e003      	b.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c3c:	e000      	b.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008c3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d109      	bne.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c46:	4b10      	ldr	r3, [pc, #64]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c52:	490d      	ldr	r1, [pc, #52]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c54:	4313      	orrs	r3, r2
 8008c56:	650b      	str	r3, [r1, #80]	; 0x50
 8008c58:	e001      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
 8008c5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d033      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d81c      	bhi.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008c72:	a201      	add	r2, pc, #4	; (adr r2, 8008c78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c78:	08008cb3 	.word	0x08008cb3
 8008c7c:	08008c8d 	.word	0x08008c8d
 8008c80:	08008c9b 	.word	0x08008c9b
 8008c84:	08008cb3 	.word	0x08008cb3
 8008c88:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c8c:	4bb8      	ldr	r3, [pc, #736]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c90:	4ab7      	ldr	r2, [pc, #732]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008c98:	e00c      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	2102      	movs	r1, #2
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f001 fd21 	bl	800a6e8 <RCCEx_PLL2_Config>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008caa:	e003      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	75fb      	strb	r3, [r7, #23]
      break;
 8008cb0:	e000      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d109      	bne.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008cba:	4bad      	ldr	r3, [pc, #692]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cbe:	f023 0203 	bic.w	r2, r3, #3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc6:	49aa      	ldr	r1, [pc, #680]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008ccc:	e001      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
 8008cd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 8086 	beq.w	8008dec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ce0:	4ba4      	ldr	r3, [pc, #656]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4aa3      	ldr	r2, [pc, #652]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008cec:	f7f9 ffb8 	bl	8002c60 <HAL_GetTick>
 8008cf0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cf2:	e009      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cf4:	f7f9 ffb4 	bl	8002c60 <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	2b64      	cmp	r3, #100	; 0x64
 8008d00:	d902      	bls.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	75fb      	strb	r3, [r7, #23]
        break;
 8008d06:	e005      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d08:	4b9a      	ldr	r3, [pc, #616]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0ef      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008d14:	7dfb      	ldrb	r3, [r7, #23]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d166      	bne.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d1a:	4b95      	ldr	r3, [pc, #596]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d24:	4053      	eors	r3, r2
 8008d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d013      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d2e:	4b90      	ldr	r3, [pc, #576]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d36:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d38:	4b8d      	ldr	r3, [pc, #564]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3c:	4a8c      	ldr	r2, [pc, #560]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d42:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d44:	4b8a      	ldr	r3, [pc, #552]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d48:	4a89      	ldr	r2, [pc, #548]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d4e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008d50:	4a87      	ldr	r2, [pc, #540]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d60:	d115      	bne.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d62:	f7f9 ff7d 	bl	8002c60 <HAL_GetTick>
 8008d66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d68:	e00b      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d6a:	f7f9 ff79 	bl	8002c60 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d902      	bls.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	75fb      	strb	r3, [r7, #23]
            break;
 8008d80:	e005      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d82:	4b7b      	ldr	r3, [pc, #492]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d0ed      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d126      	bne.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008da2:	d10d      	bne.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008da4:	4b72      	ldr	r3, [pc, #456]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008db2:	0919      	lsrs	r1, r3, #4
 8008db4:	4b70      	ldr	r3, [pc, #448]	; (8008f78 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008db6:	400b      	ands	r3, r1
 8008db8:	496d      	ldr	r1, [pc, #436]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	610b      	str	r3, [r1, #16]
 8008dbe:	e005      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008dc0:	4b6b      	ldr	r3, [pc, #428]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	4a6a      	ldr	r2, [pc, #424]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008dc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008dca:	6113      	str	r3, [r2, #16]
 8008dcc:	4b68      	ldr	r3, [pc, #416]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008dce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008dda:	4965      	ldr	r1, [pc, #404]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	670b      	str	r3, [r1, #112]	; 0x70
 8008de0:	e004      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008de2:	7dfb      	ldrb	r3, [r7, #23]
 8008de4:	75bb      	strb	r3, [r7, #22]
 8008de6:	e001      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de8:	7dfb      	ldrb	r3, [r7, #23]
 8008dea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d07e      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dfc:	2b28      	cmp	r3, #40	; 0x28
 8008dfe:	d867      	bhi.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008e00:	a201      	add	r2, pc, #4	; (adr r2, 8008e08 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e06:	bf00      	nop
 8008e08:	08008ed7 	.word	0x08008ed7
 8008e0c:	08008ed1 	.word	0x08008ed1
 8008e10:	08008ed1 	.word	0x08008ed1
 8008e14:	08008ed1 	.word	0x08008ed1
 8008e18:	08008ed1 	.word	0x08008ed1
 8008e1c:	08008ed1 	.word	0x08008ed1
 8008e20:	08008ed1 	.word	0x08008ed1
 8008e24:	08008ed1 	.word	0x08008ed1
 8008e28:	08008ead 	.word	0x08008ead
 8008e2c:	08008ed1 	.word	0x08008ed1
 8008e30:	08008ed1 	.word	0x08008ed1
 8008e34:	08008ed1 	.word	0x08008ed1
 8008e38:	08008ed1 	.word	0x08008ed1
 8008e3c:	08008ed1 	.word	0x08008ed1
 8008e40:	08008ed1 	.word	0x08008ed1
 8008e44:	08008ed1 	.word	0x08008ed1
 8008e48:	08008ebf 	.word	0x08008ebf
 8008e4c:	08008ed1 	.word	0x08008ed1
 8008e50:	08008ed1 	.word	0x08008ed1
 8008e54:	08008ed1 	.word	0x08008ed1
 8008e58:	08008ed1 	.word	0x08008ed1
 8008e5c:	08008ed1 	.word	0x08008ed1
 8008e60:	08008ed1 	.word	0x08008ed1
 8008e64:	08008ed1 	.word	0x08008ed1
 8008e68:	08008ed7 	.word	0x08008ed7
 8008e6c:	08008ed1 	.word	0x08008ed1
 8008e70:	08008ed1 	.word	0x08008ed1
 8008e74:	08008ed1 	.word	0x08008ed1
 8008e78:	08008ed1 	.word	0x08008ed1
 8008e7c:	08008ed1 	.word	0x08008ed1
 8008e80:	08008ed1 	.word	0x08008ed1
 8008e84:	08008ed1 	.word	0x08008ed1
 8008e88:	08008ed7 	.word	0x08008ed7
 8008e8c:	08008ed1 	.word	0x08008ed1
 8008e90:	08008ed1 	.word	0x08008ed1
 8008e94:	08008ed1 	.word	0x08008ed1
 8008e98:	08008ed1 	.word	0x08008ed1
 8008e9c:	08008ed1 	.word	0x08008ed1
 8008ea0:	08008ed1 	.word	0x08008ed1
 8008ea4:	08008ed1 	.word	0x08008ed1
 8008ea8:	08008ed7 	.word	0x08008ed7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	3304      	adds	r3, #4
 8008eb0:	2101      	movs	r1, #1
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f001 fc18 	bl	800a6e8 <RCCEx_PLL2_Config>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008ebc:	e00c      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	3324      	adds	r3, #36	; 0x24
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f001 fcc1 	bl	800a84c <RCCEx_PLL3_Config>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008ece:	e003      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ed4:	e000      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d109      	bne.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008ede:	4b24      	ldr	r3, [pc, #144]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eea:	4921      	ldr	r1, [pc, #132]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	654b      	str	r3, [r1, #84]	; 0x54
 8008ef0:	e001      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef2:	7dfb      	ldrb	r3, [r7, #23]
 8008ef4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0302 	and.w	r3, r3, #2
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d03e      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f06:	2b05      	cmp	r3, #5
 8008f08:	d820      	bhi.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008f0a:	a201      	add	r2, pc, #4	; (adr r2, 8008f10 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f10:	08008f53 	.word	0x08008f53
 8008f14:	08008f29 	.word	0x08008f29
 8008f18:	08008f3b 	.word	0x08008f3b
 8008f1c:	08008f53 	.word	0x08008f53
 8008f20:	08008f53 	.word	0x08008f53
 8008f24:	08008f53 	.word	0x08008f53
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f001 fbda 	bl	800a6e8 <RCCEx_PLL2_Config>
 8008f34:	4603      	mov	r3, r0
 8008f36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008f38:	e00c      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3324      	adds	r3, #36	; 0x24
 8008f3e:	2101      	movs	r1, #1
 8008f40:	4618      	mov	r0, r3
 8008f42:	f001 fc83 	bl	800a84c <RCCEx_PLL3_Config>
 8008f46:	4603      	mov	r3, r0
 8008f48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008f4a:	e003      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f50:	e000      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f54:	7dfb      	ldrb	r3, [r7, #23]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d110      	bne.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008f5a:	4b05      	ldr	r3, [pc, #20]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f5e:	f023 0207 	bic.w	r2, r3, #7
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f66:	4902      	ldr	r1, [pc, #8]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	654b      	str	r3, [r1, #84]	; 0x54
 8008f6c:	e008      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008f6e:	bf00      	nop
 8008f70:	58024400 	.word	0x58024400
 8008f74:	58024800 	.word	0x58024800
 8008f78:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f7c:	7dfb      	ldrb	r3, [r7, #23]
 8008f7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0304 	and.w	r3, r3, #4
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d039      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f92:	2b05      	cmp	r3, #5
 8008f94:	d820      	bhi.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008f96:	a201      	add	r2, pc, #4	; (adr r2, 8008f9c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9c:	08008fdf 	.word	0x08008fdf
 8008fa0:	08008fb5 	.word	0x08008fb5
 8008fa4:	08008fc7 	.word	0x08008fc7
 8008fa8:	08008fdf 	.word	0x08008fdf
 8008fac:	08008fdf 	.word	0x08008fdf
 8008fb0:	08008fdf 	.word	0x08008fdf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	2101      	movs	r1, #1
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f001 fb94 	bl	800a6e8 <RCCEx_PLL2_Config>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008fc4:	e00c      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	3324      	adds	r3, #36	; 0x24
 8008fca:	2101      	movs	r1, #1
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f001 fc3d 	bl	800a84c <RCCEx_PLL3_Config>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008fd6:	e003      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	75fb      	strb	r3, [r7, #23]
      break;
 8008fdc:	e000      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fe0:	7dfb      	ldrb	r3, [r7, #23]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10a      	bne.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008fe6:	4bb7      	ldr	r3, [pc, #732]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fea:	f023 0207 	bic.w	r2, r3, #7
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff4:	49b3      	ldr	r1, [pc, #716]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	658b      	str	r3, [r1, #88]	; 0x58
 8008ffa:	e001      	b.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ffc:	7dfb      	ldrb	r3, [r7, #23]
 8008ffe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0320 	and.w	r3, r3, #32
 8009008:	2b00      	cmp	r3, #0
 800900a:	d04b      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009016:	d02e      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800901c:	d828      	bhi.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800901e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009022:	d02a      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009028:	d822      	bhi.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800902a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800902e:	d026      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009030:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009034:	d81c      	bhi.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800903a:	d010      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800903c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009040:	d816      	bhi.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009042:	2b00      	cmp	r3, #0
 8009044:	d01d      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800904a:	d111      	bne.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	3304      	adds	r3, #4
 8009050:	2100      	movs	r1, #0
 8009052:	4618      	mov	r0, r3
 8009054:	f001 fb48 	bl	800a6e8 <RCCEx_PLL2_Config>
 8009058:	4603      	mov	r3, r0
 800905a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800905c:	e012      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	3324      	adds	r3, #36	; 0x24
 8009062:	2102      	movs	r1, #2
 8009064:	4618      	mov	r0, r3
 8009066:	f001 fbf1 	bl	800a84c <RCCEx_PLL3_Config>
 800906a:	4603      	mov	r3, r0
 800906c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800906e:	e009      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	75fb      	strb	r3, [r7, #23]
      break;
 8009074:	e006      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009076:	bf00      	nop
 8009078:	e004      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800907a:	bf00      	nop
 800907c:	e002      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800907e:	bf00      	nop
 8009080:	e000      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009084:	7dfb      	ldrb	r3, [r7, #23]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10a      	bne.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800908a:	4b8e      	ldr	r3, [pc, #568]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800908c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800908e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009098:	498a      	ldr	r1, [pc, #552]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800909a:	4313      	orrs	r3, r2
 800909c:	654b      	str	r3, [r1, #84]	; 0x54
 800909e:	e001      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
 80090a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d04b      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80090ba:	d02e      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80090bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80090c0:	d828      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80090c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090c6:	d02a      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80090c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090cc:	d822      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80090ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090d2:	d026      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80090d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090d8:	d81c      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80090da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090de:	d010      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80090e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090e4:	d816      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d01d      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80090ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090ee:	d111      	bne.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3304      	adds	r3, #4
 80090f4:	2100      	movs	r1, #0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f001 faf6 	bl	800a6e8 <RCCEx_PLL2_Config>
 80090fc:	4603      	mov	r3, r0
 80090fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009100:	e012      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	3324      	adds	r3, #36	; 0x24
 8009106:	2102      	movs	r1, #2
 8009108:	4618      	mov	r0, r3
 800910a:	f001 fb9f 	bl	800a84c <RCCEx_PLL3_Config>
 800910e:	4603      	mov	r3, r0
 8009110:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009112:	e009      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	75fb      	strb	r3, [r7, #23]
      break;
 8009118:	e006      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800911a:	bf00      	nop
 800911c:	e004      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800911e:	bf00      	nop
 8009120:	e002      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009122:	bf00      	nop
 8009124:	e000      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10a      	bne.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800912e:	4b65      	ldr	r3, [pc, #404]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009132:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800913c:	4961      	ldr	r1, [pc, #388]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800913e:	4313      	orrs	r3, r2
 8009140:	658b      	str	r3, [r1, #88]	; 0x58
 8009142:	e001      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009144:	7dfb      	ldrb	r3, [r7, #23]
 8009146:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009150:	2b00      	cmp	r3, #0
 8009152:	d04b      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800915a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800915e:	d02e      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8009160:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009164:	d828      	bhi.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800916a:	d02a      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800916c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009170:	d822      	bhi.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009172:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009176:	d026      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009178:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800917c:	d81c      	bhi.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800917e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009182:	d010      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8009184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009188:	d816      	bhi.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800918a:	2b00      	cmp	r3, #0
 800918c:	d01d      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800918e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009192:	d111      	bne.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3304      	adds	r3, #4
 8009198:	2100      	movs	r1, #0
 800919a:	4618      	mov	r0, r3
 800919c:	f001 faa4 	bl	800a6e8 <RCCEx_PLL2_Config>
 80091a0:	4603      	mov	r3, r0
 80091a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80091a4:	e012      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	3324      	adds	r3, #36	; 0x24
 80091aa:	2102      	movs	r1, #2
 80091ac:	4618      	mov	r0, r3
 80091ae:	f001 fb4d 	bl	800a84c <RCCEx_PLL3_Config>
 80091b2:	4603      	mov	r3, r0
 80091b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80091b6:	e009      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	75fb      	strb	r3, [r7, #23]
      break;
 80091bc:	e006      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80091be:	bf00      	nop
 80091c0:	e004      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80091c2:	bf00      	nop
 80091c4:	e002      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80091c6:	bf00      	nop
 80091c8:	e000      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80091ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d10a      	bne.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80091d2:	4b3c      	ldr	r3, [pc, #240]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80091d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091e0:	4938      	ldr	r1, [pc, #224]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	658b      	str	r3, [r1, #88]	; 0x58
 80091e6:	e001      	b.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
 80091ea:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 0308 	and.w	r3, r3, #8
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d01a      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009202:	d10a      	bne.n	800921a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	3324      	adds	r3, #36	; 0x24
 8009208:	2102      	movs	r1, #2
 800920a:	4618      	mov	r0, r3
 800920c:	f001 fb1e 	bl	800a84c <RCCEx_PLL3_Config>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800921a:	4b2a      	ldr	r3, [pc, #168]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800921c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800921e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009228:	4926      	ldr	r1, [pc, #152]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800922a:	4313      	orrs	r3, r2
 800922c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0310 	and.w	r3, r3, #16
 8009236:	2b00      	cmp	r3, #0
 8009238:	d01a      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009244:	d10a      	bne.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	3324      	adds	r3, #36	; 0x24
 800924a:	2102      	movs	r1, #2
 800924c:	4618      	mov	r0, r3
 800924e:	f001 fafd 	bl	800a84c <RCCEx_PLL3_Config>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800925c:	4b19      	ldr	r3, [pc, #100]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800925e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800926a:	4916      	ldr	r1, [pc, #88]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800926c:	4313      	orrs	r3, r2
 800926e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d036      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009282:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009286:	d01f      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800928c:	d817      	bhi.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009296:	d009      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009298:	e011      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	3304      	adds	r3, #4
 800929e:	2100      	movs	r1, #0
 80092a0:	4618      	mov	r0, r3
 80092a2:	f001 fa21 	bl	800a6e8 <RCCEx_PLL2_Config>
 80092a6:	4603      	mov	r3, r0
 80092a8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80092aa:	e00e      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3324      	adds	r3, #36	; 0x24
 80092b0:	2102      	movs	r1, #2
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 faca 	bl	800a84c <RCCEx_PLL3_Config>
 80092b8:	4603      	mov	r3, r0
 80092ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80092bc:	e005      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	75fb      	strb	r3, [r7, #23]
      break;
 80092c2:	e002      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80092c4:	58024400 	.word	0x58024400
      break;
 80092c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10a      	bne.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092d0:	4b93      	ldr	r3, [pc, #588]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80092d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092de:	4990      	ldr	r1, [pc, #576]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80092e0:	4313      	orrs	r3, r2
 80092e2:	658b      	str	r3, [r1, #88]	; 0x58
 80092e4:	e001      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e6:	7dfb      	ldrb	r3, [r7, #23]
 80092e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d033      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009300:	d01c      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009302:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009306:	d816      	bhi.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800930c:	d003      	beq.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800930e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009312:	d007      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009314:	e00f      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009316:	4b82      	ldr	r3, [pc, #520]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931a:	4a81      	ldr	r2, [pc, #516]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800931c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009320:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009322:	e00c      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	3324      	adds	r3, #36	; 0x24
 8009328:	2101      	movs	r1, #1
 800932a:	4618      	mov	r0, r3
 800932c:	f001 fa8e 	bl	800a84c <RCCEx_PLL3_Config>
 8009330:	4603      	mov	r3, r0
 8009332:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009334:	e003      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	75fb      	strb	r3, [r7, #23]
      break;
 800933a:	e000      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800933c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800933e:	7dfb      	ldrb	r3, [r7, #23]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10a      	bne.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009344:	4b76      	ldr	r3, [pc, #472]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009352:	4973      	ldr	r1, [pc, #460]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009354:	4313      	orrs	r3, r2
 8009356:	654b      	str	r3, [r1, #84]	; 0x54
 8009358:	e001      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800935a:	7dfb      	ldrb	r3, [r7, #23]
 800935c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d029      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8009372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009376:	d007      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8009378:	e00f      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800937a:	4b69      	ldr	r3, [pc, #420]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800937c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937e:	4a68      	ldr	r2, [pc, #416]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009384:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009386:	e00b      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	3304      	adds	r3, #4
 800938c:	2102      	movs	r1, #2
 800938e:	4618      	mov	r0, r3
 8009390:	f001 f9aa 	bl	800a6e8 <RCCEx_PLL2_Config>
 8009394:	4603      	mov	r3, r0
 8009396:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009398:	e002      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	75fb      	strb	r3, [r7, #23]
      break;
 800939e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80093a6:	4b5e      	ldr	r3, [pc, #376]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80093a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093b2:	495b      	ldr	r1, [pc, #364]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80093b4:	4313      	orrs	r3, r2
 80093b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80093b8:	e001      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ba:	7dfb      	ldrb	r3, [r7, #23]
 80093bc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00a      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	3324      	adds	r3, #36	; 0x24
 80093ce:	2102      	movs	r1, #2
 80093d0:	4618      	mov	r0, r3
 80093d2:	f001 fa3b 	bl	800a84c <RCCEx_PLL3_Config>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d030      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093f4:	d017      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80093f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093fa:	d811      	bhi.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80093fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009400:	d013      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009406:	d80b      	bhi.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009408:	2b00      	cmp	r3, #0
 800940a:	d010      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800940c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009410:	d106      	bne.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009412:	4b43      	ldr	r3, [pc, #268]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009416:	4a42      	ldr	r2, [pc, #264]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800941c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800941e:	e007      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	75fb      	strb	r3, [r7, #23]
      break;
 8009424:	e004      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009426:	bf00      	nop
 8009428:	e002      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800942a:	bf00      	nop
 800942c:	e000      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800942e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009430:	7dfb      	ldrb	r3, [r7, #23]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d109      	bne.n	800944a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009436:	4b3a      	ldr	r3, [pc, #232]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009442:	4937      	ldr	r1, [pc, #220]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009444:	4313      	orrs	r3, r2
 8009446:	654b      	str	r3, [r1, #84]	; 0x54
 8009448:	e001      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800944a:	7dfb      	ldrb	r3, [r7, #23]
 800944c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d008      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800945a:	4b31      	ldr	r3, [pc, #196]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800945c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800945e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009466:	492e      	ldr	r1, [pc, #184]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009468:	4313      	orrs	r3, r2
 800946a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d009      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009478:	4b29      	ldr	r3, [pc, #164]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009486:	4926      	ldr	r1, [pc, #152]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009488:	4313      	orrs	r3, r2
 800948a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d008      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009498:	4b21      	ldr	r3, [pc, #132]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800949a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800949c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094a4:	491e      	ldr	r1, [pc, #120]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00d      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80094b6:	4b1a      	ldr	r3, [pc, #104]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	4a19      	ldr	r2, [pc, #100]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094c0:	6113      	str	r3, [r2, #16]
 80094c2:	4b17      	ldr	r3, [pc, #92]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094c4:	691a      	ldr	r2, [r3, #16]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80094cc:	4914      	ldr	r1, [pc, #80]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094ce:	4313      	orrs	r3, r2
 80094d0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	da08      	bge.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80094da:	4b11      	ldr	r3, [pc, #68]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094e6:	490e      	ldr	r1, [pc, #56]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094e8:	4313      	orrs	r3, r2
 80094ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d009      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80094f8:	4b09      	ldr	r3, [pc, #36]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009506:	4906      	ldr	r1, [pc, #24]	; (8009520 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009508:	4313      	orrs	r3, r2
 800950a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800950c:	7dbb      	ldrb	r3, [r7, #22]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	e000      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
}
 8009518:	4618      	mov	r0, r3
 800951a:	3718      	adds	r7, #24
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	58024400 	.word	0x58024400

08009524 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b090      	sub	sp, #64	; 0x40
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009532:	f040 8095 	bne.w	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009536:	4bae      	ldr	r3, [pc, #696]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800953a:	f003 0307 	and.w	r3, r3, #7
 800953e:	633b      	str	r3, [r7, #48]	; 0x30
 8009540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009542:	2b04      	cmp	r3, #4
 8009544:	f200 8088 	bhi.w	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009548:	a201      	add	r2, pc, #4	; (adr r2, 8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800954a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954e:	bf00      	nop
 8009550:	08009565 	.word	0x08009565
 8009554:	0800958d 	.word	0x0800958d
 8009558:	080095b5 	.word	0x080095b5
 800955c:	08009651 	.word	0x08009651
 8009560:	080095dd 	.word	0x080095dd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009564:	4ba2      	ldr	r3, [pc, #648]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800956c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009570:	d108      	bne.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009576:	4618      	mov	r0, r3
 8009578:	f000 ff64 	bl	800a444 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009580:	f000 bc95 	b.w	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009588:	f000 bc91 	b.w	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800958c:	4b98      	ldr	r3, [pc, #608]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009594:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009598:	d108      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800959a:	f107 0318 	add.w	r3, r7, #24
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 fca8 	bl	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095a8:	f000 bc81 	b.w	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095b0:	f000 bc7d 	b.w	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095b4:	4b8e      	ldr	r3, [pc, #568]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095c0:	d108      	bne.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095c2:	f107 030c 	add.w	r3, r7, #12
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 fde8 	bl	800a19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095d0:	f000 bc6d 	b.w	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095d8:	f000 bc69 	b.w	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80095dc:	4b84      	ldr	r3, [pc, #528]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80095de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095e4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095e6:	4b82      	ldr	r3, [pc, #520]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0304 	and.w	r3, r3, #4
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d10c      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80095f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d109      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095f8:	4b7d      	ldr	r3, [pc, #500]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	08db      	lsrs	r3, r3, #3
 80095fe:	f003 0303 	and.w	r3, r3, #3
 8009602:	4a7c      	ldr	r2, [pc, #496]	; (80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009604:	fa22 f303 	lsr.w	r3, r2, r3
 8009608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800960a:	e01f      	b.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800960c:	4b78      	ldr	r3, [pc, #480]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009618:	d106      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800961a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009620:	d102      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009622:	4b75      	ldr	r3, [pc, #468]	; (80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009626:	e011      	b.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009628:	4b71      	ldr	r3, [pc, #452]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009634:	d106      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8009636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800963c:	d102      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800963e:	4b6f      	ldr	r3, [pc, #444]	; (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009642:	e003      	b.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009644:	2300      	movs	r3, #0
 8009646:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009648:	f000 bc31 	b.w	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800964c:	f000 bc2f 	b.w	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009650:	4b6b      	ldr	r3, [pc, #428]	; (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009654:	f000 bc2b 	b.w	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009658:	2300      	movs	r3, #0
 800965a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800965c:	f000 bc27 	b.w	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009666:	f040 8095 	bne.w	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800966a:	4b61      	ldr	r3, [pc, #388]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800966c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800966e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009672:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800967a:	d04d      	beq.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800967c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009682:	f200 8084 	bhi.w	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	2bc0      	cmp	r3, #192	; 0xc0
 800968a:	d07d      	beq.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	2bc0      	cmp	r3, #192	; 0xc0
 8009690:	d87d      	bhi.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009694:	2b80      	cmp	r3, #128	; 0x80
 8009696:	d02d      	beq.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969a:	2b80      	cmp	r3, #128	; 0x80
 800969c:	d877      	bhi.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d003      	beq.n	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	2b40      	cmp	r3, #64	; 0x40
 80096a8:	d012      	beq.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80096aa:	e070      	b.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096ac:	4b50      	ldr	r3, [pc, #320]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096b8:	d107      	bne.n	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 fec0 	bl	800a444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096c8:	e3f1      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80096ca:	2300      	movs	r3, #0
 80096cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096ce:	e3ee      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096d0:	4b47      	ldr	r3, [pc, #284]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096dc:	d107      	bne.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096de:	f107 0318 	add.w	r3, r7, #24
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 fc06 	bl	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096ec:	e3df      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096f2:	e3dc      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096f4:	4b3e      	ldr	r3, [pc, #248]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009700:	d107      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009702:	f107 030c 	add.w	r3, r7, #12
 8009706:	4618      	mov	r0, r3
 8009708:	f000 fd48 	bl	800a19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009710:	e3cd      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009716:	e3ca      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009718:	4b35      	ldr	r3, [pc, #212]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800971a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800971c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009720:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009722:	4b33      	ldr	r3, [pc, #204]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0304 	and.w	r3, r3, #4
 800972a:	2b04      	cmp	r3, #4
 800972c:	d10c      	bne.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800972e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009730:	2b00      	cmp	r3, #0
 8009732:	d109      	bne.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009734:	4b2e      	ldr	r3, [pc, #184]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	08db      	lsrs	r3, r3, #3
 800973a:	f003 0303 	and.w	r3, r3, #3
 800973e:	4a2d      	ldr	r2, [pc, #180]	; (80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009740:	fa22 f303 	lsr.w	r3, r2, r3
 8009744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009746:	e01e      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009748:	4b29      	ldr	r3, [pc, #164]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009754:	d106      	bne.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8009756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009758:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800975c:	d102      	bne.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800975e:	4b26      	ldr	r3, [pc, #152]	; (80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009762:	e010      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009764:	4b22      	ldr	r3, [pc, #136]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800976c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009770:	d106      	bne.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8009772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009778:	d102      	bne.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800977a:	4b20      	ldr	r3, [pc, #128]	; (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800977c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800977e:	e002      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009784:	e393      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009786:	e392      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009788:	4b1d      	ldr	r3, [pc, #116]	; (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800978a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800978c:	e38f      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800978e:	2300      	movs	r3, #0
 8009790:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009792:	e38c      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800979a:	f040 80a7 	bne.w	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800979e:	4b14      	ldr	r3, [pc, #80]	; (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80097a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80097a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80097a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097ae:	d05f      	beq.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80097b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097b6:	f200 8096 	bhi.w	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80097ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80097c0:	f000 808e 	beq.w	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80097ca:	f200 808c 	bhi.w	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097d4:	d03a      	beq.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097dc:	f200 8083 	bhi.w	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80097e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00e      	beq.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80097e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097ec:	d01c      	beq.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80097ee:	e07a      	b.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80097f0:	58024400 	.word	0x58024400
 80097f4:	03d09000 	.word	0x03d09000
 80097f8:	003d0900 	.word	0x003d0900
 80097fc:	017d7840 	.word	0x017d7840
 8009800:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009804:	4baa      	ldr	r3, [pc, #680]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800980c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009810:	d107      	bne.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009816:	4618      	mov	r0, r3
 8009818:	f000 fe14 	bl	800a444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009820:	e345      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009826:	e342      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009828:	4ba1      	ldr	r3, [pc, #644]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009834:	d107      	bne.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009836:	f107 0318 	add.w	r3, r7, #24
 800983a:	4618      	mov	r0, r3
 800983c:	f000 fb5a 	bl	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009844:	e333      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800984a:	e330      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800984c:	4b98      	ldr	r3, [pc, #608]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009858:	d107      	bne.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800985a:	f107 030c 	add.w	r3, r7, #12
 800985e:	4618      	mov	r0, r3
 8009860:	f000 fc9c 	bl	800a19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009868:	e321      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800986e:	e31e      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009870:	4b8f      	ldr	r3, [pc, #572]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009874:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009878:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800987a:	4b8d      	ldr	r3, [pc, #564]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 0304 	and.w	r3, r3, #4
 8009882:	2b04      	cmp	r3, #4
 8009884:	d10c      	bne.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8009886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009888:	2b00      	cmp	r3, #0
 800988a:	d109      	bne.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800988c:	4b88      	ldr	r3, [pc, #544]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	08db      	lsrs	r3, r3, #3
 8009892:	f003 0303 	and.w	r3, r3, #3
 8009896:	4a87      	ldr	r2, [pc, #540]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009898:	fa22 f303 	lsr.w	r3, r2, r3
 800989c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800989e:	e01e      	b.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098a0:	4b83      	ldr	r3, [pc, #524]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098ac:	d106      	bne.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80098ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098b4:	d102      	bne.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80098b6:	4b80      	ldr	r3, [pc, #512]	; (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80098b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098ba:	e010      	b.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098bc:	4b7c      	ldr	r3, [pc, #496]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098c8:	d106      	bne.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80098ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098d0:	d102      	bne.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80098d2:	4b7a      	ldr	r3, [pc, #488]	; (8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80098d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098d6:	e002      	b.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80098dc:	e2e7      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80098de:	e2e6      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80098e0:	4b77      	ldr	r3, [pc, #476]	; (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80098e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098e4:	e2e3      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098ea:	e2e0      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098f2:	f040 809c 	bne.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80098f6:	4b6e      	ldr	r3, [pc, #440]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80098f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098fa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80098fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009902:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009906:	d054      	beq.n	80099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800990e:	f200 808b 	bhi.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009914:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009918:	f000 8083 	beq.w	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800991c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009922:	f200 8081 	bhi.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009928:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800992c:	d02f      	beq.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800992e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009930:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009934:	d878      	bhi.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	2b00      	cmp	r3, #0
 800993a:	d004      	beq.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009942:	d012      	beq.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8009944:	e070      	b.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009946:	4b5a      	ldr	r3, [pc, #360]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800994e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009952:	d107      	bne.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009958:	4618      	mov	r0, r3
 800995a:	f000 fd73 	bl	800a444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009960:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009962:	e2a4      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009964:	2300      	movs	r3, #0
 8009966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009968:	e2a1      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800996a:	4b51      	ldr	r3, [pc, #324]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009976:	d107      	bne.n	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009978:	f107 0318 	add.w	r3, r7, #24
 800997c:	4618      	mov	r0, r3
 800997e:	f000 fab9 	bl	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009986:	e292      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009988:	2300      	movs	r3, #0
 800998a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800998c:	e28f      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800998e:	4b48      	ldr	r3, [pc, #288]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800999a:	d107      	bne.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800999c:	f107 030c 	add.w	r3, r7, #12
 80099a0:	4618      	mov	r0, r3
 80099a2:	f000 fbfb 	bl	800a19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80099aa:	e280      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099b0:	e27d      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80099b2:	4b3f      	ldr	r3, [pc, #252]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80099b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099ba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099bc:	4b3c      	ldr	r3, [pc, #240]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b04      	cmp	r3, #4
 80099c6:	d10c      	bne.n	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80099c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d109      	bne.n	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099ce:	4b38      	ldr	r3, [pc, #224]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	08db      	lsrs	r3, r3, #3
 80099d4:	f003 0303 	and.w	r3, r3, #3
 80099d8:	4a36      	ldr	r2, [pc, #216]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80099da:	fa22 f303 	lsr.w	r3, r2, r3
 80099de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099e0:	e01e      	b.n	8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099e2:	4b33      	ldr	r3, [pc, #204]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099ee:	d106      	bne.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80099f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099f6:	d102      	bne.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80099f8:	4b2f      	ldr	r3, [pc, #188]	; (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80099fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099fc:	e010      	b.n	8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099fe:	4b2c      	ldr	r3, [pc, #176]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a0a:	d106      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a12:	d102      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009a14:	4b29      	ldr	r3, [pc, #164]	; (8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a18:	e002      	b.n	8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009a1e:	e246      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009a20:	e245      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009a22:	4b27      	ldr	r3, [pc, #156]	; (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009a24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a26:	e242      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a2c:	e23f      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a34:	f040 80a8 	bne.w	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009a38:	4b1d      	ldr	r3, [pc, #116]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a3c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009a40:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a48:	d060      	beq.n	8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a50:	f200 8097 	bhi.w	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a5a:	f000 808f 	beq.w	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a64:	f200 808d 	bhi.w	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a6e:	d03b      	beq.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8009a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a76:	f200 8084 	bhi.w	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d004      	beq.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8009a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a86:	d01d      	beq.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8009a88:	e07b      	b.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a8a:	4b09      	ldr	r3, [pc, #36]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a96:	d107      	bne.n	8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 fcd1 	bl	800a444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009aa6:	e202      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009aac:	e1ff      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009aae:	bf00      	nop
 8009ab0:	58024400 	.word	0x58024400
 8009ab4:	03d09000 	.word	0x03d09000
 8009ab8:	003d0900 	.word	0x003d0900
 8009abc:	017d7840 	.word	0x017d7840
 8009ac0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ac4:	4ba3      	ldr	r3, [pc, #652]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009acc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ad0:	d107      	bne.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ad2:	f107 0318 	add.w	r3, r7, #24
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 fa0c 	bl	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ae0:	e1e5      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ae6:	e1e2      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ae8:	4b9a      	ldr	r3, [pc, #616]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009af4:	d107      	bne.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009af6:	f107 030c 	add.w	r3, r7, #12
 8009afa:	4618      	mov	r0, r3
 8009afc:	f000 fb4e 	bl	800a19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b04:	e1d3      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b0a:	e1d0      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009b0c:	4b91      	ldr	r3, [pc, #580]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b14:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b16:	4b8f      	ldr	r3, [pc, #572]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 0304 	and.w	r3, r3, #4
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d10c      	bne.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8009b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d109      	bne.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b28:	4b8a      	ldr	r3, [pc, #552]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	08db      	lsrs	r3, r3, #3
 8009b2e:	f003 0303 	and.w	r3, r3, #3
 8009b32:	4a89      	ldr	r2, [pc, #548]	; (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009b34:	fa22 f303 	lsr.w	r3, r2, r3
 8009b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b3a:	e01e      	b.n	8009b7a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b3c:	4b85      	ldr	r3, [pc, #532]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b48:	d106      	bne.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8009b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b50:	d102      	bne.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009b52:	4b82      	ldr	r3, [pc, #520]	; (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b56:	e010      	b.n	8009b7a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b58:	4b7e      	ldr	r3, [pc, #504]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b64:	d106      	bne.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b6c:	d102      	bne.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009b6e:	4b7c      	ldr	r3, [pc, #496]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009b70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b72:	e002      	b.n	8009b7a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009b74:	2300      	movs	r3, #0
 8009b76:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009b78:	e199      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009b7a:	e198      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009b7c:	4b79      	ldr	r3, [pc, #484]	; (8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b80:	e195      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b86:	e192      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009b8e:	d173      	bne.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009b90:	4b70      	ldr	r3, [pc, #448]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009b98:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ba0:	d02f      	beq.n	8009c02 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8009ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ba8:	d863      	bhi.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d004      	beq.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bb6:	d012      	beq.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8009bb8:	e05b      	b.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bba:	4b66      	ldr	r3, [pc, #408]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bc6:	d107      	bne.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bc8:	f107 0318 	add.w	r3, r7, #24
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 f991 	bl	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009bd6:	e16a      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bdc:	e167      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bde:	4b5d      	ldr	r3, [pc, #372]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bea:	d107      	bne.n	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bec:	f107 030c 	add.w	r3, r7, #12
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 fad3 	bl	800a19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009bfa:	e158      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c00:	e155      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c02:	4b54      	ldr	r3, [pc, #336]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c0a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c0c:	4b51      	ldr	r3, [pc, #324]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 0304 	and.w	r3, r3, #4
 8009c14:	2b04      	cmp	r3, #4
 8009c16:	d10c      	bne.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8009c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d109      	bne.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c1e:	4b4d      	ldr	r3, [pc, #308]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	08db      	lsrs	r3, r3, #3
 8009c24:	f003 0303 	and.w	r3, r3, #3
 8009c28:	4a4b      	ldr	r2, [pc, #300]	; (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c30:	e01e      	b.n	8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c32:	4b48      	ldr	r3, [pc, #288]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c3e:	d106      	bne.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8009c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c46:	d102      	bne.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009c48:	4b44      	ldr	r3, [pc, #272]	; (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c4c:	e010      	b.n	8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c4e:	4b41      	ldr	r3, [pc, #260]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c5a:	d106      	bne.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8009c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c62:	d102      	bne.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009c64:	4b3e      	ldr	r3, [pc, #248]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c68:	e002      	b.n	8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009c6e:	e11e      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009c70:	e11d      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c76:	e11a      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c7e:	d133      	bne.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009c80:	4b34      	ldr	r3, [pc, #208]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c88:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d004      	beq.n	8009c9a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8009c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c96:	d012      	beq.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009c98:	e023      	b.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c9a:	4b2e      	ldr	r3, [pc, #184]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ca2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ca6:	d107      	bne.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cac:	4618      	mov	r0, r3
 8009cae:	f000 fbc9 	bl	800a444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009cb6:	e0fa      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cbc:	e0f7      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cbe:	4b25      	ldr	r3, [pc, #148]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cca:	d107      	bne.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ccc:	f107 0318 	add.w	r3, r7, #24
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f000 f90f 	bl	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009cda:	e0e8      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ce0:	e0e5      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ce6:	e0e2      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cee:	f040 808f 	bne.w	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009cf2:	4b18      	ldr	r3, [pc, #96]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cf6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009cfa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d02:	d075      	beq.n	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8009d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d0a:	d87e      	bhi.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d12:	d060      	beq.n	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d1a:	d876      	bhi.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d22:	d045      	beq.n	8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d2a:	d86e      	bhi.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d32:	d02b      	beq.n	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d3a:	d866      	bhi.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d004      	beq.n	8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8009d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d48:	d00e      	beq.n	8009d68 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009d4a:	e05e      	b.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009d4c:	f000 f8bc 	bl	8009ec8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d50:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009d52:	e0ac      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009d54:	58024400 	.word	0x58024400
 8009d58:	03d09000 	.word	0x03d09000
 8009d5c:	003d0900 	.word	0x003d0900
 8009d60:	017d7840 	.word	0x017d7840
 8009d64:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d68:	4b53      	ldr	r3, [pc, #332]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d74:	d107      	bne.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d76:	f107 0318 	add.w	r3, r7, #24
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 f8ba 	bl	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009d84:	e093      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009d86:	2300      	movs	r3, #0
 8009d88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d8a:	e090      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d8c:	4b4a      	ldr	r3, [pc, #296]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d98:	d107      	bne.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d9a:	f107 030c 	add.w	r3, r7, #12
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 f9fc 	bl	800a19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009da8:	e081      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dae:	e07e      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009db0:	4b41      	ldr	r3, [pc, #260]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 0304 	and.w	r3, r3, #4
 8009db8:	2b04      	cmp	r3, #4
 8009dba:	d109      	bne.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009dbc:	4b3e      	ldr	r3, [pc, #248]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	08db      	lsrs	r3, r3, #3
 8009dc2:	f003 0303 	and.w	r3, r3, #3
 8009dc6:	4a3d      	ldr	r2, [pc, #244]	; (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009dce:	e06e      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dd4:	e06b      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009dd6:	4b38      	ldr	r3, [pc, #224]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009de2:	d102      	bne.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8009de4:	4b36      	ldr	r3, [pc, #216]	; (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009de6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009de8:	e061      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009dea:	2300      	movs	r3, #0
 8009dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dee:	e05e      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009df0:	4b31      	ldr	r3, [pc, #196]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dfc:	d102      	bne.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8009dfe:	4b31      	ldr	r3, [pc, #196]	; (8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009e00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009e02:	e054      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e04:	2300      	movs	r3, #0
 8009e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e08:	e051      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e0e:	e04e      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e16:	d148      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009e18:	4b27      	ldr	r3, [pc, #156]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e28:	d02a      	beq.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e30:	d838      	bhi.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d004      	beq.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e3e:	d00d      	beq.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009e40:	e030      	b.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e42:	4b1d      	ldr	r3, [pc, #116]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e4e:	d102      	bne.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8009e50:	4b1c      	ldr	r3, [pc, #112]	; (8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009e52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009e54:	e02b      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e56:	2300      	movs	r3, #0
 8009e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e5a:	e028      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e5c:	4b16      	ldr	r3, [pc, #88]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e68:	d107      	bne.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 fae8 	bl	800a444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009e78:	e019      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e7e:	e016      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e80:	4b0d      	ldr	r3, [pc, #52]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e8c:	d107      	bne.n	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e8e:	f107 0318 	add.w	r3, r7, #24
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 f82e 	bl	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009e9c:	e007      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ea2:	e004      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ea8:	e001      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3740      	adds	r7, #64	; 0x40
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	58024400 	.word	0x58024400
 8009ebc:	03d09000 	.word	0x03d09000
 8009ec0:	003d0900 	.word	0x003d0900
 8009ec4:	017d7840 	.word	0x017d7840

08009ec8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009ecc:	f7fe fb8e 	bl	80085ec <HAL_RCC_GetHCLKFreq>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	4b06      	ldr	r3, [pc, #24]	; (8009eec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	091b      	lsrs	r3, r3, #4
 8009ed8:	f003 0307 	and.w	r3, r3, #7
 8009edc:	4904      	ldr	r1, [pc, #16]	; (8009ef0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009ede:	5ccb      	ldrb	r3, [r1, r3]
 8009ee0:	f003 031f 	and.w	r3, r3, #31
 8009ee4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	58024400 	.word	0x58024400
 8009ef0:	08022784 	.word	0x08022784

08009ef4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b089      	sub	sp, #36	; 0x24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009efc:	4ba1      	ldr	r3, [pc, #644]	; (800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f00:	f003 0303 	and.w	r3, r3, #3
 8009f04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009f06:	4b9f      	ldr	r3, [pc, #636]	; (800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0a:	0b1b      	lsrs	r3, r3, #12
 8009f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009f12:	4b9c      	ldr	r3, [pc, #624]	; (800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f16:	091b      	lsrs	r3, r3, #4
 8009f18:	f003 0301 	and.w	r3, r3, #1
 8009f1c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009f1e:	4b99      	ldr	r3, [pc, #612]	; (800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f22:	08db      	lsrs	r3, r3, #3
 8009f24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	fb02 f303 	mul.w	r3, r2, r3
 8009f2e:	ee07 3a90 	vmov	s15, r3
 8009f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f000 8111 	beq.w	800a164 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	f000 8083 	beq.w	800a050 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	f200 80a1 	bhi.w	800a094 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d003      	beq.n	8009f60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d056      	beq.n	800a00c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009f5e:	e099      	b.n	800a094 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f60:	4b88      	ldr	r3, [pc, #544]	; (800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0320 	and.w	r3, r3, #32
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d02d      	beq.n	8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f6c:	4b85      	ldr	r3, [pc, #532]	; (800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	08db      	lsrs	r3, r3, #3
 8009f72:	f003 0303 	and.w	r3, r3, #3
 8009f76:	4a84      	ldr	r2, [pc, #528]	; (800a188 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009f78:	fa22 f303 	lsr.w	r3, r2, r3
 8009f7c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	ee07 3a90 	vmov	s15, r3
 8009f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	ee07 3a90 	vmov	s15, r3
 8009f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f96:	4b7b      	ldr	r3, [pc, #492]	; (800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f9e:	ee07 3a90 	vmov	s15, r3
 8009fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009faa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a18c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fc2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009fc6:	e087      	b.n	800a0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a190 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fda:	4b6a      	ldr	r3, [pc, #424]	; (800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fe2:	ee07 3a90 	vmov	s15, r3
 8009fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a18c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a002:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a006:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a00a:	e065      	b.n	800a0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	ee07 3a90 	vmov	s15, r3
 800a012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a016:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a194 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a01a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a01e:	4b59      	ldr	r3, [pc, #356]	; (800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a026:	ee07 3a90 	vmov	s15, r3
 800a02a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a02e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a032:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a18c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a03a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a03e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a04a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a04e:	e043      	b.n	800a0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	ee07 3a90 	vmov	s15, r3
 800a056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a05a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a198 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a05e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a062:	4b48      	ldr	r3, [pc, #288]	; (800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a06a:	ee07 3a90 	vmov	s15, r3
 800a06e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a072:	ed97 6a03 	vldr	s12, [r7, #12]
 800a076:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a18c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a07a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a07e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a08a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a08e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a092:	e021      	b.n	800a0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	ee07 3a90 	vmov	s15, r3
 800a09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a194 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a0a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0a6:	4b37      	ldr	r3, [pc, #220]	; (800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a18c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a0d8:	4b2a      	ldr	r3, [pc, #168]	; (800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0dc:	0a5b      	lsrs	r3, r3, #9
 800a0de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0e2:	ee07 3a90 	vmov	s15, r3
 800a0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0fe:	ee17 2a90 	vmov	r2, s15
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a106:	4b1f      	ldr	r3, [pc, #124]	; (800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10a:	0c1b      	lsrs	r3, r3, #16
 800a10c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a110:	ee07 3a90 	vmov	s15, r3
 800a114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a11c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a120:	edd7 6a07 	vldr	s13, [r7, #28]
 800a124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a12c:	ee17 2a90 	vmov	r2, s15
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a134:	4b13      	ldr	r3, [pc, #76]	; (800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a138:	0e1b      	lsrs	r3, r3, #24
 800a13a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a14a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a14e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a15a:	ee17 2a90 	vmov	r2, s15
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a162:	e008      	b.n	800a176 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	609a      	str	r2, [r3, #8]
}
 800a176:	bf00      	nop
 800a178:	3724      	adds	r7, #36	; 0x24
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	58024400 	.word	0x58024400
 800a188:	03d09000 	.word	0x03d09000
 800a18c:	46000000 	.word	0x46000000
 800a190:	4c742400 	.word	0x4c742400
 800a194:	4a742400 	.word	0x4a742400
 800a198:	4bbebc20 	.word	0x4bbebc20

0800a19c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b089      	sub	sp, #36	; 0x24
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1a4:	4ba1      	ldr	r3, [pc, #644]	; (800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a8:	f003 0303 	and.w	r3, r3, #3
 800a1ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a1ae:	4b9f      	ldr	r3, [pc, #636]	; (800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b2:	0d1b      	lsrs	r3, r3, #20
 800a1b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a1ba:	4b9c      	ldr	r3, [pc, #624]	; (800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1be:	0a1b      	lsrs	r3, r3, #8
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a1c6:	4b99      	ldr	r3, [pc, #612]	; (800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ca:	08db      	lsrs	r3, r3, #3
 800a1cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	fb02 f303 	mul.w	r3, r2, r3
 800a1d6:	ee07 3a90 	vmov	s15, r3
 800a1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 8111 	beq.w	800a40c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	f000 8083 	beq.w	800a2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	f200 80a1 	bhi.w	800a33c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d003      	beq.n	800a208 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d056      	beq.n	800a2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a206:	e099      	b.n	800a33c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a208:	4b88      	ldr	r3, [pc, #544]	; (800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0320 	and.w	r3, r3, #32
 800a210:	2b00      	cmp	r3, #0
 800a212:	d02d      	beq.n	800a270 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a214:	4b85      	ldr	r3, [pc, #532]	; (800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	08db      	lsrs	r3, r3, #3
 800a21a:	f003 0303 	and.w	r3, r3, #3
 800a21e:	4a84      	ldr	r2, [pc, #528]	; (800a430 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a220:	fa22 f303 	lsr.w	r3, r2, r3
 800a224:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	ee07 3a90 	vmov	s15, r3
 800a22c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	ee07 3a90 	vmov	s15, r3
 800a236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a23a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a23e:	4b7b      	ldr	r3, [pc, #492]	; (800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a246:	ee07 3a90 	vmov	s15, r3
 800a24a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a24e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a252:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a25a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a25e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a26a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a26e:	e087      	b.n	800a380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	ee07 3a90 	vmov	s15, r3
 800a276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a27a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a438 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a282:	4b6a      	ldr	r3, [pc, #424]	; (800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a28a:	ee07 3a90 	vmov	s15, r3
 800a28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a292:	ed97 6a03 	vldr	s12, [r7, #12]
 800a296:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a29a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2b2:	e065      	b.n	800a380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	ee07 3a90 	vmov	s15, r3
 800a2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a43c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a2c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2c6:	4b59      	ldr	r3, [pc, #356]	; (800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ce:	ee07 3a90 	vmov	s15, r3
 800a2d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2da:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2f6:	e043      	b.n	800a380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	ee07 3a90 	vmov	s15, r3
 800a2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a302:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a440 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a30a:	4b48      	ldr	r3, [pc, #288]	; (800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a312:	ee07 3a90 	vmov	s15, r3
 800a316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a31a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a31e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a32a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a32e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a332:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a336:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a33a:	e021      	b.n	800a380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	ee07 3a90 	vmov	s15, r3
 800a342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a346:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a43c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a34a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a34e:	4b37      	ldr	r3, [pc, #220]	; (800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a356:	ee07 3a90 	vmov	s15, r3
 800a35a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a35e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a362:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a36a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a36e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a37a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a37e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a380:	4b2a      	ldr	r3, [pc, #168]	; (800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a384:	0a5b      	lsrs	r3, r3, #9
 800a386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a38a:	ee07 3a90 	vmov	s15, r3
 800a38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a396:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a39a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a39e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3a6:	ee17 2a90 	vmov	r2, s15
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a3ae:	4b1f      	ldr	r3, [pc, #124]	; (800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b2:	0c1b      	lsrs	r3, r3, #16
 800a3b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3b8:	ee07 3a90 	vmov	s15, r3
 800a3bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3d4:	ee17 2a90 	vmov	r2, s15
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a3dc:	4b13      	ldr	r3, [pc, #76]	; (800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e0:	0e1b      	lsrs	r3, r3, #24
 800a3e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3e6:	ee07 3a90 	vmov	s15, r3
 800a3ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a402:	ee17 2a90 	vmov	r2, s15
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a40a:	e008      	b.n	800a41e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	609a      	str	r2, [r3, #8]
}
 800a41e:	bf00      	nop
 800a420:	3724      	adds	r7, #36	; 0x24
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	58024400 	.word	0x58024400
 800a430:	03d09000 	.word	0x03d09000
 800a434:	46000000 	.word	0x46000000
 800a438:	4c742400 	.word	0x4c742400
 800a43c:	4a742400 	.word	0x4a742400
 800a440:	4bbebc20 	.word	0x4bbebc20

0800a444 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a444:	b480      	push	{r7}
 800a446:	b089      	sub	sp, #36	; 0x24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a44c:	4ba0      	ldr	r3, [pc, #640]	; (800a6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a450:	f003 0303 	and.w	r3, r3, #3
 800a454:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a456:	4b9e      	ldr	r3, [pc, #632]	; (800a6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a45a:	091b      	lsrs	r3, r3, #4
 800a45c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a460:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a462:	4b9b      	ldr	r3, [pc, #620]	; (800a6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a466:	f003 0301 	and.w	r3, r3, #1
 800a46a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a46c:	4b98      	ldr	r3, [pc, #608]	; (800a6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a470:	08db      	lsrs	r3, r3, #3
 800a472:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	fb02 f303 	mul.w	r3, r2, r3
 800a47c:	ee07 3a90 	vmov	s15, r3
 800a480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a484:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 8111 	beq.w	800a6b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	2b02      	cmp	r3, #2
 800a494:	f000 8083 	beq.w	800a59e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	f200 80a1 	bhi.w	800a5e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d003      	beq.n	800a4ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d056      	beq.n	800a55a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a4ac:	e099      	b.n	800a5e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4ae:	4b88      	ldr	r3, [pc, #544]	; (800a6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f003 0320 	and.w	r3, r3, #32
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d02d      	beq.n	800a516 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4ba:	4b85      	ldr	r3, [pc, #532]	; (800a6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	08db      	lsrs	r3, r3, #3
 800a4c0:	f003 0303 	and.w	r3, r3, #3
 800a4c4:	4a83      	ldr	r2, [pc, #524]	; (800a6d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a4c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ca:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	ee07 3a90 	vmov	s15, r3
 800a4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	ee07 3a90 	vmov	s15, r3
 800a4dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4e4:	4b7a      	ldr	r3, [pc, #488]	; (800a6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ec:	ee07 3a90 	vmov	s15, r3
 800a4f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a4fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a50c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a510:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a514:	e087      	b.n	800a626 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	ee07 3a90 	vmov	s15, r3
 800a51c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a520:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a6dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a528:	4b69      	ldr	r3, [pc, #420]	; (800a6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a530:	ee07 3a90 	vmov	s15, r3
 800a534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a538:	ed97 6a03 	vldr	s12, [r7, #12]
 800a53c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a54c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a550:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a554:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a558:	e065      	b.n	800a626 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	ee07 3a90 	vmov	s15, r3
 800a560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a564:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a568:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a56c:	4b58      	ldr	r3, [pc, #352]	; (800a6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a574:	ee07 3a90 	vmov	s15, r3
 800a578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a57c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a580:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a584:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a588:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a58c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a594:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a598:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a59c:	e043      	b.n	800a626 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	ee07 3a90 	vmov	s15, r3
 800a5a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a5ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5b0:	4b47      	ldr	r3, [pc, #284]	; (800a6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b8:	ee07 3a90 	vmov	s15, r3
 800a5bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a5c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5e0:	e021      	b.n	800a626 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	ee07 3a90 	vmov	s15, r3
 800a5e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a6dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a5f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5f4:	4b36      	ldr	r3, [pc, #216]	; (800a6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5fc:	ee07 3a90 	vmov	s15, r3
 800a600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a604:	ed97 6a03 	vldr	s12, [r7, #12]
 800a608:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a60c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a610:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a61c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a620:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a624:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a626:	4b2a      	ldr	r3, [pc, #168]	; (800a6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62a:	0a5b      	lsrs	r3, r3, #9
 800a62c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a630:	ee07 3a90 	vmov	s15, r3
 800a634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a638:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a63c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a640:	edd7 6a07 	vldr	s13, [r7, #28]
 800a644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a64c:	ee17 2a90 	vmov	r2, s15
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a654:	4b1e      	ldr	r3, [pc, #120]	; (800a6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a658:	0c1b      	lsrs	r3, r3, #16
 800a65a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a65e:	ee07 3a90 	vmov	s15, r3
 800a662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a66a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a66e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a67a:	ee17 2a90 	vmov	r2, s15
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a682:	4b13      	ldr	r3, [pc, #76]	; (800a6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a686:	0e1b      	lsrs	r3, r3, #24
 800a688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a68c:	ee07 3a90 	vmov	s15, r3
 800a690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a698:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a69c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6a8:	ee17 2a90 	vmov	r2, s15
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a6b0:	e008      	b.n	800a6c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	609a      	str	r2, [r3, #8]
}
 800a6c4:	bf00      	nop
 800a6c6:	3724      	adds	r7, #36	; 0x24
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	58024400 	.word	0x58024400
 800a6d4:	03d09000 	.word	0x03d09000
 800a6d8:	46000000 	.word	0x46000000
 800a6dc:	4c742400 	.word	0x4c742400
 800a6e0:	4a742400 	.word	0x4a742400
 800a6e4:	4bbebc20 	.word	0x4bbebc20

0800a6e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6f6:	4b53      	ldr	r3, [pc, #332]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fa:	f003 0303 	and.w	r3, r3, #3
 800a6fe:	2b03      	cmp	r3, #3
 800a700:	d101      	bne.n	800a706 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e099      	b.n	800a83a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a706:	4b4f      	ldr	r3, [pc, #316]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a4e      	ldr	r2, [pc, #312]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a70c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a712:	f7f8 faa5 	bl	8002c60 <HAL_GetTick>
 800a716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a718:	e008      	b.n	800a72c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a71a:	f7f8 faa1 	bl	8002c60 <HAL_GetTick>
 800a71e:	4602      	mov	r2, r0
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	1ad3      	subs	r3, r2, r3
 800a724:	2b02      	cmp	r3, #2
 800a726:	d901      	bls.n	800a72c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a728:	2303      	movs	r3, #3
 800a72a:	e086      	b.n	800a83a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a72c:	4b45      	ldr	r3, [pc, #276]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1f0      	bne.n	800a71a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a738:	4b42      	ldr	r3, [pc, #264]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	031b      	lsls	r3, r3, #12
 800a746:	493f      	ldr	r1, [pc, #252]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a748:	4313      	orrs	r3, r2
 800a74a:	628b      	str	r3, [r1, #40]	; 0x28
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	3b01      	subs	r3, #1
 800a752:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	3b01      	subs	r3, #1
 800a75c:	025b      	lsls	r3, r3, #9
 800a75e:	b29b      	uxth	r3, r3
 800a760:	431a      	orrs	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	3b01      	subs	r3, #1
 800a768:	041b      	lsls	r3, r3, #16
 800a76a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a76e:	431a      	orrs	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	691b      	ldr	r3, [r3, #16]
 800a774:	3b01      	subs	r3, #1
 800a776:	061b      	lsls	r3, r3, #24
 800a778:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a77c:	4931      	ldr	r1, [pc, #196]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a77e:	4313      	orrs	r3, r2
 800a780:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a782:	4b30      	ldr	r3, [pc, #192]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a786:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	695b      	ldr	r3, [r3, #20]
 800a78e:	492d      	ldr	r1, [pc, #180]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a790:	4313      	orrs	r3, r2
 800a792:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a794:	4b2b      	ldr	r3, [pc, #172]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a798:	f023 0220 	bic.w	r2, r3, #32
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	4928      	ldr	r1, [pc, #160]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a7a6:	4b27      	ldr	r3, [pc, #156]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7aa:	4a26      	ldr	r2, [pc, #152]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a7ac:	f023 0310 	bic.w	r3, r3, #16
 800a7b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a7b2:	4b24      	ldr	r3, [pc, #144]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a7b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7b6:	4b24      	ldr	r3, [pc, #144]	; (800a848 <RCCEx_PLL2_Config+0x160>)
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	69d2      	ldr	r2, [r2, #28]
 800a7be:	00d2      	lsls	r2, r2, #3
 800a7c0:	4920      	ldr	r1, [pc, #128]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a7c6:	4b1f      	ldr	r3, [pc, #124]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ca:	4a1e      	ldr	r2, [pc, #120]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a7cc:	f043 0310 	orr.w	r3, r3, #16
 800a7d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d106      	bne.n	800a7e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a7d8:	4b1a      	ldr	r3, [pc, #104]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7dc:	4a19      	ldr	r2, [pc, #100]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a7de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7e4:	e00f      	b.n	800a806 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d106      	bne.n	800a7fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a7ec:	4b15      	ldr	r3, [pc, #84]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f0:	4a14      	ldr	r2, [pc, #80]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a7f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7f8:	e005      	b.n	800a806 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a7fa:	4b12      	ldr	r3, [pc, #72]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fe:	4a11      	ldr	r2, [pc, #68]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a804:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a806:	4b0f      	ldr	r3, [pc, #60]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a0e      	ldr	r2, [pc, #56]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a80c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a812:	f7f8 fa25 	bl	8002c60 <HAL_GetTick>
 800a816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a818:	e008      	b.n	800a82c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a81a:	f7f8 fa21 	bl	8002c60 <HAL_GetTick>
 800a81e:	4602      	mov	r2, r0
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	2b02      	cmp	r3, #2
 800a826:	d901      	bls.n	800a82c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e006      	b.n	800a83a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a82c:	4b05      	ldr	r3, [pc, #20]	; (800a844 <RCCEx_PLL2_Config+0x15c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a834:	2b00      	cmp	r3, #0
 800a836:	d0f0      	beq.n	800a81a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a838:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	58024400 	.word	0x58024400
 800a848:	ffff0007 	.word	0xffff0007

0800a84c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a856:	2300      	movs	r3, #0
 800a858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a85a:	4b53      	ldr	r3, [pc, #332]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a85e:	f003 0303 	and.w	r3, r3, #3
 800a862:	2b03      	cmp	r3, #3
 800a864:	d101      	bne.n	800a86a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e099      	b.n	800a99e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a86a:	4b4f      	ldr	r3, [pc, #316]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a4e      	ldr	r2, [pc, #312]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a876:	f7f8 f9f3 	bl	8002c60 <HAL_GetTick>
 800a87a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a87c:	e008      	b.n	800a890 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a87e:	f7f8 f9ef 	bl	8002c60 <HAL_GetTick>
 800a882:	4602      	mov	r2, r0
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	2b02      	cmp	r3, #2
 800a88a:	d901      	bls.n	800a890 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a88c:	2303      	movs	r3, #3
 800a88e:	e086      	b.n	800a99e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a890:	4b45      	ldr	r3, [pc, #276]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1f0      	bne.n	800a87e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a89c:	4b42      	ldr	r3, [pc, #264]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a89e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	051b      	lsls	r3, r3, #20
 800a8aa:	493f      	ldr	r1, [pc, #252]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	628b      	str	r3, [r1, #40]	; 0x28
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	025b      	lsls	r3, r3, #9
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	431a      	orrs	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	041b      	lsls	r3, r3, #16
 800a8ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a8d2:	431a      	orrs	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	061b      	lsls	r3, r3, #24
 800a8dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8e0:	4931      	ldr	r1, [pc, #196]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a8e6:	4b30      	ldr	r3, [pc, #192]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	492d      	ldr	r1, [pc, #180]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a8f8:	4b2b      	ldr	r3, [pc, #172]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	4928      	ldr	r1, [pc, #160]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a906:	4313      	orrs	r3, r2
 800a908:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a90a:	4b27      	ldr	r3, [pc, #156]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90e:	4a26      	ldr	r2, [pc, #152]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a914:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a916:	4b24      	ldr	r3, [pc, #144]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a91a:	4b24      	ldr	r3, [pc, #144]	; (800a9ac <RCCEx_PLL3_Config+0x160>)
 800a91c:	4013      	ands	r3, r2
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	69d2      	ldr	r2, [r2, #28]
 800a922:	00d2      	lsls	r2, r2, #3
 800a924:	4920      	ldr	r1, [pc, #128]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a926:	4313      	orrs	r3, r2
 800a928:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a92a:	4b1f      	ldr	r3, [pc, #124]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92e:	4a1e      	ldr	r2, [pc, #120]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a934:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d106      	bne.n	800a94a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a93c:	4b1a      	ldr	r3, [pc, #104]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a940:	4a19      	ldr	r2, [pc, #100]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a942:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a946:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a948:	e00f      	b.n	800a96a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d106      	bne.n	800a95e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a950:	4b15      	ldr	r3, [pc, #84]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a954:	4a14      	ldr	r2, [pc, #80]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a956:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a95a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a95c:	e005      	b.n	800a96a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a95e:	4b12      	ldr	r3, [pc, #72]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a962:	4a11      	ldr	r2, [pc, #68]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a964:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a968:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a96a:	4b0f      	ldr	r3, [pc, #60]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a0e      	ldr	r2, [pc, #56]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a976:	f7f8 f973 	bl	8002c60 <HAL_GetTick>
 800a97a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a97c:	e008      	b.n	800a990 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a97e:	f7f8 f96f 	bl	8002c60 <HAL_GetTick>
 800a982:	4602      	mov	r2, r0
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d901      	bls.n	800a990 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a98c:	2303      	movs	r3, #3
 800a98e:	e006      	b.n	800a99e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a990:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <RCCEx_PLL3_Config+0x15c>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d0f0      	beq.n	800a97e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	58024400 	.word	0x58024400
 800a9ac:	ffff0007 	.word	0xffff0007

0800a9b0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d101      	bne.n	800a9c2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e04d      	b.n	800aa5e <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	7a5b      	ldrb	r3, [r3, #9]
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d105      	bne.n	800a9d8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7f7 f8aa 	bl	8001b2c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2202      	movs	r2, #2
 800a9dc:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f023 0120 	bic.w	r1, r3, #32
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	430a      	orrs	r2, r1
 800a9f2:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f042 0204 	orr.w	r2, r2, #4
 800aa02:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa0e:	2b40      	cmp	r3, #64	; 0x40
 800aa10:	d104      	bne.n	800aa1c <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2204      	movs	r2, #4
 800aa16:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e020      	b.n	800aa5e <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800aa1c:	f7f8 f920 	bl	8002c60 <HAL_GetTick>
 800aa20:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800aa22:	e00e      	b.n	800aa42 <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800aa24:	f7f8 f91c 	bl	8002c60 <HAL_GetTick>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d907      	bls.n	800aa42 <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2204      	movs	r2, #4
 800aa36:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2202      	movs	r2, #2
 800aa3c:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e00d      	b.n	800aa5e <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	f003 0304 	and.w	r3, r3, #4
 800aa4c:	2b04      	cmp	r3, #4
 800aa4e:	d0e9      	beq.n	800aa24 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b084      	sub	sp, #16
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa70:	2300      	movs	r3, #0
 800aa72:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	7a1b      	ldrb	r3, [r3, #8]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d101      	bne.n	800aa80 <HAL_RNG_GenerateRandomNumber+0x1a>
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	e03d      	b.n	800aafc <HAL_RNG_GenerateRandomNumber+0x96>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	7a5b      	ldrb	r3, [r3, #9]
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d12c      	bne.n	800aaea <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2202      	movs	r2, #2
 800aa94:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800aa96:	f7f8 f8e3 	bl	8002c60 <HAL_GetTick>
 800aa9a:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800aa9c:	e011      	b.n	800aac2 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800aa9e:	f7f8 f8df 	bl	8002c60 <HAL_GetTick>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d90a      	bls.n	800aac2 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2202      	movs	r2, #2
 800aab6:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e01c      	b.n	800aafc <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	f003 0301 	and.w	r3, r3, #1
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d1e6      	bne.n	800aa9e <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	689a      	ldr	r2, [r3, #8]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	691a      	ldr	r2, [r3, #16]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	725a      	strb	r2, [r3, #9]
 800aae8:	e004      	b.n	800aaf4 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2204      	movs	r2, #4
 800aaee:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	721a      	strb	r2, [r3, #8]

  return status;
 800aafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800ab12:	f7f8 f8a5 	bl	8002c60 <HAL_GetTick>
 800ab16:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d002      	beq.n	800ab24 <HAL_SAI_Transmit_DMA+0x20>
 800ab1e:	88fb      	ldrh	r3, [r7, #6]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d101      	bne.n	800ab28 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800ab24:	2301      	movs	r3, #1
 800ab26:	e098      	b.n	800ac5a <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	f040 8091 	bne.w	800ac58 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d101      	bne.n	800ab44 <HAL_SAI_Transmit_DMA+0x40>
 800ab40:	2302      	movs	r3, #2
 800ab42:	e08a      	b.n	800ac5a <HAL_SAI_Transmit_DMA+0x156>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	68ba      	ldr	r2, [r7, #8]
 800ab50:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	88fa      	ldrh	r2, [r7, #6]
 800ab56:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	88fa      	ldrh	r2, [r7, #6]
 800ab5e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2212      	movs	r2, #18
 800ab6e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab78:	4a3a      	ldr	r2, [pc, #232]	; (800ac64 <HAL_SAI_Transmit_DMA+0x160>)
 800ab7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab82:	4a39      	ldr	r2, [pc, #228]	; (800ac68 <HAL_SAI_Transmit_DMA+0x164>)
 800ab84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab8c:	4a37      	ldr	r2, [pc, #220]	; (800ac6c <HAL_SAI_Transmit_DMA+0x168>)
 800ab8e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab96:	2200      	movs	r2, #0
 800ab98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aba4:	4619      	mov	r1, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	331c      	adds	r3, #28
 800abac:	461a      	mov	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800abb4:	f7f9 fbe2 	bl	800437c <HAL_DMA_Start_IT>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d005      	beq.n	800abca <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e047      	b.n	800ac5a <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800abca:	2100      	movs	r1, #0
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 f859 	bl	800ac84 <SAI_InterruptFlag>
 800abd2:	4601      	mov	r1, r0
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	691a      	ldr	r2, [r3, #16]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	430a      	orrs	r2, r1
 800abe0:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800abf0:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800abf2:	e015      	b.n	800ac20 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800abf4:	f7f8 f834 	bl	8002c60 <HAL_GetTick>
 800abf8:	4602      	mov	r2, r0
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	1ad3      	subs	r3, r2, r3
 800abfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac02:	d90d      	bls.n	800ac20 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e01c      	b.n	800ac5a <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d0e2      	beq.n	800abf4 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d107      	bne.n	800ac4c <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ac4a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800ac54:	2300      	movs	r3, #0
 800ac56:	e000      	b.n	800ac5a <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800ac58:	2302      	movs	r3, #2
  }
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3718      	adds	r7, #24
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	0800adc9 	.word	0x0800adc9
 800ac68:	0800ad69 	.word	0x0800ad69
 800ac6c:	0800ade5 	.word	0x0800ade5

0800ac70 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ac94:	78fb      	ldrb	r3, [r7, #3]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d103      	bne.n	800aca2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f043 0308 	orr.w	r3, r3, #8
 800aca0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca6:	2b08      	cmp	r3, #8
 800aca8:	d10b      	bne.n	800acc2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800acae:	2b03      	cmp	r3, #3
 800acb0:	d003      	beq.n	800acba <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d103      	bne.n	800acc2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f043 0310 	orr.w	r3, r3, #16
 800acc0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d003      	beq.n	800acd2 <SAI_InterruptFlag+0x4e>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d104      	bne.n	800acdc <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800acd8:	60fb      	str	r3, [r7, #12]
 800acda:	e003      	b.n	800ace4 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f043 0304 	orr.w	r3, r3, #4
 800ace2:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ace4:	68fb      	ldr	r3, [r7, #12]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
	...

0800acf4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800acfc:	4b18      	ldr	r3, [pc, #96]	; (800ad60 <SAI_Disable+0x6c>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a18      	ldr	r2, [pc, #96]	; (800ad64 <SAI_Disable+0x70>)
 800ad02:	fba2 2303 	umull	r2, r3, r2, r3
 800ad06:	0b1b      	lsrs	r3, r3, #12
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ad1e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10a      	bne.n	800ad3c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800ad36:	2303      	movs	r3, #3
 800ad38:	72fb      	strb	r3, [r7, #11]
      break;
 800ad3a:	e009      	b.n	800ad50 <SAI_Disable+0x5c>
    }
    count--;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1e7      	bne.n	800ad20 <SAI_Disable+0x2c>

  return status;
 800ad50:	7afb      	ldrb	r3, [r7, #11]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3714      	adds	r7, #20
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	24000400 	.word	0x24000400
 800ad64:	95cbec1b 	.word	0x95cbec1b

0800ad68 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad74:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad7e:	d01c      	beq.n	800adba <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ad96:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ad98:	2100      	movs	r1, #0
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f7ff ff72 	bl	800ac84 <SAI_InterruptFlag>
 800ada0:	4603      	mov	r3, r0
 800ada2:	43d9      	mvns	r1, r3
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	691a      	ldr	r2, [r3, #16]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	400a      	ands	r2, r1
 800adb0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2201      	movs	r2, #1
 800adb6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f00d fe3a 	bl	8018a34 <HAL_SAI_TxCpltCallback>
#endif
}
 800adc0:	bf00      	nop
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f00d fe22 	bl	8018a20 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800addc:	bf00      	nop
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf0:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f7fa fc56 	bl	80056a4 <HAL_DMA_GetError>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d01d      	beq.n	800ae3a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ae1c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f7ff ff68 	bl	800acf4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f7ff ff1b 	bl	800ac70 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800ae3a:	bf00      	nop
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
	...

0800ae44 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d101      	bne.n	800ae5a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	e0eb      	b.n	800b032 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a75      	ldr	r2, [pc, #468]	; (800b03c <HAL_SPI_Init+0x1f8>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d00f      	beq.n	800ae8a <HAL_SPI_Init+0x46>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a74      	ldr	r2, [pc, #464]	; (800b040 <HAL_SPI_Init+0x1fc>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d00a      	beq.n	800ae8a <HAL_SPI_Init+0x46>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a72      	ldr	r2, [pc, #456]	; (800b044 <HAL_SPI_Init+0x200>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d005      	beq.n	800ae8a <HAL_SPI_Init+0x46>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	2b0f      	cmp	r3, #15
 800ae84:	d901      	bls.n	800ae8a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e0d3      	b.n	800b032 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f001 f888 	bl	800bfa0 <SPI_GetPacketSize>
 800ae90:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a69      	ldr	r2, [pc, #420]	; (800b03c <HAL_SPI_Init+0x1f8>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d00c      	beq.n	800aeb6 <HAL_SPI_Init+0x72>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a67      	ldr	r2, [pc, #412]	; (800b040 <HAL_SPI_Init+0x1fc>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d007      	beq.n	800aeb6 <HAL_SPI_Init+0x72>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a66      	ldr	r2, [pc, #408]	; (800b044 <HAL_SPI_Init+0x200>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d002      	beq.n	800aeb6 <HAL_SPI_Init+0x72>
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	2b08      	cmp	r3, #8
 800aeb4:	d811      	bhi.n	800aeda <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aeba:	4a60      	ldr	r2, [pc, #384]	; (800b03c <HAL_SPI_Init+0x1f8>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d009      	beq.n	800aed4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a5e      	ldr	r2, [pc, #376]	; (800b040 <HAL_SPI_Init+0x1fc>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d004      	beq.n	800aed4 <HAL_SPI_Init+0x90>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a5d      	ldr	r2, [pc, #372]	; (800b044 <HAL_SPI_Init+0x200>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d104      	bne.n	800aede <HAL_SPI_Init+0x9a>
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	2b10      	cmp	r3, #16
 800aed8:	d901      	bls.n	800aede <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e0a9      	b.n	800b032 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d106      	bne.n	800aef8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7f6 fea8 	bl	8001c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2202      	movs	r2, #2
 800aefc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f022 0201 	bic.w	r2, r2, #1
 800af0e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af18:	d119      	bne.n	800af4e <HAL_SPI_Init+0x10a>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af22:	d103      	bne.n	800af2c <HAL_SPI_Init+0xe8>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d008      	beq.n	800af3e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10c      	bne.n	800af4e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af3c:	d107      	bne.n	800af4e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800af4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	69da      	ldr	r2, [r3, #28]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af56:	431a      	orrs	r2, r3
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	431a      	orrs	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af60:	ea42 0103 	orr.w	r1, r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	68da      	ldr	r2, [r3, #12]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	430a      	orrs	r2, r1
 800af6e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af78:	431a      	orrs	r2, r3
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7e:	431a      	orrs	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	431a      	orrs	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	431a      	orrs	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	695b      	ldr	r3, [r3, #20]
 800af90:	431a      	orrs	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	431a      	orrs	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	431a      	orrs	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afa2:	431a      	orrs	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	431a      	orrs	r2, r3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afae:	ea42 0103 	orr.w	r1, r2, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	430a      	orrs	r2, r1
 800afbc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d113      	bne.n	800afee <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afd8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800afec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f022 0201 	bic.w	r2, r2, #1
 800affc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00a      	beq.n	800b020 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	430a      	orrs	r2, r1
 800b01e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	40013000 	.word	0x40013000
 800b040:	40003800 	.word	0x40003800
 800b044:	40003c00 	.word	0x40003c00

0800b048 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b08a      	sub	sp, #40	; 0x28
 800b04c:	af02      	add	r7, sp, #8
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	603b      	str	r3, [r7, #0]
 800b054:	4613      	mov	r3, r2
 800b056:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	3320      	adds	r3, #32
 800b05e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b060:	2300      	movs	r3, #0
 800b062:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d101      	bne.n	800b072 <HAL_SPI_Transmit+0x2a>
 800b06e:	2302      	movs	r3, #2
 800b070:	e1d7      	b.n	800b422 <HAL_SPI_Transmit+0x3da>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2201      	movs	r2, #1
 800b076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b07a:	f7f7 fdf1 	bl	8002c60 <HAL_GetTick>
 800b07e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b086:	b2db      	uxtb	r3, r3
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d007      	beq.n	800b09c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800b08c:	2302      	movs	r3, #2
 800b08e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2200      	movs	r2, #0
 800b094:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b098:	7efb      	ldrb	r3, [r7, #27]
 800b09a:	e1c2      	b.n	800b422 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d002      	beq.n	800b0a8 <HAL_SPI_Transmit+0x60>
 800b0a2:	88fb      	ldrh	r3, [r7, #6]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d107      	bne.n	800b0b8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b0b4:	7efb      	ldrb	r3, [r7, #27]
 800b0b6:	e1b4      	b.n	800b422 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2203      	movs	r2, #3
 800b0bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	88fa      	ldrh	r2, [r7, #6]
 800b0d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	88fa      	ldrh	r2, [r7, #6]
 800b0da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b108:	d107      	bne.n	800b11a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b118:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	685a      	ldr	r2, [r3, #4]
 800b120:	4b96      	ldr	r3, [pc, #600]	; (800b37c <HAL_SPI_Transmit+0x334>)
 800b122:	4013      	ands	r3, r2
 800b124:	88f9      	ldrh	r1, [r7, #6]
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	6812      	ldr	r2, [r2, #0]
 800b12a:	430b      	orrs	r3, r1
 800b12c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f042 0201 	orr.w	r2, r2, #1
 800b13c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b146:	d107      	bne.n	800b158 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b156:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	2b0f      	cmp	r3, #15
 800b15e:	d947      	bls.n	800b1f0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b160:	e03f      	b.n	800b1e2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	695b      	ldr	r3, [r3, #20]
 800b168:	f003 0302 	and.w	r3, r3, #2
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d114      	bne.n	800b19a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	6812      	ldr	r2, [r2, #0]
 800b17a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b180:	1d1a      	adds	r2, r3, #4
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	3b01      	subs	r3, #1
 800b190:	b29a      	uxth	r2, r3
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b198:	e023      	b.n	800b1e2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b19a:	f7f7 fd61 	bl	8002c60 <HAL_GetTick>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d803      	bhi.n	800b1b2 <HAL_SPI_Transmit+0x16a>
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1b0:	d102      	bne.n	800b1b8 <HAL_SPI_Transmit+0x170>
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d114      	bne.n	800b1e2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	f000 fe23 	bl	800be04 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e11f      	b.n	800b422 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1b9      	bne.n	800b162 <HAL_SPI_Transmit+0x11a>
 800b1ee:	e0f2      	b.n	800b3d6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	2b07      	cmp	r3, #7
 800b1f6:	f240 80e7 	bls.w	800b3c8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b1fa:	e05d      	b.n	800b2b8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	695b      	ldr	r3, [r3, #20]
 800b202:	f003 0302 	and.w	r3, r3, #2
 800b206:	2b02      	cmp	r3, #2
 800b208:	d132      	bne.n	800b270 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b210:	b29b      	uxth	r3, r3
 800b212:	2b01      	cmp	r3, #1
 800b214:	d918      	bls.n	800b248 <HAL_SPI_Transmit+0x200>
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d014      	beq.n	800b248 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	6812      	ldr	r2, [r2, #0]
 800b228:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b22e:	1d1a      	adds	r2, r3, #4
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	3b02      	subs	r3, #2
 800b23e:	b29a      	uxth	r2, r3
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b246:	e037      	b.n	800b2b8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b24c:	881a      	ldrh	r2, [r3, #0]
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b256:	1c9a      	adds	r2, r3, #2
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b262:	b29b      	uxth	r3, r3
 800b264:	3b01      	subs	r3, #1
 800b266:	b29a      	uxth	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b26e:	e023      	b.n	800b2b8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b270:	f7f7 fcf6 	bl	8002c60 <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d803      	bhi.n	800b288 <HAL_SPI_Transmit+0x240>
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b286:	d102      	bne.n	800b28e <HAL_SPI_Transmit+0x246>
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d114      	bne.n	800b2b8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f000 fdb8 	bl	800be04 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2200      	movs	r2, #0
 800b298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e0b4      	b.n	800b422 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d19b      	bne.n	800b1fc <HAL_SPI_Transmit+0x1b4>
 800b2c4:	e087      	b.n	800b3d6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	695b      	ldr	r3, [r3, #20]
 800b2cc:	f003 0302 	and.w	r3, r3, #2
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d155      	bne.n	800b380 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	2b03      	cmp	r3, #3
 800b2de:	d918      	bls.n	800b312 <HAL_SPI_Transmit+0x2ca>
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2e4:	2b40      	cmp	r3, #64	; 0x40
 800b2e6:	d914      	bls.n	800b312 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	6812      	ldr	r2, [r2, #0]
 800b2f2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2f8:	1d1a      	adds	r2, r3, #4
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b304:	b29b      	uxth	r3, r3
 800b306:	3b04      	subs	r3, #4
 800b308:	b29a      	uxth	r2, r3
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b310:	e05a      	b.n	800b3c8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b318:	b29b      	uxth	r3, r3
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d917      	bls.n	800b34e <HAL_SPI_Transmit+0x306>
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b322:	2b00      	cmp	r3, #0
 800b324:	d013      	beq.n	800b34e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b32a:	881a      	ldrh	r2, [r3, #0]
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b334:	1c9a      	adds	r2, r3, #2
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b340:	b29b      	uxth	r3, r3
 800b342:	3b02      	subs	r3, #2
 800b344:	b29a      	uxth	r2, r3
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b34c:	e03c      	b.n	800b3c8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	3320      	adds	r3, #32
 800b358:	7812      	ldrb	r2, [r2, #0]
 800b35a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b360:	1c5a      	adds	r2, r3, #1
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	3b01      	subs	r3, #1
 800b370:	b29a      	uxth	r2, r3
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b378:	e026      	b.n	800b3c8 <HAL_SPI_Transmit+0x380>
 800b37a:	bf00      	nop
 800b37c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b380:	f7f7 fc6e 	bl	8002c60 <HAL_GetTick>
 800b384:	4602      	mov	r2, r0
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d803      	bhi.n	800b398 <HAL_SPI_Transmit+0x350>
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b396:	d102      	bne.n	800b39e <HAL_SPI_Transmit+0x356>
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d114      	bne.n	800b3c8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f000 fd30 	bl	800be04 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e02c      	b.n	800b422 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f47f af78 	bne.w	800b2c6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	2108      	movs	r1, #8
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f000 fdaf 	bl	800bf44 <SPI_WaitOnFlagUntilTimeout>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d007      	beq.n	800b3fc <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3f2:	f043 0220 	orr.w	r2, r3, #32
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	f000 fd01 	bl	800be04 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d001      	beq.n	800b420 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	e000      	b.n	800b422 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800b420:	7efb      	ldrb	r3, [r7, #27]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3720      	adds	r7, #32
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop

0800b42c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b08a      	sub	sp, #40	; 0x28
 800b430:	af02      	add	r7, sp, #8
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	603b      	str	r3, [r7, #0]
 800b438:	4613      	mov	r3, r2
 800b43a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b43c:	2300      	movs	r3, #0
 800b43e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	3330      	adds	r3, #48	; 0x30
 800b446:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b450:	d112      	bne.n	800b478 <HAL_SPI_Receive+0x4c>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10e      	bne.n	800b478 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2204      	movs	r2, #4
 800b45e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b462:	88fa      	ldrh	r2, [r7, #6]
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	4613      	mov	r3, r2
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	68b9      	ldr	r1, [r7, #8]
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f000 f9ce 	bl	800b810 <HAL_SPI_TransmitReceive>
 800b474:	4603      	mov	r3, r0
 800b476:	e1c7      	b.n	800b808 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d101      	bne.n	800b486 <HAL_SPI_Receive+0x5a>
 800b482:	2302      	movs	r3, #2
 800b484:	e1c0      	b.n	800b808 <HAL_SPI_Receive+0x3dc>
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b48e:	f7f7 fbe7 	bl	8002c60 <HAL_GetTick>
 800b492:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d007      	beq.n	800b4b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800b4a0:	2302      	movs	r3, #2
 800b4a2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b4ac:	7ffb      	ldrb	r3, [r7, #31]
 800b4ae:	e1ab      	b.n	800b808 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <HAL_SPI_Receive+0x90>
 800b4b6:	88fb      	ldrh	r3, [r7, #6]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d107      	bne.n	800b4cc <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b4c8:	7ffb      	ldrb	r3, [r7, #31]
 800b4ca:	e19d      	b.n	800b808 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2204      	movs	r2, #4
 800b4d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	88fa      	ldrh	r2, [r7, #6]
 800b4e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	88fa      	ldrh	r2, [r7, #6]
 800b4ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2200      	movs	r2, #0
 800b504:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2200      	movs	r2, #0
 800b50c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2200      	movs	r2, #0
 800b512:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b51c:	d107      	bne.n	800b52e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b52c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	4b94      	ldr	r3, [pc, #592]	; (800b788 <HAL_SPI_Receive+0x35c>)
 800b536:	4013      	ands	r3, r2
 800b538:	88f9      	ldrh	r1, [r7, #6]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	6812      	ldr	r2, [r2, #0]
 800b53e:	430b      	orrs	r3, r1
 800b540:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f042 0201 	orr.w	r2, r2, #1
 800b550:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b55a:	d107      	bne.n	800b56c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b56a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	2b0f      	cmp	r3, #15
 800b572:	d948      	bls.n	800b606 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b574:	e040      	b.n	800b5f8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	695a      	ldr	r2, [r3, #20]
 800b57c:	f248 0308 	movw	r3, #32776	; 0x8008
 800b580:	4013      	ands	r3, r2
 800b582:	2b00      	cmp	r3, #0
 800b584:	d014      	beq.n	800b5b0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b58e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b590:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b596:	1d1a      	adds	r2, r3, #4
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b5ae:	e023      	b.n	800b5f8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5b0:	f7f7 fb56 	bl	8002c60 <HAL_GetTick>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d803      	bhi.n	800b5c8 <HAL_SPI_Receive+0x19c>
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5c6:	d102      	bne.n	800b5ce <HAL_SPI_Receive+0x1a2>
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d114      	bne.n	800b5f8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f000 fc18 	bl	800be04 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e107      	b.n	800b808 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1b8      	bne.n	800b576 <HAL_SPI_Receive+0x14a>
 800b604:	e0ed      	b.n	800b7e2 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	2b07      	cmp	r3, #7
 800b60c:	f240 80e2 	bls.w	800b7d4 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b610:	e05b      	b.n	800b6ca <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	695b      	ldr	r3, [r3, #20]
 800b618:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d030      	beq.n	800b682 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	695b      	ldr	r3, [r3, #20]
 800b626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d014      	beq.n	800b658 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b636:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b638:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b63e:	1d1a      	adds	r2, r3, #4
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	3b02      	subs	r3, #2
 800b64e:	b29a      	uxth	r2, r3
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b656:	e038      	b.n	800b6ca <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b65c:	69ba      	ldr	r2, [r7, #24]
 800b65e:	8812      	ldrh	r2, [r2, #0]
 800b660:	b292      	uxth	r2, r2
 800b662:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b668:	1c9a      	adds	r2, r3, #2
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b674:	b29b      	uxth	r3, r3
 800b676:	3b01      	subs	r3, #1
 800b678:	b29a      	uxth	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b680:	e023      	b.n	800b6ca <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b682:	f7f7 faed 	bl	8002c60 <HAL_GetTick>
 800b686:	4602      	mov	r2, r0
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d803      	bhi.n	800b69a <HAL_SPI_Receive+0x26e>
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b698:	d102      	bne.n	800b6a0 <HAL_SPI_Receive+0x274>
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d114      	bne.n	800b6ca <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f000 fbaf 	bl	800be04 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e09e      	b.n	800b808 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d19d      	bne.n	800b612 <HAL_SPI_Receive+0x1e6>
 800b6d6:	e084      	b.n	800b7e2 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	695b      	ldr	r3, [r3, #20]
 800b6de:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d052      	beq.n	800b78c <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	695b      	ldr	r3, [r3, #20]
 800b6ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d014      	beq.n	800b71e <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b6fe:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b704:	1d1a      	adds	r2, r3, #4
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b710:	b29b      	uxth	r3, r3
 800b712:	3b04      	subs	r3, #4
 800b714:	b29a      	uxth	r2, r3
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b71c:	e05a      	b.n	800b7d4 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	695b      	ldr	r3, [r3, #20]
 800b724:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b72c:	d914      	bls.n	800b758 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b732:	69ba      	ldr	r2, [r7, #24]
 800b734:	8812      	ldrh	r2, [r2, #0]
 800b736:	b292      	uxth	r2, r2
 800b738:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b73e:	1c9a      	adds	r2, r3, #2
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	3b02      	subs	r3, #2
 800b74e:	b29a      	uxth	r2, r3
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b756:	e03d      	b.n	800b7d4 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b764:	7812      	ldrb	r2, [r2, #0]
 800b766:	b2d2      	uxtb	r2, r2
 800b768:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b76e:	1c5a      	adds	r2, r3, #1
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	3b01      	subs	r3, #1
 800b77e:	b29a      	uxth	r2, r3
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b786:	e025      	b.n	800b7d4 <HAL_SPI_Receive+0x3a8>
 800b788:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b78c:	f7f7 fa68 	bl	8002c60 <HAL_GetTick>
 800b790:	4602      	mov	r2, r0
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	683a      	ldr	r2, [r7, #0]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d803      	bhi.n	800b7a4 <HAL_SPI_Receive+0x378>
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7a2:	d102      	bne.n	800b7aa <HAL_SPI_Receive+0x37e>
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d114      	bne.n	800b7d4 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f000 fb2a 	bl	800be04 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e019      	b.n	800b808 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f47f af7b 	bne.w	800b6d8 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f000 fb0e 	bl	800be04 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	e000      	b.n	800b808 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800b806:	7ffb      	ldrb	r3, [r7, #31]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3720      	adds	r7, #32
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b08e      	sub	sp, #56	; 0x38
 800b814:	af02      	add	r7, sp, #8
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	607a      	str	r2, [r7, #4]
 800b81c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	3320      	adds	r3, #32
 800b82a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3330      	adds	r3, #48	; 0x30
 800b832:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d101      	bne.n	800b842 <HAL_SPI_TransmitReceive+0x32>
 800b83e:	2302      	movs	r3, #2
 800b840:	e2ce      	b.n	800bde0 <HAL_SPI_TransmitReceive+0x5d0>
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2201      	movs	r2, #1
 800b846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b84a:	f7f7 fa09 	bl	8002c60 <HAL_GetTick>
 800b84e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800b850:	887b      	ldrh	r3, [r7, #2]
 800b852:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800b854:	887b      	ldrh	r3, [r7, #2]
 800b856:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b85e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b866:	7efb      	ldrb	r3, [r7, #27]
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d014      	beq.n	800b896 <HAL_SPI_TransmitReceive+0x86>
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b872:	d106      	bne.n	800b882 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d102      	bne.n	800b882 <HAL_SPI_TransmitReceive+0x72>
 800b87c:	7efb      	ldrb	r3, [r7, #27]
 800b87e:	2b04      	cmp	r3, #4
 800b880:	d009      	beq.n	800b896 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800b882:	2302      	movs	r3, #2
 800b884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b890:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b894:	e2a4      	b.n	800bde0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d005      	beq.n	800b8a8 <HAL_SPI_TransmitReceive+0x98>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d002      	beq.n	800b8a8 <HAL_SPI_TransmitReceive+0x98>
 800b8a2:	887b      	ldrh	r3, [r7, #2]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d109      	bne.n	800b8bc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b8b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b8ba:	e291      	b.n	800bde0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b04      	cmp	r3, #4
 800b8c6:	d003      	beq.n	800b8d0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2205      	movs	r2, #5
 800b8cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	887a      	ldrh	r2, [r7, #2]
 800b8e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	887a      	ldrh	r2, [r7, #2]
 800b8ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	887a      	ldrh	r2, [r7, #2]
 800b8f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	887a      	ldrh	r2, [r7, #2]
 800b900:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2200      	movs	r2, #0
 800b908:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2200      	movs	r2, #0
 800b90e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	685a      	ldr	r2, [r3, #4]
 800b916:	4b9f      	ldr	r3, [pc, #636]	; (800bb94 <HAL_SPI_TransmitReceive+0x384>)
 800b918:	4013      	ands	r3, r2
 800b91a:	8879      	ldrh	r1, [r7, #2]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	6812      	ldr	r2, [r2, #0]
 800b920:	430b      	orrs	r3, r1
 800b922:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f042 0201 	orr.w	r2, r2, #1
 800b932:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b93c:	d107      	bne.n	800b94e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b94c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	2b0f      	cmp	r3, #15
 800b954:	d970      	bls.n	800ba38 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b956:	e068      	b.n	800ba2a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	695b      	ldr	r3, [r3, #20]
 800b95e:	f003 0302 	and.w	r3, r3, #2
 800b962:	2b02      	cmp	r3, #2
 800b964:	d11a      	bne.n	800b99c <HAL_SPI_TransmitReceive+0x18c>
 800b966:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d017      	beq.n	800b99c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	6812      	ldr	r2, [r2, #0]
 800b976:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b97c:	1d1a      	adds	r2, r3, #4
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b988:	b29b      	uxth	r3, r3
 800b98a:	3b01      	subs	r3, #1
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b99a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	695a      	ldr	r2, [r3, #20]
 800b9a2:	f248 0308 	movw	r3, #32776	; 0x8008
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d01a      	beq.n	800b9e2 <HAL_SPI_TransmitReceive+0x1d2>
 800b9ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d017      	beq.n	800b9e2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b9bc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9c2:	1d1a      	adds	r2, r3, #4
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9e0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9e2:	f7f7 f93d 	bl	8002c60 <HAL_GetTick>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	1ad3      	subs	r3, r2, r3
 800b9ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d803      	bhi.n	800b9fa <HAL_SPI_TransmitReceive+0x1ea>
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9f8:	d102      	bne.n	800ba00 <HAL_SPI_TransmitReceive+0x1f0>
 800b9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d114      	bne.n	800ba2a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f000 f9ff 	bl	800be04 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e1da      	b.n	800bde0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ba2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d193      	bne.n	800b958 <HAL_SPI_TransmitReceive+0x148>
 800ba30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d190      	bne.n	800b958 <HAL_SPI_TransmitReceive+0x148>
 800ba36:	e1ac      	b.n	800bd92 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	2b07      	cmp	r3, #7
 800ba3e:	f240 81a0 	bls.w	800bd82 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ba42:	e0a9      	b.n	800bb98 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	f003 0302 	and.w	r3, r3, #2
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	d139      	bne.n	800bac6 <HAL_SPI_TransmitReceive+0x2b6>
 800ba52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d036      	beq.n	800bac6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ba58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d91c      	bls.n	800ba98 <HAL_SPI_TransmitReceive+0x288>
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d018      	beq.n	800ba98 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	6812      	ldr	r2, [r2, #0]
 800ba70:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba76:	1d1a      	adds	r2, r3, #4
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	3b02      	subs	r3, #2
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ba94:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ba96:	e016      	b.n	800bac6 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba9c:	881a      	ldrh	r2, [r3, #0]
 800ba9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800baa6:	1c9a      	adds	r2, r3, #2
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	3b01      	subs	r3, #1
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bac4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	695b      	ldr	r3, [r3, #20]
 800bacc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d03a      	beq.n	800bb4a <HAL_SPI_TransmitReceive+0x33a>
 800bad4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d037      	beq.n	800bb4a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	695b      	ldr	r3, [r3, #20]
 800bae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d018      	beq.n	800bb1a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baf0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800baf2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baf8:	1d1a      	adds	r2, r3, #4
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	3b02      	subs	r3, #2
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb16:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bb18:	e017      	b.n	800bb4a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb1e:	6a3a      	ldr	r2, [r7, #32]
 800bb20:	8812      	ldrh	r2, [r2, #0]
 800bb22:	b292      	uxth	r2, r2
 800bb24:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb2a:	1c9a      	adds	r2, r3, #2
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb48:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb4a:	f7f7 f889 	bl	8002c60 <HAL_GetTick>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d803      	bhi.n	800bb62 <HAL_SPI_TransmitReceive+0x352>
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb60:	d102      	bne.n	800bb68 <HAL_SPI_TransmitReceive+0x358>
 800bb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d117      	bne.n	800bb98 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f000 f94b 	bl	800be04 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e126      	b.n	800bde0 <HAL_SPI_TransmitReceive+0x5d0>
 800bb92:	bf00      	nop
 800bb94:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bb98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f47f af52 	bne.w	800ba44 <HAL_SPI_TransmitReceive+0x234>
 800bba0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f47f af4e 	bne.w	800ba44 <HAL_SPI_TransmitReceive+0x234>
 800bba8:	e0f3      	b.n	800bd92 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	695b      	ldr	r3, [r3, #20]
 800bbb0:	f003 0302 	and.w	r3, r3, #2
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d15a      	bne.n	800bc6e <HAL_SPI_TransmitReceive+0x45e>
 800bbb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d057      	beq.n	800bc6e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bbbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bbc0:	2b03      	cmp	r3, #3
 800bbc2:	d91c      	bls.n	800bbfe <HAL_SPI_TransmitReceive+0x3ee>
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc8:	2b40      	cmp	r3, #64	; 0x40
 800bbca:	d918      	bls.n	800bbfe <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6812      	ldr	r2, [r2, #0]
 800bbd6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbdc:	1d1a      	adds	r2, r3, #4
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	3b04      	subs	r3, #4
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bbfa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bbfc:	e037      	b.n	800bc6e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bbfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d91b      	bls.n	800bc3c <HAL_SPI_TransmitReceive+0x42c>
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d017      	beq.n	800bc3c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc10:	881a      	ldrh	r2, [r3, #0]
 800bc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc14:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc1a:	1c9a      	adds	r2, r3, #2
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	3b02      	subs	r3, #2
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bc3a:	e018      	b.n	800bc6e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3320      	adds	r3, #32
 800bc46:	7812      	ldrb	r2, [r2, #0]
 800bc48:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc4e:	1c5a      	adds	r2, r3, #1
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	695b      	ldr	r3, [r3, #20]
 800bc74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d05e      	beq.n	800bd3a <HAL_SPI_TransmitReceive+0x52a>
 800bc7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d05b      	beq.n	800bd3a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	695b      	ldr	r3, [r3, #20]
 800bc88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d018      	beq.n	800bcc2 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bc9a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bca0:	1d1a      	adds	r2, r3, #4
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	3b04      	subs	r3, #4
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bcbe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bcc0:	e03b      	b.n	800bd3a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	695b      	ldr	r3, [r3, #20]
 800bcc8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800bccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcd0:	d918      	bls.n	800bd04 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcd6:	6a3a      	ldr	r2, [r7, #32]
 800bcd8:	8812      	ldrh	r2, [r2, #0]
 800bcda:	b292      	uxth	r2, r2
 800bcdc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bce2:	1c9a      	adds	r2, r3, #2
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	3b02      	subs	r3, #2
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd00:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bd02:	e01a      	b.n	800bd3a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd10:	7812      	ldrb	r2, [r2, #0]
 800bd12:	b2d2      	uxtb	r2, r2
 800bd14:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd1a:	1c5a      	adds	r2, r3, #1
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	b29a      	uxth	r2, r3
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd38:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd3a:	f7f6 ff91 	bl	8002c60 <HAL_GetTick>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d803      	bhi.n	800bd52 <HAL_SPI_TransmitReceive+0x542>
 800bd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd50:	d102      	bne.n	800bd58 <HAL_SPI_TransmitReceive+0x548>
 800bd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d114      	bne.n	800bd82 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f000 f853 	bl	800be04 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e02e      	b.n	800bde0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bd82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	f47f af10 	bne.w	800bbaa <HAL_SPI_TransmitReceive+0x39a>
 800bd8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f47f af0c 	bne.w	800bbaa <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800bd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	69fb      	ldr	r3, [r7, #28]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	2108      	movs	r1, #8
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f000 f8d1 	bl	800bf44 <SPI_WaitOnFlagUntilTimeout>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d007      	beq.n	800bdb8 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdae:	f043 0220 	orr.w	r2, r3, #32
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f000 f823 	bl	800be04 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2201      	movs	r2, #1
 800bdca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d001      	beq.n	800bddc <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e001      	b.n	800bde0 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800bddc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3730      	adds	r7, #48	; 0x30
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bdf6:	b2db      	uxtb	r3, r3
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	695b      	ldr	r3, [r3, #20]
 800be12:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	699a      	ldr	r2, [r3, #24]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f042 0208 	orr.w	r2, r2, #8
 800be22:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	699a      	ldr	r2, [r3, #24]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f042 0210 	orr.w	r2, r2, #16
 800be32:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f022 0201 	bic.w	r2, r2, #1
 800be42:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	6919      	ldr	r1, [r3, #16]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	4b3c      	ldr	r3, [pc, #240]	; (800bf40 <SPI_CloseTransfer+0x13c>)
 800be50:	400b      	ands	r3, r1
 800be52:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	689a      	ldr	r2, [r3, #8]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800be62:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	2b04      	cmp	r3, #4
 800be6e:	d014      	beq.n	800be9a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f003 0320 	and.w	r3, r3, #32
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00f      	beq.n	800be9a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	699a      	ldr	r2, [r3, #24]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f042 0220 	orr.w	r2, r2, #32
 800be98:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	2b03      	cmp	r3, #3
 800bea4:	d014      	beq.n	800bed0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00f      	beq.n	800bed0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800beb6:	f043 0204 	orr.w	r2, r3, #4
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	699a      	ldr	r2, [r3, #24]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bece:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00f      	beq.n	800befa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bee0:	f043 0201 	orr.w	r2, r3, #1
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	699a      	ldr	r2, [r3, #24]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bef8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00f      	beq.n	800bf24 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf0a:	f043 0208 	orr.w	r2, r3, #8
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	699a      	ldr	r2, [r3, #24]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf22:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800bf34:	bf00      	nop
 800bf36:	3714      	adds	r7, #20
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	fffffc90 	.word	0xfffffc90

0800bf44 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	603b      	str	r3, [r7, #0]
 800bf50:	4613      	mov	r3, r2
 800bf52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bf54:	e010      	b.n	800bf78 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf56:	f7f6 fe83 	bl	8002c60 <HAL_GetTick>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	1ad3      	subs	r3, r2, r3
 800bf60:	69ba      	ldr	r2, [r7, #24]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d803      	bhi.n	800bf6e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf6c:	d102      	bne.n	800bf74 <SPI_WaitOnFlagUntilTimeout+0x30>
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d101      	bne.n	800bf78 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bf74:	2303      	movs	r3, #3
 800bf76:	e00f      	b.n	800bf98 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	695a      	ldr	r2, [r3, #20]
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	4013      	ands	r3, r2
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	bf0c      	ite	eq
 800bf88:	2301      	moveq	r3, #1
 800bf8a:	2300      	movne	r3, #0
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	461a      	mov	r2, r3
 800bf90:	79fb      	ldrb	r3, [r7, #7]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d0df      	beq.n	800bf56 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfac:	095b      	lsrs	r3, r3, #5
 800bfae:	3301      	adds	r3, #1
 800bfb0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	3307      	adds	r3, #7
 800bfbe:	08db      	lsrs	r3, r3, #3
 800bfc0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	fb02 f303 	mul.w	r3, r2, r3
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
	...

0800bfd8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d101      	bne.n	800bfee <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e03e      	b.n	800c06c <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d106      	bne.n	800c008 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f7f5 f920 	bl	8001248 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	3308      	adds	r3, #8
 800c010:	4619      	mov	r1, r3
 800c012:	4610      	mov	r0, r2
 800c014:	f001 fdd0 	bl	800dbb8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6818      	ldr	r0, [r3, #0]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	461a      	mov	r2, r3
 800c022:	68b9      	ldr	r1, [r7, #8]
 800c024:	f001 fe58 	bl	800dcd8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6858      	ldr	r0, [r3, #4]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	689a      	ldr	r2, [r3, #8]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c034:	6879      	ldr	r1, [r7, #4]
 800c036:	f001 fe9f 	bl	800dd78 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68fa      	ldr	r2, [r7, #12]
 800c040:	6892      	ldr	r2, [r2, #8]
 800c042:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	6892      	ldr	r2, [r2, #8]
 800c04e:	f041 0101 	orr.w	r1, r1, #1
 800c052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800c056:	4b07      	ldr	r3, [pc, #28]	; (800c074 <HAL_SRAM_Init+0x9c>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a06      	ldr	r2, [pc, #24]	; (800c074 <HAL_SRAM_Init+0x9c>)
 800c05c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c060:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2201      	movs	r2, #1
 800c066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800c06a:	2300      	movs	r3, #0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3710      	adds	r7, #16
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	52004000 	.word	0x52004000

0800c078 <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800c078:	b480      	push	{r7}
 800c07a:	b089      	sub	sp, #36	; 0x24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b01      	cmp	r3, #1
 800c098:	d12b      	bne.n	800c0f2 <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d101      	bne.n	800c0a8 <HAL_SRAM_Write_8b+0x30>
 800c0a4:	2302      	movs	r3, #2
 800c0a6:	e025      	b.n	800c0f4 <HAL_SRAM_Write_8b+0x7c>
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2202      	movs	r2, #2
 800c0b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	61fb      	str	r3, [r7, #28]
 800c0bc:	e00c      	b.n	800c0d8 <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	781a      	ldrb	r2, [r3, #0]
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	3b01      	subs	r3, #1
 800c0d6:	61fb      	str	r3, [r7, #28]
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1ef      	bne.n	800c0be <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	e000      	b.n	800c0f4 <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3724      	adds	r7, #36	; 0x24
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d101      	bne.n	800c112 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	e049      	b.n	800c1a6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d106      	bne.n	800c12c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2200      	movs	r2, #0
 800c122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f7f6 f97c 	bl	8002424 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2202      	movs	r2, #2
 800c130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	3304      	adds	r3, #4
 800c13c:	4619      	mov	r1, r3
 800c13e:	4610      	mov	r0, r2
 800c140:	f000 f8ac 	bl	800c29c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2201      	movs	r2, #1
 800c148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2201      	movs	r2, #1
 800c150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2201      	movs	r2, #1
 800c160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2201      	movs	r2, #1
 800c168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2201      	movs	r2, #1
 800c178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2201      	movs	r2, #1
 800c188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2201      	movs	r2, #1
 800c190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2201      	movs	r2, #1
 800c198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
	...

0800c1b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d101      	bne.n	800c1ca <HAL_TIM_OC_ConfigChannel+0x1a>
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	e064      	b.n	800c294 <HAL_TIM_OC_ConfigChannel+0xe4>
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2b14      	cmp	r3, #20
 800c1d6:	d857      	bhi.n	800c288 <HAL_TIM_OC_ConfigChannel+0xd8>
 800c1d8:	a201      	add	r2, pc, #4	; (adr r2, 800c1e0 <HAL_TIM_OC_ConfigChannel+0x30>)
 800c1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1de:	bf00      	nop
 800c1e0:	0800c235 	.word	0x0800c235
 800c1e4:	0800c289 	.word	0x0800c289
 800c1e8:	0800c289 	.word	0x0800c289
 800c1ec:	0800c289 	.word	0x0800c289
 800c1f0:	0800c243 	.word	0x0800c243
 800c1f4:	0800c289 	.word	0x0800c289
 800c1f8:	0800c289 	.word	0x0800c289
 800c1fc:	0800c289 	.word	0x0800c289
 800c200:	0800c251 	.word	0x0800c251
 800c204:	0800c289 	.word	0x0800c289
 800c208:	0800c289 	.word	0x0800c289
 800c20c:	0800c289 	.word	0x0800c289
 800c210:	0800c25f 	.word	0x0800c25f
 800c214:	0800c289 	.word	0x0800c289
 800c218:	0800c289 	.word	0x0800c289
 800c21c:	0800c289 	.word	0x0800c289
 800c220:	0800c26d 	.word	0x0800c26d
 800c224:	0800c289 	.word	0x0800c289
 800c228:	0800c289 	.word	0x0800c289
 800c22c:	0800c289 	.word	0x0800c289
 800c230:	0800c27b 	.word	0x0800c27b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68b9      	ldr	r1, [r7, #8]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f000 f8c8 	bl	800c3d0 <TIM_OC1_SetConfig>
      break;
 800c240:	e023      	b.n	800c28a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	68b9      	ldr	r1, [r7, #8]
 800c248:	4618      	mov	r0, r3
 800c24a:	f000 f951 	bl	800c4f0 <TIM_OC2_SetConfig>
      break;
 800c24e:	e01c      	b.n	800c28a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	68b9      	ldr	r1, [r7, #8]
 800c256:	4618      	mov	r0, r3
 800c258:	f000 f9d4 	bl	800c604 <TIM_OC3_SetConfig>
      break;
 800c25c:	e015      	b.n	800c28a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	68b9      	ldr	r1, [r7, #8]
 800c264:	4618      	mov	r0, r3
 800c266:	f000 fa53 	bl	800c710 <TIM_OC4_SetConfig>
      break;
 800c26a:	e00e      	b.n	800c28a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68b9      	ldr	r1, [r7, #8]
 800c272:	4618      	mov	r0, r3
 800c274:	f000 fab4 	bl	800c7e0 <TIM_OC5_SetConfig>
      break;
 800c278:	e007      	b.n	800c28a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68b9      	ldr	r1, [r7, #8]
 800c280:	4618      	mov	r0, r3
 800c282:	f000 fb0f 	bl	800c8a4 <TIM_OC6_SetConfig>
      break;
 800c286:	e000      	b.n	800c28a <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800c288:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b085      	sub	sp, #20
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4a40      	ldr	r2, [pc, #256]	; (800c3b0 <TIM_Base_SetConfig+0x114>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d013      	beq.n	800c2dc <TIM_Base_SetConfig+0x40>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2ba:	d00f      	beq.n	800c2dc <TIM_Base_SetConfig+0x40>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4a3d      	ldr	r2, [pc, #244]	; (800c3b4 <TIM_Base_SetConfig+0x118>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d00b      	beq.n	800c2dc <TIM_Base_SetConfig+0x40>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	4a3c      	ldr	r2, [pc, #240]	; (800c3b8 <TIM_Base_SetConfig+0x11c>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d007      	beq.n	800c2dc <TIM_Base_SetConfig+0x40>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	4a3b      	ldr	r2, [pc, #236]	; (800c3bc <TIM_Base_SetConfig+0x120>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d003      	beq.n	800c2dc <TIM_Base_SetConfig+0x40>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4a3a      	ldr	r2, [pc, #232]	; (800c3c0 <TIM_Base_SetConfig+0x124>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d108      	bne.n	800c2ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4a2f      	ldr	r2, [pc, #188]	; (800c3b0 <TIM_Base_SetConfig+0x114>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d01f      	beq.n	800c336 <TIM_Base_SetConfig+0x9a>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2fc:	d01b      	beq.n	800c336 <TIM_Base_SetConfig+0x9a>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a2c      	ldr	r2, [pc, #176]	; (800c3b4 <TIM_Base_SetConfig+0x118>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d017      	beq.n	800c336 <TIM_Base_SetConfig+0x9a>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a2b      	ldr	r2, [pc, #172]	; (800c3b8 <TIM_Base_SetConfig+0x11c>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d013      	beq.n	800c336 <TIM_Base_SetConfig+0x9a>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a2a      	ldr	r2, [pc, #168]	; (800c3bc <TIM_Base_SetConfig+0x120>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d00f      	beq.n	800c336 <TIM_Base_SetConfig+0x9a>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4a29      	ldr	r2, [pc, #164]	; (800c3c0 <TIM_Base_SetConfig+0x124>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d00b      	beq.n	800c336 <TIM_Base_SetConfig+0x9a>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4a28      	ldr	r2, [pc, #160]	; (800c3c4 <TIM_Base_SetConfig+0x128>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d007      	beq.n	800c336 <TIM_Base_SetConfig+0x9a>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4a27      	ldr	r2, [pc, #156]	; (800c3c8 <TIM_Base_SetConfig+0x12c>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d003      	beq.n	800c336 <TIM_Base_SetConfig+0x9a>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4a26      	ldr	r2, [pc, #152]	; (800c3cc <TIM_Base_SetConfig+0x130>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d108      	bne.n	800c348 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c33c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	4313      	orrs	r3, r2
 800c346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	695b      	ldr	r3, [r3, #20]
 800c352:	4313      	orrs	r3, r2
 800c354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	689a      	ldr	r2, [r3, #8]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4a10      	ldr	r2, [pc, #64]	; (800c3b0 <TIM_Base_SetConfig+0x114>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d00f      	beq.n	800c394 <TIM_Base_SetConfig+0xf8>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	4a12      	ldr	r2, [pc, #72]	; (800c3c0 <TIM_Base_SetConfig+0x124>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d00b      	beq.n	800c394 <TIM_Base_SetConfig+0xf8>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a11      	ldr	r2, [pc, #68]	; (800c3c4 <TIM_Base_SetConfig+0x128>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d007      	beq.n	800c394 <TIM_Base_SetConfig+0xf8>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	4a10      	ldr	r2, [pc, #64]	; (800c3c8 <TIM_Base_SetConfig+0x12c>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d003      	beq.n	800c394 <TIM_Base_SetConfig+0xf8>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	4a0f      	ldr	r2, [pc, #60]	; (800c3cc <TIM_Base_SetConfig+0x130>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d103      	bne.n	800c39c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	691a      	ldr	r2, [r3, #16]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	615a      	str	r2, [r3, #20]
}
 800c3a2:	bf00      	nop
 800c3a4:	3714      	adds	r7, #20
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	40010000 	.word	0x40010000
 800c3b4:	40000400 	.word	0x40000400
 800c3b8:	40000800 	.word	0x40000800
 800c3bc:	40000c00 	.word	0x40000c00
 800c3c0:	40010400 	.word	0x40010400
 800c3c4:	40014000 	.word	0x40014000
 800c3c8:	40014400 	.word	0x40014400
 800c3cc:	40014800 	.word	0x40014800

0800c3d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b087      	sub	sp, #28
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6a1b      	ldr	r3, [r3, #32]
 800c3de:	f023 0201 	bic.w	r2, r3, #1
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6a1b      	ldr	r3, [r3, #32]
 800c3ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	699b      	ldr	r3, [r3, #24]
 800c3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	4b37      	ldr	r3, [pc, #220]	; (800c4d8 <TIM_OC1_SetConfig+0x108>)
 800c3fc:	4013      	ands	r3, r2
 800c3fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f023 0303 	bic.w	r3, r3, #3
 800c406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	4313      	orrs	r3, r2
 800c410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f023 0302 	bic.w	r3, r3, #2
 800c418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	697a      	ldr	r2, [r7, #20]
 800c420:	4313      	orrs	r3, r2
 800c422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a2d      	ldr	r2, [pc, #180]	; (800c4dc <TIM_OC1_SetConfig+0x10c>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d00f      	beq.n	800c44c <TIM_OC1_SetConfig+0x7c>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4a2c      	ldr	r2, [pc, #176]	; (800c4e0 <TIM_OC1_SetConfig+0x110>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d00b      	beq.n	800c44c <TIM_OC1_SetConfig+0x7c>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a2b      	ldr	r2, [pc, #172]	; (800c4e4 <TIM_OC1_SetConfig+0x114>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d007      	beq.n	800c44c <TIM_OC1_SetConfig+0x7c>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a2a      	ldr	r2, [pc, #168]	; (800c4e8 <TIM_OC1_SetConfig+0x118>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d003      	beq.n	800c44c <TIM_OC1_SetConfig+0x7c>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a29      	ldr	r2, [pc, #164]	; (800c4ec <TIM_OC1_SetConfig+0x11c>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d10c      	bne.n	800c466 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	f023 0308 	bic.w	r3, r3, #8
 800c452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	697a      	ldr	r2, [r7, #20]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	f023 0304 	bic.w	r3, r3, #4
 800c464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4a1c      	ldr	r2, [pc, #112]	; (800c4dc <TIM_OC1_SetConfig+0x10c>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d00f      	beq.n	800c48e <TIM_OC1_SetConfig+0xbe>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4a1b      	ldr	r2, [pc, #108]	; (800c4e0 <TIM_OC1_SetConfig+0x110>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d00b      	beq.n	800c48e <TIM_OC1_SetConfig+0xbe>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a1a      	ldr	r2, [pc, #104]	; (800c4e4 <TIM_OC1_SetConfig+0x114>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d007      	beq.n	800c48e <TIM_OC1_SetConfig+0xbe>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a19      	ldr	r2, [pc, #100]	; (800c4e8 <TIM_OC1_SetConfig+0x118>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d003      	beq.n	800c48e <TIM_OC1_SetConfig+0xbe>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a18      	ldr	r2, [pc, #96]	; (800c4ec <TIM_OC1_SetConfig+0x11c>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d111      	bne.n	800c4b2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c49c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	695b      	ldr	r3, [r3, #20]
 800c4a2:	693a      	ldr	r2, [r7, #16]
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	699b      	ldr	r3, [r3, #24]
 800c4ac:	693a      	ldr	r2, [r7, #16]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	693a      	ldr	r2, [r7, #16]
 800c4b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	68fa      	ldr	r2, [r7, #12]
 800c4bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	685a      	ldr	r2, [r3, #4]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	697a      	ldr	r2, [r7, #20]
 800c4ca:	621a      	str	r2, [r3, #32]
}
 800c4cc:	bf00      	nop
 800c4ce:	371c      	adds	r7, #28
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	fffeff8f 	.word	0xfffeff8f
 800c4dc:	40010000 	.word	0x40010000
 800c4e0:	40010400 	.word	0x40010400
 800c4e4:	40014000 	.word	0x40014000
 800c4e8:	40014400 	.word	0x40014400
 800c4ec:	40014800 	.word	0x40014800

0800c4f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b087      	sub	sp, #28
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a1b      	ldr	r3, [r3, #32]
 800c4fe:	f023 0210 	bic.w	r2, r3, #16
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6a1b      	ldr	r3, [r3, #32]
 800c50a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	699b      	ldr	r3, [r3, #24]
 800c516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	4b34      	ldr	r3, [pc, #208]	; (800c5ec <TIM_OC2_SetConfig+0xfc>)
 800c51c:	4013      	ands	r3, r2
 800c51e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	021b      	lsls	r3, r3, #8
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	4313      	orrs	r3, r2
 800c532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	f023 0320 	bic.w	r3, r3, #32
 800c53a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	011b      	lsls	r3, r3, #4
 800c542:	697a      	ldr	r2, [r7, #20]
 800c544:	4313      	orrs	r3, r2
 800c546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	4a29      	ldr	r2, [pc, #164]	; (800c5f0 <TIM_OC2_SetConfig+0x100>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d003      	beq.n	800c558 <TIM_OC2_SetConfig+0x68>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	4a28      	ldr	r2, [pc, #160]	; (800c5f4 <TIM_OC2_SetConfig+0x104>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d10d      	bne.n	800c574 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c55e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	011b      	lsls	r3, r3, #4
 800c566:	697a      	ldr	r2, [r7, #20]
 800c568:	4313      	orrs	r3, r2
 800c56a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c572:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4a1e      	ldr	r2, [pc, #120]	; (800c5f0 <TIM_OC2_SetConfig+0x100>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d00f      	beq.n	800c59c <TIM_OC2_SetConfig+0xac>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4a1d      	ldr	r2, [pc, #116]	; (800c5f4 <TIM_OC2_SetConfig+0x104>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d00b      	beq.n	800c59c <TIM_OC2_SetConfig+0xac>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4a1c      	ldr	r2, [pc, #112]	; (800c5f8 <TIM_OC2_SetConfig+0x108>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d007      	beq.n	800c59c <TIM_OC2_SetConfig+0xac>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a1b      	ldr	r2, [pc, #108]	; (800c5fc <TIM_OC2_SetConfig+0x10c>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d003      	beq.n	800c59c <TIM_OC2_SetConfig+0xac>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4a1a      	ldr	r2, [pc, #104]	; (800c600 <TIM_OC2_SetConfig+0x110>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d113      	bne.n	800c5c4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c5a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c5aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	693a      	ldr	r2, [r7, #16]
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	699b      	ldr	r3, [r3, #24]
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	693a      	ldr	r2, [r7, #16]
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	693a      	ldr	r2, [r7, #16]
 800c5c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	685a      	ldr	r2, [r3, #4]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	697a      	ldr	r2, [r7, #20]
 800c5dc:	621a      	str	r2, [r3, #32]
}
 800c5de:	bf00      	nop
 800c5e0:	371c      	adds	r7, #28
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop
 800c5ec:	feff8fff 	.word	0xfeff8fff
 800c5f0:	40010000 	.word	0x40010000
 800c5f4:	40010400 	.word	0x40010400
 800c5f8:	40014000 	.word	0x40014000
 800c5fc:	40014400 	.word	0x40014400
 800c600:	40014800 	.word	0x40014800

0800c604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c604:	b480      	push	{r7}
 800c606:	b087      	sub	sp, #28
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6a1b      	ldr	r3, [r3, #32]
 800c612:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	69db      	ldr	r3, [r3, #28]
 800c62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f023 0303 	bic.w	r3, r3, #3
 800c63a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	4313      	orrs	r3, r2
 800c644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c64c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	021b      	lsls	r3, r3, #8
 800c654:	697a      	ldr	r2, [r7, #20]
 800c656:	4313      	orrs	r3, r2
 800c658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4a27      	ldr	r2, [pc, #156]	; (800c6fc <TIM_OC3_SetConfig+0xf8>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d003      	beq.n	800c66a <TIM_OC3_SetConfig+0x66>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a26      	ldr	r2, [pc, #152]	; (800c700 <TIM_OC3_SetConfig+0xfc>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d10d      	bne.n	800c686 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	021b      	lsls	r3, r3, #8
 800c678:	697a      	ldr	r2, [r7, #20]
 800c67a:	4313      	orrs	r3, r2
 800c67c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4a1c      	ldr	r2, [pc, #112]	; (800c6fc <TIM_OC3_SetConfig+0xf8>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d00f      	beq.n	800c6ae <TIM_OC3_SetConfig+0xaa>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4a1b      	ldr	r2, [pc, #108]	; (800c700 <TIM_OC3_SetConfig+0xfc>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d00b      	beq.n	800c6ae <TIM_OC3_SetConfig+0xaa>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4a1a      	ldr	r2, [pc, #104]	; (800c704 <TIM_OC3_SetConfig+0x100>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d007      	beq.n	800c6ae <TIM_OC3_SetConfig+0xaa>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4a19      	ldr	r2, [pc, #100]	; (800c708 <TIM_OC3_SetConfig+0x104>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d003      	beq.n	800c6ae <TIM_OC3_SetConfig+0xaa>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4a18      	ldr	r2, [pc, #96]	; (800c70c <TIM_OC3_SetConfig+0x108>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d113      	bne.n	800c6d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c6bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	695b      	ldr	r3, [r3, #20]
 800c6c2:	011b      	lsls	r3, r3, #4
 800c6c4:	693a      	ldr	r2, [r7, #16]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	699b      	ldr	r3, [r3, #24]
 800c6ce:	011b      	lsls	r3, r3, #4
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	693a      	ldr	r2, [r7, #16]
 800c6da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	685a      	ldr	r2, [r3, #4]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	697a      	ldr	r2, [r7, #20]
 800c6ee:	621a      	str	r2, [r3, #32]
}
 800c6f0:	bf00      	nop
 800c6f2:	371c      	adds	r7, #28
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr
 800c6fc:	40010000 	.word	0x40010000
 800c700:	40010400 	.word	0x40010400
 800c704:	40014000 	.word	0x40014000
 800c708:	40014400 	.word	0x40014400
 800c70c:	40014800 	.word	0x40014800

0800c710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c710:	b480      	push	{r7}
 800c712:	b087      	sub	sp, #28
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6a1b      	ldr	r3, [r3, #32]
 800c71e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6a1b      	ldr	r3, [r3, #32]
 800c72a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	69db      	ldr	r3, [r3, #28]
 800c736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c73e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	021b      	lsls	r3, r3, #8
 800c74e:	68fa      	ldr	r2, [r7, #12]
 800c750:	4313      	orrs	r3, r2
 800c752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c75a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	031b      	lsls	r3, r3, #12
 800c762:	693a      	ldr	r2, [r7, #16]
 800c764:	4313      	orrs	r3, r2
 800c766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4a18      	ldr	r2, [pc, #96]	; (800c7cc <TIM_OC4_SetConfig+0xbc>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d00f      	beq.n	800c790 <TIM_OC4_SetConfig+0x80>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	4a17      	ldr	r2, [pc, #92]	; (800c7d0 <TIM_OC4_SetConfig+0xc0>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d00b      	beq.n	800c790 <TIM_OC4_SetConfig+0x80>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4a16      	ldr	r2, [pc, #88]	; (800c7d4 <TIM_OC4_SetConfig+0xc4>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d007      	beq.n	800c790 <TIM_OC4_SetConfig+0x80>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4a15      	ldr	r2, [pc, #84]	; (800c7d8 <TIM_OC4_SetConfig+0xc8>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d003      	beq.n	800c790 <TIM_OC4_SetConfig+0x80>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4a14      	ldr	r2, [pc, #80]	; (800c7dc <TIM_OC4_SetConfig+0xcc>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d109      	bne.n	800c7a4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	695b      	ldr	r3, [r3, #20]
 800c79c:	019b      	lsls	r3, r3, #6
 800c79e:	697a      	ldr	r2, [r7, #20]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	685a      	ldr	r2, [r3, #4]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	693a      	ldr	r2, [r7, #16]
 800c7bc:	621a      	str	r2, [r3, #32]
}
 800c7be:	bf00      	nop
 800c7c0:	371c      	adds	r7, #28
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	40010000 	.word	0x40010000
 800c7d0:	40010400 	.word	0x40010400
 800c7d4:	40014000 	.word	0x40014000
 800c7d8:	40014400 	.word	0x40014400
 800c7dc:	40014800 	.word	0x40014800

0800c7e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b087      	sub	sp, #28
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6a1b      	ldr	r3, [r3, #32]
 800c7fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c80e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	4313      	orrs	r3, r2
 800c818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c820:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	041b      	lsls	r3, r3, #16
 800c828:	693a      	ldr	r2, [r7, #16]
 800c82a:	4313      	orrs	r3, r2
 800c82c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4a17      	ldr	r2, [pc, #92]	; (800c890 <TIM_OC5_SetConfig+0xb0>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d00f      	beq.n	800c856 <TIM_OC5_SetConfig+0x76>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	4a16      	ldr	r2, [pc, #88]	; (800c894 <TIM_OC5_SetConfig+0xb4>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d00b      	beq.n	800c856 <TIM_OC5_SetConfig+0x76>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	4a15      	ldr	r2, [pc, #84]	; (800c898 <TIM_OC5_SetConfig+0xb8>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d007      	beq.n	800c856 <TIM_OC5_SetConfig+0x76>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	4a14      	ldr	r2, [pc, #80]	; (800c89c <TIM_OC5_SetConfig+0xbc>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d003      	beq.n	800c856 <TIM_OC5_SetConfig+0x76>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4a13      	ldr	r2, [pc, #76]	; (800c8a0 <TIM_OC5_SetConfig+0xc0>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d109      	bne.n	800c86a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c85c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	695b      	ldr	r3, [r3, #20]
 800c862:	021b      	lsls	r3, r3, #8
 800c864:	697a      	ldr	r2, [r7, #20]
 800c866:	4313      	orrs	r3, r2
 800c868:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	697a      	ldr	r2, [r7, #20]
 800c86e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	685a      	ldr	r2, [r3, #4]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	693a      	ldr	r2, [r7, #16]
 800c882:	621a      	str	r2, [r3, #32]
}
 800c884:	bf00      	nop
 800c886:	371c      	adds	r7, #28
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr
 800c890:	40010000 	.word	0x40010000
 800c894:	40010400 	.word	0x40010400
 800c898:	40014000 	.word	0x40014000
 800c89c:	40014400 	.word	0x40014400
 800c8a0:	40014800 	.word	0x40014800

0800c8a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b087      	sub	sp, #28
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6a1b      	ldr	r3, [r3, #32]
 800c8be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	021b      	lsls	r3, r3, #8
 800c8da:	68fa      	ldr	r2, [r7, #12]
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c8e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	051b      	lsls	r3, r3, #20
 800c8ee:	693a      	ldr	r2, [r7, #16]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4a18      	ldr	r2, [pc, #96]	; (800c958 <TIM_OC6_SetConfig+0xb4>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d00f      	beq.n	800c91c <TIM_OC6_SetConfig+0x78>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4a17      	ldr	r2, [pc, #92]	; (800c95c <TIM_OC6_SetConfig+0xb8>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d00b      	beq.n	800c91c <TIM_OC6_SetConfig+0x78>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	4a16      	ldr	r2, [pc, #88]	; (800c960 <TIM_OC6_SetConfig+0xbc>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d007      	beq.n	800c91c <TIM_OC6_SetConfig+0x78>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	4a15      	ldr	r2, [pc, #84]	; (800c964 <TIM_OC6_SetConfig+0xc0>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d003      	beq.n	800c91c <TIM_OC6_SetConfig+0x78>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4a14      	ldr	r2, [pc, #80]	; (800c968 <TIM_OC6_SetConfig+0xc4>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d109      	bne.n	800c930 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c922:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	695b      	ldr	r3, [r3, #20]
 800c928:	029b      	lsls	r3, r3, #10
 800c92a:	697a      	ldr	r2, [r7, #20]
 800c92c:	4313      	orrs	r3, r2
 800c92e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	697a      	ldr	r2, [r7, #20]
 800c934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	685a      	ldr	r2, [r3, #4]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	693a      	ldr	r2, [r7, #16]
 800c948:	621a      	str	r2, [r3, #32]
}
 800c94a:	bf00      	nop
 800c94c:	371c      	adds	r7, #28
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop
 800c958:	40010000 	.word	0x40010000
 800c95c:	40010400 	.word	0x40010400
 800c960:	40014000 	.word	0x40014000
 800c964:	40014400 	.word	0x40014400
 800c968:	40014800 	.word	0x40014800

0800c96c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d101      	bne.n	800c984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c980:	2302      	movs	r3, #2
 800c982:	e068      	b.n	800ca56 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2201      	movs	r2, #1
 800c988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2202      	movs	r2, #2
 800c990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a2e      	ldr	r2, [pc, #184]	; (800ca64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d004      	beq.n	800c9b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a2d      	ldr	r2, [pc, #180]	; (800ca68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d108      	bne.n	800c9ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c9be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	68fa      	ldr	r2, [r7, #12]
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a1e      	ldr	r2, [pc, #120]	; (800ca64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d01d      	beq.n	800ca2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9f6:	d018      	beq.n	800ca2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a1b      	ldr	r2, [pc, #108]	; (800ca6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d013      	beq.n	800ca2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a1a      	ldr	r2, [pc, #104]	; (800ca70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d00e      	beq.n	800ca2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a18      	ldr	r2, [pc, #96]	; (800ca74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d009      	beq.n	800ca2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a13      	ldr	r2, [pc, #76]	; (800ca68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d004      	beq.n	800ca2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a14      	ldr	r2, [pc, #80]	; (800ca78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d10c      	bne.n	800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	68ba      	ldr	r2, [r7, #8]
 800ca42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2201      	movs	r2, #1
 800ca48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3714      	adds	r7, #20
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	40010000 	.word	0x40010000
 800ca68:	40010400 	.word	0x40010400
 800ca6c:	40000400 	.word	0x40000400
 800ca70:	40000800 	.word	0x40000800
 800ca74:	40000c00 	.word	0x40000c00
 800ca78:	40001800 	.word	0x40001800

0800ca7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ca86:	2300      	movs	r3, #0
 800ca88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d101      	bne.n	800ca98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ca94:	2302      	movs	r3, #2
 800ca96:	e065      	b.n	800cb64 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	4313      	orrs	r3, r2
 800caac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	4313      	orrs	r3, r2
 800caba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	4313      	orrs	r3, r2
 800cac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4313      	orrs	r3, r2
 800cad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	4313      	orrs	r3, r2
 800cae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	695b      	ldr	r3, [r3, #20]
 800caf0:	4313      	orrs	r3, r2
 800caf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cafe:	4313      	orrs	r3, r2
 800cb00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	699b      	ldr	r3, [r3, #24]
 800cb0c:	041b      	lsls	r3, r3, #16
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a16      	ldr	r2, [pc, #88]	; (800cb70 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d004      	beq.n	800cb26 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a14      	ldr	r2, [pc, #80]	; (800cb74 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d115      	bne.n	800cb52 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb30:	051b      	lsls	r3, r3, #20
 800cb32:	4313      	orrs	r3, r2
 800cb34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	69db      	ldr	r3, [r3, #28]
 800cb40:	4313      	orrs	r3, r2
 800cb42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	6a1b      	ldr	r3, [r3, #32]
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	68fa      	ldr	r2, [r7, #12]
 800cb58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3714      	adds	r7, #20
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr
 800cb70:	40010000 	.word	0x40010000
 800cb74:	40010400 	.word	0x40010400

0800cb78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d101      	bne.n	800cb8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb86:	2301      	movs	r3, #1
 800cb88:	e042      	b.n	800cc10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d106      	bne.n	800cba2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f7f5 fdeb 	bl	8002778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2224      	movs	r2, #36	; 0x24
 800cba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f022 0201 	bic.w	r2, r2, #1
 800cbb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 f82c 	bl	800cc18 <UART_SetConfig>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d101      	bne.n	800cbca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e022      	b.n	800cc10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d002      	beq.n	800cbd8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 fd80 	bl	800d6d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	685a      	ldr	r2, [r3, #4]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	689a      	ldr	r2, [r3, #8]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f042 0201 	orr.w	r2, r2, #1
 800cc06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 fe07 	bl	800d81c <UART_CheckIdleState>
 800cc0e:	4603      	mov	r3, r0
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3708      	adds	r7, #8
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc18:	b5b0      	push	{r4, r5, r7, lr}
 800cc1a:	b08e      	sub	sp, #56	; 0x38
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cc20:	2300      	movs	r3, #0
 800cc22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	689a      	ldr	r2, [r3, #8]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	431a      	orrs	r2, r3
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	695b      	ldr	r3, [r3, #20]
 800cc34:	431a      	orrs	r2, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	69db      	ldr	r3, [r3, #28]
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	4bbf      	ldr	r3, [pc, #764]	; (800cf44 <UART_SetConfig+0x32c>)
 800cc46:	4013      	ands	r3, r2
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	6812      	ldr	r2, [r2, #0]
 800cc4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc4e:	430b      	orrs	r3, r1
 800cc50:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	68da      	ldr	r2, [r3, #12]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	430a      	orrs	r2, r1
 800cc66:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	699b      	ldr	r3, [r3, #24]
 800cc6c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4ab5      	ldr	r2, [pc, #724]	; (800cf48 <UART_SetConfig+0x330>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d004      	beq.n	800cc82 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6a1b      	ldr	r3, [r3, #32]
 800cc7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	689a      	ldr	r2, [r3, #8]
 800cc88:	4bb0      	ldr	r3, [pc, #704]	; (800cf4c <UART_SetConfig+0x334>)
 800cc8a:	4013      	ands	r3, r2
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	6812      	ldr	r2, [r2, #0]
 800cc90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc92:	430b      	orrs	r3, r1
 800cc94:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9c:	f023 010f 	bic.w	r1, r3, #15
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	430a      	orrs	r2, r1
 800ccaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4aa7      	ldr	r2, [pc, #668]	; (800cf50 <UART_SetConfig+0x338>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d176      	bne.n	800cda4 <UART_SetConfig+0x18c>
 800ccb6:	4ba7      	ldr	r3, [pc, #668]	; (800cf54 <UART_SetConfig+0x33c>)
 800ccb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ccbe:	2b28      	cmp	r3, #40	; 0x28
 800ccc0:	d86c      	bhi.n	800cd9c <UART_SetConfig+0x184>
 800ccc2:	a201      	add	r2, pc, #4	; (adr r2, 800ccc8 <UART_SetConfig+0xb0>)
 800ccc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc8:	0800cd6d 	.word	0x0800cd6d
 800cccc:	0800cd9d 	.word	0x0800cd9d
 800ccd0:	0800cd9d 	.word	0x0800cd9d
 800ccd4:	0800cd9d 	.word	0x0800cd9d
 800ccd8:	0800cd9d 	.word	0x0800cd9d
 800ccdc:	0800cd9d 	.word	0x0800cd9d
 800cce0:	0800cd9d 	.word	0x0800cd9d
 800cce4:	0800cd9d 	.word	0x0800cd9d
 800cce8:	0800cd75 	.word	0x0800cd75
 800ccec:	0800cd9d 	.word	0x0800cd9d
 800ccf0:	0800cd9d 	.word	0x0800cd9d
 800ccf4:	0800cd9d 	.word	0x0800cd9d
 800ccf8:	0800cd9d 	.word	0x0800cd9d
 800ccfc:	0800cd9d 	.word	0x0800cd9d
 800cd00:	0800cd9d 	.word	0x0800cd9d
 800cd04:	0800cd9d 	.word	0x0800cd9d
 800cd08:	0800cd7d 	.word	0x0800cd7d
 800cd0c:	0800cd9d 	.word	0x0800cd9d
 800cd10:	0800cd9d 	.word	0x0800cd9d
 800cd14:	0800cd9d 	.word	0x0800cd9d
 800cd18:	0800cd9d 	.word	0x0800cd9d
 800cd1c:	0800cd9d 	.word	0x0800cd9d
 800cd20:	0800cd9d 	.word	0x0800cd9d
 800cd24:	0800cd9d 	.word	0x0800cd9d
 800cd28:	0800cd85 	.word	0x0800cd85
 800cd2c:	0800cd9d 	.word	0x0800cd9d
 800cd30:	0800cd9d 	.word	0x0800cd9d
 800cd34:	0800cd9d 	.word	0x0800cd9d
 800cd38:	0800cd9d 	.word	0x0800cd9d
 800cd3c:	0800cd9d 	.word	0x0800cd9d
 800cd40:	0800cd9d 	.word	0x0800cd9d
 800cd44:	0800cd9d 	.word	0x0800cd9d
 800cd48:	0800cd8d 	.word	0x0800cd8d
 800cd4c:	0800cd9d 	.word	0x0800cd9d
 800cd50:	0800cd9d 	.word	0x0800cd9d
 800cd54:	0800cd9d 	.word	0x0800cd9d
 800cd58:	0800cd9d 	.word	0x0800cd9d
 800cd5c:	0800cd9d 	.word	0x0800cd9d
 800cd60:	0800cd9d 	.word	0x0800cd9d
 800cd64:	0800cd9d 	.word	0x0800cd9d
 800cd68:	0800cd95 	.word	0x0800cd95
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd72:	e222      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cd74:	2304      	movs	r3, #4
 800cd76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd7a:	e21e      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cd7c:	2308      	movs	r3, #8
 800cd7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd82:	e21a      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cd84:	2310      	movs	r3, #16
 800cd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd8a:	e216      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cd8c:	2320      	movs	r3, #32
 800cd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd92:	e212      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cd94:	2340      	movs	r3, #64	; 0x40
 800cd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd9a:	e20e      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cd9c:	2380      	movs	r3, #128	; 0x80
 800cd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cda2:	e20a      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a6b      	ldr	r2, [pc, #428]	; (800cf58 <UART_SetConfig+0x340>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d130      	bne.n	800ce10 <UART_SetConfig+0x1f8>
 800cdae:	4b69      	ldr	r3, [pc, #420]	; (800cf54 <UART_SetConfig+0x33c>)
 800cdb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdb2:	f003 0307 	and.w	r3, r3, #7
 800cdb6:	2b05      	cmp	r3, #5
 800cdb8:	d826      	bhi.n	800ce08 <UART_SetConfig+0x1f0>
 800cdba:	a201      	add	r2, pc, #4	; (adr r2, 800cdc0 <UART_SetConfig+0x1a8>)
 800cdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc0:	0800cdd9 	.word	0x0800cdd9
 800cdc4:	0800cde1 	.word	0x0800cde1
 800cdc8:	0800cde9 	.word	0x0800cde9
 800cdcc:	0800cdf1 	.word	0x0800cdf1
 800cdd0:	0800cdf9 	.word	0x0800cdf9
 800cdd4:	0800ce01 	.word	0x0800ce01
 800cdd8:	2300      	movs	r3, #0
 800cdda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdde:	e1ec      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cde0:	2304      	movs	r3, #4
 800cde2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cde6:	e1e8      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cde8:	2308      	movs	r3, #8
 800cdea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdee:	e1e4      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cdf0:	2310      	movs	r3, #16
 800cdf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdf6:	e1e0      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cdf8:	2320      	movs	r3, #32
 800cdfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdfe:	e1dc      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800ce00:	2340      	movs	r3, #64	; 0x40
 800ce02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce06:	e1d8      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800ce08:	2380      	movs	r3, #128	; 0x80
 800ce0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce0e:	e1d4      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a51      	ldr	r2, [pc, #324]	; (800cf5c <UART_SetConfig+0x344>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d130      	bne.n	800ce7c <UART_SetConfig+0x264>
 800ce1a:	4b4e      	ldr	r3, [pc, #312]	; (800cf54 <UART_SetConfig+0x33c>)
 800ce1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce1e:	f003 0307 	and.w	r3, r3, #7
 800ce22:	2b05      	cmp	r3, #5
 800ce24:	d826      	bhi.n	800ce74 <UART_SetConfig+0x25c>
 800ce26:	a201      	add	r2, pc, #4	; (adr r2, 800ce2c <UART_SetConfig+0x214>)
 800ce28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce2c:	0800ce45 	.word	0x0800ce45
 800ce30:	0800ce4d 	.word	0x0800ce4d
 800ce34:	0800ce55 	.word	0x0800ce55
 800ce38:	0800ce5d 	.word	0x0800ce5d
 800ce3c:	0800ce65 	.word	0x0800ce65
 800ce40:	0800ce6d 	.word	0x0800ce6d
 800ce44:	2300      	movs	r3, #0
 800ce46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce4a:	e1b6      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800ce4c:	2304      	movs	r3, #4
 800ce4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce52:	e1b2      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800ce54:	2308      	movs	r3, #8
 800ce56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce5a:	e1ae      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800ce5c:	2310      	movs	r3, #16
 800ce5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce62:	e1aa      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800ce64:	2320      	movs	r3, #32
 800ce66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce6a:	e1a6      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800ce6c:	2340      	movs	r3, #64	; 0x40
 800ce6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce72:	e1a2      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800ce74:	2380      	movs	r3, #128	; 0x80
 800ce76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce7a:	e19e      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a37      	ldr	r2, [pc, #220]	; (800cf60 <UART_SetConfig+0x348>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d130      	bne.n	800cee8 <UART_SetConfig+0x2d0>
 800ce86:	4b33      	ldr	r3, [pc, #204]	; (800cf54 <UART_SetConfig+0x33c>)
 800ce88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce8a:	f003 0307 	and.w	r3, r3, #7
 800ce8e:	2b05      	cmp	r3, #5
 800ce90:	d826      	bhi.n	800cee0 <UART_SetConfig+0x2c8>
 800ce92:	a201      	add	r2, pc, #4	; (adr r2, 800ce98 <UART_SetConfig+0x280>)
 800ce94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce98:	0800ceb1 	.word	0x0800ceb1
 800ce9c:	0800ceb9 	.word	0x0800ceb9
 800cea0:	0800cec1 	.word	0x0800cec1
 800cea4:	0800cec9 	.word	0x0800cec9
 800cea8:	0800ced1 	.word	0x0800ced1
 800ceac:	0800ced9 	.word	0x0800ced9
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceb6:	e180      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800ceb8:	2304      	movs	r3, #4
 800ceba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cebe:	e17c      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cec0:	2308      	movs	r3, #8
 800cec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cec6:	e178      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cec8:	2310      	movs	r3, #16
 800ceca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cece:	e174      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800ced0:	2320      	movs	r3, #32
 800ced2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ced6:	e170      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800ced8:	2340      	movs	r3, #64	; 0x40
 800ceda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cede:	e16c      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cee0:	2380      	movs	r3, #128	; 0x80
 800cee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cee6:	e168      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a1d      	ldr	r2, [pc, #116]	; (800cf64 <UART_SetConfig+0x34c>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d142      	bne.n	800cf78 <UART_SetConfig+0x360>
 800cef2:	4b18      	ldr	r3, [pc, #96]	; (800cf54 <UART_SetConfig+0x33c>)
 800cef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cef6:	f003 0307 	and.w	r3, r3, #7
 800cefa:	2b05      	cmp	r3, #5
 800cefc:	d838      	bhi.n	800cf70 <UART_SetConfig+0x358>
 800cefe:	a201      	add	r2, pc, #4	; (adr r2, 800cf04 <UART_SetConfig+0x2ec>)
 800cf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf04:	0800cf1d 	.word	0x0800cf1d
 800cf08:	0800cf25 	.word	0x0800cf25
 800cf0c:	0800cf2d 	.word	0x0800cf2d
 800cf10:	0800cf35 	.word	0x0800cf35
 800cf14:	0800cf3d 	.word	0x0800cf3d
 800cf18:	0800cf69 	.word	0x0800cf69
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf22:	e14a      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cf24:	2304      	movs	r3, #4
 800cf26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf2a:	e146      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cf2c:	2308      	movs	r3, #8
 800cf2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf32:	e142      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cf34:	2310      	movs	r3, #16
 800cf36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf3a:	e13e      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cf3c:	2320      	movs	r3, #32
 800cf3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf42:	e13a      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cf44:	cfff69f3 	.word	0xcfff69f3
 800cf48:	58000c00 	.word	0x58000c00
 800cf4c:	11fff4ff 	.word	0x11fff4ff
 800cf50:	40011000 	.word	0x40011000
 800cf54:	58024400 	.word	0x58024400
 800cf58:	40004400 	.word	0x40004400
 800cf5c:	40004800 	.word	0x40004800
 800cf60:	40004c00 	.word	0x40004c00
 800cf64:	40005000 	.word	0x40005000
 800cf68:	2340      	movs	r3, #64	; 0x40
 800cf6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf6e:	e124      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cf70:	2380      	movs	r3, #128	; 0x80
 800cf72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf76:	e120      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4acc      	ldr	r2, [pc, #816]	; (800d2b0 <UART_SetConfig+0x698>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d176      	bne.n	800d070 <UART_SetConfig+0x458>
 800cf82:	4bcc      	ldr	r3, [pc, #816]	; (800d2b4 <UART_SetConfig+0x69c>)
 800cf84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf8a:	2b28      	cmp	r3, #40	; 0x28
 800cf8c:	d86c      	bhi.n	800d068 <UART_SetConfig+0x450>
 800cf8e:	a201      	add	r2, pc, #4	; (adr r2, 800cf94 <UART_SetConfig+0x37c>)
 800cf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf94:	0800d039 	.word	0x0800d039
 800cf98:	0800d069 	.word	0x0800d069
 800cf9c:	0800d069 	.word	0x0800d069
 800cfa0:	0800d069 	.word	0x0800d069
 800cfa4:	0800d069 	.word	0x0800d069
 800cfa8:	0800d069 	.word	0x0800d069
 800cfac:	0800d069 	.word	0x0800d069
 800cfb0:	0800d069 	.word	0x0800d069
 800cfb4:	0800d041 	.word	0x0800d041
 800cfb8:	0800d069 	.word	0x0800d069
 800cfbc:	0800d069 	.word	0x0800d069
 800cfc0:	0800d069 	.word	0x0800d069
 800cfc4:	0800d069 	.word	0x0800d069
 800cfc8:	0800d069 	.word	0x0800d069
 800cfcc:	0800d069 	.word	0x0800d069
 800cfd0:	0800d069 	.word	0x0800d069
 800cfd4:	0800d049 	.word	0x0800d049
 800cfd8:	0800d069 	.word	0x0800d069
 800cfdc:	0800d069 	.word	0x0800d069
 800cfe0:	0800d069 	.word	0x0800d069
 800cfe4:	0800d069 	.word	0x0800d069
 800cfe8:	0800d069 	.word	0x0800d069
 800cfec:	0800d069 	.word	0x0800d069
 800cff0:	0800d069 	.word	0x0800d069
 800cff4:	0800d051 	.word	0x0800d051
 800cff8:	0800d069 	.word	0x0800d069
 800cffc:	0800d069 	.word	0x0800d069
 800d000:	0800d069 	.word	0x0800d069
 800d004:	0800d069 	.word	0x0800d069
 800d008:	0800d069 	.word	0x0800d069
 800d00c:	0800d069 	.word	0x0800d069
 800d010:	0800d069 	.word	0x0800d069
 800d014:	0800d059 	.word	0x0800d059
 800d018:	0800d069 	.word	0x0800d069
 800d01c:	0800d069 	.word	0x0800d069
 800d020:	0800d069 	.word	0x0800d069
 800d024:	0800d069 	.word	0x0800d069
 800d028:	0800d069 	.word	0x0800d069
 800d02c:	0800d069 	.word	0x0800d069
 800d030:	0800d069 	.word	0x0800d069
 800d034:	0800d061 	.word	0x0800d061
 800d038:	2301      	movs	r3, #1
 800d03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d03e:	e0bc      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d040:	2304      	movs	r3, #4
 800d042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d046:	e0b8      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d048:	2308      	movs	r3, #8
 800d04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d04e:	e0b4      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d050:	2310      	movs	r3, #16
 800d052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d056:	e0b0      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d058:	2320      	movs	r3, #32
 800d05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d05e:	e0ac      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d060:	2340      	movs	r3, #64	; 0x40
 800d062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d066:	e0a8      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d068:	2380      	movs	r3, #128	; 0x80
 800d06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d06e:	e0a4      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a90      	ldr	r2, [pc, #576]	; (800d2b8 <UART_SetConfig+0x6a0>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d130      	bne.n	800d0dc <UART_SetConfig+0x4c4>
 800d07a:	4b8e      	ldr	r3, [pc, #568]	; (800d2b4 <UART_SetConfig+0x69c>)
 800d07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d07e:	f003 0307 	and.w	r3, r3, #7
 800d082:	2b05      	cmp	r3, #5
 800d084:	d826      	bhi.n	800d0d4 <UART_SetConfig+0x4bc>
 800d086:	a201      	add	r2, pc, #4	; (adr r2, 800d08c <UART_SetConfig+0x474>)
 800d088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d08c:	0800d0a5 	.word	0x0800d0a5
 800d090:	0800d0ad 	.word	0x0800d0ad
 800d094:	0800d0b5 	.word	0x0800d0b5
 800d098:	0800d0bd 	.word	0x0800d0bd
 800d09c:	0800d0c5 	.word	0x0800d0c5
 800d0a0:	0800d0cd 	.word	0x0800d0cd
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0aa:	e086      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d0ac:	2304      	movs	r3, #4
 800d0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0b2:	e082      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d0b4:	2308      	movs	r3, #8
 800d0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ba:	e07e      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d0bc:	2310      	movs	r3, #16
 800d0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0c2:	e07a      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d0c4:	2320      	movs	r3, #32
 800d0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ca:	e076      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d0cc:	2340      	movs	r3, #64	; 0x40
 800d0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0d2:	e072      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d0d4:	2380      	movs	r3, #128	; 0x80
 800d0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0da:	e06e      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a76      	ldr	r2, [pc, #472]	; (800d2bc <UART_SetConfig+0x6a4>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d130      	bne.n	800d148 <UART_SetConfig+0x530>
 800d0e6:	4b73      	ldr	r3, [pc, #460]	; (800d2b4 <UART_SetConfig+0x69c>)
 800d0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0ea:	f003 0307 	and.w	r3, r3, #7
 800d0ee:	2b05      	cmp	r3, #5
 800d0f0:	d826      	bhi.n	800d140 <UART_SetConfig+0x528>
 800d0f2:	a201      	add	r2, pc, #4	; (adr r2, 800d0f8 <UART_SetConfig+0x4e0>)
 800d0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f8:	0800d111 	.word	0x0800d111
 800d0fc:	0800d119 	.word	0x0800d119
 800d100:	0800d121 	.word	0x0800d121
 800d104:	0800d129 	.word	0x0800d129
 800d108:	0800d131 	.word	0x0800d131
 800d10c:	0800d139 	.word	0x0800d139
 800d110:	2300      	movs	r3, #0
 800d112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d116:	e050      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d118:	2304      	movs	r3, #4
 800d11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d11e:	e04c      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d120:	2308      	movs	r3, #8
 800d122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d126:	e048      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d128:	2310      	movs	r3, #16
 800d12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d12e:	e044      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d130:	2320      	movs	r3, #32
 800d132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d136:	e040      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d138:	2340      	movs	r3, #64	; 0x40
 800d13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d13e:	e03c      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d140:	2380      	movs	r3, #128	; 0x80
 800d142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d146:	e038      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a5c      	ldr	r2, [pc, #368]	; (800d2c0 <UART_SetConfig+0x6a8>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d130      	bne.n	800d1b4 <UART_SetConfig+0x59c>
 800d152:	4b58      	ldr	r3, [pc, #352]	; (800d2b4 <UART_SetConfig+0x69c>)
 800d154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d156:	f003 0307 	and.w	r3, r3, #7
 800d15a:	2b05      	cmp	r3, #5
 800d15c:	d826      	bhi.n	800d1ac <UART_SetConfig+0x594>
 800d15e:	a201      	add	r2, pc, #4	; (adr r2, 800d164 <UART_SetConfig+0x54c>)
 800d160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d164:	0800d17d 	.word	0x0800d17d
 800d168:	0800d185 	.word	0x0800d185
 800d16c:	0800d18d 	.word	0x0800d18d
 800d170:	0800d195 	.word	0x0800d195
 800d174:	0800d19d 	.word	0x0800d19d
 800d178:	0800d1a5 	.word	0x0800d1a5
 800d17c:	2302      	movs	r3, #2
 800d17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d182:	e01a      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d184:	2304      	movs	r3, #4
 800d186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d18a:	e016      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d18c:	2308      	movs	r3, #8
 800d18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d192:	e012      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d194:	2310      	movs	r3, #16
 800d196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d19a:	e00e      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d19c:	2320      	movs	r3, #32
 800d19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1a2:	e00a      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d1a4:	2340      	movs	r3, #64	; 0x40
 800d1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1aa:	e006      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d1ac:	2380      	movs	r3, #128	; 0x80
 800d1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1b2:	e002      	b.n	800d1ba <UART_SetConfig+0x5a2>
 800d1b4:	2380      	movs	r3, #128	; 0x80
 800d1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a40      	ldr	r2, [pc, #256]	; (800d2c0 <UART_SetConfig+0x6a8>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	f040 80ef 	bne.w	800d3a4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d1c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1ca:	2b20      	cmp	r3, #32
 800d1cc:	dc46      	bgt.n	800d25c <UART_SetConfig+0x644>
 800d1ce:	2b02      	cmp	r3, #2
 800d1d0:	f2c0 8081 	blt.w	800d2d6 <UART_SetConfig+0x6be>
 800d1d4:	3b02      	subs	r3, #2
 800d1d6:	2b1e      	cmp	r3, #30
 800d1d8:	d87d      	bhi.n	800d2d6 <UART_SetConfig+0x6be>
 800d1da:	a201      	add	r2, pc, #4	; (adr r2, 800d1e0 <UART_SetConfig+0x5c8>)
 800d1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e0:	0800d263 	.word	0x0800d263
 800d1e4:	0800d2d7 	.word	0x0800d2d7
 800d1e8:	0800d26b 	.word	0x0800d26b
 800d1ec:	0800d2d7 	.word	0x0800d2d7
 800d1f0:	0800d2d7 	.word	0x0800d2d7
 800d1f4:	0800d2d7 	.word	0x0800d2d7
 800d1f8:	0800d27b 	.word	0x0800d27b
 800d1fc:	0800d2d7 	.word	0x0800d2d7
 800d200:	0800d2d7 	.word	0x0800d2d7
 800d204:	0800d2d7 	.word	0x0800d2d7
 800d208:	0800d2d7 	.word	0x0800d2d7
 800d20c:	0800d2d7 	.word	0x0800d2d7
 800d210:	0800d2d7 	.word	0x0800d2d7
 800d214:	0800d2d7 	.word	0x0800d2d7
 800d218:	0800d28b 	.word	0x0800d28b
 800d21c:	0800d2d7 	.word	0x0800d2d7
 800d220:	0800d2d7 	.word	0x0800d2d7
 800d224:	0800d2d7 	.word	0x0800d2d7
 800d228:	0800d2d7 	.word	0x0800d2d7
 800d22c:	0800d2d7 	.word	0x0800d2d7
 800d230:	0800d2d7 	.word	0x0800d2d7
 800d234:	0800d2d7 	.word	0x0800d2d7
 800d238:	0800d2d7 	.word	0x0800d2d7
 800d23c:	0800d2d7 	.word	0x0800d2d7
 800d240:	0800d2d7 	.word	0x0800d2d7
 800d244:	0800d2d7 	.word	0x0800d2d7
 800d248:	0800d2d7 	.word	0x0800d2d7
 800d24c:	0800d2d7 	.word	0x0800d2d7
 800d250:	0800d2d7 	.word	0x0800d2d7
 800d254:	0800d2d7 	.word	0x0800d2d7
 800d258:	0800d2c9 	.word	0x0800d2c9
 800d25c:	2b40      	cmp	r3, #64	; 0x40
 800d25e:	d036      	beq.n	800d2ce <UART_SetConfig+0x6b6>
 800d260:	e039      	b.n	800d2d6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d262:	f7fc fe31 	bl	8009ec8 <HAL_RCCEx_GetD3PCLK1Freq>
 800d266:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d268:	e03b      	b.n	800d2e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d26a:	f107 0314 	add.w	r3, r7, #20
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fc fe40 	bl	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d278:	e033      	b.n	800d2e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d27a:	f107 0308 	add.w	r3, r7, #8
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fc ff8c 	bl	800a19c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d288:	e02b      	b.n	800d2e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d28a:	4b0a      	ldr	r3, [pc, #40]	; (800d2b4 <UART_SetConfig+0x69c>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f003 0320 	and.w	r3, r3, #32
 800d292:	2b00      	cmp	r3, #0
 800d294:	d009      	beq.n	800d2aa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d296:	4b07      	ldr	r3, [pc, #28]	; (800d2b4 <UART_SetConfig+0x69c>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	08db      	lsrs	r3, r3, #3
 800d29c:	f003 0303 	and.w	r3, r3, #3
 800d2a0:	4a08      	ldr	r2, [pc, #32]	; (800d2c4 <UART_SetConfig+0x6ac>)
 800d2a2:	fa22 f303 	lsr.w	r3, r2, r3
 800d2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2a8:	e01b      	b.n	800d2e2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d2aa:	4b06      	ldr	r3, [pc, #24]	; (800d2c4 <UART_SetConfig+0x6ac>)
 800d2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2ae:	e018      	b.n	800d2e2 <UART_SetConfig+0x6ca>
 800d2b0:	40011400 	.word	0x40011400
 800d2b4:	58024400 	.word	0x58024400
 800d2b8:	40007800 	.word	0x40007800
 800d2bc:	40007c00 	.word	0x40007c00
 800d2c0:	58000c00 	.word	0x58000c00
 800d2c4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2c8:	4bc4      	ldr	r3, [pc, #784]	; (800d5dc <UART_SetConfig+0x9c4>)
 800d2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2cc:	e009      	b.n	800d2e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2d4:	e005      	b.n	800d2e2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d2e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f000 81da 	beq.w	800d69e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ee:	4abc      	ldr	r2, [pc, #752]	; (800d5e0 <UART_SetConfig+0x9c8>)
 800d2f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2fc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	685a      	ldr	r2, [r3, #4]
 800d302:	4613      	mov	r3, r2
 800d304:	005b      	lsls	r3, r3, #1
 800d306:	4413      	add	r3, r2
 800d308:	6a3a      	ldr	r2, [r7, #32]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d305      	bcc.n	800d31a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d314:	6a3a      	ldr	r2, [r7, #32]
 800d316:	429a      	cmp	r2, r3
 800d318:	d903      	bls.n	800d322 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d31a:	2301      	movs	r3, #1
 800d31c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d320:	e1bd      	b.n	800d69e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d324:	4618      	mov	r0, r3
 800d326:	f04f 0100 	mov.w	r1, #0
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32e:	4aac      	ldr	r2, [pc, #688]	; (800d5e0 <UART_SetConfig+0x9c8>)
 800d330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d334:	b29a      	uxth	r2, r3
 800d336:	f04f 0300 	mov.w	r3, #0
 800d33a:	f7f3 f9e5 	bl	8000708 <__aeabi_uldivmod>
 800d33e:	4602      	mov	r2, r0
 800d340:	460b      	mov	r3, r1
 800d342:	4610      	mov	r0, r2
 800d344:	4619      	mov	r1, r3
 800d346:	f04f 0200 	mov.w	r2, #0
 800d34a:	f04f 0300 	mov.w	r3, #0
 800d34e:	020b      	lsls	r3, r1, #8
 800d350:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d354:	0202      	lsls	r2, r0, #8
 800d356:	6879      	ldr	r1, [r7, #4]
 800d358:	6849      	ldr	r1, [r1, #4]
 800d35a:	0849      	lsrs	r1, r1, #1
 800d35c:	4608      	mov	r0, r1
 800d35e:	f04f 0100 	mov.w	r1, #0
 800d362:	1814      	adds	r4, r2, r0
 800d364:	eb43 0501 	adc.w	r5, r3, r1
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	461a      	mov	r2, r3
 800d36e:	f04f 0300 	mov.w	r3, #0
 800d372:	4620      	mov	r0, r4
 800d374:	4629      	mov	r1, r5
 800d376:	f7f3 f9c7 	bl	8000708 <__aeabi_uldivmod>
 800d37a:	4602      	mov	r2, r0
 800d37c:	460b      	mov	r3, r1
 800d37e:	4613      	mov	r3, r2
 800d380:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d384:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d388:	d308      	bcc.n	800d39c <UART_SetConfig+0x784>
 800d38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d390:	d204      	bcs.n	800d39c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d398:	60da      	str	r2, [r3, #12]
 800d39a:	e180      	b.n	800d69e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d39c:	2301      	movs	r3, #1
 800d39e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d3a2:	e17c      	b.n	800d69e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	69db      	ldr	r3, [r3, #28]
 800d3a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3ac:	f040 80bf 	bne.w	800d52e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800d3b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d3b4:	2b20      	cmp	r3, #32
 800d3b6:	dc49      	bgt.n	800d44c <UART_SetConfig+0x834>
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	db7c      	blt.n	800d4b6 <UART_SetConfig+0x89e>
 800d3bc:	2b20      	cmp	r3, #32
 800d3be:	d87a      	bhi.n	800d4b6 <UART_SetConfig+0x89e>
 800d3c0:	a201      	add	r2, pc, #4	; (adr r2, 800d3c8 <UART_SetConfig+0x7b0>)
 800d3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3c6:	bf00      	nop
 800d3c8:	0800d453 	.word	0x0800d453
 800d3cc:	0800d45b 	.word	0x0800d45b
 800d3d0:	0800d4b7 	.word	0x0800d4b7
 800d3d4:	0800d4b7 	.word	0x0800d4b7
 800d3d8:	0800d463 	.word	0x0800d463
 800d3dc:	0800d4b7 	.word	0x0800d4b7
 800d3e0:	0800d4b7 	.word	0x0800d4b7
 800d3e4:	0800d4b7 	.word	0x0800d4b7
 800d3e8:	0800d473 	.word	0x0800d473
 800d3ec:	0800d4b7 	.word	0x0800d4b7
 800d3f0:	0800d4b7 	.word	0x0800d4b7
 800d3f4:	0800d4b7 	.word	0x0800d4b7
 800d3f8:	0800d4b7 	.word	0x0800d4b7
 800d3fc:	0800d4b7 	.word	0x0800d4b7
 800d400:	0800d4b7 	.word	0x0800d4b7
 800d404:	0800d4b7 	.word	0x0800d4b7
 800d408:	0800d483 	.word	0x0800d483
 800d40c:	0800d4b7 	.word	0x0800d4b7
 800d410:	0800d4b7 	.word	0x0800d4b7
 800d414:	0800d4b7 	.word	0x0800d4b7
 800d418:	0800d4b7 	.word	0x0800d4b7
 800d41c:	0800d4b7 	.word	0x0800d4b7
 800d420:	0800d4b7 	.word	0x0800d4b7
 800d424:	0800d4b7 	.word	0x0800d4b7
 800d428:	0800d4b7 	.word	0x0800d4b7
 800d42c:	0800d4b7 	.word	0x0800d4b7
 800d430:	0800d4b7 	.word	0x0800d4b7
 800d434:	0800d4b7 	.word	0x0800d4b7
 800d438:	0800d4b7 	.word	0x0800d4b7
 800d43c:	0800d4b7 	.word	0x0800d4b7
 800d440:	0800d4b7 	.word	0x0800d4b7
 800d444:	0800d4b7 	.word	0x0800d4b7
 800d448:	0800d4a9 	.word	0x0800d4a9
 800d44c:	2b40      	cmp	r3, #64	; 0x40
 800d44e:	d02e      	beq.n	800d4ae <UART_SetConfig+0x896>
 800d450:	e031      	b.n	800d4b6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d452:	f7fb f8fb 	bl	800864c <HAL_RCC_GetPCLK1Freq>
 800d456:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d458:	e033      	b.n	800d4c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d45a:	f7fb f90d 	bl	8008678 <HAL_RCC_GetPCLK2Freq>
 800d45e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d460:	e02f      	b.n	800d4c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d462:	f107 0314 	add.w	r3, r7, #20
 800d466:	4618      	mov	r0, r3
 800d468:	f7fc fd44 	bl	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d470:	e027      	b.n	800d4c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d472:	f107 0308 	add.w	r3, r7, #8
 800d476:	4618      	mov	r0, r3
 800d478:	f7fc fe90 	bl	800a19c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d480:	e01f      	b.n	800d4c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d482:	4b58      	ldr	r3, [pc, #352]	; (800d5e4 <UART_SetConfig+0x9cc>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f003 0320 	and.w	r3, r3, #32
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d009      	beq.n	800d4a2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d48e:	4b55      	ldr	r3, [pc, #340]	; (800d5e4 <UART_SetConfig+0x9cc>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	08db      	lsrs	r3, r3, #3
 800d494:	f003 0303 	and.w	r3, r3, #3
 800d498:	4a53      	ldr	r2, [pc, #332]	; (800d5e8 <UART_SetConfig+0x9d0>)
 800d49a:	fa22 f303 	lsr.w	r3, r2, r3
 800d49e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d4a0:	e00f      	b.n	800d4c2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d4a2:	4b51      	ldr	r3, [pc, #324]	; (800d5e8 <UART_SetConfig+0x9d0>)
 800d4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4a6:	e00c      	b.n	800d4c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d4a8:	4b4c      	ldr	r3, [pc, #304]	; (800d5dc <UART_SetConfig+0x9c4>)
 800d4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4ac:	e009      	b.n	800d4c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4b4:	e005      	b.n	800d4c2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d4c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f000 80ea 	beq.w	800d69e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ce:	4a44      	ldr	r2, [pc, #272]	; (800d5e0 <UART_SetConfig+0x9c8>)
 800d4d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4dc:	005a      	lsls	r2, r3, #1
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	085b      	lsrs	r3, r3, #1
 800d4e4:	441a      	add	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f4:	2b0f      	cmp	r3, #15
 800d4f6:	d916      	bls.n	800d526 <UART_SetConfig+0x90e>
 800d4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4fe:	d212      	bcs.n	800d526 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d502:	b29b      	uxth	r3, r3
 800d504:	f023 030f 	bic.w	r3, r3, #15
 800d508:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50c:	085b      	lsrs	r3, r3, #1
 800d50e:	b29b      	uxth	r3, r3
 800d510:	f003 0307 	and.w	r3, r3, #7
 800d514:	b29a      	uxth	r2, r3
 800d516:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d518:	4313      	orrs	r3, r2
 800d51a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d522:	60da      	str	r2, [r3, #12]
 800d524:	e0bb      	b.n	800d69e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d526:	2301      	movs	r3, #1
 800d528:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d52c:	e0b7      	b.n	800d69e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d52e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d532:	2b20      	cmp	r3, #32
 800d534:	dc4a      	bgt.n	800d5cc <UART_SetConfig+0x9b4>
 800d536:	2b00      	cmp	r3, #0
 800d538:	f2c0 8086 	blt.w	800d648 <UART_SetConfig+0xa30>
 800d53c:	2b20      	cmp	r3, #32
 800d53e:	f200 8083 	bhi.w	800d648 <UART_SetConfig+0xa30>
 800d542:	a201      	add	r2, pc, #4	; (adr r2, 800d548 <UART_SetConfig+0x930>)
 800d544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d548:	0800d5d3 	.word	0x0800d5d3
 800d54c:	0800d5ed 	.word	0x0800d5ed
 800d550:	0800d649 	.word	0x0800d649
 800d554:	0800d649 	.word	0x0800d649
 800d558:	0800d5f5 	.word	0x0800d5f5
 800d55c:	0800d649 	.word	0x0800d649
 800d560:	0800d649 	.word	0x0800d649
 800d564:	0800d649 	.word	0x0800d649
 800d568:	0800d605 	.word	0x0800d605
 800d56c:	0800d649 	.word	0x0800d649
 800d570:	0800d649 	.word	0x0800d649
 800d574:	0800d649 	.word	0x0800d649
 800d578:	0800d649 	.word	0x0800d649
 800d57c:	0800d649 	.word	0x0800d649
 800d580:	0800d649 	.word	0x0800d649
 800d584:	0800d649 	.word	0x0800d649
 800d588:	0800d615 	.word	0x0800d615
 800d58c:	0800d649 	.word	0x0800d649
 800d590:	0800d649 	.word	0x0800d649
 800d594:	0800d649 	.word	0x0800d649
 800d598:	0800d649 	.word	0x0800d649
 800d59c:	0800d649 	.word	0x0800d649
 800d5a0:	0800d649 	.word	0x0800d649
 800d5a4:	0800d649 	.word	0x0800d649
 800d5a8:	0800d649 	.word	0x0800d649
 800d5ac:	0800d649 	.word	0x0800d649
 800d5b0:	0800d649 	.word	0x0800d649
 800d5b4:	0800d649 	.word	0x0800d649
 800d5b8:	0800d649 	.word	0x0800d649
 800d5bc:	0800d649 	.word	0x0800d649
 800d5c0:	0800d649 	.word	0x0800d649
 800d5c4:	0800d649 	.word	0x0800d649
 800d5c8:	0800d63b 	.word	0x0800d63b
 800d5cc:	2b40      	cmp	r3, #64	; 0x40
 800d5ce:	d037      	beq.n	800d640 <UART_SetConfig+0xa28>
 800d5d0:	e03a      	b.n	800d648 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5d2:	f7fb f83b 	bl	800864c <HAL_RCC_GetPCLK1Freq>
 800d5d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d5d8:	e03c      	b.n	800d654 <UART_SetConfig+0xa3c>
 800d5da:	bf00      	nop
 800d5dc:	003d0900 	.word	0x003d0900
 800d5e0:	08022794 	.word	0x08022794
 800d5e4:	58024400 	.word	0x58024400
 800d5e8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5ec:	f7fb f844 	bl	8008678 <HAL_RCC_GetPCLK2Freq>
 800d5f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d5f2:	e02f      	b.n	800d654 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5f4:	f107 0314 	add.w	r3, r7, #20
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7fc fc7b 	bl	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d602:	e027      	b.n	800d654 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d604:	f107 0308 	add.w	r3, r7, #8
 800d608:	4618      	mov	r0, r3
 800d60a:	f7fc fdc7 	bl	800a19c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d612:	e01f      	b.n	800d654 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d614:	4b2c      	ldr	r3, [pc, #176]	; (800d6c8 <UART_SetConfig+0xab0>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f003 0320 	and.w	r3, r3, #32
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d009      	beq.n	800d634 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d620:	4b29      	ldr	r3, [pc, #164]	; (800d6c8 <UART_SetConfig+0xab0>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	08db      	lsrs	r3, r3, #3
 800d626:	f003 0303 	and.w	r3, r3, #3
 800d62a:	4a28      	ldr	r2, [pc, #160]	; (800d6cc <UART_SetConfig+0xab4>)
 800d62c:	fa22 f303 	lsr.w	r3, r2, r3
 800d630:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d632:	e00f      	b.n	800d654 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d634:	4b25      	ldr	r3, [pc, #148]	; (800d6cc <UART_SetConfig+0xab4>)
 800d636:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d638:	e00c      	b.n	800d654 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d63a:	4b25      	ldr	r3, [pc, #148]	; (800d6d0 <UART_SetConfig+0xab8>)
 800d63c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d63e:	e009      	b.n	800d654 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d644:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d646:	e005      	b.n	800d654 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d648:	2300      	movs	r3, #0
 800d64a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d64c:	2301      	movs	r3, #1
 800d64e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d652:	bf00      	nop
    }

    if (pclk != 0U)
 800d654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d656:	2b00      	cmp	r3, #0
 800d658:	d021      	beq.n	800d69e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65e:	4a1d      	ldr	r2, [pc, #116]	; (800d6d4 <UART_SetConfig+0xabc>)
 800d660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d664:	461a      	mov	r2, r3
 800d666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d668:	fbb3 f2f2 	udiv	r2, r3, r2
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	085b      	lsrs	r3, r3, #1
 800d672:	441a      	add	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	fbb2 f3f3 	udiv	r3, r2, r3
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d682:	2b0f      	cmp	r3, #15
 800d684:	d908      	bls.n	800d698 <UART_SetConfig+0xa80>
 800d686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d68c:	d204      	bcs.n	800d698 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d694:	60da      	str	r2, [r3, #12]
 800d696:	e002      	b.n	800d69e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d698:	2301      	movs	r3, #1
 800d69a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d6ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3738      	adds	r7, #56	; 0x38
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bdb0      	pop	{r4, r5, r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	58024400 	.word	0x58024400
 800d6cc:	03d09000 	.word	0x03d09000
 800d6d0:	003d0900 	.word	0x003d0900
 800d6d4:	08022794 	.word	0x08022794

0800d6d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e4:	f003 0301 	and.w	r3, r3, #1
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d00a      	beq.n	800d702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	430a      	orrs	r2, r1
 800d700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d706:	f003 0302 	and.w	r3, r3, #2
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00a      	beq.n	800d724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	430a      	orrs	r2, r1
 800d722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d728:	f003 0304 	and.w	r3, r3, #4
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00a      	beq.n	800d746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	430a      	orrs	r2, r1
 800d744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d74a:	f003 0308 	and.w	r3, r3, #8
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d00a      	beq.n	800d768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	430a      	orrs	r2, r1
 800d766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d76c:	f003 0310 	and.w	r3, r3, #16
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00a      	beq.n	800d78a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	430a      	orrs	r2, r1
 800d788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d78e:	f003 0320 	and.w	r3, r3, #32
 800d792:	2b00      	cmp	r3, #0
 800d794:	d00a      	beq.n	800d7ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	689b      	ldr	r3, [r3, #8]
 800d79c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	430a      	orrs	r2, r1
 800d7aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d01a      	beq.n	800d7ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	430a      	orrs	r2, r1
 800d7cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d7d6:	d10a      	bne.n	800d7ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	430a      	orrs	r2, r1
 800d7ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00a      	beq.n	800d810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	430a      	orrs	r2, r1
 800d80e:	605a      	str	r2, [r3, #4]
  }
}
 800d810:	bf00      	nop
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b086      	sub	sp, #24
 800d820:	af02      	add	r7, sp, #8
 800d822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d82c:	f7f5 fa18 	bl	8002c60 <HAL_GetTick>
 800d830:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f003 0308 	and.w	r3, r3, #8
 800d83c:	2b08      	cmp	r3, #8
 800d83e:	d10e      	bne.n	800d85e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2200      	movs	r2, #0
 800d84a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 f82f 	bl	800d8b2 <UART_WaitOnFlagUntilTimeout>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d001      	beq.n	800d85e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d85a:	2303      	movs	r3, #3
 800d85c:	e025      	b.n	800d8aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f003 0304 	and.w	r3, r3, #4
 800d868:	2b04      	cmp	r3, #4
 800d86a:	d10e      	bne.n	800d88a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d86c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d870:	9300      	str	r3, [sp, #0]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 f819 	bl	800d8b2 <UART_WaitOnFlagUntilTimeout>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	d001      	beq.n	800d88a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d886:	2303      	movs	r3, #3
 800d888:	e00f      	b.n	800d8aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2220      	movs	r2, #32
 800d88e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2220      	movs	r2, #32
 800d896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8a8:	2300      	movs	r3, #0
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3710      	adds	r7, #16
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}

0800d8b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b084      	sub	sp, #16
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	60f8      	str	r0, [r7, #12]
 800d8ba:	60b9      	str	r1, [r7, #8]
 800d8bc:	603b      	str	r3, [r7, #0]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8c2:	e062      	b.n	800d98a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8ca:	d05e      	beq.n	800d98a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8cc:	f7f5 f9c8 	bl	8002c60 <HAL_GetTick>
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	1ad3      	subs	r3, r2, r3
 800d8d6:	69ba      	ldr	r2, [r7, #24]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d302      	bcc.n	800d8e2 <UART_WaitOnFlagUntilTimeout+0x30>
 800d8dc:	69bb      	ldr	r3, [r7, #24]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d11d      	bne.n	800d91e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d8f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	689a      	ldr	r2, [r3, #8]
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f022 0201 	bic.w	r2, r2, #1
 800d900:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2220      	movs	r2, #32
 800d906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2220      	movs	r2, #32
 800d90e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2200      	movs	r2, #0
 800d916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d91a:	2303      	movs	r3, #3
 800d91c:	e045      	b.n	800d9aa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f003 0304 	and.w	r3, r3, #4
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d02e      	beq.n	800d98a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	69db      	ldr	r3, [r3, #28]
 800d932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d93a:	d126      	bne.n	800d98a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d944:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d954:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	689a      	ldr	r2, [r3, #8]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f022 0201 	bic.w	r2, r2, #1
 800d964:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2220      	movs	r2, #32
 800d96a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2220      	movs	r2, #32
 800d972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2220      	movs	r2, #32
 800d97a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2200      	movs	r2, #0
 800d982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d986:	2303      	movs	r3, #3
 800d988:	e00f      	b.n	800d9aa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	69da      	ldr	r2, [r3, #28]
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	4013      	ands	r3, r2
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	429a      	cmp	r2, r3
 800d998:	bf0c      	ite	eq
 800d99a:	2301      	moveq	r3, #1
 800d99c:	2300      	movne	r3, #0
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	79fb      	ldrb	r3, [r7, #7]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d08d      	beq.n	800d8c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d9a8:	2300      	movs	r3, #0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3710      	adds	r7, #16
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}

0800d9b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d9b2:	b480      	push	{r7}
 800d9b4:	b085      	sub	sp, #20
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d101      	bne.n	800d9c8 <HAL_UARTEx_DisableFifoMode+0x16>
 800d9c4:	2302      	movs	r3, #2
 800d9c6:	e027      	b.n	800da18 <HAL_UARTEx_DisableFifoMode+0x66>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2224      	movs	r2, #36	; 0x24
 800d9d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f022 0201 	bic.w	r2, r2, #1
 800d9ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d9f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	68fa      	ldr	r2, [r7, #12]
 800da04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2220      	movs	r2, #32
 800da0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da16:	2300      	movs	r3, #0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3714      	adds	r7, #20
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr

0800da24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da34:	2b01      	cmp	r3, #1
 800da36:	d101      	bne.n	800da3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800da38:	2302      	movs	r3, #2
 800da3a:	e02d      	b.n	800da98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2201      	movs	r2, #1
 800da40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2224      	movs	r2, #36	; 0x24
 800da48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f022 0201 	bic.w	r2, r2, #1
 800da62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	689b      	ldr	r3, [r3, #8]
 800da6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	683a      	ldr	r2, [r7, #0]
 800da74:	430a      	orrs	r2, r1
 800da76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 f84f 	bl	800db1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	68fa      	ldr	r2, [r7, #12]
 800da84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2220      	movs	r2, #32
 800da8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da96:	2300      	movs	r3, #0
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3710      	adds	r7, #16
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d101      	bne.n	800dab8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dab4:	2302      	movs	r3, #2
 800dab6:	e02d      	b.n	800db14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2201      	movs	r2, #1
 800dabc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2224      	movs	r2, #36	; 0x24
 800dac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f022 0201 	bic.w	r2, r2, #1
 800dade:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	683a      	ldr	r2, [r7, #0]
 800daf0:	430a      	orrs	r2, r1
 800daf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 f811 	bl	800db1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2220      	movs	r2, #32
 800db06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2200      	movs	r2, #0
 800db0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db12:	2300      	movs	r3, #0
}
 800db14:	4618      	mov	r0, r3
 800db16:	3710      	adds	r7, #16
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b085      	sub	sp, #20
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d108      	bne.n	800db3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2201      	movs	r2, #1
 800db30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2201      	movs	r2, #1
 800db38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800db3c:	e031      	b.n	800dba2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800db3e:	2310      	movs	r3, #16
 800db40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800db42:	2310      	movs	r3, #16
 800db44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	689b      	ldr	r3, [r3, #8]
 800db4c:	0e5b      	lsrs	r3, r3, #25
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	f003 0307 	and.w	r3, r3, #7
 800db54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	0f5b      	lsrs	r3, r3, #29
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	f003 0307 	and.w	r3, r3, #7
 800db64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db66:	7bbb      	ldrb	r3, [r7, #14]
 800db68:	7b3a      	ldrb	r2, [r7, #12]
 800db6a:	4911      	ldr	r1, [pc, #68]	; (800dbb0 <UARTEx_SetNbDataToProcess+0x94>)
 800db6c:	5c8a      	ldrb	r2, [r1, r2]
 800db6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800db72:	7b3a      	ldrb	r2, [r7, #12]
 800db74:	490f      	ldr	r1, [pc, #60]	; (800dbb4 <UARTEx_SetNbDataToProcess+0x98>)
 800db76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db78:	fb93 f3f2 	sdiv	r3, r3, r2
 800db7c:	b29a      	uxth	r2, r3
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db84:	7bfb      	ldrb	r3, [r7, #15]
 800db86:	7b7a      	ldrb	r2, [r7, #13]
 800db88:	4909      	ldr	r1, [pc, #36]	; (800dbb0 <UARTEx_SetNbDataToProcess+0x94>)
 800db8a:	5c8a      	ldrb	r2, [r1, r2]
 800db8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800db90:	7b7a      	ldrb	r2, [r7, #13]
 800db92:	4908      	ldr	r1, [pc, #32]	; (800dbb4 <UARTEx_SetNbDataToProcess+0x98>)
 800db94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db96:	fb93 f3f2 	sdiv	r3, r3, r2
 800db9a:	b29a      	uxth	r2, r3
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dba2:	bf00      	nop
 800dba4:	3714      	adds	r7, #20
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr
 800dbae:	bf00      	nop
 800dbb0:	080227ac 	.word	0x080227ac
 800dbb4:	080227b4 	.word	0x080227b4

0800dbb8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b087      	sub	sp, #28
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbcc:	683a      	ldr	r2, [r7, #0]
 800dbce:	6812      	ldr	r2, [r2, #0]
 800dbd0:	f023 0101 	bic.w	r1, r3, #1
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	2b08      	cmp	r3, #8
 800dbe0:	d102      	bne.n	800dbe8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800dbe2:	2340      	movs	r3, #64	; 0x40
 800dbe4:	617b      	str	r3, [r7, #20]
 800dbe6:	e001      	b.n	800dbec <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800dbf8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800dbfe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800dc04:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800dc0a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800dc10:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800dc16:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800dc1c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800dc22:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800dc28:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc36:	693a      	ldr	r2, [r7, #16]
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc40:	693a      	ldr	r2, [r7, #16]
 800dc42:	4313      	orrs	r3, r2
 800dc44:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc4a:	693a      	ldr	r2, [r7, #16]
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800dc50:	4b20      	ldr	r3, [pc, #128]	; (800dcd4 <FMC_NORSRAM_Init+0x11c>)
 800dc52:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc5a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dc62:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800dc6a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	43db      	mvns	r3, r3
 800dc7a:	ea02 0103 	and.w	r1, r2, r3
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	4319      	orrs	r1, r3
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc94:	d10c      	bne.n	800dcb0 <FMC_NORSRAM_Init+0xf8>
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d008      	beq.n	800dcb0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcaa:	431a      	orrs	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d006      	beq.n	800dcc6 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc0:	431a      	orrs	r2, r3
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	371c      	adds	r7, #28
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr
 800dcd4:	0008fb7f 	.word	0x0008fb7f

0800dcd8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b087      	sub	sp, #28
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	1c5a      	adds	r2, r3, #1
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcee:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	011b      	lsls	r3, r3, #4
 800dcfc:	431a      	orrs	r2, r3
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	689b      	ldr	r3, [r3, #8]
 800dd02:	021b      	lsls	r3, r3, #8
 800dd04:	431a      	orrs	r2, r3
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	68db      	ldr	r3, [r3, #12]
 800dd0a:	041b      	lsls	r3, r3, #16
 800dd0c:	431a      	orrs	r2, r3
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	691b      	ldr	r3, [r3, #16]
 800dd12:	3b01      	subs	r3, #1
 800dd14:	051b      	lsls	r3, r3, #20
 800dd16:	431a      	orrs	r2, r3
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	695b      	ldr	r3, [r3, #20]
 800dd1c:	3b02      	subs	r3, #2
 800dd1e:	061b      	lsls	r3, r3, #24
 800dd20:	431a      	orrs	r2, r3
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	699b      	ldr	r3, [r3, #24]
 800dd26:	4313      	orrs	r3, r2
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	3201      	adds	r2, #1
 800dd2c:	4319      	orrs	r1, r3
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dd3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd40:	d113      	bne.n	800dd6a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dd4a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	691b      	ldr	r3, [r3, #16]
 800dd50:	3b01      	subs	r3, #1
 800dd52:	051b      	lsls	r3, r3, #20
 800dd54:	697a      	ldr	r2, [r7, #20]
 800dd56:	4313      	orrs	r3, r2
 800dd58:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	431a      	orrs	r2, r3
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800dd6a:	2300      	movs	r3, #0
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	371c      	adds	r7, #28
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
 800dd84:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dd8c:	d11d      	bne.n	800ddca <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dd96:	4b13      	ldr	r3, [pc, #76]	; (800dde4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800dd98:	4013      	ands	r3, r2
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	6811      	ldr	r1, [r2, #0]
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	6852      	ldr	r2, [r2, #4]
 800dda2:	0112      	lsls	r2, r2, #4
 800dda4:	4311      	orrs	r1, r2
 800dda6:	68ba      	ldr	r2, [r7, #8]
 800dda8:	6892      	ldr	r2, [r2, #8]
 800ddaa:	0212      	lsls	r2, r2, #8
 800ddac:	4311      	orrs	r1, r2
 800ddae:	68ba      	ldr	r2, [r7, #8]
 800ddb0:	6992      	ldr	r2, [r2, #24]
 800ddb2:	4311      	orrs	r1, r2
 800ddb4:	68ba      	ldr	r2, [r7, #8]
 800ddb6:	68d2      	ldr	r2, [r2, #12]
 800ddb8:	0412      	lsls	r2, r2, #16
 800ddba:	430a      	orrs	r2, r1
 800ddbc:	ea43 0102 	orr.w	r1, r3, r2
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	687a      	ldr	r2, [r7, #4]
 800ddc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ddc8:	e005      	b.n	800ddd6 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ddd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800ddd6:	2300      	movs	r3, #0
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3714      	adds	r7, #20
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr
 800dde4:	cff00000 	.word	0xcff00000

0800dde8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ddee:	4b8d      	ldr	r3, [pc, #564]	; (800e024 <MX_LWIP_Init+0x23c>)
 800ddf0:	22c0      	movs	r2, #192	; 0xc0
 800ddf2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ddf4:	4b8b      	ldr	r3, [pc, #556]	; (800e024 <MX_LWIP_Init+0x23c>)
 800ddf6:	22a8      	movs	r2, #168	; 0xa8
 800ddf8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800ddfa:	4b8a      	ldr	r3, [pc, #552]	; (800e024 <MX_LWIP_Init+0x23c>)
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 800de00:	4b88      	ldr	r3, [pc, #544]	; (800e024 <MX_LWIP_Init+0x23c>)
 800de02:	2201      	movs	r2, #1
 800de04:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800de06:	4b88      	ldr	r3, [pc, #544]	; (800e028 <MX_LWIP_Init+0x240>)
 800de08:	22ff      	movs	r2, #255	; 0xff
 800de0a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800de0c:	4b86      	ldr	r3, [pc, #536]	; (800e028 <MX_LWIP_Init+0x240>)
 800de0e:	22ff      	movs	r2, #255	; 0xff
 800de10:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800de12:	4b85      	ldr	r3, [pc, #532]	; (800e028 <MX_LWIP_Init+0x240>)
 800de14:	22ff      	movs	r2, #255	; 0xff
 800de16:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800de18:	4b83      	ldr	r3, [pc, #524]	; (800e028 <MX_LWIP_Init+0x240>)
 800de1a:	2200      	movs	r2, #0
 800de1c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800de1e:	4b83      	ldr	r3, [pc, #524]	; (800e02c <MX_LWIP_Init+0x244>)
 800de20:	2200      	movs	r2, #0
 800de22:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800de24:	4b81      	ldr	r3, [pc, #516]	; (800e02c <MX_LWIP_Init+0x244>)
 800de26:	2200      	movs	r2, #0
 800de28:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800de2a:	4b80      	ldr	r3, [pc, #512]	; (800e02c <MX_LWIP_Init+0x244>)
 800de2c:	2200      	movs	r2, #0
 800de2e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800de30:	4b7e      	ldr	r3, [pc, #504]	; (800e02c <MX_LWIP_Init+0x244>)
 800de32:	2200      	movs	r2, #0
 800de34:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800de36:	f001 feb9 	bl	800fbac <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800de3a:	4b7a      	ldr	r3, [pc, #488]	; (800e024 <MX_LWIP_Init+0x23c>)
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	061a      	lsls	r2, r3, #24
 800de40:	4b78      	ldr	r3, [pc, #480]	; (800e024 <MX_LWIP_Init+0x23c>)
 800de42:	785b      	ldrb	r3, [r3, #1]
 800de44:	041b      	lsls	r3, r3, #16
 800de46:	431a      	orrs	r2, r3
 800de48:	4b76      	ldr	r3, [pc, #472]	; (800e024 <MX_LWIP_Init+0x23c>)
 800de4a:	789b      	ldrb	r3, [r3, #2]
 800de4c:	021b      	lsls	r3, r3, #8
 800de4e:	4313      	orrs	r3, r2
 800de50:	4a74      	ldr	r2, [pc, #464]	; (800e024 <MX_LWIP_Init+0x23c>)
 800de52:	78d2      	ldrb	r2, [r2, #3]
 800de54:	4313      	orrs	r3, r2
 800de56:	061a      	lsls	r2, r3, #24
 800de58:	4b72      	ldr	r3, [pc, #456]	; (800e024 <MX_LWIP_Init+0x23c>)
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	0619      	lsls	r1, r3, #24
 800de5e:	4b71      	ldr	r3, [pc, #452]	; (800e024 <MX_LWIP_Init+0x23c>)
 800de60:	785b      	ldrb	r3, [r3, #1]
 800de62:	041b      	lsls	r3, r3, #16
 800de64:	4319      	orrs	r1, r3
 800de66:	4b6f      	ldr	r3, [pc, #444]	; (800e024 <MX_LWIP_Init+0x23c>)
 800de68:	789b      	ldrb	r3, [r3, #2]
 800de6a:	021b      	lsls	r3, r3, #8
 800de6c:	430b      	orrs	r3, r1
 800de6e:	496d      	ldr	r1, [pc, #436]	; (800e024 <MX_LWIP_Init+0x23c>)
 800de70:	78c9      	ldrb	r1, [r1, #3]
 800de72:	430b      	orrs	r3, r1
 800de74:	021b      	lsls	r3, r3, #8
 800de76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800de7a:	431a      	orrs	r2, r3
 800de7c:	4b69      	ldr	r3, [pc, #420]	; (800e024 <MX_LWIP_Init+0x23c>)
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	0619      	lsls	r1, r3, #24
 800de82:	4b68      	ldr	r3, [pc, #416]	; (800e024 <MX_LWIP_Init+0x23c>)
 800de84:	785b      	ldrb	r3, [r3, #1]
 800de86:	041b      	lsls	r3, r3, #16
 800de88:	4319      	orrs	r1, r3
 800de8a:	4b66      	ldr	r3, [pc, #408]	; (800e024 <MX_LWIP_Init+0x23c>)
 800de8c:	789b      	ldrb	r3, [r3, #2]
 800de8e:	021b      	lsls	r3, r3, #8
 800de90:	430b      	orrs	r3, r1
 800de92:	4964      	ldr	r1, [pc, #400]	; (800e024 <MX_LWIP_Init+0x23c>)
 800de94:	78c9      	ldrb	r1, [r1, #3]
 800de96:	430b      	orrs	r3, r1
 800de98:	0a1b      	lsrs	r3, r3, #8
 800de9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800de9e:	431a      	orrs	r2, r3
 800dea0:	4b60      	ldr	r3, [pc, #384]	; (800e024 <MX_LWIP_Init+0x23c>)
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	0619      	lsls	r1, r3, #24
 800dea6:	4b5f      	ldr	r3, [pc, #380]	; (800e024 <MX_LWIP_Init+0x23c>)
 800dea8:	785b      	ldrb	r3, [r3, #1]
 800deaa:	041b      	lsls	r3, r3, #16
 800deac:	4319      	orrs	r1, r3
 800deae:	4b5d      	ldr	r3, [pc, #372]	; (800e024 <MX_LWIP_Init+0x23c>)
 800deb0:	789b      	ldrb	r3, [r3, #2]
 800deb2:	021b      	lsls	r3, r3, #8
 800deb4:	430b      	orrs	r3, r1
 800deb6:	495b      	ldr	r1, [pc, #364]	; (800e024 <MX_LWIP_Init+0x23c>)
 800deb8:	78c9      	ldrb	r1, [r1, #3]
 800deba:	430b      	orrs	r3, r1
 800debc:	0e1b      	lsrs	r3, r3, #24
 800debe:	4313      	orrs	r3, r2
 800dec0:	4a5b      	ldr	r2, [pc, #364]	; (800e030 <MX_LWIP_Init+0x248>)
 800dec2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800dec4:	4b58      	ldr	r3, [pc, #352]	; (800e028 <MX_LWIP_Init+0x240>)
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	061a      	lsls	r2, r3, #24
 800deca:	4b57      	ldr	r3, [pc, #348]	; (800e028 <MX_LWIP_Init+0x240>)
 800decc:	785b      	ldrb	r3, [r3, #1]
 800dece:	041b      	lsls	r3, r3, #16
 800ded0:	431a      	orrs	r2, r3
 800ded2:	4b55      	ldr	r3, [pc, #340]	; (800e028 <MX_LWIP_Init+0x240>)
 800ded4:	789b      	ldrb	r3, [r3, #2]
 800ded6:	021b      	lsls	r3, r3, #8
 800ded8:	4313      	orrs	r3, r2
 800deda:	4a53      	ldr	r2, [pc, #332]	; (800e028 <MX_LWIP_Init+0x240>)
 800dedc:	78d2      	ldrb	r2, [r2, #3]
 800dede:	4313      	orrs	r3, r2
 800dee0:	061a      	lsls	r2, r3, #24
 800dee2:	4b51      	ldr	r3, [pc, #324]	; (800e028 <MX_LWIP_Init+0x240>)
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	0619      	lsls	r1, r3, #24
 800dee8:	4b4f      	ldr	r3, [pc, #316]	; (800e028 <MX_LWIP_Init+0x240>)
 800deea:	785b      	ldrb	r3, [r3, #1]
 800deec:	041b      	lsls	r3, r3, #16
 800deee:	4319      	orrs	r1, r3
 800def0:	4b4d      	ldr	r3, [pc, #308]	; (800e028 <MX_LWIP_Init+0x240>)
 800def2:	789b      	ldrb	r3, [r3, #2]
 800def4:	021b      	lsls	r3, r3, #8
 800def6:	430b      	orrs	r3, r1
 800def8:	494b      	ldr	r1, [pc, #300]	; (800e028 <MX_LWIP_Init+0x240>)
 800defa:	78c9      	ldrb	r1, [r1, #3]
 800defc:	430b      	orrs	r3, r1
 800defe:	021b      	lsls	r3, r3, #8
 800df00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800df04:	431a      	orrs	r2, r3
 800df06:	4b48      	ldr	r3, [pc, #288]	; (800e028 <MX_LWIP_Init+0x240>)
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	0619      	lsls	r1, r3, #24
 800df0c:	4b46      	ldr	r3, [pc, #280]	; (800e028 <MX_LWIP_Init+0x240>)
 800df0e:	785b      	ldrb	r3, [r3, #1]
 800df10:	041b      	lsls	r3, r3, #16
 800df12:	4319      	orrs	r1, r3
 800df14:	4b44      	ldr	r3, [pc, #272]	; (800e028 <MX_LWIP_Init+0x240>)
 800df16:	789b      	ldrb	r3, [r3, #2]
 800df18:	021b      	lsls	r3, r3, #8
 800df1a:	430b      	orrs	r3, r1
 800df1c:	4942      	ldr	r1, [pc, #264]	; (800e028 <MX_LWIP_Init+0x240>)
 800df1e:	78c9      	ldrb	r1, [r1, #3]
 800df20:	430b      	orrs	r3, r1
 800df22:	0a1b      	lsrs	r3, r3, #8
 800df24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800df28:	431a      	orrs	r2, r3
 800df2a:	4b3f      	ldr	r3, [pc, #252]	; (800e028 <MX_LWIP_Init+0x240>)
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	0619      	lsls	r1, r3, #24
 800df30:	4b3d      	ldr	r3, [pc, #244]	; (800e028 <MX_LWIP_Init+0x240>)
 800df32:	785b      	ldrb	r3, [r3, #1]
 800df34:	041b      	lsls	r3, r3, #16
 800df36:	4319      	orrs	r1, r3
 800df38:	4b3b      	ldr	r3, [pc, #236]	; (800e028 <MX_LWIP_Init+0x240>)
 800df3a:	789b      	ldrb	r3, [r3, #2]
 800df3c:	021b      	lsls	r3, r3, #8
 800df3e:	430b      	orrs	r3, r1
 800df40:	4939      	ldr	r1, [pc, #228]	; (800e028 <MX_LWIP_Init+0x240>)
 800df42:	78c9      	ldrb	r1, [r1, #3]
 800df44:	430b      	orrs	r3, r1
 800df46:	0e1b      	lsrs	r3, r3, #24
 800df48:	4313      	orrs	r3, r2
 800df4a:	4a3a      	ldr	r2, [pc, #232]	; (800e034 <MX_LWIP_Init+0x24c>)
 800df4c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800df4e:	4b37      	ldr	r3, [pc, #220]	; (800e02c <MX_LWIP_Init+0x244>)
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	061a      	lsls	r2, r3, #24
 800df54:	4b35      	ldr	r3, [pc, #212]	; (800e02c <MX_LWIP_Init+0x244>)
 800df56:	785b      	ldrb	r3, [r3, #1]
 800df58:	041b      	lsls	r3, r3, #16
 800df5a:	431a      	orrs	r2, r3
 800df5c:	4b33      	ldr	r3, [pc, #204]	; (800e02c <MX_LWIP_Init+0x244>)
 800df5e:	789b      	ldrb	r3, [r3, #2]
 800df60:	021b      	lsls	r3, r3, #8
 800df62:	4313      	orrs	r3, r2
 800df64:	4a31      	ldr	r2, [pc, #196]	; (800e02c <MX_LWIP_Init+0x244>)
 800df66:	78d2      	ldrb	r2, [r2, #3]
 800df68:	4313      	orrs	r3, r2
 800df6a:	061a      	lsls	r2, r3, #24
 800df6c:	4b2f      	ldr	r3, [pc, #188]	; (800e02c <MX_LWIP_Init+0x244>)
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	0619      	lsls	r1, r3, #24
 800df72:	4b2e      	ldr	r3, [pc, #184]	; (800e02c <MX_LWIP_Init+0x244>)
 800df74:	785b      	ldrb	r3, [r3, #1]
 800df76:	041b      	lsls	r3, r3, #16
 800df78:	4319      	orrs	r1, r3
 800df7a:	4b2c      	ldr	r3, [pc, #176]	; (800e02c <MX_LWIP_Init+0x244>)
 800df7c:	789b      	ldrb	r3, [r3, #2]
 800df7e:	021b      	lsls	r3, r3, #8
 800df80:	430b      	orrs	r3, r1
 800df82:	492a      	ldr	r1, [pc, #168]	; (800e02c <MX_LWIP_Init+0x244>)
 800df84:	78c9      	ldrb	r1, [r1, #3]
 800df86:	430b      	orrs	r3, r1
 800df88:	021b      	lsls	r3, r3, #8
 800df8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800df8e:	431a      	orrs	r2, r3
 800df90:	4b26      	ldr	r3, [pc, #152]	; (800e02c <MX_LWIP_Init+0x244>)
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	0619      	lsls	r1, r3, #24
 800df96:	4b25      	ldr	r3, [pc, #148]	; (800e02c <MX_LWIP_Init+0x244>)
 800df98:	785b      	ldrb	r3, [r3, #1]
 800df9a:	041b      	lsls	r3, r3, #16
 800df9c:	4319      	orrs	r1, r3
 800df9e:	4b23      	ldr	r3, [pc, #140]	; (800e02c <MX_LWIP_Init+0x244>)
 800dfa0:	789b      	ldrb	r3, [r3, #2]
 800dfa2:	021b      	lsls	r3, r3, #8
 800dfa4:	430b      	orrs	r3, r1
 800dfa6:	4921      	ldr	r1, [pc, #132]	; (800e02c <MX_LWIP_Init+0x244>)
 800dfa8:	78c9      	ldrb	r1, [r1, #3]
 800dfaa:	430b      	orrs	r3, r1
 800dfac:	0a1b      	lsrs	r3, r3, #8
 800dfae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dfb2:	431a      	orrs	r2, r3
 800dfb4:	4b1d      	ldr	r3, [pc, #116]	; (800e02c <MX_LWIP_Init+0x244>)
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	0619      	lsls	r1, r3, #24
 800dfba:	4b1c      	ldr	r3, [pc, #112]	; (800e02c <MX_LWIP_Init+0x244>)
 800dfbc:	785b      	ldrb	r3, [r3, #1]
 800dfbe:	041b      	lsls	r3, r3, #16
 800dfc0:	4319      	orrs	r1, r3
 800dfc2:	4b1a      	ldr	r3, [pc, #104]	; (800e02c <MX_LWIP_Init+0x244>)
 800dfc4:	789b      	ldrb	r3, [r3, #2]
 800dfc6:	021b      	lsls	r3, r3, #8
 800dfc8:	430b      	orrs	r3, r1
 800dfca:	4918      	ldr	r1, [pc, #96]	; (800e02c <MX_LWIP_Init+0x244>)
 800dfcc:	78c9      	ldrb	r1, [r1, #3]
 800dfce:	430b      	orrs	r3, r1
 800dfd0:	0e1b      	lsrs	r3, r3, #24
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	4a18      	ldr	r2, [pc, #96]	; (800e038 <MX_LWIP_Init+0x250>)
 800dfd6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800dfd8:	4b18      	ldr	r3, [pc, #96]	; (800e03c <MX_LWIP_Init+0x254>)
 800dfda:	9302      	str	r3, [sp, #8]
 800dfdc:	4b18      	ldr	r3, [pc, #96]	; (800e040 <MX_LWIP_Init+0x258>)
 800dfde:	9301      	str	r3, [sp, #4]
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	4b14      	ldr	r3, [pc, #80]	; (800e038 <MX_LWIP_Init+0x250>)
 800dfe6:	4a13      	ldr	r2, [pc, #76]	; (800e034 <MX_LWIP_Init+0x24c>)
 800dfe8:	4911      	ldr	r1, [pc, #68]	; (800e030 <MX_LWIP_Init+0x248>)
 800dfea:	4816      	ldr	r0, [pc, #88]	; (800e044 <MX_LWIP_Init+0x25c>)
 800dfec:	f003 fb90 	bl	8011710 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800dff0:	4814      	ldr	r0, [pc, #80]	; (800e044 <MX_LWIP_Init+0x25c>)
 800dff2:	f003 fd3f 	bl	8011a74 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800dff6:	4b13      	ldr	r3, [pc, #76]	; (800e044 <MX_LWIP_Init+0x25c>)
 800dff8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dffc:	089b      	lsrs	r3, r3, #2
 800dffe:	f003 0301 	and.w	r3, r3, #1
 800e002:	b2db      	uxtb	r3, r3
 800e004:	2b00      	cmp	r3, #0
 800e006:	d003      	beq.n	800e010 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800e008:	480e      	ldr	r0, [pc, #56]	; (800e044 <MX_LWIP_Init+0x25c>)
 800e00a:	f003 fd43 	bl	8011a94 <netif_set_up>
 800e00e:	e002      	b.n	800e016 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800e010:	480c      	ldr	r0, [pc, #48]	; (800e044 <MX_LWIP_Init+0x25c>)
 800e012:	f003 fdab 	bl	8011b6c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800e016:	490c      	ldr	r1, [pc, #48]	; (800e048 <MX_LWIP_Init+0x260>)
 800e018:	480a      	ldr	r0, [pc, #40]	; (800e044 <MX_LWIP_Init+0x25c>)
 800e01a:	f003 fe3d 	bl	8011c98 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e01e:	bf00      	nop
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	24004154 	.word	0x24004154
 800e028:	24004150 	.word	0x24004150
 800e02c:	24004110 	.word	0x24004110
 800e030:	24004148 	.word	0x24004148
 800e034:	24004158 	.word	0x24004158
 800e038:	2400415c 	.word	0x2400415c
 800e03c:	0800f521 	.word	0x0800f521
 800e040:	0800e41d 	.word	0x0800e41d
 800e044:	24004114 	.word	0x24004114
 800e048:	0800e04d 	.word	0x0800e04d

0800e04c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800e054:	bf00      	nop
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b08e      	sub	sp, #56	; 0x38
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e06c:	2200      	movs	r2, #0
 800e06e:	601a      	str	r2, [r3, #0]
 800e070:	605a      	str	r2, [r3, #4]
 800e072:	609a      	str	r2, [r3, #8]
 800e074:	60da      	str	r2, [r3, #12]
 800e076:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4a4d      	ldr	r2, [pc, #308]	; (800e1b4 <HAL_ETH_MspInit+0x154>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	f040 8093 	bne.w	800e1aa <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800e084:	4b4c      	ldr	r3, [pc, #304]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e086:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e08a:	4a4b      	ldr	r2, [pc, #300]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e08c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e090:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e094:	4b48      	ldr	r3, [pc, #288]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e096:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e09a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e09e:	623b      	str	r3, [r7, #32]
 800e0a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800e0a2:	4b45      	ldr	r3, [pc, #276]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e0a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e0a8:	4a43      	ldr	r2, [pc, #268]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e0aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e0ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e0b2:	4b41      	ldr	r3, [pc, #260]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e0b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e0b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e0bc:	61fb      	str	r3, [r7, #28]
 800e0be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800e0c0:	4b3d      	ldr	r3, [pc, #244]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e0c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e0c6:	4a3c      	ldr	r2, [pc, #240]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e0c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e0cc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e0d0:	4b39      	ldr	r3, [pc, #228]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e0d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e0d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0da:	61bb      	str	r3, [r7, #24]
 800e0dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e0de:	4b36      	ldr	r3, [pc, #216]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e0e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e0e4:	4a34      	ldr	r2, [pc, #208]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e0e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e0ee:	4b32      	ldr	r3, [pc, #200]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e0f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0f8:	617b      	str	r3, [r7, #20]
 800e0fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e0fc:	4b2e      	ldr	r3, [pc, #184]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e0fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e102:	4a2d      	ldr	r2, [pc, #180]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e104:	f043 0304 	orr.w	r3, r3, #4
 800e108:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e10c:	4b2a      	ldr	r3, [pc, #168]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e10e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e112:	f003 0304 	and.w	r3, r3, #4
 800e116:	613b      	str	r3, [r7, #16]
 800e118:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e11a:	4b27      	ldr	r3, [pc, #156]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e11c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e120:	4a25      	ldr	r2, [pc, #148]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e122:	f043 0301 	orr.w	r3, r3, #1
 800e126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e12a:	4b23      	ldr	r3, [pc, #140]	; (800e1b8 <HAL_ETH_MspInit+0x158>)
 800e12c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e130:	f003 0301 	and.w	r3, r3, #1
 800e134:	60fb      	str	r3, [r7, #12]
 800e136:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ETH_CRS_DV
    PA1     ------> ETH_REF_CLK
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800e138:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800e13c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e13e:	2302      	movs	r3, #2
 800e140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e142:	2300      	movs	r3, #0
 800e144:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e146:	2303      	movs	r3, #3
 800e148:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e14a:	230b      	movs	r3, #11
 800e14c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e14e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e152:	4619      	mov	r1, r3
 800e154:	4819      	ldr	r0, [pc, #100]	; (800e1bc <HAL_ETH_MspInit+0x15c>)
 800e156:	f7f9 f89d 	bl	8007294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 800e15a:	2332      	movs	r3, #50	; 0x32
 800e15c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e15e:	2302      	movs	r3, #2
 800e160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e162:	2300      	movs	r3, #0
 800e164:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e166:	2303      	movs	r3, #3
 800e168:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e16a:	230b      	movs	r3, #11
 800e16c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e16e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e172:	4619      	mov	r1, r3
 800e174:	4812      	ldr	r0, [pc, #72]	; (800e1c0 <HAL_ETH_MspInit+0x160>)
 800e176:	f7f9 f88d 	bl	8007294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 800e17a:	2386      	movs	r3, #134	; 0x86
 800e17c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e17e:	2302      	movs	r3, #2
 800e180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e182:	2300      	movs	r3, #0
 800e184:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e186:	2303      	movs	r3, #3
 800e188:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e18a:	230b      	movs	r3, #11
 800e18c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e18e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e192:	4619      	mov	r1, r3
 800e194:	480b      	ldr	r0, [pc, #44]	; (800e1c4 <HAL_ETH_MspInit+0x164>)
 800e196:	f7f9 f87d 	bl	8007294 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800e19a:	2200      	movs	r2, #0
 800e19c:	2100      	movs	r1, #0
 800e19e:	203d      	movs	r0, #61	; 0x3d
 800e1a0:	f7f5 ff3d 	bl	800401e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800e1a4:	203d      	movs	r0, #61	; 0x3d
 800e1a6:	f7f5 ff54 	bl	8004052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800e1aa:	bf00      	nop
 800e1ac:	3738      	adds	r7, #56	; 0x38
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	40028000 	.word	0x40028000
 800e1b8:	58024400 	.word	0x58024400
 800e1bc:	58021800 	.word	0x58021800
 800e1c0:	58020800 	.word	0x58020800
 800e1c4:	58020000 	.word	0x58020000

0800e1c8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b086      	sub	sp, #24
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800e1d8:	4b4a      	ldr	r3, [pc, #296]	; (800e304 <low_level_init+0x13c>)
 800e1da:	4a4b      	ldr	r2, [pc, #300]	; (800e308 <low_level_init+0x140>)
 800e1dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800e1e2:	2380      	movs	r3, #128	; 0x80
 800e1e4:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800e1e6:	23e1      	movs	r3, #225	; 0xe1
 800e1e8:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800e1f6:	4a43      	ldr	r2, [pc, #268]	; (800e304 <low_level_init+0x13c>)
 800e1f8:	f107 030c 	add.w	r3, r7, #12
 800e1fc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800e1fe:	4b41      	ldr	r3, [pc, #260]	; (800e304 <low_level_init+0x13c>)
 800e200:	2201      	movs	r2, #1
 800e202:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800e204:	4b3f      	ldr	r3, [pc, #252]	; (800e304 <low_level_init+0x13c>)
 800e206:	4a41      	ldr	r2, [pc, #260]	; (800e30c <low_level_init+0x144>)
 800e208:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800e20a:	4b3e      	ldr	r3, [pc, #248]	; (800e304 <low_level_init+0x13c>)
 800e20c:	4a40      	ldr	r2, [pc, #256]	; (800e310 <low_level_init+0x148>)
 800e20e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800e210:	4b3c      	ldr	r3, [pc, #240]	; (800e304 <low_level_init+0x13c>)
 800e212:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800e216:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800e218:	483a      	ldr	r0, [pc, #232]	; (800e304 <low_level_init+0x13c>)
 800e21a:	f7f7 fbfb 	bl	8005a14 <HAL_ETH_Init>
 800e21e:	4603      	mov	r3, r0
 800e220:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800e222:	2234      	movs	r2, #52	; 0x34
 800e224:	2100      	movs	r1, #0
 800e226:	483b      	ldr	r0, [pc, #236]	; (800e314 <low_level_init+0x14c>)
 800e228:	f00c fee6 	bl	801aff8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800e22c:	4b39      	ldr	r3, [pc, #228]	; (800e314 <low_level_init+0x14c>)
 800e22e:	2221      	movs	r2, #33	; 0x21
 800e230:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800e232:	4b38      	ldr	r3, [pc, #224]	; (800e314 <low_level_init+0x14c>)
 800e234:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e238:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800e23a:	4b36      	ldr	r3, [pc, #216]	; (800e314 <low_level_init+0x14c>)
 800e23c:	2200      	movs	r2, #0
 800e23e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800e240:	4835      	ldr	r0, [pc, #212]	; (800e318 <low_level_init+0x150>)
 800e242:	f003 f973 	bl	801152c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2206      	movs	r2, #6
 800e24a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800e24e:	4b2d      	ldr	r3, [pc, #180]	; (800e304 <low_level_init+0x13c>)
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	781a      	ldrb	r2, [r3, #0]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800e25a:	4b2a      	ldr	r3, [pc, #168]	; (800e304 <low_level_init+0x13c>)
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	785a      	ldrb	r2, [r3, #1]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800e266:	4b27      	ldr	r3, [pc, #156]	; (800e304 <low_level_init+0x13c>)
 800e268:	685b      	ldr	r3, [r3, #4]
 800e26a:	789a      	ldrb	r2, [r3, #2]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800e272:	4b24      	ldr	r3, [pc, #144]	; (800e304 <low_level_init+0x13c>)
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	78da      	ldrb	r2, [r3, #3]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800e27e:	4b21      	ldr	r3, [pc, #132]	; (800e304 <low_level_init+0x13c>)
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	791a      	ldrb	r2, [r3, #4]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800e28a:	4b1e      	ldr	r3, [pc, #120]	; (800e304 <low_level_init+0x13c>)
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	795a      	ldrb	r2, [r3, #5]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e29c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e2a4:	f043 030a 	orr.w	r3, r3, #10
 800e2a8:	b2da      	uxtb	r2, r3
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	617b      	str	r3, [r7, #20]
 800e2b4:	e00e      	b.n	800e2d4 <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800e2bc:	fb02 f303 	mul.w	r3, r2, r3
 800e2c0:	4a16      	ldr	r2, [pc, #88]	; (800e31c <low_level_init+0x154>)
 800e2c2:	441a      	add	r2, r3
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	6979      	ldr	r1, [r7, #20]
 800e2c8:	480e      	ldr	r0, [pc, #56]	; (800e304 <low_level_init+0x13c>)
 800e2ca:	f7f7 fc7d 	bl	8005bc8 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	617b      	str	r3, [r7, #20]
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	2b03      	cmp	r3, #3
 800e2d8:	d9ed      	bls.n	800e2b6 <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800e2da:	4911      	ldr	r1, [pc, #68]	; (800e320 <low_level_init+0x158>)
 800e2dc:	4811      	ldr	r0, [pc, #68]	; (800e324 <low_level_init+0x15c>)
 800e2de:	f7f4 fad8 	bl	8002892 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800e2e2:	4810      	ldr	r0, [pc, #64]	; (800e324 <low_level_init+0x15c>)
 800e2e4:	f7f4 fb07 	bl	80028f6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800e2e8:	7cfb      	ldrb	r3, [r7, #19]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d103      	bne.n	800e2f6 <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 f918 	bl	800e524 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800e2f4:	e001      	b.n	800e2fa <low_level_init+0x132>
    Error_Handler();
 800e2f6:	f7f3 fbfd 	bl	8001af4 <Error_Handler>
}
 800e2fa:	bf00      	nop
 800e2fc:	3718      	adds	r7, #24
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	2400424c 	.word	0x2400424c
 800e308:	40028000 	.word	0x40028000
 800e30c:	30040060 	.word	0x30040060
 800e310:	30040000 	.word	0x30040000
 800e314:	240042d4 	.word	0x240042d4
 800e318:	080227bc 	.word	0x080227bc
 800e31c:	30040200 	.word	0x30040200
 800e320:	24000410 	.word	0x24000410
 800e324:	2400422c 	.word	0x2400422c

0800e328 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b092      	sub	sp, #72	; 0x48
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800e332:	2300      	movs	r3, #0
 800e334:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800e336:	2300      	movs	r3, #0
 800e338:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800e33c:	f107 030c 	add.w	r3, r7, #12
 800e340:	2230      	movs	r2, #48	; 0x30
 800e342:	2100      	movs	r1, #0
 800e344:	4618      	mov	r0, r3
 800e346:	f00c fe57 	bl	801aff8 <memset>

  for(q = p; q != NULL; q = q->next)
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	643b      	str	r3, [r7, #64]	; 0x40
 800e34e:	e049      	b.n	800e3e4 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800e350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e352:	2b03      	cmp	r3, #3
 800e354:	d902      	bls.n	800e35c <low_level_output+0x34>
      return ERR_IF;
 800e356:	f06f 030b 	mvn.w	r3, #11
 800e35a:	e056      	b.n	800e40a <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800e35c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e35e:	6859      	ldr	r1, [r3, #4]
 800e360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e362:	4613      	mov	r3, r2
 800e364:	005b      	lsls	r3, r3, #1
 800e366:	4413      	add	r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e36e:	4413      	add	r3, r2
 800e370:	3b3c      	subs	r3, #60	; 0x3c
 800e372:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800e374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e376:	895b      	ldrh	r3, [r3, #10]
 800e378:	4619      	mov	r1, r3
 800e37a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e37c:	4613      	mov	r3, r2
 800e37e:	005b      	lsls	r3, r3, #1
 800e380:	4413      	add	r3, r2
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e388:	4413      	add	r3, r2
 800e38a:	3b38      	subs	r3, #56	; 0x38
 800e38c:	6019      	str	r1, [r3, #0]

    if(i>0)
 800e38e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e390:	2b00      	cmp	r3, #0
 800e392:	d012      	beq.n	800e3ba <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800e394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e396:	1e5a      	subs	r2, r3, #1
 800e398:	f107 000c 	add.w	r0, r7, #12
 800e39c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e39e:	460b      	mov	r3, r1
 800e3a0:	005b      	lsls	r3, r3, #1
 800e3a2:	440b      	add	r3, r1
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	18c1      	adds	r1, r0, r3
 800e3a8:	4613      	mov	r3, r2
 800e3aa:	005b      	lsls	r3, r3, #1
 800e3ac:	4413      	add	r3, r2
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e3b4:	4413      	add	r3, r2
 800e3b6:	3b34      	subs	r3, #52	; 0x34
 800e3b8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800e3ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d10a      	bne.n	800e3d8 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800e3c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3c4:	4613      	mov	r3, r2
 800e3c6:	005b      	lsls	r3, r3, #1
 800e3c8:	4413      	add	r3, r2
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e3d0:	4413      	add	r3, r2
 800e3d2:	3b34      	subs	r3, #52	; 0x34
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	601a      	str	r2, [r3, #0]
    }

    i++;
 800e3d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3da:	3301      	adds	r3, #1
 800e3dc:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800e3de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	643b      	str	r3, [r7, #64]	; 0x40
 800e3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d1b2      	bne.n	800e350 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	891b      	ldrh	r3, [r3, #8]
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	4b08      	ldr	r3, [pc, #32]	; (800e414 <low_level_output+0xec>)
 800e3f2:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800e3f4:	4a07      	ldr	r2, [pc, #28]	; (800e414 <low_level_output+0xec>)
 800e3f6:	f107 030c 	add.w	r3, r7, #12
 800e3fa:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800e3fc:	2214      	movs	r2, #20
 800e3fe:	4905      	ldr	r1, [pc, #20]	; (800e414 <low_level_output+0xec>)
 800e400:	4805      	ldr	r0, [pc, #20]	; (800e418 <low_level_output+0xf0>)
 800e402:	f7f7 fcce 	bl	8005da2 <HAL_ETH_Transmit>

  return errval;
 800e406:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3748      	adds	r7, #72	; 0x48
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	240042d4 	.word	0x240042d4
 800e418:	2400424c 	.word	0x2400424c

0800e41c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d106      	bne.n	800e438 <ethernetif_init+0x1c>
 800e42a:	4b0e      	ldr	r3, [pc, #56]	; (800e464 <ethernetif_init+0x48>)
 800e42c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e430:	490d      	ldr	r1, [pc, #52]	; (800e468 <ethernetif_init+0x4c>)
 800e432:	480e      	ldr	r0, [pc, #56]	; (800e46c <ethernetif_init+0x50>)
 800e434:	f00d fcda 	bl	801bdec <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2273      	movs	r2, #115	; 0x73
 800e43c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2274      	movs	r2, #116	; 0x74
 800e444:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	4a09      	ldr	r2, [pc, #36]	; (800e470 <ethernetif_init+0x54>)
 800e44c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	4a08      	ldr	r2, [pc, #32]	; (800e474 <ethernetif_init+0x58>)
 800e452:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7ff feb7 	bl	800e1c8 <low_level_init>

  return ERR_OK;
 800e45a:	2300      	movs	r3, #0
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3708      	adds	r7, #8
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	0801fb14 	.word	0x0801fb14
 800e468:	0801fb30 	.word	0x0801fb30
 800e46c:	0801fb40 	.word	0x0801fb40
 800e470:	0800ef21 	.word	0x0800ef21
 800e474:	0800e329 	.word	0x0800e329

0800e478 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e47c:	f7f4 fbf0 	bl	8002c60 <HAL_GetTick>
 800e480:	4603      	mov	r3, r0
}
 800e482:	4618      	mov	r0, r3
 800e484:	bd80      	pop	{r7, pc}
	...

0800e488 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800e48c:	4802      	ldr	r0, [pc, #8]	; (800e498 <ETH_PHY_IO_Init+0x10>)
 800e48e:	f7f8 f8ef 	bl	8006670 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800e492:	2300      	movs	r3, #0
}
 800e494:	4618      	mov	r0, r3
 800e496:	bd80      	pop	{r7, pc}
 800e498:	2400424c 	.word	0x2400424c

0800e49c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800e49c:	b480      	push	{r7}
 800e49e:	af00      	add	r7, sp, #0
  return 0;
 800e4a0:	2300      	movs	r3, #0
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr

0800e4ac <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b084      	sub	sp, #16
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	60f8      	str	r0, [r7, #12]
 800e4b4:	60b9      	str	r1, [r7, #8]
 800e4b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	68ba      	ldr	r2, [r7, #8]
 800e4bc:	68f9      	ldr	r1, [r7, #12]
 800e4be:	4807      	ldr	r0, [pc, #28]	; (800e4dc <ETH_PHY_IO_ReadReg+0x30>)
 800e4c0:	f7f7 fe40 	bl	8006144 <HAL_ETH_ReadPHYRegister>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d002      	beq.n	800e4d0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800e4ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4ce:	e000      	b.n	800e4d2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800e4d0:	2300      	movs	r3, #0
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	2400424c 	.word	0x2400424c

0800e4e0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	60f8      	str	r0, [r7, #12]
 800e4e8:	60b9      	str	r1, [r7, #8]
 800e4ea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	68ba      	ldr	r2, [r7, #8]
 800e4f0:	68f9      	ldr	r1, [r7, #12]
 800e4f2:	4807      	ldr	r0, [pc, #28]	; (800e510 <ETH_PHY_IO_WriteReg+0x30>)
 800e4f4:	f7f7 fe7a 	bl	80061ec <HAL_ETH_WritePHYRegister>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d002      	beq.n	800e504 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800e4fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e502:	e000      	b.n	800e506 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800e504:	2300      	movs	r3, #0
}
 800e506:	4618      	mov	r0, r3
 800e508:	3710      	adds	r7, #16
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop
 800e510:	2400424c 	.word	0x2400424c

0800e514 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e518:	f7f4 fba2 	bl	8002c60 <HAL_GetTick>
 800e51c:	4603      	mov	r3, r0
}
 800e51e:	4618      	mov	r0, r3
 800e520:	bd80      	pop	{r7, pc}
	...

0800e524 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b0a0      	sub	sp, #128	; 0x80
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800e52c:	2300      	movs	r3, #0
 800e52e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e530:	2300      	movs	r3, #0
 800e532:	67bb      	str	r3, [r7, #120]	; 0x78
 800e534:	2300      	movs	r3, #0
 800e536:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e538:	483a      	ldr	r0, [pc, #232]	; (800e624 <ethernet_link_check_state+0x100>)
 800e53a:	f7f4 fa84 	bl	8002a46 <LAN8742_GetLinkState>
 800e53e:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e546:	089b      	lsrs	r3, r3, #2
 800e548:	f003 0301 	and.w	r3, r3, #1
 800e54c:	b2db      	uxtb	r3, r3
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d00c      	beq.n	800e56c <ethernet_link_check_state+0x48>
 800e552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e554:	2b01      	cmp	r3, #1
 800e556:	dc09      	bgt.n	800e56c <ethernet_link_check_state+0x48>
  {
    HAL_ETH_Stop(&heth);
 800e558:	4833      	ldr	r0, [pc, #204]	; (800e628 <ethernet_link_check_state+0x104>)
 800e55a:	f7f7 fbd2 	bl	8005d02 <HAL_ETH_Stop>
    netif_set_down(netif);
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f003 fb04 	bl	8011b6c <netif_set_down>
    netif_set_link_down(netif);
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f003 fb67 	bl	8011c38 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800e56a:	e056      	b.n	800e61a <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e572:	f003 0304 	and.w	r3, r3, #4
 800e576:	2b00      	cmp	r3, #0
 800e578:	d14f      	bne.n	800e61a <ethernet_link_check_state+0xf6>
 800e57a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	dd4c      	ble.n	800e61a <ethernet_link_check_state+0xf6>
 800e580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e582:	3b02      	subs	r3, #2
 800e584:	2b03      	cmp	r3, #3
 800e586:	d82b      	bhi.n	800e5e0 <ethernet_link_check_state+0xbc>
 800e588:	a201      	add	r2, pc, #4	; (adr r2, 800e590 <ethernet_link_check_state+0x6c>)
 800e58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e58e:	bf00      	nop
 800e590:	0800e5a1 	.word	0x0800e5a1
 800e594:	0800e5b3 	.word	0x0800e5b3
 800e598:	0800e5c3 	.word	0x0800e5c3
 800e59c:	0800e5d3 	.word	0x0800e5d3
      duplex = ETH_FULLDUPLEX_MODE;
 800e5a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e5a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e5a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e5aa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e5b0:	e017      	b.n	800e5e2 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e5b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e5ba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e5c0:	e00f      	b.n	800e5e2 <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 800e5c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e5c6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e5d0:	e007      	b.n	800e5e2 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e5de:	e000      	b.n	800e5e2 <ethernet_link_check_state+0xbe>
      break;
 800e5e0:	bf00      	nop
    if(linkchanged)
 800e5e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d018      	beq.n	800e61a <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e5e8:	f107 030c 	add.w	r3, r7, #12
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	480e      	ldr	r0, [pc, #56]	; (800e628 <ethernet_link_check_state+0x104>)
 800e5f0:	f7f7 fe50 	bl	8006294 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800e5f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5f6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800e5f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5fa:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e5fc:	f107 030c 	add.w	r3, r7, #12
 800e600:	4619      	mov	r1, r3
 800e602:	4809      	ldr	r0, [pc, #36]	; (800e628 <ethernet_link_check_state+0x104>)
 800e604:	f7f8 f81a 	bl	800663c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800e608:	4807      	ldr	r0, [pc, #28]	; (800e628 <ethernet_link_check_state+0x104>)
 800e60a:	f7f7 fb1e 	bl	8005c4a <HAL_ETH_Start>
      netif_set_up(netif);
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f003 fa40 	bl	8011a94 <netif_set_up>
      netif_set_link_up(netif);
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f003 fadb 	bl	8011bd0 <netif_set_link_up>
}
 800e61a:	bf00      	nop
 800e61c:	3780      	adds	r7, #128	; 0x80
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
 800e622:	bf00      	nop
 800e624:	2400422c 	.word	0x2400422c
 800e628:	2400424c 	.word	0x2400424c

0800e62c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b083      	sub	sp, #12
 800e630:	af00      	add	r7, sp, #0
 800e632:	4603      	mov	r3, r0
 800e634:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e636:	88fb      	ldrh	r3, [r7, #6]
 800e638:	021b      	lsls	r3, r3, #8
 800e63a:	b21a      	sxth	r2, r3
 800e63c:	88fb      	ldrh	r3, [r7, #6]
 800e63e:	0a1b      	lsrs	r3, r3, #8
 800e640:	b29b      	uxth	r3, r3
 800e642:	b21b      	sxth	r3, r3
 800e644:	4313      	orrs	r3, r2
 800e646:	b21b      	sxth	r3, r3
 800e648:	b29b      	uxth	r3, r3
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	370c      	adds	r7, #12
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr

0800e656 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e656:	b480      	push	{r7}
 800e658:	b083      	sub	sp, #12
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	061a      	lsls	r2, r3, #24
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	021b      	lsls	r3, r3, #8
 800e666:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e66a:	431a      	orrs	r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	0a1b      	lsrs	r3, r3, #8
 800e670:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e674:	431a      	orrs	r2, r3
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	0e1b      	lsrs	r3, r3, #24
 800e67a:	4313      	orrs	r3, r2
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	370c      	adds	r7, #12
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr

0800e688 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e690:	4915      	ldr	r1, [pc, #84]	; (800e6e8 <etharp_free_entry+0x60>)
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	4613      	mov	r3, r2
 800e696:	005b      	lsls	r3, r3, #1
 800e698:	4413      	add	r3, r2
 800e69a:	00db      	lsls	r3, r3, #3
 800e69c:	440b      	add	r3, r1
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d013      	beq.n	800e6cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e6a4:	4910      	ldr	r1, [pc, #64]	; (800e6e8 <etharp_free_entry+0x60>)
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	005b      	lsls	r3, r3, #1
 800e6ac:	4413      	add	r3, r2
 800e6ae:	00db      	lsls	r3, r3, #3
 800e6b0:	440b      	add	r3, r1
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f003 fe4f 	bl	8012358 <pbuf_free>
    arp_table[i].q = NULL;
 800e6ba:	490b      	ldr	r1, [pc, #44]	; (800e6e8 <etharp_free_entry+0x60>)
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	4613      	mov	r3, r2
 800e6c0:	005b      	lsls	r3, r3, #1
 800e6c2:	4413      	add	r3, r2
 800e6c4:	00db      	lsls	r3, r3, #3
 800e6c6:	440b      	add	r3, r1
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e6cc:	4906      	ldr	r1, [pc, #24]	; (800e6e8 <etharp_free_entry+0x60>)
 800e6ce:	687a      	ldr	r2, [r7, #4]
 800e6d0:	4613      	mov	r3, r2
 800e6d2:	005b      	lsls	r3, r3, #1
 800e6d4:	4413      	add	r3, r2
 800e6d6:	00db      	lsls	r3, r3, #3
 800e6d8:	440b      	add	r3, r1
 800e6da:	3314      	adds	r3, #20
 800e6dc:	2200      	movs	r2, #0
 800e6de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e6e0:	bf00      	nop
 800e6e2:	3708      	adds	r7, #8
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	24003a40 	.word	0x24003a40

0800e6ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	607b      	str	r3, [r7, #4]
 800e6f6:	e096      	b.n	800e826 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e6f8:	494f      	ldr	r1, [pc, #316]	; (800e838 <etharp_tmr+0x14c>)
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	005b      	lsls	r3, r3, #1
 800e700:	4413      	add	r3, r2
 800e702:	00db      	lsls	r3, r3, #3
 800e704:	440b      	add	r3, r1
 800e706:	3314      	adds	r3, #20
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e70c:	78fb      	ldrb	r3, [r7, #3]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	f000 8086 	beq.w	800e820 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e714:	4948      	ldr	r1, [pc, #288]	; (800e838 <etharp_tmr+0x14c>)
 800e716:	687a      	ldr	r2, [r7, #4]
 800e718:	4613      	mov	r3, r2
 800e71a:	005b      	lsls	r3, r3, #1
 800e71c:	4413      	add	r3, r2
 800e71e:	00db      	lsls	r3, r3, #3
 800e720:	440b      	add	r3, r1
 800e722:	3312      	adds	r3, #18
 800e724:	881b      	ldrh	r3, [r3, #0]
 800e726:	3301      	adds	r3, #1
 800e728:	b298      	uxth	r0, r3
 800e72a:	4943      	ldr	r1, [pc, #268]	; (800e838 <etharp_tmr+0x14c>)
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	4613      	mov	r3, r2
 800e730:	005b      	lsls	r3, r3, #1
 800e732:	4413      	add	r3, r2
 800e734:	00db      	lsls	r3, r3, #3
 800e736:	440b      	add	r3, r1
 800e738:	3312      	adds	r3, #18
 800e73a:	4602      	mov	r2, r0
 800e73c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e73e:	493e      	ldr	r1, [pc, #248]	; (800e838 <etharp_tmr+0x14c>)
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	4613      	mov	r3, r2
 800e744:	005b      	lsls	r3, r3, #1
 800e746:	4413      	add	r3, r2
 800e748:	00db      	lsls	r3, r3, #3
 800e74a:	440b      	add	r3, r1
 800e74c:	3312      	adds	r3, #18
 800e74e:	881b      	ldrh	r3, [r3, #0]
 800e750:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e754:	d215      	bcs.n	800e782 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e756:	4938      	ldr	r1, [pc, #224]	; (800e838 <etharp_tmr+0x14c>)
 800e758:	687a      	ldr	r2, [r7, #4]
 800e75a:	4613      	mov	r3, r2
 800e75c:	005b      	lsls	r3, r3, #1
 800e75e:	4413      	add	r3, r2
 800e760:	00db      	lsls	r3, r3, #3
 800e762:	440b      	add	r3, r1
 800e764:	3314      	adds	r3, #20
 800e766:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d10e      	bne.n	800e78a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e76c:	4932      	ldr	r1, [pc, #200]	; (800e838 <etharp_tmr+0x14c>)
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	4613      	mov	r3, r2
 800e772:	005b      	lsls	r3, r3, #1
 800e774:	4413      	add	r3, r2
 800e776:	00db      	lsls	r3, r3, #3
 800e778:	440b      	add	r3, r1
 800e77a:	3312      	adds	r3, #18
 800e77c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e77e:	2b04      	cmp	r3, #4
 800e780:	d903      	bls.n	800e78a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f7ff ff80 	bl	800e688 <etharp_free_entry>
 800e788:	e04a      	b.n	800e820 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e78a:	492b      	ldr	r1, [pc, #172]	; (800e838 <etharp_tmr+0x14c>)
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	4613      	mov	r3, r2
 800e790:	005b      	lsls	r3, r3, #1
 800e792:	4413      	add	r3, r2
 800e794:	00db      	lsls	r3, r3, #3
 800e796:	440b      	add	r3, r1
 800e798:	3314      	adds	r3, #20
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	2b03      	cmp	r3, #3
 800e79e:	d10a      	bne.n	800e7b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e7a0:	4925      	ldr	r1, [pc, #148]	; (800e838 <etharp_tmr+0x14c>)
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	4613      	mov	r3, r2
 800e7a6:	005b      	lsls	r3, r3, #1
 800e7a8:	4413      	add	r3, r2
 800e7aa:	00db      	lsls	r3, r3, #3
 800e7ac:	440b      	add	r3, r1
 800e7ae:	3314      	adds	r3, #20
 800e7b0:	2204      	movs	r2, #4
 800e7b2:	701a      	strb	r2, [r3, #0]
 800e7b4:	e034      	b.n	800e820 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e7b6:	4920      	ldr	r1, [pc, #128]	; (800e838 <etharp_tmr+0x14c>)
 800e7b8:	687a      	ldr	r2, [r7, #4]
 800e7ba:	4613      	mov	r3, r2
 800e7bc:	005b      	lsls	r3, r3, #1
 800e7be:	4413      	add	r3, r2
 800e7c0:	00db      	lsls	r3, r3, #3
 800e7c2:	440b      	add	r3, r1
 800e7c4:	3314      	adds	r3, #20
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	2b04      	cmp	r3, #4
 800e7ca:	d10a      	bne.n	800e7e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e7cc:	491a      	ldr	r1, [pc, #104]	; (800e838 <etharp_tmr+0x14c>)
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	4613      	mov	r3, r2
 800e7d2:	005b      	lsls	r3, r3, #1
 800e7d4:	4413      	add	r3, r2
 800e7d6:	00db      	lsls	r3, r3, #3
 800e7d8:	440b      	add	r3, r1
 800e7da:	3314      	adds	r3, #20
 800e7dc:	2202      	movs	r2, #2
 800e7de:	701a      	strb	r2, [r3, #0]
 800e7e0:	e01e      	b.n	800e820 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e7e2:	4915      	ldr	r1, [pc, #84]	; (800e838 <etharp_tmr+0x14c>)
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	005b      	lsls	r3, r3, #1
 800e7ea:	4413      	add	r3, r2
 800e7ec:	00db      	lsls	r3, r3, #3
 800e7ee:	440b      	add	r3, r1
 800e7f0:	3314      	adds	r3, #20
 800e7f2:	781b      	ldrb	r3, [r3, #0]
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	d113      	bne.n	800e820 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e7f8:	490f      	ldr	r1, [pc, #60]	; (800e838 <etharp_tmr+0x14c>)
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	005b      	lsls	r3, r3, #1
 800e800:	4413      	add	r3, r2
 800e802:	00db      	lsls	r3, r3, #3
 800e804:	440b      	add	r3, r1
 800e806:	3308      	adds	r3, #8
 800e808:	6818      	ldr	r0, [r3, #0]
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	4613      	mov	r3, r2
 800e80e:	005b      	lsls	r3, r3, #1
 800e810:	4413      	add	r3, r2
 800e812:	00db      	lsls	r3, r3, #3
 800e814:	4a08      	ldr	r2, [pc, #32]	; (800e838 <etharp_tmr+0x14c>)
 800e816:	4413      	add	r3, r2
 800e818:	3304      	adds	r3, #4
 800e81a:	4619      	mov	r1, r3
 800e81c:	f000 fe6e 	bl	800f4fc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	3301      	adds	r3, #1
 800e824:	607b      	str	r3, [r7, #4]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2b09      	cmp	r3, #9
 800e82a:	f77f af65 	ble.w	800e6f8 <etharp_tmr+0xc>
      }
    }
  }
}
 800e82e:	bf00      	nop
 800e830:	bf00      	nop
 800e832:	3708      	adds	r7, #8
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}
 800e838:	24003a40 	.word	0x24003a40

0800e83c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b08a      	sub	sp, #40	; 0x28
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	460b      	mov	r3, r1
 800e846:	607a      	str	r2, [r7, #4]
 800e848:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e84a:	230a      	movs	r3, #10
 800e84c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e84e:	230a      	movs	r3, #10
 800e850:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e852:	230a      	movs	r3, #10
 800e854:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e856:	2300      	movs	r3, #0
 800e858:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e85a:	230a      	movs	r3, #10
 800e85c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e85e:	2300      	movs	r3, #0
 800e860:	83bb      	strh	r3, [r7, #28]
 800e862:	2300      	movs	r3, #0
 800e864:	837b      	strh	r3, [r7, #26]
 800e866:	2300      	movs	r3, #0
 800e868:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e86a:	2300      	movs	r3, #0
 800e86c:	843b      	strh	r3, [r7, #32]
 800e86e:	e0ae      	b.n	800e9ce <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e870:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e874:	49a6      	ldr	r1, [pc, #664]	; (800eb10 <etharp_find_entry+0x2d4>)
 800e876:	4613      	mov	r3, r2
 800e878:	005b      	lsls	r3, r3, #1
 800e87a:	4413      	add	r3, r2
 800e87c:	00db      	lsls	r3, r3, #3
 800e87e:	440b      	add	r3, r1
 800e880:	3314      	adds	r3, #20
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e886:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e88a:	2b0a      	cmp	r3, #10
 800e88c:	d105      	bne.n	800e89a <etharp_find_entry+0x5e>
 800e88e:	7dfb      	ldrb	r3, [r7, #23]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d102      	bne.n	800e89a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e894:	8c3b      	ldrh	r3, [r7, #32]
 800e896:	847b      	strh	r3, [r7, #34]	; 0x22
 800e898:	e095      	b.n	800e9c6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e89a:	7dfb      	ldrb	r3, [r7, #23]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f000 8092 	beq.w	800e9c6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e8a2:	7dfb      	ldrb	r3, [r7, #23]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d009      	beq.n	800e8bc <etharp_find_entry+0x80>
 800e8a8:	7dfb      	ldrb	r3, [r7, #23]
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d806      	bhi.n	800e8bc <etharp_find_entry+0x80>
 800e8ae:	4b99      	ldr	r3, [pc, #612]	; (800eb14 <etharp_find_entry+0x2d8>)
 800e8b0:	f240 1223 	movw	r2, #291	; 0x123
 800e8b4:	4998      	ldr	r1, [pc, #608]	; (800eb18 <etharp_find_entry+0x2dc>)
 800e8b6:	4899      	ldr	r0, [pc, #612]	; (800eb1c <etharp_find_entry+0x2e0>)
 800e8b8:	f00d fa98 	bl	801bdec <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d020      	beq.n	800e904 <etharp_find_entry+0xc8>
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	6819      	ldr	r1, [r3, #0]
 800e8c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8ca:	4891      	ldr	r0, [pc, #580]	; (800eb10 <etharp_find_entry+0x2d4>)
 800e8cc:	4613      	mov	r3, r2
 800e8ce:	005b      	lsls	r3, r3, #1
 800e8d0:	4413      	add	r3, r2
 800e8d2:	00db      	lsls	r3, r3, #3
 800e8d4:	4403      	add	r3, r0
 800e8d6:	3304      	adds	r3, #4
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4299      	cmp	r1, r3
 800e8dc:	d112      	bne.n	800e904 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d00c      	beq.n	800e8fe <etharp_find_entry+0xc2>
 800e8e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8e8:	4989      	ldr	r1, [pc, #548]	; (800eb10 <etharp_find_entry+0x2d4>)
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	005b      	lsls	r3, r3, #1
 800e8ee:	4413      	add	r3, r2
 800e8f0:	00db      	lsls	r3, r3, #3
 800e8f2:	440b      	add	r3, r1
 800e8f4:	3308      	adds	r3, #8
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d102      	bne.n	800e904 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e8fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e902:	e100      	b.n	800eb06 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e904:	7dfb      	ldrb	r3, [r7, #23]
 800e906:	2b01      	cmp	r3, #1
 800e908:	d140      	bne.n	800e98c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e90a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e90e:	4980      	ldr	r1, [pc, #512]	; (800eb10 <etharp_find_entry+0x2d4>)
 800e910:	4613      	mov	r3, r2
 800e912:	005b      	lsls	r3, r3, #1
 800e914:	4413      	add	r3, r2
 800e916:	00db      	lsls	r3, r3, #3
 800e918:	440b      	add	r3, r1
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d01a      	beq.n	800e956 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e920:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e924:	497a      	ldr	r1, [pc, #488]	; (800eb10 <etharp_find_entry+0x2d4>)
 800e926:	4613      	mov	r3, r2
 800e928:	005b      	lsls	r3, r3, #1
 800e92a:	4413      	add	r3, r2
 800e92c:	00db      	lsls	r3, r3, #3
 800e92e:	440b      	add	r3, r1
 800e930:	3312      	adds	r3, #18
 800e932:	881b      	ldrh	r3, [r3, #0]
 800e934:	8bba      	ldrh	r2, [r7, #28]
 800e936:	429a      	cmp	r2, r3
 800e938:	d845      	bhi.n	800e9c6 <etharp_find_entry+0x18a>
            old_queue = i;
 800e93a:	8c3b      	ldrh	r3, [r7, #32]
 800e93c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e93e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e942:	4973      	ldr	r1, [pc, #460]	; (800eb10 <etharp_find_entry+0x2d4>)
 800e944:	4613      	mov	r3, r2
 800e946:	005b      	lsls	r3, r3, #1
 800e948:	4413      	add	r3, r2
 800e94a:	00db      	lsls	r3, r3, #3
 800e94c:	440b      	add	r3, r1
 800e94e:	3312      	adds	r3, #18
 800e950:	881b      	ldrh	r3, [r3, #0]
 800e952:	83bb      	strh	r3, [r7, #28]
 800e954:	e037      	b.n	800e9c6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e956:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e95a:	496d      	ldr	r1, [pc, #436]	; (800eb10 <etharp_find_entry+0x2d4>)
 800e95c:	4613      	mov	r3, r2
 800e95e:	005b      	lsls	r3, r3, #1
 800e960:	4413      	add	r3, r2
 800e962:	00db      	lsls	r3, r3, #3
 800e964:	440b      	add	r3, r1
 800e966:	3312      	adds	r3, #18
 800e968:	881b      	ldrh	r3, [r3, #0]
 800e96a:	8b7a      	ldrh	r2, [r7, #26]
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d82a      	bhi.n	800e9c6 <etharp_find_entry+0x18a>
            old_pending = i;
 800e970:	8c3b      	ldrh	r3, [r7, #32]
 800e972:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e974:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e978:	4965      	ldr	r1, [pc, #404]	; (800eb10 <etharp_find_entry+0x2d4>)
 800e97a:	4613      	mov	r3, r2
 800e97c:	005b      	lsls	r3, r3, #1
 800e97e:	4413      	add	r3, r2
 800e980:	00db      	lsls	r3, r3, #3
 800e982:	440b      	add	r3, r1
 800e984:	3312      	adds	r3, #18
 800e986:	881b      	ldrh	r3, [r3, #0]
 800e988:	837b      	strh	r3, [r7, #26]
 800e98a:	e01c      	b.n	800e9c6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e98c:	7dfb      	ldrb	r3, [r7, #23]
 800e98e:	2b01      	cmp	r3, #1
 800e990:	d919      	bls.n	800e9c6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e992:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e996:	495e      	ldr	r1, [pc, #376]	; (800eb10 <etharp_find_entry+0x2d4>)
 800e998:	4613      	mov	r3, r2
 800e99a:	005b      	lsls	r3, r3, #1
 800e99c:	4413      	add	r3, r2
 800e99e:	00db      	lsls	r3, r3, #3
 800e9a0:	440b      	add	r3, r1
 800e9a2:	3312      	adds	r3, #18
 800e9a4:	881b      	ldrh	r3, [r3, #0]
 800e9a6:	8b3a      	ldrh	r2, [r7, #24]
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d80c      	bhi.n	800e9c6 <etharp_find_entry+0x18a>
            old_stable = i;
 800e9ac:	8c3b      	ldrh	r3, [r7, #32]
 800e9ae:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e9b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e9b4:	4956      	ldr	r1, [pc, #344]	; (800eb10 <etharp_find_entry+0x2d4>)
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	005b      	lsls	r3, r3, #1
 800e9ba:	4413      	add	r3, r2
 800e9bc:	00db      	lsls	r3, r3, #3
 800e9be:	440b      	add	r3, r1
 800e9c0:	3312      	adds	r3, #18
 800e9c2:	881b      	ldrh	r3, [r3, #0]
 800e9c4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e9c6:	8c3b      	ldrh	r3, [r7, #32]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	843b      	strh	r3, [r7, #32]
 800e9ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e9d2:	2b09      	cmp	r3, #9
 800e9d4:	f77f af4c 	ble.w	800e870 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e9d8:	7afb      	ldrb	r3, [r7, #11]
 800e9da:	f003 0302 	and.w	r3, r3, #2
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d108      	bne.n	800e9f4 <etharp_find_entry+0x1b8>
 800e9e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e9e6:	2b0a      	cmp	r3, #10
 800e9e8:	d107      	bne.n	800e9fa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e9ea:	7afb      	ldrb	r3, [r7, #11]
 800e9ec:	f003 0301 	and.w	r3, r3, #1
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d102      	bne.n	800e9fa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e9f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9f8:	e085      	b.n	800eb06 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e9fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e9fe:	2b09      	cmp	r3, #9
 800ea00:	dc02      	bgt.n	800ea08 <etharp_find_entry+0x1cc>
    i = empty;
 800ea02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea04:	843b      	strh	r3, [r7, #32]
 800ea06:	e039      	b.n	800ea7c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ea08:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ea0c:	2b09      	cmp	r3, #9
 800ea0e:	dc14      	bgt.n	800ea3a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ea10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea12:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ea14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea18:	493d      	ldr	r1, [pc, #244]	; (800eb10 <etharp_find_entry+0x2d4>)
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	005b      	lsls	r3, r3, #1
 800ea1e:	4413      	add	r3, r2
 800ea20:	00db      	lsls	r3, r3, #3
 800ea22:	440b      	add	r3, r1
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d018      	beq.n	800ea5c <etharp_find_entry+0x220>
 800ea2a:	4b3a      	ldr	r3, [pc, #232]	; (800eb14 <etharp_find_entry+0x2d8>)
 800ea2c:	f240 126d 	movw	r2, #365	; 0x16d
 800ea30:	493b      	ldr	r1, [pc, #236]	; (800eb20 <etharp_find_entry+0x2e4>)
 800ea32:	483a      	ldr	r0, [pc, #232]	; (800eb1c <etharp_find_entry+0x2e0>)
 800ea34:	f00d f9da 	bl	801bdec <iprintf>
 800ea38:	e010      	b.n	800ea5c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ea3a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ea3e:	2b09      	cmp	r3, #9
 800ea40:	dc02      	bgt.n	800ea48 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ea42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea44:	843b      	strh	r3, [r7, #32]
 800ea46:	e009      	b.n	800ea5c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ea48:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ea4c:	2b09      	cmp	r3, #9
 800ea4e:	dc02      	bgt.n	800ea56 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ea50:	8bfb      	ldrh	r3, [r7, #30]
 800ea52:	843b      	strh	r3, [r7, #32]
 800ea54:	e002      	b.n	800ea5c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ea56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea5a:	e054      	b.n	800eb06 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ea5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea60:	2b09      	cmp	r3, #9
 800ea62:	dd06      	ble.n	800ea72 <etharp_find_entry+0x236>
 800ea64:	4b2b      	ldr	r3, [pc, #172]	; (800eb14 <etharp_find_entry+0x2d8>)
 800ea66:	f240 127f 	movw	r2, #383	; 0x17f
 800ea6a:	492e      	ldr	r1, [pc, #184]	; (800eb24 <etharp_find_entry+0x2e8>)
 800ea6c:	482b      	ldr	r0, [pc, #172]	; (800eb1c <etharp_find_entry+0x2e0>)
 800ea6e:	f00d f9bd 	bl	801bdec <iprintf>
    etharp_free_entry(i);
 800ea72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7ff fe06 	bl	800e688 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ea7c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea80:	2b09      	cmp	r3, #9
 800ea82:	dd06      	ble.n	800ea92 <etharp_find_entry+0x256>
 800ea84:	4b23      	ldr	r3, [pc, #140]	; (800eb14 <etharp_find_entry+0x2d8>)
 800ea86:	f240 1283 	movw	r2, #387	; 0x183
 800ea8a:	4926      	ldr	r1, [pc, #152]	; (800eb24 <etharp_find_entry+0x2e8>)
 800ea8c:	4823      	ldr	r0, [pc, #140]	; (800eb1c <etharp_find_entry+0x2e0>)
 800ea8e:	f00d f9ad 	bl	801bdec <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ea92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea96:	491e      	ldr	r1, [pc, #120]	; (800eb10 <etharp_find_entry+0x2d4>)
 800ea98:	4613      	mov	r3, r2
 800ea9a:	005b      	lsls	r3, r3, #1
 800ea9c:	4413      	add	r3, r2
 800ea9e:	00db      	lsls	r3, r3, #3
 800eaa0:	440b      	add	r3, r1
 800eaa2:	3314      	adds	r3, #20
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d006      	beq.n	800eab8 <etharp_find_entry+0x27c>
 800eaaa:	4b1a      	ldr	r3, [pc, #104]	; (800eb14 <etharp_find_entry+0x2d8>)
 800eaac:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800eab0:	491d      	ldr	r1, [pc, #116]	; (800eb28 <etharp_find_entry+0x2ec>)
 800eab2:	481a      	ldr	r0, [pc, #104]	; (800eb1c <etharp_find_entry+0x2e0>)
 800eab4:	f00d f99a 	bl	801bdec <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d00b      	beq.n	800ead6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800eabe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	6819      	ldr	r1, [r3, #0]
 800eac6:	4812      	ldr	r0, [pc, #72]	; (800eb10 <etharp_find_entry+0x2d4>)
 800eac8:	4613      	mov	r3, r2
 800eaca:	005b      	lsls	r3, r3, #1
 800eacc:	4413      	add	r3, r2
 800eace:	00db      	lsls	r3, r3, #3
 800ead0:	4403      	add	r3, r0
 800ead2:	3304      	adds	r3, #4
 800ead4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ead6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eada:	490d      	ldr	r1, [pc, #52]	; (800eb10 <etharp_find_entry+0x2d4>)
 800eadc:	4613      	mov	r3, r2
 800eade:	005b      	lsls	r3, r3, #1
 800eae0:	4413      	add	r3, r2
 800eae2:	00db      	lsls	r3, r3, #3
 800eae4:	440b      	add	r3, r1
 800eae6:	3312      	adds	r3, #18
 800eae8:	2200      	movs	r2, #0
 800eaea:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800eaec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eaf0:	4907      	ldr	r1, [pc, #28]	; (800eb10 <etharp_find_entry+0x2d4>)
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	005b      	lsls	r3, r3, #1
 800eaf6:	4413      	add	r3, r2
 800eaf8:	00db      	lsls	r3, r3, #3
 800eafa:	440b      	add	r3, r1
 800eafc:	3308      	adds	r3, #8
 800eafe:	687a      	ldr	r2, [r7, #4]
 800eb00:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800eb02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3728      	adds	r7, #40	; 0x28
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	24003a40 	.word	0x24003a40
 800eb14:	0801fb68 	.word	0x0801fb68
 800eb18:	0801fbcc 	.word	0x0801fbcc
 800eb1c:	0801fc0c 	.word	0x0801fc0c
 800eb20:	0801fc34 	.word	0x0801fc34
 800eb24:	0801fc4c 	.word	0x0801fc4c
 800eb28:	0801fc60 	.word	0x0801fc60

0800eb2c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b088      	sub	sp, #32
 800eb30:	af02      	add	r7, sp, #8
 800eb32:	60f8      	str	r0, [r7, #12]
 800eb34:	60b9      	str	r1, [r7, #8]
 800eb36:	607a      	str	r2, [r7, #4]
 800eb38:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eb40:	2b06      	cmp	r3, #6
 800eb42:	d006      	beq.n	800eb52 <etharp_update_arp_entry+0x26>
 800eb44:	4b48      	ldr	r3, [pc, #288]	; (800ec68 <etharp_update_arp_entry+0x13c>)
 800eb46:	f240 12a9 	movw	r2, #425	; 0x1a9
 800eb4a:	4948      	ldr	r1, [pc, #288]	; (800ec6c <etharp_update_arp_entry+0x140>)
 800eb4c:	4848      	ldr	r0, [pc, #288]	; (800ec70 <etharp_update_arp_entry+0x144>)
 800eb4e:	f00d f94d 	bl	801bdec <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d012      	beq.n	800eb7e <etharp_update_arp_entry+0x52>
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d00e      	beq.n	800eb7e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	68f9      	ldr	r1, [r7, #12]
 800eb66:	4618      	mov	r0, r3
 800eb68:	f001 facc 	bl	8010104 <ip4_addr_isbroadcast_u32>
 800eb6c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d105      	bne.n	800eb7e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb7a:	2be0      	cmp	r3, #224	; 0xe0
 800eb7c:	d102      	bne.n	800eb84 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eb7e:	f06f 030f 	mvn.w	r3, #15
 800eb82:	e06c      	b.n	800ec5e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800eb84:	78fb      	ldrb	r3, [r7, #3]
 800eb86:	68fa      	ldr	r2, [r7, #12]
 800eb88:	4619      	mov	r1, r3
 800eb8a:	68b8      	ldr	r0, [r7, #8]
 800eb8c:	f7ff fe56 	bl	800e83c <etharp_find_entry>
 800eb90:	4603      	mov	r3, r0
 800eb92:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800eb94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	da02      	bge.n	800eba2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800eb9c:	8afb      	ldrh	r3, [r7, #22]
 800eb9e:	b25b      	sxtb	r3, r3
 800eba0:	e05d      	b.n	800ec5e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800eba2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eba6:	4933      	ldr	r1, [pc, #204]	; (800ec74 <etharp_update_arp_entry+0x148>)
 800eba8:	4613      	mov	r3, r2
 800ebaa:	005b      	lsls	r3, r3, #1
 800ebac:	4413      	add	r3, r2
 800ebae:	00db      	lsls	r3, r3, #3
 800ebb0:	440b      	add	r3, r1
 800ebb2:	3314      	adds	r3, #20
 800ebb4:	2202      	movs	r2, #2
 800ebb6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ebb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ebbc:	492d      	ldr	r1, [pc, #180]	; (800ec74 <etharp_update_arp_entry+0x148>)
 800ebbe:	4613      	mov	r3, r2
 800ebc0:	005b      	lsls	r3, r3, #1
 800ebc2:	4413      	add	r3, r2
 800ebc4:	00db      	lsls	r3, r3, #3
 800ebc6:	440b      	add	r3, r1
 800ebc8:	3308      	adds	r3, #8
 800ebca:	68fa      	ldr	r2, [r7, #12]
 800ebcc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ebce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	005b      	lsls	r3, r3, #1
 800ebd6:	4413      	add	r3, r2
 800ebd8:	00db      	lsls	r3, r3, #3
 800ebda:	3308      	adds	r3, #8
 800ebdc:	4a25      	ldr	r2, [pc, #148]	; (800ec74 <etharp_update_arp_entry+0x148>)
 800ebde:	4413      	add	r3, r2
 800ebe0:	3304      	adds	r3, #4
 800ebe2:	2206      	movs	r2, #6
 800ebe4:	6879      	ldr	r1, [r7, #4]
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f00c f9de 	bl	801afa8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ebec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ebf0:	4920      	ldr	r1, [pc, #128]	; (800ec74 <etharp_update_arp_entry+0x148>)
 800ebf2:	4613      	mov	r3, r2
 800ebf4:	005b      	lsls	r3, r3, #1
 800ebf6:	4413      	add	r3, r2
 800ebf8:	00db      	lsls	r3, r3, #3
 800ebfa:	440b      	add	r3, r1
 800ebfc:	3312      	adds	r3, #18
 800ebfe:	2200      	movs	r2, #0
 800ec00:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ec02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec06:	491b      	ldr	r1, [pc, #108]	; (800ec74 <etharp_update_arp_entry+0x148>)
 800ec08:	4613      	mov	r3, r2
 800ec0a:	005b      	lsls	r3, r3, #1
 800ec0c:	4413      	add	r3, r2
 800ec0e:	00db      	lsls	r3, r3, #3
 800ec10:	440b      	add	r3, r1
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d021      	beq.n	800ec5c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ec18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec1c:	4915      	ldr	r1, [pc, #84]	; (800ec74 <etharp_update_arp_entry+0x148>)
 800ec1e:	4613      	mov	r3, r2
 800ec20:	005b      	lsls	r3, r3, #1
 800ec22:	4413      	add	r3, r2
 800ec24:	00db      	lsls	r3, r3, #3
 800ec26:	440b      	add	r3, r1
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ec2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec30:	4910      	ldr	r1, [pc, #64]	; (800ec74 <etharp_update_arp_entry+0x148>)
 800ec32:	4613      	mov	r3, r2
 800ec34:	005b      	lsls	r3, r3, #1
 800ec36:	4413      	add	r3, r2
 800ec38:	00db      	lsls	r3, r3, #3
 800ec3a:	440b      	add	r3, r1
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ec46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ec4a:	9300      	str	r3, [sp, #0]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6939      	ldr	r1, [r7, #16]
 800ec50:	68f8      	ldr	r0, [r7, #12]
 800ec52:	f000 fcf3 	bl	800f63c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ec56:	6938      	ldr	r0, [r7, #16]
 800ec58:	f003 fb7e 	bl	8012358 <pbuf_free>
  }
  return ERR_OK;
 800ec5c:	2300      	movs	r3, #0
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3718      	adds	r7, #24
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	0801fb68 	.word	0x0801fb68
 800ec6c:	0801fc8c 	.word	0x0801fc8c
 800ec70:	0801fc0c 	.word	0x0801fc0c
 800ec74:	24003a40 	.word	0x24003a40

0800ec78 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b084      	sub	sp, #16
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec80:	2300      	movs	r3, #0
 800ec82:	60fb      	str	r3, [r7, #12]
 800ec84:	e01e      	b.n	800ecc4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ec86:	4913      	ldr	r1, [pc, #76]	; (800ecd4 <etharp_cleanup_netif+0x5c>)
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	4613      	mov	r3, r2
 800ec8c:	005b      	lsls	r3, r3, #1
 800ec8e:	4413      	add	r3, r2
 800ec90:	00db      	lsls	r3, r3, #3
 800ec92:	440b      	add	r3, r1
 800ec94:	3314      	adds	r3, #20
 800ec96:	781b      	ldrb	r3, [r3, #0]
 800ec98:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ec9a:	7afb      	ldrb	r3, [r7, #11]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d00e      	beq.n	800ecbe <etharp_cleanup_netif+0x46>
 800eca0:	490c      	ldr	r1, [pc, #48]	; (800ecd4 <etharp_cleanup_netif+0x5c>)
 800eca2:	68fa      	ldr	r2, [r7, #12]
 800eca4:	4613      	mov	r3, r2
 800eca6:	005b      	lsls	r3, r3, #1
 800eca8:	4413      	add	r3, r2
 800ecaa:	00db      	lsls	r3, r3, #3
 800ecac:	440b      	add	r3, r1
 800ecae:	3308      	adds	r3, #8
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	687a      	ldr	r2, [r7, #4]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d102      	bne.n	800ecbe <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f7ff fce5 	bl	800e688 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	60fb      	str	r3, [r7, #12]
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2b09      	cmp	r3, #9
 800ecc8:	dddd      	ble.n	800ec86 <etharp_cleanup_netif+0xe>
    }
  }
}
 800ecca:	bf00      	nop
 800eccc:	bf00      	nop
 800ecce:	3710      	adds	r7, #16
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	24003a40 	.word	0x24003a40

0800ecd8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ecd8:	b5b0      	push	{r4, r5, r7, lr}
 800ecda:	b08a      	sub	sp, #40	; 0x28
 800ecdc:	af04      	add	r7, sp, #16
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d107      	bne.n	800ecf8 <etharp_input+0x20>
 800ece8:	4b3d      	ldr	r3, [pc, #244]	; (800ede0 <etharp_input+0x108>)
 800ecea:	f240 228a 	movw	r2, #650	; 0x28a
 800ecee:	493d      	ldr	r1, [pc, #244]	; (800ede4 <etharp_input+0x10c>)
 800ecf0:	483d      	ldr	r0, [pc, #244]	; (800ede8 <etharp_input+0x110>)
 800ecf2:	f00d f87b 	bl	801bdec <iprintf>
 800ecf6:	e06f      	b.n	800edd8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	881b      	ldrh	r3, [r3, #0]
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed08:	d10c      	bne.n	800ed24 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ed0e:	2b06      	cmp	r3, #6
 800ed10:	d108      	bne.n	800ed24 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ed16:	2b04      	cmp	r3, #4
 800ed18:	d104      	bne.n	800ed24 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	885b      	ldrh	r3, [r3, #2]
 800ed1e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ed20:	2b08      	cmp	r3, #8
 800ed22:	d003      	beq.n	800ed2c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f003 fb17 	bl	8012358 <pbuf_free>
    return;
 800ed2a:	e055      	b.n	800edd8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	330e      	adds	r3, #14
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	3318      	adds	r3, #24
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	3304      	adds	r3, #4
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d102      	bne.n	800ed4c <etharp_input+0x74>
    for_us = 0;
 800ed46:	2300      	movs	r3, #0
 800ed48:	75fb      	strb	r3, [r7, #23]
 800ed4a:	e009      	b.n	800ed60 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ed4c:	68ba      	ldr	r2, [r7, #8]
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	3304      	adds	r3, #4
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	bf0c      	ite	eq
 800ed58:	2301      	moveq	r3, #1
 800ed5a:	2300      	movne	r3, #0
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	f103 0208 	add.w	r2, r3, #8
 800ed66:	7dfb      	ldrb	r3, [r7, #23]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d001      	beq.n	800ed70 <etharp_input+0x98>
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	e000      	b.n	800ed72 <etharp_input+0x9a>
 800ed70:	2302      	movs	r3, #2
 800ed72:	f107 010c 	add.w	r1, r7, #12
 800ed76:	6838      	ldr	r0, [r7, #0]
 800ed78:	f7ff fed8 	bl	800eb2c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	88db      	ldrh	r3, [r3, #6]
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed86:	d003      	beq.n	800ed90 <etharp_input+0xb8>
 800ed88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed8c:	d01e      	beq.n	800edcc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ed8e:	e020      	b.n	800edd2 <etharp_input+0xfa>
      if (for_us) {
 800ed90:	7dfb      	ldrb	r3, [r7, #23]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d01c      	beq.n	800edd0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800edac:	693a      	ldr	r2, [r7, #16]
 800edae:	3208      	adds	r2, #8
        etharp_raw(netif,
 800edb0:	2102      	movs	r1, #2
 800edb2:	9103      	str	r1, [sp, #12]
 800edb4:	f107 010c 	add.w	r1, r7, #12
 800edb8:	9102      	str	r1, [sp, #8]
 800edba:	9201      	str	r2, [sp, #4]
 800edbc:	9300      	str	r3, [sp, #0]
 800edbe:	462b      	mov	r3, r5
 800edc0:	4622      	mov	r2, r4
 800edc2:	4601      	mov	r1, r0
 800edc4:	6838      	ldr	r0, [r7, #0]
 800edc6:	f000 faeb 	bl	800f3a0 <etharp_raw>
      break;
 800edca:	e001      	b.n	800edd0 <etharp_input+0xf8>
      break;
 800edcc:	bf00      	nop
 800edce:	e000      	b.n	800edd2 <etharp_input+0xfa>
      break;
 800edd0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f003 fac0 	bl	8012358 <pbuf_free>
}
 800edd8:	3718      	adds	r7, #24
 800edda:	46bd      	mov	sp, r7
 800eddc:	bdb0      	pop	{r4, r5, r7, pc}
 800edde:	bf00      	nop
 800ede0:	0801fb68 	.word	0x0801fb68
 800ede4:	0801fce4 	.word	0x0801fce4
 800ede8:	0801fc0c 	.word	0x0801fc0c

0800edec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b086      	sub	sp, #24
 800edf0:	af02      	add	r7, sp, #8
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	4613      	mov	r3, r2
 800edf8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800edfa:	79fa      	ldrb	r2, [r7, #7]
 800edfc:	4944      	ldr	r1, [pc, #272]	; (800ef10 <etharp_output_to_arp_index+0x124>)
 800edfe:	4613      	mov	r3, r2
 800ee00:	005b      	lsls	r3, r3, #1
 800ee02:	4413      	add	r3, r2
 800ee04:	00db      	lsls	r3, r3, #3
 800ee06:	440b      	add	r3, r1
 800ee08:	3314      	adds	r3, #20
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d806      	bhi.n	800ee1e <etharp_output_to_arp_index+0x32>
 800ee10:	4b40      	ldr	r3, [pc, #256]	; (800ef14 <etharp_output_to_arp_index+0x128>)
 800ee12:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ee16:	4940      	ldr	r1, [pc, #256]	; (800ef18 <etharp_output_to_arp_index+0x12c>)
 800ee18:	4840      	ldr	r0, [pc, #256]	; (800ef1c <etharp_output_to_arp_index+0x130>)
 800ee1a:	f00c ffe7 	bl	801bdec <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ee1e:	79fa      	ldrb	r2, [r7, #7]
 800ee20:	493b      	ldr	r1, [pc, #236]	; (800ef10 <etharp_output_to_arp_index+0x124>)
 800ee22:	4613      	mov	r3, r2
 800ee24:	005b      	lsls	r3, r3, #1
 800ee26:	4413      	add	r3, r2
 800ee28:	00db      	lsls	r3, r3, #3
 800ee2a:	440b      	add	r3, r1
 800ee2c:	3314      	adds	r3, #20
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	2b02      	cmp	r3, #2
 800ee32:	d153      	bne.n	800eedc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ee34:	79fa      	ldrb	r2, [r7, #7]
 800ee36:	4936      	ldr	r1, [pc, #216]	; (800ef10 <etharp_output_to_arp_index+0x124>)
 800ee38:	4613      	mov	r3, r2
 800ee3a:	005b      	lsls	r3, r3, #1
 800ee3c:	4413      	add	r3, r2
 800ee3e:	00db      	lsls	r3, r3, #3
 800ee40:	440b      	add	r3, r1
 800ee42:	3312      	adds	r3, #18
 800ee44:	881b      	ldrh	r3, [r3, #0]
 800ee46:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800ee4a:	d919      	bls.n	800ee80 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ee4c:	79fa      	ldrb	r2, [r7, #7]
 800ee4e:	4613      	mov	r3, r2
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	4413      	add	r3, r2
 800ee54:	00db      	lsls	r3, r3, #3
 800ee56:	4a2e      	ldr	r2, [pc, #184]	; (800ef10 <etharp_output_to_arp_index+0x124>)
 800ee58:	4413      	add	r3, r2
 800ee5a:	3304      	adds	r3, #4
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f000 fb4c 	bl	800f4fc <etharp_request>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d138      	bne.n	800eedc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ee6a:	79fa      	ldrb	r2, [r7, #7]
 800ee6c:	4928      	ldr	r1, [pc, #160]	; (800ef10 <etharp_output_to_arp_index+0x124>)
 800ee6e:	4613      	mov	r3, r2
 800ee70:	005b      	lsls	r3, r3, #1
 800ee72:	4413      	add	r3, r2
 800ee74:	00db      	lsls	r3, r3, #3
 800ee76:	440b      	add	r3, r1
 800ee78:	3314      	adds	r3, #20
 800ee7a:	2203      	movs	r2, #3
 800ee7c:	701a      	strb	r2, [r3, #0]
 800ee7e:	e02d      	b.n	800eedc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ee80:	79fa      	ldrb	r2, [r7, #7]
 800ee82:	4923      	ldr	r1, [pc, #140]	; (800ef10 <etharp_output_to_arp_index+0x124>)
 800ee84:	4613      	mov	r3, r2
 800ee86:	005b      	lsls	r3, r3, #1
 800ee88:	4413      	add	r3, r2
 800ee8a:	00db      	lsls	r3, r3, #3
 800ee8c:	440b      	add	r3, r1
 800ee8e:	3312      	adds	r3, #18
 800ee90:	881b      	ldrh	r3, [r3, #0]
 800ee92:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ee96:	d321      	bcc.n	800eedc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ee98:	79fa      	ldrb	r2, [r7, #7]
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	005b      	lsls	r3, r3, #1
 800ee9e:	4413      	add	r3, r2
 800eea0:	00db      	lsls	r3, r3, #3
 800eea2:	4a1b      	ldr	r2, [pc, #108]	; (800ef10 <etharp_output_to_arp_index+0x124>)
 800eea4:	4413      	add	r3, r2
 800eea6:	1d19      	adds	r1, r3, #4
 800eea8:	79fa      	ldrb	r2, [r7, #7]
 800eeaa:	4613      	mov	r3, r2
 800eeac:	005b      	lsls	r3, r3, #1
 800eeae:	4413      	add	r3, r2
 800eeb0:	00db      	lsls	r3, r3, #3
 800eeb2:	3308      	adds	r3, #8
 800eeb4:	4a16      	ldr	r2, [pc, #88]	; (800ef10 <etharp_output_to_arp_index+0x124>)
 800eeb6:	4413      	add	r3, r2
 800eeb8:	3304      	adds	r3, #4
 800eeba:	461a      	mov	r2, r3
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f000 fafb 	bl	800f4b8 <etharp_request_dst>
 800eec2:	4603      	mov	r3, r0
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d109      	bne.n	800eedc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800eec8:	79fa      	ldrb	r2, [r7, #7]
 800eeca:	4911      	ldr	r1, [pc, #68]	; (800ef10 <etharp_output_to_arp_index+0x124>)
 800eecc:	4613      	mov	r3, r2
 800eece:	005b      	lsls	r3, r3, #1
 800eed0:	4413      	add	r3, r2
 800eed2:	00db      	lsls	r3, r3, #3
 800eed4:	440b      	add	r3, r1
 800eed6:	3314      	adds	r3, #20
 800eed8:	2203      	movs	r2, #3
 800eeda:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800eee2:	79fa      	ldrb	r2, [r7, #7]
 800eee4:	4613      	mov	r3, r2
 800eee6:	005b      	lsls	r3, r3, #1
 800eee8:	4413      	add	r3, r2
 800eeea:	00db      	lsls	r3, r3, #3
 800eeec:	3308      	adds	r3, #8
 800eeee:	4a08      	ldr	r2, [pc, #32]	; (800ef10 <etharp_output_to_arp_index+0x124>)
 800eef0:	4413      	add	r3, r2
 800eef2:	3304      	adds	r3, #4
 800eef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eef8:	9200      	str	r2, [sp, #0]
 800eefa:	460a      	mov	r2, r1
 800eefc:	68b9      	ldr	r1, [r7, #8]
 800eefe:	68f8      	ldr	r0, [r7, #12]
 800ef00:	f000 fb9c 	bl	800f63c <ethernet_output>
 800ef04:	4603      	mov	r3, r0
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	24003a40 	.word	0x24003a40
 800ef14:	0801fb68 	.word	0x0801fb68
 800ef18:	0801fd04 	.word	0x0801fd04
 800ef1c:	0801fc0c 	.word	0x0801fc0c

0800ef20 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b08a      	sub	sp, #40	; 0x28
 800ef24:	af02      	add	r7, sp, #8
 800ef26:	60f8      	str	r0, [r7, #12]
 800ef28:	60b9      	str	r1, [r7, #8]
 800ef2a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d106      	bne.n	800ef44 <etharp_output+0x24>
 800ef36:	4b73      	ldr	r3, [pc, #460]	; (800f104 <etharp_output+0x1e4>)
 800ef38:	f240 321e 	movw	r2, #798	; 0x31e
 800ef3c:	4972      	ldr	r1, [pc, #456]	; (800f108 <etharp_output+0x1e8>)
 800ef3e:	4873      	ldr	r0, [pc, #460]	; (800f10c <etharp_output+0x1ec>)
 800ef40:	f00c ff54 	bl	801bdec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d106      	bne.n	800ef58 <etharp_output+0x38>
 800ef4a:	4b6e      	ldr	r3, [pc, #440]	; (800f104 <etharp_output+0x1e4>)
 800ef4c:	f240 321f 	movw	r2, #799	; 0x31f
 800ef50:	496f      	ldr	r1, [pc, #444]	; (800f110 <etharp_output+0x1f0>)
 800ef52:	486e      	ldr	r0, [pc, #440]	; (800f10c <etharp_output+0x1ec>)
 800ef54:	f00c ff4a 	bl	801bdec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d106      	bne.n	800ef6c <etharp_output+0x4c>
 800ef5e:	4b69      	ldr	r3, [pc, #420]	; (800f104 <etharp_output+0x1e4>)
 800ef60:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ef64:	496b      	ldr	r1, [pc, #428]	; (800f114 <etharp_output+0x1f4>)
 800ef66:	4869      	ldr	r0, [pc, #420]	; (800f10c <etharp_output+0x1ec>)
 800ef68:	f00c ff40 	bl	801bdec <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	68f9      	ldr	r1, [r7, #12]
 800ef72:	4618      	mov	r0, r3
 800ef74:	f001 f8c6 	bl	8010104 <ip4_addr_isbroadcast_u32>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d002      	beq.n	800ef84 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ef7e:	4b66      	ldr	r3, [pc, #408]	; (800f118 <etharp_output+0x1f8>)
 800ef80:	61fb      	str	r3, [r7, #28]
 800ef82:	e0af      	b.n	800f0e4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef8c:	2be0      	cmp	r3, #224	; 0xe0
 800ef8e:	d118      	bne.n	800efc2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ef90:	2301      	movs	r3, #1
 800ef92:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ef94:	2300      	movs	r3, #0
 800ef96:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ef98:	235e      	movs	r3, #94	; 0x5e
 800ef9a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	3301      	adds	r3, #1
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	3302      	adds	r3, #2
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	3303      	adds	r3, #3
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800efba:	f107 0310 	add.w	r3, r7, #16
 800efbe:	61fb      	str	r3, [r7, #28]
 800efc0:	e090      	b.n	800f0e4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	3304      	adds	r3, #4
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	405a      	eors	r2, r3
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	3308      	adds	r3, #8
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4013      	ands	r3, r2
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d012      	beq.n	800f000 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800efe0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d00b      	beq.n	800f000 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	330c      	adds	r3, #12
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d003      	beq.n	800effa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	330c      	adds	r3, #12
 800eff6:	61bb      	str	r3, [r7, #24]
 800eff8:	e002      	b.n	800f000 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800effa:	f06f 0303 	mvn.w	r3, #3
 800effe:	e07d      	b.n	800f0fc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f000:	4b46      	ldr	r3, [pc, #280]	; (800f11c <etharp_output+0x1fc>)
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	4619      	mov	r1, r3
 800f006:	4a46      	ldr	r2, [pc, #280]	; (800f120 <etharp_output+0x200>)
 800f008:	460b      	mov	r3, r1
 800f00a:	005b      	lsls	r3, r3, #1
 800f00c:	440b      	add	r3, r1
 800f00e:	00db      	lsls	r3, r3, #3
 800f010:	4413      	add	r3, r2
 800f012:	3314      	adds	r3, #20
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	2b01      	cmp	r3, #1
 800f018:	d925      	bls.n	800f066 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f01a:	4b40      	ldr	r3, [pc, #256]	; (800f11c <etharp_output+0x1fc>)
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	4619      	mov	r1, r3
 800f020:	4a3f      	ldr	r2, [pc, #252]	; (800f120 <etharp_output+0x200>)
 800f022:	460b      	mov	r3, r1
 800f024:	005b      	lsls	r3, r3, #1
 800f026:	440b      	add	r3, r1
 800f028:	00db      	lsls	r3, r3, #3
 800f02a:	4413      	add	r3, r2
 800f02c:	3308      	adds	r3, #8
 800f02e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f030:	68fa      	ldr	r2, [r7, #12]
 800f032:	429a      	cmp	r2, r3
 800f034:	d117      	bne.n	800f066 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	4b38      	ldr	r3, [pc, #224]	; (800f11c <etharp_output+0x1fc>)
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	4618      	mov	r0, r3
 800f040:	4937      	ldr	r1, [pc, #220]	; (800f120 <etharp_output+0x200>)
 800f042:	4603      	mov	r3, r0
 800f044:	005b      	lsls	r3, r3, #1
 800f046:	4403      	add	r3, r0
 800f048:	00db      	lsls	r3, r3, #3
 800f04a:	440b      	add	r3, r1
 800f04c:	3304      	adds	r3, #4
 800f04e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f050:	429a      	cmp	r2, r3
 800f052:	d108      	bne.n	800f066 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f054:	4b31      	ldr	r3, [pc, #196]	; (800f11c <etharp_output+0x1fc>)
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	461a      	mov	r2, r3
 800f05a:	68b9      	ldr	r1, [r7, #8]
 800f05c:	68f8      	ldr	r0, [r7, #12]
 800f05e:	f7ff fec5 	bl	800edec <etharp_output_to_arp_index>
 800f062:	4603      	mov	r3, r0
 800f064:	e04a      	b.n	800f0fc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f066:	2300      	movs	r3, #0
 800f068:	75fb      	strb	r3, [r7, #23]
 800f06a:	e031      	b.n	800f0d0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f06c:	7dfa      	ldrb	r2, [r7, #23]
 800f06e:	492c      	ldr	r1, [pc, #176]	; (800f120 <etharp_output+0x200>)
 800f070:	4613      	mov	r3, r2
 800f072:	005b      	lsls	r3, r3, #1
 800f074:	4413      	add	r3, r2
 800f076:	00db      	lsls	r3, r3, #3
 800f078:	440b      	add	r3, r1
 800f07a:	3314      	adds	r3, #20
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	2b01      	cmp	r3, #1
 800f080:	d923      	bls.n	800f0ca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f082:	7dfa      	ldrb	r2, [r7, #23]
 800f084:	4926      	ldr	r1, [pc, #152]	; (800f120 <etharp_output+0x200>)
 800f086:	4613      	mov	r3, r2
 800f088:	005b      	lsls	r3, r3, #1
 800f08a:	4413      	add	r3, r2
 800f08c:	00db      	lsls	r3, r3, #3
 800f08e:	440b      	add	r3, r1
 800f090:	3308      	adds	r3, #8
 800f092:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f094:	68fa      	ldr	r2, [r7, #12]
 800f096:	429a      	cmp	r2, r3
 800f098:	d117      	bne.n	800f0ca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f09a:	69bb      	ldr	r3, [r7, #24]
 800f09c:	6819      	ldr	r1, [r3, #0]
 800f09e:	7dfa      	ldrb	r2, [r7, #23]
 800f0a0:	481f      	ldr	r0, [pc, #124]	; (800f120 <etharp_output+0x200>)
 800f0a2:	4613      	mov	r3, r2
 800f0a4:	005b      	lsls	r3, r3, #1
 800f0a6:	4413      	add	r3, r2
 800f0a8:	00db      	lsls	r3, r3, #3
 800f0aa:	4403      	add	r3, r0
 800f0ac:	3304      	adds	r3, #4
 800f0ae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f0b0:	4299      	cmp	r1, r3
 800f0b2:	d10a      	bne.n	800f0ca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f0b4:	4a19      	ldr	r2, [pc, #100]	; (800f11c <etharp_output+0x1fc>)
 800f0b6:	7dfb      	ldrb	r3, [r7, #23]
 800f0b8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f0ba:	7dfb      	ldrb	r3, [r7, #23]
 800f0bc:	461a      	mov	r2, r3
 800f0be:	68b9      	ldr	r1, [r7, #8]
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	f7ff fe93 	bl	800edec <etharp_output_to_arp_index>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	e018      	b.n	800f0fc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f0ca:	7dfb      	ldrb	r3, [r7, #23]
 800f0cc:	3301      	adds	r3, #1
 800f0ce:	75fb      	strb	r3, [r7, #23]
 800f0d0:	7dfb      	ldrb	r3, [r7, #23]
 800f0d2:	2b09      	cmp	r3, #9
 800f0d4:	d9ca      	bls.n	800f06c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f0d6:	68ba      	ldr	r2, [r7, #8]
 800f0d8:	69b9      	ldr	r1, [r7, #24]
 800f0da:	68f8      	ldr	r0, [r7, #12]
 800f0dc:	f000 f822 	bl	800f124 <etharp_query>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	e00b      	b.n	800f0fc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f0ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f0ee:	9300      	str	r3, [sp, #0]
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	68b9      	ldr	r1, [r7, #8]
 800f0f4:	68f8      	ldr	r0, [r7, #12]
 800f0f6:	f000 faa1 	bl	800f63c <ethernet_output>
 800f0fa:	4603      	mov	r3, r0
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3720      	adds	r7, #32
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	0801fb68 	.word	0x0801fb68
 800f108:	0801fce4 	.word	0x0801fce4
 800f10c:	0801fc0c 	.word	0x0801fc0c
 800f110:	0801fd34 	.word	0x0801fd34
 800f114:	0801fcd4 	.word	0x0801fcd4
 800f118:	080227c8 	.word	0x080227c8
 800f11c:	24003b30 	.word	0x24003b30
 800f120:	24003a40 	.word	0x24003a40

0800f124 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b08c      	sub	sp, #48	; 0x30
 800f128:	af02      	add	r7, sp, #8
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	3326      	adds	r3, #38	; 0x26
 800f134:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f136:	23ff      	movs	r3, #255	; 0xff
 800f138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f13c:	2300      	movs	r3, #0
 800f13e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	68f9      	ldr	r1, [r7, #12]
 800f146:	4618      	mov	r0, r3
 800f148:	f000 ffdc 	bl	8010104 <ip4_addr_isbroadcast_u32>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d10c      	bne.n	800f16c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f15a:	2be0      	cmp	r3, #224	; 0xe0
 800f15c:	d006      	beq.n	800f16c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d003      	beq.n	800f16c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d102      	bne.n	800f172 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f16c:	f06f 030f 	mvn.w	r3, #15
 800f170:	e101      	b.n	800f376 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f172:	68fa      	ldr	r2, [r7, #12]
 800f174:	2101      	movs	r1, #1
 800f176:	68b8      	ldr	r0, [r7, #8]
 800f178:	f7ff fb60 	bl	800e83c <etharp_find_entry>
 800f17c:	4603      	mov	r3, r0
 800f17e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f180:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f184:	2b00      	cmp	r3, #0
 800f186:	da02      	bge.n	800f18e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f188:	8a7b      	ldrh	r3, [r7, #18]
 800f18a:	b25b      	sxtb	r3, r3
 800f18c:	e0f3      	b.n	800f376 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f18e:	8a7b      	ldrh	r3, [r7, #18]
 800f190:	2b7e      	cmp	r3, #126	; 0x7e
 800f192:	d906      	bls.n	800f1a2 <etharp_query+0x7e>
 800f194:	4b7a      	ldr	r3, [pc, #488]	; (800f380 <etharp_query+0x25c>)
 800f196:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f19a:	497a      	ldr	r1, [pc, #488]	; (800f384 <etharp_query+0x260>)
 800f19c:	487a      	ldr	r0, [pc, #488]	; (800f388 <etharp_query+0x264>)
 800f19e:	f00c fe25 	bl	801bdec <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f1a2:	8a7b      	ldrh	r3, [r7, #18]
 800f1a4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f1a6:	7c7a      	ldrb	r2, [r7, #17]
 800f1a8:	4978      	ldr	r1, [pc, #480]	; (800f38c <etharp_query+0x268>)
 800f1aa:	4613      	mov	r3, r2
 800f1ac:	005b      	lsls	r3, r3, #1
 800f1ae:	4413      	add	r3, r2
 800f1b0:	00db      	lsls	r3, r3, #3
 800f1b2:	440b      	add	r3, r1
 800f1b4:	3314      	adds	r3, #20
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d115      	bne.n	800f1e8 <etharp_query+0xc4>
    is_new_entry = 1;
 800f1bc:	2301      	movs	r3, #1
 800f1be:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f1c0:	7c7a      	ldrb	r2, [r7, #17]
 800f1c2:	4972      	ldr	r1, [pc, #456]	; (800f38c <etharp_query+0x268>)
 800f1c4:	4613      	mov	r3, r2
 800f1c6:	005b      	lsls	r3, r3, #1
 800f1c8:	4413      	add	r3, r2
 800f1ca:	00db      	lsls	r3, r3, #3
 800f1cc:	440b      	add	r3, r1
 800f1ce:	3314      	adds	r3, #20
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f1d4:	7c7a      	ldrb	r2, [r7, #17]
 800f1d6:	496d      	ldr	r1, [pc, #436]	; (800f38c <etharp_query+0x268>)
 800f1d8:	4613      	mov	r3, r2
 800f1da:	005b      	lsls	r3, r3, #1
 800f1dc:	4413      	add	r3, r2
 800f1de:	00db      	lsls	r3, r3, #3
 800f1e0:	440b      	add	r3, r1
 800f1e2:	3308      	adds	r3, #8
 800f1e4:	68fa      	ldr	r2, [r7, #12]
 800f1e6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f1e8:	7c7a      	ldrb	r2, [r7, #17]
 800f1ea:	4968      	ldr	r1, [pc, #416]	; (800f38c <etharp_query+0x268>)
 800f1ec:	4613      	mov	r3, r2
 800f1ee:	005b      	lsls	r3, r3, #1
 800f1f0:	4413      	add	r3, r2
 800f1f2:	00db      	lsls	r3, r3, #3
 800f1f4:	440b      	add	r3, r1
 800f1f6:	3314      	adds	r3, #20
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d011      	beq.n	800f222 <etharp_query+0xfe>
 800f1fe:	7c7a      	ldrb	r2, [r7, #17]
 800f200:	4962      	ldr	r1, [pc, #392]	; (800f38c <etharp_query+0x268>)
 800f202:	4613      	mov	r3, r2
 800f204:	005b      	lsls	r3, r3, #1
 800f206:	4413      	add	r3, r2
 800f208:	00db      	lsls	r3, r3, #3
 800f20a:	440b      	add	r3, r1
 800f20c:	3314      	adds	r3, #20
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	2b01      	cmp	r3, #1
 800f212:	d806      	bhi.n	800f222 <etharp_query+0xfe>
 800f214:	4b5a      	ldr	r3, [pc, #360]	; (800f380 <etharp_query+0x25c>)
 800f216:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f21a:	495d      	ldr	r1, [pc, #372]	; (800f390 <etharp_query+0x26c>)
 800f21c:	485a      	ldr	r0, [pc, #360]	; (800f388 <etharp_query+0x264>)
 800f21e:	f00c fde5 	bl	801bdec <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f222:	6a3b      	ldr	r3, [r7, #32]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d102      	bne.n	800f22e <etharp_query+0x10a>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d10c      	bne.n	800f248 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f22e:	68b9      	ldr	r1, [r7, #8]
 800f230:	68f8      	ldr	r0, [r7, #12]
 800f232:	f000 f963 	bl	800f4fc <etharp_request>
 800f236:	4603      	mov	r3, r0
 800f238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d102      	bne.n	800f248 <etharp_query+0x124>
      return result;
 800f242:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f246:	e096      	b.n	800f376 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d106      	bne.n	800f25c <etharp_query+0x138>
 800f24e:	4b4c      	ldr	r3, [pc, #304]	; (800f380 <etharp_query+0x25c>)
 800f250:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f254:	494f      	ldr	r1, [pc, #316]	; (800f394 <etharp_query+0x270>)
 800f256:	484c      	ldr	r0, [pc, #304]	; (800f388 <etharp_query+0x264>)
 800f258:	f00c fdc8 	bl	801bdec <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f25c:	7c7a      	ldrb	r2, [r7, #17]
 800f25e:	494b      	ldr	r1, [pc, #300]	; (800f38c <etharp_query+0x268>)
 800f260:	4613      	mov	r3, r2
 800f262:	005b      	lsls	r3, r3, #1
 800f264:	4413      	add	r3, r2
 800f266:	00db      	lsls	r3, r3, #3
 800f268:	440b      	add	r3, r1
 800f26a:	3314      	adds	r3, #20
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	2b01      	cmp	r3, #1
 800f270:	d917      	bls.n	800f2a2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f272:	4a49      	ldr	r2, [pc, #292]	; (800f398 <etharp_query+0x274>)
 800f274:	7c7b      	ldrb	r3, [r7, #17]
 800f276:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f278:	7c7a      	ldrb	r2, [r7, #17]
 800f27a:	4613      	mov	r3, r2
 800f27c:	005b      	lsls	r3, r3, #1
 800f27e:	4413      	add	r3, r2
 800f280:	00db      	lsls	r3, r3, #3
 800f282:	3308      	adds	r3, #8
 800f284:	4a41      	ldr	r2, [pc, #260]	; (800f38c <etharp_query+0x268>)
 800f286:	4413      	add	r3, r2
 800f288:	3304      	adds	r3, #4
 800f28a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f28e:	9200      	str	r2, [sp, #0]
 800f290:	697a      	ldr	r2, [r7, #20]
 800f292:	6879      	ldr	r1, [r7, #4]
 800f294:	68f8      	ldr	r0, [r7, #12]
 800f296:	f000 f9d1 	bl	800f63c <ethernet_output>
 800f29a:	4603      	mov	r3, r0
 800f29c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f2a0:	e067      	b.n	800f372 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f2a2:	7c7a      	ldrb	r2, [r7, #17]
 800f2a4:	4939      	ldr	r1, [pc, #228]	; (800f38c <etharp_query+0x268>)
 800f2a6:	4613      	mov	r3, r2
 800f2a8:	005b      	lsls	r3, r3, #1
 800f2aa:	4413      	add	r3, r2
 800f2ac:	00db      	lsls	r3, r3, #3
 800f2ae:	440b      	add	r3, r1
 800f2b0:	3314      	adds	r3, #20
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d15c      	bne.n	800f372 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f2c0:	e01c      	b.n	800f2fc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	895a      	ldrh	r2, [r3, #10]
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	891b      	ldrh	r3, [r3, #8]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d10a      	bne.n	800f2e4 <etharp_query+0x1c0>
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d006      	beq.n	800f2e4 <etharp_query+0x1c0>
 800f2d6:	4b2a      	ldr	r3, [pc, #168]	; (800f380 <etharp_query+0x25c>)
 800f2d8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f2dc:	492f      	ldr	r1, [pc, #188]	; (800f39c <etharp_query+0x278>)
 800f2de:	482a      	ldr	r0, [pc, #168]	; (800f388 <etharp_query+0x264>)
 800f2e0:	f00c fd84 	bl	801bdec <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	7b1b      	ldrb	r3, [r3, #12]
 800f2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d002      	beq.n	800f2f6 <etharp_query+0x1d2>
        copy_needed = 1;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	61bb      	str	r3, [r7, #24]
        break;
 800f2f4:	e005      	b.n	800f302 <etharp_query+0x1de>
      }
      p = p->next;
 800f2f6:	69fb      	ldr	r3, [r7, #28]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d1df      	bne.n	800f2c2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f302:	69bb      	ldr	r3, [r7, #24]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d007      	beq.n	800f318 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f30e:	200e      	movs	r0, #14
 800f310:	f003 fa7e 	bl	8012810 <pbuf_clone>
 800f314:	61f8      	str	r0, [r7, #28]
 800f316:	e004      	b.n	800f322 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f31c:	69f8      	ldr	r0, [r7, #28]
 800f31e:	f003 f8bb 	bl	8012498 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f322:	69fb      	ldr	r3, [r7, #28]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d021      	beq.n	800f36c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f328:	7c7a      	ldrb	r2, [r7, #17]
 800f32a:	4918      	ldr	r1, [pc, #96]	; (800f38c <etharp_query+0x268>)
 800f32c:	4613      	mov	r3, r2
 800f32e:	005b      	lsls	r3, r3, #1
 800f330:	4413      	add	r3, r2
 800f332:	00db      	lsls	r3, r3, #3
 800f334:	440b      	add	r3, r1
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d00a      	beq.n	800f352 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f33c:	7c7a      	ldrb	r2, [r7, #17]
 800f33e:	4913      	ldr	r1, [pc, #76]	; (800f38c <etharp_query+0x268>)
 800f340:	4613      	mov	r3, r2
 800f342:	005b      	lsls	r3, r3, #1
 800f344:	4413      	add	r3, r2
 800f346:	00db      	lsls	r3, r3, #3
 800f348:	440b      	add	r3, r1
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	4618      	mov	r0, r3
 800f34e:	f003 f803 	bl	8012358 <pbuf_free>
      }
      arp_table[i].q = p;
 800f352:	7c7a      	ldrb	r2, [r7, #17]
 800f354:	490d      	ldr	r1, [pc, #52]	; (800f38c <etharp_query+0x268>)
 800f356:	4613      	mov	r3, r2
 800f358:	005b      	lsls	r3, r3, #1
 800f35a:	4413      	add	r3, r2
 800f35c:	00db      	lsls	r3, r3, #3
 800f35e:	440b      	add	r3, r1
 800f360:	69fa      	ldr	r2, [r7, #28]
 800f362:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f364:	2300      	movs	r3, #0
 800f366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f36a:	e002      	b.n	800f372 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f36c:	23ff      	movs	r3, #255	; 0xff
 800f36e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f372:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f376:	4618      	mov	r0, r3
 800f378:	3728      	adds	r7, #40	; 0x28
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	0801fb68 	.word	0x0801fb68
 800f384:	0801fd40 	.word	0x0801fd40
 800f388:	0801fc0c 	.word	0x0801fc0c
 800f38c:	24003a40 	.word	0x24003a40
 800f390:	0801fd50 	.word	0x0801fd50
 800f394:	0801fd34 	.word	0x0801fd34
 800f398:	24003b30 	.word	0x24003b30
 800f39c:	0801fd78 	.word	0x0801fd78

0800f3a0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b08a      	sub	sp, #40	; 0x28
 800f3a4:	af02      	add	r7, sp, #8
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	607a      	str	r2, [r7, #4]
 800f3ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d106      	bne.n	800f3c6 <etharp_raw+0x26>
 800f3b8:	4b3a      	ldr	r3, [pc, #232]	; (800f4a4 <etharp_raw+0x104>)
 800f3ba:	f240 4257 	movw	r2, #1111	; 0x457
 800f3be:	493a      	ldr	r1, [pc, #232]	; (800f4a8 <etharp_raw+0x108>)
 800f3c0:	483a      	ldr	r0, [pc, #232]	; (800f4ac <etharp_raw+0x10c>)
 800f3c2:	f00c fd13 	bl	801bdec <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f3c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f3ca:	211c      	movs	r1, #28
 800f3cc:	200e      	movs	r0, #14
 800f3ce:	f002 fcdf 	bl	8011d90 <pbuf_alloc>
 800f3d2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f3d4:	69bb      	ldr	r3, [r7, #24]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d102      	bne.n	800f3e0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f3da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3de:	e05d      	b.n	800f49c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	895b      	ldrh	r3, [r3, #10]
 800f3e4:	2b1b      	cmp	r3, #27
 800f3e6:	d806      	bhi.n	800f3f6 <etharp_raw+0x56>
 800f3e8:	4b2e      	ldr	r3, [pc, #184]	; (800f4a4 <etharp_raw+0x104>)
 800f3ea:	f240 4262 	movw	r2, #1122	; 0x462
 800f3ee:	4930      	ldr	r1, [pc, #192]	; (800f4b0 <etharp_raw+0x110>)
 800f3f0:	482e      	ldr	r0, [pc, #184]	; (800f4ac <etharp_raw+0x10c>)
 800f3f2:	f00c fcfb 	bl	801bdec <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f3f6:	69bb      	ldr	r3, [r7, #24]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f3fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7ff f914 	bl	800e62c <lwip_htons>
 800f404:	4603      	mov	r3, r0
 800f406:	461a      	mov	r2, r3
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f412:	2b06      	cmp	r3, #6
 800f414:	d006      	beq.n	800f424 <etharp_raw+0x84>
 800f416:	4b23      	ldr	r3, [pc, #140]	; (800f4a4 <etharp_raw+0x104>)
 800f418:	f240 4269 	movw	r2, #1129	; 0x469
 800f41c:	4925      	ldr	r1, [pc, #148]	; (800f4b4 <etharp_raw+0x114>)
 800f41e:	4823      	ldr	r0, [pc, #140]	; (800f4ac <etharp_raw+0x10c>)
 800f420:	f00c fce4 	bl	801bdec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	3308      	adds	r3, #8
 800f428:	2206      	movs	r2, #6
 800f42a:	6839      	ldr	r1, [r7, #0]
 800f42c:	4618      	mov	r0, r3
 800f42e:	f00b fdbb 	bl	801afa8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	3312      	adds	r3, #18
 800f436:	2206      	movs	r2, #6
 800f438:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f43a:	4618      	mov	r0, r3
 800f43c:	f00b fdb4 	bl	801afa8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	330e      	adds	r3, #14
 800f444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f446:	6812      	ldr	r2, [r2, #0]
 800f448:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	3318      	adds	r3, #24
 800f44e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f450:	6812      	ldr	r2, [r2, #0]
 800f452:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	2200      	movs	r2, #0
 800f458:	701a      	strb	r2, [r3, #0]
 800f45a:	2200      	movs	r2, #0
 800f45c:	f042 0201 	orr.w	r2, r2, #1
 800f460:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	2200      	movs	r2, #0
 800f466:	f042 0208 	orr.w	r2, r2, #8
 800f46a:	709a      	strb	r2, [r3, #2]
 800f46c:	2200      	movs	r2, #0
 800f46e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	2206      	movs	r2, #6
 800f474:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	2204      	movs	r2, #4
 800f47a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f47c:	f640 0306 	movw	r3, #2054	; 0x806
 800f480:	9300      	str	r3, [sp, #0]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	68ba      	ldr	r2, [r7, #8]
 800f486:	69b9      	ldr	r1, [r7, #24]
 800f488:	68f8      	ldr	r0, [r7, #12]
 800f48a:	f000 f8d7 	bl	800f63c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f48e:	69b8      	ldr	r0, [r7, #24]
 800f490:	f002 ff62 	bl	8012358 <pbuf_free>
  p = NULL;
 800f494:	2300      	movs	r3, #0
 800f496:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f498:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3720      	adds	r7, #32
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	0801fb68 	.word	0x0801fb68
 800f4a8:	0801fce4 	.word	0x0801fce4
 800f4ac:	0801fc0c 	.word	0x0801fc0c
 800f4b0:	0801fd94 	.word	0x0801fd94
 800f4b4:	0801fdc8 	.word	0x0801fdc8

0800f4b8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b088      	sub	sp, #32
 800f4bc:	af04      	add	r7, sp, #16
 800f4be:	60f8      	str	r0, [r7, #12]
 800f4c0:	60b9      	str	r1, [r7, #8]
 800f4c2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f4d4:	2201      	movs	r2, #1
 800f4d6:	9203      	str	r2, [sp, #12]
 800f4d8:	68ba      	ldr	r2, [r7, #8]
 800f4da:	9202      	str	r2, [sp, #8]
 800f4dc:	4a06      	ldr	r2, [pc, #24]	; (800f4f8 <etharp_request_dst+0x40>)
 800f4de:	9201      	str	r2, [sp, #4]
 800f4e0:	9300      	str	r3, [sp, #0]
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	687a      	ldr	r2, [r7, #4]
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	f7ff ff5a 	bl	800f3a0 <etharp_raw>
 800f4ec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	3710      	adds	r7, #16
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
 800f4f6:	bf00      	nop
 800f4f8:	080227d0 	.word	0x080227d0

0800f4fc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f506:	4a05      	ldr	r2, [pc, #20]	; (800f51c <etharp_request+0x20>)
 800f508:	6839      	ldr	r1, [r7, #0]
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f7ff ffd4 	bl	800f4b8 <etharp_request_dst>
 800f510:	4603      	mov	r3, r0
}
 800f512:	4618      	mov	r0, r3
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	080227c8 	.word	0x080227c8

0800f520 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b086      	sub	sp, #24
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f52a:	230e      	movs	r3, #14
 800f52c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	895b      	ldrh	r3, [r3, #10]
 800f532:	2b0e      	cmp	r3, #14
 800f534:	d96e      	bls.n	800f614 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	7bdb      	ldrb	r3, [r3, #15]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d106      	bne.n	800f54c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f544:	3301      	adds	r3, #1
 800f546:	b2da      	uxtb	r2, r3
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	7b1a      	ldrb	r2, [r3, #12]
 800f556:	7b5b      	ldrb	r3, [r3, #13]
 800f558:	021b      	lsls	r3, r3, #8
 800f55a:	4313      	orrs	r3, r2
 800f55c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	f003 0301 	and.w	r3, r3, #1
 800f566:	2b00      	cmp	r3, #0
 800f568:	d023      	beq.n	800f5b2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	2b01      	cmp	r3, #1
 800f570:	d10f      	bne.n	800f592 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	785b      	ldrb	r3, [r3, #1]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d11b      	bne.n	800f5b2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f57e:	2b5e      	cmp	r3, #94	; 0x5e
 800f580:	d117      	bne.n	800f5b2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	7b5b      	ldrb	r3, [r3, #13]
 800f586:	f043 0310 	orr.w	r3, r3, #16
 800f58a:	b2da      	uxtb	r2, r3
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	735a      	strb	r2, [r3, #13]
 800f590:	e00f      	b.n	800f5b2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	2206      	movs	r2, #6
 800f596:	4928      	ldr	r1, [pc, #160]	; (800f638 <ethernet_input+0x118>)
 800f598:	4618      	mov	r0, r3
 800f59a:	f00b fcf7 	bl	801af8c <memcmp>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d106      	bne.n	800f5b2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	7b5b      	ldrb	r3, [r3, #13]
 800f5a8:	f043 0308 	orr.w	r3, r3, #8
 800f5ac:	b2da      	uxtb	r2, r3
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f5b2:	89fb      	ldrh	r3, [r7, #14]
 800f5b4:	2b08      	cmp	r3, #8
 800f5b6:	d003      	beq.n	800f5c0 <ethernet_input+0xa0>
 800f5b8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f5bc:	d014      	beq.n	800f5e8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f5be:	e032      	b.n	800f626 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f5c6:	f003 0308 	and.w	r3, r3, #8
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d024      	beq.n	800f618 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f5ce:	8afb      	ldrh	r3, [r7, #22]
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f002 fe3a 	bl	801224c <pbuf_remove_header>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d11e      	bne.n	800f61c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f5de:	6839      	ldr	r1, [r7, #0]
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f000 fb93 	bl	800fd0c <ip4_input>
      break;
 800f5e6:	e013      	b.n	800f610 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f5ee:	f003 0308 	and.w	r3, r3, #8
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d014      	beq.n	800f620 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f5f6:	8afb      	ldrh	r3, [r7, #22]
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f002 fe26 	bl	801224c <pbuf_remove_header>
 800f600:	4603      	mov	r3, r0
 800f602:	2b00      	cmp	r3, #0
 800f604:	d10e      	bne.n	800f624 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f606:	6839      	ldr	r1, [r7, #0]
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f7ff fb65 	bl	800ecd8 <etharp_input>
      break;
 800f60e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f610:	2300      	movs	r3, #0
 800f612:	e00c      	b.n	800f62e <ethernet_input+0x10e>
    goto free_and_return;
 800f614:	bf00      	nop
 800f616:	e006      	b.n	800f626 <ethernet_input+0x106>
        goto free_and_return;
 800f618:	bf00      	nop
 800f61a:	e004      	b.n	800f626 <ethernet_input+0x106>
        goto free_and_return;
 800f61c:	bf00      	nop
 800f61e:	e002      	b.n	800f626 <ethernet_input+0x106>
        goto free_and_return;
 800f620:	bf00      	nop
 800f622:	e000      	b.n	800f626 <ethernet_input+0x106>
        goto free_and_return;
 800f624:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f002 fe96 	bl	8012358 <pbuf_free>
  return ERR_OK;
 800f62c:	2300      	movs	r3, #0
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3718      	adds	r7, #24
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop
 800f638:	080227c8 	.word	0x080227c8

0800f63c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b086      	sub	sp, #24
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	607a      	str	r2, [r7, #4]
 800f648:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f64a:	8c3b      	ldrh	r3, [r7, #32]
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fe ffed 	bl	800e62c <lwip_htons>
 800f652:	4603      	mov	r3, r0
 800f654:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f656:	210e      	movs	r1, #14
 800f658:	68b8      	ldr	r0, [r7, #8]
 800f65a:	f002 fde7 	bl	801222c <pbuf_add_header>
 800f65e:	4603      	mov	r3, r0
 800f660:	2b00      	cmp	r3, #0
 800f662:	d125      	bne.n	800f6b0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	8afa      	ldrh	r2, [r7, #22]
 800f66e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	2206      	movs	r2, #6
 800f674:	6839      	ldr	r1, [r7, #0]
 800f676:	4618      	mov	r0, r3
 800f678:	f00b fc96 	bl	801afa8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	3306      	adds	r3, #6
 800f680:	2206      	movs	r2, #6
 800f682:	6879      	ldr	r1, [r7, #4]
 800f684:	4618      	mov	r0, r3
 800f686:	f00b fc8f 	bl	801afa8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f690:	2b06      	cmp	r3, #6
 800f692:	d006      	beq.n	800f6a2 <ethernet_output+0x66>
 800f694:	4b0a      	ldr	r3, [pc, #40]	; (800f6c0 <ethernet_output+0x84>)
 800f696:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f69a:	490a      	ldr	r1, [pc, #40]	; (800f6c4 <ethernet_output+0x88>)
 800f69c:	480a      	ldr	r0, [pc, #40]	; (800f6c8 <ethernet_output+0x8c>)
 800f69e:	f00c fba5 	bl	801bdec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	699b      	ldr	r3, [r3, #24]
 800f6a6:	68b9      	ldr	r1, [r7, #8]
 800f6a8:	68f8      	ldr	r0, [r7, #12]
 800f6aa:	4798      	blx	r3
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	e002      	b.n	800f6b6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f6b0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f6b2:	f06f 0301 	mvn.w	r3, #1
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3718      	adds	r7, #24
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	0801fe0c 	.word	0x0801fe0c
 800f6c4:	0801fe6c 	.word	0x0801fe6c
 800f6c8:	0801fea0 	.word	0x0801fea0

0800f6cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b08e      	sub	sp, #56	; 0x38
 800f6d0:	af04      	add	r7, sp, #16
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f6d6:	4b87      	ldr	r3, [pc, #540]	; (800f8f4 <icmp_input+0x228>)
 800f6d8:	689b      	ldr	r3, [r3, #8]
 800f6da:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	f003 030f 	and.w	r3, r3, #15
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f6ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f6ee:	2b13      	cmp	r3, #19
 800f6f0:	f240 80e8 	bls.w	800f8c4 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	895b      	ldrh	r3, [r3, #10]
 800f6f8:	2b03      	cmp	r3, #3
 800f6fa:	f240 80e5 	bls.w	800f8c8 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f708:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	f000 80d2 	beq.w	800f8b6 <icmp_input+0x1ea>
 800f712:	2b08      	cmp	r3, #8
 800f714:	f040 80d2 	bne.w	800f8bc <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f718:	4b77      	ldr	r3, [pc, #476]	; (800f8f8 <icmp_input+0x22c>)
 800f71a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f71c:	4b75      	ldr	r3, [pc, #468]	; (800f8f4 <icmp_input+0x228>)
 800f71e:	695b      	ldr	r3, [r3, #20]
 800f720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f724:	2be0      	cmp	r3, #224	; 0xe0
 800f726:	f000 80d6 	beq.w	800f8d6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f72a:	4b72      	ldr	r3, [pc, #456]	; (800f8f4 <icmp_input+0x228>)
 800f72c:	695b      	ldr	r3, [r3, #20]
 800f72e:	4a71      	ldr	r2, [pc, #452]	; (800f8f4 <icmp_input+0x228>)
 800f730:	6812      	ldr	r2, [r2, #0]
 800f732:	4611      	mov	r1, r2
 800f734:	4618      	mov	r0, r3
 800f736:	f000 fce5 	bl	8010104 <ip4_addr_isbroadcast_u32>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f040 80cc 	bne.w	800f8da <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	891b      	ldrh	r3, [r3, #8]
 800f746:	2b07      	cmp	r3, #7
 800f748:	f240 80c0 	bls.w	800f8cc <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f000 f9e0 	bl	800fb12 <inet_chksum_pbuf>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d003      	beq.n	800f760 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f002 fdfd 	bl	8012358 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800f75e:	e0c5      	b.n	800f8ec <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f760:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f762:	330e      	adds	r3, #14
 800f764:	4619      	mov	r1, r3
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f002 fd60 	bl	801222c <pbuf_add_header>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d04b      	beq.n	800f80a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	891a      	ldrh	r2, [r3, #8]
 800f776:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f778:	4413      	add	r3, r2
 800f77a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	891b      	ldrh	r3, [r3, #8]
 800f780:	8b7a      	ldrh	r2, [r7, #26]
 800f782:	429a      	cmp	r2, r3
 800f784:	f0c0 80ab 	bcc.w	800f8de <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f788:	8b7b      	ldrh	r3, [r7, #26]
 800f78a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f78e:	4619      	mov	r1, r3
 800f790:	200e      	movs	r0, #14
 800f792:	f002 fafd 	bl	8011d90 <pbuf_alloc>
 800f796:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	f000 80a1 	beq.w	800f8e2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	895b      	ldrh	r3, [r3, #10]
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f7a8:	3308      	adds	r3, #8
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d203      	bcs.n	800f7b6 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f7ae:	6978      	ldr	r0, [r7, #20]
 800f7b0:	f002 fdd2 	bl	8012358 <pbuf_free>
          goto icmperr;
 800f7b4:	e096      	b.n	800f8e4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	685b      	ldr	r3, [r3, #4]
 800f7ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f7bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f00b fbf2 	bl	801afa8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f7c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	6978      	ldr	r0, [r7, #20]
 800f7ca:	f002 fd3f 	bl	801224c <pbuf_remove_header>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d009      	beq.n	800f7e8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f7d4:	4b49      	ldr	r3, [pc, #292]	; (800f8fc <icmp_input+0x230>)
 800f7d6:	22b6      	movs	r2, #182	; 0xb6
 800f7d8:	4949      	ldr	r1, [pc, #292]	; (800f900 <icmp_input+0x234>)
 800f7da:	484a      	ldr	r0, [pc, #296]	; (800f904 <icmp_input+0x238>)
 800f7dc:	f00c fb06 	bl	801bdec <iprintf>
          pbuf_free(r);
 800f7e0:	6978      	ldr	r0, [r7, #20]
 800f7e2:	f002 fdb9 	bl	8012358 <pbuf_free>
          goto icmperr;
 800f7e6:	e07d      	b.n	800f8e4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f7e8:	6879      	ldr	r1, [r7, #4]
 800f7ea:	6978      	ldr	r0, [r7, #20]
 800f7ec:	f002 fecc 	bl	8012588 <pbuf_copy>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d003      	beq.n	800f7fe <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f7f6:	6978      	ldr	r0, [r7, #20]
 800f7f8:	f002 fdae 	bl	8012358 <pbuf_free>
          goto icmperr;
 800f7fc:	e072      	b.n	800f8e4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f002 fdaa 	bl	8012358 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	607b      	str	r3, [r7, #4]
 800f808:	e00f      	b.n	800f82a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f80a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f80c:	330e      	adds	r3, #14
 800f80e:	4619      	mov	r1, r3
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f002 fd1b 	bl	801224c <pbuf_remove_header>
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d006      	beq.n	800f82a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f81c:	4b37      	ldr	r3, [pc, #220]	; (800f8fc <icmp_input+0x230>)
 800f81e:	22c7      	movs	r2, #199	; 0xc7
 800f820:	4939      	ldr	r1, [pc, #228]	; (800f908 <icmp_input+0x23c>)
 800f822:	4838      	ldr	r0, [pc, #224]	; (800f904 <icmp_input+0x238>)
 800f824:	f00c fae2 	bl	801bdec <iprintf>
          goto icmperr;
 800f828:	e05c      	b.n	800f8e4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f830:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f832:	4619      	mov	r1, r3
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f002 fcf9 	bl	801222c <pbuf_add_header>
 800f83a:	4603      	mov	r3, r0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d13c      	bne.n	800f8ba <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	685b      	ldr	r3, [r3, #4]
 800f844:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f846:	69fb      	ldr	r3, [r7, #28]
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f84e:	4b29      	ldr	r3, [pc, #164]	; (800f8f4 <icmp_input+0x228>)
 800f850:	691a      	ldr	r2, [r3, #16]
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	2200      	movs	r2, #0
 800f85a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	885b      	ldrh	r3, [r3, #2]
 800f860:	b29b      	uxth	r3, r3
 800f862:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f866:	4293      	cmp	r3, r2
 800f868:	d907      	bls.n	800f87a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	885b      	ldrh	r3, [r3, #2]
 800f86e:	b29b      	uxth	r3, r3
 800f870:	3309      	adds	r3, #9
 800f872:	b29a      	uxth	r2, r3
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	805a      	strh	r2, [r3, #2]
 800f878:	e006      	b.n	800f888 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	885b      	ldrh	r3, [r3, #2]
 800f87e:	b29b      	uxth	r3, r3
 800f880:	3308      	adds	r3, #8
 800f882:	b29a      	uxth	r2, r3
 800f884:	693b      	ldr	r3, [r7, #16]
 800f886:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	22ff      	movs	r2, #255	; 0xff
 800f88c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2200      	movs	r2, #0
 800f892:	729a      	strb	r2, [r3, #10]
 800f894:	2200      	movs	r2, #0
 800f896:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	9302      	str	r3, [sp, #8]
 800f89c:	2301      	movs	r3, #1
 800f89e:	9301      	str	r3, [sp, #4]
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	9300      	str	r3, [sp, #0]
 800f8a4:	23ff      	movs	r3, #255	; 0xff
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	69f9      	ldr	r1, [r7, #28]
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f000 fb52 	bl	800ff54 <ip4_output_if>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f8b4:	e001      	b.n	800f8ba <icmp_input+0x1ee>
      break;
 800f8b6:	bf00      	nop
 800f8b8:	e000      	b.n	800f8bc <icmp_input+0x1f0>
      break;
 800f8ba:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f002 fd4b 	bl	8012358 <pbuf_free>
  return;
 800f8c2:	e013      	b.n	800f8ec <icmp_input+0x220>
    goto lenerr;
 800f8c4:	bf00      	nop
 800f8c6:	e002      	b.n	800f8ce <icmp_input+0x202>
    goto lenerr;
 800f8c8:	bf00      	nop
 800f8ca:	e000      	b.n	800f8ce <icmp_input+0x202>
        goto lenerr;
 800f8cc:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f002 fd42 	bl	8012358 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f8d4:	e00a      	b.n	800f8ec <icmp_input+0x220>
        goto icmperr;
 800f8d6:	bf00      	nop
 800f8d8:	e004      	b.n	800f8e4 <icmp_input+0x218>
        goto icmperr;
 800f8da:	bf00      	nop
 800f8dc:	e002      	b.n	800f8e4 <icmp_input+0x218>
          goto icmperr;
 800f8de:	bf00      	nop
 800f8e0:	e000      	b.n	800f8e4 <icmp_input+0x218>
          goto icmperr;
 800f8e2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f002 fd37 	bl	8012358 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f8ea:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f8ec:	3728      	adds	r7, #40	; 0x28
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}
 800f8f2:	bf00      	nop
 800f8f4:	24004308 	.word	0x24004308
 800f8f8:	2400431c 	.word	0x2400431c
 800f8fc:	0801fec8 	.word	0x0801fec8
 800f900:	0801ff28 	.word	0x0801ff28
 800f904:	0801ff60 	.word	0x0801ff60
 800f908:	0801ff88 	.word	0x0801ff88

0800f90c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	460b      	mov	r3, r1
 800f916:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f918:	78fb      	ldrb	r3, [r7, #3]
 800f91a:	461a      	mov	r2, r3
 800f91c:	2103      	movs	r1, #3
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 f814 	bl	800f94c <icmp_send_response>
}
 800f924:	bf00      	nop
 800f926:	3708      	adds	r7, #8
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	460b      	mov	r3, r1
 800f936:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f938:	78fb      	ldrb	r3, [r7, #3]
 800f93a:	461a      	mov	r2, r3
 800f93c:	210b      	movs	r1, #11
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f000 f804 	bl	800f94c <icmp_send_response>
}
 800f944:	bf00      	nop
 800f946:	3708      	adds	r7, #8
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b08c      	sub	sp, #48	; 0x30
 800f950:	af04      	add	r7, sp, #16
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	460b      	mov	r3, r1
 800f956:	70fb      	strb	r3, [r7, #3]
 800f958:	4613      	mov	r3, r2
 800f95a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f95c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f960:	2124      	movs	r1, #36	; 0x24
 800f962:	2022      	movs	r0, #34	; 0x22
 800f964:	f002 fa14 	bl	8011d90 <pbuf_alloc>
 800f968:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f96a:	69fb      	ldr	r3, [r7, #28]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d056      	beq.n	800fa1e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	895b      	ldrh	r3, [r3, #10]
 800f974:	2b23      	cmp	r3, #35	; 0x23
 800f976:	d806      	bhi.n	800f986 <icmp_send_response+0x3a>
 800f978:	4b2b      	ldr	r3, [pc, #172]	; (800fa28 <icmp_send_response+0xdc>)
 800f97a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f97e:	492b      	ldr	r1, [pc, #172]	; (800fa2c <icmp_send_response+0xe0>)
 800f980:	482b      	ldr	r0, [pc, #172]	; (800fa30 <icmp_send_response+0xe4>)
 800f982:	f00c fa33 	bl	801bdec <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f98c:	69fb      	ldr	r3, [r7, #28]
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	78fa      	ldrb	r2, [r7, #3]
 800f996:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	78ba      	ldrb	r2, [r7, #2]
 800f99c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	711a      	strb	r2, [r3, #4]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	719a      	strb	r2, [r3, #6]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f9b2:	69fb      	ldr	r3, [r7, #28]
 800f9b4:	685b      	ldr	r3, [r3, #4]
 800f9b6:	f103 0008 	add.w	r0, r3, #8
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	221c      	movs	r2, #28
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	f00b faf1 	bl	801afa8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f9c6:	69bb      	ldr	r3, [r7, #24]
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f9cc:	f107 030c 	add.w	r3, r7, #12
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f000 f901 	bl	800fbd8 <ip4_route>
 800f9d6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d01b      	beq.n	800fa16 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	709a      	strb	r2, [r3, #2]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800f9e8:	69fb      	ldr	r3, [r7, #28]
 800f9ea:	895b      	ldrh	r3, [r3, #10]
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	6978      	ldr	r0, [r7, #20]
 800f9f0:	f000 f87d 	bl	800faee <inet_chksum>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f9fc:	f107 020c 	add.w	r2, r7, #12
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	9302      	str	r3, [sp, #8]
 800fa04:	2301      	movs	r3, #1
 800fa06:	9301      	str	r3, [sp, #4]
 800fa08:	2300      	movs	r3, #0
 800fa0a:	9300      	str	r3, [sp, #0]
 800fa0c:	23ff      	movs	r3, #255	; 0xff
 800fa0e:	2100      	movs	r1, #0
 800fa10:	69f8      	ldr	r0, [r7, #28]
 800fa12:	f000 fa9f 	bl	800ff54 <ip4_output_if>
  }
  pbuf_free(q);
 800fa16:	69f8      	ldr	r0, [r7, #28]
 800fa18:	f002 fc9e 	bl	8012358 <pbuf_free>
 800fa1c:	e000      	b.n	800fa20 <icmp_send_response+0xd4>
    return;
 800fa1e:	bf00      	nop
}
 800fa20:	3720      	adds	r7, #32
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	0801fec8 	.word	0x0801fec8
 800fa2c:	0801ffbc 	.word	0x0801ffbc
 800fa30:	0801ff60 	.word	0x0801ff60

0800fa34 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b089      	sub	sp, #36	; 0x24
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800fa42:	2300      	movs	r3, #0
 800fa44:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800fa46:	2300      	movs	r3, #0
 800fa48:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800fa4a:	69fb      	ldr	r3, [r7, #28]
 800fa4c:	f003 0301 	and.w	r3, r3, #1
 800fa50:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d00d      	beq.n	800fa74 <lwip_standard_chksum+0x40>
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	dd0a      	ble.n	800fa74 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800fa5e:	69fa      	ldr	r2, [r7, #28]
 800fa60:	1c53      	adds	r3, r2, #1
 800fa62:	61fb      	str	r3, [r7, #28]
 800fa64:	f107 030e 	add.w	r3, r7, #14
 800fa68:	3301      	adds	r3, #1
 800fa6a:	7812      	ldrb	r2, [r2, #0]
 800fa6c:	701a      	strb	r2, [r3, #0]
    len--;
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	3b01      	subs	r3, #1
 800fa72:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800fa78:	e00a      	b.n	800fa90 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800fa7a:	69bb      	ldr	r3, [r7, #24]
 800fa7c:	1c9a      	adds	r2, r3, #2
 800fa7e:	61ba      	str	r2, [r7, #24]
 800fa80:	881b      	ldrh	r3, [r3, #0]
 800fa82:	461a      	mov	r2, r3
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	4413      	add	r3, r2
 800fa88:	617b      	str	r3, [r7, #20]
    len -= 2;
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	3b02      	subs	r3, #2
 800fa8e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	dcf1      	bgt.n	800fa7a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	dd04      	ble.n	800faa6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800fa9c:	f107 030e 	add.w	r3, r7, #14
 800faa0:	69ba      	ldr	r2, [r7, #24]
 800faa2:	7812      	ldrb	r2, [r2, #0]
 800faa4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800faa6:	89fb      	ldrh	r3, [r7, #14]
 800faa8:	461a      	mov	r2, r3
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	4413      	add	r3, r2
 800faae:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	0c1a      	lsrs	r2, r3, #16
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	4413      	add	r3, r2
 800faba:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	0c1a      	lsrs	r2, r3, #16
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	4413      	add	r3, r2
 800fac6:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800fac8:	693b      	ldr	r3, [r7, #16]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d007      	beq.n	800fade <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	021b      	lsls	r3, r3, #8
 800fad2:	b29a      	uxth	r2, r3
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	0a1b      	lsrs	r3, r3, #8
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	4313      	orrs	r3, r2
 800fadc:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	b29b      	uxth	r3, r3
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3724      	adds	r7, #36	; 0x24
 800fae6:	46bd      	mov	sp, r7
 800fae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faec:	4770      	bx	lr

0800faee <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800faee:	b580      	push	{r7, lr}
 800faf0:	b082      	sub	sp, #8
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]
 800faf6:	460b      	mov	r3, r1
 800faf8:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800fafa:	887b      	ldrh	r3, [r7, #2]
 800fafc:	4619      	mov	r1, r3
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f7ff ff98 	bl	800fa34 <lwip_standard_chksum>
 800fb04:	4603      	mov	r3, r0
 800fb06:	43db      	mvns	r3, r3
 800fb08:	b29b      	uxth	r3, r3
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3708      	adds	r7, #8
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}

0800fb12 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800fb12:	b580      	push	{r7, lr}
 800fb14:	b086      	sub	sp, #24
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	613b      	str	r3, [r7, #16]
 800fb26:	e02b      	b.n	800fb80 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	685a      	ldr	r2, [r3, #4]
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	895b      	ldrh	r3, [r3, #10]
 800fb30:	4619      	mov	r1, r3
 800fb32:	4610      	mov	r0, r2
 800fb34:	f7ff ff7e 	bl	800fa34 <lwip_standard_chksum>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	4413      	add	r3, r2
 800fb40:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	0c1a      	lsrs	r2, r3, #16
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	b29b      	uxth	r3, r3
 800fb4a:	4413      	add	r3, r2
 800fb4c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	895b      	ldrh	r3, [r3, #10]
 800fb52:	f003 0301 	and.w	r3, r3, #1
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00e      	beq.n	800fb7a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	bf0c      	ite	eq
 800fb62:	2301      	moveq	r3, #1
 800fb64:	2300      	movne	r3, #0
 800fb66:	b2db      	uxtb	r3, r3
 800fb68:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	021b      	lsls	r3, r3, #8
 800fb6e:	b29a      	uxth	r2, r3
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	0a1b      	lsrs	r3, r3, #8
 800fb74:	b2db      	uxtb	r3, r3
 800fb76:	4313      	orrs	r3, r2
 800fb78:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	613b      	str	r3, [r7, #16]
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d1d0      	bne.n	800fb28 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d007      	beq.n	800fb9c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	021b      	lsls	r3, r3, #8
 800fb90:	b29a      	uxth	r2, r3
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	0a1b      	lsrs	r3, r3, #8
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	43db      	mvns	r3, r3
 800fba2:	b29b      	uxth	r3, r3
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3718      	adds	r7, #24
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800fbb6:	f001 f9e5 	bl	8010f84 <mem_init>
  memp_init();
 800fbba:	f001 fce7 	bl	801158c <memp_init>
  pbuf_init();
  netif_init();
 800fbbe:	f001 fd9f 	bl	8011700 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fbc2:	f008 f8b7 	bl	8017d34 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fbc6:	f002 fe55 	bl	8012874 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fbca:	f008 f86b 	bl	8017ca4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fbce:	bf00      	nop
 800fbd0:	3708      	adds	r7, #8
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
	...

0800fbd8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b085      	sub	sp, #20
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fbe0:	4b33      	ldr	r3, [pc, #204]	; (800fcb0 <ip4_route+0xd8>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	60fb      	str	r3, [r7, #12]
 800fbe6:	e036      	b.n	800fc56 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbee:	f003 0301 	and.w	r3, r3, #1
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d02b      	beq.n	800fc50 <ip4_route+0x78>
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbfe:	089b      	lsrs	r3, r3, #2
 800fc00:	f003 0301 	and.w	r3, r3, #1
 800fc04:	b2db      	uxtb	r3, r3
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d022      	beq.n	800fc50 <ip4_route+0x78>
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	3304      	adds	r3, #4
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d01d      	beq.n	800fc50 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	3304      	adds	r3, #4
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	405a      	eors	r2, r3
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	3308      	adds	r3, #8
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	4013      	ands	r3, r2
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d101      	bne.n	800fc30 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	e038      	b.n	800fca2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc36:	f003 0302 	and.w	r3, r3, #2
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d108      	bne.n	800fc50 <ip4_route+0x78>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681a      	ldr	r2, [r3, #0]
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	330c      	adds	r3, #12
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d101      	bne.n	800fc50 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	e028      	b.n	800fca2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	60fb      	str	r3, [r7, #12]
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d1c5      	bne.n	800fbe8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fc5c:	4b15      	ldr	r3, [pc, #84]	; (800fcb4 <ip4_route+0xdc>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d01a      	beq.n	800fc9a <ip4_route+0xc2>
 800fc64:	4b13      	ldr	r3, [pc, #76]	; (800fcb4 <ip4_route+0xdc>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc6c:	f003 0301 	and.w	r3, r3, #1
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d012      	beq.n	800fc9a <ip4_route+0xc2>
 800fc74:	4b0f      	ldr	r3, [pc, #60]	; (800fcb4 <ip4_route+0xdc>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc7c:	f003 0304 	and.w	r3, r3, #4
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d00a      	beq.n	800fc9a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fc84:	4b0b      	ldr	r3, [pc, #44]	; (800fcb4 <ip4_route+0xdc>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	3304      	adds	r3, #4
 800fc8a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d004      	beq.n	800fc9a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	2b7f      	cmp	r3, #127	; 0x7f
 800fc98:	d101      	bne.n	800fc9e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	e001      	b.n	800fca2 <ip4_route+0xca>
  }

  return netif_default;
 800fc9e:	4b05      	ldr	r3, [pc, #20]	; (800fcb4 <ip4_route+0xdc>)
 800fca0:	681b      	ldr	r3, [r3, #0]
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3714      	adds	r7, #20
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr
 800fcae:	bf00      	nop
 800fcb0:	240071e8 	.word	0x240071e8
 800fcb4:	240071ec 	.word	0x240071ec

0800fcb8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fcc6:	f003 0301 	and.w	r3, r3, #1
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d016      	beq.n	800fcfe <ip4_input_accept+0x46>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	3304      	adds	r3, #4
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d011      	beq.n	800fcfe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fcda:	4b0b      	ldr	r3, [pc, #44]	; (800fd08 <ip4_input_accept+0x50>)
 800fcdc:	695a      	ldr	r2, [r3, #20]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	3304      	adds	r3, #4
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d008      	beq.n	800fcfa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fce8:	4b07      	ldr	r3, [pc, #28]	; (800fd08 <ip4_input_accept+0x50>)
 800fcea:	695b      	ldr	r3, [r3, #20]
 800fcec:	6879      	ldr	r1, [r7, #4]
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f000 fa08 	bl	8010104 <ip4_addr_isbroadcast_u32>
 800fcf4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d001      	beq.n	800fcfe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	e000      	b.n	800fd00 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800fcfe:	2300      	movs	r3, #0
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3708      	adds	r7, #8
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}
 800fd08:	24004308 	.word	0x24004308

0800fd0c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b086      	sub	sp, #24
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	091b      	lsrs	r3, r3, #4
 800fd22:	b2db      	uxtb	r3, r3
 800fd24:	2b04      	cmp	r3, #4
 800fd26:	d004      	beq.n	800fd32 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f002 fb15 	bl	8012358 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	e107      	b.n	800ff42 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	f003 030f 	and.w	r3, r3, #15
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	009b      	lsls	r3, r3, #2
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	885b      	ldrh	r3, [r3, #2]
 800fd46:	b29b      	uxth	r3, r3
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7fe fc6f 	bl	800e62c <lwip_htons>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	891b      	ldrh	r3, [r3, #8]
 800fd56:	89ba      	ldrh	r2, [r7, #12]
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	d204      	bcs.n	800fd66 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800fd5c:	89bb      	ldrh	r3, [r7, #12]
 800fd5e:	4619      	mov	r1, r3
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f002 f973 	bl	801204c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	895b      	ldrh	r3, [r3, #10]
 800fd6a:	89fa      	ldrh	r2, [r7, #14]
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d807      	bhi.n	800fd80 <ip4_input+0x74>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	891b      	ldrh	r3, [r3, #8]
 800fd74:	89ba      	ldrh	r2, [r7, #12]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d802      	bhi.n	800fd80 <ip4_input+0x74>
 800fd7a:	89fb      	ldrh	r3, [r7, #14]
 800fd7c:	2b13      	cmp	r3, #19
 800fd7e:	d804      	bhi.n	800fd8a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f002 fae9 	bl	8012358 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800fd86:	2300      	movs	r3, #0
 800fd88:	e0db      	b.n	800ff42 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	691b      	ldr	r3, [r3, #16]
 800fd8e:	4a6f      	ldr	r2, [pc, #444]	; (800ff4c <ip4_input+0x240>)
 800fd90:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	68db      	ldr	r3, [r3, #12]
 800fd96:	4a6d      	ldr	r2, [pc, #436]	; (800ff4c <ip4_input+0x240>)
 800fd98:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fd9a:	4b6c      	ldr	r3, [pc, #432]	; (800ff4c <ip4_input+0x240>)
 800fd9c:	695b      	ldr	r3, [r3, #20]
 800fd9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fda2:	2be0      	cmp	r3, #224	; 0xe0
 800fda4:	d112      	bne.n	800fdcc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fdac:	f003 0301 	and.w	r3, r3, #1
 800fdb0:	b2db      	uxtb	r3, r3
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d007      	beq.n	800fdc6 <ip4_input+0xba>
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	3304      	adds	r3, #4
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d002      	beq.n	800fdc6 <ip4_input+0xba>
      netif = inp;
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	613b      	str	r3, [r7, #16]
 800fdc4:	e02a      	b.n	800fe1c <ip4_input+0x110>
    } else {
      netif = NULL;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	613b      	str	r3, [r7, #16]
 800fdca:	e027      	b.n	800fe1c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800fdcc:	6838      	ldr	r0, [r7, #0]
 800fdce:	f7ff ff73 	bl	800fcb8 <ip4_input_accept>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d002      	beq.n	800fdde <ip4_input+0xd2>
      netif = inp;
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	613b      	str	r3, [r7, #16]
 800fddc:	e01e      	b.n	800fe1c <ip4_input+0x110>
    } else {
      netif = NULL;
 800fdde:	2300      	movs	r3, #0
 800fde0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fde2:	4b5a      	ldr	r3, [pc, #360]	; (800ff4c <ip4_input+0x240>)
 800fde4:	695b      	ldr	r3, [r3, #20]
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	2b7f      	cmp	r3, #127	; 0x7f
 800fdea:	d017      	beq.n	800fe1c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fdec:	4b58      	ldr	r3, [pc, #352]	; (800ff50 <ip4_input+0x244>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	613b      	str	r3, [r7, #16]
 800fdf2:	e00e      	b.n	800fe12 <ip4_input+0x106>
          if (netif == inp) {
 800fdf4:	693a      	ldr	r2, [r7, #16]
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d006      	beq.n	800fe0a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800fdfc:	6938      	ldr	r0, [r7, #16]
 800fdfe:	f7ff ff5b 	bl	800fcb8 <ip4_input_accept>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d108      	bne.n	800fe1a <ip4_input+0x10e>
 800fe08:	e000      	b.n	800fe0c <ip4_input+0x100>
            continue;
 800fe0a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	613b      	str	r3, [r7, #16]
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d1ed      	bne.n	800fdf4 <ip4_input+0xe8>
 800fe18:	e000      	b.n	800fe1c <ip4_input+0x110>
            break;
 800fe1a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fe1c:	4b4b      	ldr	r3, [pc, #300]	; (800ff4c <ip4_input+0x240>)
 800fe1e:	691b      	ldr	r3, [r3, #16]
 800fe20:	6839      	ldr	r1, [r7, #0]
 800fe22:	4618      	mov	r0, r3
 800fe24:	f000 f96e 	bl	8010104 <ip4_addr_isbroadcast_u32>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d105      	bne.n	800fe3a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fe2e:	4b47      	ldr	r3, [pc, #284]	; (800ff4c <ip4_input+0x240>)
 800fe30:	691b      	ldr	r3, [r3, #16]
 800fe32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fe36:	2be0      	cmp	r3, #224	; 0xe0
 800fe38:	d104      	bne.n	800fe44 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f002 fa8c 	bl	8012358 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fe40:	2300      	movs	r3, #0
 800fe42:	e07e      	b.n	800ff42 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d104      	bne.n	800fe54 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f002 fa84 	bl	8012358 <pbuf_free>
    return ERR_OK;
 800fe50:	2300      	movs	r3, #0
 800fe52:	e076      	b.n	800ff42 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	88db      	ldrh	r3, [r3, #6]
 800fe58:	b29b      	uxth	r3, r3
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800fe60:	4013      	ands	r3, r2
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00b      	beq.n	800fe7e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f000 fc92 	bl	8010790 <ip4_reass>
 800fe6c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d101      	bne.n	800fe78 <ip4_input+0x16c>
      return ERR_OK;
 800fe74:	2300      	movs	r3, #0
 800fe76:	e064      	b.n	800ff42 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800fe7e:	4a33      	ldr	r2, [pc, #204]	; (800ff4c <ip4_input+0x240>)
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fe84:	4a31      	ldr	r2, [pc, #196]	; (800ff4c <ip4_input+0x240>)
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fe8a:	4a30      	ldr	r2, [pc, #192]	; (800ff4c <ip4_input+0x240>)
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	f003 030f 	and.w	r3, r3, #15
 800fe98:	b2db      	uxtb	r3, r3
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	b2db      	uxtb	r3, r3
 800fe9e:	b29a      	uxth	r2, r3
 800fea0:	4b2a      	ldr	r3, [pc, #168]	; (800ff4c <ip4_input+0x240>)
 800fea2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fea4:	89fb      	ldrh	r3, [r7, #14]
 800fea6:	4619      	mov	r1, r3
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f002 f9cf 	bl	801224c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	7a5b      	ldrb	r3, [r3, #9]
 800feb2:	2b11      	cmp	r3, #17
 800feb4:	d006      	beq.n	800fec4 <ip4_input+0x1b8>
 800feb6:	2b11      	cmp	r3, #17
 800feb8:	dc13      	bgt.n	800fee2 <ip4_input+0x1d6>
 800feba:	2b01      	cmp	r3, #1
 800febc:	d00c      	beq.n	800fed8 <ip4_input+0x1cc>
 800febe:	2b06      	cmp	r3, #6
 800fec0:	d005      	beq.n	800fece <ip4_input+0x1c2>
 800fec2:	e00e      	b.n	800fee2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fec4:	6839      	ldr	r1, [r7, #0]
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f007 ffe2 	bl	8017e90 <udp_input>
        break;
 800fecc:	e026      	b.n	800ff1c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800fece:	6839      	ldr	r1, [r7, #0]
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f004 f869 	bl	8013fa8 <tcp_input>
        break;
 800fed6:	e021      	b.n	800ff1c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800fed8:	6839      	ldr	r1, [r7, #0]
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f7ff fbf6 	bl	800f6cc <icmp_input>
        break;
 800fee0:	e01c      	b.n	800ff1c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fee2:	4b1a      	ldr	r3, [pc, #104]	; (800ff4c <ip4_input+0x240>)
 800fee4:	695b      	ldr	r3, [r3, #20]
 800fee6:	6939      	ldr	r1, [r7, #16]
 800fee8:	4618      	mov	r0, r3
 800feea:	f000 f90b 	bl	8010104 <ip4_addr_isbroadcast_u32>
 800feee:	4603      	mov	r3, r0
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d10f      	bne.n	800ff14 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fef4:	4b15      	ldr	r3, [pc, #84]	; (800ff4c <ip4_input+0x240>)
 800fef6:	695b      	ldr	r3, [r3, #20]
 800fef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fefc:	2be0      	cmp	r3, #224	; 0xe0
 800fefe:	d009      	beq.n	800ff14 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ff00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ff04:	4619      	mov	r1, r3
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f002 fa13 	bl	8012332 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ff0c:	2102      	movs	r1, #2
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f7ff fcfc 	bl	800f90c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f002 fa1f 	bl	8012358 <pbuf_free>
        break;
 800ff1a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ff1c:	4b0b      	ldr	r3, [pc, #44]	; (800ff4c <ip4_input+0x240>)
 800ff1e:	2200      	movs	r2, #0
 800ff20:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ff22:	4b0a      	ldr	r3, [pc, #40]	; (800ff4c <ip4_input+0x240>)
 800ff24:	2200      	movs	r2, #0
 800ff26:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ff28:	4b08      	ldr	r3, [pc, #32]	; (800ff4c <ip4_input+0x240>)
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ff2e:	4b07      	ldr	r3, [pc, #28]	; (800ff4c <ip4_input+0x240>)
 800ff30:	2200      	movs	r2, #0
 800ff32:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ff34:	4b05      	ldr	r3, [pc, #20]	; (800ff4c <ip4_input+0x240>)
 800ff36:	2200      	movs	r2, #0
 800ff38:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ff3a:	4b04      	ldr	r3, [pc, #16]	; (800ff4c <ip4_input+0x240>)
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ff40:	2300      	movs	r3, #0
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3718      	adds	r7, #24
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	24004308 	.word	0x24004308
 800ff50:	240071e8 	.word	0x240071e8

0800ff54 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b08a      	sub	sp, #40	; 0x28
 800ff58:	af04      	add	r7, sp, #16
 800ff5a:	60f8      	str	r0, [r7, #12]
 800ff5c:	60b9      	str	r1, [r7, #8]
 800ff5e:	607a      	str	r2, [r7, #4]
 800ff60:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d009      	beq.n	800ff80 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d003      	beq.n	800ff7a <ip4_output_if+0x26>
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d102      	bne.n	800ff80 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ff7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7c:	3304      	adds	r3, #4
 800ff7e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ff80:	78fa      	ldrb	r2, [r7, #3]
 800ff82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff84:	9302      	str	r3, [sp, #8]
 800ff86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ff8a:	9301      	str	r3, [sp, #4]
 800ff8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ff90:	9300      	str	r3, [sp, #0]
 800ff92:	4613      	mov	r3, r2
 800ff94:	687a      	ldr	r2, [r7, #4]
 800ff96:	6979      	ldr	r1, [r7, #20]
 800ff98:	68f8      	ldr	r0, [r7, #12]
 800ff9a:	f000 f805 	bl	800ffa8 <ip4_output_if_src>
 800ff9e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3718      	adds	r7, #24
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b088      	sub	sp, #32
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	607a      	str	r2, [r7, #4]
 800ffb4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	7b9b      	ldrb	r3, [r3, #14]
 800ffba:	2b01      	cmp	r3, #1
 800ffbc:	d006      	beq.n	800ffcc <ip4_output_if_src+0x24>
 800ffbe:	4b4b      	ldr	r3, [pc, #300]	; (80100ec <ip4_output_if_src+0x144>)
 800ffc0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ffc4:	494a      	ldr	r1, [pc, #296]	; (80100f0 <ip4_output_if_src+0x148>)
 800ffc6:	484b      	ldr	r0, [pc, #300]	; (80100f4 <ip4_output_if_src+0x14c>)
 800ffc8:	f00b ff10 	bl	801bdec <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d060      	beq.n	8010094 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ffd2:	2314      	movs	r3, #20
 800ffd4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ffd6:	2114      	movs	r1, #20
 800ffd8:	68f8      	ldr	r0, [r7, #12]
 800ffda:	f002 f927 	bl	801222c <pbuf_add_header>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d002      	beq.n	800ffea <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ffe4:	f06f 0301 	mvn.w	r3, #1
 800ffe8:	e07c      	b.n	80100e4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	685b      	ldr	r3, [r3, #4]
 800ffee:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	895b      	ldrh	r3, [r3, #10]
 800fff4:	2b13      	cmp	r3, #19
 800fff6:	d806      	bhi.n	8010006 <ip4_output_if_src+0x5e>
 800fff8:	4b3c      	ldr	r3, [pc, #240]	; (80100ec <ip4_output_if_src+0x144>)
 800fffa:	f44f 7262 	mov.w	r2, #904	; 0x388
 800fffe:	493e      	ldr	r1, [pc, #248]	; (80100f8 <ip4_output_if_src+0x150>)
 8010000:	483c      	ldr	r0, [pc, #240]	; (80100f4 <ip4_output_if_src+0x14c>)
 8010002:	f00b fef3 	bl	801bdec <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010006:	69fb      	ldr	r3, [r7, #28]
 8010008:	78fa      	ldrb	r2, [r7, #3]
 801000a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801000c:	69fb      	ldr	r3, [r7, #28]
 801000e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010012:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681a      	ldr	r2, [r3, #0]
 8010018:	69fb      	ldr	r3, [r7, #28]
 801001a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801001c:	8b7b      	ldrh	r3, [r7, #26]
 801001e:	089b      	lsrs	r3, r3, #2
 8010020:	b29b      	uxth	r3, r3
 8010022:	b2db      	uxtb	r3, r3
 8010024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010028:	b2da      	uxtb	r2, r3
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801002e:	69fb      	ldr	r3, [r7, #28]
 8010030:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010034:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	891b      	ldrh	r3, [r3, #8]
 801003a:	4618      	mov	r0, r3
 801003c:	f7fe faf6 	bl	800e62c <lwip_htons>
 8010040:	4603      	mov	r3, r0
 8010042:	461a      	mov	r2, r3
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	2200      	movs	r2, #0
 801004c:	719a      	strb	r2, [r3, #6]
 801004e:	2200      	movs	r2, #0
 8010050:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010052:	4b2a      	ldr	r3, [pc, #168]	; (80100fc <ip4_output_if_src+0x154>)
 8010054:	881b      	ldrh	r3, [r3, #0]
 8010056:	4618      	mov	r0, r3
 8010058:	f7fe fae8 	bl	800e62c <lwip_htons>
 801005c:	4603      	mov	r3, r0
 801005e:	461a      	mov	r2, r3
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010064:	4b25      	ldr	r3, [pc, #148]	; (80100fc <ip4_output_if_src+0x154>)
 8010066:	881b      	ldrh	r3, [r3, #0]
 8010068:	3301      	adds	r3, #1
 801006a:	b29a      	uxth	r2, r3
 801006c:	4b23      	ldr	r3, [pc, #140]	; (80100fc <ip4_output_if_src+0x154>)
 801006e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d104      	bne.n	8010080 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010076:	4b22      	ldr	r3, [pc, #136]	; (8010100 <ip4_output_if_src+0x158>)
 8010078:	681a      	ldr	r2, [r3, #0]
 801007a:	69fb      	ldr	r3, [r7, #28]
 801007c:	60da      	str	r2, [r3, #12]
 801007e:	e003      	b.n	8010088 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010088:	69fb      	ldr	r3, [r7, #28]
 801008a:	2200      	movs	r2, #0
 801008c:	729a      	strb	r2, [r3, #10]
 801008e:	2200      	movs	r2, #0
 8010090:	72da      	strb	r2, [r3, #11]
 8010092:	e00f      	b.n	80100b4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	895b      	ldrh	r3, [r3, #10]
 8010098:	2b13      	cmp	r3, #19
 801009a:	d802      	bhi.n	80100a2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801009c:	f06f 0301 	mvn.w	r3, #1
 80100a0:	e020      	b.n	80100e4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	691b      	ldr	r3, [r3, #16]
 80100ac:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80100ae:	f107 0314 	add.w	r3, r7, #20
 80100b2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80100b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d00c      	beq.n	80100d6 <ip4_output_if_src+0x12e>
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	891a      	ldrh	r2, [r3, #8]
 80100c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d906      	bls.n	80100d6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80100c8:	687a      	ldr	r2, [r7, #4]
 80100ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80100cc:	68f8      	ldr	r0, [r7, #12]
 80100ce:	f000 fd4d 	bl	8010b6c <ip4_frag>
 80100d2:	4603      	mov	r3, r0
 80100d4:	e006      	b.n	80100e4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80100d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d8:	695b      	ldr	r3, [r3, #20]
 80100da:	687a      	ldr	r2, [r7, #4]
 80100dc:	68f9      	ldr	r1, [r7, #12]
 80100de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100e0:	4798      	blx	r3
 80100e2:	4603      	mov	r3, r0
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3720      	adds	r7, #32
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	0801ffe8 	.word	0x0801ffe8
 80100f0:	08020048 	.word	0x08020048
 80100f4:	08020054 	.word	0x08020054
 80100f8:	0802007c 	.word	0x0802007c
 80100fc:	24003b32 	.word	0x24003b32
 8010100:	080227d8 	.word	0x080227d8

08010104 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010104:	b480      	push	{r7}
 8010106:	b085      	sub	sp, #20
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010118:	d002      	beq.n	8010120 <ip4_addr_isbroadcast_u32+0x1c>
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d101      	bne.n	8010124 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010120:	2301      	movs	r3, #1
 8010122:	e02a      	b.n	801017a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801012a:	f003 0302 	and.w	r3, r3, #2
 801012e:	2b00      	cmp	r3, #0
 8010130:	d101      	bne.n	8010136 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010132:	2300      	movs	r3, #0
 8010134:	e021      	b.n	801017a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	3304      	adds	r3, #4
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	429a      	cmp	r2, r3
 8010140:	d101      	bne.n	8010146 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010142:	2300      	movs	r3, #0
 8010144:	e019      	b.n	801017a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	3304      	adds	r3, #4
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	405a      	eors	r2, r3
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	3308      	adds	r3, #8
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	4013      	ands	r3, r2
 8010158:	2b00      	cmp	r3, #0
 801015a:	d10d      	bne.n	8010178 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	3308      	adds	r3, #8
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	43da      	mvns	r2, r3
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	3308      	adds	r3, #8
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010170:	429a      	cmp	r2, r3
 8010172:	d101      	bne.n	8010178 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010174:	2301      	movs	r3, #1
 8010176:	e000      	b.n	801017a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010178:	2300      	movs	r3, #0
  }
}
 801017a:	4618      	mov	r0, r3
 801017c:	3714      	adds	r7, #20
 801017e:	46bd      	mov	sp, r7
 8010180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010184:	4770      	bx	lr
	...

08010188 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801018e:	2300      	movs	r3, #0
 8010190:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010192:	4b12      	ldr	r3, [pc, #72]	; (80101dc <ip_reass_tmr+0x54>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010198:	e018      	b.n	80101cc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	7fdb      	ldrb	r3, [r3, #31]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00b      	beq.n	80101ba <ip_reass_tmr+0x32>
      r->timer--;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	7fdb      	ldrb	r3, [r3, #31]
 80101a6:	3b01      	subs	r3, #1
 80101a8:	b2da      	uxtb	r2, r3
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	60fb      	str	r3, [r7, #12]
 80101b8:	e008      	b.n	80101cc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80101c4:	68b9      	ldr	r1, [r7, #8]
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f000 f80a 	bl	80101e0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d1e3      	bne.n	801019a <ip_reass_tmr+0x12>
    }
  }
}
 80101d2:	bf00      	nop
 80101d4:	bf00      	nop
 80101d6:	3710      	adds	r7, #16
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	24003b34 	.word	0x24003b34

080101e0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b088      	sub	sp, #32
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80101ea:	2300      	movs	r3, #0
 80101ec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80101ee:	683a      	ldr	r2, [r7, #0]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d105      	bne.n	8010202 <ip_reass_free_complete_datagram+0x22>
 80101f6:	4b45      	ldr	r3, [pc, #276]	; (801030c <ip_reass_free_complete_datagram+0x12c>)
 80101f8:	22ab      	movs	r2, #171	; 0xab
 80101fa:	4945      	ldr	r1, [pc, #276]	; (8010310 <ip_reass_free_complete_datagram+0x130>)
 80101fc:	4845      	ldr	r0, [pc, #276]	; (8010314 <ip_reass_free_complete_datagram+0x134>)
 80101fe:	f00b fdf5 	bl	801bdec <iprintf>
  if (prev != NULL) {
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d00a      	beq.n	801021e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	687a      	ldr	r2, [r7, #4]
 801020e:	429a      	cmp	r2, r3
 8010210:	d005      	beq.n	801021e <ip_reass_free_complete_datagram+0x3e>
 8010212:	4b3e      	ldr	r3, [pc, #248]	; (801030c <ip_reass_free_complete_datagram+0x12c>)
 8010214:	22ad      	movs	r2, #173	; 0xad
 8010216:	4940      	ldr	r1, [pc, #256]	; (8010318 <ip_reass_free_complete_datagram+0x138>)
 8010218:	483e      	ldr	r0, [pc, #248]	; (8010314 <ip_reass_free_complete_datagram+0x134>)
 801021a:	f00b fde7 	bl	801bdec <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	889b      	ldrh	r3, [r3, #4]
 801022a:	b29b      	uxth	r3, r3
 801022c:	2b00      	cmp	r3, #0
 801022e:	d12a      	bne.n	8010286 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801023e:	69bb      	ldr	r3, [r7, #24]
 8010240:	6858      	ldr	r0, [r3, #4]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	3308      	adds	r3, #8
 8010246:	2214      	movs	r2, #20
 8010248:	4619      	mov	r1, r3
 801024a:	f00a fead 	bl	801afa8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801024e:	2101      	movs	r1, #1
 8010250:	69b8      	ldr	r0, [r7, #24]
 8010252:	f7ff fb6b 	bl	800f92c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010256:	69b8      	ldr	r0, [r7, #24]
 8010258:	f002 f906 	bl	8012468 <pbuf_clen>
 801025c:	4603      	mov	r3, r0
 801025e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010260:	8bfa      	ldrh	r2, [r7, #30]
 8010262:	8a7b      	ldrh	r3, [r7, #18]
 8010264:	4413      	add	r3, r2
 8010266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801026a:	db05      	blt.n	8010278 <ip_reass_free_complete_datagram+0x98>
 801026c:	4b27      	ldr	r3, [pc, #156]	; (801030c <ip_reass_free_complete_datagram+0x12c>)
 801026e:	22bc      	movs	r2, #188	; 0xbc
 8010270:	492a      	ldr	r1, [pc, #168]	; (801031c <ip_reass_free_complete_datagram+0x13c>)
 8010272:	4828      	ldr	r0, [pc, #160]	; (8010314 <ip_reass_free_complete_datagram+0x134>)
 8010274:	f00b fdba 	bl	801bdec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010278:	8bfa      	ldrh	r2, [r7, #30]
 801027a:	8a7b      	ldrh	r3, [r7, #18]
 801027c:	4413      	add	r3, r2
 801027e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010280:	69b8      	ldr	r0, [r7, #24]
 8010282:	f002 f869 	bl	8012358 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801028c:	e01f      	b.n	80102ce <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801028e:	69bb      	ldr	r3, [r7, #24]
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010294:	69bb      	ldr	r3, [r7, #24]
 8010296:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801029e:	68f8      	ldr	r0, [r7, #12]
 80102a0:	f002 f8e2 	bl	8012468 <pbuf_clen>
 80102a4:	4603      	mov	r3, r0
 80102a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80102a8:	8bfa      	ldrh	r2, [r7, #30]
 80102aa:	8a7b      	ldrh	r3, [r7, #18]
 80102ac:	4413      	add	r3, r2
 80102ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102b2:	db05      	blt.n	80102c0 <ip_reass_free_complete_datagram+0xe0>
 80102b4:	4b15      	ldr	r3, [pc, #84]	; (801030c <ip_reass_free_complete_datagram+0x12c>)
 80102b6:	22cc      	movs	r2, #204	; 0xcc
 80102b8:	4918      	ldr	r1, [pc, #96]	; (801031c <ip_reass_free_complete_datagram+0x13c>)
 80102ba:	4816      	ldr	r0, [pc, #88]	; (8010314 <ip_reass_free_complete_datagram+0x134>)
 80102bc:	f00b fd96 	bl	801bdec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80102c0:	8bfa      	ldrh	r2, [r7, #30]
 80102c2:	8a7b      	ldrh	r3, [r7, #18]
 80102c4:	4413      	add	r3, r2
 80102c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80102c8:	68f8      	ldr	r0, [r7, #12]
 80102ca:	f002 f845 	bl	8012358 <pbuf_free>
  while (p != NULL) {
 80102ce:	69bb      	ldr	r3, [r7, #24]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d1dc      	bne.n	801028e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80102d4:	6839      	ldr	r1, [r7, #0]
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f000 f8c2 	bl	8010460 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80102dc:	4b10      	ldr	r3, [pc, #64]	; (8010320 <ip_reass_free_complete_datagram+0x140>)
 80102de:	881b      	ldrh	r3, [r3, #0]
 80102e0:	8bfa      	ldrh	r2, [r7, #30]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d905      	bls.n	80102f2 <ip_reass_free_complete_datagram+0x112>
 80102e6:	4b09      	ldr	r3, [pc, #36]	; (801030c <ip_reass_free_complete_datagram+0x12c>)
 80102e8:	22d2      	movs	r2, #210	; 0xd2
 80102ea:	490e      	ldr	r1, [pc, #56]	; (8010324 <ip_reass_free_complete_datagram+0x144>)
 80102ec:	4809      	ldr	r0, [pc, #36]	; (8010314 <ip_reass_free_complete_datagram+0x134>)
 80102ee:	f00b fd7d 	bl	801bdec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80102f2:	4b0b      	ldr	r3, [pc, #44]	; (8010320 <ip_reass_free_complete_datagram+0x140>)
 80102f4:	881a      	ldrh	r2, [r3, #0]
 80102f6:	8bfb      	ldrh	r3, [r7, #30]
 80102f8:	1ad3      	subs	r3, r2, r3
 80102fa:	b29a      	uxth	r2, r3
 80102fc:	4b08      	ldr	r3, [pc, #32]	; (8010320 <ip_reass_free_complete_datagram+0x140>)
 80102fe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010300:	8bfb      	ldrh	r3, [r7, #30]
}
 8010302:	4618      	mov	r0, r3
 8010304:	3720      	adds	r7, #32
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	080200ac 	.word	0x080200ac
 8010310:	08020110 	.word	0x08020110
 8010314:	0802011c 	.word	0x0802011c
 8010318:	08020144 	.word	0x08020144
 801031c:	08020158 	.word	0x08020158
 8010320:	24003b38 	.word	0x24003b38
 8010324:	08020178 	.word	0x08020178

08010328 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b08a      	sub	sp, #40	; 0x28
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010332:	2300      	movs	r3, #0
 8010334:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010336:	2300      	movs	r3, #0
 8010338:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801033a:	2300      	movs	r3, #0
 801033c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801033e:	2300      	movs	r3, #0
 8010340:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010342:	2300      	movs	r3, #0
 8010344:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010346:	4b28      	ldr	r3, [pc, #160]	; (80103e8 <ip_reass_remove_oldest_datagram+0xc0>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801034c:	e030      	b.n	80103b0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801034e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010350:	695a      	ldr	r2, [r3, #20]
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	68db      	ldr	r3, [r3, #12]
 8010356:	429a      	cmp	r2, r3
 8010358:	d10c      	bne.n	8010374 <ip_reass_remove_oldest_datagram+0x4c>
 801035a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035c:	699a      	ldr	r2, [r3, #24]
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	691b      	ldr	r3, [r3, #16]
 8010362:	429a      	cmp	r2, r3
 8010364:	d106      	bne.n	8010374 <ip_reass_remove_oldest_datagram+0x4c>
 8010366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010368:	899a      	ldrh	r2, [r3, #12]
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	889b      	ldrh	r3, [r3, #4]
 801036e:	b29b      	uxth	r3, r3
 8010370:	429a      	cmp	r2, r3
 8010372:	d014      	beq.n	801039e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	3301      	adds	r3, #1
 8010378:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801037a:	6a3b      	ldr	r3, [r7, #32]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d104      	bne.n	801038a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010382:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	61bb      	str	r3, [r7, #24]
 8010388:	e009      	b.n	801039e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038c:	7fda      	ldrb	r2, [r3, #31]
 801038e:	6a3b      	ldr	r3, [r7, #32]
 8010390:	7fdb      	ldrb	r3, [r3, #31]
 8010392:	429a      	cmp	r2, r3
 8010394:	d803      	bhi.n	801039e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010398:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801039a:	69fb      	ldr	r3, [r7, #28]
 801039c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801039e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d001      	beq.n	80103aa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80103a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80103aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80103b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d1cb      	bne.n	801034e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80103b6:	6a3b      	ldr	r3, [r7, #32]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d008      	beq.n	80103ce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80103bc:	69b9      	ldr	r1, [r7, #24]
 80103be:	6a38      	ldr	r0, [r7, #32]
 80103c0:	f7ff ff0e 	bl	80101e0 <ip_reass_free_complete_datagram>
 80103c4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80103c6:	697a      	ldr	r2, [r7, #20]
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	4413      	add	r3, r2
 80103cc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80103ce:	697a      	ldr	r2, [r7, #20]
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	429a      	cmp	r2, r3
 80103d4:	da02      	bge.n	80103dc <ip_reass_remove_oldest_datagram+0xb4>
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	2b01      	cmp	r3, #1
 80103da:	dcac      	bgt.n	8010336 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80103dc:	697b      	ldr	r3, [r7, #20]
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3728      	adds	r7, #40	; 0x28
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
 80103e6:	bf00      	nop
 80103e8:	24003b34 	.word	0x24003b34

080103ec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b084      	sub	sp, #16
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80103f6:	2004      	movs	r0, #4
 80103f8:	f001 f90c 	bl	8011614 <memp_malloc>
 80103fc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d110      	bne.n	8010426 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010404:	6839      	ldr	r1, [r7, #0]
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f7ff ff8e 	bl	8010328 <ip_reass_remove_oldest_datagram>
 801040c:	4602      	mov	r2, r0
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	4293      	cmp	r3, r2
 8010412:	dc03      	bgt.n	801041c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010414:	2004      	movs	r0, #4
 8010416:	f001 f8fd 	bl	8011614 <memp_malloc>
 801041a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d101      	bne.n	8010426 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010422:	2300      	movs	r3, #0
 8010424:	e016      	b.n	8010454 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010426:	2220      	movs	r2, #32
 8010428:	2100      	movs	r1, #0
 801042a:	68f8      	ldr	r0, [r7, #12]
 801042c:	f00a fde4 	bl	801aff8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	220f      	movs	r2, #15
 8010434:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010436:	4b09      	ldr	r3, [pc, #36]	; (801045c <ip_reass_enqueue_new_datagram+0x70>)
 8010438:	681a      	ldr	r2, [r3, #0]
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801043e:	4a07      	ldr	r2, [pc, #28]	; (801045c <ip_reass_enqueue_new_datagram+0x70>)
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	3308      	adds	r3, #8
 8010448:	2214      	movs	r2, #20
 801044a:	6879      	ldr	r1, [r7, #4]
 801044c:	4618      	mov	r0, r3
 801044e:	f00a fdab 	bl	801afa8 <memcpy>
  return ipr;
 8010452:	68fb      	ldr	r3, [r7, #12]
}
 8010454:	4618      	mov	r0, r3
 8010456:	3710      	adds	r7, #16
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}
 801045c:	24003b34 	.word	0x24003b34

08010460 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801046a:	4b10      	ldr	r3, [pc, #64]	; (80104ac <ip_reass_dequeue_datagram+0x4c>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	687a      	ldr	r2, [r7, #4]
 8010470:	429a      	cmp	r2, r3
 8010472:	d104      	bne.n	801047e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	4a0c      	ldr	r2, [pc, #48]	; (80104ac <ip_reass_dequeue_datagram+0x4c>)
 801047a:	6013      	str	r3, [r2, #0]
 801047c:	e00d      	b.n	801049a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d106      	bne.n	8010492 <ip_reass_dequeue_datagram+0x32>
 8010484:	4b0a      	ldr	r3, [pc, #40]	; (80104b0 <ip_reass_dequeue_datagram+0x50>)
 8010486:	f240 1245 	movw	r2, #325	; 0x145
 801048a:	490a      	ldr	r1, [pc, #40]	; (80104b4 <ip_reass_dequeue_datagram+0x54>)
 801048c:	480a      	ldr	r0, [pc, #40]	; (80104b8 <ip_reass_dequeue_datagram+0x58>)
 801048e:	f00b fcad 	bl	801bdec <iprintf>
    prev->next = ipr->next;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681a      	ldr	r2, [r3, #0]
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801049a:	6879      	ldr	r1, [r7, #4]
 801049c:	2004      	movs	r0, #4
 801049e:	f001 f905 	bl	80116ac <memp_free>
}
 80104a2:	bf00      	nop
 80104a4:	3708      	adds	r7, #8
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	24003b34 	.word	0x24003b34
 80104b0:	080200ac 	.word	0x080200ac
 80104b4:	0802019c 	.word	0x0802019c
 80104b8:	0802011c 	.word	0x0802011c

080104bc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b08c      	sub	sp, #48	; 0x30
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	60f8      	str	r0, [r7, #12]
 80104c4:	60b9      	str	r1, [r7, #8]
 80104c6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80104c8:	2300      	movs	r3, #0
 80104ca:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80104cc:	2301      	movs	r3, #1
 80104ce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80104d6:	69fb      	ldr	r3, [r7, #28]
 80104d8:	885b      	ldrh	r3, [r3, #2]
 80104da:	b29b      	uxth	r3, r3
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fe f8a5 	bl	800e62c <lwip_htons>
 80104e2:	4603      	mov	r3, r0
 80104e4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	781b      	ldrb	r3, [r3, #0]
 80104ea:	f003 030f 	and.w	r3, r3, #15
 80104ee:	b2db      	uxtb	r3, r3
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80104f4:	7e7b      	ldrb	r3, [r7, #25]
 80104f6:	b29b      	uxth	r3, r3
 80104f8:	8b7a      	ldrh	r2, [r7, #26]
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d202      	bcs.n	8010504 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010502:	e135      	b.n	8010770 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010504:	7e7b      	ldrb	r3, [r7, #25]
 8010506:	b29b      	uxth	r3, r3
 8010508:	8b7a      	ldrh	r2, [r7, #26]
 801050a:	1ad3      	subs	r3, r2, r3
 801050c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801050e:	69fb      	ldr	r3, [r7, #28]
 8010510:	88db      	ldrh	r3, [r3, #6]
 8010512:	b29b      	uxth	r3, r3
 8010514:	4618      	mov	r0, r3
 8010516:	f7fe f889 	bl	800e62c <lwip_htons>
 801051a:	4603      	mov	r3, r0
 801051c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010520:	b29b      	uxth	r3, r3
 8010522:	00db      	lsls	r3, r3, #3
 8010524:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	685b      	ldr	r3, [r3, #4]
 801052a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801052c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801052e:	2200      	movs	r2, #0
 8010530:	701a      	strb	r2, [r3, #0]
 8010532:	2200      	movs	r2, #0
 8010534:	705a      	strb	r2, [r3, #1]
 8010536:	2200      	movs	r2, #0
 8010538:	709a      	strb	r2, [r3, #2]
 801053a:	2200      	movs	r2, #0
 801053c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801053e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010540:	8afa      	ldrh	r2, [r7, #22]
 8010542:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010544:	8afa      	ldrh	r2, [r7, #22]
 8010546:	8b7b      	ldrh	r3, [r7, #26]
 8010548:	4413      	add	r3, r2
 801054a:	b29a      	uxth	r2, r3
 801054c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801054e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010552:	88db      	ldrh	r3, [r3, #6]
 8010554:	b29b      	uxth	r3, r3
 8010556:	8afa      	ldrh	r2, [r7, #22]
 8010558:	429a      	cmp	r2, r3
 801055a:	d902      	bls.n	8010562 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801055c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010560:	e106      	b.n	8010770 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	685b      	ldr	r3, [r3, #4]
 8010566:	627b      	str	r3, [r7, #36]	; 0x24
 8010568:	e068      	b.n	801063c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801056a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056c:	685b      	ldr	r3, [r3, #4]
 801056e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010572:	889b      	ldrh	r3, [r3, #4]
 8010574:	b29a      	uxth	r2, r3
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	889b      	ldrh	r3, [r3, #4]
 801057a:	b29b      	uxth	r3, r3
 801057c:	429a      	cmp	r2, r3
 801057e:	d235      	bcs.n	80105ec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010584:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010588:	2b00      	cmp	r3, #0
 801058a:	d020      	beq.n	80105ce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801058c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801058e:	889b      	ldrh	r3, [r3, #4]
 8010590:	b29a      	uxth	r2, r3
 8010592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010594:	88db      	ldrh	r3, [r3, #6]
 8010596:	b29b      	uxth	r3, r3
 8010598:	429a      	cmp	r2, r3
 801059a:	d307      	bcc.n	80105ac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801059c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801059e:	88db      	ldrh	r3, [r3, #6]
 80105a0:	b29a      	uxth	r2, r3
 80105a2:	693b      	ldr	r3, [r7, #16]
 80105a4:	889b      	ldrh	r3, [r3, #4]
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d902      	bls.n	80105b2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80105ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105b0:	e0de      	b.n	8010770 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80105b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b4:	68ba      	ldr	r2, [r7, #8]
 80105b6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80105b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ba:	88db      	ldrh	r3, [r3, #6]
 80105bc:	b29a      	uxth	r2, r3
 80105be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c0:	889b      	ldrh	r3, [r3, #4]
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d03d      	beq.n	8010644 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80105c8:	2300      	movs	r3, #0
 80105ca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80105cc:	e03a      	b.n	8010644 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80105ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d0:	88db      	ldrh	r3, [r3, #6]
 80105d2:	b29a      	uxth	r2, r3
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	889b      	ldrh	r3, [r3, #4]
 80105d8:	b29b      	uxth	r3, r3
 80105da:	429a      	cmp	r2, r3
 80105dc:	d902      	bls.n	80105e4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80105de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105e2:	e0c5      	b.n	8010770 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	68ba      	ldr	r2, [r7, #8]
 80105e8:	605a      	str	r2, [r3, #4]
      break;
 80105ea:	e02b      	b.n	8010644 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80105ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ee:	889b      	ldrh	r3, [r3, #4]
 80105f0:	b29a      	uxth	r2, r3
 80105f2:	693b      	ldr	r3, [r7, #16]
 80105f4:	889b      	ldrh	r3, [r3, #4]
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d102      	bne.n	8010602 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80105fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010600:	e0b6      	b.n	8010770 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010604:	889b      	ldrh	r3, [r3, #4]
 8010606:	b29a      	uxth	r2, r3
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	88db      	ldrh	r3, [r3, #6]
 801060c:	b29b      	uxth	r3, r3
 801060e:	429a      	cmp	r2, r3
 8010610:	d202      	bcs.n	8010618 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010616:	e0ab      	b.n	8010770 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061a:	2b00      	cmp	r3, #0
 801061c:	d009      	beq.n	8010632 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801061e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010620:	88db      	ldrh	r3, [r3, #6]
 8010622:	b29a      	uxth	r2, r3
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	889b      	ldrh	r3, [r3, #4]
 8010628:	b29b      	uxth	r3, r3
 801062a:	429a      	cmp	r2, r3
 801062c:	d001      	beq.n	8010632 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801062e:	2300      	movs	r3, #0
 8010630:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010632:	693b      	ldr	r3, [r7, #16]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010638:	693b      	ldr	r3, [r7, #16]
 801063a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801063e:	2b00      	cmp	r3, #0
 8010640:	d193      	bne.n	801056a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010642:	e000      	b.n	8010646 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010644:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010648:	2b00      	cmp	r3, #0
 801064a:	d12d      	bne.n	80106a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064e:	2b00      	cmp	r3, #0
 8010650:	d01c      	beq.n	801068c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010654:	88db      	ldrh	r3, [r3, #6]
 8010656:	b29a      	uxth	r2, r3
 8010658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065a:	889b      	ldrh	r3, [r3, #4]
 801065c:	b29b      	uxth	r3, r3
 801065e:	429a      	cmp	r2, r3
 8010660:	d906      	bls.n	8010670 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010662:	4b45      	ldr	r3, [pc, #276]	; (8010778 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010664:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010668:	4944      	ldr	r1, [pc, #272]	; (801077c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801066a:	4845      	ldr	r0, [pc, #276]	; (8010780 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801066c:	f00b fbbe 	bl	801bdec <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010672:	68ba      	ldr	r2, [r7, #8]
 8010674:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010678:	88db      	ldrh	r3, [r3, #6]
 801067a:	b29a      	uxth	r2, r3
 801067c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067e:	889b      	ldrh	r3, [r3, #4]
 8010680:	b29b      	uxth	r3, r3
 8010682:	429a      	cmp	r2, r3
 8010684:	d010      	beq.n	80106a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010686:	2300      	movs	r3, #0
 8010688:	623b      	str	r3, [r7, #32]
 801068a:	e00d      	b.n	80106a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d006      	beq.n	80106a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010694:	4b38      	ldr	r3, [pc, #224]	; (8010778 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010696:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801069a:	493a      	ldr	r1, [pc, #232]	; (8010784 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801069c:	4838      	ldr	r0, [pc, #224]	; (8010780 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801069e:	f00b fba5 	bl	801bdec <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	68ba      	ldr	r2, [r7, #8]
 80106a6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d105      	bne.n	80106ba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	7f9b      	ldrb	r3, [r3, #30]
 80106b2:	f003 0301 	and.w	r3, r3, #1
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d059      	beq.n	801076e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80106ba:	6a3b      	ldr	r3, [r7, #32]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d04f      	beq.n	8010760 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d006      	beq.n	80106d6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	685b      	ldr	r3, [r3, #4]
 80106ce:	889b      	ldrh	r3, [r3, #4]
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d002      	beq.n	80106dc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80106d6:	2300      	movs	r3, #0
 80106d8:	623b      	str	r3, [r7, #32]
 80106da:	e041      	b.n	8010760 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80106dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106de:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80106e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80106e6:	e012      	b.n	801070e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80106e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80106ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f0:	88db      	ldrh	r3, [r3, #6]
 80106f2:	b29a      	uxth	r2, r3
 80106f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f6:	889b      	ldrh	r3, [r3, #4]
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d002      	beq.n	8010704 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80106fe:	2300      	movs	r3, #0
 8010700:	623b      	str	r3, [r7, #32]
            break;
 8010702:	e007      	b.n	8010714 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010706:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010710:	2b00      	cmp	r3, #0
 8010712:	d1e9      	bne.n	80106e8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010714:	6a3b      	ldr	r3, [r7, #32]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d022      	beq.n	8010760 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d106      	bne.n	8010730 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010722:	4b15      	ldr	r3, [pc, #84]	; (8010778 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010724:	f240 12df 	movw	r2, #479	; 0x1df
 8010728:	4917      	ldr	r1, [pc, #92]	; (8010788 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801072a:	4815      	ldr	r0, [pc, #84]	; (8010780 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801072c:	f00b fb5e 	bl	801bdec <iprintf>
          LWIP_ASSERT("sanity check",
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010738:	429a      	cmp	r2, r3
 801073a:	d106      	bne.n	801074a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801073c:	4b0e      	ldr	r3, [pc, #56]	; (8010778 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801073e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010742:	4911      	ldr	r1, [pc, #68]	; (8010788 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010744:	480e      	ldr	r0, [pc, #56]	; (8010780 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010746:	f00b fb51 	bl	801bdec <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801074a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d006      	beq.n	8010760 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010752:	4b09      	ldr	r3, [pc, #36]	; (8010778 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010754:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010758:	490c      	ldr	r1, [pc, #48]	; (801078c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801075a:	4809      	ldr	r0, [pc, #36]	; (8010780 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801075c:	f00b fb46 	bl	801bdec <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010760:	6a3b      	ldr	r3, [r7, #32]
 8010762:	2b00      	cmp	r3, #0
 8010764:	bf14      	ite	ne
 8010766:	2301      	movne	r3, #1
 8010768:	2300      	moveq	r3, #0
 801076a:	b2db      	uxtb	r3, r3
 801076c:	e000      	b.n	8010770 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801076e:	2300      	movs	r3, #0
}
 8010770:	4618      	mov	r0, r3
 8010772:	3730      	adds	r7, #48	; 0x30
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}
 8010778:	080200ac 	.word	0x080200ac
 801077c:	080201b8 	.word	0x080201b8
 8010780:	0802011c 	.word	0x0802011c
 8010784:	080201d8 	.word	0x080201d8
 8010788:	08020210 	.word	0x08020210
 801078c:	08020220 	.word	0x08020220

08010790 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b08e      	sub	sp, #56	; 0x38
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	685b      	ldr	r3, [r3, #4]
 801079c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801079e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	f003 030f 	and.w	r3, r3, #15
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	009b      	lsls	r3, r3, #2
 80107aa:	b2db      	uxtb	r3, r3
 80107ac:	2b14      	cmp	r3, #20
 80107ae:	f040 8167 	bne.w	8010a80 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80107b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b4:	88db      	ldrh	r3, [r3, #6]
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	4618      	mov	r0, r3
 80107ba:	f7fd ff37 	bl	800e62c <lwip_htons>
 80107be:	4603      	mov	r3, r0
 80107c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80107c4:	b29b      	uxth	r3, r3
 80107c6:	00db      	lsls	r3, r3, #3
 80107c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80107ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107cc:	885b      	ldrh	r3, [r3, #2]
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	4618      	mov	r0, r3
 80107d2:	f7fd ff2b 	bl	800e62c <lwip_htons>
 80107d6:	4603      	mov	r3, r0
 80107d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80107da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	f003 030f 	and.w	r3, r3, #15
 80107e2:	b2db      	uxtb	r3, r3
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80107ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80107ee:	b29b      	uxth	r3, r3
 80107f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80107f2:	429a      	cmp	r2, r3
 80107f4:	f0c0 8146 	bcc.w	8010a84 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80107f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010800:	1ad3      	subs	r3, r2, r3
 8010802:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f001 fe2f 	bl	8012468 <pbuf_clen>
 801080a:	4603      	mov	r3, r0
 801080c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801080e:	4b9f      	ldr	r3, [pc, #636]	; (8010a8c <ip4_reass+0x2fc>)
 8010810:	881b      	ldrh	r3, [r3, #0]
 8010812:	461a      	mov	r2, r3
 8010814:	8c3b      	ldrh	r3, [r7, #32]
 8010816:	4413      	add	r3, r2
 8010818:	2b0a      	cmp	r3, #10
 801081a:	dd10      	ble.n	801083e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801081c:	8c3b      	ldrh	r3, [r7, #32]
 801081e:	4619      	mov	r1, r3
 8010820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010822:	f7ff fd81 	bl	8010328 <ip_reass_remove_oldest_datagram>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	f000 812d 	beq.w	8010a88 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801082e:	4b97      	ldr	r3, [pc, #604]	; (8010a8c <ip4_reass+0x2fc>)
 8010830:	881b      	ldrh	r3, [r3, #0]
 8010832:	461a      	mov	r2, r3
 8010834:	8c3b      	ldrh	r3, [r7, #32]
 8010836:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010838:	2b0a      	cmp	r3, #10
 801083a:	f300 8125 	bgt.w	8010a88 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801083e:	4b94      	ldr	r3, [pc, #592]	; (8010a90 <ip4_reass+0x300>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	633b      	str	r3, [r7, #48]	; 0x30
 8010844:	e015      	b.n	8010872 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010848:	695a      	ldr	r2, [r3, #20]
 801084a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084c:	68db      	ldr	r3, [r3, #12]
 801084e:	429a      	cmp	r2, r3
 8010850:	d10c      	bne.n	801086c <ip4_reass+0xdc>
 8010852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010854:	699a      	ldr	r2, [r3, #24]
 8010856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010858:	691b      	ldr	r3, [r3, #16]
 801085a:	429a      	cmp	r2, r3
 801085c:	d106      	bne.n	801086c <ip4_reass+0xdc>
 801085e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010860:	899a      	ldrh	r2, [r3, #12]
 8010862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010864:	889b      	ldrh	r3, [r3, #4]
 8010866:	b29b      	uxth	r3, r3
 8010868:	429a      	cmp	r2, r3
 801086a:	d006      	beq.n	801087a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801086c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	633b      	str	r3, [r7, #48]	; 0x30
 8010872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010874:	2b00      	cmp	r3, #0
 8010876:	d1e6      	bne.n	8010846 <ip4_reass+0xb6>
 8010878:	e000      	b.n	801087c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801087a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801087c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801087e:	2b00      	cmp	r3, #0
 8010880:	d109      	bne.n	8010896 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010882:	8c3b      	ldrh	r3, [r7, #32]
 8010884:	4619      	mov	r1, r3
 8010886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010888:	f7ff fdb0 	bl	80103ec <ip_reass_enqueue_new_datagram>
 801088c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801088e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010890:	2b00      	cmp	r3, #0
 8010892:	d11c      	bne.n	80108ce <ip4_reass+0x13e>
      goto nullreturn;
 8010894:	e109      	b.n	8010aaa <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010898:	88db      	ldrh	r3, [r3, #6]
 801089a:	b29b      	uxth	r3, r3
 801089c:	4618      	mov	r0, r3
 801089e:	f7fd fec5 	bl	800e62c <lwip_htons>
 80108a2:	4603      	mov	r3, r0
 80108a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d110      	bne.n	80108ce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80108ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ae:	89db      	ldrh	r3, [r3, #14]
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7fd febb 	bl	800e62c <lwip_htons>
 80108b6:	4603      	mov	r3, r0
 80108b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d006      	beq.n	80108ce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80108c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c2:	3308      	adds	r3, #8
 80108c4:	2214      	movs	r2, #20
 80108c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80108c8:	4618      	mov	r0, r3
 80108ca:	f00a fb6d 	bl	801afa8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80108ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d0:	88db      	ldrh	r3, [r3, #6]
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	f003 0320 	and.w	r3, r3, #32
 80108d8:	2b00      	cmp	r3, #0
 80108da:	bf0c      	ite	eq
 80108dc:	2301      	moveq	r3, #1
 80108de:	2300      	movne	r3, #0
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80108e4:	69fb      	ldr	r3, [r7, #28]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d00e      	beq.n	8010908 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80108ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80108ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80108ee:	4413      	add	r3, r2
 80108f0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80108f2:	8b7a      	ldrh	r2, [r7, #26]
 80108f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80108f6:	429a      	cmp	r2, r3
 80108f8:	f0c0 80a0 	bcc.w	8010a3c <ip4_reass+0x2ac>
 80108fc:	8b7b      	ldrh	r3, [r7, #26]
 80108fe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010902:	4293      	cmp	r3, r2
 8010904:	f200 809a 	bhi.w	8010a3c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010908:	69fa      	ldr	r2, [r7, #28]
 801090a:	6879      	ldr	r1, [r7, #4]
 801090c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801090e:	f7ff fdd5 	bl	80104bc <ip_reass_chain_frag_into_datagram_and_validate>
 8010912:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801091a:	f000 8091 	beq.w	8010a40 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801091e:	4b5b      	ldr	r3, [pc, #364]	; (8010a8c <ip4_reass+0x2fc>)
 8010920:	881a      	ldrh	r2, [r3, #0]
 8010922:	8c3b      	ldrh	r3, [r7, #32]
 8010924:	4413      	add	r3, r2
 8010926:	b29a      	uxth	r2, r3
 8010928:	4b58      	ldr	r3, [pc, #352]	; (8010a8c <ip4_reass+0x2fc>)
 801092a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801092c:	69fb      	ldr	r3, [r7, #28]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d00d      	beq.n	801094e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010932:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010936:	4413      	add	r3, r2
 8010938:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801093a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093c:	8a7a      	ldrh	r2, [r7, #18]
 801093e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010942:	7f9b      	ldrb	r3, [r3, #30]
 8010944:	f043 0301 	orr.w	r3, r3, #1
 8010948:	b2da      	uxtb	r2, r3
 801094a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	2b01      	cmp	r3, #1
 8010952:	d171      	bne.n	8010a38 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010956:	8b9b      	ldrh	r3, [r3, #28]
 8010958:	3314      	adds	r3, #20
 801095a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801095c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801095e:	685b      	ldr	r3, [r3, #4]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	685b      	ldr	r3, [r3, #4]
 801096c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801096e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010970:	3308      	adds	r3, #8
 8010972:	2214      	movs	r2, #20
 8010974:	4619      	mov	r1, r3
 8010976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010978:	f00a fb16 	bl	801afa8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801097c:	8a3b      	ldrh	r3, [r7, #16]
 801097e:	4618      	mov	r0, r3
 8010980:	f7fd fe54 	bl	800e62c <lwip_htons>
 8010984:	4603      	mov	r3, r0
 8010986:	461a      	mov	r2, r3
 8010988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801098a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801098c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801098e:	2200      	movs	r2, #0
 8010990:	719a      	strb	r2, [r3, #6]
 8010992:	2200      	movs	r2, #0
 8010994:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010998:	2200      	movs	r2, #0
 801099a:	729a      	strb	r2, [r3, #10]
 801099c:	2200      	movs	r2, #0
 801099e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80109a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80109a6:	e00d      	b.n	80109c4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80109a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80109ae:	2114      	movs	r1, #20
 80109b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80109b2:	f001 fc4b 	bl	801224c <pbuf_remove_header>
      pbuf_cat(p, r);
 80109b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f001 fd8f 	bl	80124dc <pbuf_cat>
      r = iprh->next_pbuf;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80109c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d1ee      	bne.n	80109a8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80109ca:	4b31      	ldr	r3, [pc, #196]	; (8010a90 <ip4_reass+0x300>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d102      	bne.n	80109da <ip4_reass+0x24a>
      ipr_prev = NULL;
 80109d4:	2300      	movs	r3, #0
 80109d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109d8:	e010      	b.n	80109fc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80109da:	4b2d      	ldr	r3, [pc, #180]	; (8010a90 <ip4_reass+0x300>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109e0:	e007      	b.n	80109f2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80109e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d006      	beq.n	80109fa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80109ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d1f4      	bne.n	80109e2 <ip4_reass+0x252>
 80109f8:	e000      	b.n	80109fc <ip4_reass+0x26c>
          break;
 80109fa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80109fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80109fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a00:	f7ff fd2e 	bl	8010460 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f001 fd2f 	bl	8012468 <pbuf_clen>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010a0e:	4b1f      	ldr	r3, [pc, #124]	; (8010a8c <ip4_reass+0x2fc>)
 8010a10:	881b      	ldrh	r3, [r3, #0]
 8010a12:	8c3a      	ldrh	r2, [r7, #32]
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d906      	bls.n	8010a26 <ip4_reass+0x296>
 8010a18:	4b1e      	ldr	r3, [pc, #120]	; (8010a94 <ip4_reass+0x304>)
 8010a1a:	f240 229b 	movw	r2, #667	; 0x29b
 8010a1e:	491e      	ldr	r1, [pc, #120]	; (8010a98 <ip4_reass+0x308>)
 8010a20:	481e      	ldr	r0, [pc, #120]	; (8010a9c <ip4_reass+0x30c>)
 8010a22:	f00b f9e3 	bl	801bdec <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010a26:	4b19      	ldr	r3, [pc, #100]	; (8010a8c <ip4_reass+0x2fc>)
 8010a28:	881a      	ldrh	r2, [r3, #0]
 8010a2a:	8c3b      	ldrh	r3, [r7, #32]
 8010a2c:	1ad3      	subs	r3, r2, r3
 8010a2e:	b29a      	uxth	r2, r3
 8010a30:	4b16      	ldr	r3, [pc, #88]	; (8010a8c <ip4_reass+0x2fc>)
 8010a32:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	e03c      	b.n	8010ab2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	e03a      	b.n	8010ab2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8010a3c:	bf00      	nop
 8010a3e:	e000      	b.n	8010a42 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8010a40:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d106      	bne.n	8010a56 <ip4_reass+0x2c6>
 8010a48:	4b12      	ldr	r3, [pc, #72]	; (8010a94 <ip4_reass+0x304>)
 8010a4a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010a4e:	4914      	ldr	r1, [pc, #80]	; (8010aa0 <ip4_reass+0x310>)
 8010a50:	4812      	ldr	r0, [pc, #72]	; (8010a9c <ip4_reass+0x30c>)
 8010a52:	f00b f9cb 	bl	801bdec <iprintf>
  if (ipr->p == NULL) {
 8010a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a58:	685b      	ldr	r3, [r3, #4]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d124      	bne.n	8010aa8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010a5e:	4b0c      	ldr	r3, [pc, #48]	; (8010a90 <ip4_reass+0x300>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d006      	beq.n	8010a76 <ip4_reass+0x2e6>
 8010a68:	4b0a      	ldr	r3, [pc, #40]	; (8010a94 <ip4_reass+0x304>)
 8010a6a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010a6e:	490d      	ldr	r1, [pc, #52]	; (8010aa4 <ip4_reass+0x314>)
 8010a70:	480a      	ldr	r0, [pc, #40]	; (8010a9c <ip4_reass+0x30c>)
 8010a72:	f00b f9bb 	bl	801bdec <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010a76:	2100      	movs	r1, #0
 8010a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a7a:	f7ff fcf1 	bl	8010460 <ip_reass_dequeue_datagram>
 8010a7e:	e014      	b.n	8010aaa <ip4_reass+0x31a>
    goto nullreturn;
 8010a80:	bf00      	nop
 8010a82:	e012      	b.n	8010aaa <ip4_reass+0x31a>
    goto nullreturn;
 8010a84:	bf00      	nop
 8010a86:	e010      	b.n	8010aaa <ip4_reass+0x31a>
      goto nullreturn;
 8010a88:	bf00      	nop
 8010a8a:	e00e      	b.n	8010aaa <ip4_reass+0x31a>
 8010a8c:	24003b38 	.word	0x24003b38
 8010a90:	24003b34 	.word	0x24003b34
 8010a94:	080200ac 	.word	0x080200ac
 8010a98:	08020244 	.word	0x08020244
 8010a9c:	0802011c 	.word	0x0802011c
 8010aa0:	08020260 	.word	0x08020260
 8010aa4:	0802026c 	.word	0x0802026c
  }

nullreturn:
 8010aa8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f001 fc54 	bl	8012358 <pbuf_free>
  return NULL;
 8010ab0:	2300      	movs	r3, #0
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3738      	adds	r7, #56	; 0x38
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}
 8010aba:	bf00      	nop

08010abc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010ac0:	2005      	movs	r0, #5
 8010ac2:	f000 fda7 	bl	8011614 <memp_malloc>
 8010ac6:	4603      	mov	r3, r0
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	bd80      	pop	{r7, pc}

08010acc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d106      	bne.n	8010ae8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010ada:	4b07      	ldr	r3, [pc, #28]	; (8010af8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010adc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010ae0:	4906      	ldr	r1, [pc, #24]	; (8010afc <ip_frag_free_pbuf_custom_ref+0x30>)
 8010ae2:	4807      	ldr	r0, [pc, #28]	; (8010b00 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010ae4:	f00b f982 	bl	801bdec <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010ae8:	6879      	ldr	r1, [r7, #4]
 8010aea:	2005      	movs	r0, #5
 8010aec:	f000 fdde 	bl	80116ac <memp_free>
}
 8010af0:	bf00      	nop
 8010af2:	3708      	adds	r7, #8
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}
 8010af8:	080200ac 	.word	0x080200ac
 8010afc:	0802028c 	.word	0x0802028c
 8010b00:	0802011c 	.word	0x0802011c

08010b04 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b084      	sub	sp, #16
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d106      	bne.n	8010b24 <ipfrag_free_pbuf_custom+0x20>
 8010b16:	4b11      	ldr	r3, [pc, #68]	; (8010b5c <ipfrag_free_pbuf_custom+0x58>)
 8010b18:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010b1c:	4910      	ldr	r1, [pc, #64]	; (8010b60 <ipfrag_free_pbuf_custom+0x5c>)
 8010b1e:	4811      	ldr	r0, [pc, #68]	; (8010b64 <ipfrag_free_pbuf_custom+0x60>)
 8010b20:	f00b f964 	bl	801bdec <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010b24:	68fa      	ldr	r2, [r7, #12]
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d006      	beq.n	8010b3a <ipfrag_free_pbuf_custom+0x36>
 8010b2c:	4b0b      	ldr	r3, [pc, #44]	; (8010b5c <ipfrag_free_pbuf_custom+0x58>)
 8010b2e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010b32:	490d      	ldr	r1, [pc, #52]	; (8010b68 <ipfrag_free_pbuf_custom+0x64>)
 8010b34:	480b      	ldr	r0, [pc, #44]	; (8010b64 <ipfrag_free_pbuf_custom+0x60>)
 8010b36:	f00b f959 	bl	801bdec <iprintf>
  if (pcr->original != NULL) {
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	695b      	ldr	r3, [r3, #20]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d004      	beq.n	8010b4c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	695b      	ldr	r3, [r3, #20]
 8010b46:	4618      	mov	r0, r3
 8010b48:	f001 fc06 	bl	8012358 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010b4c:	68f8      	ldr	r0, [r7, #12]
 8010b4e:	f7ff ffbd 	bl	8010acc <ip_frag_free_pbuf_custom_ref>
}
 8010b52:	bf00      	nop
 8010b54:	3710      	adds	r7, #16
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	080200ac 	.word	0x080200ac
 8010b60:	08020298 	.word	0x08020298
 8010b64:	0802011c 	.word	0x0802011c
 8010b68:	080202a4 	.word	0x080202a4

08010b6c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b094      	sub	sp, #80	; 0x50
 8010b70:	af02      	add	r7, sp, #8
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	60b9      	str	r1, [r7, #8]
 8010b76:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010b82:	3b14      	subs	r3, #20
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	da00      	bge.n	8010b8a <ip4_frag+0x1e>
 8010b88:	3307      	adds	r3, #7
 8010b8a:	10db      	asrs	r3, r3, #3
 8010b8c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010b8e:	2314      	movs	r3, #20
 8010b90:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b9a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b9e:	781b      	ldrb	r3, [r3, #0]
 8010ba0:	f003 030f 	and.w	r3, r3, #15
 8010ba4:	b2db      	uxtb	r3, r3
 8010ba6:	009b      	lsls	r3, r3, #2
 8010ba8:	b2db      	uxtb	r3, r3
 8010baa:	2b14      	cmp	r3, #20
 8010bac:	d002      	beq.n	8010bb4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010bae:	f06f 0305 	mvn.w	r3, #5
 8010bb2:	e110      	b.n	8010dd6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	895b      	ldrh	r3, [r3, #10]
 8010bb8:	2b13      	cmp	r3, #19
 8010bba:	d809      	bhi.n	8010bd0 <ip4_frag+0x64>
 8010bbc:	4b88      	ldr	r3, [pc, #544]	; (8010de0 <ip4_frag+0x274>)
 8010bbe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010bc2:	4988      	ldr	r1, [pc, #544]	; (8010de4 <ip4_frag+0x278>)
 8010bc4:	4888      	ldr	r0, [pc, #544]	; (8010de8 <ip4_frag+0x27c>)
 8010bc6:	f00b f911 	bl	801bdec <iprintf>
 8010bca:	f06f 0305 	mvn.w	r3, #5
 8010bce:	e102      	b.n	8010dd6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd2:	88db      	ldrh	r3, [r3, #6]
 8010bd4:	b29b      	uxth	r3, r3
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fd fd28 	bl	800e62c <lwip_htons>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010be0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010be2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010be6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010bea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010bf0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	891b      	ldrh	r3, [r3, #8]
 8010bf6:	3b14      	subs	r3, #20
 8010bf8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010bfc:	e0e1      	b.n	8010dc2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010bfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010c00:	00db      	lsls	r3, r3, #3
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010c08:	4293      	cmp	r3, r2
 8010c0a:	bf28      	it	cs
 8010c0c:	4613      	movcs	r3, r2
 8010c0e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010c10:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c14:	2114      	movs	r1, #20
 8010c16:	200e      	movs	r0, #14
 8010c18:	f001 f8ba 	bl	8011d90 <pbuf_alloc>
 8010c1c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	f000 80d5 	beq.w	8010dd0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c28:	895b      	ldrh	r3, [r3, #10]
 8010c2a:	2b13      	cmp	r3, #19
 8010c2c:	d806      	bhi.n	8010c3c <ip4_frag+0xd0>
 8010c2e:	4b6c      	ldr	r3, [pc, #432]	; (8010de0 <ip4_frag+0x274>)
 8010c30:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010c34:	496d      	ldr	r1, [pc, #436]	; (8010dec <ip4_frag+0x280>)
 8010c36:	486c      	ldr	r0, [pc, #432]	; (8010de8 <ip4_frag+0x27c>)
 8010c38:	f00b f8d8 	bl	801bdec <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	2214      	movs	r2, #20
 8010c42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010c44:	4618      	mov	r0, r3
 8010c46:	f00a f9af 	bl	801afa8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4c:	685b      	ldr	r3, [r3, #4]
 8010c4e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010c50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010c56:	e064      	b.n	8010d22 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	895a      	ldrh	r2, [r3, #10]
 8010c5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c5e:	1ad3      	subs	r3, r2, r3
 8010c60:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	895b      	ldrh	r3, [r3, #10]
 8010c66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d906      	bls.n	8010c7a <ip4_frag+0x10e>
 8010c6c:	4b5c      	ldr	r3, [pc, #368]	; (8010de0 <ip4_frag+0x274>)
 8010c6e:	f240 322d 	movw	r2, #813	; 0x32d
 8010c72:	495f      	ldr	r1, [pc, #380]	; (8010df0 <ip4_frag+0x284>)
 8010c74:	485c      	ldr	r0, [pc, #368]	; (8010de8 <ip4_frag+0x27c>)
 8010c76:	f00b f8b9 	bl	801bdec <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010c7a:	8bfa      	ldrh	r2, [r7, #30]
 8010c7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010c80:	4293      	cmp	r3, r2
 8010c82:	bf28      	it	cs
 8010c84:	4613      	movcs	r3, r2
 8010c86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010c8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d105      	bne.n	8010c9e <ip4_frag+0x132>
        poff = 0;
 8010c92:	2300      	movs	r3, #0
 8010c94:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	60fb      	str	r3, [r7, #12]
        continue;
 8010c9c:	e041      	b.n	8010d22 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010c9e:	f7ff ff0d 	bl	8010abc <ip_frag_alloc_pbuf_custom_ref>
 8010ca2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010ca4:	69bb      	ldr	r3, [r7, #24]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d103      	bne.n	8010cb2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cac:	f001 fb54 	bl	8012358 <pbuf_free>
        goto memerr;
 8010cb0:	e08f      	b.n	8010dd2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010cb2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010cb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010cba:	4413      	add	r3, r2
 8010cbc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010cc0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010cc4:	9201      	str	r2, [sp, #4]
 8010cc6:	9300      	str	r3, [sp, #0]
 8010cc8:	4603      	mov	r3, r0
 8010cca:	2241      	movs	r2, #65	; 0x41
 8010ccc:	2000      	movs	r0, #0
 8010cce:	f001 f989 	bl	8011fe4 <pbuf_alloced_custom>
 8010cd2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d106      	bne.n	8010ce8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010cda:	69b8      	ldr	r0, [r7, #24]
 8010cdc:	f7ff fef6 	bl	8010acc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010ce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ce2:	f001 fb39 	bl	8012358 <pbuf_free>
        goto memerr;
 8010ce6:	e074      	b.n	8010dd2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010ce8:	68f8      	ldr	r0, [r7, #12]
 8010cea:	f001 fbd5 	bl	8012498 <pbuf_ref>
      pcr->original = p;
 8010cee:	69bb      	ldr	r3, [r7, #24]
 8010cf0:	68fa      	ldr	r2, [r7, #12]
 8010cf2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010cf4:	69bb      	ldr	r3, [r7, #24]
 8010cf6:	4a3f      	ldr	r2, [pc, #252]	; (8010df4 <ip4_frag+0x288>)
 8010cf8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010cfa:	6979      	ldr	r1, [r7, #20]
 8010cfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cfe:	f001 fbed 	bl	80124dc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010d02:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010d06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010d0a:	1ad3      	subs	r3, r2, r3
 8010d0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010d10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d004      	beq.n	8010d22 <ip4_frag+0x1b6>
        poff = 0;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010d22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d196      	bne.n	8010c58 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010d2a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010d2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010d30:	4413      	add	r3, r2
 8010d32:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010d38:	f1a3 0213 	sub.w	r2, r3, #19
 8010d3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d40:	429a      	cmp	r2, r3
 8010d42:	bfcc      	ite	gt
 8010d44:	2301      	movgt	r3, #1
 8010d46:	2300      	movle	r3, #0
 8010d48:	b2db      	uxtb	r3, r3
 8010d4a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010d4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d54:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010d56:	6a3b      	ldr	r3, [r7, #32]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d002      	beq.n	8010d62 <ip4_frag+0x1f6>
 8010d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d003      	beq.n	8010d6a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010d62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010d68:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010d6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f7fd fc5d 	bl	800e62c <lwip_htons>
 8010d72:	4603      	mov	r3, r0
 8010d74:	461a      	mov	r2, r3
 8010d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d78:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010d7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d7c:	3314      	adds	r3, #20
 8010d7e:	b29b      	uxth	r3, r3
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7fd fc53 	bl	800e62c <lwip_htons>
 8010d86:	4603      	mov	r3, r0
 8010d88:	461a      	mov	r2, r3
 8010d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d8c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d90:	2200      	movs	r2, #0
 8010d92:	729a      	strb	r2, [r3, #10]
 8010d94:	2200      	movs	r2, #0
 8010d96:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	695b      	ldr	r3, [r3, #20]
 8010d9c:	687a      	ldr	r2, [r7, #4]
 8010d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010da0:	68b8      	ldr	r0, [r7, #8]
 8010da2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010da6:	f001 fad7 	bl	8012358 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010daa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010dae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010db0:	1ad3      	subs	r3, r2, r3
 8010db2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010db6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010dba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010dbc:	4413      	add	r3, r2
 8010dbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010dc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	f47f af19 	bne.w	8010bfe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	e002      	b.n	8010dd6 <ip4_frag+0x26a>
      goto memerr;
 8010dd0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3748      	adds	r7, #72	; 0x48
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	080200ac 	.word	0x080200ac
 8010de4:	080202b0 	.word	0x080202b0
 8010de8:	0802011c 	.word	0x0802011c
 8010dec:	080202cc 	.word	0x080202cc
 8010df0:	080202ec 	.word	0x080202ec
 8010df4:	08010b05 	.word	0x08010b05

08010df8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b083      	sub	sp, #12
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	4603      	mov	r3, r0
 8010e00:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010e02:	4b05      	ldr	r3, [pc, #20]	; (8010e18 <ptr_to_mem+0x20>)
 8010e04:	681a      	ldr	r2, [r3, #0]
 8010e06:	88fb      	ldrh	r3, [r7, #6]
 8010e08:	4413      	add	r3, r2
}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	370c      	adds	r7, #12
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop
 8010e18:	24003b3c 	.word	0x24003b3c

08010e1c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b083      	sub	sp, #12
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010e24:	4b05      	ldr	r3, [pc, #20]	; (8010e3c <mem_to_ptr+0x20>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	687a      	ldr	r2, [r7, #4]
 8010e2a:	1ad3      	subs	r3, r2, r3
 8010e2c:	b29b      	uxth	r3, r3
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	370c      	adds	r7, #12
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr
 8010e3a:	bf00      	nop
 8010e3c:	24003b3c 	.word	0x24003b3c

08010e40 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010e40:	b590      	push	{r4, r7, lr}
 8010e42:	b085      	sub	sp, #20
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010e48:	4b45      	ldr	r3, [pc, #276]	; (8010f60 <plug_holes+0x120>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	687a      	ldr	r2, [r7, #4]
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d206      	bcs.n	8010e60 <plug_holes+0x20>
 8010e52:	4b44      	ldr	r3, [pc, #272]	; (8010f64 <plug_holes+0x124>)
 8010e54:	f240 12df 	movw	r2, #479	; 0x1df
 8010e58:	4943      	ldr	r1, [pc, #268]	; (8010f68 <plug_holes+0x128>)
 8010e5a:	4844      	ldr	r0, [pc, #272]	; (8010f6c <plug_holes+0x12c>)
 8010e5c:	f00a ffc6 	bl	801bdec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010e60:	4b43      	ldr	r3, [pc, #268]	; (8010f70 <plug_holes+0x130>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d306      	bcc.n	8010e78 <plug_holes+0x38>
 8010e6a:	4b3e      	ldr	r3, [pc, #248]	; (8010f64 <plug_holes+0x124>)
 8010e6c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010e70:	4940      	ldr	r1, [pc, #256]	; (8010f74 <plug_holes+0x134>)
 8010e72:	483e      	ldr	r0, [pc, #248]	; (8010f6c <plug_holes+0x12c>)
 8010e74:	f00a ffba 	bl	801bdec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	791b      	ldrb	r3, [r3, #4]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d006      	beq.n	8010e8e <plug_holes+0x4e>
 8010e80:	4b38      	ldr	r3, [pc, #224]	; (8010f64 <plug_holes+0x124>)
 8010e82:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010e86:	493c      	ldr	r1, [pc, #240]	; (8010f78 <plug_holes+0x138>)
 8010e88:	4838      	ldr	r0, [pc, #224]	; (8010f6c <plug_holes+0x12c>)
 8010e8a:	f00a ffaf 	bl	801bdec <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	881b      	ldrh	r3, [r3, #0]
 8010e92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010e96:	d906      	bls.n	8010ea6 <plug_holes+0x66>
 8010e98:	4b32      	ldr	r3, [pc, #200]	; (8010f64 <plug_holes+0x124>)
 8010e9a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8010e9e:	4937      	ldr	r1, [pc, #220]	; (8010f7c <plug_holes+0x13c>)
 8010ea0:	4832      	ldr	r0, [pc, #200]	; (8010f6c <plug_holes+0x12c>)
 8010ea2:	f00a ffa3 	bl	801bdec <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	881b      	ldrh	r3, [r3, #0]
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7ff ffa4 	bl	8010df8 <ptr_to_mem>
 8010eb0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010eb2:	687a      	ldr	r2, [r7, #4]
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d024      	beq.n	8010f04 <plug_holes+0xc4>
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	791b      	ldrb	r3, [r3, #4]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d120      	bne.n	8010f04 <plug_holes+0xc4>
 8010ec2:	4b2b      	ldr	r3, [pc, #172]	; (8010f70 <plug_holes+0x130>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	68fa      	ldr	r2, [r7, #12]
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d01b      	beq.n	8010f04 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010ecc:	4b2c      	ldr	r3, [pc, #176]	; (8010f80 <plug_holes+0x140>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	68fa      	ldr	r2, [r7, #12]
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d102      	bne.n	8010edc <plug_holes+0x9c>
      lfree = mem;
 8010ed6:	4a2a      	ldr	r2, [pc, #168]	; (8010f80 <plug_holes+0x140>)
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	881a      	ldrh	r2, [r3, #0]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	881b      	ldrh	r3, [r3, #0]
 8010ee8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010eec:	d00a      	beq.n	8010f04 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	881b      	ldrh	r3, [r3, #0]
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7ff ff80 	bl	8010df8 <ptr_to_mem>
 8010ef8:	4604      	mov	r4, r0
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f7ff ff8e 	bl	8010e1c <mem_to_ptr>
 8010f00:	4603      	mov	r3, r0
 8010f02:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	885b      	ldrh	r3, [r3, #2]
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7ff ff75 	bl	8010df8 <ptr_to_mem>
 8010f0e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010f10:	68ba      	ldr	r2, [r7, #8]
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d01f      	beq.n	8010f58 <plug_holes+0x118>
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	791b      	ldrb	r3, [r3, #4]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d11b      	bne.n	8010f58 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010f20:	4b17      	ldr	r3, [pc, #92]	; (8010f80 <plug_holes+0x140>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	687a      	ldr	r2, [r7, #4]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d102      	bne.n	8010f30 <plug_holes+0xf0>
      lfree = pmem;
 8010f2a:	4a15      	ldr	r2, [pc, #84]	; (8010f80 <plug_holes+0x140>)
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	881a      	ldrh	r2, [r3, #0]
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	881b      	ldrh	r3, [r3, #0]
 8010f3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010f40:	d00a      	beq.n	8010f58 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	881b      	ldrh	r3, [r3, #0]
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7ff ff56 	bl	8010df8 <ptr_to_mem>
 8010f4c:	4604      	mov	r4, r0
 8010f4e:	68b8      	ldr	r0, [r7, #8]
 8010f50:	f7ff ff64 	bl	8010e1c <mem_to_ptr>
 8010f54:	4603      	mov	r3, r0
 8010f56:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010f58:	bf00      	nop
 8010f5a:	3714      	adds	r7, #20
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd90      	pop	{r4, r7, pc}
 8010f60:	24003b3c 	.word	0x24003b3c
 8010f64:	080202fc 	.word	0x080202fc
 8010f68:	08020358 	.word	0x08020358
 8010f6c:	08020370 	.word	0x08020370
 8010f70:	24003b40 	.word	0x24003b40
 8010f74:	08020398 	.word	0x08020398
 8010f78:	080203b4 	.word	0x080203b4
 8010f7c:	080203d0 	.word	0x080203d0
 8010f80:	24003b44 	.word	0x24003b44

08010f84 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b082      	sub	sp, #8
 8010f88:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010f8a:	4b16      	ldr	r3, [pc, #88]	; (8010fe4 <mem_init+0x60>)
 8010f8c:	4a16      	ldr	r2, [pc, #88]	; (8010fe8 <mem_init+0x64>)
 8010f8e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010f90:	4b14      	ldr	r3, [pc, #80]	; (8010fe4 <mem_init+0x60>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010f9c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010faa:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8010fae:	f7ff ff23 	bl	8010df8 <ptr_to_mem>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	4a0d      	ldr	r2, [pc, #52]	; (8010fec <mem_init+0x68>)
 8010fb6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010fb8:	4b0c      	ldr	r3, [pc, #48]	; (8010fec <mem_init+0x68>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	2201      	movs	r2, #1
 8010fbe:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010fc0:	4b0a      	ldr	r3, [pc, #40]	; (8010fec <mem_init+0x68>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010fc8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010fca:	4b08      	ldr	r3, [pc, #32]	; (8010fec <mem_init+0x68>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010fd2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010fd4:	4b03      	ldr	r3, [pc, #12]	; (8010fe4 <mem_init+0x60>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	4a05      	ldr	r2, [pc, #20]	; (8010ff0 <mem_init+0x6c>)
 8010fda:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8010fdc:	bf00      	nop
 8010fde:	3708      	adds	r7, #8
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}
 8010fe4:	24003b3c 	.word	0x24003b3c
 8010fe8:	30044000 	.word	0x30044000
 8010fec:	24003b40 	.word	0x24003b40
 8010ff0:	24003b44 	.word	0x24003b44

08010ff4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b086      	sub	sp, #24
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f7ff ff0d 	bl	8010e1c <mem_to_ptr>
 8011002:	4603      	mov	r3, r0
 8011004:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	881b      	ldrh	r3, [r3, #0]
 801100a:	4618      	mov	r0, r3
 801100c:	f7ff fef4 	bl	8010df8 <ptr_to_mem>
 8011010:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	885b      	ldrh	r3, [r3, #2]
 8011016:	4618      	mov	r0, r3
 8011018:	f7ff feee 	bl	8010df8 <ptr_to_mem>
 801101c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	881b      	ldrh	r3, [r3, #0]
 8011022:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011026:	d818      	bhi.n	801105a <mem_link_valid+0x66>
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	885b      	ldrh	r3, [r3, #2]
 801102c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011030:	d813      	bhi.n	801105a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011036:	8afa      	ldrh	r2, [r7, #22]
 8011038:	429a      	cmp	r2, r3
 801103a:	d004      	beq.n	8011046 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	881b      	ldrh	r3, [r3, #0]
 8011040:	8afa      	ldrh	r2, [r7, #22]
 8011042:	429a      	cmp	r2, r3
 8011044:	d109      	bne.n	801105a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011046:	4b08      	ldr	r3, [pc, #32]	; (8011068 <mem_link_valid+0x74>)
 8011048:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801104a:	693a      	ldr	r2, [r7, #16]
 801104c:	429a      	cmp	r2, r3
 801104e:	d006      	beq.n	801105e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	885b      	ldrh	r3, [r3, #2]
 8011054:	8afa      	ldrh	r2, [r7, #22]
 8011056:	429a      	cmp	r2, r3
 8011058:	d001      	beq.n	801105e <mem_link_valid+0x6a>
    return 0;
 801105a:	2300      	movs	r3, #0
 801105c:	e000      	b.n	8011060 <mem_link_valid+0x6c>
  }
  return 1;
 801105e:	2301      	movs	r3, #1
}
 8011060:	4618      	mov	r0, r3
 8011062:	3718      	adds	r7, #24
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}
 8011068:	24003b40 	.word	0x24003b40

0801106c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b084      	sub	sp, #16
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d04c      	beq.n	8011114 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f003 0303 	and.w	r3, r3, #3
 8011080:	2b00      	cmp	r3, #0
 8011082:	d007      	beq.n	8011094 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011084:	4b25      	ldr	r3, [pc, #148]	; (801111c <mem_free+0xb0>)
 8011086:	f240 2273 	movw	r2, #627	; 0x273
 801108a:	4925      	ldr	r1, [pc, #148]	; (8011120 <mem_free+0xb4>)
 801108c:	4825      	ldr	r0, [pc, #148]	; (8011124 <mem_free+0xb8>)
 801108e:	f00a fead 	bl	801bdec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8011092:	e040      	b.n	8011116 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	3b08      	subs	r3, #8
 8011098:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801109a:	4b23      	ldr	r3, [pc, #140]	; (8011128 <mem_free+0xbc>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	68fa      	ldr	r2, [r7, #12]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d306      	bcc.n	80110b2 <mem_free+0x46>
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f103 020c 	add.w	r2, r3, #12
 80110aa:	4b20      	ldr	r3, [pc, #128]	; (801112c <mem_free+0xc0>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d907      	bls.n	80110c2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80110b2:	4b1a      	ldr	r3, [pc, #104]	; (801111c <mem_free+0xb0>)
 80110b4:	f240 227f 	movw	r2, #639	; 0x27f
 80110b8:	491d      	ldr	r1, [pc, #116]	; (8011130 <mem_free+0xc4>)
 80110ba:	481a      	ldr	r0, [pc, #104]	; (8011124 <mem_free+0xb8>)
 80110bc:	f00a fe96 	bl	801bdec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80110c0:	e029      	b.n	8011116 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	791b      	ldrb	r3, [r3, #4]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d107      	bne.n	80110da <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80110ca:	4b14      	ldr	r3, [pc, #80]	; (801111c <mem_free+0xb0>)
 80110cc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80110d0:	4918      	ldr	r1, [pc, #96]	; (8011134 <mem_free+0xc8>)
 80110d2:	4814      	ldr	r0, [pc, #80]	; (8011124 <mem_free+0xb8>)
 80110d4:	f00a fe8a 	bl	801bdec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80110d8:	e01d      	b.n	8011116 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80110da:	68f8      	ldr	r0, [r7, #12]
 80110dc:	f7ff ff8a 	bl	8010ff4 <mem_link_valid>
 80110e0:	4603      	mov	r3, r0
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d107      	bne.n	80110f6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80110e6:	4b0d      	ldr	r3, [pc, #52]	; (801111c <mem_free+0xb0>)
 80110e8:	f240 2295 	movw	r2, #661	; 0x295
 80110ec:	4912      	ldr	r1, [pc, #72]	; (8011138 <mem_free+0xcc>)
 80110ee:	480d      	ldr	r0, [pc, #52]	; (8011124 <mem_free+0xb8>)
 80110f0:	f00a fe7c 	bl	801bdec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80110f4:	e00f      	b.n	8011116 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	2200      	movs	r2, #0
 80110fa:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80110fc:	4b0f      	ldr	r3, [pc, #60]	; (801113c <mem_free+0xd0>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	68fa      	ldr	r2, [r7, #12]
 8011102:	429a      	cmp	r2, r3
 8011104:	d202      	bcs.n	801110c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011106:	4a0d      	ldr	r2, [pc, #52]	; (801113c <mem_free+0xd0>)
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801110c:	68f8      	ldr	r0, [r7, #12]
 801110e:	f7ff fe97 	bl	8010e40 <plug_holes>
 8011112:	e000      	b.n	8011116 <mem_free+0xaa>
    return;
 8011114:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8011116:	3710      	adds	r7, #16
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}
 801111c:	080202fc 	.word	0x080202fc
 8011120:	080203fc 	.word	0x080203fc
 8011124:	08020370 	.word	0x08020370
 8011128:	24003b3c 	.word	0x24003b3c
 801112c:	24003b40 	.word	0x24003b40
 8011130:	08020420 	.word	0x08020420
 8011134:	0802043c 	.word	0x0802043c
 8011138:	08020464 	.word	0x08020464
 801113c:	24003b44 	.word	0x24003b44

08011140 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b088      	sub	sp, #32
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	460b      	mov	r3, r1
 801114a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801114c:	887b      	ldrh	r3, [r7, #2]
 801114e:	3303      	adds	r3, #3
 8011150:	b29b      	uxth	r3, r3
 8011152:	f023 0303 	bic.w	r3, r3, #3
 8011156:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011158:	8bfb      	ldrh	r3, [r7, #30]
 801115a:	2b0b      	cmp	r3, #11
 801115c:	d801      	bhi.n	8011162 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801115e:	230c      	movs	r3, #12
 8011160:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011162:	8bfb      	ldrh	r3, [r7, #30]
 8011164:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011168:	d803      	bhi.n	8011172 <mem_trim+0x32>
 801116a:	8bfa      	ldrh	r2, [r7, #30]
 801116c:	887b      	ldrh	r3, [r7, #2]
 801116e:	429a      	cmp	r2, r3
 8011170:	d201      	bcs.n	8011176 <mem_trim+0x36>
    return NULL;
 8011172:	2300      	movs	r3, #0
 8011174:	e0cc      	b.n	8011310 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011176:	4b68      	ldr	r3, [pc, #416]	; (8011318 <mem_trim+0x1d8>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	687a      	ldr	r2, [r7, #4]
 801117c:	429a      	cmp	r2, r3
 801117e:	d304      	bcc.n	801118a <mem_trim+0x4a>
 8011180:	4b66      	ldr	r3, [pc, #408]	; (801131c <mem_trim+0x1dc>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	687a      	ldr	r2, [r7, #4]
 8011186:	429a      	cmp	r2, r3
 8011188:	d306      	bcc.n	8011198 <mem_trim+0x58>
 801118a:	4b65      	ldr	r3, [pc, #404]	; (8011320 <mem_trim+0x1e0>)
 801118c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011190:	4964      	ldr	r1, [pc, #400]	; (8011324 <mem_trim+0x1e4>)
 8011192:	4865      	ldr	r0, [pc, #404]	; (8011328 <mem_trim+0x1e8>)
 8011194:	f00a fe2a 	bl	801bdec <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011198:	4b5f      	ldr	r3, [pc, #380]	; (8011318 <mem_trim+0x1d8>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	687a      	ldr	r2, [r7, #4]
 801119e:	429a      	cmp	r2, r3
 80111a0:	d304      	bcc.n	80111ac <mem_trim+0x6c>
 80111a2:	4b5e      	ldr	r3, [pc, #376]	; (801131c <mem_trim+0x1dc>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	687a      	ldr	r2, [r7, #4]
 80111a8:	429a      	cmp	r2, r3
 80111aa:	d301      	bcc.n	80111b0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	e0af      	b.n	8011310 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	3b08      	subs	r3, #8
 80111b4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80111b6:	69b8      	ldr	r0, [r7, #24]
 80111b8:	f7ff fe30 	bl	8010e1c <mem_to_ptr>
 80111bc:	4603      	mov	r3, r0
 80111be:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80111c0:	69bb      	ldr	r3, [r7, #24]
 80111c2:	881a      	ldrh	r2, [r3, #0]
 80111c4:	8afb      	ldrh	r3, [r7, #22]
 80111c6:	1ad3      	subs	r3, r2, r3
 80111c8:	b29b      	uxth	r3, r3
 80111ca:	3b08      	subs	r3, #8
 80111cc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80111ce:	8bfa      	ldrh	r2, [r7, #30]
 80111d0:	8abb      	ldrh	r3, [r7, #20]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d906      	bls.n	80111e4 <mem_trim+0xa4>
 80111d6:	4b52      	ldr	r3, [pc, #328]	; (8011320 <mem_trim+0x1e0>)
 80111d8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80111dc:	4953      	ldr	r1, [pc, #332]	; (801132c <mem_trim+0x1ec>)
 80111de:	4852      	ldr	r0, [pc, #328]	; (8011328 <mem_trim+0x1e8>)
 80111e0:	f00a fe04 	bl	801bdec <iprintf>
  if (newsize > size) {
 80111e4:	8bfa      	ldrh	r2, [r7, #30]
 80111e6:	8abb      	ldrh	r3, [r7, #20]
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d901      	bls.n	80111f0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80111ec:	2300      	movs	r3, #0
 80111ee:	e08f      	b.n	8011310 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80111f0:	8bfa      	ldrh	r2, [r7, #30]
 80111f2:	8abb      	ldrh	r3, [r7, #20]
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d101      	bne.n	80111fc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	e089      	b.n	8011310 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80111fc:	69bb      	ldr	r3, [r7, #24]
 80111fe:	881b      	ldrh	r3, [r3, #0]
 8011200:	4618      	mov	r0, r3
 8011202:	f7ff fdf9 	bl	8010df8 <ptr_to_mem>
 8011206:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	791b      	ldrb	r3, [r3, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d13f      	bne.n	8011290 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011210:	69bb      	ldr	r3, [r7, #24]
 8011212:	881b      	ldrh	r3, [r3, #0]
 8011214:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011218:	d106      	bne.n	8011228 <mem_trim+0xe8>
 801121a:	4b41      	ldr	r3, [pc, #260]	; (8011320 <mem_trim+0x1e0>)
 801121c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8011220:	4943      	ldr	r1, [pc, #268]	; (8011330 <mem_trim+0x1f0>)
 8011222:	4841      	ldr	r0, [pc, #260]	; (8011328 <mem_trim+0x1e8>)
 8011224:	f00a fde2 	bl	801bdec <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	881b      	ldrh	r3, [r3, #0]
 801122c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801122e:	8afa      	ldrh	r2, [r7, #22]
 8011230:	8bfb      	ldrh	r3, [r7, #30]
 8011232:	4413      	add	r3, r2
 8011234:	b29b      	uxth	r3, r3
 8011236:	3308      	adds	r3, #8
 8011238:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801123a:	4b3e      	ldr	r3, [pc, #248]	; (8011334 <mem_trim+0x1f4>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	693a      	ldr	r2, [r7, #16]
 8011240:	429a      	cmp	r2, r3
 8011242:	d106      	bne.n	8011252 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8011244:	89fb      	ldrh	r3, [r7, #14]
 8011246:	4618      	mov	r0, r3
 8011248:	f7ff fdd6 	bl	8010df8 <ptr_to_mem>
 801124c:	4603      	mov	r3, r0
 801124e:	4a39      	ldr	r2, [pc, #228]	; (8011334 <mem_trim+0x1f4>)
 8011250:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011252:	89fb      	ldrh	r3, [r7, #14]
 8011254:	4618      	mov	r0, r3
 8011256:	f7ff fdcf 	bl	8010df8 <ptr_to_mem>
 801125a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	2200      	movs	r2, #0
 8011260:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	89ba      	ldrh	r2, [r7, #12]
 8011266:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	8afa      	ldrh	r2, [r7, #22]
 801126c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801126e:	69bb      	ldr	r3, [r7, #24]
 8011270:	89fa      	ldrh	r2, [r7, #14]
 8011272:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	881b      	ldrh	r3, [r3, #0]
 8011278:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801127c:	d047      	beq.n	801130e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	881b      	ldrh	r3, [r3, #0]
 8011282:	4618      	mov	r0, r3
 8011284:	f7ff fdb8 	bl	8010df8 <ptr_to_mem>
 8011288:	4602      	mov	r2, r0
 801128a:	89fb      	ldrh	r3, [r7, #14]
 801128c:	8053      	strh	r3, [r2, #2]
 801128e:	e03e      	b.n	801130e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011290:	8bfb      	ldrh	r3, [r7, #30]
 8011292:	f103 0214 	add.w	r2, r3, #20
 8011296:	8abb      	ldrh	r3, [r7, #20]
 8011298:	429a      	cmp	r2, r3
 801129a:	d838      	bhi.n	801130e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801129c:	8afa      	ldrh	r2, [r7, #22]
 801129e:	8bfb      	ldrh	r3, [r7, #30]
 80112a0:	4413      	add	r3, r2
 80112a2:	b29b      	uxth	r3, r3
 80112a4:	3308      	adds	r3, #8
 80112a6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	881b      	ldrh	r3, [r3, #0]
 80112ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80112b0:	d106      	bne.n	80112c0 <mem_trim+0x180>
 80112b2:	4b1b      	ldr	r3, [pc, #108]	; (8011320 <mem_trim+0x1e0>)
 80112b4:	f240 3216 	movw	r2, #790	; 0x316
 80112b8:	491d      	ldr	r1, [pc, #116]	; (8011330 <mem_trim+0x1f0>)
 80112ba:	481b      	ldr	r0, [pc, #108]	; (8011328 <mem_trim+0x1e8>)
 80112bc:	f00a fd96 	bl	801bdec <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80112c0:	89fb      	ldrh	r3, [r7, #14]
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7ff fd98 	bl	8010df8 <ptr_to_mem>
 80112c8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80112ca:	4b1a      	ldr	r3, [pc, #104]	; (8011334 <mem_trim+0x1f4>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	693a      	ldr	r2, [r7, #16]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d202      	bcs.n	80112da <mem_trim+0x19a>
      lfree = mem2;
 80112d4:	4a17      	ldr	r2, [pc, #92]	; (8011334 <mem_trim+0x1f4>)
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	2200      	movs	r2, #0
 80112de:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80112e0:	69bb      	ldr	r3, [r7, #24]
 80112e2:	881a      	ldrh	r2, [r3, #0]
 80112e4:	693b      	ldr	r3, [r7, #16]
 80112e6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	8afa      	ldrh	r2, [r7, #22]
 80112ec:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80112ee:	69bb      	ldr	r3, [r7, #24]
 80112f0:	89fa      	ldrh	r2, [r7, #14]
 80112f2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	881b      	ldrh	r3, [r3, #0]
 80112f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80112fc:	d007      	beq.n	801130e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80112fe:	693b      	ldr	r3, [r7, #16]
 8011300:	881b      	ldrh	r3, [r3, #0]
 8011302:	4618      	mov	r0, r3
 8011304:	f7ff fd78 	bl	8010df8 <ptr_to_mem>
 8011308:	4602      	mov	r2, r0
 801130a:	89fb      	ldrh	r3, [r7, #14]
 801130c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801130e:	687b      	ldr	r3, [r7, #4]
}
 8011310:	4618      	mov	r0, r3
 8011312:	3720      	adds	r7, #32
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}
 8011318:	24003b3c 	.word	0x24003b3c
 801131c:	24003b40 	.word	0x24003b40
 8011320:	080202fc 	.word	0x080202fc
 8011324:	08020498 	.word	0x08020498
 8011328:	08020370 	.word	0x08020370
 801132c:	080204b0 	.word	0x080204b0
 8011330:	080204d0 	.word	0x080204d0
 8011334:	24003b44 	.word	0x24003b44

08011338 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b088      	sub	sp, #32
 801133c:	af00      	add	r7, sp, #0
 801133e:	4603      	mov	r3, r0
 8011340:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011342:	88fb      	ldrh	r3, [r7, #6]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d101      	bne.n	801134c <mem_malloc+0x14>
    return NULL;
 8011348:	2300      	movs	r3, #0
 801134a:	e0d9      	b.n	8011500 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801134c:	88fb      	ldrh	r3, [r7, #6]
 801134e:	3303      	adds	r3, #3
 8011350:	b29b      	uxth	r3, r3
 8011352:	f023 0303 	bic.w	r3, r3, #3
 8011356:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011358:	8bbb      	ldrh	r3, [r7, #28]
 801135a:	2b0b      	cmp	r3, #11
 801135c:	d801      	bhi.n	8011362 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801135e:	230c      	movs	r3, #12
 8011360:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011362:	8bbb      	ldrh	r3, [r7, #28]
 8011364:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011368:	d803      	bhi.n	8011372 <mem_malloc+0x3a>
 801136a:	8bba      	ldrh	r2, [r7, #28]
 801136c:	88fb      	ldrh	r3, [r7, #6]
 801136e:	429a      	cmp	r2, r3
 8011370:	d201      	bcs.n	8011376 <mem_malloc+0x3e>
    return NULL;
 8011372:	2300      	movs	r3, #0
 8011374:	e0c4      	b.n	8011500 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011376:	4b64      	ldr	r3, [pc, #400]	; (8011508 <mem_malloc+0x1d0>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	4618      	mov	r0, r3
 801137c:	f7ff fd4e 	bl	8010e1c <mem_to_ptr>
 8011380:	4603      	mov	r3, r0
 8011382:	83fb      	strh	r3, [r7, #30]
 8011384:	e0b4      	b.n	80114f0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011386:	8bfb      	ldrh	r3, [r7, #30]
 8011388:	4618      	mov	r0, r3
 801138a:	f7ff fd35 	bl	8010df8 <ptr_to_mem>
 801138e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	791b      	ldrb	r3, [r3, #4]
 8011394:	2b00      	cmp	r3, #0
 8011396:	f040 80a4 	bne.w	80114e2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	881b      	ldrh	r3, [r3, #0]
 801139e:	461a      	mov	r2, r3
 80113a0:	8bfb      	ldrh	r3, [r7, #30]
 80113a2:	1ad3      	subs	r3, r2, r3
 80113a4:	f1a3 0208 	sub.w	r2, r3, #8
 80113a8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80113aa:	429a      	cmp	r2, r3
 80113ac:	f0c0 8099 	bcc.w	80114e2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	881b      	ldrh	r3, [r3, #0]
 80113b4:	461a      	mov	r2, r3
 80113b6:	8bfb      	ldrh	r3, [r7, #30]
 80113b8:	1ad3      	subs	r3, r2, r3
 80113ba:	f1a3 0208 	sub.w	r2, r3, #8
 80113be:	8bbb      	ldrh	r3, [r7, #28]
 80113c0:	3314      	adds	r3, #20
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d333      	bcc.n	801142e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80113c6:	8bfa      	ldrh	r2, [r7, #30]
 80113c8:	8bbb      	ldrh	r3, [r7, #28]
 80113ca:	4413      	add	r3, r2
 80113cc:	b29b      	uxth	r3, r3
 80113ce:	3308      	adds	r3, #8
 80113d0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80113d2:	8a7b      	ldrh	r3, [r7, #18]
 80113d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80113d8:	d106      	bne.n	80113e8 <mem_malloc+0xb0>
 80113da:	4b4c      	ldr	r3, [pc, #304]	; (801150c <mem_malloc+0x1d4>)
 80113dc:	f240 3287 	movw	r2, #903	; 0x387
 80113e0:	494b      	ldr	r1, [pc, #300]	; (8011510 <mem_malloc+0x1d8>)
 80113e2:	484c      	ldr	r0, [pc, #304]	; (8011514 <mem_malloc+0x1dc>)
 80113e4:	f00a fd02 	bl	801bdec <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80113e8:	8a7b      	ldrh	r3, [r7, #18]
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7ff fd04 	bl	8010df8 <ptr_to_mem>
 80113f0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2200      	movs	r2, #0
 80113f6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	881a      	ldrh	r2, [r3, #0]
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	8bfa      	ldrh	r2, [r7, #30]
 8011404:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	8a7a      	ldrh	r2, [r7, #18]
 801140a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	2201      	movs	r2, #1
 8011410:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	881b      	ldrh	r3, [r3, #0]
 8011416:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801141a:	d00b      	beq.n	8011434 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	881b      	ldrh	r3, [r3, #0]
 8011420:	4618      	mov	r0, r3
 8011422:	f7ff fce9 	bl	8010df8 <ptr_to_mem>
 8011426:	4602      	mov	r2, r0
 8011428:	8a7b      	ldrh	r3, [r7, #18]
 801142a:	8053      	strh	r3, [r2, #2]
 801142c:	e002      	b.n	8011434 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	2201      	movs	r2, #1
 8011432:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011434:	4b34      	ldr	r3, [pc, #208]	; (8011508 <mem_malloc+0x1d0>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	697a      	ldr	r2, [r7, #20]
 801143a:	429a      	cmp	r2, r3
 801143c:	d127      	bne.n	801148e <mem_malloc+0x156>
          struct mem *cur = lfree;
 801143e:	4b32      	ldr	r3, [pc, #200]	; (8011508 <mem_malloc+0x1d0>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011444:	e005      	b.n	8011452 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011446:	69bb      	ldr	r3, [r7, #24]
 8011448:	881b      	ldrh	r3, [r3, #0]
 801144a:	4618      	mov	r0, r3
 801144c:	f7ff fcd4 	bl	8010df8 <ptr_to_mem>
 8011450:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011452:	69bb      	ldr	r3, [r7, #24]
 8011454:	791b      	ldrb	r3, [r3, #4]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d004      	beq.n	8011464 <mem_malloc+0x12c>
 801145a:	4b2f      	ldr	r3, [pc, #188]	; (8011518 <mem_malloc+0x1e0>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	69ba      	ldr	r2, [r7, #24]
 8011460:	429a      	cmp	r2, r3
 8011462:	d1f0      	bne.n	8011446 <mem_malloc+0x10e>
          }
          lfree = cur;
 8011464:	4a28      	ldr	r2, [pc, #160]	; (8011508 <mem_malloc+0x1d0>)
 8011466:	69bb      	ldr	r3, [r7, #24]
 8011468:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801146a:	4b27      	ldr	r3, [pc, #156]	; (8011508 <mem_malloc+0x1d0>)
 801146c:	681a      	ldr	r2, [r3, #0]
 801146e:	4b2a      	ldr	r3, [pc, #168]	; (8011518 <mem_malloc+0x1e0>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	429a      	cmp	r2, r3
 8011474:	d00b      	beq.n	801148e <mem_malloc+0x156>
 8011476:	4b24      	ldr	r3, [pc, #144]	; (8011508 <mem_malloc+0x1d0>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	791b      	ldrb	r3, [r3, #4]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d006      	beq.n	801148e <mem_malloc+0x156>
 8011480:	4b22      	ldr	r3, [pc, #136]	; (801150c <mem_malloc+0x1d4>)
 8011482:	f240 32b5 	movw	r2, #949	; 0x3b5
 8011486:	4925      	ldr	r1, [pc, #148]	; (801151c <mem_malloc+0x1e4>)
 8011488:	4822      	ldr	r0, [pc, #136]	; (8011514 <mem_malloc+0x1dc>)
 801148a:	f00a fcaf 	bl	801bdec <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801148e:	8bba      	ldrh	r2, [r7, #28]
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	4413      	add	r3, r2
 8011494:	3308      	adds	r3, #8
 8011496:	4a20      	ldr	r2, [pc, #128]	; (8011518 <mem_malloc+0x1e0>)
 8011498:	6812      	ldr	r2, [r2, #0]
 801149a:	4293      	cmp	r3, r2
 801149c:	d906      	bls.n	80114ac <mem_malloc+0x174>
 801149e:	4b1b      	ldr	r3, [pc, #108]	; (801150c <mem_malloc+0x1d4>)
 80114a0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80114a4:	491e      	ldr	r1, [pc, #120]	; (8011520 <mem_malloc+0x1e8>)
 80114a6:	481b      	ldr	r0, [pc, #108]	; (8011514 <mem_malloc+0x1dc>)
 80114a8:	f00a fca0 	bl	801bdec <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	f003 0303 	and.w	r3, r3, #3
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d006      	beq.n	80114c4 <mem_malloc+0x18c>
 80114b6:	4b15      	ldr	r3, [pc, #84]	; (801150c <mem_malloc+0x1d4>)
 80114b8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80114bc:	4919      	ldr	r1, [pc, #100]	; (8011524 <mem_malloc+0x1ec>)
 80114be:	4815      	ldr	r0, [pc, #84]	; (8011514 <mem_malloc+0x1dc>)
 80114c0:	f00a fc94 	bl	801bdec <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	f003 0303 	and.w	r3, r3, #3
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d006      	beq.n	80114dc <mem_malloc+0x1a4>
 80114ce:	4b0f      	ldr	r3, [pc, #60]	; (801150c <mem_malloc+0x1d4>)
 80114d0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80114d4:	4914      	ldr	r1, [pc, #80]	; (8011528 <mem_malloc+0x1f0>)
 80114d6:	480f      	ldr	r0, [pc, #60]	; (8011514 <mem_malloc+0x1dc>)
 80114d8:	f00a fc88 	bl	801bdec <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	3308      	adds	r3, #8
 80114e0:	e00e      	b.n	8011500 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80114e2:	8bfb      	ldrh	r3, [r7, #30]
 80114e4:	4618      	mov	r0, r3
 80114e6:	f7ff fc87 	bl	8010df8 <ptr_to_mem>
 80114ea:	4603      	mov	r3, r0
 80114ec:	881b      	ldrh	r3, [r3, #0]
 80114ee:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80114f0:	8bfa      	ldrh	r2, [r7, #30]
 80114f2:	8bbb      	ldrh	r3, [r7, #28]
 80114f4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80114f8:	429a      	cmp	r2, r3
 80114fa:	f4ff af44 	bcc.w	8011386 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80114fe:	2300      	movs	r3, #0
}
 8011500:	4618      	mov	r0, r3
 8011502:	3720      	adds	r7, #32
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}
 8011508:	24003b44 	.word	0x24003b44
 801150c:	080202fc 	.word	0x080202fc
 8011510:	080204d0 	.word	0x080204d0
 8011514:	08020370 	.word	0x08020370
 8011518:	24003b40 	.word	0x24003b40
 801151c:	080204e4 	.word	0x080204e4
 8011520:	08020500 	.word	0x08020500
 8011524:	08020530 	.word	0x08020530
 8011528:	08020560 	.word	0x08020560

0801152c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801152c:	b480      	push	{r7}
 801152e:	b085      	sub	sp, #20
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	689b      	ldr	r3, [r3, #8]
 8011538:	2200      	movs	r2, #0
 801153a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	3303      	adds	r3, #3
 8011542:	f023 0303 	bic.w	r3, r3, #3
 8011546:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011548:	2300      	movs	r3, #0
 801154a:	60fb      	str	r3, [r7, #12]
 801154c:	e011      	b.n	8011572 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	689b      	ldr	r3, [r3, #8]
 8011552:	681a      	ldr	r2, [r3, #0]
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	689b      	ldr	r3, [r3, #8]
 801155c:	68ba      	ldr	r2, [r7, #8]
 801155e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	881b      	ldrh	r3, [r3, #0]
 8011564:	461a      	mov	r2, r3
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	4413      	add	r3, r2
 801156a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	3301      	adds	r3, #1
 8011570:	60fb      	str	r3, [r7, #12]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	885b      	ldrh	r3, [r3, #2]
 8011576:	461a      	mov	r2, r3
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	4293      	cmp	r3, r2
 801157c:	dbe7      	blt.n	801154e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801157e:	bf00      	nop
 8011580:	bf00      	nop
 8011582:	3714      	adds	r7, #20
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr

0801158c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b082      	sub	sp, #8
 8011590:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011592:	2300      	movs	r3, #0
 8011594:	80fb      	strh	r3, [r7, #6]
 8011596:	e009      	b.n	80115ac <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011598:	88fb      	ldrh	r3, [r7, #6]
 801159a:	4a08      	ldr	r2, [pc, #32]	; (80115bc <memp_init+0x30>)
 801159c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7ff ffc3 	bl	801152c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80115a6:	88fb      	ldrh	r3, [r7, #6]
 80115a8:	3301      	adds	r3, #1
 80115aa:	80fb      	strh	r3, [r7, #6]
 80115ac:	88fb      	ldrh	r3, [r7, #6]
 80115ae:	2b08      	cmp	r3, #8
 80115b0:	d9f2      	bls.n	8011598 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80115b2:	bf00      	nop
 80115b4:	bf00      	nop
 80115b6:	3708      	adds	r7, #8
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}
 80115bc:	08022848 	.word	0x08022848

080115c0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b084      	sub	sp, #16
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	689b      	ldr	r3, [r3, #8]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d012      	beq.n	80115fc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	689b      	ldr	r3, [r3, #8]
 80115da:	68fa      	ldr	r2, [r7, #12]
 80115dc:	6812      	ldr	r2, [r2, #0]
 80115de:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	f003 0303 	and.w	r3, r3, #3
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d006      	beq.n	80115f8 <do_memp_malloc_pool+0x38>
 80115ea:	4b07      	ldr	r3, [pc, #28]	; (8011608 <do_memp_malloc_pool+0x48>)
 80115ec:	f44f 728c 	mov.w	r2, #280	; 0x118
 80115f0:	4906      	ldr	r1, [pc, #24]	; (801160c <do_memp_malloc_pool+0x4c>)
 80115f2:	4807      	ldr	r0, [pc, #28]	; (8011610 <do_memp_malloc_pool+0x50>)
 80115f4:	f00a fbfa 	bl	801bdec <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	e000      	b.n	80115fe <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80115fc:	2300      	movs	r3, #0
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3710      	adds	r7, #16
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}
 8011606:	bf00      	nop
 8011608:	08020584 	.word	0x08020584
 801160c:	080205e0 	.word	0x080205e0
 8011610:	08020604 	.word	0x08020604

08011614 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b084      	sub	sp, #16
 8011618:	af00      	add	r7, sp, #0
 801161a:	4603      	mov	r3, r0
 801161c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801161e:	79fb      	ldrb	r3, [r7, #7]
 8011620:	2b08      	cmp	r3, #8
 8011622:	d908      	bls.n	8011636 <memp_malloc+0x22>
 8011624:	4b0a      	ldr	r3, [pc, #40]	; (8011650 <memp_malloc+0x3c>)
 8011626:	f240 1257 	movw	r2, #343	; 0x157
 801162a:	490a      	ldr	r1, [pc, #40]	; (8011654 <memp_malloc+0x40>)
 801162c:	480a      	ldr	r0, [pc, #40]	; (8011658 <memp_malloc+0x44>)
 801162e:	f00a fbdd 	bl	801bdec <iprintf>
 8011632:	2300      	movs	r3, #0
 8011634:	e008      	b.n	8011648 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011636:	79fb      	ldrb	r3, [r7, #7]
 8011638:	4a08      	ldr	r2, [pc, #32]	; (801165c <memp_malloc+0x48>)
 801163a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801163e:	4618      	mov	r0, r3
 8011640:	f7ff ffbe 	bl	80115c0 <do_memp_malloc_pool>
 8011644:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011646:	68fb      	ldr	r3, [r7, #12]
}
 8011648:	4618      	mov	r0, r3
 801164a:	3710      	adds	r7, #16
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}
 8011650:	08020584 	.word	0x08020584
 8011654:	08020640 	.word	0x08020640
 8011658:	08020604 	.word	0x08020604
 801165c:	08022848 	.word	0x08022848

08011660 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b084      	sub	sp, #16
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
 8011668:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	f003 0303 	and.w	r3, r3, #3
 8011670:	2b00      	cmp	r3, #0
 8011672:	d006      	beq.n	8011682 <do_memp_free_pool+0x22>
 8011674:	4b0a      	ldr	r3, [pc, #40]	; (80116a0 <do_memp_free_pool+0x40>)
 8011676:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801167a:	490a      	ldr	r1, [pc, #40]	; (80116a4 <do_memp_free_pool+0x44>)
 801167c:	480a      	ldr	r0, [pc, #40]	; (80116a8 <do_memp_free_pool+0x48>)
 801167e:	f00a fbb5 	bl	801bdec <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	689b      	ldr	r3, [r3, #8]
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	689b      	ldr	r3, [r3, #8]
 8011694:	68fa      	ldr	r2, [r7, #12]
 8011696:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8011698:	bf00      	nop
 801169a:	3710      	adds	r7, #16
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	08020584 	.word	0x08020584
 80116a4:	08020660 	.word	0x08020660
 80116a8:	08020604 	.word	0x08020604

080116ac <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	4603      	mov	r3, r0
 80116b4:	6039      	str	r1, [r7, #0]
 80116b6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80116b8:	79fb      	ldrb	r3, [r7, #7]
 80116ba:	2b08      	cmp	r3, #8
 80116bc:	d907      	bls.n	80116ce <memp_free+0x22>
 80116be:	4b0c      	ldr	r3, [pc, #48]	; (80116f0 <memp_free+0x44>)
 80116c0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80116c4:	490b      	ldr	r1, [pc, #44]	; (80116f4 <memp_free+0x48>)
 80116c6:	480c      	ldr	r0, [pc, #48]	; (80116f8 <memp_free+0x4c>)
 80116c8:	f00a fb90 	bl	801bdec <iprintf>
 80116cc:	e00c      	b.n	80116e8 <memp_free+0x3c>

  if (mem == NULL) {
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d008      	beq.n	80116e6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80116d4:	79fb      	ldrb	r3, [r7, #7]
 80116d6:	4a09      	ldr	r2, [pc, #36]	; (80116fc <memp_free+0x50>)
 80116d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116dc:	6839      	ldr	r1, [r7, #0]
 80116de:	4618      	mov	r0, r3
 80116e0:	f7ff ffbe 	bl	8011660 <do_memp_free_pool>
 80116e4:	e000      	b.n	80116e8 <memp_free+0x3c>
    return;
 80116e6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80116e8:	3708      	adds	r7, #8
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
 80116ee:	bf00      	nop
 80116f0:	08020584 	.word	0x08020584
 80116f4:	08020680 	.word	0x08020680
 80116f8:	08020604 	.word	0x08020604
 80116fc:	08022848 	.word	0x08022848

08011700 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011700:	b480      	push	{r7}
 8011702:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011704:	bf00      	nop
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr
	...

08011710 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b086      	sub	sp, #24
 8011714:	af00      	add	r7, sp, #0
 8011716:	60f8      	str	r0, [r7, #12]
 8011718:	60b9      	str	r1, [r7, #8]
 801171a:	607a      	str	r2, [r7, #4]
 801171c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d108      	bne.n	8011736 <netif_add+0x26>
 8011724:	4b57      	ldr	r3, [pc, #348]	; (8011884 <netif_add+0x174>)
 8011726:	f240 1227 	movw	r2, #295	; 0x127
 801172a:	4957      	ldr	r1, [pc, #348]	; (8011888 <netif_add+0x178>)
 801172c:	4857      	ldr	r0, [pc, #348]	; (801188c <netif_add+0x17c>)
 801172e:	f00a fb5d 	bl	801bdec <iprintf>
 8011732:	2300      	movs	r3, #0
 8011734:	e0a2      	b.n	801187c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8011736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011738:	2b00      	cmp	r3, #0
 801173a:	d108      	bne.n	801174e <netif_add+0x3e>
 801173c:	4b51      	ldr	r3, [pc, #324]	; (8011884 <netif_add+0x174>)
 801173e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8011742:	4953      	ldr	r1, [pc, #332]	; (8011890 <netif_add+0x180>)
 8011744:	4851      	ldr	r0, [pc, #324]	; (801188c <netif_add+0x17c>)
 8011746:	f00a fb51 	bl	801bdec <iprintf>
 801174a:	2300      	movs	r3, #0
 801174c:	e096      	b.n	801187c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d101      	bne.n	8011758 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011754:	4b4f      	ldr	r3, [pc, #316]	; (8011894 <netif_add+0x184>)
 8011756:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d101      	bne.n	8011762 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801175e:	4b4d      	ldr	r3, [pc, #308]	; (8011894 <netif_add+0x184>)
 8011760:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011762:	683b      	ldr	r3, [r7, #0]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d101      	bne.n	801176c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011768:	4b4a      	ldr	r3, [pc, #296]	; (8011894 <netif_add+0x184>)
 801176a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	2200      	movs	r2, #0
 8011770:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	2200      	movs	r2, #0
 8011776:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	2200      	movs	r2, #0
 801177c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	4a45      	ldr	r2, [pc, #276]	; (8011898 <netif_add+0x188>)
 8011782:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	2200      	movs	r2, #0
 8011788:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2200      	movs	r2, #0
 801178e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2200      	movs	r2, #0
 8011796:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	6a3a      	ldr	r2, [r7, #32]
 801179c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801179e:	4b3f      	ldr	r3, [pc, #252]	; (801189c <netif_add+0x18c>)
 80117a0:	781a      	ldrb	r2, [r3, #0]
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117ac:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	68b9      	ldr	r1, [r7, #8]
 80117b4:	68f8      	ldr	r0, [r7, #12]
 80117b6:	f000 f913 	bl	80119e0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80117ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117bc:	68f8      	ldr	r0, [r7, #12]
 80117be:	4798      	blx	r3
 80117c0:	4603      	mov	r3, r0
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d001      	beq.n	80117ca <netif_add+0xba>
    return NULL;
 80117c6:	2300      	movs	r3, #0
 80117c8:	e058      	b.n	801187c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80117d0:	2bff      	cmp	r3, #255	; 0xff
 80117d2:	d103      	bne.n	80117dc <netif_add+0xcc>
        netif->num = 0;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2200      	movs	r2, #0
 80117d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80117dc:	2300      	movs	r3, #0
 80117de:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80117e0:	4b2f      	ldr	r3, [pc, #188]	; (80118a0 <netif_add+0x190>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	617b      	str	r3, [r7, #20]
 80117e6:	e02b      	b.n	8011840 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80117e8:	697a      	ldr	r2, [r7, #20]
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d106      	bne.n	80117fe <netif_add+0xee>
 80117f0:	4b24      	ldr	r3, [pc, #144]	; (8011884 <netif_add+0x174>)
 80117f2:	f240 128b 	movw	r2, #395	; 0x18b
 80117f6:	492b      	ldr	r1, [pc, #172]	; (80118a4 <netif_add+0x194>)
 80117f8:	4824      	ldr	r0, [pc, #144]	; (801188c <netif_add+0x17c>)
 80117fa:	f00a faf7 	bl	801bdec <iprintf>
        num_netifs++;
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	3301      	adds	r3, #1
 8011802:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	2bff      	cmp	r3, #255	; 0xff
 8011808:	dd06      	ble.n	8011818 <netif_add+0x108>
 801180a:	4b1e      	ldr	r3, [pc, #120]	; (8011884 <netif_add+0x174>)
 801180c:	f240 128d 	movw	r2, #397	; 0x18d
 8011810:	4925      	ldr	r1, [pc, #148]	; (80118a8 <netif_add+0x198>)
 8011812:	481e      	ldr	r0, [pc, #120]	; (801188c <netif_add+0x17c>)
 8011814:	f00a faea 	bl	801bdec <iprintf>
        if (netif2->num == netif->num) {
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011824:	429a      	cmp	r2, r3
 8011826:	d108      	bne.n	801183a <netif_add+0x12a>
          netif->num++;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801182e:	3301      	adds	r3, #1
 8011830:	b2da      	uxtb	r2, r3
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8011838:	e005      	b.n	8011846 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	617b      	str	r3, [r7, #20]
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d1d0      	bne.n	80117e8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d1be      	bne.n	80117ca <netif_add+0xba>
  }
  if (netif->num == 254) {
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011852:	2bfe      	cmp	r3, #254	; 0xfe
 8011854:	d103      	bne.n	801185e <netif_add+0x14e>
    netif_num = 0;
 8011856:	4b11      	ldr	r3, [pc, #68]	; (801189c <netif_add+0x18c>)
 8011858:	2200      	movs	r2, #0
 801185a:	701a      	strb	r2, [r3, #0]
 801185c:	e006      	b.n	801186c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011864:	3301      	adds	r3, #1
 8011866:	b2da      	uxtb	r2, r3
 8011868:	4b0c      	ldr	r3, [pc, #48]	; (801189c <netif_add+0x18c>)
 801186a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801186c:	4b0c      	ldr	r3, [pc, #48]	; (80118a0 <netif_add+0x190>)
 801186e:	681a      	ldr	r2, [r3, #0]
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011874:	4a0a      	ldr	r2, [pc, #40]	; (80118a0 <netif_add+0x190>)
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801187a:	68fb      	ldr	r3, [r7, #12]
}
 801187c:	4618      	mov	r0, r3
 801187e:	3718      	adds	r7, #24
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}
 8011884:	0802069c 	.word	0x0802069c
 8011888:	08020758 	.word	0x08020758
 801188c:	08020714 	.word	0x08020714
 8011890:	08020774 	.word	0x08020774
 8011894:	080227d8 	.word	0x080227d8
 8011898:	08011cbb 	.word	0x08011cbb
 801189c:	24003b6c 	.word	0x24003b6c
 80118a0:	240071e8 	.word	0x240071e8
 80118a4:	08020798 	.word	0x08020798
 80118a8:	080207ac 	.word	0x080207ac

080118ac <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b082      	sub	sp, #8
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80118b6:	6839      	ldr	r1, [r7, #0]
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f002 fb23 	bl	8013f04 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80118be:	6839      	ldr	r1, [r7, #0]
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f006 fd07 	bl	80182d4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80118c6:	bf00      	nop
 80118c8:	3708      	adds	r7, #8
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}
	...

080118d0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b086      	sub	sp, #24
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	60f8      	str	r0, [r7, #12]
 80118d8:	60b9      	str	r1, [r7, #8]
 80118da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d106      	bne.n	80118f0 <netif_do_set_ipaddr+0x20>
 80118e2:	4b1d      	ldr	r3, [pc, #116]	; (8011958 <netif_do_set_ipaddr+0x88>)
 80118e4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80118e8:	491c      	ldr	r1, [pc, #112]	; (801195c <netif_do_set_ipaddr+0x8c>)
 80118ea:	481d      	ldr	r0, [pc, #116]	; (8011960 <netif_do_set_ipaddr+0x90>)
 80118ec:	f00a fa7e 	bl	801bdec <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d106      	bne.n	8011904 <netif_do_set_ipaddr+0x34>
 80118f6:	4b18      	ldr	r3, [pc, #96]	; (8011958 <netif_do_set_ipaddr+0x88>)
 80118f8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80118fc:	4917      	ldr	r1, [pc, #92]	; (801195c <netif_do_set_ipaddr+0x8c>)
 80118fe:	4818      	ldr	r0, [pc, #96]	; (8011960 <netif_do_set_ipaddr+0x90>)
 8011900:	f00a fa74 	bl	801bdec <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	681a      	ldr	r2, [r3, #0]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	3304      	adds	r3, #4
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	429a      	cmp	r2, r3
 8011910:	d01c      	beq.n	801194c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	3304      	adds	r3, #4
 801191c:	681a      	ldr	r2, [r3, #0]
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011922:	f107 0314 	add.w	r3, r7, #20
 8011926:	4619      	mov	r1, r3
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f7ff ffbf 	bl	80118ac <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d002      	beq.n	801193a <netif_do_set_ipaddr+0x6a>
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	e000      	b.n	801193c <netif_do_set_ipaddr+0x6c>
 801193a:	2300      	movs	r3, #0
 801193c:	68fa      	ldr	r2, [r7, #12]
 801193e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011940:	2101      	movs	r1, #1
 8011942:	68f8      	ldr	r0, [r7, #12]
 8011944:	f000 f8d2 	bl	8011aec <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011948:	2301      	movs	r3, #1
 801194a:	e000      	b.n	801194e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801194c:	2300      	movs	r3, #0
}
 801194e:	4618      	mov	r0, r3
 8011950:	3718      	adds	r7, #24
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	0802069c 	.word	0x0802069c
 801195c:	080207dc 	.word	0x080207dc
 8011960:	08020714 	.word	0x08020714

08011964 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011964:	b480      	push	{r7}
 8011966:	b085      	sub	sp, #20
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	681a      	ldr	r2, [r3, #0]
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	3308      	adds	r3, #8
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	429a      	cmp	r2, r3
 801197c:	d00a      	beq.n	8011994 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d002      	beq.n	801198a <netif_do_set_netmask+0x26>
 8011984:	68bb      	ldr	r3, [r7, #8]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	e000      	b.n	801198c <netif_do_set_netmask+0x28>
 801198a:	2300      	movs	r3, #0
 801198c:	68fa      	ldr	r2, [r7, #12]
 801198e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011990:	2301      	movs	r3, #1
 8011992:	e000      	b.n	8011996 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011994:	2300      	movs	r3, #0
}
 8011996:	4618      	mov	r0, r3
 8011998:	3714      	adds	r7, #20
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr

080119a2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80119a2:	b480      	push	{r7}
 80119a4:	b085      	sub	sp, #20
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	60f8      	str	r0, [r7, #12]
 80119aa:	60b9      	str	r1, [r7, #8]
 80119ac:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	681a      	ldr	r2, [r3, #0]
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	330c      	adds	r3, #12
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d00a      	beq.n	80119d2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d002      	beq.n	80119c8 <netif_do_set_gw+0x26>
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	e000      	b.n	80119ca <netif_do_set_gw+0x28>
 80119c8:	2300      	movs	r3, #0
 80119ca:	68fa      	ldr	r2, [r7, #12]
 80119cc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80119ce:	2301      	movs	r3, #1
 80119d0:	e000      	b.n	80119d4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80119d2:	2300      	movs	r3, #0
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3714      	adds	r7, #20
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr

080119e0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b088      	sub	sp, #32
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	60f8      	str	r0, [r7, #12]
 80119e8:	60b9      	str	r1, [r7, #8]
 80119ea:	607a      	str	r2, [r7, #4]
 80119ec:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80119ee:	2300      	movs	r3, #0
 80119f0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80119f2:	2300      	movs	r3, #0
 80119f4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d101      	bne.n	8011a00 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80119fc:	4b1c      	ldr	r3, [pc, #112]	; (8011a70 <netif_set_addr+0x90>)
 80119fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d101      	bne.n	8011a0a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011a06:	4b1a      	ldr	r3, [pc, #104]	; (8011a70 <netif_set_addr+0x90>)
 8011a08:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d101      	bne.n	8011a14 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011a10:	4b17      	ldr	r3, [pc, #92]	; (8011a70 <netif_set_addr+0x90>)
 8011a12:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d003      	beq.n	8011a22 <netif_set_addr+0x42>
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d101      	bne.n	8011a26 <netif_set_addr+0x46>
 8011a22:	2301      	movs	r3, #1
 8011a24:	e000      	b.n	8011a28 <netif_set_addr+0x48>
 8011a26:	2300      	movs	r3, #0
 8011a28:	617b      	str	r3, [r7, #20]
  if (remove) {
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d006      	beq.n	8011a3e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011a30:	f107 0310 	add.w	r3, r7, #16
 8011a34:	461a      	mov	r2, r3
 8011a36:	68b9      	ldr	r1, [r7, #8]
 8011a38:	68f8      	ldr	r0, [r7, #12]
 8011a3a:	f7ff ff49 	bl	80118d0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011a3e:	69fa      	ldr	r2, [r7, #28]
 8011a40:	6879      	ldr	r1, [r7, #4]
 8011a42:	68f8      	ldr	r0, [r7, #12]
 8011a44:	f7ff ff8e 	bl	8011964 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8011a48:	69ba      	ldr	r2, [r7, #24]
 8011a4a:	6839      	ldr	r1, [r7, #0]
 8011a4c:	68f8      	ldr	r0, [r7, #12]
 8011a4e:	f7ff ffa8 	bl	80119a2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d106      	bne.n	8011a66 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011a58:	f107 0310 	add.w	r3, r7, #16
 8011a5c:	461a      	mov	r2, r3
 8011a5e:	68b9      	ldr	r1, [r7, #8]
 8011a60:	68f8      	ldr	r0, [r7, #12]
 8011a62:	f7ff ff35 	bl	80118d0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011a66:	bf00      	nop
 8011a68:	3720      	adds	r7, #32
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
 8011a6e:	bf00      	nop
 8011a70:	080227d8 	.word	0x080227d8

08011a74 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011a74:	b480      	push	{r7}
 8011a76:	b083      	sub	sp, #12
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011a7c:	4a04      	ldr	r2, [pc, #16]	; (8011a90 <netif_set_default+0x1c>)
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011a82:	bf00      	nop
 8011a84:	370c      	adds	r7, #12
 8011a86:	46bd      	mov	sp, r7
 8011a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8c:	4770      	bx	lr
 8011a8e:	bf00      	nop
 8011a90:	240071ec 	.word	0x240071ec

08011a94 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d107      	bne.n	8011ab2 <netif_set_up+0x1e>
 8011aa2:	4b0f      	ldr	r3, [pc, #60]	; (8011ae0 <netif_set_up+0x4c>)
 8011aa4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8011aa8:	490e      	ldr	r1, [pc, #56]	; (8011ae4 <netif_set_up+0x50>)
 8011aaa:	480f      	ldr	r0, [pc, #60]	; (8011ae8 <netif_set_up+0x54>)
 8011aac:	f00a f99e 	bl	801bdec <iprintf>
 8011ab0:	e013      	b.n	8011ada <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011ab8:	f003 0301 	and.w	r3, r3, #1
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d10c      	bne.n	8011ada <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011ac6:	f043 0301 	orr.w	r3, r3, #1
 8011aca:	b2da      	uxtb	r2, r3
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011ad2:	2103      	movs	r1, #3
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f000 f809 	bl	8011aec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011ada:	3708      	adds	r7, #8
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd80      	pop	{r7, pc}
 8011ae0:	0802069c 	.word	0x0802069c
 8011ae4:	0802084c 	.word	0x0802084c
 8011ae8:	08020714 	.word	0x08020714

08011aec <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
 8011af4:	460b      	mov	r3, r1
 8011af6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d106      	bne.n	8011b0c <netif_issue_reports+0x20>
 8011afe:	4b18      	ldr	r3, [pc, #96]	; (8011b60 <netif_issue_reports+0x74>)
 8011b00:	f240 326d 	movw	r2, #877	; 0x36d
 8011b04:	4917      	ldr	r1, [pc, #92]	; (8011b64 <netif_issue_reports+0x78>)
 8011b06:	4818      	ldr	r0, [pc, #96]	; (8011b68 <netif_issue_reports+0x7c>)
 8011b08:	f00a f970 	bl	801bdec <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b12:	f003 0304 	and.w	r3, r3, #4
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d01e      	beq.n	8011b58 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b20:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d017      	beq.n	8011b58 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011b28:	78fb      	ldrb	r3, [r7, #3]
 8011b2a:	f003 0301 	and.w	r3, r3, #1
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d013      	beq.n	8011b5a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	3304      	adds	r3, #4
 8011b36:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d00e      	beq.n	8011b5a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b42:	f003 0308 	and.w	r3, r3, #8
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d007      	beq.n	8011b5a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	3304      	adds	r3, #4
 8011b4e:	4619      	mov	r1, r3
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f7fd fcd3 	bl	800f4fc <etharp_request>
 8011b56:	e000      	b.n	8011b5a <netif_issue_reports+0x6e>
    return;
 8011b58:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011b5a:	3708      	adds	r7, #8
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd80      	pop	{r7, pc}
 8011b60:	0802069c 	.word	0x0802069c
 8011b64:	08020868 	.word	0x08020868
 8011b68:	08020714 	.word	0x08020714

08011b6c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d107      	bne.n	8011b8a <netif_set_down+0x1e>
 8011b7a:	4b12      	ldr	r3, [pc, #72]	; (8011bc4 <netif_set_down+0x58>)
 8011b7c:	f240 329b 	movw	r2, #923	; 0x39b
 8011b80:	4911      	ldr	r1, [pc, #68]	; (8011bc8 <netif_set_down+0x5c>)
 8011b82:	4812      	ldr	r0, [pc, #72]	; (8011bcc <netif_set_down+0x60>)
 8011b84:	f00a f932 	bl	801bdec <iprintf>
 8011b88:	e019      	b.n	8011bbe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b90:	f003 0301 	and.w	r3, r3, #1
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d012      	beq.n	8011bbe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b9e:	f023 0301 	bic.w	r3, r3, #1
 8011ba2:	b2da      	uxtb	r2, r3
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011bb0:	f003 0308 	and.w	r3, r3, #8
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d002      	beq.n	8011bbe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f7fd f85d 	bl	800ec78 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011bbe:	3708      	adds	r7, #8
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}
 8011bc4:	0802069c 	.word	0x0802069c
 8011bc8:	0802088c 	.word	0x0802088c
 8011bcc:	08020714 	.word	0x08020714

08011bd0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b082      	sub	sp, #8
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d107      	bne.n	8011bee <netif_set_link_up+0x1e>
 8011bde:	4b13      	ldr	r3, [pc, #76]	; (8011c2c <netif_set_link_up+0x5c>)
 8011be0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8011be4:	4912      	ldr	r1, [pc, #72]	; (8011c30 <netif_set_link_up+0x60>)
 8011be6:	4813      	ldr	r0, [pc, #76]	; (8011c34 <netif_set_link_up+0x64>)
 8011be8:	f00a f900 	bl	801bdec <iprintf>
 8011bec:	e01b      	b.n	8011c26 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011bf4:	f003 0304 	and.w	r3, r3, #4
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d114      	bne.n	8011c26 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c02:	f043 0304 	orr.w	r3, r3, #4
 8011c06:	b2da      	uxtb	r2, r3
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011c0e:	2103      	movs	r1, #3
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f7ff ff6b 	bl	8011aec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	69db      	ldr	r3, [r3, #28]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d003      	beq.n	8011c26 <netif_set_link_up+0x56>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	69db      	ldr	r3, [r3, #28]
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011c26:	3708      	adds	r7, #8
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	0802069c 	.word	0x0802069c
 8011c30:	080208ac 	.word	0x080208ac
 8011c34:	08020714 	.word	0x08020714

08011c38 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b082      	sub	sp, #8
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d107      	bne.n	8011c56 <netif_set_link_down+0x1e>
 8011c46:	4b11      	ldr	r3, [pc, #68]	; (8011c8c <netif_set_link_down+0x54>)
 8011c48:	f240 4206 	movw	r2, #1030	; 0x406
 8011c4c:	4910      	ldr	r1, [pc, #64]	; (8011c90 <netif_set_link_down+0x58>)
 8011c4e:	4811      	ldr	r0, [pc, #68]	; (8011c94 <netif_set_link_down+0x5c>)
 8011c50:	f00a f8cc 	bl	801bdec <iprintf>
 8011c54:	e017      	b.n	8011c86 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c5c:	f003 0304 	and.w	r3, r3, #4
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d010      	beq.n	8011c86 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c6a:	f023 0304 	bic.w	r3, r3, #4
 8011c6e:	b2da      	uxtb	r2, r3
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	69db      	ldr	r3, [r3, #28]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d003      	beq.n	8011c86 <netif_set_link_down+0x4e>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	69db      	ldr	r3, [r3, #28]
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011c86:	3708      	adds	r7, #8
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	0802069c 	.word	0x0802069c
 8011c90:	080208d0 	.word	0x080208d0
 8011c94:	08020714 	.word	0x08020714

08011c98 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d002      	beq.n	8011cae <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	683a      	ldr	r2, [r7, #0]
 8011cac:	61da      	str	r2, [r3, #28]
  }
}
 8011cae:	bf00      	nop
 8011cb0:	370c      	adds	r7, #12
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb8:	4770      	bx	lr

08011cba <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011cba:	b480      	push	{r7}
 8011cbc:	b085      	sub	sp, #20
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	60f8      	str	r0, [r7, #12]
 8011cc2:	60b9      	str	r1, [r7, #8]
 8011cc4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011cc6:	f06f 030b 	mvn.w	r3, #11
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	3714      	adds	r7, #20
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd4:	4770      	bx	lr
	...

08011cd8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b085      	sub	sp, #20
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	4603      	mov	r3, r0
 8011ce0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011ce2:	79fb      	ldrb	r3, [r7, #7]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d013      	beq.n	8011d10 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011ce8:	4b0d      	ldr	r3, [pc, #52]	; (8011d20 <netif_get_by_index+0x48>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	60fb      	str	r3, [r7, #12]
 8011cee:	e00c      	b.n	8011d0a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011cf6:	3301      	adds	r3, #1
 8011cf8:	b2db      	uxtb	r3, r3
 8011cfa:	79fa      	ldrb	r2, [r7, #7]
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d101      	bne.n	8011d04 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	e006      	b.n	8011d12 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	60fb      	str	r3, [r7, #12]
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d1ef      	bne.n	8011cf0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011d10:	2300      	movs	r3, #0
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3714      	adds	r7, #20
 8011d16:	46bd      	mov	sp, r7
 8011d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1c:	4770      	bx	lr
 8011d1e:	bf00      	nop
 8011d20:	240071e8 	.word	0x240071e8

08011d24 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011d24:	b480      	push	{r7}
 8011d26:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8011d28:	4b03      	ldr	r3, [pc, #12]	; (8011d38 <pbuf_pool_is_empty+0x14>)
 8011d2a:	2201      	movs	r2, #1
 8011d2c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011d2e:	bf00      	nop
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr
 8011d38:	240071f0 	.word	0x240071f0

08011d3c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b085      	sub	sp, #20
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	60f8      	str	r0, [r7, #12]
 8011d44:	60b9      	str	r1, [r7, #8]
 8011d46:	4611      	mov	r1, r2
 8011d48:	461a      	mov	r2, r3
 8011d4a:	460b      	mov	r3, r1
 8011d4c:	80fb      	strh	r3, [r7, #6]
 8011d4e:	4613      	mov	r3, r2
 8011d50:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	2200      	movs	r2, #0
 8011d56:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	68ba      	ldr	r2, [r7, #8]
 8011d5c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	88fa      	ldrh	r2, [r7, #6]
 8011d62:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	88ba      	ldrh	r2, [r7, #4]
 8011d68:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011d6a:	8b3b      	ldrh	r3, [r7, #24]
 8011d6c:	b2da      	uxtb	r2, r3
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	7f3a      	ldrb	r2, [r7, #28]
 8011d76:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	2201      	movs	r2, #1
 8011d7c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	2200      	movs	r2, #0
 8011d82:	73da      	strb	r2, [r3, #15]
}
 8011d84:	bf00      	nop
 8011d86:	3714      	adds	r7, #20
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8e:	4770      	bx	lr

08011d90 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b08c      	sub	sp, #48	; 0x30
 8011d94:	af02      	add	r7, sp, #8
 8011d96:	4603      	mov	r3, r0
 8011d98:	71fb      	strb	r3, [r7, #7]
 8011d9a:	460b      	mov	r3, r1
 8011d9c:	80bb      	strh	r3, [r7, #4]
 8011d9e:	4613      	mov	r3, r2
 8011da0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011da2:	79fb      	ldrb	r3, [r7, #7]
 8011da4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011da6:	887b      	ldrh	r3, [r7, #2]
 8011da8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011dac:	d07f      	beq.n	8011eae <pbuf_alloc+0x11e>
 8011dae:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011db2:	f300 80c8 	bgt.w	8011f46 <pbuf_alloc+0x1b6>
 8011db6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011dba:	d010      	beq.n	8011dde <pbuf_alloc+0x4e>
 8011dbc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011dc0:	f300 80c1 	bgt.w	8011f46 <pbuf_alloc+0x1b6>
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d002      	beq.n	8011dce <pbuf_alloc+0x3e>
 8011dc8:	2b41      	cmp	r3, #65	; 0x41
 8011dca:	f040 80bc 	bne.w	8011f46 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011dce:	887a      	ldrh	r2, [r7, #2]
 8011dd0:	88bb      	ldrh	r3, [r7, #4]
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	2000      	movs	r0, #0
 8011dd6:	f000 f8d1 	bl	8011f7c <pbuf_alloc_reference>
 8011dda:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8011ddc:	e0bd      	b.n	8011f5a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011dde:	2300      	movs	r3, #0
 8011de0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8011de2:	2300      	movs	r3, #0
 8011de4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011de6:	88bb      	ldrh	r3, [r7, #4]
 8011de8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011dea:	2008      	movs	r0, #8
 8011dec:	f7ff fc12 	bl	8011614 <memp_malloc>
 8011df0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d109      	bne.n	8011e0c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011df8:	f7ff ff94 	bl	8011d24 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d002      	beq.n	8011e08 <pbuf_alloc+0x78>
            pbuf_free(p);
 8011e02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e04:	f000 faa8 	bl	8012358 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011e08:	2300      	movs	r3, #0
 8011e0a:	e0a7      	b.n	8011f5c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011e0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e0e:	3303      	adds	r3, #3
 8011e10:	b29b      	uxth	r3, r3
 8011e12:	f023 0303 	bic.w	r3, r3, #3
 8011e16:	b29b      	uxth	r3, r3
 8011e18:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8011e1c:	b29b      	uxth	r3, r3
 8011e1e:	8b7a      	ldrh	r2, [r7, #26]
 8011e20:	4293      	cmp	r3, r2
 8011e22:	bf28      	it	cs
 8011e24:	4613      	movcs	r3, r2
 8011e26:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011e28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e2a:	3310      	adds	r3, #16
 8011e2c:	693a      	ldr	r2, [r7, #16]
 8011e2e:	4413      	add	r3, r2
 8011e30:	3303      	adds	r3, #3
 8011e32:	f023 0303 	bic.w	r3, r3, #3
 8011e36:	4618      	mov	r0, r3
 8011e38:	89f9      	ldrh	r1, [r7, #14]
 8011e3a:	8b7a      	ldrh	r2, [r7, #26]
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	9301      	str	r3, [sp, #4]
 8011e40:	887b      	ldrh	r3, [r7, #2]
 8011e42:	9300      	str	r3, [sp, #0]
 8011e44:	460b      	mov	r3, r1
 8011e46:	4601      	mov	r1, r0
 8011e48:	6938      	ldr	r0, [r7, #16]
 8011e4a:	f7ff ff77 	bl	8011d3c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	f003 0303 	and.w	r3, r3, #3
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d006      	beq.n	8011e68 <pbuf_alloc+0xd8>
 8011e5a:	4b42      	ldr	r3, [pc, #264]	; (8011f64 <pbuf_alloc+0x1d4>)
 8011e5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011e60:	4941      	ldr	r1, [pc, #260]	; (8011f68 <pbuf_alloc+0x1d8>)
 8011e62:	4842      	ldr	r0, [pc, #264]	; (8011f6c <pbuf_alloc+0x1dc>)
 8011e64:	f009 ffc2 	bl	801bdec <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011e68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e6a:	3303      	adds	r3, #3
 8011e6c:	f023 0303 	bic.w	r3, r3, #3
 8011e70:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8011e74:	d106      	bne.n	8011e84 <pbuf_alloc+0xf4>
 8011e76:	4b3b      	ldr	r3, [pc, #236]	; (8011f64 <pbuf_alloc+0x1d4>)
 8011e78:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011e7c:	493c      	ldr	r1, [pc, #240]	; (8011f70 <pbuf_alloc+0x1e0>)
 8011e7e:	483b      	ldr	r0, [pc, #236]	; (8011f6c <pbuf_alloc+0x1dc>)
 8011e80:	f009 ffb4 	bl	801bdec <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d102      	bne.n	8011e90 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8011e8e:	e002      	b.n	8011e96 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011e90:	69fb      	ldr	r3, [r7, #28]
 8011e92:	693a      	ldr	r2, [r7, #16]
 8011e94:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011e9a:	8b7a      	ldrh	r2, [r7, #26]
 8011e9c:	89fb      	ldrh	r3, [r7, #14]
 8011e9e:	1ad3      	subs	r3, r2, r3
 8011ea0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8011ea6:	8b7b      	ldrh	r3, [r7, #26]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d19e      	bne.n	8011dea <pbuf_alloc+0x5a>
      break;
 8011eac:	e055      	b.n	8011f5a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011eae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011eb0:	3303      	adds	r3, #3
 8011eb2:	b29b      	uxth	r3, r3
 8011eb4:	f023 0303 	bic.w	r3, r3, #3
 8011eb8:	b29a      	uxth	r2, r3
 8011eba:	88bb      	ldrh	r3, [r7, #4]
 8011ebc:	3303      	adds	r3, #3
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	f023 0303 	bic.w	r3, r3, #3
 8011ec4:	b29b      	uxth	r3, r3
 8011ec6:	4413      	add	r3, r2
 8011ec8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011eca:	8b3b      	ldrh	r3, [r7, #24]
 8011ecc:	3310      	adds	r3, #16
 8011ece:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011ed0:	8b3a      	ldrh	r2, [r7, #24]
 8011ed2:	88bb      	ldrh	r3, [r7, #4]
 8011ed4:	3303      	adds	r3, #3
 8011ed6:	f023 0303 	bic.w	r3, r3, #3
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d306      	bcc.n	8011eec <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011ede:	8afa      	ldrh	r2, [r7, #22]
 8011ee0:	88bb      	ldrh	r3, [r7, #4]
 8011ee2:	3303      	adds	r3, #3
 8011ee4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d201      	bcs.n	8011ef0 <pbuf_alloc+0x160>
        return NULL;
 8011eec:	2300      	movs	r3, #0
 8011eee:	e035      	b.n	8011f5c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011ef0:	8afb      	ldrh	r3, [r7, #22]
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7ff fa20 	bl	8011338 <mem_malloc>
 8011ef8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8011efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d101      	bne.n	8011f04 <pbuf_alloc+0x174>
        return NULL;
 8011f00:	2300      	movs	r3, #0
 8011f02:	e02b      	b.n	8011f5c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011f04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f06:	3310      	adds	r3, #16
 8011f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f0a:	4413      	add	r3, r2
 8011f0c:	3303      	adds	r3, #3
 8011f0e:	f023 0303 	bic.w	r3, r3, #3
 8011f12:	4618      	mov	r0, r3
 8011f14:	88b9      	ldrh	r1, [r7, #4]
 8011f16:	88ba      	ldrh	r2, [r7, #4]
 8011f18:	2300      	movs	r3, #0
 8011f1a:	9301      	str	r3, [sp, #4]
 8011f1c:	887b      	ldrh	r3, [r7, #2]
 8011f1e:	9300      	str	r3, [sp, #0]
 8011f20:	460b      	mov	r3, r1
 8011f22:	4601      	mov	r1, r0
 8011f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f26:	f7ff ff09 	bl	8011d3c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	f003 0303 	and.w	r3, r3, #3
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d010      	beq.n	8011f58 <pbuf_alloc+0x1c8>
 8011f36:	4b0b      	ldr	r3, [pc, #44]	; (8011f64 <pbuf_alloc+0x1d4>)
 8011f38:	f44f 7291 	mov.w	r2, #290	; 0x122
 8011f3c:	490d      	ldr	r1, [pc, #52]	; (8011f74 <pbuf_alloc+0x1e4>)
 8011f3e:	480b      	ldr	r0, [pc, #44]	; (8011f6c <pbuf_alloc+0x1dc>)
 8011f40:	f009 ff54 	bl	801bdec <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011f44:	e008      	b.n	8011f58 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011f46:	4b07      	ldr	r3, [pc, #28]	; (8011f64 <pbuf_alloc+0x1d4>)
 8011f48:	f240 1227 	movw	r2, #295	; 0x127
 8011f4c:	490a      	ldr	r1, [pc, #40]	; (8011f78 <pbuf_alloc+0x1e8>)
 8011f4e:	4807      	ldr	r0, [pc, #28]	; (8011f6c <pbuf_alloc+0x1dc>)
 8011f50:	f009 ff4c 	bl	801bdec <iprintf>
      return NULL;
 8011f54:	2300      	movs	r3, #0
 8011f56:	e001      	b.n	8011f5c <pbuf_alloc+0x1cc>
      break;
 8011f58:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	3728      	adds	r7, #40	; 0x28
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}
 8011f64:	080208f4 	.word	0x080208f4
 8011f68:	08020950 	.word	0x08020950
 8011f6c:	08020980 	.word	0x08020980
 8011f70:	080209a8 	.word	0x080209a8
 8011f74:	080209dc 	.word	0x080209dc
 8011f78:	08020a08 	.word	0x08020a08

08011f7c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b086      	sub	sp, #24
 8011f80:	af02      	add	r7, sp, #8
 8011f82:	6078      	str	r0, [r7, #4]
 8011f84:	460b      	mov	r3, r1
 8011f86:	807b      	strh	r3, [r7, #2]
 8011f88:	4613      	mov	r3, r2
 8011f8a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011f8c:	883b      	ldrh	r3, [r7, #0]
 8011f8e:	2b41      	cmp	r3, #65	; 0x41
 8011f90:	d009      	beq.n	8011fa6 <pbuf_alloc_reference+0x2a>
 8011f92:	883b      	ldrh	r3, [r7, #0]
 8011f94:	2b01      	cmp	r3, #1
 8011f96:	d006      	beq.n	8011fa6 <pbuf_alloc_reference+0x2a>
 8011f98:	4b0f      	ldr	r3, [pc, #60]	; (8011fd8 <pbuf_alloc_reference+0x5c>)
 8011f9a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8011f9e:	490f      	ldr	r1, [pc, #60]	; (8011fdc <pbuf_alloc_reference+0x60>)
 8011fa0:	480f      	ldr	r0, [pc, #60]	; (8011fe0 <pbuf_alloc_reference+0x64>)
 8011fa2:	f009 ff23 	bl	801bdec <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011fa6:	2007      	movs	r0, #7
 8011fa8:	f7ff fb34 	bl	8011614 <memp_malloc>
 8011fac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d101      	bne.n	8011fb8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	e00b      	b.n	8011fd0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011fb8:	8879      	ldrh	r1, [r7, #2]
 8011fba:	887a      	ldrh	r2, [r7, #2]
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	9301      	str	r3, [sp, #4]
 8011fc0:	883b      	ldrh	r3, [r7, #0]
 8011fc2:	9300      	str	r3, [sp, #0]
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	6879      	ldr	r1, [r7, #4]
 8011fc8:	68f8      	ldr	r0, [r7, #12]
 8011fca:	f7ff feb7 	bl	8011d3c <pbuf_init_alloced_pbuf>
  return p;
 8011fce:	68fb      	ldr	r3, [r7, #12]
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3710      	adds	r7, #16
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}
 8011fd8:	080208f4 	.word	0x080208f4
 8011fdc:	08020a24 	.word	0x08020a24
 8011fe0:	08020980 	.word	0x08020980

08011fe4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b088      	sub	sp, #32
 8011fe8:	af02      	add	r7, sp, #8
 8011fea:	607b      	str	r3, [r7, #4]
 8011fec:	4603      	mov	r3, r0
 8011fee:	73fb      	strb	r3, [r7, #15]
 8011ff0:	460b      	mov	r3, r1
 8011ff2:	81bb      	strh	r3, [r7, #12]
 8011ff4:	4613      	mov	r3, r2
 8011ff6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011ff8:	7bfb      	ldrb	r3, [r7, #15]
 8011ffa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011ffc:	8a7b      	ldrh	r3, [r7, #18]
 8011ffe:	3303      	adds	r3, #3
 8012000:	f023 0203 	bic.w	r2, r3, #3
 8012004:	89bb      	ldrh	r3, [r7, #12]
 8012006:	441a      	add	r2, r3
 8012008:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801200a:	429a      	cmp	r2, r3
 801200c:	d901      	bls.n	8012012 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801200e:	2300      	movs	r3, #0
 8012010:	e018      	b.n	8012044 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012012:	6a3b      	ldr	r3, [r7, #32]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d007      	beq.n	8012028 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012018:	8a7b      	ldrh	r3, [r7, #18]
 801201a:	3303      	adds	r3, #3
 801201c:	f023 0303 	bic.w	r3, r3, #3
 8012020:	6a3a      	ldr	r2, [r7, #32]
 8012022:	4413      	add	r3, r2
 8012024:	617b      	str	r3, [r7, #20]
 8012026:	e001      	b.n	801202c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012028:	2300      	movs	r3, #0
 801202a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	89b9      	ldrh	r1, [r7, #12]
 8012030:	89ba      	ldrh	r2, [r7, #12]
 8012032:	2302      	movs	r3, #2
 8012034:	9301      	str	r3, [sp, #4]
 8012036:	897b      	ldrh	r3, [r7, #10]
 8012038:	9300      	str	r3, [sp, #0]
 801203a:	460b      	mov	r3, r1
 801203c:	6979      	ldr	r1, [r7, #20]
 801203e:	f7ff fe7d 	bl	8011d3c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012042:	687b      	ldr	r3, [r7, #4]
}
 8012044:	4618      	mov	r0, r3
 8012046:	3718      	adds	r7, #24
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}

0801204c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b084      	sub	sp, #16
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	460b      	mov	r3, r1
 8012056:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d106      	bne.n	801206c <pbuf_realloc+0x20>
 801205e:	4b3a      	ldr	r3, [pc, #232]	; (8012148 <pbuf_realloc+0xfc>)
 8012060:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8012064:	4939      	ldr	r1, [pc, #228]	; (801214c <pbuf_realloc+0x100>)
 8012066:	483a      	ldr	r0, [pc, #232]	; (8012150 <pbuf_realloc+0x104>)
 8012068:	f009 fec0 	bl	801bdec <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	891b      	ldrh	r3, [r3, #8]
 8012070:	887a      	ldrh	r2, [r7, #2]
 8012072:	429a      	cmp	r2, r3
 8012074:	d263      	bcs.n	801213e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	891a      	ldrh	r2, [r3, #8]
 801207a:	887b      	ldrh	r3, [r7, #2]
 801207c:	1ad3      	subs	r3, r2, r3
 801207e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012080:	887b      	ldrh	r3, [r7, #2]
 8012082:	817b      	strh	r3, [r7, #10]
  q = p;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012088:	e018      	b.n	80120bc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	895b      	ldrh	r3, [r3, #10]
 801208e:	897a      	ldrh	r2, [r7, #10]
 8012090:	1ad3      	subs	r3, r2, r3
 8012092:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	891a      	ldrh	r2, [r3, #8]
 8012098:	893b      	ldrh	r3, [r7, #8]
 801209a:	1ad3      	subs	r3, r2, r3
 801209c:	b29a      	uxth	r2, r3
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d106      	bne.n	80120bc <pbuf_realloc+0x70>
 80120ae:	4b26      	ldr	r3, [pc, #152]	; (8012148 <pbuf_realloc+0xfc>)
 80120b0:	f240 12af 	movw	r2, #431	; 0x1af
 80120b4:	4927      	ldr	r1, [pc, #156]	; (8012154 <pbuf_realloc+0x108>)
 80120b6:	4826      	ldr	r0, [pc, #152]	; (8012150 <pbuf_realloc+0x104>)
 80120b8:	f009 fe98 	bl	801bdec <iprintf>
  while (rem_len > q->len) {
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	895b      	ldrh	r3, [r3, #10]
 80120c0:	897a      	ldrh	r2, [r7, #10]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d8e1      	bhi.n	801208a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	7b1b      	ldrb	r3, [r3, #12]
 80120ca:	f003 030f 	and.w	r3, r3, #15
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d121      	bne.n	8012116 <pbuf_realloc+0xca>
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	895b      	ldrh	r3, [r3, #10]
 80120d6:	897a      	ldrh	r2, [r7, #10]
 80120d8:	429a      	cmp	r2, r3
 80120da:	d01c      	beq.n	8012116 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	7b5b      	ldrb	r3, [r3, #13]
 80120e0:	f003 0302 	and.w	r3, r3, #2
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d116      	bne.n	8012116 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	685a      	ldr	r2, [r3, #4]
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	1ad3      	subs	r3, r2, r3
 80120f0:	b29a      	uxth	r2, r3
 80120f2:	897b      	ldrh	r3, [r7, #10]
 80120f4:	4413      	add	r3, r2
 80120f6:	b29b      	uxth	r3, r3
 80120f8:	4619      	mov	r1, r3
 80120fa:	68f8      	ldr	r0, [r7, #12]
 80120fc:	f7ff f820 	bl	8011140 <mem_trim>
 8012100:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d106      	bne.n	8012116 <pbuf_realloc+0xca>
 8012108:	4b0f      	ldr	r3, [pc, #60]	; (8012148 <pbuf_realloc+0xfc>)
 801210a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801210e:	4912      	ldr	r1, [pc, #72]	; (8012158 <pbuf_realloc+0x10c>)
 8012110:	480f      	ldr	r0, [pc, #60]	; (8012150 <pbuf_realloc+0x104>)
 8012112:	f009 fe6b 	bl	801bdec <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	897a      	ldrh	r2, [r7, #10]
 801211a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	895a      	ldrh	r2, [r3, #10]
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d004      	beq.n	8012136 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	4618      	mov	r0, r3
 8012132:	f000 f911 	bl	8012358 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	2200      	movs	r2, #0
 801213a:	601a      	str	r2, [r3, #0]
 801213c:	e000      	b.n	8012140 <pbuf_realloc+0xf4>
    return;
 801213e:	bf00      	nop

}
 8012140:	3710      	adds	r7, #16
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
 8012146:	bf00      	nop
 8012148:	080208f4 	.word	0x080208f4
 801214c:	08020a38 	.word	0x08020a38
 8012150:	08020980 	.word	0x08020980
 8012154:	08020a50 	.word	0x08020a50
 8012158:	08020a68 	.word	0x08020a68

0801215c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b086      	sub	sp, #24
 8012160:	af00      	add	r7, sp, #0
 8012162:	60f8      	str	r0, [r7, #12]
 8012164:	60b9      	str	r1, [r7, #8]
 8012166:	4613      	mov	r3, r2
 8012168:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d106      	bne.n	801217e <pbuf_add_header_impl+0x22>
 8012170:	4b2b      	ldr	r3, [pc, #172]	; (8012220 <pbuf_add_header_impl+0xc4>)
 8012172:	f240 12df 	movw	r2, #479	; 0x1df
 8012176:	492b      	ldr	r1, [pc, #172]	; (8012224 <pbuf_add_header_impl+0xc8>)
 8012178:	482b      	ldr	r0, [pc, #172]	; (8012228 <pbuf_add_header_impl+0xcc>)
 801217a:	f009 fe37 	bl	801bdec <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d003      	beq.n	801218c <pbuf_add_header_impl+0x30>
 8012184:	68bb      	ldr	r3, [r7, #8]
 8012186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801218a:	d301      	bcc.n	8012190 <pbuf_add_header_impl+0x34>
    return 1;
 801218c:	2301      	movs	r3, #1
 801218e:	e043      	b.n	8012218 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d101      	bne.n	801219a <pbuf_add_header_impl+0x3e>
    return 0;
 8012196:	2300      	movs	r3, #0
 8012198:	e03e      	b.n	8012218 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	891a      	ldrh	r2, [r3, #8]
 80121a2:	8a7b      	ldrh	r3, [r7, #18]
 80121a4:	4413      	add	r3, r2
 80121a6:	b29b      	uxth	r3, r3
 80121a8:	8a7a      	ldrh	r2, [r7, #18]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d901      	bls.n	80121b2 <pbuf_add_header_impl+0x56>
    return 1;
 80121ae:	2301      	movs	r3, #1
 80121b0:	e032      	b.n	8012218 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	7b1b      	ldrb	r3, [r3, #12]
 80121b6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80121b8:	8a3b      	ldrh	r3, [r7, #16]
 80121ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d00c      	beq.n	80121dc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	685a      	ldr	r2, [r3, #4]
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	425b      	negs	r3, r3
 80121ca:	4413      	add	r3, r2
 80121cc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	3310      	adds	r3, #16
 80121d2:	697a      	ldr	r2, [r7, #20]
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d20d      	bcs.n	80121f4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80121d8:	2301      	movs	r3, #1
 80121da:	e01d      	b.n	8012218 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80121dc:	79fb      	ldrb	r3, [r7, #7]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d006      	beq.n	80121f0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	685a      	ldr	r2, [r3, #4]
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	425b      	negs	r3, r3
 80121ea:	4413      	add	r3, r2
 80121ec:	617b      	str	r3, [r7, #20]
 80121ee:	e001      	b.n	80121f4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80121f0:	2301      	movs	r3, #1
 80121f2:	e011      	b.n	8012218 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	697a      	ldr	r2, [r7, #20]
 80121f8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	895a      	ldrh	r2, [r3, #10]
 80121fe:	8a7b      	ldrh	r3, [r7, #18]
 8012200:	4413      	add	r3, r2
 8012202:	b29a      	uxth	r2, r3
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	891a      	ldrh	r2, [r3, #8]
 801220c:	8a7b      	ldrh	r3, [r7, #18]
 801220e:	4413      	add	r3, r2
 8012210:	b29a      	uxth	r2, r3
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	811a      	strh	r2, [r3, #8]


  return 0;
 8012216:	2300      	movs	r3, #0
}
 8012218:	4618      	mov	r0, r3
 801221a:	3718      	adds	r7, #24
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	080208f4 	.word	0x080208f4
 8012224:	08020a84 	.word	0x08020a84
 8012228:	08020980 	.word	0x08020980

0801222c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b082      	sub	sp, #8
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012236:	2200      	movs	r2, #0
 8012238:	6839      	ldr	r1, [r7, #0]
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f7ff ff8e 	bl	801215c <pbuf_add_header_impl>
 8012240:	4603      	mov	r3, r0
}
 8012242:	4618      	mov	r0, r3
 8012244:	3708      	adds	r7, #8
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}
	...

0801224c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b084      	sub	sp, #16
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d106      	bne.n	801226a <pbuf_remove_header+0x1e>
 801225c:	4b20      	ldr	r3, [pc, #128]	; (80122e0 <pbuf_remove_header+0x94>)
 801225e:	f240 224b 	movw	r2, #587	; 0x24b
 8012262:	4920      	ldr	r1, [pc, #128]	; (80122e4 <pbuf_remove_header+0x98>)
 8012264:	4820      	ldr	r0, [pc, #128]	; (80122e8 <pbuf_remove_header+0x9c>)
 8012266:	f009 fdc1 	bl	801bdec <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d003      	beq.n	8012278 <pbuf_remove_header+0x2c>
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012276:	d301      	bcc.n	801227c <pbuf_remove_header+0x30>
    return 1;
 8012278:	2301      	movs	r3, #1
 801227a:	e02c      	b.n	80122d6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d101      	bne.n	8012286 <pbuf_remove_header+0x3a>
    return 0;
 8012282:	2300      	movs	r3, #0
 8012284:	e027      	b.n	80122d6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	895b      	ldrh	r3, [r3, #10]
 801228e:	89fa      	ldrh	r2, [r7, #14]
 8012290:	429a      	cmp	r2, r3
 8012292:	d908      	bls.n	80122a6 <pbuf_remove_header+0x5a>
 8012294:	4b12      	ldr	r3, [pc, #72]	; (80122e0 <pbuf_remove_header+0x94>)
 8012296:	f240 2255 	movw	r2, #597	; 0x255
 801229a:	4914      	ldr	r1, [pc, #80]	; (80122ec <pbuf_remove_header+0xa0>)
 801229c:	4812      	ldr	r0, [pc, #72]	; (80122e8 <pbuf_remove_header+0x9c>)
 801229e:	f009 fda5 	bl	801bdec <iprintf>
 80122a2:	2301      	movs	r3, #1
 80122a4:	e017      	b.n	80122d6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	685b      	ldr	r3, [r3, #4]
 80122aa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	685a      	ldr	r2, [r3, #4]
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	441a      	add	r2, r3
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	895a      	ldrh	r2, [r3, #10]
 80122bc:	89fb      	ldrh	r3, [r7, #14]
 80122be:	1ad3      	subs	r3, r2, r3
 80122c0:	b29a      	uxth	r2, r3
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	891a      	ldrh	r2, [r3, #8]
 80122ca:	89fb      	ldrh	r3, [r7, #14]
 80122cc:	1ad3      	subs	r3, r2, r3
 80122ce:	b29a      	uxth	r2, r3
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80122d4:	2300      	movs	r3, #0
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3710      	adds	r7, #16
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}
 80122de:	bf00      	nop
 80122e0:	080208f4 	.word	0x080208f4
 80122e4:	08020a84 	.word	0x08020a84
 80122e8:	08020980 	.word	0x08020980
 80122ec:	08020a90 	.word	0x08020a90

080122f0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
 80122f8:	460b      	mov	r3, r1
 80122fa:	807b      	strh	r3, [r7, #2]
 80122fc:	4613      	mov	r3, r2
 80122fe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012300:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012304:	2b00      	cmp	r3, #0
 8012306:	da08      	bge.n	801231a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012308:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801230c:	425b      	negs	r3, r3
 801230e:	4619      	mov	r1, r3
 8012310:	6878      	ldr	r0, [r7, #4]
 8012312:	f7ff ff9b 	bl	801224c <pbuf_remove_header>
 8012316:	4603      	mov	r3, r0
 8012318:	e007      	b.n	801232a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801231a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801231e:	787a      	ldrb	r2, [r7, #1]
 8012320:	4619      	mov	r1, r3
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f7ff ff1a 	bl	801215c <pbuf_add_header_impl>
 8012328:	4603      	mov	r3, r0
  }
}
 801232a:	4618      	mov	r0, r3
 801232c:	3708      	adds	r7, #8
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}

08012332 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012332:	b580      	push	{r7, lr}
 8012334:	b082      	sub	sp, #8
 8012336:	af00      	add	r7, sp, #0
 8012338:	6078      	str	r0, [r7, #4]
 801233a:	460b      	mov	r3, r1
 801233c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801233e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012342:	2201      	movs	r2, #1
 8012344:	4619      	mov	r1, r3
 8012346:	6878      	ldr	r0, [r7, #4]
 8012348:	f7ff ffd2 	bl	80122f0 <pbuf_header_impl>
 801234c:	4603      	mov	r3, r0
}
 801234e:	4618      	mov	r0, r3
 8012350:	3708      	adds	r7, #8
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
	...

08012358 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b086      	sub	sp, #24
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d10b      	bne.n	801237e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d106      	bne.n	801237a <pbuf_free+0x22>
 801236c:	4b38      	ldr	r3, [pc, #224]	; (8012450 <pbuf_free+0xf8>)
 801236e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012372:	4938      	ldr	r1, [pc, #224]	; (8012454 <pbuf_free+0xfc>)
 8012374:	4838      	ldr	r0, [pc, #224]	; (8012458 <pbuf_free+0x100>)
 8012376:	f009 fd39 	bl	801bdec <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801237a:	2300      	movs	r3, #0
 801237c:	e063      	b.n	8012446 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801237e:	2300      	movs	r3, #0
 8012380:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012382:	e05c      	b.n	801243e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	7b9b      	ldrb	r3, [r3, #14]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d106      	bne.n	801239a <pbuf_free+0x42>
 801238c:	4b30      	ldr	r3, [pc, #192]	; (8012450 <pbuf_free+0xf8>)
 801238e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012392:	4932      	ldr	r1, [pc, #200]	; (801245c <pbuf_free+0x104>)
 8012394:	4830      	ldr	r0, [pc, #192]	; (8012458 <pbuf_free+0x100>)
 8012396:	f009 fd29 	bl	801bdec <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	7b9b      	ldrb	r3, [r3, #14]
 801239e:	3b01      	subs	r3, #1
 80123a0:	b2da      	uxtb	r2, r3
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	739a      	strb	r2, [r3, #14]
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	7b9b      	ldrb	r3, [r3, #14]
 80123aa:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80123ac:	7dbb      	ldrb	r3, [r7, #22]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d143      	bne.n	801243a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	7b1b      	ldrb	r3, [r3, #12]
 80123bc:	f003 030f 	and.w	r3, r3, #15
 80123c0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	7b5b      	ldrb	r3, [r3, #13]
 80123c6:	f003 0302 	and.w	r3, r3, #2
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d011      	beq.n	80123f2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	691b      	ldr	r3, [r3, #16]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d106      	bne.n	80123e8 <pbuf_free+0x90>
 80123da:	4b1d      	ldr	r3, [pc, #116]	; (8012450 <pbuf_free+0xf8>)
 80123dc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80123e0:	491f      	ldr	r1, [pc, #124]	; (8012460 <pbuf_free+0x108>)
 80123e2:	481d      	ldr	r0, [pc, #116]	; (8012458 <pbuf_free+0x100>)
 80123e4:	f009 fd02 	bl	801bdec <iprintf>
        pc->custom_free_function(p);
 80123e8:	68bb      	ldr	r3, [r7, #8]
 80123ea:	691b      	ldr	r3, [r3, #16]
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	4798      	blx	r3
 80123f0:	e01d      	b.n	801242e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80123f2:	7bfb      	ldrb	r3, [r7, #15]
 80123f4:	2b02      	cmp	r3, #2
 80123f6:	d104      	bne.n	8012402 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80123f8:	6879      	ldr	r1, [r7, #4]
 80123fa:	2008      	movs	r0, #8
 80123fc:	f7ff f956 	bl	80116ac <memp_free>
 8012400:	e015      	b.n	801242e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012402:	7bfb      	ldrb	r3, [r7, #15]
 8012404:	2b01      	cmp	r3, #1
 8012406:	d104      	bne.n	8012412 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8012408:	6879      	ldr	r1, [r7, #4]
 801240a:	2007      	movs	r0, #7
 801240c:	f7ff f94e 	bl	80116ac <memp_free>
 8012410:	e00d      	b.n	801242e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012412:	7bfb      	ldrb	r3, [r7, #15]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d103      	bne.n	8012420 <pbuf_free+0xc8>
          mem_free(p);
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f7fe fe27 	bl	801106c <mem_free>
 801241e:	e006      	b.n	801242e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012420:	4b0b      	ldr	r3, [pc, #44]	; (8012450 <pbuf_free+0xf8>)
 8012422:	f240 320f 	movw	r2, #783	; 0x30f
 8012426:	490f      	ldr	r1, [pc, #60]	; (8012464 <pbuf_free+0x10c>)
 8012428:	480b      	ldr	r0, [pc, #44]	; (8012458 <pbuf_free+0x100>)
 801242a:	f009 fcdf 	bl	801bdec <iprintf>
        }
      }
      count++;
 801242e:	7dfb      	ldrb	r3, [r7, #23]
 8012430:	3301      	adds	r3, #1
 8012432:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	607b      	str	r3, [r7, #4]
 8012438:	e001      	b.n	801243e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801243a:	2300      	movs	r3, #0
 801243c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d19f      	bne.n	8012384 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012444:	7dfb      	ldrb	r3, [r7, #23]
}
 8012446:	4618      	mov	r0, r3
 8012448:	3718      	adds	r7, #24
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}
 801244e:	bf00      	nop
 8012450:	080208f4 	.word	0x080208f4
 8012454:	08020a84 	.word	0x08020a84
 8012458:	08020980 	.word	0x08020980
 801245c:	08020ab0 	.word	0x08020ab0
 8012460:	08020ac8 	.word	0x08020ac8
 8012464:	08020aec 	.word	0x08020aec

08012468 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012468:	b480      	push	{r7}
 801246a:	b085      	sub	sp, #20
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012470:	2300      	movs	r3, #0
 8012472:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012474:	e005      	b.n	8012482 <pbuf_clen+0x1a>
    ++len;
 8012476:	89fb      	ldrh	r3, [r7, #14]
 8012478:	3301      	adds	r3, #1
 801247a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d1f6      	bne.n	8012476 <pbuf_clen+0xe>
  }
  return len;
 8012488:	89fb      	ldrh	r3, [r7, #14]
}
 801248a:	4618      	mov	r0, r3
 801248c:	3714      	adds	r7, #20
 801248e:	46bd      	mov	sp, r7
 8012490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012494:	4770      	bx	lr
	...

08012498 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d010      	beq.n	80124c8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	7b9b      	ldrb	r3, [r3, #14]
 80124aa:	3301      	adds	r3, #1
 80124ac:	b2da      	uxtb	r2, r3
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	7b9b      	ldrb	r3, [r3, #14]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d106      	bne.n	80124c8 <pbuf_ref+0x30>
 80124ba:	4b05      	ldr	r3, [pc, #20]	; (80124d0 <pbuf_ref+0x38>)
 80124bc:	f240 3242 	movw	r2, #834	; 0x342
 80124c0:	4904      	ldr	r1, [pc, #16]	; (80124d4 <pbuf_ref+0x3c>)
 80124c2:	4805      	ldr	r0, [pc, #20]	; (80124d8 <pbuf_ref+0x40>)
 80124c4:	f009 fc92 	bl	801bdec <iprintf>
  }
}
 80124c8:	bf00      	nop
 80124ca:	3708      	adds	r7, #8
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	080208f4 	.word	0x080208f4
 80124d4:	08020b00 	.word	0x08020b00
 80124d8:	08020980 	.word	0x08020980

080124dc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d002      	beq.n	80124f2 <pbuf_cat+0x16>
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d107      	bne.n	8012502 <pbuf_cat+0x26>
 80124f2:	4b20      	ldr	r3, [pc, #128]	; (8012574 <pbuf_cat+0x98>)
 80124f4:	f240 3259 	movw	r2, #857	; 0x359
 80124f8:	491f      	ldr	r1, [pc, #124]	; (8012578 <pbuf_cat+0x9c>)
 80124fa:	4820      	ldr	r0, [pc, #128]	; (801257c <pbuf_cat+0xa0>)
 80124fc:	f009 fc76 	bl	801bdec <iprintf>
 8012500:	e034      	b.n	801256c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	60fb      	str	r3, [r7, #12]
 8012506:	e00a      	b.n	801251e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	891a      	ldrh	r2, [r3, #8]
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	891b      	ldrh	r3, [r3, #8]
 8012510:	4413      	add	r3, r2
 8012512:	b29a      	uxth	r2, r3
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	60fb      	str	r3, [r7, #12]
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d1f0      	bne.n	8012508 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	891a      	ldrh	r2, [r3, #8]
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	895b      	ldrh	r3, [r3, #10]
 801252e:	429a      	cmp	r2, r3
 8012530:	d006      	beq.n	8012540 <pbuf_cat+0x64>
 8012532:	4b10      	ldr	r3, [pc, #64]	; (8012574 <pbuf_cat+0x98>)
 8012534:	f240 3262 	movw	r2, #866	; 0x362
 8012538:	4911      	ldr	r1, [pc, #68]	; (8012580 <pbuf_cat+0xa4>)
 801253a:	4810      	ldr	r0, [pc, #64]	; (801257c <pbuf_cat+0xa0>)
 801253c:	f009 fc56 	bl	801bdec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d006      	beq.n	8012556 <pbuf_cat+0x7a>
 8012548:	4b0a      	ldr	r3, [pc, #40]	; (8012574 <pbuf_cat+0x98>)
 801254a:	f240 3263 	movw	r2, #867	; 0x363
 801254e:	490d      	ldr	r1, [pc, #52]	; (8012584 <pbuf_cat+0xa8>)
 8012550:	480a      	ldr	r0, [pc, #40]	; (801257c <pbuf_cat+0xa0>)
 8012552:	f009 fc4b 	bl	801bdec <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	891a      	ldrh	r2, [r3, #8]
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	891b      	ldrh	r3, [r3, #8]
 801255e:	4413      	add	r3, r2
 8012560:	b29a      	uxth	r2, r3
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	683a      	ldr	r2, [r7, #0]
 801256a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801256c:	3710      	adds	r7, #16
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}
 8012572:	bf00      	nop
 8012574:	080208f4 	.word	0x080208f4
 8012578:	08020b14 	.word	0x08020b14
 801257c:	08020980 	.word	0x08020980
 8012580:	08020b4c 	.word	0x08020b4c
 8012584:	08020b7c 	.word	0x08020b7c

08012588 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b086      	sub	sp, #24
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012592:	2300      	movs	r3, #0
 8012594:	617b      	str	r3, [r7, #20]
 8012596:	2300      	movs	r3, #0
 8012598:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d008      	beq.n	80125b2 <pbuf_copy+0x2a>
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d005      	beq.n	80125b2 <pbuf_copy+0x2a>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	891a      	ldrh	r2, [r3, #8]
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	891b      	ldrh	r3, [r3, #8]
 80125ae:	429a      	cmp	r2, r3
 80125b0:	d209      	bcs.n	80125c6 <pbuf_copy+0x3e>
 80125b2:	4b57      	ldr	r3, [pc, #348]	; (8012710 <pbuf_copy+0x188>)
 80125b4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80125b8:	4956      	ldr	r1, [pc, #344]	; (8012714 <pbuf_copy+0x18c>)
 80125ba:	4857      	ldr	r0, [pc, #348]	; (8012718 <pbuf_copy+0x190>)
 80125bc:	f009 fc16 	bl	801bdec <iprintf>
 80125c0:	f06f 030f 	mvn.w	r3, #15
 80125c4:	e09f      	b.n	8012706 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	895b      	ldrh	r3, [r3, #10]
 80125ca:	461a      	mov	r2, r3
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	1ad2      	subs	r2, r2, r3
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	895b      	ldrh	r3, [r3, #10]
 80125d4:	4619      	mov	r1, r3
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	1acb      	subs	r3, r1, r3
 80125da:	429a      	cmp	r2, r3
 80125dc:	d306      	bcc.n	80125ec <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	895b      	ldrh	r3, [r3, #10]
 80125e2:	461a      	mov	r2, r3
 80125e4:	693b      	ldr	r3, [r7, #16]
 80125e6:	1ad3      	subs	r3, r2, r3
 80125e8:	60fb      	str	r3, [r7, #12]
 80125ea:	e005      	b.n	80125f8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	895b      	ldrh	r3, [r3, #10]
 80125f0:	461a      	mov	r2, r3
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	1ad3      	subs	r3, r2, r3
 80125f6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	685a      	ldr	r2, [r3, #4]
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	18d0      	adds	r0, r2, r3
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	685a      	ldr	r2, [r3, #4]
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	4413      	add	r3, r2
 8012608:	68fa      	ldr	r2, [r7, #12]
 801260a:	4619      	mov	r1, r3
 801260c:	f008 fccc 	bl	801afa8 <memcpy>
    offset_to += len;
 8012610:	697a      	ldr	r2, [r7, #20]
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	4413      	add	r3, r2
 8012616:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012618:	693a      	ldr	r2, [r7, #16]
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	4413      	add	r3, r2
 801261e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	895b      	ldrh	r3, [r3, #10]
 8012624:	461a      	mov	r2, r3
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	4293      	cmp	r3, r2
 801262a:	d906      	bls.n	801263a <pbuf_copy+0xb2>
 801262c:	4b38      	ldr	r3, [pc, #224]	; (8012710 <pbuf_copy+0x188>)
 801262e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8012632:	493a      	ldr	r1, [pc, #232]	; (801271c <pbuf_copy+0x194>)
 8012634:	4838      	ldr	r0, [pc, #224]	; (8012718 <pbuf_copy+0x190>)
 8012636:	f009 fbd9 	bl	801bdec <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	895b      	ldrh	r3, [r3, #10]
 801263e:	461a      	mov	r2, r3
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	4293      	cmp	r3, r2
 8012644:	d906      	bls.n	8012654 <pbuf_copy+0xcc>
 8012646:	4b32      	ldr	r3, [pc, #200]	; (8012710 <pbuf_copy+0x188>)
 8012648:	f240 32da 	movw	r2, #986	; 0x3da
 801264c:	4934      	ldr	r1, [pc, #208]	; (8012720 <pbuf_copy+0x198>)
 801264e:	4832      	ldr	r0, [pc, #200]	; (8012718 <pbuf_copy+0x190>)
 8012650:	f009 fbcc 	bl	801bdec <iprintf>
    if (offset_from >= p_from->len) {
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	895b      	ldrh	r3, [r3, #10]
 8012658:	461a      	mov	r2, r3
 801265a:	693b      	ldr	r3, [r7, #16]
 801265c:	4293      	cmp	r3, r2
 801265e:	d304      	bcc.n	801266a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012660:	2300      	movs	r3, #0
 8012662:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	895b      	ldrh	r3, [r3, #10]
 801266e:	461a      	mov	r2, r3
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	4293      	cmp	r3, r2
 8012674:	d114      	bne.n	80126a0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8012676:	2300      	movs	r3, #0
 8012678:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d10c      	bne.n	80126a0 <pbuf_copy+0x118>
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d009      	beq.n	80126a0 <pbuf_copy+0x118>
 801268c:	4b20      	ldr	r3, [pc, #128]	; (8012710 <pbuf_copy+0x188>)
 801268e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8012692:	4924      	ldr	r1, [pc, #144]	; (8012724 <pbuf_copy+0x19c>)
 8012694:	4820      	ldr	r0, [pc, #128]	; (8012718 <pbuf_copy+0x190>)
 8012696:	f009 fba9 	bl	801bdec <iprintf>
 801269a:	f06f 030f 	mvn.w	r3, #15
 801269e:	e032      	b.n	8012706 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d013      	beq.n	80126ce <pbuf_copy+0x146>
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	895a      	ldrh	r2, [r3, #10]
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	891b      	ldrh	r3, [r3, #8]
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d10d      	bne.n	80126ce <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d009      	beq.n	80126ce <pbuf_copy+0x146>
 80126ba:	4b15      	ldr	r3, [pc, #84]	; (8012710 <pbuf_copy+0x188>)
 80126bc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80126c0:	4919      	ldr	r1, [pc, #100]	; (8012728 <pbuf_copy+0x1a0>)
 80126c2:	4815      	ldr	r0, [pc, #84]	; (8012718 <pbuf_copy+0x190>)
 80126c4:	f009 fb92 	bl	801bdec <iprintf>
 80126c8:	f06f 0305 	mvn.w	r3, #5
 80126cc:	e01b      	b.n	8012706 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d013      	beq.n	80126fc <pbuf_copy+0x174>
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	895a      	ldrh	r2, [r3, #10]
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	891b      	ldrh	r3, [r3, #8]
 80126dc:	429a      	cmp	r2, r3
 80126de:	d10d      	bne.n	80126fc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d009      	beq.n	80126fc <pbuf_copy+0x174>
 80126e8:	4b09      	ldr	r3, [pc, #36]	; (8012710 <pbuf_copy+0x188>)
 80126ea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80126ee:	490e      	ldr	r1, [pc, #56]	; (8012728 <pbuf_copy+0x1a0>)
 80126f0:	4809      	ldr	r0, [pc, #36]	; (8012718 <pbuf_copy+0x190>)
 80126f2:	f009 fb7b 	bl	801bdec <iprintf>
 80126f6:	f06f 0305 	mvn.w	r3, #5
 80126fa:	e004      	b.n	8012706 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	f47f af61 	bne.w	80125c6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012704:	2300      	movs	r3, #0
}
 8012706:	4618      	mov	r0, r3
 8012708:	3718      	adds	r7, #24
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}
 801270e:	bf00      	nop
 8012710:	080208f4 	.word	0x080208f4
 8012714:	08020bc8 	.word	0x08020bc8
 8012718:	08020980 	.word	0x08020980
 801271c:	08020bf8 	.word	0x08020bf8
 8012720:	08020c10 	.word	0x08020c10
 8012724:	08020c2c 	.word	0x08020c2c
 8012728:	08020c3c 	.word	0x08020c3c

0801272c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b088      	sub	sp, #32
 8012730:	af00      	add	r7, sp, #0
 8012732:	60f8      	str	r0, [r7, #12]
 8012734:	60b9      	str	r1, [r7, #8]
 8012736:	4611      	mov	r1, r2
 8012738:	461a      	mov	r2, r3
 801273a:	460b      	mov	r3, r1
 801273c:	80fb      	strh	r3, [r7, #6]
 801273e:	4613      	mov	r3, r2
 8012740:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012742:	2300      	movs	r3, #0
 8012744:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012746:	2300      	movs	r3, #0
 8012748:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d108      	bne.n	8012762 <pbuf_copy_partial+0x36>
 8012750:	4b2b      	ldr	r3, [pc, #172]	; (8012800 <pbuf_copy_partial+0xd4>)
 8012752:	f240 420a 	movw	r2, #1034	; 0x40a
 8012756:	492b      	ldr	r1, [pc, #172]	; (8012804 <pbuf_copy_partial+0xd8>)
 8012758:	482b      	ldr	r0, [pc, #172]	; (8012808 <pbuf_copy_partial+0xdc>)
 801275a:	f009 fb47 	bl	801bdec <iprintf>
 801275e:	2300      	movs	r3, #0
 8012760:	e04a      	b.n	80127f8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d108      	bne.n	801277a <pbuf_copy_partial+0x4e>
 8012768:	4b25      	ldr	r3, [pc, #148]	; (8012800 <pbuf_copy_partial+0xd4>)
 801276a:	f240 420b 	movw	r2, #1035	; 0x40b
 801276e:	4927      	ldr	r1, [pc, #156]	; (801280c <pbuf_copy_partial+0xe0>)
 8012770:	4825      	ldr	r0, [pc, #148]	; (8012808 <pbuf_copy_partial+0xdc>)
 8012772:	f009 fb3b 	bl	801bdec <iprintf>
 8012776:	2300      	movs	r3, #0
 8012778:	e03e      	b.n	80127f8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	61fb      	str	r3, [r7, #28]
 801277e:	e034      	b.n	80127ea <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012780:	88bb      	ldrh	r3, [r7, #4]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d00a      	beq.n	801279c <pbuf_copy_partial+0x70>
 8012786:	69fb      	ldr	r3, [r7, #28]
 8012788:	895b      	ldrh	r3, [r3, #10]
 801278a:	88ba      	ldrh	r2, [r7, #4]
 801278c:	429a      	cmp	r2, r3
 801278e:	d305      	bcc.n	801279c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012790:	69fb      	ldr	r3, [r7, #28]
 8012792:	895b      	ldrh	r3, [r3, #10]
 8012794:	88ba      	ldrh	r2, [r7, #4]
 8012796:	1ad3      	subs	r3, r2, r3
 8012798:	80bb      	strh	r3, [r7, #4]
 801279a:	e023      	b.n	80127e4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801279c:	69fb      	ldr	r3, [r7, #28]
 801279e:	895a      	ldrh	r2, [r3, #10]
 80127a0:	88bb      	ldrh	r3, [r7, #4]
 80127a2:	1ad3      	subs	r3, r2, r3
 80127a4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80127a6:	8b3a      	ldrh	r2, [r7, #24]
 80127a8:	88fb      	ldrh	r3, [r7, #6]
 80127aa:	429a      	cmp	r2, r3
 80127ac:	d901      	bls.n	80127b2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80127ae:	88fb      	ldrh	r3, [r7, #6]
 80127b0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80127b2:	8b7b      	ldrh	r3, [r7, #26]
 80127b4:	68ba      	ldr	r2, [r7, #8]
 80127b6:	18d0      	adds	r0, r2, r3
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	685a      	ldr	r2, [r3, #4]
 80127bc:	88bb      	ldrh	r3, [r7, #4]
 80127be:	4413      	add	r3, r2
 80127c0:	8b3a      	ldrh	r2, [r7, #24]
 80127c2:	4619      	mov	r1, r3
 80127c4:	f008 fbf0 	bl	801afa8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80127c8:	8afa      	ldrh	r2, [r7, #22]
 80127ca:	8b3b      	ldrh	r3, [r7, #24]
 80127cc:	4413      	add	r3, r2
 80127ce:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80127d0:	8b7a      	ldrh	r2, [r7, #26]
 80127d2:	8b3b      	ldrh	r3, [r7, #24]
 80127d4:	4413      	add	r3, r2
 80127d6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80127d8:	88fa      	ldrh	r2, [r7, #6]
 80127da:	8b3b      	ldrh	r3, [r7, #24]
 80127dc:	1ad3      	subs	r3, r2, r3
 80127de:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80127e0:	2300      	movs	r3, #0
 80127e2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80127e4:	69fb      	ldr	r3, [r7, #28]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	61fb      	str	r3, [r7, #28]
 80127ea:	88fb      	ldrh	r3, [r7, #6]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d002      	beq.n	80127f6 <pbuf_copy_partial+0xca>
 80127f0:	69fb      	ldr	r3, [r7, #28]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d1c4      	bne.n	8012780 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80127f6:	8afb      	ldrh	r3, [r7, #22]
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3720      	adds	r7, #32
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}
 8012800:	080208f4 	.word	0x080208f4
 8012804:	08020c68 	.word	0x08020c68
 8012808:	08020980 	.word	0x08020980
 801280c:	08020c88 	.word	0x08020c88

08012810 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b084      	sub	sp, #16
 8012814:	af00      	add	r7, sp, #0
 8012816:	4603      	mov	r3, r0
 8012818:	603a      	str	r2, [r7, #0]
 801281a:	71fb      	strb	r3, [r7, #7]
 801281c:	460b      	mov	r3, r1
 801281e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	8919      	ldrh	r1, [r3, #8]
 8012824:	88ba      	ldrh	r2, [r7, #4]
 8012826:	79fb      	ldrb	r3, [r7, #7]
 8012828:	4618      	mov	r0, r3
 801282a:	f7ff fab1 	bl	8011d90 <pbuf_alloc>
 801282e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d101      	bne.n	801283a <pbuf_clone+0x2a>
    return NULL;
 8012836:	2300      	movs	r3, #0
 8012838:	e011      	b.n	801285e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801283a:	6839      	ldr	r1, [r7, #0]
 801283c:	68f8      	ldr	r0, [r7, #12]
 801283e:	f7ff fea3 	bl	8012588 <pbuf_copy>
 8012842:	4603      	mov	r3, r0
 8012844:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012846:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d006      	beq.n	801285c <pbuf_clone+0x4c>
 801284e:	4b06      	ldr	r3, [pc, #24]	; (8012868 <pbuf_clone+0x58>)
 8012850:	f240 5224 	movw	r2, #1316	; 0x524
 8012854:	4905      	ldr	r1, [pc, #20]	; (801286c <pbuf_clone+0x5c>)
 8012856:	4806      	ldr	r0, [pc, #24]	; (8012870 <pbuf_clone+0x60>)
 8012858:	f009 fac8 	bl	801bdec <iprintf>
  return q;
 801285c:	68fb      	ldr	r3, [r7, #12]
}
 801285e:	4618      	mov	r0, r3
 8012860:	3710      	adds	r7, #16
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}
 8012866:	bf00      	nop
 8012868:	080208f4 	.word	0x080208f4
 801286c:	08020d94 	.word	0x08020d94
 8012870:	08020980 	.word	0x08020980

08012874 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012878:	f009 fad0 	bl	801be1c <rand>
 801287c:	4603      	mov	r3, r0
 801287e:	b29b      	uxth	r3, r3
 8012880:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012884:	b29b      	uxth	r3, r3
 8012886:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801288a:	b29a      	uxth	r2, r3
 801288c:	4b01      	ldr	r3, [pc, #4]	; (8012894 <tcp_init+0x20>)
 801288e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012890:	bf00      	nop
 8012892:	bd80      	pop	{r7, pc}
 8012894:	24000424 	.word	0x24000424

08012898 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	7d1b      	ldrb	r3, [r3, #20]
 80128a4:	2b01      	cmp	r3, #1
 80128a6:	d105      	bne.n	80128b4 <tcp_free+0x1c>
 80128a8:	4b06      	ldr	r3, [pc, #24]	; (80128c4 <tcp_free+0x2c>)
 80128aa:	22d4      	movs	r2, #212	; 0xd4
 80128ac:	4906      	ldr	r1, [pc, #24]	; (80128c8 <tcp_free+0x30>)
 80128ae:	4807      	ldr	r0, [pc, #28]	; (80128cc <tcp_free+0x34>)
 80128b0:	f009 fa9c 	bl	801bdec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80128b4:	6879      	ldr	r1, [r7, #4]
 80128b6:	2001      	movs	r0, #1
 80128b8:	f7fe fef8 	bl	80116ac <memp_free>
}
 80128bc:	bf00      	nop
 80128be:	3708      	adds	r7, #8
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	08020e20 	.word	0x08020e20
 80128c8:	08020e7c 	.word	0x08020e7c
 80128cc:	08020e90 	.word	0x08020e90

080128d0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	7d1b      	ldrb	r3, [r3, #20]
 80128dc:	2b01      	cmp	r3, #1
 80128de:	d105      	bne.n	80128ec <tcp_free_listen+0x1c>
 80128e0:	4b06      	ldr	r3, [pc, #24]	; (80128fc <tcp_free_listen+0x2c>)
 80128e2:	22df      	movs	r2, #223	; 0xdf
 80128e4:	4906      	ldr	r1, [pc, #24]	; (8012900 <tcp_free_listen+0x30>)
 80128e6:	4807      	ldr	r0, [pc, #28]	; (8012904 <tcp_free_listen+0x34>)
 80128e8:	f009 fa80 	bl	801bdec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80128ec:	6879      	ldr	r1, [r7, #4]
 80128ee:	2002      	movs	r0, #2
 80128f0:	f7fe fedc 	bl	80116ac <memp_free>
}
 80128f4:	bf00      	nop
 80128f6:	3708      	adds	r7, #8
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}
 80128fc:	08020e20 	.word	0x08020e20
 8012900:	08020eb8 	.word	0x08020eb8
 8012904:	08020e90 	.word	0x08020e90

08012908 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801290c:	f000 fea2 	bl	8013654 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012910:	4b07      	ldr	r3, [pc, #28]	; (8012930 <tcp_tmr+0x28>)
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	3301      	adds	r3, #1
 8012916:	b2da      	uxtb	r2, r3
 8012918:	4b05      	ldr	r3, [pc, #20]	; (8012930 <tcp_tmr+0x28>)
 801291a:	701a      	strb	r2, [r3, #0]
 801291c:	4b04      	ldr	r3, [pc, #16]	; (8012930 <tcp_tmr+0x28>)
 801291e:	781b      	ldrb	r3, [r3, #0]
 8012920:	f003 0301 	and.w	r3, r3, #1
 8012924:	2b00      	cmp	r3, #0
 8012926:	d001      	beq.n	801292c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012928:	f000 fb54 	bl	8012fd4 <tcp_slowtmr>
  }
}
 801292c:	bf00      	nop
 801292e:	bd80      	pop	{r7, pc}
 8012930:	24003b6d 	.word	0x24003b6d

08012934 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b084      	sub	sp, #16
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d105      	bne.n	8012950 <tcp_remove_listener+0x1c>
 8012944:	4b0d      	ldr	r3, [pc, #52]	; (801297c <tcp_remove_listener+0x48>)
 8012946:	22ff      	movs	r2, #255	; 0xff
 8012948:	490d      	ldr	r1, [pc, #52]	; (8012980 <tcp_remove_listener+0x4c>)
 801294a:	480e      	ldr	r0, [pc, #56]	; (8012984 <tcp_remove_listener+0x50>)
 801294c:	f009 fa4e 	bl	801bdec <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	60fb      	str	r3, [r7, #12]
 8012954:	e00a      	b.n	801296c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801295a:	683a      	ldr	r2, [r7, #0]
 801295c:	429a      	cmp	r2, r3
 801295e:	d102      	bne.n	8012966 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	2200      	movs	r2, #0
 8012964:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	68db      	ldr	r3, [r3, #12]
 801296a:	60fb      	str	r3, [r7, #12]
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d1f1      	bne.n	8012956 <tcp_remove_listener+0x22>
    }
  }
}
 8012972:	bf00      	nop
 8012974:	bf00      	nop
 8012976:	3710      	adds	r7, #16
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}
 801297c:	08020e20 	.word	0x08020e20
 8012980:	08020ed4 	.word	0x08020ed4
 8012984:	08020e90 	.word	0x08020e90

08012988 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b084      	sub	sp, #16
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d106      	bne.n	80129a4 <tcp_listen_closed+0x1c>
 8012996:	4b14      	ldr	r3, [pc, #80]	; (80129e8 <tcp_listen_closed+0x60>)
 8012998:	f240 1211 	movw	r2, #273	; 0x111
 801299c:	4913      	ldr	r1, [pc, #76]	; (80129ec <tcp_listen_closed+0x64>)
 801299e:	4814      	ldr	r0, [pc, #80]	; (80129f0 <tcp_listen_closed+0x68>)
 80129a0:	f009 fa24 	bl	801bdec <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	7d1b      	ldrb	r3, [r3, #20]
 80129a8:	2b01      	cmp	r3, #1
 80129aa:	d006      	beq.n	80129ba <tcp_listen_closed+0x32>
 80129ac:	4b0e      	ldr	r3, [pc, #56]	; (80129e8 <tcp_listen_closed+0x60>)
 80129ae:	f44f 7289 	mov.w	r2, #274	; 0x112
 80129b2:	4910      	ldr	r1, [pc, #64]	; (80129f4 <tcp_listen_closed+0x6c>)
 80129b4:	480e      	ldr	r0, [pc, #56]	; (80129f0 <tcp_listen_closed+0x68>)
 80129b6:	f009 fa19 	bl	801bdec <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80129ba:	2301      	movs	r3, #1
 80129bc:	60fb      	str	r3, [r7, #12]
 80129be:	e00b      	b.n	80129d8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80129c0:	4a0d      	ldr	r2, [pc, #52]	; (80129f8 <tcp_listen_closed+0x70>)
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	6879      	ldr	r1, [r7, #4]
 80129cc:	4618      	mov	r0, r3
 80129ce:	f7ff ffb1 	bl	8012934 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	3301      	adds	r3, #1
 80129d6:	60fb      	str	r3, [r7, #12]
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	2b03      	cmp	r3, #3
 80129dc:	d9f0      	bls.n	80129c0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80129de:	bf00      	nop
 80129e0:	bf00      	nop
 80129e2:	3710      	adds	r7, #16
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	08020e20 	.word	0x08020e20
 80129ec:	08020efc 	.word	0x08020efc
 80129f0:	08020e90 	.word	0x08020e90
 80129f4:	08020f08 	.word	0x08020f08
 80129f8:	08022884 	.word	0x08022884

080129fc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80129fc:	b5b0      	push	{r4, r5, r7, lr}
 80129fe:	b088      	sub	sp, #32
 8012a00:	af04      	add	r7, sp, #16
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	460b      	mov	r3, r1
 8012a06:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d106      	bne.n	8012a1c <tcp_close_shutdown+0x20>
 8012a0e:	4b63      	ldr	r3, [pc, #396]	; (8012b9c <tcp_close_shutdown+0x1a0>)
 8012a10:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8012a14:	4962      	ldr	r1, [pc, #392]	; (8012ba0 <tcp_close_shutdown+0x1a4>)
 8012a16:	4863      	ldr	r0, [pc, #396]	; (8012ba4 <tcp_close_shutdown+0x1a8>)
 8012a18:	f009 f9e8 	bl	801bdec <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012a1c:	78fb      	ldrb	r3, [r7, #3]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d066      	beq.n	8012af0 <tcp_close_shutdown+0xf4>
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	7d1b      	ldrb	r3, [r3, #20]
 8012a26:	2b04      	cmp	r3, #4
 8012a28:	d003      	beq.n	8012a32 <tcp_close_shutdown+0x36>
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	7d1b      	ldrb	r3, [r3, #20]
 8012a2e:	2b07      	cmp	r3, #7
 8012a30:	d15e      	bne.n	8012af0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d104      	bne.n	8012a44 <tcp_close_shutdown+0x48>
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a3e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012a42:	d055      	beq.n	8012af0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	8b5b      	ldrh	r3, [r3, #26]
 8012a48:	f003 0310 	and.w	r3, r3, #16
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d106      	bne.n	8012a5e <tcp_close_shutdown+0x62>
 8012a50:	4b52      	ldr	r3, [pc, #328]	; (8012b9c <tcp_close_shutdown+0x1a0>)
 8012a52:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8012a56:	4954      	ldr	r1, [pc, #336]	; (8012ba8 <tcp_close_shutdown+0x1ac>)
 8012a58:	4852      	ldr	r0, [pc, #328]	; (8012ba4 <tcp_close_shutdown+0x1a8>)
 8012a5a:	f009 f9c7 	bl	801bdec <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012a66:	687d      	ldr	r5, [r7, #4]
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	3304      	adds	r3, #4
 8012a6c:	687a      	ldr	r2, [r7, #4]
 8012a6e:	8ad2      	ldrh	r2, [r2, #22]
 8012a70:	6879      	ldr	r1, [r7, #4]
 8012a72:	8b09      	ldrh	r1, [r1, #24]
 8012a74:	9102      	str	r1, [sp, #8]
 8012a76:	9201      	str	r2, [sp, #4]
 8012a78:	9300      	str	r3, [sp, #0]
 8012a7a:	462b      	mov	r3, r5
 8012a7c:	4622      	mov	r2, r4
 8012a7e:	4601      	mov	r1, r0
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f004 fe8d 	bl	80177a0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f001 f8c6 	bl	8013c18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012a8c:	4b47      	ldr	r3, [pc, #284]	; (8012bac <tcp_close_shutdown+0x1b0>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d105      	bne.n	8012aa2 <tcp_close_shutdown+0xa6>
 8012a96:	4b45      	ldr	r3, [pc, #276]	; (8012bac <tcp_close_shutdown+0x1b0>)
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	68db      	ldr	r3, [r3, #12]
 8012a9c:	4a43      	ldr	r2, [pc, #268]	; (8012bac <tcp_close_shutdown+0x1b0>)
 8012a9e:	6013      	str	r3, [r2, #0]
 8012aa0:	e013      	b.n	8012aca <tcp_close_shutdown+0xce>
 8012aa2:	4b42      	ldr	r3, [pc, #264]	; (8012bac <tcp_close_shutdown+0x1b0>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	60fb      	str	r3, [r7, #12]
 8012aa8:	e00c      	b.n	8012ac4 <tcp_close_shutdown+0xc8>
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	68db      	ldr	r3, [r3, #12]
 8012aae:	687a      	ldr	r2, [r7, #4]
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d104      	bne.n	8012abe <tcp_close_shutdown+0xc2>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	68da      	ldr	r2, [r3, #12]
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	60da      	str	r2, [r3, #12]
 8012abc:	e005      	b.n	8012aca <tcp_close_shutdown+0xce>
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	68db      	ldr	r3, [r3, #12]
 8012ac2:	60fb      	str	r3, [r7, #12]
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d1ef      	bne.n	8012aaa <tcp_close_shutdown+0xae>
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2200      	movs	r2, #0
 8012ace:	60da      	str	r2, [r3, #12]
 8012ad0:	4b37      	ldr	r3, [pc, #220]	; (8012bb0 <tcp_close_shutdown+0x1b4>)
 8012ad2:	2201      	movs	r2, #1
 8012ad4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012ad6:	4b37      	ldr	r3, [pc, #220]	; (8012bb4 <tcp_close_shutdown+0x1b8>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	687a      	ldr	r2, [r7, #4]
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d102      	bne.n	8012ae6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012ae0:	f003 fd5a 	bl	8016598 <tcp_trigger_input_pcb_close>
 8012ae4:	e002      	b.n	8012aec <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f7ff fed6 	bl	8012898 <tcp_free>
      }
      return ERR_OK;
 8012aec:	2300      	movs	r3, #0
 8012aee:	e050      	b.n	8012b92 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	7d1b      	ldrb	r3, [r3, #20]
 8012af4:	2b02      	cmp	r3, #2
 8012af6:	d03b      	beq.n	8012b70 <tcp_close_shutdown+0x174>
 8012af8:	2b02      	cmp	r3, #2
 8012afa:	dc44      	bgt.n	8012b86 <tcp_close_shutdown+0x18a>
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d002      	beq.n	8012b06 <tcp_close_shutdown+0x10a>
 8012b00:	2b01      	cmp	r3, #1
 8012b02:	d02a      	beq.n	8012b5a <tcp_close_shutdown+0x15e>
 8012b04:	e03f      	b.n	8012b86 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	8adb      	ldrh	r3, [r3, #22]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d021      	beq.n	8012b52 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012b0e:	4b2a      	ldr	r3, [pc, #168]	; (8012bb8 <tcp_close_shutdown+0x1bc>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	429a      	cmp	r2, r3
 8012b16:	d105      	bne.n	8012b24 <tcp_close_shutdown+0x128>
 8012b18:	4b27      	ldr	r3, [pc, #156]	; (8012bb8 <tcp_close_shutdown+0x1bc>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	68db      	ldr	r3, [r3, #12]
 8012b1e:	4a26      	ldr	r2, [pc, #152]	; (8012bb8 <tcp_close_shutdown+0x1bc>)
 8012b20:	6013      	str	r3, [r2, #0]
 8012b22:	e013      	b.n	8012b4c <tcp_close_shutdown+0x150>
 8012b24:	4b24      	ldr	r3, [pc, #144]	; (8012bb8 <tcp_close_shutdown+0x1bc>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	60bb      	str	r3, [r7, #8]
 8012b2a:	e00c      	b.n	8012b46 <tcp_close_shutdown+0x14a>
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	68db      	ldr	r3, [r3, #12]
 8012b30:	687a      	ldr	r2, [r7, #4]
 8012b32:	429a      	cmp	r2, r3
 8012b34:	d104      	bne.n	8012b40 <tcp_close_shutdown+0x144>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	68da      	ldr	r2, [r3, #12]
 8012b3a:	68bb      	ldr	r3, [r7, #8]
 8012b3c:	60da      	str	r2, [r3, #12]
 8012b3e:	e005      	b.n	8012b4c <tcp_close_shutdown+0x150>
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	68db      	ldr	r3, [r3, #12]
 8012b44:	60bb      	str	r3, [r7, #8]
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d1ef      	bne.n	8012b2c <tcp_close_shutdown+0x130>
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f7ff fea0 	bl	8012898 <tcp_free>
      break;
 8012b58:	e01a      	b.n	8012b90 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012b5a:	6878      	ldr	r0, [r7, #4]
 8012b5c:	f7ff ff14 	bl	8012988 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012b60:	6879      	ldr	r1, [r7, #4]
 8012b62:	4816      	ldr	r0, [pc, #88]	; (8012bbc <tcp_close_shutdown+0x1c0>)
 8012b64:	f001 f8a8 	bl	8013cb8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f7ff feb1 	bl	80128d0 <tcp_free_listen>
      break;
 8012b6e:	e00f      	b.n	8012b90 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012b70:	6879      	ldr	r1, [r7, #4]
 8012b72:	480e      	ldr	r0, [pc, #56]	; (8012bac <tcp_close_shutdown+0x1b0>)
 8012b74:	f001 f8a0 	bl	8013cb8 <tcp_pcb_remove>
 8012b78:	4b0d      	ldr	r3, [pc, #52]	; (8012bb0 <tcp_close_shutdown+0x1b4>)
 8012b7a:	2201      	movs	r2, #1
 8012b7c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	f7ff fe8a 	bl	8012898 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012b84:	e004      	b.n	8012b90 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012b86:	6878      	ldr	r0, [r7, #4]
 8012b88:	f000 f81a 	bl	8012bc0 <tcp_close_shutdown_fin>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	e000      	b.n	8012b92 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012b90:	2300      	movs	r3, #0
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3710      	adds	r7, #16
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bdb0      	pop	{r4, r5, r7, pc}
 8012b9a:	bf00      	nop
 8012b9c:	08020e20 	.word	0x08020e20
 8012ba0:	08020f20 	.word	0x08020f20
 8012ba4:	08020e90 	.word	0x08020e90
 8012ba8:	08020f40 	.word	0x08020f40
 8012bac:	240071f8 	.word	0x240071f8
 8012bb0:	240071f4 	.word	0x240071f4
 8012bb4:	2400720c 	.word	0x2400720c
 8012bb8:	24007204 	.word	0x24007204
 8012bbc:	24007200 	.word	0x24007200

08012bc0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b084      	sub	sp, #16
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d106      	bne.n	8012bdc <tcp_close_shutdown_fin+0x1c>
 8012bce:	4b2e      	ldr	r3, [pc, #184]	; (8012c88 <tcp_close_shutdown_fin+0xc8>)
 8012bd0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8012bd4:	492d      	ldr	r1, [pc, #180]	; (8012c8c <tcp_close_shutdown_fin+0xcc>)
 8012bd6:	482e      	ldr	r0, [pc, #184]	; (8012c90 <tcp_close_shutdown_fin+0xd0>)
 8012bd8:	f009 f908 	bl	801bdec <iprintf>

  switch (pcb->state) {
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	7d1b      	ldrb	r3, [r3, #20]
 8012be0:	2b07      	cmp	r3, #7
 8012be2:	d020      	beq.n	8012c26 <tcp_close_shutdown_fin+0x66>
 8012be4:	2b07      	cmp	r3, #7
 8012be6:	dc2b      	bgt.n	8012c40 <tcp_close_shutdown_fin+0x80>
 8012be8:	2b03      	cmp	r3, #3
 8012bea:	d002      	beq.n	8012bf2 <tcp_close_shutdown_fin+0x32>
 8012bec:	2b04      	cmp	r3, #4
 8012bee:	d00d      	beq.n	8012c0c <tcp_close_shutdown_fin+0x4c>
 8012bf0:	e026      	b.n	8012c40 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f003 fee2 	bl	80169bc <tcp_send_fin>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d11f      	bne.n	8012c44 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2205      	movs	r2, #5
 8012c08:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012c0a:	e01b      	b.n	8012c44 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f003 fed5 	bl	80169bc <tcp_send_fin>
 8012c12:	4603      	mov	r3, r0
 8012c14:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d114      	bne.n	8012c48 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2205      	movs	r2, #5
 8012c22:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012c24:	e010      	b.n	8012c48 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f003 fec8 	bl	80169bc <tcp_send_fin>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d109      	bne.n	8012c4c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2209      	movs	r2, #9
 8012c3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012c3e:	e005      	b.n	8012c4c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012c40:	2300      	movs	r3, #0
 8012c42:	e01c      	b.n	8012c7e <tcp_close_shutdown_fin+0xbe>
      break;
 8012c44:	bf00      	nop
 8012c46:	e002      	b.n	8012c4e <tcp_close_shutdown_fin+0x8e>
      break;
 8012c48:	bf00      	nop
 8012c4a:	e000      	b.n	8012c4e <tcp_close_shutdown_fin+0x8e>
      break;
 8012c4c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d103      	bne.n	8012c5e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f003 ffee 	bl	8016c38 <tcp_output>
 8012c5c:	e00d      	b.n	8012c7a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c66:	d108      	bne.n	8012c7a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	8b5b      	ldrh	r3, [r3, #26]
 8012c6c:	f043 0308 	orr.w	r3, r3, #8
 8012c70:	b29a      	uxth	r2, r3
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012c76:	2300      	movs	r3, #0
 8012c78:	e001      	b.n	8012c7e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3710      	adds	r7, #16
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}
 8012c86:	bf00      	nop
 8012c88:	08020e20 	.word	0x08020e20
 8012c8c:	08020efc 	.word	0x08020efc
 8012c90:	08020e90 	.word	0x08020e90

08012c94 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b082      	sub	sp, #8
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d109      	bne.n	8012cb6 <tcp_close+0x22>
 8012ca2:	4b0f      	ldr	r3, [pc, #60]	; (8012ce0 <tcp_close+0x4c>)
 8012ca4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8012ca8:	490e      	ldr	r1, [pc, #56]	; (8012ce4 <tcp_close+0x50>)
 8012caa:	480f      	ldr	r0, [pc, #60]	; (8012ce8 <tcp_close+0x54>)
 8012cac:	f009 f89e 	bl	801bdec <iprintf>
 8012cb0:	f06f 030f 	mvn.w	r3, #15
 8012cb4:	e00f      	b.n	8012cd6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	7d1b      	ldrb	r3, [r3, #20]
 8012cba:	2b01      	cmp	r3, #1
 8012cbc:	d006      	beq.n	8012ccc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	8b5b      	ldrh	r3, [r3, #26]
 8012cc2:	f043 0310 	orr.w	r3, r3, #16
 8012cc6:	b29a      	uxth	r2, r3
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012ccc:	2101      	movs	r1, #1
 8012cce:	6878      	ldr	r0, [r7, #4]
 8012cd0:	f7ff fe94 	bl	80129fc <tcp_close_shutdown>
 8012cd4:	4603      	mov	r3, r0
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3708      	adds	r7, #8
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}
 8012cde:	bf00      	nop
 8012ce0:	08020e20 	.word	0x08020e20
 8012ce4:	08020f5c 	.word	0x08020f5c
 8012ce8:	08020e90 	.word	0x08020e90

08012cec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b08e      	sub	sp, #56	; 0x38
 8012cf0:	af04      	add	r7, sp, #16
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d107      	bne.n	8012d0c <tcp_abandon+0x20>
 8012cfc:	4b52      	ldr	r3, [pc, #328]	; (8012e48 <tcp_abandon+0x15c>)
 8012cfe:	f240 223d 	movw	r2, #573	; 0x23d
 8012d02:	4952      	ldr	r1, [pc, #328]	; (8012e4c <tcp_abandon+0x160>)
 8012d04:	4852      	ldr	r0, [pc, #328]	; (8012e50 <tcp_abandon+0x164>)
 8012d06:	f009 f871 	bl	801bdec <iprintf>
 8012d0a:	e099      	b.n	8012e40 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	7d1b      	ldrb	r3, [r3, #20]
 8012d10:	2b01      	cmp	r3, #1
 8012d12:	d106      	bne.n	8012d22 <tcp_abandon+0x36>
 8012d14:	4b4c      	ldr	r3, [pc, #304]	; (8012e48 <tcp_abandon+0x15c>)
 8012d16:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012d1a:	494e      	ldr	r1, [pc, #312]	; (8012e54 <tcp_abandon+0x168>)
 8012d1c:	484c      	ldr	r0, [pc, #304]	; (8012e50 <tcp_abandon+0x164>)
 8012d1e:	f009 f865 	bl	801bdec <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	7d1b      	ldrb	r3, [r3, #20]
 8012d26:	2b0a      	cmp	r3, #10
 8012d28:	d107      	bne.n	8012d3a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012d2a:	6879      	ldr	r1, [r7, #4]
 8012d2c:	484a      	ldr	r0, [pc, #296]	; (8012e58 <tcp_abandon+0x16c>)
 8012d2e:	f000 ffc3 	bl	8013cb8 <tcp_pcb_remove>
    tcp_free(pcb);
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f7ff fdb0 	bl	8012898 <tcp_free>
 8012d38:	e082      	b.n	8012e40 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012d3e:	2300      	movs	r3, #0
 8012d40:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d46:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d4c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d54:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	691b      	ldr	r3, [r3, #16]
 8012d5a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	7d1b      	ldrb	r3, [r3, #20]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d126      	bne.n	8012db2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	8adb      	ldrh	r3, [r3, #22]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d02e      	beq.n	8012dca <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012d6c:	4b3b      	ldr	r3, [pc, #236]	; (8012e5c <tcp_abandon+0x170>)
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	687a      	ldr	r2, [r7, #4]
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d105      	bne.n	8012d82 <tcp_abandon+0x96>
 8012d76:	4b39      	ldr	r3, [pc, #228]	; (8012e5c <tcp_abandon+0x170>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	68db      	ldr	r3, [r3, #12]
 8012d7c:	4a37      	ldr	r2, [pc, #220]	; (8012e5c <tcp_abandon+0x170>)
 8012d7e:	6013      	str	r3, [r2, #0]
 8012d80:	e013      	b.n	8012daa <tcp_abandon+0xbe>
 8012d82:	4b36      	ldr	r3, [pc, #216]	; (8012e5c <tcp_abandon+0x170>)
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	61fb      	str	r3, [r7, #28]
 8012d88:	e00c      	b.n	8012da4 <tcp_abandon+0xb8>
 8012d8a:	69fb      	ldr	r3, [r7, #28]
 8012d8c:	68db      	ldr	r3, [r3, #12]
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	429a      	cmp	r2, r3
 8012d92:	d104      	bne.n	8012d9e <tcp_abandon+0xb2>
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	68da      	ldr	r2, [r3, #12]
 8012d98:	69fb      	ldr	r3, [r7, #28]
 8012d9a:	60da      	str	r2, [r3, #12]
 8012d9c:	e005      	b.n	8012daa <tcp_abandon+0xbe>
 8012d9e:	69fb      	ldr	r3, [r7, #28]
 8012da0:	68db      	ldr	r3, [r3, #12]
 8012da2:	61fb      	str	r3, [r7, #28]
 8012da4:	69fb      	ldr	r3, [r7, #28]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d1ef      	bne.n	8012d8a <tcp_abandon+0x9e>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	2200      	movs	r2, #0
 8012dae:	60da      	str	r2, [r3, #12]
 8012db0:	e00b      	b.n	8012dca <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	8adb      	ldrh	r3, [r3, #22]
 8012dba:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012dbc:	6879      	ldr	r1, [r7, #4]
 8012dbe:	4828      	ldr	r0, [pc, #160]	; (8012e60 <tcp_abandon+0x174>)
 8012dc0:	f000 ff7a 	bl	8013cb8 <tcp_pcb_remove>
 8012dc4:	4b27      	ldr	r3, [pc, #156]	; (8012e64 <tcp_abandon+0x178>)
 8012dc6:	2201      	movs	r2, #1
 8012dc8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d004      	beq.n	8012ddc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f000 fd1c 	bl	8013814 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d004      	beq.n	8012dee <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012de8:	4618      	mov	r0, r3
 8012dea:	f000 fd13 	bl	8013814 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d004      	beq.n	8012e00 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f000 fd0a 	bl	8013814 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d00e      	beq.n	8012e24 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012e06:	6879      	ldr	r1, [r7, #4]
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	3304      	adds	r3, #4
 8012e0c:	687a      	ldr	r2, [r7, #4]
 8012e0e:	8b12      	ldrh	r2, [r2, #24]
 8012e10:	9202      	str	r2, [sp, #8]
 8012e12:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012e14:	9201      	str	r2, [sp, #4]
 8012e16:	9300      	str	r3, [sp, #0]
 8012e18:	460b      	mov	r3, r1
 8012e1a:	697a      	ldr	r2, [r7, #20]
 8012e1c:	69b9      	ldr	r1, [r7, #24]
 8012e1e:	6878      	ldr	r0, [r7, #4]
 8012e20:	f004 fcbe 	bl	80177a0 <tcp_rst>
    }
    last_state = pcb->state;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	7d1b      	ldrb	r3, [r3, #20]
 8012e28:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012e2a:	6878      	ldr	r0, [r7, #4]
 8012e2c:	f7ff fd34 	bl	8012898 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d004      	beq.n	8012e40 <tcp_abandon+0x154>
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	f06f 010c 	mvn.w	r1, #12
 8012e3c:	68f8      	ldr	r0, [r7, #12]
 8012e3e:	4798      	blx	r3
  }
}
 8012e40:	3728      	adds	r7, #40	; 0x28
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}
 8012e46:	bf00      	nop
 8012e48:	08020e20 	.word	0x08020e20
 8012e4c:	08020f90 	.word	0x08020f90
 8012e50:	08020e90 	.word	0x08020e90
 8012e54:	08020fac 	.word	0x08020fac
 8012e58:	24007208 	.word	0x24007208
 8012e5c:	24007204 	.word	0x24007204
 8012e60:	240071f8 	.word	0x240071f8
 8012e64:	240071f4 	.word	0x240071f4

08012e68 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012e70:	2101      	movs	r1, #1
 8012e72:	6878      	ldr	r0, [r7, #4]
 8012e74:	f7ff ff3a 	bl	8012cec <tcp_abandon>
}
 8012e78:	bf00      	nop
 8012e7a:	3708      	adds	r7, #8
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}

08012e80 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b084      	sub	sp, #16
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d106      	bne.n	8012e9c <tcp_update_rcv_ann_wnd+0x1c>
 8012e8e:	4b25      	ldr	r3, [pc, #148]	; (8012f24 <tcp_update_rcv_ann_wnd+0xa4>)
 8012e90:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012e94:	4924      	ldr	r1, [pc, #144]	; (8012f28 <tcp_update_rcv_ann_wnd+0xa8>)
 8012e96:	4825      	ldr	r0, [pc, #148]	; (8012f2c <tcp_update_rcv_ann_wnd+0xac>)
 8012e98:	f008 ffa8 	bl	801bdec <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ea0:	687a      	ldr	r2, [r7, #4]
 8012ea2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012ea4:	4413      	add	r3, r2
 8012ea6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eac:	687a      	ldr	r2, [r7, #4]
 8012eae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012eb0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012eb4:	bf28      	it	cs
 8012eb6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8012eba:	b292      	uxth	r2, r2
 8012ebc:	4413      	add	r3, r2
 8012ebe:	68fa      	ldr	r2, [r7, #12]
 8012ec0:	1ad3      	subs	r3, r2, r3
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	db08      	blt.n	8012ed8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ed2:	68fa      	ldr	r2, [r7, #12]
 8012ed4:	1ad3      	subs	r3, r2, r3
 8012ed6:	e020      	b.n	8012f1a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ee0:	1ad3      	subs	r3, r2, r3
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	dd03      	ble.n	8012eee <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2200      	movs	r2, #0
 8012eea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012eec:	e014      	b.n	8012f18 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ef6:	1ad3      	subs	r3, r2, r3
 8012ef8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f00:	d306      	bcc.n	8012f10 <tcp_update_rcv_ann_wnd+0x90>
 8012f02:	4b08      	ldr	r3, [pc, #32]	; (8012f24 <tcp_update_rcv_ann_wnd+0xa4>)
 8012f04:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012f08:	4909      	ldr	r1, [pc, #36]	; (8012f30 <tcp_update_rcv_ann_wnd+0xb0>)
 8012f0a:	4808      	ldr	r0, [pc, #32]	; (8012f2c <tcp_update_rcv_ann_wnd+0xac>)
 8012f0c:	f008 ff6e 	bl	801bdec <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	b29a      	uxth	r2, r3
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012f18:	2300      	movs	r3, #0
  }
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3710      	adds	r7, #16
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}
 8012f22:	bf00      	nop
 8012f24:	08020e20 	.word	0x08020e20
 8012f28:	080210a8 	.word	0x080210a8
 8012f2c:	08020e90 	.word	0x08020e90
 8012f30:	080210cc 	.word	0x080210cc

08012f34 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	460b      	mov	r3, r1
 8012f3e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d107      	bne.n	8012f56 <tcp_recved+0x22>
 8012f46:	4b1f      	ldr	r3, [pc, #124]	; (8012fc4 <tcp_recved+0x90>)
 8012f48:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012f4c:	491e      	ldr	r1, [pc, #120]	; (8012fc8 <tcp_recved+0x94>)
 8012f4e:	481f      	ldr	r0, [pc, #124]	; (8012fcc <tcp_recved+0x98>)
 8012f50:	f008 ff4c 	bl	801bdec <iprintf>
 8012f54:	e032      	b.n	8012fbc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	7d1b      	ldrb	r3, [r3, #20]
 8012f5a:	2b01      	cmp	r3, #1
 8012f5c:	d106      	bne.n	8012f6c <tcp_recved+0x38>
 8012f5e:	4b19      	ldr	r3, [pc, #100]	; (8012fc4 <tcp_recved+0x90>)
 8012f60:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012f64:	491a      	ldr	r1, [pc, #104]	; (8012fd0 <tcp_recved+0x9c>)
 8012f66:	4819      	ldr	r0, [pc, #100]	; (8012fcc <tcp_recved+0x98>)
 8012f68:	f008 ff40 	bl	801bdec <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012f70:	887b      	ldrh	r3, [r7, #2]
 8012f72:	4413      	add	r3, r2
 8012f74:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012f76:	89fb      	ldrh	r3, [r7, #14]
 8012f78:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012f7c:	d804      	bhi.n	8012f88 <tcp_recved+0x54>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f82:	89fa      	ldrh	r2, [r7, #14]
 8012f84:	429a      	cmp	r2, r3
 8012f86:	d204      	bcs.n	8012f92 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012f8e:	851a      	strh	r2, [r3, #40]	; 0x28
 8012f90:	e002      	b.n	8012f98 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	89fa      	ldrh	r2, [r7, #14]
 8012f96:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012f98:	6878      	ldr	r0, [r7, #4]
 8012f9a:	f7ff ff71 	bl	8012e80 <tcp_update_rcv_ann_wnd>
 8012f9e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012fa6:	d309      	bcc.n	8012fbc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	8b5b      	ldrh	r3, [r3, #26]
 8012fac:	f043 0302 	orr.w	r3, r3, #2
 8012fb0:	b29a      	uxth	r2, r3
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f003 fe3e 	bl	8016c38 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012fbc:	3710      	adds	r7, #16
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}
 8012fc2:	bf00      	nop
 8012fc4:	08020e20 	.word	0x08020e20
 8012fc8:	080210e8 	.word	0x080210e8
 8012fcc:	08020e90 	.word	0x08020e90
 8012fd0:	08021100 	.word	0x08021100

08012fd4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012fd4:	b5b0      	push	{r4, r5, r7, lr}
 8012fd6:	b090      	sub	sp, #64	; 0x40
 8012fd8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012fe0:	4b94      	ldr	r3, [pc, #592]	; (8013234 <tcp_slowtmr+0x260>)
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	3301      	adds	r3, #1
 8012fe6:	4a93      	ldr	r2, [pc, #588]	; (8013234 <tcp_slowtmr+0x260>)
 8012fe8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012fea:	4b93      	ldr	r3, [pc, #588]	; (8013238 <tcp_slowtmr+0x264>)
 8012fec:	781b      	ldrb	r3, [r3, #0]
 8012fee:	3301      	adds	r3, #1
 8012ff0:	b2da      	uxtb	r2, r3
 8012ff2:	4b91      	ldr	r3, [pc, #580]	; (8013238 <tcp_slowtmr+0x264>)
 8012ff4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8012ffa:	4b90      	ldr	r3, [pc, #576]	; (801323c <tcp_slowtmr+0x268>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8013000:	e29d      	b.n	801353e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013004:	7d1b      	ldrb	r3, [r3, #20]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d106      	bne.n	8013018 <tcp_slowtmr+0x44>
 801300a:	4b8d      	ldr	r3, [pc, #564]	; (8013240 <tcp_slowtmr+0x26c>)
 801300c:	f240 42be 	movw	r2, #1214	; 0x4be
 8013010:	498c      	ldr	r1, [pc, #560]	; (8013244 <tcp_slowtmr+0x270>)
 8013012:	488d      	ldr	r0, [pc, #564]	; (8013248 <tcp_slowtmr+0x274>)
 8013014:	f008 feea 	bl	801bdec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801301a:	7d1b      	ldrb	r3, [r3, #20]
 801301c:	2b01      	cmp	r3, #1
 801301e:	d106      	bne.n	801302e <tcp_slowtmr+0x5a>
 8013020:	4b87      	ldr	r3, [pc, #540]	; (8013240 <tcp_slowtmr+0x26c>)
 8013022:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8013026:	4989      	ldr	r1, [pc, #548]	; (801324c <tcp_slowtmr+0x278>)
 8013028:	4887      	ldr	r0, [pc, #540]	; (8013248 <tcp_slowtmr+0x274>)
 801302a:	f008 fedf 	bl	801bdec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013030:	7d1b      	ldrb	r3, [r3, #20]
 8013032:	2b0a      	cmp	r3, #10
 8013034:	d106      	bne.n	8013044 <tcp_slowtmr+0x70>
 8013036:	4b82      	ldr	r3, [pc, #520]	; (8013240 <tcp_slowtmr+0x26c>)
 8013038:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801303c:	4984      	ldr	r1, [pc, #528]	; (8013250 <tcp_slowtmr+0x27c>)
 801303e:	4882      	ldr	r0, [pc, #520]	; (8013248 <tcp_slowtmr+0x274>)
 8013040:	f008 fed4 	bl	801bdec <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013046:	7f9a      	ldrb	r2, [r3, #30]
 8013048:	4b7b      	ldr	r3, [pc, #492]	; (8013238 <tcp_slowtmr+0x264>)
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	429a      	cmp	r2, r3
 801304e:	d105      	bne.n	801305c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8013050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013052:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013056:	68db      	ldr	r3, [r3, #12]
 8013058:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801305a:	e270      	b.n	801353e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 801305c:	4b76      	ldr	r3, [pc, #472]	; (8013238 <tcp_slowtmr+0x264>)
 801305e:	781a      	ldrb	r2, [r3, #0]
 8013060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013062:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8013064:	2300      	movs	r3, #0
 8013066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801306a:	2300      	movs	r3, #0
 801306c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013072:	7d1b      	ldrb	r3, [r3, #20]
 8013074:	2b02      	cmp	r3, #2
 8013076:	d10a      	bne.n	801308e <tcp_slowtmr+0xba>
 8013078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801307a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801307e:	2b05      	cmp	r3, #5
 8013080:	d905      	bls.n	801308e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8013082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013086:	3301      	adds	r3, #1
 8013088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801308c:	e11e      	b.n	80132cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013090:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013094:	2b0b      	cmp	r3, #11
 8013096:	d905      	bls.n	80130a4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8013098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801309c:	3301      	adds	r3, #1
 801309e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130a2:	e113      	b.n	80132cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80130a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d075      	beq.n	801319a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80130ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d006      	beq.n	80130c4 <tcp_slowtmr+0xf0>
 80130b6:	4b62      	ldr	r3, [pc, #392]	; (8013240 <tcp_slowtmr+0x26c>)
 80130b8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80130bc:	4965      	ldr	r1, [pc, #404]	; (8013254 <tcp_slowtmr+0x280>)
 80130be:	4862      	ldr	r0, [pc, #392]	; (8013248 <tcp_slowtmr+0x274>)
 80130c0:	f008 fe94 	bl	801bdec <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80130c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d106      	bne.n	80130da <tcp_slowtmr+0x106>
 80130cc:	4b5c      	ldr	r3, [pc, #368]	; (8013240 <tcp_slowtmr+0x26c>)
 80130ce:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80130d2:	4961      	ldr	r1, [pc, #388]	; (8013258 <tcp_slowtmr+0x284>)
 80130d4:	485c      	ldr	r0, [pc, #368]	; (8013248 <tcp_slowtmr+0x274>)
 80130d6:	f008 fe89 	bl	801bdec <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80130da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130dc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80130e0:	2b0b      	cmp	r3, #11
 80130e2:	d905      	bls.n	80130f0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80130e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130e8:	3301      	adds	r3, #1
 80130ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130ee:	e0ed      	b.n	80132cc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80130f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80130f6:	3b01      	subs	r3, #1
 80130f8:	4a58      	ldr	r2, [pc, #352]	; (801325c <tcp_slowtmr+0x288>)
 80130fa:	5cd3      	ldrb	r3, [r2, r3]
 80130fc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80130fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013100:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013104:	7c7a      	ldrb	r2, [r7, #17]
 8013106:	429a      	cmp	r2, r3
 8013108:	d907      	bls.n	801311a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801310c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013110:	3301      	adds	r3, #1
 8013112:	b2da      	uxtb	r2, r3
 8013114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013116:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801311c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013120:	7c7a      	ldrb	r2, [r7, #17]
 8013122:	429a      	cmp	r2, r3
 8013124:	f200 80d2 	bhi.w	80132cc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013128:	2301      	movs	r3, #1
 801312a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801312e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013132:	2b00      	cmp	r3, #0
 8013134:	d108      	bne.n	8013148 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013136:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013138:	f004 fc26 	bl	8017988 <tcp_zero_window_probe>
 801313c:	4603      	mov	r3, r0
 801313e:	2b00      	cmp	r3, #0
 8013140:	d014      	beq.n	801316c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8013142:	2300      	movs	r3, #0
 8013144:	623b      	str	r3, [r7, #32]
 8013146:	e011      	b.n	801316c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801314a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801314e:	4619      	mov	r1, r3
 8013150:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013152:	f003 faeb 	bl	801672c <tcp_split_unsent_seg>
 8013156:	4603      	mov	r3, r0
 8013158:	2b00      	cmp	r3, #0
 801315a:	d107      	bne.n	801316c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801315c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801315e:	f003 fd6b 	bl	8016c38 <tcp_output>
 8013162:	4603      	mov	r3, r0
 8013164:	2b00      	cmp	r3, #0
 8013166:	d101      	bne.n	801316c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8013168:	2300      	movs	r3, #0
 801316a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801316c:	6a3b      	ldr	r3, [r7, #32]
 801316e:	2b00      	cmp	r3, #0
 8013170:	f000 80ac 	beq.w	80132cc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8013174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013176:	2200      	movs	r2, #0
 8013178:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801317e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013182:	2b06      	cmp	r3, #6
 8013184:	f200 80a2 	bhi.w	80132cc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8013188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801318a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801318e:	3301      	adds	r3, #1
 8013190:	b2da      	uxtb	r2, r3
 8013192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013194:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8013198:	e098      	b.n	80132cc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801319c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	db0f      	blt.n	80131c4 <tcp_slowtmr+0x1f0>
 80131a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80131aa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80131ae:	4293      	cmp	r3, r2
 80131b0:	d008      	beq.n	80131c4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80131b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80131b8:	b29b      	uxth	r3, r3
 80131ba:	3301      	adds	r3, #1
 80131bc:	b29b      	uxth	r3, r3
 80131be:	b21a      	sxth	r2, r3
 80131c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80131c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80131ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131cc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80131d0:	429a      	cmp	r2, r3
 80131d2:	db7b      	blt.n	80132cc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80131d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80131d6:	f004 f821 	bl	801721c <tcp_rexmit_rto_prepare>
 80131da:	4603      	mov	r3, r0
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d007      	beq.n	80131f0 <tcp_slowtmr+0x21c>
 80131e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d171      	bne.n	80132cc <tcp_slowtmr+0x2f8>
 80131e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d06d      	beq.n	80132cc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80131f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f2:	7d1b      	ldrb	r3, [r3, #20]
 80131f4:	2b02      	cmp	r3, #2
 80131f6:	d03a      	beq.n	801326e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80131f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80131fe:	2b0c      	cmp	r3, #12
 8013200:	bf28      	it	cs
 8013202:	230c      	movcs	r3, #12
 8013204:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013208:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801320c:	10db      	asrs	r3, r3, #3
 801320e:	b21b      	sxth	r3, r3
 8013210:	461a      	mov	r2, r3
 8013212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013214:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013218:	4413      	add	r3, r2
 801321a:	7efa      	ldrb	r2, [r7, #27]
 801321c:	4910      	ldr	r1, [pc, #64]	; (8013260 <tcp_slowtmr+0x28c>)
 801321e:	5c8a      	ldrb	r2, [r1, r2]
 8013220:	4093      	lsls	r3, r2
 8013222:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013224:	697b      	ldr	r3, [r7, #20]
 8013226:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801322a:	4293      	cmp	r3, r2
 801322c:	dc1a      	bgt.n	8013264 <tcp_slowtmr+0x290>
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	b21a      	sxth	r2, r3
 8013232:	e019      	b.n	8013268 <tcp_slowtmr+0x294>
 8013234:	240071fc 	.word	0x240071fc
 8013238:	24003b6e 	.word	0x24003b6e
 801323c:	240071f8 	.word	0x240071f8
 8013240:	08020e20 	.word	0x08020e20
 8013244:	08021190 	.word	0x08021190
 8013248:	08020e90 	.word	0x08020e90
 801324c:	080211bc 	.word	0x080211bc
 8013250:	080211e8 	.word	0x080211e8
 8013254:	08021218 	.word	0x08021218
 8013258:	0802124c 	.word	0x0802124c
 801325c:	0802287c 	.word	0x0802287c
 8013260:	0802286c 	.word	0x0802286c
 8013264:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801326a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013270:	2200      	movs	r2, #0
 8013272:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013276:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801327c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013280:	4293      	cmp	r3, r2
 8013282:	bf28      	it	cs
 8013284:	4613      	movcs	r3, r2
 8013286:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013288:	8a7b      	ldrh	r3, [r7, #18]
 801328a:	085b      	lsrs	r3, r3, #1
 801328c:	b29a      	uxth	r2, r3
 801328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013290:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013296:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801329e:	005b      	lsls	r3, r3, #1
 80132a0:	b29b      	uxth	r3, r3
 80132a2:	429a      	cmp	r2, r3
 80132a4:	d206      	bcs.n	80132b4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80132a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132aa:	005b      	lsls	r3, r3, #1
 80132ac:	b29a      	uxth	r2, r3
 80132ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80132b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80132b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80132be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c0:	2200      	movs	r2, #0
 80132c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80132c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132c8:	f004 f818 	bl	80172fc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80132cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ce:	7d1b      	ldrb	r3, [r3, #20]
 80132d0:	2b06      	cmp	r3, #6
 80132d2:	d111      	bne.n	80132f8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80132d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d6:	8b5b      	ldrh	r3, [r3, #26]
 80132d8:	f003 0310 	and.w	r3, r3, #16
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d00b      	beq.n	80132f8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80132e0:	4b9c      	ldr	r3, [pc, #624]	; (8013554 <tcp_slowtmr+0x580>)
 80132e2:	681a      	ldr	r2, [r3, #0]
 80132e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e6:	6a1b      	ldr	r3, [r3, #32]
 80132e8:	1ad3      	subs	r3, r2, r3
 80132ea:	2b28      	cmp	r3, #40	; 0x28
 80132ec:	d904      	bls.n	80132f8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80132ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132f2:	3301      	adds	r3, #1
 80132f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80132f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132fa:	7a5b      	ldrb	r3, [r3, #9]
 80132fc:	f003 0308 	and.w	r3, r3, #8
 8013300:	2b00      	cmp	r3, #0
 8013302:	d04a      	beq.n	801339a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8013304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013306:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013308:	2b04      	cmp	r3, #4
 801330a:	d003      	beq.n	8013314 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801330c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801330e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013310:	2b07      	cmp	r3, #7
 8013312:	d142      	bne.n	801339a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013314:	4b8f      	ldr	r3, [pc, #572]	; (8013554 <tcp_slowtmr+0x580>)
 8013316:	681a      	ldr	r2, [r3, #0]
 8013318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801331a:	6a1b      	ldr	r3, [r3, #32]
 801331c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013320:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8013324:	4b8c      	ldr	r3, [pc, #560]	; (8013558 <tcp_slowtmr+0x584>)
 8013326:	440b      	add	r3, r1
 8013328:	498c      	ldr	r1, [pc, #560]	; (801355c <tcp_slowtmr+0x588>)
 801332a:	fba1 1303 	umull	r1, r3, r1, r3
 801332e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013330:	429a      	cmp	r2, r3
 8013332:	d90a      	bls.n	801334a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8013334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013338:	3301      	adds	r3, #1
 801333a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801333e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013342:	3301      	adds	r3, #1
 8013344:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013348:	e027      	b.n	801339a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801334a:	4b82      	ldr	r3, [pc, #520]	; (8013554 <tcp_slowtmr+0x580>)
 801334c:	681a      	ldr	r2, [r3, #0]
 801334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013350:	6a1b      	ldr	r3, [r3, #32]
 8013352:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013356:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801335c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013360:	4618      	mov	r0, r3
 8013362:	4b7f      	ldr	r3, [pc, #508]	; (8013560 <tcp_slowtmr+0x58c>)
 8013364:	fb03 f300 	mul.w	r3, r3, r0
 8013368:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801336a:	497c      	ldr	r1, [pc, #496]	; (801355c <tcp_slowtmr+0x588>)
 801336c:	fba1 1303 	umull	r1, r3, r1, r3
 8013370:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013372:	429a      	cmp	r2, r3
 8013374:	d911      	bls.n	801339a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8013376:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013378:	f004 fac6 	bl	8017908 <tcp_keepalive>
 801337c:	4603      	mov	r3, r0
 801337e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8013382:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013386:	2b00      	cmp	r3, #0
 8013388:	d107      	bne.n	801339a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801338c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013390:	3301      	adds	r3, #1
 8013392:	b2da      	uxtb	r2, r3
 8013394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013396:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801339c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d011      	beq.n	80133c6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80133a2:	4b6c      	ldr	r3, [pc, #432]	; (8013554 <tcp_slowtmr+0x580>)
 80133a4:	681a      	ldr	r2, [r3, #0]
 80133a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a8:	6a1b      	ldr	r3, [r3, #32]
 80133aa:	1ad2      	subs	r2, r2, r3
 80133ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80133b2:	4619      	mov	r1, r3
 80133b4:	460b      	mov	r3, r1
 80133b6:	005b      	lsls	r3, r3, #1
 80133b8:	440b      	add	r3, r1
 80133ba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80133bc:	429a      	cmp	r2, r3
 80133be:	d302      	bcc.n	80133c6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80133c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80133c2:	f000 fddd 	bl	8013f80 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80133c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133c8:	7d1b      	ldrb	r3, [r3, #20]
 80133ca:	2b03      	cmp	r3, #3
 80133cc:	d10b      	bne.n	80133e6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80133ce:	4b61      	ldr	r3, [pc, #388]	; (8013554 <tcp_slowtmr+0x580>)
 80133d0:	681a      	ldr	r2, [r3, #0]
 80133d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133d4:	6a1b      	ldr	r3, [r3, #32]
 80133d6:	1ad3      	subs	r3, r2, r3
 80133d8:	2b28      	cmp	r3, #40	; 0x28
 80133da:	d904      	bls.n	80133e6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80133dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133e0:	3301      	adds	r3, #1
 80133e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80133e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133e8:	7d1b      	ldrb	r3, [r3, #20]
 80133ea:	2b09      	cmp	r3, #9
 80133ec:	d10b      	bne.n	8013406 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80133ee:	4b59      	ldr	r3, [pc, #356]	; (8013554 <tcp_slowtmr+0x580>)
 80133f0:	681a      	ldr	r2, [r3, #0]
 80133f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f4:	6a1b      	ldr	r3, [r3, #32]
 80133f6:	1ad3      	subs	r3, r2, r3
 80133f8:	2bf0      	cmp	r3, #240	; 0xf0
 80133fa:	d904      	bls.n	8013406 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80133fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013400:	3301      	adds	r3, #1
 8013402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801340a:	2b00      	cmp	r3, #0
 801340c:	d060      	beq.n	80134d0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013414:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8013416:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013418:	f000 fbfe 	bl	8013c18 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801341e:	2b00      	cmp	r3, #0
 8013420:	d010      	beq.n	8013444 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013422:	4b50      	ldr	r3, [pc, #320]	; (8013564 <tcp_slowtmr+0x590>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013428:	429a      	cmp	r2, r3
 801342a:	d106      	bne.n	801343a <tcp_slowtmr+0x466>
 801342c:	4b4e      	ldr	r3, [pc, #312]	; (8013568 <tcp_slowtmr+0x594>)
 801342e:	f240 526d 	movw	r2, #1389	; 0x56d
 8013432:	494e      	ldr	r1, [pc, #312]	; (801356c <tcp_slowtmr+0x598>)
 8013434:	484e      	ldr	r0, [pc, #312]	; (8013570 <tcp_slowtmr+0x59c>)
 8013436:	f008 fcd9 	bl	801bdec <iprintf>
        prev->next = pcb->next;
 801343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801343c:	68da      	ldr	r2, [r3, #12]
 801343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013440:	60da      	str	r2, [r3, #12]
 8013442:	e00f      	b.n	8013464 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013444:	4b47      	ldr	r3, [pc, #284]	; (8013564 <tcp_slowtmr+0x590>)
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801344a:	429a      	cmp	r2, r3
 801344c:	d006      	beq.n	801345c <tcp_slowtmr+0x488>
 801344e:	4b46      	ldr	r3, [pc, #280]	; (8013568 <tcp_slowtmr+0x594>)
 8013450:	f240 5271 	movw	r2, #1393	; 0x571
 8013454:	4947      	ldr	r1, [pc, #284]	; (8013574 <tcp_slowtmr+0x5a0>)
 8013456:	4846      	ldr	r0, [pc, #280]	; (8013570 <tcp_slowtmr+0x59c>)
 8013458:	f008 fcc8 	bl	801bdec <iprintf>
        tcp_active_pcbs = pcb->next;
 801345c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801345e:	68db      	ldr	r3, [r3, #12]
 8013460:	4a40      	ldr	r2, [pc, #256]	; (8013564 <tcp_slowtmr+0x590>)
 8013462:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8013464:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013468:	2b00      	cmp	r3, #0
 801346a:	d013      	beq.n	8013494 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801346c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801346e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013472:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013474:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8013476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013478:	3304      	adds	r3, #4
 801347a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801347c:	8ad2      	ldrh	r2, [r2, #22]
 801347e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013480:	8b09      	ldrh	r1, [r1, #24]
 8013482:	9102      	str	r1, [sp, #8]
 8013484:	9201      	str	r2, [sp, #4]
 8013486:	9300      	str	r3, [sp, #0]
 8013488:	462b      	mov	r3, r5
 801348a:	4622      	mov	r2, r4
 801348c:	4601      	mov	r1, r0
 801348e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013490:	f004 f986 	bl	80177a0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8013494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013496:	691b      	ldr	r3, [r3, #16]
 8013498:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801349c:	7d1b      	ldrb	r3, [r3, #20]
 801349e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80134a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134a2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80134a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134a6:	68db      	ldr	r3, [r3, #12]
 80134a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80134aa:	6838      	ldr	r0, [r7, #0]
 80134ac:	f7ff f9f4 	bl	8012898 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80134b0:	4b31      	ldr	r3, [pc, #196]	; (8013578 <tcp_slowtmr+0x5a4>)
 80134b2:	2200      	movs	r2, #0
 80134b4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d004      	beq.n	80134c6 <tcp_slowtmr+0x4f2>
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	f06f 010c 	mvn.w	r1, #12
 80134c2:	68b8      	ldr	r0, [r7, #8]
 80134c4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80134c6:	4b2c      	ldr	r3, [pc, #176]	; (8013578 <tcp_slowtmr+0x5a4>)
 80134c8:	781b      	ldrb	r3, [r3, #0]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d037      	beq.n	801353e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80134ce:	e592      	b.n	8012ff6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80134d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80134d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d6:	68db      	ldr	r3, [r3, #12]
 80134d8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80134da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134dc:	7f1b      	ldrb	r3, [r3, #28]
 80134de:	3301      	adds	r3, #1
 80134e0:	b2da      	uxtb	r2, r3
 80134e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80134e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e8:	7f1a      	ldrb	r2, [r3, #28]
 80134ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ec:	7f5b      	ldrb	r3, [r3, #29]
 80134ee:	429a      	cmp	r2, r3
 80134f0:	d325      	bcc.n	801353e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80134f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f4:	2200      	movs	r2, #0
 80134f6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80134f8:	4b1f      	ldr	r3, [pc, #124]	; (8013578 <tcp_slowtmr+0x5a4>)
 80134fa:	2200      	movs	r2, #0
 80134fc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80134fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013504:	2b00      	cmp	r3, #0
 8013506:	d00b      	beq.n	8013520 <tcp_slowtmr+0x54c>
 8013508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801350a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801350e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013510:	6912      	ldr	r2, [r2, #16]
 8013512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013514:	4610      	mov	r0, r2
 8013516:	4798      	blx	r3
 8013518:	4603      	mov	r3, r0
 801351a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801351e:	e002      	b.n	8013526 <tcp_slowtmr+0x552>
 8013520:	2300      	movs	r3, #0
 8013522:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8013526:	4b14      	ldr	r3, [pc, #80]	; (8013578 <tcp_slowtmr+0x5a4>)
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d000      	beq.n	8013530 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801352e:	e562      	b.n	8012ff6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013530:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013534:	2b00      	cmp	r3, #0
 8013536:	d102      	bne.n	801353e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8013538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801353a:	f003 fb7d 	bl	8016c38 <tcp_output>
  while (pcb != NULL) {
 801353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013540:	2b00      	cmp	r3, #0
 8013542:	f47f ad5e 	bne.w	8013002 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013546:	2300      	movs	r3, #0
 8013548:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801354a:	4b0c      	ldr	r3, [pc, #48]	; (801357c <tcp_slowtmr+0x5a8>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013550:	e069      	b.n	8013626 <tcp_slowtmr+0x652>
 8013552:	bf00      	nop
 8013554:	240071fc 	.word	0x240071fc
 8013558:	000a4cb8 	.word	0x000a4cb8
 801355c:	10624dd3 	.word	0x10624dd3
 8013560:	000124f8 	.word	0x000124f8
 8013564:	240071f8 	.word	0x240071f8
 8013568:	08020e20 	.word	0x08020e20
 801356c:	08021284 	.word	0x08021284
 8013570:	08020e90 	.word	0x08020e90
 8013574:	080212b0 	.word	0x080212b0
 8013578:	240071f4 	.word	0x240071f4
 801357c:	24007208 	.word	0x24007208
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013582:	7d1b      	ldrb	r3, [r3, #20]
 8013584:	2b0a      	cmp	r3, #10
 8013586:	d006      	beq.n	8013596 <tcp_slowtmr+0x5c2>
 8013588:	4b2b      	ldr	r3, [pc, #172]	; (8013638 <tcp_slowtmr+0x664>)
 801358a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801358e:	492b      	ldr	r1, [pc, #172]	; (801363c <tcp_slowtmr+0x668>)
 8013590:	482b      	ldr	r0, [pc, #172]	; (8013640 <tcp_slowtmr+0x66c>)
 8013592:	f008 fc2b 	bl	801bdec <iprintf>
    pcb_remove = 0;
 8013596:	2300      	movs	r3, #0
 8013598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801359c:	4b29      	ldr	r3, [pc, #164]	; (8013644 <tcp_slowtmr+0x670>)
 801359e:	681a      	ldr	r2, [r3, #0]
 80135a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a2:	6a1b      	ldr	r3, [r3, #32]
 80135a4:	1ad3      	subs	r3, r2, r3
 80135a6:	2bf0      	cmp	r3, #240	; 0xf0
 80135a8:	d904      	bls.n	80135b4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80135aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135ae:	3301      	adds	r3, #1
 80135b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80135b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d02f      	beq.n	801361c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80135bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80135be:	f000 fb2b 	bl	8013c18 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80135c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d010      	beq.n	80135ea <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80135c8:	4b1f      	ldr	r3, [pc, #124]	; (8013648 <tcp_slowtmr+0x674>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135ce:	429a      	cmp	r2, r3
 80135d0:	d106      	bne.n	80135e0 <tcp_slowtmr+0x60c>
 80135d2:	4b19      	ldr	r3, [pc, #100]	; (8013638 <tcp_slowtmr+0x664>)
 80135d4:	f240 52af 	movw	r2, #1455	; 0x5af
 80135d8:	491c      	ldr	r1, [pc, #112]	; (801364c <tcp_slowtmr+0x678>)
 80135da:	4819      	ldr	r0, [pc, #100]	; (8013640 <tcp_slowtmr+0x66c>)
 80135dc:	f008 fc06 	bl	801bdec <iprintf>
        prev->next = pcb->next;
 80135e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e2:	68da      	ldr	r2, [r3, #12]
 80135e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135e6:	60da      	str	r2, [r3, #12]
 80135e8:	e00f      	b.n	801360a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80135ea:	4b17      	ldr	r3, [pc, #92]	; (8013648 <tcp_slowtmr+0x674>)
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d006      	beq.n	8013602 <tcp_slowtmr+0x62e>
 80135f4:	4b10      	ldr	r3, [pc, #64]	; (8013638 <tcp_slowtmr+0x664>)
 80135f6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80135fa:	4915      	ldr	r1, [pc, #84]	; (8013650 <tcp_slowtmr+0x67c>)
 80135fc:	4810      	ldr	r0, [pc, #64]	; (8013640 <tcp_slowtmr+0x66c>)
 80135fe:	f008 fbf5 	bl	801bdec <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013604:	68db      	ldr	r3, [r3, #12]
 8013606:	4a10      	ldr	r2, [pc, #64]	; (8013648 <tcp_slowtmr+0x674>)
 8013608:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013610:	68db      	ldr	r3, [r3, #12]
 8013612:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013614:	69f8      	ldr	r0, [r7, #28]
 8013616:	f7ff f93f 	bl	8012898 <tcp_free>
 801361a:	e004      	b.n	8013626 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801361e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013622:	68db      	ldr	r3, [r3, #12]
 8013624:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013628:	2b00      	cmp	r3, #0
 801362a:	d1a9      	bne.n	8013580 <tcp_slowtmr+0x5ac>
    }
  }
}
 801362c:	bf00      	nop
 801362e:	bf00      	nop
 8013630:	3730      	adds	r7, #48	; 0x30
 8013632:	46bd      	mov	sp, r7
 8013634:	bdb0      	pop	{r4, r5, r7, pc}
 8013636:	bf00      	nop
 8013638:	08020e20 	.word	0x08020e20
 801363c:	080212dc 	.word	0x080212dc
 8013640:	08020e90 	.word	0x08020e90
 8013644:	240071fc 	.word	0x240071fc
 8013648:	24007208 	.word	0x24007208
 801364c:	0802130c 	.word	0x0802130c
 8013650:	08021334 	.word	0x08021334

08013654 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b082      	sub	sp, #8
 8013658:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801365a:	4b2d      	ldr	r3, [pc, #180]	; (8013710 <tcp_fasttmr+0xbc>)
 801365c:	781b      	ldrb	r3, [r3, #0]
 801365e:	3301      	adds	r3, #1
 8013660:	b2da      	uxtb	r2, r3
 8013662:	4b2b      	ldr	r3, [pc, #172]	; (8013710 <tcp_fasttmr+0xbc>)
 8013664:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013666:	4b2b      	ldr	r3, [pc, #172]	; (8013714 <tcp_fasttmr+0xc0>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801366c:	e048      	b.n	8013700 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	7f9a      	ldrb	r2, [r3, #30]
 8013672:	4b27      	ldr	r3, [pc, #156]	; (8013710 <tcp_fasttmr+0xbc>)
 8013674:	781b      	ldrb	r3, [r3, #0]
 8013676:	429a      	cmp	r2, r3
 8013678:	d03f      	beq.n	80136fa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801367a:	4b25      	ldr	r3, [pc, #148]	; (8013710 <tcp_fasttmr+0xbc>)
 801367c:	781a      	ldrb	r2, [r3, #0]
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	8b5b      	ldrh	r3, [r3, #26]
 8013686:	f003 0301 	and.w	r3, r3, #1
 801368a:	2b00      	cmp	r3, #0
 801368c:	d010      	beq.n	80136b0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	8b5b      	ldrh	r3, [r3, #26]
 8013692:	f043 0302 	orr.w	r3, r3, #2
 8013696:	b29a      	uxth	r2, r3
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f003 facb 	bl	8016c38 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	8b5b      	ldrh	r3, [r3, #26]
 80136a6:	f023 0303 	bic.w	r3, r3, #3
 80136aa:	b29a      	uxth	r2, r3
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	8b5b      	ldrh	r3, [r3, #26]
 80136b4:	f003 0308 	and.w	r3, r3, #8
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d009      	beq.n	80136d0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	8b5b      	ldrh	r3, [r3, #26]
 80136c0:	f023 0308 	bic.w	r3, r3, #8
 80136c4:	b29a      	uxth	r2, r3
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f7ff fa78 	bl	8012bc0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	68db      	ldr	r3, [r3, #12]
 80136d4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d00a      	beq.n	80136f4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80136de:	4b0e      	ldr	r3, [pc, #56]	; (8013718 <tcp_fasttmr+0xc4>)
 80136e0:	2200      	movs	r2, #0
 80136e2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f000 f819 	bl	801371c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80136ea:	4b0b      	ldr	r3, [pc, #44]	; (8013718 <tcp_fasttmr+0xc4>)
 80136ec:	781b      	ldrb	r3, [r3, #0]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d000      	beq.n	80136f4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80136f2:	e7b8      	b.n	8013666 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	607b      	str	r3, [r7, #4]
 80136f8:	e002      	b.n	8013700 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	68db      	ldr	r3, [r3, #12]
 80136fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d1b3      	bne.n	801366e <tcp_fasttmr+0x1a>
    }
  }
}
 8013706:	bf00      	nop
 8013708:	bf00      	nop
 801370a:	3708      	adds	r7, #8
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	24003b6e 	.word	0x24003b6e
 8013714:	240071f8 	.word	0x240071f8
 8013718:	240071f4 	.word	0x240071f4

0801371c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801371c:	b590      	push	{r4, r7, lr}
 801371e:	b085      	sub	sp, #20
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d109      	bne.n	801373e <tcp_process_refused_data+0x22>
 801372a:	4b37      	ldr	r3, [pc, #220]	; (8013808 <tcp_process_refused_data+0xec>)
 801372c:	f240 6209 	movw	r2, #1545	; 0x609
 8013730:	4936      	ldr	r1, [pc, #216]	; (801380c <tcp_process_refused_data+0xf0>)
 8013732:	4837      	ldr	r0, [pc, #220]	; (8013810 <tcp_process_refused_data+0xf4>)
 8013734:	f008 fb5a 	bl	801bdec <iprintf>
 8013738:	f06f 030f 	mvn.w	r3, #15
 801373c:	e060      	b.n	8013800 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013742:	7b5b      	ldrb	r3, [r3, #13]
 8013744:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801374a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2200      	movs	r2, #0
 8013750:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013758:	2b00      	cmp	r3, #0
 801375a:	d00b      	beq.n	8013774 <tcp_process_refused_data+0x58>
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	6918      	ldr	r0, [r3, #16]
 8013766:	2300      	movs	r3, #0
 8013768:	68ba      	ldr	r2, [r7, #8]
 801376a:	6879      	ldr	r1, [r7, #4]
 801376c:	47a0      	blx	r4
 801376e:	4603      	mov	r3, r0
 8013770:	73fb      	strb	r3, [r7, #15]
 8013772:	e007      	b.n	8013784 <tcp_process_refused_data+0x68>
 8013774:	2300      	movs	r3, #0
 8013776:	68ba      	ldr	r2, [r7, #8]
 8013778:	6879      	ldr	r1, [r7, #4]
 801377a:	2000      	movs	r0, #0
 801377c:	f000 f8a4 	bl	80138c8 <tcp_recv_null>
 8013780:	4603      	mov	r3, r0
 8013782:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d12a      	bne.n	80137e2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801378c:	7bbb      	ldrb	r3, [r7, #14]
 801378e:	f003 0320 	and.w	r3, r3, #32
 8013792:	2b00      	cmp	r3, #0
 8013794:	d033      	beq.n	80137fe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801379a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801379e:	d005      	beq.n	80137ac <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80137a4:	3301      	adds	r3, #1
 80137a6:	b29a      	uxth	r2, r3
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d00b      	beq.n	80137ce <tcp_process_refused_data+0xb2>
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6918      	ldr	r0, [r3, #16]
 80137c0:	2300      	movs	r3, #0
 80137c2:	2200      	movs	r2, #0
 80137c4:	6879      	ldr	r1, [r7, #4]
 80137c6:	47a0      	blx	r4
 80137c8:	4603      	mov	r3, r0
 80137ca:	73fb      	strb	r3, [r7, #15]
 80137cc:	e001      	b.n	80137d2 <tcp_process_refused_data+0xb6>
 80137ce:	2300      	movs	r3, #0
 80137d0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80137d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137d6:	f113 0f0d 	cmn.w	r3, #13
 80137da:	d110      	bne.n	80137fe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80137dc:	f06f 030c 	mvn.w	r3, #12
 80137e0:	e00e      	b.n	8013800 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80137e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137e6:	f113 0f0d 	cmn.w	r3, #13
 80137ea:	d102      	bne.n	80137f2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80137ec:	f06f 030c 	mvn.w	r3, #12
 80137f0:	e006      	b.n	8013800 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	68ba      	ldr	r2, [r7, #8]
 80137f6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80137f8:	f06f 0304 	mvn.w	r3, #4
 80137fc:	e000      	b.n	8013800 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80137fe:	2300      	movs	r3, #0
}
 8013800:	4618      	mov	r0, r3
 8013802:	3714      	adds	r7, #20
 8013804:	46bd      	mov	sp, r7
 8013806:	bd90      	pop	{r4, r7, pc}
 8013808:	08020e20 	.word	0x08020e20
 801380c:	0802135c 	.word	0x0802135c
 8013810:	08020e90 	.word	0x08020e90

08013814 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b084      	sub	sp, #16
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801381c:	e007      	b.n	801382e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	f000 f80a 	bl	801383e <tcp_seg_free>
    seg = next;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d1f4      	bne.n	801381e <tcp_segs_free+0xa>
  }
}
 8013834:	bf00      	nop
 8013836:	bf00      	nop
 8013838:	3710      	adds	r7, #16
 801383a:	46bd      	mov	sp, r7
 801383c:	bd80      	pop	{r7, pc}

0801383e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801383e:	b580      	push	{r7, lr}
 8013840:	b082      	sub	sp, #8
 8013842:	af00      	add	r7, sp, #0
 8013844:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d00c      	beq.n	8013866 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d004      	beq.n	801385e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	685b      	ldr	r3, [r3, #4]
 8013858:	4618      	mov	r0, r3
 801385a:	f7fe fd7d 	bl	8012358 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801385e:	6879      	ldr	r1, [r7, #4]
 8013860:	2003      	movs	r0, #3
 8013862:	f7fd ff23 	bl	80116ac <memp_free>
  }
}
 8013866:	bf00      	nop
 8013868:	3708      	adds	r7, #8
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}
	...

08013870 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b084      	sub	sp, #16
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d106      	bne.n	801388c <tcp_seg_copy+0x1c>
 801387e:	4b0f      	ldr	r3, [pc, #60]	; (80138bc <tcp_seg_copy+0x4c>)
 8013880:	f240 6282 	movw	r2, #1666	; 0x682
 8013884:	490e      	ldr	r1, [pc, #56]	; (80138c0 <tcp_seg_copy+0x50>)
 8013886:	480f      	ldr	r0, [pc, #60]	; (80138c4 <tcp_seg_copy+0x54>)
 8013888:	f008 fab0 	bl	801bdec <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801388c:	2003      	movs	r0, #3
 801388e:	f7fd fec1 	bl	8011614 <memp_malloc>
 8013892:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d101      	bne.n	801389e <tcp_seg_copy+0x2e>
    return NULL;
 801389a:	2300      	movs	r3, #0
 801389c:	e00a      	b.n	80138b4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801389e:	2210      	movs	r2, #16
 80138a0:	6879      	ldr	r1, [r7, #4]
 80138a2:	68f8      	ldr	r0, [r7, #12]
 80138a4:	f007 fb80 	bl	801afa8 <memcpy>
  pbuf_ref(cseg->p);
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	685b      	ldr	r3, [r3, #4]
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7fe fdf3 	bl	8012498 <pbuf_ref>
  return cseg;
 80138b2:	68fb      	ldr	r3, [r7, #12]
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	3710      	adds	r7, #16
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}
 80138bc:	08020e20 	.word	0x08020e20
 80138c0:	080213a0 	.word	0x080213a0
 80138c4:	08020e90 	.word	0x08020e90

080138c8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b084      	sub	sp, #16
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	60f8      	str	r0, [r7, #12]
 80138d0:	60b9      	str	r1, [r7, #8]
 80138d2:	607a      	str	r2, [r7, #4]
 80138d4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80138d6:	68bb      	ldr	r3, [r7, #8]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d109      	bne.n	80138f0 <tcp_recv_null+0x28>
 80138dc:	4b12      	ldr	r3, [pc, #72]	; (8013928 <tcp_recv_null+0x60>)
 80138de:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80138e2:	4912      	ldr	r1, [pc, #72]	; (801392c <tcp_recv_null+0x64>)
 80138e4:	4812      	ldr	r0, [pc, #72]	; (8013930 <tcp_recv_null+0x68>)
 80138e6:	f008 fa81 	bl	801bdec <iprintf>
 80138ea:	f06f 030f 	mvn.w	r3, #15
 80138ee:	e016      	b.n	801391e <tcp_recv_null+0x56>

  if (p != NULL) {
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d009      	beq.n	801390a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	891b      	ldrh	r3, [r3, #8]
 80138fa:	4619      	mov	r1, r3
 80138fc:	68b8      	ldr	r0, [r7, #8]
 80138fe:	f7ff fb19 	bl	8012f34 <tcp_recved>
    pbuf_free(p);
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f7fe fd28 	bl	8012358 <pbuf_free>
 8013908:	e008      	b.n	801391c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801390a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d104      	bne.n	801391c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013912:	68b8      	ldr	r0, [r7, #8]
 8013914:	f7ff f9be 	bl	8012c94 <tcp_close>
 8013918:	4603      	mov	r3, r0
 801391a:	e000      	b.n	801391e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801391c:	2300      	movs	r3, #0
}
 801391e:	4618      	mov	r0, r3
 8013920:	3710      	adds	r7, #16
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}
 8013926:	bf00      	nop
 8013928:	08020e20 	.word	0x08020e20
 801392c:	080213bc 	.word	0x080213bc
 8013930:	08020e90 	.word	0x08020e90

08013934 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b086      	sub	sp, #24
 8013938:	af00      	add	r7, sp, #0
 801393a:	4603      	mov	r3, r0
 801393c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013942:	2b00      	cmp	r3, #0
 8013944:	db01      	blt.n	801394a <tcp_kill_prio+0x16>
 8013946:	79fb      	ldrb	r3, [r7, #7]
 8013948:	e000      	b.n	801394c <tcp_kill_prio+0x18>
 801394a:	237f      	movs	r3, #127	; 0x7f
 801394c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801394e:	7afb      	ldrb	r3, [r7, #11]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d034      	beq.n	80139be <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013954:	7afb      	ldrb	r3, [r7, #11]
 8013956:	3b01      	subs	r3, #1
 8013958:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801395a:	2300      	movs	r3, #0
 801395c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801395e:	2300      	movs	r3, #0
 8013960:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013962:	4b19      	ldr	r3, [pc, #100]	; (80139c8 <tcp_kill_prio+0x94>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	617b      	str	r3, [r7, #20]
 8013968:	e01f      	b.n	80139aa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	7d5b      	ldrb	r3, [r3, #21]
 801396e:	7afa      	ldrb	r2, [r7, #11]
 8013970:	429a      	cmp	r2, r3
 8013972:	d80c      	bhi.n	801398e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013974:	697b      	ldr	r3, [r7, #20]
 8013976:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013978:	7afa      	ldrb	r2, [r7, #11]
 801397a:	429a      	cmp	r2, r3
 801397c:	d112      	bne.n	80139a4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801397e:	4b13      	ldr	r3, [pc, #76]	; (80139cc <tcp_kill_prio+0x98>)
 8013980:	681a      	ldr	r2, [r3, #0]
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	6a1b      	ldr	r3, [r3, #32]
 8013986:	1ad3      	subs	r3, r2, r3
 8013988:	68fa      	ldr	r2, [r7, #12]
 801398a:	429a      	cmp	r2, r3
 801398c:	d80a      	bhi.n	80139a4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801398e:	4b0f      	ldr	r3, [pc, #60]	; (80139cc <tcp_kill_prio+0x98>)
 8013990:	681a      	ldr	r2, [r3, #0]
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	6a1b      	ldr	r3, [r3, #32]
 8013996:	1ad3      	subs	r3, r2, r3
 8013998:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801399e:	697b      	ldr	r3, [r7, #20]
 80139a0:	7d5b      	ldrb	r3, [r3, #21]
 80139a2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80139a4:	697b      	ldr	r3, [r7, #20]
 80139a6:	68db      	ldr	r3, [r3, #12]
 80139a8:	617b      	str	r3, [r7, #20]
 80139aa:	697b      	ldr	r3, [r7, #20]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d1dc      	bne.n	801396a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80139b0:	693b      	ldr	r3, [r7, #16]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d004      	beq.n	80139c0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80139b6:	6938      	ldr	r0, [r7, #16]
 80139b8:	f7ff fa56 	bl	8012e68 <tcp_abort>
 80139bc:	e000      	b.n	80139c0 <tcp_kill_prio+0x8c>
    return;
 80139be:	bf00      	nop
  }
}
 80139c0:	3718      	adds	r7, #24
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}
 80139c6:	bf00      	nop
 80139c8:	240071f8 	.word	0x240071f8
 80139cc:	240071fc 	.word	0x240071fc

080139d0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b086      	sub	sp, #24
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	4603      	mov	r3, r0
 80139d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80139da:	79fb      	ldrb	r3, [r7, #7]
 80139dc:	2b08      	cmp	r3, #8
 80139de:	d009      	beq.n	80139f4 <tcp_kill_state+0x24>
 80139e0:	79fb      	ldrb	r3, [r7, #7]
 80139e2:	2b09      	cmp	r3, #9
 80139e4:	d006      	beq.n	80139f4 <tcp_kill_state+0x24>
 80139e6:	4b1a      	ldr	r3, [pc, #104]	; (8013a50 <tcp_kill_state+0x80>)
 80139e8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80139ec:	4919      	ldr	r1, [pc, #100]	; (8013a54 <tcp_kill_state+0x84>)
 80139ee:	481a      	ldr	r0, [pc, #104]	; (8013a58 <tcp_kill_state+0x88>)
 80139f0:	f008 f9fc 	bl	801bdec <iprintf>

  inactivity = 0;
 80139f4:	2300      	movs	r3, #0
 80139f6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80139f8:	2300      	movs	r3, #0
 80139fa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80139fc:	4b17      	ldr	r3, [pc, #92]	; (8013a5c <tcp_kill_state+0x8c>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	617b      	str	r3, [r7, #20]
 8013a02:	e017      	b.n	8013a34 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	7d1b      	ldrb	r3, [r3, #20]
 8013a08:	79fa      	ldrb	r2, [r7, #7]
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d10f      	bne.n	8013a2e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013a0e:	4b14      	ldr	r3, [pc, #80]	; (8013a60 <tcp_kill_state+0x90>)
 8013a10:	681a      	ldr	r2, [r3, #0]
 8013a12:	697b      	ldr	r3, [r7, #20]
 8013a14:	6a1b      	ldr	r3, [r3, #32]
 8013a16:	1ad3      	subs	r3, r2, r3
 8013a18:	68fa      	ldr	r2, [r7, #12]
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	d807      	bhi.n	8013a2e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013a1e:	4b10      	ldr	r3, [pc, #64]	; (8013a60 <tcp_kill_state+0x90>)
 8013a20:	681a      	ldr	r2, [r3, #0]
 8013a22:	697b      	ldr	r3, [r7, #20]
 8013a24:	6a1b      	ldr	r3, [r3, #32]
 8013a26:	1ad3      	subs	r3, r2, r3
 8013a28:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013a2a:	697b      	ldr	r3, [r7, #20]
 8013a2c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	68db      	ldr	r3, [r3, #12]
 8013a32:	617b      	str	r3, [r7, #20]
 8013a34:	697b      	ldr	r3, [r7, #20]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d1e4      	bne.n	8013a04 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013a3a:	693b      	ldr	r3, [r7, #16]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d003      	beq.n	8013a48 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013a40:	2100      	movs	r1, #0
 8013a42:	6938      	ldr	r0, [r7, #16]
 8013a44:	f7ff f952 	bl	8012cec <tcp_abandon>
  }
}
 8013a48:	bf00      	nop
 8013a4a:	3718      	adds	r7, #24
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}
 8013a50:	08020e20 	.word	0x08020e20
 8013a54:	080213d8 	.word	0x080213d8
 8013a58:	08020e90 	.word	0x08020e90
 8013a5c:	240071f8 	.word	0x240071f8
 8013a60:	240071fc 	.word	0x240071fc

08013a64 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b084      	sub	sp, #16
 8013a68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a72:	4b12      	ldr	r3, [pc, #72]	; (8013abc <tcp_kill_timewait+0x58>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	60fb      	str	r3, [r7, #12]
 8013a78:	e012      	b.n	8013aa0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013a7a:	4b11      	ldr	r3, [pc, #68]	; (8013ac0 <tcp_kill_timewait+0x5c>)
 8013a7c:	681a      	ldr	r2, [r3, #0]
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	6a1b      	ldr	r3, [r3, #32]
 8013a82:	1ad3      	subs	r3, r2, r3
 8013a84:	687a      	ldr	r2, [r7, #4]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d807      	bhi.n	8013a9a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013a8a:	4b0d      	ldr	r3, [pc, #52]	; (8013ac0 <tcp_kill_timewait+0x5c>)
 8013a8c:	681a      	ldr	r2, [r3, #0]
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	6a1b      	ldr	r3, [r3, #32]
 8013a92:	1ad3      	subs	r3, r2, r3
 8013a94:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	68db      	ldr	r3, [r3, #12]
 8013a9e:	60fb      	str	r3, [r7, #12]
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d1e9      	bne.n	8013a7a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d002      	beq.n	8013ab2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013aac:	68b8      	ldr	r0, [r7, #8]
 8013aae:	f7ff f9db 	bl	8012e68 <tcp_abort>
  }
}
 8013ab2:	bf00      	nop
 8013ab4:	3710      	adds	r7, #16
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}
 8013aba:	bf00      	nop
 8013abc:	24007208 	.word	0x24007208
 8013ac0:	240071fc 	.word	0x240071fc

08013ac4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b082      	sub	sp, #8
 8013ac8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013aca:	4b10      	ldr	r3, [pc, #64]	; (8013b0c <tcp_handle_closepend+0x48>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013ad0:	e014      	b.n	8013afc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	68db      	ldr	r3, [r3, #12]
 8013ad6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	8b5b      	ldrh	r3, [r3, #26]
 8013adc:	f003 0308 	and.w	r3, r3, #8
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d009      	beq.n	8013af8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	8b5b      	ldrh	r3, [r3, #26]
 8013ae8:	f023 0308 	bic.w	r3, r3, #8
 8013aec:	b29a      	uxth	r2, r3
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f7ff f864 	bl	8012bc0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d1e7      	bne.n	8013ad2 <tcp_handle_closepend+0xe>
  }
}
 8013b02:	bf00      	nop
 8013b04:	bf00      	nop
 8013b06:	3708      	adds	r7, #8
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}
 8013b0c:	240071f8 	.word	0x240071f8

08013b10 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b084      	sub	sp, #16
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	4603      	mov	r3, r0
 8013b18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b1a:	2001      	movs	r0, #1
 8013b1c:	f7fd fd7a 	bl	8011614 <memp_malloc>
 8013b20:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d126      	bne.n	8013b76 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013b28:	f7ff ffcc 	bl	8013ac4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013b2c:	f7ff ff9a 	bl	8013a64 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b30:	2001      	movs	r0, #1
 8013b32:	f7fd fd6f 	bl	8011614 <memp_malloc>
 8013b36:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d11b      	bne.n	8013b76 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013b3e:	2009      	movs	r0, #9
 8013b40:	f7ff ff46 	bl	80139d0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b44:	2001      	movs	r0, #1
 8013b46:	f7fd fd65 	bl	8011614 <memp_malloc>
 8013b4a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d111      	bne.n	8013b76 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013b52:	2008      	movs	r0, #8
 8013b54:	f7ff ff3c 	bl	80139d0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b58:	2001      	movs	r0, #1
 8013b5a:	f7fd fd5b 	bl	8011614 <memp_malloc>
 8013b5e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d107      	bne.n	8013b76 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013b66:	79fb      	ldrb	r3, [r7, #7]
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7ff fee3 	bl	8013934 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b6e:	2001      	movs	r0, #1
 8013b70:	f7fd fd50 	bl	8011614 <memp_malloc>
 8013b74:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d03f      	beq.n	8013bfc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013b7c:	229c      	movs	r2, #156	; 0x9c
 8013b7e:	2100      	movs	r1, #0
 8013b80:	68f8      	ldr	r0, [r7, #12]
 8013b82:	f007 fa39 	bl	801aff8 <memset>
    pcb->prio = prio;
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	79fa      	ldrb	r2, [r7, #7]
 8013b8a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013b92:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	22ff      	movs	r2, #255	; 0xff
 8013baa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013bb2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	2206      	movs	r2, #6
 8013bb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	2206      	movs	r2, #6
 8013bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013bc8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	2201      	movs	r2, #1
 8013bce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013bd2:	4b0d      	ldr	r3, [pc, #52]	; (8013c08 <tcp_alloc+0xf8>)
 8013bd4:	681a      	ldr	r2, [r3, #0]
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013bda:	4b0c      	ldr	r3, [pc, #48]	; (8013c0c <tcp_alloc+0xfc>)
 8013bdc:	781a      	ldrb	r2, [r3, #0]
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013be8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	4a08      	ldr	r2, [pc, #32]	; (8013c10 <tcp_alloc+0x100>)
 8013bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	4a07      	ldr	r2, [pc, #28]	; (8013c14 <tcp_alloc+0x104>)
 8013bf8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013bfc:	68fb      	ldr	r3, [r7, #12]
}
 8013bfe:	4618      	mov	r0, r3
 8013c00:	3710      	adds	r7, #16
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}
 8013c06:	bf00      	nop
 8013c08:	240071fc 	.word	0x240071fc
 8013c0c:	24003b6e 	.word	0x24003b6e
 8013c10:	080138c9 	.word	0x080138c9
 8013c14:	006ddd00 	.word	0x006ddd00

08013c18 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d107      	bne.n	8013c36 <tcp_pcb_purge+0x1e>
 8013c26:	4b21      	ldr	r3, [pc, #132]	; (8013cac <tcp_pcb_purge+0x94>)
 8013c28:	f640 0251 	movw	r2, #2129	; 0x851
 8013c2c:	4920      	ldr	r1, [pc, #128]	; (8013cb0 <tcp_pcb_purge+0x98>)
 8013c2e:	4821      	ldr	r0, [pc, #132]	; (8013cb4 <tcp_pcb_purge+0x9c>)
 8013c30:	f008 f8dc 	bl	801bdec <iprintf>
 8013c34:	e037      	b.n	8013ca6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	7d1b      	ldrb	r3, [r3, #20]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d033      	beq.n	8013ca6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013c42:	2b0a      	cmp	r3, #10
 8013c44:	d02f      	beq.n	8013ca6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013c4a:	2b01      	cmp	r3, #1
 8013c4c:	d02b      	beq.n	8013ca6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d007      	beq.n	8013c66 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7fe fb7c 	bl	8012358 <pbuf_free>
      pcb->refused_data = NULL;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2200      	movs	r2, #0
 8013c64:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d002      	beq.n	8013c74 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f000 f986 	bl	8013f80 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c7a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7ff fdc7 	bl	8013814 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7ff fdc2 	bl	8013814 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2200      	movs	r2, #0
 8013c94:	66da      	str	r2, [r3, #108]	; 0x6c
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013ca6:	3708      	adds	r7, #8
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}
 8013cac:	08020e20 	.word	0x08020e20
 8013cb0:	08021498 	.word	0x08021498
 8013cb4:	08020e90 	.word	0x08020e90

08013cb8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b084      	sub	sp, #16
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
 8013cc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d106      	bne.n	8013cd6 <tcp_pcb_remove+0x1e>
 8013cc8:	4b3e      	ldr	r3, [pc, #248]	; (8013dc4 <tcp_pcb_remove+0x10c>)
 8013cca:	f640 0283 	movw	r2, #2179	; 0x883
 8013cce:	493e      	ldr	r1, [pc, #248]	; (8013dc8 <tcp_pcb_remove+0x110>)
 8013cd0:	483e      	ldr	r0, [pc, #248]	; (8013dcc <tcp_pcb_remove+0x114>)
 8013cd2:	f008 f88b 	bl	801bdec <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d106      	bne.n	8013cea <tcp_pcb_remove+0x32>
 8013cdc:	4b39      	ldr	r3, [pc, #228]	; (8013dc4 <tcp_pcb_remove+0x10c>)
 8013cde:	f640 0284 	movw	r2, #2180	; 0x884
 8013ce2:	493b      	ldr	r1, [pc, #236]	; (8013dd0 <tcp_pcb_remove+0x118>)
 8013ce4:	4839      	ldr	r0, [pc, #228]	; (8013dcc <tcp_pcb_remove+0x114>)
 8013ce6:	f008 f881 	bl	801bdec <iprintf>

  TCP_RMV(pcblist, pcb);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	683a      	ldr	r2, [r7, #0]
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d105      	bne.n	8013d00 <tcp_pcb_remove+0x48>
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	68da      	ldr	r2, [r3, #12]
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	601a      	str	r2, [r3, #0]
 8013cfe:	e013      	b.n	8013d28 <tcp_pcb_remove+0x70>
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	60fb      	str	r3, [r7, #12]
 8013d06:	e00c      	b.n	8013d22 <tcp_pcb_remove+0x6a>
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	68db      	ldr	r3, [r3, #12]
 8013d0c:	683a      	ldr	r2, [r7, #0]
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	d104      	bne.n	8013d1c <tcp_pcb_remove+0x64>
 8013d12:	683b      	ldr	r3, [r7, #0]
 8013d14:	68da      	ldr	r2, [r3, #12]
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	60da      	str	r2, [r3, #12]
 8013d1a:	e005      	b.n	8013d28 <tcp_pcb_remove+0x70>
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	68db      	ldr	r3, [r3, #12]
 8013d20:	60fb      	str	r3, [r7, #12]
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d1ef      	bne.n	8013d08 <tcp_pcb_remove+0x50>
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013d2e:	6838      	ldr	r0, [r7, #0]
 8013d30:	f7ff ff72 	bl	8013c18 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013d34:	683b      	ldr	r3, [r7, #0]
 8013d36:	7d1b      	ldrb	r3, [r3, #20]
 8013d38:	2b0a      	cmp	r3, #10
 8013d3a:	d013      	beq.n	8013d64 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013d40:	2b01      	cmp	r3, #1
 8013d42:	d00f      	beq.n	8013d64 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	8b5b      	ldrh	r3, [r3, #26]
 8013d48:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d009      	beq.n	8013d64 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013d50:	683b      	ldr	r3, [r7, #0]
 8013d52:	8b5b      	ldrh	r3, [r3, #26]
 8013d54:	f043 0302 	orr.w	r3, r3, #2
 8013d58:	b29a      	uxth	r2, r3
 8013d5a:	683b      	ldr	r3, [r7, #0]
 8013d5c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013d5e:	6838      	ldr	r0, [r7, #0]
 8013d60:	f002 ff6a 	bl	8016c38 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	7d1b      	ldrb	r3, [r3, #20]
 8013d68:	2b01      	cmp	r3, #1
 8013d6a:	d020      	beq.n	8013dae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013d6c:	683b      	ldr	r3, [r7, #0]
 8013d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d006      	beq.n	8013d82 <tcp_pcb_remove+0xca>
 8013d74:	4b13      	ldr	r3, [pc, #76]	; (8013dc4 <tcp_pcb_remove+0x10c>)
 8013d76:	f640 0293 	movw	r2, #2195	; 0x893
 8013d7a:	4916      	ldr	r1, [pc, #88]	; (8013dd4 <tcp_pcb_remove+0x11c>)
 8013d7c:	4813      	ldr	r0, [pc, #76]	; (8013dcc <tcp_pcb_remove+0x114>)
 8013d7e:	f008 f835 	bl	801bdec <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d006      	beq.n	8013d98 <tcp_pcb_remove+0xe0>
 8013d8a:	4b0e      	ldr	r3, [pc, #56]	; (8013dc4 <tcp_pcb_remove+0x10c>)
 8013d8c:	f640 0294 	movw	r2, #2196	; 0x894
 8013d90:	4911      	ldr	r1, [pc, #68]	; (8013dd8 <tcp_pcb_remove+0x120>)
 8013d92:	480e      	ldr	r0, [pc, #56]	; (8013dcc <tcp_pcb_remove+0x114>)
 8013d94:	f008 f82a 	bl	801bdec <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013d98:	683b      	ldr	r3, [r7, #0]
 8013d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d006      	beq.n	8013dae <tcp_pcb_remove+0xf6>
 8013da0:	4b08      	ldr	r3, [pc, #32]	; (8013dc4 <tcp_pcb_remove+0x10c>)
 8013da2:	f640 0296 	movw	r2, #2198	; 0x896
 8013da6:	490d      	ldr	r1, [pc, #52]	; (8013ddc <tcp_pcb_remove+0x124>)
 8013da8:	4808      	ldr	r0, [pc, #32]	; (8013dcc <tcp_pcb_remove+0x114>)
 8013daa:	f008 f81f 	bl	801bdec <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	2200      	movs	r2, #0
 8013db2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013db4:	683b      	ldr	r3, [r7, #0]
 8013db6:	2200      	movs	r2, #0
 8013db8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013dba:	bf00      	nop
 8013dbc:	3710      	adds	r7, #16
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}
 8013dc2:	bf00      	nop
 8013dc4:	08020e20 	.word	0x08020e20
 8013dc8:	080214b4 	.word	0x080214b4
 8013dcc:	08020e90 	.word	0x08020e90
 8013dd0:	080214d0 	.word	0x080214d0
 8013dd4:	080214f0 	.word	0x080214f0
 8013dd8:	08021508 	.word	0x08021508
 8013ddc:	08021524 	.word	0x08021524

08013de0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d106      	bne.n	8013dfc <tcp_next_iss+0x1c>
 8013dee:	4b0a      	ldr	r3, [pc, #40]	; (8013e18 <tcp_next_iss+0x38>)
 8013df0:	f640 02af 	movw	r2, #2223	; 0x8af
 8013df4:	4909      	ldr	r1, [pc, #36]	; (8013e1c <tcp_next_iss+0x3c>)
 8013df6:	480a      	ldr	r0, [pc, #40]	; (8013e20 <tcp_next_iss+0x40>)
 8013df8:	f007 fff8 	bl	801bdec <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013dfc:	4b09      	ldr	r3, [pc, #36]	; (8013e24 <tcp_next_iss+0x44>)
 8013dfe:	681a      	ldr	r2, [r3, #0]
 8013e00:	4b09      	ldr	r3, [pc, #36]	; (8013e28 <tcp_next_iss+0x48>)
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	4413      	add	r3, r2
 8013e06:	4a07      	ldr	r2, [pc, #28]	; (8013e24 <tcp_next_iss+0x44>)
 8013e08:	6013      	str	r3, [r2, #0]
  return iss;
 8013e0a:	4b06      	ldr	r3, [pc, #24]	; (8013e24 <tcp_next_iss+0x44>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	3708      	adds	r7, #8
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}
 8013e16:	bf00      	nop
 8013e18:	08020e20 	.word	0x08020e20
 8013e1c:	0802153c 	.word	0x0802153c
 8013e20:	08020e90 	.word	0x08020e90
 8013e24:	24000428 	.word	0x24000428
 8013e28:	240071fc 	.word	0x240071fc

08013e2c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b086      	sub	sp, #24
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	4603      	mov	r3, r0
 8013e34:	60b9      	str	r1, [r7, #8]
 8013e36:	607a      	str	r2, [r7, #4]
 8013e38:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d106      	bne.n	8013e4e <tcp_eff_send_mss_netif+0x22>
 8013e40:	4b14      	ldr	r3, [pc, #80]	; (8013e94 <tcp_eff_send_mss_netif+0x68>)
 8013e42:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8013e46:	4914      	ldr	r1, [pc, #80]	; (8013e98 <tcp_eff_send_mss_netif+0x6c>)
 8013e48:	4814      	ldr	r0, [pc, #80]	; (8013e9c <tcp_eff_send_mss_netif+0x70>)
 8013e4a:	f007 ffcf 	bl	801bdec <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d101      	bne.n	8013e58 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013e54:	89fb      	ldrh	r3, [r7, #14]
 8013e56:	e019      	b.n	8013e8c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013e5c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013e5e:	8afb      	ldrh	r3, [r7, #22]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d012      	beq.n	8013e8a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013e64:	2328      	movs	r3, #40	; 0x28
 8013e66:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013e68:	8afa      	ldrh	r2, [r7, #22]
 8013e6a:	8abb      	ldrh	r3, [r7, #20]
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	d904      	bls.n	8013e7a <tcp_eff_send_mss_netif+0x4e>
 8013e70:	8afa      	ldrh	r2, [r7, #22]
 8013e72:	8abb      	ldrh	r3, [r7, #20]
 8013e74:	1ad3      	subs	r3, r2, r3
 8013e76:	b29b      	uxth	r3, r3
 8013e78:	e000      	b.n	8013e7c <tcp_eff_send_mss_netif+0x50>
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013e7e:	8a7a      	ldrh	r2, [r7, #18]
 8013e80:	89fb      	ldrh	r3, [r7, #14]
 8013e82:	4293      	cmp	r3, r2
 8013e84:	bf28      	it	cs
 8013e86:	4613      	movcs	r3, r2
 8013e88:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013e8a:	89fb      	ldrh	r3, [r7, #14]
}
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	3718      	adds	r7, #24
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}
 8013e94:	08020e20 	.word	0x08020e20
 8013e98:	08021558 	.word	0x08021558
 8013e9c:	08020e90 	.word	0x08020e90

08013ea0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b084      	sub	sp, #16
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
 8013ea8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d119      	bne.n	8013ee8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013eb4:	4b10      	ldr	r3, [pc, #64]	; (8013ef8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013eb6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8013eba:	4910      	ldr	r1, [pc, #64]	; (8013efc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013ebc:	4810      	ldr	r0, [pc, #64]	; (8013f00 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013ebe:	f007 ff95 	bl	801bdec <iprintf>

  while (pcb != NULL) {
 8013ec2:	e011      	b.n	8013ee8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	681a      	ldr	r2, [r3, #0]
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d108      	bne.n	8013ee2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	68db      	ldr	r3, [r3, #12]
 8013ed4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013ed6:	68f8      	ldr	r0, [r7, #12]
 8013ed8:	f7fe ffc6 	bl	8012e68 <tcp_abort>
      pcb = next;
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	60fb      	str	r3, [r7, #12]
 8013ee0:	e002      	b.n	8013ee8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	68db      	ldr	r3, [r3, #12]
 8013ee6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d1ea      	bne.n	8013ec4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013eee:	bf00      	nop
 8013ef0:	bf00      	nop
 8013ef2:	3710      	adds	r7, #16
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}
 8013ef8:	08020e20 	.word	0x08020e20
 8013efc:	08021580 	.word	0x08021580
 8013f00:	08020e90 	.word	0x08020e90

08013f04 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b084      	sub	sp, #16
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
 8013f0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d02a      	beq.n	8013f6a <tcp_netif_ip_addr_changed+0x66>
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d026      	beq.n	8013f6a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013f1c:	4b15      	ldr	r3, [pc, #84]	; (8013f74 <tcp_netif_ip_addr_changed+0x70>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	4619      	mov	r1, r3
 8013f22:	6878      	ldr	r0, [r7, #4]
 8013f24:	f7ff ffbc 	bl	8013ea0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013f28:	4b13      	ldr	r3, [pc, #76]	; (8013f78 <tcp_netif_ip_addr_changed+0x74>)
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f7ff ffb6 	bl	8013ea0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d017      	beq.n	8013f6a <tcp_netif_ip_addr_changed+0x66>
 8013f3a:	683b      	ldr	r3, [r7, #0]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d013      	beq.n	8013f6a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013f42:	4b0e      	ldr	r3, [pc, #56]	; (8013f7c <tcp_netif_ip_addr_changed+0x78>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	60fb      	str	r3, [r7, #12]
 8013f48:	e00c      	b.n	8013f64 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	681a      	ldr	r2, [r3, #0]
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d103      	bne.n	8013f5e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	681a      	ldr	r2, [r3, #0]
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	68db      	ldr	r3, [r3, #12]
 8013f62:	60fb      	str	r3, [r7, #12]
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d1ef      	bne.n	8013f4a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013f6a:	bf00      	nop
 8013f6c:	3710      	adds	r7, #16
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}
 8013f72:	bf00      	nop
 8013f74:	240071f8 	.word	0x240071f8
 8013f78:	24007204 	.word	0x24007204
 8013f7c:	24007200 	.word	0x24007200

08013f80 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b082      	sub	sp, #8
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d007      	beq.n	8013fa0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f94:	4618      	mov	r0, r3
 8013f96:	f7ff fc3d 	bl	8013814 <tcp_segs_free>
    pcb->ooseq = NULL;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013fa0:	bf00      	nop
 8013fa2:	3708      	adds	r7, #8
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}

08013fa8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013fa8:	b590      	push	{r4, r7, lr}
 8013faa:	b08d      	sub	sp, #52	; 0x34
 8013fac:	af04      	add	r7, sp, #16
 8013fae:	6078      	str	r0, [r7, #4]
 8013fb0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d105      	bne.n	8013fc4 <tcp_input+0x1c>
 8013fb8:	4b9b      	ldr	r3, [pc, #620]	; (8014228 <tcp_input+0x280>)
 8013fba:	2283      	movs	r2, #131	; 0x83
 8013fbc:	499b      	ldr	r1, [pc, #620]	; (801422c <tcp_input+0x284>)
 8013fbe:	489c      	ldr	r0, [pc, #624]	; (8014230 <tcp_input+0x288>)
 8013fc0:	f007 ff14 	bl	801bdec <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	685b      	ldr	r3, [r3, #4]
 8013fc8:	4a9a      	ldr	r2, [pc, #616]	; (8014234 <tcp_input+0x28c>)
 8013fca:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	895b      	ldrh	r3, [r3, #10]
 8013fd0:	2b13      	cmp	r3, #19
 8013fd2:	f240 83c4 	bls.w	801475e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013fd6:	4b98      	ldr	r3, [pc, #608]	; (8014238 <tcp_input+0x290>)
 8013fd8:	695b      	ldr	r3, [r3, #20]
 8013fda:	4a97      	ldr	r2, [pc, #604]	; (8014238 <tcp_input+0x290>)
 8013fdc:	6812      	ldr	r2, [r2, #0]
 8013fde:	4611      	mov	r1, r2
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7fc f88f 	bl	8010104 <ip4_addr_isbroadcast_u32>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	f040 83ba 	bne.w	8014762 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013fee:	4b92      	ldr	r3, [pc, #584]	; (8014238 <tcp_input+0x290>)
 8013ff0:	695b      	ldr	r3, [r3, #20]
 8013ff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013ff6:	2be0      	cmp	r3, #224	; 0xe0
 8013ff8:	f000 83b3 	beq.w	8014762 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013ffc:	4b8d      	ldr	r3, [pc, #564]	; (8014234 <tcp_input+0x28c>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	899b      	ldrh	r3, [r3, #12]
 8014002:	b29b      	uxth	r3, r3
 8014004:	4618      	mov	r0, r3
 8014006:	f7fa fb11 	bl	800e62c <lwip_htons>
 801400a:	4603      	mov	r3, r0
 801400c:	0b1b      	lsrs	r3, r3, #12
 801400e:	b29b      	uxth	r3, r3
 8014010:	b2db      	uxtb	r3, r3
 8014012:	009b      	lsls	r3, r3, #2
 8014014:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014016:	7cbb      	ldrb	r3, [r7, #18]
 8014018:	2b13      	cmp	r3, #19
 801401a:	f240 83a4 	bls.w	8014766 <tcp_input+0x7be>
 801401e:	7cbb      	ldrb	r3, [r7, #18]
 8014020:	b29a      	uxth	r2, r3
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	891b      	ldrh	r3, [r3, #8]
 8014026:	429a      	cmp	r2, r3
 8014028:	f200 839d 	bhi.w	8014766 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801402c:	7cbb      	ldrb	r3, [r7, #18]
 801402e:	b29b      	uxth	r3, r3
 8014030:	3b14      	subs	r3, #20
 8014032:	b29a      	uxth	r2, r3
 8014034:	4b81      	ldr	r3, [pc, #516]	; (801423c <tcp_input+0x294>)
 8014036:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014038:	4b81      	ldr	r3, [pc, #516]	; (8014240 <tcp_input+0x298>)
 801403a:	2200      	movs	r2, #0
 801403c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	895a      	ldrh	r2, [r3, #10]
 8014042:	7cbb      	ldrb	r3, [r7, #18]
 8014044:	b29b      	uxth	r3, r3
 8014046:	429a      	cmp	r2, r3
 8014048:	d309      	bcc.n	801405e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801404a:	4b7c      	ldr	r3, [pc, #496]	; (801423c <tcp_input+0x294>)
 801404c:	881a      	ldrh	r2, [r3, #0]
 801404e:	4b7d      	ldr	r3, [pc, #500]	; (8014244 <tcp_input+0x29c>)
 8014050:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8014052:	7cbb      	ldrb	r3, [r7, #18]
 8014054:	4619      	mov	r1, r3
 8014056:	6878      	ldr	r0, [r7, #4]
 8014058:	f7fe f8f8 	bl	801224c <pbuf_remove_header>
 801405c:	e04e      	b.n	80140fc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d105      	bne.n	8014072 <tcp_input+0xca>
 8014066:	4b70      	ldr	r3, [pc, #448]	; (8014228 <tcp_input+0x280>)
 8014068:	22c2      	movs	r2, #194	; 0xc2
 801406a:	4977      	ldr	r1, [pc, #476]	; (8014248 <tcp_input+0x2a0>)
 801406c:	4870      	ldr	r0, [pc, #448]	; (8014230 <tcp_input+0x288>)
 801406e:	f007 febd 	bl	801bdec <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8014072:	2114      	movs	r1, #20
 8014074:	6878      	ldr	r0, [r7, #4]
 8014076:	f7fe f8e9 	bl	801224c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	895a      	ldrh	r2, [r3, #10]
 801407e:	4b71      	ldr	r3, [pc, #452]	; (8014244 <tcp_input+0x29c>)
 8014080:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8014082:	4b6e      	ldr	r3, [pc, #440]	; (801423c <tcp_input+0x294>)
 8014084:	881a      	ldrh	r2, [r3, #0]
 8014086:	4b6f      	ldr	r3, [pc, #444]	; (8014244 <tcp_input+0x29c>)
 8014088:	881b      	ldrh	r3, [r3, #0]
 801408a:	1ad3      	subs	r3, r2, r3
 801408c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801408e:	4b6d      	ldr	r3, [pc, #436]	; (8014244 <tcp_input+0x29c>)
 8014090:	881b      	ldrh	r3, [r3, #0]
 8014092:	4619      	mov	r1, r3
 8014094:	6878      	ldr	r0, [r7, #4]
 8014096:	f7fe f8d9 	bl	801224c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	895b      	ldrh	r3, [r3, #10]
 80140a0:	8a3a      	ldrh	r2, [r7, #16]
 80140a2:	429a      	cmp	r2, r3
 80140a4:	f200 8361 	bhi.w	801476a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	685b      	ldr	r3, [r3, #4]
 80140ae:	4a64      	ldr	r2, [pc, #400]	; (8014240 <tcp_input+0x298>)
 80140b0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	8a3a      	ldrh	r2, [r7, #16]
 80140b8:	4611      	mov	r1, r2
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7fe f8c6 	bl	801224c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	891a      	ldrh	r2, [r3, #8]
 80140c4:	8a3b      	ldrh	r3, [r7, #16]
 80140c6:	1ad3      	subs	r3, r2, r3
 80140c8:	b29a      	uxth	r2, r3
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	895b      	ldrh	r3, [r3, #10]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d005      	beq.n	80140e2 <tcp_input+0x13a>
 80140d6:	4b54      	ldr	r3, [pc, #336]	; (8014228 <tcp_input+0x280>)
 80140d8:	22df      	movs	r2, #223	; 0xdf
 80140da:	495c      	ldr	r1, [pc, #368]	; (801424c <tcp_input+0x2a4>)
 80140dc:	4854      	ldr	r0, [pc, #336]	; (8014230 <tcp_input+0x288>)
 80140de:	f007 fe85 	bl	801bdec <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	891a      	ldrh	r2, [r3, #8]
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	891b      	ldrh	r3, [r3, #8]
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d005      	beq.n	80140fc <tcp_input+0x154>
 80140f0:	4b4d      	ldr	r3, [pc, #308]	; (8014228 <tcp_input+0x280>)
 80140f2:	22e0      	movs	r2, #224	; 0xe0
 80140f4:	4956      	ldr	r1, [pc, #344]	; (8014250 <tcp_input+0x2a8>)
 80140f6:	484e      	ldr	r0, [pc, #312]	; (8014230 <tcp_input+0x288>)
 80140f8:	f007 fe78 	bl	801bdec <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80140fc:	4b4d      	ldr	r3, [pc, #308]	; (8014234 <tcp_input+0x28c>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	881b      	ldrh	r3, [r3, #0]
 8014102:	b29b      	uxth	r3, r3
 8014104:	4a4b      	ldr	r2, [pc, #300]	; (8014234 <tcp_input+0x28c>)
 8014106:	6814      	ldr	r4, [r2, #0]
 8014108:	4618      	mov	r0, r3
 801410a:	f7fa fa8f 	bl	800e62c <lwip_htons>
 801410e:	4603      	mov	r3, r0
 8014110:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8014112:	4b48      	ldr	r3, [pc, #288]	; (8014234 <tcp_input+0x28c>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	885b      	ldrh	r3, [r3, #2]
 8014118:	b29b      	uxth	r3, r3
 801411a:	4a46      	ldr	r2, [pc, #280]	; (8014234 <tcp_input+0x28c>)
 801411c:	6814      	ldr	r4, [r2, #0]
 801411e:	4618      	mov	r0, r3
 8014120:	f7fa fa84 	bl	800e62c <lwip_htons>
 8014124:	4603      	mov	r3, r0
 8014126:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014128:	4b42      	ldr	r3, [pc, #264]	; (8014234 <tcp_input+0x28c>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	685b      	ldr	r3, [r3, #4]
 801412e:	4a41      	ldr	r2, [pc, #260]	; (8014234 <tcp_input+0x28c>)
 8014130:	6814      	ldr	r4, [r2, #0]
 8014132:	4618      	mov	r0, r3
 8014134:	f7fa fa8f 	bl	800e656 <lwip_htonl>
 8014138:	4603      	mov	r3, r0
 801413a:	6063      	str	r3, [r4, #4]
 801413c:	6863      	ldr	r3, [r4, #4]
 801413e:	4a45      	ldr	r2, [pc, #276]	; (8014254 <tcp_input+0x2ac>)
 8014140:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8014142:	4b3c      	ldr	r3, [pc, #240]	; (8014234 <tcp_input+0x28c>)
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	689b      	ldr	r3, [r3, #8]
 8014148:	4a3a      	ldr	r2, [pc, #232]	; (8014234 <tcp_input+0x28c>)
 801414a:	6814      	ldr	r4, [r2, #0]
 801414c:	4618      	mov	r0, r3
 801414e:	f7fa fa82 	bl	800e656 <lwip_htonl>
 8014152:	4603      	mov	r3, r0
 8014154:	60a3      	str	r3, [r4, #8]
 8014156:	68a3      	ldr	r3, [r4, #8]
 8014158:	4a3f      	ldr	r2, [pc, #252]	; (8014258 <tcp_input+0x2b0>)
 801415a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801415c:	4b35      	ldr	r3, [pc, #212]	; (8014234 <tcp_input+0x28c>)
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	89db      	ldrh	r3, [r3, #14]
 8014162:	b29b      	uxth	r3, r3
 8014164:	4a33      	ldr	r2, [pc, #204]	; (8014234 <tcp_input+0x28c>)
 8014166:	6814      	ldr	r4, [r2, #0]
 8014168:	4618      	mov	r0, r3
 801416a:	f7fa fa5f 	bl	800e62c <lwip_htons>
 801416e:	4603      	mov	r3, r0
 8014170:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8014172:	4b30      	ldr	r3, [pc, #192]	; (8014234 <tcp_input+0x28c>)
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	899b      	ldrh	r3, [r3, #12]
 8014178:	b29b      	uxth	r3, r3
 801417a:	4618      	mov	r0, r3
 801417c:	f7fa fa56 	bl	800e62c <lwip_htons>
 8014180:	4603      	mov	r3, r0
 8014182:	b2db      	uxtb	r3, r3
 8014184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014188:	b2da      	uxtb	r2, r3
 801418a:	4b34      	ldr	r3, [pc, #208]	; (801425c <tcp_input+0x2b4>)
 801418c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	891a      	ldrh	r2, [r3, #8]
 8014192:	4b33      	ldr	r3, [pc, #204]	; (8014260 <tcp_input+0x2b8>)
 8014194:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8014196:	4b31      	ldr	r3, [pc, #196]	; (801425c <tcp_input+0x2b4>)
 8014198:	781b      	ldrb	r3, [r3, #0]
 801419a:	f003 0303 	and.w	r3, r3, #3
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d00c      	beq.n	80141bc <tcp_input+0x214>
    tcplen++;
 80141a2:	4b2f      	ldr	r3, [pc, #188]	; (8014260 <tcp_input+0x2b8>)
 80141a4:	881b      	ldrh	r3, [r3, #0]
 80141a6:	3301      	adds	r3, #1
 80141a8:	b29a      	uxth	r2, r3
 80141aa:	4b2d      	ldr	r3, [pc, #180]	; (8014260 <tcp_input+0x2b8>)
 80141ac:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	891a      	ldrh	r2, [r3, #8]
 80141b2:	4b2b      	ldr	r3, [pc, #172]	; (8014260 <tcp_input+0x2b8>)
 80141b4:	881b      	ldrh	r3, [r3, #0]
 80141b6:	429a      	cmp	r2, r3
 80141b8:	f200 82d9 	bhi.w	801476e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80141bc:	2300      	movs	r3, #0
 80141be:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80141c0:	4b28      	ldr	r3, [pc, #160]	; (8014264 <tcp_input+0x2bc>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	61fb      	str	r3, [r7, #28]
 80141c6:	e09d      	b.n	8014304 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80141c8:	69fb      	ldr	r3, [r7, #28]
 80141ca:	7d1b      	ldrb	r3, [r3, #20]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d105      	bne.n	80141dc <tcp_input+0x234>
 80141d0:	4b15      	ldr	r3, [pc, #84]	; (8014228 <tcp_input+0x280>)
 80141d2:	22fb      	movs	r2, #251	; 0xfb
 80141d4:	4924      	ldr	r1, [pc, #144]	; (8014268 <tcp_input+0x2c0>)
 80141d6:	4816      	ldr	r0, [pc, #88]	; (8014230 <tcp_input+0x288>)
 80141d8:	f007 fe08 	bl	801bdec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80141dc:	69fb      	ldr	r3, [r7, #28]
 80141de:	7d1b      	ldrb	r3, [r3, #20]
 80141e0:	2b0a      	cmp	r3, #10
 80141e2:	d105      	bne.n	80141f0 <tcp_input+0x248>
 80141e4:	4b10      	ldr	r3, [pc, #64]	; (8014228 <tcp_input+0x280>)
 80141e6:	22fc      	movs	r2, #252	; 0xfc
 80141e8:	4920      	ldr	r1, [pc, #128]	; (801426c <tcp_input+0x2c4>)
 80141ea:	4811      	ldr	r0, [pc, #68]	; (8014230 <tcp_input+0x288>)
 80141ec:	f007 fdfe 	bl	801bdec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80141f0:	69fb      	ldr	r3, [r7, #28]
 80141f2:	7d1b      	ldrb	r3, [r3, #20]
 80141f4:	2b01      	cmp	r3, #1
 80141f6:	d105      	bne.n	8014204 <tcp_input+0x25c>
 80141f8:	4b0b      	ldr	r3, [pc, #44]	; (8014228 <tcp_input+0x280>)
 80141fa:	22fd      	movs	r2, #253	; 0xfd
 80141fc:	491c      	ldr	r1, [pc, #112]	; (8014270 <tcp_input+0x2c8>)
 80141fe:	480c      	ldr	r0, [pc, #48]	; (8014230 <tcp_input+0x288>)
 8014200:	f007 fdf4 	bl	801bdec <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014204:	69fb      	ldr	r3, [r7, #28]
 8014206:	7a1b      	ldrb	r3, [r3, #8]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d033      	beq.n	8014274 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801420c:	69fb      	ldr	r3, [r7, #28]
 801420e:	7a1a      	ldrb	r2, [r3, #8]
 8014210:	4b09      	ldr	r3, [pc, #36]	; (8014238 <tcp_input+0x290>)
 8014212:	685b      	ldr	r3, [r3, #4]
 8014214:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014218:	3301      	adds	r3, #1
 801421a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801421c:	429a      	cmp	r2, r3
 801421e:	d029      	beq.n	8014274 <tcp_input+0x2cc>
      prev = pcb;
 8014220:	69fb      	ldr	r3, [r7, #28]
 8014222:	61bb      	str	r3, [r7, #24]
      continue;
 8014224:	e06b      	b.n	80142fe <tcp_input+0x356>
 8014226:	bf00      	nop
 8014228:	080215b4 	.word	0x080215b4
 801422c:	08021614 	.word	0x08021614
 8014230:	0802162c 	.word	0x0802162c
 8014234:	24003b80 	.word	0x24003b80
 8014238:	24004308 	.word	0x24004308
 801423c:	24003b84 	.word	0x24003b84
 8014240:	24003b88 	.word	0x24003b88
 8014244:	24003b86 	.word	0x24003b86
 8014248:	08021654 	.word	0x08021654
 801424c:	08021664 	.word	0x08021664
 8014250:	08021670 	.word	0x08021670
 8014254:	24003b90 	.word	0x24003b90
 8014258:	24003b94 	.word	0x24003b94
 801425c:	24003b9c 	.word	0x24003b9c
 8014260:	24003b9a 	.word	0x24003b9a
 8014264:	240071f8 	.word	0x240071f8
 8014268:	08021690 	.word	0x08021690
 801426c:	080216b8 	.word	0x080216b8
 8014270:	080216e4 	.word	0x080216e4
    }

    if (pcb->remote_port == tcphdr->src &&
 8014274:	69fb      	ldr	r3, [r7, #28]
 8014276:	8b1a      	ldrh	r2, [r3, #24]
 8014278:	4b94      	ldr	r3, [pc, #592]	; (80144cc <tcp_input+0x524>)
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	881b      	ldrh	r3, [r3, #0]
 801427e:	b29b      	uxth	r3, r3
 8014280:	429a      	cmp	r2, r3
 8014282:	d13a      	bne.n	80142fa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8014284:	69fb      	ldr	r3, [r7, #28]
 8014286:	8ada      	ldrh	r2, [r3, #22]
 8014288:	4b90      	ldr	r3, [pc, #576]	; (80144cc <tcp_input+0x524>)
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	885b      	ldrh	r3, [r3, #2]
 801428e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8014290:	429a      	cmp	r2, r3
 8014292:	d132      	bne.n	80142fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014294:	69fb      	ldr	r3, [r7, #28]
 8014296:	685a      	ldr	r2, [r3, #4]
 8014298:	4b8d      	ldr	r3, [pc, #564]	; (80144d0 <tcp_input+0x528>)
 801429a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801429c:	429a      	cmp	r2, r3
 801429e:	d12c      	bne.n	80142fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80142a0:	69fb      	ldr	r3, [r7, #28]
 80142a2:	681a      	ldr	r2, [r3, #0]
 80142a4:	4b8a      	ldr	r3, [pc, #552]	; (80144d0 <tcp_input+0x528>)
 80142a6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80142a8:	429a      	cmp	r2, r3
 80142aa:	d126      	bne.n	80142fa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80142ac:	69fb      	ldr	r3, [r7, #28]
 80142ae:	68db      	ldr	r3, [r3, #12]
 80142b0:	69fa      	ldr	r2, [r7, #28]
 80142b2:	429a      	cmp	r2, r3
 80142b4:	d106      	bne.n	80142c4 <tcp_input+0x31c>
 80142b6:	4b87      	ldr	r3, [pc, #540]	; (80144d4 <tcp_input+0x52c>)
 80142b8:	f240 120d 	movw	r2, #269	; 0x10d
 80142bc:	4986      	ldr	r1, [pc, #536]	; (80144d8 <tcp_input+0x530>)
 80142be:	4887      	ldr	r0, [pc, #540]	; (80144dc <tcp_input+0x534>)
 80142c0:	f007 fd94 	bl	801bdec <iprintf>
      if (prev != NULL) {
 80142c4:	69bb      	ldr	r3, [r7, #24]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d00a      	beq.n	80142e0 <tcp_input+0x338>
        prev->next = pcb->next;
 80142ca:	69fb      	ldr	r3, [r7, #28]
 80142cc:	68da      	ldr	r2, [r3, #12]
 80142ce:	69bb      	ldr	r3, [r7, #24]
 80142d0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80142d2:	4b83      	ldr	r3, [pc, #524]	; (80144e0 <tcp_input+0x538>)
 80142d4:	681a      	ldr	r2, [r3, #0]
 80142d6:	69fb      	ldr	r3, [r7, #28]
 80142d8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80142da:	4a81      	ldr	r2, [pc, #516]	; (80144e0 <tcp_input+0x538>)
 80142dc:	69fb      	ldr	r3, [r7, #28]
 80142de:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80142e0:	69fb      	ldr	r3, [r7, #28]
 80142e2:	68db      	ldr	r3, [r3, #12]
 80142e4:	69fa      	ldr	r2, [r7, #28]
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d111      	bne.n	801430e <tcp_input+0x366>
 80142ea:	4b7a      	ldr	r3, [pc, #488]	; (80144d4 <tcp_input+0x52c>)
 80142ec:	f240 1215 	movw	r2, #277	; 0x115
 80142f0:	497c      	ldr	r1, [pc, #496]	; (80144e4 <tcp_input+0x53c>)
 80142f2:	487a      	ldr	r0, [pc, #488]	; (80144dc <tcp_input+0x534>)
 80142f4:	f007 fd7a 	bl	801bdec <iprintf>
      break;
 80142f8:	e009      	b.n	801430e <tcp_input+0x366>
    }
    prev = pcb;
 80142fa:	69fb      	ldr	r3, [r7, #28]
 80142fc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80142fe:	69fb      	ldr	r3, [r7, #28]
 8014300:	68db      	ldr	r3, [r3, #12]
 8014302:	61fb      	str	r3, [r7, #28]
 8014304:	69fb      	ldr	r3, [r7, #28]
 8014306:	2b00      	cmp	r3, #0
 8014308:	f47f af5e 	bne.w	80141c8 <tcp_input+0x220>
 801430c:	e000      	b.n	8014310 <tcp_input+0x368>
      break;
 801430e:	bf00      	nop
  }

  if (pcb == NULL) {
 8014310:	69fb      	ldr	r3, [r7, #28]
 8014312:	2b00      	cmp	r3, #0
 8014314:	f040 8095 	bne.w	8014442 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014318:	4b73      	ldr	r3, [pc, #460]	; (80144e8 <tcp_input+0x540>)
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	61fb      	str	r3, [r7, #28]
 801431e:	e03f      	b.n	80143a0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014320:	69fb      	ldr	r3, [r7, #28]
 8014322:	7d1b      	ldrb	r3, [r3, #20]
 8014324:	2b0a      	cmp	r3, #10
 8014326:	d006      	beq.n	8014336 <tcp_input+0x38e>
 8014328:	4b6a      	ldr	r3, [pc, #424]	; (80144d4 <tcp_input+0x52c>)
 801432a:	f240 121f 	movw	r2, #287	; 0x11f
 801432e:	496f      	ldr	r1, [pc, #444]	; (80144ec <tcp_input+0x544>)
 8014330:	486a      	ldr	r0, [pc, #424]	; (80144dc <tcp_input+0x534>)
 8014332:	f007 fd5b 	bl	801bdec <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014336:	69fb      	ldr	r3, [r7, #28]
 8014338:	7a1b      	ldrb	r3, [r3, #8]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d009      	beq.n	8014352 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801433e:	69fb      	ldr	r3, [r7, #28]
 8014340:	7a1a      	ldrb	r2, [r3, #8]
 8014342:	4b63      	ldr	r3, [pc, #396]	; (80144d0 <tcp_input+0x528>)
 8014344:	685b      	ldr	r3, [r3, #4]
 8014346:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801434a:	3301      	adds	r3, #1
 801434c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801434e:	429a      	cmp	r2, r3
 8014350:	d122      	bne.n	8014398 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8014352:	69fb      	ldr	r3, [r7, #28]
 8014354:	8b1a      	ldrh	r2, [r3, #24]
 8014356:	4b5d      	ldr	r3, [pc, #372]	; (80144cc <tcp_input+0x524>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	881b      	ldrh	r3, [r3, #0]
 801435c:	b29b      	uxth	r3, r3
 801435e:	429a      	cmp	r2, r3
 8014360:	d11b      	bne.n	801439a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8014362:	69fb      	ldr	r3, [r7, #28]
 8014364:	8ada      	ldrh	r2, [r3, #22]
 8014366:	4b59      	ldr	r3, [pc, #356]	; (80144cc <tcp_input+0x524>)
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	885b      	ldrh	r3, [r3, #2]
 801436c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801436e:	429a      	cmp	r2, r3
 8014370:	d113      	bne.n	801439a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014372:	69fb      	ldr	r3, [r7, #28]
 8014374:	685a      	ldr	r2, [r3, #4]
 8014376:	4b56      	ldr	r3, [pc, #344]	; (80144d0 <tcp_input+0x528>)
 8014378:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801437a:	429a      	cmp	r2, r3
 801437c:	d10d      	bne.n	801439a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801437e:	69fb      	ldr	r3, [r7, #28]
 8014380:	681a      	ldr	r2, [r3, #0]
 8014382:	4b53      	ldr	r3, [pc, #332]	; (80144d0 <tcp_input+0x528>)
 8014384:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014386:	429a      	cmp	r2, r3
 8014388:	d107      	bne.n	801439a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801438a:	69f8      	ldr	r0, [r7, #28]
 801438c:	f000 fb54 	bl	8014a38 <tcp_timewait_input>
        }
        pbuf_free(p);
 8014390:	6878      	ldr	r0, [r7, #4]
 8014392:	f7fd ffe1 	bl	8012358 <pbuf_free>
        return;
 8014396:	e1f0      	b.n	801477a <tcp_input+0x7d2>
        continue;
 8014398:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801439a:	69fb      	ldr	r3, [r7, #28]
 801439c:	68db      	ldr	r3, [r3, #12]
 801439e:	61fb      	str	r3, [r7, #28]
 80143a0:	69fb      	ldr	r3, [r7, #28]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d1bc      	bne.n	8014320 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80143a6:	2300      	movs	r3, #0
 80143a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80143aa:	4b51      	ldr	r3, [pc, #324]	; (80144f0 <tcp_input+0x548>)
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	617b      	str	r3, [r7, #20]
 80143b0:	e02a      	b.n	8014408 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80143b2:	697b      	ldr	r3, [r7, #20]
 80143b4:	7a1b      	ldrb	r3, [r3, #8]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d00c      	beq.n	80143d4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80143ba:	697b      	ldr	r3, [r7, #20]
 80143bc:	7a1a      	ldrb	r2, [r3, #8]
 80143be:	4b44      	ldr	r3, [pc, #272]	; (80144d0 <tcp_input+0x528>)
 80143c0:	685b      	ldr	r3, [r3, #4]
 80143c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80143c6:	3301      	adds	r3, #1
 80143c8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d002      	beq.n	80143d4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80143ce:	697b      	ldr	r3, [r7, #20]
 80143d0:	61bb      	str	r3, [r7, #24]
        continue;
 80143d2:	e016      	b.n	8014402 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80143d4:	697b      	ldr	r3, [r7, #20]
 80143d6:	8ada      	ldrh	r2, [r3, #22]
 80143d8:	4b3c      	ldr	r3, [pc, #240]	; (80144cc <tcp_input+0x524>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	885b      	ldrh	r3, [r3, #2]
 80143de:	b29b      	uxth	r3, r3
 80143e0:	429a      	cmp	r2, r3
 80143e2:	d10c      	bne.n	80143fe <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	681a      	ldr	r2, [r3, #0]
 80143e8:	4b39      	ldr	r3, [pc, #228]	; (80144d0 <tcp_input+0x528>)
 80143ea:	695b      	ldr	r3, [r3, #20]
 80143ec:	429a      	cmp	r2, r3
 80143ee:	d00f      	beq.n	8014410 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d00d      	beq.n	8014412 <tcp_input+0x46a>
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d009      	beq.n	8014412 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80143fe:	697b      	ldr	r3, [r7, #20]
 8014400:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	68db      	ldr	r3, [r3, #12]
 8014406:	617b      	str	r3, [r7, #20]
 8014408:	697b      	ldr	r3, [r7, #20]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d1d1      	bne.n	80143b2 <tcp_input+0x40a>
 801440e:	e000      	b.n	8014412 <tcp_input+0x46a>
            break;
 8014410:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d014      	beq.n	8014442 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014418:	69bb      	ldr	r3, [r7, #24]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d00a      	beq.n	8014434 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	68da      	ldr	r2, [r3, #12]
 8014422:	69bb      	ldr	r3, [r7, #24]
 8014424:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8014426:	4b32      	ldr	r3, [pc, #200]	; (80144f0 <tcp_input+0x548>)
 8014428:	681a      	ldr	r2, [r3, #0]
 801442a:	697b      	ldr	r3, [r7, #20]
 801442c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801442e:	4a30      	ldr	r2, [pc, #192]	; (80144f0 <tcp_input+0x548>)
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014434:	6978      	ldr	r0, [r7, #20]
 8014436:	f000 fa01 	bl	801483c <tcp_listen_input>
      }
      pbuf_free(p);
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f7fd ff8c 	bl	8012358 <pbuf_free>
      return;
 8014440:	e19b      	b.n	801477a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014442:	69fb      	ldr	r3, [r7, #28]
 8014444:	2b00      	cmp	r3, #0
 8014446:	f000 8160 	beq.w	801470a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801444a:	4b2a      	ldr	r3, [pc, #168]	; (80144f4 <tcp_input+0x54c>)
 801444c:	2200      	movs	r2, #0
 801444e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	891a      	ldrh	r2, [r3, #8]
 8014454:	4b27      	ldr	r3, [pc, #156]	; (80144f4 <tcp_input+0x54c>)
 8014456:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8014458:	4a26      	ldr	r2, [pc, #152]	; (80144f4 <tcp_input+0x54c>)
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801445e:	4b1b      	ldr	r3, [pc, #108]	; (80144cc <tcp_input+0x524>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	4a24      	ldr	r2, [pc, #144]	; (80144f4 <tcp_input+0x54c>)
 8014464:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8014466:	4b24      	ldr	r3, [pc, #144]	; (80144f8 <tcp_input+0x550>)
 8014468:	2200      	movs	r2, #0
 801446a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801446c:	4b23      	ldr	r3, [pc, #140]	; (80144fc <tcp_input+0x554>)
 801446e:	2200      	movs	r2, #0
 8014470:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014472:	4b23      	ldr	r3, [pc, #140]	; (8014500 <tcp_input+0x558>)
 8014474:	2200      	movs	r2, #0
 8014476:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8014478:	4b22      	ldr	r3, [pc, #136]	; (8014504 <tcp_input+0x55c>)
 801447a:	781b      	ldrb	r3, [r3, #0]
 801447c:	f003 0308 	and.w	r3, r3, #8
 8014480:	2b00      	cmp	r3, #0
 8014482:	d006      	beq.n	8014492 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	7b5b      	ldrb	r3, [r3, #13]
 8014488:	f043 0301 	orr.w	r3, r3, #1
 801448c:	b2da      	uxtb	r2, r3
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014492:	69fb      	ldr	r3, [r7, #28]
 8014494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014496:	2b00      	cmp	r3, #0
 8014498:	d038      	beq.n	801450c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801449a:	69f8      	ldr	r0, [r7, #28]
 801449c:	f7ff f93e 	bl	801371c <tcp_process_refused_data>
 80144a0:	4603      	mov	r3, r0
 80144a2:	f113 0f0d 	cmn.w	r3, #13
 80144a6:	d007      	beq.n	80144b8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80144a8:	69fb      	ldr	r3, [r7, #28]
 80144aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d02d      	beq.n	801450c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80144b0:	4b15      	ldr	r3, [pc, #84]	; (8014508 <tcp_input+0x560>)
 80144b2:	881b      	ldrh	r3, [r3, #0]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d029      	beq.n	801450c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80144b8:	69fb      	ldr	r3, [r7, #28]
 80144ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80144bc:	2b00      	cmp	r3, #0
 80144be:	f040 8104 	bne.w	80146ca <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80144c2:	69f8      	ldr	r0, [r7, #28]
 80144c4:	f003 f9be 	bl	8017844 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80144c8:	e0ff      	b.n	80146ca <tcp_input+0x722>
 80144ca:	bf00      	nop
 80144cc:	24003b80 	.word	0x24003b80
 80144d0:	24004308 	.word	0x24004308
 80144d4:	080215b4 	.word	0x080215b4
 80144d8:	0802170c 	.word	0x0802170c
 80144dc:	0802162c 	.word	0x0802162c
 80144e0:	240071f8 	.word	0x240071f8
 80144e4:	08021738 	.word	0x08021738
 80144e8:	24007208 	.word	0x24007208
 80144ec:	08021764 	.word	0x08021764
 80144f0:	24007200 	.word	0x24007200
 80144f4:	24003b70 	.word	0x24003b70
 80144f8:	24003ba0 	.word	0x24003ba0
 80144fc:	24003b9d 	.word	0x24003b9d
 8014500:	24003b98 	.word	0x24003b98
 8014504:	24003b9c 	.word	0x24003b9c
 8014508:	24003b9a 	.word	0x24003b9a
      }
    }
    tcp_input_pcb = pcb;
 801450c:	4a9c      	ldr	r2, [pc, #624]	; (8014780 <tcp_input+0x7d8>)
 801450e:	69fb      	ldr	r3, [r7, #28]
 8014510:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8014512:	69f8      	ldr	r0, [r7, #28]
 8014514:	f000 fb0a 	bl	8014b2c <tcp_process>
 8014518:	4603      	mov	r3, r0
 801451a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801451c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014520:	f113 0f0d 	cmn.w	r3, #13
 8014524:	f000 80d3 	beq.w	80146ce <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8014528:	4b96      	ldr	r3, [pc, #600]	; (8014784 <tcp_input+0x7dc>)
 801452a:	781b      	ldrb	r3, [r3, #0]
 801452c:	f003 0308 	and.w	r3, r3, #8
 8014530:	2b00      	cmp	r3, #0
 8014532:	d015      	beq.n	8014560 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014534:	69fb      	ldr	r3, [r7, #28]
 8014536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801453a:	2b00      	cmp	r3, #0
 801453c:	d008      	beq.n	8014550 <tcp_input+0x5a8>
 801453e:	69fb      	ldr	r3, [r7, #28]
 8014540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014544:	69fa      	ldr	r2, [r7, #28]
 8014546:	6912      	ldr	r2, [r2, #16]
 8014548:	f06f 010d 	mvn.w	r1, #13
 801454c:	4610      	mov	r0, r2
 801454e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014550:	69f9      	ldr	r1, [r7, #28]
 8014552:	488d      	ldr	r0, [pc, #564]	; (8014788 <tcp_input+0x7e0>)
 8014554:	f7ff fbb0 	bl	8013cb8 <tcp_pcb_remove>
        tcp_free(pcb);
 8014558:	69f8      	ldr	r0, [r7, #28]
 801455a:	f7fe f99d 	bl	8012898 <tcp_free>
 801455e:	e0c1      	b.n	80146e4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8014560:	2300      	movs	r3, #0
 8014562:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014564:	4b89      	ldr	r3, [pc, #548]	; (801478c <tcp_input+0x7e4>)
 8014566:	881b      	ldrh	r3, [r3, #0]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d01d      	beq.n	80145a8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801456c:	4b87      	ldr	r3, [pc, #540]	; (801478c <tcp_input+0x7e4>)
 801456e:	881b      	ldrh	r3, [r3, #0]
 8014570:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8014572:	69fb      	ldr	r3, [r7, #28]
 8014574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014578:	2b00      	cmp	r3, #0
 801457a:	d00a      	beq.n	8014592 <tcp_input+0x5ea>
 801457c:	69fb      	ldr	r3, [r7, #28]
 801457e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014582:	69fa      	ldr	r2, [r7, #28]
 8014584:	6910      	ldr	r0, [r2, #16]
 8014586:	89fa      	ldrh	r2, [r7, #14]
 8014588:	69f9      	ldr	r1, [r7, #28]
 801458a:	4798      	blx	r3
 801458c:	4603      	mov	r3, r0
 801458e:	74fb      	strb	r3, [r7, #19]
 8014590:	e001      	b.n	8014596 <tcp_input+0x5ee>
 8014592:	2300      	movs	r3, #0
 8014594:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014596:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801459a:	f113 0f0d 	cmn.w	r3, #13
 801459e:	f000 8098 	beq.w	80146d2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80145a2:	4b7a      	ldr	r3, [pc, #488]	; (801478c <tcp_input+0x7e4>)
 80145a4:	2200      	movs	r2, #0
 80145a6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80145a8:	69f8      	ldr	r0, [r7, #28]
 80145aa:	f000 f907 	bl	80147bc <tcp_input_delayed_close>
 80145ae:	4603      	mov	r3, r0
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	f040 8090 	bne.w	80146d6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80145b6:	4b76      	ldr	r3, [pc, #472]	; (8014790 <tcp_input+0x7e8>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d041      	beq.n	8014642 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80145be:	69fb      	ldr	r3, [r7, #28]
 80145c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d006      	beq.n	80145d4 <tcp_input+0x62c>
 80145c6:	4b73      	ldr	r3, [pc, #460]	; (8014794 <tcp_input+0x7ec>)
 80145c8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80145cc:	4972      	ldr	r1, [pc, #456]	; (8014798 <tcp_input+0x7f0>)
 80145ce:	4873      	ldr	r0, [pc, #460]	; (801479c <tcp_input+0x7f4>)
 80145d0:	f007 fc0c 	bl	801bdec <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80145d4:	69fb      	ldr	r3, [r7, #28]
 80145d6:	8b5b      	ldrh	r3, [r3, #26]
 80145d8:	f003 0310 	and.w	r3, r3, #16
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d008      	beq.n	80145f2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80145e0:	4b6b      	ldr	r3, [pc, #428]	; (8014790 <tcp_input+0x7e8>)
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	4618      	mov	r0, r3
 80145e6:	f7fd feb7 	bl	8012358 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80145ea:	69f8      	ldr	r0, [r7, #28]
 80145ec:	f7fe fc3c 	bl	8012e68 <tcp_abort>
            goto aborted;
 80145f0:	e078      	b.n	80146e4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80145f2:	69fb      	ldr	r3, [r7, #28]
 80145f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d00c      	beq.n	8014616 <tcp_input+0x66e>
 80145fc:	69fb      	ldr	r3, [r7, #28]
 80145fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014602:	69fb      	ldr	r3, [r7, #28]
 8014604:	6918      	ldr	r0, [r3, #16]
 8014606:	4b62      	ldr	r3, [pc, #392]	; (8014790 <tcp_input+0x7e8>)
 8014608:	681a      	ldr	r2, [r3, #0]
 801460a:	2300      	movs	r3, #0
 801460c:	69f9      	ldr	r1, [r7, #28]
 801460e:	47a0      	blx	r4
 8014610:	4603      	mov	r3, r0
 8014612:	74fb      	strb	r3, [r7, #19]
 8014614:	e008      	b.n	8014628 <tcp_input+0x680>
 8014616:	4b5e      	ldr	r3, [pc, #376]	; (8014790 <tcp_input+0x7e8>)
 8014618:	681a      	ldr	r2, [r3, #0]
 801461a:	2300      	movs	r3, #0
 801461c:	69f9      	ldr	r1, [r7, #28]
 801461e:	2000      	movs	r0, #0
 8014620:	f7ff f952 	bl	80138c8 <tcp_recv_null>
 8014624:	4603      	mov	r3, r0
 8014626:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014628:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801462c:	f113 0f0d 	cmn.w	r3, #13
 8014630:	d053      	beq.n	80146da <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014632:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d003      	beq.n	8014642 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801463a:	4b55      	ldr	r3, [pc, #340]	; (8014790 <tcp_input+0x7e8>)
 801463c:	681a      	ldr	r2, [r3, #0]
 801463e:	69fb      	ldr	r3, [r7, #28]
 8014640:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014642:	4b50      	ldr	r3, [pc, #320]	; (8014784 <tcp_input+0x7dc>)
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	f003 0320 	and.w	r3, r3, #32
 801464a:	2b00      	cmp	r3, #0
 801464c:	d030      	beq.n	80146b0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801464e:	69fb      	ldr	r3, [r7, #28]
 8014650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014652:	2b00      	cmp	r3, #0
 8014654:	d009      	beq.n	801466a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014656:	69fb      	ldr	r3, [r7, #28]
 8014658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801465a:	7b5a      	ldrb	r2, [r3, #13]
 801465c:	69fb      	ldr	r3, [r7, #28]
 801465e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014660:	f042 0220 	orr.w	r2, r2, #32
 8014664:	b2d2      	uxtb	r2, r2
 8014666:	735a      	strb	r2, [r3, #13]
 8014668:	e022      	b.n	80146b0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801466a:	69fb      	ldr	r3, [r7, #28]
 801466c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801466e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014672:	d005      	beq.n	8014680 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8014674:	69fb      	ldr	r3, [r7, #28]
 8014676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014678:	3301      	adds	r3, #1
 801467a:	b29a      	uxth	r2, r3
 801467c:	69fb      	ldr	r3, [r7, #28]
 801467e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014680:	69fb      	ldr	r3, [r7, #28]
 8014682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014686:	2b00      	cmp	r3, #0
 8014688:	d00b      	beq.n	80146a2 <tcp_input+0x6fa>
 801468a:	69fb      	ldr	r3, [r7, #28]
 801468c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014690:	69fb      	ldr	r3, [r7, #28]
 8014692:	6918      	ldr	r0, [r3, #16]
 8014694:	2300      	movs	r3, #0
 8014696:	2200      	movs	r2, #0
 8014698:	69f9      	ldr	r1, [r7, #28]
 801469a:	47a0      	blx	r4
 801469c:	4603      	mov	r3, r0
 801469e:	74fb      	strb	r3, [r7, #19]
 80146a0:	e001      	b.n	80146a6 <tcp_input+0x6fe>
 80146a2:	2300      	movs	r3, #0
 80146a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80146a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80146aa:	f113 0f0d 	cmn.w	r3, #13
 80146ae:	d016      	beq.n	80146de <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80146b0:	4b33      	ldr	r3, [pc, #204]	; (8014780 <tcp_input+0x7d8>)
 80146b2:	2200      	movs	r2, #0
 80146b4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80146b6:	69f8      	ldr	r0, [r7, #28]
 80146b8:	f000 f880 	bl	80147bc <tcp_input_delayed_close>
 80146bc:	4603      	mov	r3, r0
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d10f      	bne.n	80146e2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80146c2:	69f8      	ldr	r0, [r7, #28]
 80146c4:	f002 fab8 	bl	8016c38 <tcp_output>
 80146c8:	e00c      	b.n	80146e4 <tcp_input+0x73c>
        goto aborted;
 80146ca:	bf00      	nop
 80146cc:	e00a      	b.n	80146e4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80146ce:	bf00      	nop
 80146d0:	e008      	b.n	80146e4 <tcp_input+0x73c>
              goto aborted;
 80146d2:	bf00      	nop
 80146d4:	e006      	b.n	80146e4 <tcp_input+0x73c>
          goto aborted;
 80146d6:	bf00      	nop
 80146d8:	e004      	b.n	80146e4 <tcp_input+0x73c>
            goto aborted;
 80146da:	bf00      	nop
 80146dc:	e002      	b.n	80146e4 <tcp_input+0x73c>
              goto aborted;
 80146de:	bf00      	nop
 80146e0:	e000      	b.n	80146e4 <tcp_input+0x73c>
          goto aborted;
 80146e2:	bf00      	nop
    tcp_input_pcb = NULL;
 80146e4:	4b26      	ldr	r3, [pc, #152]	; (8014780 <tcp_input+0x7d8>)
 80146e6:	2200      	movs	r2, #0
 80146e8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80146ea:	4b29      	ldr	r3, [pc, #164]	; (8014790 <tcp_input+0x7e8>)
 80146ec:	2200      	movs	r2, #0
 80146ee:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80146f0:	4b2b      	ldr	r3, [pc, #172]	; (80147a0 <tcp_input+0x7f8>)
 80146f2:	685b      	ldr	r3, [r3, #4]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d03f      	beq.n	8014778 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80146f8:	4b29      	ldr	r3, [pc, #164]	; (80147a0 <tcp_input+0x7f8>)
 80146fa:	685b      	ldr	r3, [r3, #4]
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7fd fe2b 	bl	8012358 <pbuf_free>
      inseg.p = NULL;
 8014702:	4b27      	ldr	r3, [pc, #156]	; (80147a0 <tcp_input+0x7f8>)
 8014704:	2200      	movs	r2, #0
 8014706:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014708:	e036      	b.n	8014778 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801470a:	4b26      	ldr	r3, [pc, #152]	; (80147a4 <tcp_input+0x7fc>)
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	899b      	ldrh	r3, [r3, #12]
 8014710:	b29b      	uxth	r3, r3
 8014712:	4618      	mov	r0, r3
 8014714:	f7f9 ff8a 	bl	800e62c <lwip_htons>
 8014718:	4603      	mov	r3, r0
 801471a:	b2db      	uxtb	r3, r3
 801471c:	f003 0304 	and.w	r3, r3, #4
 8014720:	2b00      	cmp	r3, #0
 8014722:	d118      	bne.n	8014756 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014724:	4b20      	ldr	r3, [pc, #128]	; (80147a8 <tcp_input+0x800>)
 8014726:	6819      	ldr	r1, [r3, #0]
 8014728:	4b20      	ldr	r3, [pc, #128]	; (80147ac <tcp_input+0x804>)
 801472a:	881b      	ldrh	r3, [r3, #0]
 801472c:	461a      	mov	r2, r3
 801472e:	4b20      	ldr	r3, [pc, #128]	; (80147b0 <tcp_input+0x808>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014734:	4b1b      	ldr	r3, [pc, #108]	; (80147a4 <tcp_input+0x7fc>)
 8014736:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014738:	885b      	ldrh	r3, [r3, #2]
 801473a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801473c:	4a19      	ldr	r2, [pc, #100]	; (80147a4 <tcp_input+0x7fc>)
 801473e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014740:	8812      	ldrh	r2, [r2, #0]
 8014742:	b292      	uxth	r2, r2
 8014744:	9202      	str	r2, [sp, #8]
 8014746:	9301      	str	r3, [sp, #4]
 8014748:	4b1a      	ldr	r3, [pc, #104]	; (80147b4 <tcp_input+0x80c>)
 801474a:	9300      	str	r3, [sp, #0]
 801474c:	4b1a      	ldr	r3, [pc, #104]	; (80147b8 <tcp_input+0x810>)
 801474e:	4602      	mov	r2, r0
 8014750:	2000      	movs	r0, #0
 8014752:	f003 f825 	bl	80177a0 <tcp_rst>
    pbuf_free(p);
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f7fd fdfe 	bl	8012358 <pbuf_free>
  return;
 801475c:	e00c      	b.n	8014778 <tcp_input+0x7d0>
    goto dropped;
 801475e:	bf00      	nop
 8014760:	e006      	b.n	8014770 <tcp_input+0x7c8>
    goto dropped;
 8014762:	bf00      	nop
 8014764:	e004      	b.n	8014770 <tcp_input+0x7c8>
    goto dropped;
 8014766:	bf00      	nop
 8014768:	e002      	b.n	8014770 <tcp_input+0x7c8>
      goto dropped;
 801476a:	bf00      	nop
 801476c:	e000      	b.n	8014770 <tcp_input+0x7c8>
      goto dropped;
 801476e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f7fd fdf1 	bl	8012358 <pbuf_free>
 8014776:	e000      	b.n	801477a <tcp_input+0x7d2>
  return;
 8014778:	bf00      	nop
}
 801477a:	3724      	adds	r7, #36	; 0x24
 801477c:	46bd      	mov	sp, r7
 801477e:	bd90      	pop	{r4, r7, pc}
 8014780:	2400720c 	.word	0x2400720c
 8014784:	24003b9d 	.word	0x24003b9d
 8014788:	240071f8 	.word	0x240071f8
 801478c:	24003b98 	.word	0x24003b98
 8014790:	24003ba0 	.word	0x24003ba0
 8014794:	080215b4 	.word	0x080215b4
 8014798:	08021794 	.word	0x08021794
 801479c:	0802162c 	.word	0x0802162c
 80147a0:	24003b70 	.word	0x24003b70
 80147a4:	24003b80 	.word	0x24003b80
 80147a8:	24003b94 	.word	0x24003b94
 80147ac:	24003b9a 	.word	0x24003b9a
 80147b0:	24003b90 	.word	0x24003b90
 80147b4:	24004318 	.word	0x24004318
 80147b8:	2400431c 	.word	0x2400431c

080147bc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b082      	sub	sp, #8
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d106      	bne.n	80147d8 <tcp_input_delayed_close+0x1c>
 80147ca:	4b17      	ldr	r3, [pc, #92]	; (8014828 <tcp_input_delayed_close+0x6c>)
 80147cc:	f240 225a 	movw	r2, #602	; 0x25a
 80147d0:	4916      	ldr	r1, [pc, #88]	; (801482c <tcp_input_delayed_close+0x70>)
 80147d2:	4817      	ldr	r0, [pc, #92]	; (8014830 <tcp_input_delayed_close+0x74>)
 80147d4:	f007 fb0a 	bl	801bdec <iprintf>

  if (recv_flags & TF_CLOSED) {
 80147d8:	4b16      	ldr	r3, [pc, #88]	; (8014834 <tcp_input_delayed_close+0x78>)
 80147da:	781b      	ldrb	r3, [r3, #0]
 80147dc:	f003 0310 	and.w	r3, r3, #16
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d01c      	beq.n	801481e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	8b5b      	ldrh	r3, [r3, #26]
 80147e8:	f003 0310 	and.w	r3, r3, #16
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d10d      	bne.n	801480c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d008      	beq.n	801480c <tcp_input_delayed_close+0x50>
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014800:	687a      	ldr	r2, [r7, #4]
 8014802:	6912      	ldr	r2, [r2, #16]
 8014804:	f06f 010e 	mvn.w	r1, #14
 8014808:	4610      	mov	r0, r2
 801480a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801480c:	6879      	ldr	r1, [r7, #4]
 801480e:	480a      	ldr	r0, [pc, #40]	; (8014838 <tcp_input_delayed_close+0x7c>)
 8014810:	f7ff fa52 	bl	8013cb8 <tcp_pcb_remove>
    tcp_free(pcb);
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f7fe f83f 	bl	8012898 <tcp_free>
    return 1;
 801481a:	2301      	movs	r3, #1
 801481c:	e000      	b.n	8014820 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801481e:	2300      	movs	r3, #0
}
 8014820:	4618      	mov	r0, r3
 8014822:	3708      	adds	r7, #8
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	080215b4 	.word	0x080215b4
 801482c:	080217b0 	.word	0x080217b0
 8014830:	0802162c 	.word	0x0802162c
 8014834:	24003b9d 	.word	0x24003b9d
 8014838:	240071f8 	.word	0x240071f8

0801483c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801483c:	b590      	push	{r4, r7, lr}
 801483e:	b08b      	sub	sp, #44	; 0x2c
 8014840:	af04      	add	r7, sp, #16
 8014842:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014844:	4b6f      	ldr	r3, [pc, #444]	; (8014a04 <tcp_listen_input+0x1c8>)
 8014846:	781b      	ldrb	r3, [r3, #0]
 8014848:	f003 0304 	and.w	r3, r3, #4
 801484c:	2b00      	cmp	r3, #0
 801484e:	f040 80d2 	bne.w	80149f6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d106      	bne.n	8014866 <tcp_listen_input+0x2a>
 8014858:	4b6b      	ldr	r3, [pc, #428]	; (8014a08 <tcp_listen_input+0x1cc>)
 801485a:	f240 2281 	movw	r2, #641	; 0x281
 801485e:	496b      	ldr	r1, [pc, #428]	; (8014a0c <tcp_listen_input+0x1d0>)
 8014860:	486b      	ldr	r0, [pc, #428]	; (8014a10 <tcp_listen_input+0x1d4>)
 8014862:	f007 fac3 	bl	801bdec <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014866:	4b67      	ldr	r3, [pc, #412]	; (8014a04 <tcp_listen_input+0x1c8>)
 8014868:	781b      	ldrb	r3, [r3, #0]
 801486a:	f003 0310 	and.w	r3, r3, #16
 801486e:	2b00      	cmp	r3, #0
 8014870:	d019      	beq.n	80148a6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014872:	4b68      	ldr	r3, [pc, #416]	; (8014a14 <tcp_listen_input+0x1d8>)
 8014874:	6819      	ldr	r1, [r3, #0]
 8014876:	4b68      	ldr	r3, [pc, #416]	; (8014a18 <tcp_listen_input+0x1dc>)
 8014878:	881b      	ldrh	r3, [r3, #0]
 801487a:	461a      	mov	r2, r3
 801487c:	4b67      	ldr	r3, [pc, #412]	; (8014a1c <tcp_listen_input+0x1e0>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014882:	4b67      	ldr	r3, [pc, #412]	; (8014a20 <tcp_listen_input+0x1e4>)
 8014884:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014886:	885b      	ldrh	r3, [r3, #2]
 8014888:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801488a:	4a65      	ldr	r2, [pc, #404]	; (8014a20 <tcp_listen_input+0x1e4>)
 801488c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801488e:	8812      	ldrh	r2, [r2, #0]
 8014890:	b292      	uxth	r2, r2
 8014892:	9202      	str	r2, [sp, #8]
 8014894:	9301      	str	r3, [sp, #4]
 8014896:	4b63      	ldr	r3, [pc, #396]	; (8014a24 <tcp_listen_input+0x1e8>)
 8014898:	9300      	str	r3, [sp, #0]
 801489a:	4b63      	ldr	r3, [pc, #396]	; (8014a28 <tcp_listen_input+0x1ec>)
 801489c:	4602      	mov	r2, r0
 801489e:	6878      	ldr	r0, [r7, #4]
 80148a0:	f002 ff7e 	bl	80177a0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80148a4:	e0a9      	b.n	80149fa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80148a6:	4b57      	ldr	r3, [pc, #348]	; (8014a04 <tcp_listen_input+0x1c8>)
 80148a8:	781b      	ldrb	r3, [r3, #0]
 80148aa:	f003 0302 	and.w	r3, r3, #2
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	f000 80a3 	beq.w	80149fa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	7d5b      	ldrb	r3, [r3, #21]
 80148b8:	4618      	mov	r0, r3
 80148ba:	f7ff f929 	bl	8013b10 <tcp_alloc>
 80148be:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80148c0:	697b      	ldr	r3, [r7, #20]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d111      	bne.n	80148ea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	699b      	ldr	r3, [r3, #24]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d00a      	beq.n	80148e4 <tcp_listen_input+0xa8>
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	699b      	ldr	r3, [r3, #24]
 80148d2:	687a      	ldr	r2, [r7, #4]
 80148d4:	6910      	ldr	r0, [r2, #16]
 80148d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80148da:	2100      	movs	r1, #0
 80148dc:	4798      	blx	r3
 80148de:	4603      	mov	r3, r0
 80148e0:	73bb      	strb	r3, [r7, #14]
      return;
 80148e2:	e08b      	b.n	80149fc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80148e4:	23f0      	movs	r3, #240	; 0xf0
 80148e6:	73bb      	strb	r3, [r7, #14]
      return;
 80148e8:	e088      	b.n	80149fc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80148ea:	4b50      	ldr	r3, [pc, #320]	; (8014a2c <tcp_listen_input+0x1f0>)
 80148ec:	695a      	ldr	r2, [r3, #20]
 80148ee:	697b      	ldr	r3, [r7, #20]
 80148f0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80148f2:	4b4e      	ldr	r3, [pc, #312]	; (8014a2c <tcp_listen_input+0x1f0>)
 80148f4:	691a      	ldr	r2, [r3, #16]
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	8ada      	ldrh	r2, [r3, #22]
 80148fe:	697b      	ldr	r3, [r7, #20]
 8014900:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014902:	4b47      	ldr	r3, [pc, #284]	; (8014a20 <tcp_listen_input+0x1e4>)
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	881b      	ldrh	r3, [r3, #0]
 8014908:	b29a      	uxth	r2, r3
 801490a:	697b      	ldr	r3, [r7, #20]
 801490c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801490e:	697b      	ldr	r3, [r7, #20]
 8014910:	2203      	movs	r2, #3
 8014912:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014914:	4b41      	ldr	r3, [pc, #260]	; (8014a1c <tcp_listen_input+0x1e0>)
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	1c5a      	adds	r2, r3, #1
 801491a:	697b      	ldr	r3, [r7, #20]
 801491c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801491e:	697b      	ldr	r3, [r7, #20]
 8014920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014922:	697b      	ldr	r3, [r7, #20]
 8014924:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8014926:	6978      	ldr	r0, [r7, #20]
 8014928:	f7ff fa5a 	bl	8013de0 <tcp_next_iss>
 801492c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801492e:	697b      	ldr	r3, [r7, #20]
 8014930:	693a      	ldr	r2, [r7, #16]
 8014932:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8014934:	697b      	ldr	r3, [r7, #20]
 8014936:	693a      	ldr	r2, [r7, #16]
 8014938:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801493a:	697b      	ldr	r3, [r7, #20]
 801493c:	693a      	ldr	r2, [r7, #16]
 801493e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014940:	697b      	ldr	r3, [r7, #20]
 8014942:	693a      	ldr	r2, [r7, #16]
 8014944:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014946:	4b35      	ldr	r3, [pc, #212]	; (8014a1c <tcp_listen_input+0x1e0>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	1e5a      	subs	r2, r3, #1
 801494c:	697b      	ldr	r3, [r7, #20]
 801494e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	691a      	ldr	r2, [r3, #16]
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014958:	697b      	ldr	r3, [r7, #20]
 801495a:	687a      	ldr	r2, [r7, #4]
 801495c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	7a5b      	ldrb	r3, [r3, #9]
 8014962:	f003 030c 	and.w	r3, r3, #12
 8014966:	b2da      	uxtb	r2, r3
 8014968:	697b      	ldr	r3, [r7, #20]
 801496a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	7a1a      	ldrb	r2, [r3, #8]
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014974:	4b2e      	ldr	r3, [pc, #184]	; (8014a30 <tcp_listen_input+0x1f4>)
 8014976:	681a      	ldr	r2, [r3, #0]
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	60da      	str	r2, [r3, #12]
 801497c:	4a2c      	ldr	r2, [pc, #176]	; (8014a30 <tcp_listen_input+0x1f4>)
 801497e:	697b      	ldr	r3, [r7, #20]
 8014980:	6013      	str	r3, [r2, #0]
 8014982:	f003 f8cf 	bl	8017b24 <tcp_timer_needed>
 8014986:	4b2b      	ldr	r3, [pc, #172]	; (8014a34 <tcp_listen_input+0x1f8>)
 8014988:	2201      	movs	r2, #1
 801498a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801498c:	6978      	ldr	r0, [r7, #20]
 801498e:	f001 fd8d 	bl	80164ac <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014992:	4b23      	ldr	r3, [pc, #140]	; (8014a20 <tcp_listen_input+0x1e4>)
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	89db      	ldrh	r3, [r3, #14]
 8014998:	b29a      	uxth	r2, r3
 801499a:	697b      	ldr	r3, [r7, #20]
 801499c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80149a0:	697b      	ldr	r3, [r7, #20]
 80149a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80149a6:	697b      	ldr	r3, [r7, #20]
 80149a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80149ac:	697b      	ldr	r3, [r7, #20]
 80149ae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80149b0:	697b      	ldr	r3, [r7, #20]
 80149b2:	3304      	adds	r3, #4
 80149b4:	4618      	mov	r0, r3
 80149b6:	f7fb f90f 	bl	800fbd8 <ip4_route>
 80149ba:	4601      	mov	r1, r0
 80149bc:	697b      	ldr	r3, [r7, #20]
 80149be:	3304      	adds	r3, #4
 80149c0:	461a      	mov	r2, r3
 80149c2:	4620      	mov	r0, r4
 80149c4:	f7ff fa32 	bl	8013e2c <tcp_eff_send_mss_netif>
 80149c8:	4603      	mov	r3, r0
 80149ca:	461a      	mov	r2, r3
 80149cc:	697b      	ldr	r3, [r7, #20]
 80149ce:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80149d0:	2112      	movs	r1, #18
 80149d2:	6978      	ldr	r0, [r7, #20]
 80149d4:	f002 f842 	bl	8016a5c <tcp_enqueue_flags>
 80149d8:	4603      	mov	r3, r0
 80149da:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80149dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d004      	beq.n	80149ee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80149e4:	2100      	movs	r1, #0
 80149e6:	6978      	ldr	r0, [r7, #20]
 80149e8:	f7fe f980 	bl	8012cec <tcp_abandon>
      return;
 80149ec:	e006      	b.n	80149fc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80149ee:	6978      	ldr	r0, [r7, #20]
 80149f0:	f002 f922 	bl	8016c38 <tcp_output>
  return;
 80149f4:	e001      	b.n	80149fa <tcp_listen_input+0x1be>
    return;
 80149f6:	bf00      	nop
 80149f8:	e000      	b.n	80149fc <tcp_listen_input+0x1c0>
  return;
 80149fa:	bf00      	nop
}
 80149fc:	371c      	adds	r7, #28
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd90      	pop	{r4, r7, pc}
 8014a02:	bf00      	nop
 8014a04:	24003b9c 	.word	0x24003b9c
 8014a08:	080215b4 	.word	0x080215b4
 8014a0c:	080217d8 	.word	0x080217d8
 8014a10:	0802162c 	.word	0x0802162c
 8014a14:	24003b94 	.word	0x24003b94
 8014a18:	24003b9a 	.word	0x24003b9a
 8014a1c:	24003b90 	.word	0x24003b90
 8014a20:	24003b80 	.word	0x24003b80
 8014a24:	24004318 	.word	0x24004318
 8014a28:	2400431c 	.word	0x2400431c
 8014a2c:	24004308 	.word	0x24004308
 8014a30:	240071f8 	.word	0x240071f8
 8014a34:	240071f4 	.word	0x240071f4

08014a38 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b086      	sub	sp, #24
 8014a3c:	af04      	add	r7, sp, #16
 8014a3e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014a40:	4b2f      	ldr	r3, [pc, #188]	; (8014b00 <tcp_timewait_input+0xc8>)
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	f003 0304 	and.w	r3, r3, #4
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d153      	bne.n	8014af4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d106      	bne.n	8014a60 <tcp_timewait_input+0x28>
 8014a52:	4b2c      	ldr	r3, [pc, #176]	; (8014b04 <tcp_timewait_input+0xcc>)
 8014a54:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014a58:	492b      	ldr	r1, [pc, #172]	; (8014b08 <tcp_timewait_input+0xd0>)
 8014a5a:	482c      	ldr	r0, [pc, #176]	; (8014b0c <tcp_timewait_input+0xd4>)
 8014a5c:	f007 f9c6 	bl	801bdec <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014a60:	4b27      	ldr	r3, [pc, #156]	; (8014b00 <tcp_timewait_input+0xc8>)
 8014a62:	781b      	ldrb	r3, [r3, #0]
 8014a64:	f003 0302 	and.w	r3, r3, #2
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d02a      	beq.n	8014ac2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014a6c:	4b28      	ldr	r3, [pc, #160]	; (8014b10 <tcp_timewait_input+0xd8>)
 8014a6e:	681a      	ldr	r2, [r3, #0]
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a74:	1ad3      	subs	r3, r2, r3
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	db2d      	blt.n	8014ad6 <tcp_timewait_input+0x9e>
 8014a7a:	4b25      	ldr	r3, [pc, #148]	; (8014b10 <tcp_timewait_input+0xd8>)
 8014a7c:	681a      	ldr	r2, [r3, #0]
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a82:	6879      	ldr	r1, [r7, #4]
 8014a84:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014a86:	440b      	add	r3, r1
 8014a88:	1ad3      	subs	r3, r2, r3
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	dc23      	bgt.n	8014ad6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a8e:	4b21      	ldr	r3, [pc, #132]	; (8014b14 <tcp_timewait_input+0xdc>)
 8014a90:	6819      	ldr	r1, [r3, #0]
 8014a92:	4b21      	ldr	r3, [pc, #132]	; (8014b18 <tcp_timewait_input+0xe0>)
 8014a94:	881b      	ldrh	r3, [r3, #0]
 8014a96:	461a      	mov	r2, r3
 8014a98:	4b1d      	ldr	r3, [pc, #116]	; (8014b10 <tcp_timewait_input+0xd8>)
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014a9e:	4b1f      	ldr	r3, [pc, #124]	; (8014b1c <tcp_timewait_input+0xe4>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014aa2:	885b      	ldrh	r3, [r3, #2]
 8014aa4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014aa6:	4a1d      	ldr	r2, [pc, #116]	; (8014b1c <tcp_timewait_input+0xe4>)
 8014aa8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014aaa:	8812      	ldrh	r2, [r2, #0]
 8014aac:	b292      	uxth	r2, r2
 8014aae:	9202      	str	r2, [sp, #8]
 8014ab0:	9301      	str	r3, [sp, #4]
 8014ab2:	4b1b      	ldr	r3, [pc, #108]	; (8014b20 <tcp_timewait_input+0xe8>)
 8014ab4:	9300      	str	r3, [sp, #0]
 8014ab6:	4b1b      	ldr	r3, [pc, #108]	; (8014b24 <tcp_timewait_input+0xec>)
 8014ab8:	4602      	mov	r2, r0
 8014aba:	6878      	ldr	r0, [r7, #4]
 8014abc:	f002 fe70 	bl	80177a0 <tcp_rst>
      return;
 8014ac0:	e01b      	b.n	8014afa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014ac2:	4b0f      	ldr	r3, [pc, #60]	; (8014b00 <tcp_timewait_input+0xc8>)
 8014ac4:	781b      	ldrb	r3, [r3, #0]
 8014ac6:	f003 0301 	and.w	r3, r3, #1
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d003      	beq.n	8014ad6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014ace:	4b16      	ldr	r3, [pc, #88]	; (8014b28 <tcp_timewait_input+0xf0>)
 8014ad0:	681a      	ldr	r2, [r3, #0]
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014ad6:	4b10      	ldr	r3, [pc, #64]	; (8014b18 <tcp_timewait_input+0xe0>)
 8014ad8:	881b      	ldrh	r3, [r3, #0]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d00c      	beq.n	8014af8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	8b5b      	ldrh	r3, [r3, #26]
 8014ae2:	f043 0302 	orr.w	r3, r3, #2
 8014ae6:	b29a      	uxth	r2, r3
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f002 f8a3 	bl	8016c38 <tcp_output>
  }
  return;
 8014af2:	e001      	b.n	8014af8 <tcp_timewait_input+0xc0>
    return;
 8014af4:	bf00      	nop
 8014af6:	e000      	b.n	8014afa <tcp_timewait_input+0xc2>
  return;
 8014af8:	bf00      	nop
}
 8014afa:	3708      	adds	r7, #8
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd80      	pop	{r7, pc}
 8014b00:	24003b9c 	.word	0x24003b9c
 8014b04:	080215b4 	.word	0x080215b4
 8014b08:	080217f8 	.word	0x080217f8
 8014b0c:	0802162c 	.word	0x0802162c
 8014b10:	24003b90 	.word	0x24003b90
 8014b14:	24003b94 	.word	0x24003b94
 8014b18:	24003b9a 	.word	0x24003b9a
 8014b1c:	24003b80 	.word	0x24003b80
 8014b20:	24004318 	.word	0x24004318
 8014b24:	2400431c 	.word	0x2400431c
 8014b28:	240071fc 	.word	0x240071fc

08014b2c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014b2c:	b590      	push	{r4, r7, lr}
 8014b2e:	b08d      	sub	sp, #52	; 0x34
 8014b30:	af04      	add	r7, sp, #16
 8014b32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014b34:	2300      	movs	r3, #0
 8014b36:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014b38:	2300      	movs	r3, #0
 8014b3a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d106      	bne.n	8014b50 <tcp_process+0x24>
 8014b42:	4ba5      	ldr	r3, [pc, #660]	; (8014dd8 <tcp_process+0x2ac>)
 8014b44:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014b48:	49a4      	ldr	r1, [pc, #656]	; (8014ddc <tcp_process+0x2b0>)
 8014b4a:	48a5      	ldr	r0, [pc, #660]	; (8014de0 <tcp_process+0x2b4>)
 8014b4c:	f007 f94e 	bl	801bdec <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014b50:	4ba4      	ldr	r3, [pc, #656]	; (8014de4 <tcp_process+0x2b8>)
 8014b52:	781b      	ldrb	r3, [r3, #0]
 8014b54:	f003 0304 	and.w	r3, r3, #4
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d04e      	beq.n	8014bfa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	7d1b      	ldrb	r3, [r3, #20]
 8014b60:	2b02      	cmp	r3, #2
 8014b62:	d108      	bne.n	8014b76 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b68:	4b9f      	ldr	r3, [pc, #636]	; (8014de8 <tcp_process+0x2bc>)
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	d123      	bne.n	8014bb8 <tcp_process+0x8c>
        acceptable = 1;
 8014b70:	2301      	movs	r3, #1
 8014b72:	76fb      	strb	r3, [r7, #27]
 8014b74:	e020      	b.n	8014bb8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014b7a:	4b9c      	ldr	r3, [pc, #624]	; (8014dec <tcp_process+0x2c0>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	d102      	bne.n	8014b88 <tcp_process+0x5c>
        acceptable = 1;
 8014b82:	2301      	movs	r3, #1
 8014b84:	76fb      	strb	r3, [r7, #27]
 8014b86:	e017      	b.n	8014bb8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014b88:	4b98      	ldr	r3, [pc, #608]	; (8014dec <tcp_process+0x2c0>)
 8014b8a:	681a      	ldr	r2, [r3, #0]
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b90:	1ad3      	subs	r3, r2, r3
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	db10      	blt.n	8014bb8 <tcp_process+0x8c>
 8014b96:	4b95      	ldr	r3, [pc, #596]	; (8014dec <tcp_process+0x2c0>)
 8014b98:	681a      	ldr	r2, [r3, #0]
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b9e:	6879      	ldr	r1, [r7, #4]
 8014ba0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014ba2:	440b      	add	r3, r1
 8014ba4:	1ad3      	subs	r3, r2, r3
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	dc06      	bgt.n	8014bb8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	8b5b      	ldrh	r3, [r3, #26]
 8014bae:	f043 0302 	orr.w	r3, r3, #2
 8014bb2:	b29a      	uxth	r2, r3
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014bb8:	7efb      	ldrb	r3, [r7, #27]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d01b      	beq.n	8014bf6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	7d1b      	ldrb	r3, [r3, #20]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d106      	bne.n	8014bd4 <tcp_process+0xa8>
 8014bc6:	4b84      	ldr	r3, [pc, #528]	; (8014dd8 <tcp_process+0x2ac>)
 8014bc8:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014bcc:	4988      	ldr	r1, [pc, #544]	; (8014df0 <tcp_process+0x2c4>)
 8014bce:	4884      	ldr	r0, [pc, #528]	; (8014de0 <tcp_process+0x2b4>)
 8014bd0:	f007 f90c 	bl	801bdec <iprintf>
      recv_flags |= TF_RESET;
 8014bd4:	4b87      	ldr	r3, [pc, #540]	; (8014df4 <tcp_process+0x2c8>)
 8014bd6:	781b      	ldrb	r3, [r3, #0]
 8014bd8:	f043 0308 	orr.w	r3, r3, #8
 8014bdc:	b2da      	uxtb	r2, r3
 8014bde:	4b85      	ldr	r3, [pc, #532]	; (8014df4 <tcp_process+0x2c8>)
 8014be0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	8b5b      	ldrh	r3, [r3, #26]
 8014be6:	f023 0301 	bic.w	r3, r3, #1
 8014bea:	b29a      	uxth	r2, r3
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014bf0:	f06f 030d 	mvn.w	r3, #13
 8014bf4:	e37a      	b.n	80152ec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	e378      	b.n	80152ec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014bfa:	4b7a      	ldr	r3, [pc, #488]	; (8014de4 <tcp_process+0x2b8>)
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	f003 0302 	and.w	r3, r3, #2
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d010      	beq.n	8014c28 <tcp_process+0xfc>
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	7d1b      	ldrb	r3, [r3, #20]
 8014c0a:	2b02      	cmp	r3, #2
 8014c0c:	d00c      	beq.n	8014c28 <tcp_process+0xfc>
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	7d1b      	ldrb	r3, [r3, #20]
 8014c12:	2b03      	cmp	r3, #3
 8014c14:	d008      	beq.n	8014c28 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	8b5b      	ldrh	r3, [r3, #26]
 8014c1a:	f043 0302 	orr.w	r3, r3, #2
 8014c1e:	b29a      	uxth	r2, r3
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014c24:	2300      	movs	r3, #0
 8014c26:	e361      	b.n	80152ec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	8b5b      	ldrh	r3, [r3, #26]
 8014c2c:	f003 0310 	and.w	r3, r3, #16
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d103      	bne.n	8014c3c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014c34:	4b70      	ldr	r3, [pc, #448]	; (8014df8 <tcp_process+0x2cc>)
 8014c36:	681a      	ldr	r2, [r3, #0]
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	2200      	movs	r2, #0
 8014c40:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2200      	movs	r2, #0
 8014c48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	f001 fc2d 	bl	80164ac <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	7d1b      	ldrb	r3, [r3, #20]
 8014c56:	3b02      	subs	r3, #2
 8014c58:	2b07      	cmp	r3, #7
 8014c5a:	f200 8337 	bhi.w	80152cc <tcp_process+0x7a0>
 8014c5e:	a201      	add	r2, pc, #4	; (adr r2, 8014c64 <tcp_process+0x138>)
 8014c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c64:	08014c85 	.word	0x08014c85
 8014c68:	08014eb5 	.word	0x08014eb5
 8014c6c:	0801502d 	.word	0x0801502d
 8014c70:	08015057 	.word	0x08015057
 8014c74:	0801517b 	.word	0x0801517b
 8014c78:	0801502d 	.word	0x0801502d
 8014c7c:	08015207 	.word	0x08015207
 8014c80:	08015297 	.word	0x08015297
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014c84:	4b57      	ldr	r3, [pc, #348]	; (8014de4 <tcp_process+0x2b8>)
 8014c86:	781b      	ldrb	r3, [r3, #0]
 8014c88:	f003 0310 	and.w	r3, r3, #16
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	f000 80e4 	beq.w	8014e5a <tcp_process+0x32e>
 8014c92:	4b54      	ldr	r3, [pc, #336]	; (8014de4 <tcp_process+0x2b8>)
 8014c94:	781b      	ldrb	r3, [r3, #0]
 8014c96:	f003 0302 	and.w	r3, r3, #2
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	f000 80dd 	beq.w	8014e5a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ca4:	1c5a      	adds	r2, r3, #1
 8014ca6:	4b50      	ldr	r3, [pc, #320]	; (8014de8 <tcp_process+0x2bc>)
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	429a      	cmp	r2, r3
 8014cac:	f040 80d5 	bne.w	8014e5a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014cb0:	4b4e      	ldr	r3, [pc, #312]	; (8014dec <tcp_process+0x2c0>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	1c5a      	adds	r2, r3, #1
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014cc2:	4b49      	ldr	r3, [pc, #292]	; (8014de8 <tcp_process+0x2bc>)
 8014cc4:	681a      	ldr	r2, [r3, #0]
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014cca:	4b4c      	ldr	r3, [pc, #304]	; (8014dfc <tcp_process+0x2d0>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	89db      	ldrh	r3, [r3, #14]
 8014cd0:	b29a      	uxth	r2, r3
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014ce4:	4b41      	ldr	r3, [pc, #260]	; (8014dec <tcp_process+0x2c0>)
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	1e5a      	subs	r2, r3, #1
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	2204      	movs	r2, #4
 8014cf2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	3304      	adds	r3, #4
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7fa ff6b 	bl	800fbd8 <ip4_route>
 8014d02:	4601      	mov	r1, r0
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	3304      	adds	r3, #4
 8014d08:	461a      	mov	r2, r3
 8014d0a:	4620      	mov	r0, r4
 8014d0c:	f7ff f88e 	bl	8013e2c <tcp_eff_send_mss_netif>
 8014d10:	4603      	mov	r3, r0
 8014d12:	461a      	mov	r2, r3
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d1c:	009a      	lsls	r2, r3, #2
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d22:	005b      	lsls	r3, r3, #1
 8014d24:	f241 111c 	movw	r1, #4380	; 0x111c
 8014d28:	428b      	cmp	r3, r1
 8014d2a:	bf38      	it	cc
 8014d2c:	460b      	movcc	r3, r1
 8014d2e:	429a      	cmp	r2, r3
 8014d30:	d204      	bcs.n	8014d3c <tcp_process+0x210>
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d36:	009b      	lsls	r3, r3, #2
 8014d38:	b29b      	uxth	r3, r3
 8014d3a:	e00d      	b.n	8014d58 <tcp_process+0x22c>
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d40:	005b      	lsls	r3, r3, #1
 8014d42:	f241 121c 	movw	r2, #4380	; 0x111c
 8014d46:	4293      	cmp	r3, r2
 8014d48:	d904      	bls.n	8014d54 <tcp_process+0x228>
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d4e:	005b      	lsls	r3, r3, #1
 8014d50:	b29b      	uxth	r3, r3
 8014d52:	e001      	b.n	8014d58 <tcp_process+0x22c>
 8014d54:	f241 131c 	movw	r3, #4380	; 0x111c
 8014d58:	687a      	ldr	r2, [r7, #4]
 8014d5a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d106      	bne.n	8014d76 <tcp_process+0x24a>
 8014d68:	4b1b      	ldr	r3, [pc, #108]	; (8014dd8 <tcp_process+0x2ac>)
 8014d6a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014d6e:	4924      	ldr	r1, [pc, #144]	; (8014e00 <tcp_process+0x2d4>)
 8014d70:	481b      	ldr	r0, [pc, #108]	; (8014de0 <tcp_process+0x2b4>)
 8014d72:	f007 f83b 	bl	801bdec <iprintf>
        --pcb->snd_queuelen;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014d7c:	3b01      	subs	r3, #1
 8014d7e:	b29a      	uxth	r2, r3
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d8a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014d8c:	69fb      	ldr	r3, [r7, #28]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d111      	bne.n	8014db6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d96:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014d98:	69fb      	ldr	r3, [r7, #28]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d106      	bne.n	8014dac <tcp_process+0x280>
 8014d9e:	4b0e      	ldr	r3, [pc, #56]	; (8014dd8 <tcp_process+0x2ac>)
 8014da0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014da4:	4917      	ldr	r1, [pc, #92]	; (8014e04 <tcp_process+0x2d8>)
 8014da6:	480e      	ldr	r0, [pc, #56]	; (8014de0 <tcp_process+0x2b4>)
 8014da8:	f007 f820 	bl	801bdec <iprintf>
          pcb->unsent = rseg->next;
 8014dac:	69fb      	ldr	r3, [r7, #28]
 8014dae:	681a      	ldr	r2, [r3, #0]
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	66da      	str	r2, [r3, #108]	; 0x6c
 8014db4:	e003      	b.n	8014dbe <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8014db6:	69fb      	ldr	r3, [r7, #28]
 8014db8:	681a      	ldr	r2, [r3, #0]
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014dbe:	69f8      	ldr	r0, [r7, #28]
 8014dc0:	f7fe fd3d 	bl	801383e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d11d      	bne.n	8014e08 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014dd2:	861a      	strh	r2, [r3, #48]	; 0x30
 8014dd4:	e01f      	b.n	8014e16 <tcp_process+0x2ea>
 8014dd6:	bf00      	nop
 8014dd8:	080215b4 	.word	0x080215b4
 8014ddc:	08021818 	.word	0x08021818
 8014de0:	0802162c 	.word	0x0802162c
 8014de4:	24003b9c 	.word	0x24003b9c
 8014de8:	24003b94 	.word	0x24003b94
 8014dec:	24003b90 	.word	0x24003b90
 8014df0:	08021834 	.word	0x08021834
 8014df4:	24003b9d 	.word	0x24003b9d
 8014df8:	240071fc 	.word	0x240071fc
 8014dfc:	24003b80 	.word	0x24003b80
 8014e00:	08021854 	.word	0x08021854
 8014e04:	0802186c 	.word	0x0802186c
        } else {
          pcb->rtime = 0;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	2200      	movs	r2, #0
 8014e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d00a      	beq.n	8014e36 <tcp_process+0x30a>
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014e26:	687a      	ldr	r2, [r7, #4]
 8014e28:	6910      	ldr	r0, [r2, #16]
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	6879      	ldr	r1, [r7, #4]
 8014e2e:	4798      	blx	r3
 8014e30:	4603      	mov	r3, r0
 8014e32:	76bb      	strb	r3, [r7, #26]
 8014e34:	e001      	b.n	8014e3a <tcp_process+0x30e>
 8014e36:	2300      	movs	r3, #0
 8014e38:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014e3a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014e3e:	f113 0f0d 	cmn.w	r3, #13
 8014e42:	d102      	bne.n	8014e4a <tcp_process+0x31e>
          return ERR_ABRT;
 8014e44:	f06f 030c 	mvn.w	r3, #12
 8014e48:	e250      	b.n	80152ec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	8b5b      	ldrh	r3, [r3, #26]
 8014e4e:	f043 0302 	orr.w	r3, r3, #2
 8014e52:	b29a      	uxth	r2, r3
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014e58:	e23a      	b.n	80152d0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014e5a:	4b9d      	ldr	r3, [pc, #628]	; (80150d0 <tcp_process+0x5a4>)
 8014e5c:	781b      	ldrb	r3, [r3, #0]
 8014e5e:	f003 0310 	and.w	r3, r3, #16
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	f000 8234 	beq.w	80152d0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e68:	4b9a      	ldr	r3, [pc, #616]	; (80150d4 <tcp_process+0x5a8>)
 8014e6a:	6819      	ldr	r1, [r3, #0]
 8014e6c:	4b9a      	ldr	r3, [pc, #616]	; (80150d8 <tcp_process+0x5ac>)
 8014e6e:	881b      	ldrh	r3, [r3, #0]
 8014e70:	461a      	mov	r2, r3
 8014e72:	4b9a      	ldr	r3, [pc, #616]	; (80150dc <tcp_process+0x5b0>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014e78:	4b99      	ldr	r3, [pc, #612]	; (80150e0 <tcp_process+0x5b4>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e7c:	885b      	ldrh	r3, [r3, #2]
 8014e7e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014e80:	4a97      	ldr	r2, [pc, #604]	; (80150e0 <tcp_process+0x5b4>)
 8014e82:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e84:	8812      	ldrh	r2, [r2, #0]
 8014e86:	b292      	uxth	r2, r2
 8014e88:	9202      	str	r2, [sp, #8]
 8014e8a:	9301      	str	r3, [sp, #4]
 8014e8c:	4b95      	ldr	r3, [pc, #596]	; (80150e4 <tcp_process+0x5b8>)
 8014e8e:	9300      	str	r3, [sp, #0]
 8014e90:	4b95      	ldr	r3, [pc, #596]	; (80150e8 <tcp_process+0x5bc>)
 8014e92:	4602      	mov	r2, r0
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f002 fc83 	bl	80177a0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014ea0:	2b05      	cmp	r3, #5
 8014ea2:	f200 8215 	bhi.w	80152d0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	2200      	movs	r2, #0
 8014eaa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014eac:	6878      	ldr	r0, [r7, #4]
 8014eae:	f002 fa4d 	bl	801734c <tcp_rexmit_rto>
      break;
 8014eb2:	e20d      	b.n	80152d0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014eb4:	4b86      	ldr	r3, [pc, #536]	; (80150d0 <tcp_process+0x5a4>)
 8014eb6:	781b      	ldrb	r3, [r3, #0]
 8014eb8:	f003 0310 	and.w	r3, r3, #16
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	f000 80a1 	beq.w	8015004 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014ec2:	4b84      	ldr	r3, [pc, #528]	; (80150d4 <tcp_process+0x5a8>)
 8014ec4:	681a      	ldr	r2, [r3, #0]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014eca:	1ad3      	subs	r3, r2, r3
 8014ecc:	3b01      	subs	r3, #1
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	db7e      	blt.n	8014fd0 <tcp_process+0x4a4>
 8014ed2:	4b80      	ldr	r3, [pc, #512]	; (80150d4 <tcp_process+0x5a8>)
 8014ed4:	681a      	ldr	r2, [r3, #0]
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014eda:	1ad3      	subs	r3, r2, r3
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	dc77      	bgt.n	8014fd0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	2204      	movs	r2, #4
 8014ee4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d102      	bne.n	8014ef4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014eee:	23fa      	movs	r3, #250	; 0xfa
 8014ef0:	76bb      	strb	r3, [r7, #26]
 8014ef2:	e01d      	b.n	8014f30 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ef8:	699b      	ldr	r3, [r3, #24]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d106      	bne.n	8014f0c <tcp_process+0x3e0>
 8014efe:	4b7b      	ldr	r3, [pc, #492]	; (80150ec <tcp_process+0x5c0>)
 8014f00:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014f04:	497a      	ldr	r1, [pc, #488]	; (80150f0 <tcp_process+0x5c4>)
 8014f06:	487b      	ldr	r0, [pc, #492]	; (80150f4 <tcp_process+0x5c8>)
 8014f08:	f006 ff70 	bl	801bdec <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f10:	699b      	ldr	r3, [r3, #24]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d00a      	beq.n	8014f2c <tcp_process+0x400>
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f1a:	699b      	ldr	r3, [r3, #24]
 8014f1c:	687a      	ldr	r2, [r7, #4]
 8014f1e:	6910      	ldr	r0, [r2, #16]
 8014f20:	2200      	movs	r2, #0
 8014f22:	6879      	ldr	r1, [r7, #4]
 8014f24:	4798      	blx	r3
 8014f26:	4603      	mov	r3, r0
 8014f28:	76bb      	strb	r3, [r7, #26]
 8014f2a:	e001      	b.n	8014f30 <tcp_process+0x404>
 8014f2c:	23f0      	movs	r3, #240	; 0xf0
 8014f2e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014f30:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d00a      	beq.n	8014f4e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014f38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014f3c:	f113 0f0d 	cmn.w	r3, #13
 8014f40:	d002      	beq.n	8014f48 <tcp_process+0x41c>
              tcp_abort(pcb);
 8014f42:	6878      	ldr	r0, [r7, #4]
 8014f44:	f7fd ff90 	bl	8012e68 <tcp_abort>
            }
            return ERR_ABRT;
 8014f48:	f06f 030c 	mvn.w	r3, #12
 8014f4c:	e1ce      	b.n	80152ec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014f4e:	6878      	ldr	r0, [r7, #4]
 8014f50:	f000 fae0 	bl	8015514 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014f54:	4b68      	ldr	r3, [pc, #416]	; (80150f8 <tcp_process+0x5cc>)
 8014f56:	881b      	ldrh	r3, [r3, #0]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d005      	beq.n	8014f68 <tcp_process+0x43c>
            recv_acked--;
 8014f5c:	4b66      	ldr	r3, [pc, #408]	; (80150f8 <tcp_process+0x5cc>)
 8014f5e:	881b      	ldrh	r3, [r3, #0]
 8014f60:	3b01      	subs	r3, #1
 8014f62:	b29a      	uxth	r2, r3
 8014f64:	4b64      	ldr	r3, [pc, #400]	; (80150f8 <tcp_process+0x5cc>)
 8014f66:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f6c:	009a      	lsls	r2, r3, #2
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f72:	005b      	lsls	r3, r3, #1
 8014f74:	f241 111c 	movw	r1, #4380	; 0x111c
 8014f78:	428b      	cmp	r3, r1
 8014f7a:	bf38      	it	cc
 8014f7c:	460b      	movcc	r3, r1
 8014f7e:	429a      	cmp	r2, r3
 8014f80:	d204      	bcs.n	8014f8c <tcp_process+0x460>
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f86:	009b      	lsls	r3, r3, #2
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	e00d      	b.n	8014fa8 <tcp_process+0x47c>
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f90:	005b      	lsls	r3, r3, #1
 8014f92:	f241 121c 	movw	r2, #4380	; 0x111c
 8014f96:	4293      	cmp	r3, r2
 8014f98:	d904      	bls.n	8014fa4 <tcp_process+0x478>
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f9e:	005b      	lsls	r3, r3, #1
 8014fa0:	b29b      	uxth	r3, r3
 8014fa2:	e001      	b.n	8014fa8 <tcp_process+0x47c>
 8014fa4:	f241 131c 	movw	r3, #4380	; 0x111c
 8014fa8:	687a      	ldr	r2, [r7, #4]
 8014faa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014fae:	4b53      	ldr	r3, [pc, #332]	; (80150fc <tcp_process+0x5d0>)
 8014fb0:	781b      	ldrb	r3, [r3, #0]
 8014fb2:	f003 0320 	and.w	r3, r3, #32
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d037      	beq.n	801502a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	8b5b      	ldrh	r3, [r3, #26]
 8014fbe:	f043 0302 	orr.w	r3, r3, #2
 8014fc2:	b29a      	uxth	r2, r3
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	2207      	movs	r2, #7
 8014fcc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014fce:	e02c      	b.n	801502a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014fd0:	4b40      	ldr	r3, [pc, #256]	; (80150d4 <tcp_process+0x5a8>)
 8014fd2:	6819      	ldr	r1, [r3, #0]
 8014fd4:	4b40      	ldr	r3, [pc, #256]	; (80150d8 <tcp_process+0x5ac>)
 8014fd6:	881b      	ldrh	r3, [r3, #0]
 8014fd8:	461a      	mov	r2, r3
 8014fda:	4b40      	ldr	r3, [pc, #256]	; (80150dc <tcp_process+0x5b0>)
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014fe0:	4b3f      	ldr	r3, [pc, #252]	; (80150e0 <tcp_process+0x5b4>)
 8014fe2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014fe4:	885b      	ldrh	r3, [r3, #2]
 8014fe6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014fe8:	4a3d      	ldr	r2, [pc, #244]	; (80150e0 <tcp_process+0x5b4>)
 8014fea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014fec:	8812      	ldrh	r2, [r2, #0]
 8014fee:	b292      	uxth	r2, r2
 8014ff0:	9202      	str	r2, [sp, #8]
 8014ff2:	9301      	str	r3, [sp, #4]
 8014ff4:	4b3b      	ldr	r3, [pc, #236]	; (80150e4 <tcp_process+0x5b8>)
 8014ff6:	9300      	str	r3, [sp, #0]
 8014ff8:	4b3b      	ldr	r3, [pc, #236]	; (80150e8 <tcp_process+0x5bc>)
 8014ffa:	4602      	mov	r2, r0
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	f002 fbcf 	bl	80177a0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015002:	e167      	b.n	80152d4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015004:	4b32      	ldr	r3, [pc, #200]	; (80150d0 <tcp_process+0x5a4>)
 8015006:	781b      	ldrb	r3, [r3, #0]
 8015008:	f003 0302 	and.w	r3, r3, #2
 801500c:	2b00      	cmp	r3, #0
 801500e:	f000 8161 	beq.w	80152d4 <tcp_process+0x7a8>
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015016:	1e5a      	subs	r2, r3, #1
 8015018:	4b30      	ldr	r3, [pc, #192]	; (80150dc <tcp_process+0x5b0>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	429a      	cmp	r2, r3
 801501e:	f040 8159 	bne.w	80152d4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8015022:	6878      	ldr	r0, [r7, #4]
 8015024:	f002 f9b4 	bl	8017390 <tcp_rexmit>
      break;
 8015028:	e154      	b.n	80152d4 <tcp_process+0x7a8>
 801502a:	e153      	b.n	80152d4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801502c:	6878      	ldr	r0, [r7, #4]
 801502e:	f000 fa71 	bl	8015514 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8015032:	4b32      	ldr	r3, [pc, #200]	; (80150fc <tcp_process+0x5d0>)
 8015034:	781b      	ldrb	r3, [r3, #0]
 8015036:	f003 0320 	and.w	r3, r3, #32
 801503a:	2b00      	cmp	r3, #0
 801503c:	f000 814c 	beq.w	80152d8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	8b5b      	ldrh	r3, [r3, #26]
 8015044:	f043 0302 	orr.w	r3, r3, #2
 8015048:	b29a      	uxth	r2, r3
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	2207      	movs	r2, #7
 8015052:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015054:	e140      	b.n	80152d8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f000 fa5c 	bl	8015514 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801505c:	4b27      	ldr	r3, [pc, #156]	; (80150fc <tcp_process+0x5d0>)
 801505e:	781b      	ldrb	r3, [r3, #0]
 8015060:	f003 0320 	and.w	r3, r3, #32
 8015064:	2b00      	cmp	r3, #0
 8015066:	d071      	beq.n	801514c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015068:	4b19      	ldr	r3, [pc, #100]	; (80150d0 <tcp_process+0x5a4>)
 801506a:	781b      	ldrb	r3, [r3, #0]
 801506c:	f003 0310 	and.w	r3, r3, #16
 8015070:	2b00      	cmp	r3, #0
 8015072:	d060      	beq.n	8015136 <tcp_process+0x60a>
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015078:	4b16      	ldr	r3, [pc, #88]	; (80150d4 <tcp_process+0x5a8>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	429a      	cmp	r2, r3
 801507e:	d15a      	bne.n	8015136 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015084:	2b00      	cmp	r3, #0
 8015086:	d156      	bne.n	8015136 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	8b5b      	ldrh	r3, [r3, #26]
 801508c:	f043 0302 	orr.w	r3, r3, #2
 8015090:	b29a      	uxth	r2, r3
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015096:	6878      	ldr	r0, [r7, #4]
 8015098:	f7fe fdbe 	bl	8013c18 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801509c:	4b18      	ldr	r3, [pc, #96]	; (8015100 <tcp_process+0x5d4>)
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	687a      	ldr	r2, [r7, #4]
 80150a2:	429a      	cmp	r2, r3
 80150a4:	d105      	bne.n	80150b2 <tcp_process+0x586>
 80150a6:	4b16      	ldr	r3, [pc, #88]	; (8015100 <tcp_process+0x5d4>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	68db      	ldr	r3, [r3, #12]
 80150ac:	4a14      	ldr	r2, [pc, #80]	; (8015100 <tcp_process+0x5d4>)
 80150ae:	6013      	str	r3, [r2, #0]
 80150b0:	e02e      	b.n	8015110 <tcp_process+0x5e4>
 80150b2:	4b13      	ldr	r3, [pc, #76]	; (8015100 <tcp_process+0x5d4>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	617b      	str	r3, [r7, #20]
 80150b8:	e027      	b.n	801510a <tcp_process+0x5de>
 80150ba:	697b      	ldr	r3, [r7, #20]
 80150bc:	68db      	ldr	r3, [r3, #12]
 80150be:	687a      	ldr	r2, [r7, #4]
 80150c0:	429a      	cmp	r2, r3
 80150c2:	d11f      	bne.n	8015104 <tcp_process+0x5d8>
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	68da      	ldr	r2, [r3, #12]
 80150c8:	697b      	ldr	r3, [r7, #20]
 80150ca:	60da      	str	r2, [r3, #12]
 80150cc:	e020      	b.n	8015110 <tcp_process+0x5e4>
 80150ce:	bf00      	nop
 80150d0:	24003b9c 	.word	0x24003b9c
 80150d4:	24003b94 	.word	0x24003b94
 80150d8:	24003b9a 	.word	0x24003b9a
 80150dc:	24003b90 	.word	0x24003b90
 80150e0:	24003b80 	.word	0x24003b80
 80150e4:	24004318 	.word	0x24004318
 80150e8:	2400431c 	.word	0x2400431c
 80150ec:	080215b4 	.word	0x080215b4
 80150f0:	08021880 	.word	0x08021880
 80150f4:	0802162c 	.word	0x0802162c
 80150f8:	24003b98 	.word	0x24003b98
 80150fc:	24003b9d 	.word	0x24003b9d
 8015100:	240071f8 	.word	0x240071f8
 8015104:	697b      	ldr	r3, [r7, #20]
 8015106:	68db      	ldr	r3, [r3, #12]
 8015108:	617b      	str	r3, [r7, #20]
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d1d4      	bne.n	80150ba <tcp_process+0x58e>
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	2200      	movs	r2, #0
 8015114:	60da      	str	r2, [r3, #12]
 8015116:	4b77      	ldr	r3, [pc, #476]	; (80152f4 <tcp_process+0x7c8>)
 8015118:	2201      	movs	r2, #1
 801511a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	220a      	movs	r2, #10
 8015120:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8015122:	4b75      	ldr	r3, [pc, #468]	; (80152f8 <tcp_process+0x7cc>)
 8015124:	681a      	ldr	r2, [r3, #0]
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	60da      	str	r2, [r3, #12]
 801512a:	4a73      	ldr	r2, [pc, #460]	; (80152f8 <tcp_process+0x7cc>)
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	6013      	str	r3, [r2, #0]
 8015130:	f002 fcf8 	bl	8017b24 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015134:	e0d2      	b.n	80152dc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	8b5b      	ldrh	r3, [r3, #26]
 801513a:	f043 0302 	orr.w	r3, r3, #2
 801513e:	b29a      	uxth	r2, r3
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2208      	movs	r2, #8
 8015148:	751a      	strb	r2, [r3, #20]
      break;
 801514a:	e0c7      	b.n	80152dc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801514c:	4b6b      	ldr	r3, [pc, #428]	; (80152fc <tcp_process+0x7d0>)
 801514e:	781b      	ldrb	r3, [r3, #0]
 8015150:	f003 0310 	and.w	r3, r3, #16
 8015154:	2b00      	cmp	r3, #0
 8015156:	f000 80c1 	beq.w	80152dc <tcp_process+0x7b0>
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801515e:	4b68      	ldr	r3, [pc, #416]	; (8015300 <tcp_process+0x7d4>)
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	429a      	cmp	r2, r3
 8015164:	f040 80ba 	bne.w	80152dc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801516c:	2b00      	cmp	r3, #0
 801516e:	f040 80b5 	bne.w	80152dc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	2206      	movs	r2, #6
 8015176:	751a      	strb	r2, [r3, #20]
      break;
 8015178:	e0b0      	b.n	80152dc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	f000 f9ca 	bl	8015514 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015180:	4b60      	ldr	r3, [pc, #384]	; (8015304 <tcp_process+0x7d8>)
 8015182:	781b      	ldrb	r3, [r3, #0]
 8015184:	f003 0320 	and.w	r3, r3, #32
 8015188:	2b00      	cmp	r3, #0
 801518a:	f000 80a9 	beq.w	80152e0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	8b5b      	ldrh	r3, [r3, #26]
 8015192:	f043 0302 	orr.w	r3, r3, #2
 8015196:	b29a      	uxth	r2, r3
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f7fe fd3b 	bl	8013c18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80151a2:	4b59      	ldr	r3, [pc, #356]	; (8015308 <tcp_process+0x7dc>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	687a      	ldr	r2, [r7, #4]
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d105      	bne.n	80151b8 <tcp_process+0x68c>
 80151ac:	4b56      	ldr	r3, [pc, #344]	; (8015308 <tcp_process+0x7dc>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	68db      	ldr	r3, [r3, #12]
 80151b2:	4a55      	ldr	r2, [pc, #340]	; (8015308 <tcp_process+0x7dc>)
 80151b4:	6013      	str	r3, [r2, #0]
 80151b6:	e013      	b.n	80151e0 <tcp_process+0x6b4>
 80151b8:	4b53      	ldr	r3, [pc, #332]	; (8015308 <tcp_process+0x7dc>)
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	613b      	str	r3, [r7, #16]
 80151be:	e00c      	b.n	80151da <tcp_process+0x6ae>
 80151c0:	693b      	ldr	r3, [r7, #16]
 80151c2:	68db      	ldr	r3, [r3, #12]
 80151c4:	687a      	ldr	r2, [r7, #4]
 80151c6:	429a      	cmp	r2, r3
 80151c8:	d104      	bne.n	80151d4 <tcp_process+0x6a8>
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	68da      	ldr	r2, [r3, #12]
 80151ce:	693b      	ldr	r3, [r7, #16]
 80151d0:	60da      	str	r2, [r3, #12]
 80151d2:	e005      	b.n	80151e0 <tcp_process+0x6b4>
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	68db      	ldr	r3, [r3, #12]
 80151d8:	613b      	str	r3, [r7, #16]
 80151da:	693b      	ldr	r3, [r7, #16]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d1ef      	bne.n	80151c0 <tcp_process+0x694>
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	2200      	movs	r2, #0
 80151e4:	60da      	str	r2, [r3, #12]
 80151e6:	4b43      	ldr	r3, [pc, #268]	; (80152f4 <tcp_process+0x7c8>)
 80151e8:	2201      	movs	r2, #1
 80151ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	220a      	movs	r2, #10
 80151f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80151f2:	4b41      	ldr	r3, [pc, #260]	; (80152f8 <tcp_process+0x7cc>)
 80151f4:	681a      	ldr	r2, [r3, #0]
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	60da      	str	r2, [r3, #12]
 80151fa:	4a3f      	ldr	r2, [pc, #252]	; (80152f8 <tcp_process+0x7cc>)
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	6013      	str	r3, [r2, #0]
 8015200:	f002 fc90 	bl	8017b24 <tcp_timer_needed>
      }
      break;
 8015204:	e06c      	b.n	80152e0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015206:	6878      	ldr	r0, [r7, #4]
 8015208:	f000 f984 	bl	8015514 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801520c:	4b3b      	ldr	r3, [pc, #236]	; (80152fc <tcp_process+0x7d0>)
 801520e:	781b      	ldrb	r3, [r3, #0]
 8015210:	f003 0310 	and.w	r3, r3, #16
 8015214:	2b00      	cmp	r3, #0
 8015216:	d065      	beq.n	80152e4 <tcp_process+0x7b8>
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801521c:	4b38      	ldr	r3, [pc, #224]	; (8015300 <tcp_process+0x7d4>)
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	429a      	cmp	r2, r3
 8015222:	d15f      	bne.n	80152e4 <tcp_process+0x7b8>
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015228:	2b00      	cmp	r3, #0
 801522a:	d15b      	bne.n	80152e4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801522c:	6878      	ldr	r0, [r7, #4]
 801522e:	f7fe fcf3 	bl	8013c18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015232:	4b35      	ldr	r3, [pc, #212]	; (8015308 <tcp_process+0x7dc>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	687a      	ldr	r2, [r7, #4]
 8015238:	429a      	cmp	r2, r3
 801523a:	d105      	bne.n	8015248 <tcp_process+0x71c>
 801523c:	4b32      	ldr	r3, [pc, #200]	; (8015308 <tcp_process+0x7dc>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	68db      	ldr	r3, [r3, #12]
 8015242:	4a31      	ldr	r2, [pc, #196]	; (8015308 <tcp_process+0x7dc>)
 8015244:	6013      	str	r3, [r2, #0]
 8015246:	e013      	b.n	8015270 <tcp_process+0x744>
 8015248:	4b2f      	ldr	r3, [pc, #188]	; (8015308 <tcp_process+0x7dc>)
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	60fb      	str	r3, [r7, #12]
 801524e:	e00c      	b.n	801526a <tcp_process+0x73e>
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	68db      	ldr	r3, [r3, #12]
 8015254:	687a      	ldr	r2, [r7, #4]
 8015256:	429a      	cmp	r2, r3
 8015258:	d104      	bne.n	8015264 <tcp_process+0x738>
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	68da      	ldr	r2, [r3, #12]
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	60da      	str	r2, [r3, #12]
 8015262:	e005      	b.n	8015270 <tcp_process+0x744>
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	68db      	ldr	r3, [r3, #12]
 8015268:	60fb      	str	r3, [r7, #12]
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d1ef      	bne.n	8015250 <tcp_process+0x724>
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	2200      	movs	r2, #0
 8015274:	60da      	str	r2, [r3, #12]
 8015276:	4b1f      	ldr	r3, [pc, #124]	; (80152f4 <tcp_process+0x7c8>)
 8015278:	2201      	movs	r2, #1
 801527a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	220a      	movs	r2, #10
 8015280:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015282:	4b1d      	ldr	r3, [pc, #116]	; (80152f8 <tcp_process+0x7cc>)
 8015284:	681a      	ldr	r2, [r3, #0]
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	60da      	str	r2, [r3, #12]
 801528a:	4a1b      	ldr	r2, [pc, #108]	; (80152f8 <tcp_process+0x7cc>)
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	6013      	str	r3, [r2, #0]
 8015290:	f002 fc48 	bl	8017b24 <tcp_timer_needed>
      }
      break;
 8015294:	e026      	b.n	80152e4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8015296:	6878      	ldr	r0, [r7, #4]
 8015298:	f000 f93c 	bl	8015514 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801529c:	4b17      	ldr	r3, [pc, #92]	; (80152fc <tcp_process+0x7d0>)
 801529e:	781b      	ldrb	r3, [r3, #0]
 80152a0:	f003 0310 	and.w	r3, r3, #16
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d01f      	beq.n	80152e8 <tcp_process+0x7bc>
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80152ac:	4b14      	ldr	r3, [pc, #80]	; (8015300 <tcp_process+0x7d4>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	429a      	cmp	r2, r3
 80152b2:	d119      	bne.n	80152e8 <tcp_process+0x7bc>
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d115      	bne.n	80152e8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80152bc:	4b11      	ldr	r3, [pc, #68]	; (8015304 <tcp_process+0x7d8>)
 80152be:	781b      	ldrb	r3, [r3, #0]
 80152c0:	f043 0310 	orr.w	r3, r3, #16
 80152c4:	b2da      	uxtb	r2, r3
 80152c6:	4b0f      	ldr	r3, [pc, #60]	; (8015304 <tcp_process+0x7d8>)
 80152c8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80152ca:	e00d      	b.n	80152e8 <tcp_process+0x7bc>
    default:
      break;
 80152cc:	bf00      	nop
 80152ce:	e00c      	b.n	80152ea <tcp_process+0x7be>
      break;
 80152d0:	bf00      	nop
 80152d2:	e00a      	b.n	80152ea <tcp_process+0x7be>
      break;
 80152d4:	bf00      	nop
 80152d6:	e008      	b.n	80152ea <tcp_process+0x7be>
      break;
 80152d8:	bf00      	nop
 80152da:	e006      	b.n	80152ea <tcp_process+0x7be>
      break;
 80152dc:	bf00      	nop
 80152de:	e004      	b.n	80152ea <tcp_process+0x7be>
      break;
 80152e0:	bf00      	nop
 80152e2:	e002      	b.n	80152ea <tcp_process+0x7be>
      break;
 80152e4:	bf00      	nop
 80152e6:	e000      	b.n	80152ea <tcp_process+0x7be>
      break;
 80152e8:	bf00      	nop
  }
  return ERR_OK;
 80152ea:	2300      	movs	r3, #0
}
 80152ec:	4618      	mov	r0, r3
 80152ee:	3724      	adds	r7, #36	; 0x24
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd90      	pop	{r4, r7, pc}
 80152f4:	240071f4 	.word	0x240071f4
 80152f8:	24007208 	.word	0x24007208
 80152fc:	24003b9c 	.word	0x24003b9c
 8015300:	24003b94 	.word	0x24003b94
 8015304:	24003b9d 	.word	0x24003b9d
 8015308:	240071f8 	.word	0x240071f8

0801530c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801530c:	b590      	push	{r4, r7, lr}
 801530e:	b085      	sub	sp, #20
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
 8015314:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d106      	bne.n	801532a <tcp_oos_insert_segment+0x1e>
 801531c:	4b3b      	ldr	r3, [pc, #236]	; (801540c <tcp_oos_insert_segment+0x100>)
 801531e:	f240 421f 	movw	r2, #1055	; 0x41f
 8015322:	493b      	ldr	r1, [pc, #236]	; (8015410 <tcp_oos_insert_segment+0x104>)
 8015324:	483b      	ldr	r0, [pc, #236]	; (8015414 <tcp_oos_insert_segment+0x108>)
 8015326:	f006 fd61 	bl	801bdec <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	68db      	ldr	r3, [r3, #12]
 801532e:	899b      	ldrh	r3, [r3, #12]
 8015330:	b29b      	uxth	r3, r3
 8015332:	4618      	mov	r0, r3
 8015334:	f7f9 f97a 	bl	800e62c <lwip_htons>
 8015338:	4603      	mov	r3, r0
 801533a:	b2db      	uxtb	r3, r3
 801533c:	f003 0301 	and.w	r3, r3, #1
 8015340:	2b00      	cmp	r3, #0
 8015342:	d028      	beq.n	8015396 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8015344:	6838      	ldr	r0, [r7, #0]
 8015346:	f7fe fa65 	bl	8013814 <tcp_segs_free>
    next = NULL;
 801534a:	2300      	movs	r3, #0
 801534c:	603b      	str	r3, [r7, #0]
 801534e:	e056      	b.n	80153fe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	68db      	ldr	r3, [r3, #12]
 8015354:	899b      	ldrh	r3, [r3, #12]
 8015356:	b29b      	uxth	r3, r3
 8015358:	4618      	mov	r0, r3
 801535a:	f7f9 f967 	bl	800e62c <lwip_htons>
 801535e:	4603      	mov	r3, r0
 8015360:	b2db      	uxtb	r3, r3
 8015362:	f003 0301 	and.w	r3, r3, #1
 8015366:	2b00      	cmp	r3, #0
 8015368:	d00d      	beq.n	8015386 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	68db      	ldr	r3, [r3, #12]
 801536e:	899b      	ldrh	r3, [r3, #12]
 8015370:	b29c      	uxth	r4, r3
 8015372:	2001      	movs	r0, #1
 8015374:	f7f9 f95a 	bl	800e62c <lwip_htons>
 8015378:	4603      	mov	r3, r0
 801537a:	461a      	mov	r2, r3
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	68db      	ldr	r3, [r3, #12]
 8015380:	4322      	orrs	r2, r4
 8015382:	b292      	uxth	r2, r2
 8015384:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8015386:	683b      	ldr	r3, [r7, #0]
 8015388:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015390:	68f8      	ldr	r0, [r7, #12]
 8015392:	f7fe fa54 	bl	801383e <tcp_seg_free>
    while (next &&
 8015396:	683b      	ldr	r3, [r7, #0]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d00e      	beq.n	80153ba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	891b      	ldrh	r3, [r3, #8]
 80153a0:	461a      	mov	r2, r3
 80153a2:	4b1d      	ldr	r3, [pc, #116]	; (8015418 <tcp_oos_insert_segment+0x10c>)
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	441a      	add	r2, r3
 80153a8:	683b      	ldr	r3, [r7, #0]
 80153aa:	68db      	ldr	r3, [r3, #12]
 80153ac:	685b      	ldr	r3, [r3, #4]
 80153ae:	6839      	ldr	r1, [r7, #0]
 80153b0:	8909      	ldrh	r1, [r1, #8]
 80153b2:	440b      	add	r3, r1
 80153b4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	daca      	bge.n	8015350 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d01e      	beq.n	80153fe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	891b      	ldrh	r3, [r3, #8]
 80153c4:	461a      	mov	r2, r3
 80153c6:	4b14      	ldr	r3, [pc, #80]	; (8015418 <tcp_oos_insert_segment+0x10c>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	441a      	add	r2, r3
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	68db      	ldr	r3, [r3, #12]
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	dd12      	ble.n	80153fe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80153d8:	683b      	ldr	r3, [r7, #0]
 80153da:	68db      	ldr	r3, [r3, #12]
 80153dc:	685b      	ldr	r3, [r3, #4]
 80153de:	b29a      	uxth	r2, r3
 80153e0:	4b0d      	ldr	r3, [pc, #52]	; (8015418 <tcp_oos_insert_segment+0x10c>)
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	b29b      	uxth	r3, r3
 80153e6:	1ad3      	subs	r3, r2, r3
 80153e8:	b29a      	uxth	r2, r3
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	685a      	ldr	r2, [r3, #4]
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	891b      	ldrh	r3, [r3, #8]
 80153f6:	4619      	mov	r1, r3
 80153f8:	4610      	mov	r0, r2
 80153fa:	f7fc fe27 	bl	801204c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	683a      	ldr	r2, [r7, #0]
 8015402:	601a      	str	r2, [r3, #0]
}
 8015404:	bf00      	nop
 8015406:	3714      	adds	r7, #20
 8015408:	46bd      	mov	sp, r7
 801540a:	bd90      	pop	{r4, r7, pc}
 801540c:	080215b4 	.word	0x080215b4
 8015410:	080218a0 	.word	0x080218a0
 8015414:	0802162c 	.word	0x0802162c
 8015418:	24003b90 	.word	0x24003b90

0801541c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801541c:	b5b0      	push	{r4, r5, r7, lr}
 801541e:	b086      	sub	sp, #24
 8015420:	af00      	add	r7, sp, #0
 8015422:	60f8      	str	r0, [r7, #12]
 8015424:	60b9      	str	r1, [r7, #8]
 8015426:	607a      	str	r2, [r7, #4]
 8015428:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801542a:	e03e      	b.n	80154aa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8015430:	68bb      	ldr	r3, [r7, #8]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8015436:	697b      	ldr	r3, [r7, #20]
 8015438:	685b      	ldr	r3, [r3, #4]
 801543a:	4618      	mov	r0, r3
 801543c:	f7fd f814 	bl	8012468 <pbuf_clen>
 8015440:	4603      	mov	r3, r0
 8015442:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801544a:	8a7a      	ldrh	r2, [r7, #18]
 801544c:	429a      	cmp	r2, r3
 801544e:	d906      	bls.n	801545e <tcp_free_acked_segments+0x42>
 8015450:	4b2a      	ldr	r3, [pc, #168]	; (80154fc <tcp_free_acked_segments+0xe0>)
 8015452:	f240 4257 	movw	r2, #1111	; 0x457
 8015456:	492a      	ldr	r1, [pc, #168]	; (8015500 <tcp_free_acked_segments+0xe4>)
 8015458:	482a      	ldr	r0, [pc, #168]	; (8015504 <tcp_free_acked_segments+0xe8>)
 801545a:	f006 fcc7 	bl	801bdec <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8015464:	8a7b      	ldrh	r3, [r7, #18]
 8015466:	1ad3      	subs	r3, r2, r3
 8015468:	b29a      	uxth	r2, r3
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	891a      	ldrh	r2, [r3, #8]
 8015474:	4b24      	ldr	r3, [pc, #144]	; (8015508 <tcp_free_acked_segments+0xec>)
 8015476:	881b      	ldrh	r3, [r3, #0]
 8015478:	4413      	add	r3, r2
 801547a:	b29a      	uxth	r2, r3
 801547c:	4b22      	ldr	r3, [pc, #136]	; (8015508 <tcp_free_acked_segments+0xec>)
 801547e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015480:	6978      	ldr	r0, [r7, #20]
 8015482:	f7fe f9dc 	bl	801383e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801548c:	2b00      	cmp	r3, #0
 801548e:	d00c      	beq.n	80154aa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015490:	68bb      	ldr	r3, [r7, #8]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d109      	bne.n	80154aa <tcp_free_acked_segments+0x8e>
 8015496:	683b      	ldr	r3, [r7, #0]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d106      	bne.n	80154aa <tcp_free_acked_segments+0x8e>
 801549c:	4b17      	ldr	r3, [pc, #92]	; (80154fc <tcp_free_acked_segments+0xe0>)
 801549e:	f240 4261 	movw	r2, #1121	; 0x461
 80154a2:	491a      	ldr	r1, [pc, #104]	; (801550c <tcp_free_acked_segments+0xf0>)
 80154a4:	4817      	ldr	r0, [pc, #92]	; (8015504 <tcp_free_acked_segments+0xe8>)
 80154a6:	f006 fca1 	bl	801bdec <iprintf>
  while (seg_list != NULL &&
 80154aa:	68bb      	ldr	r3, [r7, #8]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d020      	beq.n	80154f2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	68db      	ldr	r3, [r3, #12]
 80154b4:	685b      	ldr	r3, [r3, #4]
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7f9 f8cd 	bl	800e656 <lwip_htonl>
 80154bc:	4604      	mov	r4, r0
 80154be:	68bb      	ldr	r3, [r7, #8]
 80154c0:	891b      	ldrh	r3, [r3, #8]
 80154c2:	461d      	mov	r5, r3
 80154c4:	68bb      	ldr	r3, [r7, #8]
 80154c6:	68db      	ldr	r3, [r3, #12]
 80154c8:	899b      	ldrh	r3, [r3, #12]
 80154ca:	b29b      	uxth	r3, r3
 80154cc:	4618      	mov	r0, r3
 80154ce:	f7f9 f8ad 	bl	800e62c <lwip_htons>
 80154d2:	4603      	mov	r3, r0
 80154d4:	b2db      	uxtb	r3, r3
 80154d6:	f003 0303 	and.w	r3, r3, #3
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d001      	beq.n	80154e2 <tcp_free_acked_segments+0xc6>
 80154de:	2301      	movs	r3, #1
 80154e0:	e000      	b.n	80154e4 <tcp_free_acked_segments+0xc8>
 80154e2:	2300      	movs	r3, #0
 80154e4:	442b      	add	r3, r5
 80154e6:	18e2      	adds	r2, r4, r3
 80154e8:	4b09      	ldr	r3, [pc, #36]	; (8015510 <tcp_free_acked_segments+0xf4>)
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	dd9c      	ble.n	801542c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80154f2:	68bb      	ldr	r3, [r7, #8]
}
 80154f4:	4618      	mov	r0, r3
 80154f6:	3718      	adds	r7, #24
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bdb0      	pop	{r4, r5, r7, pc}
 80154fc:	080215b4 	.word	0x080215b4
 8015500:	080218c8 	.word	0x080218c8
 8015504:	0802162c 	.word	0x0802162c
 8015508:	24003b98 	.word	0x24003b98
 801550c:	080218f0 	.word	0x080218f0
 8015510:	24003b94 	.word	0x24003b94

08015514 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015514:	b5b0      	push	{r4, r5, r7, lr}
 8015516:	b094      	sub	sp, #80	; 0x50
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801551c:	2300      	movs	r3, #0
 801551e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d106      	bne.n	8015534 <tcp_receive+0x20>
 8015526:	4ba6      	ldr	r3, [pc, #664]	; (80157c0 <tcp_receive+0x2ac>)
 8015528:	f240 427b 	movw	r2, #1147	; 0x47b
 801552c:	49a5      	ldr	r1, [pc, #660]	; (80157c4 <tcp_receive+0x2b0>)
 801552e:	48a6      	ldr	r0, [pc, #664]	; (80157c8 <tcp_receive+0x2b4>)
 8015530:	f006 fc5c 	bl	801bdec <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	7d1b      	ldrb	r3, [r3, #20]
 8015538:	2b03      	cmp	r3, #3
 801553a:	d806      	bhi.n	801554a <tcp_receive+0x36>
 801553c:	4ba0      	ldr	r3, [pc, #640]	; (80157c0 <tcp_receive+0x2ac>)
 801553e:	f240 427c 	movw	r2, #1148	; 0x47c
 8015542:	49a2      	ldr	r1, [pc, #648]	; (80157cc <tcp_receive+0x2b8>)
 8015544:	48a0      	ldr	r0, [pc, #640]	; (80157c8 <tcp_receive+0x2b4>)
 8015546:	f006 fc51 	bl	801bdec <iprintf>

  if (flags & TCP_ACK) {
 801554a:	4ba1      	ldr	r3, [pc, #644]	; (80157d0 <tcp_receive+0x2bc>)
 801554c:	781b      	ldrb	r3, [r3, #0]
 801554e:	f003 0310 	and.w	r3, r3, #16
 8015552:	2b00      	cmp	r3, #0
 8015554:	f000 8263 	beq.w	8015a1e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801555e:	461a      	mov	r2, r3
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015564:	4413      	add	r3, r2
 8015566:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801556c:	4b99      	ldr	r3, [pc, #612]	; (80157d4 <tcp_receive+0x2c0>)
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	1ad3      	subs	r3, r2, r3
 8015572:	2b00      	cmp	r3, #0
 8015574:	db1b      	blt.n	80155ae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801557a:	4b96      	ldr	r3, [pc, #600]	; (80157d4 <tcp_receive+0x2c0>)
 801557c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801557e:	429a      	cmp	r2, r3
 8015580:	d106      	bne.n	8015590 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015586:	4b94      	ldr	r3, [pc, #592]	; (80157d8 <tcp_receive+0x2c4>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	1ad3      	subs	r3, r2, r3
 801558c:	2b00      	cmp	r3, #0
 801558e:	db0e      	blt.n	80155ae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015594:	4b90      	ldr	r3, [pc, #576]	; (80157d8 <tcp_receive+0x2c4>)
 8015596:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015598:	429a      	cmp	r2, r3
 801559a:	d125      	bne.n	80155e8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801559c:	4b8f      	ldr	r3, [pc, #572]	; (80157dc <tcp_receive+0x2c8>)
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	89db      	ldrh	r3, [r3, #14]
 80155a2:	b29a      	uxth	r2, r3
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80155aa:	429a      	cmp	r2, r3
 80155ac:	d91c      	bls.n	80155e8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80155ae:	4b8b      	ldr	r3, [pc, #556]	; (80157dc <tcp_receive+0x2c8>)
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	89db      	ldrh	r3, [r3, #14]
 80155b4:	b29a      	uxth	r2, r3
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80155c8:	429a      	cmp	r2, r3
 80155ca:	d205      	bcs.n	80155d8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80155d8:	4b7e      	ldr	r3, [pc, #504]	; (80157d4 <tcp_receive+0x2c0>)
 80155da:	681a      	ldr	r2, [r3, #0]
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80155e0:	4b7d      	ldr	r3, [pc, #500]	; (80157d8 <tcp_receive+0x2c4>)
 80155e2:	681a      	ldr	r2, [r3, #0]
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80155e8:	4b7b      	ldr	r3, [pc, #492]	; (80157d8 <tcp_receive+0x2c4>)
 80155ea:	681a      	ldr	r2, [r3, #0]
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80155f0:	1ad3      	subs	r3, r2, r3
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	dc58      	bgt.n	80156a8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80155f6:	4b7a      	ldr	r3, [pc, #488]	; (80157e0 <tcp_receive+0x2cc>)
 80155f8:	881b      	ldrh	r3, [r3, #0]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d14b      	bne.n	8015696 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015602:	687a      	ldr	r2, [r7, #4]
 8015604:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8015608:	4413      	add	r3, r2
 801560a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801560c:	429a      	cmp	r2, r3
 801560e:	d142      	bne.n	8015696 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015616:	2b00      	cmp	r3, #0
 8015618:	db3d      	blt.n	8015696 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801561e:	4b6e      	ldr	r3, [pc, #440]	; (80157d8 <tcp_receive+0x2c4>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	429a      	cmp	r2, r3
 8015624:	d137      	bne.n	8015696 <tcp_receive+0x182>
              found_dupack = 1;
 8015626:	2301      	movs	r3, #1
 8015628:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015630:	2bff      	cmp	r3, #255	; 0xff
 8015632:	d007      	beq.n	8015644 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801563a:	3301      	adds	r3, #1
 801563c:	b2da      	uxtb	r2, r3
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801564a:	2b03      	cmp	r3, #3
 801564c:	d91b      	bls.n	8015686 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015658:	4413      	add	r3, r2
 801565a:	b29a      	uxth	r2, r3
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015662:	429a      	cmp	r2, r3
 8015664:	d30a      	bcc.n	801567c <tcp_receive+0x168>
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015670:	4413      	add	r3, r2
 8015672:	b29a      	uxth	r2, r3
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801567a:	e004      	b.n	8015686 <tcp_receive+0x172>
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015682:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801568c:	2b02      	cmp	r3, #2
 801568e:	d902      	bls.n	8015696 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015690:	6878      	ldr	r0, [r7, #4]
 8015692:	f001 fee9 	bl	8017468 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015698:	2b00      	cmp	r3, #0
 801569a:	f040 8160 	bne.w	801595e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	2200      	movs	r2, #0
 80156a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80156a6:	e15a      	b.n	801595e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80156a8:	4b4b      	ldr	r3, [pc, #300]	; (80157d8 <tcp_receive+0x2c4>)
 80156aa:	681a      	ldr	r2, [r3, #0]
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156b0:	1ad3      	subs	r3, r2, r3
 80156b2:	3b01      	subs	r3, #1
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	f2c0 814d 	blt.w	8015954 <tcp_receive+0x440>
 80156ba:	4b47      	ldr	r3, [pc, #284]	; (80157d8 <tcp_receive+0x2c4>)
 80156bc:	681a      	ldr	r2, [r3, #0]
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80156c2:	1ad3      	subs	r3, r2, r3
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	f300 8145 	bgt.w	8015954 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	8b5b      	ldrh	r3, [r3, #26]
 80156ce:	f003 0304 	and.w	r3, r3, #4
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d010      	beq.n	80156f8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	8b5b      	ldrh	r3, [r3, #26]
 80156da:	f023 0304 	bic.w	r3, r3, #4
 80156de:	b29a      	uxth	r2, r3
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2200      	movs	r2, #0
 80156f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	2200      	movs	r2, #0
 80156fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015706:	10db      	asrs	r3, r3, #3
 8015708:	b21b      	sxth	r3, r3
 801570a:	b29a      	uxth	r2, r3
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015712:	b29b      	uxth	r3, r3
 8015714:	4413      	add	r3, r2
 8015716:	b29b      	uxth	r3, r3
 8015718:	b21a      	sxth	r2, r3
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015720:	4b2d      	ldr	r3, [pc, #180]	; (80157d8 <tcp_receive+0x2c4>)
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	b29a      	uxth	r2, r3
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801572a:	b29b      	uxth	r3, r3
 801572c:	1ad3      	subs	r3, r2, r3
 801572e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2200      	movs	r2, #0
 8015734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8015738:	4b27      	ldr	r3, [pc, #156]	; (80157d8 <tcp_receive+0x2c4>)
 801573a:	681a      	ldr	r2, [r3, #0]
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	7d1b      	ldrb	r3, [r3, #20]
 8015744:	2b03      	cmp	r3, #3
 8015746:	f240 8096 	bls.w	8015876 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015756:	429a      	cmp	r2, r3
 8015758:	d244      	bcs.n	80157e4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	8b5b      	ldrh	r3, [r3, #26]
 801575e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015762:	2b00      	cmp	r3, #0
 8015764:	d001      	beq.n	801576a <tcp_receive+0x256>
 8015766:	2301      	movs	r3, #1
 8015768:	e000      	b.n	801576c <tcp_receive+0x258>
 801576a:	2302      	movs	r3, #2
 801576c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015770:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015774:	b29a      	uxth	r2, r3
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801577a:	fb12 f303 	smulbb	r3, r2, r3
 801577e:	b29b      	uxth	r3, r3
 8015780:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015782:	4293      	cmp	r3, r2
 8015784:	bf28      	it	cs
 8015786:	4613      	movcs	r3, r2
 8015788:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015790:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015792:	4413      	add	r3, r2
 8015794:	b29a      	uxth	r2, r3
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801579c:	429a      	cmp	r2, r3
 801579e:	d309      	bcc.n	80157b4 <tcp_receive+0x2a0>
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80157a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80157a8:	4413      	add	r3, r2
 80157aa:	b29a      	uxth	r2, r3
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80157b2:	e060      	b.n	8015876 <tcp_receive+0x362>
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80157ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80157be:	e05a      	b.n	8015876 <tcp_receive+0x362>
 80157c0:	080215b4 	.word	0x080215b4
 80157c4:	08021910 	.word	0x08021910
 80157c8:	0802162c 	.word	0x0802162c
 80157cc:	0802192c 	.word	0x0802192c
 80157d0:	24003b9c 	.word	0x24003b9c
 80157d4:	24003b90 	.word	0x24003b90
 80157d8:	24003b94 	.word	0x24003b94
 80157dc:	24003b80 	.word	0x24003b80
 80157e0:	24003b9a 	.word	0x24003b9a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80157ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80157ec:	4413      	add	r3, r2
 80157ee:	b29a      	uxth	r2, r3
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d309      	bcc.n	801580e <tcp_receive+0x2fa>
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015800:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015802:	4413      	add	r3, r2
 8015804:	b29a      	uxth	r2, r3
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801580c:	e004      	b.n	8015818 <tcp_receive+0x304>
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015824:	429a      	cmp	r2, r3
 8015826:	d326      	bcc.n	8015876 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015834:	1ad3      	subs	r3, r2, r3
 8015836:	b29a      	uxth	r2, r3
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015848:	4413      	add	r3, r2
 801584a:	b29a      	uxth	r2, r3
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015852:	429a      	cmp	r2, r3
 8015854:	d30a      	bcc.n	801586c <tcp_receive+0x358>
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015860:	4413      	add	r3, r2
 8015862:	b29a      	uxth	r2, r3
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801586a:	e004      	b.n	8015876 <tcp_receive+0x362>
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015872:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801587e:	4a98      	ldr	r2, [pc, #608]	; (8015ae0 <tcp_receive+0x5cc>)
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	f7ff fdcb 	bl	801541c <tcp_free_acked_segments>
 8015886:	4602      	mov	r2, r0
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015894:	4a93      	ldr	r2, [pc, #588]	; (8015ae4 <tcp_receive+0x5d0>)
 8015896:	6878      	ldr	r0, [r7, #4]
 8015898:	f7ff fdc0 	bl	801541c <tcp_free_acked_segments>
 801589c:	4602      	mov	r2, r0
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d104      	bne.n	80158b4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80158b0:	861a      	strh	r2, [r3, #48]	; 0x30
 80158b2:	e002      	b.n	80158ba <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	2200      	movs	r2, #0
 80158b8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	2200      	movs	r2, #0
 80158be:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d103      	bne.n	80158d0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	2200      	movs	r2, #0
 80158cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80158d6:	4b84      	ldr	r3, [pc, #528]	; (8015ae8 <tcp_receive+0x5d4>)
 80158d8:	881b      	ldrh	r3, [r3, #0]
 80158da:	4413      	add	r3, r2
 80158dc:	b29a      	uxth	r2, r3
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	8b5b      	ldrh	r3, [r3, #26]
 80158e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d035      	beq.n	801595c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d118      	bne.n	801592a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d00c      	beq.n	801591a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015908:	68db      	ldr	r3, [r3, #12]
 801590a:	685b      	ldr	r3, [r3, #4]
 801590c:	4618      	mov	r0, r3
 801590e:	f7f8 fea2 	bl	800e656 <lwip_htonl>
 8015912:	4603      	mov	r3, r0
 8015914:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015916:	2b00      	cmp	r3, #0
 8015918:	dc20      	bgt.n	801595c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	8b5b      	ldrh	r3, [r3, #26]
 801591e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015922:	b29a      	uxth	r2, r3
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015928:	e018      	b.n	801595c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015932:	68db      	ldr	r3, [r3, #12]
 8015934:	685b      	ldr	r3, [r3, #4]
 8015936:	4618      	mov	r0, r3
 8015938:	f7f8 fe8d 	bl	800e656 <lwip_htonl>
 801593c:	4603      	mov	r3, r0
 801593e:	1ae3      	subs	r3, r4, r3
 8015940:	2b00      	cmp	r3, #0
 8015942:	dc0b      	bgt.n	801595c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	8b5b      	ldrh	r3, [r3, #26]
 8015948:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801594c:	b29a      	uxth	r2, r3
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015952:	e003      	b.n	801595c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015954:	6878      	ldr	r0, [r7, #4]
 8015956:	f001 ff75 	bl	8017844 <tcp_send_empty_ack>
 801595a:	e000      	b.n	801595e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801595c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015962:	2b00      	cmp	r3, #0
 8015964:	d05b      	beq.n	8015a1e <tcp_receive+0x50a>
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801596a:	4b60      	ldr	r3, [pc, #384]	; (8015aec <tcp_receive+0x5d8>)
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	1ad3      	subs	r3, r2, r3
 8015970:	2b00      	cmp	r3, #0
 8015972:	da54      	bge.n	8015a1e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015974:	4b5e      	ldr	r3, [pc, #376]	; (8015af0 <tcp_receive+0x5dc>)
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	b29a      	uxth	r2, r3
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801597e:	b29b      	uxth	r3, r3
 8015980:	1ad3      	subs	r3, r2, r3
 8015982:	b29b      	uxth	r3, r3
 8015984:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015988:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015992:	10db      	asrs	r3, r3, #3
 8015994:	b21b      	sxth	r3, r3
 8015996:	b29b      	uxth	r3, r3
 8015998:	1ad3      	subs	r3, r2, r3
 801599a:	b29b      	uxth	r3, r3
 801599c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80159a6:	b29a      	uxth	r2, r3
 80159a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80159ac:	4413      	add	r3, r2
 80159ae:	b29b      	uxth	r3, r3
 80159b0:	b21a      	sxth	r2, r3
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80159b6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	da05      	bge.n	80159ca <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80159be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80159c2:	425b      	negs	r3, r3
 80159c4:	b29b      	uxth	r3, r3
 80159c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80159ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80159d4:	109b      	asrs	r3, r3, #2
 80159d6:	b21b      	sxth	r3, r3
 80159d8:	b29b      	uxth	r3, r3
 80159da:	1ad3      	subs	r3, r2, r3
 80159dc:	b29b      	uxth	r3, r3
 80159de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80159e8:	b29a      	uxth	r2, r3
 80159ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80159ee:	4413      	add	r3, r2
 80159f0:	b29b      	uxth	r3, r3
 80159f2:	b21a      	sxth	r2, r3
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80159fe:	10db      	asrs	r3, r3, #3
 8015a00:	b21b      	sxth	r3, r3
 8015a02:	b29a      	uxth	r2, r3
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015a0a:	b29b      	uxth	r3, r3
 8015a0c:	4413      	add	r3, r2
 8015a0e:	b29b      	uxth	r3, r3
 8015a10:	b21a      	sxth	r2, r3
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015a1e:	4b35      	ldr	r3, [pc, #212]	; (8015af4 <tcp_receive+0x5e0>)
 8015a20:	881b      	ldrh	r3, [r3, #0]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	f000 84e1 	beq.w	80163ea <tcp_receive+0xed6>
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	7d1b      	ldrb	r3, [r3, #20]
 8015a2c:	2b06      	cmp	r3, #6
 8015a2e:	f200 84dc 	bhi.w	80163ea <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015a36:	4b30      	ldr	r3, [pc, #192]	; (8015af8 <tcp_receive+0x5e4>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	1ad3      	subs	r3, r2, r3
 8015a3c:	3b01      	subs	r3, #1
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	f2c0 808e 	blt.w	8015b60 <tcp_receive+0x64c>
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015a48:	4b2a      	ldr	r3, [pc, #168]	; (8015af4 <tcp_receive+0x5e0>)
 8015a4a:	881b      	ldrh	r3, [r3, #0]
 8015a4c:	4619      	mov	r1, r3
 8015a4e:	4b2a      	ldr	r3, [pc, #168]	; (8015af8 <tcp_receive+0x5e4>)
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	440b      	add	r3, r1
 8015a54:	1ad3      	subs	r3, r2, r3
 8015a56:	3301      	adds	r3, #1
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	f300 8081 	bgt.w	8015b60 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015a5e:	4b27      	ldr	r3, [pc, #156]	; (8015afc <tcp_receive+0x5e8>)
 8015a60:	685b      	ldr	r3, [r3, #4]
 8015a62:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015a68:	4b23      	ldr	r3, [pc, #140]	; (8015af8 <tcp_receive+0x5e4>)
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	1ad3      	subs	r3, r2, r3
 8015a6e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015a70:	4b22      	ldr	r3, [pc, #136]	; (8015afc <tcp_receive+0x5e8>)
 8015a72:	685b      	ldr	r3, [r3, #4]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d106      	bne.n	8015a86 <tcp_receive+0x572>
 8015a78:	4b21      	ldr	r3, [pc, #132]	; (8015b00 <tcp_receive+0x5ec>)
 8015a7a:	f240 5294 	movw	r2, #1428	; 0x594
 8015a7e:	4921      	ldr	r1, [pc, #132]	; (8015b04 <tcp_receive+0x5f0>)
 8015a80:	4821      	ldr	r0, [pc, #132]	; (8015b08 <tcp_receive+0x5f4>)
 8015a82:	f006 f9b3 	bl	801bdec <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015a8c:	4293      	cmp	r3, r2
 8015a8e:	d906      	bls.n	8015a9e <tcp_receive+0x58a>
 8015a90:	4b1b      	ldr	r3, [pc, #108]	; (8015b00 <tcp_receive+0x5ec>)
 8015a92:	f240 5295 	movw	r2, #1429	; 0x595
 8015a96:	491d      	ldr	r1, [pc, #116]	; (8015b0c <tcp_receive+0x5f8>)
 8015a98:	481b      	ldr	r0, [pc, #108]	; (8015b08 <tcp_receive+0x5f4>)
 8015a9a:	f006 f9a7 	bl	801bdec <iprintf>
      off = (u16_t)off32;
 8015a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aa0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015aa4:	4b15      	ldr	r3, [pc, #84]	; (8015afc <tcp_receive+0x5e8>)
 8015aa6:	685b      	ldr	r3, [r3, #4]
 8015aa8:	891b      	ldrh	r3, [r3, #8]
 8015aaa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015aae:	429a      	cmp	r2, r3
 8015ab0:	d906      	bls.n	8015ac0 <tcp_receive+0x5ac>
 8015ab2:	4b13      	ldr	r3, [pc, #76]	; (8015b00 <tcp_receive+0x5ec>)
 8015ab4:	f240 5297 	movw	r2, #1431	; 0x597
 8015ab8:	4915      	ldr	r1, [pc, #84]	; (8015b10 <tcp_receive+0x5fc>)
 8015aba:	4813      	ldr	r0, [pc, #76]	; (8015b08 <tcp_receive+0x5f4>)
 8015abc:	f006 f996 	bl	801bdec <iprintf>
      inseg.len -= off;
 8015ac0:	4b0e      	ldr	r3, [pc, #56]	; (8015afc <tcp_receive+0x5e8>)
 8015ac2:	891a      	ldrh	r2, [r3, #8]
 8015ac4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015ac8:	1ad3      	subs	r3, r2, r3
 8015aca:	b29a      	uxth	r2, r3
 8015acc:	4b0b      	ldr	r3, [pc, #44]	; (8015afc <tcp_receive+0x5e8>)
 8015ace:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015ad0:	4b0a      	ldr	r3, [pc, #40]	; (8015afc <tcp_receive+0x5e8>)
 8015ad2:	685b      	ldr	r3, [r3, #4]
 8015ad4:	891a      	ldrh	r2, [r3, #8]
 8015ad6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015ada:	1ad3      	subs	r3, r2, r3
 8015adc:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8015ade:	e029      	b.n	8015b34 <tcp_receive+0x620>
 8015ae0:	08021948 	.word	0x08021948
 8015ae4:	08021950 	.word	0x08021950
 8015ae8:	24003b98 	.word	0x24003b98
 8015aec:	24003b94 	.word	0x24003b94
 8015af0:	240071fc 	.word	0x240071fc
 8015af4:	24003b9a 	.word	0x24003b9a
 8015af8:	24003b90 	.word	0x24003b90
 8015afc:	24003b70 	.word	0x24003b70
 8015b00:	080215b4 	.word	0x080215b4
 8015b04:	08021958 	.word	0x08021958
 8015b08:	0802162c 	.word	0x0802162c
 8015b0c:	08021968 	.word	0x08021968
 8015b10:	08021978 	.word	0x08021978
        off -= p->len;
 8015b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b16:	895b      	ldrh	r3, [r3, #10]
 8015b18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015b1c:	1ad3      	subs	r3, r2, r3
 8015b1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b24:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015b26:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b36:	895b      	ldrh	r3, [r3, #10]
 8015b38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	d8e9      	bhi.n	8015b14 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015b40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015b44:	4619      	mov	r1, r3
 8015b46:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015b48:	f7fc fb80 	bl	801224c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b50:	4a91      	ldr	r2, [pc, #580]	; (8015d98 <tcp_receive+0x884>)
 8015b52:	6013      	str	r3, [r2, #0]
 8015b54:	4b91      	ldr	r3, [pc, #580]	; (8015d9c <tcp_receive+0x888>)
 8015b56:	68db      	ldr	r3, [r3, #12]
 8015b58:	4a8f      	ldr	r2, [pc, #572]	; (8015d98 <tcp_receive+0x884>)
 8015b5a:	6812      	ldr	r2, [r2, #0]
 8015b5c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015b5e:	e00d      	b.n	8015b7c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015b60:	4b8d      	ldr	r3, [pc, #564]	; (8015d98 <tcp_receive+0x884>)
 8015b62:	681a      	ldr	r2, [r3, #0]
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b68:	1ad3      	subs	r3, r2, r3
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	da06      	bge.n	8015b7c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	8b5b      	ldrh	r3, [r3, #26]
 8015b72:	f043 0302 	orr.w	r3, r3, #2
 8015b76:	b29a      	uxth	r2, r3
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015b7c:	4b86      	ldr	r3, [pc, #536]	; (8015d98 <tcp_receive+0x884>)
 8015b7e:	681a      	ldr	r2, [r3, #0]
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b84:	1ad3      	subs	r3, r2, r3
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	f2c0 842a 	blt.w	80163e0 <tcp_receive+0xecc>
 8015b8c:	4b82      	ldr	r3, [pc, #520]	; (8015d98 <tcp_receive+0x884>)
 8015b8e:	681a      	ldr	r2, [r3, #0]
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b94:	6879      	ldr	r1, [r7, #4]
 8015b96:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015b98:	440b      	add	r3, r1
 8015b9a:	1ad3      	subs	r3, r2, r3
 8015b9c:	3301      	adds	r3, #1
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	f300 841e 	bgt.w	80163e0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ba8:	4b7b      	ldr	r3, [pc, #492]	; (8015d98 <tcp_receive+0x884>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	429a      	cmp	r2, r3
 8015bae:	f040 829a 	bne.w	80160e6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015bb2:	4b7a      	ldr	r3, [pc, #488]	; (8015d9c <tcp_receive+0x888>)
 8015bb4:	891c      	ldrh	r4, [r3, #8]
 8015bb6:	4b79      	ldr	r3, [pc, #484]	; (8015d9c <tcp_receive+0x888>)
 8015bb8:	68db      	ldr	r3, [r3, #12]
 8015bba:	899b      	ldrh	r3, [r3, #12]
 8015bbc:	b29b      	uxth	r3, r3
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7f8 fd34 	bl	800e62c <lwip_htons>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	b2db      	uxtb	r3, r3
 8015bc8:	f003 0303 	and.w	r3, r3, #3
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d001      	beq.n	8015bd4 <tcp_receive+0x6c0>
 8015bd0:	2301      	movs	r3, #1
 8015bd2:	e000      	b.n	8015bd6 <tcp_receive+0x6c2>
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	4423      	add	r3, r4
 8015bd8:	b29a      	uxth	r2, r3
 8015bda:	4b71      	ldr	r3, [pc, #452]	; (8015da0 <tcp_receive+0x88c>)
 8015bdc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015be2:	4b6f      	ldr	r3, [pc, #444]	; (8015da0 <tcp_receive+0x88c>)
 8015be4:	881b      	ldrh	r3, [r3, #0]
 8015be6:	429a      	cmp	r2, r3
 8015be8:	d275      	bcs.n	8015cd6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015bea:	4b6c      	ldr	r3, [pc, #432]	; (8015d9c <tcp_receive+0x888>)
 8015bec:	68db      	ldr	r3, [r3, #12]
 8015bee:	899b      	ldrh	r3, [r3, #12]
 8015bf0:	b29b      	uxth	r3, r3
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	f7f8 fd1a 	bl	800e62c <lwip_htons>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	b2db      	uxtb	r3, r3
 8015bfc:	f003 0301 	and.w	r3, r3, #1
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d01f      	beq.n	8015c44 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015c04:	4b65      	ldr	r3, [pc, #404]	; (8015d9c <tcp_receive+0x888>)
 8015c06:	68db      	ldr	r3, [r3, #12]
 8015c08:	899b      	ldrh	r3, [r3, #12]
 8015c0a:	b29b      	uxth	r3, r3
 8015c0c:	b21b      	sxth	r3, r3
 8015c0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015c12:	b21c      	sxth	r4, r3
 8015c14:	4b61      	ldr	r3, [pc, #388]	; (8015d9c <tcp_receive+0x888>)
 8015c16:	68db      	ldr	r3, [r3, #12]
 8015c18:	899b      	ldrh	r3, [r3, #12]
 8015c1a:	b29b      	uxth	r3, r3
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	f7f8 fd05 	bl	800e62c <lwip_htons>
 8015c22:	4603      	mov	r3, r0
 8015c24:	b2db      	uxtb	r3, r3
 8015c26:	b29b      	uxth	r3, r3
 8015c28:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015c2c:	b29b      	uxth	r3, r3
 8015c2e:	4618      	mov	r0, r3
 8015c30:	f7f8 fcfc 	bl	800e62c <lwip_htons>
 8015c34:	4603      	mov	r3, r0
 8015c36:	b21b      	sxth	r3, r3
 8015c38:	4323      	orrs	r3, r4
 8015c3a:	b21a      	sxth	r2, r3
 8015c3c:	4b57      	ldr	r3, [pc, #348]	; (8015d9c <tcp_receive+0x888>)
 8015c3e:	68db      	ldr	r3, [r3, #12]
 8015c40:	b292      	uxth	r2, r2
 8015c42:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015c48:	4b54      	ldr	r3, [pc, #336]	; (8015d9c <tcp_receive+0x888>)
 8015c4a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015c4c:	4b53      	ldr	r3, [pc, #332]	; (8015d9c <tcp_receive+0x888>)
 8015c4e:	68db      	ldr	r3, [r3, #12]
 8015c50:	899b      	ldrh	r3, [r3, #12]
 8015c52:	b29b      	uxth	r3, r3
 8015c54:	4618      	mov	r0, r3
 8015c56:	f7f8 fce9 	bl	800e62c <lwip_htons>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	b2db      	uxtb	r3, r3
 8015c5e:	f003 0302 	and.w	r3, r3, #2
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d005      	beq.n	8015c72 <tcp_receive+0x75e>
            inseg.len -= 1;
 8015c66:	4b4d      	ldr	r3, [pc, #308]	; (8015d9c <tcp_receive+0x888>)
 8015c68:	891b      	ldrh	r3, [r3, #8]
 8015c6a:	3b01      	subs	r3, #1
 8015c6c:	b29a      	uxth	r2, r3
 8015c6e:	4b4b      	ldr	r3, [pc, #300]	; (8015d9c <tcp_receive+0x888>)
 8015c70:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015c72:	4b4a      	ldr	r3, [pc, #296]	; (8015d9c <tcp_receive+0x888>)
 8015c74:	685b      	ldr	r3, [r3, #4]
 8015c76:	4a49      	ldr	r2, [pc, #292]	; (8015d9c <tcp_receive+0x888>)
 8015c78:	8912      	ldrh	r2, [r2, #8]
 8015c7a:	4611      	mov	r1, r2
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f7fc f9e5 	bl	801204c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015c82:	4b46      	ldr	r3, [pc, #280]	; (8015d9c <tcp_receive+0x888>)
 8015c84:	891c      	ldrh	r4, [r3, #8]
 8015c86:	4b45      	ldr	r3, [pc, #276]	; (8015d9c <tcp_receive+0x888>)
 8015c88:	68db      	ldr	r3, [r3, #12]
 8015c8a:	899b      	ldrh	r3, [r3, #12]
 8015c8c:	b29b      	uxth	r3, r3
 8015c8e:	4618      	mov	r0, r3
 8015c90:	f7f8 fccc 	bl	800e62c <lwip_htons>
 8015c94:	4603      	mov	r3, r0
 8015c96:	b2db      	uxtb	r3, r3
 8015c98:	f003 0303 	and.w	r3, r3, #3
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d001      	beq.n	8015ca4 <tcp_receive+0x790>
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	e000      	b.n	8015ca6 <tcp_receive+0x792>
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	4423      	add	r3, r4
 8015ca8:	b29a      	uxth	r2, r3
 8015caa:	4b3d      	ldr	r3, [pc, #244]	; (8015da0 <tcp_receive+0x88c>)
 8015cac:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015cae:	4b3c      	ldr	r3, [pc, #240]	; (8015da0 <tcp_receive+0x88c>)
 8015cb0:	881b      	ldrh	r3, [r3, #0]
 8015cb2:	461a      	mov	r2, r3
 8015cb4:	4b38      	ldr	r3, [pc, #224]	; (8015d98 <tcp_receive+0x884>)
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	441a      	add	r2, r3
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cbe:	6879      	ldr	r1, [r7, #4]
 8015cc0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015cc2:	440b      	add	r3, r1
 8015cc4:	429a      	cmp	r2, r3
 8015cc6:	d006      	beq.n	8015cd6 <tcp_receive+0x7c2>
 8015cc8:	4b36      	ldr	r3, [pc, #216]	; (8015da4 <tcp_receive+0x890>)
 8015cca:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8015cce:	4936      	ldr	r1, [pc, #216]	; (8015da8 <tcp_receive+0x894>)
 8015cd0:	4836      	ldr	r0, [pc, #216]	; (8015dac <tcp_receive+0x898>)
 8015cd2:	f006 f88b 	bl	801bdec <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	f000 80e7 	beq.w	8015eae <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015ce0:	4b2e      	ldr	r3, [pc, #184]	; (8015d9c <tcp_receive+0x888>)
 8015ce2:	68db      	ldr	r3, [r3, #12]
 8015ce4:	899b      	ldrh	r3, [r3, #12]
 8015ce6:	b29b      	uxth	r3, r3
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f7f8 fc9f 	bl	800e62c <lwip_htons>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	b2db      	uxtb	r3, r3
 8015cf2:	f003 0301 	and.w	r3, r3, #1
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d010      	beq.n	8015d1c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015cfa:	e00a      	b.n	8015d12 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d00:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d06:	681a      	ldr	r2, [r3, #0]
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015d0c:	68f8      	ldr	r0, [r7, #12]
 8015d0e:	f7fd fd96 	bl	801383e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d1f0      	bne.n	8015cfc <tcp_receive+0x7e8>
 8015d1a:	e0c8      	b.n	8015eae <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d20:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015d22:	e052      	b.n	8015dca <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d26:	68db      	ldr	r3, [r3, #12]
 8015d28:	899b      	ldrh	r3, [r3, #12]
 8015d2a:	b29b      	uxth	r3, r3
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f7f8 fc7d 	bl	800e62c <lwip_htons>
 8015d32:	4603      	mov	r3, r0
 8015d34:	b2db      	uxtb	r3, r3
 8015d36:	f003 0301 	and.w	r3, r3, #1
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d03d      	beq.n	8015dba <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015d3e:	4b17      	ldr	r3, [pc, #92]	; (8015d9c <tcp_receive+0x888>)
 8015d40:	68db      	ldr	r3, [r3, #12]
 8015d42:	899b      	ldrh	r3, [r3, #12]
 8015d44:	b29b      	uxth	r3, r3
 8015d46:	4618      	mov	r0, r3
 8015d48:	f7f8 fc70 	bl	800e62c <lwip_htons>
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	b2db      	uxtb	r3, r3
 8015d50:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d130      	bne.n	8015dba <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015d58:	4b10      	ldr	r3, [pc, #64]	; (8015d9c <tcp_receive+0x888>)
 8015d5a:	68db      	ldr	r3, [r3, #12]
 8015d5c:	899b      	ldrh	r3, [r3, #12]
 8015d5e:	b29c      	uxth	r4, r3
 8015d60:	2001      	movs	r0, #1
 8015d62:	f7f8 fc63 	bl	800e62c <lwip_htons>
 8015d66:	4603      	mov	r3, r0
 8015d68:	461a      	mov	r2, r3
 8015d6a:	4b0c      	ldr	r3, [pc, #48]	; (8015d9c <tcp_receive+0x888>)
 8015d6c:	68db      	ldr	r3, [r3, #12]
 8015d6e:	4322      	orrs	r2, r4
 8015d70:	b292      	uxth	r2, r2
 8015d72:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015d74:	4b09      	ldr	r3, [pc, #36]	; (8015d9c <tcp_receive+0x888>)
 8015d76:	891c      	ldrh	r4, [r3, #8]
 8015d78:	4b08      	ldr	r3, [pc, #32]	; (8015d9c <tcp_receive+0x888>)
 8015d7a:	68db      	ldr	r3, [r3, #12]
 8015d7c:	899b      	ldrh	r3, [r3, #12]
 8015d7e:	b29b      	uxth	r3, r3
 8015d80:	4618      	mov	r0, r3
 8015d82:	f7f8 fc53 	bl	800e62c <lwip_htons>
 8015d86:	4603      	mov	r3, r0
 8015d88:	b2db      	uxtb	r3, r3
 8015d8a:	f003 0303 	and.w	r3, r3, #3
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d00e      	beq.n	8015db0 <tcp_receive+0x89c>
 8015d92:	2301      	movs	r3, #1
 8015d94:	e00d      	b.n	8015db2 <tcp_receive+0x89e>
 8015d96:	bf00      	nop
 8015d98:	24003b90 	.word	0x24003b90
 8015d9c:	24003b70 	.word	0x24003b70
 8015da0:	24003b9a 	.word	0x24003b9a
 8015da4:	080215b4 	.word	0x080215b4
 8015da8:	08021988 	.word	0x08021988
 8015dac:	0802162c 	.word	0x0802162c
 8015db0:	2300      	movs	r3, #0
 8015db2:	4423      	add	r3, r4
 8015db4:	b29a      	uxth	r2, r3
 8015db6:	4b98      	ldr	r3, [pc, #608]	; (8016018 <tcp_receive+0xb04>)
 8015db8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dbc:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015dc4:	6938      	ldr	r0, [r7, #16]
 8015dc6:	f7fd fd3a 	bl	801383e <tcp_seg_free>
            while (next &&
 8015dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d00e      	beq.n	8015dee <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015dd0:	4b91      	ldr	r3, [pc, #580]	; (8016018 <tcp_receive+0xb04>)
 8015dd2:	881b      	ldrh	r3, [r3, #0]
 8015dd4:	461a      	mov	r2, r3
 8015dd6:	4b91      	ldr	r3, [pc, #580]	; (801601c <tcp_receive+0xb08>)
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	441a      	add	r2, r3
 8015ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dde:	68db      	ldr	r3, [r3, #12]
 8015de0:	685b      	ldr	r3, [r3, #4]
 8015de2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015de4:	8909      	ldrh	r1, [r1, #8]
 8015de6:	440b      	add	r3, r1
 8015de8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	da9a      	bge.n	8015d24 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d059      	beq.n	8015ea8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015df4:	4b88      	ldr	r3, [pc, #544]	; (8016018 <tcp_receive+0xb04>)
 8015df6:	881b      	ldrh	r3, [r3, #0]
 8015df8:	461a      	mov	r2, r3
 8015dfa:	4b88      	ldr	r3, [pc, #544]	; (801601c <tcp_receive+0xb08>)
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	441a      	add	r2, r3
 8015e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e02:	68db      	ldr	r3, [r3, #12]
 8015e04:	685b      	ldr	r3, [r3, #4]
 8015e06:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	dd4d      	ble.n	8015ea8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e0e:	68db      	ldr	r3, [r3, #12]
 8015e10:	685b      	ldr	r3, [r3, #4]
 8015e12:	b29a      	uxth	r2, r3
 8015e14:	4b81      	ldr	r3, [pc, #516]	; (801601c <tcp_receive+0xb08>)
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	b29b      	uxth	r3, r3
 8015e1a:	1ad3      	subs	r3, r2, r3
 8015e1c:	b29a      	uxth	r2, r3
 8015e1e:	4b80      	ldr	r3, [pc, #512]	; (8016020 <tcp_receive+0xb0c>)
 8015e20:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015e22:	4b7f      	ldr	r3, [pc, #508]	; (8016020 <tcp_receive+0xb0c>)
 8015e24:	68db      	ldr	r3, [r3, #12]
 8015e26:	899b      	ldrh	r3, [r3, #12]
 8015e28:	b29b      	uxth	r3, r3
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7f8 fbfe 	bl	800e62c <lwip_htons>
 8015e30:	4603      	mov	r3, r0
 8015e32:	b2db      	uxtb	r3, r3
 8015e34:	f003 0302 	and.w	r3, r3, #2
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d005      	beq.n	8015e48 <tcp_receive+0x934>
                inseg.len -= 1;
 8015e3c:	4b78      	ldr	r3, [pc, #480]	; (8016020 <tcp_receive+0xb0c>)
 8015e3e:	891b      	ldrh	r3, [r3, #8]
 8015e40:	3b01      	subs	r3, #1
 8015e42:	b29a      	uxth	r2, r3
 8015e44:	4b76      	ldr	r3, [pc, #472]	; (8016020 <tcp_receive+0xb0c>)
 8015e46:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015e48:	4b75      	ldr	r3, [pc, #468]	; (8016020 <tcp_receive+0xb0c>)
 8015e4a:	685b      	ldr	r3, [r3, #4]
 8015e4c:	4a74      	ldr	r2, [pc, #464]	; (8016020 <tcp_receive+0xb0c>)
 8015e4e:	8912      	ldrh	r2, [r2, #8]
 8015e50:	4611      	mov	r1, r2
 8015e52:	4618      	mov	r0, r3
 8015e54:	f7fc f8fa 	bl	801204c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015e58:	4b71      	ldr	r3, [pc, #452]	; (8016020 <tcp_receive+0xb0c>)
 8015e5a:	891c      	ldrh	r4, [r3, #8]
 8015e5c:	4b70      	ldr	r3, [pc, #448]	; (8016020 <tcp_receive+0xb0c>)
 8015e5e:	68db      	ldr	r3, [r3, #12]
 8015e60:	899b      	ldrh	r3, [r3, #12]
 8015e62:	b29b      	uxth	r3, r3
 8015e64:	4618      	mov	r0, r3
 8015e66:	f7f8 fbe1 	bl	800e62c <lwip_htons>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	b2db      	uxtb	r3, r3
 8015e6e:	f003 0303 	and.w	r3, r3, #3
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d001      	beq.n	8015e7a <tcp_receive+0x966>
 8015e76:	2301      	movs	r3, #1
 8015e78:	e000      	b.n	8015e7c <tcp_receive+0x968>
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	4423      	add	r3, r4
 8015e7e:	b29a      	uxth	r2, r3
 8015e80:	4b65      	ldr	r3, [pc, #404]	; (8016018 <tcp_receive+0xb04>)
 8015e82:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015e84:	4b64      	ldr	r3, [pc, #400]	; (8016018 <tcp_receive+0xb04>)
 8015e86:	881b      	ldrh	r3, [r3, #0]
 8015e88:	461a      	mov	r2, r3
 8015e8a:	4b64      	ldr	r3, [pc, #400]	; (801601c <tcp_receive+0xb08>)
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	441a      	add	r2, r3
 8015e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e92:	68db      	ldr	r3, [r3, #12]
 8015e94:	685b      	ldr	r3, [r3, #4]
 8015e96:	429a      	cmp	r2, r3
 8015e98:	d006      	beq.n	8015ea8 <tcp_receive+0x994>
 8015e9a:	4b62      	ldr	r3, [pc, #392]	; (8016024 <tcp_receive+0xb10>)
 8015e9c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8015ea0:	4961      	ldr	r1, [pc, #388]	; (8016028 <tcp_receive+0xb14>)
 8015ea2:	4862      	ldr	r0, [pc, #392]	; (801602c <tcp_receive+0xb18>)
 8015ea4:	f005 ffa2 	bl	801bdec <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015eac:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015eae:	4b5a      	ldr	r3, [pc, #360]	; (8016018 <tcp_receive+0xb04>)
 8015eb0:	881b      	ldrh	r3, [r3, #0]
 8015eb2:	461a      	mov	r2, r3
 8015eb4:	4b59      	ldr	r3, [pc, #356]	; (801601c <tcp_receive+0xb08>)
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	441a      	add	r2, r3
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015ec2:	4b55      	ldr	r3, [pc, #340]	; (8016018 <tcp_receive+0xb04>)
 8015ec4:	881b      	ldrh	r3, [r3, #0]
 8015ec6:	429a      	cmp	r2, r3
 8015ec8:	d206      	bcs.n	8015ed8 <tcp_receive+0x9c4>
 8015eca:	4b56      	ldr	r3, [pc, #344]	; (8016024 <tcp_receive+0xb10>)
 8015ecc:	f240 6207 	movw	r2, #1543	; 0x607
 8015ed0:	4957      	ldr	r1, [pc, #348]	; (8016030 <tcp_receive+0xb1c>)
 8015ed2:	4856      	ldr	r0, [pc, #344]	; (801602c <tcp_receive+0xb18>)
 8015ed4:	f005 ff8a 	bl	801bdec <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015edc:	4b4e      	ldr	r3, [pc, #312]	; (8016018 <tcp_receive+0xb04>)
 8015ede:	881b      	ldrh	r3, [r3, #0]
 8015ee0:	1ad3      	subs	r3, r2, r3
 8015ee2:	b29a      	uxth	r2, r3
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015ee8:	6878      	ldr	r0, [r7, #4]
 8015eea:	f7fc ffc9 	bl	8012e80 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015eee:	4b4c      	ldr	r3, [pc, #304]	; (8016020 <tcp_receive+0xb0c>)
 8015ef0:	685b      	ldr	r3, [r3, #4]
 8015ef2:	891b      	ldrh	r3, [r3, #8]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d006      	beq.n	8015f06 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8015ef8:	4b49      	ldr	r3, [pc, #292]	; (8016020 <tcp_receive+0xb0c>)
 8015efa:	685b      	ldr	r3, [r3, #4]
 8015efc:	4a4d      	ldr	r2, [pc, #308]	; (8016034 <tcp_receive+0xb20>)
 8015efe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015f00:	4b47      	ldr	r3, [pc, #284]	; (8016020 <tcp_receive+0xb0c>)
 8015f02:	2200      	movs	r2, #0
 8015f04:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015f06:	4b46      	ldr	r3, [pc, #280]	; (8016020 <tcp_receive+0xb0c>)
 8015f08:	68db      	ldr	r3, [r3, #12]
 8015f0a:	899b      	ldrh	r3, [r3, #12]
 8015f0c:	b29b      	uxth	r3, r3
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7f8 fb8c 	bl	800e62c <lwip_htons>
 8015f14:	4603      	mov	r3, r0
 8015f16:	b2db      	uxtb	r3, r3
 8015f18:	f003 0301 	and.w	r3, r3, #1
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	f000 80b8 	beq.w	8016092 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015f22:	4b45      	ldr	r3, [pc, #276]	; (8016038 <tcp_receive+0xb24>)
 8015f24:	781b      	ldrb	r3, [r3, #0]
 8015f26:	f043 0320 	orr.w	r3, r3, #32
 8015f2a:	b2da      	uxtb	r2, r3
 8015f2c:	4b42      	ldr	r3, [pc, #264]	; (8016038 <tcp_receive+0xb24>)
 8015f2e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015f30:	e0af      	b.n	8016092 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f36:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f3c:	68db      	ldr	r3, [r3, #12]
 8015f3e:	685b      	ldr	r3, [r3, #4]
 8015f40:	4a36      	ldr	r2, [pc, #216]	; (801601c <tcp_receive+0xb08>)
 8015f42:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015f44:	68bb      	ldr	r3, [r7, #8]
 8015f46:	891b      	ldrh	r3, [r3, #8]
 8015f48:	461c      	mov	r4, r3
 8015f4a:	68bb      	ldr	r3, [r7, #8]
 8015f4c:	68db      	ldr	r3, [r3, #12]
 8015f4e:	899b      	ldrh	r3, [r3, #12]
 8015f50:	b29b      	uxth	r3, r3
 8015f52:	4618      	mov	r0, r3
 8015f54:	f7f8 fb6a 	bl	800e62c <lwip_htons>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	b2db      	uxtb	r3, r3
 8015f5c:	f003 0303 	and.w	r3, r3, #3
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d001      	beq.n	8015f68 <tcp_receive+0xa54>
 8015f64:	2301      	movs	r3, #1
 8015f66:	e000      	b.n	8015f6a <tcp_receive+0xa56>
 8015f68:	2300      	movs	r3, #0
 8015f6a:	191a      	adds	r2, r3, r4
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f70:	441a      	add	r2, r3
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f7a:	461c      	mov	r4, r3
 8015f7c:	68bb      	ldr	r3, [r7, #8]
 8015f7e:	891b      	ldrh	r3, [r3, #8]
 8015f80:	461d      	mov	r5, r3
 8015f82:	68bb      	ldr	r3, [r7, #8]
 8015f84:	68db      	ldr	r3, [r3, #12]
 8015f86:	899b      	ldrh	r3, [r3, #12]
 8015f88:	b29b      	uxth	r3, r3
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f7f8 fb4e 	bl	800e62c <lwip_htons>
 8015f90:	4603      	mov	r3, r0
 8015f92:	b2db      	uxtb	r3, r3
 8015f94:	f003 0303 	and.w	r3, r3, #3
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d001      	beq.n	8015fa0 <tcp_receive+0xa8c>
 8015f9c:	2301      	movs	r3, #1
 8015f9e:	e000      	b.n	8015fa2 <tcp_receive+0xa8e>
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	442b      	add	r3, r5
 8015fa4:	429c      	cmp	r4, r3
 8015fa6:	d206      	bcs.n	8015fb6 <tcp_receive+0xaa2>
 8015fa8:	4b1e      	ldr	r3, [pc, #120]	; (8016024 <tcp_receive+0xb10>)
 8015faa:	f240 622b 	movw	r2, #1579	; 0x62b
 8015fae:	4923      	ldr	r1, [pc, #140]	; (801603c <tcp_receive+0xb28>)
 8015fb0:	481e      	ldr	r0, [pc, #120]	; (801602c <tcp_receive+0xb18>)
 8015fb2:	f005 ff1b 	bl	801bdec <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015fb6:	68bb      	ldr	r3, [r7, #8]
 8015fb8:	891b      	ldrh	r3, [r3, #8]
 8015fba:	461c      	mov	r4, r3
 8015fbc:	68bb      	ldr	r3, [r7, #8]
 8015fbe:	68db      	ldr	r3, [r3, #12]
 8015fc0:	899b      	ldrh	r3, [r3, #12]
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	f7f8 fb31 	bl	800e62c <lwip_htons>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	b2db      	uxtb	r3, r3
 8015fce:	f003 0303 	and.w	r3, r3, #3
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d001      	beq.n	8015fda <tcp_receive+0xac6>
 8015fd6:	2301      	movs	r3, #1
 8015fd8:	e000      	b.n	8015fdc <tcp_receive+0xac8>
 8015fda:	2300      	movs	r3, #0
 8015fdc:	1919      	adds	r1, r3, r4
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015fe2:	b28b      	uxth	r3, r1
 8015fe4:	1ad3      	subs	r3, r2, r3
 8015fe6:	b29a      	uxth	r2, r3
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015fec:	6878      	ldr	r0, [r7, #4]
 8015fee:	f7fc ff47 	bl	8012e80 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	685b      	ldr	r3, [r3, #4]
 8015ff6:	891b      	ldrh	r3, [r3, #8]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d028      	beq.n	801604e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015ffc:	4b0d      	ldr	r3, [pc, #52]	; (8016034 <tcp_receive+0xb20>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d01d      	beq.n	8016040 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8016004:	4b0b      	ldr	r3, [pc, #44]	; (8016034 <tcp_receive+0xb20>)
 8016006:	681a      	ldr	r2, [r3, #0]
 8016008:	68bb      	ldr	r3, [r7, #8]
 801600a:	685b      	ldr	r3, [r3, #4]
 801600c:	4619      	mov	r1, r3
 801600e:	4610      	mov	r0, r2
 8016010:	f7fc fa64 	bl	80124dc <pbuf_cat>
 8016014:	e018      	b.n	8016048 <tcp_receive+0xb34>
 8016016:	bf00      	nop
 8016018:	24003b9a 	.word	0x24003b9a
 801601c:	24003b90 	.word	0x24003b90
 8016020:	24003b70 	.word	0x24003b70
 8016024:	080215b4 	.word	0x080215b4
 8016028:	080219c0 	.word	0x080219c0
 801602c:	0802162c 	.word	0x0802162c
 8016030:	080219fc 	.word	0x080219fc
 8016034:	24003ba0 	.word	0x24003ba0
 8016038:	24003b9d 	.word	0x24003b9d
 801603c:	08021a1c 	.word	0x08021a1c
            } else {
              recv_data = cseg->p;
 8016040:	68bb      	ldr	r3, [r7, #8]
 8016042:	685b      	ldr	r3, [r3, #4]
 8016044:	4a70      	ldr	r2, [pc, #448]	; (8016208 <tcp_receive+0xcf4>)
 8016046:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016048:	68bb      	ldr	r3, [r7, #8]
 801604a:	2200      	movs	r2, #0
 801604c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801604e:	68bb      	ldr	r3, [r7, #8]
 8016050:	68db      	ldr	r3, [r3, #12]
 8016052:	899b      	ldrh	r3, [r3, #12]
 8016054:	b29b      	uxth	r3, r3
 8016056:	4618      	mov	r0, r3
 8016058:	f7f8 fae8 	bl	800e62c <lwip_htons>
 801605c:	4603      	mov	r3, r0
 801605e:	b2db      	uxtb	r3, r3
 8016060:	f003 0301 	and.w	r3, r3, #1
 8016064:	2b00      	cmp	r3, #0
 8016066:	d00d      	beq.n	8016084 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016068:	4b68      	ldr	r3, [pc, #416]	; (801620c <tcp_receive+0xcf8>)
 801606a:	781b      	ldrb	r3, [r3, #0]
 801606c:	f043 0320 	orr.w	r3, r3, #32
 8016070:	b2da      	uxtb	r2, r3
 8016072:	4b66      	ldr	r3, [pc, #408]	; (801620c <tcp_receive+0xcf8>)
 8016074:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	7d1b      	ldrb	r3, [r3, #20]
 801607a:	2b04      	cmp	r3, #4
 801607c:	d102      	bne.n	8016084 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	2207      	movs	r2, #7
 8016082:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	681a      	ldr	r2, [r3, #0]
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801608c:	68b8      	ldr	r0, [r7, #8]
 801608e:	f7fd fbd6 	bl	801383e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016096:	2b00      	cmp	r3, #0
 8016098:	d008      	beq.n	80160ac <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801609e:	68db      	ldr	r3, [r3, #12]
 80160a0:	685a      	ldr	r2, [r3, #4]
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80160a6:	429a      	cmp	r2, r3
 80160a8:	f43f af43 	beq.w	8015f32 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	8b5b      	ldrh	r3, [r3, #26]
 80160b0:	f003 0301 	and.w	r3, r3, #1
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d00e      	beq.n	80160d6 <tcp_receive+0xbc2>
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	8b5b      	ldrh	r3, [r3, #26]
 80160bc:	f023 0301 	bic.w	r3, r3, #1
 80160c0:	b29a      	uxth	r2, r3
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	835a      	strh	r2, [r3, #26]
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	8b5b      	ldrh	r3, [r3, #26]
 80160ca:	f043 0302 	orr.w	r3, r3, #2
 80160ce:	b29a      	uxth	r2, r3
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80160d4:	e188      	b.n	80163e8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	8b5b      	ldrh	r3, [r3, #26]
 80160da:	f043 0301 	orr.w	r3, r3, #1
 80160de:	b29a      	uxth	r2, r3
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80160e4:	e180      	b.n	80163e8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d106      	bne.n	80160fc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80160ee:	4848      	ldr	r0, [pc, #288]	; (8016210 <tcp_receive+0xcfc>)
 80160f0:	f7fd fbbe 	bl	8013870 <tcp_seg_copy>
 80160f4:	4602      	mov	r2, r0
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	675a      	str	r2, [r3, #116]	; 0x74
 80160fa:	e16d      	b.n	80163d8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80160fc:	2300      	movs	r3, #0
 80160fe:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016104:	63bb      	str	r3, [r7, #56]	; 0x38
 8016106:	e157      	b.n	80163b8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8016108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801610a:	68db      	ldr	r3, [r3, #12]
 801610c:	685a      	ldr	r2, [r3, #4]
 801610e:	4b41      	ldr	r3, [pc, #260]	; (8016214 <tcp_receive+0xd00>)
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	429a      	cmp	r2, r3
 8016114:	d11d      	bne.n	8016152 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016116:	4b3e      	ldr	r3, [pc, #248]	; (8016210 <tcp_receive+0xcfc>)
 8016118:	891a      	ldrh	r2, [r3, #8]
 801611a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801611c:	891b      	ldrh	r3, [r3, #8]
 801611e:	429a      	cmp	r2, r3
 8016120:	f240 814f 	bls.w	80163c2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016124:	483a      	ldr	r0, [pc, #232]	; (8016210 <tcp_receive+0xcfc>)
 8016126:	f7fd fba3 	bl	8013870 <tcp_seg_copy>
 801612a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801612c:	697b      	ldr	r3, [r7, #20]
 801612e:	2b00      	cmp	r3, #0
 8016130:	f000 8149 	beq.w	80163c6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8016134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016136:	2b00      	cmp	r3, #0
 8016138:	d003      	beq.n	8016142 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801613a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801613c:	697a      	ldr	r2, [r7, #20]
 801613e:	601a      	str	r2, [r3, #0]
 8016140:	e002      	b.n	8016148 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	697a      	ldr	r2, [r7, #20]
 8016146:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016148:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801614a:	6978      	ldr	r0, [r7, #20]
 801614c:	f7ff f8de 	bl	801530c <tcp_oos_insert_segment>
                }
                break;
 8016150:	e139      	b.n	80163c6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8016152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016154:	2b00      	cmp	r3, #0
 8016156:	d117      	bne.n	8016188 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016158:	4b2e      	ldr	r3, [pc, #184]	; (8016214 <tcp_receive+0xd00>)
 801615a:	681a      	ldr	r2, [r3, #0]
 801615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801615e:	68db      	ldr	r3, [r3, #12]
 8016160:	685b      	ldr	r3, [r3, #4]
 8016162:	1ad3      	subs	r3, r2, r3
 8016164:	2b00      	cmp	r3, #0
 8016166:	da57      	bge.n	8016218 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016168:	4829      	ldr	r0, [pc, #164]	; (8016210 <tcp_receive+0xcfc>)
 801616a:	f7fd fb81 	bl	8013870 <tcp_seg_copy>
 801616e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016170:	69bb      	ldr	r3, [r7, #24]
 8016172:	2b00      	cmp	r3, #0
 8016174:	f000 8129 	beq.w	80163ca <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	69ba      	ldr	r2, [r7, #24]
 801617c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801617e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016180:	69b8      	ldr	r0, [r7, #24]
 8016182:	f7ff f8c3 	bl	801530c <tcp_oos_insert_segment>
                  }
                  break;
 8016186:	e120      	b.n	80163ca <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016188:	4b22      	ldr	r3, [pc, #136]	; (8016214 <tcp_receive+0xd00>)
 801618a:	681a      	ldr	r2, [r3, #0]
 801618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801618e:	68db      	ldr	r3, [r3, #12]
 8016190:	685b      	ldr	r3, [r3, #4]
 8016192:	1ad3      	subs	r3, r2, r3
 8016194:	3b01      	subs	r3, #1
 8016196:	2b00      	cmp	r3, #0
 8016198:	db3e      	blt.n	8016218 <tcp_receive+0xd04>
 801619a:	4b1e      	ldr	r3, [pc, #120]	; (8016214 <tcp_receive+0xd00>)
 801619c:	681a      	ldr	r2, [r3, #0]
 801619e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161a0:	68db      	ldr	r3, [r3, #12]
 80161a2:	685b      	ldr	r3, [r3, #4]
 80161a4:	1ad3      	subs	r3, r2, r3
 80161a6:	3301      	adds	r3, #1
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	dc35      	bgt.n	8016218 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80161ac:	4818      	ldr	r0, [pc, #96]	; (8016210 <tcp_receive+0xcfc>)
 80161ae:	f7fd fb5f 	bl	8013870 <tcp_seg_copy>
 80161b2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80161b4:	69fb      	ldr	r3, [r7, #28]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	f000 8109 	beq.w	80163ce <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80161bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161be:	68db      	ldr	r3, [r3, #12]
 80161c0:	685b      	ldr	r3, [r3, #4]
 80161c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80161c4:	8912      	ldrh	r2, [r2, #8]
 80161c6:	441a      	add	r2, r3
 80161c8:	4b12      	ldr	r3, [pc, #72]	; (8016214 <tcp_receive+0xd00>)
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	1ad3      	subs	r3, r2, r3
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	dd12      	ble.n	80161f8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80161d2:	4b10      	ldr	r3, [pc, #64]	; (8016214 <tcp_receive+0xd00>)
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	b29a      	uxth	r2, r3
 80161d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161da:	68db      	ldr	r3, [r3, #12]
 80161dc:	685b      	ldr	r3, [r3, #4]
 80161de:	b29b      	uxth	r3, r3
 80161e0:	1ad3      	subs	r3, r2, r3
 80161e2:	b29a      	uxth	r2, r3
 80161e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161e6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80161e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ea:	685a      	ldr	r2, [r3, #4]
 80161ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ee:	891b      	ldrh	r3, [r3, #8]
 80161f0:	4619      	mov	r1, r3
 80161f2:	4610      	mov	r0, r2
 80161f4:	f7fb ff2a 	bl	801204c <pbuf_realloc>
                    }
                    prev->next = cseg;
 80161f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161fa:	69fa      	ldr	r2, [r7, #28]
 80161fc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80161fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016200:	69f8      	ldr	r0, [r7, #28]
 8016202:	f7ff f883 	bl	801530c <tcp_oos_insert_segment>
                  }
                  break;
 8016206:	e0e2      	b.n	80163ce <tcp_receive+0xeba>
 8016208:	24003ba0 	.word	0x24003ba0
 801620c:	24003b9d 	.word	0x24003b9d
 8016210:	24003b70 	.word	0x24003b70
 8016214:	24003b90 	.word	0x24003b90
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801621a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	2b00      	cmp	r3, #0
 8016222:	f040 80c6 	bne.w	80163b2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016226:	4b80      	ldr	r3, [pc, #512]	; (8016428 <tcp_receive+0xf14>)
 8016228:	681a      	ldr	r2, [r3, #0]
 801622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801622c:	68db      	ldr	r3, [r3, #12]
 801622e:	685b      	ldr	r3, [r3, #4]
 8016230:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8016232:	2b00      	cmp	r3, #0
 8016234:	f340 80bd 	ble.w	80163b2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801623a:	68db      	ldr	r3, [r3, #12]
 801623c:	899b      	ldrh	r3, [r3, #12]
 801623e:	b29b      	uxth	r3, r3
 8016240:	4618      	mov	r0, r3
 8016242:	f7f8 f9f3 	bl	800e62c <lwip_htons>
 8016246:	4603      	mov	r3, r0
 8016248:	b2db      	uxtb	r3, r3
 801624a:	f003 0301 	and.w	r3, r3, #1
 801624e:	2b00      	cmp	r3, #0
 8016250:	f040 80bf 	bne.w	80163d2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016254:	4875      	ldr	r0, [pc, #468]	; (801642c <tcp_receive+0xf18>)
 8016256:	f7fd fb0b 	bl	8013870 <tcp_seg_copy>
 801625a:	4602      	mov	r2, r0
 801625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801625e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	2b00      	cmp	r3, #0
 8016266:	f000 80b6 	beq.w	80163d6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801626c:	68db      	ldr	r3, [r3, #12]
 801626e:	685b      	ldr	r3, [r3, #4]
 8016270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016272:	8912      	ldrh	r2, [r2, #8]
 8016274:	441a      	add	r2, r3
 8016276:	4b6c      	ldr	r3, [pc, #432]	; (8016428 <tcp_receive+0xf14>)
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	1ad3      	subs	r3, r2, r3
 801627c:	2b00      	cmp	r3, #0
 801627e:	dd12      	ble.n	80162a6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016280:	4b69      	ldr	r3, [pc, #420]	; (8016428 <tcp_receive+0xf14>)
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	b29a      	uxth	r2, r3
 8016286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016288:	68db      	ldr	r3, [r3, #12]
 801628a:	685b      	ldr	r3, [r3, #4]
 801628c:	b29b      	uxth	r3, r3
 801628e:	1ad3      	subs	r3, r2, r3
 8016290:	b29a      	uxth	r2, r3
 8016292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016294:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8016296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016298:	685a      	ldr	r2, [r3, #4]
 801629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801629c:	891b      	ldrh	r3, [r3, #8]
 801629e:	4619      	mov	r1, r3
 80162a0:	4610      	mov	r0, r2
 80162a2:	f7fb fed3 	bl	801204c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80162a6:	4b62      	ldr	r3, [pc, #392]	; (8016430 <tcp_receive+0xf1c>)
 80162a8:	881b      	ldrh	r3, [r3, #0]
 80162aa:	461a      	mov	r2, r3
 80162ac:	4b5e      	ldr	r3, [pc, #376]	; (8016428 <tcp_receive+0xf14>)
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	441a      	add	r2, r3
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162b6:	6879      	ldr	r1, [r7, #4]
 80162b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80162ba:	440b      	add	r3, r1
 80162bc:	1ad3      	subs	r3, r2, r3
 80162be:	2b00      	cmp	r3, #0
 80162c0:	f340 8089 	ble.w	80163d6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80162c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	68db      	ldr	r3, [r3, #12]
 80162ca:	899b      	ldrh	r3, [r3, #12]
 80162cc:	b29b      	uxth	r3, r3
 80162ce:	4618      	mov	r0, r3
 80162d0:	f7f8 f9ac 	bl	800e62c <lwip_htons>
 80162d4:	4603      	mov	r3, r0
 80162d6:	b2db      	uxtb	r3, r3
 80162d8:	f003 0301 	and.w	r3, r3, #1
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d022      	beq.n	8016326 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80162e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	68db      	ldr	r3, [r3, #12]
 80162e6:	899b      	ldrh	r3, [r3, #12]
 80162e8:	b29b      	uxth	r3, r3
 80162ea:	b21b      	sxth	r3, r3
 80162ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80162f0:	b21c      	sxth	r4, r3
 80162f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	68db      	ldr	r3, [r3, #12]
 80162f8:	899b      	ldrh	r3, [r3, #12]
 80162fa:	b29b      	uxth	r3, r3
 80162fc:	4618      	mov	r0, r3
 80162fe:	f7f8 f995 	bl	800e62c <lwip_htons>
 8016302:	4603      	mov	r3, r0
 8016304:	b2db      	uxtb	r3, r3
 8016306:	b29b      	uxth	r3, r3
 8016308:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801630c:	b29b      	uxth	r3, r3
 801630e:	4618      	mov	r0, r3
 8016310:	f7f8 f98c 	bl	800e62c <lwip_htons>
 8016314:	4603      	mov	r3, r0
 8016316:	b21b      	sxth	r3, r3
 8016318:	4323      	orrs	r3, r4
 801631a:	b21a      	sxth	r2, r3
 801631c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	68db      	ldr	r3, [r3, #12]
 8016322:	b292      	uxth	r2, r2
 8016324:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801632a:	b29a      	uxth	r2, r3
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016330:	4413      	add	r3, r2
 8016332:	b299      	uxth	r1, r3
 8016334:	4b3c      	ldr	r3, [pc, #240]	; (8016428 <tcp_receive+0xf14>)
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	b29a      	uxth	r2, r3
 801633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	1a8a      	subs	r2, r1, r2
 8016340:	b292      	uxth	r2, r2
 8016342:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	685a      	ldr	r2, [r3, #4]
 801634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	891b      	ldrh	r3, [r3, #8]
 8016350:	4619      	mov	r1, r3
 8016352:	4610      	mov	r0, r2
 8016354:	f7fb fe7a 	bl	801204c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	891c      	ldrh	r4, [r3, #8]
 801635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	68db      	ldr	r3, [r3, #12]
 8016364:	899b      	ldrh	r3, [r3, #12]
 8016366:	b29b      	uxth	r3, r3
 8016368:	4618      	mov	r0, r3
 801636a:	f7f8 f95f 	bl	800e62c <lwip_htons>
 801636e:	4603      	mov	r3, r0
 8016370:	b2db      	uxtb	r3, r3
 8016372:	f003 0303 	and.w	r3, r3, #3
 8016376:	2b00      	cmp	r3, #0
 8016378:	d001      	beq.n	801637e <tcp_receive+0xe6a>
 801637a:	2301      	movs	r3, #1
 801637c:	e000      	b.n	8016380 <tcp_receive+0xe6c>
 801637e:	2300      	movs	r3, #0
 8016380:	4423      	add	r3, r4
 8016382:	b29a      	uxth	r2, r3
 8016384:	4b2a      	ldr	r3, [pc, #168]	; (8016430 <tcp_receive+0xf1c>)
 8016386:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016388:	4b29      	ldr	r3, [pc, #164]	; (8016430 <tcp_receive+0xf1c>)
 801638a:	881b      	ldrh	r3, [r3, #0]
 801638c:	461a      	mov	r2, r3
 801638e:	4b26      	ldr	r3, [pc, #152]	; (8016428 <tcp_receive+0xf14>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	441a      	add	r2, r3
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016398:	6879      	ldr	r1, [r7, #4]
 801639a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801639c:	440b      	add	r3, r1
 801639e:	429a      	cmp	r2, r3
 80163a0:	d019      	beq.n	80163d6 <tcp_receive+0xec2>
 80163a2:	4b24      	ldr	r3, [pc, #144]	; (8016434 <tcp_receive+0xf20>)
 80163a4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80163a8:	4923      	ldr	r1, [pc, #140]	; (8016438 <tcp_receive+0xf24>)
 80163aa:	4824      	ldr	r0, [pc, #144]	; (801643c <tcp_receive+0xf28>)
 80163ac:	f005 fd1e 	bl	801bdec <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80163b0:	e011      	b.n	80163d6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80163b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80163b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	f47f aea4 	bne.w	8016108 <tcp_receive+0xbf4>
 80163c0:	e00a      	b.n	80163d8 <tcp_receive+0xec4>
                break;
 80163c2:	bf00      	nop
 80163c4:	e008      	b.n	80163d8 <tcp_receive+0xec4>
                break;
 80163c6:	bf00      	nop
 80163c8:	e006      	b.n	80163d8 <tcp_receive+0xec4>
                  break;
 80163ca:	bf00      	nop
 80163cc:	e004      	b.n	80163d8 <tcp_receive+0xec4>
                  break;
 80163ce:	bf00      	nop
 80163d0:	e002      	b.n	80163d8 <tcp_receive+0xec4>
                  break;
 80163d2:	bf00      	nop
 80163d4:	e000      	b.n	80163d8 <tcp_receive+0xec4>
                break;
 80163d6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80163d8:	6878      	ldr	r0, [r7, #4]
 80163da:	f001 fa33 	bl	8017844 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80163de:	e003      	b.n	80163e8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80163e0:	6878      	ldr	r0, [r7, #4]
 80163e2:	f001 fa2f 	bl	8017844 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80163e6:	e01a      	b.n	801641e <tcp_receive+0xf0a>
 80163e8:	e019      	b.n	801641e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80163ea:	4b0f      	ldr	r3, [pc, #60]	; (8016428 <tcp_receive+0xf14>)
 80163ec:	681a      	ldr	r2, [r3, #0]
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163f2:	1ad3      	subs	r3, r2, r3
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	db0a      	blt.n	801640e <tcp_receive+0xefa>
 80163f8:	4b0b      	ldr	r3, [pc, #44]	; (8016428 <tcp_receive+0xf14>)
 80163fa:	681a      	ldr	r2, [r3, #0]
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016400:	6879      	ldr	r1, [r7, #4]
 8016402:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016404:	440b      	add	r3, r1
 8016406:	1ad3      	subs	r3, r2, r3
 8016408:	3301      	adds	r3, #1
 801640a:	2b00      	cmp	r3, #0
 801640c:	dd07      	ble.n	801641e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	8b5b      	ldrh	r3, [r3, #26]
 8016412:	f043 0302 	orr.w	r3, r3, #2
 8016416:	b29a      	uxth	r2, r3
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801641c:	e7ff      	b.n	801641e <tcp_receive+0xf0a>
 801641e:	bf00      	nop
 8016420:	3750      	adds	r7, #80	; 0x50
 8016422:	46bd      	mov	sp, r7
 8016424:	bdb0      	pop	{r4, r5, r7, pc}
 8016426:	bf00      	nop
 8016428:	24003b90 	.word	0x24003b90
 801642c:	24003b70 	.word	0x24003b70
 8016430:	24003b9a 	.word	0x24003b9a
 8016434:	080215b4 	.word	0x080215b4
 8016438:	08021988 	.word	0x08021988
 801643c:	0802162c 	.word	0x0802162c

08016440 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8016440:	b480      	push	{r7}
 8016442:	b083      	sub	sp, #12
 8016444:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016446:	4b15      	ldr	r3, [pc, #84]	; (801649c <tcp_get_next_optbyte+0x5c>)
 8016448:	881b      	ldrh	r3, [r3, #0]
 801644a:	1c5a      	adds	r2, r3, #1
 801644c:	b291      	uxth	r1, r2
 801644e:	4a13      	ldr	r2, [pc, #76]	; (801649c <tcp_get_next_optbyte+0x5c>)
 8016450:	8011      	strh	r1, [r2, #0]
 8016452:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016454:	4b12      	ldr	r3, [pc, #72]	; (80164a0 <tcp_get_next_optbyte+0x60>)
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d004      	beq.n	8016466 <tcp_get_next_optbyte+0x26>
 801645c:	4b11      	ldr	r3, [pc, #68]	; (80164a4 <tcp_get_next_optbyte+0x64>)
 801645e:	881b      	ldrh	r3, [r3, #0]
 8016460:	88fa      	ldrh	r2, [r7, #6]
 8016462:	429a      	cmp	r2, r3
 8016464:	d208      	bcs.n	8016478 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016466:	4b10      	ldr	r3, [pc, #64]	; (80164a8 <tcp_get_next_optbyte+0x68>)
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	3314      	adds	r3, #20
 801646c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801646e:	88fb      	ldrh	r3, [r7, #6]
 8016470:	683a      	ldr	r2, [r7, #0]
 8016472:	4413      	add	r3, r2
 8016474:	781b      	ldrb	r3, [r3, #0]
 8016476:	e00b      	b.n	8016490 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016478:	88fb      	ldrh	r3, [r7, #6]
 801647a:	b2da      	uxtb	r2, r3
 801647c:	4b09      	ldr	r3, [pc, #36]	; (80164a4 <tcp_get_next_optbyte+0x64>)
 801647e:	881b      	ldrh	r3, [r3, #0]
 8016480:	b2db      	uxtb	r3, r3
 8016482:	1ad3      	subs	r3, r2, r3
 8016484:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8016486:	4b06      	ldr	r3, [pc, #24]	; (80164a0 <tcp_get_next_optbyte+0x60>)
 8016488:	681a      	ldr	r2, [r3, #0]
 801648a:	797b      	ldrb	r3, [r7, #5]
 801648c:	4413      	add	r3, r2
 801648e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016490:	4618      	mov	r0, r3
 8016492:	370c      	adds	r7, #12
 8016494:	46bd      	mov	sp, r7
 8016496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649a:	4770      	bx	lr
 801649c:	24003b8c 	.word	0x24003b8c
 80164a0:	24003b88 	.word	0x24003b88
 80164a4:	24003b86 	.word	0x24003b86
 80164a8:	24003b80 	.word	0x24003b80

080164ac <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b084      	sub	sp, #16
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d106      	bne.n	80164c8 <tcp_parseopt+0x1c>
 80164ba:	4b32      	ldr	r3, [pc, #200]	; (8016584 <tcp_parseopt+0xd8>)
 80164bc:	f240 727d 	movw	r2, #1917	; 0x77d
 80164c0:	4931      	ldr	r1, [pc, #196]	; (8016588 <tcp_parseopt+0xdc>)
 80164c2:	4832      	ldr	r0, [pc, #200]	; (801658c <tcp_parseopt+0xe0>)
 80164c4:	f005 fc92 	bl	801bdec <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80164c8:	4b31      	ldr	r3, [pc, #196]	; (8016590 <tcp_parseopt+0xe4>)
 80164ca:	881b      	ldrh	r3, [r3, #0]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d055      	beq.n	801657c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80164d0:	4b30      	ldr	r3, [pc, #192]	; (8016594 <tcp_parseopt+0xe8>)
 80164d2:	2200      	movs	r2, #0
 80164d4:	801a      	strh	r2, [r3, #0]
 80164d6:	e045      	b.n	8016564 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80164d8:	f7ff ffb2 	bl	8016440 <tcp_get_next_optbyte>
 80164dc:	4603      	mov	r3, r0
 80164de:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80164e0:	7bfb      	ldrb	r3, [r7, #15]
 80164e2:	2b02      	cmp	r3, #2
 80164e4:	d006      	beq.n	80164f4 <tcp_parseopt+0x48>
 80164e6:	2b02      	cmp	r3, #2
 80164e8:	dc2b      	bgt.n	8016542 <tcp_parseopt+0x96>
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d041      	beq.n	8016572 <tcp_parseopt+0xc6>
 80164ee:	2b01      	cmp	r3, #1
 80164f0:	d127      	bne.n	8016542 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80164f2:	e037      	b.n	8016564 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80164f4:	f7ff ffa4 	bl	8016440 <tcp_get_next_optbyte>
 80164f8:	4603      	mov	r3, r0
 80164fa:	2b04      	cmp	r3, #4
 80164fc:	d13b      	bne.n	8016576 <tcp_parseopt+0xca>
 80164fe:	4b25      	ldr	r3, [pc, #148]	; (8016594 <tcp_parseopt+0xe8>)
 8016500:	881b      	ldrh	r3, [r3, #0]
 8016502:	3301      	adds	r3, #1
 8016504:	4a22      	ldr	r2, [pc, #136]	; (8016590 <tcp_parseopt+0xe4>)
 8016506:	8812      	ldrh	r2, [r2, #0]
 8016508:	4293      	cmp	r3, r2
 801650a:	da34      	bge.n	8016576 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801650c:	f7ff ff98 	bl	8016440 <tcp_get_next_optbyte>
 8016510:	4603      	mov	r3, r0
 8016512:	b29b      	uxth	r3, r3
 8016514:	021b      	lsls	r3, r3, #8
 8016516:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016518:	f7ff ff92 	bl	8016440 <tcp_get_next_optbyte>
 801651c:	4603      	mov	r3, r0
 801651e:	b29a      	uxth	r2, r3
 8016520:	89bb      	ldrh	r3, [r7, #12]
 8016522:	4313      	orrs	r3, r2
 8016524:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016526:	89bb      	ldrh	r3, [r7, #12]
 8016528:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801652c:	d804      	bhi.n	8016538 <tcp_parseopt+0x8c>
 801652e:	89bb      	ldrh	r3, [r7, #12]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d001      	beq.n	8016538 <tcp_parseopt+0x8c>
 8016534:	89ba      	ldrh	r2, [r7, #12]
 8016536:	e001      	b.n	801653c <tcp_parseopt+0x90>
 8016538:	f44f 7206 	mov.w	r2, #536	; 0x218
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8016540:	e010      	b.n	8016564 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8016542:	f7ff ff7d 	bl	8016440 <tcp_get_next_optbyte>
 8016546:	4603      	mov	r3, r0
 8016548:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801654a:	7afb      	ldrb	r3, [r7, #11]
 801654c:	2b01      	cmp	r3, #1
 801654e:	d914      	bls.n	801657a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8016550:	7afb      	ldrb	r3, [r7, #11]
 8016552:	b29a      	uxth	r2, r3
 8016554:	4b0f      	ldr	r3, [pc, #60]	; (8016594 <tcp_parseopt+0xe8>)
 8016556:	881b      	ldrh	r3, [r3, #0]
 8016558:	4413      	add	r3, r2
 801655a:	b29b      	uxth	r3, r3
 801655c:	3b02      	subs	r3, #2
 801655e:	b29a      	uxth	r2, r3
 8016560:	4b0c      	ldr	r3, [pc, #48]	; (8016594 <tcp_parseopt+0xe8>)
 8016562:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016564:	4b0b      	ldr	r3, [pc, #44]	; (8016594 <tcp_parseopt+0xe8>)
 8016566:	881a      	ldrh	r2, [r3, #0]
 8016568:	4b09      	ldr	r3, [pc, #36]	; (8016590 <tcp_parseopt+0xe4>)
 801656a:	881b      	ldrh	r3, [r3, #0]
 801656c:	429a      	cmp	r2, r3
 801656e:	d3b3      	bcc.n	80164d8 <tcp_parseopt+0x2c>
 8016570:	e004      	b.n	801657c <tcp_parseopt+0xd0>
          return;
 8016572:	bf00      	nop
 8016574:	e002      	b.n	801657c <tcp_parseopt+0xd0>
            return;
 8016576:	bf00      	nop
 8016578:	e000      	b.n	801657c <tcp_parseopt+0xd0>
            return;
 801657a:	bf00      	nop
      }
    }
  }
}
 801657c:	3710      	adds	r7, #16
 801657e:	46bd      	mov	sp, r7
 8016580:	bd80      	pop	{r7, pc}
 8016582:	bf00      	nop
 8016584:	080215b4 	.word	0x080215b4
 8016588:	08021a44 	.word	0x08021a44
 801658c:	0802162c 	.word	0x0802162c
 8016590:	24003b84 	.word	0x24003b84
 8016594:	24003b8c 	.word	0x24003b8c

08016598 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016598:	b480      	push	{r7}
 801659a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801659c:	4b05      	ldr	r3, [pc, #20]	; (80165b4 <tcp_trigger_input_pcb_close+0x1c>)
 801659e:	781b      	ldrb	r3, [r3, #0]
 80165a0:	f043 0310 	orr.w	r3, r3, #16
 80165a4:	b2da      	uxtb	r2, r3
 80165a6:	4b03      	ldr	r3, [pc, #12]	; (80165b4 <tcp_trigger_input_pcb_close+0x1c>)
 80165a8:	701a      	strb	r2, [r3, #0]
}
 80165aa:	bf00      	nop
 80165ac:	46bd      	mov	sp, r7
 80165ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b2:	4770      	bx	lr
 80165b4:	24003b9d 	.word	0x24003b9d

080165b8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b084      	sub	sp, #16
 80165bc:	af00      	add	r7, sp, #0
 80165be:	60f8      	str	r0, [r7, #12]
 80165c0:	60b9      	str	r1, [r7, #8]
 80165c2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d00a      	beq.n	80165e0 <tcp_route+0x28>
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	7a1b      	ldrb	r3, [r3, #8]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d006      	beq.n	80165e0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	7a1b      	ldrb	r3, [r3, #8]
 80165d6:	4618      	mov	r0, r3
 80165d8:	f7fb fb7e 	bl	8011cd8 <netif_get_by_index>
 80165dc:	4603      	mov	r3, r0
 80165de:	e003      	b.n	80165e8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80165e0:	6878      	ldr	r0, [r7, #4]
 80165e2:	f7f9 faf9 	bl	800fbd8 <ip4_route>
 80165e6:	4603      	mov	r3, r0
  }
}
 80165e8:	4618      	mov	r0, r3
 80165ea:	3710      	adds	r7, #16
 80165ec:	46bd      	mov	sp, r7
 80165ee:	bd80      	pop	{r7, pc}

080165f0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80165f0:	b590      	push	{r4, r7, lr}
 80165f2:	b087      	sub	sp, #28
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	60f8      	str	r0, [r7, #12]
 80165f8:	60b9      	str	r1, [r7, #8]
 80165fa:	603b      	str	r3, [r7, #0]
 80165fc:	4613      	mov	r3, r2
 80165fe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d105      	bne.n	8016612 <tcp_create_segment+0x22>
 8016606:	4b44      	ldr	r3, [pc, #272]	; (8016718 <tcp_create_segment+0x128>)
 8016608:	22a3      	movs	r2, #163	; 0xa3
 801660a:	4944      	ldr	r1, [pc, #272]	; (801671c <tcp_create_segment+0x12c>)
 801660c:	4844      	ldr	r0, [pc, #272]	; (8016720 <tcp_create_segment+0x130>)
 801660e:	f005 fbed 	bl	801bdec <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016612:	68bb      	ldr	r3, [r7, #8]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d105      	bne.n	8016624 <tcp_create_segment+0x34>
 8016618:	4b3f      	ldr	r3, [pc, #252]	; (8016718 <tcp_create_segment+0x128>)
 801661a:	22a4      	movs	r2, #164	; 0xa4
 801661c:	4941      	ldr	r1, [pc, #260]	; (8016724 <tcp_create_segment+0x134>)
 801661e:	4840      	ldr	r0, [pc, #256]	; (8016720 <tcp_create_segment+0x130>)
 8016620:	f005 fbe4 	bl	801bdec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016624:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016628:	009b      	lsls	r3, r3, #2
 801662a:	b2db      	uxtb	r3, r3
 801662c:	f003 0304 	and.w	r3, r3, #4
 8016630:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016632:	2003      	movs	r0, #3
 8016634:	f7fa ffee 	bl	8011614 <memp_malloc>
 8016638:	6138      	str	r0, [r7, #16]
 801663a:	693b      	ldr	r3, [r7, #16]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d104      	bne.n	801664a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016640:	68b8      	ldr	r0, [r7, #8]
 8016642:	f7fb fe89 	bl	8012358 <pbuf_free>
    return NULL;
 8016646:	2300      	movs	r3, #0
 8016648:	e061      	b.n	801670e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801664a:	693b      	ldr	r3, [r7, #16]
 801664c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016650:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8016652:	693b      	ldr	r3, [r7, #16]
 8016654:	2200      	movs	r2, #0
 8016656:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016658:	693b      	ldr	r3, [r7, #16]
 801665a:	68ba      	ldr	r2, [r7, #8]
 801665c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	891a      	ldrh	r2, [r3, #8]
 8016662:	7dfb      	ldrb	r3, [r7, #23]
 8016664:	b29b      	uxth	r3, r3
 8016666:	429a      	cmp	r2, r3
 8016668:	d205      	bcs.n	8016676 <tcp_create_segment+0x86>
 801666a:	4b2b      	ldr	r3, [pc, #172]	; (8016718 <tcp_create_segment+0x128>)
 801666c:	22b0      	movs	r2, #176	; 0xb0
 801666e:	492e      	ldr	r1, [pc, #184]	; (8016728 <tcp_create_segment+0x138>)
 8016670:	482b      	ldr	r0, [pc, #172]	; (8016720 <tcp_create_segment+0x130>)
 8016672:	f005 fbbb 	bl	801bdec <iprintf>
  seg->len = p->tot_len - optlen;
 8016676:	68bb      	ldr	r3, [r7, #8]
 8016678:	891a      	ldrh	r2, [r3, #8]
 801667a:	7dfb      	ldrb	r3, [r7, #23]
 801667c:	b29b      	uxth	r3, r3
 801667e:	1ad3      	subs	r3, r2, r3
 8016680:	b29a      	uxth	r2, r3
 8016682:	693b      	ldr	r3, [r7, #16]
 8016684:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016686:	2114      	movs	r1, #20
 8016688:	68b8      	ldr	r0, [r7, #8]
 801668a:	f7fb fdcf 	bl	801222c <pbuf_add_header>
 801668e:	4603      	mov	r3, r0
 8016690:	2b00      	cmp	r3, #0
 8016692:	d004      	beq.n	801669e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016694:	6938      	ldr	r0, [r7, #16]
 8016696:	f7fd f8d2 	bl	801383e <tcp_seg_free>
    return NULL;
 801669a:	2300      	movs	r3, #0
 801669c:	e037      	b.n	801670e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801669e:	693b      	ldr	r3, [r7, #16]
 80166a0:	685b      	ldr	r3, [r3, #4]
 80166a2:	685a      	ldr	r2, [r3, #4]
 80166a4:	693b      	ldr	r3, [r7, #16]
 80166a6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	8ada      	ldrh	r2, [r3, #22]
 80166ac:	693b      	ldr	r3, [r7, #16]
 80166ae:	68dc      	ldr	r4, [r3, #12]
 80166b0:	4610      	mov	r0, r2
 80166b2:	f7f7 ffbb 	bl	800e62c <lwip_htons>
 80166b6:	4603      	mov	r3, r0
 80166b8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	8b1a      	ldrh	r2, [r3, #24]
 80166be:	693b      	ldr	r3, [r7, #16]
 80166c0:	68dc      	ldr	r4, [r3, #12]
 80166c2:	4610      	mov	r0, r2
 80166c4:	f7f7 ffb2 	bl	800e62c <lwip_htons>
 80166c8:	4603      	mov	r3, r0
 80166ca:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80166cc:	693b      	ldr	r3, [r7, #16]
 80166ce:	68dc      	ldr	r4, [r3, #12]
 80166d0:	6838      	ldr	r0, [r7, #0]
 80166d2:	f7f7 ffc0 	bl	800e656 <lwip_htonl>
 80166d6:	4603      	mov	r3, r0
 80166d8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80166da:	7dfb      	ldrb	r3, [r7, #23]
 80166dc:	089b      	lsrs	r3, r3, #2
 80166de:	b2db      	uxtb	r3, r3
 80166e0:	b29b      	uxth	r3, r3
 80166e2:	3305      	adds	r3, #5
 80166e4:	b29b      	uxth	r3, r3
 80166e6:	031b      	lsls	r3, r3, #12
 80166e8:	b29a      	uxth	r2, r3
 80166ea:	79fb      	ldrb	r3, [r7, #7]
 80166ec:	b29b      	uxth	r3, r3
 80166ee:	4313      	orrs	r3, r2
 80166f0:	b29a      	uxth	r2, r3
 80166f2:	693b      	ldr	r3, [r7, #16]
 80166f4:	68dc      	ldr	r4, [r3, #12]
 80166f6:	4610      	mov	r0, r2
 80166f8:	f7f7 ff98 	bl	800e62c <lwip_htons>
 80166fc:	4603      	mov	r3, r0
 80166fe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8016700:	693b      	ldr	r3, [r7, #16]
 8016702:	68db      	ldr	r3, [r3, #12]
 8016704:	2200      	movs	r2, #0
 8016706:	749a      	strb	r2, [r3, #18]
 8016708:	2200      	movs	r2, #0
 801670a:	74da      	strb	r2, [r3, #19]
  return seg;
 801670c:	693b      	ldr	r3, [r7, #16]
}
 801670e:	4618      	mov	r0, r3
 8016710:	371c      	adds	r7, #28
 8016712:	46bd      	mov	sp, r7
 8016714:	bd90      	pop	{r4, r7, pc}
 8016716:	bf00      	nop
 8016718:	08021a60 	.word	0x08021a60
 801671c:	08021ac0 	.word	0x08021ac0
 8016720:	08021ae0 	.word	0x08021ae0
 8016724:	08021b08 	.word	0x08021b08
 8016728:	08021b2c 	.word	0x08021b2c

0801672c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801672c:	b590      	push	{r4, r7, lr}
 801672e:	b08b      	sub	sp, #44	; 0x2c
 8016730:	af02      	add	r7, sp, #8
 8016732:	6078      	str	r0, [r7, #4]
 8016734:	460b      	mov	r3, r1
 8016736:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016738:	2300      	movs	r3, #0
 801673a:	61fb      	str	r3, [r7, #28]
 801673c:	2300      	movs	r3, #0
 801673e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016740:	2300      	movs	r3, #0
 8016742:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d106      	bne.n	8016758 <tcp_split_unsent_seg+0x2c>
 801674a:	4b95      	ldr	r3, [pc, #596]	; (80169a0 <tcp_split_unsent_seg+0x274>)
 801674c:	f240 324b 	movw	r2, #843	; 0x34b
 8016750:	4994      	ldr	r1, [pc, #592]	; (80169a4 <tcp_split_unsent_seg+0x278>)
 8016752:	4895      	ldr	r0, [pc, #596]	; (80169a8 <tcp_split_unsent_seg+0x27c>)
 8016754:	f005 fb4a 	bl	801bdec <iprintf>

  useg = pcb->unsent;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801675c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801675e:	697b      	ldr	r3, [r7, #20]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d102      	bne.n	801676a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016768:	e116      	b.n	8016998 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801676a:	887b      	ldrh	r3, [r7, #2]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d109      	bne.n	8016784 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016770:	4b8b      	ldr	r3, [pc, #556]	; (80169a0 <tcp_split_unsent_seg+0x274>)
 8016772:	f240 3253 	movw	r2, #851	; 0x353
 8016776:	498d      	ldr	r1, [pc, #564]	; (80169ac <tcp_split_unsent_seg+0x280>)
 8016778:	488b      	ldr	r0, [pc, #556]	; (80169a8 <tcp_split_unsent_seg+0x27c>)
 801677a:	f005 fb37 	bl	801bdec <iprintf>
    return ERR_VAL;
 801677e:	f06f 0305 	mvn.w	r3, #5
 8016782:	e109      	b.n	8016998 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016784:	697b      	ldr	r3, [r7, #20]
 8016786:	891b      	ldrh	r3, [r3, #8]
 8016788:	887a      	ldrh	r2, [r7, #2]
 801678a:	429a      	cmp	r2, r3
 801678c:	d301      	bcc.n	8016792 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801678e:	2300      	movs	r3, #0
 8016790:	e102      	b.n	8016998 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016796:	887a      	ldrh	r2, [r7, #2]
 8016798:	429a      	cmp	r2, r3
 801679a:	d906      	bls.n	80167aa <tcp_split_unsent_seg+0x7e>
 801679c:	4b80      	ldr	r3, [pc, #512]	; (80169a0 <tcp_split_unsent_seg+0x274>)
 801679e:	f240 325b 	movw	r2, #859	; 0x35b
 80167a2:	4983      	ldr	r1, [pc, #524]	; (80169b0 <tcp_split_unsent_seg+0x284>)
 80167a4:	4880      	ldr	r0, [pc, #512]	; (80169a8 <tcp_split_unsent_seg+0x27c>)
 80167a6:	f005 fb21 	bl	801bdec <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80167aa:	697b      	ldr	r3, [r7, #20]
 80167ac:	891b      	ldrh	r3, [r3, #8]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d106      	bne.n	80167c0 <tcp_split_unsent_seg+0x94>
 80167b2:	4b7b      	ldr	r3, [pc, #492]	; (80169a0 <tcp_split_unsent_seg+0x274>)
 80167b4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80167b8:	497e      	ldr	r1, [pc, #504]	; (80169b4 <tcp_split_unsent_seg+0x288>)
 80167ba:	487b      	ldr	r0, [pc, #492]	; (80169a8 <tcp_split_unsent_seg+0x27c>)
 80167bc:	f005 fb16 	bl	801bdec <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80167c0:	697b      	ldr	r3, [r7, #20]
 80167c2:	7a9b      	ldrb	r3, [r3, #10]
 80167c4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80167c6:	7bfb      	ldrb	r3, [r7, #15]
 80167c8:	009b      	lsls	r3, r3, #2
 80167ca:	b2db      	uxtb	r3, r3
 80167cc:	f003 0304 	and.w	r3, r3, #4
 80167d0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80167d2:	697b      	ldr	r3, [r7, #20]
 80167d4:	891a      	ldrh	r2, [r3, #8]
 80167d6:	887b      	ldrh	r3, [r7, #2]
 80167d8:	1ad3      	subs	r3, r2, r3
 80167da:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80167dc:	7bbb      	ldrb	r3, [r7, #14]
 80167de:	b29a      	uxth	r2, r3
 80167e0:	89bb      	ldrh	r3, [r7, #12]
 80167e2:	4413      	add	r3, r2
 80167e4:	b29b      	uxth	r3, r3
 80167e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167ea:	4619      	mov	r1, r3
 80167ec:	2036      	movs	r0, #54	; 0x36
 80167ee:	f7fb facf 	bl	8011d90 <pbuf_alloc>
 80167f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80167f4:	693b      	ldr	r3, [r7, #16]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	f000 80b7 	beq.w	801696a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80167fc:	697b      	ldr	r3, [r7, #20]
 80167fe:	685b      	ldr	r3, [r3, #4]
 8016800:	891a      	ldrh	r2, [r3, #8]
 8016802:	697b      	ldr	r3, [r7, #20]
 8016804:	891b      	ldrh	r3, [r3, #8]
 8016806:	1ad3      	subs	r3, r2, r3
 8016808:	b29a      	uxth	r2, r3
 801680a:	887b      	ldrh	r3, [r7, #2]
 801680c:	4413      	add	r3, r2
 801680e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016810:	697b      	ldr	r3, [r7, #20]
 8016812:	6858      	ldr	r0, [r3, #4]
 8016814:	693b      	ldr	r3, [r7, #16]
 8016816:	685a      	ldr	r2, [r3, #4]
 8016818:	7bbb      	ldrb	r3, [r7, #14]
 801681a:	18d1      	adds	r1, r2, r3
 801681c:	897b      	ldrh	r3, [r7, #10]
 801681e:	89ba      	ldrh	r2, [r7, #12]
 8016820:	f7fb ff84 	bl	801272c <pbuf_copy_partial>
 8016824:	4603      	mov	r3, r0
 8016826:	461a      	mov	r2, r3
 8016828:	89bb      	ldrh	r3, [r7, #12]
 801682a:	4293      	cmp	r3, r2
 801682c:	f040 809f 	bne.w	801696e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016830:	697b      	ldr	r3, [r7, #20]
 8016832:	68db      	ldr	r3, [r3, #12]
 8016834:	899b      	ldrh	r3, [r3, #12]
 8016836:	b29b      	uxth	r3, r3
 8016838:	4618      	mov	r0, r3
 801683a:	f7f7 fef7 	bl	800e62c <lwip_htons>
 801683e:	4603      	mov	r3, r0
 8016840:	b2db      	uxtb	r3, r3
 8016842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016846:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016848:	2300      	movs	r3, #0
 801684a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801684c:	7efb      	ldrb	r3, [r7, #27]
 801684e:	f003 0308 	and.w	r3, r3, #8
 8016852:	2b00      	cmp	r3, #0
 8016854:	d007      	beq.n	8016866 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016856:	7efb      	ldrb	r3, [r7, #27]
 8016858:	f023 0308 	bic.w	r3, r3, #8
 801685c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801685e:	7ebb      	ldrb	r3, [r7, #26]
 8016860:	f043 0308 	orr.w	r3, r3, #8
 8016864:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016866:	7efb      	ldrb	r3, [r7, #27]
 8016868:	f003 0301 	and.w	r3, r3, #1
 801686c:	2b00      	cmp	r3, #0
 801686e:	d007      	beq.n	8016880 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016870:	7efb      	ldrb	r3, [r7, #27]
 8016872:	f023 0301 	bic.w	r3, r3, #1
 8016876:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016878:	7ebb      	ldrb	r3, [r7, #26]
 801687a:	f043 0301 	orr.w	r3, r3, #1
 801687e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016880:	697b      	ldr	r3, [r7, #20]
 8016882:	68db      	ldr	r3, [r3, #12]
 8016884:	685b      	ldr	r3, [r3, #4]
 8016886:	4618      	mov	r0, r3
 8016888:	f7f7 fee5 	bl	800e656 <lwip_htonl>
 801688c:	4602      	mov	r2, r0
 801688e:	887b      	ldrh	r3, [r7, #2]
 8016890:	18d1      	adds	r1, r2, r3
 8016892:	7eba      	ldrb	r2, [r7, #26]
 8016894:	7bfb      	ldrb	r3, [r7, #15]
 8016896:	9300      	str	r3, [sp, #0]
 8016898:	460b      	mov	r3, r1
 801689a:	6939      	ldr	r1, [r7, #16]
 801689c:	6878      	ldr	r0, [r7, #4]
 801689e:	f7ff fea7 	bl	80165f0 <tcp_create_segment>
 80168a2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80168a4:	69fb      	ldr	r3, [r7, #28]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d063      	beq.n	8016972 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80168aa:	697b      	ldr	r3, [r7, #20]
 80168ac:	685b      	ldr	r3, [r3, #4]
 80168ae:	4618      	mov	r0, r3
 80168b0:	f7fb fdda 	bl	8012468 <pbuf_clen>
 80168b4:	4603      	mov	r3, r0
 80168b6:	461a      	mov	r2, r3
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80168be:	1a9b      	subs	r3, r3, r2
 80168c0:	b29a      	uxth	r2, r3
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80168c8:	697b      	ldr	r3, [r7, #20]
 80168ca:	6858      	ldr	r0, [r3, #4]
 80168cc:	697b      	ldr	r3, [r7, #20]
 80168ce:	685b      	ldr	r3, [r3, #4]
 80168d0:	891a      	ldrh	r2, [r3, #8]
 80168d2:	89bb      	ldrh	r3, [r7, #12]
 80168d4:	1ad3      	subs	r3, r2, r3
 80168d6:	b29b      	uxth	r3, r3
 80168d8:	4619      	mov	r1, r3
 80168da:	f7fb fbb7 	bl	801204c <pbuf_realloc>
  useg->len -= remainder;
 80168de:	697b      	ldr	r3, [r7, #20]
 80168e0:	891a      	ldrh	r2, [r3, #8]
 80168e2:	89bb      	ldrh	r3, [r7, #12]
 80168e4:	1ad3      	subs	r3, r2, r3
 80168e6:	b29a      	uxth	r2, r3
 80168e8:	697b      	ldr	r3, [r7, #20]
 80168ea:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80168ec:	697b      	ldr	r3, [r7, #20]
 80168ee:	68db      	ldr	r3, [r3, #12]
 80168f0:	899b      	ldrh	r3, [r3, #12]
 80168f2:	b29c      	uxth	r4, r3
 80168f4:	7efb      	ldrb	r3, [r7, #27]
 80168f6:	b29b      	uxth	r3, r3
 80168f8:	4618      	mov	r0, r3
 80168fa:	f7f7 fe97 	bl	800e62c <lwip_htons>
 80168fe:	4603      	mov	r3, r0
 8016900:	461a      	mov	r2, r3
 8016902:	697b      	ldr	r3, [r7, #20]
 8016904:	68db      	ldr	r3, [r3, #12]
 8016906:	4322      	orrs	r2, r4
 8016908:	b292      	uxth	r2, r2
 801690a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801690c:	697b      	ldr	r3, [r7, #20]
 801690e:	685b      	ldr	r3, [r3, #4]
 8016910:	4618      	mov	r0, r3
 8016912:	f7fb fda9 	bl	8012468 <pbuf_clen>
 8016916:	4603      	mov	r3, r0
 8016918:	461a      	mov	r2, r3
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016920:	4413      	add	r3, r2
 8016922:	b29a      	uxth	r2, r3
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801692a:	69fb      	ldr	r3, [r7, #28]
 801692c:	685b      	ldr	r3, [r3, #4]
 801692e:	4618      	mov	r0, r3
 8016930:	f7fb fd9a 	bl	8012468 <pbuf_clen>
 8016934:	4603      	mov	r3, r0
 8016936:	461a      	mov	r2, r3
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801693e:	4413      	add	r3, r2
 8016940:	b29a      	uxth	r2, r3
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016948:	697b      	ldr	r3, [r7, #20]
 801694a:	681a      	ldr	r2, [r3, #0]
 801694c:	69fb      	ldr	r3, [r7, #28]
 801694e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016950:	697b      	ldr	r3, [r7, #20]
 8016952:	69fa      	ldr	r2, [r7, #28]
 8016954:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016956:	69fb      	ldr	r3, [r7, #28]
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d103      	bne.n	8016966 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	2200      	movs	r2, #0
 8016962:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016966:	2300      	movs	r3, #0
 8016968:	e016      	b.n	8016998 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801696a:	bf00      	nop
 801696c:	e002      	b.n	8016974 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801696e:	bf00      	nop
 8016970:	e000      	b.n	8016974 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016972:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016974:	69fb      	ldr	r3, [r7, #28]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d006      	beq.n	8016988 <tcp_split_unsent_seg+0x25c>
 801697a:	4b09      	ldr	r3, [pc, #36]	; (80169a0 <tcp_split_unsent_seg+0x274>)
 801697c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8016980:	490d      	ldr	r1, [pc, #52]	; (80169b8 <tcp_split_unsent_seg+0x28c>)
 8016982:	4809      	ldr	r0, [pc, #36]	; (80169a8 <tcp_split_unsent_seg+0x27c>)
 8016984:	f005 fa32 	bl	801bdec <iprintf>
  if (p != NULL) {
 8016988:	693b      	ldr	r3, [r7, #16]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d002      	beq.n	8016994 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801698e:	6938      	ldr	r0, [r7, #16]
 8016990:	f7fb fce2 	bl	8012358 <pbuf_free>
  }

  return ERR_MEM;
 8016994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016998:	4618      	mov	r0, r3
 801699a:	3724      	adds	r7, #36	; 0x24
 801699c:	46bd      	mov	sp, r7
 801699e:	bd90      	pop	{r4, r7, pc}
 80169a0:	08021a60 	.word	0x08021a60
 80169a4:	08021e20 	.word	0x08021e20
 80169a8:	08021ae0 	.word	0x08021ae0
 80169ac:	08021e44 	.word	0x08021e44
 80169b0:	08021e68 	.word	0x08021e68
 80169b4:	08021e78 	.word	0x08021e78
 80169b8:	08021e88 	.word	0x08021e88

080169bc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80169bc:	b590      	push	{r4, r7, lr}
 80169be:	b085      	sub	sp, #20
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d106      	bne.n	80169d8 <tcp_send_fin+0x1c>
 80169ca:	4b21      	ldr	r3, [pc, #132]	; (8016a50 <tcp_send_fin+0x94>)
 80169cc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80169d0:	4920      	ldr	r1, [pc, #128]	; (8016a54 <tcp_send_fin+0x98>)
 80169d2:	4821      	ldr	r0, [pc, #132]	; (8016a58 <tcp_send_fin+0x9c>)
 80169d4:	f005 fa0a 	bl	801bdec <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d02e      	beq.n	8016a3e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169e4:	60fb      	str	r3, [r7, #12]
 80169e6:	e002      	b.n	80169ee <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d1f8      	bne.n	80169e8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	68db      	ldr	r3, [r3, #12]
 80169fa:	899b      	ldrh	r3, [r3, #12]
 80169fc:	b29b      	uxth	r3, r3
 80169fe:	4618      	mov	r0, r3
 8016a00:	f7f7 fe14 	bl	800e62c <lwip_htons>
 8016a04:	4603      	mov	r3, r0
 8016a06:	b2db      	uxtb	r3, r3
 8016a08:	f003 0307 	and.w	r3, r3, #7
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d116      	bne.n	8016a3e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	68db      	ldr	r3, [r3, #12]
 8016a14:	899b      	ldrh	r3, [r3, #12]
 8016a16:	b29c      	uxth	r4, r3
 8016a18:	2001      	movs	r0, #1
 8016a1a:	f7f7 fe07 	bl	800e62c <lwip_htons>
 8016a1e:	4603      	mov	r3, r0
 8016a20:	461a      	mov	r2, r3
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	68db      	ldr	r3, [r3, #12]
 8016a26:	4322      	orrs	r2, r4
 8016a28:	b292      	uxth	r2, r2
 8016a2a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	8b5b      	ldrh	r3, [r3, #26]
 8016a30:	f043 0320 	orr.w	r3, r3, #32
 8016a34:	b29a      	uxth	r2, r3
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	e004      	b.n	8016a48 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016a3e:	2101      	movs	r1, #1
 8016a40:	6878      	ldr	r0, [r7, #4]
 8016a42:	f000 f80b 	bl	8016a5c <tcp_enqueue_flags>
 8016a46:	4603      	mov	r3, r0
}
 8016a48:	4618      	mov	r0, r3
 8016a4a:	3714      	adds	r7, #20
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd90      	pop	{r4, r7, pc}
 8016a50:	08021a60 	.word	0x08021a60
 8016a54:	08021e94 	.word	0x08021e94
 8016a58:	08021ae0 	.word	0x08021ae0

08016a5c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b08a      	sub	sp, #40	; 0x28
 8016a60:	af02      	add	r7, sp, #8
 8016a62:	6078      	str	r0, [r7, #4]
 8016a64:	460b      	mov	r3, r1
 8016a66:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016a68:	2300      	movs	r3, #0
 8016a6a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016a70:	78fb      	ldrb	r3, [r7, #3]
 8016a72:	f003 0303 	and.w	r3, r3, #3
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d106      	bne.n	8016a88 <tcp_enqueue_flags+0x2c>
 8016a7a:	4b67      	ldr	r3, [pc, #412]	; (8016c18 <tcp_enqueue_flags+0x1bc>)
 8016a7c:	f240 4211 	movw	r2, #1041	; 0x411
 8016a80:	4966      	ldr	r1, [pc, #408]	; (8016c1c <tcp_enqueue_flags+0x1c0>)
 8016a82:	4867      	ldr	r0, [pc, #412]	; (8016c20 <tcp_enqueue_flags+0x1c4>)
 8016a84:	f005 f9b2 	bl	801bdec <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d106      	bne.n	8016a9c <tcp_enqueue_flags+0x40>
 8016a8e:	4b62      	ldr	r3, [pc, #392]	; (8016c18 <tcp_enqueue_flags+0x1bc>)
 8016a90:	f240 4213 	movw	r2, #1043	; 0x413
 8016a94:	4963      	ldr	r1, [pc, #396]	; (8016c24 <tcp_enqueue_flags+0x1c8>)
 8016a96:	4862      	ldr	r0, [pc, #392]	; (8016c20 <tcp_enqueue_flags+0x1c4>)
 8016a98:	f005 f9a8 	bl	801bdec <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016a9c:	78fb      	ldrb	r3, [r7, #3]
 8016a9e:	f003 0302 	and.w	r3, r3, #2
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d001      	beq.n	8016aaa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016aa6:	2301      	movs	r3, #1
 8016aa8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016aaa:	7ffb      	ldrb	r3, [r7, #31]
 8016aac:	009b      	lsls	r3, r3, #2
 8016aae:	b2db      	uxtb	r3, r3
 8016ab0:	f003 0304 	and.w	r3, r3, #4
 8016ab4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016ab6:	7dfb      	ldrb	r3, [r7, #23]
 8016ab8:	b29b      	uxth	r3, r3
 8016aba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016abe:	4619      	mov	r1, r3
 8016ac0:	2036      	movs	r0, #54	; 0x36
 8016ac2:	f7fb f965 	bl	8011d90 <pbuf_alloc>
 8016ac6:	6138      	str	r0, [r7, #16]
 8016ac8:	693b      	ldr	r3, [r7, #16]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d109      	bne.n	8016ae2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	8b5b      	ldrh	r3, [r3, #26]
 8016ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016ad6:	b29a      	uxth	r2, r3
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ae0:	e095      	b.n	8016c0e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016ae2:	693b      	ldr	r3, [r7, #16]
 8016ae4:	895a      	ldrh	r2, [r3, #10]
 8016ae6:	7dfb      	ldrb	r3, [r7, #23]
 8016ae8:	b29b      	uxth	r3, r3
 8016aea:	429a      	cmp	r2, r3
 8016aec:	d206      	bcs.n	8016afc <tcp_enqueue_flags+0xa0>
 8016aee:	4b4a      	ldr	r3, [pc, #296]	; (8016c18 <tcp_enqueue_flags+0x1bc>)
 8016af0:	f240 4239 	movw	r2, #1081	; 0x439
 8016af4:	494c      	ldr	r1, [pc, #304]	; (8016c28 <tcp_enqueue_flags+0x1cc>)
 8016af6:	484a      	ldr	r0, [pc, #296]	; (8016c20 <tcp_enqueue_flags+0x1c4>)
 8016af8:	f005 f978 	bl	801bdec <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016b00:	78fa      	ldrb	r2, [r7, #3]
 8016b02:	7ffb      	ldrb	r3, [r7, #31]
 8016b04:	9300      	str	r3, [sp, #0]
 8016b06:	460b      	mov	r3, r1
 8016b08:	6939      	ldr	r1, [r7, #16]
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f7ff fd70 	bl	80165f0 <tcp_create_segment>
 8016b10:	60f8      	str	r0, [r7, #12]
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d109      	bne.n	8016b2c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	8b5b      	ldrh	r3, [r3, #26]
 8016b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b20:	b29a      	uxth	r2, r3
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b2a:	e070      	b.n	8016c0e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	68db      	ldr	r3, [r3, #12]
 8016b30:	f003 0303 	and.w	r3, r3, #3
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d006      	beq.n	8016b46 <tcp_enqueue_flags+0xea>
 8016b38:	4b37      	ldr	r3, [pc, #220]	; (8016c18 <tcp_enqueue_flags+0x1bc>)
 8016b3a:	f240 4242 	movw	r2, #1090	; 0x442
 8016b3e:	493b      	ldr	r1, [pc, #236]	; (8016c2c <tcp_enqueue_flags+0x1d0>)
 8016b40:	4837      	ldr	r0, [pc, #220]	; (8016c20 <tcp_enqueue_flags+0x1c4>)
 8016b42:	f005 f953 	bl	801bdec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	891b      	ldrh	r3, [r3, #8]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d006      	beq.n	8016b5c <tcp_enqueue_flags+0x100>
 8016b4e:	4b32      	ldr	r3, [pc, #200]	; (8016c18 <tcp_enqueue_flags+0x1bc>)
 8016b50:	f240 4243 	movw	r2, #1091	; 0x443
 8016b54:	4936      	ldr	r1, [pc, #216]	; (8016c30 <tcp_enqueue_flags+0x1d4>)
 8016b56:	4832      	ldr	r0, [pc, #200]	; (8016c20 <tcp_enqueue_flags+0x1c4>)
 8016b58:	f005 f948 	bl	801bdec <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d103      	bne.n	8016b6c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	68fa      	ldr	r2, [r7, #12]
 8016b68:	66da      	str	r2, [r3, #108]	; 0x6c
 8016b6a:	e00d      	b.n	8016b88 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b70:	61bb      	str	r3, [r7, #24]
 8016b72:	e002      	b.n	8016b7a <tcp_enqueue_flags+0x11e>
 8016b74:	69bb      	ldr	r3, [r7, #24]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	61bb      	str	r3, [r7, #24]
 8016b7a:	69bb      	ldr	r3, [r7, #24]
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d1f8      	bne.n	8016b74 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016b82:	69bb      	ldr	r3, [r7, #24]
 8016b84:	68fa      	ldr	r2, [r7, #12]
 8016b86:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016b90:	78fb      	ldrb	r3, [r7, #3]
 8016b92:	f003 0302 	and.w	r3, r3, #2
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d104      	bne.n	8016ba4 <tcp_enqueue_flags+0x148>
 8016b9a:	78fb      	ldrb	r3, [r7, #3]
 8016b9c:	f003 0301 	and.w	r3, r3, #1
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d004      	beq.n	8016bae <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ba8:	1c5a      	adds	r2, r3, #1
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016bae:	78fb      	ldrb	r3, [r7, #3]
 8016bb0:	f003 0301 	and.w	r3, r3, #1
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d006      	beq.n	8016bc6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	8b5b      	ldrh	r3, [r3, #26]
 8016bbc:	f043 0320 	orr.w	r3, r3, #32
 8016bc0:	b29a      	uxth	r2, r3
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	685b      	ldr	r3, [r3, #4]
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f7fb fc4c 	bl	8012468 <pbuf_clen>
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	461a      	mov	r2, r3
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016bda:	4413      	add	r3, r2
 8016bdc:	b29a      	uxth	r2, r3
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d00e      	beq.n	8016c0c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d10a      	bne.n	8016c0c <tcp_enqueue_flags+0x1b0>
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d106      	bne.n	8016c0c <tcp_enqueue_flags+0x1b0>
 8016bfe:	4b06      	ldr	r3, [pc, #24]	; (8016c18 <tcp_enqueue_flags+0x1bc>)
 8016c00:	f240 4265 	movw	r2, #1125	; 0x465
 8016c04:	490b      	ldr	r1, [pc, #44]	; (8016c34 <tcp_enqueue_flags+0x1d8>)
 8016c06:	4806      	ldr	r0, [pc, #24]	; (8016c20 <tcp_enqueue_flags+0x1c4>)
 8016c08:	f005 f8f0 	bl	801bdec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016c0c:	2300      	movs	r3, #0
}
 8016c0e:	4618      	mov	r0, r3
 8016c10:	3720      	adds	r7, #32
 8016c12:	46bd      	mov	sp, r7
 8016c14:	bd80      	pop	{r7, pc}
 8016c16:	bf00      	nop
 8016c18:	08021a60 	.word	0x08021a60
 8016c1c:	08021eb0 	.word	0x08021eb0
 8016c20:	08021ae0 	.word	0x08021ae0
 8016c24:	08021f08 	.word	0x08021f08
 8016c28:	08021f28 	.word	0x08021f28
 8016c2c:	08021f64 	.word	0x08021f64
 8016c30:	08021f7c 	.word	0x08021f7c
 8016c34:	08021fa8 	.word	0x08021fa8

08016c38 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016c38:	b5b0      	push	{r4, r5, r7, lr}
 8016c3a:	b08a      	sub	sp, #40	; 0x28
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d106      	bne.n	8016c54 <tcp_output+0x1c>
 8016c46:	4b9e      	ldr	r3, [pc, #632]	; (8016ec0 <tcp_output+0x288>)
 8016c48:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016c4c:	499d      	ldr	r1, [pc, #628]	; (8016ec4 <tcp_output+0x28c>)
 8016c4e:	489e      	ldr	r0, [pc, #632]	; (8016ec8 <tcp_output+0x290>)
 8016c50:	f005 f8cc 	bl	801bdec <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	7d1b      	ldrb	r3, [r3, #20]
 8016c58:	2b01      	cmp	r3, #1
 8016c5a:	d106      	bne.n	8016c6a <tcp_output+0x32>
 8016c5c:	4b98      	ldr	r3, [pc, #608]	; (8016ec0 <tcp_output+0x288>)
 8016c5e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016c62:	499a      	ldr	r1, [pc, #616]	; (8016ecc <tcp_output+0x294>)
 8016c64:	4898      	ldr	r0, [pc, #608]	; (8016ec8 <tcp_output+0x290>)
 8016c66:	f005 f8c1 	bl	801bdec <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016c6a:	4b99      	ldr	r3, [pc, #612]	; (8016ed0 <tcp_output+0x298>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	687a      	ldr	r2, [r7, #4]
 8016c70:	429a      	cmp	r2, r3
 8016c72:	d101      	bne.n	8016c78 <tcp_output+0x40>
    return ERR_OK;
 8016c74:	2300      	movs	r3, #0
 8016c76:	e1ce      	b.n	8017016 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016c84:	4293      	cmp	r3, r2
 8016c86:	bf28      	it	cs
 8016c88:	4613      	movcs	r3, r2
 8016c8a:	b29b      	uxth	r3, r3
 8016c8c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c92:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d10b      	bne.n	8016cb2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	8b5b      	ldrh	r3, [r3, #26]
 8016c9e:	f003 0302 	and.w	r3, r3, #2
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	f000 81aa 	beq.w	8016ffc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016ca8:	6878      	ldr	r0, [r7, #4]
 8016caa:	f000 fdcb 	bl	8017844 <tcp_send_empty_ack>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	e1b1      	b.n	8017016 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016cb2:	6879      	ldr	r1, [r7, #4]
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	3304      	adds	r3, #4
 8016cb8:	461a      	mov	r2, r3
 8016cba:	6878      	ldr	r0, [r7, #4]
 8016cbc:	f7ff fc7c 	bl	80165b8 <tcp_route>
 8016cc0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016cc2:	697b      	ldr	r3, [r7, #20]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d102      	bne.n	8016cce <tcp_output+0x96>
    return ERR_RTE;
 8016cc8:	f06f 0303 	mvn.w	r3, #3
 8016ccc:	e1a3      	b.n	8017016 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d003      	beq.n	8016cdc <tcp_output+0xa4>
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d111      	bne.n	8016d00 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016cdc:	697b      	ldr	r3, [r7, #20]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d002      	beq.n	8016ce8 <tcp_output+0xb0>
 8016ce2:	697b      	ldr	r3, [r7, #20]
 8016ce4:	3304      	adds	r3, #4
 8016ce6:	e000      	b.n	8016cea <tcp_output+0xb2>
 8016ce8:	2300      	movs	r3, #0
 8016cea:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016cec:	693b      	ldr	r3, [r7, #16]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d102      	bne.n	8016cf8 <tcp_output+0xc0>
      return ERR_RTE;
 8016cf2:	f06f 0303 	mvn.w	r3, #3
 8016cf6:	e18e      	b.n	8017016 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016cf8:	693b      	ldr	r3, [r7, #16]
 8016cfa:	681a      	ldr	r2, [r3, #0]
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d02:	68db      	ldr	r3, [r3, #12]
 8016d04:	685b      	ldr	r3, [r3, #4]
 8016d06:	4618      	mov	r0, r3
 8016d08:	f7f7 fca5 	bl	800e656 <lwip_htonl>
 8016d0c:	4602      	mov	r2, r0
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d12:	1ad3      	subs	r3, r2, r3
 8016d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d16:	8912      	ldrh	r2, [r2, #8]
 8016d18:	4413      	add	r3, r2
 8016d1a:	69ba      	ldr	r2, [r7, #24]
 8016d1c:	429a      	cmp	r2, r3
 8016d1e:	d227      	bcs.n	8016d70 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016d26:	461a      	mov	r2, r3
 8016d28:	69bb      	ldr	r3, [r7, #24]
 8016d2a:	4293      	cmp	r3, r2
 8016d2c:	d114      	bne.n	8016d58 <tcp_output+0x120>
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d110      	bne.n	8016d58 <tcp_output+0x120>
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d10b      	bne.n	8016d58 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	2200      	movs	r2, #0
 8016d44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	2201      	movs	r2, #1
 8016d4c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	2200      	movs	r2, #0
 8016d54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	8b5b      	ldrh	r3, [r3, #26]
 8016d5c:	f003 0302 	and.w	r3, r3, #2
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	f000 814d 	beq.w	8017000 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016d66:	6878      	ldr	r0, [r7, #4]
 8016d68:	f000 fd6c 	bl	8017844 <tcp_send_empty_ack>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	e152      	b.n	8017016 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	2200      	movs	r2, #0
 8016d74:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d7c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016d7e:	6a3b      	ldr	r3, [r7, #32]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	f000 811c 	beq.w	8016fbe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016d86:	e002      	b.n	8016d8e <tcp_output+0x156>
 8016d88:	6a3b      	ldr	r3, [r7, #32]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	623b      	str	r3, [r7, #32]
 8016d8e:	6a3b      	ldr	r3, [r7, #32]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d1f8      	bne.n	8016d88 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016d96:	e112      	b.n	8016fbe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d9a:	68db      	ldr	r3, [r3, #12]
 8016d9c:	899b      	ldrh	r3, [r3, #12]
 8016d9e:	b29b      	uxth	r3, r3
 8016da0:	4618      	mov	r0, r3
 8016da2:	f7f7 fc43 	bl	800e62c <lwip_htons>
 8016da6:	4603      	mov	r3, r0
 8016da8:	b2db      	uxtb	r3, r3
 8016daa:	f003 0304 	and.w	r3, r3, #4
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d006      	beq.n	8016dc0 <tcp_output+0x188>
 8016db2:	4b43      	ldr	r3, [pc, #268]	; (8016ec0 <tcp_output+0x288>)
 8016db4:	f240 5236 	movw	r2, #1334	; 0x536
 8016db8:	4946      	ldr	r1, [pc, #280]	; (8016ed4 <tcp_output+0x29c>)
 8016dba:	4843      	ldr	r0, [pc, #268]	; (8016ec8 <tcp_output+0x290>)
 8016dbc:	f005 f816 	bl	801bdec <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d01f      	beq.n	8016e08 <tcp_output+0x1d0>
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	8b5b      	ldrh	r3, [r3, #26]
 8016dcc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d119      	bne.n	8016e08 <tcp_output+0x1d0>
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d00b      	beq.n	8016df4 <tcp_output+0x1bc>
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d110      	bne.n	8016e08 <tcp_output+0x1d0>
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016dea:	891a      	ldrh	r2, [r3, #8]
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016df0:	429a      	cmp	r2, r3
 8016df2:	d209      	bcs.n	8016e08 <tcp_output+0x1d0>
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d004      	beq.n	8016e08 <tcp_output+0x1d0>
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016e04:	2b08      	cmp	r3, #8
 8016e06:	d901      	bls.n	8016e0c <tcp_output+0x1d4>
 8016e08:	2301      	movs	r3, #1
 8016e0a:	e000      	b.n	8016e0e <tcp_output+0x1d6>
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d106      	bne.n	8016e20 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	8b5b      	ldrh	r3, [r3, #26]
 8016e16:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	f000 80e4 	beq.w	8016fe8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	7d1b      	ldrb	r3, [r3, #20]
 8016e24:	2b02      	cmp	r3, #2
 8016e26:	d00d      	beq.n	8016e44 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e2a:	68db      	ldr	r3, [r3, #12]
 8016e2c:	899b      	ldrh	r3, [r3, #12]
 8016e2e:	b29c      	uxth	r4, r3
 8016e30:	2010      	movs	r0, #16
 8016e32:	f7f7 fbfb 	bl	800e62c <lwip_htons>
 8016e36:	4603      	mov	r3, r0
 8016e38:	461a      	mov	r2, r3
 8016e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e3c:	68db      	ldr	r3, [r3, #12]
 8016e3e:	4322      	orrs	r2, r4
 8016e40:	b292      	uxth	r2, r2
 8016e42:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016e44:	697a      	ldr	r2, [r7, #20]
 8016e46:	6879      	ldr	r1, [r7, #4]
 8016e48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e4a:	f000 f909 	bl	8017060 <tcp_output_segment>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d009      	beq.n	8016e6e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	8b5b      	ldrh	r3, [r3, #26]
 8016e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e62:	b29a      	uxth	r2, r3
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	835a      	strh	r2, [r3, #26]
      return err;
 8016e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e6c:	e0d3      	b.n	8017016 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e70:	681a      	ldr	r2, [r3, #0]
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	7d1b      	ldrb	r3, [r3, #20]
 8016e7a:	2b02      	cmp	r3, #2
 8016e7c:	d006      	beq.n	8016e8c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	8b5b      	ldrh	r3, [r3, #26]
 8016e82:	f023 0303 	bic.w	r3, r3, #3
 8016e86:	b29a      	uxth	r2, r3
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e8e:	68db      	ldr	r3, [r3, #12]
 8016e90:	685b      	ldr	r3, [r3, #4]
 8016e92:	4618      	mov	r0, r3
 8016e94:	f7f7 fbdf 	bl	800e656 <lwip_htonl>
 8016e98:	4604      	mov	r4, r0
 8016e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e9c:	891b      	ldrh	r3, [r3, #8]
 8016e9e:	461d      	mov	r5, r3
 8016ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea2:	68db      	ldr	r3, [r3, #12]
 8016ea4:	899b      	ldrh	r3, [r3, #12]
 8016ea6:	b29b      	uxth	r3, r3
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f7f7 fbbf 	bl	800e62c <lwip_htons>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	b2db      	uxtb	r3, r3
 8016eb2:	f003 0303 	and.w	r3, r3, #3
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d00e      	beq.n	8016ed8 <tcp_output+0x2a0>
 8016eba:	2301      	movs	r3, #1
 8016ebc:	e00d      	b.n	8016eda <tcp_output+0x2a2>
 8016ebe:	bf00      	nop
 8016ec0:	08021a60 	.word	0x08021a60
 8016ec4:	08021fd0 	.word	0x08021fd0
 8016ec8:	08021ae0 	.word	0x08021ae0
 8016ecc:	08021fe8 	.word	0x08021fe8
 8016ed0:	2400720c 	.word	0x2400720c
 8016ed4:	08022010 	.word	0x08022010
 8016ed8:	2300      	movs	r3, #0
 8016eda:	442b      	add	r3, r5
 8016edc:	4423      	add	r3, r4
 8016ede:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016ee4:	68bb      	ldr	r3, [r7, #8]
 8016ee6:	1ad3      	subs	r3, r2, r3
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	da02      	bge.n	8016ef2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	68ba      	ldr	r2, [r7, #8]
 8016ef0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef4:	891b      	ldrh	r3, [r3, #8]
 8016ef6:	461c      	mov	r4, r3
 8016ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016efa:	68db      	ldr	r3, [r3, #12]
 8016efc:	899b      	ldrh	r3, [r3, #12]
 8016efe:	b29b      	uxth	r3, r3
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7f7 fb93 	bl	800e62c <lwip_htons>
 8016f06:	4603      	mov	r3, r0
 8016f08:	b2db      	uxtb	r3, r3
 8016f0a:	f003 0303 	and.w	r3, r3, #3
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d001      	beq.n	8016f16 <tcp_output+0x2de>
 8016f12:	2301      	movs	r3, #1
 8016f14:	e000      	b.n	8016f18 <tcp_output+0x2e0>
 8016f16:	2300      	movs	r3, #0
 8016f18:	4423      	add	r3, r4
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d049      	beq.n	8016fb2 <tcp_output+0x37a>
      seg->next = NULL;
 8016f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f20:	2200      	movs	r2, #0
 8016f22:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d105      	bne.n	8016f38 <tcp_output+0x300>
        pcb->unacked = seg;
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f30:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f34:	623b      	str	r3, [r7, #32]
 8016f36:	e03f      	b.n	8016fb8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f3a:	68db      	ldr	r3, [r3, #12]
 8016f3c:	685b      	ldr	r3, [r3, #4]
 8016f3e:	4618      	mov	r0, r3
 8016f40:	f7f7 fb89 	bl	800e656 <lwip_htonl>
 8016f44:	4604      	mov	r4, r0
 8016f46:	6a3b      	ldr	r3, [r7, #32]
 8016f48:	68db      	ldr	r3, [r3, #12]
 8016f4a:	685b      	ldr	r3, [r3, #4]
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	f7f7 fb82 	bl	800e656 <lwip_htonl>
 8016f52:	4603      	mov	r3, r0
 8016f54:	1ae3      	subs	r3, r4, r3
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	da24      	bge.n	8016fa4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	3370      	adds	r3, #112	; 0x70
 8016f5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016f60:	e002      	b.n	8016f68 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016f62:	69fb      	ldr	r3, [r7, #28]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016f68:	69fb      	ldr	r3, [r7, #28]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d011      	beq.n	8016f94 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016f70:	69fb      	ldr	r3, [r7, #28]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	68db      	ldr	r3, [r3, #12]
 8016f76:	685b      	ldr	r3, [r3, #4]
 8016f78:	4618      	mov	r0, r3
 8016f7a:	f7f7 fb6c 	bl	800e656 <lwip_htonl>
 8016f7e:	4604      	mov	r4, r0
 8016f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f82:	68db      	ldr	r3, [r3, #12]
 8016f84:	685b      	ldr	r3, [r3, #4]
 8016f86:	4618      	mov	r0, r3
 8016f88:	f7f7 fb65 	bl	800e656 <lwip_htonl>
 8016f8c:	4603      	mov	r3, r0
 8016f8e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	dbe6      	blt.n	8016f62 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016f94:	69fb      	ldr	r3, [r7, #28]
 8016f96:	681a      	ldr	r2, [r3, #0]
 8016f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f9a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016f9c:	69fb      	ldr	r3, [r7, #28]
 8016f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fa0:	601a      	str	r2, [r3, #0]
 8016fa2:	e009      	b.n	8016fb8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016fa4:	6a3b      	ldr	r3, [r7, #32]
 8016fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fa8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016faa:	6a3b      	ldr	r3, [r7, #32]
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	623b      	str	r3, [r7, #32]
 8016fb0:	e002      	b.n	8016fb8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016fb4:	f7fc fc43 	bl	801383e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fbc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d012      	beq.n	8016fea <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fc6:	68db      	ldr	r3, [r3, #12]
 8016fc8:	685b      	ldr	r3, [r3, #4]
 8016fca:	4618      	mov	r0, r3
 8016fcc:	f7f7 fb43 	bl	800e656 <lwip_htonl>
 8016fd0:	4602      	mov	r2, r0
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016fd6:	1ad3      	subs	r3, r2, r3
 8016fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fda:	8912      	ldrh	r2, [r2, #8]
 8016fdc:	4413      	add	r3, r2
  while (seg != NULL &&
 8016fde:	69ba      	ldr	r2, [r7, #24]
 8016fe0:	429a      	cmp	r2, r3
 8016fe2:	f4bf aed9 	bcs.w	8016d98 <tcp_output+0x160>
 8016fe6:	e000      	b.n	8016fea <tcp_output+0x3b2>
      break;
 8016fe8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d108      	bne.n	8017004 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	2200      	movs	r2, #0
 8016ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016ffa:	e004      	b.n	8017006 <tcp_output+0x3ce>
    goto output_done;
 8016ffc:	bf00      	nop
 8016ffe:	e002      	b.n	8017006 <tcp_output+0x3ce>
    goto output_done;
 8017000:	bf00      	nop
 8017002:	e000      	b.n	8017006 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017004:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	8b5b      	ldrh	r3, [r3, #26]
 801700a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801700e:	b29a      	uxth	r2, r3
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017014:	2300      	movs	r3, #0
}
 8017016:	4618      	mov	r0, r3
 8017018:	3728      	adds	r7, #40	; 0x28
 801701a:	46bd      	mov	sp, r7
 801701c:	bdb0      	pop	{r4, r5, r7, pc}
 801701e:	bf00      	nop

08017020 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017020:	b580      	push	{r7, lr}
 8017022:	b082      	sub	sp, #8
 8017024:	af00      	add	r7, sp, #0
 8017026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d106      	bne.n	801703c <tcp_output_segment_busy+0x1c>
 801702e:	4b09      	ldr	r3, [pc, #36]	; (8017054 <tcp_output_segment_busy+0x34>)
 8017030:	f240 529a 	movw	r2, #1434	; 0x59a
 8017034:	4908      	ldr	r1, [pc, #32]	; (8017058 <tcp_output_segment_busy+0x38>)
 8017036:	4809      	ldr	r0, [pc, #36]	; (801705c <tcp_output_segment_busy+0x3c>)
 8017038:	f004 fed8 	bl	801bdec <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	685b      	ldr	r3, [r3, #4]
 8017040:	7b9b      	ldrb	r3, [r3, #14]
 8017042:	2b01      	cmp	r3, #1
 8017044:	d001      	beq.n	801704a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017046:	2301      	movs	r3, #1
 8017048:	e000      	b.n	801704c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801704a:	2300      	movs	r3, #0
}
 801704c:	4618      	mov	r0, r3
 801704e:	3708      	adds	r7, #8
 8017050:	46bd      	mov	sp, r7
 8017052:	bd80      	pop	{r7, pc}
 8017054:	08021a60 	.word	0x08021a60
 8017058:	08022028 	.word	0x08022028
 801705c:	08021ae0 	.word	0x08021ae0

08017060 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017060:	b5b0      	push	{r4, r5, r7, lr}
 8017062:	b08c      	sub	sp, #48	; 0x30
 8017064:	af04      	add	r7, sp, #16
 8017066:	60f8      	str	r0, [r7, #12]
 8017068:	60b9      	str	r1, [r7, #8]
 801706a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d106      	bne.n	8017080 <tcp_output_segment+0x20>
 8017072:	4b63      	ldr	r3, [pc, #396]	; (8017200 <tcp_output_segment+0x1a0>)
 8017074:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8017078:	4962      	ldr	r1, [pc, #392]	; (8017204 <tcp_output_segment+0x1a4>)
 801707a:	4863      	ldr	r0, [pc, #396]	; (8017208 <tcp_output_segment+0x1a8>)
 801707c:	f004 feb6 	bl	801bdec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017080:	68bb      	ldr	r3, [r7, #8]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d106      	bne.n	8017094 <tcp_output_segment+0x34>
 8017086:	4b5e      	ldr	r3, [pc, #376]	; (8017200 <tcp_output_segment+0x1a0>)
 8017088:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801708c:	495f      	ldr	r1, [pc, #380]	; (801720c <tcp_output_segment+0x1ac>)
 801708e:	485e      	ldr	r0, [pc, #376]	; (8017208 <tcp_output_segment+0x1a8>)
 8017090:	f004 feac 	bl	801bdec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d106      	bne.n	80170a8 <tcp_output_segment+0x48>
 801709a:	4b59      	ldr	r3, [pc, #356]	; (8017200 <tcp_output_segment+0x1a0>)
 801709c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80170a0:	495b      	ldr	r1, [pc, #364]	; (8017210 <tcp_output_segment+0x1b0>)
 80170a2:	4859      	ldr	r0, [pc, #356]	; (8017208 <tcp_output_segment+0x1a8>)
 80170a4:	f004 fea2 	bl	801bdec <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80170a8:	68f8      	ldr	r0, [r7, #12]
 80170aa:	f7ff ffb9 	bl	8017020 <tcp_output_segment_busy>
 80170ae:	4603      	mov	r3, r0
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d001      	beq.n	80170b8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80170b4:	2300      	movs	r3, #0
 80170b6:	e09f      	b.n	80171f8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80170b8:	68bb      	ldr	r3, [r7, #8]
 80170ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	68dc      	ldr	r4, [r3, #12]
 80170c0:	4610      	mov	r0, r2
 80170c2:	f7f7 fac8 	bl	800e656 <lwip_htonl>
 80170c6:	4603      	mov	r3, r0
 80170c8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80170ca:	68bb      	ldr	r3, [r7, #8]
 80170cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	68dc      	ldr	r4, [r3, #12]
 80170d2:	4610      	mov	r0, r2
 80170d4:	f7f7 faaa 	bl	800e62c <lwip_htons>
 80170d8:	4603      	mov	r3, r0
 80170da:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80170dc:	68bb      	ldr	r3, [r7, #8]
 80170de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170e0:	68ba      	ldr	r2, [r7, #8]
 80170e2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80170e4:	441a      	add	r2, r3
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	68db      	ldr	r3, [r3, #12]
 80170ee:	3314      	adds	r3, #20
 80170f0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	7a9b      	ldrb	r3, [r3, #10]
 80170f6:	f003 0301 	and.w	r3, r3, #1
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d015      	beq.n	801712a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80170fe:	68bb      	ldr	r3, [r7, #8]
 8017100:	3304      	adds	r3, #4
 8017102:	461a      	mov	r2, r3
 8017104:	6879      	ldr	r1, [r7, #4]
 8017106:	f44f 7006 	mov.w	r0, #536	; 0x218
 801710a:	f7fc fe8f 	bl	8013e2c <tcp_eff_send_mss_netif>
 801710e:	4603      	mov	r3, r0
 8017110:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8017112:	8b7b      	ldrh	r3, [r7, #26]
 8017114:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8017118:	4618      	mov	r0, r3
 801711a:	f7f7 fa9c 	bl	800e656 <lwip_htonl>
 801711e:	4602      	mov	r2, r0
 8017120:	69fb      	ldr	r3, [r7, #28]
 8017122:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017124:	69fb      	ldr	r3, [r7, #28]
 8017126:	3304      	adds	r3, #4
 8017128:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801712a:	68bb      	ldr	r3, [r7, #8]
 801712c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017130:	2b00      	cmp	r3, #0
 8017132:	da02      	bge.n	801713a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017134:	68bb      	ldr	r3, [r7, #8]
 8017136:	2200      	movs	r2, #0
 8017138:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801713a:	68bb      	ldr	r3, [r7, #8]
 801713c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801713e:	2b00      	cmp	r3, #0
 8017140:	d10c      	bne.n	801715c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017142:	4b34      	ldr	r3, [pc, #208]	; (8017214 <tcp_output_segment+0x1b4>)
 8017144:	681a      	ldr	r2, [r3, #0]
 8017146:	68bb      	ldr	r3, [r7, #8]
 8017148:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	68db      	ldr	r3, [r3, #12]
 801714e:	685b      	ldr	r3, [r3, #4]
 8017150:	4618      	mov	r0, r3
 8017152:	f7f7 fa80 	bl	800e656 <lwip_htonl>
 8017156:	4602      	mov	r2, r0
 8017158:	68bb      	ldr	r3, [r7, #8]
 801715a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	68da      	ldr	r2, [r3, #12]
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	685b      	ldr	r3, [r3, #4]
 8017164:	685b      	ldr	r3, [r3, #4]
 8017166:	1ad3      	subs	r3, r2, r3
 8017168:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	685b      	ldr	r3, [r3, #4]
 801716e:	8959      	ldrh	r1, [r3, #10]
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	685b      	ldr	r3, [r3, #4]
 8017174:	8b3a      	ldrh	r2, [r7, #24]
 8017176:	1a8a      	subs	r2, r1, r2
 8017178:	b292      	uxth	r2, r2
 801717a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	685b      	ldr	r3, [r3, #4]
 8017180:	8919      	ldrh	r1, [r3, #8]
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	685b      	ldr	r3, [r3, #4]
 8017186:	8b3a      	ldrh	r2, [r7, #24]
 8017188:	1a8a      	subs	r2, r1, r2
 801718a:	b292      	uxth	r2, r2
 801718c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	685b      	ldr	r3, [r3, #4]
 8017192:	68fa      	ldr	r2, [r7, #12]
 8017194:	68d2      	ldr	r2, [r2, #12]
 8017196:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	68db      	ldr	r3, [r3, #12]
 801719c:	2200      	movs	r2, #0
 801719e:	741a      	strb	r2, [r3, #16]
 80171a0:	2200      	movs	r2, #0
 80171a2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	68db      	ldr	r3, [r3, #12]
 80171a8:	f103 0214 	add.w	r2, r3, #20
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	7a9b      	ldrb	r3, [r3, #10]
 80171b0:	009b      	lsls	r3, r3, #2
 80171b2:	f003 0304 	and.w	r3, r3, #4
 80171b6:	4413      	add	r3, r2
 80171b8:	69fa      	ldr	r2, [r7, #28]
 80171ba:	429a      	cmp	r2, r3
 80171bc:	d006      	beq.n	80171cc <tcp_output_segment+0x16c>
 80171be:	4b10      	ldr	r3, [pc, #64]	; (8017200 <tcp_output_segment+0x1a0>)
 80171c0:	f240 621c 	movw	r2, #1564	; 0x61c
 80171c4:	4914      	ldr	r1, [pc, #80]	; (8017218 <tcp_output_segment+0x1b8>)
 80171c6:	4810      	ldr	r0, [pc, #64]	; (8017208 <tcp_output_segment+0x1a8>)
 80171c8:	f004 fe10 	bl	801bdec <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	6858      	ldr	r0, [r3, #4]
 80171d0:	68b9      	ldr	r1, [r7, #8]
 80171d2:	68bb      	ldr	r3, [r7, #8]
 80171d4:	1d1c      	adds	r4, r3, #4
 80171d6:	68bb      	ldr	r3, [r7, #8]
 80171d8:	7add      	ldrb	r5, [r3, #11]
 80171da:	68bb      	ldr	r3, [r7, #8]
 80171dc:	7a9b      	ldrb	r3, [r3, #10]
 80171de:	687a      	ldr	r2, [r7, #4]
 80171e0:	9202      	str	r2, [sp, #8]
 80171e2:	2206      	movs	r2, #6
 80171e4:	9201      	str	r2, [sp, #4]
 80171e6:	9300      	str	r3, [sp, #0]
 80171e8:	462b      	mov	r3, r5
 80171ea:	4622      	mov	r2, r4
 80171ec:	f7f8 feb2 	bl	800ff54 <ip4_output_if>
 80171f0:	4603      	mov	r3, r0
 80171f2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80171f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80171f8:	4618      	mov	r0, r3
 80171fa:	3720      	adds	r7, #32
 80171fc:	46bd      	mov	sp, r7
 80171fe:	bdb0      	pop	{r4, r5, r7, pc}
 8017200:	08021a60 	.word	0x08021a60
 8017204:	08022050 	.word	0x08022050
 8017208:	08021ae0 	.word	0x08021ae0
 801720c:	08022070 	.word	0x08022070
 8017210:	08022090 	.word	0x08022090
 8017214:	240071fc 	.word	0x240071fc
 8017218:	080220b4 	.word	0x080220b4

0801721c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801721c:	b5b0      	push	{r4, r5, r7, lr}
 801721e:	b084      	sub	sp, #16
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d106      	bne.n	8017238 <tcp_rexmit_rto_prepare+0x1c>
 801722a:	4b31      	ldr	r3, [pc, #196]	; (80172f0 <tcp_rexmit_rto_prepare+0xd4>)
 801722c:	f240 6263 	movw	r2, #1635	; 0x663
 8017230:	4930      	ldr	r1, [pc, #192]	; (80172f4 <tcp_rexmit_rto_prepare+0xd8>)
 8017232:	4831      	ldr	r0, [pc, #196]	; (80172f8 <tcp_rexmit_rto_prepare+0xdc>)
 8017234:	f004 fdda 	bl	801bdec <iprintf>

  if (pcb->unacked == NULL) {
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801723c:	2b00      	cmp	r3, #0
 801723e:	d102      	bne.n	8017246 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017240:	f06f 0305 	mvn.w	r3, #5
 8017244:	e050      	b.n	80172e8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801724a:	60fb      	str	r3, [r7, #12]
 801724c:	e00b      	b.n	8017266 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801724e:	68f8      	ldr	r0, [r7, #12]
 8017250:	f7ff fee6 	bl	8017020 <tcp_output_segment_busy>
 8017254:	4603      	mov	r3, r0
 8017256:	2b00      	cmp	r3, #0
 8017258:	d002      	beq.n	8017260 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801725a:	f06f 0305 	mvn.w	r3, #5
 801725e:	e043      	b.n	80172e8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	60fb      	str	r3, [r7, #12]
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d1ef      	bne.n	801724e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801726e:	68f8      	ldr	r0, [r7, #12]
 8017270:	f7ff fed6 	bl	8017020 <tcp_output_segment_busy>
 8017274:	4603      	mov	r3, r0
 8017276:	2b00      	cmp	r3, #0
 8017278:	d002      	beq.n	8017280 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801727a:	f06f 0305 	mvn.w	r3, #5
 801727e:	e033      	b.n	80172e8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	2200      	movs	r2, #0
 8017294:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	8b5b      	ldrh	r3, [r3, #26]
 801729a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801729e:	b29a      	uxth	r2, r3
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	68db      	ldr	r3, [r3, #12]
 80172a8:	685b      	ldr	r3, [r3, #4]
 80172aa:	4618      	mov	r0, r3
 80172ac:	f7f7 f9d3 	bl	800e656 <lwip_htonl>
 80172b0:	4604      	mov	r4, r0
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	891b      	ldrh	r3, [r3, #8]
 80172b6:	461d      	mov	r5, r3
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	68db      	ldr	r3, [r3, #12]
 80172bc:	899b      	ldrh	r3, [r3, #12]
 80172be:	b29b      	uxth	r3, r3
 80172c0:	4618      	mov	r0, r3
 80172c2:	f7f7 f9b3 	bl	800e62c <lwip_htons>
 80172c6:	4603      	mov	r3, r0
 80172c8:	b2db      	uxtb	r3, r3
 80172ca:	f003 0303 	and.w	r3, r3, #3
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d001      	beq.n	80172d6 <tcp_rexmit_rto_prepare+0xba>
 80172d2:	2301      	movs	r3, #1
 80172d4:	e000      	b.n	80172d8 <tcp_rexmit_rto_prepare+0xbc>
 80172d6:	2300      	movs	r3, #0
 80172d8:	442b      	add	r3, r5
 80172da:	18e2      	adds	r2, r4, r3
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	2200      	movs	r2, #0
 80172e4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80172e6:	2300      	movs	r3, #0
}
 80172e8:	4618      	mov	r0, r3
 80172ea:	3710      	adds	r7, #16
 80172ec:	46bd      	mov	sp, r7
 80172ee:	bdb0      	pop	{r4, r5, r7, pc}
 80172f0:	08021a60 	.word	0x08021a60
 80172f4:	080220c8 	.word	0x080220c8
 80172f8:	08021ae0 	.word	0x08021ae0

080172fc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b082      	sub	sp, #8
 8017300:	af00      	add	r7, sp, #0
 8017302:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d106      	bne.n	8017318 <tcp_rexmit_rto_commit+0x1c>
 801730a:	4b0d      	ldr	r3, [pc, #52]	; (8017340 <tcp_rexmit_rto_commit+0x44>)
 801730c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017310:	490c      	ldr	r1, [pc, #48]	; (8017344 <tcp_rexmit_rto_commit+0x48>)
 8017312:	480d      	ldr	r0, [pc, #52]	; (8017348 <tcp_rexmit_rto_commit+0x4c>)
 8017314:	f004 fd6a 	bl	801bdec <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801731e:	2bff      	cmp	r3, #255	; 0xff
 8017320:	d007      	beq.n	8017332 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017328:	3301      	adds	r3, #1
 801732a:	b2da      	uxtb	r2, r3
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017332:	6878      	ldr	r0, [r7, #4]
 8017334:	f7ff fc80 	bl	8016c38 <tcp_output>
}
 8017338:	bf00      	nop
 801733a:	3708      	adds	r7, #8
 801733c:	46bd      	mov	sp, r7
 801733e:	bd80      	pop	{r7, pc}
 8017340:	08021a60 	.word	0x08021a60
 8017344:	080220ec 	.word	0x080220ec
 8017348:	08021ae0 	.word	0x08021ae0

0801734c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b082      	sub	sp, #8
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d106      	bne.n	8017368 <tcp_rexmit_rto+0x1c>
 801735a:	4b0a      	ldr	r3, [pc, #40]	; (8017384 <tcp_rexmit_rto+0x38>)
 801735c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017360:	4909      	ldr	r1, [pc, #36]	; (8017388 <tcp_rexmit_rto+0x3c>)
 8017362:	480a      	ldr	r0, [pc, #40]	; (801738c <tcp_rexmit_rto+0x40>)
 8017364:	f004 fd42 	bl	801bdec <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017368:	6878      	ldr	r0, [r7, #4]
 801736a:	f7ff ff57 	bl	801721c <tcp_rexmit_rto_prepare>
 801736e:	4603      	mov	r3, r0
 8017370:	2b00      	cmp	r3, #0
 8017372:	d102      	bne.n	801737a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f7ff ffc1 	bl	80172fc <tcp_rexmit_rto_commit>
  }
}
 801737a:	bf00      	nop
 801737c:	3708      	adds	r7, #8
 801737e:	46bd      	mov	sp, r7
 8017380:	bd80      	pop	{r7, pc}
 8017382:	bf00      	nop
 8017384:	08021a60 	.word	0x08021a60
 8017388:	08022110 	.word	0x08022110
 801738c:	08021ae0 	.word	0x08021ae0

08017390 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017390:	b590      	push	{r4, r7, lr}
 8017392:	b085      	sub	sp, #20
 8017394:	af00      	add	r7, sp, #0
 8017396:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d106      	bne.n	80173ac <tcp_rexmit+0x1c>
 801739e:	4b2f      	ldr	r3, [pc, #188]	; (801745c <tcp_rexmit+0xcc>)
 80173a0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80173a4:	492e      	ldr	r1, [pc, #184]	; (8017460 <tcp_rexmit+0xd0>)
 80173a6:	482f      	ldr	r0, [pc, #188]	; (8017464 <tcp_rexmit+0xd4>)
 80173a8:	f004 fd20 	bl	801bdec <iprintf>

  if (pcb->unacked == NULL) {
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d102      	bne.n	80173ba <tcp_rexmit+0x2a>
    return ERR_VAL;
 80173b4:	f06f 0305 	mvn.w	r3, #5
 80173b8:	e04c      	b.n	8017454 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80173be:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80173c0:	68b8      	ldr	r0, [r7, #8]
 80173c2:	f7ff fe2d 	bl	8017020 <tcp_output_segment_busy>
 80173c6:	4603      	mov	r3, r0
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d002      	beq.n	80173d2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80173cc:	f06f 0305 	mvn.w	r3, #5
 80173d0:	e040      	b.n	8017454 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80173d2:	68bb      	ldr	r3, [r7, #8]
 80173d4:	681a      	ldr	r2, [r3, #0]
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	336c      	adds	r3, #108	; 0x6c
 80173de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80173e0:	e002      	b.n	80173e8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d011      	beq.n	8017414 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	68db      	ldr	r3, [r3, #12]
 80173f6:	685b      	ldr	r3, [r3, #4]
 80173f8:	4618      	mov	r0, r3
 80173fa:	f7f7 f92c 	bl	800e656 <lwip_htonl>
 80173fe:	4604      	mov	r4, r0
 8017400:	68bb      	ldr	r3, [r7, #8]
 8017402:	68db      	ldr	r3, [r3, #12]
 8017404:	685b      	ldr	r3, [r3, #4]
 8017406:	4618      	mov	r0, r3
 8017408:	f7f7 f925 	bl	800e656 <lwip_htonl>
 801740c:	4603      	mov	r3, r0
 801740e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017410:	2b00      	cmp	r3, #0
 8017412:	dbe6      	blt.n	80173e2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	681a      	ldr	r2, [r3, #0]
 8017418:	68bb      	ldr	r3, [r7, #8]
 801741a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	68ba      	ldr	r2, [r7, #8]
 8017420:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017422:	68bb      	ldr	r3, [r7, #8]
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d103      	bne.n	8017432 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	2200      	movs	r2, #0
 801742e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017438:	2bff      	cmp	r3, #255	; 0xff
 801743a:	d007      	beq.n	801744c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017442:	3301      	adds	r3, #1
 8017444:	b2da      	uxtb	r2, r3
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	2200      	movs	r2, #0
 8017450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017452:	2300      	movs	r3, #0
}
 8017454:	4618      	mov	r0, r3
 8017456:	3714      	adds	r7, #20
 8017458:	46bd      	mov	sp, r7
 801745a:	bd90      	pop	{r4, r7, pc}
 801745c:	08021a60 	.word	0x08021a60
 8017460:	0802212c 	.word	0x0802212c
 8017464:	08021ae0 	.word	0x08021ae0

08017468 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b082      	sub	sp, #8
 801746c:	af00      	add	r7, sp, #0
 801746e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d106      	bne.n	8017484 <tcp_rexmit_fast+0x1c>
 8017476:	4b2a      	ldr	r3, [pc, #168]	; (8017520 <tcp_rexmit_fast+0xb8>)
 8017478:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801747c:	4929      	ldr	r1, [pc, #164]	; (8017524 <tcp_rexmit_fast+0xbc>)
 801747e:	482a      	ldr	r0, [pc, #168]	; (8017528 <tcp_rexmit_fast+0xc0>)
 8017480:	f004 fcb4 	bl	801bdec <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017488:	2b00      	cmp	r3, #0
 801748a:	d045      	beq.n	8017518 <tcp_rexmit_fast+0xb0>
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	8b5b      	ldrh	r3, [r3, #26]
 8017490:	f003 0304 	and.w	r3, r3, #4
 8017494:	2b00      	cmp	r3, #0
 8017496:	d13f      	bne.n	8017518 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017498:	6878      	ldr	r0, [r7, #4]
 801749a:	f7ff ff79 	bl	8017390 <tcp_rexmit>
 801749e:	4603      	mov	r3, r0
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d139      	bne.n	8017518 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80174b0:	4293      	cmp	r3, r2
 80174b2:	bf28      	it	cs
 80174b4:	4613      	movcs	r3, r2
 80174b6:	b29b      	uxth	r3, r3
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	da00      	bge.n	80174be <tcp_rexmit_fast+0x56>
 80174bc:	3301      	adds	r3, #1
 80174be:	105b      	asrs	r3, r3, #1
 80174c0:	b29a      	uxth	r2, r3
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80174ce:	461a      	mov	r2, r3
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174d4:	005b      	lsls	r3, r3, #1
 80174d6:	429a      	cmp	r2, r3
 80174d8:	d206      	bcs.n	80174e8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174de:	005b      	lsls	r3, r3, #1
 80174e0:	b29a      	uxth	r2, r3
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174f2:	4619      	mov	r1, r3
 80174f4:	0049      	lsls	r1, r1, #1
 80174f6:	440b      	add	r3, r1
 80174f8:	b29b      	uxth	r3, r3
 80174fa:	4413      	add	r3, r2
 80174fc:	b29a      	uxth	r2, r3
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	8b5b      	ldrh	r3, [r3, #26]
 8017508:	f043 0304 	orr.w	r3, r3, #4
 801750c:	b29a      	uxth	r2, r3
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	2200      	movs	r2, #0
 8017516:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8017518:	bf00      	nop
 801751a:	3708      	adds	r7, #8
 801751c:	46bd      	mov	sp, r7
 801751e:	bd80      	pop	{r7, pc}
 8017520:	08021a60 	.word	0x08021a60
 8017524:	08022144 	.word	0x08022144
 8017528:	08021ae0 	.word	0x08021ae0

0801752c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b086      	sub	sp, #24
 8017530:	af00      	add	r7, sp, #0
 8017532:	60f8      	str	r0, [r7, #12]
 8017534:	607b      	str	r3, [r7, #4]
 8017536:	460b      	mov	r3, r1
 8017538:	817b      	strh	r3, [r7, #10]
 801753a:	4613      	mov	r3, r2
 801753c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801753e:	897a      	ldrh	r2, [r7, #10]
 8017540:	893b      	ldrh	r3, [r7, #8]
 8017542:	4413      	add	r3, r2
 8017544:	b29b      	uxth	r3, r3
 8017546:	3314      	adds	r3, #20
 8017548:	b29b      	uxth	r3, r3
 801754a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801754e:	4619      	mov	r1, r3
 8017550:	2022      	movs	r0, #34	; 0x22
 8017552:	f7fa fc1d 	bl	8011d90 <pbuf_alloc>
 8017556:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017558:	697b      	ldr	r3, [r7, #20]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d04d      	beq.n	80175fa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801755e:	897b      	ldrh	r3, [r7, #10]
 8017560:	3313      	adds	r3, #19
 8017562:	697a      	ldr	r2, [r7, #20]
 8017564:	8952      	ldrh	r2, [r2, #10]
 8017566:	4293      	cmp	r3, r2
 8017568:	db06      	blt.n	8017578 <tcp_output_alloc_header_common+0x4c>
 801756a:	4b26      	ldr	r3, [pc, #152]	; (8017604 <tcp_output_alloc_header_common+0xd8>)
 801756c:	f240 7223 	movw	r2, #1827	; 0x723
 8017570:	4925      	ldr	r1, [pc, #148]	; (8017608 <tcp_output_alloc_header_common+0xdc>)
 8017572:	4826      	ldr	r0, [pc, #152]	; (801760c <tcp_output_alloc_header_common+0xe0>)
 8017574:	f004 fc3a 	bl	801bdec <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017578:	697b      	ldr	r3, [r7, #20]
 801757a:	685b      	ldr	r3, [r3, #4]
 801757c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801757e:	8c3b      	ldrh	r3, [r7, #32]
 8017580:	4618      	mov	r0, r3
 8017582:	f7f7 f853 	bl	800e62c <lwip_htons>
 8017586:	4603      	mov	r3, r0
 8017588:	461a      	mov	r2, r3
 801758a:	693b      	ldr	r3, [r7, #16]
 801758c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801758e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017590:	4618      	mov	r0, r3
 8017592:	f7f7 f84b 	bl	800e62c <lwip_htons>
 8017596:	4603      	mov	r3, r0
 8017598:	461a      	mov	r2, r3
 801759a:	693b      	ldr	r3, [r7, #16]
 801759c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801759e:	693b      	ldr	r3, [r7, #16]
 80175a0:	687a      	ldr	r2, [r7, #4]
 80175a2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80175a4:	68f8      	ldr	r0, [r7, #12]
 80175a6:	f7f7 f856 	bl	800e656 <lwip_htonl>
 80175aa:	4602      	mov	r2, r0
 80175ac:	693b      	ldr	r3, [r7, #16]
 80175ae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80175b0:	897b      	ldrh	r3, [r7, #10]
 80175b2:	089b      	lsrs	r3, r3, #2
 80175b4:	b29b      	uxth	r3, r3
 80175b6:	3305      	adds	r3, #5
 80175b8:	b29b      	uxth	r3, r3
 80175ba:	031b      	lsls	r3, r3, #12
 80175bc:	b29a      	uxth	r2, r3
 80175be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80175c2:	b29b      	uxth	r3, r3
 80175c4:	4313      	orrs	r3, r2
 80175c6:	b29b      	uxth	r3, r3
 80175c8:	4618      	mov	r0, r3
 80175ca:	f7f7 f82f 	bl	800e62c <lwip_htons>
 80175ce:	4603      	mov	r3, r0
 80175d0:	461a      	mov	r2, r3
 80175d2:	693b      	ldr	r3, [r7, #16]
 80175d4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80175d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80175d8:	4618      	mov	r0, r3
 80175da:	f7f7 f827 	bl	800e62c <lwip_htons>
 80175de:	4603      	mov	r3, r0
 80175e0:	461a      	mov	r2, r3
 80175e2:	693b      	ldr	r3, [r7, #16]
 80175e4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80175e6:	693b      	ldr	r3, [r7, #16]
 80175e8:	2200      	movs	r2, #0
 80175ea:	741a      	strb	r2, [r3, #16]
 80175ec:	2200      	movs	r2, #0
 80175ee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80175f0:	693b      	ldr	r3, [r7, #16]
 80175f2:	2200      	movs	r2, #0
 80175f4:	749a      	strb	r2, [r3, #18]
 80175f6:	2200      	movs	r2, #0
 80175f8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80175fa:	697b      	ldr	r3, [r7, #20]
}
 80175fc:	4618      	mov	r0, r3
 80175fe:	3718      	adds	r7, #24
 8017600:	46bd      	mov	sp, r7
 8017602:	bd80      	pop	{r7, pc}
 8017604:	08021a60 	.word	0x08021a60
 8017608:	08022164 	.word	0x08022164
 801760c:	08021ae0 	.word	0x08021ae0

08017610 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017610:	b5b0      	push	{r4, r5, r7, lr}
 8017612:	b08a      	sub	sp, #40	; 0x28
 8017614:	af04      	add	r7, sp, #16
 8017616:	60f8      	str	r0, [r7, #12]
 8017618:	607b      	str	r3, [r7, #4]
 801761a:	460b      	mov	r3, r1
 801761c:	817b      	strh	r3, [r7, #10]
 801761e:	4613      	mov	r3, r2
 8017620:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d106      	bne.n	8017636 <tcp_output_alloc_header+0x26>
 8017628:	4b15      	ldr	r3, [pc, #84]	; (8017680 <tcp_output_alloc_header+0x70>)
 801762a:	f240 7242 	movw	r2, #1858	; 0x742
 801762e:	4915      	ldr	r1, [pc, #84]	; (8017684 <tcp_output_alloc_header+0x74>)
 8017630:	4815      	ldr	r0, [pc, #84]	; (8017688 <tcp_output_alloc_header+0x78>)
 8017632:	f004 fbdb 	bl	801bdec <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	8adb      	ldrh	r3, [r3, #22]
 801763e:	68fa      	ldr	r2, [r7, #12]
 8017640:	8b12      	ldrh	r2, [r2, #24]
 8017642:	68f9      	ldr	r1, [r7, #12]
 8017644:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017646:	893d      	ldrh	r5, [r7, #8]
 8017648:	897c      	ldrh	r4, [r7, #10]
 801764a:	9103      	str	r1, [sp, #12]
 801764c:	2110      	movs	r1, #16
 801764e:	9102      	str	r1, [sp, #8]
 8017650:	9201      	str	r2, [sp, #4]
 8017652:	9300      	str	r3, [sp, #0]
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	462a      	mov	r2, r5
 8017658:	4621      	mov	r1, r4
 801765a:	f7ff ff67 	bl	801752c <tcp_output_alloc_header_common>
 801765e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017660:	697b      	ldr	r3, [r7, #20]
 8017662:	2b00      	cmp	r3, #0
 8017664:	d006      	beq.n	8017674 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801766a:	68fa      	ldr	r2, [r7, #12]
 801766c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801766e:	441a      	add	r2, r3
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017674:	697b      	ldr	r3, [r7, #20]
}
 8017676:	4618      	mov	r0, r3
 8017678:	3718      	adds	r7, #24
 801767a:	46bd      	mov	sp, r7
 801767c:	bdb0      	pop	{r4, r5, r7, pc}
 801767e:	bf00      	nop
 8017680:	08021a60 	.word	0x08021a60
 8017684:	08022194 	.word	0x08022194
 8017688:	08021ae0 	.word	0x08021ae0

0801768c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b088      	sub	sp, #32
 8017690:	af00      	add	r7, sp, #0
 8017692:	60f8      	str	r0, [r7, #12]
 8017694:	60b9      	str	r1, [r7, #8]
 8017696:	4611      	mov	r1, r2
 8017698:	461a      	mov	r2, r3
 801769a:	460b      	mov	r3, r1
 801769c:	71fb      	strb	r3, [r7, #7]
 801769e:	4613      	mov	r3, r2
 80176a0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80176a2:	2300      	movs	r3, #0
 80176a4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80176a6:	68bb      	ldr	r3, [r7, #8]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d106      	bne.n	80176ba <tcp_output_fill_options+0x2e>
 80176ac:	4b13      	ldr	r3, [pc, #76]	; (80176fc <tcp_output_fill_options+0x70>)
 80176ae:	f240 7256 	movw	r2, #1878	; 0x756
 80176b2:	4913      	ldr	r1, [pc, #76]	; (8017700 <tcp_output_fill_options+0x74>)
 80176b4:	4813      	ldr	r0, [pc, #76]	; (8017704 <tcp_output_fill_options+0x78>)
 80176b6:	f004 fb99 	bl	801bdec <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80176ba:	68bb      	ldr	r3, [r7, #8]
 80176bc:	685b      	ldr	r3, [r3, #4]
 80176be:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80176c0:	69bb      	ldr	r3, [r7, #24]
 80176c2:	3314      	adds	r3, #20
 80176c4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80176c6:	69bb      	ldr	r3, [r7, #24]
 80176c8:	f103 0214 	add.w	r2, r3, #20
 80176cc:	8bfb      	ldrh	r3, [r7, #30]
 80176ce:	009b      	lsls	r3, r3, #2
 80176d0:	4619      	mov	r1, r3
 80176d2:	79fb      	ldrb	r3, [r7, #7]
 80176d4:	009b      	lsls	r3, r3, #2
 80176d6:	f003 0304 	and.w	r3, r3, #4
 80176da:	440b      	add	r3, r1
 80176dc:	4413      	add	r3, r2
 80176de:	697a      	ldr	r2, [r7, #20]
 80176e0:	429a      	cmp	r2, r3
 80176e2:	d006      	beq.n	80176f2 <tcp_output_fill_options+0x66>
 80176e4:	4b05      	ldr	r3, [pc, #20]	; (80176fc <tcp_output_fill_options+0x70>)
 80176e6:	f240 7275 	movw	r2, #1909	; 0x775
 80176ea:	4907      	ldr	r1, [pc, #28]	; (8017708 <tcp_output_fill_options+0x7c>)
 80176ec:	4805      	ldr	r0, [pc, #20]	; (8017704 <tcp_output_fill_options+0x78>)
 80176ee:	f004 fb7d 	bl	801bdec <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80176f2:	bf00      	nop
 80176f4:	3720      	adds	r7, #32
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bd80      	pop	{r7, pc}
 80176fa:	bf00      	nop
 80176fc:	08021a60 	.word	0x08021a60
 8017700:	080221bc 	.word	0x080221bc
 8017704:	08021ae0 	.word	0x08021ae0
 8017708:	080220b4 	.word	0x080220b4

0801770c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b08a      	sub	sp, #40	; 0x28
 8017710:	af04      	add	r7, sp, #16
 8017712:	60f8      	str	r0, [r7, #12]
 8017714:	60b9      	str	r1, [r7, #8]
 8017716:	607a      	str	r2, [r7, #4]
 8017718:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801771a:	68bb      	ldr	r3, [r7, #8]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d106      	bne.n	801772e <tcp_output_control_segment+0x22>
 8017720:	4b1c      	ldr	r3, [pc, #112]	; (8017794 <tcp_output_control_segment+0x88>)
 8017722:	f240 7287 	movw	r2, #1927	; 0x787
 8017726:	491c      	ldr	r1, [pc, #112]	; (8017798 <tcp_output_control_segment+0x8c>)
 8017728:	481c      	ldr	r0, [pc, #112]	; (801779c <tcp_output_control_segment+0x90>)
 801772a:	f004 fb5f 	bl	801bdec <iprintf>

  netif = tcp_route(pcb, src, dst);
 801772e:	683a      	ldr	r2, [r7, #0]
 8017730:	6879      	ldr	r1, [r7, #4]
 8017732:	68f8      	ldr	r0, [r7, #12]
 8017734:	f7fe ff40 	bl	80165b8 <tcp_route>
 8017738:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801773a:	693b      	ldr	r3, [r7, #16]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d102      	bne.n	8017746 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017740:	23fc      	movs	r3, #252	; 0xfc
 8017742:	75fb      	strb	r3, [r7, #23]
 8017744:	e01c      	b.n	8017780 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d006      	beq.n	801775a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	7adb      	ldrb	r3, [r3, #11]
 8017750:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	7a9b      	ldrb	r3, [r3, #10]
 8017756:	757b      	strb	r3, [r7, #21]
 8017758:	e003      	b.n	8017762 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801775a:	23ff      	movs	r3, #255	; 0xff
 801775c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801775e:	2300      	movs	r3, #0
 8017760:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017762:	7dba      	ldrb	r2, [r7, #22]
 8017764:	693b      	ldr	r3, [r7, #16]
 8017766:	9302      	str	r3, [sp, #8]
 8017768:	2306      	movs	r3, #6
 801776a:	9301      	str	r3, [sp, #4]
 801776c:	7d7b      	ldrb	r3, [r7, #21]
 801776e:	9300      	str	r3, [sp, #0]
 8017770:	4613      	mov	r3, r2
 8017772:	683a      	ldr	r2, [r7, #0]
 8017774:	6879      	ldr	r1, [r7, #4]
 8017776:	68b8      	ldr	r0, [r7, #8]
 8017778:	f7f8 fbec 	bl	800ff54 <ip4_output_if>
 801777c:	4603      	mov	r3, r0
 801777e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017780:	68b8      	ldr	r0, [r7, #8]
 8017782:	f7fa fde9 	bl	8012358 <pbuf_free>
  return err;
 8017786:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801778a:	4618      	mov	r0, r3
 801778c:	3718      	adds	r7, #24
 801778e:	46bd      	mov	sp, r7
 8017790:	bd80      	pop	{r7, pc}
 8017792:	bf00      	nop
 8017794:	08021a60 	.word	0x08021a60
 8017798:	080221e4 	.word	0x080221e4
 801779c:	08021ae0 	.word	0x08021ae0

080177a0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80177a0:	b590      	push	{r4, r7, lr}
 80177a2:	b08b      	sub	sp, #44	; 0x2c
 80177a4:	af04      	add	r7, sp, #16
 80177a6:	60f8      	str	r0, [r7, #12]
 80177a8:	60b9      	str	r1, [r7, #8]
 80177aa:	607a      	str	r2, [r7, #4]
 80177ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80177ae:	683b      	ldr	r3, [r7, #0]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d106      	bne.n	80177c2 <tcp_rst+0x22>
 80177b4:	4b1f      	ldr	r3, [pc, #124]	; (8017834 <tcp_rst+0x94>)
 80177b6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80177ba:	491f      	ldr	r1, [pc, #124]	; (8017838 <tcp_rst+0x98>)
 80177bc:	481f      	ldr	r0, [pc, #124]	; (801783c <tcp_rst+0x9c>)
 80177be:	f004 fb15 	bl	801bdec <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80177c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d106      	bne.n	80177d6 <tcp_rst+0x36>
 80177c8:	4b1a      	ldr	r3, [pc, #104]	; (8017834 <tcp_rst+0x94>)
 80177ca:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80177ce:	491c      	ldr	r1, [pc, #112]	; (8017840 <tcp_rst+0xa0>)
 80177d0:	481a      	ldr	r0, [pc, #104]	; (801783c <tcp_rst+0x9c>)
 80177d2:	f004 fb0b 	bl	801bdec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80177d6:	2300      	movs	r3, #0
 80177d8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80177da:	f246 0308 	movw	r3, #24584	; 0x6008
 80177de:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80177e0:	7dfb      	ldrb	r3, [r7, #23]
 80177e2:	b29c      	uxth	r4, r3
 80177e4:	68b8      	ldr	r0, [r7, #8]
 80177e6:	f7f6 ff36 	bl	800e656 <lwip_htonl>
 80177ea:	4602      	mov	r2, r0
 80177ec:	8abb      	ldrh	r3, [r7, #20]
 80177ee:	9303      	str	r3, [sp, #12]
 80177f0:	2314      	movs	r3, #20
 80177f2:	9302      	str	r3, [sp, #8]
 80177f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80177f6:	9301      	str	r3, [sp, #4]
 80177f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80177fa:	9300      	str	r3, [sp, #0]
 80177fc:	4613      	mov	r3, r2
 80177fe:	2200      	movs	r2, #0
 8017800:	4621      	mov	r1, r4
 8017802:	6878      	ldr	r0, [r7, #4]
 8017804:	f7ff fe92 	bl	801752c <tcp_output_alloc_header_common>
 8017808:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801780a:	693b      	ldr	r3, [r7, #16]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d00c      	beq.n	801782a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017810:	7dfb      	ldrb	r3, [r7, #23]
 8017812:	2200      	movs	r2, #0
 8017814:	6939      	ldr	r1, [r7, #16]
 8017816:	68f8      	ldr	r0, [r7, #12]
 8017818:	f7ff ff38 	bl	801768c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801781e:	683a      	ldr	r2, [r7, #0]
 8017820:	6939      	ldr	r1, [r7, #16]
 8017822:	68f8      	ldr	r0, [r7, #12]
 8017824:	f7ff ff72 	bl	801770c <tcp_output_control_segment>
 8017828:	e000      	b.n	801782c <tcp_rst+0x8c>
    return;
 801782a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801782c:	371c      	adds	r7, #28
 801782e:	46bd      	mov	sp, r7
 8017830:	bd90      	pop	{r4, r7, pc}
 8017832:	bf00      	nop
 8017834:	08021a60 	.word	0x08021a60
 8017838:	08022210 	.word	0x08022210
 801783c:	08021ae0 	.word	0x08021ae0
 8017840:	0802222c 	.word	0x0802222c

08017844 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017844:	b590      	push	{r4, r7, lr}
 8017846:	b087      	sub	sp, #28
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801784c:	2300      	movs	r3, #0
 801784e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017850:	2300      	movs	r3, #0
 8017852:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d106      	bne.n	8017868 <tcp_send_empty_ack+0x24>
 801785a:	4b28      	ldr	r3, [pc, #160]	; (80178fc <tcp_send_empty_ack+0xb8>)
 801785c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8017860:	4927      	ldr	r1, [pc, #156]	; (8017900 <tcp_send_empty_ack+0xbc>)
 8017862:	4828      	ldr	r0, [pc, #160]	; (8017904 <tcp_send_empty_ack+0xc0>)
 8017864:	f004 fac2 	bl	801bdec <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017868:	7dfb      	ldrb	r3, [r7, #23]
 801786a:	009b      	lsls	r3, r3, #2
 801786c:	b2db      	uxtb	r3, r3
 801786e:	f003 0304 	and.w	r3, r3, #4
 8017872:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017874:	7d7b      	ldrb	r3, [r7, #21]
 8017876:	b29c      	uxth	r4, r3
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801787c:	4618      	mov	r0, r3
 801787e:	f7f6 feea 	bl	800e656 <lwip_htonl>
 8017882:	4603      	mov	r3, r0
 8017884:	2200      	movs	r2, #0
 8017886:	4621      	mov	r1, r4
 8017888:	6878      	ldr	r0, [r7, #4]
 801788a:	f7ff fec1 	bl	8017610 <tcp_output_alloc_header>
 801788e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017890:	693b      	ldr	r3, [r7, #16]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d109      	bne.n	80178aa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	8b5b      	ldrh	r3, [r3, #26]
 801789a:	f043 0303 	orr.w	r3, r3, #3
 801789e:	b29a      	uxth	r2, r3
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80178a4:	f06f 0301 	mvn.w	r3, #1
 80178a8:	e023      	b.n	80178f2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80178aa:	7dbb      	ldrb	r3, [r7, #22]
 80178ac:	7dfa      	ldrb	r2, [r7, #23]
 80178ae:	6939      	ldr	r1, [r7, #16]
 80178b0:	6878      	ldr	r0, [r7, #4]
 80178b2:	f7ff feeb 	bl	801768c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80178b6:	687a      	ldr	r2, [r7, #4]
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	3304      	adds	r3, #4
 80178bc:	6939      	ldr	r1, [r7, #16]
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f7ff ff24 	bl	801770c <tcp_output_control_segment>
 80178c4:	4603      	mov	r3, r0
 80178c6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80178c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d007      	beq.n	80178e0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	8b5b      	ldrh	r3, [r3, #26]
 80178d4:	f043 0303 	orr.w	r3, r3, #3
 80178d8:	b29a      	uxth	r2, r3
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	835a      	strh	r2, [r3, #26]
 80178de:	e006      	b.n	80178ee <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	8b5b      	ldrh	r3, [r3, #26]
 80178e4:	f023 0303 	bic.w	r3, r3, #3
 80178e8:	b29a      	uxth	r2, r3
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80178ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80178f2:	4618      	mov	r0, r3
 80178f4:	371c      	adds	r7, #28
 80178f6:	46bd      	mov	sp, r7
 80178f8:	bd90      	pop	{r4, r7, pc}
 80178fa:	bf00      	nop
 80178fc:	08021a60 	.word	0x08021a60
 8017900:	08022248 	.word	0x08022248
 8017904:	08021ae0 	.word	0x08021ae0

08017908 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017908:	b590      	push	{r4, r7, lr}
 801790a:	b087      	sub	sp, #28
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017910:	2300      	movs	r3, #0
 8017912:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d106      	bne.n	8017928 <tcp_keepalive+0x20>
 801791a:	4b18      	ldr	r3, [pc, #96]	; (801797c <tcp_keepalive+0x74>)
 801791c:	f640 0224 	movw	r2, #2084	; 0x824
 8017920:	4917      	ldr	r1, [pc, #92]	; (8017980 <tcp_keepalive+0x78>)
 8017922:	4818      	ldr	r0, [pc, #96]	; (8017984 <tcp_keepalive+0x7c>)
 8017924:	f004 fa62 	bl	801bdec <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017928:	7dfb      	ldrb	r3, [r7, #23]
 801792a:	b29c      	uxth	r4, r3
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017930:	3b01      	subs	r3, #1
 8017932:	4618      	mov	r0, r3
 8017934:	f7f6 fe8f 	bl	800e656 <lwip_htonl>
 8017938:	4603      	mov	r3, r0
 801793a:	2200      	movs	r2, #0
 801793c:	4621      	mov	r1, r4
 801793e:	6878      	ldr	r0, [r7, #4]
 8017940:	f7ff fe66 	bl	8017610 <tcp_output_alloc_header>
 8017944:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017946:	693b      	ldr	r3, [r7, #16]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d102      	bne.n	8017952 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801794c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017950:	e010      	b.n	8017974 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017952:	7dfb      	ldrb	r3, [r7, #23]
 8017954:	2200      	movs	r2, #0
 8017956:	6939      	ldr	r1, [r7, #16]
 8017958:	6878      	ldr	r0, [r7, #4]
 801795a:	f7ff fe97 	bl	801768c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801795e:	687a      	ldr	r2, [r7, #4]
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	3304      	adds	r3, #4
 8017964:	6939      	ldr	r1, [r7, #16]
 8017966:	6878      	ldr	r0, [r7, #4]
 8017968:	f7ff fed0 	bl	801770c <tcp_output_control_segment>
 801796c:	4603      	mov	r3, r0
 801796e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017970:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017974:	4618      	mov	r0, r3
 8017976:	371c      	adds	r7, #28
 8017978:	46bd      	mov	sp, r7
 801797a:	bd90      	pop	{r4, r7, pc}
 801797c:	08021a60 	.word	0x08021a60
 8017980:	08022268 	.word	0x08022268
 8017984:	08021ae0 	.word	0x08021ae0

08017988 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017988:	b590      	push	{r4, r7, lr}
 801798a:	b08b      	sub	sp, #44	; 0x2c
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017990:	2300      	movs	r3, #0
 8017992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	2b00      	cmp	r3, #0
 801799a:	d106      	bne.n	80179aa <tcp_zero_window_probe+0x22>
 801799c:	4b4c      	ldr	r3, [pc, #304]	; (8017ad0 <tcp_zero_window_probe+0x148>)
 801799e:	f640 024f 	movw	r2, #2127	; 0x84f
 80179a2:	494c      	ldr	r1, [pc, #304]	; (8017ad4 <tcp_zero_window_probe+0x14c>)
 80179a4:	484c      	ldr	r0, [pc, #304]	; (8017ad8 <tcp_zero_window_probe+0x150>)
 80179a6:	f004 fa21 	bl	801bdec <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80179ae:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80179b0:	6a3b      	ldr	r3, [r7, #32]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d101      	bne.n	80179ba <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80179b6:	2300      	movs	r3, #0
 80179b8:	e086      	b.n	8017ac8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80179c0:	2bff      	cmp	r3, #255	; 0xff
 80179c2:	d007      	beq.n	80179d4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80179ca:	3301      	adds	r3, #1
 80179cc:	b2da      	uxtb	r2, r3
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80179d4:	6a3b      	ldr	r3, [r7, #32]
 80179d6:	68db      	ldr	r3, [r3, #12]
 80179d8:	899b      	ldrh	r3, [r3, #12]
 80179da:	b29b      	uxth	r3, r3
 80179dc:	4618      	mov	r0, r3
 80179de:	f7f6 fe25 	bl	800e62c <lwip_htons>
 80179e2:	4603      	mov	r3, r0
 80179e4:	b2db      	uxtb	r3, r3
 80179e6:	f003 0301 	and.w	r3, r3, #1
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d005      	beq.n	80179fa <tcp_zero_window_probe+0x72>
 80179ee:	6a3b      	ldr	r3, [r7, #32]
 80179f0:	891b      	ldrh	r3, [r3, #8]
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d101      	bne.n	80179fa <tcp_zero_window_probe+0x72>
 80179f6:	2301      	movs	r3, #1
 80179f8:	e000      	b.n	80179fc <tcp_zero_window_probe+0x74>
 80179fa:	2300      	movs	r3, #0
 80179fc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80179fe:	7ffb      	ldrb	r3, [r7, #31]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	bf0c      	ite	eq
 8017a04:	2301      	moveq	r3, #1
 8017a06:	2300      	movne	r3, #0
 8017a08:	b2db      	uxtb	r3, r3
 8017a0a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a10:	b299      	uxth	r1, r3
 8017a12:	6a3b      	ldr	r3, [r7, #32]
 8017a14:	68db      	ldr	r3, [r3, #12]
 8017a16:	685b      	ldr	r3, [r3, #4]
 8017a18:	8bba      	ldrh	r2, [r7, #28]
 8017a1a:	6878      	ldr	r0, [r7, #4]
 8017a1c:	f7ff fdf8 	bl	8017610 <tcp_output_alloc_header>
 8017a20:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017a22:	69bb      	ldr	r3, [r7, #24]
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d102      	bne.n	8017a2e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017a2c:	e04c      	b.n	8017ac8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017a2e:	69bb      	ldr	r3, [r7, #24]
 8017a30:	685b      	ldr	r3, [r3, #4]
 8017a32:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017a34:	7ffb      	ldrb	r3, [r7, #31]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d011      	beq.n	8017a5e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017a3a:	697b      	ldr	r3, [r7, #20]
 8017a3c:	899b      	ldrh	r3, [r3, #12]
 8017a3e:	b29b      	uxth	r3, r3
 8017a40:	b21b      	sxth	r3, r3
 8017a42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017a46:	b21c      	sxth	r4, r3
 8017a48:	2011      	movs	r0, #17
 8017a4a:	f7f6 fdef 	bl	800e62c <lwip_htons>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	b21b      	sxth	r3, r3
 8017a52:	4323      	orrs	r3, r4
 8017a54:	b21b      	sxth	r3, r3
 8017a56:	b29a      	uxth	r2, r3
 8017a58:	697b      	ldr	r3, [r7, #20]
 8017a5a:	819a      	strh	r2, [r3, #12]
 8017a5c:	e010      	b.n	8017a80 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017a5e:	69bb      	ldr	r3, [r7, #24]
 8017a60:	685b      	ldr	r3, [r3, #4]
 8017a62:	3314      	adds	r3, #20
 8017a64:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017a66:	6a3b      	ldr	r3, [r7, #32]
 8017a68:	6858      	ldr	r0, [r3, #4]
 8017a6a:	6a3b      	ldr	r3, [r7, #32]
 8017a6c:	685b      	ldr	r3, [r3, #4]
 8017a6e:	891a      	ldrh	r2, [r3, #8]
 8017a70:	6a3b      	ldr	r3, [r7, #32]
 8017a72:	891b      	ldrh	r3, [r3, #8]
 8017a74:	1ad3      	subs	r3, r2, r3
 8017a76:	b29b      	uxth	r3, r3
 8017a78:	2201      	movs	r2, #1
 8017a7a:	6939      	ldr	r1, [r7, #16]
 8017a7c:	f7fa fe56 	bl	801272c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017a80:	6a3b      	ldr	r3, [r7, #32]
 8017a82:	68db      	ldr	r3, [r3, #12]
 8017a84:	685b      	ldr	r3, [r3, #4]
 8017a86:	4618      	mov	r0, r3
 8017a88:	f7f6 fde5 	bl	800e656 <lwip_htonl>
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	3301      	adds	r3, #1
 8017a90:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	1ad3      	subs	r3, r2, r3
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	da02      	bge.n	8017aa4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	68fa      	ldr	r2, [r7, #12]
 8017aa2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017aa8:	2200      	movs	r2, #0
 8017aaa:	69b9      	ldr	r1, [r7, #24]
 8017aac:	6878      	ldr	r0, [r7, #4]
 8017aae:	f7ff fded 	bl	801768c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017ab2:	687a      	ldr	r2, [r7, #4]
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	3304      	adds	r3, #4
 8017ab8:	69b9      	ldr	r1, [r7, #24]
 8017aba:	6878      	ldr	r0, [r7, #4]
 8017abc:	f7ff fe26 	bl	801770c <tcp_output_control_segment>
 8017ac0:	4603      	mov	r3, r0
 8017ac2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017ac4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017ac8:	4618      	mov	r0, r3
 8017aca:	372c      	adds	r7, #44	; 0x2c
 8017acc:	46bd      	mov	sp, r7
 8017ace:	bd90      	pop	{r4, r7, pc}
 8017ad0:	08021a60 	.word	0x08021a60
 8017ad4:	08022284 	.word	0x08022284
 8017ad8:	08021ae0 	.word	0x08021ae0

08017adc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b082      	sub	sp, #8
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017ae4:	f7fa ff10 	bl	8012908 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017ae8:	4b0a      	ldr	r3, [pc, #40]	; (8017b14 <tcpip_tcp_timer+0x38>)
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d103      	bne.n	8017af8 <tcpip_tcp_timer+0x1c>
 8017af0:	4b09      	ldr	r3, [pc, #36]	; (8017b18 <tcpip_tcp_timer+0x3c>)
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d005      	beq.n	8017b04 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017af8:	2200      	movs	r2, #0
 8017afa:	4908      	ldr	r1, [pc, #32]	; (8017b1c <tcpip_tcp_timer+0x40>)
 8017afc:	20fa      	movs	r0, #250	; 0xfa
 8017afe:	f000 f8f3 	bl	8017ce8 <sys_timeout>
 8017b02:	e003      	b.n	8017b0c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017b04:	4b06      	ldr	r3, [pc, #24]	; (8017b20 <tcpip_tcp_timer+0x44>)
 8017b06:	2200      	movs	r2, #0
 8017b08:	601a      	str	r2, [r3, #0]
  }
}
 8017b0a:	bf00      	nop
 8017b0c:	bf00      	nop
 8017b0e:	3708      	adds	r7, #8
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}
 8017b14:	240071f8 	.word	0x240071f8
 8017b18:	24007208 	.word	0x24007208
 8017b1c:	08017add 	.word	0x08017add
 8017b20:	24003bac 	.word	0x24003bac

08017b24 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017b28:	4b0a      	ldr	r3, [pc, #40]	; (8017b54 <tcp_timer_needed+0x30>)
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d10f      	bne.n	8017b50 <tcp_timer_needed+0x2c>
 8017b30:	4b09      	ldr	r3, [pc, #36]	; (8017b58 <tcp_timer_needed+0x34>)
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d103      	bne.n	8017b40 <tcp_timer_needed+0x1c>
 8017b38:	4b08      	ldr	r3, [pc, #32]	; (8017b5c <tcp_timer_needed+0x38>)
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d007      	beq.n	8017b50 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017b40:	4b04      	ldr	r3, [pc, #16]	; (8017b54 <tcp_timer_needed+0x30>)
 8017b42:	2201      	movs	r2, #1
 8017b44:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017b46:	2200      	movs	r2, #0
 8017b48:	4905      	ldr	r1, [pc, #20]	; (8017b60 <tcp_timer_needed+0x3c>)
 8017b4a:	20fa      	movs	r0, #250	; 0xfa
 8017b4c:	f000 f8cc 	bl	8017ce8 <sys_timeout>
  }
}
 8017b50:	bf00      	nop
 8017b52:	bd80      	pop	{r7, pc}
 8017b54:	24003bac 	.word	0x24003bac
 8017b58:	240071f8 	.word	0x240071f8
 8017b5c:	24007208 	.word	0x24007208
 8017b60:	08017add 	.word	0x08017add

08017b64 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017b64:	b580      	push	{r7, lr}
 8017b66:	b086      	sub	sp, #24
 8017b68:	af00      	add	r7, sp, #0
 8017b6a:	60f8      	str	r0, [r7, #12]
 8017b6c:	60b9      	str	r1, [r7, #8]
 8017b6e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017b70:	2006      	movs	r0, #6
 8017b72:	f7f9 fd4f 	bl	8011614 <memp_malloc>
 8017b76:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017b78:	693b      	ldr	r3, [r7, #16]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d109      	bne.n	8017b92 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017b7e:	693b      	ldr	r3, [r7, #16]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d151      	bne.n	8017c28 <sys_timeout_abs+0xc4>
 8017b84:	4b2a      	ldr	r3, [pc, #168]	; (8017c30 <sys_timeout_abs+0xcc>)
 8017b86:	22be      	movs	r2, #190	; 0xbe
 8017b88:	492a      	ldr	r1, [pc, #168]	; (8017c34 <sys_timeout_abs+0xd0>)
 8017b8a:	482b      	ldr	r0, [pc, #172]	; (8017c38 <sys_timeout_abs+0xd4>)
 8017b8c:	f004 f92e 	bl	801bdec <iprintf>
    return;
 8017b90:	e04a      	b.n	8017c28 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017b92:	693b      	ldr	r3, [r7, #16]
 8017b94:	2200      	movs	r2, #0
 8017b96:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017b98:	693b      	ldr	r3, [r7, #16]
 8017b9a:	68ba      	ldr	r2, [r7, #8]
 8017b9c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017b9e:	693b      	ldr	r3, [r7, #16]
 8017ba0:	687a      	ldr	r2, [r7, #4]
 8017ba2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017ba4:	693b      	ldr	r3, [r7, #16]
 8017ba6:	68fa      	ldr	r2, [r7, #12]
 8017ba8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017baa:	4b24      	ldr	r3, [pc, #144]	; (8017c3c <sys_timeout_abs+0xd8>)
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d103      	bne.n	8017bba <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017bb2:	4a22      	ldr	r2, [pc, #136]	; (8017c3c <sys_timeout_abs+0xd8>)
 8017bb4:	693b      	ldr	r3, [r7, #16]
 8017bb6:	6013      	str	r3, [r2, #0]
    return;
 8017bb8:	e037      	b.n	8017c2a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017bba:	693b      	ldr	r3, [r7, #16]
 8017bbc:	685a      	ldr	r2, [r3, #4]
 8017bbe:	4b1f      	ldr	r3, [pc, #124]	; (8017c3c <sys_timeout_abs+0xd8>)
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	685b      	ldr	r3, [r3, #4]
 8017bc4:	1ad3      	subs	r3, r2, r3
 8017bc6:	0fdb      	lsrs	r3, r3, #31
 8017bc8:	f003 0301 	and.w	r3, r3, #1
 8017bcc:	b2db      	uxtb	r3, r3
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d007      	beq.n	8017be2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017bd2:	4b1a      	ldr	r3, [pc, #104]	; (8017c3c <sys_timeout_abs+0xd8>)
 8017bd4:	681a      	ldr	r2, [r3, #0]
 8017bd6:	693b      	ldr	r3, [r7, #16]
 8017bd8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017bda:	4a18      	ldr	r2, [pc, #96]	; (8017c3c <sys_timeout_abs+0xd8>)
 8017bdc:	693b      	ldr	r3, [r7, #16]
 8017bde:	6013      	str	r3, [r2, #0]
 8017be0:	e023      	b.n	8017c2a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017be2:	4b16      	ldr	r3, [pc, #88]	; (8017c3c <sys_timeout_abs+0xd8>)
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	617b      	str	r3, [r7, #20]
 8017be8:	e01a      	b.n	8017c20 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017bea:	697b      	ldr	r3, [r7, #20]
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d00b      	beq.n	8017c0a <sys_timeout_abs+0xa6>
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	685a      	ldr	r2, [r3, #4]
 8017bf6:	697b      	ldr	r3, [r7, #20]
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	685b      	ldr	r3, [r3, #4]
 8017bfc:	1ad3      	subs	r3, r2, r3
 8017bfe:	0fdb      	lsrs	r3, r3, #31
 8017c00:	f003 0301 	and.w	r3, r3, #1
 8017c04:	b2db      	uxtb	r3, r3
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d007      	beq.n	8017c1a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017c0a:	697b      	ldr	r3, [r7, #20]
 8017c0c:	681a      	ldr	r2, [r3, #0]
 8017c0e:	693b      	ldr	r3, [r7, #16]
 8017c10:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017c12:	697b      	ldr	r3, [r7, #20]
 8017c14:	693a      	ldr	r2, [r7, #16]
 8017c16:	601a      	str	r2, [r3, #0]
        break;
 8017c18:	e007      	b.n	8017c2a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017c1a:	697b      	ldr	r3, [r7, #20]
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	617b      	str	r3, [r7, #20]
 8017c20:	697b      	ldr	r3, [r7, #20]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d1e1      	bne.n	8017bea <sys_timeout_abs+0x86>
 8017c26:	e000      	b.n	8017c2a <sys_timeout_abs+0xc6>
    return;
 8017c28:	bf00      	nop
      }
    }
  }
}
 8017c2a:	3718      	adds	r7, #24
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bd80      	pop	{r7, pc}
 8017c30:	080222a8 	.word	0x080222a8
 8017c34:	08022308 	.word	0x08022308
 8017c38:	08022348 	.word	0x08022348
 8017c3c:	24003ba4 	.word	0x24003ba4

08017c40 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017c40:	b580      	push	{r7, lr}
 8017c42:	b086      	sub	sp, #24
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017c4c:	697b      	ldr	r3, [r7, #20]
 8017c4e:	685b      	ldr	r3, [r3, #4]
 8017c50:	4798      	blx	r3

  now = sys_now();
 8017c52:	f7f6 fc11 	bl	800e478 <sys_now>
 8017c56:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017c58:	697b      	ldr	r3, [r7, #20]
 8017c5a:	681a      	ldr	r2, [r3, #0]
 8017c5c:	4b0f      	ldr	r3, [pc, #60]	; (8017c9c <lwip_cyclic_timer+0x5c>)
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	4413      	add	r3, r2
 8017c62:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017c64:	68fa      	ldr	r2, [r7, #12]
 8017c66:	693b      	ldr	r3, [r7, #16]
 8017c68:	1ad3      	subs	r3, r2, r3
 8017c6a:	0fdb      	lsrs	r3, r3, #31
 8017c6c:	f003 0301 	and.w	r3, r3, #1
 8017c70:	b2db      	uxtb	r3, r3
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d009      	beq.n	8017c8a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017c76:	697b      	ldr	r3, [r7, #20]
 8017c78:	681a      	ldr	r2, [r3, #0]
 8017c7a:	693b      	ldr	r3, [r7, #16]
 8017c7c:	4413      	add	r3, r2
 8017c7e:	687a      	ldr	r2, [r7, #4]
 8017c80:	4907      	ldr	r1, [pc, #28]	; (8017ca0 <lwip_cyclic_timer+0x60>)
 8017c82:	4618      	mov	r0, r3
 8017c84:	f7ff ff6e 	bl	8017b64 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017c88:	e004      	b.n	8017c94 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017c8a:	687a      	ldr	r2, [r7, #4]
 8017c8c:	4904      	ldr	r1, [pc, #16]	; (8017ca0 <lwip_cyclic_timer+0x60>)
 8017c8e:	68f8      	ldr	r0, [r7, #12]
 8017c90:	f7ff ff68 	bl	8017b64 <sys_timeout_abs>
}
 8017c94:	bf00      	nop
 8017c96:	3718      	adds	r7, #24
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	bd80      	pop	{r7, pc}
 8017c9c:	24003ba8 	.word	0x24003ba8
 8017ca0:	08017c41 	.word	0x08017c41

08017ca4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b082      	sub	sp, #8
 8017ca8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017caa:	2301      	movs	r3, #1
 8017cac:	607b      	str	r3, [r7, #4]
 8017cae:	e00e      	b.n	8017cce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017cb0:	4a0b      	ldr	r2, [pc, #44]	; (8017ce0 <sys_timeouts_init+0x3c>)
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	00db      	lsls	r3, r3, #3
 8017cbc:	4a08      	ldr	r2, [pc, #32]	; (8017ce0 <sys_timeouts_init+0x3c>)
 8017cbe:	4413      	add	r3, r2
 8017cc0:	461a      	mov	r2, r3
 8017cc2:	4908      	ldr	r1, [pc, #32]	; (8017ce4 <sys_timeouts_init+0x40>)
 8017cc4:	f000 f810 	bl	8017ce8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	3301      	adds	r3, #1
 8017ccc:	607b      	str	r3, [r7, #4]
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	2b02      	cmp	r3, #2
 8017cd2:	d9ed      	bls.n	8017cb0 <sys_timeouts_init+0xc>
  }
}
 8017cd4:	bf00      	nop
 8017cd6:	bf00      	nop
 8017cd8:	3708      	adds	r7, #8
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bd80      	pop	{r7, pc}
 8017cde:	bf00      	nop
 8017ce0:	08022894 	.word	0x08022894
 8017ce4:	08017c41 	.word	0x08017c41

08017ce8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b086      	sub	sp, #24
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	60f8      	str	r0, [r7, #12]
 8017cf0:	60b9      	str	r1, [r7, #8]
 8017cf2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017cfa:	d306      	bcc.n	8017d0a <sys_timeout+0x22>
 8017cfc:	4b0a      	ldr	r3, [pc, #40]	; (8017d28 <sys_timeout+0x40>)
 8017cfe:	f240 1229 	movw	r2, #297	; 0x129
 8017d02:	490a      	ldr	r1, [pc, #40]	; (8017d2c <sys_timeout+0x44>)
 8017d04:	480a      	ldr	r0, [pc, #40]	; (8017d30 <sys_timeout+0x48>)
 8017d06:	f004 f871 	bl	801bdec <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017d0a:	f7f6 fbb5 	bl	800e478 <sys_now>
 8017d0e:	4602      	mov	r2, r0
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	4413      	add	r3, r2
 8017d14:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017d16:	687a      	ldr	r2, [r7, #4]
 8017d18:	68b9      	ldr	r1, [r7, #8]
 8017d1a:	6978      	ldr	r0, [r7, #20]
 8017d1c:	f7ff ff22 	bl	8017b64 <sys_timeout_abs>
#endif
}
 8017d20:	bf00      	nop
 8017d22:	3718      	adds	r7, #24
 8017d24:	46bd      	mov	sp, r7
 8017d26:	bd80      	pop	{r7, pc}
 8017d28:	080222a8 	.word	0x080222a8
 8017d2c:	08022370 	.word	0x08022370
 8017d30:	08022348 	.word	0x08022348

08017d34 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017d38:	f004 f870 	bl	801be1c <rand>
 8017d3c:	4603      	mov	r3, r0
 8017d3e:	b29b      	uxth	r3, r3
 8017d40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017d44:	b29b      	uxth	r3, r3
 8017d46:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017d4a:	b29a      	uxth	r2, r3
 8017d4c:	4b01      	ldr	r3, [pc, #4]	; (8017d54 <udp_init+0x20>)
 8017d4e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017d50:	bf00      	nop
 8017d52:	bd80      	pop	{r7, pc}
 8017d54:	2400042c 	.word	0x2400042c

08017d58 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017d58:	b480      	push	{r7}
 8017d5a:	b083      	sub	sp, #12
 8017d5c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017d5e:	2300      	movs	r3, #0
 8017d60:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017d62:	4b17      	ldr	r3, [pc, #92]	; (8017dc0 <udp_new_port+0x68>)
 8017d64:	881b      	ldrh	r3, [r3, #0]
 8017d66:	1c5a      	adds	r2, r3, #1
 8017d68:	b291      	uxth	r1, r2
 8017d6a:	4a15      	ldr	r2, [pc, #84]	; (8017dc0 <udp_new_port+0x68>)
 8017d6c:	8011      	strh	r1, [r2, #0]
 8017d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d72:	4293      	cmp	r3, r2
 8017d74:	d103      	bne.n	8017d7e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017d76:	4b12      	ldr	r3, [pc, #72]	; (8017dc0 <udp_new_port+0x68>)
 8017d78:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017d7c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017d7e:	4b11      	ldr	r3, [pc, #68]	; (8017dc4 <udp_new_port+0x6c>)
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	603b      	str	r3, [r7, #0]
 8017d84:	e011      	b.n	8017daa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017d86:	683b      	ldr	r3, [r7, #0]
 8017d88:	8a5a      	ldrh	r2, [r3, #18]
 8017d8a:	4b0d      	ldr	r3, [pc, #52]	; (8017dc0 <udp_new_port+0x68>)
 8017d8c:	881b      	ldrh	r3, [r3, #0]
 8017d8e:	429a      	cmp	r2, r3
 8017d90:	d108      	bne.n	8017da4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017d92:	88fb      	ldrh	r3, [r7, #6]
 8017d94:	3301      	adds	r3, #1
 8017d96:	80fb      	strh	r3, [r7, #6]
 8017d98:	88fb      	ldrh	r3, [r7, #6]
 8017d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017d9e:	d3e0      	bcc.n	8017d62 <udp_new_port+0xa>
        return 0;
 8017da0:	2300      	movs	r3, #0
 8017da2:	e007      	b.n	8017db4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	68db      	ldr	r3, [r3, #12]
 8017da8:	603b      	str	r3, [r7, #0]
 8017daa:	683b      	ldr	r3, [r7, #0]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d1ea      	bne.n	8017d86 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017db0:	4b03      	ldr	r3, [pc, #12]	; (8017dc0 <udp_new_port+0x68>)
 8017db2:	881b      	ldrh	r3, [r3, #0]
}
 8017db4:	4618      	mov	r0, r3
 8017db6:	370c      	adds	r7, #12
 8017db8:	46bd      	mov	sp, r7
 8017dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dbe:	4770      	bx	lr
 8017dc0:	2400042c 	.word	0x2400042c
 8017dc4:	24007210 	.word	0x24007210

08017dc8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b084      	sub	sp, #16
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	60f8      	str	r0, [r7, #12]
 8017dd0:	60b9      	str	r1, [r7, #8]
 8017dd2:	4613      	mov	r3, r2
 8017dd4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d105      	bne.n	8017de8 <udp_input_local_match+0x20>
 8017ddc:	4b27      	ldr	r3, [pc, #156]	; (8017e7c <udp_input_local_match+0xb4>)
 8017dde:	2287      	movs	r2, #135	; 0x87
 8017de0:	4927      	ldr	r1, [pc, #156]	; (8017e80 <udp_input_local_match+0xb8>)
 8017de2:	4828      	ldr	r0, [pc, #160]	; (8017e84 <udp_input_local_match+0xbc>)
 8017de4:	f004 f802 	bl	801bdec <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017de8:	68bb      	ldr	r3, [r7, #8]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d105      	bne.n	8017dfa <udp_input_local_match+0x32>
 8017dee:	4b23      	ldr	r3, [pc, #140]	; (8017e7c <udp_input_local_match+0xb4>)
 8017df0:	2288      	movs	r2, #136	; 0x88
 8017df2:	4925      	ldr	r1, [pc, #148]	; (8017e88 <udp_input_local_match+0xc0>)
 8017df4:	4823      	ldr	r0, [pc, #140]	; (8017e84 <udp_input_local_match+0xbc>)
 8017df6:	f003 fff9 	bl	801bdec <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	7a1b      	ldrb	r3, [r3, #8]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d00b      	beq.n	8017e1a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	7a1a      	ldrb	r2, [r3, #8]
 8017e06:	4b21      	ldr	r3, [pc, #132]	; (8017e8c <udp_input_local_match+0xc4>)
 8017e08:	685b      	ldr	r3, [r3, #4]
 8017e0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e0e:	3301      	adds	r3, #1
 8017e10:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e12:	429a      	cmp	r2, r3
 8017e14:	d001      	beq.n	8017e1a <udp_input_local_match+0x52>
    return 0;
 8017e16:	2300      	movs	r3, #0
 8017e18:	e02b      	b.n	8017e72 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017e1a:	79fb      	ldrb	r3, [r7, #7]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d018      	beq.n	8017e52 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d013      	beq.n	8017e4e <udp_input_local_match+0x86>
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d00f      	beq.n	8017e4e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017e2e:	4b17      	ldr	r3, [pc, #92]	; (8017e8c <udp_input_local_match+0xc4>)
 8017e30:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017e36:	d00a      	beq.n	8017e4e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	681a      	ldr	r2, [r3, #0]
 8017e3c:	4b13      	ldr	r3, [pc, #76]	; (8017e8c <udp_input_local_match+0xc4>)
 8017e3e:	695b      	ldr	r3, [r3, #20]
 8017e40:	405a      	eors	r2, r3
 8017e42:	68bb      	ldr	r3, [r7, #8]
 8017e44:	3308      	adds	r3, #8
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d110      	bne.n	8017e70 <udp_input_local_match+0xa8>
          return 1;
 8017e4e:	2301      	movs	r3, #1
 8017e50:	e00f      	b.n	8017e72 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d009      	beq.n	8017e6c <udp_input_local_match+0xa4>
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d005      	beq.n	8017e6c <udp_input_local_match+0xa4>
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	681a      	ldr	r2, [r3, #0]
 8017e64:	4b09      	ldr	r3, [pc, #36]	; (8017e8c <udp_input_local_match+0xc4>)
 8017e66:	695b      	ldr	r3, [r3, #20]
 8017e68:	429a      	cmp	r2, r3
 8017e6a:	d101      	bne.n	8017e70 <udp_input_local_match+0xa8>
        return 1;
 8017e6c:	2301      	movs	r3, #1
 8017e6e:	e000      	b.n	8017e72 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017e70:	2300      	movs	r3, #0
}
 8017e72:	4618      	mov	r0, r3
 8017e74:	3710      	adds	r7, #16
 8017e76:	46bd      	mov	sp, r7
 8017e78:	bd80      	pop	{r7, pc}
 8017e7a:	bf00      	nop
 8017e7c:	080223bc 	.word	0x080223bc
 8017e80:	08022418 	.word	0x08022418
 8017e84:	0802243c 	.word	0x0802243c
 8017e88:	08022464 	.word	0x08022464
 8017e8c:	24004308 	.word	0x24004308

08017e90 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017e90:	b590      	push	{r4, r7, lr}
 8017e92:	b08d      	sub	sp, #52	; 0x34
 8017e94:	af02      	add	r7, sp, #8
 8017e96:	6078      	str	r0, [r7, #4]
 8017e98:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d105      	bne.n	8017eb0 <udp_input+0x20>
 8017ea4:	4b7c      	ldr	r3, [pc, #496]	; (8018098 <udp_input+0x208>)
 8017ea6:	22cf      	movs	r2, #207	; 0xcf
 8017ea8:	497c      	ldr	r1, [pc, #496]	; (801809c <udp_input+0x20c>)
 8017eaa:	487d      	ldr	r0, [pc, #500]	; (80180a0 <udp_input+0x210>)
 8017eac:	f003 ff9e 	bl	801bdec <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017eb0:	683b      	ldr	r3, [r7, #0]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d105      	bne.n	8017ec2 <udp_input+0x32>
 8017eb6:	4b78      	ldr	r3, [pc, #480]	; (8018098 <udp_input+0x208>)
 8017eb8:	22d0      	movs	r2, #208	; 0xd0
 8017eba:	497a      	ldr	r1, [pc, #488]	; (80180a4 <udp_input+0x214>)
 8017ebc:	4878      	ldr	r0, [pc, #480]	; (80180a0 <udp_input+0x210>)
 8017ebe:	f003 ff95 	bl	801bdec <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	895b      	ldrh	r3, [r3, #10]
 8017ec6:	2b07      	cmp	r3, #7
 8017ec8:	d803      	bhi.n	8017ed2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017eca:	6878      	ldr	r0, [r7, #4]
 8017ecc:	f7fa fa44 	bl	8012358 <pbuf_free>
    goto end;
 8017ed0:	e0de      	b.n	8018090 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	685b      	ldr	r3, [r3, #4]
 8017ed6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017ed8:	4b73      	ldr	r3, [pc, #460]	; (80180a8 <udp_input+0x218>)
 8017eda:	695b      	ldr	r3, [r3, #20]
 8017edc:	4a72      	ldr	r2, [pc, #456]	; (80180a8 <udp_input+0x218>)
 8017ede:	6812      	ldr	r2, [r2, #0]
 8017ee0:	4611      	mov	r1, r2
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	f7f8 f90e 	bl	8010104 <ip4_addr_isbroadcast_u32>
 8017ee8:	4603      	mov	r3, r0
 8017eea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017eec:	697b      	ldr	r3, [r7, #20]
 8017eee:	881b      	ldrh	r3, [r3, #0]
 8017ef0:	b29b      	uxth	r3, r3
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	f7f6 fb9a 	bl	800e62c <lwip_htons>
 8017ef8:	4603      	mov	r3, r0
 8017efa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017efc:	697b      	ldr	r3, [r7, #20]
 8017efe:	885b      	ldrh	r3, [r3, #2]
 8017f00:	b29b      	uxth	r3, r3
 8017f02:	4618      	mov	r0, r3
 8017f04:	f7f6 fb92 	bl	800e62c <lwip_htons>
 8017f08:	4603      	mov	r3, r0
 8017f0a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017f10:	2300      	movs	r3, #0
 8017f12:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017f14:	2300      	movs	r3, #0
 8017f16:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f18:	4b64      	ldr	r3, [pc, #400]	; (80180ac <udp_input+0x21c>)
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8017f1e:	e054      	b.n	8017fca <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f22:	8a5b      	ldrh	r3, [r3, #18]
 8017f24:	89fa      	ldrh	r2, [r7, #14]
 8017f26:	429a      	cmp	r2, r3
 8017f28:	d14a      	bne.n	8017fc0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017f2a:	7cfb      	ldrb	r3, [r7, #19]
 8017f2c:	461a      	mov	r2, r3
 8017f2e:	6839      	ldr	r1, [r7, #0]
 8017f30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f32:	f7ff ff49 	bl	8017dc8 <udp_input_local_match>
 8017f36:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d041      	beq.n	8017fc0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f3e:	7c1b      	ldrb	r3, [r3, #16]
 8017f40:	f003 0304 	and.w	r3, r3, #4
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d11d      	bne.n	8017f84 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017f48:	69fb      	ldr	r3, [r7, #28]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d102      	bne.n	8017f54 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f50:	61fb      	str	r3, [r7, #28]
 8017f52:	e017      	b.n	8017f84 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017f54:	7cfb      	ldrb	r3, [r7, #19]
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d014      	beq.n	8017f84 <udp_input+0xf4>
 8017f5a:	4b53      	ldr	r3, [pc, #332]	; (80180a8 <udp_input+0x218>)
 8017f5c:	695b      	ldr	r3, [r3, #20]
 8017f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f62:	d10f      	bne.n	8017f84 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017f64:	69fb      	ldr	r3, [r7, #28]
 8017f66:	681a      	ldr	r2, [r3, #0]
 8017f68:	683b      	ldr	r3, [r7, #0]
 8017f6a:	3304      	adds	r3, #4
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	429a      	cmp	r2, r3
 8017f70:	d008      	beq.n	8017f84 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f74:	681a      	ldr	r2, [r3, #0]
 8017f76:	683b      	ldr	r3, [r7, #0]
 8017f78:	3304      	adds	r3, #4
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	429a      	cmp	r2, r3
 8017f7e:	d101      	bne.n	8017f84 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f82:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f86:	8a9b      	ldrh	r3, [r3, #20]
 8017f88:	8a3a      	ldrh	r2, [r7, #16]
 8017f8a:	429a      	cmp	r2, r3
 8017f8c:	d118      	bne.n	8017fc0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f90:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d005      	beq.n	8017fa2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f98:	685a      	ldr	r2, [r3, #4]
 8017f9a:	4b43      	ldr	r3, [pc, #268]	; (80180a8 <udp_input+0x218>)
 8017f9c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017f9e:	429a      	cmp	r2, r3
 8017fa0:	d10e      	bne.n	8017fc0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017fa2:	6a3b      	ldr	r3, [r7, #32]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d014      	beq.n	8017fd2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017faa:	68da      	ldr	r2, [r3, #12]
 8017fac:	6a3b      	ldr	r3, [r7, #32]
 8017fae:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017fb0:	4b3e      	ldr	r3, [pc, #248]	; (80180ac <udp_input+0x21c>)
 8017fb2:	681a      	ldr	r2, [r3, #0]
 8017fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fb6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017fb8:	4a3c      	ldr	r2, [pc, #240]	; (80180ac <udp_input+0x21c>)
 8017fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fbc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017fbe:	e008      	b.n	8017fd2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8017fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fc2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fc6:	68db      	ldr	r3, [r3, #12]
 8017fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8017fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d1a7      	bne.n	8017f20 <udp_input+0x90>
 8017fd0:	e000      	b.n	8017fd4 <udp_input+0x144>
        break;
 8017fd2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d101      	bne.n	8017fde <udp_input+0x14e>
    pcb = uncon_pcb;
 8017fda:	69fb      	ldr	r3, [r7, #28]
 8017fdc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d002      	beq.n	8017fea <udp_input+0x15a>
    for_us = 1;
 8017fe4:	2301      	movs	r3, #1
 8017fe6:	76fb      	strb	r3, [r7, #27]
 8017fe8:	e00a      	b.n	8018000 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017fea:	683b      	ldr	r3, [r7, #0]
 8017fec:	3304      	adds	r3, #4
 8017fee:	681a      	ldr	r2, [r3, #0]
 8017ff0:	4b2d      	ldr	r3, [pc, #180]	; (80180a8 <udp_input+0x218>)
 8017ff2:	695b      	ldr	r3, [r3, #20]
 8017ff4:	429a      	cmp	r2, r3
 8017ff6:	bf0c      	ite	eq
 8017ff8:	2301      	moveq	r3, #1
 8017ffa:	2300      	movne	r3, #0
 8017ffc:	b2db      	uxtb	r3, r3
 8017ffe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018000:	7efb      	ldrb	r3, [r7, #27]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d041      	beq.n	801808a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018006:	2108      	movs	r1, #8
 8018008:	6878      	ldr	r0, [r7, #4]
 801800a:	f7fa f91f 	bl	801224c <pbuf_remove_header>
 801800e:	4603      	mov	r3, r0
 8018010:	2b00      	cmp	r3, #0
 8018012:	d00a      	beq.n	801802a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018014:	4b20      	ldr	r3, [pc, #128]	; (8018098 <udp_input+0x208>)
 8018016:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801801a:	4925      	ldr	r1, [pc, #148]	; (80180b0 <udp_input+0x220>)
 801801c:	4820      	ldr	r0, [pc, #128]	; (80180a0 <udp_input+0x210>)
 801801e:	f003 fee5 	bl	801bdec <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018022:	6878      	ldr	r0, [r7, #4]
 8018024:	f7fa f998 	bl	8012358 <pbuf_free>
      goto end;
 8018028:	e032      	b.n	8018090 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801802c:	2b00      	cmp	r3, #0
 801802e:	d012      	beq.n	8018056 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018032:	699b      	ldr	r3, [r3, #24]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d00a      	beq.n	801804e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801803a:	699c      	ldr	r4, [r3, #24]
 801803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801803e:	69d8      	ldr	r0, [r3, #28]
 8018040:	8a3b      	ldrh	r3, [r7, #16]
 8018042:	9300      	str	r3, [sp, #0]
 8018044:	4b1b      	ldr	r3, [pc, #108]	; (80180b4 <udp_input+0x224>)
 8018046:	687a      	ldr	r2, [r7, #4]
 8018048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801804a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801804c:	e021      	b.n	8018092 <udp_input+0x202>
        pbuf_free(p);
 801804e:	6878      	ldr	r0, [r7, #4]
 8018050:	f7fa f982 	bl	8012358 <pbuf_free>
        goto end;
 8018054:	e01c      	b.n	8018090 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018056:	7cfb      	ldrb	r3, [r7, #19]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d112      	bne.n	8018082 <udp_input+0x1f2>
 801805c:	4b12      	ldr	r3, [pc, #72]	; (80180a8 <udp_input+0x218>)
 801805e:	695b      	ldr	r3, [r3, #20]
 8018060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018064:	2be0      	cmp	r3, #224	; 0xe0
 8018066:	d00c      	beq.n	8018082 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018068:	4b0f      	ldr	r3, [pc, #60]	; (80180a8 <udp_input+0x218>)
 801806a:	899b      	ldrh	r3, [r3, #12]
 801806c:	3308      	adds	r3, #8
 801806e:	b29b      	uxth	r3, r3
 8018070:	b21b      	sxth	r3, r3
 8018072:	4619      	mov	r1, r3
 8018074:	6878      	ldr	r0, [r7, #4]
 8018076:	f7fa f95c 	bl	8012332 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801807a:	2103      	movs	r1, #3
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f7f7 fc45 	bl	800f90c <icmp_dest_unreach>
      pbuf_free(p);
 8018082:	6878      	ldr	r0, [r7, #4]
 8018084:	f7fa f968 	bl	8012358 <pbuf_free>
  return;
 8018088:	e003      	b.n	8018092 <udp_input+0x202>
    pbuf_free(p);
 801808a:	6878      	ldr	r0, [r7, #4]
 801808c:	f7fa f964 	bl	8012358 <pbuf_free>
  return;
 8018090:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018092:	372c      	adds	r7, #44	; 0x2c
 8018094:	46bd      	mov	sp, r7
 8018096:	bd90      	pop	{r4, r7, pc}
 8018098:	080223bc 	.word	0x080223bc
 801809c:	0802248c 	.word	0x0802248c
 80180a0:	0802243c 	.word	0x0802243c
 80180a4:	080224a4 	.word	0x080224a4
 80180a8:	24004308 	.word	0x24004308
 80180ac:	24007210 	.word	0x24007210
 80180b0:	080224c0 	.word	0x080224c0
 80180b4:	24004318 	.word	0x24004318

080180b8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b086      	sub	sp, #24
 80180bc:	af00      	add	r7, sp, #0
 80180be:	60f8      	str	r0, [r7, #12]
 80180c0:	60b9      	str	r1, [r7, #8]
 80180c2:	4613      	mov	r3, r2
 80180c4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80180c6:	68bb      	ldr	r3, [r7, #8]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d101      	bne.n	80180d0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80180cc:	4b39      	ldr	r3, [pc, #228]	; (80181b4 <udp_bind+0xfc>)
 80180ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d109      	bne.n	80180ea <udp_bind+0x32>
 80180d6:	4b38      	ldr	r3, [pc, #224]	; (80181b8 <udp_bind+0x100>)
 80180d8:	f240 32b7 	movw	r2, #951	; 0x3b7
 80180dc:	4937      	ldr	r1, [pc, #220]	; (80181bc <udp_bind+0x104>)
 80180de:	4838      	ldr	r0, [pc, #224]	; (80181c0 <udp_bind+0x108>)
 80180e0:	f003 fe84 	bl	801bdec <iprintf>
 80180e4:	f06f 030f 	mvn.w	r3, #15
 80180e8:	e060      	b.n	80181ac <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80180ea:	2300      	movs	r3, #0
 80180ec:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80180ee:	4b35      	ldr	r3, [pc, #212]	; (80181c4 <udp_bind+0x10c>)
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	617b      	str	r3, [r7, #20]
 80180f4:	e009      	b.n	801810a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80180f6:	68fa      	ldr	r2, [r7, #12]
 80180f8:	697b      	ldr	r3, [r7, #20]
 80180fa:	429a      	cmp	r2, r3
 80180fc:	d102      	bne.n	8018104 <udp_bind+0x4c>
      rebind = 1;
 80180fe:	2301      	movs	r3, #1
 8018100:	74fb      	strb	r3, [r7, #19]
      break;
 8018102:	e005      	b.n	8018110 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	68db      	ldr	r3, [r3, #12]
 8018108:	617b      	str	r3, [r7, #20]
 801810a:	697b      	ldr	r3, [r7, #20]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d1f2      	bne.n	80180f6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018110:	88fb      	ldrh	r3, [r7, #6]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d109      	bne.n	801812a <udp_bind+0x72>
    port = udp_new_port();
 8018116:	f7ff fe1f 	bl	8017d58 <udp_new_port>
 801811a:	4603      	mov	r3, r0
 801811c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801811e:	88fb      	ldrh	r3, [r7, #6]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d12c      	bne.n	801817e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018124:	f06f 0307 	mvn.w	r3, #7
 8018128:	e040      	b.n	80181ac <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801812a:	4b26      	ldr	r3, [pc, #152]	; (80181c4 <udp_bind+0x10c>)
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	617b      	str	r3, [r7, #20]
 8018130:	e022      	b.n	8018178 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8018132:	68fa      	ldr	r2, [r7, #12]
 8018134:	697b      	ldr	r3, [r7, #20]
 8018136:	429a      	cmp	r2, r3
 8018138:	d01b      	beq.n	8018172 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801813a:	697b      	ldr	r3, [r7, #20]
 801813c:	8a5b      	ldrh	r3, [r3, #18]
 801813e:	88fa      	ldrh	r2, [r7, #6]
 8018140:	429a      	cmp	r2, r3
 8018142:	d116      	bne.n	8018172 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018144:	697b      	ldr	r3, [r7, #20]
 8018146:	681a      	ldr	r2, [r3, #0]
 8018148:	68bb      	ldr	r3, [r7, #8]
 801814a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801814c:	429a      	cmp	r2, r3
 801814e:	d00d      	beq.n	801816c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018150:	68bb      	ldr	r3, [r7, #8]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d00a      	beq.n	801816c <udp_bind+0xb4>
 8018156:	68bb      	ldr	r3, [r7, #8]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d006      	beq.n	801816c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801815e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018160:	2b00      	cmp	r3, #0
 8018162:	d003      	beq.n	801816c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018164:	697b      	ldr	r3, [r7, #20]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d102      	bne.n	8018172 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801816c:	f06f 0307 	mvn.w	r3, #7
 8018170:	e01c      	b.n	80181ac <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018172:	697b      	ldr	r3, [r7, #20]
 8018174:	68db      	ldr	r3, [r3, #12]
 8018176:	617b      	str	r3, [r7, #20]
 8018178:	697b      	ldr	r3, [r7, #20]
 801817a:	2b00      	cmp	r3, #0
 801817c:	d1d9      	bne.n	8018132 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801817e:	68bb      	ldr	r3, [r7, #8]
 8018180:	2b00      	cmp	r3, #0
 8018182:	d002      	beq.n	801818a <udp_bind+0xd2>
 8018184:	68bb      	ldr	r3, [r7, #8]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	e000      	b.n	801818c <udp_bind+0xd4>
 801818a:	2300      	movs	r3, #0
 801818c:	68fa      	ldr	r2, [r7, #12]
 801818e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	88fa      	ldrh	r2, [r7, #6]
 8018194:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018196:	7cfb      	ldrb	r3, [r7, #19]
 8018198:	2b00      	cmp	r3, #0
 801819a:	d106      	bne.n	80181aa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801819c:	4b09      	ldr	r3, [pc, #36]	; (80181c4 <udp_bind+0x10c>)
 801819e:	681a      	ldr	r2, [r3, #0]
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80181a4:	4a07      	ldr	r2, [pc, #28]	; (80181c4 <udp_bind+0x10c>)
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80181aa:	2300      	movs	r3, #0
}
 80181ac:	4618      	mov	r0, r3
 80181ae:	3718      	adds	r7, #24
 80181b0:	46bd      	mov	sp, r7
 80181b2:	bd80      	pop	{r7, pc}
 80181b4:	080227d8 	.word	0x080227d8
 80181b8:	080223bc 	.word	0x080223bc
 80181bc:	080226b0 	.word	0x080226b0
 80181c0:	0802243c 	.word	0x0802243c
 80181c4:	24007210 	.word	0x24007210

080181c8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80181c8:	b580      	push	{r7, lr}
 80181ca:	b086      	sub	sp, #24
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	60f8      	str	r0, [r7, #12]
 80181d0:	60b9      	str	r1, [r7, #8]
 80181d2:	4613      	mov	r3, r2
 80181d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d109      	bne.n	80181f0 <udp_connect+0x28>
 80181dc:	4b2c      	ldr	r3, [pc, #176]	; (8018290 <udp_connect+0xc8>)
 80181de:	f240 4235 	movw	r2, #1077	; 0x435
 80181e2:	492c      	ldr	r1, [pc, #176]	; (8018294 <udp_connect+0xcc>)
 80181e4:	482c      	ldr	r0, [pc, #176]	; (8018298 <udp_connect+0xd0>)
 80181e6:	f003 fe01 	bl	801bdec <iprintf>
 80181ea:	f06f 030f 	mvn.w	r3, #15
 80181ee:	e04b      	b.n	8018288 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80181f0:	68bb      	ldr	r3, [r7, #8]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d109      	bne.n	801820a <udp_connect+0x42>
 80181f6:	4b26      	ldr	r3, [pc, #152]	; (8018290 <udp_connect+0xc8>)
 80181f8:	f240 4236 	movw	r2, #1078	; 0x436
 80181fc:	4927      	ldr	r1, [pc, #156]	; (801829c <udp_connect+0xd4>)
 80181fe:	4826      	ldr	r0, [pc, #152]	; (8018298 <udp_connect+0xd0>)
 8018200:	f003 fdf4 	bl	801bdec <iprintf>
 8018204:	f06f 030f 	mvn.w	r3, #15
 8018208:	e03e      	b.n	8018288 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	8a5b      	ldrh	r3, [r3, #18]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d10f      	bne.n	8018232 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018212:	68f9      	ldr	r1, [r7, #12]
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	8a5b      	ldrh	r3, [r3, #18]
 8018218:	461a      	mov	r2, r3
 801821a:	68f8      	ldr	r0, [r7, #12]
 801821c:	f7ff ff4c 	bl	80180b8 <udp_bind>
 8018220:	4603      	mov	r3, r0
 8018222:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8018224:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d002      	beq.n	8018232 <udp_connect+0x6a>
      return err;
 801822c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018230:	e02a      	b.n	8018288 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8018232:	68bb      	ldr	r3, [r7, #8]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d002      	beq.n	801823e <udp_connect+0x76>
 8018238:	68bb      	ldr	r3, [r7, #8]
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	e000      	b.n	8018240 <udp_connect+0x78>
 801823e:	2300      	movs	r3, #0
 8018240:	68fa      	ldr	r2, [r7, #12]
 8018242:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	88fa      	ldrh	r2, [r7, #6]
 8018248:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	7c1b      	ldrb	r3, [r3, #16]
 801824e:	f043 0304 	orr.w	r3, r3, #4
 8018252:	b2da      	uxtb	r2, r3
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018258:	4b11      	ldr	r3, [pc, #68]	; (80182a0 <udp_connect+0xd8>)
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	617b      	str	r3, [r7, #20]
 801825e:	e008      	b.n	8018272 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8018260:	68fa      	ldr	r2, [r7, #12]
 8018262:	697b      	ldr	r3, [r7, #20]
 8018264:	429a      	cmp	r2, r3
 8018266:	d101      	bne.n	801826c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8018268:	2300      	movs	r3, #0
 801826a:	e00d      	b.n	8018288 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801826c:	697b      	ldr	r3, [r7, #20]
 801826e:	68db      	ldr	r3, [r3, #12]
 8018270:	617b      	str	r3, [r7, #20]
 8018272:	697b      	ldr	r3, [r7, #20]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d1f3      	bne.n	8018260 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8018278:	4b09      	ldr	r3, [pc, #36]	; (80182a0 <udp_connect+0xd8>)
 801827a:	681a      	ldr	r2, [r3, #0]
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8018280:	4a07      	ldr	r2, [pc, #28]	; (80182a0 <udp_connect+0xd8>)
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8018286:	2300      	movs	r3, #0
}
 8018288:	4618      	mov	r0, r3
 801828a:	3718      	adds	r7, #24
 801828c:	46bd      	mov	sp, r7
 801828e:	bd80      	pop	{r7, pc}
 8018290:	080223bc 	.word	0x080223bc
 8018294:	080226c8 	.word	0x080226c8
 8018298:	0802243c 	.word	0x0802243c
 801829c:	080226e4 	.word	0x080226e4
 80182a0:	24007210 	.word	0x24007210

080182a4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b082      	sub	sp, #8
 80182a8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80182aa:	2000      	movs	r0, #0
 80182ac:	f7f9 f9b2 	bl	8011614 <memp_malloc>
 80182b0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d007      	beq.n	80182c8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80182b8:	2220      	movs	r2, #32
 80182ba:	2100      	movs	r1, #0
 80182bc:	6878      	ldr	r0, [r7, #4]
 80182be:	f002 fe9b 	bl	801aff8 <memset>
    pcb->ttl = UDP_TTL;
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	22ff      	movs	r2, #255	; 0xff
 80182c6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80182c8:	687b      	ldr	r3, [r7, #4]
}
 80182ca:	4618      	mov	r0, r3
 80182cc:	3708      	adds	r7, #8
 80182ce:	46bd      	mov	sp, r7
 80182d0:	bd80      	pop	{r7, pc}
	...

080182d4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80182d4:	b480      	push	{r7}
 80182d6:	b085      	sub	sp, #20
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
 80182dc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d01e      	beq.n	8018322 <udp_netif_ip_addr_changed+0x4e>
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d01a      	beq.n	8018322 <udp_netif_ip_addr_changed+0x4e>
 80182ec:	683b      	ldr	r3, [r7, #0]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d017      	beq.n	8018322 <udp_netif_ip_addr_changed+0x4e>
 80182f2:	683b      	ldr	r3, [r7, #0]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d013      	beq.n	8018322 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80182fa:	4b0d      	ldr	r3, [pc, #52]	; (8018330 <udp_netif_ip_addr_changed+0x5c>)
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	60fb      	str	r3, [r7, #12]
 8018300:	e00c      	b.n	801831c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	681a      	ldr	r2, [r3, #0]
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	429a      	cmp	r2, r3
 801830c:	d103      	bne.n	8018316 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801830e:	683b      	ldr	r3, [r7, #0]
 8018310:	681a      	ldr	r2, [r3, #0]
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	68db      	ldr	r3, [r3, #12]
 801831a:	60fb      	str	r3, [r7, #12]
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d1ef      	bne.n	8018302 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018322:	bf00      	nop
 8018324:	3714      	adds	r7, #20
 8018326:	46bd      	mov	sp, r7
 8018328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801832c:	4770      	bx	lr
 801832e:	bf00      	nop
 8018330:	24007210 	.word	0x24007210

08018334 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8018334:	b580      	push	{r7, lr}
 8018336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8018338:	4b10      	ldr	r3, [pc, #64]	; (801837c <MX_PDM2PCM_Init+0x48>)
 801833a:	2200      	movs	r2, #0
 801833c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 801833e:	4b0f      	ldr	r3, [pc, #60]	; (801837c <MX_PDM2PCM_Init+0x48>)
 8018340:	2201      	movs	r2, #1
 8018342:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8018344:	4b0d      	ldr	r3, [pc, #52]	; (801837c <MX_PDM2PCM_Init+0x48>)
 8018346:	4a0e      	ldr	r2, [pc, #56]	; (8018380 <MX_PDM2PCM_Init+0x4c>)
 8018348:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 801834a:	4b0c      	ldr	r3, [pc, #48]	; (801837c <MX_PDM2PCM_Init+0x48>)
 801834c:	2202      	movs	r2, #2
 801834e:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 8018350:	4b0a      	ldr	r3, [pc, #40]	; (801837c <MX_PDM2PCM_Init+0x48>)
 8018352:	2202      	movs	r2, #2
 8018354:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8018356:	4809      	ldr	r0, [pc, #36]	; (801837c <MX_PDM2PCM_Init+0x48>)
 8018358:	f002 fc22 	bl	801aba0 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 801835c:	4b09      	ldr	r3, [pc, #36]	; (8018384 <MX_PDM2PCM_Init+0x50>)
 801835e:	2202      	movs	r2, #2
 8018360:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8018362:	4b08      	ldr	r3, [pc, #32]	; (8018384 <MX_PDM2PCM_Init+0x50>)
 8018364:	2210      	movs	r2, #16
 8018366:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8018368:	4b06      	ldr	r3, [pc, #24]	; (8018384 <MX_PDM2PCM_Init+0x50>)
 801836a:	2200      	movs	r2, #0
 801836c:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 801836e:	4905      	ldr	r1, [pc, #20]	; (8018384 <MX_PDM2PCM_Init+0x50>)
 8018370:	4802      	ldr	r0, [pc, #8]	; (801837c <MX_PDM2PCM_Init+0x48>)
 8018372:	f002 fce5 	bl	801ad40 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8018376:	bf00      	nop
 8018378:	bd80      	pop	{r7, pc}
 801837a:	bf00      	nop
 801837c:	2400721c 	.word	0x2400721c
 8018380:	7d70a3d6 	.word	0x7d70a3d6
 8018384:	24007214 	.word	0x24007214

08018388 <icm20602_write>:

/* Private user code ---------------------------------------------------------*/

//Writes a register byte to the driver
uint8_t icm20602_write(uint8_t reg, uint8_t *data, uint16_t len)
{
 8018388:	b580      	push	{r7, lr}
 801838a:	b084      	sub	sp, #16
 801838c:	af00      	add	r7, sp, #0
 801838e:	4603      	mov	r3, r0
 8018390:	6039      	str	r1, [r7, #0]
 8018392:	71fb      	strb	r3, [r7, #7]
 8018394:	4613      	mov	r3, r2
 8018396:	80bb      	strh	r3, [r7, #4]
	int rv = 0;
 8018398:	2300      	movs	r3, #0
 801839a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 801839c:	2200      	movs	r2, #0
 801839e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80183a2:	4819      	ldr	r0, [pc, #100]	; (8018408 <icm20602_write+0x80>)
 80183a4:	f7ef f926 	bl	80075f4 <HAL_GPIO_WritePin>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80183a8:	bf00      	nop
 80183aa:	4818      	ldr	r0, [pc, #96]	; (801840c <icm20602_write+0x84>)
 80183ac:	f7f3 fd1c 	bl	800bde8 <HAL_SPI_GetState>
 80183b0:	4603      	mov	r3, r0
 80183b2:	2b01      	cmp	r3, #1
 80183b4:	d1f9      	bne.n	80183aa <icm20602_write+0x22>
	rv = HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
 80183b6:	1df9      	adds	r1, r7, #7
 80183b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80183bc:	2201      	movs	r2, #1
 80183be:	4813      	ldr	r0, [pc, #76]	; (801840c <icm20602_write+0x84>)
 80183c0:	f7f2 fe42 	bl	800b048 <HAL_SPI_Transmit>
 80183c4:	4603      	mov	r3, r0
 80183c6:	60fb      	str	r3, [r7, #12]
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80183c8:	bf00      	nop
 80183ca:	4810      	ldr	r0, [pc, #64]	; (801840c <icm20602_write+0x84>)
 80183cc:	f7f3 fd0c 	bl	800bde8 <HAL_SPI_GetState>
 80183d0:	4603      	mov	r3, r0
 80183d2:	2b01      	cmp	r3, #1
 80183d4:	d1f9      	bne.n	80183ca <icm20602_write+0x42>
	rv += HAL_SPI_Transmit(&hspi2, data, len, 1000);
 80183d6:	88ba      	ldrh	r2, [r7, #4]
 80183d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80183dc:	6839      	ldr	r1, [r7, #0]
 80183de:	480b      	ldr	r0, [pc, #44]	; (801840c <icm20602_write+0x84>)
 80183e0:	f7f2 fe32 	bl	800b048 <HAL_SPI_Transmit>
 80183e4:	4603      	mov	r3, r0
 80183e6:	461a      	mov	r2, r3
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	4413      	add	r3, r2
 80183ec:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_SET);
 80183ee:	2201      	movs	r2, #1
 80183f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80183f4:	4804      	ldr	r0, [pc, #16]	; (8018408 <icm20602_write+0x80>)
 80183f6:	f7ef f8fd 	bl	80075f4 <HAL_GPIO_WritePin>
	return rv;
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	b2db      	uxtb	r3, r3
}
 80183fe:	4618      	mov	r0, r3
 8018400:	3710      	adds	r7, #16
 8018402:	46bd      	mov	sp, r7
 8018404:	bd80      	pop	{r7, pc}
 8018406:	bf00      	nop
 8018408:	58020400 	.word	0x58020400
 801840c:	24003e78 	.word	0x24003e78

08018410 <icm20602_read>:

//Read a register byte to the driver
uint8_t icm20602_read(uint8_t reg, uint8_t *data, uint16_t len)
{
 8018410:	b580      	push	{r7, lr}
 8018412:	b084      	sub	sp, #16
 8018414:	af00      	add	r7, sp, #0
 8018416:	4603      	mov	r3, r0
 8018418:	6039      	str	r1, [r7, #0]
 801841a:	71fb      	strb	r3, [r7, #7]
 801841c:	4613      	mov	r3, r2
 801841e:	80bb      	strh	r3, [r7, #4]
	int rv = 0;
 8018420:	2300      	movs	r3, #0
 8018422:	60fb      	str	r3, [r7, #12]
	reg |= 0b10000000;
 8018424:	79fb      	ldrb	r3, [r7, #7]
 8018426:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801842a:	b2db      	uxtb	r3, r3
 801842c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 801842e:	2200      	movs	r2, #0
 8018430:	f44f 7100 	mov.w	r1, #512	; 0x200
 8018434:	4818      	ldr	r0, [pc, #96]	; (8018498 <icm20602_read+0x88>)
 8018436:	f7ef f8dd 	bl	80075f4 <HAL_GPIO_WritePin>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801843a:	bf00      	nop
 801843c:	4817      	ldr	r0, [pc, #92]	; (801849c <icm20602_read+0x8c>)
 801843e:	f7f3 fcd3 	bl	800bde8 <HAL_SPI_GetState>
 8018442:	4603      	mov	r3, r0
 8018444:	2b01      	cmp	r3, #1
 8018446:	d1f9      	bne.n	801843c <icm20602_read+0x2c>
	rv = HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
 8018448:	1df9      	adds	r1, r7, #7
 801844a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801844e:	2201      	movs	r2, #1
 8018450:	4812      	ldr	r0, [pc, #72]	; (801849c <icm20602_read+0x8c>)
 8018452:	f7f2 fdf9 	bl	800b048 <HAL_SPI_Transmit>
 8018456:	4603      	mov	r3, r0
 8018458:	60fb      	str	r3, [r7, #12]
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801845a:	bf00      	nop
 801845c:	480f      	ldr	r0, [pc, #60]	; (801849c <icm20602_read+0x8c>)
 801845e:	f7f3 fcc3 	bl	800bde8 <HAL_SPI_GetState>
 8018462:	4603      	mov	r3, r0
 8018464:	2b01      	cmp	r3, #1
 8018466:	d1f9      	bne.n	801845c <icm20602_read+0x4c>
	rv += HAL_SPI_Receive(&hspi2, data, len, 1000);
 8018468:	88ba      	ldrh	r2, [r7, #4]
 801846a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801846e:	6839      	ldr	r1, [r7, #0]
 8018470:	480a      	ldr	r0, [pc, #40]	; (801849c <icm20602_read+0x8c>)
 8018472:	f7f2 ffdb 	bl	800b42c <HAL_SPI_Receive>
 8018476:	4603      	mov	r3, r0
 8018478:	461a      	mov	r2, r3
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	4413      	add	r3, r2
 801847e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_SET);
 8018480:	2201      	movs	r2, #1
 8018482:	f44f 7100 	mov.w	r1, #512	; 0x200
 8018486:	4804      	ldr	r0, [pc, #16]	; (8018498 <icm20602_read+0x88>)
 8018488:	f7ef f8b4 	bl	80075f4 <HAL_GPIO_WritePin>
	return rv;
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	b2db      	uxtb	r3, r3
}
 8018490:	4618      	mov	r0, r3
 8018492:	3710      	adds	r7, #16
 8018494:	46bd      	mov	sp, r7
 8018496:	bd80      	pop	{r7, pc}
 8018498:	58020400 	.word	0x58020400
 801849c:	24003e78 	.word	0x24003e78

080184a0 <icm20602_init>:
}

/***** Global Functions *****/

int8_t icm20602_init(void)
{
 80184a0:	b580      	push	{r7, lr}
 80184a2:	b082      	sub	sp, #8
 80184a4:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 80184a6:	2300      	movs	r3, #0
 80184a8:	71bb      	strb	r3, [r7, #6]
	int8_t r = 0;
 80184aa:	2300      	movs	r3, #0
 80184ac:	71fb      	strb	r3, [r7, #7]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = 0x80;
 80184ae:	2380      	movs	r3, #128	; 0x80
 80184b0:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_1, &tmp, 1);
 80184b2:	1dbb      	adds	r3, r7, #6
 80184b4:	2201      	movs	r2, #1
 80184b6:	4619      	mov	r1, r3
 80184b8:	206b      	movs	r0, #107	; 0x6b
 80184ba:	f7ff ff65 	bl	8018388 <icm20602_write>
 80184be:	4603      	mov	r3, r0
 80184c0:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 80184c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	f040 818e 	bne.w	80187e8 <icm20602_init+0x348>

	HAL_Delay(1000);
 80184cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80184d0:	f7ea fbd2 	bl	8002c78 <HAL_Delay>

	// verify we are able to read from the chip
	r = icm20602_read(REG_WHO_AM_I, &tmp, 1);
 80184d4:	1dbb      	adds	r3, r7, #6
 80184d6:	2201      	movs	r2, #1
 80184d8:	4619      	mov	r1, r3
 80184da:	2075      	movs	r0, #117	; 0x75
 80184dc:	f7ff ff98 	bl	8018410 <icm20602_read>
 80184e0:	4603      	mov	r3, r0
 80184e2:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 80184e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	f040 817f 	bne.w	80187ec <icm20602_init+0x34c>
	if (REG_WHO_AM_I_CONST != tmp) {
 80184ee:	79bb      	ldrb	r3, [r7, #6]
 80184f0:	2b12      	cmp	r3, #18
 80184f2:	d006      	beq.n	8018502 <icm20602_init+0x62>
		r = -1;
 80184f4:	23ff      	movs	r3, #255	; 0xff
 80184f6:	71fb      	strb	r3, [r7, #7]
		ON_ERROR_GOTO((0 == r), return_err);
 80184f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	f040 8177 	bne.w	80187f0 <icm20602_init+0x350>
	}

	/*Reset path*/
	tmp = 0x03;
 8018502:	2303      	movs	r3, #3
 8018504:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_SIGNAL_PATH_RESET, &tmp, 1);
 8018506:	1dbb      	adds	r3, r7, #6
 8018508:	2201      	movs	r2, #1
 801850a:	4619      	mov	r1, r3
 801850c:	2068      	movs	r0, #104	; 0x68
 801850e:	f7ff ff3b 	bl	8018388 <icm20602_write>
 8018512:	4603      	mov	r3, r0
 8018514:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 8018516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801851a:	2b00      	cmp	r3, #0
 801851c:	f040 816a 	bne.w	80187f4 <icm20602_init+0x354>

	// set clock to internal PLL
	tmp = 0x01;
 8018520:	2301      	movs	r3, #1
 8018522:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_1, &tmp, 1);
 8018524:	1dbb      	adds	r3, r7, #6
 8018526:	2201      	movs	r2, #1
 8018528:	4619      	mov	r1, r3
 801852a:	206b      	movs	r0, #107	; 0x6b
 801852c:	f7ff ff2c 	bl	8018388 <icm20602_write>
 8018530:	4603      	mov	r3, r0
 8018532:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 8018534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018538:	2b00      	cmp	r3, #0
 801853a:	f040 815d 	bne.w	80187f8 <icm20602_init+0x358>

	// place accel and gyro on standby
	tmp = 0x3F;
 801853e:	233f      	movs	r3, #63	; 0x3f
 8018540:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_2, &tmp, 1);
 8018542:	1dbb      	adds	r3, r7, #6
 8018544:	2201      	movs	r2, #1
 8018546:	4619      	mov	r1, r3
 8018548:	206c      	movs	r0, #108	; 0x6c
 801854a:	f7ff ff1d 	bl	8018388 <icm20602_write>
 801854e:	4603      	mov	r3, r0
 8018550:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 8018552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018556:	2b00      	cmp	r3, #0
 8018558:	f040 8150 	bne.w	80187fc <icm20602_init+0x35c>

	// disable fifo
	tmp = 0x01;
 801855c:	2301      	movs	r3, #1
 801855e:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_USER_CTRL, &tmp, 1);
 8018560:	1dbb      	adds	r3, r7, #6
 8018562:	2201      	movs	r2, #1
 8018564:	4619      	mov	r1, r3
 8018566:	206a      	movs	r0, #106	; 0x6a
 8018568:	f7ff ff0e 	bl	8018388 <icm20602_write>
 801856c:	4603      	mov	r3, r0
 801856e:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 8018570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018574:	2b00      	cmp	r3, #0
 8018576:	f040 8143 	bne.w	8018800 <icm20602_init+0x360>

	// disable chip I2C communications
	tmp = 0x40;
 801857a:	2340      	movs	r3, #64	; 0x40
 801857c:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_I2C_IF, &tmp, 1);
 801857e:	1dbb      	adds	r3, r7, #6
 8018580:	2201      	movs	r2, #1
 8018582:	4619      	mov	r1, r3
 8018584:	2070      	movs	r0, #112	; 0x70
 8018586:	f7ff feff 	bl	8018388 <icm20602_write>
 801858a:	4603      	mov	r3, r0
 801858c:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801858e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018592:	2b00      	cmp	r3, #0
 8018594:	f040 8136 	bne.w	8018804 <icm20602_init+0x364>

	if (dev.use_accel) {
 8018598:	4ba7      	ldr	r3, [pc, #668]	; (8018838 <icm20602_init+0x398>)
 801859a:	781b      	ldrb	r3, [r3, #0]
 801859c:	2b00      	cmp	r3, #0
 801859e:	d034      	beq.n	801860a <icm20602_init+0x16a>
		if (ICM20602_ACCEL_DLPF_BYPASS_1046_HZ == dev.accel_dlpf) {
 80185a0:	4ba5      	ldr	r3, [pc, #660]	; (8018838 <icm20602_init+0x398>)
 80185a2:	789b      	ldrb	r3, [r3, #2]
 80185a4:	2b08      	cmp	r3, #8
 80185a6:	d10e      	bne.n	80185c6 <icm20602_init+0x126>
			tmp = (1 << 3);
 80185a8:	2308      	movs	r3, #8
 80185aa:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_ACCEL_CONFIG_2, &tmp, 1);
 80185ac:	1dbb      	adds	r3, r7, #6
 80185ae:	2201      	movs	r2, #1
 80185b0:	4619      	mov	r1, r3
 80185b2:	201d      	movs	r0, #29
 80185b4:	f7ff fee8 	bl	8018388 <icm20602_write>
 80185b8:	4603      	mov	r3, r0
 80185ba:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 80185bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d010      	beq.n	80185e6 <icm20602_init+0x146>
 80185c4:	e131      	b.n	801882a <icm20602_init+0x38a>
		}
		else {
			tmp = dev.accel_dlpf;
 80185c6:	4b9c      	ldr	r3, [pc, #624]	; (8018838 <icm20602_init+0x398>)
 80185c8:	789b      	ldrb	r3, [r3, #2]
 80185ca:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_ACCEL_CONFIG_2, &tmp, 1);
 80185cc:	1dbb      	adds	r3, r7, #6
 80185ce:	2201      	movs	r2, #1
 80185d0:	4619      	mov	r1, r3
 80185d2:	201d      	movs	r0, #29
 80185d4:	f7ff fed8 	bl	8018388 <icm20602_write>
 80185d8:	4603      	mov	r3, r0
 80185da:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 80185dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	f040 8111 	bne.w	8018808 <icm20602_init+0x368>
		}

		tmp = (dev.accel_g) << 2;
 80185e6:	4b94      	ldr	r3, [pc, #592]	; (8018838 <icm20602_init+0x398>)
 80185e8:	78db      	ldrb	r3, [r3, #3]
 80185ea:	009b      	lsls	r3, r3, #2
 80185ec:	b2db      	uxtb	r3, r3
 80185ee:	71bb      	strb	r3, [r7, #6]
		r =  icm20602_write(REG_ACCEL_CONFIG, &tmp, 1);
 80185f0:	1dbb      	adds	r3, r7, #6
 80185f2:	2201      	movs	r2, #1
 80185f4:	4619      	mov	r1, r3
 80185f6:	201c      	movs	r0, #28
 80185f8:	f7ff fec6 	bl	8018388 <icm20602_write>
 80185fc:	4603      	mov	r3, r0
 80185fe:	71fb      	strb	r3, [r7, #7]
		ON_ERROR_GOTO((0 == r), return_err);
 8018600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018604:	2b00      	cmp	r3, #0
 8018606:	f040 8101 	bne.w	801880c <icm20602_init+0x36c>
	}

	if (dev.use_gyro) {
 801860a:	4b8b      	ldr	r3, [pc, #556]	; (8018838 <icm20602_init+0x398>)
 801860c:	791b      	ldrb	r3, [r3, #4]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d073      	beq.n	80186fa <icm20602_init+0x25a>
		if (ICM20602_GYRO_DLPF_BYPASS_3281_HZ == dev.gyro_dlpf) {
 8018612:	4b89      	ldr	r3, [pc, #548]	; (8018838 <icm20602_init+0x398>)
 8018614:	799b      	ldrb	r3, [r3, #6]
 8018616:	2b08      	cmp	r3, #8
 8018618:	d124      	bne.n	8018664 <icm20602_init+0x1c4>
			// bypass dpf and set dps
			tmp = 0x00;
 801861a:	2300      	movs	r3, #0
 801861c:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801861e:	1dbb      	adds	r3, r7, #6
 8018620:	2201      	movs	r2, #1
 8018622:	4619      	mov	r1, r3
 8018624:	201a      	movs	r0, #26
 8018626:	f7ff feaf 	bl	8018388 <icm20602_write>
 801862a:	4603      	mov	r3, r0
 801862c:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801862e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018632:	2b00      	cmp	r3, #0
 8018634:	f040 80ec 	bne.w	8018810 <icm20602_init+0x370>

			tmp = (dev.gyro_dps << 3) | 0x02; // see table page 37 of datasheet
 8018638:	4b7f      	ldr	r3, [pc, #508]	; (8018838 <icm20602_init+0x398>)
 801863a:	79db      	ldrb	r3, [r3, #7]
 801863c:	00db      	lsls	r3, r3, #3
 801863e:	b25b      	sxtb	r3, r3
 8018640:	f043 0302 	orr.w	r3, r3, #2
 8018644:	b25b      	sxtb	r3, r3
 8018646:	b2db      	uxtb	r3, r3
 8018648:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801864a:	1dbb      	adds	r3, r7, #6
 801864c:	2201      	movs	r2, #1
 801864e:	4619      	mov	r1, r3
 8018650:	201b      	movs	r0, #27
 8018652:	f7ff fe99 	bl	8018388 <icm20602_write>
 8018656:	4603      	mov	r3, r0
 8018658:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801865a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d04b      	beq.n	80186fa <icm20602_init+0x25a>
 8018662:	e0e2      	b.n	801882a <icm20602_init+0x38a>
		}
		else if (ICM20602_GYRO_DLPF_BYPASS_8173_HZ == dev.gyro_dlpf) {
 8018664:	4b74      	ldr	r3, [pc, #464]	; (8018838 <icm20602_init+0x398>)
 8018666:	799b      	ldrb	r3, [r3, #6]
 8018668:	2b09      	cmp	r3, #9
 801866a:	d124      	bne.n	80186b6 <icm20602_init+0x216>
			// bypass dpf and set dps
			tmp = 0x00;
 801866c:	2300      	movs	r3, #0
 801866e:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 8018670:	1dbb      	adds	r3, r7, #6
 8018672:	2201      	movs	r2, #1
 8018674:	4619      	mov	r1, r3
 8018676:	201a      	movs	r0, #26
 8018678:	f7ff fe86 	bl	8018388 <icm20602_write>
 801867c:	4603      	mov	r3, r0
 801867e:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 8018680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018684:	2b00      	cmp	r3, #0
 8018686:	f040 80c5 	bne.w	8018814 <icm20602_init+0x374>

			tmp = (dev.gyro_dps << 3) | 0x01; // see table page 37 of datasheet
 801868a:	4b6b      	ldr	r3, [pc, #428]	; (8018838 <icm20602_init+0x398>)
 801868c:	79db      	ldrb	r3, [r3, #7]
 801868e:	00db      	lsls	r3, r3, #3
 8018690:	b25b      	sxtb	r3, r3
 8018692:	f043 0301 	orr.w	r3, r3, #1
 8018696:	b25b      	sxtb	r3, r3
 8018698:	b2db      	uxtb	r3, r3
 801869a:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801869c:	1dbb      	adds	r3, r7, #6
 801869e:	2201      	movs	r2, #1
 80186a0:	4619      	mov	r1, r3
 80186a2:	201b      	movs	r0, #27
 80186a4:	f7ff fe70 	bl	8018388 <icm20602_write>
 80186a8:	4603      	mov	r3, r0
 80186aa:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 80186ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d022      	beq.n	80186fa <icm20602_init+0x25a>
 80186b4:	e0b9      	b.n	801882a <icm20602_init+0x38a>
		}
		else {
			// configure dpf and set dps
			tmp = dev.gyro_dlpf;
 80186b6:	4b60      	ldr	r3, [pc, #384]	; (8018838 <icm20602_init+0x398>)
 80186b8:	799b      	ldrb	r3, [r3, #6]
 80186ba:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 80186bc:	1dbb      	adds	r3, r7, #6
 80186be:	2201      	movs	r2, #1
 80186c0:	4619      	mov	r1, r3
 80186c2:	201a      	movs	r0, #26
 80186c4:	f7ff fe60 	bl	8018388 <icm20602_write>
 80186c8:	4603      	mov	r3, r0
 80186ca:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 80186cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	f040 80a1 	bne.w	8018818 <icm20602_init+0x378>

			tmp = dev.gyro_dps << 3;
 80186d6:	4b58      	ldr	r3, [pc, #352]	; (8018838 <icm20602_init+0x398>)
 80186d8:	79db      	ldrb	r3, [r3, #7]
 80186da:	00db      	lsls	r3, r3, #3
 80186dc:	b2db      	uxtb	r3, r3
 80186de:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 80186e0:	1dbb      	adds	r3, r7, #6
 80186e2:	2201      	movs	r2, #1
 80186e4:	4619      	mov	r1, r3
 80186e6:	201b      	movs	r0, #27
 80186e8:	f7ff fe4e 	bl	8018388 <icm20602_write>
 80186ec:	4603      	mov	r3, r0
 80186ee:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 80186f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	f040 8091 	bne.w	801881c <icm20602_init+0x37c>
		}
	}

	/*Disale low power mode*/
	tmp = 0x00;
 80186fa:	2300      	movs	r3, #0
 80186fc:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_LP_MODE_CFG, &tmp, 1);
 80186fe:	1dbb      	adds	r3, r7, #6
 8018700:	2201      	movs	r2, #1
 8018702:	4619      	mov	r1, r3
 8018704:	201e      	movs	r0, #30
 8018706:	f7ff fe3f 	bl	8018388 <icm20602_write>
 801870a:	4603      	mov	r3, r0
 801870c:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801870e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018712:	2b00      	cmp	r3, #0
 8018714:	f040 8084 	bne.w	8018820 <icm20602_init+0x380>

	// enable FIFO if requested
	tmp = ((dev.use_accel) && (dev.accel_fifo)) ? 0x08 : 0x00;
 8018718:	4b47      	ldr	r3, [pc, #284]	; (8018838 <icm20602_init+0x398>)
 801871a:	781b      	ldrb	r3, [r3, #0]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d005      	beq.n	801872c <icm20602_init+0x28c>
 8018720:	4b45      	ldr	r3, [pc, #276]	; (8018838 <icm20602_init+0x398>)
 8018722:	785b      	ldrb	r3, [r3, #1]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d001      	beq.n	801872c <icm20602_init+0x28c>
 8018728:	2308      	movs	r3, #8
 801872a:	e000      	b.n	801872e <icm20602_init+0x28e>
 801872c:	2300      	movs	r3, #0
 801872e:	71bb      	strb	r3, [r7, #6]
	tmp |= ((dev.use_gyro) && (dev.gyro_fifo)) ? 0x10 : 0x00;
 8018730:	4b41      	ldr	r3, [pc, #260]	; (8018838 <icm20602_init+0x398>)
 8018732:	791b      	ldrb	r3, [r3, #4]
 8018734:	2b00      	cmp	r3, #0
 8018736:	d005      	beq.n	8018744 <icm20602_init+0x2a4>
 8018738:	4b3f      	ldr	r3, [pc, #252]	; (8018838 <icm20602_init+0x398>)
 801873a:	795b      	ldrb	r3, [r3, #5]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d001      	beq.n	8018744 <icm20602_init+0x2a4>
 8018740:	2210      	movs	r2, #16
 8018742:	e000      	b.n	8018746 <icm20602_init+0x2a6>
 8018744:	2200      	movs	r2, #0
 8018746:	79bb      	ldrb	r3, [r7, #6]
 8018748:	b25b      	sxtb	r3, r3
 801874a:	4313      	orrs	r3, r2
 801874c:	b25b      	sxtb	r3, r3
 801874e:	b2db      	uxtb	r3, r3
 8018750:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_FIFO_EN, &tmp, 1);
 8018752:	1dbb      	adds	r3, r7, #6
 8018754:	2201      	movs	r2, #1
 8018756:	4619      	mov	r1, r3
 8018758:	2023      	movs	r0, #35	; 0x23
 801875a:	f7ff fe15 	bl	8018388 <icm20602_write>
 801875e:	4603      	mov	r3, r0
 8018760:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 8018762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d15c      	bne.n	8018824 <icm20602_init+0x384>

	// configure sample rate divider (TODO: is this gyro only?)
	// note: SAMPLE_RATE = INTERNAL_SAMPLE_RATE / (1 + SMPLRT_DIV)
	tmp = (0 != dev.sample_rate_div) ? dev.sample_rate_div - 1 : 1;
 801876a:	4b33      	ldr	r3, [pc, #204]	; (8018838 <icm20602_init+0x398>)
 801876c:	7a1b      	ldrb	r3, [r3, #8]
 801876e:	2b00      	cmp	r3, #0
 8018770:	d004      	beq.n	801877c <icm20602_init+0x2dc>
 8018772:	4b31      	ldr	r3, [pc, #196]	; (8018838 <icm20602_init+0x398>)
 8018774:	7a1b      	ldrb	r3, [r3, #8]
 8018776:	3b01      	subs	r3, #1
 8018778:	b2db      	uxtb	r3, r3
 801877a:	e000      	b.n	801877e <icm20602_init+0x2de>
 801877c:	2301      	movs	r3, #1
 801877e:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_SMPLRT_DIV, &tmp, 1);
 8018780:	1dbb      	adds	r3, r7, #6
 8018782:	2201      	movs	r2, #1
 8018784:	4619      	mov	r1, r3
 8018786:	2019      	movs	r0, #25
 8018788:	f7ff fdfe 	bl	8018388 <icm20602_write>
 801878c:	4603      	mov	r3, r0
 801878e:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 8018790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d147      	bne.n	8018828 <icm20602_init+0x388>

	tmp = 0;
 8018798:	2300      	movs	r3, #0
 801879a:	71bb      	strb	r3, [r7, #6]
	tmp |= (dev.use_gyro) ? 0 : 0x07; // 0 - on, 1 - disabled
 801879c:	4b26      	ldr	r3, [pc, #152]	; (8018838 <icm20602_init+0x398>)
 801879e:	791b      	ldrb	r3, [r3, #4]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d001      	beq.n	80187a8 <icm20602_init+0x308>
 80187a4:	2200      	movs	r2, #0
 80187a6:	e000      	b.n	80187aa <icm20602_init+0x30a>
 80187a8:	2207      	movs	r2, #7
 80187aa:	79bb      	ldrb	r3, [r7, #6]
 80187ac:	b25b      	sxtb	r3, r3
 80187ae:	4313      	orrs	r3, r2
 80187b0:	b25b      	sxtb	r3, r3
 80187b2:	b2db      	uxtb	r3, r3
 80187b4:	71bb      	strb	r3, [r7, #6]
	tmp |= (dev.use_accel) ? 0 : 0x38; // 0 - on, 1 - disabled
 80187b6:	4b20      	ldr	r3, [pc, #128]	; (8018838 <icm20602_init+0x398>)
 80187b8:	781b      	ldrb	r3, [r3, #0]
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d001      	beq.n	80187c2 <icm20602_init+0x322>
 80187be:	2200      	movs	r2, #0
 80187c0:	e000      	b.n	80187c4 <icm20602_init+0x324>
 80187c2:	2238      	movs	r2, #56	; 0x38
 80187c4:	79bb      	ldrb	r3, [r7, #6]
 80187c6:	b25b      	sxtb	r3, r3
 80187c8:	4313      	orrs	r3, r2
 80187ca:	b25b      	sxtb	r3, r3
 80187cc:	b2db      	uxtb	r3, r3
 80187ce:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_PWR_MGMT_2, &tmp, 1);
 80187d0:	1dbb      	adds	r3, r7, #6
 80187d2:	2201      	movs	r2, #1
 80187d4:	4619      	mov	r1, r3
 80187d6:	206c      	movs	r0, #108	; 0x6c
 80187d8:	f7ff fdd6 	bl	8018388 <icm20602_write>
 80187dc:	4603      	mov	r3, r0
 80187de:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 80187e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80187e4:	2b00      	cmp	r3, #0

	return_err:
 80187e6:	e020      	b.n	801882a <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 80187e8:	bf00      	nop
 80187ea:	e01e      	b.n	801882a <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 80187ec:	bf00      	nop
 80187ee:	e01c      	b.n	801882a <icm20602_init+0x38a>
		ON_ERROR_GOTO((0 == r), return_err);
 80187f0:	bf00      	nop
 80187f2:	e01a      	b.n	801882a <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 80187f4:	bf00      	nop
 80187f6:	e018      	b.n	801882a <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 80187f8:	bf00      	nop
 80187fa:	e016      	b.n	801882a <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 80187fc:	bf00      	nop
 80187fe:	e014      	b.n	801882a <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 8018800:	bf00      	nop
 8018802:	e012      	b.n	801882a <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 8018804:	bf00      	nop
 8018806:	e010      	b.n	801882a <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 8018808:	bf00      	nop
 801880a:	e00e      	b.n	801882a <icm20602_init+0x38a>
		ON_ERROR_GOTO((0 == r), return_err);
 801880c:	bf00      	nop
 801880e:	e00c      	b.n	801882a <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 8018810:	bf00      	nop
 8018812:	e00a      	b.n	801882a <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 8018814:	bf00      	nop
 8018816:	e008      	b.n	801882a <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 8018818:	bf00      	nop
 801881a:	e006      	b.n	801882a <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801881c:	bf00      	nop
 801881e:	e004      	b.n	801882a <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 8018820:	bf00      	nop
 8018822:	e002      	b.n	801882a <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 8018824:	bf00      	nop
 8018826:	e000      	b.n	801882a <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 8018828:	bf00      	nop

	return r;
 801882a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801882e:	4618      	mov	r0, r3
 8018830:	3708      	adds	r7, #8
 8018832:	46bd      	mov	sp, r7
 8018834:	bd80      	pop	{r7, pc}
 8018836:	bf00      	nop
 8018838:	24000430 	.word	0x24000430

0801883c <icm20602_read_data_raw>:
}

int8_t icm20602_read_data_raw(int16_t * p_ax,
		int16_t * p_ay, int16_t * p_az, int16_t * p_gx, int16_t * p_gy,
		int16_t * p_gz, int16_t * p_t)
{
 801883c:	b580      	push	{r7, lr}
 801883e:	b088      	sub	sp, #32
 8018840:	af00      	add	r7, sp, #0
 8018842:	60f8      	str	r0, [r7, #12]
 8018844:	60b9      	str	r1, [r7, #8]
 8018846:	607a      	str	r2, [r7, #4]
 8018848:	603b      	str	r3, [r7, #0]
	uint8_t buf[14] = {0};
 801884a:	2300      	movs	r3, #0
 801884c:	613b      	str	r3, [r7, #16]
 801884e:	f107 0314 	add.w	r3, r7, #20
 8018852:	2200      	movs	r2, #0
 8018854:	601a      	str	r2, [r3, #0]
 8018856:	605a      	str	r2, [r3, #4]
 8018858:	811a      	strh	r2, [r3, #8]
	int8_t r = 0;
 801885a:	2300      	movs	r3, #0
 801885c:	77fb      	strb	r3, [r7, #31]

	r = icm20602_read(REG_ACCEL_XOUT_H, buf, 14);
 801885e:	f107 0310 	add.w	r3, r7, #16
 8018862:	220e      	movs	r2, #14
 8018864:	4619      	mov	r1, r3
 8018866:	203b      	movs	r0, #59	; 0x3b
 8018868:	f7ff fdd2 	bl	8018410 <icm20602_read>
 801886c:	4603      	mov	r3, r0
 801886e:	77fb      	strb	r3, [r7, #31]
	if (0 == r) {
 8018870:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8018874:	2b00      	cmp	r3, #0
 8018876:	f040 808c 	bne.w	8018992 <icm20602_read_data_raw+0x156>
		UINT8_TO_INT16(*p_ax, buf[0], buf[1]);
 801887a:	7c3b      	ldrb	r3, [r7, #16]
 801887c:	b21a      	sxth	r2, r3
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	801a      	strh	r2, [r3, #0]
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018888:	021b      	lsls	r3, r3, #8
 801888a:	b21a      	sxth	r2, r3
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	801a      	strh	r2, [r3, #0]
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018896:	7c7b      	ldrb	r3, [r7, #17]
 8018898:	b21b      	sxth	r3, r3
 801889a:	4313      	orrs	r3, r2
 801889c:	b21a      	sxth	r2, r3
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_ay, buf[2], buf[3]);
 80188a2:	7cbb      	ldrb	r3, [r7, #18]
 80188a4:	b21a      	sxth	r2, r3
 80188a6:	68bb      	ldr	r3, [r7, #8]
 80188a8:	801a      	strh	r2, [r3, #0]
 80188aa:	68bb      	ldr	r3, [r7, #8]
 80188ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80188b0:	021b      	lsls	r3, r3, #8
 80188b2:	b21a      	sxth	r2, r3
 80188b4:	68bb      	ldr	r3, [r7, #8]
 80188b6:	801a      	strh	r2, [r3, #0]
 80188b8:	68bb      	ldr	r3, [r7, #8]
 80188ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80188be:	7cfb      	ldrb	r3, [r7, #19]
 80188c0:	b21b      	sxth	r3, r3
 80188c2:	4313      	orrs	r3, r2
 80188c4:	b21a      	sxth	r2, r3
 80188c6:	68bb      	ldr	r3, [r7, #8]
 80188c8:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_az, buf[4], buf[5]);
 80188ca:	7d3b      	ldrb	r3, [r7, #20]
 80188cc:	b21a      	sxth	r2, r3
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	801a      	strh	r2, [r3, #0]
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80188d8:	021b      	lsls	r3, r3, #8
 80188da:	b21a      	sxth	r2, r3
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	801a      	strh	r2, [r3, #0]
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80188e6:	7d7b      	ldrb	r3, [r7, #21]
 80188e8:	b21b      	sxth	r3, r3
 80188ea:	4313      	orrs	r3, r2
 80188ec:	b21a      	sxth	r2, r3
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_t, buf[6], buf[7]);
 80188f2:	7dbb      	ldrb	r3, [r7, #22]
 80188f4:	b21a      	sxth	r2, r3
 80188f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188f8:	801a      	strh	r2, [r3, #0]
 80188fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018900:	021b      	lsls	r3, r3, #8
 8018902:	b21a      	sxth	r2, r3
 8018904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018906:	801a      	strh	r2, [r3, #0]
 8018908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801890a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801890e:	7dfb      	ldrb	r3, [r7, #23]
 8018910:	b21b      	sxth	r3, r3
 8018912:	4313      	orrs	r3, r2
 8018914:	b21a      	sxth	r2, r3
 8018916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018918:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gx, buf[8], buf[9]);
 801891a:	7e3b      	ldrb	r3, [r7, #24]
 801891c:	b21a      	sxth	r2, r3
 801891e:	683b      	ldr	r3, [r7, #0]
 8018920:	801a      	strh	r2, [r3, #0]
 8018922:	683b      	ldr	r3, [r7, #0]
 8018924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018928:	021b      	lsls	r3, r3, #8
 801892a:	b21a      	sxth	r2, r3
 801892c:	683b      	ldr	r3, [r7, #0]
 801892e:	801a      	strh	r2, [r3, #0]
 8018930:	683b      	ldr	r3, [r7, #0]
 8018932:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018936:	7e7b      	ldrb	r3, [r7, #25]
 8018938:	b21b      	sxth	r3, r3
 801893a:	4313      	orrs	r3, r2
 801893c:	b21a      	sxth	r2, r3
 801893e:	683b      	ldr	r3, [r7, #0]
 8018940:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gy, buf[10], buf[11]);
 8018942:	7ebb      	ldrb	r3, [r7, #26]
 8018944:	b21a      	sxth	r2, r3
 8018946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018948:	801a      	strh	r2, [r3, #0]
 801894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801894c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018950:	021b      	lsls	r3, r3, #8
 8018952:	b21a      	sxth	r2, r3
 8018954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018956:	801a      	strh	r2, [r3, #0]
 8018958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801895a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801895e:	7efb      	ldrb	r3, [r7, #27]
 8018960:	b21b      	sxth	r3, r3
 8018962:	4313      	orrs	r3, r2
 8018964:	b21a      	sxth	r2, r3
 8018966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018968:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gz, buf[12], buf[13]);
 801896a:	7f3b      	ldrb	r3, [r7, #28]
 801896c:	b21a      	sxth	r2, r3
 801896e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018970:	801a      	strh	r2, [r3, #0]
 8018972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018978:	021b      	lsls	r3, r3, #8
 801897a:	b21a      	sxth	r2, r3
 801897c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801897e:	801a      	strh	r2, [r3, #0]
 8018980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018982:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018986:	7f7b      	ldrb	r3, [r7, #29]
 8018988:	b21b      	sxth	r3, r3
 801898a:	4313      	orrs	r3, r2
 801898c:	b21a      	sxth	r2, r3
 801898e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018990:	801a      	strh	r2, [r3, #0]
	}

	return r;
 8018992:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018996:	4618      	mov	r0, r3
 8018998:	3720      	adds	r7, #32
 801899a:	46bd      	mov	sp, r7
 801899c:	bd80      	pop	{r7, pc}
	...

080189a0 <pcm5102_Init>:
/* Private function prototypes -----------------------------------------------*/

/* Private user code ---------------------------------------------------------*/

void pcm5102_Init(void)
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_FLT_GPIO_Port, DAC_FLT_Pin, GPIO_PIN_RESET); //Filterselect: Normallatency(Low) / Lowlatency(High)
 80189a4:	2200      	movs	r2, #0
 80189a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80189aa:	480a      	ldr	r0, [pc, #40]	; (80189d4 <pcm5102_Init+0x34>)
 80189ac:	f7ee fe22 	bl	80075f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, GPIO_PIN_RESET); //De-emphasiscontrol for 44.1kHz sampling rate: Off(Low) / On(High)
 80189b0:	2200      	movs	r2, #0
 80189b2:	2108      	movs	r1, #8
 80189b4:	4808      	ldr	r0, [pc, #32]	; (80189d8 <pcm5102_Init+0x38>)
 80189b6:	f7ee fe1d 	bl	80075f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, GPIO_PIN_SET); //Soft mute control: Softmute(Low) / soft un-mute(High)
 80189ba:	2201      	movs	r2, #1
 80189bc:	2104      	movs	r1, #4
 80189be:	4805      	ldr	r0, [pc, #20]	; (80189d4 <pcm5102_Init+0x34>)
 80189c0:	f7ee fe18 	bl	80075f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET); //Audio format selection: I2S(Low)/ Left justified(High)
 80189c4:	2200      	movs	r2, #0
 80189c6:	2140      	movs	r1, #64	; 0x40
 80189c8:	4804      	ldr	r0, [pc, #16]	; (80189dc <pcm5102_Init+0x3c>)
 80189ca:	f7ee fe13 	bl	80075f4 <HAL_GPIO_WritePin>
}
 80189ce:	bf00      	nop
 80189d0:	bd80      	pop	{r7, pc}
 80189d2:	bf00      	nop
 80189d4:	58020800 	.word	0x58020800
 80189d8:	58021c00 	.word	0x58021c00
 80189dc:	58021400 	.word	0x58021400

080189e0 <Audio_Player_Play>:

void Audio_Player_Play(uint8_t* pBuffer, uint32_t Size)
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b082      	sub	sp, #8
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	6078      	str	r0, [r7, #4]
 80189e8:	6039      	str	r1, [r7, #0]
	if(Size > 0xFFFF) {
 80189ea:	683b      	ldr	r3, [r7, #0]
 80189ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80189f0:	d306      	bcc.n	8018a00 <Audio_Player_Play+0x20>
		Size = 0xFFFF;
 80189f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80189f6:	603b      	str	r3, [r7, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80189f8:	2140      	movs	r1, #64	; 0x40
 80189fa:	4807      	ldr	r0, [pc, #28]	; (8018a18 <Audio_Player_Play+0x38>)
 80189fc:	f7ee fe13 	bl	8007626 <HAL_GPIO_TogglePin>
	}
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, Size);
 8018a00:	683b      	ldr	r3, [r7, #0]
 8018a02:	b29b      	uxth	r3, r3
 8018a04:	461a      	mov	r2, r3
 8018a06:	6879      	ldr	r1, [r7, #4]
 8018a08:	4804      	ldr	r0, [pc, #16]	; (8018a1c <Audio_Player_Play+0x3c>)
 8018a0a:	f7f2 f87b 	bl	800ab04 <HAL_SAI_Transmit_DMA>
//	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
}
 8018a0e:	bf00      	nop
 8018a10:	3708      	adds	r7, #8
 8018a12:	46bd      	mov	sp, r7
 8018a14:	bd80      	pop	{r7, pc}
 8018a16:	bf00      	nop
 8018a18:	58021c00 	.word	0x58021c00
 8018a1c:	24003de0 	.word	0x24003de0

08018a20 <HAL_SAI_TxHalfCpltCallback>:
//void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
//{
//	HalfTransfer_CallBack_FS();
//}
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8018a20:	b480      	push	{r7}
 8018a22:	b083      	sub	sp, #12
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	6078      	str	r0, [r7, #4]
	if(hsai_BlockA1->Instance==SAI1_Block_A)
	{

	}
}
 8018a28:	bf00      	nop
 8018a2a:	370c      	adds	r7, #12
 8018a2c:	46bd      	mov	sp, r7
 8018a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a32:	4770      	bx	lr

08018a34 <HAL_SAI_TxCpltCallback>:
//{
//	TransferComplete_CallBack_FS();
//}

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8018a34:	b480      	push	{r7}
 8018a36:	b083      	sub	sp, #12
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	6078      	str	r0, [r7, #4]
	if(hsai_BlockA1->Instance==SAI1_Block_A)
	{

	}
}
 8018a3c:	bf00      	nop
 8018a3e:	370c      	adds	r7, #12
 8018a40:	46bd      	mov	sp, r7
 8018a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a46:	4770      	bx	lr

08018a48 <ssd1362_Reset>:
void ssd1362_writeCmd(uint8_t reg);
void ssd1362_writeData(uint8_t data);

/* Private user code ---------------------------------------------------------*/

void ssd1362_Reset(void) {
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	af00      	add	r7, sp, #0
    // Reset the OLED
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_RESET);
 8018a4c:	2200      	movs	r2, #0
 8018a4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018a52:	4808      	ldr	r0, [pc, #32]	; (8018a74 <ssd1362_Reset+0x2c>)
 8018a54:	f7ee fdce 	bl	80075f4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8018a58:	200a      	movs	r0, #10
 8018a5a:	f7ea f90d 	bl	8002c78 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_SET);
 8018a5e:	2201      	movs	r2, #1
 8018a60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018a64:	4803      	ldr	r0, [pc, #12]	; (8018a74 <ssd1362_Reset+0x2c>)
 8018a66:	f7ee fdc5 	bl	80075f4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8018a6a:	200a      	movs	r0, #10
 8018a6c:	f7ea f904 	bl	8002c78 <HAL_Delay>
}
 8018a70:	bf00      	nop
 8018a72:	bd80      	pop	{r7, pc}
 8018a74:	58020400 	.word	0x58020400

08018a78 <ssd1362_writeCmd>:

//Writes a command byte to the driver
void ssd1362_writeCmd(uint8_t reg)
{
 8018a78:	b580      	push	{r7, lr}
 8018a7a:	b082      	sub	sp, #8
 8018a7c:	af00      	add	r7, sp, #0
 8018a7e:	4603      	mov	r3, r0
 8018a80:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_REG, (uint8_t *)&reg, 1);
 8018a82:	1dfa      	adds	r2, r7, #7
 8018a84:	2301      	movs	r3, #1
 8018a86:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8018a8a:	4803      	ldr	r0, [pc, #12]	; (8018a98 <ssd1362_writeCmd+0x20>)
 8018a8c:	f7f3 faf4 	bl	800c078 <HAL_SRAM_Write_8b>
}
 8018a90:	bf00      	nop
 8018a92:	3708      	adds	r7, #8
 8018a94:	46bd      	mov	sp, r7
 8018a96:	bd80      	pop	{r7, pc}
 8018a98:	24003d08 	.word	0x24003d08

08018a9c <ssd1362_writeData>:

//Writes 1 byte to the display's memory
void ssd1362_writeData(uint8_t data)
{
 8018a9c:	b580      	push	{r7, lr}
 8018a9e:	b082      	sub	sp, #8
 8018aa0:	af00      	add	r7, sp, #0
 8018aa2:	4603      	mov	r3, r0
 8018aa4:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_RAM, (uint8_t *)&data, 1);
 8018aa6:	1dfa      	adds	r2, r7, #7
 8018aa8:	2301      	movs	r3, #1
 8018aaa:	4904      	ldr	r1, [pc, #16]	; (8018abc <ssd1362_writeData+0x20>)
 8018aac:	4804      	ldr	r0, [pc, #16]	; (8018ac0 <ssd1362_writeData+0x24>)
 8018aae:	f7f3 fae3 	bl	800c078 <HAL_SRAM_Write_8b>
}
 8018ab2:	bf00      	nop
 8018ab4:	3708      	adds	r7, #8
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	bd80      	pop	{r7, pc}
 8018aba:	bf00      	nop
 8018abc:	c0000001 	.word	0xc0000001
 8018ac0:	24003d08 	.word	0x24003d08

08018ac4 <bitWrite>:

void bitWrite(uint8_t *x, uint8_t n, uint8_t value) {
 8018ac4:	b480      	push	{r7}
 8018ac6:	b083      	sub	sp, #12
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	6078      	str	r0, [r7, #4]
 8018acc:	460b      	mov	r3, r1
 8018ace:	70fb      	strb	r3, [r7, #3]
 8018ad0:	4613      	mov	r3, r2
 8018ad2:	70bb      	strb	r3, [r7, #2]
   if (value)
 8018ad4:	78bb      	ldrb	r3, [r7, #2]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d00d      	beq.n	8018af6 <bitWrite+0x32>
      *x |= (1 << n);
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	781b      	ldrb	r3, [r3, #0]
 8018ade:	b25a      	sxtb	r2, r3
 8018ae0:	78fb      	ldrb	r3, [r7, #3]
 8018ae2:	2101      	movs	r1, #1
 8018ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8018ae8:	b25b      	sxtb	r3, r3
 8018aea:	4313      	orrs	r3, r2
 8018aec:	b25b      	sxtb	r3, r3
 8018aee:	b2da      	uxtb	r2, r3
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	701a      	strb	r2, [r3, #0]
   else
      *x &= ~(1 << n);
}
 8018af4:	e00e      	b.n	8018b14 <bitWrite+0x50>
      *x &= ~(1 << n);
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	781b      	ldrb	r3, [r3, #0]
 8018afa:	b25a      	sxtb	r2, r3
 8018afc:	78fb      	ldrb	r3, [r7, #3]
 8018afe:	2101      	movs	r1, #1
 8018b00:	fa01 f303 	lsl.w	r3, r1, r3
 8018b04:	b25b      	sxtb	r3, r3
 8018b06:	43db      	mvns	r3, r3
 8018b08:	b25b      	sxtb	r3, r3
 8018b0a:	4013      	ands	r3, r2
 8018b0c:	b25b      	sxtb	r3, r3
 8018b0e:	b2da      	uxtb	r2, r3
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	701a      	strb	r2, [r3, #0]
}
 8018b14:	bf00      	nop
 8018b16:	370c      	adds	r7, #12
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b1e:	4770      	bx	lr

08018b20 <bitRead>:

char bitRead(uint8_t *x, uint8_t n) {
 8018b20:	b480      	push	{r7}
 8018b22:	b083      	sub	sp, #12
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	6078      	str	r0, [r7, #4]
 8018b28:	460b      	mov	r3, r1
 8018b2a:	70fb      	strb	r3, [r7, #3]
   return (*x & (1 << n)) ? 1 : 0;
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	781b      	ldrb	r3, [r3, #0]
 8018b30:	461a      	mov	r2, r3
 8018b32:	78fb      	ldrb	r3, [r7, #3]
 8018b34:	fa42 f303 	asr.w	r3, r2, r3
 8018b38:	b2db      	uxtb	r3, r3
 8018b3a:	f003 0301 	and.w	r3, r3, #1
 8018b3e:	b2db      	uxtb	r3, r3
}
 8018b40:	4618      	mov	r0, r3
 8018b42:	370c      	adds	r7, #12
 8018b44:	46bd      	mov	sp, r7
 8018b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4a:	4770      	bx	lr

08018b4c <ssd1362_setWriteZone>:

//defines a rectangular area of memory which the driver will itterate through. This function takes memory locations, meaning a 64x256 space
void ssd1362_setWriteZone(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8018b4c:	b590      	push	{r4, r7, lr}
 8018b4e:	b083      	sub	sp, #12
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	4604      	mov	r4, r0
 8018b54:	4608      	mov	r0, r1
 8018b56:	4611      	mov	r1, r2
 8018b58:	461a      	mov	r2, r3
 8018b5a:	4623      	mov	r3, r4
 8018b5c:	80fb      	strh	r3, [r7, #6]
 8018b5e:	4603      	mov	r3, r0
 8018b60:	80bb      	strh	r3, [r7, #4]
 8018b62:	460b      	mov	r3, r1
 8018b64:	807b      	strh	r3, [r7, #2]
 8018b66:	4613      	mov	r3, r2
 8018b68:	803b      	strh	r3, [r7, #0]
	ssd1362_writeCmd(0x15); //Set Column Address
 8018b6a:	2015      	movs	r0, #21
 8018b6c:	f7ff ff84 	bl	8018a78 <ssd1362_writeCmd>
	ssd1362_writeCmd(x1); //Beginning. Note that you must divide the column by 2, since 1 byte in memory is 2 pixels
 8018b70:	88fb      	ldrh	r3, [r7, #6]
 8018b72:	b2db      	uxtb	r3, r3
 8018b74:	4618      	mov	r0, r3
 8018b76:	f7ff ff7f 	bl	8018a78 <ssd1362_writeCmd>
	ssd1362_writeCmd(x2); //End
 8018b7a:	887b      	ldrh	r3, [r7, #2]
 8018b7c:	b2db      	uxtb	r3, r3
 8018b7e:	4618      	mov	r0, r3
 8018b80:	f7ff ff7a 	bl	8018a78 <ssd1362_writeCmd>

	ssd1362_writeCmd(0x75); //Set Row Address
 8018b84:	2075      	movs	r0, #117	; 0x75
 8018b86:	f7ff ff77 	bl	8018a78 <ssd1362_writeCmd>
	ssd1362_writeCmd(y1); //Beginning
 8018b8a:	88bb      	ldrh	r3, [r7, #4]
 8018b8c:	b2db      	uxtb	r3, r3
 8018b8e:	4618      	mov	r0, r3
 8018b90:	f7ff ff72 	bl	8018a78 <ssd1362_writeCmd>
	ssd1362_writeCmd(y2); //End
 8018b94:	883b      	ldrh	r3, [r7, #0]
 8018b96:	b2db      	uxtb	r3, r3
 8018b98:	4618      	mov	r0, r3
 8018b9a:	f7ff ff6d 	bl	8018a78 <ssd1362_writeCmd>
}
 8018b9e:	bf00      	nop
 8018ba0:	370c      	adds	r7, #12
 8018ba2:	46bd      	mov	sp, r7
 8018ba4:	bd90      	pop	{r4, r7, pc}

08018ba6 <ssd1362_coordsToAddress>:

//Converts a pixel location to a linear memory address
uint16_t ssd1362_coordsToAddress(uint16_t x, uint16_t y)
{
 8018ba6:	b480      	push	{r7}
 8018ba8:	b083      	sub	sp, #12
 8018baa:	af00      	add	r7, sp, #0
 8018bac:	4603      	mov	r3, r0
 8018bae:	460a      	mov	r2, r1
 8018bb0:	80fb      	strh	r3, [r7, #6]
 8018bb2:	4613      	mov	r3, r2
 8018bb4:	80bb      	strh	r3, [r7, #4]
	return (x/2)+(y*128);
 8018bb6:	88fb      	ldrh	r3, [r7, #6]
 8018bb8:	085b      	lsrs	r3, r3, #1
 8018bba:	b29a      	uxth	r2, r3
 8018bbc:	88bb      	ldrh	r3, [r7, #4]
 8018bbe:	01db      	lsls	r3, r3, #7
 8018bc0:	b29b      	uxth	r3, r3
 8018bc2:	4413      	add	r3, r2
 8018bc4:	b29b      	uxth	r3, r3
}
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	370c      	adds	r7, #12
 8018bca:	46bd      	mov	sp, r7
 8018bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd0:	4770      	bx	lr
	...

08018bd4 <ssd1362_setPixelChanged>:

void ssd1362_setPixelChanged(uint16_t x, uint16_t y, bool changed)
{
 8018bd4:	b590      	push	{r4, r7, lr}
 8018bd6:	b085      	sub	sp, #20
 8018bd8:	af00      	add	r7, sp, #0
 8018bda:	4603      	mov	r3, r0
 8018bdc:	80fb      	strh	r3, [r7, #6]
 8018bde:	460b      	mov	r3, r1
 8018be0:	80bb      	strh	r3, [r7, #4]
 8018be2:	4613      	mov	r3, r2
 8018be4:	70fb      	strb	r3, [r7, #3]
	uint16_t targetByte = ssd1362_coordsToAddress(x, y)/8;
 8018be6:	88ba      	ldrh	r2, [r7, #4]
 8018be8:	88fb      	ldrh	r3, [r7, #6]
 8018bea:	4611      	mov	r1, r2
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7ff ffda 	bl	8018ba6 <ssd1362_coordsToAddress>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	08db      	lsrs	r3, r3, #3
 8018bf6:	81fb      	strh	r3, [r7, #14]
	bitWrite(&changedPixels[targetByte], ssd1362_coordsToAddress(x, y) % 8, changed);
 8018bf8:	89fb      	ldrh	r3, [r7, #14]
 8018bfa:	4a0b      	ldr	r2, [pc, #44]	; (8018c28 <ssd1362_setPixelChanged+0x54>)
 8018bfc:	189c      	adds	r4, r3, r2
 8018bfe:	88ba      	ldrh	r2, [r7, #4]
 8018c00:	88fb      	ldrh	r3, [r7, #6]
 8018c02:	4611      	mov	r1, r2
 8018c04:	4618      	mov	r0, r3
 8018c06:	f7ff ffce 	bl	8018ba6 <ssd1362_coordsToAddress>
 8018c0a:	4603      	mov	r3, r0
 8018c0c:	b2db      	uxtb	r3, r3
 8018c0e:	f003 0307 	and.w	r3, r3, #7
 8018c12:	b2db      	uxtb	r3, r3
 8018c14:	78fa      	ldrb	r2, [r7, #3]
 8018c16:	4619      	mov	r1, r3
 8018c18:	4620      	mov	r0, r4
 8018c1a:	f7ff ff53 	bl	8018ac4 <bitWrite>
}
 8018c1e:	bf00      	nop
 8018c20:	3714      	adds	r7, #20
 8018c22:	46bd      	mov	sp, r7
 8018c24:	bd90      	pop	{r4, r7, pc}
 8018c26:	bf00      	nop
 8018c28:	24007268 	.word	0x24007268

08018c2c <ssd1362_drawPixel>:

//pixel xy coordinates 0-255, color 0-15, and whether to immediately output it to the display or buffer it
void ssd1362_drawPixel(uint16_t x, uint16_t y, uint8_t color, bool display)
{
 8018c2c:	b590      	push	{r4, r7, lr}
 8018c2e:	b085      	sub	sp, #20
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	4604      	mov	r4, r0
 8018c34:	4608      	mov	r0, r1
 8018c36:	4611      	mov	r1, r2
 8018c38:	461a      	mov	r2, r3
 8018c3a:	4623      	mov	r3, r4
 8018c3c:	80fb      	strh	r3, [r7, #6]
 8018c3e:	4603      	mov	r3, r0
 8018c40:	80bb      	strh	r3, [r7, #4]
 8018c42:	460b      	mov	r3, r1
 8018c44:	70fb      	strb	r3, [r7, #3]
 8018c46:	4613      	mov	r3, r2
 8018c48:	70bb      	strb	r3, [r7, #2]
	uint32_t address = ssd1362_coordsToAddress(x,y);
 8018c4a:	88ba      	ldrh	r2, [r7, #4]
 8018c4c:	88fb      	ldrh	r3, [r7, #6]
 8018c4e:	4611      	mov	r1, r2
 8018c50:	4618      	mov	r0, r3
 8018c52:	f7ff ffa8 	bl	8018ba6 <ssd1362_coordsToAddress>
 8018c56:	4603      	mov	r3, r0
 8018c58:	60fb      	str	r3, [r7, #12]
	if((x%2) == 0)
 8018c5a:	88fb      	ldrh	r3, [r7, #6]
 8018c5c:	f003 0301 	and.w	r3, r3, #1
 8018c60:	b29b      	uxth	r3, r3
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d113      	bne.n	8018c8e <ssd1362_drawPixel+0x62>
	{//If this is an even pixel, and therefore needs shifting to the more significant nibble
		frameBuffer[address] = (frameBuffer[address] & 0x0f) | (color<<4);
 8018c66:	4a25      	ldr	r2, [pc, #148]	; (8018cfc <ssd1362_drawPixel+0xd0>)
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	4413      	add	r3, r2
 8018c6c:	781b      	ldrb	r3, [r3, #0]
 8018c6e:	b25b      	sxtb	r3, r3
 8018c70:	f003 030f 	and.w	r3, r3, #15
 8018c74:	b25a      	sxtb	r2, r3
 8018c76:	78fb      	ldrb	r3, [r7, #3]
 8018c78:	011b      	lsls	r3, r3, #4
 8018c7a:	b25b      	sxtb	r3, r3
 8018c7c:	4313      	orrs	r3, r2
 8018c7e:	b25b      	sxtb	r3, r3
 8018c80:	b2d9      	uxtb	r1, r3
 8018c82:	4a1e      	ldr	r2, [pc, #120]	; (8018cfc <ssd1362_drawPixel+0xd0>)
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	4413      	add	r3, r2
 8018c88:	460a      	mov	r2, r1
 8018c8a:	701a      	strb	r2, [r3, #0]
 8018c8c:	e011      	b.n	8018cb2 <ssd1362_drawPixel+0x86>
	} else {
		frameBuffer[address] = (frameBuffer[address] & 0xf0) | (color);
 8018c8e:	4a1b      	ldr	r2, [pc, #108]	; (8018cfc <ssd1362_drawPixel+0xd0>)
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	4413      	add	r3, r2
 8018c94:	781b      	ldrb	r3, [r3, #0]
 8018c96:	b25b      	sxtb	r3, r3
 8018c98:	f023 030f 	bic.w	r3, r3, #15
 8018c9c:	b25a      	sxtb	r2, r3
 8018c9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018ca2:	4313      	orrs	r3, r2
 8018ca4:	b25b      	sxtb	r3, r3
 8018ca6:	b2d9      	uxtb	r1, r3
 8018ca8:	4a14      	ldr	r2, [pc, #80]	; (8018cfc <ssd1362_drawPixel+0xd0>)
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	4413      	add	r3, r2
 8018cae:	460a      	mov	r2, r1
 8018cb0:	701a      	strb	r2, [r3, #0]
	}

	if(display)
 8018cb2:	78bb      	ldrb	r3, [r7, #2]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d017      	beq.n	8018ce8 <ssd1362_drawPixel+0xbc>
	{
		ssd1362_setWriteZone(x/2,y,x/2,y);
 8018cb8:	88fb      	ldrh	r3, [r7, #6]
 8018cba:	085b      	lsrs	r3, r3, #1
 8018cbc:	b298      	uxth	r0, r3
 8018cbe:	88fb      	ldrh	r3, [r7, #6]
 8018cc0:	085b      	lsrs	r3, r3, #1
 8018cc2:	b29a      	uxth	r2, r3
 8018cc4:	88bb      	ldrh	r3, [r7, #4]
 8018cc6:	88b9      	ldrh	r1, [r7, #4]
 8018cc8:	f7ff ff40 	bl	8018b4c <ssd1362_setWriteZone>
		ssd1362_writeData(frameBuffer[address]);
 8018ccc:	4a0b      	ldr	r2, [pc, #44]	; (8018cfc <ssd1362_drawPixel+0xd0>)
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	4413      	add	r3, r2
 8018cd2:	781b      	ldrb	r3, [r3, #0]
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	f7ff fee1 	bl	8018a9c <ssd1362_writeData>
		ssd1362_setPixelChanged(x, y, false); // We've now synced the display with this byte of the buffer, no need to write it again
 8018cda:	88b9      	ldrh	r1, [r7, #4]
 8018cdc:	88fb      	ldrh	r3, [r7, #6]
 8018cde:	2200      	movs	r2, #0
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f7ff ff77 	bl	8018bd4 <ssd1362_setPixelChanged>
	} else {
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
	}
}
 8018ce6:	e005      	b.n	8018cf4 <ssd1362_drawPixel+0xc8>
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
 8018ce8:	88b9      	ldrh	r1, [r7, #4]
 8018cea:	88fb      	ldrh	r3, [r7, #6]
 8018cec:	2201      	movs	r2, #1
 8018cee:	4618      	mov	r0, r3
 8018cf0:	f7ff ff70 	bl	8018bd4 <ssd1362_setPixelChanged>
}
 8018cf4:	bf00      	nop
 8018cf6:	3714      	adds	r7, #20
 8018cf8:	46bd      	mov	sp, r7
 8018cfa:	bd90      	pop	{r4, r7, pc}
 8018cfc:	24007a68 	.word	0x24007a68

08018d00 <ssd1362_drawHLine>:
		}
	}
}

void ssd1362_drawHLine(uint16_t x, uint16_t y, uint16_t length, uint8_t color, bool display)
	{
 8018d00:	b590      	push	{r4, r7, lr}
 8018d02:	b085      	sub	sp, #20
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	4604      	mov	r4, r0
 8018d08:	4608      	mov	r0, r1
 8018d0a:	4611      	mov	r1, r2
 8018d0c:	461a      	mov	r2, r3
 8018d0e:	4623      	mov	r3, r4
 8018d10:	80fb      	strh	r3, [r7, #6]
 8018d12:	4603      	mov	r3, r0
 8018d14:	80bb      	strh	r3, [r7, #4]
 8018d16:	460b      	mov	r3, r1
 8018d18:	807b      	strh	r3, [r7, #2]
 8018d1a:	4613      	mov	r3, r2
 8018d1c:	707b      	strb	r3, [r7, #1]
	for (uint32_t i = x; i < x+length; i++)
 8018d1e:	88fb      	ldrh	r3, [r7, #6]
 8018d20:	60fb      	str	r3, [r7, #12]
 8018d22:	e00a      	b.n	8018d3a <ssd1362_drawHLine+0x3a>
	{
		ssd1362_drawPixel(i, y, color, display);
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	b298      	uxth	r0, r3
 8018d28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018d2c:	787a      	ldrb	r2, [r7, #1]
 8018d2e:	88b9      	ldrh	r1, [r7, #4]
 8018d30:	f7ff ff7c 	bl	8018c2c <ssd1362_drawPixel>
	for (uint32_t i = x; i < x+length; i++)
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	3301      	adds	r3, #1
 8018d38:	60fb      	str	r3, [r7, #12]
 8018d3a:	88fa      	ldrh	r2, [r7, #6]
 8018d3c:	887b      	ldrh	r3, [r7, #2]
 8018d3e:	4413      	add	r3, r2
 8018d40:	461a      	mov	r2, r3
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	4293      	cmp	r3, r2
 8018d46:	d3ed      	bcc.n	8018d24 <ssd1362_drawHLine+0x24>
	}
}
 8018d48:	bf00      	nop
 8018d4a:	bf00      	nop
 8018d4c:	3714      	adds	r7, #20
 8018d4e:	46bd      	mov	sp, r7
 8018d50:	bd90      	pop	{r4, r7, pc}

08018d52 <ssd1362_drawByteAsRow>:
	}
}

//Draws a byte as an 8 pixel row
void ssd1362_drawByteAsRow(uint16_t x, uint16_t y, uint8_t byte, uint8_t color)
{
 8018d52:	b590      	push	{r4, r7, lr}
 8018d54:	b085      	sub	sp, #20
 8018d56:	af00      	add	r7, sp, #0
 8018d58:	4604      	mov	r4, r0
 8018d5a:	4608      	mov	r0, r1
 8018d5c:	4611      	mov	r1, r2
 8018d5e:	461a      	mov	r2, r3
 8018d60:	4623      	mov	r3, r4
 8018d62:	80fb      	strh	r3, [r7, #6]
 8018d64:	4603      	mov	r3, r0
 8018d66:	80bb      	strh	r3, [r7, #4]
 8018d68:	460b      	mov	r3, r1
 8018d6a:	70fb      	strb	r3, [r7, #3]
 8018d6c:	4613      	mov	r3, r2
 8018d6e:	70bb      	strb	r3, [r7, #2]
	for (uint32_t i = 0; i < 8; i++)
 8018d70:	2300      	movs	r3, #0
 8018d72:	60fb      	str	r3, [r7, #12]
 8018d74:	e016      	b.n	8018da4 <ssd1362_drawByteAsRow+0x52>
	{
		if(bitRead(&byte, i))
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	b2da      	uxtb	r2, r3
 8018d7a:	1cfb      	adds	r3, r7, #3
 8018d7c:	4611      	mov	r1, r2
 8018d7e:	4618      	mov	r0, r3
 8018d80:	f7ff fece 	bl	8018b20 <bitRead>
 8018d84:	4603      	mov	r3, r0
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d009      	beq.n	8018d9e <ssd1362_drawByteAsRow+0x4c>
	{
			ssd1362_drawPixel(x+i, y, color, false);
 8018d8a:	68fb      	ldr	r3, [r7, #12]
 8018d8c:	b29a      	uxth	r2, r3
 8018d8e:	88fb      	ldrh	r3, [r7, #6]
 8018d90:	4413      	add	r3, r2
 8018d92:	b298      	uxth	r0, r3
 8018d94:	78ba      	ldrb	r2, [r7, #2]
 8018d96:	88b9      	ldrh	r1, [r7, #4]
 8018d98:	2300      	movs	r3, #0
 8018d9a:	f7ff ff47 	bl	8018c2c <ssd1362_drawPixel>
	for (uint32_t i = 0; i < 8; i++)
 8018d9e:	68fb      	ldr	r3, [r7, #12]
 8018da0:	3301      	adds	r3, #1
 8018da2:	60fb      	str	r3, [r7, #12]
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	2b07      	cmp	r3, #7
 8018da8:	d9e5      	bls.n	8018d76 <ssd1362_drawByteAsRow+0x24>
		}
	}
}
 8018daa:	bf00      	nop
 8018dac:	bf00      	nop
 8018dae:	3714      	adds	r7, #20
 8018db0:	46bd      	mov	sp, r7
 8018db2:	bd90      	pop	{r4, r7, pc}

08018db4 <ssd1362_drawChar>:

void ssd1362_drawChar(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 8018db4:	b590      	push	{r4, r7, lr}
 8018db6:	b085      	sub	sp, #20
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	4604      	mov	r4, r0
 8018dbc:	4608      	mov	r0, r1
 8018dbe:	4611      	mov	r1, r2
 8018dc0:	461a      	mov	r2, r3
 8018dc2:	4623      	mov	r3, r4
 8018dc4:	80fb      	strh	r3, [r7, #6]
 8018dc6:	4603      	mov	r3, r0
 8018dc8:	80bb      	strh	r3, [r7, #4]
 8018dca:	460b      	mov	r3, r1
 8018dcc:	70fb      	strb	r3, [r7, #3]
 8018dce:	4613      	mov	r3, r2
 8018dd0:	70bb      	strb	r3, [r7, #2]
	for (size_t i = 0; i < 8; i++)
 8018dd2:	2300      	movs	r3, #0
 8018dd4:	60fb      	str	r3, [r7, #12]
 8018dd6:	e012      	b.n	8018dfe <ssd1362_drawChar+0x4a>
	{
		ssd1362_drawByteAsRow(x, y+i, font8x8_basic[(unsigned char)thisChar][i], color);
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	b29a      	uxth	r2, r3
 8018ddc:	88bb      	ldrh	r3, [r7, #4]
 8018dde:	4413      	add	r3, r2
 8018de0:	b299      	uxth	r1, r3
 8018de2:	78fb      	ldrb	r3, [r7, #3]
 8018de4:	4a0a      	ldr	r2, [pc, #40]	; (8018e10 <ssd1362_drawChar+0x5c>)
 8018de6:	00db      	lsls	r3, r3, #3
 8018de8:	441a      	add	r2, r3
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	4413      	add	r3, r2
 8018dee:	781a      	ldrb	r2, [r3, #0]
 8018df0:	78bb      	ldrb	r3, [r7, #2]
 8018df2:	88f8      	ldrh	r0, [r7, #6]
 8018df4:	f7ff ffad 	bl	8018d52 <ssd1362_drawByteAsRow>
	for (size_t i = 0; i < 8; i++)
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	3301      	adds	r3, #1
 8018dfc:	60fb      	str	r3, [r7, #12]
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	2b07      	cmp	r3, #7
 8018e02:	d9e9      	bls.n	8018dd8 <ssd1362_drawChar+0x24>
	}
}
 8018e04:	bf00      	nop
 8018e06:	bf00      	nop
 8018e08:	3714      	adds	r7, #20
 8018e0a:	46bd      	mov	sp, r7
 8018e0c:	bd90      	pop	{r4, r7, pc}
 8018e0e:	bf00      	nop
 8018e10:	2400343c 	.word	0x2400343c

08018e14 <ssd1362_drawCharArray>:

void ssd1362_drawCharArray(uint16_t x, uint16_t y, int8_t text[], uint8_t color, uint32_t size)
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b086      	sub	sp, #24
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	60ba      	str	r2, [r7, #8]
 8018e1c:	461a      	mov	r2, r3
 8018e1e:	4603      	mov	r3, r0
 8018e20:	81fb      	strh	r3, [r7, #14]
 8018e22:	460b      	mov	r3, r1
 8018e24:	81bb      	strh	r3, [r7, #12]
 8018e26:	4613      	mov	r3, r2
 8018e28:	71fb      	strb	r3, [r7, #7]
	const int8_t* thisChar;
	uint16_t xOffset = 0;
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	827b      	strh	r3, [r7, #18]
	if(size==16)
 8018e2e:	6a3b      	ldr	r3, [r7, #32]
 8018e30:	2b10      	cmp	r3, #16
 8018e32:	d11a      	bne.n	8018e6a <ssd1362_drawCharArray+0x56>
	{
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 8018e34:	68bb      	ldr	r3, [r7, #8]
 8018e36:	617b      	str	r3, [r7, #20]
 8018e38:	e011      	b.n	8018e5e <ssd1362_drawCharArray+0x4a>
		{
			ssd1362_drawChar16(x+xOffset, y, *thisChar, color);
 8018e3a:	89fa      	ldrh	r2, [r7, #14]
 8018e3c:	8a7b      	ldrh	r3, [r7, #18]
 8018e3e:	4413      	add	r3, r2
 8018e40:	b298      	uxth	r0, r3
 8018e42:	697b      	ldr	r3, [r7, #20]
 8018e44:	f993 3000 	ldrsb.w	r3, [r3]
 8018e48:	b2da      	uxtb	r2, r3
 8018e4a:	79fb      	ldrb	r3, [r7, #7]
 8018e4c:	89b9      	ldrh	r1, [r7, #12]
 8018e4e:	f000 f861 	bl	8018f14 <ssd1362_drawChar16>
			xOffset += 8;
 8018e52:	8a7b      	ldrh	r3, [r7, #18]
 8018e54:	3308      	adds	r3, #8
 8018e56:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 8018e58:	697b      	ldr	r3, [r7, #20]
 8018e5a:	3301      	adds	r3, #1
 8018e5c:	617b      	str	r3, [r7, #20]
 8018e5e:	697b      	ldr	r3, [r7, #20]
 8018e60:	f993 3000 	ldrsb.w	r3, [r3]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d1e8      	bne.n	8018e3a <ssd1362_drawCharArray+0x26>
		{
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
			xOffset += 8;
		}
	}
}
 8018e68:	e037      	b.n	8018eda <ssd1362_drawCharArray+0xc6>
	} else if(size==32)
 8018e6a:	6a3b      	ldr	r3, [r7, #32]
 8018e6c:	2b20      	cmp	r3, #32
 8018e6e:	d11a      	bne.n	8018ea6 <ssd1362_drawCharArray+0x92>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 8018e70:	68bb      	ldr	r3, [r7, #8]
 8018e72:	617b      	str	r3, [r7, #20]
 8018e74:	e011      	b.n	8018e9a <ssd1362_drawCharArray+0x86>
			ssd1362_drawChar32(x+xOffset, y, *thisChar, color);
 8018e76:	89fa      	ldrh	r2, [r7, #14]
 8018e78:	8a7b      	ldrh	r3, [r7, #18]
 8018e7a:	4413      	add	r3, r2
 8018e7c:	b298      	uxth	r0, r3
 8018e7e:	697b      	ldr	r3, [r7, #20]
 8018e80:	f993 3000 	ldrsb.w	r3, [r3]
 8018e84:	b2da      	uxtb	r2, r3
 8018e86:	79fb      	ldrb	r3, [r7, #7]
 8018e88:	89b9      	ldrh	r1, [r7, #12]
 8018e8a:	f000 f887 	bl	8018f9c <ssd1362_drawChar32>
			xOffset += 16;
 8018e8e:	8a7b      	ldrh	r3, [r7, #18]
 8018e90:	3310      	adds	r3, #16
 8018e92:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 8018e94:	697b      	ldr	r3, [r7, #20]
 8018e96:	3301      	adds	r3, #1
 8018e98:	617b      	str	r3, [r7, #20]
 8018e9a:	697b      	ldr	r3, [r7, #20]
 8018e9c:	f993 3000 	ldrsb.w	r3, [r3]
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d1e8      	bne.n	8018e76 <ssd1362_drawCharArray+0x62>
}
 8018ea4:	e019      	b.n	8018eda <ssd1362_drawCharArray+0xc6>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 8018ea6:	68bb      	ldr	r3, [r7, #8]
 8018ea8:	617b      	str	r3, [r7, #20]
 8018eaa:	e011      	b.n	8018ed0 <ssd1362_drawCharArray+0xbc>
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
 8018eac:	89fa      	ldrh	r2, [r7, #14]
 8018eae:	8a7b      	ldrh	r3, [r7, #18]
 8018eb0:	4413      	add	r3, r2
 8018eb2:	b298      	uxth	r0, r3
 8018eb4:	697b      	ldr	r3, [r7, #20]
 8018eb6:	f993 3000 	ldrsb.w	r3, [r3]
 8018eba:	b2da      	uxtb	r2, r3
 8018ebc:	79fb      	ldrb	r3, [r7, #7]
 8018ebe:	89b9      	ldrh	r1, [r7, #12]
 8018ec0:	f7ff ff78 	bl	8018db4 <ssd1362_drawChar>
			xOffset += 8;
 8018ec4:	8a7b      	ldrh	r3, [r7, #18]
 8018ec6:	3308      	adds	r3, #8
 8018ec8:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 8018eca:	697b      	ldr	r3, [r7, #20]
 8018ecc:	3301      	adds	r3, #1
 8018ece:	617b      	str	r3, [r7, #20]
 8018ed0:	697b      	ldr	r3, [r7, #20]
 8018ed2:	f993 3000 	ldrsb.w	r3, [r3]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d1e8      	bne.n	8018eac <ssd1362_drawCharArray+0x98>
}
 8018eda:	bf00      	nop
 8018edc:	3718      	adds	r7, #24
 8018ede:	46bd      	mov	sp, r7
 8018ee0:	bd80      	pop	{r7, pc}

08018ee2 <ssd1362_drawString>:

void ssd1362_drawString(uint16_t x, uint16_t y, int8_t textString[], uint8_t color, uint32_t size)
{
 8018ee2:	b580      	push	{r7, lr}
 8018ee4:	b086      	sub	sp, #24
 8018ee6:	af02      	add	r7, sp, #8
 8018ee8:	60ba      	str	r2, [r7, #8]
 8018eea:	461a      	mov	r2, r3
 8018eec:	4603      	mov	r3, r0
 8018eee:	81fb      	strh	r3, [r7, #14]
 8018ef0:	460b      	mov	r3, r1
 8018ef2:	81bb      	strh	r3, [r7, #12]
 8018ef4:	4613      	mov	r3, r2
 8018ef6:	71fb      	strb	r3, [r7, #7]
//	uint8_t text[64];
//	textString.toCharArray(text, 64);
	ssd1362_drawCharArray(x,y, textString, color, size);
 8018ef8:	79fa      	ldrb	r2, [r7, #7]
 8018efa:	89b9      	ldrh	r1, [r7, #12]
 8018efc:	89f8      	ldrh	r0, [r7, #14]
 8018efe:	69bb      	ldr	r3, [r7, #24]
 8018f00:	9300      	str	r3, [sp, #0]
 8018f02:	4613      	mov	r3, r2
 8018f04:	68ba      	ldr	r2, [r7, #8]
 8018f06:	f7ff ff85 	bl	8018e14 <ssd1362_drawCharArray>
}
 8018f0a:	bf00      	nop
 8018f0c:	3710      	adds	r7, #16
 8018f0e:	46bd      	mov	sp, r7
 8018f10:	bd80      	pop	{r7, pc}
	...

08018f14 <ssd1362_drawChar16>:

void ssd1362_drawChar16(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 8018f14:	b590      	push	{r4, r7, lr}
 8018f16:	b085      	sub	sp, #20
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	4604      	mov	r4, r0
 8018f1c:	4608      	mov	r0, r1
 8018f1e:	4611      	mov	r1, r2
 8018f20:	461a      	mov	r2, r3
 8018f22:	4623      	mov	r3, r4
 8018f24:	80fb      	strh	r3, [r7, #6]
 8018f26:	4603      	mov	r3, r0
 8018f28:	80bb      	strh	r3, [r7, #4]
 8018f2a:	460b      	mov	r3, r1
 8018f2c:	70fb      	strb	r3, [r7, #3]
 8018f2e:	4613      	mov	r3, r2
 8018f30:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 16; row++) {
 8018f32:	2300      	movs	r3, #0
 8018f34:	60fb      	str	r3, [r7, #12]
 8018f36:	e027      	b.n	8018f88 <ssd1362_drawChar16+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x16[(unsigned char)thisChar][row*2], color);
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	b29a      	uxth	r2, r3
 8018f3c:	88bb      	ldrh	r3, [r7, #4]
 8018f3e:	4413      	add	r3, r2
 8018f40:	b299      	uxth	r1, r3
 8018f42:	78fa      	ldrb	r2, [r7, #3]
 8018f44:	68fb      	ldr	r3, [r7, #12]
 8018f46:	005b      	lsls	r3, r3, #1
 8018f48:	4813      	ldr	r0, [pc, #76]	; (8018f98 <ssd1362_drawChar16+0x84>)
 8018f4a:	0152      	lsls	r2, r2, #5
 8018f4c:	4402      	add	r2, r0
 8018f4e:	4413      	add	r3, r2
 8018f50:	781a      	ldrb	r2, [r3, #0]
 8018f52:	78bb      	ldrb	r3, [r7, #2]
 8018f54:	88f8      	ldrh	r0, [r7, #6]
 8018f56:	f7ff fefc 	bl	8018d52 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x16[(unsigned char)thisChar][(row*2)+1], color);
 8018f5a:	88fb      	ldrh	r3, [r7, #6]
 8018f5c:	3308      	adds	r3, #8
 8018f5e:	b298      	uxth	r0, r3
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	b29a      	uxth	r2, r3
 8018f64:	88bb      	ldrh	r3, [r7, #4]
 8018f66:	4413      	add	r3, r2
 8018f68:	b299      	uxth	r1, r3
 8018f6a:	78fa      	ldrb	r2, [r7, #3]
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	005b      	lsls	r3, r3, #1
 8018f70:	3301      	adds	r3, #1
 8018f72:	4c09      	ldr	r4, [pc, #36]	; (8018f98 <ssd1362_drawChar16+0x84>)
 8018f74:	0152      	lsls	r2, r2, #5
 8018f76:	4422      	add	r2, r4
 8018f78:	4413      	add	r3, r2
 8018f7a:	781a      	ldrb	r2, [r3, #0]
 8018f7c:	78bb      	ldrb	r3, [r7, #2]
 8018f7e:	f7ff fee8 	bl	8018d52 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 16; row++) {
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	3301      	adds	r3, #1
 8018f86:	60fb      	str	r3, [r7, #12]
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	2b0f      	cmp	r3, #15
 8018f8c:	d9d4      	bls.n	8018f38 <ssd1362_drawChar16+0x24>
	}
}
 8018f8e:	bf00      	nop
 8018f90:	bf00      	nop
 8018f92:	3714      	adds	r7, #20
 8018f94:	46bd      	mov	sp, r7
 8018f96:	bd90      	pop	{r4, r7, pc}
 8018f98:	2400043c 	.word	0x2400043c

08018f9c <ssd1362_drawChar32>:

void ssd1362_drawChar32(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 8018f9c:	b590      	push	{r4, r7, lr}
 8018f9e:	b085      	sub	sp, #20
 8018fa0:	af00      	add	r7, sp, #0
 8018fa2:	4604      	mov	r4, r0
 8018fa4:	4608      	mov	r0, r1
 8018fa6:	4611      	mov	r1, r2
 8018fa8:	461a      	mov	r2, r3
 8018faa:	4623      	mov	r3, r4
 8018fac:	80fb      	strh	r3, [r7, #6]
 8018fae:	4603      	mov	r3, r0
 8018fb0:	80bb      	strh	r3, [r7, #4]
 8018fb2:	460b      	mov	r3, r1
 8018fb4:	70fb      	strb	r3, [r7, #3]
 8018fb6:	4613      	mov	r3, r2
 8018fb8:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 32; row++) {
 8018fba:	2300      	movs	r3, #0
 8018fbc:	60fb      	str	r3, [r7, #12]
 8018fbe:	e027      	b.n	8019010 <ssd1362_drawChar32+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x32[(unsigned char)thisChar][row*2], color);
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	b29a      	uxth	r2, r3
 8018fc4:	88bb      	ldrh	r3, [r7, #4]
 8018fc6:	4413      	add	r3, r2
 8018fc8:	b299      	uxth	r1, r3
 8018fca:	78fa      	ldrb	r2, [r7, #3]
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	005b      	lsls	r3, r3, #1
 8018fd0:	4813      	ldr	r0, [pc, #76]	; (8019020 <ssd1362_drawChar32+0x84>)
 8018fd2:	0192      	lsls	r2, r2, #6
 8018fd4:	4402      	add	r2, r0
 8018fd6:	4413      	add	r3, r2
 8018fd8:	781a      	ldrb	r2, [r3, #0]
 8018fda:	78bb      	ldrb	r3, [r7, #2]
 8018fdc:	88f8      	ldrh	r0, [r7, #6]
 8018fde:	f7ff feb8 	bl	8018d52 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x32[(unsigned char)thisChar][(row*2)+1], color);
 8018fe2:	88fb      	ldrh	r3, [r7, #6]
 8018fe4:	3308      	adds	r3, #8
 8018fe6:	b298      	uxth	r0, r3
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	b29a      	uxth	r2, r3
 8018fec:	88bb      	ldrh	r3, [r7, #4]
 8018fee:	4413      	add	r3, r2
 8018ff0:	b299      	uxth	r1, r3
 8018ff2:	78fa      	ldrb	r2, [r7, #3]
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	005b      	lsls	r3, r3, #1
 8018ff8:	3301      	adds	r3, #1
 8018ffa:	4c09      	ldr	r4, [pc, #36]	; (8019020 <ssd1362_drawChar32+0x84>)
 8018ffc:	0192      	lsls	r2, r2, #6
 8018ffe:	4422      	add	r2, r4
 8019000:	4413      	add	r3, r2
 8019002:	781a      	ldrb	r2, [r3, #0]
 8019004:	78bb      	ldrb	r3, [r7, #2]
 8019006:	f7ff fea4 	bl	8018d52 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 32; row++) {
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	3301      	adds	r3, #1
 801900e:	60fb      	str	r3, [r7, #12]
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	2b1f      	cmp	r3, #31
 8019014:	d9d4      	bls.n	8018fc0 <ssd1362_drawChar32+0x24>
	}
}
 8019016:	bf00      	nop
 8019018:	bf00      	nop
 801901a:	3714      	adds	r7, #20
 801901c:	46bd      	mov	sp, r7
 801901e:	bd90      	pop	{r4, r7, pc}
 8019020:	2400143c 	.word	0x2400143c

08019024 <ssd1362_clearBuffer>:
	HAL_Delay(15);
	ssd1362_stopScrolling();
}

void ssd1362_clearBuffer()
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b082      	sub	sp, #8
 8019028:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801902a:	2300      	movs	r3, #0
 801902c:	607b      	str	r3, [r7, #4]
 801902e:	e01a      	b.n	8019066 <ssd1362_clearBuffer+0x42>
	{
		// If there is a non-zero (non-black) byte here, make sure it gets updated
		if (frameBuffer[i])
 8019030:	4a11      	ldr	r2, [pc, #68]	; (8019078 <ssd1362_clearBuffer+0x54>)
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	4413      	add	r3, r2
 8019036:	781b      	ldrb	r3, [r3, #0]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d011      	beq.n	8019060 <ssd1362_clearBuffer+0x3c>
		{
			frameBuffer[i] = 0;
 801903c:	4a0e      	ldr	r2, [pc, #56]	; (8019078 <ssd1362_clearBuffer+0x54>)
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	4413      	add	r3, r2
 8019042:	2200      	movs	r2, #0
 8019044:	701a      	strb	r2, [r3, #0]
			bitWrite(&changedPixels[i/8], i%8, 1); // Mark this pixel as needing an update
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	08db      	lsrs	r3, r3, #3
 801904a:	4a0c      	ldr	r2, [pc, #48]	; (801907c <ssd1362_clearBuffer+0x58>)
 801904c:	1898      	adds	r0, r3, r2
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	b2db      	uxtb	r3, r3
 8019052:	f003 0307 	and.w	r3, r3, #7
 8019056:	b2db      	uxtb	r3, r3
 8019058:	2201      	movs	r2, #1
 801905a:	4619      	mov	r1, r3
 801905c:	f7ff fd32 	bl	8018ac4 <bitWrite>
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	3301      	adds	r3, #1
 8019064:	607b      	str	r3, [r7, #4]
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801906c:	d3e0      	bcc.n	8019030 <ssd1362_clearBuffer+0xc>
		}
	}
}
 801906e:	bf00      	nop
 8019070:	bf00      	nop
 8019072:	3708      	adds	r7, #8
 8019074:	46bd      	mov	sp, r7
 8019076:	bd80      	pop	{r7, pc}
 8019078:	24007a68 	.word	0x24007a68
 801907c:	24007268 	.word	0x24007268

08019080 <ssd1362_writeFullBuffer>:

//Outputs the full framebuffer to the display
void ssd1362_writeFullBuffer()
{
 8019080:	b580      	push	{r7, lr}
 8019082:	b082      	sub	sp, #8
 8019084:	af00      	add	r7, sp, #0
	ssd1362_setWriteZone(0, 0, (SSD1362_WIDTH / 2) - 1, SSD1362_HEIGHT - 1); //Full display
 8019086:	233f      	movs	r3, #63	; 0x3f
 8019088:	227f      	movs	r2, #127	; 0x7f
 801908a:	2100      	movs	r1, #0
 801908c:	2000      	movs	r0, #0
 801908e:	f7ff fd5d 	bl	8018b4c <ssd1362_setWriteZone>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 8019092:	2300      	movs	r3, #0
 8019094:	607b      	str	r3, [r7, #4]
 8019096:	e009      	b.n	80190ac <ssd1362_writeFullBuffer+0x2c>
	{
		ssd1362_writeData(frameBuffer[i]);
 8019098:	4a10      	ldr	r2, [pc, #64]	; (80190dc <ssd1362_writeFullBuffer+0x5c>)
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	4413      	add	r3, r2
 801909e:	781b      	ldrb	r3, [r3, #0]
 80190a0:	4618      	mov	r0, r3
 80190a2:	f7ff fcfb 	bl	8018a9c <ssd1362_writeData>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	3301      	adds	r3, #1
 80190aa:	607b      	str	r3, [r7, #4]
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80190b2:	d3f1      	bcc.n	8019098 <ssd1362_writeFullBuffer+0x18>
	}
	for (uint32_t i = 0; i < 1024; i++)
 80190b4:	2300      	movs	r3, #0
 80190b6:	603b      	str	r3, [r7, #0]
 80190b8:	e007      	b.n	80190ca <ssd1362_writeFullBuffer+0x4a>
	{
		changedPixels[i] = 0; // Set all pixels as up to date.
 80190ba:	4a09      	ldr	r2, [pc, #36]	; (80190e0 <ssd1362_writeFullBuffer+0x60>)
 80190bc:	683b      	ldr	r3, [r7, #0]
 80190be:	4413      	add	r3, r2
 80190c0:	2200      	movs	r2, #0
 80190c2:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 1024; i++)
 80190c4:	683b      	ldr	r3, [r7, #0]
 80190c6:	3301      	adds	r3, #1
 80190c8:	603b      	str	r3, [r7, #0]
 80190ca:	683b      	ldr	r3, [r7, #0]
 80190cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80190d0:	d3f3      	bcc.n	80190ba <ssd1362_writeFullBuffer+0x3a>
	}
}
 80190d2:	bf00      	nop
 80190d4:	bf00      	nop
 80190d6:	3708      	adds	r7, #8
 80190d8:	46bd      	mov	sp, r7
 80190da:	bd80      	pop	{r7, pc}
 80190dc:	24007a68 	.word	0x24007a68
 80190e0:	24007268 	.word	0x24007268

080190e4 <ssd1362_init>:
	ssd1362_writeCmd(contrast);  //Contrast byte
}

//Sends all the boilerplate startup and config commands to the driver
void ssd1362_init()
{
 80190e4:	b580      	push	{r7, lr}
 80190e6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1362_Reset();
 80190e8:	f7ff fcae 	bl	8018a48 <ssd1362_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80190ec:	2064      	movs	r0, #100	; 0x64
 80190ee:	f7e9 fdc3 	bl	8002c78 <HAL_Delay>

    // Init OLED
    ssd1362_writeCmd(0XFD); //Set Command Lock
 80190f2:	20fd      	movs	r0, #253	; 0xfd
 80190f4:	f7ff fcc0 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X12); //(12H=Unlock,16H=Lock)
 80190f8:	2012      	movs	r0, #18
 80190fa:	f7ff fcbd 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAE); //Display OFF(Sleep Mode)
 80190fe:	20ae      	movs	r0, #174	; 0xae
 8019100:	f7ff fcba 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X15); //Set column Address
 8019104:	2015      	movs	r0, #21
 8019106:	f7ff fcb7 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start column Address
 801910a:	2000      	movs	r0, #0
 801910c:	f7ff fcb4 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X7F); //End column Address
 8019110:	207f      	movs	r0, #127	; 0x7f
 8019112:	f7ff fcb1 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X75); //Set Row Address
 8019116:	2075      	movs	r0, #117	; 0x75
 8019118:	f7ff fcae 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start Row Address
 801911c:	2000      	movs	r0, #0
 801911e:	f7ff fcab 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F); //End Row Address
 8019122:	203f      	movs	r0, #63	; 0x3f
 8019124:	f7ff fca8 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X81); //Set contrast
 8019128:	2081      	movs	r0, #129	; 0x81
 801912a:	f7ff fca5 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0x2f);
 801912e:	202f      	movs	r0, #47	; 0x2f
 8019130:	f7ff fca2 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA0); //Set Remap
 8019134:	20a0      	movs	r0, #160	; 0xa0
 8019136:	f7ff fc9f 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XC3);
 801913a:	20c3      	movs	r0, #195	; 0xc3
 801913c:	f7ff fc9c 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA1); //Set Display Start Line
 8019140:	20a1      	movs	r0, #161	; 0xa1
 8019142:	f7ff fc99 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 8019146:	2000      	movs	r0, #0
 8019148:	f7ff fc96 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA2); //Set Display Offset
 801914c:	20a2      	movs	r0, #162	; 0xa2
 801914e:	f7ff fc93 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 8019152:	2000      	movs	r0, #0
 8019154:	f7ff fc90 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA4); //Normal Display
 8019158:	20a4      	movs	r0, #164	; 0xa4
 801915a:	f7ff fc8d 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA8); //Set Multiplex Ratio
 801915e:	20a8      	movs	r0, #168	; 0xa8
 8019160:	f7ff fc8a 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F);
 8019164:	203f      	movs	r0, #63	; 0x3f
 8019166:	f7ff fc87 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAB); //Set VDD regulator
 801916a:	20ab      	movs	r0, #171	; 0xab
 801916c:	f7ff fc84 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01); //Regulator Enable
 8019170:	2001      	movs	r0, #1
 8019172:	f7ff fc81 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAD); //External /Internal IREF Selection
 8019176:	20ad      	movs	r0, #173	; 0xad
 8019178:	f7ff fc7e 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X8E);
 801917c:	208e      	movs	r0, #142	; 0x8e
 801917e:	f7ff fc7b 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB1); //Set Phase Length
 8019182:	20b1      	movs	r0, #177	; 0xb1
 8019184:	f7ff fc78 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X22);
 8019188:	2022      	movs	r0, #34	; 0x22
 801918a:	f7ff fc75 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB3); //Display clock Divider
 801918e:	20b3      	movs	r0, #179	; 0xb3
 8019190:	f7ff fc72 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XA0);
 8019194:	20a0      	movs	r0, #160	; 0xa0
 8019196:	f7ff fc6f 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB6); //Set Second pre-charge Period
 801919a:	20b6      	movs	r0, #182	; 0xb6
 801919c:	f7ff fc6c 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X04);
 80191a0:	2004      	movs	r0, #4
 80191a2:	f7ff fc69 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB9); //Set Linear LUT
 80191a6:	20b9      	movs	r0, #185	; 0xb9
 80191a8:	f7ff fc66 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBc); //Set pre-charge voltage level
 80191ac:	20bc      	movs	r0, #188	; 0xbc
 80191ae:	f7ff fc63 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X10); //0.5*Vcc
 80191b2:	2010      	movs	r0, #16
 80191b4:	f7ff fc60 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBD); //Pre-charge voltage capacitor Selection
 80191b8:	20bd      	movs	r0, #189	; 0xbd
 80191ba:	f7ff fc5d 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01);
 80191be:	2001      	movs	r0, #1
 80191c0:	f7ff fc5a 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBE); //Set COM deselect voltage level
 80191c4:	20be      	movs	r0, #190	; 0xbe
 80191c6:	f7ff fc57 	bl	8018a78 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X07); //0.82*Vcc
 80191ca:	2007      	movs	r0, #7
 80191cc:	f7ff fc54 	bl	8018a78 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAF); //Display ON
 80191d0:	20af      	movs	r0, #175	; 0xaf
 80191d2:	f7ff fc51 	bl	8018a78 <ssd1362_writeCmd>
}
 80191d6:	bf00      	nop
 80191d8:	bd80      	pop	{r7, pc}
	...

080191dc <D16_GENERIC>:
 80191dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191e0:	b089      	sub	sp, #36	; 0x24
 80191e2:	6993      	ldr	r3, [r2, #24]
 80191e4:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80191e6:	9103      	str	r1, [sp, #12]
 80191e8:	9307      	str	r3, [sp, #28]
 80191ea:	69d3      	ldr	r3, [r2, #28]
 80191ec:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 80191f0:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 80191f4:	9106      	str	r1, [sp, #24]
 80191f6:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 80191fa:	2d00      	cmp	r5, #0
 80191fc:	d063      	beq.n	80192c6 <D16_GENERIC+0xea>
 80191fe:	f001 0520 	and.w	r5, r1, #32
 8019202:	f001 0110 	and.w	r1, r1, #16
 8019206:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 80192e8 <D16_GENERIC+0x10c>
 801920a:	46c1      	mov	r9, r8
 801920c:	9104      	str	r1, [sp, #16]
 801920e:	2100      	movs	r1, #0
 8019210:	9505      	str	r5, [sp, #20]
 8019212:	e04d      	b.n	80192b0 <D16_GENERIC+0xd4>
 8019214:	5d87      	ldrb	r7, [r0, r6]
 8019216:	7805      	ldrb	r5, [r0, #0]
 8019218:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 801921c:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8019220:	b2fe      	uxtb	r6, r7
 8019222:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8019226:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 801922a:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 801922e:	441d      	add	r5, r3
 8019230:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8019234:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8019238:	f3c3 0609 	ubfx	r6, r3, #0, #10
 801923c:	0a9b      	lsrs	r3, r3, #10
 801923e:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8019242:	4d27      	ldr	r5, [pc, #156]	; (80192e0 <D16_GENERIC+0x104>)
 8019244:	fb26 c505 	smlad	r5, r6, r5, ip
 8019248:	4f26      	ldr	r7, [pc, #152]	; (80192e4 <D16_GENERIC+0x108>)
 801924a:	fb26 fc07 	smuad	ip, r6, r7
 801924e:	9e04      	ldr	r6, [sp, #16]
 8019250:	f101 0801 	add.w	r8, r1, #1
 8019254:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8019258:	b1ae      	cbz	r6, 8019286 <D16_GENERIC+0xaa>
 801925a:	442c      	add	r4, r5
 801925c:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8019260:	eba4 040a 	sub.w	r4, r4, sl
 8019264:	46aa      	mov	sl, r5
 8019266:	17e7      	asrs	r7, r4, #31
 8019268:	fba4 450b 	umull	r4, r5, r4, fp
 801926c:	e9cd 4500 	strd	r4, r5, [sp]
 8019270:	fb0b 5407 	mla	r4, fp, r7, r5
 8019274:	9401      	str	r4, [sp, #4]
 8019276:	e9dd 4500 	ldrd	r4, r5, [sp]
 801927a:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 801927e:	f145 0500 	adc.w	r5, r5, #0
 8019282:	006c      	lsls	r4, r5, #1
 8019284:	4625      	mov	r5, r4
 8019286:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 801928a:	042d      	lsls	r5, r5, #16
 801928c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019290:	2700      	movs	r7, #0
 8019292:	fb01 fb0b 	mul.w	fp, r1, fp
 8019296:	fa1f f188 	uxth.w	r1, r8
 801929a:	fbc9 6705 	smlal	r6, r7, r9, r5
 801929e:	9e03      	ldr	r6, [sp, #12]
 80192a0:	10bd      	asrs	r5, r7, #2
 80192a2:	f305 050f 	ssat	r5, #16, r5
 80192a6:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80192aa:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80192ac:	428d      	cmp	r5, r1
 80192ae:	d90a      	bls.n	80192c6 <D16_GENERIC+0xea>
 80192b0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80192b2:	2d01      	cmp	r5, #1
 80192b4:	b2ee      	uxtb	r6, r5
 80192b6:	d1ad      	bne.n	8019214 <D16_GENERIC+0x38>
 80192b8:	9d05      	ldr	r5, [sp, #20]
 80192ba:	f850 7b02 	ldr.w	r7, [r0], #2
 80192be:	2d00      	cmp	r5, #0
 80192c0:	d0ae      	beq.n	8019220 <D16_GENERIC+0x44>
 80192c2:	ba7f      	rev16	r7, r7
 80192c4:	e7ac      	b.n	8019220 <D16_GENERIC+0x44>
 80192c6:	2000      	movs	r0, #0
 80192c8:	9906      	ldr	r1, [sp, #24]
 80192ca:	61d3      	str	r3, [r2, #28]
 80192cc:	9b07      	ldr	r3, [sp, #28]
 80192ce:	f8c2 c008 	str.w	ip, [r2, #8]
 80192d2:	60d1      	str	r1, [r2, #12]
 80192d4:	6193      	str	r3, [r2, #24]
 80192d6:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 80192da:	b009      	add	sp, #36	; 0x24
 80192dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192e0:	00030001 	.word	0x00030001
 80192e4:	00010003 	.word	0x00010003
 80192e8:	24000000 	.word	0x24000000

080192ec <D24_GENERIC>:
 80192ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192f0:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 80192f4:	b089      	sub	sp, #36	; 0x24
 80192f6:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80192f8:	9303      	str	r3, [sp, #12]
 80192fa:	6993      	ldr	r3, [r2, #24]
 80192fc:	9104      	str	r1, [sp, #16]
 80192fe:	9307      	str	r3, [sp, #28]
 8019300:	69d1      	ldr	r1, [r2, #28]
 8019302:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8019306:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 801930a:	2e00      	cmp	r6, #0
 801930c:	f000 8088 	beq.w	8019420 <D24_GENERIC+0x134>
 8019310:	f005 0620 	and.w	r6, r5, #32
 8019314:	f005 0510 	and.w	r5, r5, #16
 8019318:	f04f 0c00 	mov.w	ip, #0
 801931c:	f8df e140 	ldr.w	lr, [pc, #320]	; 8019460 <D24_GENERIC+0x174>
 8019320:	9606      	str	r6, [sp, #24]
 8019322:	9505      	str	r5, [sp, #20]
 8019324:	e064      	b.n	80193f0 <D24_GENERIC+0x104>
 8019326:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 801932a:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801932e:	f810 b007 	ldrb.w	fp, [r0, r7]
 8019332:	042d      	lsls	r5, r5, #16
 8019334:	19f0      	adds	r0, r6, r7
 8019336:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 801933a:	44a9      	add	r9, r5
 801933c:	fa5f f689 	uxtb.w	r6, r9
 8019340:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8019344:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8019348:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 801934c:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8019350:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8019354:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8019358:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 801935c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8019360:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8019364:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8019368:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 801936c:	4d3a      	ldr	r5, [pc, #232]	; (8019458 <D24_GENERIC+0x16c>)
 801936e:	fb26 8705 	smlad	r7, r6, r5, r8
 8019372:	4d3a      	ldr	r5, [pc, #232]	; (801945c <D24_GENERIC+0x170>)
 8019374:	fb26 3805 	smlad	r8, r6, r5, r3
 8019378:	f3c1 0309 	ubfx	r3, r1, #0, #10
 801937c:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8019380:	2301      	movs	r3, #1
 8019382:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8019386:	fb26 f603 	smuad	r6, r6, r3
 801938a:	eb0c 0903 	add.w	r9, ip, r3
 801938e:	eb0b 0306 	add.w	r3, fp, r6
 8019392:	9e05      	ldr	r6, [sp, #20]
 8019394:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8019398:	b1ae      	cbz	r6, 80193c6 <D24_GENERIC+0xda>
 801939a:	442c      	add	r4, r5
 801939c:	9e03      	ldr	r6, [sp, #12]
 801939e:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80193a2:	1ba4      	subs	r4, r4, r6
 80193a4:	9503      	str	r5, [sp, #12]
 80193a6:	17e7      	asrs	r7, r4, #31
 80193a8:	fba4 450b 	umull	r4, r5, r4, fp
 80193ac:	e9cd 4500 	strd	r4, r5, [sp]
 80193b0:	fb0b 5407 	mla	r4, fp, r7, r5
 80193b4:	9401      	str	r4, [sp, #4]
 80193b6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80193ba:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80193be:	f145 0500 	adc.w	r5, r5, #0
 80193c2:	006c      	lsls	r4, r5, #1
 80193c4:	4625      	mov	r5, r4
 80193c6:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 80193ca:	03ad      	lsls	r5, r5, #14
 80193cc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80193d0:	2700      	movs	r7, #0
 80193d2:	fb0c fb0b 	mul.w	fp, ip, fp
 80193d6:	fa1f fc89 	uxth.w	ip, r9
 80193da:	fbca 6705 	smlal	r6, r7, sl, r5
 80193de:	9e04      	ldr	r6, [sp, #16]
 80193e0:	10bd      	asrs	r5, r7, #2
 80193e2:	f305 050f 	ssat	r5, #16, r5
 80193e6:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80193ea:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80193ec:	4565      	cmp	r5, ip
 80193ee:	d917      	bls.n	8019420 <D24_GENERIC+0x134>
 80193f0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80193f2:	f890 9000 	ldrb.w	r9, [r0]
 80193f6:	b2ef      	uxtb	r7, r5
 80193f8:	2d01      	cmp	r5, #1
 80193fa:	b23e      	sxth	r6, r7
 80193fc:	d193      	bne.n	8019326 <D24_GENERIC+0x3a>
 80193fe:	9d06      	ldr	r5, [sp, #24]
 8019400:	b1dd      	cbz	r5, 801943a <D24_GENERIC+0x14e>
 8019402:	78c7      	ldrb	r7, [r0, #3]
 8019404:	ea4f 2609 	mov.w	r6, r9, lsl #8
 8019408:	f01c 0f01 	tst.w	ip, #1
 801940c:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8019410:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8019414:	d11a      	bne.n	801944c <D24_GENERIC+0x160>
 8019416:	f890 9001 	ldrb.w	r9, [r0, #1]
 801941a:	3002      	adds	r0, #2
 801941c:	44b1      	add	r9, r6
 801941e:	e78d      	b.n	801933c <D24_GENERIC+0x50>
 8019420:	6093      	str	r3, [r2, #8]
 8019422:	2000      	movs	r0, #0
 8019424:	9b03      	ldr	r3, [sp, #12]
 8019426:	f8c2 800c 	str.w	r8, [r2, #12]
 801942a:	6153      	str	r3, [r2, #20]
 801942c:	9b07      	ldr	r3, [sp, #28]
 801942e:	61d1      	str	r1, [r2, #28]
 8019430:	6114      	str	r4, [r2, #16]
 8019432:	6193      	str	r3, [r2, #24]
 8019434:	b009      	add	sp, #36	; 0x24
 8019436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801943a:	7845      	ldrb	r5, [r0, #1]
 801943c:	3003      	adds	r0, #3
 801943e:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8019442:	022d      	lsls	r5, r5, #8
 8019444:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8019448:	44a9      	add	r9, r5
 801944a:	e777      	b.n	801933c <D24_GENERIC+0x50>
 801944c:	7886      	ldrb	r6, [r0, #2]
 801944e:	3004      	adds	r0, #4
 8019450:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8019454:	44a9      	add	r9, r5
 8019456:	e771      	b.n	801933c <D24_GENERIC+0x50>
 8019458:	00030001 	.word	0x00030001
 801945c:	00060007 	.word	0x00060007
 8019460:	24000000 	.word	0x24000000

08019464 <D32_GENERIC>:
 8019464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019468:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 801946c:	b089      	sub	sp, #36	; 0x24
 801946e:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8019470:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8019472:	9302      	str	r3, [sp, #8]
 8019474:	6993      	ldr	r3, [r2, #24]
 8019476:	9104      	str	r1, [sp, #16]
 8019478:	9307      	str	r3, [sp, #28]
 801947a:	9503      	str	r5, [sp, #12]
 801947c:	69d1      	ldr	r1, [r2, #28]
 801947e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8019480:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8019484:	2e00      	cmp	r6, #0
 8019486:	f000 8097 	beq.w	80195b8 <D32_GENERIC+0x154>
 801948a:	f005 0620 	and.w	r6, r5, #32
 801948e:	f005 0510 	and.w	r5, r5, #16
 8019492:	f04f 0e00 	mov.w	lr, #0
 8019496:	f8df c150 	ldr.w	ip, [pc, #336]	; 80195e8 <D32_GENERIC+0x184>
 801949a:	9606      	str	r6, [sp, #24]
 801949c:	9505      	str	r5, [sp, #20]
 801949e:	e079      	b.n	8019594 <D32_GENERIC+0x130>
 80194a0:	783d      	ldrb	r5, [r7, #0]
 80194a2:	f810 b009 	ldrb.w	fp, [r0, r9]
 80194a6:	042d      	lsls	r5, r5, #16
 80194a8:	f810 a006 	ldrb.w	sl, [r0, r6]
 80194ac:	f890 9000 	ldrb.w	r9, [r0]
 80194b0:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 80194b4:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 80194b8:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 80194bc:	44a9      	add	r9, r5
 80194be:	fa5f f789 	uxtb.w	r7, r9
 80194c2:	f3c9 2507 	ubfx	r5, r9, #8, #8
 80194c6:	f3c9 4607 	ubfx	r6, r9, #16, #8
 80194ca:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80194ce:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 80194d2:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 80194d6:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 80194da:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80194de:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 80194e2:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80194e6:	f3c1 0909 	ubfx	r9, r1, #0, #10
 80194ea:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 80194ee:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80194f2:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 80194f6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80194fa:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 80194fe:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8019502:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8019506:	4d34      	ldr	r5, [pc, #208]	; (80195d8 <D32_GENERIC+0x174>)
 8019508:	fb29 8805 	smlad	r8, r9, r5, r8
 801950c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8019510:	fb26 8705 	smlad	r7, r6, r5, r8
 8019514:	4d31      	ldr	r5, [pc, #196]	; (80195dc <D32_GENERIC+0x178>)
 8019516:	fb29 3305 	smlad	r3, r9, r5, r3
 801951a:	4d31      	ldr	r5, [pc, #196]	; (80195e0 <D32_GENERIC+0x17c>)
 801951c:	fb26 3805 	smlad	r8, r6, r5, r3
 8019520:	2301      	movs	r3, #1
 8019522:	fb29 f903 	smuad	r9, r9, r3
 8019526:	4b2f      	ldr	r3, [pc, #188]	; (80195e4 <D32_GENERIC+0x180>)
 8019528:	fb26 9303 	smlad	r3, r6, r3, r9
 801952c:	9e05      	ldr	r6, [sp, #20]
 801952e:	f10e 0901 	add.w	r9, lr, #1
 8019532:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 8019536:	b1ae      	cbz	r6, 8019564 <D32_GENERIC+0x100>
 8019538:	442c      	add	r4, r5
 801953a:	9e02      	ldr	r6, [sp, #8]
 801953c:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8019540:	1ba4      	subs	r4, r4, r6
 8019542:	9502      	str	r5, [sp, #8]
 8019544:	17e7      	asrs	r7, r4, #31
 8019546:	fba4 450a 	umull	r4, r5, r4, sl
 801954a:	e9cd 4500 	strd	r4, r5, [sp]
 801954e:	fb0a 5407 	mla	r4, sl, r7, r5
 8019552:	9401      	str	r4, [sp, #4]
 8019554:	e9dd 4500 	ldrd	r4, r5, [sp]
 8019558:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 801955c:	f145 0500 	adc.w	r5, r5, #0
 8019560:	006c      	lsls	r4, r5, #1
 8019562:	4625      	mov	r5, r4
 8019564:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8019568:	036d      	lsls	r5, r5, #13
 801956a:	9f03      	ldr	r7, [sp, #12]
 801956c:	fb0e fb0a 	mul.w	fp, lr, sl
 8019570:	fa1f fe89 	uxth.w	lr, r9
 8019574:	f04f 0a00 	mov.w	sl, #0
 8019578:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 801957c:	9e04      	ldr	r6, [sp, #16]
 801957e:	fbc7 9a05 	smlal	r9, sl, r7, r5
 8019582:	4657      	mov	r7, sl
 8019584:	10bd      	asrs	r5, r7, #2
 8019586:	f305 050f 	ssat	r5, #16, r5
 801958a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 801958e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8019590:	4575      	cmp	r5, lr
 8019592:	d911      	bls.n	80195b8 <D32_GENERIC+0x154>
 8019594:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8019596:	b2ee      	uxtb	r6, r5
 8019598:	2d01      	cmp	r5, #1
 801959a:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 801959e:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 80195a2:	f47f af7d 	bne.w	80194a0 <D32_GENERIC+0x3c>
 80195a6:	1d05      	adds	r5, r0, #4
 80195a8:	f8d0 9000 	ldr.w	r9, [r0]
 80195ac:	9806      	ldr	r0, [sp, #24]
 80195ae:	b180      	cbz	r0, 80195d2 <D32_GENERIC+0x16e>
 80195b0:	fa99 f999 	rev16.w	r9, r9
 80195b4:	4628      	mov	r0, r5
 80195b6:	e782      	b.n	80194be <D32_GENERIC+0x5a>
 80195b8:	6093      	str	r3, [r2, #8]
 80195ba:	2000      	movs	r0, #0
 80195bc:	9b02      	ldr	r3, [sp, #8]
 80195be:	f8c2 800c 	str.w	r8, [r2, #12]
 80195c2:	6153      	str	r3, [r2, #20]
 80195c4:	9b07      	ldr	r3, [sp, #28]
 80195c6:	61d1      	str	r1, [r2, #28]
 80195c8:	6114      	str	r4, [r2, #16]
 80195ca:	6193      	str	r3, [r2, #24]
 80195cc:	b009      	add	sp, #36	; 0x24
 80195ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195d2:	4628      	mov	r0, r5
 80195d4:	e773      	b.n	80194be <D32_GENERIC+0x5a>
 80195d6:	bf00      	nop
 80195d8:	00060003 	.word	0x00060003
 80195dc:	000a000c 	.word	0x000a000c
 80195e0:	000c000a 	.word	0x000c000a
 80195e4:	00030006 	.word	0x00030006
 80195e8:	24000000 	.word	0x24000000

080195ec <D48_GENERIC>:
 80195ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195f0:	6913      	ldr	r3, [r2, #16]
 80195f2:	b089      	sub	sp, #36	; 0x24
 80195f4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80195f6:	9301      	str	r3, [sp, #4]
 80195f8:	6953      	ldr	r3, [r2, #20]
 80195fa:	9104      	str	r1, [sp, #16]
 80195fc:	9302      	str	r3, [sp, #8]
 80195fe:	6993      	ldr	r3, [r2, #24]
 8019600:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8019604:	9307      	str	r3, [sp, #28]
 8019606:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 801960a:	9100      	str	r1, [sp, #0]
 801960c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801960e:	9103      	str	r1, [sp, #12]
 8019610:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8019612:	2c00      	cmp	r4, #0
 8019614:	f000 80be 	beq.w	8019794 <D48_GENERIC+0x1a8>
 8019618:	f001 0420 	and.w	r4, r1, #32
 801961c:	f001 0110 	and.w	r1, r1, #16
 8019620:	f04f 0e00 	mov.w	lr, #0
 8019624:	9105      	str	r1, [sp, #20]
 8019626:	9406      	str	r4, [sp, #24]
 8019628:	4962      	ldr	r1, [pc, #392]	; (80197b4 <D48_GENERIC+0x1c8>)
 801962a:	e0a0      	b.n	801976e <D48_GENERIC+0x182>
 801962c:	eb00 0608 	add.w	r6, r0, r8
 8019630:	f810 a008 	ldrb.w	sl, [r0, r8]
 8019634:	f810 9005 	ldrb.w	r9, [r0, r5]
 8019638:	5df4      	ldrb	r4, [r6, r7]
 801963a:	443e      	add	r6, r7
 801963c:	f890 b000 	ldrb.w	fp, [r0]
 8019640:	0420      	lsls	r0, r4, #16
 8019642:	eb06 0408 	add.w	r4, r6, r8
 8019646:	f816 6008 	ldrb.w	r6, [r6, r8]
 801964a:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 801964e:	f814 8007 	ldrb.w	r8, [r4, r7]
 8019652:	4427      	add	r7, r4
 8019654:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8019658:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 801965c:	eb0a 040b 	add.w	r4, sl, fp
 8019660:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 8019664:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8019668:	b2f7      	uxtb	r7, r6
 801966a:	b2e6      	uxtb	r6, r4
 801966c:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8019670:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8019674:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8019678:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801967c:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8019680:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8019684:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8019688:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 801968c:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8019690:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8019694:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 8019698:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801969c:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80196a0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80196a4:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 80196a8:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80196ac:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80196b0:	9d00      	ldr	r5, [sp, #0]
 80196b2:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80196b6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80196ba:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 80196be:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80196c2:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 80196c6:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80196ca:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80196ce:	4c3a      	ldr	r4, [pc, #232]	; (80197b8 <D48_GENERIC+0x1cc>)
 80196d0:	fb26 5a04 	smlad	sl, r6, r4, r5
 80196d4:	4c39      	ldr	r4, [pc, #228]	; (80197bc <D48_GENERIC+0x1d0>)
 80196d6:	fb29 aa04 	smlad	sl, r9, r4, sl
 80196da:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80196de:	fb27 aa04 	smlad	sl, r7, r4, sl
 80196e2:	4c37      	ldr	r4, [pc, #220]	; (80197c0 <D48_GENERIC+0x1d4>)
 80196e4:	fb26 3304 	smlad	r3, r6, r4, r3
 80196e8:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80196ec:	fb29 3304 	smlad	r3, r9, r4, r3
 80196f0:	4c34      	ldr	r4, [pc, #208]	; (80197c4 <D48_GENERIC+0x1d8>)
 80196f2:	fb27 3304 	smlad	r3, r7, r4, r3
 80196f6:	2501      	movs	r5, #1
 80196f8:	9300      	str	r3, [sp, #0]
 80196fa:	fb26 f605 	smuad	r6, r6, r5
 80196fe:	4b32      	ldr	r3, [pc, #200]	; (80197c8 <D48_GENERIC+0x1dc>)
 8019700:	fb29 6903 	smlad	r9, r9, r3, r6
 8019704:	4b31      	ldr	r3, [pc, #196]	; (80197cc <D48_GENERIC+0x1e0>)
 8019706:	fb27 9303 	smlad	r3, r7, r3, r9
 801970a:	9c05      	ldr	r4, [sp, #20]
 801970c:	eb0e 0805 	add.w	r8, lr, r5
 8019710:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 8019714:	b19c      	cbz	r4, 801973e <D48_GENERIC+0x152>
 8019716:	9c01      	ldr	r4, [sp, #4]
 8019718:	9d02      	ldr	r5, [sp, #8]
 801971a:	4454      	add	r4, sl
 801971c:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8019720:	f8cd a008 	str.w	sl, [sp, #8]
 8019724:	1b64      	subs	r4, r4, r5
 8019726:	fba4 ab09 	umull	sl, fp, r4, r9
 801972a:	17e7      	asrs	r7, r4, #31
 801972c:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 8019730:	fb09 bb07 	mla	fp, r9, r7, fp
 8019734:	f14b 0500 	adc.w	r5, fp, #0
 8019738:	006c      	lsls	r4, r5, #1
 801973a:	46a2      	mov	sl, r4
 801973c:	9401      	str	r4, [sp, #4]
 801973e:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8019740:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8019744:	9d03      	ldr	r5, [sp, #12]
 8019746:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 801974a:	fb0e f606 	mul.w	r6, lr, r6
 801974e:	fa1f fe88 	uxth.w	lr, r8
 8019752:	f04f 0800 	mov.w	r8, #0
 8019756:	fbc5 780a 	smlal	r7, r8, r5, sl
 801975a:	4645      	mov	r5, r8
 801975c:	10ac      	asrs	r4, r5, #2
 801975e:	9d04      	ldr	r5, [sp, #16]
 8019760:	f304 040f 	ssat	r4, #16, r4
 8019764:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8019768:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 801976a:	4574      	cmp	r4, lr
 801976c:	d912      	bls.n	8019794 <D48_GENERIC+0x1a8>
 801976e:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8019770:	b2e5      	uxtb	r5, r4
 8019772:	2c01      	cmp	r4, #1
 8019774:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8019778:	f1c5 0700 	rsb	r7, r5, #0
 801977c:	f47f af56 	bne.w	801962c <D48_GENERIC+0x40>
 8019780:	9d06      	ldr	r5, [sp, #24]
 8019782:	e9d0 4600 	ldrd	r4, r6, [r0]
 8019786:	3006      	adds	r0, #6
 8019788:	2d00      	cmp	r5, #0
 801978a:	f43f af6b 	beq.w	8019664 <D48_GENERIC+0x78>
 801978e:	ba64      	rev16	r4, r4
 8019790:	ba76      	rev16	r6, r6
 8019792:	e767      	b.n	8019664 <D48_GENERIC+0x78>
 8019794:	6093      	str	r3, [r2, #8]
 8019796:	2000      	movs	r0, #0
 8019798:	9b00      	ldr	r3, [sp, #0]
 801979a:	f8c2 c01c 	str.w	ip, [r2, #28]
 801979e:	60d3      	str	r3, [r2, #12]
 80197a0:	9b01      	ldr	r3, [sp, #4]
 80197a2:	6113      	str	r3, [r2, #16]
 80197a4:	9b02      	ldr	r3, [sp, #8]
 80197a6:	6153      	str	r3, [r2, #20]
 80197a8:	9b07      	ldr	r3, [sp, #28]
 80197aa:	6193      	str	r3, [r2, #24]
 80197ac:	b009      	add	sp, #36	; 0x24
 80197ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197b2:	bf00      	nop
 80197b4:	24000000 	.word	0x24000000
 80197b8:	000f000a 	.word	0x000f000a
 80197bc:	00060003 	.word	0x00060003
 80197c0:	00150019 	.word	0x00150019
 80197c4:	00190015 	.word	0x00190015
 80197c8:	00030006 	.word	0x00030006
 80197cc:	000a000f 	.word	0x000a000f

080197d0 <D64_GENERIC>:
 80197d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197d4:	6913      	ldr	r3, [r2, #16]
 80197d6:	b089      	sub	sp, #36	; 0x24
 80197d8:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80197da:	9300      	str	r3, [sp, #0]
 80197dc:	6953      	ldr	r3, [r2, #20]
 80197de:	9105      	str	r1, [sp, #20]
 80197e0:	9303      	str	r3, [sp, #12]
 80197e2:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 80197e4:	6993      	ldr	r3, [r2, #24]
 80197e6:	69d4      	ldr	r4, [r2, #28]
 80197e8:	9307      	str	r3, [sp, #28]
 80197ea:	9504      	str	r5, [sp, #16]
 80197ec:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 80197f0:	2900      	cmp	r1, #0
 80197f2:	f000 80e8 	beq.w	80199c6 <D64_GENERIC+0x1f6>
 80197f6:	6a11      	ldr	r1, [r2, #32]
 80197f8:	2500      	movs	r5, #0
 80197fa:	46b3      	mov	fp, r6
 80197fc:	9302      	str	r3, [sp, #8]
 80197fe:	9106      	str	r1, [sp, #24]
 8019800:	4978      	ldr	r1, [pc, #480]	; (80199e4 <D64_GENERIC+0x214>)
 8019802:	e0cc      	b.n	801999e <D64_GENERIC+0x1ce>
 8019804:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 8019808:	f1ce 0c00 	rsb	ip, lr, #0
 801980c:	f890 9000 	ldrb.w	r9, [r0]
 8019810:	eb00 0708 	add.w	r7, r0, r8
 8019814:	f810 6008 	ldrb.w	r6, [r0, r8]
 8019818:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 801981c:	f817 000c 	ldrb.w	r0, [r7, ip]
 8019820:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 8019824:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8019828:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 801982c:	ea4f 4800 	mov.w	r8, r0, lsl #16
 8019830:	f817 000c 	ldrb.w	r0, [r7, ip]
 8019834:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8019838:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 801983c:	0400      	lsls	r0, r0, #16
 801983e:	4467      	add	r7, ip
 8019840:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8019844:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8019848:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 801984c:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8019850:	444e      	add	r6, r9
 8019852:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 8019856:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 801985a:	44c2      	add	sl, r8
 801985c:	b2f7      	uxtb	r7, r6
 801985e:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8019862:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8019866:	0e36      	lsrs	r6, r6, #24
 8019868:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801986c:	fa5f fc8a 	uxtb.w	ip, sl
 8019870:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8019874:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8019878:	443c      	add	r4, r7
 801987a:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 801987e:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8019882:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8019886:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 801988a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801988e:	4b56      	ldr	r3, [pc, #344]	; (80199e8 <D64_GENERIC+0x218>)
 8019890:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 8019894:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8019898:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 801989c:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 80198a0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80198a4:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 80198a8:	f3ca 4407 	ubfx	r4, sl, #16, #8
 80198ac:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80198b0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80198b4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80198b8:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80198bc:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 80198c0:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80198c4:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 80198c8:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 80198cc:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 80198d0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80198d4:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 80198d8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80198dc:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 80198e0:	f3c9 0709 	ubfx	r7, r9, #0, #10
 80198e4:	ea4f 2499 	mov.w	r4, r9, lsr #10
 80198e8:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 80198ec:	fb28 b903 	smlad	r9, r8, r3, fp
 80198f0:	4b3e      	ldr	r3, [pc, #248]	; (80199ec <D64_GENERIC+0x21c>)
 80198f2:	fb26 9903 	smlad	r9, r6, r3, r9
 80198f6:	4b3e      	ldr	r3, [pc, #248]	; (80199f0 <D64_GENERIC+0x220>)
 80198f8:	fb2c 9703 	smlad	r7, ip, r3, r9
 80198fc:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8019900:	fb2a 7909 	smlad	r9, sl, r9, r7
 8019904:	4f3b      	ldr	r7, [pc, #236]	; (80199f4 <D64_GENERIC+0x224>)
 8019906:	9b02      	ldr	r3, [sp, #8]
 8019908:	fb28 3307 	smlad	r3, r8, r7, r3
 801990c:	fb2a 3317 	smladx	r3, sl, r7, r3
 8019910:	4f39      	ldr	r7, [pc, #228]	; (80199f8 <D64_GENERIC+0x228>)
 8019912:	fb26 3307 	smlad	r3, r6, r7, r3
 8019916:	fb2c 3b17 	smladx	fp, ip, r7, r3
 801991a:	f04f 0e01 	mov.w	lr, #1
 801991e:	fb28 f80e 	smuad	r8, r8, lr
 8019922:	4b36      	ldr	r3, [pc, #216]	; (80199fc <D64_GENERIC+0x22c>)
 8019924:	fb26 8603 	smlad	r6, r6, r3, r8
 8019928:	4b35      	ldr	r3, [pc, #212]	; (8019a00 <D64_GENERIC+0x230>)
 801992a:	fb2c 6c03 	smlad	ip, ip, r3, r6
 801992e:	4b35      	ldr	r3, [pc, #212]	; (8019a04 <D64_GENERIC+0x234>)
 8019930:	fb2a c303 	smlad	r3, sl, r3, ip
 8019934:	9f06      	ldr	r7, [sp, #24]
 8019936:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 801993a:	9302      	str	r3, [sp, #8]
 801993c:	b1cf      	cbz	r7, 8019972 <D64_GENERIC+0x1a2>
 801993e:	9b00      	ldr	r3, [sp, #0]
 8019940:	444b      	add	r3, r9
 8019942:	461e      	mov	r6, r3
 8019944:	9b03      	ldr	r3, [sp, #12]
 8019946:	f8cd 900c 	str.w	r9, [sp, #12]
 801994a:	1af6      	subs	r6, r6, r3
 801994c:	46b0      	mov	r8, r6
 801994e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8019952:	e9cd 8900 	strd	r8, r9, [sp]
 8019956:	fba6 8907 	umull	r8, r9, r6, r7
 801995a:	9e01      	ldr	r6, [sp, #4]
 801995c:	fb07 9306 	mla	r3, r7, r6, r9
 8019960:	4646      	mov	r6, r8
 8019962:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8019966:	f143 0700 	adc.w	r7, r3, #0
 801996a:	fa07 f30e 	lsl.w	r3, r7, lr
 801996e:	4699      	mov	r9, r3
 8019970:	9300      	str	r3, [sp, #0]
 8019972:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 8019976:	ea4f 2989 	mov.w	r9, r9, lsl #10
 801997a:	9b04      	ldr	r3, [sp, #16]
 801997c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019980:	2700      	movs	r7, #0
 8019982:	fb05 fc0c 	mul.w	ip, r5, ip
 8019986:	3501      	adds	r5, #1
 8019988:	fbc3 6709 	smlal	r6, r7, r3, r9
 801998c:	9b05      	ldr	r3, [sp, #20]
 801998e:	10be      	asrs	r6, r7, #2
 8019990:	f306 060f 	ssat	r6, #16, r6
 8019994:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8019998:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 801999a:	42ae      	cmp	r6, r5
 801999c:	dd11      	ble.n	80199c2 <D64_GENERIC+0x1f2>
 801999e:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 80199a2:	f1be 0f01 	cmp.w	lr, #1
 80199a6:	f47f af2d 	bne.w	8019804 <D64_GENERIC+0x34>
 80199aa:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80199ac:	f100 0c08 	add.w	ip, r0, #8
 80199b0:	06bb      	lsls	r3, r7, #26
 80199b2:	e9d0 6a00 	ldrd	r6, sl, [r0]
 80199b6:	d513      	bpl.n	80199e0 <D64_GENERIC+0x210>
 80199b8:	ba76      	rev16	r6, r6
 80199ba:	fa9a fa9a 	rev16.w	sl, sl
 80199be:	4660      	mov	r0, ip
 80199c0:	e74c      	b.n	801985c <D64_GENERIC+0x8c>
 80199c2:	465e      	mov	r6, fp
 80199c4:	9b02      	ldr	r3, [sp, #8]
 80199c6:	6093      	str	r3, [r2, #8]
 80199c8:	2000      	movs	r0, #0
 80199ca:	9b00      	ldr	r3, [sp, #0]
 80199cc:	60d6      	str	r6, [r2, #12]
 80199ce:	6113      	str	r3, [r2, #16]
 80199d0:	9b03      	ldr	r3, [sp, #12]
 80199d2:	61d4      	str	r4, [r2, #28]
 80199d4:	6153      	str	r3, [r2, #20]
 80199d6:	9b07      	ldr	r3, [sp, #28]
 80199d8:	6193      	str	r3, [r2, #24]
 80199da:	b009      	add	sp, #36	; 0x24
 80199dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199e0:	4660      	mov	r0, ip
 80199e2:	e73b      	b.n	801985c <D64_GENERIC+0x8c>
 80199e4:	24000000 	.word	0x24000000
 80199e8:	001c0015 	.word	0x001c0015
 80199ec:	000f000a 	.word	0x000f000a
 80199f0:	00060003 	.word	0x00060003
 80199f4:	0024002a 	.word	0x0024002a
 80199f8:	002e0030 	.word	0x002e0030
 80199fc:	00030006 	.word	0x00030006
 8019a00:	000a000f 	.word	0x000a000f
 8019a04:	0015001c 	.word	0x0015001c

08019a08 <D80_GENERIC>:
 8019a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a0c:	b08b      	sub	sp, #44	; 0x2c
 8019a0e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8019a10:	9107      	str	r1, [sp, #28]
 8019a12:	6911      	ldr	r1, [r2, #16]
 8019a14:	9104      	str	r1, [sp, #16]
 8019a16:	6951      	ldr	r1, [r2, #20]
 8019a18:	9105      	str	r1, [sp, #20]
 8019a1a:	6991      	ldr	r1, [r2, #24]
 8019a1c:	9109      	str	r1, [sp, #36]	; 0x24
 8019a1e:	69d1      	ldr	r1, [r2, #28]
 8019a20:	9102      	str	r1, [sp, #8]
 8019a22:	6891      	ldr	r1, [r2, #8]
 8019a24:	9103      	str	r1, [sp, #12]
 8019a26:	68d1      	ldr	r1, [r2, #12]
 8019a28:	9101      	str	r1, [sp, #4]
 8019a2a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8019a2c:	9106      	str	r1, [sp, #24]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	f000 810b 	beq.w	8019c4a <D80_GENERIC+0x242>
 8019a34:	6a13      	ldr	r3, [r2, #32]
 8019a36:	f04f 0800 	mov.w	r8, #0
 8019a3a:	f8df c260 	ldr.w	ip, [pc, #608]	; 8019c9c <D80_GENERIC+0x294>
 8019a3e:	9308      	str	r3, [sp, #32]
 8019a40:	9200      	str	r2, [sp, #0]
 8019a42:	e0ee      	b.n	8019c22 <D80_GENERIC+0x21a>
 8019a44:	b2db      	uxtb	r3, r3
 8019a46:	f890 e000 	ldrb.w	lr, [r0]
 8019a4a:	b219      	sxth	r1, r3
 8019a4c:	425c      	negs	r4, r3
 8019a4e:	f810 9003 	ldrb.w	r9, [r0, r3]
 8019a52:	004e      	lsls	r6, r1, #1
 8019a54:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8019a58:	4431      	add	r1, r6
 8019a5a:	1843      	adds	r3, r0, r1
 8019a5c:	f810 b001 	ldrb.w	fp, [r0, r1]
 8019a60:	1919      	adds	r1, r3, r4
 8019a62:	5d1b      	ldrb	r3, [r3, r4]
 8019a64:	1948      	adds	r0, r1, r5
 8019a66:	f811 a005 	ldrb.w	sl, [r1, r5]
 8019a6a:	041b      	lsls	r3, r3, #16
 8019a6c:	1907      	adds	r7, r0, r4
 8019a6e:	5d01      	ldrb	r1, [r0, r4]
 8019a70:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8019a74:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8019a78:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8019a7c:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8019a80:	0409      	lsls	r1, r1, #16
 8019a82:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8019a86:	eb0b 0905 	add.w	r9, fp, r5
 8019a8a:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8019a8e:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8019a92:	eb09 0b04 	add.w	fp, r9, r4
 8019a96:	f819 4004 	ldrb.w	r4, [r9, r4]
 8019a9a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8019a9e:	4473      	add	r3, lr
 8019aa0:	eb0b 0006 	add.w	r0, fp, r6
 8019aa4:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8019aa8:	4439      	add	r1, r7
 8019aaa:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8019aae:	b2df      	uxtb	r7, r3
 8019ab0:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8019ab4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8019ab8:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8019abc:	fa5f fa81 	uxtb.w	sl, r1
 8019ac0:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8019ac4:	9c02      	ldr	r4, [sp, #8]
 8019ac6:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8019aca:	441c      	add	r4, r3
 8019acc:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8019ad0:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8019ad4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019ad8:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8019adc:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8019ae0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8019ae4:	b2ed      	uxtb	r5, r5
 8019ae6:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8019aea:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8019aee:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8019af2:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8019af6:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8019afa:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8019afe:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8019b02:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8019b06:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8019b0a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8019b0e:	0e09      	lsrs	r1, r1, #24
 8019b10:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8019b14:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8019b18:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8019b1c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8019b20:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8019b24:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8019b28:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8019b2c:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8019b30:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8019b34:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8019b38:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8019b3c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8019b40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8019b44:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8019b48:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8019b4c:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8019b50:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8019b54:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8019b58:	9202      	str	r2, [sp, #8]
 8019b5a:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8019b5e:	4a43      	ldr	r2, [pc, #268]	; (8019c6c <D80_GENERIC+0x264>)
 8019b60:	9f01      	ldr	r7, [sp, #4]
 8019b62:	fb23 7a02 	smlad	sl, r3, r2, r7
 8019b66:	4a42      	ldr	r2, [pc, #264]	; (8019c70 <D80_GENERIC+0x268>)
 8019b68:	fb26 aa02 	smlad	sl, r6, r2, sl
 8019b6c:	4a41      	ldr	r2, [pc, #260]	; (8019c74 <D80_GENERIC+0x26c>)
 8019b6e:	fb24 aa02 	smlad	sl, r4, r2, sl
 8019b72:	4a41      	ldr	r2, [pc, #260]	; (8019c78 <D80_GENERIC+0x270>)
 8019b74:	fb21 a702 	smlad	r7, r1, r2, sl
 8019b78:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8019b7c:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8019b80:	4a3e      	ldr	r2, [pc, #248]	; (8019c7c <D80_GENERIC+0x274>)
 8019b82:	9f03      	ldr	r7, [sp, #12]
 8019b84:	fb23 7e02 	smlad	lr, r3, r2, r7
 8019b88:	4a3d      	ldr	r2, [pc, #244]	; (8019c80 <D80_GENERIC+0x278>)
 8019b8a:	fb26 ee02 	smlad	lr, r6, r2, lr
 8019b8e:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 8019b92:	fb24 e707 	smlad	r7, r4, r7, lr
 8019b96:	4a3b      	ldr	r2, [pc, #236]	; (8019c84 <D80_GENERIC+0x27c>)
 8019b98:	fb21 7702 	smlad	r7, r1, r2, r7
 8019b9c:	4a3a      	ldr	r2, [pc, #232]	; (8019c88 <D80_GENERIC+0x280>)
 8019b9e:	fb25 7202 	smlad	r2, r5, r2, r7
 8019ba2:	f04f 0901 	mov.w	r9, #1
 8019ba6:	9201      	str	r2, [sp, #4]
 8019ba8:	fb23 f909 	smuad	r9, r3, r9
 8019bac:	4b37      	ldr	r3, [pc, #220]	; (8019c8c <D80_GENERIC+0x284>)
 8019bae:	fb26 9603 	smlad	r6, r6, r3, r9
 8019bb2:	4f37      	ldr	r7, [pc, #220]	; (8019c90 <D80_GENERIC+0x288>)
 8019bb4:	fb24 6407 	smlad	r4, r4, r7, r6
 8019bb8:	4f36      	ldr	r7, [pc, #216]	; (8019c94 <D80_GENERIC+0x28c>)
 8019bba:	fb21 4707 	smlad	r7, r1, r7, r4
 8019bbe:	4936      	ldr	r1, [pc, #216]	; (8019c98 <D80_GENERIC+0x290>)
 8019bc0:	fb25 7301 	smlad	r3, r5, r1, r7
 8019bc4:	9303      	str	r3, [sp, #12]
 8019bc6:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8019bca:	9b08      	ldr	r3, [sp, #32]
 8019bcc:	b193      	cbz	r3, 8019bf4 <D80_GENERIC+0x1ec>
 8019bce:	9a04      	ldr	r2, [sp, #16]
 8019bd0:	4452      	add	r2, sl
 8019bd2:	4614      	mov	r4, r2
 8019bd4:	9a05      	ldr	r2, [sp, #20]
 8019bd6:	f8cd a014 	str.w	sl, [sp, #20]
 8019bda:	1aa4      	subs	r4, r4, r2
 8019bdc:	fba4 1203 	umull	r1, r2, r4, r3
 8019be0:	17e7      	asrs	r7, r4, #31
 8019be2:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 8019be6:	fb03 2207 	mla	r2, r3, r7, r2
 8019bea:	f142 0500 	adc.w	r5, r2, #0
 8019bee:	006b      	lsls	r3, r5, #1
 8019bf0:	469a      	mov	sl, r3
 8019bf2:	9304      	str	r3, [sp, #16]
 8019bf4:	9e00      	ldr	r6, [sp, #0]
 8019bf6:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8019bfa:	9a06      	ldr	r2, [sp, #24]
 8019bfc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019c00:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8019c02:	2500      	movs	r5, #0
 8019c04:	fb08 f303 	mul.w	r3, r8, r3
 8019c08:	fbc2 450a 	smlal	r4, r5, r2, sl
 8019c0c:	9a07      	ldr	r2, [sp, #28]
 8019c0e:	f108 0801 	add.w	r8, r8, #1
 8019c12:	10a9      	asrs	r1, r5, #2
 8019c14:	f301 010f 	ssat	r1, #16, r1
 8019c18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8019c1c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8019c1e:	4543      	cmp	r3, r8
 8019c20:	dd12      	ble.n	8019c48 <D80_GENERIC+0x240>
 8019c22:	9b00      	ldr	r3, [sp, #0]
 8019c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019c26:	2b01      	cmp	r3, #1
 8019c28:	f47f af0c 	bne.w	8019a44 <D80_GENERIC+0x3c>
 8019c2c:	9b00      	ldr	r3, [sp, #0]
 8019c2e:	6885      	ldr	r5, [r0, #8]
 8019c30:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8019c32:	06b2      	lsls	r2, r6, #26
 8019c34:	e9d0 3100 	ldrd	r3, r1, [r0]
 8019c38:	f100 000a 	add.w	r0, r0, #10
 8019c3c:	f57f af35 	bpl.w	8019aaa <D80_GENERIC+0xa2>
 8019c40:	ba5b      	rev16	r3, r3
 8019c42:	ba49      	rev16	r1, r1
 8019c44:	ba6d      	rev16	r5, r5
 8019c46:	e730      	b.n	8019aaa <D80_GENERIC+0xa2>
 8019c48:	4632      	mov	r2, r6
 8019c4a:	9b03      	ldr	r3, [sp, #12]
 8019c4c:	2000      	movs	r0, #0
 8019c4e:	6093      	str	r3, [r2, #8]
 8019c50:	9b01      	ldr	r3, [sp, #4]
 8019c52:	60d3      	str	r3, [r2, #12]
 8019c54:	9b02      	ldr	r3, [sp, #8]
 8019c56:	61d3      	str	r3, [r2, #28]
 8019c58:	9b04      	ldr	r3, [sp, #16]
 8019c5a:	6113      	str	r3, [r2, #16]
 8019c5c:	9b05      	ldr	r3, [sp, #20]
 8019c5e:	6153      	str	r3, [r2, #20]
 8019c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c62:	6193      	str	r3, [r2, #24]
 8019c64:	b00b      	add	sp, #44	; 0x2c
 8019c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c6a:	bf00      	nop
 8019c6c:	002d0024 	.word	0x002d0024
 8019c70:	001c0015 	.word	0x001c0015
 8019c74:	000f000a 	.word	0x000f000a
 8019c78:	00060003 	.word	0x00060003
 8019c7c:	0037003f 	.word	0x0037003f
 8019c80:	00450049 	.word	0x00450049
 8019c84:	00490045 	.word	0x00490045
 8019c88:	003f0037 	.word	0x003f0037
 8019c8c:	00030006 	.word	0x00030006
 8019c90:	000a000f 	.word	0x000a000f
 8019c94:	0015001c 	.word	0x0015001c
 8019c98:	0024002d 	.word	0x0024002d
 8019c9c:	24000000 	.word	0x24000000

08019ca0 <D128_GENERIC>:
 8019ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ca4:	b08d      	sub	sp, #52	; 0x34
 8019ca6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8019ca8:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8019cac:	9109      	str	r1, [sp, #36]	; 0x24
 8019cae:	6911      	ldr	r1, [r2, #16]
 8019cb0:	9201      	str	r2, [sp, #4]
 8019cb2:	9106      	str	r1, [sp, #24]
 8019cb4:	6951      	ldr	r1, [r2, #20]
 8019cb6:	9107      	str	r1, [sp, #28]
 8019cb8:	6991      	ldr	r1, [r2, #24]
 8019cba:	910b      	str	r1, [sp, #44]	; 0x2c
 8019cbc:	6891      	ldr	r1, [r2, #8]
 8019cbe:	9103      	str	r1, [sp, #12]
 8019cc0:	68d1      	ldr	r1, [r2, #12]
 8019cc2:	9102      	str	r1, [sp, #8]
 8019cc4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8019cc6:	9108      	str	r1, [sp, #32]
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	f000 8183 	beq.w	8019fd4 <D128_GENERIC+0x334>
 8019cce:	2300      	movs	r3, #0
 8019cd0:	6a12      	ldr	r2, [r2, #32]
 8019cd2:	4681      	mov	r9, r0
 8019cd4:	920a      	str	r2, [sp, #40]	; 0x28
 8019cd6:	e9cd a304 	strd	sl, r3, [sp, #16]
 8019cda:	e165      	b.n	8019fa8 <D128_GENERIC+0x308>
 8019cdc:	b2d2      	uxtb	r2, r2
 8019cde:	f899 b000 	ldrb.w	fp, [r9]
 8019ce2:	b213      	sxth	r3, r2
 8019ce4:	4255      	negs	r5, r2
 8019ce6:	f819 0002 	ldrb.w	r0, [r9, r2]
 8019cea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019cee:	009f      	lsls	r7, r3, #2
 8019cf0:	eb09 0402 	add.w	r4, r9, r2
 8019cf4:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8019cf8:	f819 8002 	ldrb.w	r8, [r9, r2]
 8019cfc:	443b      	add	r3, r7
 8019cfe:	1962      	adds	r2, r4, r5
 8019d00:	5d64      	ldrb	r4, [r4, r5]
 8019d02:	eb02 0c03 	add.w	ip, r2, r3
 8019d06:	0424      	lsls	r4, r4, #16
 8019d08:	5cd3      	ldrb	r3, [r2, r3]
 8019d0a:	eb0c 0e05 	add.w	lr, ip, r5
 8019d0e:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 8019d12:	f81c 2005 	ldrb.w	r2, [ip, r5]
 8019d16:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 8019d1a:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 8019d1e:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 8019d22:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8019d26:	eb0c 0e06 	add.w	lr, ip, r6
 8019d2a:	f81c a006 	ldrb.w	sl, [ip, r6]
 8019d2e:	0412      	lsls	r2, r2, #16
 8019d30:	445c      	add	r4, fp
 8019d32:	eb0e 0c05 	add.w	ip, lr, r5
 8019d36:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 8019d3a:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8019d3e:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 8019d42:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8019d46:	041b      	lsls	r3, r3, #16
 8019d48:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8019d4c:	eb00 0b06 	add.w	fp, r0, r6
 8019d50:	5d80      	ldrb	r0, [r0, r6]
 8019d52:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 8019d56:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8019d5a:	eb0b 0a05 	add.w	sl, fp, r5
 8019d5e:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 8019d62:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 8019d66:	0436      	lsls	r6, r6, #16
 8019d68:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8019d6c:	4442      	add	r2, r8
 8019d6e:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 8019d72:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 8019d76:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8019d7a:	44b9      	add	r9, r7
 8019d7c:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8019d80:	4463      	add	r3, ip
 8019d82:	eb06 0508 	add.w	r5, r6, r8
 8019d86:	b2e7      	uxtb	r7, r4
 8019d88:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8019d8c:	499b      	ldr	r1, [pc, #620]	; (8019ffc <D128_GENERIC+0x35c>)
 8019d8e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8019d92:	0e24      	lsrs	r4, r4, #24
 8019d94:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8019d98:	b2d7      	uxtb	r7, r2
 8019d9a:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8019d9e:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8019da2:	9904      	ldr	r1, [sp, #16]
 8019da4:	4461      	add	r1, ip
 8019da6:	468c      	mov	ip, r1
 8019da8:	4994      	ldr	r1, [pc, #592]	; (8019ffc <D128_GENERIC+0x35c>)
 8019daa:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8019dae:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8019db2:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 8019db6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8019dba:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8019dbe:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8019dc2:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8019dc6:	0e12      	lsrs	r2, r2, #24
 8019dc8:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8019dcc:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8019dd0:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8019dd4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8019dd8:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8019ddc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8019de0:	b2da      	uxtb	r2, r3
 8019de2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8019de6:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8019dea:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8019dee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8019df2:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 8019df6:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8019dfa:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8019dfe:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 8019e02:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8019e06:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 8019e0a:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8019e0e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8019e12:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8019e16:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8019e1a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8019e1e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8019e22:	0e1b      	lsrs	r3, r3, #24
 8019e24:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 8019e28:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8019e2c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8019e30:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8019e34:	b2eb      	uxtb	r3, r5
 8019e36:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8019e3a:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 8019e3e:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8019e42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8019e46:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8019e4a:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8019e4e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019e52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019e56:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8019e5a:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8019e5e:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 8019e62:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8019e66:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8019e6a:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8019e6e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8019e72:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8019e76:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8019e7a:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8019e7e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8019e82:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8019e86:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8019e8a:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8019e8e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8019e92:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 8019e96:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8019e9a:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8019e9e:	9104      	str	r1, [sp, #16]
 8019ea0:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8019ea4:	9902      	ldr	r1, [sp, #8]
 8019ea6:	4a56      	ldr	r2, [pc, #344]	; (801a000 <D128_GENERIC+0x360>)
 8019ea8:	fb2b 1202 	smlad	r2, fp, r2, r1
 8019eac:	4955      	ldr	r1, [pc, #340]	; (801a004 <D128_GENERIC+0x364>)
 8019eae:	fb28 2201 	smlad	r2, r8, r1, r2
 8019eb2:	4955      	ldr	r1, [pc, #340]	; (801a008 <D128_GENERIC+0x368>)
 8019eb4:	fb27 2201 	smlad	r2, r7, r1, r2
 8019eb8:	4954      	ldr	r1, [pc, #336]	; (801a00c <D128_GENERIC+0x36c>)
 8019eba:	fb26 2201 	smlad	r2, r6, r1, r2
 8019ebe:	4954      	ldr	r1, [pc, #336]	; (801a010 <D128_GENERIC+0x370>)
 8019ec0:	fb24 2201 	smlad	r2, r4, r1, r2
 8019ec4:	4953      	ldr	r1, [pc, #332]	; (801a014 <D128_GENERIC+0x374>)
 8019ec6:	fb20 2201 	smlad	r2, r0, r1, r2
 8019eca:	4953      	ldr	r1, [pc, #332]	; (801a018 <D128_GENERIC+0x378>)
 8019ecc:	fb23 2201 	smlad	r2, r3, r1, r2
 8019ed0:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8019ed4:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8019ed8:	4950      	ldr	r1, [pc, #320]	; (801a01c <D128_GENERIC+0x37c>)
 8019eda:	9a03      	ldr	r2, [sp, #12]
 8019edc:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8019ee0:	4a4f      	ldr	r2, [pc, #316]	; (801a020 <D128_GENERIC+0x380>)
 8019ee2:	fb28 ce02 	smlad	lr, r8, r2, ip
 8019ee6:	f8df c150 	ldr.w	ip, [pc, #336]	; 801a038 <D128_GENERIC+0x398>
 8019eea:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8019eee:	f8df e14c 	ldr.w	lr, [pc, #332]	; 801a03c <D128_GENERIC+0x39c>
 8019ef2:	fb26 cc0e 	smlad	ip, r6, lr, ip
 8019ef6:	f8df e148 	ldr.w	lr, [pc, #328]	; 801a040 <D128_GENERIC+0x3a0>
 8019efa:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8019efe:	f8df c144 	ldr.w	ip, [pc, #324]	; 801a044 <D128_GENERIC+0x3a4>
 8019f02:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8019f06:	f8df c140 	ldr.w	ip, [pc, #320]	; 801a048 <D128_GENERIC+0x3a8>
 8019f0a:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8019f0e:	f8df e13c 	ldr.w	lr, [pc, #316]	; 801a04c <D128_GENERIC+0x3ac>
 8019f12:	fb25 c20e 	smlad	r2, r5, lr, ip
 8019f16:	f04f 0c01 	mov.w	ip, #1
 8019f1a:	9202      	str	r2, [sp, #8]
 8019f1c:	fb2b fb0c 	smuad	fp, fp, ip
 8019f20:	f8df c12c 	ldr.w	ip, [pc, #300]	; 801a050 <D128_GENERIC+0x3b0>
 8019f24:	fb28 bb0c 	smlad	fp, r8, ip, fp
 8019f28:	f8df c128 	ldr.w	ip, [pc, #296]	; 801a054 <D128_GENERIC+0x3b4>
 8019f2c:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8019f30:	4f3c      	ldr	r7, [pc, #240]	; (801a024 <D128_GENERIC+0x384>)
 8019f32:	fb26 bb07 	smlad	fp, r6, r7, fp
 8019f36:	4f3c      	ldr	r7, [pc, #240]	; (801a028 <D128_GENERIC+0x388>)
 8019f38:	fb24 bb07 	smlad	fp, r4, r7, fp
 8019f3c:	4f3b      	ldr	r7, [pc, #236]	; (801a02c <D128_GENERIC+0x38c>)
 8019f3e:	fb20 bb07 	smlad	fp, r0, r7, fp
 8019f42:	4f3b      	ldr	r7, [pc, #236]	; (801a030 <D128_GENERIC+0x390>)
 8019f44:	fb23 bb07 	smlad	fp, r3, r7, fp
 8019f48:	4b3a      	ldr	r3, [pc, #232]	; (801a034 <D128_GENERIC+0x394>)
 8019f4a:	fb25 b303 	smlad	r3, r5, r3, fp
 8019f4e:	9303      	str	r3, [sp, #12]
 8019f50:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 8019f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f56:	b183      	cbz	r3, 8019f7a <D128_GENERIC+0x2da>
 8019f58:	9a06      	ldr	r2, [sp, #24]
 8019f5a:	9907      	ldr	r1, [sp, #28]
 8019f5c:	4422      	add	r2, r4
 8019f5e:	9407      	str	r4, [sp, #28]
 8019f60:	1a52      	subs	r2, r2, r1
 8019f62:	fba2 0103 	umull	r0, r1, r2, r3
 8019f66:	17d5      	asrs	r5, r2, #31
 8019f68:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 8019f6c:	fb03 1105 	mla	r1, r3, r5, r1
 8019f70:	f141 0300 	adc.w	r3, r1, #0
 8019f74:	005b      	lsls	r3, r3, #1
 8019f76:	461c      	mov	r4, r3
 8019f78:	9306      	str	r3, [sp, #24]
 8019f7a:	9d01      	ldr	r5, [sp, #4]
 8019f7c:	01e4      	lsls	r4, r4, #7
 8019f7e:	9e05      	ldr	r6, [sp, #20]
 8019f80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019f84:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8019f86:	2300      	movs	r3, #0
 8019f88:	9908      	ldr	r1, [sp, #32]
 8019f8a:	fb06 f000 	mul.w	r0, r6, r0
 8019f8e:	3601      	adds	r6, #1
 8019f90:	fbc1 2304 	smlal	r2, r3, r1, r4
 8019f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f96:	109b      	asrs	r3, r3, #2
 8019f98:	9605      	str	r6, [sp, #20]
 8019f9a:	f303 030f 	ssat	r3, #16, r3
 8019f9e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 8019fa2:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8019fa4:	42b3      	cmp	r3, r6
 8019fa6:	dd13      	ble.n	8019fd0 <D128_GENERIC+0x330>
 8019fa8:	9b01      	ldr	r3, [sp, #4]
 8019faa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8019fac:	2a01      	cmp	r2, #1
 8019fae:	f47f ae95 	bne.w	8019cdc <D128_GENERIC+0x3c>
 8019fb2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8019fb4:	f109 0610 	add.w	r6, r9, #16
 8019fb8:	0681      	lsls	r1, r0, #26
 8019fba:	e9d9 4200 	ldrd	r4, r2, [r9]
 8019fbe:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 8019fc2:	d518      	bpl.n	8019ff6 <D128_GENERIC+0x356>
 8019fc4:	ba64      	rev16	r4, r4
 8019fc6:	ba52      	rev16	r2, r2
 8019fc8:	ba5b      	rev16	r3, r3
 8019fca:	ba6d      	rev16	r5, r5
 8019fcc:	46b1      	mov	r9, r6
 8019fce:	e6da      	b.n	8019d86 <D128_GENERIC+0xe6>
 8019fd0:	f8dd a010 	ldr.w	sl, [sp, #16]
 8019fd4:	9b01      	ldr	r3, [sp, #4]
 8019fd6:	2000      	movs	r0, #0
 8019fd8:	9903      	ldr	r1, [sp, #12]
 8019fda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019fdc:	6099      	str	r1, [r3, #8]
 8019fde:	9902      	ldr	r1, [sp, #8]
 8019fe0:	f8c3 a01c 	str.w	sl, [r3, #28]
 8019fe4:	60d9      	str	r1, [r3, #12]
 8019fe6:	9906      	ldr	r1, [sp, #24]
 8019fe8:	619a      	str	r2, [r3, #24]
 8019fea:	6119      	str	r1, [r3, #16]
 8019fec:	9907      	ldr	r1, [sp, #28]
 8019fee:	6159      	str	r1, [r3, #20]
 8019ff0:	b00d      	add	sp, #52	; 0x34
 8019ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ff6:	46b1      	mov	r9, r6
 8019ff8:	e6c5      	b.n	8019d86 <D128_GENERIC+0xe6>
 8019ffa:	bf00      	nop
 8019ffc:	24000000 	.word	0x24000000
 801a000:	00780069 	.word	0x00780069
 801a004:	005b004e 	.word	0x005b004e
 801a008:	00420037 	.word	0x00420037
 801a00c:	002d0024 	.word	0x002d0024
 801a010:	001c0015 	.word	0x001c0015
 801a014:	000f000a 	.word	0x000f000a
 801a018:	00060003 	.word	0x00060003
 801a01c:	00880096 	.word	0x00880096
 801a020:	00a200ac 	.word	0x00a200ac
 801a024:	0015001c 	.word	0x0015001c
 801a028:	0024002d 	.word	0x0024002d
 801a02c:	00370042 	.word	0x00370042
 801a030:	004e005b 	.word	0x004e005b
 801a034:	00690078 	.word	0x00690078
 801a038:	00b400ba 	.word	0x00b400ba
 801a03c:	00be00c0 	.word	0x00be00c0
 801a040:	00c000be 	.word	0x00c000be
 801a044:	00ba00b4 	.word	0x00ba00b4
 801a048:	00ac00a2 	.word	0x00ac00a2
 801a04c:	00960088 	.word	0x00960088
 801a050:	00030006 	.word	0x00030006
 801a054:	000a000f 	.word	0x000a000f

0801a058 <D16_1CH_HTONS_VOL_HP>:
 801a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a05c:	6993      	ldr	r3, [r2, #24]
 801a05e:	b087      	sub	sp, #28
 801a060:	4682      	mov	sl, r0
 801a062:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 801a064:	9304      	str	r3, [sp, #16]
 801a066:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 801a06a:	69d3      	ldr	r3, [r2, #28]
 801a06c:	f8d2 e020 	ldr.w	lr, [r2, #32]
 801a070:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 801a074:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 801a078:	9403      	str	r4, [sp, #12]
 801a07a:	2800      	cmp	r0, #0
 801a07c:	d054      	beq.n	801a128 <D16_1CH_HTONS_VOL_HP+0xd0>
 801a07e:	f1a1 0902 	sub.w	r9, r1, #2
 801a082:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 801a086:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 801a134 <D16_1CH_HTONS_VOL_HP+0xdc>
 801a08a:	4650      	mov	r0, sl
 801a08c:	9101      	str	r1, [sp, #4]
 801a08e:	4619      	mov	r1, r3
 801a090:	f8cd b008 	str.w	fp, [sp, #8]
 801a094:	9205      	str	r2, [sp, #20]
 801a096:	f850 3b02 	ldr.w	r3, [r0], #2
 801a09a:	ba5b      	rev16	r3, r3
 801a09c:	b2dc      	uxtb	r4, r3
 801a09e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801a0a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a0a6:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 801a0aa:	4419      	add	r1, r3
 801a0ac:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 801a0b0:	f3c1 0309 	ubfx	r3, r1, #0, #10
 801a0b4:	f3c4 0209 	ubfx	r2, r4, #0, #10
 801a0b8:	0aa1      	lsrs	r1, r4, #10
 801a0ba:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 801a0be:	4a1b      	ldr	r2, [pc, #108]	; (801a12c <D16_1CH_HTONS_VOL_HP+0xd4>)
 801a0c0:	fb23 5402 	smlad	r4, r3, r2, r5
 801a0c4:	4a1a      	ldr	r2, [pc, #104]	; (801a130 <D16_1CH_HTONS_VOL_HP+0xd8>)
 801a0c6:	fb23 f502 	smuad	r5, r3, r2
 801a0ca:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 801a0ce:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 801a0d2:	f04f 0b00 	mov.w	fp, #0
 801a0d6:	19a2      	adds	r2, r4, r6
 801a0d8:	eba2 020c 	sub.w	r2, r2, ip
 801a0dc:	46a4      	mov	ip, r4
 801a0de:	17d7      	asrs	r7, r2, #31
 801a0e0:	fba2 230e 	umull	r2, r3, r2, lr
 801a0e4:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 801a0e8:	fb0e 3307 	mla	r3, lr, r7, r3
 801a0ec:	f143 0700 	adc.w	r7, r3, #0
 801a0f0:	9b02      	ldr	r3, [sp, #8]
 801a0f2:	047a      	lsls	r2, r7, #17
 801a0f4:	007e      	lsls	r6, r7, #1
 801a0f6:	fbc3 ab02 	smlal	sl, fp, r3, r2
 801a0fa:	ea4f 03ab 	mov.w	r3, fp, asr #2
 801a0fe:	f303 030f 	ssat	r3, #16, r3
 801a102:	f829 3f02 	strh.w	r3, [r9, #2]!
 801a106:	9b01      	ldr	r3, [sp, #4]
 801a108:	4298      	cmp	r0, r3
 801a10a:	d1c4      	bne.n	801a096 <D16_1CH_HTONS_VOL_HP+0x3e>
 801a10c:	460b      	mov	r3, r1
 801a10e:	9a05      	ldr	r2, [sp, #20]
 801a110:	2000      	movs	r0, #0
 801a112:	9903      	ldr	r1, [sp, #12]
 801a114:	61d3      	str	r3, [r2, #28]
 801a116:	9b04      	ldr	r3, [sp, #16]
 801a118:	6095      	str	r5, [r2, #8]
 801a11a:	60d1      	str	r1, [r2, #12]
 801a11c:	6193      	str	r3, [r2, #24]
 801a11e:	e9c2 6404 	strd	r6, r4, [r2, #16]
 801a122:	b007      	add	sp, #28
 801a124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a128:	4664      	mov	r4, ip
 801a12a:	e7f1      	b.n	801a110 <D16_1CH_HTONS_VOL_HP+0xb8>
 801a12c:	00030001 	.word	0x00030001
 801a130:	00010003 	.word	0x00010003
 801a134:	24000000 	.word	0x24000000

0801a138 <D24_1CH_HTONS_VOL_HP>:
 801a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a13c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 801a13e:	b089      	sub	sp, #36	; 0x24
 801a140:	6993      	ldr	r3, [r2, #24]
 801a142:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 801a144:	9604      	str	r6, [sp, #16]
 801a146:	6a16      	ldr	r6, [r2, #32]
 801a148:	9306      	str	r3, [sp, #24]
 801a14a:	9505      	str	r5, [sp, #20]
 801a14c:	69d3      	ldr	r3, [r2, #28]
 801a14e:	9600      	str	r6, [sp, #0]
 801a150:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 801a154:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 801a158:	2d00      	cmp	r5, #0
 801a15a:	f000 8083 	beq.w	801a264 <D24_1CH_HTONS_VOL_HP+0x12c>
 801a15e:	9207      	str	r2, [sp, #28]
 801a160:	2600      	movs	r6, #0
 801a162:	4622      	mov	r2, r4
 801a164:	f1a1 0b02 	sub.w	fp, r1, #2
 801a168:	4f3f      	ldr	r7, [pc, #252]	; (801a268 <D24_1CH_HTONS_VOL_HP+0x130>)
 801a16a:	461d      	mov	r5, r3
 801a16c:	f8cd a00c 	str.w	sl, [sp, #12]
 801a170:	9c00      	ldr	r4, [sp, #0]
 801a172:	e056      	b.n	801a222 <D24_1CH_HTONS_VOL_HP+0xea>
 801a174:	7841      	ldrb	r1, [r0, #1]
 801a176:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 801a17a:	3002      	adds	r0, #2
 801a17c:	4488      	add	r8, r1
 801a17e:	fa5f f388 	uxtb.w	r3, r8
 801a182:	f3c8 2907 	ubfx	r9, r8, #8, #8
 801a186:	ea4f 4818 	mov.w	r8, r8, lsr #16
 801a18a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 801a18e:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 801a192:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 801a196:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 801a19a:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 801a19e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801a1a2:	f3c8 0309 	ubfx	r3, r8, #0, #10
 801a1a6:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 801a1aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801a1ae:	492f      	ldr	r1, [pc, #188]	; (801a26c <D24_1CH_HTONS_VOL_HP+0x134>)
 801a1b0:	fb23 e901 	smlad	r9, r3, r1, lr
 801a1b4:	492e      	ldr	r1, [pc, #184]	; (801a270 <D24_1CH_HTONS_VOL_HP+0x138>)
 801a1b6:	fb23 ce01 	smlad	lr, r3, r1, ip
 801a1ba:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 801a1be:	2101      	movs	r1, #1
 801a1c0:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 801a1c4:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 801a1c8:	fb23 f301 	smuad	r3, r3, r1
 801a1cc:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 801a1d0:	eb08 0c03 	add.w	ip, r8, r3
 801a1d4:	9b03      	ldr	r3, [sp, #12]
 801a1d6:	f04f 0a00 	mov.w	sl, #0
 801a1da:	440a      	add	r2, r1
 801a1dc:	3601      	adds	r6, #1
 801a1de:	9103      	str	r1, [sp, #12]
 801a1e0:	1ad2      	subs	r2, r2, r3
 801a1e2:	ea4f 79e2 	mov.w	r9, r2, asr #31
 801a1e6:	fba2 2304 	umull	r2, r3, r2, r4
 801a1ea:	e9cd 2300 	strd	r2, r3, [sp]
 801a1ee:	fb04 3309 	mla	r3, r4, r9, r3
 801a1f2:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 801a1f6:	9301      	str	r3, [sp, #4]
 801a1f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a1fc:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 801a200:	f143 0300 	adc.w	r3, r3, #0
 801a204:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 801a208:	005a      	lsls	r2, r3, #1
 801a20a:	9b04      	ldr	r3, [sp, #16]
 801a20c:	fbc3 9a08 	smlal	r9, sl, r3, r8
 801a210:	ea4f 03aa 	mov.w	r3, sl, asr #2
 801a214:	f303 030f 	ssat	r3, #16, r3
 801a218:	f82b 3f02 	strh.w	r3, [fp, #2]!
 801a21c:	9b05      	ldr	r3, [sp, #20]
 801a21e:	429e      	cmp	r6, r3
 801a220:	d010      	beq.n	801a244 <D24_1CH_HTONS_VOL_HP+0x10c>
 801a222:	f890 9003 	ldrb.w	r9, [r0, #3]
 801a226:	f016 0f01 	tst.w	r6, #1
 801a22a:	7801      	ldrb	r1, [r0, #0]
 801a22c:	ea4f 2309 	mov.w	r3, r9, lsl #8
 801a230:	ea4f 2801 	mov.w	r8, r1, lsl #8
 801a234:	d09e      	beq.n	801a174 <D24_1CH_HTONS_VOL_HP+0x3c>
 801a236:	f890 8002 	ldrb.w	r8, [r0, #2]
 801a23a:	3004      	adds	r0, #4
 801a23c:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 801a240:	4488      	add	r8, r1
 801a242:	e79c      	b.n	801a17e <D24_1CH_HTONS_VOL_HP+0x46>
 801a244:	4614      	mov	r4, r2
 801a246:	462b      	mov	r3, r5
 801a248:	9a07      	ldr	r2, [sp, #28]
 801a24a:	2000      	movs	r0, #0
 801a24c:	61d3      	str	r3, [r2, #28]
 801a24e:	9b06      	ldr	r3, [sp, #24]
 801a250:	f8c2 c008 	str.w	ip, [r2, #8]
 801a254:	f8c2 e00c 	str.w	lr, [r2, #12]
 801a258:	6193      	str	r3, [r2, #24]
 801a25a:	e9c2 4104 	strd	r4, r1, [r2, #16]
 801a25e:	b009      	add	sp, #36	; 0x24
 801a260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a264:	4651      	mov	r1, sl
 801a266:	e7f0      	b.n	801a24a <D24_1CH_HTONS_VOL_HP+0x112>
 801a268:	24000000 	.word	0x24000000
 801a26c:	00030001 	.word	0x00030001
 801a270:	00060007 	.word	0x00060007

0801a274 <D32_1CH_HTONS_VOL_HP>:
 801a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a278:	6993      	ldr	r3, [r2, #24]
 801a27a:	b087      	sub	sp, #28
 801a27c:	4683      	mov	fp, r0
 801a27e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 801a280:	9304      	str	r3, [sp, #16]
 801a282:	69d5      	ldr	r5, [r2, #28]
 801a284:	6b14      	ldr	r4, [r2, #48]	; 0x30
 801a286:	f8d2 a020 	ldr.w	sl, [r2, #32]
 801a28a:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 801a28e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 801a292:	2800      	cmp	r0, #0
 801a294:	d077      	beq.n	801a386 <D32_1CH_HTONS_VOL_HP+0x112>
 801a296:	460f      	mov	r7, r1
 801a298:	46f1      	mov	r9, lr
 801a29a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 801a29e:	f8cd 8000 	str.w	r8, [sp]
 801a2a2:	4e3a      	ldr	r6, [pc, #232]	; (801a38c <D32_1CH_HTONS_VOL_HP+0x118>)
 801a2a4:	469e      	mov	lr, r3
 801a2a6:	46a0      	mov	r8, r4
 801a2a8:	9103      	str	r1, [sp, #12]
 801a2aa:	9205      	str	r2, [sp, #20]
 801a2ac:	f85b 4b04 	ldr.w	r4, [fp], #4
 801a2b0:	ba64      	rev16	r4, r4
 801a2b2:	b2e0      	uxtb	r0, r4
 801a2b4:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801a2b8:	f3c4 4107 	ubfx	r1, r4, #16, #8
 801a2bc:	0e24      	lsrs	r4, r4, #24
 801a2be:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801a2c2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a2c6:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 801a2ca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a2ce:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 801a2d2:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 801a2d6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801a2da:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 801a2de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a2e2:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801a2e6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801a2ea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801a2ee:	f3c5 0009 	ubfx	r0, r5, #0, #10
 801a2f2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 801a2f6:	4826      	ldr	r0, [pc, #152]	; (801a390 <D32_1CH_HTONS_VOL_HP+0x11c>)
 801a2f8:	fb23 c400 	smlad	r4, r3, r0, ip
 801a2fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801a300:	fb21 4402 	smlad	r4, r1, r2, r4
 801a304:	4823      	ldr	r0, [pc, #140]	; (801a394 <D32_1CH_HTONS_VOL_HP+0x120>)
 801a306:	fb23 ec00 	smlad	ip, r3, r0, lr
 801a30a:	4823      	ldr	r0, [pc, #140]	; (801a398 <D32_1CH_HTONS_VOL_HP+0x124>)
 801a30c:	fb21 cc00 	smlad	ip, r1, r0, ip
 801a310:	2201      	movs	r2, #1
 801a312:	fb23 f302 	smuad	r3, r3, r2
 801a316:	4821      	ldr	r0, [pc, #132]	; (801a39c <D32_1CH_HTONS_VOL_HP+0x128>)
 801a318:	fb21 3e00 	smlad	lr, r1, r0, r3
 801a31c:	9b00      	ldr	r3, [sp, #0]
 801a31e:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 801a322:	4423      	add	r3, r4
 801a324:	eba3 0209 	sub.w	r2, r3, r9
 801a328:	46a1      	mov	r9, r4
 801a32a:	17d1      	asrs	r1, r2, #31
 801a32c:	fba2 230a 	umull	r2, r3, r2, sl
 801a330:	e9cd 2300 	strd	r2, r3, [sp]
 801a334:	fb0a 3301 	mla	r3, sl, r1, r3
 801a338:	9301      	str	r3, [sp, #4]
 801a33a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a33e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 801a342:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a346:	f143 0300 	adc.w	r3, r3, #0
 801a34a:	0399      	lsls	r1, r3, #14
 801a34c:	005b      	lsls	r3, r3, #1
 801a34e:	9300      	str	r3, [sp, #0]
 801a350:	2300      	movs	r3, #0
 801a352:	fbc8 2301 	smlal	r2, r3, r8, r1
 801a356:	109b      	asrs	r3, r3, #2
 801a358:	f303 030f 	ssat	r3, #16, r3
 801a35c:	f827 3b02 	strh.w	r3, [r7], #2
 801a360:	9b03      	ldr	r3, [sp, #12]
 801a362:	429f      	cmp	r7, r3
 801a364:	d1a2      	bne.n	801a2ac <D32_1CH_HTONS_VOL_HP+0x38>
 801a366:	4673      	mov	r3, lr
 801a368:	f8dd 8000 	ldr.w	r8, [sp]
 801a36c:	9a05      	ldr	r2, [sp, #20]
 801a36e:	6093      	str	r3, [r2, #8]
 801a370:	2000      	movs	r0, #0
 801a372:	9b04      	ldr	r3, [sp, #16]
 801a374:	f8c2 c00c 	str.w	ip, [r2, #12]
 801a378:	61d5      	str	r5, [r2, #28]
 801a37a:	6193      	str	r3, [r2, #24]
 801a37c:	e9c2 8404 	strd	r8, r4, [r2, #16]
 801a380:	b007      	add	sp, #28
 801a382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a386:	4674      	mov	r4, lr
 801a388:	e7f1      	b.n	801a36e <D32_1CH_HTONS_VOL_HP+0xfa>
 801a38a:	bf00      	nop
 801a38c:	24000000 	.word	0x24000000
 801a390:	00060003 	.word	0x00060003
 801a394:	000a000c 	.word	0x000a000c
 801a398:	000c000a 	.word	0x000c000a
 801a39c:	00030006 	.word	0x00030006

0801a3a0 <D48_1CH_HTONS_VOL_HP>:
 801a3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3a4:	6b17      	ldr	r7, [r2, #48]	; 0x30
 801a3a6:	b087      	sub	sp, #28
 801a3a8:	6993      	ldr	r3, [r2, #24]
 801a3aa:	9701      	str	r7, [sp, #4]
 801a3ac:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 801a3ae:	6a17      	ldr	r7, [r2, #32]
 801a3b0:	9304      	str	r3, [sp, #16]
 801a3b2:	69d6      	ldr	r6, [r2, #28]
 801a3b4:	9702      	str	r7, [sp, #8]
 801a3b6:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 801a3ba:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 801a3be:	2d00      	cmp	r5, #0
 801a3c0:	f000 8093 	beq.w	801a4ea <D48_1CH_HTONS_VOL_HP+0x14a>
 801a3c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a3c8:	f1a1 0b02 	sub.w	fp, r1, #2
 801a3cc:	46f2      	mov	sl, lr
 801a3ce:	4f48      	ldr	r7, [pc, #288]	; (801a4f0 <D48_1CH_HTONS_VOL_HP+0x150>)
 801a3d0:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 801a3d4:	469e      	mov	lr, r3
 801a3d6:	9205      	str	r2, [sp, #20]
 801a3d8:	9103      	str	r1, [sp, #12]
 801a3da:	e9d0 3200 	ldrd	r3, r2, [r0]
 801a3de:	3006      	adds	r0, #6
 801a3e0:	ba5b      	rev16	r3, r3
 801a3e2:	fa92 f992 	rev16.w	r9, r2
 801a3e6:	b2dd      	uxtb	r5, r3
 801a3e8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801a3ec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801a3f0:	0e1b      	lsrs	r3, r3, #24
 801a3f2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801a3f6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 801a3fa:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 801a3fe:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 801a402:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801a406:	fa5f f289 	uxtb.w	r2, r9
 801a40a:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 801a40e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801a412:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801a416:	f3c6 0809 	ubfx	r8, r6, #0, #10
 801a41a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801a41e:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 801a422:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801a426:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 801a42a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801a42e:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 801a432:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 801a436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a43a:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 801a43e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801a442:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 801a446:	f3c6 0309 	ubfx	r3, r6, #0, #10
 801a44a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 801a44e:	4b29      	ldr	r3, [pc, #164]	; (801a4f4 <D48_1CH_HTONS_VOL_HP+0x154>)
 801a450:	fb28 c103 	smlad	r1, r8, r3, ip
 801a454:	4b28      	ldr	r3, [pc, #160]	; (801a4f8 <D48_1CH_HTONS_VOL_HP+0x158>)
 801a456:	fb25 1103 	smlad	r1, r5, r3, r1
 801a45a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801a45e:	fb22 1903 	smlad	r9, r2, r3, r1
 801a462:	4b26      	ldr	r3, [pc, #152]	; (801a4fc <D48_1CH_HTONS_VOL_HP+0x15c>)
 801a464:	fb28 ec03 	smlad	ip, r8, r3, lr
 801a468:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 801a46c:	fb25 cc03 	smlad	ip, r5, r3, ip
 801a470:	4b23      	ldr	r3, [pc, #140]	; (801a500 <D48_1CH_HTONS_VOL_HP+0x160>)
 801a472:	fb22 cc03 	smlad	ip, r2, r3, ip
 801a476:	2101      	movs	r1, #1
 801a478:	fb28 f801 	smuad	r8, r8, r1
 801a47c:	4b21      	ldr	r3, [pc, #132]	; (801a504 <D48_1CH_HTONS_VOL_HP+0x164>)
 801a47e:	fb25 8503 	smlad	r5, r5, r3, r8
 801a482:	4b21      	ldr	r3, [pc, #132]	; (801a508 <D48_1CH_HTONS_VOL_HP+0x168>)
 801a484:	fb22 5e03 	smlad	lr, r2, r3, r5
 801a488:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 801a48c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 801a490:	190a      	adds	r2, r1, r4
 801a492:	9c02      	ldr	r4, [sp, #8]
 801a494:	eba2 020a 	sub.w	r2, r2, sl
 801a498:	468a      	mov	sl, r1
 801a49a:	ea4f 79e2 	mov.w	r9, r2, asr #31
 801a49e:	fba2 2304 	umull	r2, r3, r2, r4
 801a4a2:	fb04 3309 	mla	r3, r4, r9, r3
 801a4a6:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 801a4aa:	f04f 0900 	mov.w	r9, #0
 801a4ae:	f143 0500 	adc.w	r5, r3, #0
 801a4b2:	9b01      	ldr	r3, [sp, #4]
 801a4b4:	032a      	lsls	r2, r5, #12
 801a4b6:	006c      	lsls	r4, r5, #1
 801a4b8:	fbc3 8902 	smlal	r8, r9, r3, r2
 801a4bc:	ea4f 03a9 	mov.w	r3, r9, asr #2
 801a4c0:	f303 030f 	ssat	r3, #16, r3
 801a4c4:	f82b 3f02 	strh.w	r3, [fp, #2]!
 801a4c8:	9b03      	ldr	r3, [sp, #12]
 801a4ca:	4283      	cmp	r3, r0
 801a4cc:	d185      	bne.n	801a3da <D48_1CH_HTONS_VOL_HP+0x3a>
 801a4ce:	4673      	mov	r3, lr
 801a4d0:	9a05      	ldr	r2, [sp, #20]
 801a4d2:	6093      	str	r3, [r2, #8]
 801a4d4:	2000      	movs	r0, #0
 801a4d6:	9b04      	ldr	r3, [sp, #16]
 801a4d8:	f8c2 c00c 	str.w	ip, [r2, #12]
 801a4dc:	61d6      	str	r6, [r2, #28]
 801a4de:	6193      	str	r3, [r2, #24]
 801a4e0:	e9c2 4104 	strd	r4, r1, [r2, #16]
 801a4e4:	b007      	add	sp, #28
 801a4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4ea:	4671      	mov	r1, lr
 801a4ec:	e7f1      	b.n	801a4d2 <D48_1CH_HTONS_VOL_HP+0x132>
 801a4ee:	bf00      	nop
 801a4f0:	24000000 	.word	0x24000000
 801a4f4:	000f000a 	.word	0x000f000a
 801a4f8:	00060003 	.word	0x00060003
 801a4fc:	00150019 	.word	0x00150019
 801a500:	00190015 	.word	0x00190015
 801a504:	00030006 	.word	0x00030006
 801a508:	000a000f 	.word	0x000a000f

0801a50c <D64_1CH_HTONS_VOL_HP>:
 801a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a510:	6b15      	ldr	r5, [r2, #48]	; 0x30
 801a512:	b089      	sub	sp, #36	; 0x24
 801a514:	6993      	ldr	r3, [r2, #24]
 801a516:	4686      	mov	lr, r0
 801a518:	9503      	str	r5, [sp, #12]
 801a51a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 801a51c:	6a15      	ldr	r5, [r2, #32]
 801a51e:	9306      	str	r3, [sp, #24]
 801a520:	69d6      	ldr	r6, [r2, #28]
 801a522:	9504      	str	r5, [sp, #16]
 801a524:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 801a528:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 801a52c:	2800      	cmp	r0, #0
 801a52e:	f000 80a4 	beq.w	801a67a <D64_1CH_HTONS_VOL_HP+0x16e>
 801a532:	460f      	mov	r7, r1
 801a534:	46f1      	mov	r9, lr
 801a536:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 801a53a:	4d56      	ldr	r5, [pc, #344]	; (801a694 <D64_1CH_HTONS_VOL_HP+0x188>)
 801a53c:	46a2      	mov	sl, r4
 801a53e:	469e      	mov	lr, r3
 801a540:	9105      	str	r1, [sp, #20]
 801a542:	9207      	str	r2, [sp, #28]
 801a544:	f859 1b08 	ldr.w	r1, [r9], #8
 801a548:	f859 3c04 	ldr.w	r3, [r9, #-4]
 801a54c:	ba49      	rev16	r1, r1
 801a54e:	fa93 fb93 	rev16.w	fp, r3
 801a552:	b2cb      	uxtb	r3, r1
 801a554:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801a558:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801a55c:	0e09      	lsrs	r1, r1, #24
 801a55e:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 801a562:	fa5f f38b 	uxtb.w	r3, fp
 801a566:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801a56a:	4426      	add	r6, r4
 801a56c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 801a570:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801a574:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 801a578:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801a57c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801a580:	f3cb 2307 	ubfx	r3, fp, #8, #8
 801a584:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 801a588:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801a58c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801a590:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 801a594:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801a598:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 801a59c:	f3cb 4607 	ubfx	r6, fp, #16, #8
 801a5a0:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 801a5a4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801a5a8:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801a5ac:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 801a5b0:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 801a5b4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801a5b8:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 801a5bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801a5c0:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 801a5c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a5c8:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 801a5cc:	f3c6 0409 	ubfx	r4, r6, #0, #10
 801a5d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801a5d4:	f3cb 0009 	ubfx	r0, fp, #0, #10
 801a5d8:	ea4f 269b 	mov.w	r6, fp, lsr #10
 801a5dc:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 801a5e0:	482d      	ldr	r0, [pc, #180]	; (801a698 <D64_1CH_HTONS_VOL_HP+0x18c>)
 801a5e2:	fb22 cc00 	smlad	ip, r2, r0, ip
 801a5e6:	482d      	ldr	r0, [pc, #180]	; (801a69c <D64_1CH_HTONS_VOL_HP+0x190>)
 801a5e8:	fb21 cc00 	smlad	ip, r1, r0, ip
 801a5ec:	482c      	ldr	r0, [pc, #176]	; (801a6a0 <D64_1CH_HTONS_VOL_HP+0x194>)
 801a5ee:	fb23 cc00 	smlad	ip, r3, r0, ip
 801a5f2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801a5f6:	fb2b c404 	smlad	r4, fp, r4, ip
 801a5fa:	482a      	ldr	r0, [pc, #168]	; (801a6a4 <D64_1CH_HTONS_VOL_HP+0x198>)
 801a5fc:	fb22 ec00 	smlad	ip, r2, r0, lr
 801a600:	fb2b cc10 	smladx	ip, fp, r0, ip
 801a604:	4828      	ldr	r0, [pc, #160]	; (801a6a8 <D64_1CH_HTONS_VOL_HP+0x19c>)
 801a606:	fb21 cc00 	smlad	ip, r1, r0, ip
 801a60a:	fb23 cc10 	smladx	ip, r3, r0, ip
 801a60e:	f04f 0e01 	mov.w	lr, #1
 801a612:	fb22 f20e 	smuad	r2, r2, lr
 801a616:	4825      	ldr	r0, [pc, #148]	; (801a6ac <D64_1CH_HTONS_VOL_HP+0x1a0>)
 801a618:	fb21 2100 	smlad	r1, r1, r0, r2
 801a61c:	4a24      	ldr	r2, [pc, #144]	; (801a6b0 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 801a61e:	fb23 1302 	smlad	r3, r3, r2, r1
 801a622:	4a24      	ldr	r2, [pc, #144]	; (801a6b4 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 801a624:	fb2b 3e02 	smlad	lr, fp, r2, r3
 801a628:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 801a62c:	eb04 0208 	add.w	r2, r4, r8
 801a630:	eba2 020a 	sub.w	r2, r2, sl
 801a634:	46a2      	mov	sl, r4
 801a636:	4610      	mov	r0, r2
 801a638:	17d1      	asrs	r1, r2, #31
 801a63a:	e9cd 0100 	strd	r0, r1, [sp]
 801a63e:	9904      	ldr	r1, [sp, #16]
 801a640:	9801      	ldr	r0, [sp, #4]
 801a642:	fba2 2301 	umull	r2, r3, r2, r1
 801a646:	fb01 3300 	mla	r3, r1, r0, r3
 801a64a:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 801a64e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801a652:	f143 0100 	adc.w	r1, r3, #0
 801a656:	9b03      	ldr	r3, [sp, #12]
 801a658:	02ca      	lsls	r2, r1, #11
 801a65a:	ea4f 0841 	mov.w	r8, r1, lsl #1
 801a65e:	2100      	movs	r1, #0
 801a660:	fbc3 0102 	smlal	r0, r1, r3, r2
 801a664:	108b      	asrs	r3, r1, #2
 801a666:	f303 030f 	ssat	r3, #16, r3
 801a66a:	f827 3b02 	strh.w	r3, [r7], #2
 801a66e:	9b05      	ldr	r3, [sp, #20]
 801a670:	429f      	cmp	r7, r3
 801a672:	f47f af67 	bne.w	801a544 <D64_1CH_HTONS_VOL_HP+0x38>
 801a676:	4673      	mov	r3, lr
 801a678:	9a07      	ldr	r2, [sp, #28]
 801a67a:	6093      	str	r3, [r2, #8]
 801a67c:	2000      	movs	r0, #0
 801a67e:	9b06      	ldr	r3, [sp, #24]
 801a680:	f8c2 c00c 	str.w	ip, [r2, #12]
 801a684:	61d6      	str	r6, [r2, #28]
 801a686:	6193      	str	r3, [r2, #24]
 801a688:	e9c2 8404 	strd	r8, r4, [r2, #16]
 801a68c:	b009      	add	sp, #36	; 0x24
 801a68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a692:	bf00      	nop
 801a694:	24000000 	.word	0x24000000
 801a698:	001c0015 	.word	0x001c0015
 801a69c:	000f000a 	.word	0x000f000a
 801a6a0:	00060003 	.word	0x00060003
 801a6a4:	0024002a 	.word	0x0024002a
 801a6a8:	002e0030 	.word	0x002e0030
 801a6ac:	00030006 	.word	0x00030006
 801a6b0:	000a000f 	.word	0x000a000f
 801a6b4:	0015001c 	.word	0x0015001c

0801a6b8 <D80_1CH_HTONS_VOL_HP>:
 801a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6bc:	6913      	ldr	r3, [r2, #16]
 801a6be:	b089      	sub	sp, #36	; 0x24
 801a6c0:	6b16      	ldr	r6, [r2, #48]	; 0x30
 801a6c2:	9301      	str	r3, [sp, #4]
 801a6c4:	9603      	str	r6, [sp, #12]
 801a6c6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 801a6c8:	6a16      	ldr	r6, [r2, #32]
 801a6ca:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 801a6ce:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 801a6d2:	9306      	str	r3, [sp, #24]
 801a6d4:	9604      	str	r6, [sp, #16]
 801a6d6:	69d3      	ldr	r3, [r2, #28]
 801a6d8:	2c00      	cmp	r4, #0
 801a6da:	f000 80ce 	beq.w	801a87a <D80_1CH_HTONS_VOL_HP+0x1c2>
 801a6de:	3902      	subs	r1, #2
 801a6e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801a6e4:	4e66      	ldr	r6, [pc, #408]	; (801a880 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 801a6e6:	469e      	mov	lr, r3
 801a6e8:	9102      	str	r1, [sp, #8]
 801a6ea:	46aa      	mov	sl, r5
 801a6ec:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 801a6f0:	9207      	str	r2, [sp, #28]
 801a6f2:	9105      	str	r1, [sp, #20]
 801a6f4:	6883      	ldr	r3, [r0, #8]
 801a6f6:	e9d0 4200 	ldrd	r4, r2, [r0]
 801a6fa:	300a      	adds	r0, #10
 801a6fc:	ba64      	rev16	r4, r4
 801a6fe:	ba52      	rev16	r2, r2
 801a700:	fa93 fb93 	rev16.w	fp, r3
 801a704:	b2e5      	uxtb	r5, r4
 801a706:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801a70a:	f3c4 4107 	ubfx	r1, r4, #16, #8
 801a70e:	0e24      	lsrs	r4, r4, #24
 801a710:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 801a714:	b2d5      	uxtb	r5, r2
 801a716:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a71a:	44c6      	add	lr, r8
 801a71c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a720:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 801a724:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 801a728:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 801a72c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801a730:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 801a734:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801a738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a73c:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 801a740:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a744:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 801a748:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 801a74c:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 801a750:	f3c2 4507 	ubfx	r5, r2, #16, #8
 801a754:	0e12      	lsrs	r2, r2, #24
 801a756:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 801a75a:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 801a75e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 801a762:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801a766:	fa5f fb8b 	uxtb.w	fp, fp
 801a76a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801a76e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801a772:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 801a776:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801a77a:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 801a77e:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801a782:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801a786:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 801a78a:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 801a78e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801a792:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801a796:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 801a79a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 801a79e:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 801a7a2:	f3ce 0109 	ubfx	r1, lr, #0, #10
 801a7a6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 801a7aa:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 801a7ae:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 801a7b2:	4934      	ldr	r1, [pc, #208]	; (801a884 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 801a7b4:	fb23 cc01 	smlad	ip, r3, r1, ip
 801a7b8:	4933      	ldr	r1, [pc, #204]	; (801a888 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 801a7ba:	fb24 cc01 	smlad	ip, r4, r1, ip
 801a7be:	4933      	ldr	r1, [pc, #204]	; (801a88c <D80_1CH_HTONS_VOL_HP+0x1d4>)
 801a7c0:	fb28 cc01 	smlad	ip, r8, r1, ip
 801a7c4:	4932      	ldr	r1, [pc, #200]	; (801a890 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 801a7c6:	fb22 cc01 	smlad	ip, r2, r1, ip
 801a7ca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801a7ce:	fb2b c901 	smlad	r9, fp, r1, ip
 801a7d2:	4930      	ldr	r1, [pc, #192]	; (801a894 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 801a7d4:	fb23 7701 	smlad	r7, r3, r1, r7
 801a7d8:	492f      	ldr	r1, [pc, #188]	; (801a898 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 801a7da:	fb24 7701 	smlad	r7, r4, r1, r7
 801a7de:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 801a7e2:	fb28 7c0c 	smlad	ip, r8, ip, r7
 801a7e6:	492d      	ldr	r1, [pc, #180]	; (801a89c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 801a7e8:	fb22 cc01 	smlad	ip, r2, r1, ip
 801a7ec:	492c      	ldr	r1, [pc, #176]	; (801a8a0 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 801a7ee:	fb2b cc01 	smlad	ip, fp, r1, ip
 801a7f2:	2101      	movs	r1, #1
 801a7f4:	fb23 f301 	smuad	r3, r3, r1
 801a7f8:	492a      	ldr	r1, [pc, #168]	; (801a8a4 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 801a7fa:	fb24 3401 	smlad	r4, r4, r1, r3
 801a7fe:	492a      	ldr	r1, [pc, #168]	; (801a8a8 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 801a800:	fb28 4101 	smlad	r1, r8, r1, r4
 801a804:	4f29      	ldr	r7, [pc, #164]	; (801a8ac <D80_1CH_HTONS_VOL_HP+0x1f4>)
 801a806:	fb22 1207 	smlad	r2, r2, r7, r1
 801a80a:	4f29      	ldr	r7, [pc, #164]	; (801a8b0 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 801a80c:	fb2b 2707 	smlad	r7, fp, r7, r2
 801a810:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 801a814:	9b01      	ldr	r3, [sp, #4]
 801a816:	9c04      	ldr	r4, [sp, #16]
 801a818:	440b      	add	r3, r1
 801a81a:	eba3 020a 	sub.w	r2, r3, sl
 801a81e:	468a      	mov	sl, r1
 801a820:	ea4f 79e2 	mov.w	r9, r2, asr #31
 801a824:	fba2 2304 	umull	r2, r3, r2, r4
 801a828:	fb04 3309 	mla	r3, r4, r9, r3
 801a82c:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 801a830:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a834:	f143 0500 	adc.w	r5, r3, #0
 801a838:	006b      	lsls	r3, r5, #1
 801a83a:	02aa      	lsls	r2, r5, #10
 801a83c:	2500      	movs	r5, #0
 801a83e:	9301      	str	r3, [sp, #4]
 801a840:	9b03      	ldr	r3, [sp, #12]
 801a842:	fbc3 4502 	smlal	r4, r5, r3, r2
 801a846:	9a02      	ldr	r2, [sp, #8]
 801a848:	10ab      	asrs	r3, r5, #2
 801a84a:	f303 030f 	ssat	r3, #16, r3
 801a84e:	f822 3f02 	strh.w	r3, [r2, #2]!
 801a852:	9b05      	ldr	r3, [sp, #20]
 801a854:	9202      	str	r2, [sp, #8]
 801a856:	4298      	cmp	r0, r3
 801a858:	f47f af4c 	bne.w	801a6f4 <D80_1CH_HTONS_VOL_HP+0x3c>
 801a85c:	4673      	mov	r3, lr
 801a85e:	9a07      	ldr	r2, [sp, #28]
 801a860:	61d3      	str	r3, [r2, #28]
 801a862:	2000      	movs	r0, #0
 801a864:	9b01      	ldr	r3, [sp, #4]
 801a866:	6097      	str	r7, [r2, #8]
 801a868:	f8c2 c00c 	str.w	ip, [r2, #12]
 801a86c:	e9c2 3104 	strd	r3, r1, [r2, #16]
 801a870:	9b06      	ldr	r3, [sp, #24]
 801a872:	6193      	str	r3, [r2, #24]
 801a874:	b009      	add	sp, #36	; 0x24
 801a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a87a:	4629      	mov	r1, r5
 801a87c:	e7f0      	b.n	801a860 <D80_1CH_HTONS_VOL_HP+0x1a8>
 801a87e:	bf00      	nop
 801a880:	24000000 	.word	0x24000000
 801a884:	002d0024 	.word	0x002d0024
 801a888:	001c0015 	.word	0x001c0015
 801a88c:	000f000a 	.word	0x000f000a
 801a890:	00060003 	.word	0x00060003
 801a894:	0037003f 	.word	0x0037003f
 801a898:	00450049 	.word	0x00450049
 801a89c:	00490045 	.word	0x00490045
 801a8a0:	003f0037 	.word	0x003f0037
 801a8a4:	00030006 	.word	0x00030006
 801a8a8:	000a000f 	.word	0x000a000f
 801a8ac:	0015001c 	.word	0x0015001c
 801a8b0:	0024002d 	.word	0x0024002d

0801a8b4 <D128_1CH_HTONS_VOL_HP>:
 801a8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8b8:	6914      	ldr	r4, [r2, #16]
 801a8ba:	b08d      	sub	sp, #52	; 0x34
 801a8bc:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 801a8be:	9404      	str	r4, [sp, #16]
 801a8c0:	6954      	ldr	r4, [r2, #20]
 801a8c2:	920b      	str	r2, [sp, #44]	; 0x2c
 801a8c4:	9405      	str	r4, [sp, #20]
 801a8c6:	6994      	ldr	r4, [r2, #24]
 801a8c8:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 801a8cc:	940a      	str	r4, [sp, #40]	; 0x28
 801a8ce:	6894      	ldr	r4, [r2, #8]
 801a8d0:	9403      	str	r4, [sp, #12]
 801a8d2:	68d4      	ldr	r4, [r2, #12]
 801a8d4:	9402      	str	r4, [sp, #8]
 801a8d6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 801a8d8:	6a12      	ldr	r2, [r2, #32]
 801a8da:	9407      	str	r4, [sp, #28]
 801a8dc:	9208      	str	r2, [sp, #32]
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	f000 812e 	beq.w	801ab40 <D128_1CH_HTONS_VOL_HP+0x28c>
 801a8e4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801a8e8:	f100 0b10 	add.w	fp, r0, #16
 801a8ec:	f8df 9290 	ldr.w	r9, [pc, #656]	; 801ab80 <D128_1CH_HTONS_VOL_HP+0x2cc>
 801a8f0:	9106      	str	r1, [sp, #24]
 801a8f2:	9309      	str	r3, [sp, #36]	; 0x24
 801a8f4:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 801a8f8:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 801a8fc:	ba40      	rev16	r0, r0
 801a8fe:	ba52      	rev16	r2, r2
 801a900:	ba5b      	rev16	r3, r3
 801a902:	ba76      	rev16	r6, r6
 801a904:	b2c5      	uxtb	r5, r0
 801a906:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801a90a:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801a90e:	0e00      	lsrs	r0, r0, #24
 801a910:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 801a914:	b2d5      	uxtb	r5, r2
 801a916:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 801a91a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 801a91e:	44bc      	add	ip, r7
 801a920:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801a924:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 801a928:	f3c2 4007 	ubfx	r0, r2, #16, #8
 801a92c:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 801a930:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 801a934:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 801a938:	0e12      	lsrs	r2, r2, #24
 801a93a:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 801a93e:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 801a942:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801a946:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801a94a:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 801a94e:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 801a952:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801a956:	b2da      	uxtb	r2, r3
 801a958:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 801a95c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801a960:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 801a964:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 801a968:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 801a96c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801a970:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 801a974:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801a978:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 801a97c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801a980:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 801a984:	f3c3 4107 	ubfx	r1, r3, #16, #8
 801a988:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 801a98c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801a990:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 801a994:	0e1b      	lsrs	r3, r3, #24
 801a996:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 801a99a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801a99e:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 801a9a2:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801a9a6:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 801a9aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801a9ae:	b2f3      	uxtb	r3, r6
 801a9b0:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 801a9b4:	f3c8 0009 	ubfx	r0, r8, #0, #10
 801a9b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801a9bc:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801a9c0:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 801a9c4:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 801a9c8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801a9cc:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801a9d0:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 801a9d4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801a9d8:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801a9dc:	0e36      	lsrs	r6, r6, #24
 801a9de:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 801a9e2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801a9e6:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 801a9ea:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801a9ee:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 801a9f2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801a9f6:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 801a9fa:	f3c2 0309 	ubfx	r3, r2, #0, #10
 801a9fe:	9101      	str	r1, [sp, #4]
 801aa00:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 801aa04:	9b02      	ldr	r3, [sp, #8]
 801aa06:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 801aa0a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801aa0e:	4611      	mov	r1, r2
 801aa10:	f3cc 0209 	ubfx	r2, ip, #0, #10
 801aa14:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 801aa18:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 801aa1c:	4a49      	ldr	r2, [pc, #292]	; (801ab44 <D128_1CH_HTONS_VOL_HP+0x290>)
 801aa1e:	fb2e 3202 	smlad	r2, lr, r2, r3
 801aa22:	4b49      	ldr	r3, [pc, #292]	; (801ab48 <D128_1CH_HTONS_VOL_HP+0x294>)
 801aa24:	fb27 2203 	smlad	r2, r7, r3, r2
 801aa28:	4b48      	ldr	r3, [pc, #288]	; (801ab4c <D128_1CH_HTONS_VOL_HP+0x298>)
 801aa2a:	fb25 2203 	smlad	r2, r5, r3, r2
 801aa2e:	4b48      	ldr	r3, [pc, #288]	; (801ab50 <D128_1CH_HTONS_VOL_HP+0x29c>)
 801aa30:	fb24 2203 	smlad	r2, r4, r3, r2
 801aa34:	4b47      	ldr	r3, [pc, #284]	; (801ab54 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 801aa36:	fb20 2803 	smlad	r8, r0, r3, r2
 801aa3a:	4b47      	ldr	r3, [pc, #284]	; (801ab58 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 801aa3c:	9a01      	ldr	r2, [sp, #4]
 801aa3e:	fb22 8203 	smlad	r2, r2, r3, r8
 801aa42:	4b46      	ldr	r3, [pc, #280]	; (801ab5c <D128_1CH_HTONS_VOL_HP+0x2a8>)
 801aa44:	9102      	str	r1, [sp, #8]
 801aa46:	fb21 2203 	smlad	r2, r1, r3, r2
 801aa4a:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 801aa4e:	fb26 2308 	smlad	r3, r6, r8, r2
 801aa52:	4619      	mov	r1, r3
 801aa54:	9a03      	ldr	r2, [sp, #12]
 801aa56:	4b42      	ldr	r3, [pc, #264]	; (801ab60 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 801aa58:	fb2e 2803 	smlad	r8, lr, r3, r2
 801aa5c:	4b41      	ldr	r3, [pc, #260]	; (801ab64 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 801aa5e:	fb27 8a03 	smlad	sl, r7, r3, r8
 801aa62:	f8df 8120 	ldr.w	r8, [pc, #288]	; 801ab84 <D128_1CH_HTONS_VOL_HP+0x2d0>
 801aa66:	fb25 a808 	smlad	r8, r5, r8, sl
 801aa6a:	f8df a11c 	ldr.w	sl, [pc, #284]	; 801ab88 <D128_1CH_HTONS_VOL_HP+0x2d4>
 801aa6e:	fb24 880a 	smlad	r8, r4, sl, r8
 801aa72:	f8df a118 	ldr.w	sl, [pc, #280]	; 801ab8c <D128_1CH_HTONS_VOL_HP+0x2d8>
 801aa76:	fb20 8a0a 	smlad	sl, r0, sl, r8
 801aa7a:	f8df 8114 	ldr.w	r8, [pc, #276]	; 801ab90 <D128_1CH_HTONS_VOL_HP+0x2dc>
 801aa7e:	9b01      	ldr	r3, [sp, #4]
 801aa80:	fb23 aa08 	smlad	sl, r3, r8, sl
 801aa84:	f8df 810c 	ldr.w	r8, [pc, #268]	; 801ab94 <D128_1CH_HTONS_VOL_HP+0x2e0>
 801aa88:	9a02      	ldr	r2, [sp, #8]
 801aa8a:	fb22 a808 	smlad	r8, r2, r8, sl
 801aa8e:	f8df a108 	ldr.w	sl, [pc, #264]	; 801ab98 <D128_1CH_HTONS_VOL_HP+0x2e4>
 801aa92:	fb26 830a 	smlad	r3, r6, sl, r8
 801aa96:	f04f 0801 	mov.w	r8, #1
 801aa9a:	9302      	str	r3, [sp, #8]
 801aa9c:	fb2e fe08 	smuad	lr, lr, r8
 801aaa0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801ab9c <D128_1CH_HTONS_VOL_HP+0x2e8>
 801aaa4:	fb27 ee08 	smlad	lr, r7, r8, lr
 801aaa8:	4f2f      	ldr	r7, [pc, #188]	; (801ab68 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 801aaaa:	fb25 ee07 	smlad	lr, r5, r7, lr
 801aaae:	4f2f      	ldr	r7, [pc, #188]	; (801ab6c <D128_1CH_HTONS_VOL_HP+0x2b8>)
 801aab0:	fb24 ee07 	smlad	lr, r4, r7, lr
 801aab4:	4f2e      	ldr	r7, [pc, #184]	; (801ab70 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 801aab6:	fb20 ee07 	smlad	lr, r0, r7, lr
 801aaba:	4f2e      	ldr	r7, [pc, #184]	; (801ab74 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 801aabc:	9b01      	ldr	r3, [sp, #4]
 801aabe:	fb23 ee07 	smlad	lr, r3, r7, lr
 801aac2:	4f2d      	ldr	r7, [pc, #180]	; (801ab78 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 801aac4:	fb22 e707 	smlad	r7, r2, r7, lr
 801aac8:	4b2c      	ldr	r3, [pc, #176]	; (801ab7c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 801aaca:	fb26 7303 	smlad	r3, r6, r3, r7
 801aace:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 801aad2:	9303      	str	r3, [sp, #12]
 801aad4:	9b04      	ldr	r3, [sp, #16]
 801aad6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801aada:	9f08      	ldr	r7, [sp, #32]
 801aadc:	2100      	movs	r1, #0
 801aade:	4433      	add	r3, r6
 801aae0:	f10b 0b10 	add.w	fp, fp, #16
 801aae4:	461a      	mov	r2, r3
 801aae6:	9b05      	ldr	r3, [sp, #20]
 801aae8:	9605      	str	r6, [sp, #20]
 801aaea:	1ad2      	subs	r2, r2, r3
 801aaec:	17d5      	asrs	r5, r2, #31
 801aaee:	fba2 2307 	umull	r2, r3, r2, r7
 801aaf2:	1814      	adds	r4, r2, r0
 801aaf4:	fb07 3305 	mla	r3, r7, r5, r3
 801aaf8:	eb43 0501 	adc.w	r5, r3, r1
 801aafc:	006b      	lsls	r3, r5, #1
 801aafe:	022a      	lsls	r2, r5, #8
 801ab00:	9304      	str	r3, [sp, #16]
 801ab02:	9b07      	ldr	r3, [sp, #28]
 801ab04:	fbc3 0102 	smlal	r0, r1, r3, r2
 801ab08:	9a06      	ldr	r2, [sp, #24]
 801ab0a:	108b      	asrs	r3, r1, #2
 801ab0c:	f303 030f 	ssat	r3, #16, r3
 801ab10:	f822 3b02 	strh.w	r3, [r2], #2
 801ab14:	4613      	mov	r3, r2
 801ab16:	9206      	str	r2, [sp, #24]
 801ab18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab1a:	4293      	cmp	r3, r2
 801ab1c:	f47f aeea 	bne.w	801a8f4 <D128_1CH_HTONS_VOL_HP+0x40>
 801ab20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab22:	2000      	movs	r0, #0
 801ab24:	9903      	ldr	r1, [sp, #12]
 801ab26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ab28:	6099      	str	r1, [r3, #8]
 801ab2a:	9902      	ldr	r1, [sp, #8]
 801ab2c:	f8c3 c01c 	str.w	ip, [r3, #28]
 801ab30:	60d9      	str	r1, [r3, #12]
 801ab32:	9904      	ldr	r1, [sp, #16]
 801ab34:	619a      	str	r2, [r3, #24]
 801ab36:	e9c3 1604 	strd	r1, r6, [r3, #16]
 801ab3a:	b00d      	add	sp, #52	; 0x34
 801ab3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab40:	9e05      	ldr	r6, [sp, #20]
 801ab42:	e7ed      	b.n	801ab20 <D128_1CH_HTONS_VOL_HP+0x26c>
 801ab44:	00780069 	.word	0x00780069
 801ab48:	005b004e 	.word	0x005b004e
 801ab4c:	00420037 	.word	0x00420037
 801ab50:	002d0024 	.word	0x002d0024
 801ab54:	001c0015 	.word	0x001c0015
 801ab58:	000f000a 	.word	0x000f000a
 801ab5c:	00060003 	.word	0x00060003
 801ab60:	00880096 	.word	0x00880096
 801ab64:	00a200ac 	.word	0x00a200ac
 801ab68:	000a000f 	.word	0x000a000f
 801ab6c:	0015001c 	.word	0x0015001c
 801ab70:	0024002d 	.word	0x0024002d
 801ab74:	00370042 	.word	0x00370042
 801ab78:	004e005b 	.word	0x004e005b
 801ab7c:	00690078 	.word	0x00690078
 801ab80:	24000000 	.word	0x24000000
 801ab84:	00b400ba 	.word	0x00b400ba
 801ab88:	00be00c0 	.word	0x00be00c0
 801ab8c:	00c000be 	.word	0x00c000be
 801ab90:	00ba00b4 	.word	0x00ba00b4
 801ab94:	00ac00a2 	.word	0x00ac00a2
 801ab98:	00960088 	.word	0x00960088
 801ab9c:	00030006 	.word	0x00030006

0801aba0 <PDM_Filter_Init>:
 801aba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aba2:	2240      	movs	r2, #64	; 0x40
 801aba4:	2100      	movs	r1, #0
 801aba6:	4604      	mov	r4, r0
 801aba8:	300c      	adds	r0, #12
 801abaa:	f000 fa25 	bl	801aff8 <memset>
 801abae:	4a56      	ldr	r2, [pc, #344]	; (801ad08 <PDM_Filter_Init+0x168>)
 801abb0:	4856      	ldr	r0, [pc, #344]	; (801ad0c <PDM_Filter_Init+0x16c>)
 801abb2:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 801abb6:	6813      	ldr	r3, [r2, #0]
 801abb8:	f24c 2540 	movw	r5, #49728	; 0xc240
 801abbc:	f023 0301 	bic.w	r3, r3, #1
 801abc0:	6013      	str	r3, [r2, #0]
 801abc2:	6803      	ldr	r3, [r0, #0]
 801abc4:	400b      	ands	r3, r1
 801abc6:	42ab      	cmp	r3, r5
 801abc8:	d040      	beq.n	801ac4c <PDM_Filter_Init+0xac>
 801abca:	6803      	ldr	r3, [r0, #0]
 801abcc:	f24c 2270 	movw	r2, #49776	; 0xc270
 801abd0:	4019      	ands	r1, r3
 801abd2:	4291      	cmp	r1, r2
 801abd4:	d03a      	beq.n	801ac4c <PDM_Filter_Init+0xac>
 801abd6:	4b4e      	ldr	r3, [pc, #312]	; (801ad10 <PDM_Filter_Init+0x170>)
 801abd8:	2101      	movs	r1, #1
 801abda:	461a      	mov	r2, r3
 801abdc:	6019      	str	r1, [r3, #0]
 801abde:	6813      	ldr	r3, [r2, #0]
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d1fc      	bne.n	801abde <PDM_Filter_Init+0x3e>
 801abe4:	4b4b      	ldr	r3, [pc, #300]	; (801ad14 <PDM_Filter_Init+0x174>)
 801abe6:	494c      	ldr	r1, [pc, #304]	; (801ad18 <PDM_Filter_Init+0x178>)
 801abe8:	4a4c      	ldr	r2, [pc, #304]	; (801ad1c <PDM_Filter_Init+0x17c>)
 801abea:	6019      	str	r1, [r3, #0]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	8820      	ldrh	r0, [r4, #0]
 801abf0:	4293      	cmp	r3, r2
 801abf2:	8961      	ldrh	r1, [r4, #10]
 801abf4:	f04f 0300 	mov.w	r3, #0
 801abf8:	8922      	ldrh	r2, [r4, #8]
 801abfa:	bf14      	ite	ne
 801abfc:	2500      	movne	r5, #0
 801abfe:	4d47      	ldreq	r5, [pc, #284]	; (801ad1c <PDM_Filter_Init+0x17c>)
 801ac00:	2801      	cmp	r0, #1
 801ac02:	61a3      	str	r3, [r4, #24]
 801ac04:	6465      	str	r5, [r4, #68]	; 0x44
 801ac06:	60e3      	str	r3, [r4, #12]
 801ac08:	6263      	str	r3, [r4, #36]	; 0x24
 801ac0a:	6423      	str	r3, [r4, #64]	; 0x40
 801ac0c:	86a1      	strh	r1, [r4, #52]	; 0x34
 801ac0e:	86e2      	strh	r2, [r4, #54]	; 0x36
 801ac10:	e9c4 3304 	strd	r3, r3, [r4, #16]
 801ac14:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801ac18:	d936      	bls.n	801ac88 <PDM_Filter_Init+0xe8>
 801ac1a:	2003      	movs	r0, #3
 801ac1c:	2302      	movs	r3, #2
 801ac1e:	8862      	ldrh	r2, [r4, #2]
 801ac20:	2a01      	cmp	r2, #1
 801ac22:	d92e      	bls.n	801ac82 <PDM_Filter_Init+0xe2>
 801ac24:	2140      	movs	r1, #64	; 0x40
 801ac26:	2300      	movs	r3, #0
 801ac28:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801ac2a:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 801ac2e:	d101      	bne.n	801ac34 <PDM_Filter_Init+0x94>
 801ac30:	460b      	mov	r3, r1
 801ac32:	6421      	str	r1, [r4, #64]	; 0x40
 801ac34:	6862      	ldr	r2, [r4, #4]
 801ac36:	b11a      	cbz	r2, 801ac40 <PDM_Filter_Init+0xa0>
 801ac38:	f043 0310 	orr.w	r3, r3, #16
 801ac3c:	62e2      	str	r2, [r4, #44]	; 0x2c
 801ac3e:	6423      	str	r3, [r4, #64]	; 0x40
 801ac40:	2200      	movs	r2, #0
 801ac42:	8722      	strh	r2, [r4, #56]	; 0x38
 801ac44:	b908      	cbnz	r0, 801ac4a <PDM_Filter_Init+0xaa>
 801ac46:	3380      	adds	r3, #128	; 0x80
 801ac48:	6423      	str	r3, [r4, #64]	; 0x40
 801ac4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac4c:	4b34      	ldr	r3, [pc, #208]	; (801ad20 <PDM_Filter_Init+0x180>)
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d1c0      	bne.n	801abd6 <PDM_Filter_Init+0x36>
 801ac54:	4a33      	ldr	r2, [pc, #204]	; (801ad24 <PDM_Filter_Init+0x184>)
 801ac56:	6813      	ldr	r3, [r2, #0]
 801ac58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ac5c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801ac60:	d006      	beq.n	801ac70 <PDM_Filter_Init+0xd0>
 801ac62:	6813      	ldr	r3, [r2, #0]
 801ac64:	f240 4283 	movw	r2, #1155	; 0x483
 801ac68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ac6c:	4293      	cmp	r3, r2
 801ac6e:	d1b2      	bne.n	801abd6 <PDM_Filter_Init+0x36>
 801ac70:	4b2d      	ldr	r3, [pc, #180]	; (801ad28 <PDM_Filter_Init+0x188>)
 801ac72:	2101      	movs	r1, #1
 801ac74:	461a      	mov	r2, r3
 801ac76:	6019      	str	r1, [r3, #0]
 801ac78:	6813      	ldr	r3, [r2, #0]
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d1fc      	bne.n	801ac78 <PDM_Filter_Init+0xd8>
 801ac7e:	4b2b      	ldr	r3, [pc, #172]	; (801ad2c <PDM_Filter_Init+0x18c>)
 801ac80:	e7b1      	b.n	801abe6 <PDM_Filter_Init+0x46>
 801ac82:	d03a      	beq.n	801acfa <PDM_Filter_Init+0x15a>
 801ac84:	4618      	mov	r0, r3
 801ac86:	e7cd      	b.n	801ac24 <PDM_Filter_Init+0x84>
 801ac88:	4d29      	ldr	r5, [pc, #164]	; (801ad30 <PDM_Filter_Init+0x190>)
 801ac8a:	782a      	ldrb	r2, [r5, #0]
 801ac8c:	d01b      	beq.n	801acc6 <PDM_Filter_Init+0x126>
 801ac8e:	2a01      	cmp	r2, #1
 801ac90:	d001      	beq.n	801ac96 <PDM_Filter_Init+0xf6>
 801ac92:	2001      	movs	r0, #1
 801ac94:	e7c3      	b.n	801ac1e <PDM_Filter_Init+0x7e>
 801ac96:	4927      	ldr	r1, [pc, #156]	; (801ad34 <PDM_Filter_Init+0x194>)
 801ac98:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801ad3c <PDM_Filter_Init+0x19c>
 801ac9c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 801aca0:	4e25      	ldr	r6, [pc, #148]	; (801ad38 <PDM_Filter_Init+0x198>)
 801aca2:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801aca6:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 801acaa:	ea02 0006 	and.w	r0, r2, r6
 801acae:	f3c2 5209 	ubfx	r2, r2, #20, #10
 801acb2:	428f      	cmp	r7, r1
 801acb4:	ea43 0300 	orr.w	r3, r3, r0
 801acb8:	4413      	add	r3, r2
 801acba:	600b      	str	r3, [r1, #0]
 801acbc:	d1f1      	bne.n	801aca2 <PDM_Filter_Init+0x102>
 801acbe:	2300      	movs	r3, #0
 801acc0:	2001      	movs	r0, #1
 801acc2:	702b      	strb	r3, [r5, #0]
 801acc4:	e7ab      	b.n	801ac1e <PDM_Filter_Init+0x7e>
 801acc6:	2a00      	cmp	r2, #0
 801acc8:	d1a9      	bne.n	801ac1e <PDM_Filter_Init+0x7e>
 801acca:	491a      	ldr	r1, [pc, #104]	; (801ad34 <PDM_Filter_Init+0x194>)
 801accc:	f8df c06c 	ldr.w	ip, [pc, #108]	; 801ad3c <PDM_Filter_Init+0x19c>
 801acd0:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 801acd4:	4e18      	ldr	r6, [pc, #96]	; (801ad38 <PDM_Filter_Init+0x198>)
 801acd6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801acda:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 801acde:	ea02 0006 	and.w	r0, r2, r6
 801ace2:	f3c2 5209 	ubfx	r2, r2, #20, #10
 801ace6:	428f      	cmp	r7, r1
 801ace8:	ea43 0300 	orr.w	r3, r3, r0
 801acec:	4413      	add	r3, r2
 801acee:	600b      	str	r3, [r1, #0]
 801acf0:	d1f1      	bne.n	801acd6 <PDM_Filter_Init+0x136>
 801acf2:	2001      	movs	r0, #1
 801acf4:	2300      	movs	r3, #0
 801acf6:	7028      	strb	r0, [r5, #0]
 801acf8:	e791      	b.n	801ac1e <PDM_Filter_Init+0x7e>
 801acfa:	2220      	movs	r2, #32
 801acfc:	4618      	mov	r0, r3
 801acfe:	2160      	movs	r1, #96	; 0x60
 801ad00:	6422      	str	r2, [r4, #64]	; 0x40
 801ad02:	4613      	mov	r3, r2
 801ad04:	e790      	b.n	801ac28 <PDM_Filter_Init+0x88>
 801ad06:	bf00      	nop
 801ad08:	e0002000 	.word	0xe0002000
 801ad0c:	e000ed00 	.word	0xe000ed00
 801ad10:	40023008 	.word	0x40023008
 801ad14:	40023000 	.word	0x40023000
 801ad18:	f407a5c2 	.word	0xf407a5c2
 801ad1c:	b5e8b5cd 	.word	0xb5e8b5cd
 801ad20:	e0042000 	.word	0xe0042000
 801ad24:	5c001000 	.word	0x5c001000
 801ad28:	58024c08 	.word	0x58024c08
 801ad2c:	58024c00 	.word	0x58024c00
 801ad30:	24003a2c 	.word	0x24003a2c
 801ad34:	23fffffc 	.word	0x23fffffc
 801ad38:	000ffc00 	.word	0x000ffc00
 801ad3c:	3ff00000 	.word	0x3ff00000

0801ad40 <PDM_Filter_setConfig>:
 801ad40:	4b67      	ldr	r3, [pc, #412]	; (801aee0 <PDM_Filter_setConfig+0x1a0>)
 801ad42:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ad44:	429a      	cmp	r2, r3
 801ad46:	d128      	bne.n	801ad9a <PDM_Filter_setConfig+0x5a>
 801ad48:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801ad4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad4c:	880e      	ldrh	r6, [r1, #0]
 801ad4e:	460d      	mov	r5, r1
 801ad50:	4604      	mov	r4, r0
 801ad52:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 801ad56:	1e73      	subs	r3, r6, #1
 801ad58:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 801ad5c:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 801ad60:	2b06      	cmp	r3, #6
 801ad62:	ed2d 8b02 	vpush	{d8}
 801ad66:	6421      	str	r1, [r4, #64]	; 0x40
 801ad68:	b083      	sub	sp, #12
 801ad6a:	d820      	bhi.n	801adae <PDM_Filter_setConfig+0x6e>
 801ad6c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ad6e:	42b3      	cmp	r3, r6
 801ad70:	d03d      	beq.n	801adee <PDM_Filter_setConfig+0xae>
 801ad72:	4b5c      	ldr	r3, [pc, #368]	; (801aee4 <PDM_Filter_setConfig+0x1a4>)
 801ad74:	4013      	ands	r3, r2
 801ad76:	4333      	orrs	r3, r6
 801ad78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801ad7c:	6423      	str	r3, [r4, #64]	; 0x40
 801ad7e:	f003 030f 	and.w	r3, r3, #15
 801ad82:	2a70      	cmp	r2, #112	; 0x70
 801ad84:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801ad88:	d009      	beq.n	801ad9e <PDM_Filter_setConfig+0x5e>
 801ad8a:	2b06      	cmp	r3, #6
 801ad8c:	d824      	bhi.n	801add8 <PDM_Filter_setConfig+0x98>
 801ad8e:	e8df f003 	tbb	[pc, r3]
 801ad92:	878a      	.short	0x878a
 801ad94:	7b7e8184 	.word	0x7b7e8184
 801ad98:	78          	.byte	0x78
 801ad99:	00          	.byte	0x00
 801ad9a:	2004      	movs	r0, #4
 801ad9c:	4770      	bx	lr
 801ad9e:	2b06      	cmp	r3, #6
 801ada0:	d81a      	bhi.n	801add8 <PDM_Filter_setConfig+0x98>
 801ada2:	e8df f003 	tbb	[pc, r3]
 801ada6:	8f92      	.short	0x8f92
 801ada8:	8617898c 	.word	0x8617898c
 801adac:	83          	.byte	0x83
 801adad:	00          	.byte	0x00
 801adae:	4287      	cmp	r7, r0
 801adb0:	f000 808e 	beq.w	801aed0 <PDM_Filter_setConfig+0x190>
 801adb4:	f117 0f0c 	cmn.w	r7, #12
 801adb8:	f04f 0008 	mov.w	r0, #8
 801adbc:	da11      	bge.n	801ade2 <PDM_Filter_setConfig+0xa2>
 801adbe:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 801adc2:	3040      	adds	r0, #64	; 0x40
 801adc4:	80ab      	strh	r3, [r5, #4]
 801adc6:	886b      	ldrh	r3, [r5, #2]
 801adc8:	8626      	strh	r6, [r4, #48]	; 0x30
 801adca:	8663      	strh	r3, [r4, #50]	; 0x32
 801adcc:	b003      	add	sp, #12
 801adce:	ecbd 8b02 	vpop	{d8}
 801add2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801add4:	4b44      	ldr	r3, [pc, #272]	; (801aee8 <PDM_Filter_setConfig+0x1a8>)
 801add6:	64a3      	str	r3, [r4, #72]	; 0x48
 801add8:	f117 0f0c 	cmn.w	r7, #12
 801addc:	f04f 0000 	mov.w	r0, #0
 801ade0:	dbed      	blt.n	801adbe <PDM_Filter_setConfig+0x7e>
 801ade2:	2f33      	cmp	r7, #51	; 0x33
 801ade4:	dd10      	ble.n	801ae08 <PDM_Filter_setConfig+0xc8>
 801ade6:	2333      	movs	r3, #51	; 0x33
 801ade8:	3040      	adds	r0, #64	; 0x40
 801adea:	80ab      	strh	r3, [r5, #4]
 801adec:	e7eb      	b.n	801adc6 <PDM_Filter_setConfig+0x86>
 801adee:	4287      	cmp	r7, r0
 801adf0:	d1f2      	bne.n	801add8 <PDM_Filter_setConfig+0x98>
 801adf2:	886b      	ldrh	r3, [r5, #2]
 801adf4:	8663      	strh	r3, [r4, #50]	; 0x32
 801adf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801adf8:	2000      	movs	r0, #0
 801adfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801adfe:	6423      	str	r3, [r4, #64]	; 0x40
 801ae00:	b003      	add	sp, #12
 801ae02:	ecbd 8b02 	vpop	{d8}
 801ae06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ae0a:	f003 030f 	and.w	r3, r3, #15
 801ae0e:	3b01      	subs	r3, #1
 801ae10:	2b06      	cmp	r3, #6
 801ae12:	d831      	bhi.n	801ae78 <PDM_Filter_setConfig+0x138>
 801ae14:	4a35      	ldr	r2, [pc, #212]	; (801aeec <PDM_Filter_setConfig+0x1ac>)
 801ae16:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801ae1a:	eddf 0a35 	vldr	s1, [pc, #212]	; 801aef0 <PDM_Filter_setConfig+0x1b0>
 801ae1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ae22:	9001      	str	r0, [sp, #4]
 801ae24:	edd3 7a07 	vldr	s15, [r3, #28]
 801ae28:	ed93 8a00 	vldr	s16, [r3]
 801ae2c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801ae30:	f004 fc82 	bl	801f738 <powf>
 801ae34:	eef0 8a40 	vmov.f32	s17, s0
 801ae38:	9801      	ldr	r0, [sp, #4]
 801ae3a:	ee07 7a90 	vmov	s15, r7
 801ae3e:	ee28 8a28 	vmul.f32	s16, s16, s17
 801ae42:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801ae46:	9001      	str	r0, [sp, #4]
 801ae48:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801ae4c:	eddf 7a29 	vldr	s15, [pc, #164]	; 801aef4 <PDM_Filter_setConfig+0x1b4>
 801ae50:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801ae54:	f004 fc70 	bl	801f738 <powf>
 801ae58:	ee28 8a00 	vmul.f32	s16, s16, s0
 801ae5c:	886b      	ldrh	r3, [r5, #2]
 801ae5e:	9801      	ldr	r0, [sp, #4]
 801ae60:	feb8 8a48 	vrinta.f32	s16, s16
 801ae64:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 801ae68:	8727      	strh	r7, [r4, #56]	; 0x38
 801ae6a:	8663      	strh	r3, [r4, #50]	; 0x32
 801ae6c:	8626      	strh	r6, [r4, #48]	; 0x30
 801ae6e:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 801ae72:	2800      	cmp	r0, #0
 801ae74:	d0bf      	beq.n	801adf6 <PDM_Filter_setConfig+0xb6>
 801ae76:	e7a9      	b.n	801adcc <PDM_Filter_setConfig+0x8c>
 801ae78:	eddf 8a1f 	vldr	s17, [pc, #124]	; 801aef8 <PDM_Filter_setConfig+0x1b8>
 801ae7c:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 801aefc <PDM_Filter_setConfig+0x1bc>
 801ae80:	e7db      	b.n	801ae3a <PDM_Filter_setConfig+0xfa>
 801ae82:	4b1f      	ldr	r3, [pc, #124]	; (801af00 <PDM_Filter_setConfig+0x1c0>)
 801ae84:	64a3      	str	r3, [r4, #72]	; 0x48
 801ae86:	e7a7      	b.n	801add8 <PDM_Filter_setConfig+0x98>
 801ae88:	4b1e      	ldr	r3, [pc, #120]	; (801af04 <PDM_Filter_setConfig+0x1c4>)
 801ae8a:	64a3      	str	r3, [r4, #72]	; 0x48
 801ae8c:	e7a4      	b.n	801add8 <PDM_Filter_setConfig+0x98>
 801ae8e:	4b1e      	ldr	r3, [pc, #120]	; (801af08 <PDM_Filter_setConfig+0x1c8>)
 801ae90:	64a3      	str	r3, [r4, #72]	; 0x48
 801ae92:	e7a1      	b.n	801add8 <PDM_Filter_setConfig+0x98>
 801ae94:	4b1d      	ldr	r3, [pc, #116]	; (801af0c <PDM_Filter_setConfig+0x1cc>)
 801ae96:	64a3      	str	r3, [r4, #72]	; 0x48
 801ae98:	e79e      	b.n	801add8 <PDM_Filter_setConfig+0x98>
 801ae9a:	4b1d      	ldr	r3, [pc, #116]	; (801af10 <PDM_Filter_setConfig+0x1d0>)
 801ae9c:	64a3      	str	r3, [r4, #72]	; 0x48
 801ae9e:	e79b      	b.n	801add8 <PDM_Filter_setConfig+0x98>
 801aea0:	4b1c      	ldr	r3, [pc, #112]	; (801af14 <PDM_Filter_setConfig+0x1d4>)
 801aea2:	64a3      	str	r3, [r4, #72]	; 0x48
 801aea4:	e798      	b.n	801add8 <PDM_Filter_setConfig+0x98>
 801aea6:	4b1c      	ldr	r3, [pc, #112]	; (801af18 <PDM_Filter_setConfig+0x1d8>)
 801aea8:	64a3      	str	r3, [r4, #72]	; 0x48
 801aeaa:	e795      	b.n	801add8 <PDM_Filter_setConfig+0x98>
 801aeac:	4b1b      	ldr	r3, [pc, #108]	; (801af1c <PDM_Filter_setConfig+0x1dc>)
 801aeae:	64a3      	str	r3, [r4, #72]	; 0x48
 801aeb0:	e792      	b.n	801add8 <PDM_Filter_setConfig+0x98>
 801aeb2:	4b1b      	ldr	r3, [pc, #108]	; (801af20 <PDM_Filter_setConfig+0x1e0>)
 801aeb4:	64a3      	str	r3, [r4, #72]	; 0x48
 801aeb6:	e78f      	b.n	801add8 <PDM_Filter_setConfig+0x98>
 801aeb8:	4b1a      	ldr	r3, [pc, #104]	; (801af24 <PDM_Filter_setConfig+0x1e4>)
 801aeba:	64a3      	str	r3, [r4, #72]	; 0x48
 801aebc:	e78c      	b.n	801add8 <PDM_Filter_setConfig+0x98>
 801aebe:	4b1a      	ldr	r3, [pc, #104]	; (801af28 <PDM_Filter_setConfig+0x1e8>)
 801aec0:	64a3      	str	r3, [r4, #72]	; 0x48
 801aec2:	e789      	b.n	801add8 <PDM_Filter_setConfig+0x98>
 801aec4:	4b19      	ldr	r3, [pc, #100]	; (801af2c <PDM_Filter_setConfig+0x1ec>)
 801aec6:	64a3      	str	r3, [r4, #72]	; 0x48
 801aec8:	e786      	b.n	801add8 <PDM_Filter_setConfig+0x98>
 801aeca:	4b19      	ldr	r3, [pc, #100]	; (801af30 <PDM_Filter_setConfig+0x1f0>)
 801aecc:	64a3      	str	r3, [r4, #72]	; 0x48
 801aece:	e783      	b.n	801add8 <PDM_Filter_setConfig+0x98>
 801aed0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801aed2:	42b3      	cmp	r3, r6
 801aed4:	f47f af6e 	bne.w	801adb4 <PDM_Filter_setConfig+0x74>
 801aed8:	886b      	ldrh	r3, [r5, #2]
 801aeda:	2008      	movs	r0, #8
 801aedc:	8663      	strh	r3, [r4, #50]	; 0x32
 801aede:	e775      	b.n	801adcc <PDM_Filter_setConfig+0x8c>
 801aee0:	b5e8b5cd 	.word	0xb5e8b5cd
 801aee4:	fffffef0 	.word	0xfffffef0
 801aee8:	0801a059 	.word	0x0801a059
 801aeec:	0802274c 	.word	0x0802274c
 801aef0:	42000000 	.word	0x42000000
 801aef4:	3d4ccccd 	.word	0x3d4ccccd
 801aef8:	4f800000 	.word	0x4f800000
 801aefc:	00000000 	.word	0x00000000
 801af00:	08019465 	.word	0x08019465
 801af04:	080192ed 	.word	0x080192ed
 801af08:	080191dd 	.word	0x080191dd
 801af0c:	08019ca1 	.word	0x08019ca1
 801af10:	08019a09 	.word	0x08019a09
 801af14:	080197d1 	.word	0x080197d1
 801af18:	080195ed 	.word	0x080195ed
 801af1c:	0801a275 	.word	0x0801a275
 801af20:	0801a139 	.word	0x0801a139
 801af24:	0801a8b5 	.word	0x0801a8b5
 801af28:	0801a6b9 	.word	0x0801a6b9
 801af2c:	0801a50d 	.word	0x0801a50d
 801af30:	0801a3a1 	.word	0x0801a3a1

0801af34 <__libc_init_array>:
 801af34:	b570      	push	{r4, r5, r6, lr}
 801af36:	4d0d      	ldr	r5, [pc, #52]	; (801af6c <__libc_init_array+0x38>)
 801af38:	4c0d      	ldr	r4, [pc, #52]	; (801af70 <__libc_init_array+0x3c>)
 801af3a:	1b64      	subs	r4, r4, r5
 801af3c:	10a4      	asrs	r4, r4, #2
 801af3e:	2600      	movs	r6, #0
 801af40:	42a6      	cmp	r6, r4
 801af42:	d109      	bne.n	801af58 <__libc_init_array+0x24>
 801af44:	4d0b      	ldr	r5, [pc, #44]	; (801af74 <__libc_init_array+0x40>)
 801af46:	4c0c      	ldr	r4, [pc, #48]	; (801af78 <__libc_init_array+0x44>)
 801af48:	f004 fda2 	bl	801fa90 <_init>
 801af4c:	1b64      	subs	r4, r4, r5
 801af4e:	10a4      	asrs	r4, r4, #2
 801af50:	2600      	movs	r6, #0
 801af52:	42a6      	cmp	r6, r4
 801af54:	d105      	bne.n	801af62 <__libc_init_array+0x2e>
 801af56:	bd70      	pop	{r4, r5, r6, pc}
 801af58:	f855 3b04 	ldr.w	r3, [r5], #4
 801af5c:	4798      	blx	r3
 801af5e:	3601      	adds	r6, #1
 801af60:	e7ee      	b.n	801af40 <__libc_init_array+0xc>
 801af62:	f855 3b04 	ldr.w	r3, [r5], #4
 801af66:	4798      	blx	r3
 801af68:	3601      	adds	r6, #1
 801af6a:	e7f2      	b.n	801af52 <__libc_init_array+0x1e>
 801af6c:	08023040 	.word	0x08023040
 801af70:	08023040 	.word	0x08023040
 801af74:	08023040 	.word	0x08023040
 801af78:	08023044 	.word	0x08023044

0801af7c <malloc>:
 801af7c:	4b02      	ldr	r3, [pc, #8]	; (801af88 <malloc+0xc>)
 801af7e:	4601      	mov	r1, r0
 801af80:	6818      	ldr	r0, [r3, #0]
 801af82:	f000 b891 	b.w	801b0a8 <_malloc_r>
 801af86:	bf00      	nop
 801af88:	2400383c 	.word	0x2400383c

0801af8c <memcmp>:
 801af8c:	b530      	push	{r4, r5, lr}
 801af8e:	3901      	subs	r1, #1
 801af90:	2400      	movs	r4, #0
 801af92:	42a2      	cmp	r2, r4
 801af94:	d101      	bne.n	801af9a <memcmp+0xe>
 801af96:	2000      	movs	r0, #0
 801af98:	e005      	b.n	801afa6 <memcmp+0x1a>
 801af9a:	5d03      	ldrb	r3, [r0, r4]
 801af9c:	3401      	adds	r4, #1
 801af9e:	5d0d      	ldrb	r5, [r1, r4]
 801afa0:	42ab      	cmp	r3, r5
 801afa2:	d0f6      	beq.n	801af92 <memcmp+0x6>
 801afa4:	1b58      	subs	r0, r3, r5
 801afa6:	bd30      	pop	{r4, r5, pc}

0801afa8 <memcpy>:
 801afa8:	440a      	add	r2, r1
 801afaa:	4291      	cmp	r1, r2
 801afac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801afb0:	d100      	bne.n	801afb4 <memcpy+0xc>
 801afb2:	4770      	bx	lr
 801afb4:	b510      	push	{r4, lr}
 801afb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801afba:	f803 4f01 	strb.w	r4, [r3, #1]!
 801afbe:	4291      	cmp	r1, r2
 801afc0:	d1f9      	bne.n	801afb6 <memcpy+0xe>
 801afc2:	bd10      	pop	{r4, pc}

0801afc4 <memmove>:
 801afc4:	4288      	cmp	r0, r1
 801afc6:	b510      	push	{r4, lr}
 801afc8:	eb01 0402 	add.w	r4, r1, r2
 801afcc:	d902      	bls.n	801afd4 <memmove+0x10>
 801afce:	4284      	cmp	r4, r0
 801afd0:	4623      	mov	r3, r4
 801afd2:	d807      	bhi.n	801afe4 <memmove+0x20>
 801afd4:	1e43      	subs	r3, r0, #1
 801afd6:	42a1      	cmp	r1, r4
 801afd8:	d008      	beq.n	801afec <memmove+0x28>
 801afda:	f811 2b01 	ldrb.w	r2, [r1], #1
 801afde:	f803 2f01 	strb.w	r2, [r3, #1]!
 801afe2:	e7f8      	b.n	801afd6 <memmove+0x12>
 801afe4:	4402      	add	r2, r0
 801afe6:	4601      	mov	r1, r0
 801afe8:	428a      	cmp	r2, r1
 801afea:	d100      	bne.n	801afee <memmove+0x2a>
 801afec:	bd10      	pop	{r4, pc}
 801afee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801aff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801aff6:	e7f7      	b.n	801afe8 <memmove+0x24>

0801aff8 <memset>:
 801aff8:	4402      	add	r2, r0
 801affa:	4603      	mov	r3, r0
 801affc:	4293      	cmp	r3, r2
 801affe:	d100      	bne.n	801b002 <memset+0xa>
 801b000:	4770      	bx	lr
 801b002:	f803 1b01 	strb.w	r1, [r3], #1
 801b006:	e7f9      	b.n	801affc <memset+0x4>

0801b008 <_free_r>:
 801b008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b00a:	2900      	cmp	r1, #0
 801b00c:	d048      	beq.n	801b0a0 <_free_r+0x98>
 801b00e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b012:	9001      	str	r0, [sp, #4]
 801b014:	2b00      	cmp	r3, #0
 801b016:	f1a1 0404 	sub.w	r4, r1, #4
 801b01a:	bfb8      	it	lt
 801b01c:	18e4      	addlt	r4, r4, r3
 801b01e:	f003 faa9 	bl	801e574 <__malloc_lock>
 801b022:	4a20      	ldr	r2, [pc, #128]	; (801b0a4 <_free_r+0x9c>)
 801b024:	9801      	ldr	r0, [sp, #4]
 801b026:	6813      	ldr	r3, [r2, #0]
 801b028:	4615      	mov	r5, r2
 801b02a:	b933      	cbnz	r3, 801b03a <_free_r+0x32>
 801b02c:	6063      	str	r3, [r4, #4]
 801b02e:	6014      	str	r4, [r2, #0]
 801b030:	b003      	add	sp, #12
 801b032:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b036:	f003 baa3 	b.w	801e580 <__malloc_unlock>
 801b03a:	42a3      	cmp	r3, r4
 801b03c:	d90b      	bls.n	801b056 <_free_r+0x4e>
 801b03e:	6821      	ldr	r1, [r4, #0]
 801b040:	1862      	adds	r2, r4, r1
 801b042:	4293      	cmp	r3, r2
 801b044:	bf04      	itt	eq
 801b046:	681a      	ldreq	r2, [r3, #0]
 801b048:	685b      	ldreq	r3, [r3, #4]
 801b04a:	6063      	str	r3, [r4, #4]
 801b04c:	bf04      	itt	eq
 801b04e:	1852      	addeq	r2, r2, r1
 801b050:	6022      	streq	r2, [r4, #0]
 801b052:	602c      	str	r4, [r5, #0]
 801b054:	e7ec      	b.n	801b030 <_free_r+0x28>
 801b056:	461a      	mov	r2, r3
 801b058:	685b      	ldr	r3, [r3, #4]
 801b05a:	b10b      	cbz	r3, 801b060 <_free_r+0x58>
 801b05c:	42a3      	cmp	r3, r4
 801b05e:	d9fa      	bls.n	801b056 <_free_r+0x4e>
 801b060:	6811      	ldr	r1, [r2, #0]
 801b062:	1855      	adds	r5, r2, r1
 801b064:	42a5      	cmp	r5, r4
 801b066:	d10b      	bne.n	801b080 <_free_r+0x78>
 801b068:	6824      	ldr	r4, [r4, #0]
 801b06a:	4421      	add	r1, r4
 801b06c:	1854      	adds	r4, r2, r1
 801b06e:	42a3      	cmp	r3, r4
 801b070:	6011      	str	r1, [r2, #0]
 801b072:	d1dd      	bne.n	801b030 <_free_r+0x28>
 801b074:	681c      	ldr	r4, [r3, #0]
 801b076:	685b      	ldr	r3, [r3, #4]
 801b078:	6053      	str	r3, [r2, #4]
 801b07a:	4421      	add	r1, r4
 801b07c:	6011      	str	r1, [r2, #0]
 801b07e:	e7d7      	b.n	801b030 <_free_r+0x28>
 801b080:	d902      	bls.n	801b088 <_free_r+0x80>
 801b082:	230c      	movs	r3, #12
 801b084:	6003      	str	r3, [r0, #0]
 801b086:	e7d3      	b.n	801b030 <_free_r+0x28>
 801b088:	6825      	ldr	r5, [r4, #0]
 801b08a:	1961      	adds	r1, r4, r5
 801b08c:	428b      	cmp	r3, r1
 801b08e:	bf04      	itt	eq
 801b090:	6819      	ldreq	r1, [r3, #0]
 801b092:	685b      	ldreq	r3, [r3, #4]
 801b094:	6063      	str	r3, [r4, #4]
 801b096:	bf04      	itt	eq
 801b098:	1949      	addeq	r1, r1, r5
 801b09a:	6021      	streq	r1, [r4, #0]
 801b09c:	6054      	str	r4, [r2, #4]
 801b09e:	e7c7      	b.n	801b030 <_free_r+0x28>
 801b0a0:	b003      	add	sp, #12
 801b0a2:	bd30      	pop	{r4, r5, pc}
 801b0a4:	24003bb0 	.word	0x24003bb0

0801b0a8 <_malloc_r>:
 801b0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0aa:	1ccd      	adds	r5, r1, #3
 801b0ac:	f025 0503 	bic.w	r5, r5, #3
 801b0b0:	3508      	adds	r5, #8
 801b0b2:	2d0c      	cmp	r5, #12
 801b0b4:	bf38      	it	cc
 801b0b6:	250c      	movcc	r5, #12
 801b0b8:	2d00      	cmp	r5, #0
 801b0ba:	4606      	mov	r6, r0
 801b0bc:	db01      	blt.n	801b0c2 <_malloc_r+0x1a>
 801b0be:	42a9      	cmp	r1, r5
 801b0c0:	d903      	bls.n	801b0ca <_malloc_r+0x22>
 801b0c2:	230c      	movs	r3, #12
 801b0c4:	6033      	str	r3, [r6, #0]
 801b0c6:	2000      	movs	r0, #0
 801b0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b0ca:	f003 fa53 	bl	801e574 <__malloc_lock>
 801b0ce:	4921      	ldr	r1, [pc, #132]	; (801b154 <_malloc_r+0xac>)
 801b0d0:	680a      	ldr	r2, [r1, #0]
 801b0d2:	4614      	mov	r4, r2
 801b0d4:	b99c      	cbnz	r4, 801b0fe <_malloc_r+0x56>
 801b0d6:	4f20      	ldr	r7, [pc, #128]	; (801b158 <_malloc_r+0xb0>)
 801b0d8:	683b      	ldr	r3, [r7, #0]
 801b0da:	b923      	cbnz	r3, 801b0e6 <_malloc_r+0x3e>
 801b0dc:	4621      	mov	r1, r4
 801b0de:	4630      	mov	r0, r6
 801b0e0:	f000 fedc 	bl	801be9c <_sbrk_r>
 801b0e4:	6038      	str	r0, [r7, #0]
 801b0e6:	4629      	mov	r1, r5
 801b0e8:	4630      	mov	r0, r6
 801b0ea:	f000 fed7 	bl	801be9c <_sbrk_r>
 801b0ee:	1c43      	adds	r3, r0, #1
 801b0f0:	d123      	bne.n	801b13a <_malloc_r+0x92>
 801b0f2:	230c      	movs	r3, #12
 801b0f4:	6033      	str	r3, [r6, #0]
 801b0f6:	4630      	mov	r0, r6
 801b0f8:	f003 fa42 	bl	801e580 <__malloc_unlock>
 801b0fc:	e7e3      	b.n	801b0c6 <_malloc_r+0x1e>
 801b0fe:	6823      	ldr	r3, [r4, #0]
 801b100:	1b5b      	subs	r3, r3, r5
 801b102:	d417      	bmi.n	801b134 <_malloc_r+0x8c>
 801b104:	2b0b      	cmp	r3, #11
 801b106:	d903      	bls.n	801b110 <_malloc_r+0x68>
 801b108:	6023      	str	r3, [r4, #0]
 801b10a:	441c      	add	r4, r3
 801b10c:	6025      	str	r5, [r4, #0]
 801b10e:	e004      	b.n	801b11a <_malloc_r+0x72>
 801b110:	6863      	ldr	r3, [r4, #4]
 801b112:	42a2      	cmp	r2, r4
 801b114:	bf0c      	ite	eq
 801b116:	600b      	streq	r3, [r1, #0]
 801b118:	6053      	strne	r3, [r2, #4]
 801b11a:	4630      	mov	r0, r6
 801b11c:	f003 fa30 	bl	801e580 <__malloc_unlock>
 801b120:	f104 000b 	add.w	r0, r4, #11
 801b124:	1d23      	adds	r3, r4, #4
 801b126:	f020 0007 	bic.w	r0, r0, #7
 801b12a:	1ac2      	subs	r2, r0, r3
 801b12c:	d0cc      	beq.n	801b0c8 <_malloc_r+0x20>
 801b12e:	1a1b      	subs	r3, r3, r0
 801b130:	50a3      	str	r3, [r4, r2]
 801b132:	e7c9      	b.n	801b0c8 <_malloc_r+0x20>
 801b134:	4622      	mov	r2, r4
 801b136:	6864      	ldr	r4, [r4, #4]
 801b138:	e7cc      	b.n	801b0d4 <_malloc_r+0x2c>
 801b13a:	1cc4      	adds	r4, r0, #3
 801b13c:	f024 0403 	bic.w	r4, r4, #3
 801b140:	42a0      	cmp	r0, r4
 801b142:	d0e3      	beq.n	801b10c <_malloc_r+0x64>
 801b144:	1a21      	subs	r1, r4, r0
 801b146:	4630      	mov	r0, r6
 801b148:	f000 fea8 	bl	801be9c <_sbrk_r>
 801b14c:	3001      	adds	r0, #1
 801b14e:	d1dd      	bne.n	801b10c <_malloc_r+0x64>
 801b150:	e7cf      	b.n	801b0f2 <_malloc_r+0x4a>
 801b152:	bf00      	nop
 801b154:	24003bb0 	.word	0x24003bb0
 801b158:	24003bb4 	.word	0x24003bb4

0801b15c <__cvt>:
 801b15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b15e:	ed2d 8b02 	vpush	{d8}
 801b162:	eeb0 8b40 	vmov.f64	d8, d0
 801b166:	b085      	sub	sp, #20
 801b168:	4617      	mov	r7, r2
 801b16a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b16c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b16e:	ee18 2a90 	vmov	r2, s17
 801b172:	f025 0520 	bic.w	r5, r5, #32
 801b176:	2a00      	cmp	r2, #0
 801b178:	bfb6      	itet	lt
 801b17a:	222d      	movlt	r2, #45	; 0x2d
 801b17c:	2200      	movge	r2, #0
 801b17e:	eeb1 8b40 	vneglt.f64	d8, d0
 801b182:	2d46      	cmp	r5, #70	; 0x46
 801b184:	460c      	mov	r4, r1
 801b186:	701a      	strb	r2, [r3, #0]
 801b188:	d004      	beq.n	801b194 <__cvt+0x38>
 801b18a:	2d45      	cmp	r5, #69	; 0x45
 801b18c:	d100      	bne.n	801b190 <__cvt+0x34>
 801b18e:	3401      	adds	r4, #1
 801b190:	2102      	movs	r1, #2
 801b192:	e000      	b.n	801b196 <__cvt+0x3a>
 801b194:	2103      	movs	r1, #3
 801b196:	ab03      	add	r3, sp, #12
 801b198:	9301      	str	r3, [sp, #4]
 801b19a:	ab02      	add	r3, sp, #8
 801b19c:	9300      	str	r3, [sp, #0]
 801b19e:	4622      	mov	r2, r4
 801b1a0:	4633      	mov	r3, r6
 801b1a2:	eeb0 0b48 	vmov.f64	d0, d8
 801b1a6:	f001 fea7 	bl	801cef8 <_dtoa_r>
 801b1aa:	2d47      	cmp	r5, #71	; 0x47
 801b1ac:	d109      	bne.n	801b1c2 <__cvt+0x66>
 801b1ae:	07fb      	lsls	r3, r7, #31
 801b1b0:	d407      	bmi.n	801b1c2 <__cvt+0x66>
 801b1b2:	9b03      	ldr	r3, [sp, #12]
 801b1b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b1b6:	1a1b      	subs	r3, r3, r0
 801b1b8:	6013      	str	r3, [r2, #0]
 801b1ba:	b005      	add	sp, #20
 801b1bc:	ecbd 8b02 	vpop	{d8}
 801b1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1c2:	2d46      	cmp	r5, #70	; 0x46
 801b1c4:	eb00 0204 	add.w	r2, r0, r4
 801b1c8:	d10c      	bne.n	801b1e4 <__cvt+0x88>
 801b1ca:	7803      	ldrb	r3, [r0, #0]
 801b1cc:	2b30      	cmp	r3, #48	; 0x30
 801b1ce:	d107      	bne.n	801b1e0 <__cvt+0x84>
 801b1d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1d8:	bf1c      	itt	ne
 801b1da:	f1c4 0401 	rsbne	r4, r4, #1
 801b1de:	6034      	strne	r4, [r6, #0]
 801b1e0:	6833      	ldr	r3, [r6, #0]
 801b1e2:	441a      	add	r2, r3
 801b1e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1ec:	bf08      	it	eq
 801b1ee:	9203      	streq	r2, [sp, #12]
 801b1f0:	2130      	movs	r1, #48	; 0x30
 801b1f2:	9b03      	ldr	r3, [sp, #12]
 801b1f4:	4293      	cmp	r3, r2
 801b1f6:	d2dc      	bcs.n	801b1b2 <__cvt+0x56>
 801b1f8:	1c5c      	adds	r4, r3, #1
 801b1fa:	9403      	str	r4, [sp, #12]
 801b1fc:	7019      	strb	r1, [r3, #0]
 801b1fe:	e7f8      	b.n	801b1f2 <__cvt+0x96>

0801b200 <__exponent>:
 801b200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b202:	4603      	mov	r3, r0
 801b204:	2900      	cmp	r1, #0
 801b206:	bfb8      	it	lt
 801b208:	4249      	neglt	r1, r1
 801b20a:	f803 2b02 	strb.w	r2, [r3], #2
 801b20e:	bfb4      	ite	lt
 801b210:	222d      	movlt	r2, #45	; 0x2d
 801b212:	222b      	movge	r2, #43	; 0x2b
 801b214:	2909      	cmp	r1, #9
 801b216:	7042      	strb	r2, [r0, #1]
 801b218:	dd2a      	ble.n	801b270 <__exponent+0x70>
 801b21a:	f10d 0407 	add.w	r4, sp, #7
 801b21e:	46a4      	mov	ip, r4
 801b220:	270a      	movs	r7, #10
 801b222:	46a6      	mov	lr, r4
 801b224:	460a      	mov	r2, r1
 801b226:	fb91 f6f7 	sdiv	r6, r1, r7
 801b22a:	fb07 1516 	mls	r5, r7, r6, r1
 801b22e:	3530      	adds	r5, #48	; 0x30
 801b230:	2a63      	cmp	r2, #99	; 0x63
 801b232:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801b236:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801b23a:	4631      	mov	r1, r6
 801b23c:	dcf1      	bgt.n	801b222 <__exponent+0x22>
 801b23e:	3130      	adds	r1, #48	; 0x30
 801b240:	f1ae 0502 	sub.w	r5, lr, #2
 801b244:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b248:	1c44      	adds	r4, r0, #1
 801b24a:	4629      	mov	r1, r5
 801b24c:	4561      	cmp	r1, ip
 801b24e:	d30a      	bcc.n	801b266 <__exponent+0x66>
 801b250:	f10d 0209 	add.w	r2, sp, #9
 801b254:	eba2 020e 	sub.w	r2, r2, lr
 801b258:	4565      	cmp	r5, ip
 801b25a:	bf88      	it	hi
 801b25c:	2200      	movhi	r2, #0
 801b25e:	4413      	add	r3, r2
 801b260:	1a18      	subs	r0, r3, r0
 801b262:	b003      	add	sp, #12
 801b264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b266:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b26a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801b26e:	e7ed      	b.n	801b24c <__exponent+0x4c>
 801b270:	2330      	movs	r3, #48	; 0x30
 801b272:	3130      	adds	r1, #48	; 0x30
 801b274:	7083      	strb	r3, [r0, #2]
 801b276:	70c1      	strb	r1, [r0, #3]
 801b278:	1d03      	adds	r3, r0, #4
 801b27a:	e7f1      	b.n	801b260 <__exponent+0x60>
 801b27c:	0000      	movs	r0, r0
	...

0801b280 <_printf_float>:
 801b280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b284:	b08b      	sub	sp, #44	; 0x2c
 801b286:	460c      	mov	r4, r1
 801b288:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801b28c:	4616      	mov	r6, r2
 801b28e:	461f      	mov	r7, r3
 801b290:	4605      	mov	r5, r0
 801b292:	f003 f8f1 	bl	801e478 <_localeconv_r>
 801b296:	f8d0 b000 	ldr.w	fp, [r0]
 801b29a:	4658      	mov	r0, fp
 801b29c:	f7e5 f820 	bl	80002e0 <strlen>
 801b2a0:	2300      	movs	r3, #0
 801b2a2:	9308      	str	r3, [sp, #32]
 801b2a4:	f8d8 3000 	ldr.w	r3, [r8]
 801b2a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 801b2ac:	6822      	ldr	r2, [r4, #0]
 801b2ae:	3307      	adds	r3, #7
 801b2b0:	f023 0307 	bic.w	r3, r3, #7
 801b2b4:	f103 0108 	add.w	r1, r3, #8
 801b2b8:	f8c8 1000 	str.w	r1, [r8]
 801b2bc:	4682      	mov	sl, r0
 801b2be:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b2c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801b2c6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801b528 <_printf_float+0x2a8>
 801b2ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801b2ce:	eeb0 6bc0 	vabs.f64	d6, d0
 801b2d2:	eeb4 6b47 	vcmp.f64	d6, d7
 801b2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2da:	dd24      	ble.n	801b326 <_printf_float+0xa6>
 801b2dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2e4:	d502      	bpl.n	801b2ec <_printf_float+0x6c>
 801b2e6:	232d      	movs	r3, #45	; 0x2d
 801b2e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b2ec:	4b90      	ldr	r3, [pc, #576]	; (801b530 <_printf_float+0x2b0>)
 801b2ee:	4891      	ldr	r0, [pc, #580]	; (801b534 <_printf_float+0x2b4>)
 801b2f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801b2f4:	bf94      	ite	ls
 801b2f6:	4698      	movls	r8, r3
 801b2f8:	4680      	movhi	r8, r0
 801b2fa:	2303      	movs	r3, #3
 801b2fc:	6123      	str	r3, [r4, #16]
 801b2fe:	f022 0204 	bic.w	r2, r2, #4
 801b302:	2300      	movs	r3, #0
 801b304:	6022      	str	r2, [r4, #0]
 801b306:	9304      	str	r3, [sp, #16]
 801b308:	9700      	str	r7, [sp, #0]
 801b30a:	4633      	mov	r3, r6
 801b30c:	aa09      	add	r2, sp, #36	; 0x24
 801b30e:	4621      	mov	r1, r4
 801b310:	4628      	mov	r0, r5
 801b312:	f000 f9d3 	bl	801b6bc <_printf_common>
 801b316:	3001      	adds	r0, #1
 801b318:	f040 808a 	bne.w	801b430 <_printf_float+0x1b0>
 801b31c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b320:	b00b      	add	sp, #44	; 0x2c
 801b322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b326:	eeb4 0b40 	vcmp.f64	d0, d0
 801b32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b32e:	d709      	bvc.n	801b344 <_printf_float+0xc4>
 801b330:	ee10 3a90 	vmov	r3, s1
 801b334:	2b00      	cmp	r3, #0
 801b336:	bfbc      	itt	lt
 801b338:	232d      	movlt	r3, #45	; 0x2d
 801b33a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b33e:	487e      	ldr	r0, [pc, #504]	; (801b538 <_printf_float+0x2b8>)
 801b340:	4b7e      	ldr	r3, [pc, #504]	; (801b53c <_printf_float+0x2bc>)
 801b342:	e7d5      	b.n	801b2f0 <_printf_float+0x70>
 801b344:	6863      	ldr	r3, [r4, #4]
 801b346:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801b34a:	9104      	str	r1, [sp, #16]
 801b34c:	1c59      	adds	r1, r3, #1
 801b34e:	d13c      	bne.n	801b3ca <_printf_float+0x14a>
 801b350:	2306      	movs	r3, #6
 801b352:	6063      	str	r3, [r4, #4]
 801b354:	2300      	movs	r3, #0
 801b356:	9303      	str	r3, [sp, #12]
 801b358:	ab08      	add	r3, sp, #32
 801b35a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b35e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b362:	ab07      	add	r3, sp, #28
 801b364:	6861      	ldr	r1, [r4, #4]
 801b366:	9300      	str	r3, [sp, #0]
 801b368:	6022      	str	r2, [r4, #0]
 801b36a:	f10d 031b 	add.w	r3, sp, #27
 801b36e:	4628      	mov	r0, r5
 801b370:	f7ff fef4 	bl	801b15c <__cvt>
 801b374:	9b04      	ldr	r3, [sp, #16]
 801b376:	9907      	ldr	r1, [sp, #28]
 801b378:	2b47      	cmp	r3, #71	; 0x47
 801b37a:	4680      	mov	r8, r0
 801b37c:	d108      	bne.n	801b390 <_printf_float+0x110>
 801b37e:	1cc8      	adds	r0, r1, #3
 801b380:	db02      	blt.n	801b388 <_printf_float+0x108>
 801b382:	6863      	ldr	r3, [r4, #4]
 801b384:	4299      	cmp	r1, r3
 801b386:	dd41      	ble.n	801b40c <_printf_float+0x18c>
 801b388:	f1a9 0902 	sub.w	r9, r9, #2
 801b38c:	fa5f f989 	uxtb.w	r9, r9
 801b390:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b394:	d820      	bhi.n	801b3d8 <_printf_float+0x158>
 801b396:	3901      	subs	r1, #1
 801b398:	464a      	mov	r2, r9
 801b39a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b39e:	9107      	str	r1, [sp, #28]
 801b3a0:	f7ff ff2e 	bl	801b200 <__exponent>
 801b3a4:	9a08      	ldr	r2, [sp, #32]
 801b3a6:	9004      	str	r0, [sp, #16]
 801b3a8:	1813      	adds	r3, r2, r0
 801b3aa:	2a01      	cmp	r2, #1
 801b3ac:	6123      	str	r3, [r4, #16]
 801b3ae:	dc02      	bgt.n	801b3b6 <_printf_float+0x136>
 801b3b0:	6822      	ldr	r2, [r4, #0]
 801b3b2:	07d2      	lsls	r2, r2, #31
 801b3b4:	d501      	bpl.n	801b3ba <_printf_float+0x13a>
 801b3b6:	3301      	adds	r3, #1
 801b3b8:	6123      	str	r3, [r4, #16]
 801b3ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d0a2      	beq.n	801b308 <_printf_float+0x88>
 801b3c2:	232d      	movs	r3, #45	; 0x2d
 801b3c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b3c8:	e79e      	b.n	801b308 <_printf_float+0x88>
 801b3ca:	9904      	ldr	r1, [sp, #16]
 801b3cc:	2947      	cmp	r1, #71	; 0x47
 801b3ce:	d1c1      	bne.n	801b354 <_printf_float+0xd4>
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	d1bf      	bne.n	801b354 <_printf_float+0xd4>
 801b3d4:	2301      	movs	r3, #1
 801b3d6:	e7bc      	b.n	801b352 <_printf_float+0xd2>
 801b3d8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801b3dc:	d118      	bne.n	801b410 <_printf_float+0x190>
 801b3de:	2900      	cmp	r1, #0
 801b3e0:	6863      	ldr	r3, [r4, #4]
 801b3e2:	dd0b      	ble.n	801b3fc <_printf_float+0x17c>
 801b3e4:	6121      	str	r1, [r4, #16]
 801b3e6:	b913      	cbnz	r3, 801b3ee <_printf_float+0x16e>
 801b3e8:	6822      	ldr	r2, [r4, #0]
 801b3ea:	07d0      	lsls	r0, r2, #31
 801b3ec:	d502      	bpl.n	801b3f4 <_printf_float+0x174>
 801b3ee:	3301      	adds	r3, #1
 801b3f0:	440b      	add	r3, r1
 801b3f2:	6123      	str	r3, [r4, #16]
 801b3f4:	2300      	movs	r3, #0
 801b3f6:	65a1      	str	r1, [r4, #88]	; 0x58
 801b3f8:	9304      	str	r3, [sp, #16]
 801b3fa:	e7de      	b.n	801b3ba <_printf_float+0x13a>
 801b3fc:	b913      	cbnz	r3, 801b404 <_printf_float+0x184>
 801b3fe:	6822      	ldr	r2, [r4, #0]
 801b400:	07d2      	lsls	r2, r2, #31
 801b402:	d501      	bpl.n	801b408 <_printf_float+0x188>
 801b404:	3302      	adds	r3, #2
 801b406:	e7f4      	b.n	801b3f2 <_printf_float+0x172>
 801b408:	2301      	movs	r3, #1
 801b40a:	e7f2      	b.n	801b3f2 <_printf_float+0x172>
 801b40c:	f04f 0967 	mov.w	r9, #103	; 0x67
 801b410:	9b08      	ldr	r3, [sp, #32]
 801b412:	4299      	cmp	r1, r3
 801b414:	db05      	blt.n	801b422 <_printf_float+0x1a2>
 801b416:	6823      	ldr	r3, [r4, #0]
 801b418:	6121      	str	r1, [r4, #16]
 801b41a:	07d8      	lsls	r0, r3, #31
 801b41c:	d5ea      	bpl.n	801b3f4 <_printf_float+0x174>
 801b41e:	1c4b      	adds	r3, r1, #1
 801b420:	e7e7      	b.n	801b3f2 <_printf_float+0x172>
 801b422:	2900      	cmp	r1, #0
 801b424:	bfd4      	ite	le
 801b426:	f1c1 0202 	rsble	r2, r1, #2
 801b42a:	2201      	movgt	r2, #1
 801b42c:	4413      	add	r3, r2
 801b42e:	e7e0      	b.n	801b3f2 <_printf_float+0x172>
 801b430:	6823      	ldr	r3, [r4, #0]
 801b432:	055a      	lsls	r2, r3, #21
 801b434:	d407      	bmi.n	801b446 <_printf_float+0x1c6>
 801b436:	6923      	ldr	r3, [r4, #16]
 801b438:	4642      	mov	r2, r8
 801b43a:	4631      	mov	r1, r6
 801b43c:	4628      	mov	r0, r5
 801b43e:	47b8      	blx	r7
 801b440:	3001      	adds	r0, #1
 801b442:	d12a      	bne.n	801b49a <_printf_float+0x21a>
 801b444:	e76a      	b.n	801b31c <_printf_float+0x9c>
 801b446:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b44a:	f240 80e2 	bls.w	801b612 <_printf_float+0x392>
 801b44e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b452:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b45a:	d133      	bne.n	801b4c4 <_printf_float+0x244>
 801b45c:	4a38      	ldr	r2, [pc, #224]	; (801b540 <_printf_float+0x2c0>)
 801b45e:	2301      	movs	r3, #1
 801b460:	4631      	mov	r1, r6
 801b462:	4628      	mov	r0, r5
 801b464:	47b8      	blx	r7
 801b466:	3001      	adds	r0, #1
 801b468:	f43f af58 	beq.w	801b31c <_printf_float+0x9c>
 801b46c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b470:	429a      	cmp	r2, r3
 801b472:	db02      	blt.n	801b47a <_printf_float+0x1fa>
 801b474:	6823      	ldr	r3, [r4, #0]
 801b476:	07d8      	lsls	r0, r3, #31
 801b478:	d50f      	bpl.n	801b49a <_printf_float+0x21a>
 801b47a:	4653      	mov	r3, sl
 801b47c:	465a      	mov	r2, fp
 801b47e:	4631      	mov	r1, r6
 801b480:	4628      	mov	r0, r5
 801b482:	47b8      	blx	r7
 801b484:	3001      	adds	r0, #1
 801b486:	f43f af49 	beq.w	801b31c <_printf_float+0x9c>
 801b48a:	f04f 0800 	mov.w	r8, #0
 801b48e:	f104 091a 	add.w	r9, r4, #26
 801b492:	9b08      	ldr	r3, [sp, #32]
 801b494:	3b01      	subs	r3, #1
 801b496:	4543      	cmp	r3, r8
 801b498:	dc09      	bgt.n	801b4ae <_printf_float+0x22e>
 801b49a:	6823      	ldr	r3, [r4, #0]
 801b49c:	079b      	lsls	r3, r3, #30
 801b49e:	f100 8108 	bmi.w	801b6b2 <_printf_float+0x432>
 801b4a2:	68e0      	ldr	r0, [r4, #12]
 801b4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4a6:	4298      	cmp	r0, r3
 801b4a8:	bfb8      	it	lt
 801b4aa:	4618      	movlt	r0, r3
 801b4ac:	e738      	b.n	801b320 <_printf_float+0xa0>
 801b4ae:	2301      	movs	r3, #1
 801b4b0:	464a      	mov	r2, r9
 801b4b2:	4631      	mov	r1, r6
 801b4b4:	4628      	mov	r0, r5
 801b4b6:	47b8      	blx	r7
 801b4b8:	3001      	adds	r0, #1
 801b4ba:	f43f af2f 	beq.w	801b31c <_printf_float+0x9c>
 801b4be:	f108 0801 	add.w	r8, r8, #1
 801b4c2:	e7e6      	b.n	801b492 <_printf_float+0x212>
 801b4c4:	9b07      	ldr	r3, [sp, #28]
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	dc3c      	bgt.n	801b544 <_printf_float+0x2c4>
 801b4ca:	4a1d      	ldr	r2, [pc, #116]	; (801b540 <_printf_float+0x2c0>)
 801b4cc:	2301      	movs	r3, #1
 801b4ce:	4631      	mov	r1, r6
 801b4d0:	4628      	mov	r0, r5
 801b4d2:	47b8      	blx	r7
 801b4d4:	3001      	adds	r0, #1
 801b4d6:	f43f af21 	beq.w	801b31c <_printf_float+0x9c>
 801b4da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b4de:	4313      	orrs	r3, r2
 801b4e0:	d102      	bne.n	801b4e8 <_printf_float+0x268>
 801b4e2:	6823      	ldr	r3, [r4, #0]
 801b4e4:	07d9      	lsls	r1, r3, #31
 801b4e6:	d5d8      	bpl.n	801b49a <_printf_float+0x21a>
 801b4e8:	4653      	mov	r3, sl
 801b4ea:	465a      	mov	r2, fp
 801b4ec:	4631      	mov	r1, r6
 801b4ee:	4628      	mov	r0, r5
 801b4f0:	47b8      	blx	r7
 801b4f2:	3001      	adds	r0, #1
 801b4f4:	f43f af12 	beq.w	801b31c <_printf_float+0x9c>
 801b4f8:	f04f 0900 	mov.w	r9, #0
 801b4fc:	f104 0a1a 	add.w	sl, r4, #26
 801b500:	9b07      	ldr	r3, [sp, #28]
 801b502:	425b      	negs	r3, r3
 801b504:	454b      	cmp	r3, r9
 801b506:	dc01      	bgt.n	801b50c <_printf_float+0x28c>
 801b508:	9b08      	ldr	r3, [sp, #32]
 801b50a:	e795      	b.n	801b438 <_printf_float+0x1b8>
 801b50c:	2301      	movs	r3, #1
 801b50e:	4652      	mov	r2, sl
 801b510:	4631      	mov	r1, r6
 801b512:	4628      	mov	r0, r5
 801b514:	47b8      	blx	r7
 801b516:	3001      	adds	r0, #1
 801b518:	f43f af00 	beq.w	801b31c <_printf_float+0x9c>
 801b51c:	f109 0901 	add.w	r9, r9, #1
 801b520:	e7ee      	b.n	801b500 <_printf_float+0x280>
 801b522:	bf00      	nop
 801b524:	f3af 8000 	nop.w
 801b528:	ffffffff 	.word	0xffffffff
 801b52c:	7fefffff 	.word	0x7fefffff
 801b530:	080229b4 	.word	0x080229b4
 801b534:	080229b8 	.word	0x080229b8
 801b538:	080229c0 	.word	0x080229c0
 801b53c:	080229bc 	.word	0x080229bc
 801b540:	080229c4 	.word	0x080229c4
 801b544:	9a08      	ldr	r2, [sp, #32]
 801b546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b548:	429a      	cmp	r2, r3
 801b54a:	bfa8      	it	ge
 801b54c:	461a      	movge	r2, r3
 801b54e:	2a00      	cmp	r2, #0
 801b550:	4691      	mov	r9, r2
 801b552:	dc38      	bgt.n	801b5c6 <_printf_float+0x346>
 801b554:	2300      	movs	r3, #0
 801b556:	9305      	str	r3, [sp, #20]
 801b558:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b55c:	f104 021a 	add.w	r2, r4, #26
 801b560:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b562:	9905      	ldr	r1, [sp, #20]
 801b564:	9304      	str	r3, [sp, #16]
 801b566:	eba3 0309 	sub.w	r3, r3, r9
 801b56a:	428b      	cmp	r3, r1
 801b56c:	dc33      	bgt.n	801b5d6 <_printf_float+0x356>
 801b56e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b572:	429a      	cmp	r2, r3
 801b574:	db3c      	blt.n	801b5f0 <_printf_float+0x370>
 801b576:	6823      	ldr	r3, [r4, #0]
 801b578:	07da      	lsls	r2, r3, #31
 801b57a:	d439      	bmi.n	801b5f0 <_printf_float+0x370>
 801b57c:	9a08      	ldr	r2, [sp, #32]
 801b57e:	9b04      	ldr	r3, [sp, #16]
 801b580:	9907      	ldr	r1, [sp, #28]
 801b582:	1ad3      	subs	r3, r2, r3
 801b584:	eba2 0901 	sub.w	r9, r2, r1
 801b588:	4599      	cmp	r9, r3
 801b58a:	bfa8      	it	ge
 801b58c:	4699      	movge	r9, r3
 801b58e:	f1b9 0f00 	cmp.w	r9, #0
 801b592:	dc35      	bgt.n	801b600 <_printf_float+0x380>
 801b594:	f04f 0800 	mov.w	r8, #0
 801b598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b59c:	f104 0a1a 	add.w	sl, r4, #26
 801b5a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b5a4:	1a9b      	subs	r3, r3, r2
 801b5a6:	eba3 0309 	sub.w	r3, r3, r9
 801b5aa:	4543      	cmp	r3, r8
 801b5ac:	f77f af75 	ble.w	801b49a <_printf_float+0x21a>
 801b5b0:	2301      	movs	r3, #1
 801b5b2:	4652      	mov	r2, sl
 801b5b4:	4631      	mov	r1, r6
 801b5b6:	4628      	mov	r0, r5
 801b5b8:	47b8      	blx	r7
 801b5ba:	3001      	adds	r0, #1
 801b5bc:	f43f aeae 	beq.w	801b31c <_printf_float+0x9c>
 801b5c0:	f108 0801 	add.w	r8, r8, #1
 801b5c4:	e7ec      	b.n	801b5a0 <_printf_float+0x320>
 801b5c6:	4613      	mov	r3, r2
 801b5c8:	4631      	mov	r1, r6
 801b5ca:	4642      	mov	r2, r8
 801b5cc:	4628      	mov	r0, r5
 801b5ce:	47b8      	blx	r7
 801b5d0:	3001      	adds	r0, #1
 801b5d2:	d1bf      	bne.n	801b554 <_printf_float+0x2d4>
 801b5d4:	e6a2      	b.n	801b31c <_printf_float+0x9c>
 801b5d6:	2301      	movs	r3, #1
 801b5d8:	4631      	mov	r1, r6
 801b5da:	4628      	mov	r0, r5
 801b5dc:	9204      	str	r2, [sp, #16]
 801b5de:	47b8      	blx	r7
 801b5e0:	3001      	adds	r0, #1
 801b5e2:	f43f ae9b 	beq.w	801b31c <_printf_float+0x9c>
 801b5e6:	9b05      	ldr	r3, [sp, #20]
 801b5e8:	9a04      	ldr	r2, [sp, #16]
 801b5ea:	3301      	adds	r3, #1
 801b5ec:	9305      	str	r3, [sp, #20]
 801b5ee:	e7b7      	b.n	801b560 <_printf_float+0x2e0>
 801b5f0:	4653      	mov	r3, sl
 801b5f2:	465a      	mov	r2, fp
 801b5f4:	4631      	mov	r1, r6
 801b5f6:	4628      	mov	r0, r5
 801b5f8:	47b8      	blx	r7
 801b5fa:	3001      	adds	r0, #1
 801b5fc:	d1be      	bne.n	801b57c <_printf_float+0x2fc>
 801b5fe:	e68d      	b.n	801b31c <_printf_float+0x9c>
 801b600:	9a04      	ldr	r2, [sp, #16]
 801b602:	464b      	mov	r3, r9
 801b604:	4442      	add	r2, r8
 801b606:	4631      	mov	r1, r6
 801b608:	4628      	mov	r0, r5
 801b60a:	47b8      	blx	r7
 801b60c:	3001      	adds	r0, #1
 801b60e:	d1c1      	bne.n	801b594 <_printf_float+0x314>
 801b610:	e684      	b.n	801b31c <_printf_float+0x9c>
 801b612:	9a08      	ldr	r2, [sp, #32]
 801b614:	2a01      	cmp	r2, #1
 801b616:	dc01      	bgt.n	801b61c <_printf_float+0x39c>
 801b618:	07db      	lsls	r3, r3, #31
 801b61a:	d537      	bpl.n	801b68c <_printf_float+0x40c>
 801b61c:	2301      	movs	r3, #1
 801b61e:	4642      	mov	r2, r8
 801b620:	4631      	mov	r1, r6
 801b622:	4628      	mov	r0, r5
 801b624:	47b8      	blx	r7
 801b626:	3001      	adds	r0, #1
 801b628:	f43f ae78 	beq.w	801b31c <_printf_float+0x9c>
 801b62c:	4653      	mov	r3, sl
 801b62e:	465a      	mov	r2, fp
 801b630:	4631      	mov	r1, r6
 801b632:	4628      	mov	r0, r5
 801b634:	47b8      	blx	r7
 801b636:	3001      	adds	r0, #1
 801b638:	f43f ae70 	beq.w	801b31c <_printf_float+0x9c>
 801b63c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b640:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b648:	d01b      	beq.n	801b682 <_printf_float+0x402>
 801b64a:	9b08      	ldr	r3, [sp, #32]
 801b64c:	f108 0201 	add.w	r2, r8, #1
 801b650:	3b01      	subs	r3, #1
 801b652:	4631      	mov	r1, r6
 801b654:	4628      	mov	r0, r5
 801b656:	47b8      	blx	r7
 801b658:	3001      	adds	r0, #1
 801b65a:	d10e      	bne.n	801b67a <_printf_float+0x3fa>
 801b65c:	e65e      	b.n	801b31c <_printf_float+0x9c>
 801b65e:	2301      	movs	r3, #1
 801b660:	464a      	mov	r2, r9
 801b662:	4631      	mov	r1, r6
 801b664:	4628      	mov	r0, r5
 801b666:	47b8      	blx	r7
 801b668:	3001      	adds	r0, #1
 801b66a:	f43f ae57 	beq.w	801b31c <_printf_float+0x9c>
 801b66e:	f108 0801 	add.w	r8, r8, #1
 801b672:	9b08      	ldr	r3, [sp, #32]
 801b674:	3b01      	subs	r3, #1
 801b676:	4543      	cmp	r3, r8
 801b678:	dcf1      	bgt.n	801b65e <_printf_float+0x3de>
 801b67a:	9b04      	ldr	r3, [sp, #16]
 801b67c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b680:	e6db      	b.n	801b43a <_printf_float+0x1ba>
 801b682:	f04f 0800 	mov.w	r8, #0
 801b686:	f104 091a 	add.w	r9, r4, #26
 801b68a:	e7f2      	b.n	801b672 <_printf_float+0x3f2>
 801b68c:	2301      	movs	r3, #1
 801b68e:	4642      	mov	r2, r8
 801b690:	e7df      	b.n	801b652 <_printf_float+0x3d2>
 801b692:	2301      	movs	r3, #1
 801b694:	464a      	mov	r2, r9
 801b696:	4631      	mov	r1, r6
 801b698:	4628      	mov	r0, r5
 801b69a:	47b8      	blx	r7
 801b69c:	3001      	adds	r0, #1
 801b69e:	f43f ae3d 	beq.w	801b31c <_printf_float+0x9c>
 801b6a2:	f108 0801 	add.w	r8, r8, #1
 801b6a6:	68e3      	ldr	r3, [r4, #12]
 801b6a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b6aa:	1a5b      	subs	r3, r3, r1
 801b6ac:	4543      	cmp	r3, r8
 801b6ae:	dcf0      	bgt.n	801b692 <_printf_float+0x412>
 801b6b0:	e6f7      	b.n	801b4a2 <_printf_float+0x222>
 801b6b2:	f04f 0800 	mov.w	r8, #0
 801b6b6:	f104 0919 	add.w	r9, r4, #25
 801b6ba:	e7f4      	b.n	801b6a6 <_printf_float+0x426>

0801b6bc <_printf_common>:
 801b6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b6c0:	4616      	mov	r6, r2
 801b6c2:	4699      	mov	r9, r3
 801b6c4:	688a      	ldr	r2, [r1, #8]
 801b6c6:	690b      	ldr	r3, [r1, #16]
 801b6c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b6cc:	4293      	cmp	r3, r2
 801b6ce:	bfb8      	it	lt
 801b6d0:	4613      	movlt	r3, r2
 801b6d2:	6033      	str	r3, [r6, #0]
 801b6d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b6d8:	4607      	mov	r7, r0
 801b6da:	460c      	mov	r4, r1
 801b6dc:	b10a      	cbz	r2, 801b6e2 <_printf_common+0x26>
 801b6de:	3301      	adds	r3, #1
 801b6e0:	6033      	str	r3, [r6, #0]
 801b6e2:	6823      	ldr	r3, [r4, #0]
 801b6e4:	0699      	lsls	r1, r3, #26
 801b6e6:	bf42      	ittt	mi
 801b6e8:	6833      	ldrmi	r3, [r6, #0]
 801b6ea:	3302      	addmi	r3, #2
 801b6ec:	6033      	strmi	r3, [r6, #0]
 801b6ee:	6825      	ldr	r5, [r4, #0]
 801b6f0:	f015 0506 	ands.w	r5, r5, #6
 801b6f4:	d106      	bne.n	801b704 <_printf_common+0x48>
 801b6f6:	f104 0a19 	add.w	sl, r4, #25
 801b6fa:	68e3      	ldr	r3, [r4, #12]
 801b6fc:	6832      	ldr	r2, [r6, #0]
 801b6fe:	1a9b      	subs	r3, r3, r2
 801b700:	42ab      	cmp	r3, r5
 801b702:	dc26      	bgt.n	801b752 <_printf_common+0x96>
 801b704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b708:	1e13      	subs	r3, r2, #0
 801b70a:	6822      	ldr	r2, [r4, #0]
 801b70c:	bf18      	it	ne
 801b70e:	2301      	movne	r3, #1
 801b710:	0692      	lsls	r2, r2, #26
 801b712:	d42b      	bmi.n	801b76c <_printf_common+0xb0>
 801b714:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b718:	4649      	mov	r1, r9
 801b71a:	4638      	mov	r0, r7
 801b71c:	47c0      	blx	r8
 801b71e:	3001      	adds	r0, #1
 801b720:	d01e      	beq.n	801b760 <_printf_common+0xa4>
 801b722:	6823      	ldr	r3, [r4, #0]
 801b724:	68e5      	ldr	r5, [r4, #12]
 801b726:	6832      	ldr	r2, [r6, #0]
 801b728:	f003 0306 	and.w	r3, r3, #6
 801b72c:	2b04      	cmp	r3, #4
 801b72e:	bf08      	it	eq
 801b730:	1aad      	subeq	r5, r5, r2
 801b732:	68a3      	ldr	r3, [r4, #8]
 801b734:	6922      	ldr	r2, [r4, #16]
 801b736:	bf0c      	ite	eq
 801b738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b73c:	2500      	movne	r5, #0
 801b73e:	4293      	cmp	r3, r2
 801b740:	bfc4      	itt	gt
 801b742:	1a9b      	subgt	r3, r3, r2
 801b744:	18ed      	addgt	r5, r5, r3
 801b746:	2600      	movs	r6, #0
 801b748:	341a      	adds	r4, #26
 801b74a:	42b5      	cmp	r5, r6
 801b74c:	d11a      	bne.n	801b784 <_printf_common+0xc8>
 801b74e:	2000      	movs	r0, #0
 801b750:	e008      	b.n	801b764 <_printf_common+0xa8>
 801b752:	2301      	movs	r3, #1
 801b754:	4652      	mov	r2, sl
 801b756:	4649      	mov	r1, r9
 801b758:	4638      	mov	r0, r7
 801b75a:	47c0      	blx	r8
 801b75c:	3001      	adds	r0, #1
 801b75e:	d103      	bne.n	801b768 <_printf_common+0xac>
 801b760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b768:	3501      	adds	r5, #1
 801b76a:	e7c6      	b.n	801b6fa <_printf_common+0x3e>
 801b76c:	18e1      	adds	r1, r4, r3
 801b76e:	1c5a      	adds	r2, r3, #1
 801b770:	2030      	movs	r0, #48	; 0x30
 801b772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b776:	4422      	add	r2, r4
 801b778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b77c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b780:	3302      	adds	r3, #2
 801b782:	e7c7      	b.n	801b714 <_printf_common+0x58>
 801b784:	2301      	movs	r3, #1
 801b786:	4622      	mov	r2, r4
 801b788:	4649      	mov	r1, r9
 801b78a:	4638      	mov	r0, r7
 801b78c:	47c0      	blx	r8
 801b78e:	3001      	adds	r0, #1
 801b790:	d0e6      	beq.n	801b760 <_printf_common+0xa4>
 801b792:	3601      	adds	r6, #1
 801b794:	e7d9      	b.n	801b74a <_printf_common+0x8e>
	...

0801b798 <_printf_i>:
 801b798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b79c:	460c      	mov	r4, r1
 801b79e:	4691      	mov	r9, r2
 801b7a0:	7e27      	ldrb	r7, [r4, #24]
 801b7a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b7a4:	2f78      	cmp	r7, #120	; 0x78
 801b7a6:	4680      	mov	r8, r0
 801b7a8:	469a      	mov	sl, r3
 801b7aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b7ae:	d807      	bhi.n	801b7c0 <_printf_i+0x28>
 801b7b0:	2f62      	cmp	r7, #98	; 0x62
 801b7b2:	d80a      	bhi.n	801b7ca <_printf_i+0x32>
 801b7b4:	2f00      	cmp	r7, #0
 801b7b6:	f000 80d8 	beq.w	801b96a <_printf_i+0x1d2>
 801b7ba:	2f58      	cmp	r7, #88	; 0x58
 801b7bc:	f000 80a3 	beq.w	801b906 <_printf_i+0x16e>
 801b7c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b7c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b7c8:	e03a      	b.n	801b840 <_printf_i+0xa8>
 801b7ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b7ce:	2b15      	cmp	r3, #21
 801b7d0:	d8f6      	bhi.n	801b7c0 <_printf_i+0x28>
 801b7d2:	a001      	add	r0, pc, #4	; (adr r0, 801b7d8 <_printf_i+0x40>)
 801b7d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b7d8:	0801b831 	.word	0x0801b831
 801b7dc:	0801b845 	.word	0x0801b845
 801b7e0:	0801b7c1 	.word	0x0801b7c1
 801b7e4:	0801b7c1 	.word	0x0801b7c1
 801b7e8:	0801b7c1 	.word	0x0801b7c1
 801b7ec:	0801b7c1 	.word	0x0801b7c1
 801b7f0:	0801b845 	.word	0x0801b845
 801b7f4:	0801b7c1 	.word	0x0801b7c1
 801b7f8:	0801b7c1 	.word	0x0801b7c1
 801b7fc:	0801b7c1 	.word	0x0801b7c1
 801b800:	0801b7c1 	.word	0x0801b7c1
 801b804:	0801b951 	.word	0x0801b951
 801b808:	0801b875 	.word	0x0801b875
 801b80c:	0801b933 	.word	0x0801b933
 801b810:	0801b7c1 	.word	0x0801b7c1
 801b814:	0801b7c1 	.word	0x0801b7c1
 801b818:	0801b973 	.word	0x0801b973
 801b81c:	0801b7c1 	.word	0x0801b7c1
 801b820:	0801b875 	.word	0x0801b875
 801b824:	0801b7c1 	.word	0x0801b7c1
 801b828:	0801b7c1 	.word	0x0801b7c1
 801b82c:	0801b93b 	.word	0x0801b93b
 801b830:	680b      	ldr	r3, [r1, #0]
 801b832:	1d1a      	adds	r2, r3, #4
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	600a      	str	r2, [r1, #0]
 801b838:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b83c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b840:	2301      	movs	r3, #1
 801b842:	e0a3      	b.n	801b98c <_printf_i+0x1f4>
 801b844:	6825      	ldr	r5, [r4, #0]
 801b846:	6808      	ldr	r0, [r1, #0]
 801b848:	062e      	lsls	r6, r5, #24
 801b84a:	f100 0304 	add.w	r3, r0, #4
 801b84e:	d50a      	bpl.n	801b866 <_printf_i+0xce>
 801b850:	6805      	ldr	r5, [r0, #0]
 801b852:	600b      	str	r3, [r1, #0]
 801b854:	2d00      	cmp	r5, #0
 801b856:	da03      	bge.n	801b860 <_printf_i+0xc8>
 801b858:	232d      	movs	r3, #45	; 0x2d
 801b85a:	426d      	negs	r5, r5
 801b85c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b860:	485e      	ldr	r0, [pc, #376]	; (801b9dc <_printf_i+0x244>)
 801b862:	230a      	movs	r3, #10
 801b864:	e019      	b.n	801b89a <_printf_i+0x102>
 801b866:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b86a:	6805      	ldr	r5, [r0, #0]
 801b86c:	600b      	str	r3, [r1, #0]
 801b86e:	bf18      	it	ne
 801b870:	b22d      	sxthne	r5, r5
 801b872:	e7ef      	b.n	801b854 <_printf_i+0xbc>
 801b874:	680b      	ldr	r3, [r1, #0]
 801b876:	6825      	ldr	r5, [r4, #0]
 801b878:	1d18      	adds	r0, r3, #4
 801b87a:	6008      	str	r0, [r1, #0]
 801b87c:	0628      	lsls	r0, r5, #24
 801b87e:	d501      	bpl.n	801b884 <_printf_i+0xec>
 801b880:	681d      	ldr	r5, [r3, #0]
 801b882:	e002      	b.n	801b88a <_printf_i+0xf2>
 801b884:	0669      	lsls	r1, r5, #25
 801b886:	d5fb      	bpl.n	801b880 <_printf_i+0xe8>
 801b888:	881d      	ldrh	r5, [r3, #0]
 801b88a:	4854      	ldr	r0, [pc, #336]	; (801b9dc <_printf_i+0x244>)
 801b88c:	2f6f      	cmp	r7, #111	; 0x6f
 801b88e:	bf0c      	ite	eq
 801b890:	2308      	moveq	r3, #8
 801b892:	230a      	movne	r3, #10
 801b894:	2100      	movs	r1, #0
 801b896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b89a:	6866      	ldr	r6, [r4, #4]
 801b89c:	60a6      	str	r6, [r4, #8]
 801b89e:	2e00      	cmp	r6, #0
 801b8a0:	bfa2      	ittt	ge
 801b8a2:	6821      	ldrge	r1, [r4, #0]
 801b8a4:	f021 0104 	bicge.w	r1, r1, #4
 801b8a8:	6021      	strge	r1, [r4, #0]
 801b8aa:	b90d      	cbnz	r5, 801b8b0 <_printf_i+0x118>
 801b8ac:	2e00      	cmp	r6, #0
 801b8ae:	d04d      	beq.n	801b94c <_printf_i+0x1b4>
 801b8b0:	4616      	mov	r6, r2
 801b8b2:	fbb5 f1f3 	udiv	r1, r5, r3
 801b8b6:	fb03 5711 	mls	r7, r3, r1, r5
 801b8ba:	5dc7      	ldrb	r7, [r0, r7]
 801b8bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b8c0:	462f      	mov	r7, r5
 801b8c2:	42bb      	cmp	r3, r7
 801b8c4:	460d      	mov	r5, r1
 801b8c6:	d9f4      	bls.n	801b8b2 <_printf_i+0x11a>
 801b8c8:	2b08      	cmp	r3, #8
 801b8ca:	d10b      	bne.n	801b8e4 <_printf_i+0x14c>
 801b8cc:	6823      	ldr	r3, [r4, #0]
 801b8ce:	07df      	lsls	r7, r3, #31
 801b8d0:	d508      	bpl.n	801b8e4 <_printf_i+0x14c>
 801b8d2:	6923      	ldr	r3, [r4, #16]
 801b8d4:	6861      	ldr	r1, [r4, #4]
 801b8d6:	4299      	cmp	r1, r3
 801b8d8:	bfde      	ittt	le
 801b8da:	2330      	movle	r3, #48	; 0x30
 801b8dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b8e0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801b8e4:	1b92      	subs	r2, r2, r6
 801b8e6:	6122      	str	r2, [r4, #16]
 801b8e8:	f8cd a000 	str.w	sl, [sp]
 801b8ec:	464b      	mov	r3, r9
 801b8ee:	aa03      	add	r2, sp, #12
 801b8f0:	4621      	mov	r1, r4
 801b8f2:	4640      	mov	r0, r8
 801b8f4:	f7ff fee2 	bl	801b6bc <_printf_common>
 801b8f8:	3001      	adds	r0, #1
 801b8fa:	d14c      	bne.n	801b996 <_printf_i+0x1fe>
 801b8fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b900:	b004      	add	sp, #16
 801b902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b906:	4835      	ldr	r0, [pc, #212]	; (801b9dc <_printf_i+0x244>)
 801b908:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b90c:	6823      	ldr	r3, [r4, #0]
 801b90e:	680e      	ldr	r6, [r1, #0]
 801b910:	061f      	lsls	r7, r3, #24
 801b912:	f856 5b04 	ldr.w	r5, [r6], #4
 801b916:	600e      	str	r6, [r1, #0]
 801b918:	d514      	bpl.n	801b944 <_printf_i+0x1ac>
 801b91a:	07d9      	lsls	r1, r3, #31
 801b91c:	bf44      	itt	mi
 801b91e:	f043 0320 	orrmi.w	r3, r3, #32
 801b922:	6023      	strmi	r3, [r4, #0]
 801b924:	b91d      	cbnz	r5, 801b92e <_printf_i+0x196>
 801b926:	6823      	ldr	r3, [r4, #0]
 801b928:	f023 0320 	bic.w	r3, r3, #32
 801b92c:	6023      	str	r3, [r4, #0]
 801b92e:	2310      	movs	r3, #16
 801b930:	e7b0      	b.n	801b894 <_printf_i+0xfc>
 801b932:	6823      	ldr	r3, [r4, #0]
 801b934:	f043 0320 	orr.w	r3, r3, #32
 801b938:	6023      	str	r3, [r4, #0]
 801b93a:	2378      	movs	r3, #120	; 0x78
 801b93c:	4828      	ldr	r0, [pc, #160]	; (801b9e0 <_printf_i+0x248>)
 801b93e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b942:	e7e3      	b.n	801b90c <_printf_i+0x174>
 801b944:	065e      	lsls	r6, r3, #25
 801b946:	bf48      	it	mi
 801b948:	b2ad      	uxthmi	r5, r5
 801b94a:	e7e6      	b.n	801b91a <_printf_i+0x182>
 801b94c:	4616      	mov	r6, r2
 801b94e:	e7bb      	b.n	801b8c8 <_printf_i+0x130>
 801b950:	680b      	ldr	r3, [r1, #0]
 801b952:	6826      	ldr	r6, [r4, #0]
 801b954:	6960      	ldr	r0, [r4, #20]
 801b956:	1d1d      	adds	r5, r3, #4
 801b958:	600d      	str	r5, [r1, #0]
 801b95a:	0635      	lsls	r5, r6, #24
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	d501      	bpl.n	801b964 <_printf_i+0x1cc>
 801b960:	6018      	str	r0, [r3, #0]
 801b962:	e002      	b.n	801b96a <_printf_i+0x1d2>
 801b964:	0671      	lsls	r1, r6, #25
 801b966:	d5fb      	bpl.n	801b960 <_printf_i+0x1c8>
 801b968:	8018      	strh	r0, [r3, #0]
 801b96a:	2300      	movs	r3, #0
 801b96c:	6123      	str	r3, [r4, #16]
 801b96e:	4616      	mov	r6, r2
 801b970:	e7ba      	b.n	801b8e8 <_printf_i+0x150>
 801b972:	680b      	ldr	r3, [r1, #0]
 801b974:	1d1a      	adds	r2, r3, #4
 801b976:	600a      	str	r2, [r1, #0]
 801b978:	681e      	ldr	r6, [r3, #0]
 801b97a:	6862      	ldr	r2, [r4, #4]
 801b97c:	2100      	movs	r1, #0
 801b97e:	4630      	mov	r0, r6
 801b980:	f7e4 fcb6 	bl	80002f0 <memchr>
 801b984:	b108      	cbz	r0, 801b98a <_printf_i+0x1f2>
 801b986:	1b80      	subs	r0, r0, r6
 801b988:	6060      	str	r0, [r4, #4]
 801b98a:	6863      	ldr	r3, [r4, #4]
 801b98c:	6123      	str	r3, [r4, #16]
 801b98e:	2300      	movs	r3, #0
 801b990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b994:	e7a8      	b.n	801b8e8 <_printf_i+0x150>
 801b996:	6923      	ldr	r3, [r4, #16]
 801b998:	4632      	mov	r2, r6
 801b99a:	4649      	mov	r1, r9
 801b99c:	4640      	mov	r0, r8
 801b99e:	47d0      	blx	sl
 801b9a0:	3001      	adds	r0, #1
 801b9a2:	d0ab      	beq.n	801b8fc <_printf_i+0x164>
 801b9a4:	6823      	ldr	r3, [r4, #0]
 801b9a6:	079b      	lsls	r3, r3, #30
 801b9a8:	d413      	bmi.n	801b9d2 <_printf_i+0x23a>
 801b9aa:	68e0      	ldr	r0, [r4, #12]
 801b9ac:	9b03      	ldr	r3, [sp, #12]
 801b9ae:	4298      	cmp	r0, r3
 801b9b0:	bfb8      	it	lt
 801b9b2:	4618      	movlt	r0, r3
 801b9b4:	e7a4      	b.n	801b900 <_printf_i+0x168>
 801b9b6:	2301      	movs	r3, #1
 801b9b8:	4632      	mov	r2, r6
 801b9ba:	4649      	mov	r1, r9
 801b9bc:	4640      	mov	r0, r8
 801b9be:	47d0      	blx	sl
 801b9c0:	3001      	adds	r0, #1
 801b9c2:	d09b      	beq.n	801b8fc <_printf_i+0x164>
 801b9c4:	3501      	adds	r5, #1
 801b9c6:	68e3      	ldr	r3, [r4, #12]
 801b9c8:	9903      	ldr	r1, [sp, #12]
 801b9ca:	1a5b      	subs	r3, r3, r1
 801b9cc:	42ab      	cmp	r3, r5
 801b9ce:	dcf2      	bgt.n	801b9b6 <_printf_i+0x21e>
 801b9d0:	e7eb      	b.n	801b9aa <_printf_i+0x212>
 801b9d2:	2500      	movs	r5, #0
 801b9d4:	f104 0619 	add.w	r6, r4, #25
 801b9d8:	e7f5      	b.n	801b9c6 <_printf_i+0x22e>
 801b9da:	bf00      	nop
 801b9dc:	080229c6 	.word	0x080229c6
 801b9e0:	080229d7 	.word	0x080229d7

0801b9e4 <_scanf_float>:
 801b9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9e8:	b087      	sub	sp, #28
 801b9ea:	4617      	mov	r7, r2
 801b9ec:	9303      	str	r3, [sp, #12]
 801b9ee:	688b      	ldr	r3, [r1, #8]
 801b9f0:	1e5a      	subs	r2, r3, #1
 801b9f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b9f6:	bf83      	ittte	hi
 801b9f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b9fc:	195b      	addhi	r3, r3, r5
 801b9fe:	9302      	strhi	r3, [sp, #8]
 801ba00:	2300      	movls	r3, #0
 801ba02:	bf86      	itte	hi
 801ba04:	f240 135d 	movwhi	r3, #349	; 0x15d
 801ba08:	608b      	strhi	r3, [r1, #8]
 801ba0a:	9302      	strls	r3, [sp, #8]
 801ba0c:	680b      	ldr	r3, [r1, #0]
 801ba0e:	468b      	mov	fp, r1
 801ba10:	2500      	movs	r5, #0
 801ba12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801ba16:	f84b 3b1c 	str.w	r3, [fp], #28
 801ba1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ba1e:	4680      	mov	r8, r0
 801ba20:	460c      	mov	r4, r1
 801ba22:	465e      	mov	r6, fp
 801ba24:	46aa      	mov	sl, r5
 801ba26:	46a9      	mov	r9, r5
 801ba28:	9501      	str	r5, [sp, #4]
 801ba2a:	68a2      	ldr	r2, [r4, #8]
 801ba2c:	b152      	cbz	r2, 801ba44 <_scanf_float+0x60>
 801ba2e:	683b      	ldr	r3, [r7, #0]
 801ba30:	781b      	ldrb	r3, [r3, #0]
 801ba32:	2b4e      	cmp	r3, #78	; 0x4e
 801ba34:	d864      	bhi.n	801bb00 <_scanf_float+0x11c>
 801ba36:	2b40      	cmp	r3, #64	; 0x40
 801ba38:	d83c      	bhi.n	801bab4 <_scanf_float+0xd0>
 801ba3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801ba3e:	b2c8      	uxtb	r0, r1
 801ba40:	280e      	cmp	r0, #14
 801ba42:	d93a      	bls.n	801baba <_scanf_float+0xd6>
 801ba44:	f1b9 0f00 	cmp.w	r9, #0
 801ba48:	d003      	beq.n	801ba52 <_scanf_float+0x6e>
 801ba4a:	6823      	ldr	r3, [r4, #0]
 801ba4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ba50:	6023      	str	r3, [r4, #0]
 801ba52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801ba56:	f1ba 0f01 	cmp.w	sl, #1
 801ba5a:	f200 8113 	bhi.w	801bc84 <_scanf_float+0x2a0>
 801ba5e:	455e      	cmp	r6, fp
 801ba60:	f200 8105 	bhi.w	801bc6e <_scanf_float+0x28a>
 801ba64:	2501      	movs	r5, #1
 801ba66:	4628      	mov	r0, r5
 801ba68:	b007      	add	sp, #28
 801ba6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801ba72:	2a0d      	cmp	r2, #13
 801ba74:	d8e6      	bhi.n	801ba44 <_scanf_float+0x60>
 801ba76:	a101      	add	r1, pc, #4	; (adr r1, 801ba7c <_scanf_float+0x98>)
 801ba78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ba7c:	0801bbbb 	.word	0x0801bbbb
 801ba80:	0801ba45 	.word	0x0801ba45
 801ba84:	0801ba45 	.word	0x0801ba45
 801ba88:	0801ba45 	.word	0x0801ba45
 801ba8c:	0801bc1b 	.word	0x0801bc1b
 801ba90:	0801bbf3 	.word	0x0801bbf3
 801ba94:	0801ba45 	.word	0x0801ba45
 801ba98:	0801ba45 	.word	0x0801ba45
 801ba9c:	0801bbc9 	.word	0x0801bbc9
 801baa0:	0801ba45 	.word	0x0801ba45
 801baa4:	0801ba45 	.word	0x0801ba45
 801baa8:	0801ba45 	.word	0x0801ba45
 801baac:	0801ba45 	.word	0x0801ba45
 801bab0:	0801bb81 	.word	0x0801bb81
 801bab4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801bab8:	e7db      	b.n	801ba72 <_scanf_float+0x8e>
 801baba:	290e      	cmp	r1, #14
 801babc:	d8c2      	bhi.n	801ba44 <_scanf_float+0x60>
 801babe:	a001      	add	r0, pc, #4	; (adr r0, 801bac4 <_scanf_float+0xe0>)
 801bac0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801bac4:	0801bb73 	.word	0x0801bb73
 801bac8:	0801ba45 	.word	0x0801ba45
 801bacc:	0801bb73 	.word	0x0801bb73
 801bad0:	0801bc07 	.word	0x0801bc07
 801bad4:	0801ba45 	.word	0x0801ba45
 801bad8:	0801bb21 	.word	0x0801bb21
 801badc:	0801bb5d 	.word	0x0801bb5d
 801bae0:	0801bb5d 	.word	0x0801bb5d
 801bae4:	0801bb5d 	.word	0x0801bb5d
 801bae8:	0801bb5d 	.word	0x0801bb5d
 801baec:	0801bb5d 	.word	0x0801bb5d
 801baf0:	0801bb5d 	.word	0x0801bb5d
 801baf4:	0801bb5d 	.word	0x0801bb5d
 801baf8:	0801bb5d 	.word	0x0801bb5d
 801bafc:	0801bb5d 	.word	0x0801bb5d
 801bb00:	2b6e      	cmp	r3, #110	; 0x6e
 801bb02:	d809      	bhi.n	801bb18 <_scanf_float+0x134>
 801bb04:	2b60      	cmp	r3, #96	; 0x60
 801bb06:	d8b2      	bhi.n	801ba6e <_scanf_float+0x8a>
 801bb08:	2b54      	cmp	r3, #84	; 0x54
 801bb0a:	d077      	beq.n	801bbfc <_scanf_float+0x218>
 801bb0c:	2b59      	cmp	r3, #89	; 0x59
 801bb0e:	d199      	bne.n	801ba44 <_scanf_float+0x60>
 801bb10:	2d07      	cmp	r5, #7
 801bb12:	d197      	bne.n	801ba44 <_scanf_float+0x60>
 801bb14:	2508      	movs	r5, #8
 801bb16:	e029      	b.n	801bb6c <_scanf_float+0x188>
 801bb18:	2b74      	cmp	r3, #116	; 0x74
 801bb1a:	d06f      	beq.n	801bbfc <_scanf_float+0x218>
 801bb1c:	2b79      	cmp	r3, #121	; 0x79
 801bb1e:	e7f6      	b.n	801bb0e <_scanf_float+0x12a>
 801bb20:	6821      	ldr	r1, [r4, #0]
 801bb22:	05c8      	lsls	r0, r1, #23
 801bb24:	d51a      	bpl.n	801bb5c <_scanf_float+0x178>
 801bb26:	9b02      	ldr	r3, [sp, #8]
 801bb28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801bb2c:	6021      	str	r1, [r4, #0]
 801bb2e:	f109 0901 	add.w	r9, r9, #1
 801bb32:	b11b      	cbz	r3, 801bb3c <_scanf_float+0x158>
 801bb34:	3b01      	subs	r3, #1
 801bb36:	3201      	adds	r2, #1
 801bb38:	9302      	str	r3, [sp, #8]
 801bb3a:	60a2      	str	r2, [r4, #8]
 801bb3c:	68a3      	ldr	r3, [r4, #8]
 801bb3e:	3b01      	subs	r3, #1
 801bb40:	60a3      	str	r3, [r4, #8]
 801bb42:	6923      	ldr	r3, [r4, #16]
 801bb44:	3301      	adds	r3, #1
 801bb46:	6123      	str	r3, [r4, #16]
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	3b01      	subs	r3, #1
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	607b      	str	r3, [r7, #4]
 801bb50:	f340 8084 	ble.w	801bc5c <_scanf_float+0x278>
 801bb54:	683b      	ldr	r3, [r7, #0]
 801bb56:	3301      	adds	r3, #1
 801bb58:	603b      	str	r3, [r7, #0]
 801bb5a:	e766      	b.n	801ba2a <_scanf_float+0x46>
 801bb5c:	eb1a 0f05 	cmn.w	sl, r5
 801bb60:	f47f af70 	bne.w	801ba44 <_scanf_float+0x60>
 801bb64:	6822      	ldr	r2, [r4, #0]
 801bb66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801bb6a:	6022      	str	r2, [r4, #0]
 801bb6c:	f806 3b01 	strb.w	r3, [r6], #1
 801bb70:	e7e4      	b.n	801bb3c <_scanf_float+0x158>
 801bb72:	6822      	ldr	r2, [r4, #0]
 801bb74:	0610      	lsls	r0, r2, #24
 801bb76:	f57f af65 	bpl.w	801ba44 <_scanf_float+0x60>
 801bb7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801bb7e:	e7f4      	b.n	801bb6a <_scanf_float+0x186>
 801bb80:	f1ba 0f00 	cmp.w	sl, #0
 801bb84:	d10e      	bne.n	801bba4 <_scanf_float+0x1c0>
 801bb86:	f1b9 0f00 	cmp.w	r9, #0
 801bb8a:	d10e      	bne.n	801bbaa <_scanf_float+0x1c6>
 801bb8c:	6822      	ldr	r2, [r4, #0]
 801bb8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bb92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bb96:	d108      	bne.n	801bbaa <_scanf_float+0x1c6>
 801bb98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bb9c:	6022      	str	r2, [r4, #0]
 801bb9e:	f04f 0a01 	mov.w	sl, #1
 801bba2:	e7e3      	b.n	801bb6c <_scanf_float+0x188>
 801bba4:	f1ba 0f02 	cmp.w	sl, #2
 801bba8:	d055      	beq.n	801bc56 <_scanf_float+0x272>
 801bbaa:	2d01      	cmp	r5, #1
 801bbac:	d002      	beq.n	801bbb4 <_scanf_float+0x1d0>
 801bbae:	2d04      	cmp	r5, #4
 801bbb0:	f47f af48 	bne.w	801ba44 <_scanf_float+0x60>
 801bbb4:	3501      	adds	r5, #1
 801bbb6:	b2ed      	uxtb	r5, r5
 801bbb8:	e7d8      	b.n	801bb6c <_scanf_float+0x188>
 801bbba:	f1ba 0f01 	cmp.w	sl, #1
 801bbbe:	f47f af41 	bne.w	801ba44 <_scanf_float+0x60>
 801bbc2:	f04f 0a02 	mov.w	sl, #2
 801bbc6:	e7d1      	b.n	801bb6c <_scanf_float+0x188>
 801bbc8:	b97d      	cbnz	r5, 801bbea <_scanf_float+0x206>
 801bbca:	f1b9 0f00 	cmp.w	r9, #0
 801bbce:	f47f af3c 	bne.w	801ba4a <_scanf_float+0x66>
 801bbd2:	6822      	ldr	r2, [r4, #0]
 801bbd4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bbd8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bbdc:	f47f af39 	bne.w	801ba52 <_scanf_float+0x6e>
 801bbe0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bbe4:	6022      	str	r2, [r4, #0]
 801bbe6:	2501      	movs	r5, #1
 801bbe8:	e7c0      	b.n	801bb6c <_scanf_float+0x188>
 801bbea:	2d03      	cmp	r5, #3
 801bbec:	d0e2      	beq.n	801bbb4 <_scanf_float+0x1d0>
 801bbee:	2d05      	cmp	r5, #5
 801bbf0:	e7de      	b.n	801bbb0 <_scanf_float+0x1cc>
 801bbf2:	2d02      	cmp	r5, #2
 801bbf4:	f47f af26 	bne.w	801ba44 <_scanf_float+0x60>
 801bbf8:	2503      	movs	r5, #3
 801bbfa:	e7b7      	b.n	801bb6c <_scanf_float+0x188>
 801bbfc:	2d06      	cmp	r5, #6
 801bbfe:	f47f af21 	bne.w	801ba44 <_scanf_float+0x60>
 801bc02:	2507      	movs	r5, #7
 801bc04:	e7b2      	b.n	801bb6c <_scanf_float+0x188>
 801bc06:	6822      	ldr	r2, [r4, #0]
 801bc08:	0591      	lsls	r1, r2, #22
 801bc0a:	f57f af1b 	bpl.w	801ba44 <_scanf_float+0x60>
 801bc0e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801bc12:	6022      	str	r2, [r4, #0]
 801bc14:	f8cd 9004 	str.w	r9, [sp, #4]
 801bc18:	e7a8      	b.n	801bb6c <_scanf_float+0x188>
 801bc1a:	6822      	ldr	r2, [r4, #0]
 801bc1c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801bc20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801bc24:	d006      	beq.n	801bc34 <_scanf_float+0x250>
 801bc26:	0550      	lsls	r0, r2, #21
 801bc28:	f57f af0c 	bpl.w	801ba44 <_scanf_float+0x60>
 801bc2c:	f1b9 0f00 	cmp.w	r9, #0
 801bc30:	f43f af0f 	beq.w	801ba52 <_scanf_float+0x6e>
 801bc34:	0591      	lsls	r1, r2, #22
 801bc36:	bf58      	it	pl
 801bc38:	9901      	ldrpl	r1, [sp, #4]
 801bc3a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bc3e:	bf58      	it	pl
 801bc40:	eba9 0101 	subpl.w	r1, r9, r1
 801bc44:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801bc48:	bf58      	it	pl
 801bc4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801bc4e:	6022      	str	r2, [r4, #0]
 801bc50:	f04f 0900 	mov.w	r9, #0
 801bc54:	e78a      	b.n	801bb6c <_scanf_float+0x188>
 801bc56:	f04f 0a03 	mov.w	sl, #3
 801bc5a:	e787      	b.n	801bb6c <_scanf_float+0x188>
 801bc5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bc60:	4639      	mov	r1, r7
 801bc62:	4640      	mov	r0, r8
 801bc64:	4798      	blx	r3
 801bc66:	2800      	cmp	r0, #0
 801bc68:	f43f aedf 	beq.w	801ba2a <_scanf_float+0x46>
 801bc6c:	e6ea      	b.n	801ba44 <_scanf_float+0x60>
 801bc6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bc72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bc76:	463a      	mov	r2, r7
 801bc78:	4640      	mov	r0, r8
 801bc7a:	4798      	blx	r3
 801bc7c:	6923      	ldr	r3, [r4, #16]
 801bc7e:	3b01      	subs	r3, #1
 801bc80:	6123      	str	r3, [r4, #16]
 801bc82:	e6ec      	b.n	801ba5e <_scanf_float+0x7a>
 801bc84:	1e6b      	subs	r3, r5, #1
 801bc86:	2b06      	cmp	r3, #6
 801bc88:	d825      	bhi.n	801bcd6 <_scanf_float+0x2f2>
 801bc8a:	2d02      	cmp	r5, #2
 801bc8c:	d836      	bhi.n	801bcfc <_scanf_float+0x318>
 801bc8e:	455e      	cmp	r6, fp
 801bc90:	f67f aee8 	bls.w	801ba64 <_scanf_float+0x80>
 801bc94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bc98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bc9c:	463a      	mov	r2, r7
 801bc9e:	4640      	mov	r0, r8
 801bca0:	4798      	blx	r3
 801bca2:	6923      	ldr	r3, [r4, #16]
 801bca4:	3b01      	subs	r3, #1
 801bca6:	6123      	str	r3, [r4, #16]
 801bca8:	e7f1      	b.n	801bc8e <_scanf_float+0x2aa>
 801bcaa:	9802      	ldr	r0, [sp, #8]
 801bcac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bcb0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801bcb4:	9002      	str	r0, [sp, #8]
 801bcb6:	463a      	mov	r2, r7
 801bcb8:	4640      	mov	r0, r8
 801bcba:	4798      	blx	r3
 801bcbc:	6923      	ldr	r3, [r4, #16]
 801bcbe:	3b01      	subs	r3, #1
 801bcc0:	6123      	str	r3, [r4, #16]
 801bcc2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801bcc6:	fa5f fa8a 	uxtb.w	sl, sl
 801bcca:	f1ba 0f02 	cmp.w	sl, #2
 801bcce:	d1ec      	bne.n	801bcaa <_scanf_float+0x2c6>
 801bcd0:	3d03      	subs	r5, #3
 801bcd2:	b2ed      	uxtb	r5, r5
 801bcd4:	1b76      	subs	r6, r6, r5
 801bcd6:	6823      	ldr	r3, [r4, #0]
 801bcd8:	05da      	lsls	r2, r3, #23
 801bcda:	d52f      	bpl.n	801bd3c <_scanf_float+0x358>
 801bcdc:	055b      	lsls	r3, r3, #21
 801bcde:	d510      	bpl.n	801bd02 <_scanf_float+0x31e>
 801bce0:	455e      	cmp	r6, fp
 801bce2:	f67f aebf 	bls.w	801ba64 <_scanf_float+0x80>
 801bce6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bcea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bcee:	463a      	mov	r2, r7
 801bcf0:	4640      	mov	r0, r8
 801bcf2:	4798      	blx	r3
 801bcf4:	6923      	ldr	r3, [r4, #16]
 801bcf6:	3b01      	subs	r3, #1
 801bcf8:	6123      	str	r3, [r4, #16]
 801bcfa:	e7f1      	b.n	801bce0 <_scanf_float+0x2fc>
 801bcfc:	46aa      	mov	sl, r5
 801bcfe:	9602      	str	r6, [sp, #8]
 801bd00:	e7df      	b.n	801bcc2 <_scanf_float+0x2de>
 801bd02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801bd06:	6923      	ldr	r3, [r4, #16]
 801bd08:	2965      	cmp	r1, #101	; 0x65
 801bd0a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801bd0e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801bd12:	6123      	str	r3, [r4, #16]
 801bd14:	d00c      	beq.n	801bd30 <_scanf_float+0x34c>
 801bd16:	2945      	cmp	r1, #69	; 0x45
 801bd18:	d00a      	beq.n	801bd30 <_scanf_float+0x34c>
 801bd1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bd1e:	463a      	mov	r2, r7
 801bd20:	4640      	mov	r0, r8
 801bd22:	4798      	blx	r3
 801bd24:	6923      	ldr	r3, [r4, #16]
 801bd26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801bd2a:	3b01      	subs	r3, #1
 801bd2c:	1eb5      	subs	r5, r6, #2
 801bd2e:	6123      	str	r3, [r4, #16]
 801bd30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bd34:	463a      	mov	r2, r7
 801bd36:	4640      	mov	r0, r8
 801bd38:	4798      	blx	r3
 801bd3a:	462e      	mov	r6, r5
 801bd3c:	6825      	ldr	r5, [r4, #0]
 801bd3e:	f015 0510 	ands.w	r5, r5, #16
 801bd42:	d14d      	bne.n	801bde0 <_scanf_float+0x3fc>
 801bd44:	7035      	strb	r5, [r6, #0]
 801bd46:	6823      	ldr	r3, [r4, #0]
 801bd48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bd4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bd50:	d11a      	bne.n	801bd88 <_scanf_float+0x3a4>
 801bd52:	9b01      	ldr	r3, [sp, #4]
 801bd54:	454b      	cmp	r3, r9
 801bd56:	eba3 0209 	sub.w	r2, r3, r9
 801bd5a:	d122      	bne.n	801bda2 <_scanf_float+0x3be>
 801bd5c:	2200      	movs	r2, #0
 801bd5e:	4659      	mov	r1, fp
 801bd60:	4640      	mov	r0, r8
 801bd62:	f000 fed3 	bl	801cb0c <_strtod_r>
 801bd66:	9b03      	ldr	r3, [sp, #12]
 801bd68:	6821      	ldr	r1, [r4, #0]
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	f011 0f02 	tst.w	r1, #2
 801bd70:	f103 0204 	add.w	r2, r3, #4
 801bd74:	d020      	beq.n	801bdb8 <_scanf_float+0x3d4>
 801bd76:	9903      	ldr	r1, [sp, #12]
 801bd78:	600a      	str	r2, [r1, #0]
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	ed83 0b00 	vstr	d0, [r3]
 801bd80:	68e3      	ldr	r3, [r4, #12]
 801bd82:	3301      	adds	r3, #1
 801bd84:	60e3      	str	r3, [r4, #12]
 801bd86:	e66e      	b.n	801ba66 <_scanf_float+0x82>
 801bd88:	9b04      	ldr	r3, [sp, #16]
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d0e6      	beq.n	801bd5c <_scanf_float+0x378>
 801bd8e:	9905      	ldr	r1, [sp, #20]
 801bd90:	230a      	movs	r3, #10
 801bd92:	462a      	mov	r2, r5
 801bd94:	3101      	adds	r1, #1
 801bd96:	4640      	mov	r0, r8
 801bd98:	f000 ff42 	bl	801cc20 <_strtol_r>
 801bd9c:	9b04      	ldr	r3, [sp, #16]
 801bd9e:	9e05      	ldr	r6, [sp, #20]
 801bda0:	1ac2      	subs	r2, r0, r3
 801bda2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801bda6:	429e      	cmp	r6, r3
 801bda8:	bf28      	it	cs
 801bdaa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801bdae:	490d      	ldr	r1, [pc, #52]	; (801bde4 <_scanf_float+0x400>)
 801bdb0:	4630      	mov	r0, r6
 801bdb2:	f000 f889 	bl	801bec8 <siprintf>
 801bdb6:	e7d1      	b.n	801bd5c <_scanf_float+0x378>
 801bdb8:	f011 0f04 	tst.w	r1, #4
 801bdbc:	9903      	ldr	r1, [sp, #12]
 801bdbe:	600a      	str	r2, [r1, #0]
 801bdc0:	d1db      	bne.n	801bd7a <_scanf_float+0x396>
 801bdc2:	eeb4 0b40 	vcmp.f64	d0, d0
 801bdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdca:	681e      	ldr	r6, [r3, #0]
 801bdcc:	d705      	bvc.n	801bdda <_scanf_float+0x3f6>
 801bdce:	4806      	ldr	r0, [pc, #24]	; (801bde8 <_scanf_float+0x404>)
 801bdd0:	f000 f874 	bl	801bebc <nanf>
 801bdd4:	ed86 0a00 	vstr	s0, [r6]
 801bdd8:	e7d2      	b.n	801bd80 <_scanf_float+0x39c>
 801bdda:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801bdde:	e7f9      	b.n	801bdd4 <_scanf_float+0x3f0>
 801bde0:	2500      	movs	r5, #0
 801bde2:	e640      	b.n	801ba66 <_scanf_float+0x82>
 801bde4:	080229e8 	.word	0x080229e8
 801bde8:	08022af3 	.word	0x08022af3

0801bdec <iprintf>:
 801bdec:	b40f      	push	{r0, r1, r2, r3}
 801bdee:	4b0a      	ldr	r3, [pc, #40]	; (801be18 <iprintf+0x2c>)
 801bdf0:	b513      	push	{r0, r1, r4, lr}
 801bdf2:	681c      	ldr	r4, [r3, #0]
 801bdf4:	b124      	cbz	r4, 801be00 <iprintf+0x14>
 801bdf6:	69a3      	ldr	r3, [r4, #24]
 801bdf8:	b913      	cbnz	r3, 801be00 <iprintf+0x14>
 801bdfa:	4620      	mov	r0, r4
 801bdfc:	f001 ff1e 	bl	801dc3c <__sinit>
 801be00:	ab05      	add	r3, sp, #20
 801be02:	9a04      	ldr	r2, [sp, #16]
 801be04:	68a1      	ldr	r1, [r4, #8]
 801be06:	9301      	str	r3, [sp, #4]
 801be08:	4620      	mov	r0, r4
 801be0a:	f003 fa0f 	bl	801f22c <_vfiprintf_r>
 801be0e:	b002      	add	sp, #8
 801be10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be14:	b004      	add	sp, #16
 801be16:	4770      	bx	lr
 801be18:	2400383c 	.word	0x2400383c

0801be1c <rand>:
 801be1c:	4b17      	ldr	r3, [pc, #92]	; (801be7c <rand+0x60>)
 801be1e:	b510      	push	{r4, lr}
 801be20:	681c      	ldr	r4, [r3, #0]
 801be22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801be24:	b9b3      	cbnz	r3, 801be54 <rand+0x38>
 801be26:	2018      	movs	r0, #24
 801be28:	f7ff f8a8 	bl	801af7c <malloc>
 801be2c:	63a0      	str	r0, [r4, #56]	; 0x38
 801be2e:	b928      	cbnz	r0, 801be3c <rand+0x20>
 801be30:	4602      	mov	r2, r0
 801be32:	4b13      	ldr	r3, [pc, #76]	; (801be80 <rand+0x64>)
 801be34:	4813      	ldr	r0, [pc, #76]	; (801be84 <rand+0x68>)
 801be36:	214e      	movs	r1, #78	; 0x4e
 801be38:	f000 ffb4 	bl	801cda4 <__assert_func>
 801be3c:	4a12      	ldr	r2, [pc, #72]	; (801be88 <rand+0x6c>)
 801be3e:	4b13      	ldr	r3, [pc, #76]	; (801be8c <rand+0x70>)
 801be40:	e9c0 2300 	strd	r2, r3, [r0]
 801be44:	4b12      	ldr	r3, [pc, #72]	; (801be90 <rand+0x74>)
 801be46:	6083      	str	r3, [r0, #8]
 801be48:	230b      	movs	r3, #11
 801be4a:	8183      	strh	r3, [r0, #12]
 801be4c:	2201      	movs	r2, #1
 801be4e:	2300      	movs	r3, #0
 801be50:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801be54:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801be56:	480f      	ldr	r0, [pc, #60]	; (801be94 <rand+0x78>)
 801be58:	690a      	ldr	r2, [r1, #16]
 801be5a:	694b      	ldr	r3, [r1, #20]
 801be5c:	4c0e      	ldr	r4, [pc, #56]	; (801be98 <rand+0x7c>)
 801be5e:	4350      	muls	r0, r2
 801be60:	fb04 0003 	mla	r0, r4, r3, r0
 801be64:	fba2 3404 	umull	r3, r4, r2, r4
 801be68:	1c5a      	adds	r2, r3, #1
 801be6a:	4404      	add	r4, r0
 801be6c:	f144 0000 	adc.w	r0, r4, #0
 801be70:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801be74:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801be78:	bd10      	pop	{r4, pc}
 801be7a:	bf00      	nop
 801be7c:	2400383c 	.word	0x2400383c
 801be80:	080229ed 	.word	0x080229ed
 801be84:	08022a04 	.word	0x08022a04
 801be88:	abcd330e 	.word	0xabcd330e
 801be8c:	e66d1234 	.word	0xe66d1234
 801be90:	0005deec 	.word	0x0005deec
 801be94:	5851f42d 	.word	0x5851f42d
 801be98:	4c957f2d 	.word	0x4c957f2d

0801be9c <_sbrk_r>:
 801be9c:	b538      	push	{r3, r4, r5, lr}
 801be9e:	4d06      	ldr	r5, [pc, #24]	; (801beb8 <_sbrk_r+0x1c>)
 801bea0:	2300      	movs	r3, #0
 801bea2:	4604      	mov	r4, r0
 801bea4:	4608      	mov	r0, r1
 801bea6:	602b      	str	r3, [r5, #0]
 801bea8:	f7e6 f856 	bl	8001f58 <_sbrk>
 801beac:	1c43      	adds	r3, r0, #1
 801beae:	d102      	bne.n	801beb6 <_sbrk_r+0x1a>
 801beb0:	682b      	ldr	r3, [r5, #0]
 801beb2:	b103      	cbz	r3, 801beb6 <_sbrk_r+0x1a>
 801beb4:	6023      	str	r3, [r4, #0]
 801beb6:	bd38      	pop	{r3, r4, r5, pc}
 801beb8:	24009a68 	.word	0x24009a68

0801bebc <nanf>:
 801bebc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bec4 <nanf+0x8>
 801bec0:	4770      	bx	lr
 801bec2:	bf00      	nop
 801bec4:	7fc00000 	.word	0x7fc00000

0801bec8 <siprintf>:
 801bec8:	b40e      	push	{r1, r2, r3}
 801beca:	b500      	push	{lr}
 801becc:	b09c      	sub	sp, #112	; 0x70
 801bece:	ab1d      	add	r3, sp, #116	; 0x74
 801bed0:	9002      	str	r0, [sp, #8]
 801bed2:	9006      	str	r0, [sp, #24]
 801bed4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bed8:	4809      	ldr	r0, [pc, #36]	; (801bf00 <siprintf+0x38>)
 801beda:	9107      	str	r1, [sp, #28]
 801bedc:	9104      	str	r1, [sp, #16]
 801bede:	4909      	ldr	r1, [pc, #36]	; (801bf04 <siprintf+0x3c>)
 801bee0:	f853 2b04 	ldr.w	r2, [r3], #4
 801bee4:	9105      	str	r1, [sp, #20]
 801bee6:	6800      	ldr	r0, [r0, #0]
 801bee8:	9301      	str	r3, [sp, #4]
 801beea:	a902      	add	r1, sp, #8
 801beec:	f003 f874 	bl	801efd8 <_svfiprintf_r>
 801bef0:	9b02      	ldr	r3, [sp, #8]
 801bef2:	2200      	movs	r2, #0
 801bef4:	701a      	strb	r2, [r3, #0]
 801bef6:	b01c      	add	sp, #112	; 0x70
 801bef8:	f85d eb04 	ldr.w	lr, [sp], #4
 801befc:	b003      	add	sp, #12
 801befe:	4770      	bx	lr
 801bf00:	2400383c 	.word	0x2400383c
 801bf04:	ffff0208 	.word	0xffff0208

0801bf08 <strncmp>:
 801bf08:	b510      	push	{r4, lr}
 801bf0a:	b16a      	cbz	r2, 801bf28 <strncmp+0x20>
 801bf0c:	3901      	subs	r1, #1
 801bf0e:	1884      	adds	r4, r0, r2
 801bf10:	f810 3b01 	ldrb.w	r3, [r0], #1
 801bf14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801bf18:	4293      	cmp	r3, r2
 801bf1a:	d103      	bne.n	801bf24 <strncmp+0x1c>
 801bf1c:	42a0      	cmp	r0, r4
 801bf1e:	d001      	beq.n	801bf24 <strncmp+0x1c>
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	d1f5      	bne.n	801bf10 <strncmp+0x8>
 801bf24:	1a98      	subs	r0, r3, r2
 801bf26:	bd10      	pop	{r4, pc}
 801bf28:	4610      	mov	r0, r2
 801bf2a:	e7fc      	b.n	801bf26 <strncmp+0x1e>

0801bf2c <sulp>:
 801bf2c:	b570      	push	{r4, r5, r6, lr}
 801bf2e:	4604      	mov	r4, r0
 801bf30:	460d      	mov	r5, r1
 801bf32:	4616      	mov	r6, r2
 801bf34:	ec45 4b10 	vmov	d0, r4, r5
 801bf38:	f002 fe94 	bl	801ec64 <__ulp>
 801bf3c:	b17e      	cbz	r6, 801bf5e <sulp+0x32>
 801bf3e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801bf42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	dd09      	ble.n	801bf5e <sulp+0x32>
 801bf4a:	051b      	lsls	r3, r3, #20
 801bf4c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801bf50:	2000      	movs	r0, #0
 801bf52:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801bf56:	ec41 0b17 	vmov	d7, r0, r1
 801bf5a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801bf5e:	bd70      	pop	{r4, r5, r6, pc}

0801bf60 <_strtod_l>:
 801bf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf64:	ed2d 8b0c 	vpush	{d8-d13}
 801bf68:	b09d      	sub	sp, #116	; 0x74
 801bf6a:	461f      	mov	r7, r3
 801bf6c:	2300      	movs	r3, #0
 801bf6e:	9318      	str	r3, [sp, #96]	; 0x60
 801bf70:	4ba6      	ldr	r3, [pc, #664]	; (801c20c <_strtod_l+0x2ac>)
 801bf72:	9213      	str	r2, [sp, #76]	; 0x4c
 801bf74:	681b      	ldr	r3, [r3, #0]
 801bf76:	9308      	str	r3, [sp, #32]
 801bf78:	4604      	mov	r4, r0
 801bf7a:	4618      	mov	r0, r3
 801bf7c:	468a      	mov	sl, r1
 801bf7e:	f7e4 f9af 	bl	80002e0 <strlen>
 801bf82:	f04f 0800 	mov.w	r8, #0
 801bf86:	4605      	mov	r5, r0
 801bf88:	f04f 0900 	mov.w	r9, #0
 801bf8c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801bf90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bf92:	781a      	ldrb	r2, [r3, #0]
 801bf94:	2a2b      	cmp	r2, #43	; 0x2b
 801bf96:	d04d      	beq.n	801c034 <_strtod_l+0xd4>
 801bf98:	d83a      	bhi.n	801c010 <_strtod_l+0xb0>
 801bf9a:	2a0d      	cmp	r2, #13
 801bf9c:	d833      	bhi.n	801c006 <_strtod_l+0xa6>
 801bf9e:	2a08      	cmp	r2, #8
 801bfa0:	d833      	bhi.n	801c00a <_strtod_l+0xaa>
 801bfa2:	2a00      	cmp	r2, #0
 801bfa4:	d03d      	beq.n	801c022 <_strtod_l+0xc2>
 801bfa6:	2300      	movs	r3, #0
 801bfa8:	930b      	str	r3, [sp, #44]	; 0x2c
 801bfaa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801bfac:	7833      	ldrb	r3, [r6, #0]
 801bfae:	2b30      	cmp	r3, #48	; 0x30
 801bfb0:	f040 80b6 	bne.w	801c120 <_strtod_l+0x1c0>
 801bfb4:	7873      	ldrb	r3, [r6, #1]
 801bfb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801bfba:	2b58      	cmp	r3, #88	; 0x58
 801bfbc:	d16d      	bne.n	801c09a <_strtod_l+0x13a>
 801bfbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bfc0:	9301      	str	r3, [sp, #4]
 801bfc2:	ab18      	add	r3, sp, #96	; 0x60
 801bfc4:	9702      	str	r7, [sp, #8]
 801bfc6:	9300      	str	r3, [sp, #0]
 801bfc8:	4a91      	ldr	r2, [pc, #580]	; (801c210 <_strtod_l+0x2b0>)
 801bfca:	ab19      	add	r3, sp, #100	; 0x64
 801bfcc:	a917      	add	r1, sp, #92	; 0x5c
 801bfce:	4620      	mov	r0, r4
 801bfd0:	f001 ff4a 	bl	801de68 <__gethex>
 801bfd4:	f010 0507 	ands.w	r5, r0, #7
 801bfd8:	4607      	mov	r7, r0
 801bfda:	d005      	beq.n	801bfe8 <_strtod_l+0x88>
 801bfdc:	2d06      	cmp	r5, #6
 801bfde:	d12b      	bne.n	801c038 <_strtod_l+0xd8>
 801bfe0:	3601      	adds	r6, #1
 801bfe2:	2300      	movs	r3, #0
 801bfe4:	9617      	str	r6, [sp, #92]	; 0x5c
 801bfe6:	930b      	str	r3, [sp, #44]	; 0x2c
 801bfe8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	f040 856e 	bne.w	801cacc <_strtod_l+0xb6c>
 801bff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bff2:	b1e3      	cbz	r3, 801c02e <_strtod_l+0xce>
 801bff4:	ec49 8b17 	vmov	d7, r8, r9
 801bff8:	eeb1 0b47 	vneg.f64	d0, d7
 801bffc:	b01d      	add	sp, #116	; 0x74
 801bffe:	ecbd 8b0c 	vpop	{d8-d13}
 801c002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c006:	2a20      	cmp	r2, #32
 801c008:	d1cd      	bne.n	801bfa6 <_strtod_l+0x46>
 801c00a:	3301      	adds	r3, #1
 801c00c:	9317      	str	r3, [sp, #92]	; 0x5c
 801c00e:	e7bf      	b.n	801bf90 <_strtod_l+0x30>
 801c010:	2a2d      	cmp	r2, #45	; 0x2d
 801c012:	d1c8      	bne.n	801bfa6 <_strtod_l+0x46>
 801c014:	2201      	movs	r2, #1
 801c016:	920b      	str	r2, [sp, #44]	; 0x2c
 801c018:	1c5a      	adds	r2, r3, #1
 801c01a:	9217      	str	r2, [sp, #92]	; 0x5c
 801c01c:	785b      	ldrb	r3, [r3, #1]
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d1c3      	bne.n	801bfaa <_strtod_l+0x4a>
 801c022:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c024:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801c028:	2b00      	cmp	r3, #0
 801c02a:	f040 854d 	bne.w	801cac8 <_strtod_l+0xb68>
 801c02e:	ec49 8b10 	vmov	d0, r8, r9
 801c032:	e7e3      	b.n	801bffc <_strtod_l+0x9c>
 801c034:	2200      	movs	r2, #0
 801c036:	e7ee      	b.n	801c016 <_strtod_l+0xb6>
 801c038:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c03a:	b13a      	cbz	r2, 801c04c <_strtod_l+0xec>
 801c03c:	2135      	movs	r1, #53	; 0x35
 801c03e:	a81a      	add	r0, sp, #104	; 0x68
 801c040:	f002 ff1c 	bl	801ee7c <__copybits>
 801c044:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c046:	4620      	mov	r0, r4
 801c048:	f002 fae0 	bl	801e60c <_Bfree>
 801c04c:	3d01      	subs	r5, #1
 801c04e:	2d05      	cmp	r5, #5
 801c050:	d807      	bhi.n	801c062 <_strtod_l+0x102>
 801c052:	e8df f005 	tbb	[pc, r5]
 801c056:	0b0e      	.short	0x0b0e
 801c058:	030e1d18 	.word	0x030e1d18
 801c05c:	f04f 0900 	mov.w	r9, #0
 801c060:	46c8      	mov	r8, r9
 801c062:	073b      	lsls	r3, r7, #28
 801c064:	d5c0      	bpl.n	801bfe8 <_strtod_l+0x88>
 801c066:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801c06a:	e7bd      	b.n	801bfe8 <_strtod_l+0x88>
 801c06c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 801c070:	e7f7      	b.n	801c062 <_strtod_l+0x102>
 801c072:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 801c076:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c078:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c07c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c080:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801c084:	e7ed      	b.n	801c062 <_strtod_l+0x102>
 801c086:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801c214 <_strtod_l+0x2b4>
 801c08a:	f04f 0800 	mov.w	r8, #0
 801c08e:	e7e8      	b.n	801c062 <_strtod_l+0x102>
 801c090:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801c094:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801c098:	e7e3      	b.n	801c062 <_strtod_l+0x102>
 801c09a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c09c:	1c5a      	adds	r2, r3, #1
 801c09e:	9217      	str	r2, [sp, #92]	; 0x5c
 801c0a0:	785b      	ldrb	r3, [r3, #1]
 801c0a2:	2b30      	cmp	r3, #48	; 0x30
 801c0a4:	d0f9      	beq.n	801c09a <_strtod_l+0x13a>
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d09e      	beq.n	801bfe8 <_strtod_l+0x88>
 801c0aa:	2301      	movs	r3, #1
 801c0ac:	9306      	str	r3, [sp, #24]
 801c0ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c0b0:	930c      	str	r3, [sp, #48]	; 0x30
 801c0b2:	2300      	movs	r3, #0
 801c0b4:	9304      	str	r3, [sp, #16]
 801c0b6:	930a      	str	r3, [sp, #40]	; 0x28
 801c0b8:	461e      	mov	r6, r3
 801c0ba:	220a      	movs	r2, #10
 801c0bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c0be:	f890 b000 	ldrb.w	fp, [r0]
 801c0c2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 801c0c6:	b2d9      	uxtb	r1, r3
 801c0c8:	2909      	cmp	r1, #9
 801c0ca:	d92b      	bls.n	801c124 <_strtod_l+0x1c4>
 801c0cc:	9908      	ldr	r1, [sp, #32]
 801c0ce:	462a      	mov	r2, r5
 801c0d0:	f7ff ff1a 	bl	801bf08 <strncmp>
 801c0d4:	2800      	cmp	r0, #0
 801c0d6:	d035      	beq.n	801c144 <_strtod_l+0x1e4>
 801c0d8:	2000      	movs	r0, #0
 801c0da:	465a      	mov	r2, fp
 801c0dc:	4633      	mov	r3, r6
 801c0de:	4683      	mov	fp, r0
 801c0e0:	4601      	mov	r1, r0
 801c0e2:	2a65      	cmp	r2, #101	; 0x65
 801c0e4:	d001      	beq.n	801c0ea <_strtod_l+0x18a>
 801c0e6:	2a45      	cmp	r2, #69	; 0x45
 801c0e8:	d118      	bne.n	801c11c <_strtod_l+0x1bc>
 801c0ea:	b91b      	cbnz	r3, 801c0f4 <_strtod_l+0x194>
 801c0ec:	9b06      	ldr	r3, [sp, #24]
 801c0ee:	4303      	orrs	r3, r0
 801c0f0:	d097      	beq.n	801c022 <_strtod_l+0xc2>
 801c0f2:	2300      	movs	r3, #0
 801c0f4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 801c0f8:	f10a 0201 	add.w	r2, sl, #1
 801c0fc:	9217      	str	r2, [sp, #92]	; 0x5c
 801c0fe:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801c102:	2a2b      	cmp	r2, #43	; 0x2b
 801c104:	d077      	beq.n	801c1f6 <_strtod_l+0x296>
 801c106:	2a2d      	cmp	r2, #45	; 0x2d
 801c108:	d07d      	beq.n	801c206 <_strtod_l+0x2a6>
 801c10a:	f04f 0e00 	mov.w	lr, #0
 801c10e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801c112:	2d09      	cmp	r5, #9
 801c114:	f240 8084 	bls.w	801c220 <_strtod_l+0x2c0>
 801c118:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801c11c:	2500      	movs	r5, #0
 801c11e:	e09f      	b.n	801c260 <_strtod_l+0x300>
 801c120:	2300      	movs	r3, #0
 801c122:	e7c3      	b.n	801c0ac <_strtod_l+0x14c>
 801c124:	2e08      	cmp	r6, #8
 801c126:	bfd5      	itete	le
 801c128:	990a      	ldrle	r1, [sp, #40]	; 0x28
 801c12a:	9904      	ldrgt	r1, [sp, #16]
 801c12c:	fb02 3301 	mlale	r3, r2, r1, r3
 801c130:	fb02 3301 	mlagt	r3, r2, r1, r3
 801c134:	f100 0001 	add.w	r0, r0, #1
 801c138:	bfd4      	ite	le
 801c13a:	930a      	strle	r3, [sp, #40]	; 0x28
 801c13c:	9304      	strgt	r3, [sp, #16]
 801c13e:	3601      	adds	r6, #1
 801c140:	9017      	str	r0, [sp, #92]	; 0x5c
 801c142:	e7bb      	b.n	801c0bc <_strtod_l+0x15c>
 801c144:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c146:	195a      	adds	r2, r3, r5
 801c148:	9217      	str	r2, [sp, #92]	; 0x5c
 801c14a:	5d5a      	ldrb	r2, [r3, r5]
 801c14c:	b3ae      	cbz	r6, 801c1ba <_strtod_l+0x25a>
 801c14e:	4683      	mov	fp, r0
 801c150:	4633      	mov	r3, r6
 801c152:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801c156:	2909      	cmp	r1, #9
 801c158:	d912      	bls.n	801c180 <_strtod_l+0x220>
 801c15a:	2101      	movs	r1, #1
 801c15c:	e7c1      	b.n	801c0e2 <_strtod_l+0x182>
 801c15e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c160:	1c5a      	adds	r2, r3, #1
 801c162:	9217      	str	r2, [sp, #92]	; 0x5c
 801c164:	785a      	ldrb	r2, [r3, #1]
 801c166:	3001      	adds	r0, #1
 801c168:	2a30      	cmp	r2, #48	; 0x30
 801c16a:	d0f8      	beq.n	801c15e <_strtod_l+0x1fe>
 801c16c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801c170:	2b08      	cmp	r3, #8
 801c172:	f200 84b0 	bhi.w	801cad6 <_strtod_l+0xb76>
 801c176:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c178:	930c      	str	r3, [sp, #48]	; 0x30
 801c17a:	4683      	mov	fp, r0
 801c17c:	2000      	movs	r0, #0
 801c17e:	4603      	mov	r3, r0
 801c180:	3a30      	subs	r2, #48	; 0x30
 801c182:	f100 0101 	add.w	r1, r0, #1
 801c186:	d012      	beq.n	801c1ae <_strtod_l+0x24e>
 801c188:	448b      	add	fp, r1
 801c18a:	eb00 0c03 	add.w	ip, r0, r3
 801c18e:	4619      	mov	r1, r3
 801c190:	250a      	movs	r5, #10
 801c192:	4561      	cmp	r1, ip
 801c194:	d113      	bne.n	801c1be <_strtod_l+0x25e>
 801c196:	1819      	adds	r1, r3, r0
 801c198:	2908      	cmp	r1, #8
 801c19a:	f103 0301 	add.w	r3, r3, #1
 801c19e:	4403      	add	r3, r0
 801c1a0:	dc1d      	bgt.n	801c1de <_strtod_l+0x27e>
 801c1a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c1a4:	210a      	movs	r1, #10
 801c1a6:	fb01 2200 	mla	r2, r1, r0, r2
 801c1aa:	920a      	str	r2, [sp, #40]	; 0x28
 801c1ac:	2100      	movs	r1, #0
 801c1ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c1b0:	1c50      	adds	r0, r2, #1
 801c1b2:	9017      	str	r0, [sp, #92]	; 0x5c
 801c1b4:	7852      	ldrb	r2, [r2, #1]
 801c1b6:	4608      	mov	r0, r1
 801c1b8:	e7cb      	b.n	801c152 <_strtod_l+0x1f2>
 801c1ba:	4630      	mov	r0, r6
 801c1bc:	e7d4      	b.n	801c168 <_strtod_l+0x208>
 801c1be:	2908      	cmp	r1, #8
 801c1c0:	dc04      	bgt.n	801c1cc <_strtod_l+0x26c>
 801c1c2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c1c4:	436f      	muls	r7, r5
 801c1c6:	970a      	str	r7, [sp, #40]	; 0x28
 801c1c8:	3101      	adds	r1, #1
 801c1ca:	e7e2      	b.n	801c192 <_strtod_l+0x232>
 801c1cc:	f101 0e01 	add.w	lr, r1, #1
 801c1d0:	f1be 0f10 	cmp.w	lr, #16
 801c1d4:	bfde      	ittt	le
 801c1d6:	9f04      	ldrle	r7, [sp, #16]
 801c1d8:	436f      	mulle	r7, r5
 801c1da:	9704      	strle	r7, [sp, #16]
 801c1dc:	e7f4      	b.n	801c1c8 <_strtod_l+0x268>
 801c1de:	2b10      	cmp	r3, #16
 801c1e0:	bfdf      	itttt	le
 801c1e2:	9804      	ldrle	r0, [sp, #16]
 801c1e4:	210a      	movle	r1, #10
 801c1e6:	fb01 2200 	mlale	r2, r1, r0, r2
 801c1ea:	9204      	strle	r2, [sp, #16]
 801c1ec:	e7de      	b.n	801c1ac <_strtod_l+0x24c>
 801c1ee:	f04f 0b00 	mov.w	fp, #0
 801c1f2:	2101      	movs	r1, #1
 801c1f4:	e77a      	b.n	801c0ec <_strtod_l+0x18c>
 801c1f6:	f04f 0e00 	mov.w	lr, #0
 801c1fa:	f10a 0202 	add.w	r2, sl, #2
 801c1fe:	9217      	str	r2, [sp, #92]	; 0x5c
 801c200:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801c204:	e783      	b.n	801c10e <_strtod_l+0x1ae>
 801c206:	f04f 0e01 	mov.w	lr, #1
 801c20a:	e7f6      	b.n	801c1fa <_strtod_l+0x29a>
 801c20c:	08022c40 	.word	0x08022c40
 801c210:	08022a64 	.word	0x08022a64
 801c214:	7ff00000 	.word	0x7ff00000
 801c218:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c21a:	1c55      	adds	r5, r2, #1
 801c21c:	9517      	str	r5, [sp, #92]	; 0x5c
 801c21e:	7852      	ldrb	r2, [r2, #1]
 801c220:	2a30      	cmp	r2, #48	; 0x30
 801c222:	d0f9      	beq.n	801c218 <_strtod_l+0x2b8>
 801c224:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801c228:	2d08      	cmp	r5, #8
 801c22a:	f63f af77 	bhi.w	801c11c <_strtod_l+0x1bc>
 801c22e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801c232:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c234:	9208      	str	r2, [sp, #32]
 801c236:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c238:	1c55      	adds	r5, r2, #1
 801c23a:	9517      	str	r5, [sp, #92]	; 0x5c
 801c23c:	7852      	ldrb	r2, [r2, #1]
 801c23e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801c242:	2f09      	cmp	r7, #9
 801c244:	d937      	bls.n	801c2b6 <_strtod_l+0x356>
 801c246:	9f08      	ldr	r7, [sp, #32]
 801c248:	1bed      	subs	r5, r5, r7
 801c24a:	2d08      	cmp	r5, #8
 801c24c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801c250:	dc02      	bgt.n	801c258 <_strtod_l+0x2f8>
 801c252:	4565      	cmp	r5, ip
 801c254:	bfa8      	it	ge
 801c256:	4665      	movge	r5, ip
 801c258:	f1be 0f00 	cmp.w	lr, #0
 801c25c:	d000      	beq.n	801c260 <_strtod_l+0x300>
 801c25e:	426d      	negs	r5, r5
 801c260:	2b00      	cmp	r3, #0
 801c262:	d14f      	bne.n	801c304 <_strtod_l+0x3a4>
 801c264:	9b06      	ldr	r3, [sp, #24]
 801c266:	4303      	orrs	r3, r0
 801c268:	f47f aebe 	bne.w	801bfe8 <_strtod_l+0x88>
 801c26c:	2900      	cmp	r1, #0
 801c26e:	f47f aed8 	bne.w	801c022 <_strtod_l+0xc2>
 801c272:	2a69      	cmp	r2, #105	; 0x69
 801c274:	d027      	beq.n	801c2c6 <_strtod_l+0x366>
 801c276:	dc24      	bgt.n	801c2c2 <_strtod_l+0x362>
 801c278:	2a49      	cmp	r2, #73	; 0x49
 801c27a:	d024      	beq.n	801c2c6 <_strtod_l+0x366>
 801c27c:	2a4e      	cmp	r2, #78	; 0x4e
 801c27e:	f47f aed0 	bne.w	801c022 <_strtod_l+0xc2>
 801c282:	499b      	ldr	r1, [pc, #620]	; (801c4f0 <_strtod_l+0x590>)
 801c284:	a817      	add	r0, sp, #92	; 0x5c
 801c286:	f002 f847 	bl	801e318 <__match>
 801c28a:	2800      	cmp	r0, #0
 801c28c:	f43f aec9 	beq.w	801c022 <_strtod_l+0xc2>
 801c290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c292:	781b      	ldrb	r3, [r3, #0]
 801c294:	2b28      	cmp	r3, #40	; 0x28
 801c296:	d12d      	bne.n	801c2f4 <_strtod_l+0x394>
 801c298:	4996      	ldr	r1, [pc, #600]	; (801c4f4 <_strtod_l+0x594>)
 801c29a:	aa1a      	add	r2, sp, #104	; 0x68
 801c29c:	a817      	add	r0, sp, #92	; 0x5c
 801c29e:	f002 f84f 	bl	801e340 <__hexnan>
 801c2a2:	2805      	cmp	r0, #5
 801c2a4:	d126      	bne.n	801c2f4 <_strtod_l+0x394>
 801c2a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c2a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801c2ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801c2b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801c2b4:	e698      	b.n	801bfe8 <_strtod_l+0x88>
 801c2b6:	250a      	movs	r5, #10
 801c2b8:	fb05 250c 	mla	r5, r5, ip, r2
 801c2bc:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801c2c0:	e7b9      	b.n	801c236 <_strtod_l+0x2d6>
 801c2c2:	2a6e      	cmp	r2, #110	; 0x6e
 801c2c4:	e7db      	b.n	801c27e <_strtod_l+0x31e>
 801c2c6:	498c      	ldr	r1, [pc, #560]	; (801c4f8 <_strtod_l+0x598>)
 801c2c8:	a817      	add	r0, sp, #92	; 0x5c
 801c2ca:	f002 f825 	bl	801e318 <__match>
 801c2ce:	2800      	cmp	r0, #0
 801c2d0:	f43f aea7 	beq.w	801c022 <_strtod_l+0xc2>
 801c2d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c2d6:	4989      	ldr	r1, [pc, #548]	; (801c4fc <_strtod_l+0x59c>)
 801c2d8:	3b01      	subs	r3, #1
 801c2da:	a817      	add	r0, sp, #92	; 0x5c
 801c2dc:	9317      	str	r3, [sp, #92]	; 0x5c
 801c2de:	f002 f81b 	bl	801e318 <__match>
 801c2e2:	b910      	cbnz	r0, 801c2ea <_strtod_l+0x38a>
 801c2e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c2e6:	3301      	adds	r3, #1
 801c2e8:	9317      	str	r3, [sp, #92]	; 0x5c
 801c2ea:	f8df 9224 	ldr.w	r9, [pc, #548]	; 801c510 <_strtod_l+0x5b0>
 801c2ee:	f04f 0800 	mov.w	r8, #0
 801c2f2:	e679      	b.n	801bfe8 <_strtod_l+0x88>
 801c2f4:	4882      	ldr	r0, [pc, #520]	; (801c500 <_strtod_l+0x5a0>)
 801c2f6:	f003 f8cb 	bl	801f490 <nan>
 801c2fa:	ed8d 0b04 	vstr	d0, [sp, #16]
 801c2fe:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801c302:	e671      	b.n	801bfe8 <_strtod_l+0x88>
 801c304:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801c308:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c30c:	eba5 020b 	sub.w	r2, r5, fp
 801c310:	2e00      	cmp	r6, #0
 801c312:	bf08      	it	eq
 801c314:	461e      	moveq	r6, r3
 801c316:	2b10      	cmp	r3, #16
 801c318:	ed8d 7b08 	vstr	d7, [sp, #32]
 801c31c:	9206      	str	r2, [sp, #24]
 801c31e:	461a      	mov	r2, r3
 801c320:	bfa8      	it	ge
 801c322:	2210      	movge	r2, #16
 801c324:	2b09      	cmp	r3, #9
 801c326:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801c32a:	dd0e      	ble.n	801c34a <_strtod_l+0x3ea>
 801c32c:	4975      	ldr	r1, [pc, #468]	; (801c504 <_strtod_l+0x5a4>)
 801c32e:	eddd 7a04 	vldr	s15, [sp, #16]
 801c332:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801c336:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 801c33a:	ed9d 5b08 	vldr	d5, [sp, #32]
 801c33e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c342:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c346:	ec59 8b17 	vmov	r8, r9, d7
 801c34a:	2b0f      	cmp	r3, #15
 801c34c:	dc37      	bgt.n	801c3be <_strtod_l+0x45e>
 801c34e:	9906      	ldr	r1, [sp, #24]
 801c350:	2900      	cmp	r1, #0
 801c352:	f43f ae49 	beq.w	801bfe8 <_strtod_l+0x88>
 801c356:	dd23      	ble.n	801c3a0 <_strtod_l+0x440>
 801c358:	2916      	cmp	r1, #22
 801c35a:	dc0b      	bgt.n	801c374 <_strtod_l+0x414>
 801c35c:	4b69      	ldr	r3, [pc, #420]	; (801c504 <_strtod_l+0x5a4>)
 801c35e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801c362:	ed93 7b00 	vldr	d7, [r3]
 801c366:	ec49 8b16 	vmov	d6, r8, r9
 801c36a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c36e:	ec59 8b17 	vmov	r8, r9, d7
 801c372:	e639      	b.n	801bfe8 <_strtod_l+0x88>
 801c374:	9806      	ldr	r0, [sp, #24]
 801c376:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801c37a:	4281      	cmp	r1, r0
 801c37c:	db1f      	blt.n	801c3be <_strtod_l+0x45e>
 801c37e:	4a61      	ldr	r2, [pc, #388]	; (801c504 <_strtod_l+0x5a4>)
 801c380:	f1c3 030f 	rsb	r3, r3, #15
 801c384:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801c388:	ed91 7b00 	vldr	d7, [r1]
 801c38c:	ec49 8b16 	vmov	d6, r8, r9
 801c390:	1ac3      	subs	r3, r0, r3
 801c392:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801c396:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c39a:	ed92 6b00 	vldr	d6, [r2]
 801c39e:	e7e4      	b.n	801c36a <_strtod_l+0x40a>
 801c3a0:	9906      	ldr	r1, [sp, #24]
 801c3a2:	3116      	adds	r1, #22
 801c3a4:	db0b      	blt.n	801c3be <_strtod_l+0x45e>
 801c3a6:	4b57      	ldr	r3, [pc, #348]	; (801c504 <_strtod_l+0x5a4>)
 801c3a8:	ebab 0505 	sub.w	r5, fp, r5
 801c3ac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801c3b0:	ed95 7b00 	vldr	d7, [r5]
 801c3b4:	ec49 8b16 	vmov	d6, r8, r9
 801c3b8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c3bc:	e7d7      	b.n	801c36e <_strtod_l+0x40e>
 801c3be:	9906      	ldr	r1, [sp, #24]
 801c3c0:	1a9a      	subs	r2, r3, r2
 801c3c2:	440a      	add	r2, r1
 801c3c4:	2a00      	cmp	r2, #0
 801c3c6:	dd74      	ble.n	801c4b2 <_strtod_l+0x552>
 801c3c8:	f012 000f 	ands.w	r0, r2, #15
 801c3cc:	d00a      	beq.n	801c3e4 <_strtod_l+0x484>
 801c3ce:	494d      	ldr	r1, [pc, #308]	; (801c504 <_strtod_l+0x5a4>)
 801c3d0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c3d4:	ed91 7b00 	vldr	d7, [r1]
 801c3d8:	ec49 8b16 	vmov	d6, r8, r9
 801c3dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c3e0:	ec59 8b17 	vmov	r8, r9, d7
 801c3e4:	f032 020f 	bics.w	r2, r2, #15
 801c3e8:	d04f      	beq.n	801c48a <_strtod_l+0x52a>
 801c3ea:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801c3ee:	dd22      	ble.n	801c436 <_strtod_l+0x4d6>
 801c3f0:	2500      	movs	r5, #0
 801c3f2:	462e      	mov	r6, r5
 801c3f4:	950a      	str	r5, [sp, #40]	; 0x28
 801c3f6:	462f      	mov	r7, r5
 801c3f8:	2322      	movs	r3, #34	; 0x22
 801c3fa:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801c510 <_strtod_l+0x5b0>
 801c3fe:	6023      	str	r3, [r4, #0]
 801c400:	f04f 0800 	mov.w	r8, #0
 801c404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c406:	2b00      	cmp	r3, #0
 801c408:	f43f adee 	beq.w	801bfe8 <_strtod_l+0x88>
 801c40c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c40e:	4620      	mov	r0, r4
 801c410:	f002 f8fc 	bl	801e60c <_Bfree>
 801c414:	4639      	mov	r1, r7
 801c416:	4620      	mov	r0, r4
 801c418:	f002 f8f8 	bl	801e60c <_Bfree>
 801c41c:	4631      	mov	r1, r6
 801c41e:	4620      	mov	r0, r4
 801c420:	f002 f8f4 	bl	801e60c <_Bfree>
 801c424:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c426:	4620      	mov	r0, r4
 801c428:	f002 f8f0 	bl	801e60c <_Bfree>
 801c42c:	4629      	mov	r1, r5
 801c42e:	4620      	mov	r0, r4
 801c430:	f002 f8ec 	bl	801e60c <_Bfree>
 801c434:	e5d8      	b.n	801bfe8 <_strtod_l+0x88>
 801c436:	e9cd 8904 	strd	r8, r9, [sp, #16]
 801c43a:	2000      	movs	r0, #0
 801c43c:	4f32      	ldr	r7, [pc, #200]	; (801c508 <_strtod_l+0x5a8>)
 801c43e:	1112      	asrs	r2, r2, #4
 801c440:	4601      	mov	r1, r0
 801c442:	2a01      	cmp	r2, #1
 801c444:	dc24      	bgt.n	801c490 <_strtod_l+0x530>
 801c446:	b108      	cbz	r0, 801c44c <_strtod_l+0x4ec>
 801c448:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801c44c:	4a2e      	ldr	r2, [pc, #184]	; (801c508 <_strtod_l+0x5a8>)
 801c44e:	482f      	ldr	r0, [pc, #188]	; (801c50c <_strtod_l+0x5ac>)
 801c450:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801c454:	ed91 7b00 	vldr	d7, [r1]
 801c458:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801c45c:	ec49 8b16 	vmov	d6, r8, r9
 801c460:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c464:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c468:	9905      	ldr	r1, [sp, #20]
 801c46a:	4a29      	ldr	r2, [pc, #164]	; (801c510 <_strtod_l+0x5b0>)
 801c46c:	400a      	ands	r2, r1
 801c46e:	4282      	cmp	r2, r0
 801c470:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801c474:	d8bc      	bhi.n	801c3f0 <_strtod_l+0x490>
 801c476:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801c47a:	4282      	cmp	r2, r0
 801c47c:	bf86      	itte	hi
 801c47e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 801c514 <_strtod_l+0x5b4>
 801c482:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 801c486:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801c48a:	2200      	movs	r2, #0
 801c48c:	9204      	str	r2, [sp, #16]
 801c48e:	e07f      	b.n	801c590 <_strtod_l+0x630>
 801c490:	f012 0f01 	tst.w	r2, #1
 801c494:	d00a      	beq.n	801c4ac <_strtod_l+0x54c>
 801c496:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 801c49a:	ed90 7b00 	vldr	d7, [r0]
 801c49e:	ed9d 6b04 	vldr	d6, [sp, #16]
 801c4a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c4a6:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c4aa:	2001      	movs	r0, #1
 801c4ac:	3101      	adds	r1, #1
 801c4ae:	1052      	asrs	r2, r2, #1
 801c4b0:	e7c7      	b.n	801c442 <_strtod_l+0x4e2>
 801c4b2:	d0ea      	beq.n	801c48a <_strtod_l+0x52a>
 801c4b4:	4252      	negs	r2, r2
 801c4b6:	f012 000f 	ands.w	r0, r2, #15
 801c4ba:	d00a      	beq.n	801c4d2 <_strtod_l+0x572>
 801c4bc:	4911      	ldr	r1, [pc, #68]	; (801c504 <_strtod_l+0x5a4>)
 801c4be:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c4c2:	ed91 7b00 	vldr	d7, [r1]
 801c4c6:	ec49 8b16 	vmov	d6, r8, r9
 801c4ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c4ce:	ec59 8b17 	vmov	r8, r9, d7
 801c4d2:	1112      	asrs	r2, r2, #4
 801c4d4:	d0d9      	beq.n	801c48a <_strtod_l+0x52a>
 801c4d6:	2a1f      	cmp	r2, #31
 801c4d8:	dd1e      	ble.n	801c518 <_strtod_l+0x5b8>
 801c4da:	2500      	movs	r5, #0
 801c4dc:	462e      	mov	r6, r5
 801c4de:	950a      	str	r5, [sp, #40]	; 0x28
 801c4e0:	462f      	mov	r7, r5
 801c4e2:	2322      	movs	r3, #34	; 0x22
 801c4e4:	f04f 0800 	mov.w	r8, #0
 801c4e8:	f04f 0900 	mov.w	r9, #0
 801c4ec:	6023      	str	r3, [r4, #0]
 801c4ee:	e789      	b.n	801c404 <_strtod_l+0x4a4>
 801c4f0:	080229c1 	.word	0x080229c1
 801c4f4:	08022a78 	.word	0x08022a78
 801c4f8:	080229b9 	.word	0x080229b9
 801c4fc:	08022af7 	.word	0x08022af7
 801c500:	08022af3 	.word	0x08022af3
 801c504:	08022ce0 	.word	0x08022ce0
 801c508:	08022cb8 	.word	0x08022cb8
 801c50c:	7ca00000 	.word	0x7ca00000
 801c510:	7ff00000 	.word	0x7ff00000
 801c514:	7fefffff 	.word	0x7fefffff
 801c518:	f012 0110 	ands.w	r1, r2, #16
 801c51c:	bf18      	it	ne
 801c51e:	216a      	movne	r1, #106	; 0x6a
 801c520:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801c524:	9104      	str	r1, [sp, #16]
 801c526:	49c0      	ldr	r1, [pc, #768]	; (801c828 <_strtod_l+0x8c8>)
 801c528:	2000      	movs	r0, #0
 801c52a:	07d7      	lsls	r7, r2, #31
 801c52c:	d508      	bpl.n	801c540 <_strtod_l+0x5e0>
 801c52e:	ed9d 6b08 	vldr	d6, [sp, #32]
 801c532:	ed91 7b00 	vldr	d7, [r1]
 801c536:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c53a:	ed8d 7b08 	vstr	d7, [sp, #32]
 801c53e:	2001      	movs	r0, #1
 801c540:	1052      	asrs	r2, r2, #1
 801c542:	f101 0108 	add.w	r1, r1, #8
 801c546:	d1f0      	bne.n	801c52a <_strtod_l+0x5ca>
 801c548:	b108      	cbz	r0, 801c54e <_strtod_l+0x5ee>
 801c54a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801c54e:	9a04      	ldr	r2, [sp, #16]
 801c550:	b1ba      	cbz	r2, 801c582 <_strtod_l+0x622>
 801c552:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801c556:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801c55a:	2a00      	cmp	r2, #0
 801c55c:	4649      	mov	r1, r9
 801c55e:	dd10      	ble.n	801c582 <_strtod_l+0x622>
 801c560:	2a1f      	cmp	r2, #31
 801c562:	f340 8132 	ble.w	801c7ca <_strtod_l+0x86a>
 801c566:	2a34      	cmp	r2, #52	; 0x34
 801c568:	bfde      	ittt	le
 801c56a:	3a20      	suble	r2, #32
 801c56c:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 801c570:	fa00 f202 	lslle.w	r2, r0, r2
 801c574:	f04f 0800 	mov.w	r8, #0
 801c578:	bfcc      	ite	gt
 801c57a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801c57e:	ea02 0901 	andle.w	r9, r2, r1
 801c582:	ec49 8b17 	vmov	d7, r8, r9
 801c586:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c58e:	d0a4      	beq.n	801c4da <_strtod_l+0x57a>
 801c590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c592:	9200      	str	r2, [sp, #0]
 801c594:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c596:	4632      	mov	r2, r6
 801c598:	4620      	mov	r0, r4
 801c59a:	f002 f8a3 	bl	801e6e4 <__s2b>
 801c59e:	900a      	str	r0, [sp, #40]	; 0x28
 801c5a0:	2800      	cmp	r0, #0
 801c5a2:	f43f af25 	beq.w	801c3f0 <_strtod_l+0x490>
 801c5a6:	9b06      	ldr	r3, [sp, #24]
 801c5a8:	ebab 0505 	sub.w	r5, fp, r5
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	bfb4      	ite	lt
 801c5b0:	462b      	movlt	r3, r5
 801c5b2:	2300      	movge	r3, #0
 801c5b4:	930c      	str	r3, [sp, #48]	; 0x30
 801c5b6:	9b06      	ldr	r3, [sp, #24]
 801c5b8:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801c810 <_strtod_l+0x8b0>
 801c5bc:	ed9f ab96 	vldr	d10, [pc, #600]	; 801c818 <_strtod_l+0x8b8>
 801c5c0:	ed9f bb97 	vldr	d11, [pc, #604]	; 801c820 <_strtod_l+0x8c0>
 801c5c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c5c8:	2500      	movs	r5, #0
 801c5ca:	9312      	str	r3, [sp, #72]	; 0x48
 801c5cc:	462e      	mov	r6, r5
 801c5ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5d0:	4620      	mov	r0, r4
 801c5d2:	6859      	ldr	r1, [r3, #4]
 801c5d4:	f001 ffda 	bl	801e58c <_Balloc>
 801c5d8:	4607      	mov	r7, r0
 801c5da:	2800      	cmp	r0, #0
 801c5dc:	f43f af0c 	beq.w	801c3f8 <_strtod_l+0x498>
 801c5e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5e2:	691a      	ldr	r2, [r3, #16]
 801c5e4:	3202      	adds	r2, #2
 801c5e6:	f103 010c 	add.w	r1, r3, #12
 801c5ea:	0092      	lsls	r2, r2, #2
 801c5ec:	300c      	adds	r0, #12
 801c5ee:	f7fe fcdb 	bl	801afa8 <memcpy>
 801c5f2:	ec49 8b10 	vmov	d0, r8, r9
 801c5f6:	aa1a      	add	r2, sp, #104	; 0x68
 801c5f8:	a919      	add	r1, sp, #100	; 0x64
 801c5fa:	4620      	mov	r0, r4
 801c5fc:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801c600:	f002 fbac 	bl	801ed5c <__d2b>
 801c604:	9018      	str	r0, [sp, #96]	; 0x60
 801c606:	2800      	cmp	r0, #0
 801c608:	f43f aef6 	beq.w	801c3f8 <_strtod_l+0x498>
 801c60c:	2101      	movs	r1, #1
 801c60e:	4620      	mov	r0, r4
 801c610:	f002 f902 	bl	801e818 <__i2b>
 801c614:	4606      	mov	r6, r0
 801c616:	2800      	cmp	r0, #0
 801c618:	f43f aeee 	beq.w	801c3f8 <_strtod_l+0x498>
 801c61c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c61e:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c620:	2b00      	cmp	r3, #0
 801c622:	bfab      	itete	ge
 801c624:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801c626:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801c628:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 801c62c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 801c630:	bfac      	ite	ge
 801c632:	eb03 0b02 	addge.w	fp, r3, r2
 801c636:	eba2 0a03 	sublt.w	sl, r2, r3
 801c63a:	9a04      	ldr	r2, [sp, #16]
 801c63c:	1a9b      	subs	r3, r3, r2
 801c63e:	440b      	add	r3, r1
 801c640:	4a7a      	ldr	r2, [pc, #488]	; (801c82c <_strtod_l+0x8cc>)
 801c642:	3b01      	subs	r3, #1
 801c644:	4293      	cmp	r3, r2
 801c646:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801c64a:	f280 80d1 	bge.w	801c7f0 <_strtod_l+0x890>
 801c64e:	1ad2      	subs	r2, r2, r3
 801c650:	2a1f      	cmp	r2, #31
 801c652:	eba1 0102 	sub.w	r1, r1, r2
 801c656:	f04f 0001 	mov.w	r0, #1
 801c65a:	f300 80bd 	bgt.w	801c7d8 <_strtod_l+0x878>
 801c65e:	fa00 f302 	lsl.w	r3, r0, r2
 801c662:	930e      	str	r3, [sp, #56]	; 0x38
 801c664:	2300      	movs	r3, #0
 801c666:	930d      	str	r3, [sp, #52]	; 0x34
 801c668:	eb0b 0301 	add.w	r3, fp, r1
 801c66c:	9a04      	ldr	r2, [sp, #16]
 801c66e:	459b      	cmp	fp, r3
 801c670:	448a      	add	sl, r1
 801c672:	4492      	add	sl, r2
 801c674:	465a      	mov	r2, fp
 801c676:	bfa8      	it	ge
 801c678:	461a      	movge	r2, r3
 801c67a:	4552      	cmp	r2, sl
 801c67c:	bfa8      	it	ge
 801c67e:	4652      	movge	r2, sl
 801c680:	2a00      	cmp	r2, #0
 801c682:	bfc2      	ittt	gt
 801c684:	1a9b      	subgt	r3, r3, r2
 801c686:	ebaa 0a02 	subgt.w	sl, sl, r2
 801c68a:	ebab 0b02 	subgt.w	fp, fp, r2
 801c68e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c690:	2a00      	cmp	r2, #0
 801c692:	dd18      	ble.n	801c6c6 <_strtod_l+0x766>
 801c694:	4631      	mov	r1, r6
 801c696:	4620      	mov	r0, r4
 801c698:	9315      	str	r3, [sp, #84]	; 0x54
 801c69a:	f002 f979 	bl	801e990 <__pow5mult>
 801c69e:	4606      	mov	r6, r0
 801c6a0:	2800      	cmp	r0, #0
 801c6a2:	f43f aea9 	beq.w	801c3f8 <_strtod_l+0x498>
 801c6a6:	4601      	mov	r1, r0
 801c6a8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c6aa:	4620      	mov	r0, r4
 801c6ac:	f002 f8ca 	bl	801e844 <__multiply>
 801c6b0:	9014      	str	r0, [sp, #80]	; 0x50
 801c6b2:	2800      	cmp	r0, #0
 801c6b4:	f43f aea0 	beq.w	801c3f8 <_strtod_l+0x498>
 801c6b8:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c6ba:	4620      	mov	r0, r4
 801c6bc:	f001 ffa6 	bl	801e60c <_Bfree>
 801c6c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c6c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c6c4:	9218      	str	r2, [sp, #96]	; 0x60
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	f300 8097 	bgt.w	801c7fa <_strtod_l+0x89a>
 801c6cc:	9b06      	ldr	r3, [sp, #24]
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	dd08      	ble.n	801c6e4 <_strtod_l+0x784>
 801c6d2:	4639      	mov	r1, r7
 801c6d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c6d6:	4620      	mov	r0, r4
 801c6d8:	f002 f95a 	bl	801e990 <__pow5mult>
 801c6dc:	4607      	mov	r7, r0
 801c6de:	2800      	cmp	r0, #0
 801c6e0:	f43f ae8a 	beq.w	801c3f8 <_strtod_l+0x498>
 801c6e4:	f1ba 0f00 	cmp.w	sl, #0
 801c6e8:	dd08      	ble.n	801c6fc <_strtod_l+0x79c>
 801c6ea:	4639      	mov	r1, r7
 801c6ec:	4652      	mov	r2, sl
 801c6ee:	4620      	mov	r0, r4
 801c6f0:	f002 f9a8 	bl	801ea44 <__lshift>
 801c6f4:	4607      	mov	r7, r0
 801c6f6:	2800      	cmp	r0, #0
 801c6f8:	f43f ae7e 	beq.w	801c3f8 <_strtod_l+0x498>
 801c6fc:	f1bb 0f00 	cmp.w	fp, #0
 801c700:	dd08      	ble.n	801c714 <_strtod_l+0x7b4>
 801c702:	4631      	mov	r1, r6
 801c704:	465a      	mov	r2, fp
 801c706:	4620      	mov	r0, r4
 801c708:	f002 f99c 	bl	801ea44 <__lshift>
 801c70c:	4606      	mov	r6, r0
 801c70e:	2800      	cmp	r0, #0
 801c710:	f43f ae72 	beq.w	801c3f8 <_strtod_l+0x498>
 801c714:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c716:	463a      	mov	r2, r7
 801c718:	4620      	mov	r0, r4
 801c71a:	f002 fa1b 	bl	801eb54 <__mdiff>
 801c71e:	4605      	mov	r5, r0
 801c720:	2800      	cmp	r0, #0
 801c722:	f43f ae69 	beq.w	801c3f8 <_strtod_l+0x498>
 801c726:	2300      	movs	r3, #0
 801c728:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801c72c:	60c3      	str	r3, [r0, #12]
 801c72e:	4631      	mov	r1, r6
 801c730:	f002 f9f4 	bl	801eb1c <__mcmp>
 801c734:	2800      	cmp	r0, #0
 801c736:	da7f      	bge.n	801c838 <_strtod_l+0x8d8>
 801c738:	ea5a 0308 	orrs.w	r3, sl, r8
 801c73c:	f040 80a5 	bne.w	801c88a <_strtod_l+0x92a>
 801c740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c744:	2b00      	cmp	r3, #0
 801c746:	f040 80a0 	bne.w	801c88a <_strtod_l+0x92a>
 801c74a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c74e:	0d1b      	lsrs	r3, r3, #20
 801c750:	051b      	lsls	r3, r3, #20
 801c752:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c756:	f240 8098 	bls.w	801c88a <_strtod_l+0x92a>
 801c75a:	696b      	ldr	r3, [r5, #20]
 801c75c:	b91b      	cbnz	r3, 801c766 <_strtod_l+0x806>
 801c75e:	692b      	ldr	r3, [r5, #16]
 801c760:	2b01      	cmp	r3, #1
 801c762:	f340 8092 	ble.w	801c88a <_strtod_l+0x92a>
 801c766:	4629      	mov	r1, r5
 801c768:	2201      	movs	r2, #1
 801c76a:	4620      	mov	r0, r4
 801c76c:	f002 f96a 	bl	801ea44 <__lshift>
 801c770:	4631      	mov	r1, r6
 801c772:	4605      	mov	r5, r0
 801c774:	f002 f9d2 	bl	801eb1c <__mcmp>
 801c778:	2800      	cmp	r0, #0
 801c77a:	f340 8086 	ble.w	801c88a <_strtod_l+0x92a>
 801c77e:	9904      	ldr	r1, [sp, #16]
 801c780:	4a2b      	ldr	r2, [pc, #172]	; (801c830 <_strtod_l+0x8d0>)
 801c782:	464b      	mov	r3, r9
 801c784:	2900      	cmp	r1, #0
 801c786:	f000 80a1 	beq.w	801c8cc <_strtod_l+0x96c>
 801c78a:	ea02 0109 	and.w	r1, r2, r9
 801c78e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c792:	f300 809b 	bgt.w	801c8cc <_strtod_l+0x96c>
 801c796:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c79a:	f77f aea2 	ble.w	801c4e2 <_strtod_l+0x582>
 801c79e:	4a25      	ldr	r2, [pc, #148]	; (801c834 <_strtod_l+0x8d4>)
 801c7a0:	2300      	movs	r3, #0
 801c7a2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801c7a6:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 801c7aa:	ec49 8b17 	vmov	d7, r8, r9
 801c7ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c7b2:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c7b6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801c7ba:	4313      	orrs	r3, r2
 801c7bc:	bf08      	it	eq
 801c7be:	2322      	moveq	r3, #34	; 0x22
 801c7c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801c7c4:	bf08      	it	eq
 801c7c6:	6023      	streq	r3, [r4, #0]
 801c7c8:	e620      	b.n	801c40c <_strtod_l+0x4ac>
 801c7ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801c7ce:	fa01 f202 	lsl.w	r2, r1, r2
 801c7d2:	ea02 0808 	and.w	r8, r2, r8
 801c7d6:	e6d4      	b.n	801c582 <_strtod_l+0x622>
 801c7d8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801c7dc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801c7e0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801c7e4:	33e2      	adds	r3, #226	; 0xe2
 801c7e6:	fa00 f303 	lsl.w	r3, r0, r3
 801c7ea:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 801c7ee:	e73b      	b.n	801c668 <_strtod_l+0x708>
 801c7f0:	2000      	movs	r0, #0
 801c7f2:	2301      	movs	r3, #1
 801c7f4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 801c7f8:	e736      	b.n	801c668 <_strtod_l+0x708>
 801c7fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c7fc:	461a      	mov	r2, r3
 801c7fe:	4620      	mov	r0, r4
 801c800:	f002 f920 	bl	801ea44 <__lshift>
 801c804:	9018      	str	r0, [sp, #96]	; 0x60
 801c806:	2800      	cmp	r0, #0
 801c808:	f47f af60 	bne.w	801c6cc <_strtod_l+0x76c>
 801c80c:	e5f4      	b.n	801c3f8 <_strtod_l+0x498>
 801c80e:	bf00      	nop
 801c810:	94a03595 	.word	0x94a03595
 801c814:	3fcfffff 	.word	0x3fcfffff
 801c818:	94a03595 	.word	0x94a03595
 801c81c:	3fdfffff 	.word	0x3fdfffff
 801c820:	35afe535 	.word	0x35afe535
 801c824:	3fe00000 	.word	0x3fe00000
 801c828:	08022a90 	.word	0x08022a90
 801c82c:	fffffc02 	.word	0xfffffc02
 801c830:	7ff00000 	.word	0x7ff00000
 801c834:	39500000 	.word	0x39500000
 801c838:	46cb      	mov	fp, r9
 801c83a:	d165      	bne.n	801c908 <_strtod_l+0x9a8>
 801c83c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c840:	f1ba 0f00 	cmp.w	sl, #0
 801c844:	d02a      	beq.n	801c89c <_strtod_l+0x93c>
 801c846:	4aaa      	ldr	r2, [pc, #680]	; (801caf0 <_strtod_l+0xb90>)
 801c848:	4293      	cmp	r3, r2
 801c84a:	d12b      	bne.n	801c8a4 <_strtod_l+0x944>
 801c84c:	9b04      	ldr	r3, [sp, #16]
 801c84e:	4641      	mov	r1, r8
 801c850:	b1fb      	cbz	r3, 801c892 <_strtod_l+0x932>
 801c852:	4aa8      	ldr	r2, [pc, #672]	; (801caf4 <_strtod_l+0xb94>)
 801c854:	ea09 0202 	and.w	r2, r9, r2
 801c858:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801c85c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c860:	d81a      	bhi.n	801c898 <_strtod_l+0x938>
 801c862:	0d12      	lsrs	r2, r2, #20
 801c864:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801c868:	fa00 f303 	lsl.w	r3, r0, r3
 801c86c:	4299      	cmp	r1, r3
 801c86e:	d119      	bne.n	801c8a4 <_strtod_l+0x944>
 801c870:	4ba1      	ldr	r3, [pc, #644]	; (801caf8 <_strtod_l+0xb98>)
 801c872:	459b      	cmp	fp, r3
 801c874:	d102      	bne.n	801c87c <_strtod_l+0x91c>
 801c876:	3101      	adds	r1, #1
 801c878:	f43f adbe 	beq.w	801c3f8 <_strtod_l+0x498>
 801c87c:	4b9d      	ldr	r3, [pc, #628]	; (801caf4 <_strtod_l+0xb94>)
 801c87e:	ea0b 0303 	and.w	r3, fp, r3
 801c882:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801c886:	f04f 0800 	mov.w	r8, #0
 801c88a:	9b04      	ldr	r3, [sp, #16]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d186      	bne.n	801c79e <_strtod_l+0x83e>
 801c890:	e5bc      	b.n	801c40c <_strtod_l+0x4ac>
 801c892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c896:	e7e9      	b.n	801c86c <_strtod_l+0x90c>
 801c898:	4603      	mov	r3, r0
 801c89a:	e7e7      	b.n	801c86c <_strtod_l+0x90c>
 801c89c:	ea53 0308 	orrs.w	r3, r3, r8
 801c8a0:	f43f af6d 	beq.w	801c77e <_strtod_l+0x81e>
 801c8a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c8a6:	b1db      	cbz	r3, 801c8e0 <_strtod_l+0x980>
 801c8a8:	ea13 0f0b 	tst.w	r3, fp
 801c8ac:	d0ed      	beq.n	801c88a <_strtod_l+0x92a>
 801c8ae:	9a04      	ldr	r2, [sp, #16]
 801c8b0:	4640      	mov	r0, r8
 801c8b2:	4649      	mov	r1, r9
 801c8b4:	f1ba 0f00 	cmp.w	sl, #0
 801c8b8:	d016      	beq.n	801c8e8 <_strtod_l+0x988>
 801c8ba:	f7ff fb37 	bl	801bf2c <sulp>
 801c8be:	ed9d 7b08 	vldr	d7, [sp, #32]
 801c8c2:	ee37 7b00 	vadd.f64	d7, d7, d0
 801c8c6:	ec59 8b17 	vmov	r8, r9, d7
 801c8ca:	e7de      	b.n	801c88a <_strtod_l+0x92a>
 801c8cc:	4013      	ands	r3, r2
 801c8ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c8d2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801c8d6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801c8da:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801c8de:	e7d4      	b.n	801c88a <_strtod_l+0x92a>
 801c8e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8e2:	ea13 0f08 	tst.w	r3, r8
 801c8e6:	e7e1      	b.n	801c8ac <_strtod_l+0x94c>
 801c8e8:	f7ff fb20 	bl	801bf2c <sulp>
 801c8ec:	ed9d 7b08 	vldr	d7, [sp, #32]
 801c8f0:	ee37 7b40 	vsub.f64	d7, d7, d0
 801c8f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c8f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c900:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801c904:	d1c1      	bne.n	801c88a <_strtod_l+0x92a>
 801c906:	e5ec      	b.n	801c4e2 <_strtod_l+0x582>
 801c908:	4631      	mov	r1, r6
 801c90a:	4628      	mov	r0, r5
 801c90c:	f002 fa82 	bl	801ee14 <__ratio>
 801c910:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801c914:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801c918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c91c:	d867      	bhi.n	801c9ee <_strtod_l+0xa8e>
 801c91e:	f1ba 0f00 	cmp.w	sl, #0
 801c922:	d044      	beq.n	801c9ae <_strtod_l+0xa4e>
 801c924:	4b75      	ldr	r3, [pc, #468]	; (801cafc <_strtod_l+0xb9c>)
 801c926:	2200      	movs	r2, #0
 801c928:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801c92c:	4971      	ldr	r1, [pc, #452]	; (801caf4 <_strtod_l+0xb94>)
 801c92e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 801cb08 <_strtod_l+0xba8>
 801c932:	ea0b 0001 	and.w	r0, fp, r1
 801c936:	4560      	cmp	r0, ip
 801c938:	900d      	str	r0, [sp, #52]	; 0x34
 801c93a:	f040 808b 	bne.w	801ca54 <_strtod_l+0xaf4>
 801c93e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c942:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801c946:	ec49 8b10 	vmov	d0, r8, r9
 801c94a:	ec43 2b1c 	vmov	d12, r2, r3
 801c94e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801c952:	f002 f987 	bl	801ec64 <__ulp>
 801c956:	ec49 8b1d 	vmov	d13, r8, r9
 801c95a:	eeac db00 	vfma.f64	d13, d12, d0
 801c95e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 801c962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c964:	4963      	ldr	r1, [pc, #396]	; (801caf4 <_strtod_l+0xb94>)
 801c966:	4a66      	ldr	r2, [pc, #408]	; (801cb00 <_strtod_l+0xba0>)
 801c968:	4019      	ands	r1, r3
 801c96a:	4291      	cmp	r1, r2
 801c96c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 801c970:	d947      	bls.n	801ca02 <_strtod_l+0xaa2>
 801c972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c974:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c978:	4293      	cmp	r3, r2
 801c97a:	d103      	bne.n	801c984 <_strtod_l+0xa24>
 801c97c:	9b08      	ldr	r3, [sp, #32]
 801c97e:	3301      	adds	r3, #1
 801c980:	f43f ad3a 	beq.w	801c3f8 <_strtod_l+0x498>
 801c984:	f8df 9170 	ldr.w	r9, [pc, #368]	; 801caf8 <_strtod_l+0xb98>
 801c988:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801c98c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c98e:	4620      	mov	r0, r4
 801c990:	f001 fe3c 	bl	801e60c <_Bfree>
 801c994:	4639      	mov	r1, r7
 801c996:	4620      	mov	r0, r4
 801c998:	f001 fe38 	bl	801e60c <_Bfree>
 801c99c:	4631      	mov	r1, r6
 801c99e:	4620      	mov	r0, r4
 801c9a0:	f001 fe34 	bl	801e60c <_Bfree>
 801c9a4:	4629      	mov	r1, r5
 801c9a6:	4620      	mov	r0, r4
 801c9a8:	f001 fe30 	bl	801e60c <_Bfree>
 801c9ac:	e60f      	b.n	801c5ce <_strtod_l+0x66e>
 801c9ae:	f1b8 0f00 	cmp.w	r8, #0
 801c9b2:	d112      	bne.n	801c9da <_strtod_l+0xa7a>
 801c9b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c9b8:	b9b3      	cbnz	r3, 801c9e8 <_strtod_l+0xa88>
 801c9ba:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801c9be:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801c9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9c6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801c9ca:	d401      	bmi.n	801c9d0 <_strtod_l+0xa70>
 801c9cc:	ee20 8b08 	vmul.f64	d8, d0, d8
 801c9d0:	eeb1 7b48 	vneg.f64	d7, d8
 801c9d4:	ec53 2b17 	vmov	r2, r3, d7
 801c9d8:	e7a8      	b.n	801c92c <_strtod_l+0x9cc>
 801c9da:	f1b8 0f01 	cmp.w	r8, #1
 801c9de:	d103      	bne.n	801c9e8 <_strtod_l+0xa88>
 801c9e0:	f1b9 0f00 	cmp.w	r9, #0
 801c9e4:	f43f ad7d 	beq.w	801c4e2 <_strtod_l+0x582>
 801c9e8:	4b46      	ldr	r3, [pc, #280]	; (801cb04 <_strtod_l+0xba4>)
 801c9ea:	2200      	movs	r2, #0
 801c9ec:	e79c      	b.n	801c928 <_strtod_l+0x9c8>
 801c9ee:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801c9f2:	ee20 8b08 	vmul.f64	d8, d0, d8
 801c9f6:	f1ba 0f00 	cmp.w	sl, #0
 801c9fa:	d0e9      	beq.n	801c9d0 <_strtod_l+0xa70>
 801c9fc:	ec53 2b18 	vmov	r2, r3, d8
 801ca00:	e794      	b.n	801c92c <_strtod_l+0x9cc>
 801ca02:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801ca06:	9b04      	ldr	r3, [sp, #16]
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d1bf      	bne.n	801c98c <_strtod_l+0xa2c>
 801ca0c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ca10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ca12:	0d1b      	lsrs	r3, r3, #20
 801ca14:	051b      	lsls	r3, r3, #20
 801ca16:	429a      	cmp	r2, r3
 801ca18:	d1b8      	bne.n	801c98c <_strtod_l+0xa2c>
 801ca1a:	ec51 0b18 	vmov	r0, r1, d8
 801ca1e:	f7e3 fe8b 	bl	8000738 <__aeabi_d2lz>
 801ca22:	f7e3 fe43 	bl	80006ac <__aeabi_l2d>
 801ca26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ca2a:	ec41 0b17 	vmov	d7, r0, r1
 801ca2e:	ea43 0308 	orr.w	r3, r3, r8
 801ca32:	ea53 030a 	orrs.w	r3, r3, sl
 801ca36:	ee38 8b47 	vsub.f64	d8, d8, d7
 801ca3a:	d03e      	beq.n	801caba <_strtod_l+0xb5a>
 801ca3c:	eeb4 8bca 	vcmpe.f64	d8, d10
 801ca40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca44:	f53f ace2 	bmi.w	801c40c <_strtod_l+0x4ac>
 801ca48:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801ca4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca50:	dd9c      	ble.n	801c98c <_strtod_l+0xa2c>
 801ca52:	e4db      	b.n	801c40c <_strtod_l+0x4ac>
 801ca54:	9904      	ldr	r1, [sp, #16]
 801ca56:	b301      	cbz	r1, 801ca9a <_strtod_l+0xb3a>
 801ca58:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ca5a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801ca5e:	d81c      	bhi.n	801ca9a <_strtod_l+0xb3a>
 801ca60:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801cae8 <_strtod_l+0xb88>
 801ca64:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801ca68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca6c:	d811      	bhi.n	801ca92 <_strtod_l+0xb32>
 801ca6e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801ca72:	ee18 3a10 	vmov	r3, s16
 801ca76:	2b01      	cmp	r3, #1
 801ca78:	bf38      	it	cc
 801ca7a:	2301      	movcc	r3, #1
 801ca7c:	ee08 3a10 	vmov	s16, r3
 801ca80:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801ca84:	f1ba 0f00 	cmp.w	sl, #0
 801ca88:	d114      	bne.n	801cab4 <_strtod_l+0xb54>
 801ca8a:	eeb1 7b48 	vneg.f64	d7, d8
 801ca8e:	ec53 2b17 	vmov	r2, r3, d7
 801ca92:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ca94:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 801ca98:	1a0b      	subs	r3, r1, r0
 801ca9a:	ed9d 0b08 	vldr	d0, [sp, #32]
 801ca9e:	ec43 2b1c 	vmov	d12, r2, r3
 801caa2:	f002 f8df 	bl	801ec64 <__ulp>
 801caa6:	ed9d 7b08 	vldr	d7, [sp, #32]
 801caaa:	eeac 7b00 	vfma.f64	d7, d12, d0
 801caae:	ec59 8b17 	vmov	r8, r9, d7
 801cab2:	e7a8      	b.n	801ca06 <_strtod_l+0xaa6>
 801cab4:	ec53 2b18 	vmov	r2, r3, d8
 801cab8:	e7eb      	b.n	801ca92 <_strtod_l+0xb32>
 801caba:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801cabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cac2:	f57f af63 	bpl.w	801c98c <_strtod_l+0xa2c>
 801cac6:	e4a1      	b.n	801c40c <_strtod_l+0x4ac>
 801cac8:	2300      	movs	r3, #0
 801caca:	930b      	str	r3, [sp, #44]	; 0x2c
 801cacc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cace:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cad0:	6013      	str	r3, [r2, #0]
 801cad2:	f7ff ba8d 	b.w	801bff0 <_strtod_l+0x90>
 801cad6:	2a65      	cmp	r2, #101	; 0x65
 801cad8:	f43f ab89 	beq.w	801c1ee <_strtod_l+0x28e>
 801cadc:	2a45      	cmp	r2, #69	; 0x45
 801cade:	f43f ab86 	beq.w	801c1ee <_strtod_l+0x28e>
 801cae2:	2101      	movs	r1, #1
 801cae4:	f7ff bbbe 	b.w	801c264 <_strtod_l+0x304>
 801cae8:	ffc00000 	.word	0xffc00000
 801caec:	41dfffff 	.word	0x41dfffff
 801caf0:	000fffff 	.word	0x000fffff
 801caf4:	7ff00000 	.word	0x7ff00000
 801caf8:	7fefffff 	.word	0x7fefffff
 801cafc:	3ff00000 	.word	0x3ff00000
 801cb00:	7c9fffff 	.word	0x7c9fffff
 801cb04:	bff00000 	.word	0xbff00000
 801cb08:	7fe00000 	.word	0x7fe00000

0801cb0c <_strtod_r>:
 801cb0c:	4b01      	ldr	r3, [pc, #4]	; (801cb14 <_strtod_r+0x8>)
 801cb0e:	f7ff ba27 	b.w	801bf60 <_strtod_l>
 801cb12:	bf00      	nop
 801cb14:	240038a4 	.word	0x240038a4

0801cb18 <_strtol_l.isra.0>:
 801cb18:	2b01      	cmp	r3, #1
 801cb1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb1e:	d001      	beq.n	801cb24 <_strtol_l.isra.0+0xc>
 801cb20:	2b24      	cmp	r3, #36	; 0x24
 801cb22:	d906      	bls.n	801cb32 <_strtol_l.isra.0+0x1a>
 801cb24:	f000 ff6a 	bl	801d9fc <__errno>
 801cb28:	2316      	movs	r3, #22
 801cb2a:	6003      	str	r3, [r0, #0]
 801cb2c:	2000      	movs	r0, #0
 801cb2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb32:	4f3a      	ldr	r7, [pc, #232]	; (801cc1c <_strtol_l.isra.0+0x104>)
 801cb34:	468e      	mov	lr, r1
 801cb36:	4676      	mov	r6, lr
 801cb38:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801cb3c:	5de5      	ldrb	r5, [r4, r7]
 801cb3e:	f015 0508 	ands.w	r5, r5, #8
 801cb42:	d1f8      	bne.n	801cb36 <_strtol_l.isra.0+0x1e>
 801cb44:	2c2d      	cmp	r4, #45	; 0x2d
 801cb46:	d134      	bne.n	801cbb2 <_strtol_l.isra.0+0x9a>
 801cb48:	f89e 4000 	ldrb.w	r4, [lr]
 801cb4c:	f04f 0801 	mov.w	r8, #1
 801cb50:	f106 0e02 	add.w	lr, r6, #2
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d05c      	beq.n	801cc12 <_strtol_l.isra.0+0xfa>
 801cb58:	2b10      	cmp	r3, #16
 801cb5a:	d10c      	bne.n	801cb76 <_strtol_l.isra.0+0x5e>
 801cb5c:	2c30      	cmp	r4, #48	; 0x30
 801cb5e:	d10a      	bne.n	801cb76 <_strtol_l.isra.0+0x5e>
 801cb60:	f89e 4000 	ldrb.w	r4, [lr]
 801cb64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801cb68:	2c58      	cmp	r4, #88	; 0x58
 801cb6a:	d14d      	bne.n	801cc08 <_strtol_l.isra.0+0xf0>
 801cb6c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801cb70:	2310      	movs	r3, #16
 801cb72:	f10e 0e02 	add.w	lr, lr, #2
 801cb76:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801cb7a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801cb7e:	2600      	movs	r6, #0
 801cb80:	fbbc f9f3 	udiv	r9, ip, r3
 801cb84:	4635      	mov	r5, r6
 801cb86:	fb03 ca19 	mls	sl, r3, r9, ip
 801cb8a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801cb8e:	2f09      	cmp	r7, #9
 801cb90:	d818      	bhi.n	801cbc4 <_strtol_l.isra.0+0xac>
 801cb92:	463c      	mov	r4, r7
 801cb94:	42a3      	cmp	r3, r4
 801cb96:	dd24      	ble.n	801cbe2 <_strtol_l.isra.0+0xca>
 801cb98:	2e00      	cmp	r6, #0
 801cb9a:	db1f      	blt.n	801cbdc <_strtol_l.isra.0+0xc4>
 801cb9c:	45a9      	cmp	r9, r5
 801cb9e:	d31d      	bcc.n	801cbdc <_strtol_l.isra.0+0xc4>
 801cba0:	d101      	bne.n	801cba6 <_strtol_l.isra.0+0x8e>
 801cba2:	45a2      	cmp	sl, r4
 801cba4:	db1a      	blt.n	801cbdc <_strtol_l.isra.0+0xc4>
 801cba6:	fb05 4503 	mla	r5, r5, r3, r4
 801cbaa:	2601      	movs	r6, #1
 801cbac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801cbb0:	e7eb      	b.n	801cb8a <_strtol_l.isra.0+0x72>
 801cbb2:	2c2b      	cmp	r4, #43	; 0x2b
 801cbb4:	bf08      	it	eq
 801cbb6:	f89e 4000 	ldrbeq.w	r4, [lr]
 801cbba:	46a8      	mov	r8, r5
 801cbbc:	bf08      	it	eq
 801cbbe:	f106 0e02 	addeq.w	lr, r6, #2
 801cbc2:	e7c7      	b.n	801cb54 <_strtol_l.isra.0+0x3c>
 801cbc4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801cbc8:	2f19      	cmp	r7, #25
 801cbca:	d801      	bhi.n	801cbd0 <_strtol_l.isra.0+0xb8>
 801cbcc:	3c37      	subs	r4, #55	; 0x37
 801cbce:	e7e1      	b.n	801cb94 <_strtol_l.isra.0+0x7c>
 801cbd0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801cbd4:	2f19      	cmp	r7, #25
 801cbd6:	d804      	bhi.n	801cbe2 <_strtol_l.isra.0+0xca>
 801cbd8:	3c57      	subs	r4, #87	; 0x57
 801cbda:	e7db      	b.n	801cb94 <_strtol_l.isra.0+0x7c>
 801cbdc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801cbe0:	e7e4      	b.n	801cbac <_strtol_l.isra.0+0x94>
 801cbe2:	2e00      	cmp	r6, #0
 801cbe4:	da05      	bge.n	801cbf2 <_strtol_l.isra.0+0xda>
 801cbe6:	2322      	movs	r3, #34	; 0x22
 801cbe8:	6003      	str	r3, [r0, #0]
 801cbea:	4665      	mov	r5, ip
 801cbec:	b942      	cbnz	r2, 801cc00 <_strtol_l.isra.0+0xe8>
 801cbee:	4628      	mov	r0, r5
 801cbf0:	e79d      	b.n	801cb2e <_strtol_l.isra.0+0x16>
 801cbf2:	f1b8 0f00 	cmp.w	r8, #0
 801cbf6:	d000      	beq.n	801cbfa <_strtol_l.isra.0+0xe2>
 801cbf8:	426d      	negs	r5, r5
 801cbfa:	2a00      	cmp	r2, #0
 801cbfc:	d0f7      	beq.n	801cbee <_strtol_l.isra.0+0xd6>
 801cbfe:	b10e      	cbz	r6, 801cc04 <_strtol_l.isra.0+0xec>
 801cc00:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801cc04:	6011      	str	r1, [r2, #0]
 801cc06:	e7f2      	b.n	801cbee <_strtol_l.isra.0+0xd6>
 801cc08:	2430      	movs	r4, #48	; 0x30
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	d1b3      	bne.n	801cb76 <_strtol_l.isra.0+0x5e>
 801cc0e:	2308      	movs	r3, #8
 801cc10:	e7b1      	b.n	801cb76 <_strtol_l.isra.0+0x5e>
 801cc12:	2c30      	cmp	r4, #48	; 0x30
 801cc14:	d0a4      	beq.n	801cb60 <_strtol_l.isra.0+0x48>
 801cc16:	230a      	movs	r3, #10
 801cc18:	e7ad      	b.n	801cb76 <_strtol_l.isra.0+0x5e>
 801cc1a:	bf00      	nop
 801cc1c:	080228ad 	.word	0x080228ad

0801cc20 <_strtol_r>:
 801cc20:	f7ff bf7a 	b.w	801cb18 <_strtol_l.isra.0>

0801cc24 <__swbuf_r>:
 801cc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc26:	460e      	mov	r6, r1
 801cc28:	4614      	mov	r4, r2
 801cc2a:	4605      	mov	r5, r0
 801cc2c:	b118      	cbz	r0, 801cc36 <__swbuf_r+0x12>
 801cc2e:	6983      	ldr	r3, [r0, #24]
 801cc30:	b90b      	cbnz	r3, 801cc36 <__swbuf_r+0x12>
 801cc32:	f001 f803 	bl	801dc3c <__sinit>
 801cc36:	4b21      	ldr	r3, [pc, #132]	; (801ccbc <__swbuf_r+0x98>)
 801cc38:	429c      	cmp	r4, r3
 801cc3a:	d12b      	bne.n	801cc94 <__swbuf_r+0x70>
 801cc3c:	686c      	ldr	r4, [r5, #4]
 801cc3e:	69a3      	ldr	r3, [r4, #24]
 801cc40:	60a3      	str	r3, [r4, #8]
 801cc42:	89a3      	ldrh	r3, [r4, #12]
 801cc44:	071a      	lsls	r2, r3, #28
 801cc46:	d52f      	bpl.n	801cca8 <__swbuf_r+0x84>
 801cc48:	6923      	ldr	r3, [r4, #16]
 801cc4a:	b36b      	cbz	r3, 801cca8 <__swbuf_r+0x84>
 801cc4c:	6923      	ldr	r3, [r4, #16]
 801cc4e:	6820      	ldr	r0, [r4, #0]
 801cc50:	1ac0      	subs	r0, r0, r3
 801cc52:	6963      	ldr	r3, [r4, #20]
 801cc54:	b2f6      	uxtb	r6, r6
 801cc56:	4283      	cmp	r3, r0
 801cc58:	4637      	mov	r7, r6
 801cc5a:	dc04      	bgt.n	801cc66 <__swbuf_r+0x42>
 801cc5c:	4621      	mov	r1, r4
 801cc5e:	4628      	mov	r0, r5
 801cc60:	f000 ff58 	bl	801db14 <_fflush_r>
 801cc64:	bb30      	cbnz	r0, 801ccb4 <__swbuf_r+0x90>
 801cc66:	68a3      	ldr	r3, [r4, #8]
 801cc68:	3b01      	subs	r3, #1
 801cc6a:	60a3      	str	r3, [r4, #8]
 801cc6c:	6823      	ldr	r3, [r4, #0]
 801cc6e:	1c5a      	adds	r2, r3, #1
 801cc70:	6022      	str	r2, [r4, #0]
 801cc72:	701e      	strb	r6, [r3, #0]
 801cc74:	6963      	ldr	r3, [r4, #20]
 801cc76:	3001      	adds	r0, #1
 801cc78:	4283      	cmp	r3, r0
 801cc7a:	d004      	beq.n	801cc86 <__swbuf_r+0x62>
 801cc7c:	89a3      	ldrh	r3, [r4, #12]
 801cc7e:	07db      	lsls	r3, r3, #31
 801cc80:	d506      	bpl.n	801cc90 <__swbuf_r+0x6c>
 801cc82:	2e0a      	cmp	r6, #10
 801cc84:	d104      	bne.n	801cc90 <__swbuf_r+0x6c>
 801cc86:	4621      	mov	r1, r4
 801cc88:	4628      	mov	r0, r5
 801cc8a:	f000 ff43 	bl	801db14 <_fflush_r>
 801cc8e:	b988      	cbnz	r0, 801ccb4 <__swbuf_r+0x90>
 801cc90:	4638      	mov	r0, r7
 801cc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc94:	4b0a      	ldr	r3, [pc, #40]	; (801ccc0 <__swbuf_r+0x9c>)
 801cc96:	429c      	cmp	r4, r3
 801cc98:	d101      	bne.n	801cc9e <__swbuf_r+0x7a>
 801cc9a:	68ac      	ldr	r4, [r5, #8]
 801cc9c:	e7cf      	b.n	801cc3e <__swbuf_r+0x1a>
 801cc9e:	4b09      	ldr	r3, [pc, #36]	; (801ccc4 <__swbuf_r+0xa0>)
 801cca0:	429c      	cmp	r4, r3
 801cca2:	bf08      	it	eq
 801cca4:	68ec      	ldreq	r4, [r5, #12]
 801cca6:	e7ca      	b.n	801cc3e <__swbuf_r+0x1a>
 801cca8:	4621      	mov	r1, r4
 801ccaa:	4628      	mov	r0, r5
 801ccac:	f000 f80c 	bl	801ccc8 <__swsetup_r>
 801ccb0:	2800      	cmp	r0, #0
 801ccb2:	d0cb      	beq.n	801cc4c <__swbuf_r+0x28>
 801ccb4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ccb8:	e7ea      	b.n	801cc90 <__swbuf_r+0x6c>
 801ccba:	bf00      	nop
 801ccbc:	08022b94 	.word	0x08022b94
 801ccc0:	08022bb4 	.word	0x08022bb4
 801ccc4:	08022b74 	.word	0x08022b74

0801ccc8 <__swsetup_r>:
 801ccc8:	4b32      	ldr	r3, [pc, #200]	; (801cd94 <__swsetup_r+0xcc>)
 801ccca:	b570      	push	{r4, r5, r6, lr}
 801cccc:	681d      	ldr	r5, [r3, #0]
 801ccce:	4606      	mov	r6, r0
 801ccd0:	460c      	mov	r4, r1
 801ccd2:	b125      	cbz	r5, 801ccde <__swsetup_r+0x16>
 801ccd4:	69ab      	ldr	r3, [r5, #24]
 801ccd6:	b913      	cbnz	r3, 801ccde <__swsetup_r+0x16>
 801ccd8:	4628      	mov	r0, r5
 801ccda:	f000 ffaf 	bl	801dc3c <__sinit>
 801ccde:	4b2e      	ldr	r3, [pc, #184]	; (801cd98 <__swsetup_r+0xd0>)
 801cce0:	429c      	cmp	r4, r3
 801cce2:	d10f      	bne.n	801cd04 <__swsetup_r+0x3c>
 801cce4:	686c      	ldr	r4, [r5, #4]
 801cce6:	89a3      	ldrh	r3, [r4, #12]
 801cce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ccec:	0719      	lsls	r1, r3, #28
 801ccee:	d42c      	bmi.n	801cd4a <__swsetup_r+0x82>
 801ccf0:	06dd      	lsls	r5, r3, #27
 801ccf2:	d411      	bmi.n	801cd18 <__swsetup_r+0x50>
 801ccf4:	2309      	movs	r3, #9
 801ccf6:	6033      	str	r3, [r6, #0]
 801ccf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ccfc:	81a3      	strh	r3, [r4, #12]
 801ccfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cd02:	e03e      	b.n	801cd82 <__swsetup_r+0xba>
 801cd04:	4b25      	ldr	r3, [pc, #148]	; (801cd9c <__swsetup_r+0xd4>)
 801cd06:	429c      	cmp	r4, r3
 801cd08:	d101      	bne.n	801cd0e <__swsetup_r+0x46>
 801cd0a:	68ac      	ldr	r4, [r5, #8]
 801cd0c:	e7eb      	b.n	801cce6 <__swsetup_r+0x1e>
 801cd0e:	4b24      	ldr	r3, [pc, #144]	; (801cda0 <__swsetup_r+0xd8>)
 801cd10:	429c      	cmp	r4, r3
 801cd12:	bf08      	it	eq
 801cd14:	68ec      	ldreq	r4, [r5, #12]
 801cd16:	e7e6      	b.n	801cce6 <__swsetup_r+0x1e>
 801cd18:	0758      	lsls	r0, r3, #29
 801cd1a:	d512      	bpl.n	801cd42 <__swsetup_r+0x7a>
 801cd1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cd1e:	b141      	cbz	r1, 801cd32 <__swsetup_r+0x6a>
 801cd20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cd24:	4299      	cmp	r1, r3
 801cd26:	d002      	beq.n	801cd2e <__swsetup_r+0x66>
 801cd28:	4630      	mov	r0, r6
 801cd2a:	f7fe f96d 	bl	801b008 <_free_r>
 801cd2e:	2300      	movs	r3, #0
 801cd30:	6363      	str	r3, [r4, #52]	; 0x34
 801cd32:	89a3      	ldrh	r3, [r4, #12]
 801cd34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801cd38:	81a3      	strh	r3, [r4, #12]
 801cd3a:	2300      	movs	r3, #0
 801cd3c:	6063      	str	r3, [r4, #4]
 801cd3e:	6923      	ldr	r3, [r4, #16]
 801cd40:	6023      	str	r3, [r4, #0]
 801cd42:	89a3      	ldrh	r3, [r4, #12]
 801cd44:	f043 0308 	orr.w	r3, r3, #8
 801cd48:	81a3      	strh	r3, [r4, #12]
 801cd4a:	6923      	ldr	r3, [r4, #16]
 801cd4c:	b94b      	cbnz	r3, 801cd62 <__swsetup_r+0x9a>
 801cd4e:	89a3      	ldrh	r3, [r4, #12]
 801cd50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801cd54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cd58:	d003      	beq.n	801cd62 <__swsetup_r+0x9a>
 801cd5a:	4621      	mov	r1, r4
 801cd5c:	4630      	mov	r0, r6
 801cd5e:	f001 fbb7 	bl	801e4d0 <__smakebuf_r>
 801cd62:	89a0      	ldrh	r0, [r4, #12]
 801cd64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cd68:	f010 0301 	ands.w	r3, r0, #1
 801cd6c:	d00a      	beq.n	801cd84 <__swsetup_r+0xbc>
 801cd6e:	2300      	movs	r3, #0
 801cd70:	60a3      	str	r3, [r4, #8]
 801cd72:	6963      	ldr	r3, [r4, #20]
 801cd74:	425b      	negs	r3, r3
 801cd76:	61a3      	str	r3, [r4, #24]
 801cd78:	6923      	ldr	r3, [r4, #16]
 801cd7a:	b943      	cbnz	r3, 801cd8e <__swsetup_r+0xc6>
 801cd7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cd80:	d1ba      	bne.n	801ccf8 <__swsetup_r+0x30>
 801cd82:	bd70      	pop	{r4, r5, r6, pc}
 801cd84:	0781      	lsls	r1, r0, #30
 801cd86:	bf58      	it	pl
 801cd88:	6963      	ldrpl	r3, [r4, #20]
 801cd8a:	60a3      	str	r3, [r4, #8]
 801cd8c:	e7f4      	b.n	801cd78 <__swsetup_r+0xb0>
 801cd8e:	2000      	movs	r0, #0
 801cd90:	e7f7      	b.n	801cd82 <__swsetup_r+0xba>
 801cd92:	bf00      	nop
 801cd94:	2400383c 	.word	0x2400383c
 801cd98:	08022b94 	.word	0x08022b94
 801cd9c:	08022bb4 	.word	0x08022bb4
 801cda0:	08022b74 	.word	0x08022b74

0801cda4 <__assert_func>:
 801cda4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cda6:	4614      	mov	r4, r2
 801cda8:	461a      	mov	r2, r3
 801cdaa:	4b09      	ldr	r3, [pc, #36]	; (801cdd0 <__assert_func+0x2c>)
 801cdac:	681b      	ldr	r3, [r3, #0]
 801cdae:	4605      	mov	r5, r0
 801cdb0:	68d8      	ldr	r0, [r3, #12]
 801cdb2:	b14c      	cbz	r4, 801cdc8 <__assert_func+0x24>
 801cdb4:	4b07      	ldr	r3, [pc, #28]	; (801cdd4 <__assert_func+0x30>)
 801cdb6:	9100      	str	r1, [sp, #0]
 801cdb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cdbc:	4906      	ldr	r1, [pc, #24]	; (801cdd8 <__assert_func+0x34>)
 801cdbe:	462b      	mov	r3, r5
 801cdc0:	f000 ffba 	bl	801dd38 <fiprintf>
 801cdc4:	f002 fbce 	bl	801f564 <abort>
 801cdc8:	4b04      	ldr	r3, [pc, #16]	; (801cddc <__assert_func+0x38>)
 801cdca:	461c      	mov	r4, r3
 801cdcc:	e7f3      	b.n	801cdb6 <__assert_func+0x12>
 801cdce:	bf00      	nop
 801cdd0:	2400383c 	.word	0x2400383c
 801cdd4:	08022ab8 	.word	0x08022ab8
 801cdd8:	08022ac5 	.word	0x08022ac5
 801cddc:	08022af3 	.word	0x08022af3

0801cde0 <quorem>:
 801cde0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cde4:	6903      	ldr	r3, [r0, #16]
 801cde6:	690c      	ldr	r4, [r1, #16]
 801cde8:	42a3      	cmp	r3, r4
 801cdea:	4607      	mov	r7, r0
 801cdec:	f2c0 8081 	blt.w	801cef2 <quorem+0x112>
 801cdf0:	3c01      	subs	r4, #1
 801cdf2:	f101 0814 	add.w	r8, r1, #20
 801cdf6:	f100 0514 	add.w	r5, r0, #20
 801cdfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cdfe:	9301      	str	r3, [sp, #4]
 801ce00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ce04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ce08:	3301      	adds	r3, #1
 801ce0a:	429a      	cmp	r2, r3
 801ce0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ce10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ce14:	fbb2 f6f3 	udiv	r6, r2, r3
 801ce18:	d331      	bcc.n	801ce7e <quorem+0x9e>
 801ce1a:	f04f 0e00 	mov.w	lr, #0
 801ce1e:	4640      	mov	r0, r8
 801ce20:	46ac      	mov	ip, r5
 801ce22:	46f2      	mov	sl, lr
 801ce24:	f850 2b04 	ldr.w	r2, [r0], #4
 801ce28:	b293      	uxth	r3, r2
 801ce2a:	fb06 e303 	mla	r3, r6, r3, lr
 801ce2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ce32:	b29b      	uxth	r3, r3
 801ce34:	ebaa 0303 	sub.w	r3, sl, r3
 801ce38:	0c12      	lsrs	r2, r2, #16
 801ce3a:	f8dc a000 	ldr.w	sl, [ip]
 801ce3e:	fb06 e202 	mla	r2, r6, r2, lr
 801ce42:	fa13 f38a 	uxtah	r3, r3, sl
 801ce46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ce4a:	fa1f fa82 	uxth.w	sl, r2
 801ce4e:	f8dc 2000 	ldr.w	r2, [ip]
 801ce52:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801ce56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ce5a:	b29b      	uxth	r3, r3
 801ce5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ce60:	4581      	cmp	r9, r0
 801ce62:	f84c 3b04 	str.w	r3, [ip], #4
 801ce66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ce6a:	d2db      	bcs.n	801ce24 <quorem+0x44>
 801ce6c:	f855 300b 	ldr.w	r3, [r5, fp]
 801ce70:	b92b      	cbnz	r3, 801ce7e <quorem+0x9e>
 801ce72:	9b01      	ldr	r3, [sp, #4]
 801ce74:	3b04      	subs	r3, #4
 801ce76:	429d      	cmp	r5, r3
 801ce78:	461a      	mov	r2, r3
 801ce7a:	d32e      	bcc.n	801ceda <quorem+0xfa>
 801ce7c:	613c      	str	r4, [r7, #16]
 801ce7e:	4638      	mov	r0, r7
 801ce80:	f001 fe4c 	bl	801eb1c <__mcmp>
 801ce84:	2800      	cmp	r0, #0
 801ce86:	db24      	blt.n	801ced2 <quorem+0xf2>
 801ce88:	3601      	adds	r6, #1
 801ce8a:	4628      	mov	r0, r5
 801ce8c:	f04f 0c00 	mov.w	ip, #0
 801ce90:	f858 2b04 	ldr.w	r2, [r8], #4
 801ce94:	f8d0 e000 	ldr.w	lr, [r0]
 801ce98:	b293      	uxth	r3, r2
 801ce9a:	ebac 0303 	sub.w	r3, ip, r3
 801ce9e:	0c12      	lsrs	r2, r2, #16
 801cea0:	fa13 f38e 	uxtah	r3, r3, lr
 801cea4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801cea8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ceac:	b29b      	uxth	r3, r3
 801ceae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ceb2:	45c1      	cmp	r9, r8
 801ceb4:	f840 3b04 	str.w	r3, [r0], #4
 801ceb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801cebc:	d2e8      	bcs.n	801ce90 <quorem+0xb0>
 801cebe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cec2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cec6:	b922      	cbnz	r2, 801ced2 <quorem+0xf2>
 801cec8:	3b04      	subs	r3, #4
 801ceca:	429d      	cmp	r5, r3
 801cecc:	461a      	mov	r2, r3
 801cece:	d30a      	bcc.n	801cee6 <quorem+0x106>
 801ced0:	613c      	str	r4, [r7, #16]
 801ced2:	4630      	mov	r0, r6
 801ced4:	b003      	add	sp, #12
 801ced6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ceda:	6812      	ldr	r2, [r2, #0]
 801cedc:	3b04      	subs	r3, #4
 801cede:	2a00      	cmp	r2, #0
 801cee0:	d1cc      	bne.n	801ce7c <quorem+0x9c>
 801cee2:	3c01      	subs	r4, #1
 801cee4:	e7c7      	b.n	801ce76 <quorem+0x96>
 801cee6:	6812      	ldr	r2, [r2, #0]
 801cee8:	3b04      	subs	r3, #4
 801ceea:	2a00      	cmp	r2, #0
 801ceec:	d1f0      	bne.n	801ced0 <quorem+0xf0>
 801ceee:	3c01      	subs	r4, #1
 801cef0:	e7eb      	b.n	801ceca <quorem+0xea>
 801cef2:	2000      	movs	r0, #0
 801cef4:	e7ee      	b.n	801ced4 <quorem+0xf4>
	...

0801cef8 <_dtoa_r>:
 801cef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cefc:	ec59 8b10 	vmov	r8, r9, d0
 801cf00:	b095      	sub	sp, #84	; 0x54
 801cf02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801cf04:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801cf06:	9107      	str	r1, [sp, #28]
 801cf08:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801cf0c:	4606      	mov	r6, r0
 801cf0e:	9209      	str	r2, [sp, #36]	; 0x24
 801cf10:	9310      	str	r3, [sp, #64]	; 0x40
 801cf12:	b975      	cbnz	r5, 801cf32 <_dtoa_r+0x3a>
 801cf14:	2010      	movs	r0, #16
 801cf16:	f7fe f831 	bl	801af7c <malloc>
 801cf1a:	4602      	mov	r2, r0
 801cf1c:	6270      	str	r0, [r6, #36]	; 0x24
 801cf1e:	b920      	cbnz	r0, 801cf2a <_dtoa_r+0x32>
 801cf20:	4bab      	ldr	r3, [pc, #684]	; (801d1d0 <_dtoa_r+0x2d8>)
 801cf22:	21ea      	movs	r1, #234	; 0xea
 801cf24:	48ab      	ldr	r0, [pc, #684]	; (801d1d4 <_dtoa_r+0x2dc>)
 801cf26:	f7ff ff3d 	bl	801cda4 <__assert_func>
 801cf2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801cf2e:	6005      	str	r5, [r0, #0]
 801cf30:	60c5      	str	r5, [r0, #12]
 801cf32:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801cf34:	6819      	ldr	r1, [r3, #0]
 801cf36:	b151      	cbz	r1, 801cf4e <_dtoa_r+0x56>
 801cf38:	685a      	ldr	r2, [r3, #4]
 801cf3a:	604a      	str	r2, [r1, #4]
 801cf3c:	2301      	movs	r3, #1
 801cf3e:	4093      	lsls	r3, r2
 801cf40:	608b      	str	r3, [r1, #8]
 801cf42:	4630      	mov	r0, r6
 801cf44:	f001 fb62 	bl	801e60c <_Bfree>
 801cf48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801cf4a:	2200      	movs	r2, #0
 801cf4c:	601a      	str	r2, [r3, #0]
 801cf4e:	f1b9 0300 	subs.w	r3, r9, #0
 801cf52:	bfbb      	ittet	lt
 801cf54:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801cf58:	9303      	strlt	r3, [sp, #12]
 801cf5a:	2300      	movge	r3, #0
 801cf5c:	2201      	movlt	r2, #1
 801cf5e:	bfac      	ite	ge
 801cf60:	6023      	strge	r3, [r4, #0]
 801cf62:	6022      	strlt	r2, [r4, #0]
 801cf64:	4b9c      	ldr	r3, [pc, #624]	; (801d1d8 <_dtoa_r+0x2e0>)
 801cf66:	9c03      	ldr	r4, [sp, #12]
 801cf68:	43a3      	bics	r3, r4
 801cf6a:	d11a      	bne.n	801cfa2 <_dtoa_r+0xaa>
 801cf6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cf6e:	f242 730f 	movw	r3, #9999	; 0x270f
 801cf72:	6013      	str	r3, [r2, #0]
 801cf74:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801cf78:	ea53 0308 	orrs.w	r3, r3, r8
 801cf7c:	f000 8512 	beq.w	801d9a4 <_dtoa_r+0xaac>
 801cf80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cf82:	b953      	cbnz	r3, 801cf9a <_dtoa_r+0xa2>
 801cf84:	4b95      	ldr	r3, [pc, #596]	; (801d1dc <_dtoa_r+0x2e4>)
 801cf86:	e01f      	b.n	801cfc8 <_dtoa_r+0xd0>
 801cf88:	4b95      	ldr	r3, [pc, #596]	; (801d1e0 <_dtoa_r+0x2e8>)
 801cf8a:	9300      	str	r3, [sp, #0]
 801cf8c:	3308      	adds	r3, #8
 801cf8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801cf90:	6013      	str	r3, [r2, #0]
 801cf92:	9800      	ldr	r0, [sp, #0]
 801cf94:	b015      	add	sp, #84	; 0x54
 801cf96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf9a:	4b90      	ldr	r3, [pc, #576]	; (801d1dc <_dtoa_r+0x2e4>)
 801cf9c:	9300      	str	r3, [sp, #0]
 801cf9e:	3303      	adds	r3, #3
 801cfa0:	e7f5      	b.n	801cf8e <_dtoa_r+0x96>
 801cfa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cfa6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801cfaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801cfb2:	d10b      	bne.n	801cfcc <_dtoa_r+0xd4>
 801cfb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cfb6:	2301      	movs	r3, #1
 801cfb8:	6013      	str	r3, [r2, #0]
 801cfba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	f000 84ee 	beq.w	801d99e <_dtoa_r+0xaa6>
 801cfc2:	4888      	ldr	r0, [pc, #544]	; (801d1e4 <_dtoa_r+0x2ec>)
 801cfc4:	6018      	str	r0, [r3, #0]
 801cfc6:	1e43      	subs	r3, r0, #1
 801cfc8:	9300      	str	r3, [sp, #0]
 801cfca:	e7e2      	b.n	801cf92 <_dtoa_r+0x9a>
 801cfcc:	a913      	add	r1, sp, #76	; 0x4c
 801cfce:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801cfd2:	aa12      	add	r2, sp, #72	; 0x48
 801cfd4:	4630      	mov	r0, r6
 801cfd6:	f001 fec1 	bl	801ed5c <__d2b>
 801cfda:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801cfde:	4605      	mov	r5, r0
 801cfe0:	9812      	ldr	r0, [sp, #72]	; 0x48
 801cfe2:	2900      	cmp	r1, #0
 801cfe4:	d047      	beq.n	801d076 <_dtoa_r+0x17e>
 801cfe6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cfe8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801cfec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801cff0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801cff4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801cff8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801cffc:	2400      	movs	r4, #0
 801cffe:	ec43 2b16 	vmov	d6, r2, r3
 801d002:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801d006:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 801d1b8 <_dtoa_r+0x2c0>
 801d00a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801d00e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 801d1c0 <_dtoa_r+0x2c8>
 801d012:	eea7 6b05 	vfma.f64	d6, d7, d5
 801d016:	eeb0 7b46 	vmov.f64	d7, d6
 801d01a:	ee06 1a90 	vmov	s13, r1
 801d01e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801d022:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801d1c8 <_dtoa_r+0x2d0>
 801d026:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d02a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801d02e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801d032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d036:	ee16 ba90 	vmov	fp, s13
 801d03a:	9411      	str	r4, [sp, #68]	; 0x44
 801d03c:	d508      	bpl.n	801d050 <_dtoa_r+0x158>
 801d03e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801d042:	eeb4 6b47 	vcmp.f64	d6, d7
 801d046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d04a:	bf18      	it	ne
 801d04c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 801d050:	f1bb 0f16 	cmp.w	fp, #22
 801d054:	d832      	bhi.n	801d0bc <_dtoa_r+0x1c4>
 801d056:	4b64      	ldr	r3, [pc, #400]	; (801d1e8 <_dtoa_r+0x2f0>)
 801d058:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801d05c:	ed93 7b00 	vldr	d7, [r3]
 801d060:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801d064:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d06c:	d501      	bpl.n	801d072 <_dtoa_r+0x17a>
 801d06e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801d072:	2300      	movs	r3, #0
 801d074:	e023      	b.n	801d0be <_dtoa_r+0x1c6>
 801d076:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801d078:	4401      	add	r1, r0
 801d07a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801d07e:	2b20      	cmp	r3, #32
 801d080:	bfc3      	ittte	gt
 801d082:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d086:	fa04 f303 	lslgt.w	r3, r4, r3
 801d08a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801d08e:	f1c3 0320 	rsble	r3, r3, #32
 801d092:	bfc6      	itte	gt
 801d094:	fa28 f804 	lsrgt.w	r8, r8, r4
 801d098:	ea43 0308 	orrgt.w	r3, r3, r8
 801d09c:	fa08 f303 	lslle.w	r3, r8, r3
 801d0a0:	ee07 3a90 	vmov	s15, r3
 801d0a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801d0a8:	3901      	subs	r1, #1
 801d0aa:	ed8d 7b00 	vstr	d7, [sp]
 801d0ae:	9c01      	ldr	r4, [sp, #4]
 801d0b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d0b4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801d0b8:	2401      	movs	r4, #1
 801d0ba:	e7a0      	b.n	801cffe <_dtoa_r+0x106>
 801d0bc:	2301      	movs	r3, #1
 801d0be:	930f      	str	r3, [sp, #60]	; 0x3c
 801d0c0:	1a43      	subs	r3, r0, r1
 801d0c2:	1e5a      	subs	r2, r3, #1
 801d0c4:	bf45      	ittet	mi
 801d0c6:	f1c3 0301 	rsbmi	r3, r3, #1
 801d0ca:	9305      	strmi	r3, [sp, #20]
 801d0cc:	2300      	movpl	r3, #0
 801d0ce:	2300      	movmi	r3, #0
 801d0d0:	9206      	str	r2, [sp, #24]
 801d0d2:	bf54      	ite	pl
 801d0d4:	9305      	strpl	r3, [sp, #20]
 801d0d6:	9306      	strmi	r3, [sp, #24]
 801d0d8:	f1bb 0f00 	cmp.w	fp, #0
 801d0dc:	db18      	blt.n	801d110 <_dtoa_r+0x218>
 801d0de:	9b06      	ldr	r3, [sp, #24]
 801d0e0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801d0e4:	445b      	add	r3, fp
 801d0e6:	9306      	str	r3, [sp, #24]
 801d0e8:	2300      	movs	r3, #0
 801d0ea:	9a07      	ldr	r2, [sp, #28]
 801d0ec:	2a09      	cmp	r2, #9
 801d0ee:	d849      	bhi.n	801d184 <_dtoa_r+0x28c>
 801d0f0:	2a05      	cmp	r2, #5
 801d0f2:	bfc4      	itt	gt
 801d0f4:	3a04      	subgt	r2, #4
 801d0f6:	9207      	strgt	r2, [sp, #28]
 801d0f8:	9a07      	ldr	r2, [sp, #28]
 801d0fa:	f1a2 0202 	sub.w	r2, r2, #2
 801d0fe:	bfcc      	ite	gt
 801d100:	2400      	movgt	r4, #0
 801d102:	2401      	movle	r4, #1
 801d104:	2a03      	cmp	r2, #3
 801d106:	d848      	bhi.n	801d19a <_dtoa_r+0x2a2>
 801d108:	e8df f002 	tbb	[pc, r2]
 801d10c:	3a2c2e0b 	.word	0x3a2c2e0b
 801d110:	9b05      	ldr	r3, [sp, #20]
 801d112:	2200      	movs	r2, #0
 801d114:	eba3 030b 	sub.w	r3, r3, fp
 801d118:	9305      	str	r3, [sp, #20]
 801d11a:	920e      	str	r2, [sp, #56]	; 0x38
 801d11c:	f1cb 0300 	rsb	r3, fp, #0
 801d120:	e7e3      	b.n	801d0ea <_dtoa_r+0x1f2>
 801d122:	2200      	movs	r2, #0
 801d124:	9208      	str	r2, [sp, #32]
 801d126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d128:	2a00      	cmp	r2, #0
 801d12a:	dc39      	bgt.n	801d1a0 <_dtoa_r+0x2a8>
 801d12c:	f04f 0a01 	mov.w	sl, #1
 801d130:	46d1      	mov	r9, sl
 801d132:	4652      	mov	r2, sl
 801d134:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801d138:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801d13a:	2100      	movs	r1, #0
 801d13c:	6079      	str	r1, [r7, #4]
 801d13e:	2004      	movs	r0, #4
 801d140:	f100 0c14 	add.w	ip, r0, #20
 801d144:	4594      	cmp	ip, r2
 801d146:	6879      	ldr	r1, [r7, #4]
 801d148:	d92f      	bls.n	801d1aa <_dtoa_r+0x2b2>
 801d14a:	4630      	mov	r0, r6
 801d14c:	930c      	str	r3, [sp, #48]	; 0x30
 801d14e:	f001 fa1d 	bl	801e58c <_Balloc>
 801d152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d154:	9000      	str	r0, [sp, #0]
 801d156:	4602      	mov	r2, r0
 801d158:	2800      	cmp	r0, #0
 801d15a:	d149      	bne.n	801d1f0 <_dtoa_r+0x2f8>
 801d15c:	4b23      	ldr	r3, [pc, #140]	; (801d1ec <_dtoa_r+0x2f4>)
 801d15e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d162:	e6df      	b.n	801cf24 <_dtoa_r+0x2c>
 801d164:	2201      	movs	r2, #1
 801d166:	e7dd      	b.n	801d124 <_dtoa_r+0x22c>
 801d168:	2200      	movs	r2, #0
 801d16a:	9208      	str	r2, [sp, #32]
 801d16c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d16e:	eb0b 0a02 	add.w	sl, fp, r2
 801d172:	f10a 0901 	add.w	r9, sl, #1
 801d176:	464a      	mov	r2, r9
 801d178:	2a01      	cmp	r2, #1
 801d17a:	bfb8      	it	lt
 801d17c:	2201      	movlt	r2, #1
 801d17e:	e7db      	b.n	801d138 <_dtoa_r+0x240>
 801d180:	2201      	movs	r2, #1
 801d182:	e7f2      	b.n	801d16a <_dtoa_r+0x272>
 801d184:	2401      	movs	r4, #1
 801d186:	2200      	movs	r2, #0
 801d188:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801d18c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801d190:	2100      	movs	r1, #0
 801d192:	46d1      	mov	r9, sl
 801d194:	2212      	movs	r2, #18
 801d196:	9109      	str	r1, [sp, #36]	; 0x24
 801d198:	e7ce      	b.n	801d138 <_dtoa_r+0x240>
 801d19a:	2201      	movs	r2, #1
 801d19c:	9208      	str	r2, [sp, #32]
 801d19e:	e7f5      	b.n	801d18c <_dtoa_r+0x294>
 801d1a0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801d1a4:	46d1      	mov	r9, sl
 801d1a6:	4652      	mov	r2, sl
 801d1a8:	e7c6      	b.n	801d138 <_dtoa_r+0x240>
 801d1aa:	3101      	adds	r1, #1
 801d1ac:	6079      	str	r1, [r7, #4]
 801d1ae:	0040      	lsls	r0, r0, #1
 801d1b0:	e7c6      	b.n	801d140 <_dtoa_r+0x248>
 801d1b2:	bf00      	nop
 801d1b4:	f3af 8000 	nop.w
 801d1b8:	636f4361 	.word	0x636f4361
 801d1bc:	3fd287a7 	.word	0x3fd287a7
 801d1c0:	8b60c8b3 	.word	0x8b60c8b3
 801d1c4:	3fc68a28 	.word	0x3fc68a28
 801d1c8:	509f79fb 	.word	0x509f79fb
 801d1cc:	3fd34413 	.word	0x3fd34413
 801d1d0:	080229ed 	.word	0x080229ed
 801d1d4:	08022b01 	.word	0x08022b01
 801d1d8:	7ff00000 	.word	0x7ff00000
 801d1dc:	08022afd 	.word	0x08022afd
 801d1e0:	08022af4 	.word	0x08022af4
 801d1e4:	080229c5 	.word	0x080229c5
 801d1e8:	08022ce0 	.word	0x08022ce0
 801d1ec:	08022b60 	.word	0x08022b60
 801d1f0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801d1f2:	9900      	ldr	r1, [sp, #0]
 801d1f4:	6011      	str	r1, [r2, #0]
 801d1f6:	f1b9 0f0e 	cmp.w	r9, #14
 801d1fa:	d872      	bhi.n	801d2e2 <_dtoa_r+0x3ea>
 801d1fc:	2c00      	cmp	r4, #0
 801d1fe:	d070      	beq.n	801d2e2 <_dtoa_r+0x3ea>
 801d200:	f1bb 0f00 	cmp.w	fp, #0
 801d204:	f340 80a6 	ble.w	801d354 <_dtoa_r+0x45c>
 801d208:	49ca      	ldr	r1, [pc, #808]	; (801d534 <_dtoa_r+0x63c>)
 801d20a:	f00b 020f 	and.w	r2, fp, #15
 801d20e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801d212:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801d216:	ed92 7b00 	vldr	d7, [r2]
 801d21a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801d21e:	f000 808d 	beq.w	801d33c <_dtoa_r+0x444>
 801d222:	4ac5      	ldr	r2, [pc, #788]	; (801d538 <_dtoa_r+0x640>)
 801d224:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801d228:	ed92 6b08 	vldr	d6, [r2, #32]
 801d22c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801d230:	ed8d 6b02 	vstr	d6, [sp, #8]
 801d234:	f001 010f 	and.w	r1, r1, #15
 801d238:	2203      	movs	r2, #3
 801d23a:	48bf      	ldr	r0, [pc, #764]	; (801d538 <_dtoa_r+0x640>)
 801d23c:	2900      	cmp	r1, #0
 801d23e:	d17f      	bne.n	801d340 <_dtoa_r+0x448>
 801d240:	ed9d 6b02 	vldr	d6, [sp, #8]
 801d244:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801d248:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d24c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801d24e:	2900      	cmp	r1, #0
 801d250:	f000 80b2 	beq.w	801d3b8 <_dtoa_r+0x4c0>
 801d254:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801d258:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d25c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801d260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d264:	f140 80a8 	bpl.w	801d3b8 <_dtoa_r+0x4c0>
 801d268:	f1b9 0f00 	cmp.w	r9, #0
 801d26c:	f000 80a4 	beq.w	801d3b8 <_dtoa_r+0x4c0>
 801d270:	f1ba 0f00 	cmp.w	sl, #0
 801d274:	dd31      	ble.n	801d2da <_dtoa_r+0x3e2>
 801d276:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801d27a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801d27e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d282:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801d286:	3201      	adds	r2, #1
 801d288:	4650      	mov	r0, sl
 801d28a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801d28e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801d292:	ee07 2a90 	vmov	s15, r2
 801d296:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d29a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801d29e:	ed8d 5b02 	vstr	d5, [sp, #8]
 801d2a2:	9c03      	ldr	r4, [sp, #12]
 801d2a4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801d2a8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801d2ac:	2800      	cmp	r0, #0
 801d2ae:	f040 8086 	bne.w	801d3be <_dtoa_r+0x4c6>
 801d2b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801d2b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 801d2ba:	ec42 1b17 	vmov	d7, r1, r2
 801d2be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2c6:	f300 8272 	bgt.w	801d7ae <_dtoa_r+0x8b6>
 801d2ca:	eeb1 7b47 	vneg.f64	d7, d7
 801d2ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2d6:	f100 8267 	bmi.w	801d7a8 <_dtoa_r+0x8b0>
 801d2da:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801d2de:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801d2e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d2e4:	2a00      	cmp	r2, #0
 801d2e6:	f2c0 8129 	blt.w	801d53c <_dtoa_r+0x644>
 801d2ea:	f1bb 0f0e 	cmp.w	fp, #14
 801d2ee:	f300 8125 	bgt.w	801d53c <_dtoa_r+0x644>
 801d2f2:	4b90      	ldr	r3, [pc, #576]	; (801d534 <_dtoa_r+0x63c>)
 801d2f4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801d2f8:	ed93 6b00 	vldr	d6, [r3]
 801d2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	f280 80c3 	bge.w	801d48a <_dtoa_r+0x592>
 801d304:	f1b9 0f00 	cmp.w	r9, #0
 801d308:	f300 80bf 	bgt.w	801d48a <_dtoa_r+0x592>
 801d30c:	f040 824c 	bne.w	801d7a8 <_dtoa_r+0x8b0>
 801d310:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801d314:	ee26 6b07 	vmul.f64	d6, d6, d7
 801d318:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d31c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d324:	464c      	mov	r4, r9
 801d326:	464f      	mov	r7, r9
 801d328:	f280 8222 	bge.w	801d770 <_dtoa_r+0x878>
 801d32c:	f8dd 8000 	ldr.w	r8, [sp]
 801d330:	2331      	movs	r3, #49	; 0x31
 801d332:	f808 3b01 	strb.w	r3, [r8], #1
 801d336:	f10b 0b01 	add.w	fp, fp, #1
 801d33a:	e21e      	b.n	801d77a <_dtoa_r+0x882>
 801d33c:	2202      	movs	r2, #2
 801d33e:	e77c      	b.n	801d23a <_dtoa_r+0x342>
 801d340:	07cc      	lsls	r4, r1, #31
 801d342:	d504      	bpl.n	801d34e <_dtoa_r+0x456>
 801d344:	ed90 6b00 	vldr	d6, [r0]
 801d348:	3201      	adds	r2, #1
 801d34a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801d34e:	1049      	asrs	r1, r1, #1
 801d350:	3008      	adds	r0, #8
 801d352:	e773      	b.n	801d23c <_dtoa_r+0x344>
 801d354:	d02e      	beq.n	801d3b4 <_dtoa_r+0x4bc>
 801d356:	f1cb 0100 	rsb	r1, fp, #0
 801d35a:	4a76      	ldr	r2, [pc, #472]	; (801d534 <_dtoa_r+0x63c>)
 801d35c:	f001 000f 	and.w	r0, r1, #15
 801d360:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801d364:	ed92 7b00 	vldr	d7, [r2]
 801d368:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801d36c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801d370:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801d374:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 801d378:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801d37c:	486e      	ldr	r0, [pc, #440]	; (801d538 <_dtoa_r+0x640>)
 801d37e:	1109      	asrs	r1, r1, #4
 801d380:	2400      	movs	r4, #0
 801d382:	2202      	movs	r2, #2
 801d384:	b939      	cbnz	r1, 801d396 <_dtoa_r+0x49e>
 801d386:	2c00      	cmp	r4, #0
 801d388:	f43f af60 	beq.w	801d24c <_dtoa_r+0x354>
 801d38c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d394:	e75a      	b.n	801d24c <_dtoa_r+0x354>
 801d396:	07cf      	lsls	r7, r1, #31
 801d398:	d509      	bpl.n	801d3ae <_dtoa_r+0x4b6>
 801d39a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801d39e:	ed90 7b00 	vldr	d7, [r0]
 801d3a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 801d3a6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801d3aa:	3201      	adds	r2, #1
 801d3ac:	2401      	movs	r4, #1
 801d3ae:	1049      	asrs	r1, r1, #1
 801d3b0:	3008      	adds	r0, #8
 801d3b2:	e7e7      	b.n	801d384 <_dtoa_r+0x48c>
 801d3b4:	2202      	movs	r2, #2
 801d3b6:	e749      	b.n	801d24c <_dtoa_r+0x354>
 801d3b8:	465f      	mov	r7, fp
 801d3ba:	4648      	mov	r0, r9
 801d3bc:	e765      	b.n	801d28a <_dtoa_r+0x392>
 801d3be:	ec42 1b17 	vmov	d7, r1, r2
 801d3c2:	4a5c      	ldr	r2, [pc, #368]	; (801d534 <_dtoa_r+0x63c>)
 801d3c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801d3c8:	ed12 4b02 	vldr	d4, [r2, #-8]
 801d3cc:	9a00      	ldr	r2, [sp, #0]
 801d3ce:	1814      	adds	r4, r2, r0
 801d3d0:	9a08      	ldr	r2, [sp, #32]
 801d3d2:	b352      	cbz	r2, 801d42a <_dtoa_r+0x532>
 801d3d4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801d3d8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801d3dc:	f8dd 8000 	ldr.w	r8, [sp]
 801d3e0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801d3e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801d3e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 801d3ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801d3f0:	ee14 2a90 	vmov	r2, s9
 801d3f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801d3f8:	3230      	adds	r2, #48	; 0x30
 801d3fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 801d3fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d406:	f808 2b01 	strb.w	r2, [r8], #1
 801d40a:	d439      	bmi.n	801d480 <_dtoa_r+0x588>
 801d40c:	ee32 5b46 	vsub.f64	d5, d2, d6
 801d410:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801d414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d418:	d472      	bmi.n	801d500 <_dtoa_r+0x608>
 801d41a:	45a0      	cmp	r8, r4
 801d41c:	f43f af5d 	beq.w	801d2da <_dtoa_r+0x3e2>
 801d420:	ee27 7b03 	vmul.f64	d7, d7, d3
 801d424:	ee26 6b03 	vmul.f64	d6, d6, d3
 801d428:	e7e0      	b.n	801d3ec <_dtoa_r+0x4f4>
 801d42a:	f8dd 8000 	ldr.w	r8, [sp]
 801d42e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801d432:	4621      	mov	r1, r4
 801d434:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801d438:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801d43c:	ee14 2a90 	vmov	r2, s9
 801d440:	3230      	adds	r2, #48	; 0x30
 801d442:	f808 2b01 	strb.w	r2, [r8], #1
 801d446:	45a0      	cmp	r8, r4
 801d448:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801d44c:	ee36 6b45 	vsub.f64	d6, d6, d5
 801d450:	d118      	bne.n	801d484 <_dtoa_r+0x58c>
 801d452:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801d456:	ee37 4b05 	vadd.f64	d4, d7, d5
 801d45a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801d45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d462:	dc4d      	bgt.n	801d500 <_dtoa_r+0x608>
 801d464:	ee35 7b47 	vsub.f64	d7, d5, d7
 801d468:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d470:	f57f af33 	bpl.w	801d2da <_dtoa_r+0x3e2>
 801d474:	4688      	mov	r8, r1
 801d476:	3901      	subs	r1, #1
 801d478:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801d47c:	2b30      	cmp	r3, #48	; 0x30
 801d47e:	d0f9      	beq.n	801d474 <_dtoa_r+0x57c>
 801d480:	46bb      	mov	fp, r7
 801d482:	e02a      	b.n	801d4da <_dtoa_r+0x5e2>
 801d484:	ee26 6b03 	vmul.f64	d6, d6, d3
 801d488:	e7d6      	b.n	801d438 <_dtoa_r+0x540>
 801d48a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d48e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801d492:	f8dd 8000 	ldr.w	r8, [sp]
 801d496:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801d49a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801d49e:	ee15 3a10 	vmov	r3, s10
 801d4a2:	3330      	adds	r3, #48	; 0x30
 801d4a4:	f808 3b01 	strb.w	r3, [r8], #1
 801d4a8:	9b00      	ldr	r3, [sp, #0]
 801d4aa:	eba8 0303 	sub.w	r3, r8, r3
 801d4ae:	4599      	cmp	r9, r3
 801d4b0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801d4b4:	eea3 7b46 	vfms.f64	d7, d3, d6
 801d4b8:	d133      	bne.n	801d522 <_dtoa_r+0x62a>
 801d4ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 801d4be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801d4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4c6:	dc1a      	bgt.n	801d4fe <_dtoa_r+0x606>
 801d4c8:	eeb4 7b46 	vcmp.f64	d7, d6
 801d4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4d0:	d103      	bne.n	801d4da <_dtoa_r+0x5e2>
 801d4d2:	ee15 3a10 	vmov	r3, s10
 801d4d6:	07d9      	lsls	r1, r3, #31
 801d4d8:	d411      	bmi.n	801d4fe <_dtoa_r+0x606>
 801d4da:	4629      	mov	r1, r5
 801d4dc:	4630      	mov	r0, r6
 801d4de:	f001 f895 	bl	801e60c <_Bfree>
 801d4e2:	2300      	movs	r3, #0
 801d4e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d4e6:	f888 3000 	strb.w	r3, [r8]
 801d4ea:	f10b 0301 	add.w	r3, fp, #1
 801d4ee:	6013      	str	r3, [r2, #0]
 801d4f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	f43f ad4d 	beq.w	801cf92 <_dtoa_r+0x9a>
 801d4f8:	f8c3 8000 	str.w	r8, [r3]
 801d4fc:	e549      	b.n	801cf92 <_dtoa_r+0x9a>
 801d4fe:	465f      	mov	r7, fp
 801d500:	4643      	mov	r3, r8
 801d502:	4698      	mov	r8, r3
 801d504:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d508:	2a39      	cmp	r2, #57	; 0x39
 801d50a:	d106      	bne.n	801d51a <_dtoa_r+0x622>
 801d50c:	9a00      	ldr	r2, [sp, #0]
 801d50e:	429a      	cmp	r2, r3
 801d510:	d1f7      	bne.n	801d502 <_dtoa_r+0x60a>
 801d512:	9900      	ldr	r1, [sp, #0]
 801d514:	2230      	movs	r2, #48	; 0x30
 801d516:	3701      	adds	r7, #1
 801d518:	700a      	strb	r2, [r1, #0]
 801d51a:	781a      	ldrb	r2, [r3, #0]
 801d51c:	3201      	adds	r2, #1
 801d51e:	701a      	strb	r2, [r3, #0]
 801d520:	e7ae      	b.n	801d480 <_dtoa_r+0x588>
 801d522:	ee27 7b04 	vmul.f64	d7, d7, d4
 801d526:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d52e:	d1b2      	bne.n	801d496 <_dtoa_r+0x59e>
 801d530:	e7d3      	b.n	801d4da <_dtoa_r+0x5e2>
 801d532:	bf00      	nop
 801d534:	08022ce0 	.word	0x08022ce0
 801d538:	08022cb8 	.word	0x08022cb8
 801d53c:	9908      	ldr	r1, [sp, #32]
 801d53e:	2900      	cmp	r1, #0
 801d540:	f000 80d1 	beq.w	801d6e6 <_dtoa_r+0x7ee>
 801d544:	9907      	ldr	r1, [sp, #28]
 801d546:	2901      	cmp	r1, #1
 801d548:	f300 80b4 	bgt.w	801d6b4 <_dtoa_r+0x7bc>
 801d54c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d54e:	2900      	cmp	r1, #0
 801d550:	f000 80ac 	beq.w	801d6ac <_dtoa_r+0x7b4>
 801d554:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801d558:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d55c:	461c      	mov	r4, r3
 801d55e:	930a      	str	r3, [sp, #40]	; 0x28
 801d560:	9b05      	ldr	r3, [sp, #20]
 801d562:	4413      	add	r3, r2
 801d564:	9305      	str	r3, [sp, #20]
 801d566:	9b06      	ldr	r3, [sp, #24]
 801d568:	2101      	movs	r1, #1
 801d56a:	4413      	add	r3, r2
 801d56c:	4630      	mov	r0, r6
 801d56e:	9306      	str	r3, [sp, #24]
 801d570:	f001 f952 	bl	801e818 <__i2b>
 801d574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d576:	4607      	mov	r7, r0
 801d578:	f1b8 0f00 	cmp.w	r8, #0
 801d57c:	dd0d      	ble.n	801d59a <_dtoa_r+0x6a2>
 801d57e:	9a06      	ldr	r2, [sp, #24]
 801d580:	2a00      	cmp	r2, #0
 801d582:	dd0a      	ble.n	801d59a <_dtoa_r+0x6a2>
 801d584:	4542      	cmp	r2, r8
 801d586:	9905      	ldr	r1, [sp, #20]
 801d588:	bfa8      	it	ge
 801d58a:	4642      	movge	r2, r8
 801d58c:	1a89      	subs	r1, r1, r2
 801d58e:	9105      	str	r1, [sp, #20]
 801d590:	9906      	ldr	r1, [sp, #24]
 801d592:	eba8 0802 	sub.w	r8, r8, r2
 801d596:	1a8a      	subs	r2, r1, r2
 801d598:	9206      	str	r2, [sp, #24]
 801d59a:	b303      	cbz	r3, 801d5de <_dtoa_r+0x6e6>
 801d59c:	9a08      	ldr	r2, [sp, #32]
 801d59e:	2a00      	cmp	r2, #0
 801d5a0:	f000 80a6 	beq.w	801d6f0 <_dtoa_r+0x7f8>
 801d5a4:	2c00      	cmp	r4, #0
 801d5a6:	dd13      	ble.n	801d5d0 <_dtoa_r+0x6d8>
 801d5a8:	4639      	mov	r1, r7
 801d5aa:	4622      	mov	r2, r4
 801d5ac:	4630      	mov	r0, r6
 801d5ae:	930c      	str	r3, [sp, #48]	; 0x30
 801d5b0:	f001 f9ee 	bl	801e990 <__pow5mult>
 801d5b4:	462a      	mov	r2, r5
 801d5b6:	4601      	mov	r1, r0
 801d5b8:	4607      	mov	r7, r0
 801d5ba:	4630      	mov	r0, r6
 801d5bc:	f001 f942 	bl	801e844 <__multiply>
 801d5c0:	4629      	mov	r1, r5
 801d5c2:	900a      	str	r0, [sp, #40]	; 0x28
 801d5c4:	4630      	mov	r0, r6
 801d5c6:	f001 f821 	bl	801e60c <_Bfree>
 801d5ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d5cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d5ce:	4615      	mov	r5, r2
 801d5d0:	1b1a      	subs	r2, r3, r4
 801d5d2:	d004      	beq.n	801d5de <_dtoa_r+0x6e6>
 801d5d4:	4629      	mov	r1, r5
 801d5d6:	4630      	mov	r0, r6
 801d5d8:	f001 f9da 	bl	801e990 <__pow5mult>
 801d5dc:	4605      	mov	r5, r0
 801d5de:	2101      	movs	r1, #1
 801d5e0:	4630      	mov	r0, r6
 801d5e2:	f001 f919 	bl	801e818 <__i2b>
 801d5e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	4604      	mov	r4, r0
 801d5ec:	f340 8082 	ble.w	801d6f4 <_dtoa_r+0x7fc>
 801d5f0:	461a      	mov	r2, r3
 801d5f2:	4601      	mov	r1, r0
 801d5f4:	4630      	mov	r0, r6
 801d5f6:	f001 f9cb 	bl	801e990 <__pow5mult>
 801d5fa:	9b07      	ldr	r3, [sp, #28]
 801d5fc:	2b01      	cmp	r3, #1
 801d5fe:	4604      	mov	r4, r0
 801d600:	dd7b      	ble.n	801d6fa <_dtoa_r+0x802>
 801d602:	2300      	movs	r3, #0
 801d604:	930a      	str	r3, [sp, #40]	; 0x28
 801d606:	6922      	ldr	r2, [r4, #16]
 801d608:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d60c:	6910      	ldr	r0, [r2, #16]
 801d60e:	f001 f8b3 	bl	801e778 <__hi0bits>
 801d612:	f1c0 0020 	rsb	r0, r0, #32
 801d616:	9b06      	ldr	r3, [sp, #24]
 801d618:	4418      	add	r0, r3
 801d61a:	f010 001f 	ands.w	r0, r0, #31
 801d61e:	f000 808d 	beq.w	801d73c <_dtoa_r+0x844>
 801d622:	f1c0 0220 	rsb	r2, r0, #32
 801d626:	2a04      	cmp	r2, #4
 801d628:	f340 8086 	ble.w	801d738 <_dtoa_r+0x840>
 801d62c:	f1c0 001c 	rsb	r0, r0, #28
 801d630:	9b05      	ldr	r3, [sp, #20]
 801d632:	4403      	add	r3, r0
 801d634:	9305      	str	r3, [sp, #20]
 801d636:	9b06      	ldr	r3, [sp, #24]
 801d638:	4403      	add	r3, r0
 801d63a:	4480      	add	r8, r0
 801d63c:	9306      	str	r3, [sp, #24]
 801d63e:	9b05      	ldr	r3, [sp, #20]
 801d640:	2b00      	cmp	r3, #0
 801d642:	dd05      	ble.n	801d650 <_dtoa_r+0x758>
 801d644:	4629      	mov	r1, r5
 801d646:	461a      	mov	r2, r3
 801d648:	4630      	mov	r0, r6
 801d64a:	f001 f9fb 	bl	801ea44 <__lshift>
 801d64e:	4605      	mov	r5, r0
 801d650:	9b06      	ldr	r3, [sp, #24]
 801d652:	2b00      	cmp	r3, #0
 801d654:	dd05      	ble.n	801d662 <_dtoa_r+0x76a>
 801d656:	4621      	mov	r1, r4
 801d658:	461a      	mov	r2, r3
 801d65a:	4630      	mov	r0, r6
 801d65c:	f001 f9f2 	bl	801ea44 <__lshift>
 801d660:	4604      	mov	r4, r0
 801d662:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d664:	2b00      	cmp	r3, #0
 801d666:	d06b      	beq.n	801d740 <_dtoa_r+0x848>
 801d668:	4621      	mov	r1, r4
 801d66a:	4628      	mov	r0, r5
 801d66c:	f001 fa56 	bl	801eb1c <__mcmp>
 801d670:	2800      	cmp	r0, #0
 801d672:	da65      	bge.n	801d740 <_dtoa_r+0x848>
 801d674:	2300      	movs	r3, #0
 801d676:	4629      	mov	r1, r5
 801d678:	220a      	movs	r2, #10
 801d67a:	4630      	mov	r0, r6
 801d67c:	f000 ffe8 	bl	801e650 <__multadd>
 801d680:	9b08      	ldr	r3, [sp, #32]
 801d682:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801d686:	4605      	mov	r5, r0
 801d688:	2b00      	cmp	r3, #0
 801d68a:	f000 8192 	beq.w	801d9b2 <_dtoa_r+0xaba>
 801d68e:	4639      	mov	r1, r7
 801d690:	2300      	movs	r3, #0
 801d692:	220a      	movs	r2, #10
 801d694:	4630      	mov	r0, r6
 801d696:	f000 ffdb 	bl	801e650 <__multadd>
 801d69a:	f1ba 0f00 	cmp.w	sl, #0
 801d69e:	4607      	mov	r7, r0
 801d6a0:	f300 808e 	bgt.w	801d7c0 <_dtoa_r+0x8c8>
 801d6a4:	9b07      	ldr	r3, [sp, #28]
 801d6a6:	2b02      	cmp	r3, #2
 801d6a8:	dc51      	bgt.n	801d74e <_dtoa_r+0x856>
 801d6aa:	e089      	b.n	801d7c0 <_dtoa_r+0x8c8>
 801d6ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d6ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d6b2:	e751      	b.n	801d558 <_dtoa_r+0x660>
 801d6b4:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 801d6b8:	42a3      	cmp	r3, r4
 801d6ba:	bfbf      	itttt	lt
 801d6bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801d6be:	1ae3      	sublt	r3, r4, r3
 801d6c0:	18d2      	addlt	r2, r2, r3
 801d6c2:	4613      	movlt	r3, r2
 801d6c4:	bfb7      	itett	lt
 801d6c6:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d6c8:	1b1c      	subge	r4, r3, r4
 801d6ca:	4623      	movlt	r3, r4
 801d6cc:	2400      	movlt	r4, #0
 801d6ce:	f1b9 0f00 	cmp.w	r9, #0
 801d6d2:	bfb5      	itete	lt
 801d6d4:	9a05      	ldrlt	r2, [sp, #20]
 801d6d6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801d6da:	eba2 0809 	sublt.w	r8, r2, r9
 801d6de:	464a      	movge	r2, r9
 801d6e0:	bfb8      	it	lt
 801d6e2:	2200      	movlt	r2, #0
 801d6e4:	e73b      	b.n	801d55e <_dtoa_r+0x666>
 801d6e6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d6ea:	9f08      	ldr	r7, [sp, #32]
 801d6ec:	461c      	mov	r4, r3
 801d6ee:	e743      	b.n	801d578 <_dtoa_r+0x680>
 801d6f0:	461a      	mov	r2, r3
 801d6f2:	e76f      	b.n	801d5d4 <_dtoa_r+0x6dc>
 801d6f4:	9b07      	ldr	r3, [sp, #28]
 801d6f6:	2b01      	cmp	r3, #1
 801d6f8:	dc18      	bgt.n	801d72c <_dtoa_r+0x834>
 801d6fa:	9b02      	ldr	r3, [sp, #8]
 801d6fc:	b9b3      	cbnz	r3, 801d72c <_dtoa_r+0x834>
 801d6fe:	9b03      	ldr	r3, [sp, #12]
 801d700:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801d704:	b9a2      	cbnz	r2, 801d730 <_dtoa_r+0x838>
 801d706:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d70a:	0d12      	lsrs	r2, r2, #20
 801d70c:	0512      	lsls	r2, r2, #20
 801d70e:	b18a      	cbz	r2, 801d734 <_dtoa_r+0x83c>
 801d710:	9b05      	ldr	r3, [sp, #20]
 801d712:	3301      	adds	r3, #1
 801d714:	9305      	str	r3, [sp, #20]
 801d716:	9b06      	ldr	r3, [sp, #24]
 801d718:	3301      	adds	r3, #1
 801d71a:	9306      	str	r3, [sp, #24]
 801d71c:	2301      	movs	r3, #1
 801d71e:	930a      	str	r3, [sp, #40]	; 0x28
 801d720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d722:	2b00      	cmp	r3, #0
 801d724:	f47f af6f 	bne.w	801d606 <_dtoa_r+0x70e>
 801d728:	2001      	movs	r0, #1
 801d72a:	e774      	b.n	801d616 <_dtoa_r+0x71e>
 801d72c:	2300      	movs	r3, #0
 801d72e:	e7f6      	b.n	801d71e <_dtoa_r+0x826>
 801d730:	9b02      	ldr	r3, [sp, #8]
 801d732:	e7f4      	b.n	801d71e <_dtoa_r+0x826>
 801d734:	920a      	str	r2, [sp, #40]	; 0x28
 801d736:	e7f3      	b.n	801d720 <_dtoa_r+0x828>
 801d738:	d081      	beq.n	801d63e <_dtoa_r+0x746>
 801d73a:	4610      	mov	r0, r2
 801d73c:	301c      	adds	r0, #28
 801d73e:	e777      	b.n	801d630 <_dtoa_r+0x738>
 801d740:	f1b9 0f00 	cmp.w	r9, #0
 801d744:	dc37      	bgt.n	801d7b6 <_dtoa_r+0x8be>
 801d746:	9b07      	ldr	r3, [sp, #28]
 801d748:	2b02      	cmp	r3, #2
 801d74a:	dd34      	ble.n	801d7b6 <_dtoa_r+0x8be>
 801d74c:	46ca      	mov	sl, r9
 801d74e:	f1ba 0f00 	cmp.w	sl, #0
 801d752:	d10d      	bne.n	801d770 <_dtoa_r+0x878>
 801d754:	4621      	mov	r1, r4
 801d756:	4653      	mov	r3, sl
 801d758:	2205      	movs	r2, #5
 801d75a:	4630      	mov	r0, r6
 801d75c:	f000 ff78 	bl	801e650 <__multadd>
 801d760:	4601      	mov	r1, r0
 801d762:	4604      	mov	r4, r0
 801d764:	4628      	mov	r0, r5
 801d766:	f001 f9d9 	bl	801eb1c <__mcmp>
 801d76a:	2800      	cmp	r0, #0
 801d76c:	f73f adde 	bgt.w	801d32c <_dtoa_r+0x434>
 801d770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d772:	f8dd 8000 	ldr.w	r8, [sp]
 801d776:	ea6f 0b03 	mvn.w	fp, r3
 801d77a:	f04f 0900 	mov.w	r9, #0
 801d77e:	4621      	mov	r1, r4
 801d780:	4630      	mov	r0, r6
 801d782:	f000 ff43 	bl	801e60c <_Bfree>
 801d786:	2f00      	cmp	r7, #0
 801d788:	f43f aea7 	beq.w	801d4da <_dtoa_r+0x5e2>
 801d78c:	f1b9 0f00 	cmp.w	r9, #0
 801d790:	d005      	beq.n	801d79e <_dtoa_r+0x8a6>
 801d792:	45b9      	cmp	r9, r7
 801d794:	d003      	beq.n	801d79e <_dtoa_r+0x8a6>
 801d796:	4649      	mov	r1, r9
 801d798:	4630      	mov	r0, r6
 801d79a:	f000 ff37 	bl	801e60c <_Bfree>
 801d79e:	4639      	mov	r1, r7
 801d7a0:	4630      	mov	r0, r6
 801d7a2:	f000 ff33 	bl	801e60c <_Bfree>
 801d7a6:	e698      	b.n	801d4da <_dtoa_r+0x5e2>
 801d7a8:	2400      	movs	r4, #0
 801d7aa:	4627      	mov	r7, r4
 801d7ac:	e7e0      	b.n	801d770 <_dtoa_r+0x878>
 801d7ae:	46bb      	mov	fp, r7
 801d7b0:	4604      	mov	r4, r0
 801d7b2:	4607      	mov	r7, r0
 801d7b4:	e5ba      	b.n	801d32c <_dtoa_r+0x434>
 801d7b6:	9b08      	ldr	r3, [sp, #32]
 801d7b8:	46ca      	mov	sl, r9
 801d7ba:	2b00      	cmp	r3, #0
 801d7bc:	f000 8100 	beq.w	801d9c0 <_dtoa_r+0xac8>
 801d7c0:	f1b8 0f00 	cmp.w	r8, #0
 801d7c4:	dd05      	ble.n	801d7d2 <_dtoa_r+0x8da>
 801d7c6:	4639      	mov	r1, r7
 801d7c8:	4642      	mov	r2, r8
 801d7ca:	4630      	mov	r0, r6
 801d7cc:	f001 f93a 	bl	801ea44 <__lshift>
 801d7d0:	4607      	mov	r7, r0
 801d7d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d7d4:	2b00      	cmp	r3, #0
 801d7d6:	d05d      	beq.n	801d894 <_dtoa_r+0x99c>
 801d7d8:	6879      	ldr	r1, [r7, #4]
 801d7da:	4630      	mov	r0, r6
 801d7dc:	f000 fed6 	bl	801e58c <_Balloc>
 801d7e0:	4680      	mov	r8, r0
 801d7e2:	b928      	cbnz	r0, 801d7f0 <_dtoa_r+0x8f8>
 801d7e4:	4b82      	ldr	r3, [pc, #520]	; (801d9f0 <_dtoa_r+0xaf8>)
 801d7e6:	4602      	mov	r2, r0
 801d7e8:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d7ec:	f7ff bb9a 	b.w	801cf24 <_dtoa_r+0x2c>
 801d7f0:	693a      	ldr	r2, [r7, #16]
 801d7f2:	3202      	adds	r2, #2
 801d7f4:	0092      	lsls	r2, r2, #2
 801d7f6:	f107 010c 	add.w	r1, r7, #12
 801d7fa:	300c      	adds	r0, #12
 801d7fc:	f7fd fbd4 	bl	801afa8 <memcpy>
 801d800:	2201      	movs	r2, #1
 801d802:	4641      	mov	r1, r8
 801d804:	4630      	mov	r0, r6
 801d806:	f001 f91d 	bl	801ea44 <__lshift>
 801d80a:	9b00      	ldr	r3, [sp, #0]
 801d80c:	3301      	adds	r3, #1
 801d80e:	9305      	str	r3, [sp, #20]
 801d810:	9b00      	ldr	r3, [sp, #0]
 801d812:	4453      	add	r3, sl
 801d814:	9309      	str	r3, [sp, #36]	; 0x24
 801d816:	9b02      	ldr	r3, [sp, #8]
 801d818:	f003 0301 	and.w	r3, r3, #1
 801d81c:	46b9      	mov	r9, r7
 801d81e:	9308      	str	r3, [sp, #32]
 801d820:	4607      	mov	r7, r0
 801d822:	9b05      	ldr	r3, [sp, #20]
 801d824:	4621      	mov	r1, r4
 801d826:	3b01      	subs	r3, #1
 801d828:	4628      	mov	r0, r5
 801d82a:	9302      	str	r3, [sp, #8]
 801d82c:	f7ff fad8 	bl	801cde0 <quorem>
 801d830:	4603      	mov	r3, r0
 801d832:	3330      	adds	r3, #48	; 0x30
 801d834:	9006      	str	r0, [sp, #24]
 801d836:	4649      	mov	r1, r9
 801d838:	4628      	mov	r0, r5
 801d83a:	930a      	str	r3, [sp, #40]	; 0x28
 801d83c:	f001 f96e 	bl	801eb1c <__mcmp>
 801d840:	463a      	mov	r2, r7
 801d842:	4682      	mov	sl, r0
 801d844:	4621      	mov	r1, r4
 801d846:	4630      	mov	r0, r6
 801d848:	f001 f984 	bl	801eb54 <__mdiff>
 801d84c:	68c2      	ldr	r2, [r0, #12]
 801d84e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d850:	4680      	mov	r8, r0
 801d852:	bb0a      	cbnz	r2, 801d898 <_dtoa_r+0x9a0>
 801d854:	4601      	mov	r1, r0
 801d856:	4628      	mov	r0, r5
 801d858:	f001 f960 	bl	801eb1c <__mcmp>
 801d85c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d85e:	4602      	mov	r2, r0
 801d860:	4641      	mov	r1, r8
 801d862:	4630      	mov	r0, r6
 801d864:	920e      	str	r2, [sp, #56]	; 0x38
 801d866:	930a      	str	r3, [sp, #40]	; 0x28
 801d868:	f000 fed0 	bl	801e60c <_Bfree>
 801d86c:	9b07      	ldr	r3, [sp, #28]
 801d86e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d870:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d874:	ea43 0102 	orr.w	r1, r3, r2
 801d878:	9b08      	ldr	r3, [sp, #32]
 801d87a:	430b      	orrs	r3, r1
 801d87c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d87e:	d10d      	bne.n	801d89c <_dtoa_r+0x9a4>
 801d880:	2b39      	cmp	r3, #57	; 0x39
 801d882:	d029      	beq.n	801d8d8 <_dtoa_r+0x9e0>
 801d884:	f1ba 0f00 	cmp.w	sl, #0
 801d888:	dd01      	ble.n	801d88e <_dtoa_r+0x996>
 801d88a:	9b06      	ldr	r3, [sp, #24]
 801d88c:	3331      	adds	r3, #49	; 0x31
 801d88e:	9a02      	ldr	r2, [sp, #8]
 801d890:	7013      	strb	r3, [r2, #0]
 801d892:	e774      	b.n	801d77e <_dtoa_r+0x886>
 801d894:	4638      	mov	r0, r7
 801d896:	e7b8      	b.n	801d80a <_dtoa_r+0x912>
 801d898:	2201      	movs	r2, #1
 801d89a:	e7e1      	b.n	801d860 <_dtoa_r+0x968>
 801d89c:	f1ba 0f00 	cmp.w	sl, #0
 801d8a0:	db06      	blt.n	801d8b0 <_dtoa_r+0x9b8>
 801d8a2:	9907      	ldr	r1, [sp, #28]
 801d8a4:	ea41 0a0a 	orr.w	sl, r1, sl
 801d8a8:	9908      	ldr	r1, [sp, #32]
 801d8aa:	ea5a 0101 	orrs.w	r1, sl, r1
 801d8ae:	d120      	bne.n	801d8f2 <_dtoa_r+0x9fa>
 801d8b0:	2a00      	cmp	r2, #0
 801d8b2:	ddec      	ble.n	801d88e <_dtoa_r+0x996>
 801d8b4:	4629      	mov	r1, r5
 801d8b6:	2201      	movs	r2, #1
 801d8b8:	4630      	mov	r0, r6
 801d8ba:	9305      	str	r3, [sp, #20]
 801d8bc:	f001 f8c2 	bl	801ea44 <__lshift>
 801d8c0:	4621      	mov	r1, r4
 801d8c2:	4605      	mov	r5, r0
 801d8c4:	f001 f92a 	bl	801eb1c <__mcmp>
 801d8c8:	2800      	cmp	r0, #0
 801d8ca:	9b05      	ldr	r3, [sp, #20]
 801d8cc:	dc02      	bgt.n	801d8d4 <_dtoa_r+0x9dc>
 801d8ce:	d1de      	bne.n	801d88e <_dtoa_r+0x996>
 801d8d0:	07da      	lsls	r2, r3, #31
 801d8d2:	d5dc      	bpl.n	801d88e <_dtoa_r+0x996>
 801d8d4:	2b39      	cmp	r3, #57	; 0x39
 801d8d6:	d1d8      	bne.n	801d88a <_dtoa_r+0x992>
 801d8d8:	9a02      	ldr	r2, [sp, #8]
 801d8da:	2339      	movs	r3, #57	; 0x39
 801d8dc:	7013      	strb	r3, [r2, #0]
 801d8de:	4643      	mov	r3, r8
 801d8e0:	4698      	mov	r8, r3
 801d8e2:	3b01      	subs	r3, #1
 801d8e4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801d8e8:	2a39      	cmp	r2, #57	; 0x39
 801d8ea:	d051      	beq.n	801d990 <_dtoa_r+0xa98>
 801d8ec:	3201      	adds	r2, #1
 801d8ee:	701a      	strb	r2, [r3, #0]
 801d8f0:	e745      	b.n	801d77e <_dtoa_r+0x886>
 801d8f2:	2a00      	cmp	r2, #0
 801d8f4:	dd03      	ble.n	801d8fe <_dtoa_r+0xa06>
 801d8f6:	2b39      	cmp	r3, #57	; 0x39
 801d8f8:	d0ee      	beq.n	801d8d8 <_dtoa_r+0x9e0>
 801d8fa:	3301      	adds	r3, #1
 801d8fc:	e7c7      	b.n	801d88e <_dtoa_r+0x996>
 801d8fe:	9a05      	ldr	r2, [sp, #20]
 801d900:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d902:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d906:	428a      	cmp	r2, r1
 801d908:	d02b      	beq.n	801d962 <_dtoa_r+0xa6a>
 801d90a:	4629      	mov	r1, r5
 801d90c:	2300      	movs	r3, #0
 801d90e:	220a      	movs	r2, #10
 801d910:	4630      	mov	r0, r6
 801d912:	f000 fe9d 	bl	801e650 <__multadd>
 801d916:	45b9      	cmp	r9, r7
 801d918:	4605      	mov	r5, r0
 801d91a:	f04f 0300 	mov.w	r3, #0
 801d91e:	f04f 020a 	mov.w	r2, #10
 801d922:	4649      	mov	r1, r9
 801d924:	4630      	mov	r0, r6
 801d926:	d107      	bne.n	801d938 <_dtoa_r+0xa40>
 801d928:	f000 fe92 	bl	801e650 <__multadd>
 801d92c:	4681      	mov	r9, r0
 801d92e:	4607      	mov	r7, r0
 801d930:	9b05      	ldr	r3, [sp, #20]
 801d932:	3301      	adds	r3, #1
 801d934:	9305      	str	r3, [sp, #20]
 801d936:	e774      	b.n	801d822 <_dtoa_r+0x92a>
 801d938:	f000 fe8a 	bl	801e650 <__multadd>
 801d93c:	4639      	mov	r1, r7
 801d93e:	4681      	mov	r9, r0
 801d940:	2300      	movs	r3, #0
 801d942:	220a      	movs	r2, #10
 801d944:	4630      	mov	r0, r6
 801d946:	f000 fe83 	bl	801e650 <__multadd>
 801d94a:	4607      	mov	r7, r0
 801d94c:	e7f0      	b.n	801d930 <_dtoa_r+0xa38>
 801d94e:	f1ba 0f00 	cmp.w	sl, #0
 801d952:	9a00      	ldr	r2, [sp, #0]
 801d954:	bfcc      	ite	gt
 801d956:	46d0      	movgt	r8, sl
 801d958:	f04f 0801 	movle.w	r8, #1
 801d95c:	4490      	add	r8, r2
 801d95e:	f04f 0900 	mov.w	r9, #0
 801d962:	4629      	mov	r1, r5
 801d964:	2201      	movs	r2, #1
 801d966:	4630      	mov	r0, r6
 801d968:	9302      	str	r3, [sp, #8]
 801d96a:	f001 f86b 	bl	801ea44 <__lshift>
 801d96e:	4621      	mov	r1, r4
 801d970:	4605      	mov	r5, r0
 801d972:	f001 f8d3 	bl	801eb1c <__mcmp>
 801d976:	2800      	cmp	r0, #0
 801d978:	dcb1      	bgt.n	801d8de <_dtoa_r+0x9e6>
 801d97a:	d102      	bne.n	801d982 <_dtoa_r+0xa8a>
 801d97c:	9b02      	ldr	r3, [sp, #8]
 801d97e:	07db      	lsls	r3, r3, #31
 801d980:	d4ad      	bmi.n	801d8de <_dtoa_r+0x9e6>
 801d982:	4643      	mov	r3, r8
 801d984:	4698      	mov	r8, r3
 801d986:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d98a:	2a30      	cmp	r2, #48	; 0x30
 801d98c:	d0fa      	beq.n	801d984 <_dtoa_r+0xa8c>
 801d98e:	e6f6      	b.n	801d77e <_dtoa_r+0x886>
 801d990:	9a00      	ldr	r2, [sp, #0]
 801d992:	429a      	cmp	r2, r3
 801d994:	d1a4      	bne.n	801d8e0 <_dtoa_r+0x9e8>
 801d996:	f10b 0b01 	add.w	fp, fp, #1
 801d99a:	2331      	movs	r3, #49	; 0x31
 801d99c:	e778      	b.n	801d890 <_dtoa_r+0x998>
 801d99e:	4b15      	ldr	r3, [pc, #84]	; (801d9f4 <_dtoa_r+0xafc>)
 801d9a0:	f7ff bb12 	b.w	801cfc8 <_dtoa_r+0xd0>
 801d9a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	f47f aaee 	bne.w	801cf88 <_dtoa_r+0x90>
 801d9ac:	4b12      	ldr	r3, [pc, #72]	; (801d9f8 <_dtoa_r+0xb00>)
 801d9ae:	f7ff bb0b 	b.w	801cfc8 <_dtoa_r+0xd0>
 801d9b2:	f1ba 0f00 	cmp.w	sl, #0
 801d9b6:	dc03      	bgt.n	801d9c0 <_dtoa_r+0xac8>
 801d9b8:	9b07      	ldr	r3, [sp, #28]
 801d9ba:	2b02      	cmp	r3, #2
 801d9bc:	f73f aec7 	bgt.w	801d74e <_dtoa_r+0x856>
 801d9c0:	f8dd 8000 	ldr.w	r8, [sp]
 801d9c4:	4621      	mov	r1, r4
 801d9c6:	4628      	mov	r0, r5
 801d9c8:	f7ff fa0a 	bl	801cde0 <quorem>
 801d9cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801d9d0:	f808 3b01 	strb.w	r3, [r8], #1
 801d9d4:	9a00      	ldr	r2, [sp, #0]
 801d9d6:	eba8 0202 	sub.w	r2, r8, r2
 801d9da:	4592      	cmp	sl, r2
 801d9dc:	ddb7      	ble.n	801d94e <_dtoa_r+0xa56>
 801d9de:	4629      	mov	r1, r5
 801d9e0:	2300      	movs	r3, #0
 801d9e2:	220a      	movs	r2, #10
 801d9e4:	4630      	mov	r0, r6
 801d9e6:	f000 fe33 	bl	801e650 <__multadd>
 801d9ea:	4605      	mov	r5, r0
 801d9ec:	e7ea      	b.n	801d9c4 <_dtoa_r+0xacc>
 801d9ee:	bf00      	nop
 801d9f0:	08022b60 	.word	0x08022b60
 801d9f4:	080229c4 	.word	0x080229c4
 801d9f8:	08022af4 	.word	0x08022af4

0801d9fc <__errno>:
 801d9fc:	4b01      	ldr	r3, [pc, #4]	; (801da04 <__errno+0x8>)
 801d9fe:	6818      	ldr	r0, [r3, #0]
 801da00:	4770      	bx	lr
 801da02:	bf00      	nop
 801da04:	2400383c 	.word	0x2400383c

0801da08 <__sflush_r>:
 801da08:	898a      	ldrh	r2, [r1, #12]
 801da0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da0e:	4605      	mov	r5, r0
 801da10:	0710      	lsls	r0, r2, #28
 801da12:	460c      	mov	r4, r1
 801da14:	d458      	bmi.n	801dac8 <__sflush_r+0xc0>
 801da16:	684b      	ldr	r3, [r1, #4]
 801da18:	2b00      	cmp	r3, #0
 801da1a:	dc05      	bgt.n	801da28 <__sflush_r+0x20>
 801da1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801da1e:	2b00      	cmp	r3, #0
 801da20:	dc02      	bgt.n	801da28 <__sflush_r+0x20>
 801da22:	2000      	movs	r0, #0
 801da24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801da2a:	2e00      	cmp	r6, #0
 801da2c:	d0f9      	beq.n	801da22 <__sflush_r+0x1a>
 801da2e:	2300      	movs	r3, #0
 801da30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801da34:	682f      	ldr	r7, [r5, #0]
 801da36:	602b      	str	r3, [r5, #0]
 801da38:	d032      	beq.n	801daa0 <__sflush_r+0x98>
 801da3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801da3c:	89a3      	ldrh	r3, [r4, #12]
 801da3e:	075a      	lsls	r2, r3, #29
 801da40:	d505      	bpl.n	801da4e <__sflush_r+0x46>
 801da42:	6863      	ldr	r3, [r4, #4]
 801da44:	1ac0      	subs	r0, r0, r3
 801da46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801da48:	b10b      	cbz	r3, 801da4e <__sflush_r+0x46>
 801da4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801da4c:	1ac0      	subs	r0, r0, r3
 801da4e:	2300      	movs	r3, #0
 801da50:	4602      	mov	r2, r0
 801da52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801da54:	6a21      	ldr	r1, [r4, #32]
 801da56:	4628      	mov	r0, r5
 801da58:	47b0      	blx	r6
 801da5a:	1c43      	adds	r3, r0, #1
 801da5c:	89a3      	ldrh	r3, [r4, #12]
 801da5e:	d106      	bne.n	801da6e <__sflush_r+0x66>
 801da60:	6829      	ldr	r1, [r5, #0]
 801da62:	291d      	cmp	r1, #29
 801da64:	d82c      	bhi.n	801dac0 <__sflush_r+0xb8>
 801da66:	4a2a      	ldr	r2, [pc, #168]	; (801db10 <__sflush_r+0x108>)
 801da68:	40ca      	lsrs	r2, r1
 801da6a:	07d6      	lsls	r6, r2, #31
 801da6c:	d528      	bpl.n	801dac0 <__sflush_r+0xb8>
 801da6e:	2200      	movs	r2, #0
 801da70:	6062      	str	r2, [r4, #4]
 801da72:	04d9      	lsls	r1, r3, #19
 801da74:	6922      	ldr	r2, [r4, #16]
 801da76:	6022      	str	r2, [r4, #0]
 801da78:	d504      	bpl.n	801da84 <__sflush_r+0x7c>
 801da7a:	1c42      	adds	r2, r0, #1
 801da7c:	d101      	bne.n	801da82 <__sflush_r+0x7a>
 801da7e:	682b      	ldr	r3, [r5, #0]
 801da80:	b903      	cbnz	r3, 801da84 <__sflush_r+0x7c>
 801da82:	6560      	str	r0, [r4, #84]	; 0x54
 801da84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801da86:	602f      	str	r7, [r5, #0]
 801da88:	2900      	cmp	r1, #0
 801da8a:	d0ca      	beq.n	801da22 <__sflush_r+0x1a>
 801da8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801da90:	4299      	cmp	r1, r3
 801da92:	d002      	beq.n	801da9a <__sflush_r+0x92>
 801da94:	4628      	mov	r0, r5
 801da96:	f7fd fab7 	bl	801b008 <_free_r>
 801da9a:	2000      	movs	r0, #0
 801da9c:	6360      	str	r0, [r4, #52]	; 0x34
 801da9e:	e7c1      	b.n	801da24 <__sflush_r+0x1c>
 801daa0:	6a21      	ldr	r1, [r4, #32]
 801daa2:	2301      	movs	r3, #1
 801daa4:	4628      	mov	r0, r5
 801daa6:	47b0      	blx	r6
 801daa8:	1c41      	adds	r1, r0, #1
 801daaa:	d1c7      	bne.n	801da3c <__sflush_r+0x34>
 801daac:	682b      	ldr	r3, [r5, #0]
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d0c4      	beq.n	801da3c <__sflush_r+0x34>
 801dab2:	2b1d      	cmp	r3, #29
 801dab4:	d001      	beq.n	801daba <__sflush_r+0xb2>
 801dab6:	2b16      	cmp	r3, #22
 801dab8:	d101      	bne.n	801dabe <__sflush_r+0xb6>
 801daba:	602f      	str	r7, [r5, #0]
 801dabc:	e7b1      	b.n	801da22 <__sflush_r+0x1a>
 801dabe:	89a3      	ldrh	r3, [r4, #12]
 801dac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dac4:	81a3      	strh	r3, [r4, #12]
 801dac6:	e7ad      	b.n	801da24 <__sflush_r+0x1c>
 801dac8:	690f      	ldr	r7, [r1, #16]
 801daca:	2f00      	cmp	r7, #0
 801dacc:	d0a9      	beq.n	801da22 <__sflush_r+0x1a>
 801dace:	0793      	lsls	r3, r2, #30
 801dad0:	680e      	ldr	r6, [r1, #0]
 801dad2:	bf08      	it	eq
 801dad4:	694b      	ldreq	r3, [r1, #20]
 801dad6:	600f      	str	r7, [r1, #0]
 801dad8:	bf18      	it	ne
 801dada:	2300      	movne	r3, #0
 801dadc:	eba6 0807 	sub.w	r8, r6, r7
 801dae0:	608b      	str	r3, [r1, #8]
 801dae2:	f1b8 0f00 	cmp.w	r8, #0
 801dae6:	dd9c      	ble.n	801da22 <__sflush_r+0x1a>
 801dae8:	6a21      	ldr	r1, [r4, #32]
 801daea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801daec:	4643      	mov	r3, r8
 801daee:	463a      	mov	r2, r7
 801daf0:	4628      	mov	r0, r5
 801daf2:	47b0      	blx	r6
 801daf4:	2800      	cmp	r0, #0
 801daf6:	dc06      	bgt.n	801db06 <__sflush_r+0xfe>
 801daf8:	89a3      	ldrh	r3, [r4, #12]
 801dafa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dafe:	81a3      	strh	r3, [r4, #12]
 801db00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801db04:	e78e      	b.n	801da24 <__sflush_r+0x1c>
 801db06:	4407      	add	r7, r0
 801db08:	eba8 0800 	sub.w	r8, r8, r0
 801db0c:	e7e9      	b.n	801dae2 <__sflush_r+0xda>
 801db0e:	bf00      	nop
 801db10:	20400001 	.word	0x20400001

0801db14 <_fflush_r>:
 801db14:	b538      	push	{r3, r4, r5, lr}
 801db16:	690b      	ldr	r3, [r1, #16]
 801db18:	4605      	mov	r5, r0
 801db1a:	460c      	mov	r4, r1
 801db1c:	b913      	cbnz	r3, 801db24 <_fflush_r+0x10>
 801db1e:	2500      	movs	r5, #0
 801db20:	4628      	mov	r0, r5
 801db22:	bd38      	pop	{r3, r4, r5, pc}
 801db24:	b118      	cbz	r0, 801db2e <_fflush_r+0x1a>
 801db26:	6983      	ldr	r3, [r0, #24]
 801db28:	b90b      	cbnz	r3, 801db2e <_fflush_r+0x1a>
 801db2a:	f000 f887 	bl	801dc3c <__sinit>
 801db2e:	4b14      	ldr	r3, [pc, #80]	; (801db80 <_fflush_r+0x6c>)
 801db30:	429c      	cmp	r4, r3
 801db32:	d11b      	bne.n	801db6c <_fflush_r+0x58>
 801db34:	686c      	ldr	r4, [r5, #4]
 801db36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	d0ef      	beq.n	801db1e <_fflush_r+0xa>
 801db3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801db40:	07d0      	lsls	r0, r2, #31
 801db42:	d404      	bmi.n	801db4e <_fflush_r+0x3a>
 801db44:	0599      	lsls	r1, r3, #22
 801db46:	d402      	bmi.n	801db4e <_fflush_r+0x3a>
 801db48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801db4a:	f000 fc9a 	bl	801e482 <__retarget_lock_acquire_recursive>
 801db4e:	4628      	mov	r0, r5
 801db50:	4621      	mov	r1, r4
 801db52:	f7ff ff59 	bl	801da08 <__sflush_r>
 801db56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801db58:	07da      	lsls	r2, r3, #31
 801db5a:	4605      	mov	r5, r0
 801db5c:	d4e0      	bmi.n	801db20 <_fflush_r+0xc>
 801db5e:	89a3      	ldrh	r3, [r4, #12]
 801db60:	059b      	lsls	r3, r3, #22
 801db62:	d4dd      	bmi.n	801db20 <_fflush_r+0xc>
 801db64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801db66:	f000 fc8d 	bl	801e484 <__retarget_lock_release_recursive>
 801db6a:	e7d9      	b.n	801db20 <_fflush_r+0xc>
 801db6c:	4b05      	ldr	r3, [pc, #20]	; (801db84 <_fflush_r+0x70>)
 801db6e:	429c      	cmp	r4, r3
 801db70:	d101      	bne.n	801db76 <_fflush_r+0x62>
 801db72:	68ac      	ldr	r4, [r5, #8]
 801db74:	e7df      	b.n	801db36 <_fflush_r+0x22>
 801db76:	4b04      	ldr	r3, [pc, #16]	; (801db88 <_fflush_r+0x74>)
 801db78:	429c      	cmp	r4, r3
 801db7a:	bf08      	it	eq
 801db7c:	68ec      	ldreq	r4, [r5, #12]
 801db7e:	e7da      	b.n	801db36 <_fflush_r+0x22>
 801db80:	08022b94 	.word	0x08022b94
 801db84:	08022bb4 	.word	0x08022bb4
 801db88:	08022b74 	.word	0x08022b74

0801db8c <std>:
 801db8c:	2300      	movs	r3, #0
 801db8e:	b510      	push	{r4, lr}
 801db90:	4604      	mov	r4, r0
 801db92:	e9c0 3300 	strd	r3, r3, [r0]
 801db96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801db9a:	6083      	str	r3, [r0, #8]
 801db9c:	8181      	strh	r1, [r0, #12]
 801db9e:	6643      	str	r3, [r0, #100]	; 0x64
 801dba0:	81c2      	strh	r2, [r0, #14]
 801dba2:	6183      	str	r3, [r0, #24]
 801dba4:	4619      	mov	r1, r3
 801dba6:	2208      	movs	r2, #8
 801dba8:	305c      	adds	r0, #92	; 0x5c
 801dbaa:	f7fd fa25 	bl	801aff8 <memset>
 801dbae:	4b05      	ldr	r3, [pc, #20]	; (801dbc4 <std+0x38>)
 801dbb0:	6263      	str	r3, [r4, #36]	; 0x24
 801dbb2:	4b05      	ldr	r3, [pc, #20]	; (801dbc8 <std+0x3c>)
 801dbb4:	62a3      	str	r3, [r4, #40]	; 0x28
 801dbb6:	4b05      	ldr	r3, [pc, #20]	; (801dbcc <std+0x40>)
 801dbb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dbba:	4b05      	ldr	r3, [pc, #20]	; (801dbd0 <std+0x44>)
 801dbbc:	6224      	str	r4, [r4, #32]
 801dbbe:	6323      	str	r3, [r4, #48]	; 0x30
 801dbc0:	bd10      	pop	{r4, pc}
 801dbc2:	bf00      	nop
 801dbc4:	0801f4a1 	.word	0x0801f4a1
 801dbc8:	0801f4c3 	.word	0x0801f4c3
 801dbcc:	0801f4fb 	.word	0x0801f4fb
 801dbd0:	0801f51f 	.word	0x0801f51f

0801dbd4 <_cleanup_r>:
 801dbd4:	4901      	ldr	r1, [pc, #4]	; (801dbdc <_cleanup_r+0x8>)
 801dbd6:	f000 b8c1 	b.w	801dd5c <_fwalk_reent>
 801dbda:	bf00      	nop
 801dbdc:	0801db15 	.word	0x0801db15

0801dbe0 <__sfmoreglue>:
 801dbe0:	b570      	push	{r4, r5, r6, lr}
 801dbe2:	1e4a      	subs	r2, r1, #1
 801dbe4:	2568      	movs	r5, #104	; 0x68
 801dbe6:	4355      	muls	r5, r2
 801dbe8:	460e      	mov	r6, r1
 801dbea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dbee:	f7fd fa5b 	bl	801b0a8 <_malloc_r>
 801dbf2:	4604      	mov	r4, r0
 801dbf4:	b140      	cbz	r0, 801dc08 <__sfmoreglue+0x28>
 801dbf6:	2100      	movs	r1, #0
 801dbf8:	e9c0 1600 	strd	r1, r6, [r0]
 801dbfc:	300c      	adds	r0, #12
 801dbfe:	60a0      	str	r0, [r4, #8]
 801dc00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dc04:	f7fd f9f8 	bl	801aff8 <memset>
 801dc08:	4620      	mov	r0, r4
 801dc0a:	bd70      	pop	{r4, r5, r6, pc}

0801dc0c <__sfp_lock_acquire>:
 801dc0c:	4801      	ldr	r0, [pc, #4]	; (801dc14 <__sfp_lock_acquire+0x8>)
 801dc0e:	f000 bc38 	b.w	801e482 <__retarget_lock_acquire_recursive>
 801dc12:	bf00      	nop
 801dc14:	24009a74 	.word	0x24009a74

0801dc18 <__sfp_lock_release>:
 801dc18:	4801      	ldr	r0, [pc, #4]	; (801dc20 <__sfp_lock_release+0x8>)
 801dc1a:	f000 bc33 	b.w	801e484 <__retarget_lock_release_recursive>
 801dc1e:	bf00      	nop
 801dc20:	24009a74 	.word	0x24009a74

0801dc24 <__sinit_lock_acquire>:
 801dc24:	4801      	ldr	r0, [pc, #4]	; (801dc2c <__sinit_lock_acquire+0x8>)
 801dc26:	f000 bc2c 	b.w	801e482 <__retarget_lock_acquire_recursive>
 801dc2a:	bf00      	nop
 801dc2c:	24009a6f 	.word	0x24009a6f

0801dc30 <__sinit_lock_release>:
 801dc30:	4801      	ldr	r0, [pc, #4]	; (801dc38 <__sinit_lock_release+0x8>)
 801dc32:	f000 bc27 	b.w	801e484 <__retarget_lock_release_recursive>
 801dc36:	bf00      	nop
 801dc38:	24009a6f 	.word	0x24009a6f

0801dc3c <__sinit>:
 801dc3c:	b510      	push	{r4, lr}
 801dc3e:	4604      	mov	r4, r0
 801dc40:	f7ff fff0 	bl	801dc24 <__sinit_lock_acquire>
 801dc44:	69a3      	ldr	r3, [r4, #24]
 801dc46:	b11b      	cbz	r3, 801dc50 <__sinit+0x14>
 801dc48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc4c:	f7ff bff0 	b.w	801dc30 <__sinit_lock_release>
 801dc50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801dc54:	6523      	str	r3, [r4, #80]	; 0x50
 801dc56:	4b13      	ldr	r3, [pc, #76]	; (801dca4 <__sinit+0x68>)
 801dc58:	4a13      	ldr	r2, [pc, #76]	; (801dca8 <__sinit+0x6c>)
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	62a2      	str	r2, [r4, #40]	; 0x28
 801dc5e:	42a3      	cmp	r3, r4
 801dc60:	bf04      	itt	eq
 801dc62:	2301      	moveq	r3, #1
 801dc64:	61a3      	streq	r3, [r4, #24]
 801dc66:	4620      	mov	r0, r4
 801dc68:	f000 f820 	bl	801dcac <__sfp>
 801dc6c:	6060      	str	r0, [r4, #4]
 801dc6e:	4620      	mov	r0, r4
 801dc70:	f000 f81c 	bl	801dcac <__sfp>
 801dc74:	60a0      	str	r0, [r4, #8]
 801dc76:	4620      	mov	r0, r4
 801dc78:	f000 f818 	bl	801dcac <__sfp>
 801dc7c:	2200      	movs	r2, #0
 801dc7e:	60e0      	str	r0, [r4, #12]
 801dc80:	2104      	movs	r1, #4
 801dc82:	6860      	ldr	r0, [r4, #4]
 801dc84:	f7ff ff82 	bl	801db8c <std>
 801dc88:	68a0      	ldr	r0, [r4, #8]
 801dc8a:	2201      	movs	r2, #1
 801dc8c:	2109      	movs	r1, #9
 801dc8e:	f7ff ff7d 	bl	801db8c <std>
 801dc92:	68e0      	ldr	r0, [r4, #12]
 801dc94:	2202      	movs	r2, #2
 801dc96:	2112      	movs	r1, #18
 801dc98:	f7ff ff78 	bl	801db8c <std>
 801dc9c:	2301      	movs	r3, #1
 801dc9e:	61a3      	str	r3, [r4, #24]
 801dca0:	e7d2      	b.n	801dc48 <__sinit+0xc>
 801dca2:	bf00      	nop
 801dca4:	080229b0 	.word	0x080229b0
 801dca8:	0801dbd5 	.word	0x0801dbd5

0801dcac <__sfp>:
 801dcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcae:	4607      	mov	r7, r0
 801dcb0:	f7ff ffac 	bl	801dc0c <__sfp_lock_acquire>
 801dcb4:	4b1e      	ldr	r3, [pc, #120]	; (801dd30 <__sfp+0x84>)
 801dcb6:	681e      	ldr	r6, [r3, #0]
 801dcb8:	69b3      	ldr	r3, [r6, #24]
 801dcba:	b913      	cbnz	r3, 801dcc2 <__sfp+0x16>
 801dcbc:	4630      	mov	r0, r6
 801dcbe:	f7ff ffbd 	bl	801dc3c <__sinit>
 801dcc2:	3648      	adds	r6, #72	; 0x48
 801dcc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dcc8:	3b01      	subs	r3, #1
 801dcca:	d503      	bpl.n	801dcd4 <__sfp+0x28>
 801dccc:	6833      	ldr	r3, [r6, #0]
 801dcce:	b30b      	cbz	r3, 801dd14 <__sfp+0x68>
 801dcd0:	6836      	ldr	r6, [r6, #0]
 801dcd2:	e7f7      	b.n	801dcc4 <__sfp+0x18>
 801dcd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dcd8:	b9d5      	cbnz	r5, 801dd10 <__sfp+0x64>
 801dcda:	4b16      	ldr	r3, [pc, #88]	; (801dd34 <__sfp+0x88>)
 801dcdc:	60e3      	str	r3, [r4, #12]
 801dcde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dce2:	6665      	str	r5, [r4, #100]	; 0x64
 801dce4:	f000 fbcc 	bl	801e480 <__retarget_lock_init_recursive>
 801dce8:	f7ff ff96 	bl	801dc18 <__sfp_lock_release>
 801dcec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dcf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dcf4:	6025      	str	r5, [r4, #0]
 801dcf6:	61a5      	str	r5, [r4, #24]
 801dcf8:	2208      	movs	r2, #8
 801dcfa:	4629      	mov	r1, r5
 801dcfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dd00:	f7fd f97a 	bl	801aff8 <memset>
 801dd04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dd08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dd0c:	4620      	mov	r0, r4
 801dd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd10:	3468      	adds	r4, #104	; 0x68
 801dd12:	e7d9      	b.n	801dcc8 <__sfp+0x1c>
 801dd14:	2104      	movs	r1, #4
 801dd16:	4638      	mov	r0, r7
 801dd18:	f7ff ff62 	bl	801dbe0 <__sfmoreglue>
 801dd1c:	4604      	mov	r4, r0
 801dd1e:	6030      	str	r0, [r6, #0]
 801dd20:	2800      	cmp	r0, #0
 801dd22:	d1d5      	bne.n	801dcd0 <__sfp+0x24>
 801dd24:	f7ff ff78 	bl	801dc18 <__sfp_lock_release>
 801dd28:	230c      	movs	r3, #12
 801dd2a:	603b      	str	r3, [r7, #0]
 801dd2c:	e7ee      	b.n	801dd0c <__sfp+0x60>
 801dd2e:	bf00      	nop
 801dd30:	080229b0 	.word	0x080229b0
 801dd34:	ffff0001 	.word	0xffff0001

0801dd38 <fiprintf>:
 801dd38:	b40e      	push	{r1, r2, r3}
 801dd3a:	b503      	push	{r0, r1, lr}
 801dd3c:	4601      	mov	r1, r0
 801dd3e:	ab03      	add	r3, sp, #12
 801dd40:	4805      	ldr	r0, [pc, #20]	; (801dd58 <fiprintf+0x20>)
 801dd42:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd46:	6800      	ldr	r0, [r0, #0]
 801dd48:	9301      	str	r3, [sp, #4]
 801dd4a:	f001 fa6f 	bl	801f22c <_vfiprintf_r>
 801dd4e:	b002      	add	sp, #8
 801dd50:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd54:	b003      	add	sp, #12
 801dd56:	4770      	bx	lr
 801dd58:	2400383c 	.word	0x2400383c

0801dd5c <_fwalk_reent>:
 801dd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd60:	4606      	mov	r6, r0
 801dd62:	4688      	mov	r8, r1
 801dd64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dd68:	2700      	movs	r7, #0
 801dd6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dd6e:	f1b9 0901 	subs.w	r9, r9, #1
 801dd72:	d505      	bpl.n	801dd80 <_fwalk_reent+0x24>
 801dd74:	6824      	ldr	r4, [r4, #0]
 801dd76:	2c00      	cmp	r4, #0
 801dd78:	d1f7      	bne.n	801dd6a <_fwalk_reent+0xe>
 801dd7a:	4638      	mov	r0, r7
 801dd7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd80:	89ab      	ldrh	r3, [r5, #12]
 801dd82:	2b01      	cmp	r3, #1
 801dd84:	d907      	bls.n	801dd96 <_fwalk_reent+0x3a>
 801dd86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dd8a:	3301      	adds	r3, #1
 801dd8c:	d003      	beq.n	801dd96 <_fwalk_reent+0x3a>
 801dd8e:	4629      	mov	r1, r5
 801dd90:	4630      	mov	r0, r6
 801dd92:	47c0      	blx	r8
 801dd94:	4307      	orrs	r7, r0
 801dd96:	3568      	adds	r5, #104	; 0x68
 801dd98:	e7e9      	b.n	801dd6e <_fwalk_reent+0x12>

0801dd9a <rshift>:
 801dd9a:	6903      	ldr	r3, [r0, #16]
 801dd9c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801dda0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dda4:	ea4f 1261 	mov.w	r2, r1, asr #5
 801dda8:	f100 0414 	add.w	r4, r0, #20
 801ddac:	dd45      	ble.n	801de3a <rshift+0xa0>
 801ddae:	f011 011f 	ands.w	r1, r1, #31
 801ddb2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ddb6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ddba:	d10c      	bne.n	801ddd6 <rshift+0x3c>
 801ddbc:	f100 0710 	add.w	r7, r0, #16
 801ddc0:	4629      	mov	r1, r5
 801ddc2:	42b1      	cmp	r1, r6
 801ddc4:	d334      	bcc.n	801de30 <rshift+0x96>
 801ddc6:	1a9b      	subs	r3, r3, r2
 801ddc8:	009b      	lsls	r3, r3, #2
 801ddca:	1eea      	subs	r2, r5, #3
 801ddcc:	4296      	cmp	r6, r2
 801ddce:	bf38      	it	cc
 801ddd0:	2300      	movcc	r3, #0
 801ddd2:	4423      	add	r3, r4
 801ddd4:	e015      	b.n	801de02 <rshift+0x68>
 801ddd6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ddda:	f1c1 0820 	rsb	r8, r1, #32
 801ddde:	40cf      	lsrs	r7, r1
 801dde0:	f105 0e04 	add.w	lr, r5, #4
 801dde4:	46a1      	mov	r9, r4
 801dde6:	4576      	cmp	r6, lr
 801dde8:	46f4      	mov	ip, lr
 801ddea:	d815      	bhi.n	801de18 <rshift+0x7e>
 801ddec:	1a9b      	subs	r3, r3, r2
 801ddee:	009a      	lsls	r2, r3, #2
 801ddf0:	3a04      	subs	r2, #4
 801ddf2:	3501      	adds	r5, #1
 801ddf4:	42ae      	cmp	r6, r5
 801ddf6:	bf38      	it	cc
 801ddf8:	2200      	movcc	r2, #0
 801ddfa:	18a3      	adds	r3, r4, r2
 801ddfc:	50a7      	str	r7, [r4, r2]
 801ddfe:	b107      	cbz	r7, 801de02 <rshift+0x68>
 801de00:	3304      	adds	r3, #4
 801de02:	1b1a      	subs	r2, r3, r4
 801de04:	42a3      	cmp	r3, r4
 801de06:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801de0a:	bf08      	it	eq
 801de0c:	2300      	moveq	r3, #0
 801de0e:	6102      	str	r2, [r0, #16]
 801de10:	bf08      	it	eq
 801de12:	6143      	streq	r3, [r0, #20]
 801de14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801de18:	f8dc c000 	ldr.w	ip, [ip]
 801de1c:	fa0c fc08 	lsl.w	ip, ip, r8
 801de20:	ea4c 0707 	orr.w	r7, ip, r7
 801de24:	f849 7b04 	str.w	r7, [r9], #4
 801de28:	f85e 7b04 	ldr.w	r7, [lr], #4
 801de2c:	40cf      	lsrs	r7, r1
 801de2e:	e7da      	b.n	801dde6 <rshift+0x4c>
 801de30:	f851 cb04 	ldr.w	ip, [r1], #4
 801de34:	f847 cf04 	str.w	ip, [r7, #4]!
 801de38:	e7c3      	b.n	801ddc2 <rshift+0x28>
 801de3a:	4623      	mov	r3, r4
 801de3c:	e7e1      	b.n	801de02 <rshift+0x68>

0801de3e <__hexdig_fun>:
 801de3e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801de42:	2b09      	cmp	r3, #9
 801de44:	d802      	bhi.n	801de4c <__hexdig_fun+0xe>
 801de46:	3820      	subs	r0, #32
 801de48:	b2c0      	uxtb	r0, r0
 801de4a:	4770      	bx	lr
 801de4c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801de50:	2b05      	cmp	r3, #5
 801de52:	d801      	bhi.n	801de58 <__hexdig_fun+0x1a>
 801de54:	3847      	subs	r0, #71	; 0x47
 801de56:	e7f7      	b.n	801de48 <__hexdig_fun+0xa>
 801de58:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801de5c:	2b05      	cmp	r3, #5
 801de5e:	d801      	bhi.n	801de64 <__hexdig_fun+0x26>
 801de60:	3827      	subs	r0, #39	; 0x27
 801de62:	e7f1      	b.n	801de48 <__hexdig_fun+0xa>
 801de64:	2000      	movs	r0, #0
 801de66:	4770      	bx	lr

0801de68 <__gethex>:
 801de68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de6c:	ed2d 8b02 	vpush	{d8}
 801de70:	b089      	sub	sp, #36	; 0x24
 801de72:	ee08 0a10 	vmov	s16, r0
 801de76:	9304      	str	r3, [sp, #16]
 801de78:	4bbc      	ldr	r3, [pc, #752]	; (801e16c <__gethex+0x304>)
 801de7a:	681b      	ldr	r3, [r3, #0]
 801de7c:	9301      	str	r3, [sp, #4]
 801de7e:	4618      	mov	r0, r3
 801de80:	468b      	mov	fp, r1
 801de82:	4690      	mov	r8, r2
 801de84:	f7e2 fa2c 	bl	80002e0 <strlen>
 801de88:	9b01      	ldr	r3, [sp, #4]
 801de8a:	f8db 2000 	ldr.w	r2, [fp]
 801de8e:	4403      	add	r3, r0
 801de90:	4682      	mov	sl, r0
 801de92:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801de96:	9305      	str	r3, [sp, #20]
 801de98:	1c93      	adds	r3, r2, #2
 801de9a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801de9e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801dea2:	32fe      	adds	r2, #254	; 0xfe
 801dea4:	18d1      	adds	r1, r2, r3
 801dea6:	461f      	mov	r7, r3
 801dea8:	f813 0b01 	ldrb.w	r0, [r3], #1
 801deac:	9100      	str	r1, [sp, #0]
 801deae:	2830      	cmp	r0, #48	; 0x30
 801deb0:	d0f8      	beq.n	801dea4 <__gethex+0x3c>
 801deb2:	f7ff ffc4 	bl	801de3e <__hexdig_fun>
 801deb6:	4604      	mov	r4, r0
 801deb8:	2800      	cmp	r0, #0
 801deba:	d13a      	bne.n	801df32 <__gethex+0xca>
 801debc:	9901      	ldr	r1, [sp, #4]
 801debe:	4652      	mov	r2, sl
 801dec0:	4638      	mov	r0, r7
 801dec2:	f7fe f821 	bl	801bf08 <strncmp>
 801dec6:	4605      	mov	r5, r0
 801dec8:	2800      	cmp	r0, #0
 801deca:	d168      	bne.n	801df9e <__gethex+0x136>
 801decc:	f817 000a 	ldrb.w	r0, [r7, sl]
 801ded0:	eb07 060a 	add.w	r6, r7, sl
 801ded4:	f7ff ffb3 	bl	801de3e <__hexdig_fun>
 801ded8:	2800      	cmp	r0, #0
 801deda:	d062      	beq.n	801dfa2 <__gethex+0x13a>
 801dedc:	4633      	mov	r3, r6
 801dede:	7818      	ldrb	r0, [r3, #0]
 801dee0:	2830      	cmp	r0, #48	; 0x30
 801dee2:	461f      	mov	r7, r3
 801dee4:	f103 0301 	add.w	r3, r3, #1
 801dee8:	d0f9      	beq.n	801dede <__gethex+0x76>
 801deea:	f7ff ffa8 	bl	801de3e <__hexdig_fun>
 801deee:	2301      	movs	r3, #1
 801def0:	fab0 f480 	clz	r4, r0
 801def4:	0964      	lsrs	r4, r4, #5
 801def6:	4635      	mov	r5, r6
 801def8:	9300      	str	r3, [sp, #0]
 801defa:	463a      	mov	r2, r7
 801defc:	4616      	mov	r6, r2
 801defe:	3201      	adds	r2, #1
 801df00:	7830      	ldrb	r0, [r6, #0]
 801df02:	f7ff ff9c 	bl	801de3e <__hexdig_fun>
 801df06:	2800      	cmp	r0, #0
 801df08:	d1f8      	bne.n	801defc <__gethex+0x94>
 801df0a:	9901      	ldr	r1, [sp, #4]
 801df0c:	4652      	mov	r2, sl
 801df0e:	4630      	mov	r0, r6
 801df10:	f7fd fffa 	bl	801bf08 <strncmp>
 801df14:	b980      	cbnz	r0, 801df38 <__gethex+0xd0>
 801df16:	b94d      	cbnz	r5, 801df2c <__gethex+0xc4>
 801df18:	eb06 050a 	add.w	r5, r6, sl
 801df1c:	462a      	mov	r2, r5
 801df1e:	4616      	mov	r6, r2
 801df20:	3201      	adds	r2, #1
 801df22:	7830      	ldrb	r0, [r6, #0]
 801df24:	f7ff ff8b 	bl	801de3e <__hexdig_fun>
 801df28:	2800      	cmp	r0, #0
 801df2a:	d1f8      	bne.n	801df1e <__gethex+0xb6>
 801df2c:	1bad      	subs	r5, r5, r6
 801df2e:	00ad      	lsls	r5, r5, #2
 801df30:	e004      	b.n	801df3c <__gethex+0xd4>
 801df32:	2400      	movs	r4, #0
 801df34:	4625      	mov	r5, r4
 801df36:	e7e0      	b.n	801defa <__gethex+0x92>
 801df38:	2d00      	cmp	r5, #0
 801df3a:	d1f7      	bne.n	801df2c <__gethex+0xc4>
 801df3c:	7833      	ldrb	r3, [r6, #0]
 801df3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801df42:	2b50      	cmp	r3, #80	; 0x50
 801df44:	d13b      	bne.n	801dfbe <__gethex+0x156>
 801df46:	7873      	ldrb	r3, [r6, #1]
 801df48:	2b2b      	cmp	r3, #43	; 0x2b
 801df4a:	d02c      	beq.n	801dfa6 <__gethex+0x13e>
 801df4c:	2b2d      	cmp	r3, #45	; 0x2d
 801df4e:	d02e      	beq.n	801dfae <__gethex+0x146>
 801df50:	1c71      	adds	r1, r6, #1
 801df52:	f04f 0900 	mov.w	r9, #0
 801df56:	7808      	ldrb	r0, [r1, #0]
 801df58:	f7ff ff71 	bl	801de3e <__hexdig_fun>
 801df5c:	1e43      	subs	r3, r0, #1
 801df5e:	b2db      	uxtb	r3, r3
 801df60:	2b18      	cmp	r3, #24
 801df62:	d82c      	bhi.n	801dfbe <__gethex+0x156>
 801df64:	f1a0 0210 	sub.w	r2, r0, #16
 801df68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801df6c:	f7ff ff67 	bl	801de3e <__hexdig_fun>
 801df70:	1e43      	subs	r3, r0, #1
 801df72:	b2db      	uxtb	r3, r3
 801df74:	2b18      	cmp	r3, #24
 801df76:	d91d      	bls.n	801dfb4 <__gethex+0x14c>
 801df78:	f1b9 0f00 	cmp.w	r9, #0
 801df7c:	d000      	beq.n	801df80 <__gethex+0x118>
 801df7e:	4252      	negs	r2, r2
 801df80:	4415      	add	r5, r2
 801df82:	f8cb 1000 	str.w	r1, [fp]
 801df86:	b1e4      	cbz	r4, 801dfc2 <__gethex+0x15a>
 801df88:	9b00      	ldr	r3, [sp, #0]
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	bf14      	ite	ne
 801df8e:	2700      	movne	r7, #0
 801df90:	2706      	moveq	r7, #6
 801df92:	4638      	mov	r0, r7
 801df94:	b009      	add	sp, #36	; 0x24
 801df96:	ecbd 8b02 	vpop	{d8}
 801df9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df9e:	463e      	mov	r6, r7
 801dfa0:	4625      	mov	r5, r4
 801dfa2:	2401      	movs	r4, #1
 801dfa4:	e7ca      	b.n	801df3c <__gethex+0xd4>
 801dfa6:	f04f 0900 	mov.w	r9, #0
 801dfaa:	1cb1      	adds	r1, r6, #2
 801dfac:	e7d3      	b.n	801df56 <__gethex+0xee>
 801dfae:	f04f 0901 	mov.w	r9, #1
 801dfb2:	e7fa      	b.n	801dfaa <__gethex+0x142>
 801dfb4:	230a      	movs	r3, #10
 801dfb6:	fb03 0202 	mla	r2, r3, r2, r0
 801dfba:	3a10      	subs	r2, #16
 801dfbc:	e7d4      	b.n	801df68 <__gethex+0x100>
 801dfbe:	4631      	mov	r1, r6
 801dfc0:	e7df      	b.n	801df82 <__gethex+0x11a>
 801dfc2:	1bf3      	subs	r3, r6, r7
 801dfc4:	3b01      	subs	r3, #1
 801dfc6:	4621      	mov	r1, r4
 801dfc8:	2b07      	cmp	r3, #7
 801dfca:	dc0b      	bgt.n	801dfe4 <__gethex+0x17c>
 801dfcc:	ee18 0a10 	vmov	r0, s16
 801dfd0:	f000 fadc 	bl	801e58c <_Balloc>
 801dfd4:	4604      	mov	r4, r0
 801dfd6:	b940      	cbnz	r0, 801dfea <__gethex+0x182>
 801dfd8:	4b65      	ldr	r3, [pc, #404]	; (801e170 <__gethex+0x308>)
 801dfda:	4602      	mov	r2, r0
 801dfdc:	21de      	movs	r1, #222	; 0xde
 801dfde:	4865      	ldr	r0, [pc, #404]	; (801e174 <__gethex+0x30c>)
 801dfe0:	f7fe fee0 	bl	801cda4 <__assert_func>
 801dfe4:	3101      	adds	r1, #1
 801dfe6:	105b      	asrs	r3, r3, #1
 801dfe8:	e7ee      	b.n	801dfc8 <__gethex+0x160>
 801dfea:	f100 0914 	add.w	r9, r0, #20
 801dfee:	f04f 0b00 	mov.w	fp, #0
 801dff2:	f1ca 0301 	rsb	r3, sl, #1
 801dff6:	f8cd 9008 	str.w	r9, [sp, #8]
 801dffa:	f8cd b000 	str.w	fp, [sp]
 801dffe:	9306      	str	r3, [sp, #24]
 801e000:	42b7      	cmp	r7, r6
 801e002:	d340      	bcc.n	801e086 <__gethex+0x21e>
 801e004:	9802      	ldr	r0, [sp, #8]
 801e006:	9b00      	ldr	r3, [sp, #0]
 801e008:	f840 3b04 	str.w	r3, [r0], #4
 801e00c:	eba0 0009 	sub.w	r0, r0, r9
 801e010:	1080      	asrs	r0, r0, #2
 801e012:	0146      	lsls	r6, r0, #5
 801e014:	6120      	str	r0, [r4, #16]
 801e016:	4618      	mov	r0, r3
 801e018:	f000 fbae 	bl	801e778 <__hi0bits>
 801e01c:	1a30      	subs	r0, r6, r0
 801e01e:	f8d8 6000 	ldr.w	r6, [r8]
 801e022:	42b0      	cmp	r0, r6
 801e024:	dd63      	ble.n	801e0ee <__gethex+0x286>
 801e026:	1b87      	subs	r7, r0, r6
 801e028:	4639      	mov	r1, r7
 801e02a:	4620      	mov	r0, r4
 801e02c:	f000 ff49 	bl	801eec2 <__any_on>
 801e030:	4682      	mov	sl, r0
 801e032:	b1a8      	cbz	r0, 801e060 <__gethex+0x1f8>
 801e034:	1e7b      	subs	r3, r7, #1
 801e036:	1159      	asrs	r1, r3, #5
 801e038:	f003 021f 	and.w	r2, r3, #31
 801e03c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801e040:	f04f 0a01 	mov.w	sl, #1
 801e044:	fa0a f202 	lsl.w	r2, sl, r2
 801e048:	420a      	tst	r2, r1
 801e04a:	d009      	beq.n	801e060 <__gethex+0x1f8>
 801e04c:	4553      	cmp	r3, sl
 801e04e:	dd05      	ble.n	801e05c <__gethex+0x1f4>
 801e050:	1eb9      	subs	r1, r7, #2
 801e052:	4620      	mov	r0, r4
 801e054:	f000 ff35 	bl	801eec2 <__any_on>
 801e058:	2800      	cmp	r0, #0
 801e05a:	d145      	bne.n	801e0e8 <__gethex+0x280>
 801e05c:	f04f 0a02 	mov.w	sl, #2
 801e060:	4639      	mov	r1, r7
 801e062:	4620      	mov	r0, r4
 801e064:	f7ff fe99 	bl	801dd9a <rshift>
 801e068:	443d      	add	r5, r7
 801e06a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e06e:	42ab      	cmp	r3, r5
 801e070:	da4c      	bge.n	801e10c <__gethex+0x2a4>
 801e072:	ee18 0a10 	vmov	r0, s16
 801e076:	4621      	mov	r1, r4
 801e078:	f000 fac8 	bl	801e60c <_Bfree>
 801e07c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e07e:	2300      	movs	r3, #0
 801e080:	6013      	str	r3, [r2, #0]
 801e082:	27a3      	movs	r7, #163	; 0xa3
 801e084:	e785      	b.n	801df92 <__gethex+0x12a>
 801e086:	1e73      	subs	r3, r6, #1
 801e088:	9a05      	ldr	r2, [sp, #20]
 801e08a:	9303      	str	r3, [sp, #12]
 801e08c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e090:	4293      	cmp	r3, r2
 801e092:	d019      	beq.n	801e0c8 <__gethex+0x260>
 801e094:	f1bb 0f20 	cmp.w	fp, #32
 801e098:	d107      	bne.n	801e0aa <__gethex+0x242>
 801e09a:	9b02      	ldr	r3, [sp, #8]
 801e09c:	9a00      	ldr	r2, [sp, #0]
 801e09e:	f843 2b04 	str.w	r2, [r3], #4
 801e0a2:	9302      	str	r3, [sp, #8]
 801e0a4:	2300      	movs	r3, #0
 801e0a6:	9300      	str	r3, [sp, #0]
 801e0a8:	469b      	mov	fp, r3
 801e0aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e0ae:	f7ff fec6 	bl	801de3e <__hexdig_fun>
 801e0b2:	9b00      	ldr	r3, [sp, #0]
 801e0b4:	f000 000f 	and.w	r0, r0, #15
 801e0b8:	fa00 f00b 	lsl.w	r0, r0, fp
 801e0bc:	4303      	orrs	r3, r0
 801e0be:	9300      	str	r3, [sp, #0]
 801e0c0:	f10b 0b04 	add.w	fp, fp, #4
 801e0c4:	9b03      	ldr	r3, [sp, #12]
 801e0c6:	e00d      	b.n	801e0e4 <__gethex+0x27c>
 801e0c8:	9b03      	ldr	r3, [sp, #12]
 801e0ca:	9a06      	ldr	r2, [sp, #24]
 801e0cc:	4413      	add	r3, r2
 801e0ce:	42bb      	cmp	r3, r7
 801e0d0:	d3e0      	bcc.n	801e094 <__gethex+0x22c>
 801e0d2:	4618      	mov	r0, r3
 801e0d4:	9901      	ldr	r1, [sp, #4]
 801e0d6:	9307      	str	r3, [sp, #28]
 801e0d8:	4652      	mov	r2, sl
 801e0da:	f7fd ff15 	bl	801bf08 <strncmp>
 801e0de:	9b07      	ldr	r3, [sp, #28]
 801e0e0:	2800      	cmp	r0, #0
 801e0e2:	d1d7      	bne.n	801e094 <__gethex+0x22c>
 801e0e4:	461e      	mov	r6, r3
 801e0e6:	e78b      	b.n	801e000 <__gethex+0x198>
 801e0e8:	f04f 0a03 	mov.w	sl, #3
 801e0ec:	e7b8      	b.n	801e060 <__gethex+0x1f8>
 801e0ee:	da0a      	bge.n	801e106 <__gethex+0x29e>
 801e0f0:	1a37      	subs	r7, r6, r0
 801e0f2:	4621      	mov	r1, r4
 801e0f4:	ee18 0a10 	vmov	r0, s16
 801e0f8:	463a      	mov	r2, r7
 801e0fa:	f000 fca3 	bl	801ea44 <__lshift>
 801e0fe:	1bed      	subs	r5, r5, r7
 801e100:	4604      	mov	r4, r0
 801e102:	f100 0914 	add.w	r9, r0, #20
 801e106:	f04f 0a00 	mov.w	sl, #0
 801e10a:	e7ae      	b.n	801e06a <__gethex+0x202>
 801e10c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e110:	42a8      	cmp	r0, r5
 801e112:	dd72      	ble.n	801e1fa <__gethex+0x392>
 801e114:	1b45      	subs	r5, r0, r5
 801e116:	42ae      	cmp	r6, r5
 801e118:	dc36      	bgt.n	801e188 <__gethex+0x320>
 801e11a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e11e:	2b02      	cmp	r3, #2
 801e120:	d02a      	beq.n	801e178 <__gethex+0x310>
 801e122:	2b03      	cmp	r3, #3
 801e124:	d02c      	beq.n	801e180 <__gethex+0x318>
 801e126:	2b01      	cmp	r3, #1
 801e128:	d115      	bne.n	801e156 <__gethex+0x2ee>
 801e12a:	42ae      	cmp	r6, r5
 801e12c:	d113      	bne.n	801e156 <__gethex+0x2ee>
 801e12e:	2e01      	cmp	r6, #1
 801e130:	d10b      	bne.n	801e14a <__gethex+0x2e2>
 801e132:	9a04      	ldr	r2, [sp, #16]
 801e134:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e138:	6013      	str	r3, [r2, #0]
 801e13a:	2301      	movs	r3, #1
 801e13c:	6123      	str	r3, [r4, #16]
 801e13e:	f8c9 3000 	str.w	r3, [r9]
 801e142:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e144:	2762      	movs	r7, #98	; 0x62
 801e146:	601c      	str	r4, [r3, #0]
 801e148:	e723      	b.n	801df92 <__gethex+0x12a>
 801e14a:	1e71      	subs	r1, r6, #1
 801e14c:	4620      	mov	r0, r4
 801e14e:	f000 feb8 	bl	801eec2 <__any_on>
 801e152:	2800      	cmp	r0, #0
 801e154:	d1ed      	bne.n	801e132 <__gethex+0x2ca>
 801e156:	ee18 0a10 	vmov	r0, s16
 801e15a:	4621      	mov	r1, r4
 801e15c:	f000 fa56 	bl	801e60c <_Bfree>
 801e160:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e162:	2300      	movs	r3, #0
 801e164:	6013      	str	r3, [r2, #0]
 801e166:	2750      	movs	r7, #80	; 0x50
 801e168:	e713      	b.n	801df92 <__gethex+0x12a>
 801e16a:	bf00      	nop
 801e16c:	08022c40 	.word	0x08022c40
 801e170:	08022b60 	.word	0x08022b60
 801e174:	08022bd4 	.word	0x08022bd4
 801e178:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e17a:	2b00      	cmp	r3, #0
 801e17c:	d1eb      	bne.n	801e156 <__gethex+0x2ee>
 801e17e:	e7d8      	b.n	801e132 <__gethex+0x2ca>
 801e180:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e182:	2b00      	cmp	r3, #0
 801e184:	d1d5      	bne.n	801e132 <__gethex+0x2ca>
 801e186:	e7e6      	b.n	801e156 <__gethex+0x2ee>
 801e188:	1e6f      	subs	r7, r5, #1
 801e18a:	f1ba 0f00 	cmp.w	sl, #0
 801e18e:	d131      	bne.n	801e1f4 <__gethex+0x38c>
 801e190:	b127      	cbz	r7, 801e19c <__gethex+0x334>
 801e192:	4639      	mov	r1, r7
 801e194:	4620      	mov	r0, r4
 801e196:	f000 fe94 	bl	801eec2 <__any_on>
 801e19a:	4682      	mov	sl, r0
 801e19c:	117b      	asrs	r3, r7, #5
 801e19e:	2101      	movs	r1, #1
 801e1a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e1a4:	f007 071f 	and.w	r7, r7, #31
 801e1a8:	fa01 f707 	lsl.w	r7, r1, r7
 801e1ac:	421f      	tst	r7, r3
 801e1ae:	4629      	mov	r1, r5
 801e1b0:	4620      	mov	r0, r4
 801e1b2:	bf18      	it	ne
 801e1b4:	f04a 0a02 	orrne.w	sl, sl, #2
 801e1b8:	1b76      	subs	r6, r6, r5
 801e1ba:	f7ff fdee 	bl	801dd9a <rshift>
 801e1be:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e1c2:	2702      	movs	r7, #2
 801e1c4:	f1ba 0f00 	cmp.w	sl, #0
 801e1c8:	d048      	beq.n	801e25c <__gethex+0x3f4>
 801e1ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e1ce:	2b02      	cmp	r3, #2
 801e1d0:	d015      	beq.n	801e1fe <__gethex+0x396>
 801e1d2:	2b03      	cmp	r3, #3
 801e1d4:	d017      	beq.n	801e206 <__gethex+0x39e>
 801e1d6:	2b01      	cmp	r3, #1
 801e1d8:	d109      	bne.n	801e1ee <__gethex+0x386>
 801e1da:	f01a 0f02 	tst.w	sl, #2
 801e1de:	d006      	beq.n	801e1ee <__gethex+0x386>
 801e1e0:	f8d9 0000 	ldr.w	r0, [r9]
 801e1e4:	ea4a 0a00 	orr.w	sl, sl, r0
 801e1e8:	f01a 0f01 	tst.w	sl, #1
 801e1ec:	d10e      	bne.n	801e20c <__gethex+0x3a4>
 801e1ee:	f047 0710 	orr.w	r7, r7, #16
 801e1f2:	e033      	b.n	801e25c <__gethex+0x3f4>
 801e1f4:	f04f 0a01 	mov.w	sl, #1
 801e1f8:	e7d0      	b.n	801e19c <__gethex+0x334>
 801e1fa:	2701      	movs	r7, #1
 801e1fc:	e7e2      	b.n	801e1c4 <__gethex+0x35c>
 801e1fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e200:	f1c3 0301 	rsb	r3, r3, #1
 801e204:	9315      	str	r3, [sp, #84]	; 0x54
 801e206:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e208:	2b00      	cmp	r3, #0
 801e20a:	d0f0      	beq.n	801e1ee <__gethex+0x386>
 801e20c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e210:	f104 0314 	add.w	r3, r4, #20
 801e214:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e218:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e21c:	f04f 0c00 	mov.w	ip, #0
 801e220:	4618      	mov	r0, r3
 801e222:	f853 2b04 	ldr.w	r2, [r3], #4
 801e226:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801e22a:	d01c      	beq.n	801e266 <__gethex+0x3fe>
 801e22c:	3201      	adds	r2, #1
 801e22e:	6002      	str	r2, [r0, #0]
 801e230:	2f02      	cmp	r7, #2
 801e232:	f104 0314 	add.w	r3, r4, #20
 801e236:	d13f      	bne.n	801e2b8 <__gethex+0x450>
 801e238:	f8d8 2000 	ldr.w	r2, [r8]
 801e23c:	3a01      	subs	r2, #1
 801e23e:	42b2      	cmp	r2, r6
 801e240:	d10a      	bne.n	801e258 <__gethex+0x3f0>
 801e242:	1171      	asrs	r1, r6, #5
 801e244:	2201      	movs	r2, #1
 801e246:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e24a:	f006 061f 	and.w	r6, r6, #31
 801e24e:	fa02 f606 	lsl.w	r6, r2, r6
 801e252:	421e      	tst	r6, r3
 801e254:	bf18      	it	ne
 801e256:	4617      	movne	r7, r2
 801e258:	f047 0720 	orr.w	r7, r7, #32
 801e25c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e25e:	601c      	str	r4, [r3, #0]
 801e260:	9b04      	ldr	r3, [sp, #16]
 801e262:	601d      	str	r5, [r3, #0]
 801e264:	e695      	b.n	801df92 <__gethex+0x12a>
 801e266:	4299      	cmp	r1, r3
 801e268:	f843 cc04 	str.w	ip, [r3, #-4]
 801e26c:	d8d8      	bhi.n	801e220 <__gethex+0x3b8>
 801e26e:	68a3      	ldr	r3, [r4, #8]
 801e270:	459b      	cmp	fp, r3
 801e272:	db19      	blt.n	801e2a8 <__gethex+0x440>
 801e274:	6861      	ldr	r1, [r4, #4]
 801e276:	ee18 0a10 	vmov	r0, s16
 801e27a:	3101      	adds	r1, #1
 801e27c:	f000 f986 	bl	801e58c <_Balloc>
 801e280:	4681      	mov	r9, r0
 801e282:	b918      	cbnz	r0, 801e28c <__gethex+0x424>
 801e284:	4b1a      	ldr	r3, [pc, #104]	; (801e2f0 <__gethex+0x488>)
 801e286:	4602      	mov	r2, r0
 801e288:	2184      	movs	r1, #132	; 0x84
 801e28a:	e6a8      	b.n	801dfde <__gethex+0x176>
 801e28c:	6922      	ldr	r2, [r4, #16]
 801e28e:	3202      	adds	r2, #2
 801e290:	f104 010c 	add.w	r1, r4, #12
 801e294:	0092      	lsls	r2, r2, #2
 801e296:	300c      	adds	r0, #12
 801e298:	f7fc fe86 	bl	801afa8 <memcpy>
 801e29c:	4621      	mov	r1, r4
 801e29e:	ee18 0a10 	vmov	r0, s16
 801e2a2:	f000 f9b3 	bl	801e60c <_Bfree>
 801e2a6:	464c      	mov	r4, r9
 801e2a8:	6923      	ldr	r3, [r4, #16]
 801e2aa:	1c5a      	adds	r2, r3, #1
 801e2ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e2b0:	6122      	str	r2, [r4, #16]
 801e2b2:	2201      	movs	r2, #1
 801e2b4:	615a      	str	r2, [r3, #20]
 801e2b6:	e7bb      	b.n	801e230 <__gethex+0x3c8>
 801e2b8:	6922      	ldr	r2, [r4, #16]
 801e2ba:	455a      	cmp	r2, fp
 801e2bc:	dd0b      	ble.n	801e2d6 <__gethex+0x46e>
 801e2be:	2101      	movs	r1, #1
 801e2c0:	4620      	mov	r0, r4
 801e2c2:	f7ff fd6a 	bl	801dd9a <rshift>
 801e2c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e2ca:	3501      	adds	r5, #1
 801e2cc:	42ab      	cmp	r3, r5
 801e2ce:	f6ff aed0 	blt.w	801e072 <__gethex+0x20a>
 801e2d2:	2701      	movs	r7, #1
 801e2d4:	e7c0      	b.n	801e258 <__gethex+0x3f0>
 801e2d6:	f016 061f 	ands.w	r6, r6, #31
 801e2da:	d0fa      	beq.n	801e2d2 <__gethex+0x46a>
 801e2dc:	449a      	add	sl, r3
 801e2de:	f1c6 0620 	rsb	r6, r6, #32
 801e2e2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801e2e6:	f000 fa47 	bl	801e778 <__hi0bits>
 801e2ea:	42b0      	cmp	r0, r6
 801e2ec:	dbe7      	blt.n	801e2be <__gethex+0x456>
 801e2ee:	e7f0      	b.n	801e2d2 <__gethex+0x46a>
 801e2f0:	08022b60 	.word	0x08022b60

0801e2f4 <L_shift>:
 801e2f4:	f1c2 0208 	rsb	r2, r2, #8
 801e2f8:	0092      	lsls	r2, r2, #2
 801e2fa:	b570      	push	{r4, r5, r6, lr}
 801e2fc:	f1c2 0620 	rsb	r6, r2, #32
 801e300:	6843      	ldr	r3, [r0, #4]
 801e302:	6804      	ldr	r4, [r0, #0]
 801e304:	fa03 f506 	lsl.w	r5, r3, r6
 801e308:	432c      	orrs	r4, r5
 801e30a:	40d3      	lsrs	r3, r2
 801e30c:	6004      	str	r4, [r0, #0]
 801e30e:	f840 3f04 	str.w	r3, [r0, #4]!
 801e312:	4288      	cmp	r0, r1
 801e314:	d3f4      	bcc.n	801e300 <L_shift+0xc>
 801e316:	bd70      	pop	{r4, r5, r6, pc}

0801e318 <__match>:
 801e318:	b530      	push	{r4, r5, lr}
 801e31a:	6803      	ldr	r3, [r0, #0]
 801e31c:	3301      	adds	r3, #1
 801e31e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e322:	b914      	cbnz	r4, 801e32a <__match+0x12>
 801e324:	6003      	str	r3, [r0, #0]
 801e326:	2001      	movs	r0, #1
 801e328:	bd30      	pop	{r4, r5, pc}
 801e32a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e32e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e332:	2d19      	cmp	r5, #25
 801e334:	bf98      	it	ls
 801e336:	3220      	addls	r2, #32
 801e338:	42a2      	cmp	r2, r4
 801e33a:	d0f0      	beq.n	801e31e <__match+0x6>
 801e33c:	2000      	movs	r0, #0
 801e33e:	e7f3      	b.n	801e328 <__match+0x10>

0801e340 <__hexnan>:
 801e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e344:	680b      	ldr	r3, [r1, #0]
 801e346:	6801      	ldr	r1, [r0, #0]
 801e348:	115e      	asrs	r6, r3, #5
 801e34a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e34e:	f013 031f 	ands.w	r3, r3, #31
 801e352:	b087      	sub	sp, #28
 801e354:	bf18      	it	ne
 801e356:	3604      	addne	r6, #4
 801e358:	2500      	movs	r5, #0
 801e35a:	1f37      	subs	r7, r6, #4
 801e35c:	4682      	mov	sl, r0
 801e35e:	4690      	mov	r8, r2
 801e360:	9301      	str	r3, [sp, #4]
 801e362:	f846 5c04 	str.w	r5, [r6, #-4]
 801e366:	46b9      	mov	r9, r7
 801e368:	463c      	mov	r4, r7
 801e36a:	9502      	str	r5, [sp, #8]
 801e36c:	46ab      	mov	fp, r5
 801e36e:	784a      	ldrb	r2, [r1, #1]
 801e370:	1c4b      	adds	r3, r1, #1
 801e372:	9303      	str	r3, [sp, #12]
 801e374:	b342      	cbz	r2, 801e3c8 <__hexnan+0x88>
 801e376:	4610      	mov	r0, r2
 801e378:	9105      	str	r1, [sp, #20]
 801e37a:	9204      	str	r2, [sp, #16]
 801e37c:	f7ff fd5f 	bl	801de3e <__hexdig_fun>
 801e380:	2800      	cmp	r0, #0
 801e382:	d14f      	bne.n	801e424 <__hexnan+0xe4>
 801e384:	9a04      	ldr	r2, [sp, #16]
 801e386:	9905      	ldr	r1, [sp, #20]
 801e388:	2a20      	cmp	r2, #32
 801e38a:	d818      	bhi.n	801e3be <__hexnan+0x7e>
 801e38c:	9b02      	ldr	r3, [sp, #8]
 801e38e:	459b      	cmp	fp, r3
 801e390:	dd13      	ble.n	801e3ba <__hexnan+0x7a>
 801e392:	454c      	cmp	r4, r9
 801e394:	d206      	bcs.n	801e3a4 <__hexnan+0x64>
 801e396:	2d07      	cmp	r5, #7
 801e398:	dc04      	bgt.n	801e3a4 <__hexnan+0x64>
 801e39a:	462a      	mov	r2, r5
 801e39c:	4649      	mov	r1, r9
 801e39e:	4620      	mov	r0, r4
 801e3a0:	f7ff ffa8 	bl	801e2f4 <L_shift>
 801e3a4:	4544      	cmp	r4, r8
 801e3a6:	d950      	bls.n	801e44a <__hexnan+0x10a>
 801e3a8:	2300      	movs	r3, #0
 801e3aa:	f1a4 0904 	sub.w	r9, r4, #4
 801e3ae:	f844 3c04 	str.w	r3, [r4, #-4]
 801e3b2:	f8cd b008 	str.w	fp, [sp, #8]
 801e3b6:	464c      	mov	r4, r9
 801e3b8:	461d      	mov	r5, r3
 801e3ba:	9903      	ldr	r1, [sp, #12]
 801e3bc:	e7d7      	b.n	801e36e <__hexnan+0x2e>
 801e3be:	2a29      	cmp	r2, #41	; 0x29
 801e3c0:	d156      	bne.n	801e470 <__hexnan+0x130>
 801e3c2:	3102      	adds	r1, #2
 801e3c4:	f8ca 1000 	str.w	r1, [sl]
 801e3c8:	f1bb 0f00 	cmp.w	fp, #0
 801e3cc:	d050      	beq.n	801e470 <__hexnan+0x130>
 801e3ce:	454c      	cmp	r4, r9
 801e3d0:	d206      	bcs.n	801e3e0 <__hexnan+0xa0>
 801e3d2:	2d07      	cmp	r5, #7
 801e3d4:	dc04      	bgt.n	801e3e0 <__hexnan+0xa0>
 801e3d6:	462a      	mov	r2, r5
 801e3d8:	4649      	mov	r1, r9
 801e3da:	4620      	mov	r0, r4
 801e3dc:	f7ff ff8a 	bl	801e2f4 <L_shift>
 801e3e0:	4544      	cmp	r4, r8
 801e3e2:	d934      	bls.n	801e44e <__hexnan+0x10e>
 801e3e4:	f1a8 0204 	sub.w	r2, r8, #4
 801e3e8:	4623      	mov	r3, r4
 801e3ea:	f853 1b04 	ldr.w	r1, [r3], #4
 801e3ee:	f842 1f04 	str.w	r1, [r2, #4]!
 801e3f2:	429f      	cmp	r7, r3
 801e3f4:	d2f9      	bcs.n	801e3ea <__hexnan+0xaa>
 801e3f6:	1b3b      	subs	r3, r7, r4
 801e3f8:	f023 0303 	bic.w	r3, r3, #3
 801e3fc:	3304      	adds	r3, #4
 801e3fe:	3401      	adds	r4, #1
 801e400:	3e03      	subs	r6, #3
 801e402:	42b4      	cmp	r4, r6
 801e404:	bf88      	it	hi
 801e406:	2304      	movhi	r3, #4
 801e408:	4443      	add	r3, r8
 801e40a:	2200      	movs	r2, #0
 801e40c:	f843 2b04 	str.w	r2, [r3], #4
 801e410:	429f      	cmp	r7, r3
 801e412:	d2fb      	bcs.n	801e40c <__hexnan+0xcc>
 801e414:	683b      	ldr	r3, [r7, #0]
 801e416:	b91b      	cbnz	r3, 801e420 <__hexnan+0xe0>
 801e418:	4547      	cmp	r7, r8
 801e41a:	d127      	bne.n	801e46c <__hexnan+0x12c>
 801e41c:	2301      	movs	r3, #1
 801e41e:	603b      	str	r3, [r7, #0]
 801e420:	2005      	movs	r0, #5
 801e422:	e026      	b.n	801e472 <__hexnan+0x132>
 801e424:	3501      	adds	r5, #1
 801e426:	2d08      	cmp	r5, #8
 801e428:	f10b 0b01 	add.w	fp, fp, #1
 801e42c:	dd06      	ble.n	801e43c <__hexnan+0xfc>
 801e42e:	4544      	cmp	r4, r8
 801e430:	d9c3      	bls.n	801e3ba <__hexnan+0x7a>
 801e432:	2300      	movs	r3, #0
 801e434:	f844 3c04 	str.w	r3, [r4, #-4]
 801e438:	2501      	movs	r5, #1
 801e43a:	3c04      	subs	r4, #4
 801e43c:	6822      	ldr	r2, [r4, #0]
 801e43e:	f000 000f 	and.w	r0, r0, #15
 801e442:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801e446:	6022      	str	r2, [r4, #0]
 801e448:	e7b7      	b.n	801e3ba <__hexnan+0x7a>
 801e44a:	2508      	movs	r5, #8
 801e44c:	e7b5      	b.n	801e3ba <__hexnan+0x7a>
 801e44e:	9b01      	ldr	r3, [sp, #4]
 801e450:	2b00      	cmp	r3, #0
 801e452:	d0df      	beq.n	801e414 <__hexnan+0xd4>
 801e454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e458:	f1c3 0320 	rsb	r3, r3, #32
 801e45c:	fa22 f303 	lsr.w	r3, r2, r3
 801e460:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e464:	401a      	ands	r2, r3
 801e466:	f846 2c04 	str.w	r2, [r6, #-4]
 801e46a:	e7d3      	b.n	801e414 <__hexnan+0xd4>
 801e46c:	3f04      	subs	r7, #4
 801e46e:	e7d1      	b.n	801e414 <__hexnan+0xd4>
 801e470:	2004      	movs	r0, #4
 801e472:	b007      	add	sp, #28
 801e474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e478 <_localeconv_r>:
 801e478:	4800      	ldr	r0, [pc, #0]	; (801e47c <_localeconv_r+0x4>)
 801e47a:	4770      	bx	lr
 801e47c:	24003994 	.word	0x24003994

0801e480 <__retarget_lock_init_recursive>:
 801e480:	4770      	bx	lr

0801e482 <__retarget_lock_acquire_recursive>:
 801e482:	4770      	bx	lr

0801e484 <__retarget_lock_release_recursive>:
 801e484:	4770      	bx	lr

0801e486 <__swhatbuf_r>:
 801e486:	b570      	push	{r4, r5, r6, lr}
 801e488:	460e      	mov	r6, r1
 801e48a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e48e:	2900      	cmp	r1, #0
 801e490:	b096      	sub	sp, #88	; 0x58
 801e492:	4614      	mov	r4, r2
 801e494:	461d      	mov	r5, r3
 801e496:	da07      	bge.n	801e4a8 <__swhatbuf_r+0x22>
 801e498:	2300      	movs	r3, #0
 801e49a:	602b      	str	r3, [r5, #0]
 801e49c:	89b3      	ldrh	r3, [r6, #12]
 801e49e:	061a      	lsls	r2, r3, #24
 801e4a0:	d410      	bmi.n	801e4c4 <__swhatbuf_r+0x3e>
 801e4a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e4a6:	e00e      	b.n	801e4c6 <__swhatbuf_r+0x40>
 801e4a8:	466a      	mov	r2, sp
 801e4aa:	f001 f873 	bl	801f594 <_fstat_r>
 801e4ae:	2800      	cmp	r0, #0
 801e4b0:	dbf2      	blt.n	801e498 <__swhatbuf_r+0x12>
 801e4b2:	9a01      	ldr	r2, [sp, #4]
 801e4b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e4b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e4bc:	425a      	negs	r2, r3
 801e4be:	415a      	adcs	r2, r3
 801e4c0:	602a      	str	r2, [r5, #0]
 801e4c2:	e7ee      	b.n	801e4a2 <__swhatbuf_r+0x1c>
 801e4c4:	2340      	movs	r3, #64	; 0x40
 801e4c6:	2000      	movs	r0, #0
 801e4c8:	6023      	str	r3, [r4, #0]
 801e4ca:	b016      	add	sp, #88	; 0x58
 801e4cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e4d0 <__smakebuf_r>:
 801e4d0:	898b      	ldrh	r3, [r1, #12]
 801e4d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e4d4:	079d      	lsls	r5, r3, #30
 801e4d6:	4606      	mov	r6, r0
 801e4d8:	460c      	mov	r4, r1
 801e4da:	d507      	bpl.n	801e4ec <__smakebuf_r+0x1c>
 801e4dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e4e0:	6023      	str	r3, [r4, #0]
 801e4e2:	6123      	str	r3, [r4, #16]
 801e4e4:	2301      	movs	r3, #1
 801e4e6:	6163      	str	r3, [r4, #20]
 801e4e8:	b002      	add	sp, #8
 801e4ea:	bd70      	pop	{r4, r5, r6, pc}
 801e4ec:	ab01      	add	r3, sp, #4
 801e4ee:	466a      	mov	r2, sp
 801e4f0:	f7ff ffc9 	bl	801e486 <__swhatbuf_r>
 801e4f4:	9900      	ldr	r1, [sp, #0]
 801e4f6:	4605      	mov	r5, r0
 801e4f8:	4630      	mov	r0, r6
 801e4fa:	f7fc fdd5 	bl	801b0a8 <_malloc_r>
 801e4fe:	b948      	cbnz	r0, 801e514 <__smakebuf_r+0x44>
 801e500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e504:	059a      	lsls	r2, r3, #22
 801e506:	d4ef      	bmi.n	801e4e8 <__smakebuf_r+0x18>
 801e508:	f023 0303 	bic.w	r3, r3, #3
 801e50c:	f043 0302 	orr.w	r3, r3, #2
 801e510:	81a3      	strh	r3, [r4, #12]
 801e512:	e7e3      	b.n	801e4dc <__smakebuf_r+0xc>
 801e514:	4b0d      	ldr	r3, [pc, #52]	; (801e54c <__smakebuf_r+0x7c>)
 801e516:	62b3      	str	r3, [r6, #40]	; 0x28
 801e518:	89a3      	ldrh	r3, [r4, #12]
 801e51a:	6020      	str	r0, [r4, #0]
 801e51c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e520:	81a3      	strh	r3, [r4, #12]
 801e522:	9b00      	ldr	r3, [sp, #0]
 801e524:	6163      	str	r3, [r4, #20]
 801e526:	9b01      	ldr	r3, [sp, #4]
 801e528:	6120      	str	r0, [r4, #16]
 801e52a:	b15b      	cbz	r3, 801e544 <__smakebuf_r+0x74>
 801e52c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e530:	4630      	mov	r0, r6
 801e532:	f001 f841 	bl	801f5b8 <_isatty_r>
 801e536:	b128      	cbz	r0, 801e544 <__smakebuf_r+0x74>
 801e538:	89a3      	ldrh	r3, [r4, #12]
 801e53a:	f023 0303 	bic.w	r3, r3, #3
 801e53e:	f043 0301 	orr.w	r3, r3, #1
 801e542:	81a3      	strh	r3, [r4, #12]
 801e544:	89a0      	ldrh	r0, [r4, #12]
 801e546:	4305      	orrs	r5, r0
 801e548:	81a5      	strh	r5, [r4, #12]
 801e54a:	e7cd      	b.n	801e4e8 <__smakebuf_r+0x18>
 801e54c:	0801dbd5 	.word	0x0801dbd5

0801e550 <__ascii_mbtowc>:
 801e550:	b082      	sub	sp, #8
 801e552:	b901      	cbnz	r1, 801e556 <__ascii_mbtowc+0x6>
 801e554:	a901      	add	r1, sp, #4
 801e556:	b142      	cbz	r2, 801e56a <__ascii_mbtowc+0x1a>
 801e558:	b14b      	cbz	r3, 801e56e <__ascii_mbtowc+0x1e>
 801e55a:	7813      	ldrb	r3, [r2, #0]
 801e55c:	600b      	str	r3, [r1, #0]
 801e55e:	7812      	ldrb	r2, [r2, #0]
 801e560:	1e10      	subs	r0, r2, #0
 801e562:	bf18      	it	ne
 801e564:	2001      	movne	r0, #1
 801e566:	b002      	add	sp, #8
 801e568:	4770      	bx	lr
 801e56a:	4610      	mov	r0, r2
 801e56c:	e7fb      	b.n	801e566 <__ascii_mbtowc+0x16>
 801e56e:	f06f 0001 	mvn.w	r0, #1
 801e572:	e7f8      	b.n	801e566 <__ascii_mbtowc+0x16>

0801e574 <__malloc_lock>:
 801e574:	4801      	ldr	r0, [pc, #4]	; (801e57c <__malloc_lock+0x8>)
 801e576:	f7ff bf84 	b.w	801e482 <__retarget_lock_acquire_recursive>
 801e57a:	bf00      	nop
 801e57c:	24009a70 	.word	0x24009a70

0801e580 <__malloc_unlock>:
 801e580:	4801      	ldr	r0, [pc, #4]	; (801e588 <__malloc_unlock+0x8>)
 801e582:	f7ff bf7f 	b.w	801e484 <__retarget_lock_release_recursive>
 801e586:	bf00      	nop
 801e588:	24009a70 	.word	0x24009a70

0801e58c <_Balloc>:
 801e58c:	b570      	push	{r4, r5, r6, lr}
 801e58e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e590:	4604      	mov	r4, r0
 801e592:	460d      	mov	r5, r1
 801e594:	b976      	cbnz	r6, 801e5b4 <_Balloc+0x28>
 801e596:	2010      	movs	r0, #16
 801e598:	f7fc fcf0 	bl	801af7c <malloc>
 801e59c:	4602      	mov	r2, r0
 801e59e:	6260      	str	r0, [r4, #36]	; 0x24
 801e5a0:	b920      	cbnz	r0, 801e5ac <_Balloc+0x20>
 801e5a2:	4b18      	ldr	r3, [pc, #96]	; (801e604 <_Balloc+0x78>)
 801e5a4:	4818      	ldr	r0, [pc, #96]	; (801e608 <_Balloc+0x7c>)
 801e5a6:	2166      	movs	r1, #102	; 0x66
 801e5a8:	f7fe fbfc 	bl	801cda4 <__assert_func>
 801e5ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e5b0:	6006      	str	r6, [r0, #0]
 801e5b2:	60c6      	str	r6, [r0, #12]
 801e5b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e5b6:	68f3      	ldr	r3, [r6, #12]
 801e5b8:	b183      	cbz	r3, 801e5dc <_Balloc+0x50>
 801e5ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e5bc:	68db      	ldr	r3, [r3, #12]
 801e5be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e5c2:	b9b8      	cbnz	r0, 801e5f4 <_Balloc+0x68>
 801e5c4:	2101      	movs	r1, #1
 801e5c6:	fa01 f605 	lsl.w	r6, r1, r5
 801e5ca:	1d72      	adds	r2, r6, #5
 801e5cc:	0092      	lsls	r2, r2, #2
 801e5ce:	4620      	mov	r0, r4
 801e5d0:	f000 fc98 	bl	801ef04 <_calloc_r>
 801e5d4:	b160      	cbz	r0, 801e5f0 <_Balloc+0x64>
 801e5d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e5da:	e00e      	b.n	801e5fa <_Balloc+0x6e>
 801e5dc:	2221      	movs	r2, #33	; 0x21
 801e5de:	2104      	movs	r1, #4
 801e5e0:	4620      	mov	r0, r4
 801e5e2:	f000 fc8f 	bl	801ef04 <_calloc_r>
 801e5e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e5e8:	60f0      	str	r0, [r6, #12]
 801e5ea:	68db      	ldr	r3, [r3, #12]
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	d1e4      	bne.n	801e5ba <_Balloc+0x2e>
 801e5f0:	2000      	movs	r0, #0
 801e5f2:	bd70      	pop	{r4, r5, r6, pc}
 801e5f4:	6802      	ldr	r2, [r0, #0]
 801e5f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e5fa:	2300      	movs	r3, #0
 801e5fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e600:	e7f7      	b.n	801e5f2 <_Balloc+0x66>
 801e602:	bf00      	nop
 801e604:	080229ed 	.word	0x080229ed
 801e608:	08022c54 	.word	0x08022c54

0801e60c <_Bfree>:
 801e60c:	b570      	push	{r4, r5, r6, lr}
 801e60e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e610:	4605      	mov	r5, r0
 801e612:	460c      	mov	r4, r1
 801e614:	b976      	cbnz	r6, 801e634 <_Bfree+0x28>
 801e616:	2010      	movs	r0, #16
 801e618:	f7fc fcb0 	bl	801af7c <malloc>
 801e61c:	4602      	mov	r2, r0
 801e61e:	6268      	str	r0, [r5, #36]	; 0x24
 801e620:	b920      	cbnz	r0, 801e62c <_Bfree+0x20>
 801e622:	4b09      	ldr	r3, [pc, #36]	; (801e648 <_Bfree+0x3c>)
 801e624:	4809      	ldr	r0, [pc, #36]	; (801e64c <_Bfree+0x40>)
 801e626:	218a      	movs	r1, #138	; 0x8a
 801e628:	f7fe fbbc 	bl	801cda4 <__assert_func>
 801e62c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e630:	6006      	str	r6, [r0, #0]
 801e632:	60c6      	str	r6, [r0, #12]
 801e634:	b13c      	cbz	r4, 801e646 <_Bfree+0x3a>
 801e636:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e638:	6862      	ldr	r2, [r4, #4]
 801e63a:	68db      	ldr	r3, [r3, #12]
 801e63c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e640:	6021      	str	r1, [r4, #0]
 801e642:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e646:	bd70      	pop	{r4, r5, r6, pc}
 801e648:	080229ed 	.word	0x080229ed
 801e64c:	08022c54 	.word	0x08022c54

0801e650 <__multadd>:
 801e650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e654:	690e      	ldr	r6, [r1, #16]
 801e656:	4607      	mov	r7, r0
 801e658:	4698      	mov	r8, r3
 801e65a:	460c      	mov	r4, r1
 801e65c:	f101 0014 	add.w	r0, r1, #20
 801e660:	2300      	movs	r3, #0
 801e662:	6805      	ldr	r5, [r0, #0]
 801e664:	b2a9      	uxth	r1, r5
 801e666:	fb02 8101 	mla	r1, r2, r1, r8
 801e66a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801e66e:	0c2d      	lsrs	r5, r5, #16
 801e670:	fb02 c505 	mla	r5, r2, r5, ip
 801e674:	b289      	uxth	r1, r1
 801e676:	3301      	adds	r3, #1
 801e678:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801e67c:	429e      	cmp	r6, r3
 801e67e:	f840 1b04 	str.w	r1, [r0], #4
 801e682:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801e686:	dcec      	bgt.n	801e662 <__multadd+0x12>
 801e688:	f1b8 0f00 	cmp.w	r8, #0
 801e68c:	d022      	beq.n	801e6d4 <__multadd+0x84>
 801e68e:	68a3      	ldr	r3, [r4, #8]
 801e690:	42b3      	cmp	r3, r6
 801e692:	dc19      	bgt.n	801e6c8 <__multadd+0x78>
 801e694:	6861      	ldr	r1, [r4, #4]
 801e696:	4638      	mov	r0, r7
 801e698:	3101      	adds	r1, #1
 801e69a:	f7ff ff77 	bl	801e58c <_Balloc>
 801e69e:	4605      	mov	r5, r0
 801e6a0:	b928      	cbnz	r0, 801e6ae <__multadd+0x5e>
 801e6a2:	4602      	mov	r2, r0
 801e6a4:	4b0d      	ldr	r3, [pc, #52]	; (801e6dc <__multadd+0x8c>)
 801e6a6:	480e      	ldr	r0, [pc, #56]	; (801e6e0 <__multadd+0x90>)
 801e6a8:	21b5      	movs	r1, #181	; 0xb5
 801e6aa:	f7fe fb7b 	bl	801cda4 <__assert_func>
 801e6ae:	6922      	ldr	r2, [r4, #16]
 801e6b0:	3202      	adds	r2, #2
 801e6b2:	f104 010c 	add.w	r1, r4, #12
 801e6b6:	0092      	lsls	r2, r2, #2
 801e6b8:	300c      	adds	r0, #12
 801e6ba:	f7fc fc75 	bl	801afa8 <memcpy>
 801e6be:	4621      	mov	r1, r4
 801e6c0:	4638      	mov	r0, r7
 801e6c2:	f7ff ffa3 	bl	801e60c <_Bfree>
 801e6c6:	462c      	mov	r4, r5
 801e6c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801e6cc:	3601      	adds	r6, #1
 801e6ce:	f8c3 8014 	str.w	r8, [r3, #20]
 801e6d2:	6126      	str	r6, [r4, #16]
 801e6d4:	4620      	mov	r0, r4
 801e6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e6da:	bf00      	nop
 801e6dc:	08022b60 	.word	0x08022b60
 801e6e0:	08022c54 	.word	0x08022c54

0801e6e4 <__s2b>:
 801e6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e6e8:	460c      	mov	r4, r1
 801e6ea:	4615      	mov	r5, r2
 801e6ec:	461f      	mov	r7, r3
 801e6ee:	2209      	movs	r2, #9
 801e6f0:	3308      	adds	r3, #8
 801e6f2:	4606      	mov	r6, r0
 801e6f4:	fb93 f3f2 	sdiv	r3, r3, r2
 801e6f8:	2100      	movs	r1, #0
 801e6fa:	2201      	movs	r2, #1
 801e6fc:	429a      	cmp	r2, r3
 801e6fe:	db09      	blt.n	801e714 <__s2b+0x30>
 801e700:	4630      	mov	r0, r6
 801e702:	f7ff ff43 	bl	801e58c <_Balloc>
 801e706:	b940      	cbnz	r0, 801e71a <__s2b+0x36>
 801e708:	4602      	mov	r2, r0
 801e70a:	4b19      	ldr	r3, [pc, #100]	; (801e770 <__s2b+0x8c>)
 801e70c:	4819      	ldr	r0, [pc, #100]	; (801e774 <__s2b+0x90>)
 801e70e:	21ce      	movs	r1, #206	; 0xce
 801e710:	f7fe fb48 	bl	801cda4 <__assert_func>
 801e714:	0052      	lsls	r2, r2, #1
 801e716:	3101      	adds	r1, #1
 801e718:	e7f0      	b.n	801e6fc <__s2b+0x18>
 801e71a:	9b08      	ldr	r3, [sp, #32]
 801e71c:	6143      	str	r3, [r0, #20]
 801e71e:	2d09      	cmp	r5, #9
 801e720:	f04f 0301 	mov.w	r3, #1
 801e724:	6103      	str	r3, [r0, #16]
 801e726:	dd16      	ble.n	801e756 <__s2b+0x72>
 801e728:	f104 0909 	add.w	r9, r4, #9
 801e72c:	46c8      	mov	r8, r9
 801e72e:	442c      	add	r4, r5
 801e730:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e734:	4601      	mov	r1, r0
 801e736:	3b30      	subs	r3, #48	; 0x30
 801e738:	220a      	movs	r2, #10
 801e73a:	4630      	mov	r0, r6
 801e73c:	f7ff ff88 	bl	801e650 <__multadd>
 801e740:	45a0      	cmp	r8, r4
 801e742:	d1f5      	bne.n	801e730 <__s2b+0x4c>
 801e744:	f1a5 0408 	sub.w	r4, r5, #8
 801e748:	444c      	add	r4, r9
 801e74a:	1b2d      	subs	r5, r5, r4
 801e74c:	1963      	adds	r3, r4, r5
 801e74e:	42bb      	cmp	r3, r7
 801e750:	db04      	blt.n	801e75c <__s2b+0x78>
 801e752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e756:	340a      	adds	r4, #10
 801e758:	2509      	movs	r5, #9
 801e75a:	e7f6      	b.n	801e74a <__s2b+0x66>
 801e75c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e760:	4601      	mov	r1, r0
 801e762:	3b30      	subs	r3, #48	; 0x30
 801e764:	220a      	movs	r2, #10
 801e766:	4630      	mov	r0, r6
 801e768:	f7ff ff72 	bl	801e650 <__multadd>
 801e76c:	e7ee      	b.n	801e74c <__s2b+0x68>
 801e76e:	bf00      	nop
 801e770:	08022b60 	.word	0x08022b60
 801e774:	08022c54 	.word	0x08022c54

0801e778 <__hi0bits>:
 801e778:	0c03      	lsrs	r3, r0, #16
 801e77a:	041b      	lsls	r3, r3, #16
 801e77c:	b9d3      	cbnz	r3, 801e7b4 <__hi0bits+0x3c>
 801e77e:	0400      	lsls	r0, r0, #16
 801e780:	2310      	movs	r3, #16
 801e782:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e786:	bf04      	itt	eq
 801e788:	0200      	lsleq	r0, r0, #8
 801e78a:	3308      	addeq	r3, #8
 801e78c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e790:	bf04      	itt	eq
 801e792:	0100      	lsleq	r0, r0, #4
 801e794:	3304      	addeq	r3, #4
 801e796:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e79a:	bf04      	itt	eq
 801e79c:	0080      	lsleq	r0, r0, #2
 801e79e:	3302      	addeq	r3, #2
 801e7a0:	2800      	cmp	r0, #0
 801e7a2:	db05      	blt.n	801e7b0 <__hi0bits+0x38>
 801e7a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e7a8:	f103 0301 	add.w	r3, r3, #1
 801e7ac:	bf08      	it	eq
 801e7ae:	2320      	moveq	r3, #32
 801e7b0:	4618      	mov	r0, r3
 801e7b2:	4770      	bx	lr
 801e7b4:	2300      	movs	r3, #0
 801e7b6:	e7e4      	b.n	801e782 <__hi0bits+0xa>

0801e7b8 <__lo0bits>:
 801e7b8:	6803      	ldr	r3, [r0, #0]
 801e7ba:	f013 0207 	ands.w	r2, r3, #7
 801e7be:	4601      	mov	r1, r0
 801e7c0:	d00b      	beq.n	801e7da <__lo0bits+0x22>
 801e7c2:	07da      	lsls	r2, r3, #31
 801e7c4:	d424      	bmi.n	801e810 <__lo0bits+0x58>
 801e7c6:	0798      	lsls	r0, r3, #30
 801e7c8:	bf49      	itett	mi
 801e7ca:	085b      	lsrmi	r3, r3, #1
 801e7cc:	089b      	lsrpl	r3, r3, #2
 801e7ce:	2001      	movmi	r0, #1
 801e7d0:	600b      	strmi	r3, [r1, #0]
 801e7d2:	bf5c      	itt	pl
 801e7d4:	600b      	strpl	r3, [r1, #0]
 801e7d6:	2002      	movpl	r0, #2
 801e7d8:	4770      	bx	lr
 801e7da:	b298      	uxth	r0, r3
 801e7dc:	b9b0      	cbnz	r0, 801e80c <__lo0bits+0x54>
 801e7de:	0c1b      	lsrs	r3, r3, #16
 801e7e0:	2010      	movs	r0, #16
 801e7e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 801e7e6:	bf04      	itt	eq
 801e7e8:	0a1b      	lsreq	r3, r3, #8
 801e7ea:	3008      	addeq	r0, #8
 801e7ec:	071a      	lsls	r2, r3, #28
 801e7ee:	bf04      	itt	eq
 801e7f0:	091b      	lsreq	r3, r3, #4
 801e7f2:	3004      	addeq	r0, #4
 801e7f4:	079a      	lsls	r2, r3, #30
 801e7f6:	bf04      	itt	eq
 801e7f8:	089b      	lsreq	r3, r3, #2
 801e7fa:	3002      	addeq	r0, #2
 801e7fc:	07da      	lsls	r2, r3, #31
 801e7fe:	d403      	bmi.n	801e808 <__lo0bits+0x50>
 801e800:	085b      	lsrs	r3, r3, #1
 801e802:	f100 0001 	add.w	r0, r0, #1
 801e806:	d005      	beq.n	801e814 <__lo0bits+0x5c>
 801e808:	600b      	str	r3, [r1, #0]
 801e80a:	4770      	bx	lr
 801e80c:	4610      	mov	r0, r2
 801e80e:	e7e8      	b.n	801e7e2 <__lo0bits+0x2a>
 801e810:	2000      	movs	r0, #0
 801e812:	4770      	bx	lr
 801e814:	2020      	movs	r0, #32
 801e816:	4770      	bx	lr

0801e818 <__i2b>:
 801e818:	b510      	push	{r4, lr}
 801e81a:	460c      	mov	r4, r1
 801e81c:	2101      	movs	r1, #1
 801e81e:	f7ff feb5 	bl	801e58c <_Balloc>
 801e822:	4602      	mov	r2, r0
 801e824:	b928      	cbnz	r0, 801e832 <__i2b+0x1a>
 801e826:	4b05      	ldr	r3, [pc, #20]	; (801e83c <__i2b+0x24>)
 801e828:	4805      	ldr	r0, [pc, #20]	; (801e840 <__i2b+0x28>)
 801e82a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801e82e:	f7fe fab9 	bl	801cda4 <__assert_func>
 801e832:	2301      	movs	r3, #1
 801e834:	6144      	str	r4, [r0, #20]
 801e836:	6103      	str	r3, [r0, #16]
 801e838:	bd10      	pop	{r4, pc}
 801e83a:	bf00      	nop
 801e83c:	08022b60 	.word	0x08022b60
 801e840:	08022c54 	.word	0x08022c54

0801e844 <__multiply>:
 801e844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e848:	4614      	mov	r4, r2
 801e84a:	690a      	ldr	r2, [r1, #16]
 801e84c:	6923      	ldr	r3, [r4, #16]
 801e84e:	429a      	cmp	r2, r3
 801e850:	bfb8      	it	lt
 801e852:	460b      	movlt	r3, r1
 801e854:	460d      	mov	r5, r1
 801e856:	bfbc      	itt	lt
 801e858:	4625      	movlt	r5, r4
 801e85a:	461c      	movlt	r4, r3
 801e85c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801e860:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801e864:	68ab      	ldr	r3, [r5, #8]
 801e866:	6869      	ldr	r1, [r5, #4]
 801e868:	eb0a 0709 	add.w	r7, sl, r9
 801e86c:	42bb      	cmp	r3, r7
 801e86e:	b085      	sub	sp, #20
 801e870:	bfb8      	it	lt
 801e872:	3101      	addlt	r1, #1
 801e874:	f7ff fe8a 	bl	801e58c <_Balloc>
 801e878:	b930      	cbnz	r0, 801e888 <__multiply+0x44>
 801e87a:	4602      	mov	r2, r0
 801e87c:	4b42      	ldr	r3, [pc, #264]	; (801e988 <__multiply+0x144>)
 801e87e:	4843      	ldr	r0, [pc, #268]	; (801e98c <__multiply+0x148>)
 801e880:	f240 115d 	movw	r1, #349	; 0x15d
 801e884:	f7fe fa8e 	bl	801cda4 <__assert_func>
 801e888:	f100 0614 	add.w	r6, r0, #20
 801e88c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801e890:	4633      	mov	r3, r6
 801e892:	2200      	movs	r2, #0
 801e894:	4543      	cmp	r3, r8
 801e896:	d31e      	bcc.n	801e8d6 <__multiply+0x92>
 801e898:	f105 0c14 	add.w	ip, r5, #20
 801e89c:	f104 0314 	add.w	r3, r4, #20
 801e8a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801e8a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801e8a8:	9202      	str	r2, [sp, #8]
 801e8aa:	ebac 0205 	sub.w	r2, ip, r5
 801e8ae:	3a15      	subs	r2, #21
 801e8b0:	f022 0203 	bic.w	r2, r2, #3
 801e8b4:	3204      	adds	r2, #4
 801e8b6:	f105 0115 	add.w	r1, r5, #21
 801e8ba:	458c      	cmp	ip, r1
 801e8bc:	bf38      	it	cc
 801e8be:	2204      	movcc	r2, #4
 801e8c0:	9201      	str	r2, [sp, #4]
 801e8c2:	9a02      	ldr	r2, [sp, #8]
 801e8c4:	9303      	str	r3, [sp, #12]
 801e8c6:	429a      	cmp	r2, r3
 801e8c8:	d808      	bhi.n	801e8dc <__multiply+0x98>
 801e8ca:	2f00      	cmp	r7, #0
 801e8cc:	dc55      	bgt.n	801e97a <__multiply+0x136>
 801e8ce:	6107      	str	r7, [r0, #16]
 801e8d0:	b005      	add	sp, #20
 801e8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8d6:	f843 2b04 	str.w	r2, [r3], #4
 801e8da:	e7db      	b.n	801e894 <__multiply+0x50>
 801e8dc:	f8b3 a000 	ldrh.w	sl, [r3]
 801e8e0:	f1ba 0f00 	cmp.w	sl, #0
 801e8e4:	d020      	beq.n	801e928 <__multiply+0xe4>
 801e8e6:	f105 0e14 	add.w	lr, r5, #20
 801e8ea:	46b1      	mov	r9, r6
 801e8ec:	2200      	movs	r2, #0
 801e8ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 801e8f2:	f8d9 b000 	ldr.w	fp, [r9]
 801e8f6:	b2a1      	uxth	r1, r4
 801e8f8:	fa1f fb8b 	uxth.w	fp, fp
 801e8fc:	fb0a b101 	mla	r1, sl, r1, fp
 801e900:	4411      	add	r1, r2
 801e902:	f8d9 2000 	ldr.w	r2, [r9]
 801e906:	0c24      	lsrs	r4, r4, #16
 801e908:	0c12      	lsrs	r2, r2, #16
 801e90a:	fb0a 2404 	mla	r4, sl, r4, r2
 801e90e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801e912:	b289      	uxth	r1, r1
 801e914:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801e918:	45f4      	cmp	ip, lr
 801e91a:	f849 1b04 	str.w	r1, [r9], #4
 801e91e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801e922:	d8e4      	bhi.n	801e8ee <__multiply+0xaa>
 801e924:	9901      	ldr	r1, [sp, #4]
 801e926:	5072      	str	r2, [r6, r1]
 801e928:	9a03      	ldr	r2, [sp, #12]
 801e92a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e92e:	3304      	adds	r3, #4
 801e930:	f1b9 0f00 	cmp.w	r9, #0
 801e934:	d01f      	beq.n	801e976 <__multiply+0x132>
 801e936:	6834      	ldr	r4, [r6, #0]
 801e938:	f105 0114 	add.w	r1, r5, #20
 801e93c:	46b6      	mov	lr, r6
 801e93e:	f04f 0a00 	mov.w	sl, #0
 801e942:	880a      	ldrh	r2, [r1, #0]
 801e944:	f8be b002 	ldrh.w	fp, [lr, #2]
 801e948:	fb09 b202 	mla	r2, r9, r2, fp
 801e94c:	4492      	add	sl, r2
 801e94e:	b2a4      	uxth	r4, r4
 801e950:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801e954:	f84e 4b04 	str.w	r4, [lr], #4
 801e958:	f851 4b04 	ldr.w	r4, [r1], #4
 801e95c:	f8be 2000 	ldrh.w	r2, [lr]
 801e960:	0c24      	lsrs	r4, r4, #16
 801e962:	fb09 2404 	mla	r4, r9, r4, r2
 801e966:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801e96a:	458c      	cmp	ip, r1
 801e96c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801e970:	d8e7      	bhi.n	801e942 <__multiply+0xfe>
 801e972:	9a01      	ldr	r2, [sp, #4]
 801e974:	50b4      	str	r4, [r6, r2]
 801e976:	3604      	adds	r6, #4
 801e978:	e7a3      	b.n	801e8c2 <__multiply+0x7e>
 801e97a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e97e:	2b00      	cmp	r3, #0
 801e980:	d1a5      	bne.n	801e8ce <__multiply+0x8a>
 801e982:	3f01      	subs	r7, #1
 801e984:	e7a1      	b.n	801e8ca <__multiply+0x86>
 801e986:	bf00      	nop
 801e988:	08022b60 	.word	0x08022b60
 801e98c:	08022c54 	.word	0x08022c54

0801e990 <__pow5mult>:
 801e990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e994:	4615      	mov	r5, r2
 801e996:	f012 0203 	ands.w	r2, r2, #3
 801e99a:	4606      	mov	r6, r0
 801e99c:	460f      	mov	r7, r1
 801e99e:	d007      	beq.n	801e9b0 <__pow5mult+0x20>
 801e9a0:	4c25      	ldr	r4, [pc, #148]	; (801ea38 <__pow5mult+0xa8>)
 801e9a2:	3a01      	subs	r2, #1
 801e9a4:	2300      	movs	r3, #0
 801e9a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e9aa:	f7ff fe51 	bl	801e650 <__multadd>
 801e9ae:	4607      	mov	r7, r0
 801e9b0:	10ad      	asrs	r5, r5, #2
 801e9b2:	d03d      	beq.n	801ea30 <__pow5mult+0xa0>
 801e9b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801e9b6:	b97c      	cbnz	r4, 801e9d8 <__pow5mult+0x48>
 801e9b8:	2010      	movs	r0, #16
 801e9ba:	f7fc fadf 	bl	801af7c <malloc>
 801e9be:	4602      	mov	r2, r0
 801e9c0:	6270      	str	r0, [r6, #36]	; 0x24
 801e9c2:	b928      	cbnz	r0, 801e9d0 <__pow5mult+0x40>
 801e9c4:	4b1d      	ldr	r3, [pc, #116]	; (801ea3c <__pow5mult+0xac>)
 801e9c6:	481e      	ldr	r0, [pc, #120]	; (801ea40 <__pow5mult+0xb0>)
 801e9c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801e9cc:	f7fe f9ea 	bl	801cda4 <__assert_func>
 801e9d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e9d4:	6004      	str	r4, [r0, #0]
 801e9d6:	60c4      	str	r4, [r0, #12]
 801e9d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801e9dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e9e0:	b94c      	cbnz	r4, 801e9f6 <__pow5mult+0x66>
 801e9e2:	f240 2171 	movw	r1, #625	; 0x271
 801e9e6:	4630      	mov	r0, r6
 801e9e8:	f7ff ff16 	bl	801e818 <__i2b>
 801e9ec:	2300      	movs	r3, #0
 801e9ee:	f8c8 0008 	str.w	r0, [r8, #8]
 801e9f2:	4604      	mov	r4, r0
 801e9f4:	6003      	str	r3, [r0, #0]
 801e9f6:	f04f 0900 	mov.w	r9, #0
 801e9fa:	07eb      	lsls	r3, r5, #31
 801e9fc:	d50a      	bpl.n	801ea14 <__pow5mult+0x84>
 801e9fe:	4639      	mov	r1, r7
 801ea00:	4622      	mov	r2, r4
 801ea02:	4630      	mov	r0, r6
 801ea04:	f7ff ff1e 	bl	801e844 <__multiply>
 801ea08:	4639      	mov	r1, r7
 801ea0a:	4680      	mov	r8, r0
 801ea0c:	4630      	mov	r0, r6
 801ea0e:	f7ff fdfd 	bl	801e60c <_Bfree>
 801ea12:	4647      	mov	r7, r8
 801ea14:	106d      	asrs	r5, r5, #1
 801ea16:	d00b      	beq.n	801ea30 <__pow5mult+0xa0>
 801ea18:	6820      	ldr	r0, [r4, #0]
 801ea1a:	b938      	cbnz	r0, 801ea2c <__pow5mult+0x9c>
 801ea1c:	4622      	mov	r2, r4
 801ea1e:	4621      	mov	r1, r4
 801ea20:	4630      	mov	r0, r6
 801ea22:	f7ff ff0f 	bl	801e844 <__multiply>
 801ea26:	6020      	str	r0, [r4, #0]
 801ea28:	f8c0 9000 	str.w	r9, [r0]
 801ea2c:	4604      	mov	r4, r0
 801ea2e:	e7e4      	b.n	801e9fa <__pow5mult+0x6a>
 801ea30:	4638      	mov	r0, r7
 801ea32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea36:	bf00      	nop
 801ea38:	08022da8 	.word	0x08022da8
 801ea3c:	080229ed 	.word	0x080229ed
 801ea40:	08022c54 	.word	0x08022c54

0801ea44 <__lshift>:
 801ea44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea48:	460c      	mov	r4, r1
 801ea4a:	6849      	ldr	r1, [r1, #4]
 801ea4c:	6923      	ldr	r3, [r4, #16]
 801ea4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ea52:	68a3      	ldr	r3, [r4, #8]
 801ea54:	4607      	mov	r7, r0
 801ea56:	4691      	mov	r9, r2
 801ea58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ea5c:	f108 0601 	add.w	r6, r8, #1
 801ea60:	42b3      	cmp	r3, r6
 801ea62:	db0b      	blt.n	801ea7c <__lshift+0x38>
 801ea64:	4638      	mov	r0, r7
 801ea66:	f7ff fd91 	bl	801e58c <_Balloc>
 801ea6a:	4605      	mov	r5, r0
 801ea6c:	b948      	cbnz	r0, 801ea82 <__lshift+0x3e>
 801ea6e:	4602      	mov	r2, r0
 801ea70:	4b28      	ldr	r3, [pc, #160]	; (801eb14 <__lshift+0xd0>)
 801ea72:	4829      	ldr	r0, [pc, #164]	; (801eb18 <__lshift+0xd4>)
 801ea74:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ea78:	f7fe f994 	bl	801cda4 <__assert_func>
 801ea7c:	3101      	adds	r1, #1
 801ea7e:	005b      	lsls	r3, r3, #1
 801ea80:	e7ee      	b.n	801ea60 <__lshift+0x1c>
 801ea82:	2300      	movs	r3, #0
 801ea84:	f100 0114 	add.w	r1, r0, #20
 801ea88:	f100 0210 	add.w	r2, r0, #16
 801ea8c:	4618      	mov	r0, r3
 801ea8e:	4553      	cmp	r3, sl
 801ea90:	db33      	blt.n	801eafa <__lshift+0xb6>
 801ea92:	6920      	ldr	r0, [r4, #16]
 801ea94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ea98:	f104 0314 	add.w	r3, r4, #20
 801ea9c:	f019 091f 	ands.w	r9, r9, #31
 801eaa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801eaa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801eaa8:	d02b      	beq.n	801eb02 <__lshift+0xbe>
 801eaaa:	f1c9 0e20 	rsb	lr, r9, #32
 801eaae:	468a      	mov	sl, r1
 801eab0:	2200      	movs	r2, #0
 801eab2:	6818      	ldr	r0, [r3, #0]
 801eab4:	fa00 f009 	lsl.w	r0, r0, r9
 801eab8:	4302      	orrs	r2, r0
 801eaba:	f84a 2b04 	str.w	r2, [sl], #4
 801eabe:	f853 2b04 	ldr.w	r2, [r3], #4
 801eac2:	459c      	cmp	ip, r3
 801eac4:	fa22 f20e 	lsr.w	r2, r2, lr
 801eac8:	d8f3      	bhi.n	801eab2 <__lshift+0x6e>
 801eaca:	ebac 0304 	sub.w	r3, ip, r4
 801eace:	3b15      	subs	r3, #21
 801ead0:	f023 0303 	bic.w	r3, r3, #3
 801ead4:	3304      	adds	r3, #4
 801ead6:	f104 0015 	add.w	r0, r4, #21
 801eada:	4584      	cmp	ip, r0
 801eadc:	bf38      	it	cc
 801eade:	2304      	movcc	r3, #4
 801eae0:	50ca      	str	r2, [r1, r3]
 801eae2:	b10a      	cbz	r2, 801eae8 <__lshift+0xa4>
 801eae4:	f108 0602 	add.w	r6, r8, #2
 801eae8:	3e01      	subs	r6, #1
 801eaea:	4638      	mov	r0, r7
 801eaec:	612e      	str	r6, [r5, #16]
 801eaee:	4621      	mov	r1, r4
 801eaf0:	f7ff fd8c 	bl	801e60c <_Bfree>
 801eaf4:	4628      	mov	r0, r5
 801eaf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eafa:	f842 0f04 	str.w	r0, [r2, #4]!
 801eafe:	3301      	adds	r3, #1
 801eb00:	e7c5      	b.n	801ea8e <__lshift+0x4a>
 801eb02:	3904      	subs	r1, #4
 801eb04:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb08:	f841 2f04 	str.w	r2, [r1, #4]!
 801eb0c:	459c      	cmp	ip, r3
 801eb0e:	d8f9      	bhi.n	801eb04 <__lshift+0xc0>
 801eb10:	e7ea      	b.n	801eae8 <__lshift+0xa4>
 801eb12:	bf00      	nop
 801eb14:	08022b60 	.word	0x08022b60
 801eb18:	08022c54 	.word	0x08022c54

0801eb1c <__mcmp>:
 801eb1c:	b530      	push	{r4, r5, lr}
 801eb1e:	6902      	ldr	r2, [r0, #16]
 801eb20:	690c      	ldr	r4, [r1, #16]
 801eb22:	1b12      	subs	r2, r2, r4
 801eb24:	d10e      	bne.n	801eb44 <__mcmp+0x28>
 801eb26:	f100 0314 	add.w	r3, r0, #20
 801eb2a:	3114      	adds	r1, #20
 801eb2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801eb30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801eb34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801eb38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801eb3c:	42a5      	cmp	r5, r4
 801eb3e:	d003      	beq.n	801eb48 <__mcmp+0x2c>
 801eb40:	d305      	bcc.n	801eb4e <__mcmp+0x32>
 801eb42:	2201      	movs	r2, #1
 801eb44:	4610      	mov	r0, r2
 801eb46:	bd30      	pop	{r4, r5, pc}
 801eb48:	4283      	cmp	r3, r0
 801eb4a:	d3f3      	bcc.n	801eb34 <__mcmp+0x18>
 801eb4c:	e7fa      	b.n	801eb44 <__mcmp+0x28>
 801eb4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801eb52:	e7f7      	b.n	801eb44 <__mcmp+0x28>

0801eb54 <__mdiff>:
 801eb54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb58:	460c      	mov	r4, r1
 801eb5a:	4606      	mov	r6, r0
 801eb5c:	4611      	mov	r1, r2
 801eb5e:	4620      	mov	r0, r4
 801eb60:	4617      	mov	r7, r2
 801eb62:	f7ff ffdb 	bl	801eb1c <__mcmp>
 801eb66:	1e05      	subs	r5, r0, #0
 801eb68:	d110      	bne.n	801eb8c <__mdiff+0x38>
 801eb6a:	4629      	mov	r1, r5
 801eb6c:	4630      	mov	r0, r6
 801eb6e:	f7ff fd0d 	bl	801e58c <_Balloc>
 801eb72:	b930      	cbnz	r0, 801eb82 <__mdiff+0x2e>
 801eb74:	4b39      	ldr	r3, [pc, #228]	; (801ec5c <__mdiff+0x108>)
 801eb76:	4602      	mov	r2, r0
 801eb78:	f240 2132 	movw	r1, #562	; 0x232
 801eb7c:	4838      	ldr	r0, [pc, #224]	; (801ec60 <__mdiff+0x10c>)
 801eb7e:	f7fe f911 	bl	801cda4 <__assert_func>
 801eb82:	2301      	movs	r3, #1
 801eb84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801eb88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb8c:	bfa4      	itt	ge
 801eb8e:	463b      	movge	r3, r7
 801eb90:	4627      	movge	r7, r4
 801eb92:	4630      	mov	r0, r6
 801eb94:	6879      	ldr	r1, [r7, #4]
 801eb96:	bfa6      	itte	ge
 801eb98:	461c      	movge	r4, r3
 801eb9a:	2500      	movge	r5, #0
 801eb9c:	2501      	movlt	r5, #1
 801eb9e:	f7ff fcf5 	bl	801e58c <_Balloc>
 801eba2:	b920      	cbnz	r0, 801ebae <__mdiff+0x5a>
 801eba4:	4b2d      	ldr	r3, [pc, #180]	; (801ec5c <__mdiff+0x108>)
 801eba6:	4602      	mov	r2, r0
 801eba8:	f44f 7110 	mov.w	r1, #576	; 0x240
 801ebac:	e7e6      	b.n	801eb7c <__mdiff+0x28>
 801ebae:	693e      	ldr	r6, [r7, #16]
 801ebb0:	60c5      	str	r5, [r0, #12]
 801ebb2:	6925      	ldr	r5, [r4, #16]
 801ebb4:	f107 0114 	add.w	r1, r7, #20
 801ebb8:	f104 0914 	add.w	r9, r4, #20
 801ebbc:	f100 0e14 	add.w	lr, r0, #20
 801ebc0:	f107 0210 	add.w	r2, r7, #16
 801ebc4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801ebc8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801ebcc:	46f2      	mov	sl, lr
 801ebce:	2700      	movs	r7, #0
 801ebd0:	f859 3b04 	ldr.w	r3, [r9], #4
 801ebd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ebd8:	fa1f f883 	uxth.w	r8, r3
 801ebdc:	fa17 f78b 	uxtah	r7, r7, fp
 801ebe0:	0c1b      	lsrs	r3, r3, #16
 801ebe2:	eba7 0808 	sub.w	r8, r7, r8
 801ebe6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ebea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ebee:	fa1f f888 	uxth.w	r8, r8
 801ebf2:	141f      	asrs	r7, r3, #16
 801ebf4:	454d      	cmp	r5, r9
 801ebf6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ebfa:	f84a 3b04 	str.w	r3, [sl], #4
 801ebfe:	d8e7      	bhi.n	801ebd0 <__mdiff+0x7c>
 801ec00:	1b2b      	subs	r3, r5, r4
 801ec02:	3b15      	subs	r3, #21
 801ec04:	f023 0303 	bic.w	r3, r3, #3
 801ec08:	3304      	adds	r3, #4
 801ec0a:	3415      	adds	r4, #21
 801ec0c:	42a5      	cmp	r5, r4
 801ec0e:	bf38      	it	cc
 801ec10:	2304      	movcc	r3, #4
 801ec12:	4419      	add	r1, r3
 801ec14:	4473      	add	r3, lr
 801ec16:	469e      	mov	lr, r3
 801ec18:	460d      	mov	r5, r1
 801ec1a:	4565      	cmp	r5, ip
 801ec1c:	d30e      	bcc.n	801ec3c <__mdiff+0xe8>
 801ec1e:	f10c 0203 	add.w	r2, ip, #3
 801ec22:	1a52      	subs	r2, r2, r1
 801ec24:	f022 0203 	bic.w	r2, r2, #3
 801ec28:	3903      	subs	r1, #3
 801ec2a:	458c      	cmp	ip, r1
 801ec2c:	bf38      	it	cc
 801ec2e:	2200      	movcc	r2, #0
 801ec30:	441a      	add	r2, r3
 801ec32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ec36:	b17b      	cbz	r3, 801ec58 <__mdiff+0x104>
 801ec38:	6106      	str	r6, [r0, #16]
 801ec3a:	e7a5      	b.n	801eb88 <__mdiff+0x34>
 801ec3c:	f855 8b04 	ldr.w	r8, [r5], #4
 801ec40:	fa17 f488 	uxtah	r4, r7, r8
 801ec44:	1422      	asrs	r2, r4, #16
 801ec46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801ec4a:	b2a4      	uxth	r4, r4
 801ec4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801ec50:	f84e 4b04 	str.w	r4, [lr], #4
 801ec54:	1417      	asrs	r7, r2, #16
 801ec56:	e7e0      	b.n	801ec1a <__mdiff+0xc6>
 801ec58:	3e01      	subs	r6, #1
 801ec5a:	e7ea      	b.n	801ec32 <__mdiff+0xde>
 801ec5c:	08022b60 	.word	0x08022b60
 801ec60:	08022c54 	.word	0x08022c54

0801ec64 <__ulp>:
 801ec64:	b082      	sub	sp, #8
 801ec66:	ed8d 0b00 	vstr	d0, [sp]
 801ec6a:	9b01      	ldr	r3, [sp, #4]
 801ec6c:	4912      	ldr	r1, [pc, #72]	; (801ecb8 <__ulp+0x54>)
 801ec6e:	4019      	ands	r1, r3
 801ec70:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801ec74:	2900      	cmp	r1, #0
 801ec76:	dd05      	ble.n	801ec84 <__ulp+0x20>
 801ec78:	2200      	movs	r2, #0
 801ec7a:	460b      	mov	r3, r1
 801ec7c:	ec43 2b10 	vmov	d0, r2, r3
 801ec80:	b002      	add	sp, #8
 801ec82:	4770      	bx	lr
 801ec84:	4249      	negs	r1, r1
 801ec86:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801ec8a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801ec8e:	f04f 0200 	mov.w	r2, #0
 801ec92:	f04f 0300 	mov.w	r3, #0
 801ec96:	da04      	bge.n	801eca2 <__ulp+0x3e>
 801ec98:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801ec9c:	fa41 f300 	asr.w	r3, r1, r0
 801eca0:	e7ec      	b.n	801ec7c <__ulp+0x18>
 801eca2:	f1a0 0114 	sub.w	r1, r0, #20
 801eca6:	291e      	cmp	r1, #30
 801eca8:	bfda      	itte	le
 801ecaa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801ecae:	fa20 f101 	lsrle.w	r1, r0, r1
 801ecb2:	2101      	movgt	r1, #1
 801ecb4:	460a      	mov	r2, r1
 801ecb6:	e7e1      	b.n	801ec7c <__ulp+0x18>
 801ecb8:	7ff00000 	.word	0x7ff00000

0801ecbc <__b2d>:
 801ecbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ecbe:	6905      	ldr	r5, [r0, #16]
 801ecc0:	f100 0714 	add.w	r7, r0, #20
 801ecc4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801ecc8:	1f2e      	subs	r6, r5, #4
 801ecca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801ecce:	4620      	mov	r0, r4
 801ecd0:	f7ff fd52 	bl	801e778 <__hi0bits>
 801ecd4:	f1c0 0320 	rsb	r3, r0, #32
 801ecd8:	280a      	cmp	r0, #10
 801ecda:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801ed58 <__b2d+0x9c>
 801ecde:	600b      	str	r3, [r1, #0]
 801ece0:	dc14      	bgt.n	801ed0c <__b2d+0x50>
 801ece2:	f1c0 0e0b 	rsb	lr, r0, #11
 801ece6:	fa24 f10e 	lsr.w	r1, r4, lr
 801ecea:	42b7      	cmp	r7, r6
 801ecec:	ea41 030c 	orr.w	r3, r1, ip
 801ecf0:	bf34      	ite	cc
 801ecf2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ecf6:	2100      	movcs	r1, #0
 801ecf8:	3015      	adds	r0, #21
 801ecfa:	fa04 f000 	lsl.w	r0, r4, r0
 801ecfe:	fa21 f10e 	lsr.w	r1, r1, lr
 801ed02:	ea40 0201 	orr.w	r2, r0, r1
 801ed06:	ec43 2b10 	vmov	d0, r2, r3
 801ed0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed0c:	42b7      	cmp	r7, r6
 801ed0e:	bf3a      	itte	cc
 801ed10:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ed14:	f1a5 0608 	subcc.w	r6, r5, #8
 801ed18:	2100      	movcs	r1, #0
 801ed1a:	380b      	subs	r0, #11
 801ed1c:	d017      	beq.n	801ed4e <__b2d+0x92>
 801ed1e:	f1c0 0c20 	rsb	ip, r0, #32
 801ed22:	fa04 f500 	lsl.w	r5, r4, r0
 801ed26:	42be      	cmp	r6, r7
 801ed28:	fa21 f40c 	lsr.w	r4, r1, ip
 801ed2c:	ea45 0504 	orr.w	r5, r5, r4
 801ed30:	bf8c      	ite	hi
 801ed32:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801ed36:	2400      	movls	r4, #0
 801ed38:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801ed3c:	fa01 f000 	lsl.w	r0, r1, r0
 801ed40:	fa24 f40c 	lsr.w	r4, r4, ip
 801ed44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ed48:	ea40 0204 	orr.w	r2, r0, r4
 801ed4c:	e7db      	b.n	801ed06 <__b2d+0x4a>
 801ed4e:	ea44 030c 	orr.w	r3, r4, ip
 801ed52:	460a      	mov	r2, r1
 801ed54:	e7d7      	b.n	801ed06 <__b2d+0x4a>
 801ed56:	bf00      	nop
 801ed58:	3ff00000 	.word	0x3ff00000

0801ed5c <__d2b>:
 801ed5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ed60:	4689      	mov	r9, r1
 801ed62:	2101      	movs	r1, #1
 801ed64:	ec57 6b10 	vmov	r6, r7, d0
 801ed68:	4690      	mov	r8, r2
 801ed6a:	f7ff fc0f 	bl	801e58c <_Balloc>
 801ed6e:	4604      	mov	r4, r0
 801ed70:	b930      	cbnz	r0, 801ed80 <__d2b+0x24>
 801ed72:	4602      	mov	r2, r0
 801ed74:	4b25      	ldr	r3, [pc, #148]	; (801ee0c <__d2b+0xb0>)
 801ed76:	4826      	ldr	r0, [pc, #152]	; (801ee10 <__d2b+0xb4>)
 801ed78:	f240 310a 	movw	r1, #778	; 0x30a
 801ed7c:	f7fe f812 	bl	801cda4 <__assert_func>
 801ed80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801ed84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ed88:	bb35      	cbnz	r5, 801edd8 <__d2b+0x7c>
 801ed8a:	2e00      	cmp	r6, #0
 801ed8c:	9301      	str	r3, [sp, #4]
 801ed8e:	d028      	beq.n	801ede2 <__d2b+0x86>
 801ed90:	4668      	mov	r0, sp
 801ed92:	9600      	str	r6, [sp, #0]
 801ed94:	f7ff fd10 	bl	801e7b8 <__lo0bits>
 801ed98:	9900      	ldr	r1, [sp, #0]
 801ed9a:	b300      	cbz	r0, 801edde <__d2b+0x82>
 801ed9c:	9a01      	ldr	r2, [sp, #4]
 801ed9e:	f1c0 0320 	rsb	r3, r0, #32
 801eda2:	fa02 f303 	lsl.w	r3, r2, r3
 801eda6:	430b      	orrs	r3, r1
 801eda8:	40c2      	lsrs	r2, r0
 801edaa:	6163      	str	r3, [r4, #20]
 801edac:	9201      	str	r2, [sp, #4]
 801edae:	9b01      	ldr	r3, [sp, #4]
 801edb0:	61a3      	str	r3, [r4, #24]
 801edb2:	2b00      	cmp	r3, #0
 801edb4:	bf14      	ite	ne
 801edb6:	2202      	movne	r2, #2
 801edb8:	2201      	moveq	r2, #1
 801edba:	6122      	str	r2, [r4, #16]
 801edbc:	b1d5      	cbz	r5, 801edf4 <__d2b+0x98>
 801edbe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801edc2:	4405      	add	r5, r0
 801edc4:	f8c9 5000 	str.w	r5, [r9]
 801edc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801edcc:	f8c8 0000 	str.w	r0, [r8]
 801edd0:	4620      	mov	r0, r4
 801edd2:	b003      	add	sp, #12
 801edd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801edd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801eddc:	e7d5      	b.n	801ed8a <__d2b+0x2e>
 801edde:	6161      	str	r1, [r4, #20]
 801ede0:	e7e5      	b.n	801edae <__d2b+0x52>
 801ede2:	a801      	add	r0, sp, #4
 801ede4:	f7ff fce8 	bl	801e7b8 <__lo0bits>
 801ede8:	9b01      	ldr	r3, [sp, #4]
 801edea:	6163      	str	r3, [r4, #20]
 801edec:	2201      	movs	r2, #1
 801edee:	6122      	str	r2, [r4, #16]
 801edf0:	3020      	adds	r0, #32
 801edf2:	e7e3      	b.n	801edbc <__d2b+0x60>
 801edf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801edf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801edfc:	f8c9 0000 	str.w	r0, [r9]
 801ee00:	6918      	ldr	r0, [r3, #16]
 801ee02:	f7ff fcb9 	bl	801e778 <__hi0bits>
 801ee06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ee0a:	e7df      	b.n	801edcc <__d2b+0x70>
 801ee0c:	08022b60 	.word	0x08022b60
 801ee10:	08022c54 	.word	0x08022c54

0801ee14 <__ratio>:
 801ee14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee18:	468a      	mov	sl, r1
 801ee1a:	4669      	mov	r1, sp
 801ee1c:	4683      	mov	fp, r0
 801ee1e:	f7ff ff4d 	bl	801ecbc <__b2d>
 801ee22:	a901      	add	r1, sp, #4
 801ee24:	4650      	mov	r0, sl
 801ee26:	ec59 8b10 	vmov	r8, r9, d0
 801ee2a:	ee10 6a10 	vmov	r6, s0
 801ee2e:	f7ff ff45 	bl	801ecbc <__b2d>
 801ee32:	f8db 3010 	ldr.w	r3, [fp, #16]
 801ee36:	f8da 2010 	ldr.w	r2, [sl, #16]
 801ee3a:	eba3 0c02 	sub.w	ip, r3, r2
 801ee3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ee42:	1a9b      	subs	r3, r3, r2
 801ee44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801ee48:	ec55 4b10 	vmov	r4, r5, d0
 801ee4c:	2b00      	cmp	r3, #0
 801ee4e:	ee10 0a10 	vmov	r0, s0
 801ee52:	bfce      	itee	gt
 801ee54:	464a      	movgt	r2, r9
 801ee56:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ee5a:	462a      	movle	r2, r5
 801ee5c:	464f      	mov	r7, r9
 801ee5e:	4629      	mov	r1, r5
 801ee60:	bfcc      	ite	gt
 801ee62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801ee66:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801ee6a:	ec47 6b17 	vmov	d7, r6, r7
 801ee6e:	ec41 0b16 	vmov	d6, r0, r1
 801ee72:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801ee76:	b003      	add	sp, #12
 801ee78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ee7c <__copybits>:
 801ee7c:	3901      	subs	r1, #1
 801ee7e:	b570      	push	{r4, r5, r6, lr}
 801ee80:	1149      	asrs	r1, r1, #5
 801ee82:	6914      	ldr	r4, [r2, #16]
 801ee84:	3101      	adds	r1, #1
 801ee86:	f102 0314 	add.w	r3, r2, #20
 801ee8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ee8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ee92:	1f05      	subs	r5, r0, #4
 801ee94:	42a3      	cmp	r3, r4
 801ee96:	d30c      	bcc.n	801eeb2 <__copybits+0x36>
 801ee98:	1aa3      	subs	r3, r4, r2
 801ee9a:	3b11      	subs	r3, #17
 801ee9c:	f023 0303 	bic.w	r3, r3, #3
 801eea0:	3211      	adds	r2, #17
 801eea2:	42a2      	cmp	r2, r4
 801eea4:	bf88      	it	hi
 801eea6:	2300      	movhi	r3, #0
 801eea8:	4418      	add	r0, r3
 801eeaa:	2300      	movs	r3, #0
 801eeac:	4288      	cmp	r0, r1
 801eeae:	d305      	bcc.n	801eebc <__copybits+0x40>
 801eeb0:	bd70      	pop	{r4, r5, r6, pc}
 801eeb2:	f853 6b04 	ldr.w	r6, [r3], #4
 801eeb6:	f845 6f04 	str.w	r6, [r5, #4]!
 801eeba:	e7eb      	b.n	801ee94 <__copybits+0x18>
 801eebc:	f840 3b04 	str.w	r3, [r0], #4
 801eec0:	e7f4      	b.n	801eeac <__copybits+0x30>

0801eec2 <__any_on>:
 801eec2:	f100 0214 	add.w	r2, r0, #20
 801eec6:	6900      	ldr	r0, [r0, #16]
 801eec8:	114b      	asrs	r3, r1, #5
 801eeca:	4298      	cmp	r0, r3
 801eecc:	b510      	push	{r4, lr}
 801eece:	db11      	blt.n	801eef4 <__any_on+0x32>
 801eed0:	dd0a      	ble.n	801eee8 <__any_on+0x26>
 801eed2:	f011 011f 	ands.w	r1, r1, #31
 801eed6:	d007      	beq.n	801eee8 <__any_on+0x26>
 801eed8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801eedc:	fa24 f001 	lsr.w	r0, r4, r1
 801eee0:	fa00 f101 	lsl.w	r1, r0, r1
 801eee4:	428c      	cmp	r4, r1
 801eee6:	d10b      	bne.n	801ef00 <__any_on+0x3e>
 801eee8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801eeec:	4293      	cmp	r3, r2
 801eeee:	d803      	bhi.n	801eef8 <__any_on+0x36>
 801eef0:	2000      	movs	r0, #0
 801eef2:	bd10      	pop	{r4, pc}
 801eef4:	4603      	mov	r3, r0
 801eef6:	e7f7      	b.n	801eee8 <__any_on+0x26>
 801eef8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801eefc:	2900      	cmp	r1, #0
 801eefe:	d0f5      	beq.n	801eeec <__any_on+0x2a>
 801ef00:	2001      	movs	r0, #1
 801ef02:	e7f6      	b.n	801eef2 <__any_on+0x30>

0801ef04 <_calloc_r>:
 801ef04:	b513      	push	{r0, r1, r4, lr}
 801ef06:	434a      	muls	r2, r1
 801ef08:	4611      	mov	r1, r2
 801ef0a:	9201      	str	r2, [sp, #4]
 801ef0c:	f7fc f8cc 	bl	801b0a8 <_malloc_r>
 801ef10:	4604      	mov	r4, r0
 801ef12:	b118      	cbz	r0, 801ef1c <_calloc_r+0x18>
 801ef14:	9a01      	ldr	r2, [sp, #4]
 801ef16:	2100      	movs	r1, #0
 801ef18:	f7fc f86e 	bl	801aff8 <memset>
 801ef1c:	4620      	mov	r0, r4
 801ef1e:	b002      	add	sp, #8
 801ef20:	bd10      	pop	{r4, pc}

0801ef22 <__ssputs_r>:
 801ef22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef26:	688e      	ldr	r6, [r1, #8]
 801ef28:	429e      	cmp	r6, r3
 801ef2a:	4682      	mov	sl, r0
 801ef2c:	460c      	mov	r4, r1
 801ef2e:	4690      	mov	r8, r2
 801ef30:	461f      	mov	r7, r3
 801ef32:	d838      	bhi.n	801efa6 <__ssputs_r+0x84>
 801ef34:	898a      	ldrh	r2, [r1, #12]
 801ef36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ef3a:	d032      	beq.n	801efa2 <__ssputs_r+0x80>
 801ef3c:	6825      	ldr	r5, [r4, #0]
 801ef3e:	6909      	ldr	r1, [r1, #16]
 801ef40:	eba5 0901 	sub.w	r9, r5, r1
 801ef44:	6965      	ldr	r5, [r4, #20]
 801ef46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ef4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ef4e:	3301      	adds	r3, #1
 801ef50:	444b      	add	r3, r9
 801ef52:	106d      	asrs	r5, r5, #1
 801ef54:	429d      	cmp	r5, r3
 801ef56:	bf38      	it	cc
 801ef58:	461d      	movcc	r5, r3
 801ef5a:	0553      	lsls	r3, r2, #21
 801ef5c:	d531      	bpl.n	801efc2 <__ssputs_r+0xa0>
 801ef5e:	4629      	mov	r1, r5
 801ef60:	f7fc f8a2 	bl	801b0a8 <_malloc_r>
 801ef64:	4606      	mov	r6, r0
 801ef66:	b950      	cbnz	r0, 801ef7e <__ssputs_r+0x5c>
 801ef68:	230c      	movs	r3, #12
 801ef6a:	f8ca 3000 	str.w	r3, [sl]
 801ef6e:	89a3      	ldrh	r3, [r4, #12]
 801ef70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ef74:	81a3      	strh	r3, [r4, #12]
 801ef76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ef7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef7e:	6921      	ldr	r1, [r4, #16]
 801ef80:	464a      	mov	r2, r9
 801ef82:	f7fc f811 	bl	801afa8 <memcpy>
 801ef86:	89a3      	ldrh	r3, [r4, #12]
 801ef88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ef8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ef90:	81a3      	strh	r3, [r4, #12]
 801ef92:	6126      	str	r6, [r4, #16]
 801ef94:	6165      	str	r5, [r4, #20]
 801ef96:	444e      	add	r6, r9
 801ef98:	eba5 0509 	sub.w	r5, r5, r9
 801ef9c:	6026      	str	r6, [r4, #0]
 801ef9e:	60a5      	str	r5, [r4, #8]
 801efa0:	463e      	mov	r6, r7
 801efa2:	42be      	cmp	r6, r7
 801efa4:	d900      	bls.n	801efa8 <__ssputs_r+0x86>
 801efa6:	463e      	mov	r6, r7
 801efa8:	4632      	mov	r2, r6
 801efaa:	6820      	ldr	r0, [r4, #0]
 801efac:	4641      	mov	r1, r8
 801efae:	f7fc f809 	bl	801afc4 <memmove>
 801efb2:	68a3      	ldr	r3, [r4, #8]
 801efb4:	6822      	ldr	r2, [r4, #0]
 801efb6:	1b9b      	subs	r3, r3, r6
 801efb8:	4432      	add	r2, r6
 801efba:	60a3      	str	r3, [r4, #8]
 801efbc:	6022      	str	r2, [r4, #0]
 801efbe:	2000      	movs	r0, #0
 801efc0:	e7db      	b.n	801ef7a <__ssputs_r+0x58>
 801efc2:	462a      	mov	r2, r5
 801efc4:	f000 fb1a 	bl	801f5fc <_realloc_r>
 801efc8:	4606      	mov	r6, r0
 801efca:	2800      	cmp	r0, #0
 801efcc:	d1e1      	bne.n	801ef92 <__ssputs_r+0x70>
 801efce:	6921      	ldr	r1, [r4, #16]
 801efd0:	4650      	mov	r0, sl
 801efd2:	f7fc f819 	bl	801b008 <_free_r>
 801efd6:	e7c7      	b.n	801ef68 <__ssputs_r+0x46>

0801efd8 <_svfiprintf_r>:
 801efd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efdc:	4698      	mov	r8, r3
 801efde:	898b      	ldrh	r3, [r1, #12]
 801efe0:	061b      	lsls	r3, r3, #24
 801efe2:	b09d      	sub	sp, #116	; 0x74
 801efe4:	4607      	mov	r7, r0
 801efe6:	460d      	mov	r5, r1
 801efe8:	4614      	mov	r4, r2
 801efea:	d50e      	bpl.n	801f00a <_svfiprintf_r+0x32>
 801efec:	690b      	ldr	r3, [r1, #16]
 801efee:	b963      	cbnz	r3, 801f00a <_svfiprintf_r+0x32>
 801eff0:	2140      	movs	r1, #64	; 0x40
 801eff2:	f7fc f859 	bl	801b0a8 <_malloc_r>
 801eff6:	6028      	str	r0, [r5, #0]
 801eff8:	6128      	str	r0, [r5, #16]
 801effa:	b920      	cbnz	r0, 801f006 <_svfiprintf_r+0x2e>
 801effc:	230c      	movs	r3, #12
 801effe:	603b      	str	r3, [r7, #0]
 801f000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f004:	e0d1      	b.n	801f1aa <_svfiprintf_r+0x1d2>
 801f006:	2340      	movs	r3, #64	; 0x40
 801f008:	616b      	str	r3, [r5, #20]
 801f00a:	2300      	movs	r3, #0
 801f00c:	9309      	str	r3, [sp, #36]	; 0x24
 801f00e:	2320      	movs	r3, #32
 801f010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f014:	f8cd 800c 	str.w	r8, [sp, #12]
 801f018:	2330      	movs	r3, #48	; 0x30
 801f01a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f1c4 <_svfiprintf_r+0x1ec>
 801f01e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f022:	f04f 0901 	mov.w	r9, #1
 801f026:	4623      	mov	r3, r4
 801f028:	469a      	mov	sl, r3
 801f02a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f02e:	b10a      	cbz	r2, 801f034 <_svfiprintf_r+0x5c>
 801f030:	2a25      	cmp	r2, #37	; 0x25
 801f032:	d1f9      	bne.n	801f028 <_svfiprintf_r+0x50>
 801f034:	ebba 0b04 	subs.w	fp, sl, r4
 801f038:	d00b      	beq.n	801f052 <_svfiprintf_r+0x7a>
 801f03a:	465b      	mov	r3, fp
 801f03c:	4622      	mov	r2, r4
 801f03e:	4629      	mov	r1, r5
 801f040:	4638      	mov	r0, r7
 801f042:	f7ff ff6e 	bl	801ef22 <__ssputs_r>
 801f046:	3001      	adds	r0, #1
 801f048:	f000 80aa 	beq.w	801f1a0 <_svfiprintf_r+0x1c8>
 801f04c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f04e:	445a      	add	r2, fp
 801f050:	9209      	str	r2, [sp, #36]	; 0x24
 801f052:	f89a 3000 	ldrb.w	r3, [sl]
 801f056:	2b00      	cmp	r3, #0
 801f058:	f000 80a2 	beq.w	801f1a0 <_svfiprintf_r+0x1c8>
 801f05c:	2300      	movs	r3, #0
 801f05e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f066:	f10a 0a01 	add.w	sl, sl, #1
 801f06a:	9304      	str	r3, [sp, #16]
 801f06c:	9307      	str	r3, [sp, #28]
 801f06e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f072:	931a      	str	r3, [sp, #104]	; 0x68
 801f074:	4654      	mov	r4, sl
 801f076:	2205      	movs	r2, #5
 801f078:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f07c:	4851      	ldr	r0, [pc, #324]	; (801f1c4 <_svfiprintf_r+0x1ec>)
 801f07e:	f7e1 f937 	bl	80002f0 <memchr>
 801f082:	9a04      	ldr	r2, [sp, #16]
 801f084:	b9d8      	cbnz	r0, 801f0be <_svfiprintf_r+0xe6>
 801f086:	06d0      	lsls	r0, r2, #27
 801f088:	bf44      	itt	mi
 801f08a:	2320      	movmi	r3, #32
 801f08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f090:	0711      	lsls	r1, r2, #28
 801f092:	bf44      	itt	mi
 801f094:	232b      	movmi	r3, #43	; 0x2b
 801f096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f09a:	f89a 3000 	ldrb.w	r3, [sl]
 801f09e:	2b2a      	cmp	r3, #42	; 0x2a
 801f0a0:	d015      	beq.n	801f0ce <_svfiprintf_r+0xf6>
 801f0a2:	9a07      	ldr	r2, [sp, #28]
 801f0a4:	4654      	mov	r4, sl
 801f0a6:	2000      	movs	r0, #0
 801f0a8:	f04f 0c0a 	mov.w	ip, #10
 801f0ac:	4621      	mov	r1, r4
 801f0ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f0b2:	3b30      	subs	r3, #48	; 0x30
 801f0b4:	2b09      	cmp	r3, #9
 801f0b6:	d94e      	bls.n	801f156 <_svfiprintf_r+0x17e>
 801f0b8:	b1b0      	cbz	r0, 801f0e8 <_svfiprintf_r+0x110>
 801f0ba:	9207      	str	r2, [sp, #28]
 801f0bc:	e014      	b.n	801f0e8 <_svfiprintf_r+0x110>
 801f0be:	eba0 0308 	sub.w	r3, r0, r8
 801f0c2:	fa09 f303 	lsl.w	r3, r9, r3
 801f0c6:	4313      	orrs	r3, r2
 801f0c8:	9304      	str	r3, [sp, #16]
 801f0ca:	46a2      	mov	sl, r4
 801f0cc:	e7d2      	b.n	801f074 <_svfiprintf_r+0x9c>
 801f0ce:	9b03      	ldr	r3, [sp, #12]
 801f0d0:	1d19      	adds	r1, r3, #4
 801f0d2:	681b      	ldr	r3, [r3, #0]
 801f0d4:	9103      	str	r1, [sp, #12]
 801f0d6:	2b00      	cmp	r3, #0
 801f0d8:	bfbb      	ittet	lt
 801f0da:	425b      	neglt	r3, r3
 801f0dc:	f042 0202 	orrlt.w	r2, r2, #2
 801f0e0:	9307      	strge	r3, [sp, #28]
 801f0e2:	9307      	strlt	r3, [sp, #28]
 801f0e4:	bfb8      	it	lt
 801f0e6:	9204      	strlt	r2, [sp, #16]
 801f0e8:	7823      	ldrb	r3, [r4, #0]
 801f0ea:	2b2e      	cmp	r3, #46	; 0x2e
 801f0ec:	d10c      	bne.n	801f108 <_svfiprintf_r+0x130>
 801f0ee:	7863      	ldrb	r3, [r4, #1]
 801f0f0:	2b2a      	cmp	r3, #42	; 0x2a
 801f0f2:	d135      	bne.n	801f160 <_svfiprintf_r+0x188>
 801f0f4:	9b03      	ldr	r3, [sp, #12]
 801f0f6:	1d1a      	adds	r2, r3, #4
 801f0f8:	681b      	ldr	r3, [r3, #0]
 801f0fa:	9203      	str	r2, [sp, #12]
 801f0fc:	2b00      	cmp	r3, #0
 801f0fe:	bfb8      	it	lt
 801f100:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801f104:	3402      	adds	r4, #2
 801f106:	9305      	str	r3, [sp, #20]
 801f108:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f1d4 <_svfiprintf_r+0x1fc>
 801f10c:	7821      	ldrb	r1, [r4, #0]
 801f10e:	2203      	movs	r2, #3
 801f110:	4650      	mov	r0, sl
 801f112:	f7e1 f8ed 	bl	80002f0 <memchr>
 801f116:	b140      	cbz	r0, 801f12a <_svfiprintf_r+0x152>
 801f118:	2340      	movs	r3, #64	; 0x40
 801f11a:	eba0 000a 	sub.w	r0, r0, sl
 801f11e:	fa03 f000 	lsl.w	r0, r3, r0
 801f122:	9b04      	ldr	r3, [sp, #16]
 801f124:	4303      	orrs	r3, r0
 801f126:	3401      	adds	r4, #1
 801f128:	9304      	str	r3, [sp, #16]
 801f12a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f12e:	4826      	ldr	r0, [pc, #152]	; (801f1c8 <_svfiprintf_r+0x1f0>)
 801f130:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f134:	2206      	movs	r2, #6
 801f136:	f7e1 f8db 	bl	80002f0 <memchr>
 801f13a:	2800      	cmp	r0, #0
 801f13c:	d038      	beq.n	801f1b0 <_svfiprintf_r+0x1d8>
 801f13e:	4b23      	ldr	r3, [pc, #140]	; (801f1cc <_svfiprintf_r+0x1f4>)
 801f140:	bb1b      	cbnz	r3, 801f18a <_svfiprintf_r+0x1b2>
 801f142:	9b03      	ldr	r3, [sp, #12]
 801f144:	3307      	adds	r3, #7
 801f146:	f023 0307 	bic.w	r3, r3, #7
 801f14a:	3308      	adds	r3, #8
 801f14c:	9303      	str	r3, [sp, #12]
 801f14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f150:	4433      	add	r3, r6
 801f152:	9309      	str	r3, [sp, #36]	; 0x24
 801f154:	e767      	b.n	801f026 <_svfiprintf_r+0x4e>
 801f156:	fb0c 3202 	mla	r2, ip, r2, r3
 801f15a:	460c      	mov	r4, r1
 801f15c:	2001      	movs	r0, #1
 801f15e:	e7a5      	b.n	801f0ac <_svfiprintf_r+0xd4>
 801f160:	2300      	movs	r3, #0
 801f162:	3401      	adds	r4, #1
 801f164:	9305      	str	r3, [sp, #20]
 801f166:	4619      	mov	r1, r3
 801f168:	f04f 0c0a 	mov.w	ip, #10
 801f16c:	4620      	mov	r0, r4
 801f16e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f172:	3a30      	subs	r2, #48	; 0x30
 801f174:	2a09      	cmp	r2, #9
 801f176:	d903      	bls.n	801f180 <_svfiprintf_r+0x1a8>
 801f178:	2b00      	cmp	r3, #0
 801f17a:	d0c5      	beq.n	801f108 <_svfiprintf_r+0x130>
 801f17c:	9105      	str	r1, [sp, #20]
 801f17e:	e7c3      	b.n	801f108 <_svfiprintf_r+0x130>
 801f180:	fb0c 2101 	mla	r1, ip, r1, r2
 801f184:	4604      	mov	r4, r0
 801f186:	2301      	movs	r3, #1
 801f188:	e7f0      	b.n	801f16c <_svfiprintf_r+0x194>
 801f18a:	ab03      	add	r3, sp, #12
 801f18c:	9300      	str	r3, [sp, #0]
 801f18e:	462a      	mov	r2, r5
 801f190:	4b0f      	ldr	r3, [pc, #60]	; (801f1d0 <_svfiprintf_r+0x1f8>)
 801f192:	a904      	add	r1, sp, #16
 801f194:	4638      	mov	r0, r7
 801f196:	f7fc f873 	bl	801b280 <_printf_float>
 801f19a:	1c42      	adds	r2, r0, #1
 801f19c:	4606      	mov	r6, r0
 801f19e:	d1d6      	bne.n	801f14e <_svfiprintf_r+0x176>
 801f1a0:	89ab      	ldrh	r3, [r5, #12]
 801f1a2:	065b      	lsls	r3, r3, #25
 801f1a4:	f53f af2c 	bmi.w	801f000 <_svfiprintf_r+0x28>
 801f1a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f1aa:	b01d      	add	sp, #116	; 0x74
 801f1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1b0:	ab03      	add	r3, sp, #12
 801f1b2:	9300      	str	r3, [sp, #0]
 801f1b4:	462a      	mov	r2, r5
 801f1b6:	4b06      	ldr	r3, [pc, #24]	; (801f1d0 <_svfiprintf_r+0x1f8>)
 801f1b8:	a904      	add	r1, sp, #16
 801f1ba:	4638      	mov	r0, r7
 801f1bc:	f7fc faec 	bl	801b798 <_printf_i>
 801f1c0:	e7eb      	b.n	801f19a <_svfiprintf_r+0x1c2>
 801f1c2:	bf00      	nop
 801f1c4:	08022db4 	.word	0x08022db4
 801f1c8:	08022dbe 	.word	0x08022dbe
 801f1cc:	0801b281 	.word	0x0801b281
 801f1d0:	0801ef23 	.word	0x0801ef23
 801f1d4:	08022dba 	.word	0x08022dba

0801f1d8 <__sfputc_r>:
 801f1d8:	6893      	ldr	r3, [r2, #8]
 801f1da:	3b01      	subs	r3, #1
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	b410      	push	{r4}
 801f1e0:	6093      	str	r3, [r2, #8]
 801f1e2:	da08      	bge.n	801f1f6 <__sfputc_r+0x1e>
 801f1e4:	6994      	ldr	r4, [r2, #24]
 801f1e6:	42a3      	cmp	r3, r4
 801f1e8:	db01      	blt.n	801f1ee <__sfputc_r+0x16>
 801f1ea:	290a      	cmp	r1, #10
 801f1ec:	d103      	bne.n	801f1f6 <__sfputc_r+0x1e>
 801f1ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f1f2:	f7fd bd17 	b.w	801cc24 <__swbuf_r>
 801f1f6:	6813      	ldr	r3, [r2, #0]
 801f1f8:	1c58      	adds	r0, r3, #1
 801f1fa:	6010      	str	r0, [r2, #0]
 801f1fc:	7019      	strb	r1, [r3, #0]
 801f1fe:	4608      	mov	r0, r1
 801f200:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f204:	4770      	bx	lr

0801f206 <__sfputs_r>:
 801f206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f208:	4606      	mov	r6, r0
 801f20a:	460f      	mov	r7, r1
 801f20c:	4614      	mov	r4, r2
 801f20e:	18d5      	adds	r5, r2, r3
 801f210:	42ac      	cmp	r4, r5
 801f212:	d101      	bne.n	801f218 <__sfputs_r+0x12>
 801f214:	2000      	movs	r0, #0
 801f216:	e007      	b.n	801f228 <__sfputs_r+0x22>
 801f218:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f21c:	463a      	mov	r2, r7
 801f21e:	4630      	mov	r0, r6
 801f220:	f7ff ffda 	bl	801f1d8 <__sfputc_r>
 801f224:	1c43      	adds	r3, r0, #1
 801f226:	d1f3      	bne.n	801f210 <__sfputs_r+0xa>
 801f228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f22c <_vfiprintf_r>:
 801f22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f230:	460d      	mov	r5, r1
 801f232:	b09d      	sub	sp, #116	; 0x74
 801f234:	4614      	mov	r4, r2
 801f236:	4698      	mov	r8, r3
 801f238:	4606      	mov	r6, r0
 801f23a:	b118      	cbz	r0, 801f244 <_vfiprintf_r+0x18>
 801f23c:	6983      	ldr	r3, [r0, #24]
 801f23e:	b90b      	cbnz	r3, 801f244 <_vfiprintf_r+0x18>
 801f240:	f7fe fcfc 	bl	801dc3c <__sinit>
 801f244:	4b89      	ldr	r3, [pc, #548]	; (801f46c <_vfiprintf_r+0x240>)
 801f246:	429d      	cmp	r5, r3
 801f248:	d11b      	bne.n	801f282 <_vfiprintf_r+0x56>
 801f24a:	6875      	ldr	r5, [r6, #4]
 801f24c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f24e:	07d9      	lsls	r1, r3, #31
 801f250:	d405      	bmi.n	801f25e <_vfiprintf_r+0x32>
 801f252:	89ab      	ldrh	r3, [r5, #12]
 801f254:	059a      	lsls	r2, r3, #22
 801f256:	d402      	bmi.n	801f25e <_vfiprintf_r+0x32>
 801f258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f25a:	f7ff f912 	bl	801e482 <__retarget_lock_acquire_recursive>
 801f25e:	89ab      	ldrh	r3, [r5, #12]
 801f260:	071b      	lsls	r3, r3, #28
 801f262:	d501      	bpl.n	801f268 <_vfiprintf_r+0x3c>
 801f264:	692b      	ldr	r3, [r5, #16]
 801f266:	b9eb      	cbnz	r3, 801f2a4 <_vfiprintf_r+0x78>
 801f268:	4629      	mov	r1, r5
 801f26a:	4630      	mov	r0, r6
 801f26c:	f7fd fd2c 	bl	801ccc8 <__swsetup_r>
 801f270:	b1c0      	cbz	r0, 801f2a4 <_vfiprintf_r+0x78>
 801f272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f274:	07dc      	lsls	r4, r3, #31
 801f276:	d50e      	bpl.n	801f296 <_vfiprintf_r+0x6a>
 801f278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f27c:	b01d      	add	sp, #116	; 0x74
 801f27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f282:	4b7b      	ldr	r3, [pc, #492]	; (801f470 <_vfiprintf_r+0x244>)
 801f284:	429d      	cmp	r5, r3
 801f286:	d101      	bne.n	801f28c <_vfiprintf_r+0x60>
 801f288:	68b5      	ldr	r5, [r6, #8]
 801f28a:	e7df      	b.n	801f24c <_vfiprintf_r+0x20>
 801f28c:	4b79      	ldr	r3, [pc, #484]	; (801f474 <_vfiprintf_r+0x248>)
 801f28e:	429d      	cmp	r5, r3
 801f290:	bf08      	it	eq
 801f292:	68f5      	ldreq	r5, [r6, #12]
 801f294:	e7da      	b.n	801f24c <_vfiprintf_r+0x20>
 801f296:	89ab      	ldrh	r3, [r5, #12]
 801f298:	0598      	lsls	r0, r3, #22
 801f29a:	d4ed      	bmi.n	801f278 <_vfiprintf_r+0x4c>
 801f29c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f29e:	f7ff f8f1 	bl	801e484 <__retarget_lock_release_recursive>
 801f2a2:	e7e9      	b.n	801f278 <_vfiprintf_r+0x4c>
 801f2a4:	2300      	movs	r3, #0
 801f2a6:	9309      	str	r3, [sp, #36]	; 0x24
 801f2a8:	2320      	movs	r3, #32
 801f2aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f2ae:	f8cd 800c 	str.w	r8, [sp, #12]
 801f2b2:	2330      	movs	r3, #48	; 0x30
 801f2b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f478 <_vfiprintf_r+0x24c>
 801f2b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f2bc:	f04f 0901 	mov.w	r9, #1
 801f2c0:	4623      	mov	r3, r4
 801f2c2:	469a      	mov	sl, r3
 801f2c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f2c8:	b10a      	cbz	r2, 801f2ce <_vfiprintf_r+0xa2>
 801f2ca:	2a25      	cmp	r2, #37	; 0x25
 801f2cc:	d1f9      	bne.n	801f2c2 <_vfiprintf_r+0x96>
 801f2ce:	ebba 0b04 	subs.w	fp, sl, r4
 801f2d2:	d00b      	beq.n	801f2ec <_vfiprintf_r+0xc0>
 801f2d4:	465b      	mov	r3, fp
 801f2d6:	4622      	mov	r2, r4
 801f2d8:	4629      	mov	r1, r5
 801f2da:	4630      	mov	r0, r6
 801f2dc:	f7ff ff93 	bl	801f206 <__sfputs_r>
 801f2e0:	3001      	adds	r0, #1
 801f2e2:	f000 80aa 	beq.w	801f43a <_vfiprintf_r+0x20e>
 801f2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f2e8:	445a      	add	r2, fp
 801f2ea:	9209      	str	r2, [sp, #36]	; 0x24
 801f2ec:	f89a 3000 	ldrb.w	r3, [sl]
 801f2f0:	2b00      	cmp	r3, #0
 801f2f2:	f000 80a2 	beq.w	801f43a <_vfiprintf_r+0x20e>
 801f2f6:	2300      	movs	r3, #0
 801f2f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f2fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f300:	f10a 0a01 	add.w	sl, sl, #1
 801f304:	9304      	str	r3, [sp, #16]
 801f306:	9307      	str	r3, [sp, #28]
 801f308:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f30c:	931a      	str	r3, [sp, #104]	; 0x68
 801f30e:	4654      	mov	r4, sl
 801f310:	2205      	movs	r2, #5
 801f312:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f316:	4858      	ldr	r0, [pc, #352]	; (801f478 <_vfiprintf_r+0x24c>)
 801f318:	f7e0 ffea 	bl	80002f0 <memchr>
 801f31c:	9a04      	ldr	r2, [sp, #16]
 801f31e:	b9d8      	cbnz	r0, 801f358 <_vfiprintf_r+0x12c>
 801f320:	06d1      	lsls	r1, r2, #27
 801f322:	bf44      	itt	mi
 801f324:	2320      	movmi	r3, #32
 801f326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f32a:	0713      	lsls	r3, r2, #28
 801f32c:	bf44      	itt	mi
 801f32e:	232b      	movmi	r3, #43	; 0x2b
 801f330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f334:	f89a 3000 	ldrb.w	r3, [sl]
 801f338:	2b2a      	cmp	r3, #42	; 0x2a
 801f33a:	d015      	beq.n	801f368 <_vfiprintf_r+0x13c>
 801f33c:	9a07      	ldr	r2, [sp, #28]
 801f33e:	4654      	mov	r4, sl
 801f340:	2000      	movs	r0, #0
 801f342:	f04f 0c0a 	mov.w	ip, #10
 801f346:	4621      	mov	r1, r4
 801f348:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f34c:	3b30      	subs	r3, #48	; 0x30
 801f34e:	2b09      	cmp	r3, #9
 801f350:	d94e      	bls.n	801f3f0 <_vfiprintf_r+0x1c4>
 801f352:	b1b0      	cbz	r0, 801f382 <_vfiprintf_r+0x156>
 801f354:	9207      	str	r2, [sp, #28]
 801f356:	e014      	b.n	801f382 <_vfiprintf_r+0x156>
 801f358:	eba0 0308 	sub.w	r3, r0, r8
 801f35c:	fa09 f303 	lsl.w	r3, r9, r3
 801f360:	4313      	orrs	r3, r2
 801f362:	9304      	str	r3, [sp, #16]
 801f364:	46a2      	mov	sl, r4
 801f366:	e7d2      	b.n	801f30e <_vfiprintf_r+0xe2>
 801f368:	9b03      	ldr	r3, [sp, #12]
 801f36a:	1d19      	adds	r1, r3, #4
 801f36c:	681b      	ldr	r3, [r3, #0]
 801f36e:	9103      	str	r1, [sp, #12]
 801f370:	2b00      	cmp	r3, #0
 801f372:	bfbb      	ittet	lt
 801f374:	425b      	neglt	r3, r3
 801f376:	f042 0202 	orrlt.w	r2, r2, #2
 801f37a:	9307      	strge	r3, [sp, #28]
 801f37c:	9307      	strlt	r3, [sp, #28]
 801f37e:	bfb8      	it	lt
 801f380:	9204      	strlt	r2, [sp, #16]
 801f382:	7823      	ldrb	r3, [r4, #0]
 801f384:	2b2e      	cmp	r3, #46	; 0x2e
 801f386:	d10c      	bne.n	801f3a2 <_vfiprintf_r+0x176>
 801f388:	7863      	ldrb	r3, [r4, #1]
 801f38a:	2b2a      	cmp	r3, #42	; 0x2a
 801f38c:	d135      	bne.n	801f3fa <_vfiprintf_r+0x1ce>
 801f38e:	9b03      	ldr	r3, [sp, #12]
 801f390:	1d1a      	adds	r2, r3, #4
 801f392:	681b      	ldr	r3, [r3, #0]
 801f394:	9203      	str	r2, [sp, #12]
 801f396:	2b00      	cmp	r3, #0
 801f398:	bfb8      	it	lt
 801f39a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801f39e:	3402      	adds	r4, #2
 801f3a0:	9305      	str	r3, [sp, #20]
 801f3a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f488 <_vfiprintf_r+0x25c>
 801f3a6:	7821      	ldrb	r1, [r4, #0]
 801f3a8:	2203      	movs	r2, #3
 801f3aa:	4650      	mov	r0, sl
 801f3ac:	f7e0 ffa0 	bl	80002f0 <memchr>
 801f3b0:	b140      	cbz	r0, 801f3c4 <_vfiprintf_r+0x198>
 801f3b2:	2340      	movs	r3, #64	; 0x40
 801f3b4:	eba0 000a 	sub.w	r0, r0, sl
 801f3b8:	fa03 f000 	lsl.w	r0, r3, r0
 801f3bc:	9b04      	ldr	r3, [sp, #16]
 801f3be:	4303      	orrs	r3, r0
 801f3c0:	3401      	adds	r4, #1
 801f3c2:	9304      	str	r3, [sp, #16]
 801f3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f3c8:	482c      	ldr	r0, [pc, #176]	; (801f47c <_vfiprintf_r+0x250>)
 801f3ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f3ce:	2206      	movs	r2, #6
 801f3d0:	f7e0 ff8e 	bl	80002f0 <memchr>
 801f3d4:	2800      	cmp	r0, #0
 801f3d6:	d03f      	beq.n	801f458 <_vfiprintf_r+0x22c>
 801f3d8:	4b29      	ldr	r3, [pc, #164]	; (801f480 <_vfiprintf_r+0x254>)
 801f3da:	bb1b      	cbnz	r3, 801f424 <_vfiprintf_r+0x1f8>
 801f3dc:	9b03      	ldr	r3, [sp, #12]
 801f3de:	3307      	adds	r3, #7
 801f3e0:	f023 0307 	bic.w	r3, r3, #7
 801f3e4:	3308      	adds	r3, #8
 801f3e6:	9303      	str	r3, [sp, #12]
 801f3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3ea:	443b      	add	r3, r7
 801f3ec:	9309      	str	r3, [sp, #36]	; 0x24
 801f3ee:	e767      	b.n	801f2c0 <_vfiprintf_r+0x94>
 801f3f0:	fb0c 3202 	mla	r2, ip, r2, r3
 801f3f4:	460c      	mov	r4, r1
 801f3f6:	2001      	movs	r0, #1
 801f3f8:	e7a5      	b.n	801f346 <_vfiprintf_r+0x11a>
 801f3fa:	2300      	movs	r3, #0
 801f3fc:	3401      	adds	r4, #1
 801f3fe:	9305      	str	r3, [sp, #20]
 801f400:	4619      	mov	r1, r3
 801f402:	f04f 0c0a 	mov.w	ip, #10
 801f406:	4620      	mov	r0, r4
 801f408:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f40c:	3a30      	subs	r2, #48	; 0x30
 801f40e:	2a09      	cmp	r2, #9
 801f410:	d903      	bls.n	801f41a <_vfiprintf_r+0x1ee>
 801f412:	2b00      	cmp	r3, #0
 801f414:	d0c5      	beq.n	801f3a2 <_vfiprintf_r+0x176>
 801f416:	9105      	str	r1, [sp, #20]
 801f418:	e7c3      	b.n	801f3a2 <_vfiprintf_r+0x176>
 801f41a:	fb0c 2101 	mla	r1, ip, r1, r2
 801f41e:	4604      	mov	r4, r0
 801f420:	2301      	movs	r3, #1
 801f422:	e7f0      	b.n	801f406 <_vfiprintf_r+0x1da>
 801f424:	ab03      	add	r3, sp, #12
 801f426:	9300      	str	r3, [sp, #0]
 801f428:	462a      	mov	r2, r5
 801f42a:	4b16      	ldr	r3, [pc, #88]	; (801f484 <_vfiprintf_r+0x258>)
 801f42c:	a904      	add	r1, sp, #16
 801f42e:	4630      	mov	r0, r6
 801f430:	f7fb ff26 	bl	801b280 <_printf_float>
 801f434:	4607      	mov	r7, r0
 801f436:	1c78      	adds	r0, r7, #1
 801f438:	d1d6      	bne.n	801f3e8 <_vfiprintf_r+0x1bc>
 801f43a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f43c:	07d9      	lsls	r1, r3, #31
 801f43e:	d405      	bmi.n	801f44c <_vfiprintf_r+0x220>
 801f440:	89ab      	ldrh	r3, [r5, #12]
 801f442:	059a      	lsls	r2, r3, #22
 801f444:	d402      	bmi.n	801f44c <_vfiprintf_r+0x220>
 801f446:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f448:	f7ff f81c 	bl	801e484 <__retarget_lock_release_recursive>
 801f44c:	89ab      	ldrh	r3, [r5, #12]
 801f44e:	065b      	lsls	r3, r3, #25
 801f450:	f53f af12 	bmi.w	801f278 <_vfiprintf_r+0x4c>
 801f454:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f456:	e711      	b.n	801f27c <_vfiprintf_r+0x50>
 801f458:	ab03      	add	r3, sp, #12
 801f45a:	9300      	str	r3, [sp, #0]
 801f45c:	462a      	mov	r2, r5
 801f45e:	4b09      	ldr	r3, [pc, #36]	; (801f484 <_vfiprintf_r+0x258>)
 801f460:	a904      	add	r1, sp, #16
 801f462:	4630      	mov	r0, r6
 801f464:	f7fc f998 	bl	801b798 <_printf_i>
 801f468:	e7e4      	b.n	801f434 <_vfiprintf_r+0x208>
 801f46a:	bf00      	nop
 801f46c:	08022b94 	.word	0x08022b94
 801f470:	08022bb4 	.word	0x08022bb4
 801f474:	08022b74 	.word	0x08022b74
 801f478:	08022db4 	.word	0x08022db4
 801f47c:	08022dbe 	.word	0x08022dbe
 801f480:	0801b281 	.word	0x0801b281
 801f484:	0801f207 	.word	0x0801f207
 801f488:	08022dba 	.word	0x08022dba
 801f48c:	00000000 	.word	0x00000000

0801f490 <nan>:
 801f490:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f498 <nan+0x8>
 801f494:	4770      	bx	lr
 801f496:	bf00      	nop
 801f498:	00000000 	.word	0x00000000
 801f49c:	7ff80000 	.word	0x7ff80000

0801f4a0 <__sread>:
 801f4a0:	b510      	push	{r4, lr}
 801f4a2:	460c      	mov	r4, r1
 801f4a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f4a8:	f000 f8ce 	bl	801f648 <_read_r>
 801f4ac:	2800      	cmp	r0, #0
 801f4ae:	bfab      	itete	ge
 801f4b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f4b2:	89a3      	ldrhlt	r3, [r4, #12]
 801f4b4:	181b      	addge	r3, r3, r0
 801f4b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f4ba:	bfac      	ite	ge
 801f4bc:	6563      	strge	r3, [r4, #84]	; 0x54
 801f4be:	81a3      	strhlt	r3, [r4, #12]
 801f4c0:	bd10      	pop	{r4, pc}

0801f4c2 <__swrite>:
 801f4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f4c6:	461f      	mov	r7, r3
 801f4c8:	898b      	ldrh	r3, [r1, #12]
 801f4ca:	05db      	lsls	r3, r3, #23
 801f4cc:	4605      	mov	r5, r0
 801f4ce:	460c      	mov	r4, r1
 801f4d0:	4616      	mov	r6, r2
 801f4d2:	d505      	bpl.n	801f4e0 <__swrite+0x1e>
 801f4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f4d8:	2302      	movs	r3, #2
 801f4da:	2200      	movs	r2, #0
 801f4dc:	f000 f87c 	bl	801f5d8 <_lseek_r>
 801f4e0:	89a3      	ldrh	r3, [r4, #12]
 801f4e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f4e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f4ea:	81a3      	strh	r3, [r4, #12]
 801f4ec:	4632      	mov	r2, r6
 801f4ee:	463b      	mov	r3, r7
 801f4f0:	4628      	mov	r0, r5
 801f4f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f4f6:	f000 b823 	b.w	801f540 <_write_r>

0801f4fa <__sseek>:
 801f4fa:	b510      	push	{r4, lr}
 801f4fc:	460c      	mov	r4, r1
 801f4fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f502:	f000 f869 	bl	801f5d8 <_lseek_r>
 801f506:	1c43      	adds	r3, r0, #1
 801f508:	89a3      	ldrh	r3, [r4, #12]
 801f50a:	bf15      	itete	ne
 801f50c:	6560      	strne	r0, [r4, #84]	; 0x54
 801f50e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f512:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f516:	81a3      	strheq	r3, [r4, #12]
 801f518:	bf18      	it	ne
 801f51a:	81a3      	strhne	r3, [r4, #12]
 801f51c:	bd10      	pop	{r4, pc}

0801f51e <__sclose>:
 801f51e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f522:	f000 b827 	b.w	801f574 <_close_r>

0801f526 <__ascii_wctomb>:
 801f526:	b149      	cbz	r1, 801f53c <__ascii_wctomb+0x16>
 801f528:	2aff      	cmp	r2, #255	; 0xff
 801f52a:	bf85      	ittet	hi
 801f52c:	238a      	movhi	r3, #138	; 0x8a
 801f52e:	6003      	strhi	r3, [r0, #0]
 801f530:	700a      	strbls	r2, [r1, #0]
 801f532:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801f536:	bf98      	it	ls
 801f538:	2001      	movls	r0, #1
 801f53a:	4770      	bx	lr
 801f53c:	4608      	mov	r0, r1
 801f53e:	4770      	bx	lr

0801f540 <_write_r>:
 801f540:	b538      	push	{r3, r4, r5, lr}
 801f542:	4d07      	ldr	r5, [pc, #28]	; (801f560 <_write_r+0x20>)
 801f544:	4604      	mov	r4, r0
 801f546:	4608      	mov	r0, r1
 801f548:	4611      	mov	r1, r2
 801f54a:	2200      	movs	r2, #0
 801f54c:	602a      	str	r2, [r5, #0]
 801f54e:	461a      	mov	r2, r3
 801f550:	f7e2 fcb1 	bl	8001eb6 <_write>
 801f554:	1c43      	adds	r3, r0, #1
 801f556:	d102      	bne.n	801f55e <_write_r+0x1e>
 801f558:	682b      	ldr	r3, [r5, #0]
 801f55a:	b103      	cbz	r3, 801f55e <_write_r+0x1e>
 801f55c:	6023      	str	r3, [r4, #0]
 801f55e:	bd38      	pop	{r3, r4, r5, pc}
 801f560:	24009a68 	.word	0x24009a68

0801f564 <abort>:
 801f564:	b508      	push	{r3, lr}
 801f566:	2006      	movs	r0, #6
 801f568:	f000 f8a8 	bl	801f6bc <raise>
 801f56c:	2001      	movs	r0, #1
 801f56e:	f7e2 fc7b 	bl	8001e68 <_exit>
	...

0801f574 <_close_r>:
 801f574:	b538      	push	{r3, r4, r5, lr}
 801f576:	4d06      	ldr	r5, [pc, #24]	; (801f590 <_close_r+0x1c>)
 801f578:	2300      	movs	r3, #0
 801f57a:	4604      	mov	r4, r0
 801f57c:	4608      	mov	r0, r1
 801f57e:	602b      	str	r3, [r5, #0]
 801f580:	f7e2 fcb5 	bl	8001eee <_close>
 801f584:	1c43      	adds	r3, r0, #1
 801f586:	d102      	bne.n	801f58e <_close_r+0x1a>
 801f588:	682b      	ldr	r3, [r5, #0]
 801f58a:	b103      	cbz	r3, 801f58e <_close_r+0x1a>
 801f58c:	6023      	str	r3, [r4, #0]
 801f58e:	bd38      	pop	{r3, r4, r5, pc}
 801f590:	24009a68 	.word	0x24009a68

0801f594 <_fstat_r>:
 801f594:	b538      	push	{r3, r4, r5, lr}
 801f596:	4d07      	ldr	r5, [pc, #28]	; (801f5b4 <_fstat_r+0x20>)
 801f598:	2300      	movs	r3, #0
 801f59a:	4604      	mov	r4, r0
 801f59c:	4608      	mov	r0, r1
 801f59e:	4611      	mov	r1, r2
 801f5a0:	602b      	str	r3, [r5, #0]
 801f5a2:	f7e2 fcb0 	bl	8001f06 <_fstat>
 801f5a6:	1c43      	adds	r3, r0, #1
 801f5a8:	d102      	bne.n	801f5b0 <_fstat_r+0x1c>
 801f5aa:	682b      	ldr	r3, [r5, #0]
 801f5ac:	b103      	cbz	r3, 801f5b0 <_fstat_r+0x1c>
 801f5ae:	6023      	str	r3, [r4, #0]
 801f5b0:	bd38      	pop	{r3, r4, r5, pc}
 801f5b2:	bf00      	nop
 801f5b4:	24009a68 	.word	0x24009a68

0801f5b8 <_isatty_r>:
 801f5b8:	b538      	push	{r3, r4, r5, lr}
 801f5ba:	4d06      	ldr	r5, [pc, #24]	; (801f5d4 <_isatty_r+0x1c>)
 801f5bc:	2300      	movs	r3, #0
 801f5be:	4604      	mov	r4, r0
 801f5c0:	4608      	mov	r0, r1
 801f5c2:	602b      	str	r3, [r5, #0]
 801f5c4:	f7e2 fcaf 	bl	8001f26 <_isatty>
 801f5c8:	1c43      	adds	r3, r0, #1
 801f5ca:	d102      	bne.n	801f5d2 <_isatty_r+0x1a>
 801f5cc:	682b      	ldr	r3, [r5, #0]
 801f5ce:	b103      	cbz	r3, 801f5d2 <_isatty_r+0x1a>
 801f5d0:	6023      	str	r3, [r4, #0]
 801f5d2:	bd38      	pop	{r3, r4, r5, pc}
 801f5d4:	24009a68 	.word	0x24009a68

0801f5d8 <_lseek_r>:
 801f5d8:	b538      	push	{r3, r4, r5, lr}
 801f5da:	4d07      	ldr	r5, [pc, #28]	; (801f5f8 <_lseek_r+0x20>)
 801f5dc:	4604      	mov	r4, r0
 801f5de:	4608      	mov	r0, r1
 801f5e0:	4611      	mov	r1, r2
 801f5e2:	2200      	movs	r2, #0
 801f5e4:	602a      	str	r2, [r5, #0]
 801f5e6:	461a      	mov	r2, r3
 801f5e8:	f7e2 fca8 	bl	8001f3c <_lseek>
 801f5ec:	1c43      	adds	r3, r0, #1
 801f5ee:	d102      	bne.n	801f5f6 <_lseek_r+0x1e>
 801f5f0:	682b      	ldr	r3, [r5, #0]
 801f5f2:	b103      	cbz	r3, 801f5f6 <_lseek_r+0x1e>
 801f5f4:	6023      	str	r3, [r4, #0]
 801f5f6:	bd38      	pop	{r3, r4, r5, pc}
 801f5f8:	24009a68 	.word	0x24009a68

0801f5fc <_realloc_r>:
 801f5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f5fe:	4607      	mov	r7, r0
 801f600:	4614      	mov	r4, r2
 801f602:	460e      	mov	r6, r1
 801f604:	b921      	cbnz	r1, 801f610 <_realloc_r+0x14>
 801f606:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f60a:	4611      	mov	r1, r2
 801f60c:	f7fb bd4c 	b.w	801b0a8 <_malloc_r>
 801f610:	b922      	cbnz	r2, 801f61c <_realloc_r+0x20>
 801f612:	f7fb fcf9 	bl	801b008 <_free_r>
 801f616:	4625      	mov	r5, r4
 801f618:	4628      	mov	r0, r5
 801f61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f61c:	f000 f86a 	bl	801f6f4 <_malloc_usable_size_r>
 801f620:	42a0      	cmp	r0, r4
 801f622:	d20f      	bcs.n	801f644 <_realloc_r+0x48>
 801f624:	4621      	mov	r1, r4
 801f626:	4638      	mov	r0, r7
 801f628:	f7fb fd3e 	bl	801b0a8 <_malloc_r>
 801f62c:	4605      	mov	r5, r0
 801f62e:	2800      	cmp	r0, #0
 801f630:	d0f2      	beq.n	801f618 <_realloc_r+0x1c>
 801f632:	4631      	mov	r1, r6
 801f634:	4622      	mov	r2, r4
 801f636:	f7fb fcb7 	bl	801afa8 <memcpy>
 801f63a:	4631      	mov	r1, r6
 801f63c:	4638      	mov	r0, r7
 801f63e:	f7fb fce3 	bl	801b008 <_free_r>
 801f642:	e7e9      	b.n	801f618 <_realloc_r+0x1c>
 801f644:	4635      	mov	r5, r6
 801f646:	e7e7      	b.n	801f618 <_realloc_r+0x1c>

0801f648 <_read_r>:
 801f648:	b538      	push	{r3, r4, r5, lr}
 801f64a:	4d07      	ldr	r5, [pc, #28]	; (801f668 <_read_r+0x20>)
 801f64c:	4604      	mov	r4, r0
 801f64e:	4608      	mov	r0, r1
 801f650:	4611      	mov	r1, r2
 801f652:	2200      	movs	r2, #0
 801f654:	602a      	str	r2, [r5, #0]
 801f656:	461a      	mov	r2, r3
 801f658:	f7e2 fc10 	bl	8001e7c <_read>
 801f65c:	1c43      	adds	r3, r0, #1
 801f65e:	d102      	bne.n	801f666 <_read_r+0x1e>
 801f660:	682b      	ldr	r3, [r5, #0]
 801f662:	b103      	cbz	r3, 801f666 <_read_r+0x1e>
 801f664:	6023      	str	r3, [r4, #0]
 801f666:	bd38      	pop	{r3, r4, r5, pc}
 801f668:	24009a68 	.word	0x24009a68

0801f66c <_raise_r>:
 801f66c:	291f      	cmp	r1, #31
 801f66e:	b538      	push	{r3, r4, r5, lr}
 801f670:	4604      	mov	r4, r0
 801f672:	460d      	mov	r5, r1
 801f674:	d904      	bls.n	801f680 <_raise_r+0x14>
 801f676:	2316      	movs	r3, #22
 801f678:	6003      	str	r3, [r0, #0]
 801f67a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f67e:	bd38      	pop	{r3, r4, r5, pc}
 801f680:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f682:	b112      	cbz	r2, 801f68a <_raise_r+0x1e>
 801f684:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f688:	b94b      	cbnz	r3, 801f69e <_raise_r+0x32>
 801f68a:	4620      	mov	r0, r4
 801f68c:	f000 f830 	bl	801f6f0 <_getpid_r>
 801f690:	462a      	mov	r2, r5
 801f692:	4601      	mov	r1, r0
 801f694:	4620      	mov	r0, r4
 801f696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f69a:	f000 b817 	b.w	801f6cc <_kill_r>
 801f69e:	2b01      	cmp	r3, #1
 801f6a0:	d00a      	beq.n	801f6b8 <_raise_r+0x4c>
 801f6a2:	1c59      	adds	r1, r3, #1
 801f6a4:	d103      	bne.n	801f6ae <_raise_r+0x42>
 801f6a6:	2316      	movs	r3, #22
 801f6a8:	6003      	str	r3, [r0, #0]
 801f6aa:	2001      	movs	r0, #1
 801f6ac:	e7e7      	b.n	801f67e <_raise_r+0x12>
 801f6ae:	2400      	movs	r4, #0
 801f6b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f6b4:	4628      	mov	r0, r5
 801f6b6:	4798      	blx	r3
 801f6b8:	2000      	movs	r0, #0
 801f6ba:	e7e0      	b.n	801f67e <_raise_r+0x12>

0801f6bc <raise>:
 801f6bc:	4b02      	ldr	r3, [pc, #8]	; (801f6c8 <raise+0xc>)
 801f6be:	4601      	mov	r1, r0
 801f6c0:	6818      	ldr	r0, [r3, #0]
 801f6c2:	f7ff bfd3 	b.w	801f66c <_raise_r>
 801f6c6:	bf00      	nop
 801f6c8:	2400383c 	.word	0x2400383c

0801f6cc <_kill_r>:
 801f6cc:	b538      	push	{r3, r4, r5, lr}
 801f6ce:	4d07      	ldr	r5, [pc, #28]	; (801f6ec <_kill_r+0x20>)
 801f6d0:	2300      	movs	r3, #0
 801f6d2:	4604      	mov	r4, r0
 801f6d4:	4608      	mov	r0, r1
 801f6d6:	4611      	mov	r1, r2
 801f6d8:	602b      	str	r3, [r5, #0]
 801f6da:	f7e2 fbb3 	bl	8001e44 <_kill>
 801f6de:	1c43      	adds	r3, r0, #1
 801f6e0:	d102      	bne.n	801f6e8 <_kill_r+0x1c>
 801f6e2:	682b      	ldr	r3, [r5, #0]
 801f6e4:	b103      	cbz	r3, 801f6e8 <_kill_r+0x1c>
 801f6e6:	6023      	str	r3, [r4, #0]
 801f6e8:	bd38      	pop	{r3, r4, r5, pc}
 801f6ea:	bf00      	nop
 801f6ec:	24009a68 	.word	0x24009a68

0801f6f0 <_getpid_r>:
 801f6f0:	f7e2 bba0 	b.w	8001e34 <_getpid>

0801f6f4 <_malloc_usable_size_r>:
 801f6f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f6f8:	1f18      	subs	r0, r3, #4
 801f6fa:	2b00      	cmp	r3, #0
 801f6fc:	bfbc      	itt	lt
 801f6fe:	580b      	ldrlt	r3, [r1, r0]
 801f700:	18c0      	addlt	r0, r0, r3
 801f702:	4770      	bx	lr

0801f704 <checkint>:
 801f704:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801f708:	2b7e      	cmp	r3, #126	; 0x7e
 801f70a:	dd10      	ble.n	801f72e <checkint+0x2a>
 801f70c:	2b96      	cmp	r3, #150	; 0x96
 801f70e:	dc0c      	bgt.n	801f72a <checkint+0x26>
 801f710:	2201      	movs	r2, #1
 801f712:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801f716:	fa02 f303 	lsl.w	r3, r2, r3
 801f71a:	1e5a      	subs	r2, r3, #1
 801f71c:	4202      	tst	r2, r0
 801f71e:	d106      	bne.n	801f72e <checkint+0x2a>
 801f720:	4203      	tst	r3, r0
 801f722:	bf0c      	ite	eq
 801f724:	2002      	moveq	r0, #2
 801f726:	2001      	movne	r0, #1
 801f728:	4770      	bx	lr
 801f72a:	2002      	movs	r0, #2
 801f72c:	4770      	bx	lr
 801f72e:	2000      	movs	r0, #0
 801f730:	4770      	bx	lr
 801f732:	0000      	movs	r0, r0
 801f734:	0000      	movs	r0, r0
	...

0801f738 <powf>:
 801f738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f73a:	ee10 1a10 	vmov	r1, s0
 801f73e:	ee10 6a90 	vmov	r6, s1
 801f742:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801f746:	0072      	lsls	r2, r6, #1
 801f748:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801f74c:	b085      	sub	sp, #20
 801f74e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 801f752:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 801f756:	d256      	bcs.n	801f806 <powf+0xce>
 801f758:	4298      	cmp	r0, r3
 801f75a:	d256      	bcs.n	801f80a <powf+0xd2>
 801f75c:	2000      	movs	r0, #0
 801f75e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 801f762:	4ea3      	ldr	r6, [pc, #652]	; (801f9f0 <powf+0x2b8>)
 801f764:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801f768:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801f76c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 801f770:	0dd2      	lsrs	r2, r2, #23
 801f772:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 801f776:	05d2      	lsls	r2, r2, #23
 801f778:	1a8b      	subs	r3, r1, r2
 801f77a:	ed97 5b00 	vldr	d5, [r7]
 801f77e:	ee07 3a90 	vmov	s15, r3
 801f782:	15d2      	asrs	r2, r2, #23
 801f784:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801f788:	eea5 6b07 	vfma.f64	d6, d5, d7
 801f78c:	ed97 5b02 	vldr	d5, [r7, #8]
 801f790:	ee26 2b06 	vmul.f64	d2, d6, d6
 801f794:	ee22 1b02 	vmul.f64	d1, d2, d2
 801f798:	ee07 2a90 	vmov	s15, r2
 801f79c:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 801f7a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f7a4:	ee37 7b05 	vadd.f64	d7, d7, d5
 801f7a8:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 801f7ac:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 801f7b0:	eea6 5b04 	vfma.f64	d5, d6, d4
 801f7b4:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 801f7b8:	eea6 4b03 	vfma.f64	d4, d6, d3
 801f7bc:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 801f7c0:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 801f7c4:	eea6 7b03 	vfma.f64	d7, d6, d3
 801f7c8:	eea2 7b04 	vfma.f64	d7, d2, d4
 801f7cc:	eea5 7b01 	vfma.f64	d7, d5, d1
 801f7d0:	ee20 0b07 	vmul.f64	d0, d0, d7
 801f7d4:	ee10 1a90 	vmov	r1, s1
 801f7d8:	2300      	movs	r3, #0
 801f7da:	2700      	movs	r7, #0
 801f7dc:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 801f7e0:	f248 06be 	movw	r6, #32958	; 0x80be
 801f7e4:	429f      	cmp	r7, r3
 801f7e6:	bf08      	it	eq
 801f7e8:	4296      	cmpeq	r6, r2
 801f7ea:	f080 80b1 	bcs.w	801f950 <powf+0x218>
 801f7ee:	ed9f 7b78 	vldr	d7, [pc, #480]	; 801f9d0 <powf+0x298>
 801f7f2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801f7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7fa:	dd79      	ble.n	801f8f0 <powf+0x1b8>
 801f7fc:	b005      	add	sp, #20
 801f7fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f802:	f000 b91f 	b.w	801fa44 <__math_oflowf>
 801f806:	4298      	cmp	r0, r3
 801f808:	d32d      	bcc.n	801f866 <powf+0x12e>
 801f80a:	b952      	cbnz	r2, 801f822 <powf+0xea>
 801f80c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 801f810:	005b      	lsls	r3, r3, #1
 801f812:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 801f816:	f240 80cd 	bls.w	801f9b4 <powf+0x27c>
 801f81a:	ee30 0a20 	vadd.f32	s0, s0, s1
 801f81e:	b005      	add	sp, #20
 801f820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f822:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 801f826:	d105      	bne.n	801f834 <powf+0xfc>
 801f828:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 801f82c:	0076      	lsls	r6, r6, #1
 801f82e:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 801f832:	e7f0      	b.n	801f816 <powf+0xde>
 801f834:	004b      	lsls	r3, r1, #1
 801f836:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801f83a:	d8ee      	bhi.n	801f81a <powf+0xe2>
 801f83c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801f840:	d1eb      	bne.n	801f81a <powf+0xe2>
 801f842:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801f846:	f000 80b5 	beq.w	801f9b4 <powf+0x27c>
 801f84a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801f84e:	ea6f 0606 	mvn.w	r6, r6
 801f852:	bf34      	ite	cc
 801f854:	2300      	movcc	r3, #0
 801f856:	2301      	movcs	r3, #1
 801f858:	0ff6      	lsrs	r6, r6, #31
 801f85a:	42b3      	cmp	r3, r6
 801f85c:	f040 80ad 	bne.w	801f9ba <powf+0x282>
 801f860:	ee20 0aa0 	vmul.f32	s0, s1, s1
 801f864:	e7db      	b.n	801f81e <powf+0xe6>
 801f866:	004f      	lsls	r7, r1, #1
 801f868:	1e7a      	subs	r2, r7, #1
 801f86a:	429a      	cmp	r2, r3
 801f86c:	d31c      	bcc.n	801f8a8 <powf+0x170>
 801f86e:	2900      	cmp	r1, #0
 801f870:	ee20 0a00 	vmul.f32	s0, s0, s0
 801f874:	da0f      	bge.n	801f896 <powf+0x15e>
 801f876:	ee10 0a90 	vmov	r0, s1
 801f87a:	f7ff ff43 	bl	801f704 <checkint>
 801f87e:	2801      	cmp	r0, #1
 801f880:	d109      	bne.n	801f896 <powf+0x15e>
 801f882:	eeb1 0a40 	vneg.f32	s0, s0
 801f886:	b947      	cbnz	r7, 801f89a <powf+0x162>
 801f888:	2e00      	cmp	r6, #0
 801f88a:	dac8      	bge.n	801f81e <powf+0xe6>
 801f88c:	b005      	add	sp, #20
 801f88e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f892:	f000 b8dd 	b.w	801fa50 <__math_divzerof>
 801f896:	2000      	movs	r0, #0
 801f898:	e7f5      	b.n	801f886 <powf+0x14e>
 801f89a:	2e00      	cmp	r6, #0
 801f89c:	dabf      	bge.n	801f81e <powf+0xe6>
 801f89e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f8a2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801f8a6:	e7ba      	b.n	801f81e <powf+0xe6>
 801f8a8:	2900      	cmp	r1, #0
 801f8aa:	da1f      	bge.n	801f8ec <powf+0x1b4>
 801f8ac:	ee10 0a90 	vmov	r0, s1
 801f8b0:	f7ff ff28 	bl	801f704 <checkint>
 801f8b4:	b920      	cbnz	r0, 801f8c0 <powf+0x188>
 801f8b6:	b005      	add	sp, #20
 801f8b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f8bc:	f000 b8d8 	b.w	801fa70 <__math_invalidf>
 801f8c0:	2801      	cmp	r0, #1
 801f8c2:	bf14      	ite	ne
 801f8c4:	2000      	movne	r0, #0
 801f8c6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801f8ca:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801f8ce:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801f8d2:	f4bf af44 	bcs.w	801f75e <powf+0x26>
 801f8d6:	eddf 7a47 	vldr	s15, [pc, #284]	; 801f9f4 <powf+0x2bc>
 801f8da:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f8de:	ee10 3a10 	vmov	r3, s0
 801f8e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f8e6:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801f8ea:	e738      	b.n	801f75e <powf+0x26>
 801f8ec:	2000      	movs	r0, #0
 801f8ee:	e7ee      	b.n	801f8ce <powf+0x196>
 801f8f0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801f9d8 <powf+0x2a0>
 801f8f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801f8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8fc:	dd10      	ble.n	801f920 <powf+0x1e8>
 801f8fe:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 801f902:	2800      	cmp	r0, #0
 801f904:	d15c      	bne.n	801f9c0 <powf+0x288>
 801f906:	9302      	str	r3, [sp, #8]
 801f908:	eddd 7a02 	vldr	s15, [sp, #8]
 801f90c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f910:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f914:	eef4 7a47 	vcmp.f32	s15, s14
 801f918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f91c:	f47f af6e 	bne.w	801f7fc <powf+0xc4>
 801f920:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801f9e0 <powf+0x2a8>
 801f924:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801f928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f92c:	d804      	bhi.n	801f938 <powf+0x200>
 801f92e:	b005      	add	sp, #20
 801f930:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f934:	f000 b87a 	b.w	801fa2c <__math_uflowf>
 801f938:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801f9e8 <powf+0x2b0>
 801f93c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801f940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f944:	d504      	bpl.n	801f950 <powf+0x218>
 801f946:	b005      	add	sp, #20
 801f948:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f94c:	f000 b874 	b.w	801fa38 <__math_may_uflowf>
 801f950:	4b29      	ldr	r3, [pc, #164]	; (801f9f8 <powf+0x2c0>)
 801f952:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 801f956:	ee30 6b07 	vadd.f64	d6, d0, d7
 801f95a:	ed8d 6b00 	vstr	d6, [sp]
 801f95e:	ee36 7b47 	vsub.f64	d7, d6, d7
 801f962:	ee30 7b47 	vsub.f64	d7, d0, d7
 801f966:	e9dd 6700 	ldrd	r6, r7, [sp]
 801f96a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801f96e:	f006 011f 	and.w	r1, r6, #31
 801f972:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801f976:	e9d1 ce00 	ldrd	ip, lr, [r1]
 801f97a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 801f97e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 801f982:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 801f986:	eea7 6b05 	vfma.f64	d6, d7, d5
 801f98a:	ee27 5b07 	vmul.f64	d5, d7, d7
 801f98e:	1836      	adds	r6, r6, r0
 801f990:	2300      	movs	r3, #0
 801f992:	eb13 040c 	adds.w	r4, r3, ip
 801f996:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 801f99a:	eb41 050e 	adc.w	r5, r1, lr
 801f99e:	eea7 0b04 	vfma.f64	d0, d7, d4
 801f9a2:	ec45 4b17 	vmov	d7, r4, r5
 801f9a6:	eea6 0b05 	vfma.f64	d0, d6, d5
 801f9aa:	ee20 0b07 	vmul.f64	d0, d0, d7
 801f9ae:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801f9b2:	e734      	b.n	801f81e <powf+0xe6>
 801f9b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f9b8:	e731      	b.n	801f81e <powf+0xe6>
 801f9ba:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801f9fc <powf+0x2c4>
 801f9be:	e72e      	b.n	801f81e <powf+0xe6>
 801f9c0:	9303      	str	r3, [sp, #12]
 801f9c2:	eddd 7a03 	vldr	s15, [sp, #12]
 801f9c6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801f9ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f9ce:	e7a1      	b.n	801f914 <powf+0x1dc>
 801f9d0:	ffd1d571 	.word	0xffd1d571
 801f9d4:	405fffff 	.word	0x405fffff
 801f9d8:	ffa3aae2 	.word	0xffa3aae2
 801f9dc:	405fffff 	.word	0x405fffff
 801f9e0:	00000000 	.word	0x00000000
 801f9e4:	c062c000 	.word	0xc062c000
 801f9e8:	00000000 	.word	0x00000000
 801f9ec:	c062a000 	.word	0xc062a000
 801f9f0:	08022dc8 	.word	0x08022dc8
 801f9f4:	4b000000 	.word	0x4b000000
 801f9f8:	08022ef0 	.word	0x08022ef0
 801f9fc:	00000000 	.word	0x00000000

0801fa00 <with_errnof>:
 801fa00:	b513      	push	{r0, r1, r4, lr}
 801fa02:	4604      	mov	r4, r0
 801fa04:	ed8d 0a01 	vstr	s0, [sp, #4]
 801fa08:	f7fd fff8 	bl	801d9fc <__errno>
 801fa0c:	ed9d 0a01 	vldr	s0, [sp, #4]
 801fa10:	6004      	str	r4, [r0, #0]
 801fa12:	b002      	add	sp, #8
 801fa14:	bd10      	pop	{r4, pc}

0801fa16 <xflowf>:
 801fa16:	b130      	cbz	r0, 801fa26 <xflowf+0x10>
 801fa18:	eef1 7a40 	vneg.f32	s15, s0
 801fa1c:	ee27 0a80 	vmul.f32	s0, s15, s0
 801fa20:	2022      	movs	r0, #34	; 0x22
 801fa22:	f7ff bfed 	b.w	801fa00 <with_errnof>
 801fa26:	eef0 7a40 	vmov.f32	s15, s0
 801fa2a:	e7f7      	b.n	801fa1c <xflowf+0x6>

0801fa2c <__math_uflowf>:
 801fa2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801fa34 <__math_uflowf+0x8>
 801fa30:	f7ff bff1 	b.w	801fa16 <xflowf>
 801fa34:	10000000 	.word	0x10000000

0801fa38 <__math_may_uflowf>:
 801fa38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801fa40 <__math_may_uflowf+0x8>
 801fa3c:	f7ff bfeb 	b.w	801fa16 <xflowf>
 801fa40:	1a200000 	.word	0x1a200000

0801fa44 <__math_oflowf>:
 801fa44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801fa4c <__math_oflowf+0x8>
 801fa48:	f7ff bfe5 	b.w	801fa16 <xflowf>
 801fa4c:	70000000 	.word	0x70000000

0801fa50 <__math_divzerof>:
 801fa50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801fa54:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801fa58:	2800      	cmp	r0, #0
 801fa5a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 801fa5e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801fa6c <__math_divzerof+0x1c>
 801fa62:	2022      	movs	r0, #34	; 0x22
 801fa64:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801fa68:	f7ff bfca 	b.w	801fa00 <with_errnof>
 801fa6c:	00000000 	.word	0x00000000

0801fa70 <__math_invalidf>:
 801fa70:	eef0 7a40 	vmov.f32	s15, s0
 801fa74:	ee30 7a40 	vsub.f32	s14, s0, s0
 801fa78:	eef4 7a67 	vcmp.f32	s15, s15
 801fa7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa80:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801fa84:	d602      	bvs.n	801fa8c <__math_invalidf+0x1c>
 801fa86:	2021      	movs	r0, #33	; 0x21
 801fa88:	f7ff bfba 	b.w	801fa00 <with_errnof>
 801fa8c:	4770      	bx	lr
	...

0801fa90 <_init>:
 801fa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa92:	bf00      	nop
 801fa94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fa96:	bc08      	pop	{r3}
 801fa98:	469e      	mov	lr, r3
 801fa9a:	4770      	bx	lr

0801fa9c <_fini>:
 801fa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa9e:	bf00      	nop
 801faa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801faa2:	bc08      	pop	{r3}
 801faa4:	469e      	mov	lr, r3
 801faa6:	4770      	bx	lr
