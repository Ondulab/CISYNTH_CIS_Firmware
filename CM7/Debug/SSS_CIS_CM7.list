
SSS_CIS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f980  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800fc20  0800fc20  0001fc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801006c  0801006c  000336a0  2**0
                  CONTENTS
  4 .ARM          00000008  0801006c  0801006c  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010074  08010074  000336a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010074  08010074  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010078  08010078  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000035e0  24000000  0801007c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240035e0  0801365c  000335e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24003640  080136bc  00033640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00002e34  240036a0  0801371c  000336a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240064d4  0801371c  000364d4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000336a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00041fd4  00000000  00000000  000336ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006574  00000000  00000000  000756a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f80  00000000  00000000  0007bc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001d70  00000000  00000000  0007db98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000089f3  00000000  00000000  0007f908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002bacf  00000000  00000000  000882fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001ab7c5  00000000  00000000  000b3dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0025f58f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000093a4  00000000  00000000  0025f5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240036a0 	.word	0x240036a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fc08 	.word	0x0800fc08

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240036a4 	.word	0x240036a4
 80002dc:	0800fc08 	.word	0x0800fc08

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007e2:	4a30      	ldr	r2, [pc, #192]	; (80008a4 <MX_ADC1_Init+0xe8>)
 80007e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007fa:	2204      	movs	r2, #4
 80007fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000800:	2200      	movs	r2, #0
 8000802:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000806:	2200      	movs	r2, #0
 8000808:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800080c:	2201      	movs	r2, #1
 800080e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000812:	2200      	movs	r2, #0
 8000814:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000824:	2200      	movs	r2, #0
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800082a:	2200      	movs	r2, #0
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000830:	2200      	movs	r2, #0
 8000832:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800083c:	4818      	ldr	r0, [pc, #96]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800083e:	f002 f87b 	bl	8002938 <HAL_ADC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000848:	f000 fe3c 	bl	80014c4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4812      	ldr	r0, [pc, #72]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000858:	f002 fe8e 	bl	8003578 <HAL_ADCEx_MultiModeConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000862:	f000 fe2f 	bl	80014c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000866:	2301      	movs	r3, #1
 8000868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800086a:	2306      	movs	r3, #6
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000872:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000876:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000878:	2304      	movs	r3, #4
 800087a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800088a:	f002 f9f5 	bl	8002c78 <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000894:	f000 fe16 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	24003738 	.word	0x24003738
 80008a4:	40022000 	.word	0x40022000

080008a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
 80008bc:	615a      	str	r2, [r3, #20]
 80008be:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80008c0:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008c2:	4a2a      	ldr	r2, [pc, #168]	; (800096c <MX_ADC2_Init+0xc4>)
 80008c4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008c6:	4b28      	ldr	r3, [pc, #160]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80008cc:	4b26      	ldr	r3, [pc, #152]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d2:	4b25      	ldr	r3, [pc, #148]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008da:	2204      	movs	r2, #4
 80008dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008de:	4b22      	ldr	r3, [pc, #136]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008e4:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_ADC2_Init+0xc0>)
 8000904:	2200      	movs	r2, #0
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_ADC2_Init+0xc0>)
 800090a:	2200      	movs	r2, #0
 800090c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_ADC2_Init+0xc0>)
 8000910:	2200      	movs	r2, #0
 8000912:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_ADC2_Init+0xc0>)
 8000916:	2200      	movs	r2, #0
 8000918:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800091c:	4812      	ldr	r0, [pc, #72]	; (8000968 <MX_ADC2_Init+0xc0>)
 800091e:	f002 f80b 	bl	8002938 <HAL_ADC_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000928:	f000 fdcc 	bl	80014c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_ADC2_Init+0xc8>)
 800092e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000930:	2306      	movs	r3, #6
 8000932:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000938:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800093c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800093e:	2304      	movs	r3, #4
 8000940:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <MX_ADC2_Init+0xc0>)
 8000950:	f002 f992 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800095a:	f000 fdb3 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	240036d4 	.word	0x240036d4
 800096c:	40022100 	.word	0x40022100
 8000970:	04300002 	.word	0x04300002

08000974 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800098c:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <MX_ADC3_Init+0xc0>)
 800098e:	4a2a      	ldr	r2, [pc, #168]	; (8000a38 <MX_ADC3_Init+0xc4>)
 8000990:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <MX_ADC3_Init+0xc0>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000998:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <MX_ADC3_Init+0xc0>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a4:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009a6:	2204      	movs	r2, #4
 80009a8:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009e8:	4812      	ldr	r0, [pc, #72]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009ea:	f001 ffa5 	bl	8002938 <HAL_ADC_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80009f4:	f000 fd66 	bl	80014c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_ADC3_Init+0xc8>)
 80009fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fc:	2306      	movs	r3, #6
 80009fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a04:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a08:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <MX_ADC3_Init+0xc0>)
 8000a1c:	f002 f92c 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000a26:	f000 fd4d 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2400379c 	.word	0x2400379c
 8000a38:	58026000 	.word	0x58026000
 8000a3c:	04300002 	.word	0x04300002

08000a40 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a48      	ldr	r2, [pc, #288]	; (8000b70 <HAL_ADC_MspInit+0x130>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d12d      	bne.n	8000aae <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a52:	4b48      	ldr	r3, [pc, #288]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	4a46      	ldr	r2, [pc, #280]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000a5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a5c:	4b45      	ldr	r3, [pc, #276]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d10e      	bne.n	8000a82 <HAL_ADC_MspInit+0x42>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a64:	4b44      	ldr	r3, [pc, #272]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a6a:	4a43      	ldr	r2, [pc, #268]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a6c:	f043 0320 	orr.w	r3, r3, #32
 8000a70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a74:	4b40      	ldr	r3, [pc, #256]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a7a:	f003 0320 	and.w	r3, r3, #32
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	4a3b      	ldr	r2, [pc, #236]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a92:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000aa0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000aa4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000aa8:	f001 fd90 	bl	80025cc <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000aac:	e05b      	b.n	8000b66 <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC2)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <HAL_ADC_MspInit+0x13c>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d12d      	bne.n	8000b14 <HAL_ADC_MspInit+0xd4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	4a2d      	ldr	r2, [pc, #180]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000ac0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d10e      	bne.n	8000ae8 <HAL_ADC_MspInit+0xa8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000acc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad0:	4a29      	ldr	r2, [pc, #164]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000ad2:	f043 0320 	orr.w	r3, r3, #32
 8000ad6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ada:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ae0:	f003 0320 	and.w	r3, r3, #32
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000b06:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000b0a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000b0e:	f001 fd5d 	bl	80025cc <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000b12:	e028      	b.n	8000b66 <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC3)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a19      	ldr	r2, [pc, #100]	; (8000b80 <HAL_ADC_MspInit+0x140>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d123      	bne.n	8000b66 <HAL_ADC_MspInit+0x126>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b42:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000b5a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000b5e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000b62:	f001 fd33 	bl	80025cc <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40022000 	.word	0x40022000
 8000b74:	240036bc 	.word	0x240036bc
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	40022100 	.word	0x40022100
 8000b80:	58026000 	.word	0x58026000

08000b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <MX_DMA_Init+0x3c>)
 8000b8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b90:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <MX_DMA_Init+0x3c>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_DMA_Init+0x3c>)
 8000b9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2100      	movs	r1, #0
 8000bac:	200b      	movs	r0, #11
 8000bae:	f002 fe9c 	bl	80038ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bb2:	200b      	movs	r0, #11
 8000bb4:	f002 feb3 	bl	800391e <HAL_NVIC_EnableIRQ>

}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	58024400 	.word	0x58024400

08000bc4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000bc8:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <MX_ETH_Init+0x90>)
 8000bca:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <MX_ETH_Init+0x94>)
 8000bcc:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <MX_ETH_Init+0x90>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_ETH_Init+0x90>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	2280      	movs	r2, #128	; 0x80
 8000bde:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_ETH_Init+0x90>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	3302      	adds	r3, #2
 8000be6:	22e1      	movs	r2, #225	; 0xe1
 8000be8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_ETH_Init+0x90>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	3303      	adds	r3, #3
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_ETH_Init+0x90>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_ETH_Init+0x90>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	3305      	adds	r3, #5
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <MX_ETH_Init+0x90>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_ETH_Init+0x90>)
 8000c10:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <MX_ETH_Init+0x98>)
 8000c12:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_ETH_Init+0x90>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <MX_ETH_Init+0x9c>)
 8000c18:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_ETH_Init+0x90>)
 8000c1c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c20:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c22:	480c      	ldr	r0, [pc, #48]	; (8000c54 <MX_ETH_Init+0x90>)
 8000c24:	f005 f8ba 	bl	8005d9c <HAL_ETH_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000c2e:	f000 fc49 	bl	80014c4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c32:	2234      	movs	r2, #52	; 0x34
 8000c34:	2100      	movs	r1, #0
 8000c36:	480b      	ldr	r0, [pc, #44]	; (8000c64 <MX_ETH_Init+0xa0>)
 8000c38:	f00c fba6 	bl	800d388 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_ETH_Init+0xa0>)
 8000c3e:	2221      	movs	r2, #33	; 0x21
 8000c40:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_ETH_Init+0xa0>)
 8000c44:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c48:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_ETH_Init+0xa0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	24003800 	.word	0x24003800
 8000c58:	40028000 	.word	0x40028000
 8000c5c:	24003640 	.word	0x24003640
 8000c60:	240035e0 	.word	0x240035e0
 8000c64:	24003888 	.word	0x24003888

08000c68 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08e      	sub	sp, #56	; 0x38
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a49      	ldr	r2, [pc, #292]	; (8000dac <HAL_ETH_MspInit+0x144>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	f040 808b 	bne.w	8000da2 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c8c:	4b48      	ldr	r3, [pc, #288]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000c8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c92:	4a47      	ldr	r2, [pc, #284]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c9c:	4b44      	ldr	r3, [pc, #272]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000c9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ca6:	623b      	str	r3, [r7, #32]
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000caa:	4b41      	ldr	r3, [pc, #260]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cb0:	4a3f      	ldr	r2, [pc, #252]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cba:	4b3d      	ldr	r3, [pc, #244]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000cc8:	4b39      	ldr	r3, [pc, #228]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cce:	4a38      	ldr	r2, [pc, #224]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cd8:	4b35      	ldr	r3, [pc, #212]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce6:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cec:	4a30      	ldr	r2, [pc, #192]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0a:	4a29      	ldr	r2, [pc, #164]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d14:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d28:	4a21      	ldr	r2, [pc, #132]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ETH_CRS_DV
    PA1     ------> ETH_REF_CLK
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000d40:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d52:	230b      	movs	r3, #11
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4815      	ldr	r0, [pc, #84]	; (8000db4 <HAL_ETH_MspInit+0x14c>)
 8000d5e:	f005 fc33 	bl	80065c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8000d62:	2332      	movs	r3, #50	; 0x32
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d72:	230b      	movs	r3, #11
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480e      	ldr	r0, [pc, #56]	; (8000db8 <HAL_ETH_MspInit+0x150>)
 8000d7e:	f005 fc23 	bl	80065c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 8000d82:	2386      	movs	r3, #134	; 0x86
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d92:	230b      	movs	r3, #11
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <HAL_ETH_MspInit+0x154>)
 8000d9e:	f005 fc13 	bl	80065c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000da2:	bf00      	nop
 8000da4:	3738      	adds	r7, #56	; 0x38
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40028000 	.word	0x40028000
 8000db0:	58024400 	.word	0x58024400
 8000db4:	58021800 	.word	0x58021800
 8000db8:	58020800 	.word	0x58020800
 8000dbc:	58020000 	.word	0x58020000

08000dc0 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08e      	sub	sp, #56	; 0x38
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	615a      	str	r2, [r3, #20]
 8000dd8:	619a      	str	r2, [r3, #24]
  FMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000dec:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000dee:	4a33      	ldr	r2, [pc, #204]	; (8000ebc <MX_FMC_Init+0xfc>)
 8000df0:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000df2:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000df4:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <MX_FMC_Init+0x100>)
 8000df6:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000e1c:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000e22:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000e2a:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
 8000e30:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e36:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 7;
 8000e56:	2307      	movs	r3, #7
 8000e58:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 7;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 100;
 8000e5e:	2364      	movs	r3, #100	; 0x64
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 7;
 8000e62:	2307      	movs	r3, #7
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 8;
 8000e66:	2308      	movs	r3, #8
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 9;
 8000e6a:	2309      	movs	r3, #9
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 7;
 8000e72:	2307      	movs	r3, #7
 8000e74:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 7;
 8000e76:	2307      	movs	r3, #7
 8000e78:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 100;
 8000e7a:	2364      	movs	r3, #100	; 0x64
 8000e7c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 7;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 8;
 8000e82:	2308      	movs	r3, #8
 8000e84:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 9;
 8000e86:	2309      	movs	r3, #9
 8000e88:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FMC_ACCESS_MODE_A;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000e8e:	463a      	mov	r2, r7
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e98:	f009 ff66 	bl	800ad68 <HAL_SRAM_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_FMC_Init+0xe6>
  {
    Error_Handler( );
 8000ea2:	f000 fb0f 	bl	80014c4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8000ea6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000eaa:	f001 fba5 	bl	80025f8 <HAL_SetFMCMemorySwappingConfig>
  /* USER CODE END FMC_Init 2 */
}
 8000eae:	bf00      	nop
 8000eb0:	3738      	adds	r7, #56	; 0x38
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	240038bc 	.word	0x240038bc
 8000ebc:	52004000 	.word	0x52004000
 8000ec0:	52004104 	.word	0x52004104

08000ec4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0b6      	sub	sp, #216	; 0xd8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000eda:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <HAL_FMC_MspInit+0xfc>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d169      	bne.n	8000fb6 <HAL_FMC_MspInit+0xf2>
    return;
  }
  FMC_Initialized = 1;
 8000ee2:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <HAL_FMC_MspInit+0xfc>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	22bc      	movs	r2, #188	; 0xbc
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00c fa49 	bl	800d388 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000ef6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000efa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	4618      	mov	r0, r3
 8000f06:	f006 fd67 	bl	80079d8 <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 8000f10:	f000 fad8 	bl	80014c4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000f14:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <HAL_FMC_MspInit+0x100>)
 8000f16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f1a:	4a2a      	ldr	r2, [pc, #168]	; (8000fc4 <HAL_FMC_MspInit+0x100>)
 8000f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f20:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f24:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <HAL_FMC_MspInit+0x100>)
 8000f26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE9   ------> FMC_D6
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4
 8000f32:	f24c 03b3 	movw	r3, #49331	; 0xc0b3
 8000f36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f52:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f56:	4619      	mov	r1, r3
 8000f58:	481b      	ldr	r0, [pc, #108]	; (8000fc8 <HAL_FMC_MspInit+0x104>)
 8000f5a:	f005 fb35 	bl	80065c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f76:	230c      	movs	r3, #12
 8000f78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f80:	4619      	mov	r1, r3
 8000f82:	4812      	ldr	r0, [pc, #72]	; (8000fcc <HAL_FMC_MspInit+0x108>)
 8000f84:	f005 fb20 	bl	80065c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_9;
 8000f88:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000f8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fac:	4619      	mov	r1, r3
 8000fae:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <HAL_FMC_MspInit+0x10c>)
 8000fb0:	f005 fb0a 	bl	80065c8 <HAL_GPIO_Init>
 8000fb4:	e000      	b.n	8000fb8 <HAL_FMC_MspInit+0xf4>
    return;
 8000fb6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000fb8:	37d8      	adds	r7, #216	; 0xd8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	240036c0 	.word	0x240036c0
 8000fc4:	58024400 	.word	0x58024400
 8000fc8:	58020c00 	.word	0x58020c00
 8000fcc:	58021400 	.word	0x58021400
 8000fd0:	58021000 	.word	0x58021000

08000fd4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000fdc:	f7ff ff72 	bl	8000ec4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08e      	sub	sp, #56	; 0x38
 8000fec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b7a      	ldr	r3, [pc, #488]	; (80011e8 <MX_GPIO_Init+0x200>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001004:	4a78      	ldr	r2, [pc, #480]	; (80011e8 <MX_GPIO_Init+0x200>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100e:	4b76      	ldr	r3, [pc, #472]	; (80011e8 <MX_GPIO_Init+0x200>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	623b      	str	r3, [r7, #32]
 800101a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800101c:	4b72      	ldr	r3, [pc, #456]	; (80011e8 <MX_GPIO_Init+0x200>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	4a71      	ldr	r2, [pc, #452]	; (80011e8 <MX_GPIO_Init+0x200>)
 8001024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102c:	4b6e      	ldr	r3, [pc, #440]	; (80011e8 <MX_GPIO_Init+0x200>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	4b6b      	ldr	r3, [pc, #428]	; (80011e8 <MX_GPIO_Init+0x200>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001040:	4a69      	ldr	r2, [pc, #420]	; (80011e8 <MX_GPIO_Init+0x200>)
 8001042:	f043 0308 	orr.w	r3, r3, #8
 8001046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104a:	4b67      	ldr	r3, [pc, #412]	; (80011e8 <MX_GPIO_Init+0x200>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b63      	ldr	r3, [pc, #396]	; (80011e8 <MX_GPIO_Init+0x200>)
 800105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105e:	4a62      	ldr	r2, [pc, #392]	; (80011e8 <MX_GPIO_Init+0x200>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001068:	4b5f      	ldr	r3, [pc, #380]	; (80011e8 <MX_GPIO_Init+0x200>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001076:	4b5c      	ldr	r3, [pc, #368]	; (80011e8 <MX_GPIO_Init+0x200>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107c:	4a5a      	ldr	r2, [pc, #360]	; (80011e8 <MX_GPIO_Init+0x200>)
 800107e:	f043 0310 	orr.w	r3, r3, #16
 8001082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001086:	4b58      	ldr	r3, [pc, #352]	; (80011e8 <MX_GPIO_Init+0x200>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	f003 0310 	and.w	r3, r3, #16
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001094:	4b54      	ldr	r3, [pc, #336]	; (80011e8 <MX_GPIO_Init+0x200>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109a:	4a53      	ldr	r2, [pc, #332]	; (80011e8 <MX_GPIO_Init+0x200>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a4:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MX_GPIO_Init+0x200>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b2:	4b4d      	ldr	r3, [pc, #308]	; (80011e8 <MX_GPIO_Init+0x200>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b8:	4a4b      	ldr	r2, [pc, #300]	; (80011e8 <MX_GPIO_Init+0x200>)
 80010ba:	f043 0320 	orr.w	r3, r3, #32
 80010be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c2:	4b49      	ldr	r3, [pc, #292]	; (80011e8 <MX_GPIO_Init+0x200>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c8:	f003 0320 	and.w	r3, r3, #32
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d0:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <MX_GPIO_Init+0x200>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d6:	4a44      	ldr	r2, [pc, #272]	; (80011e8 <MX_GPIO_Init+0x200>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e0:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <MX_GPIO_Init+0x200>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	483d      	ldr	r0, [pc, #244]	; (80011ec <MX_GPIO_Init+0x204>)
 80010f6:	f005 fc17 	bl	8006928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MEMS_Pin|CIS_RS_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001100:	483b      	ldr	r0, [pc, #236]	; (80011f0 <MX_GPIO_Init+0x208>)
 8001102:	f005 fc11 	bl	8006928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAC_FLT_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f242 0104 	movw	r1, #8196	; 0x2004
 800110c:	4839      	ldr	r0, [pc, #228]	; (80011f4 <MX_GPIO_Init+0x20c>)
 800110e:	f005 fc0b 	bl	8006928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, EN_12V_Pin|EN_5V_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2124      	movs	r1, #36	; 0x24
 8001116:	4838      	ldr	r0, [pc, #224]	; (80011f8 <MX_GPIO_Init+0x210>)
 8001118:	f005 fc06 	bl	8006928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	4836      	ldr	r0, [pc, #216]	; (80011fc <MX_GPIO_Init+0x214>)
 8001122:	f005 fc01 	bl	8006928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_Pin|DAC_DEMP_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2148      	movs	r1, #72	; 0x48
 800112a:	4835      	ldr	r0, [pc, #212]	; (8001200 <MX_GPIO_Init+0x218>)
 800112c:	f005 fbfc 	bl	8006928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 8001130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	4828      	ldr	r0, [pc, #160]	; (80011ec <MX_GPIO_Init+0x204>)
 800114a:	f005 fa3d 	bl	80065c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_Pin|CIS_RS_Pin;
 800114e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	4619      	mov	r1, r3
 8001166:	4822      	ldr	r0, [pc, #136]	; (80011f0 <MX_GPIO_Init+0x208>)
 8001168:	f005 fa2e 	bl	80065c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAC_FLT_Pin|DAC_XSMT_Pin;
 800116c:	f242 0304 	movw	r3, #8196	; 0x2004
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	481b      	ldr	r0, [pc, #108]	; (80011f4 <MX_GPIO_Init+0x20c>)
 8001186:	f005 fa1f 	bl	80065c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|EN_5V_Pin;
 800118a:	2324      	movs	r3, #36	; 0x24
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	4815      	ldr	r0, [pc, #84]	; (80011f8 <MX_GPIO_Init+0x210>)
 80011a2:	f005 fa11 	bl	80065c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_FMT_Pin;
 80011a6:	2340      	movs	r3, #64	; 0x40
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_FMT_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	480f      	ldr	r0, [pc, #60]	; (80011fc <MX_GPIO_Init+0x214>)
 80011be:	f005 fa03 	bl	80065c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LED_Pin|DAC_DEMP_Pin;
 80011c2:	2348      	movs	r3, #72	; 0x48
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	4809      	ldr	r0, [pc, #36]	; (8001200 <MX_GPIO_Init+0x218>)
 80011da:	f005 f9f5 	bl	80065c8 <HAL_GPIO_Init>

}
 80011de:	bf00      	nop
 80011e0:	3738      	adds	r7, #56	; 0x38
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	58024400 	.word	0x58024400
 80011ec:	58020400 	.word	0x58020400
 80011f0:	58020000 	.word	0x58020000
 80011f4:	58020800 	.word	0x58020800
 80011f8:	58021800 	.word	0x58021800
 80011fc:	58021400 	.word	0x58021400
 8001200:	58021c00 	.word	0x58021c00

08001204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800120a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800120e:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001210:	bf00      	nop
 8001212:	4b4e      	ldr	r3, [pc, #312]	; (800134c <main+0x148>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <main+0x24>
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	1e5a      	subs	r2, r3, #1
 8001222:	617a      	str	r2, [r7, #20]
 8001224:	2b00      	cmp	r3, #0
 8001226:	dcf4      	bgt.n	8001212 <main+0xe>
  if ( timeout < 0 )
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	2b00      	cmp	r3, #0
 800122c:	da01      	bge.n	8001232 <main+0x2e>
  {
  Error_Handler();
 800122e:	f000 f949 	bl	80014c4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001232:	f001 f8f5 	bl	8002420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001236:	f000 f893 	bl	8001360 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800123a:	f000 f917 	bl	800146c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800123e:	4b43      	ldr	r3, [pc, #268]	; (800134c <main+0x148>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	4a41      	ldr	r2, [pc, #260]	; (800134c <main+0x148>)
 8001246:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800124a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124e:	4b3f      	ldr	r3, [pc, #252]	; (800134c <main+0x148>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800125c:	2000      	movs	r0, #0
 800125e:	f005 fb97 	bl	8006990 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001262:	2100      	movs	r1, #0
 8001264:	2000      	movs	r0, #0
 8001266:	f005 fbad 	bl	80069c4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800126a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126e:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001270:	bf00      	nop
 8001272:	4b36      	ldr	r3, [pc, #216]	; (800134c <main+0x148>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d104      	bne.n	8001288 <main+0x84>
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	1e5a      	subs	r2, r3, #1
 8001282:	617a      	str	r2, [r7, #20]
 8001284:	2b00      	cmp	r3, #0
 8001286:	dcf4      	bgt.n	8001272 <main+0x6e>
if ( timeout < 0 )
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	2b00      	cmp	r3, #0
 800128c:	da01      	bge.n	8001292 <main+0x8e>
{
Error_Handler();
 800128e:	f000 f919 	bl	80014c4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001292:	f7ff fea9 	bl	8000fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001296:	f7ff fc75 	bl	8000b84 <MX_DMA_Init>
  MX_ADC1_Init();
 800129a:	f7ff fa8f 	bl	80007bc <MX_ADC1_Init>
  MX_ADC2_Init();
 800129e:	f7ff fb03 	bl	80008a8 <MX_ADC2_Init>
  MX_ADC3_Init();
 80012a2:	f7ff fb67 	bl	8000974 <MX_ADC3_Init>
  MX_FMC_Init();
 80012a6:	f7ff fd8b 	bl	8000dc0 <MX_FMC_Init>
  MX_SAI1_Init();
 80012aa:	f000 f95f 	bl	800156c <MX_SAI1_Init>
  MX_ETH_Init();
 80012ae:	f7ff fc89 	bl	8000bc4 <MX_ETH_Init>
  MX_SPI2_Init();
 80012b2:	f000 fa4f 	bl	8001754 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80012b6:	f000 ffd9 	bl	800226c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80012ba:	f000 fc4b 	bl	8001b54 <MX_TIM1_Init>
  MX_TIM3_Init();
 80012be:	f000 fcd9 	bl	8001c74 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012c2:	f000 fd31 	bl	8001d28 <MX_TIM4_Init>
  MX_TIM5_Init();
 80012c6:	f000 fd89 	bl	8001ddc <MX_TIM5_Init>
  MX_TIM8_Init();
 80012ca:	f000 fde1 	bl	8001e90 <MX_TIM8_Init>
  MX_RNG_Init();
 80012ce:	f000 f8ff 	bl	80014d0 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	2120      	movs	r1, #32
 80012d6:	481e      	ldr	r0, [pc, #120]	; (8001350 <main+0x14c>)
 80012d8:	f005 fb26 	bl	8006928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	2104      	movs	r1, #4
 80012e0:	481b      	ldr	r0, [pc, #108]	; (8001350 <main+0x14c>)
 80012e2:	f005 fb21 	bl	8006928 <HAL_GPIO_WritePin>

  int8_t timeText[] = {'1', '2', ':', '3', '5'};
 80012e6:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <main+0x150>)
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f0:	6018      	str	r0, [r3, #0]
 80012f2:	3304      	adds	r3, #4
 80012f4:	7019      	strb	r1, [r3, #0]
  uint32_t framecount = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]

  ssd1362_init();
 80012fa:	f00b ff97 	bl	800d22c <ssd1362_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ssd1362_clearBuffer();
 80012fe:	f00b ff29 	bl	800d154 <ssd1362_clearBuffer>
	  ssd1362_drawHLine(0, 5, 256,0xF, 0);
 8001302:	2300      	movs	r3, #0
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	230f      	movs	r3, #15
 8001308:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130c:	2105      	movs	r1, #5
 800130e:	2000      	movs	r0, #0
 8001310:	f00b fd8e 	bl	800ce30 <ssd1362_drawHLine>
	  ssd1362_drawHLine(0, 60, 256,0xF, 0);
 8001314:	2300      	movs	r3, #0
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	230f      	movs	r3, #15
 800131a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800131e:	213c      	movs	r1, #60	; 0x3c
 8001320:	2000      	movs	r0, #0
 8001322:	f00b fd85 	bl	800ce30 <ssd1362_drawHLine>
	  ssd1362_drawString(16, 25, (int8_t *)"Hello Spectral Sound Scanner", 0xF, 16);
 8001326:	2310      	movs	r3, #16
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	230f      	movs	r3, #15
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <main+0x154>)
 800132e:	2119      	movs	r1, #25
 8001330:	2010      	movs	r0, #16
 8001332:	f00b fe6e 	bl	800d012 <ssd1362_drawString>
	  ssd1362_writeFullBuffer();
 8001336:	f00b ff3b 	bl	800d1b0 <ssd1362_writeFullBuffer>
//	  ssd1362_drawString(0, 112, (int8_t *)"-12.5C", 0xF, 16);
//	  ssd1362_drawString(84, 112, (int8_t *)"52.1%", 0xF, 16);
//	  ssd1362_writeFullBuffer();
//	  HAL_Delay(8);

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800133a:	2140      	movs	r1, #64	; 0x40
 800133c:	4807      	ldr	r0, [pc, #28]	; (800135c <main+0x158>)
 800133e:	f005 fb0c 	bl	800695a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001342:	2064      	movs	r0, #100	; 0x64
 8001344:	f001 f8fe 	bl	8002544 <HAL_Delay>
	  ssd1362_clearBuffer();
 8001348:	e7d9      	b.n	80012fe <main+0xfa>
 800134a:	bf00      	nop
 800134c:	58024400 	.word	0x58024400
 8001350:	58021800 	.word	0x58021800
 8001354:	0800fc40 	.word	0x0800fc40
 8001358:	0800fc20 	.word	0x0800fc20
 800135c:	58021c00 	.word	0x58021c00

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b09c      	sub	sp, #112	; 0x70
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	224c      	movs	r2, #76	; 0x4c
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f00c f80a 	bl	800d388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2220      	movs	r2, #32
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f00c f804 	bl	800d388 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001380:	2004      	movs	r0, #4
 8001382:	f005 fb33 	bl	80069ec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	4b35      	ldr	r3, [pc, #212]	; (8001460 <SystemClock_Config+0x100>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	4a34      	ldr	r2, [pc, #208]	; (8001460 <SystemClock_Config+0x100>)
 8001390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001394:	6193      	str	r3, [r2, #24]
 8001396:	4b32      	ldr	r3, [pc, #200]	; (8001460 <SystemClock_Config+0x100>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	4b30      	ldr	r3, [pc, #192]	; (8001464 <SystemClock_Config+0x104>)
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	4a2f      	ldr	r2, [pc, #188]	; (8001464 <SystemClock_Config+0x104>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <SystemClock_Config+0x104>)
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013b8:	bf00      	nop
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <SystemClock_Config+0x100>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013c6:	d1f8      	bne.n	80013ba <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80013c8:	4b27      	ldr	r3, [pc, #156]	; (8001468 <SystemClock_Config+0x108>)
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	f023 0303 	bic.w	r3, r3, #3
 80013d0:	4a25      	ldr	r2, [pc, #148]	; (8001468 <SystemClock_Config+0x108>)
 80013d2:	f043 0302 	orr.w	r3, r3, #2
 80013d6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80013d8:	2321      	movs	r3, #33	; 0x21
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013e2:	2301      	movs	r3, #1
 80013e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e6:	2302      	movs	r3, #2
 80013e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ea:	2302      	movs	r3, #2
 80013ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80013ee:	2305      	movs	r3, #5
 80013f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 80013f2:	23c0      	movs	r3, #192	; 0xc0
 80013f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80013fa:	2308      	movs	r3, #8
 80013fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 80013fe:	2308      	movs	r3, #8
 8001400:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001402:	2308      	movs	r3, #8
 8001404:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001406:	2300      	movs	r3, #0
 8001408:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001412:	4618      	mov	r0, r3
 8001414:	f005 fb44 	bl	8006aa0 <HAL_RCC_OscConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800141e:	f000 f851 	bl	80014c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001422:	233f      	movs	r3, #63	; 0x3f
 8001424:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001426:	2303      	movs	r3, #3
 8001428:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800142e:	2308      	movs	r3, #8
 8001430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001432:	2340      	movs	r3, #64	; 0x40
 8001434:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001436:	2340      	movs	r3, #64	; 0x40
 8001438:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800143a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001440:	2340      	movs	r3, #64	; 0x40
 8001442:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2104      	movs	r1, #4
 8001448:	4618      	mov	r0, r3
 800144a:	f005 ff39 	bl	80072c0 <HAL_RCC_ClockConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001454:	f000 f836 	bl	80014c4 <Error_Handler>
  }
}
 8001458:	bf00      	nop
 800145a:	3770      	adds	r7, #112	; 0x70
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	58024800 	.word	0x58024800
 8001464:	58000400 	.word	0x58000400
 8001468:	58024400 	.word	0x58024400

0800146c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0b0      	sub	sp, #192	; 0xc0
 8001470:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	22bc      	movs	r2, #188	; 0xbc
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f00b ff85 	bl	800d388 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800147e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001482:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 6;
 8001484:	2306      	movs	r3, #6
 8001486:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8001488:	23c0      	movs	r3, #192	; 0xc0
 800148a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 10;
 800148c:	230a      	movs	r3, #10
 800148e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8001490:	230a      	movs	r3, #10
 8001492:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 10;
 8001494:	230a      	movs	r3, #10
 8001496:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4618      	mov	r0, r3
 80014ae:	f006 fa93 	bl	80079d8 <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80014b8:	f000 f804 	bl	80014c4 <Error_Handler>
  }
}
 80014bc:	bf00      	nop
 80014be:	37c0      	adds	r7, #192	; 0xc0
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	e7fe      	b.n	80014cc <Error_Handler+0x8>
	...

080014d0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <MX_RNG_Init+0x24>)
 80014d6:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <MX_RNG_Init+0x28>)
 80014d8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_RNG_Init+0x24>)
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_RNG_Init+0x24>)
 80014e2:	f008 fbff 	bl	8009ce4 <HAL_RNG_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80014ec:	f7ff ffea 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	24003908 	.word	0x24003908
 80014f8:	48021800 	.word	0x48021800

080014fc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b0b2      	sub	sp, #200	; 0xc8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	22bc      	movs	r2, #188	; 0xbc
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f00b ff3b 	bl	800d388 <memset>
  if(rngHandle->Instance==RNG)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a13      	ldr	r2, [pc, #76]	; (8001564 <HAL_RNG_MspInit+0x68>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d11e      	bne.n	800155a <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800151c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001520:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	4618      	mov	r0, r3
 800152e:	f006 fa53 	bl	80079d8 <HAL_RCCEx_PeriphCLKConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001538:	f7ff ffc4 	bl	80014c4 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_RNG_MspInit+0x6c>)
 800153e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_RNG_MspInit+0x6c>)
 8001544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001548:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_RNG_MspInit+0x6c>)
 800154e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800155a:	bf00      	nop
 800155c:	37c8      	adds	r7, #200	; 0xc8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	48021800 	.word	0x48021800
 8001568:	58024400 	.word	0x58024400

0800156c <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <MX_SAI1_Init+0x64>)
 8001572:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <MX_SAI1_Init+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_SAI1_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_SAI1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_SAI1_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_SAI1_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_SAI1_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_SAI1_Init+0x64>)
 8001596:	f64a 4244 	movw	r2, #44100	; 0xac44
 800159a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_SAI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_SAI1_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_SAI1_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_SAI1_Init+0x64>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_PCM_SHORT, SAI_PROTOCOL_DATASIZE_16BIT, 1) != HAL_OK)
 80015b4:	2301      	movs	r3, #1
 80015b6:	2200      	movs	r2, #0
 80015b8:	2104      	movs	r1, #4
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_SAI1_Init+0x64>)
 80015bc:	f008 fbed 	bl	8009d9a <HAL_SAI_InitProtocol>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80015c6:	f7ff ff7d 	bl	80014c4 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	24003994 	.word	0x24003994
 80015d4:	40015804 	.word	0x40015804

080015d8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0b8      	sub	sp, #224	; 0xe0
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	22bc      	movs	r2, #188	; 0xbc
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00b fecd 	bl	800d388 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a51      	ldr	r2, [pc, #324]	; (8001738 <HAL_SAI_MspInit+0x160>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	f040 809b 	bne.w	8001730 <HAL_SAI_MspInit+0x158>
    {
    /* SAI1 clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80015fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8001600:	2300      	movs	r3, #0
 8001602:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	4618      	mov	r0, r3
 800160a:	f006 f9e5 	bl	80079d8 <HAL_RCCEx_PeriphCLKConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8001614:	f7ff ff56 	bl	80014c4 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001618:	4b48      	ldr	r3, [pc, #288]	; (800173c <HAL_SAI_MspInit+0x164>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d116      	bne.n	800164e <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001620:	4b47      	ldr	r3, [pc, #284]	; (8001740 <HAL_SAI_MspInit+0x168>)
 8001622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001626:	4a46      	ldr	r2, [pc, #280]	; (8001740 <HAL_SAI_MspInit+0x168>)
 8001628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800162c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001630:	4b43      	ldr	r3, [pc, #268]	; (8001740 <HAL_SAI_MspInit+0x168>)
 8001632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2057      	movs	r0, #87	; 0x57
 8001644:	f002 f951 	bl	80038ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001648:	2057      	movs	r0, #87	; 0x57
 800164a:	f002 f968 	bl	800391e <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <HAL_SAI_MspInit+0x164>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	4a39      	ldr	r2, [pc, #228]	; (800173c <HAL_SAI_MspInit+0x164>)
 8001656:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_5;
 8001658:	2334      	movs	r3, #52	; 0x34
 800165a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001670:	2306      	movs	r3, #6
 8001672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001676:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800167a:	4619      	mov	r1, r3
 800167c:	4831      	ldr	r0, [pc, #196]	; (8001744 <HAL_SAI_MspInit+0x16c>)
 800167e:	f004 ffa3 	bl	80065c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001682:	2340      	movs	r3, #64	; 0x40
 8001684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800169a:	2306      	movs	r3, #6
 800169c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016a4:	4619      	mov	r1, r3
 80016a6:	4828      	ldr	r0, [pc, #160]	; (8001748 <HAL_SAI_MspInit+0x170>)
 80016a8:	f004 ff8e 	bl	80065c8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <HAL_SAI_MspInit+0x174>)
 80016ae:	4a28      	ldr	r2, [pc, #160]	; (8001750 <HAL_SAI_MspInit+0x178>)
 80016b0:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80016b2:	4b26      	ldr	r3, [pc, #152]	; (800174c <HAL_SAI_MspInit+0x174>)
 80016b4:	2257      	movs	r2, #87	; 0x57
 80016b6:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016b8:	4b24      	ldr	r3, [pc, #144]	; (800174c <HAL_SAI_MspInit+0x174>)
 80016ba:	2240      	movs	r2, #64	; 0x40
 80016bc:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80016be:	4b23      	ldr	r3, [pc, #140]	; (800174c <HAL_SAI_MspInit+0x174>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_SAI_MspInit+0x174>)
 80016c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ca:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <HAL_SAI_MspInit+0x174>)
 80016ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016d2:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <HAL_SAI_MspInit+0x174>)
 80016d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016da:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_SAI_MspInit+0x174>)
 80016de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e2:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_SAI_MspInit+0x174>)
 80016e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016ea:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_SAI_MspInit+0x174>)
 80016ee:	2204      	movs	r2, #4
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_SAI_MspInit+0x174>)
 80016f4:	2203      	movs	r2, #3
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <HAL_SAI_MspInit+0x174>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_SAI_MspInit+0x174>)
 8001700:	2200      	movs	r2, #0
 8001702:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001704:	4811      	ldr	r0, [pc, #68]	; (800174c <HAL_SAI_MspInit+0x174>)
 8001706:	f002 f925 	bl	8003954 <HAL_DMA_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_SAI_MspInit+0x13c>
    {
      Error_Handler();
 8001710:	f7ff fed8 	bl	80014c4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_SAI_MspInit+0x174>)
 8001718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800171c:	4a0b      	ldr	r2, [pc, #44]	; (800174c <HAL_SAI_MspInit+0x174>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a09      	ldr	r2, [pc, #36]	; (800174c <HAL_SAI_MspInit+0x174>)
 8001726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_SAI_MspInit+0x174>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001730:	bf00      	nop
 8001732:	37e0      	adds	r7, #224	; 0xe0
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40015804 	.word	0x40015804
 800173c:	240036c4 	.word	0x240036c4
 8001740:	58024400 	.word	0x58024400
 8001744:	58021000 	.word	0x58021000
 8001748:	58020c00 	.word	0x58020c00
 800174c:	2400391c 	.word	0x2400391c
 8001750:	40020010 	.word	0x40020010

08001754 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <MX_SPI2_Init+0xa4>)
 800175a:	4a28      	ldr	r2, [pc, #160]	; (80017fc <MX_SPI2_Init+0xa8>)
 800175c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <MX_SPI2_Init+0xa4>)
 8001760:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001764:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <MX_SPI2_Init+0xa4>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800176c:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <MX_SPI2_Init+0xa4>)
 800176e:	2203      	movs	r2, #3
 8001770:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <MX_SPI2_Init+0xa4>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <MX_SPI2_Init+0xa4>)
 800177a:	2200      	movs	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_SPI2_Init+0xa4>)
 8001780:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001784:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_SPI2_Init+0xa4>)
 8001788:	2200      	movs	r2, #0
 800178a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_SPI2_Init+0xa4>)
 800178e:	2200      	movs	r2, #0
 8001790:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_SPI2_Init+0xa4>)
 8001794:	2200      	movs	r2, #0
 8001796:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_SPI2_Init+0xa4>)
 800179a:	2200      	movs	r2, #0
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_SPI2_Init+0xa4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_SPI2_Init+0xa4>)
 80017a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_SPI2_Init+0xa4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_SPI2_Init+0xa4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_SPI2_Init+0xa4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_SPI2_Init+0xa4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_SPI2_Init+0xa4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <MX_SPI2_Init+0xa4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_SPI2_Init+0xa4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <MX_SPI2_Init+0xa4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_SPI2_Init+0xa4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_SPI2_Init+0xa4>)
 80017e4:	f009 f9a2 	bl	800ab2c <HAL_SPI_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80017ee:	f7ff fe69 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	24003a2c 	.word	0x24003a2c
 80017fc:	40003800 	.word	0x40003800

08001800 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b0ba      	sub	sp, #232	; 0xe8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001818:	f107 0318 	add.w	r3, r7, #24
 800181c:	22bc      	movs	r2, #188	; 0xbc
 800181e:	2100      	movs	r1, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f00b fdb1 	bl	800d388 <memset>
  if(spiHandle->Instance==SPI2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a37      	ldr	r2, [pc, #220]	; (8001908 <HAL_SPI_MspInit+0x108>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d166      	bne.n	80018fe <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001834:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001836:	2300      	movs	r3, #0
 8001838:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800183a:	f107 0318 	add.w	r3, r7, #24
 800183e:	4618      	mov	r0, r3
 8001840:	f006 f8ca 	bl	80079d8 <HAL_RCCEx_PeriphCLKConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800184a:	f7ff fe3b 	bl	80014c4 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800184e:	4b2f      	ldr	r3, [pc, #188]	; (800190c <HAL_SPI_MspInit+0x10c>)
 8001850:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001854:	4a2d      	ldr	r2, [pc, #180]	; (800190c <HAL_SPI_MspInit+0x10c>)
 8001856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_SPI_MspInit+0x10c>)
 8001860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800186c:	4b27      	ldr	r3, [pc, #156]	; (800190c <HAL_SPI_MspInit+0x10c>)
 800186e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001872:	4a26      	ldr	r2, [pc, #152]	; (800190c <HAL_SPI_MspInit+0x10c>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187c:	4b23      	ldr	r3, [pc, #140]	; (800190c <HAL_SPI_MspInit+0x10c>)
 800187e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_SPI_MspInit+0x10c>)
 800188c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001890:	4a1e      	ldr	r2, [pc, #120]	; (800190c <HAL_SPI_MspInit+0x10c>)
 8001892:	f043 0302 	orr.w	r3, r3, #2
 8001896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_SPI_MspInit+0x10c>)
 800189c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> SPI2_SCK
    PB9     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018a8:	2308      	movs	r3, #8
 80018aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018c0:	2305      	movs	r3, #5
 80018c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018ca:	4619      	mov	r1, r3
 80018cc:	4810      	ldr	r0, [pc, #64]	; (8001910 <HAL_SPI_MspInit+0x110>)
 80018ce:	f004 fe7b 	bl	80065c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80018d2:	f44f 4342 	mov.w	r3, #49664	; 0xc200
 80018d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018ec:	2305      	movs	r3, #5
 80018ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018f6:	4619      	mov	r1, r3
 80018f8:	4806      	ldr	r0, [pc, #24]	; (8001914 <HAL_SPI_MspInit+0x114>)
 80018fa:	f004 fe65 	bl	80065c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80018fe:	bf00      	nop
 8001900:	37e8      	adds	r7, #232	; 0xe8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40003800 	.word	0x40003800
 800190c:	58024400 	.word	0x58024400
 8001910:	58020c00 	.word	0x58020c00
 8001914:	58020400 	.word	0x58020400

08001918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_MspInit+0x30>)
 8001920:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001924:	4a08      	ldr	r2, [pc, #32]	; (8001948 <HAL_MspInit+0x30>)
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_MspInit+0x30>)
 8001930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	58024400 	.word	0x58024400

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <NMI_Handler+0x4>

08001952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <MemManage_Handler+0x4>

0800195e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <UsageFault_Handler+0x4>

0800196a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001998:	f000 fdb4 	bl	8002504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <DMA1_Stream0_IRQHandler+0x10>)
 80019a6:	f003 f893 	bl	8004ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2400391c 	.word	0x2400391c

080019b4 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <SAI1_IRQHandler+0x10>)
 80019ba:	f008 fd4f 	bl	800a45c <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	24003994 	.word	0x24003994

080019c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_kill>:

int _kill(int pid, int sig)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019e2:	f00b fc9f 	bl	800d324 <__errno>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2216      	movs	r2, #22
 80019ea:	601a      	str	r2, [r3, #0]
	return -1;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_exit>:

void _exit (int status)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ffe7 	bl	80019d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a0a:	e7fe      	b.n	8001a0a <_exit+0x12>

08001a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e00a      	b.n	8001a34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a1e:	f3af 8000 	nop.w
 8001a22:	4601      	mov	r1, r0
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	b2ca      	uxtb	r2, r1
 8001a2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dbf0      	blt.n	8001a1e <_read+0x12>
	}

return len;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e009      	b.n	8001a6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	60ba      	str	r2, [r7, #8]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dbf1      	blt.n	8001a58 <_write+0x12>
	}
	return len;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_close>:

int _close(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
	return -1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa6:	605a      	str	r2, [r3, #4]
	return 0;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_isatty>:

int _isatty(int file)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
	return 1;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f00b fc04 	bl	800d324 <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	24040000 	.word	0x24040000
 8001b48:	00000400 	.word	0x00000400
 8001b4c:	240036c8 	.word	0x240036c8
 8001b50:	240064d8 	.word	0x240064d8

08001b54 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b096      	sub	sp, #88	; 0x58
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]
 8001b76:	615a      	str	r2, [r3, #20]
 8001b78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	222c      	movs	r2, #44	; 0x2c
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f00b fc01 	bl	800d388 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b86:	4b39      	ldr	r3, [pc, #228]	; (8001c6c <MX_TIM1_Init+0x118>)
 8001b88:	4a39      	ldr	r2, [pc, #228]	; (8001c70 <MX_TIM1_Init+0x11c>)
 8001b8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b8c:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <MX_TIM1_Init+0x118>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b92:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <MX_TIM1_Init+0x118>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b98:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <MX_TIM1_Init+0x118>)
 8001b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <MX_TIM1_Init+0x118>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ba6:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <MX_TIM1_Init+0x118>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bac:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <MX_TIM1_Init+0x118>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001bb2:	482e      	ldr	r0, [pc, #184]	; (8001c6c <MX_TIM1_Init+0x118>)
 8001bb4:	f009 f96c 	bl	800ae90 <HAL_TIM_OC_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001bbe:	f7ff fc81 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4825      	ldr	r0, [pc, #148]	; (8001c6c <MX_TIM1_Init+0x118>)
 8001bd6:	f009 fd91 	bl	800b6fc <HAL_TIMEx_MasterConfigSynchronization>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001be0:	f7ff fc70 	bl	80014c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001be4:	2300      	movs	r3, #0
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bec:	2300      	movs	r3, #0
 8001bee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c04:	2204      	movs	r2, #4
 8001c06:	4619      	mov	r1, r3
 8001c08:	4818      	ldr	r0, [pc, #96]	; (8001c6c <MX_TIM1_Init+0x118>)
 8001c0a:	f009 f999 	bl	800af40 <HAL_TIM_OC_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c14:	f7ff fc56 	bl	80014c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4807      	ldr	r0, [pc, #28]	; (8001c6c <MX_TIM1_Init+0x118>)
 8001c4e:	f009 fddd 	bl	800b80c <HAL_TIMEx_ConfigBreakDeadTime>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001c58:	f7ff fc34 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c5c:	4803      	ldr	r0, [pc, #12]	; (8001c6c <MX_TIM1_Init+0x118>)
 8001c5e:	f000 fa25 	bl	80020ac <HAL_TIM_MspPostInit>

}
 8001c62:	bf00      	nop
 8001c64:	3758      	adds	r7, #88	; 0x58
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	24003be4 	.word	0x24003be4
 8001c70:	40010000 	.word	0x40010000

08001c74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7a:	f107 031c 	add.w	r3, r7, #28
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c86:	463b      	mov	r3, r7
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
 8001c94:	615a      	str	r2, [r3, #20]
 8001c96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <MX_TIM3_Init+0xac>)
 8001c9a:	4a22      	ldr	r2, [pc, #136]	; (8001d24 <MX_TIM3_Init+0xb0>)
 8001c9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <MX_TIM3_Init+0xac>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <MX_TIM3_Init+0xac>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <MX_TIM3_Init+0xac>)
 8001cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <MX_TIM3_Init+0xac>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <MX_TIM3_Init+0xac>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001cbe:	4818      	ldr	r0, [pc, #96]	; (8001d20 <MX_TIM3_Init+0xac>)
 8001cc0:	f009 f8e6 	bl	800ae90 <HAL_TIM_OC_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001cca:	f7ff fbfb 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4810      	ldr	r0, [pc, #64]	; (8001d20 <MX_TIM3_Init+0xac>)
 8001cde:	f009 fd0d 	bl	800b6fc <HAL_TIMEx_MasterConfigSynchronization>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001ce8:	f7ff fbec 	bl	80014c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001cec:	2300      	movs	r3, #0
 8001cee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	4619      	mov	r1, r3
 8001d02:	4807      	ldr	r0, [pc, #28]	; (8001d20 <MX_TIM3_Init+0xac>)
 8001d04:	f009 f91c 	bl	800af40 <HAL_TIM_OC_ConfigChannel>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001d0e:	f7ff fbd9 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d12:	4803      	ldr	r0, [pc, #12]	; (8001d20 <MX_TIM3_Init+0xac>)
 8001d14:	f000 f9ca 	bl	80020ac <HAL_TIM_MspPostInit>

}
 8001d18:	bf00      	nop
 8001d1a:	3728      	adds	r7, #40	; 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	24003b98 	.word	0x24003b98
 8001d24:	40000400 	.word	0x40000400

08001d28 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
 8001d48:	615a      	str	r2, [r3, #20]
 8001d4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <MX_TIM4_Init+0xac>)
 8001d4e:	4a22      	ldr	r2, [pc, #136]	; (8001dd8 <MX_TIM4_Init+0xb0>)
 8001d50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <MX_TIM4_Init+0xac>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d58:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <MX_TIM4_Init+0xac>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <MX_TIM4_Init+0xac>)
 8001d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d66:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <MX_TIM4_Init+0xac>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <MX_TIM4_Init+0xac>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001d72:	4818      	ldr	r0, [pc, #96]	; (8001dd4 <MX_TIM4_Init+0xac>)
 8001d74:	f009 f88c 	bl	800ae90 <HAL_TIM_OC_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001d7e:	f7ff fba1 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4810      	ldr	r0, [pc, #64]	; (8001dd4 <MX_TIM4_Init+0xac>)
 8001d92:	f009 fcb3 	bl	800b6fc <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001d9c:	f7ff fb92 	bl	80014c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001da0:	2300      	movs	r3, #0
 8001da2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001db0:	463b      	mov	r3, r7
 8001db2:	2204      	movs	r2, #4
 8001db4:	4619      	mov	r1, r3
 8001db6:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <MX_TIM4_Init+0xac>)
 8001db8:	f009 f8c2 	bl	800af40 <HAL_TIM_OC_ConfigChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001dc2:	f7ff fb7f 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001dc6:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <MX_TIM4_Init+0xac>)
 8001dc8:	f000 f970 	bl	80020ac <HAL_TIM_MspPostInit>

}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	; 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	24003b00 	.word	0x24003b00
 8001dd8:	40000800 	.word	0x40000800

08001ddc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de2:	f107 031c 	add.w	r3, r7, #28
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dee:	463b      	mov	r3, r7
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	615a      	str	r2, [r3, #20]
 8001dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e00:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <MX_TIM5_Init+0xac>)
 8001e02:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <MX_TIM5_Init+0xb0>)
 8001e04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <MX_TIM5_Init+0xac>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <MX_TIM5_Init+0xac>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <MX_TIM5_Init+0xac>)
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <MX_TIM5_Init+0xac>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <MX_TIM5_Init+0xac>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001e26:	4818      	ldr	r0, [pc, #96]	; (8001e88 <MX_TIM5_Init+0xac>)
 8001e28:	f009 f832 	bl	800ae90 <HAL_TIM_OC_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001e32:	f7ff fb47 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	4619      	mov	r1, r3
 8001e44:	4810      	ldr	r0, [pc, #64]	; (8001e88 <MX_TIM5_Init+0xac>)
 8001e46:	f009 fc59 	bl	800b6fc <HAL_TIMEx_MasterConfigSynchronization>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001e50:	f7ff fb38 	bl	80014c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e54:	2300      	movs	r3, #0
 8001e56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e64:	463b      	mov	r3, r7
 8001e66:	2208      	movs	r2, #8
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4807      	ldr	r0, [pc, #28]	; (8001e88 <MX_TIM5_Init+0xac>)
 8001e6c:	f009 f868 	bl	800af40 <HAL_TIM_OC_ConfigChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001e76:	f7ff fb25 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e7a:	4803      	ldr	r0, [pc, #12]	; (8001e88 <MX_TIM5_Init+0xac>)
 8001e7c:	f000 f916 	bl	80020ac <HAL_TIM_MspPostInit>

}
 8001e80:	bf00      	nop
 8001e82:	3728      	adds	r7, #40	; 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	24003b4c 	.word	0x24003b4c
 8001e8c:	40000c00 	.word	0x40000c00

08001e90 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b096      	sub	sp, #88	; 0x58
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	611a      	str	r2, [r3, #16]
 8001eb2:	615a      	str	r2, [r3, #20]
 8001eb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	222c      	movs	r2, #44	; 0x2c
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f00b fa63 	bl	800d388 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ec2:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <MX_TIM8_Init+0x118>)
 8001ec4:	4a39      	ldr	r2, [pc, #228]	; (8001fac <MX_TIM8_Init+0x11c>)
 8001ec6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ec8:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <MX_TIM8_Init+0x118>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <MX_TIM8_Init+0x118>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001ed4:	4b34      	ldr	r3, [pc, #208]	; (8001fa8 <MX_TIM8_Init+0x118>)
 8001ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eda:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001edc:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <MX_TIM8_Init+0x118>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ee2:	4b31      	ldr	r3, [pc, #196]	; (8001fa8 <MX_TIM8_Init+0x118>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <MX_TIM8_Init+0x118>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001eee:	482e      	ldr	r0, [pc, #184]	; (8001fa8 <MX_TIM8_Init+0x118>)
 8001ef0:	f008 ffce 	bl	800ae90 <HAL_TIM_OC_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001efa:	f7ff fae3 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4825      	ldr	r0, [pc, #148]	; (8001fa8 <MX_TIM8_Init+0x118>)
 8001f12:	f009 fbf3 	bl	800b6fc <HAL_TIMEx_MasterConfigSynchronization>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001f1c:	f7ff fad2 	bl	80014c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f20:	2300      	movs	r3, #0
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f34:	2300      	movs	r3, #0
 8001f36:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f40:	2208      	movs	r2, #8
 8001f42:	4619      	mov	r1, r3
 8001f44:	4818      	ldr	r0, [pc, #96]	; (8001fa8 <MX_TIM8_Init+0x118>)
 8001f46:	f008 fffb 	bl	800af40 <HAL_TIM_OC_ConfigChannel>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001f50:	f7ff fab8 	bl	80014c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	4619      	mov	r1, r3
 8001f88:	4807      	ldr	r0, [pc, #28]	; (8001fa8 <MX_TIM8_Init+0x118>)
 8001f8a:	f009 fc3f 	bl	800b80c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001f94:	f7ff fa96 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001f98:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <MX_TIM8_Init+0x118>)
 8001f9a:	f000 f887 	bl	80020ac <HAL_TIM_MspPostInit>

}
 8001f9e:	bf00      	nop
 8001fa0:	3758      	adds	r7, #88	; 0x58
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	24003ab4 	.word	0x24003ab4
 8001fac:	40010400 	.word	0x40010400

08001fb0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a35      	ldr	r2, [pc, #212]	; (8002094 <HAL_TIM_OC_MspInit+0xe4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d10f      	bne.n	8001fe2 <HAL_TIM_OC_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fc2:	4b35      	ldr	r3, [pc, #212]	; (8002098 <HAL_TIM_OC_MspInit+0xe8>)
 8001fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fc8:	4a33      	ldr	r2, [pc, #204]	; (8002098 <HAL_TIM_OC_MspInit+0xe8>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fd2:	4b31      	ldr	r3, [pc, #196]	; (8002098 <HAL_TIM_OC_MspInit+0xe8>)
 8001fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001fe0:	e052      	b.n	8002088 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM3)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a2d      	ldr	r2, [pc, #180]	; (800209c <HAL_TIM_OC_MspInit+0xec>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d10f      	bne.n	800200c <HAL_TIM_OC_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <HAL_TIM_OC_MspInit+0xe8>)
 8001fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ff2:	4a29      	ldr	r2, [pc, #164]	; (8002098 <HAL_TIM_OC_MspInit+0xe8>)
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ffc:	4b26      	ldr	r3, [pc, #152]	; (8002098 <HAL_TIM_OC_MspInit+0xe8>)
 8001ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	69bb      	ldr	r3, [r7, #24]
}
 800200a:	e03d      	b.n	8002088 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM4)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a23      	ldr	r2, [pc, #140]	; (80020a0 <HAL_TIM_OC_MspInit+0xf0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d10f      	bne.n	8002036 <HAL_TIM_OC_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002016:	4b20      	ldr	r3, [pc, #128]	; (8002098 <HAL_TIM_OC_MspInit+0xe8>)
 8002018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800201c:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_TIM_OC_MspInit+0xe8>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002026:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <HAL_TIM_OC_MspInit+0xe8>)
 8002028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	697b      	ldr	r3, [r7, #20]
}
 8002034:	e028      	b.n	8002088 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM5)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <HAL_TIM_OC_MspInit+0xf4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d10f      	bne.n	8002060 <HAL_TIM_OC_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002040:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_TIM_OC_MspInit+0xe8>)
 8002042:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002046:	4a14      	ldr	r2, [pc, #80]	; (8002098 <HAL_TIM_OC_MspInit+0xe8>)
 8002048:	f043 0308 	orr.w	r3, r3, #8
 800204c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_TIM_OC_MspInit+0xe8>)
 8002052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
}
 800205e:	e013      	b.n	8002088 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM8)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a10      	ldr	r2, [pc, #64]	; (80020a8 <HAL_TIM_OC_MspInit+0xf8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10e      	bne.n	8002088 <HAL_TIM_OC_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_TIM_OC_MspInit+0xe8>)
 800206c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002070:	4a09      	ldr	r2, [pc, #36]	; (8002098 <HAL_TIM_OC_MspInit+0xe8>)
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <HAL_TIM_OC_MspInit+0xe8>)
 800207c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
}
 8002088:	bf00      	nop
 800208a:	3724      	adds	r7, #36	; 0x24
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	40010000 	.word	0x40010000
 8002098:	58024400 	.word	0x58024400
 800209c:	40000400 	.word	0x40000400
 80020a0:	40000800 	.word	0x40000800
 80020a4:	40000c00 	.word	0x40000c00
 80020a8:	40010400 	.word	0x40010400

080020ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08c      	sub	sp, #48	; 0x30
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a5e      	ldr	r2, [pc, #376]	; (8002244 <HAL_TIM_MspPostInit+0x198>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d120      	bne.n	8002110 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	4b5e      	ldr	r3, [pc, #376]	; (8002248 <HAL_TIM_MspPostInit+0x19c>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d4:	4a5c      	ldr	r2, [pc, #368]	; (8002248 <HAL_TIM_MspPostInit+0x19c>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020de:	4b5a      	ldr	r3, [pc, #360]	; (8002248 <HAL_TIM_MspPostInit+0x19c>)
 80020e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CIS_CP_Pin;
 80020ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020fe:	2301      	movs	r3, #1
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_CP_GPIO_Port, &GPIO_InitStruct);
 8002102:	f107 031c 	add.w	r3, r7, #28
 8002106:	4619      	mov	r1, r3
 8002108:	4850      	ldr	r0, [pc, #320]	; (800224c <HAL_TIM_MspPostInit+0x1a0>)
 800210a:	f004 fa5d 	bl	80065c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800210e:	e095      	b.n	800223c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM3)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a4e      	ldr	r2, [pc, #312]	; (8002250 <HAL_TIM_MspPostInit+0x1a4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d11f      	bne.n	800215a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800211a:	4b4b      	ldr	r3, [pc, #300]	; (8002248 <HAL_TIM_MspPostInit+0x19c>)
 800211c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002120:	4a49      	ldr	r2, [pc, #292]	; (8002248 <HAL_TIM_MspPostInit+0x19c>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_TIM_MspPostInit+0x19c>)
 800212c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = CIS_VLED_R_Pin;
 8002138:	2340      	movs	r3, #64	; 0x40
 800213a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002148:	2302      	movs	r3, #2
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_R_GPIO_Port, &GPIO_InitStruct);
 800214c:	f107 031c 	add.w	r3, r7, #28
 8002150:	4619      	mov	r1, r3
 8002152:	4840      	ldr	r0, [pc, #256]	; (8002254 <HAL_TIM_MspPostInit+0x1a8>)
 8002154:	f004 fa38 	bl	80065c8 <HAL_GPIO_Init>
}
 8002158:	e070      	b.n	800223c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM4)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a3e      	ldr	r2, [pc, #248]	; (8002258 <HAL_TIM_MspPostInit+0x1ac>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d120      	bne.n	80021a6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002164:	4b38      	ldr	r3, [pc, #224]	; (8002248 <HAL_TIM_MspPostInit+0x19c>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216a:	4a37      	ldr	r2, [pc, #220]	; (8002248 <HAL_TIM_MspPostInit+0x19c>)
 800216c:	f043 0308 	orr.w	r3, r3, #8
 8002170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002174:	4b34      	ldr	r3, [pc, #208]	; (8002248 <HAL_TIM_MspPostInit+0x19c>)
 8002176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CIS_VLED_G_Pin;
 8002182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002194:	2302      	movs	r3, #2
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_G_GPIO_Port, &GPIO_InitStruct);
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	4619      	mov	r1, r3
 800219e:	482f      	ldr	r0, [pc, #188]	; (800225c <HAL_TIM_MspPostInit+0x1b0>)
 80021a0:	f004 fa12 	bl	80065c8 <HAL_GPIO_Init>
}
 80021a4:	e04a      	b.n	800223c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM5)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2d      	ldr	r2, [pc, #180]	; (8002260 <HAL_TIM_MspPostInit+0x1b4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d120      	bne.n	80021f2 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <HAL_TIM_MspPostInit+0x19c>)
 80021b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b6:	4a24      	ldr	r2, [pc, #144]	; (8002248 <HAL_TIM_MspPostInit+0x19c>)
 80021b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <HAL_TIM_MspPostInit+0x19c>)
 80021c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CIS_VLED_B_Pin;
 80021ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021e0:	2302      	movs	r3, #2
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_B_GPIO_Port, &GPIO_InitStruct);
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	4619      	mov	r1, r3
 80021ea:	481e      	ldr	r0, [pc, #120]	; (8002264 <HAL_TIM_MspPostInit+0x1b8>)
 80021ec:	f004 f9ec 	bl	80065c8 <HAL_GPIO_Init>
}
 80021f0:	e024      	b.n	800223c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM8)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <HAL_TIM_MspPostInit+0x1bc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d11f      	bne.n	800223c <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_TIM_MspPostInit+0x19c>)
 80021fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002202:	4a11      	ldr	r2, [pc, #68]	; (8002248 <HAL_TIM_MspPostInit+0x19c>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HAL_TIM_MspPostInit+0x19c>)
 800220e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CIS_SP_Pin;
 800221a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800222c:	2303      	movs	r3, #3
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_SP_GPIO_Port, &GPIO_InitStruct);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	4807      	ldr	r0, [pc, #28]	; (8002254 <HAL_TIM_MspPostInit+0x1a8>)
 8002238:	f004 f9c6 	bl	80065c8 <HAL_GPIO_Init>
}
 800223c:	bf00      	nop
 800223e:	3730      	adds	r7, #48	; 0x30
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40010000 	.word	0x40010000
 8002248:	58024400 	.word	0x58024400
 800224c:	58020000 	.word	0x58020000
 8002250:	40000400 	.word	0x40000400
 8002254:	58020800 	.word	0x58020800
 8002258:	40000800 	.word	0x40000800
 800225c:	58020c00 	.word	0x58020c00
 8002260:	40000c00 	.word	0x40000c00
 8002264:	58021c00 	.word	0x58021c00
 8002268:	40010400 	.word	0x40010400

0800226c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002270:	4b22      	ldr	r3, [pc, #136]	; (80022fc <MX_USART1_UART_Init+0x90>)
 8002272:	4a23      	ldr	r2, [pc, #140]	; (8002300 <MX_USART1_UART_Init+0x94>)
 8002274:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002276:	4b21      	ldr	r3, [pc, #132]	; (80022fc <MX_USART1_UART_Init+0x90>)
 8002278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800227c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <MX_USART1_UART_Init+0x90>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <MX_USART1_UART_Init+0x90>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <MX_USART1_UART_Init+0x90>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <MX_USART1_UART_Init+0x90>)
 8002292:	220c      	movs	r2, #12
 8002294:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <MX_USART1_UART_Init+0x90>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	4b17      	ldr	r3, [pc, #92]	; (80022fc <MX_USART1_UART_Init+0x90>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <MX_USART1_UART_Init+0x90>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <MX_USART1_UART_Init+0x90>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <MX_USART1_UART_Init+0x90>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022b4:	4811      	ldr	r0, [pc, #68]	; (80022fc <MX_USART1_UART_Init+0x90>)
 80022b6:	f009 fb27 	bl	800b908 <HAL_UART_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80022c0:	f7ff f900 	bl	80014c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022c4:	2100      	movs	r1, #0
 80022c6:	480d      	ldr	r0, [pc, #52]	; (80022fc <MX_USART1_UART_Init+0x90>)
 80022c8:	f00a fa74 	bl	800c7b4 <HAL_UARTEx_SetTxFifoThreshold>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80022d2:	f7ff f8f7 	bl	80014c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022d6:	2100      	movs	r1, #0
 80022d8:	4808      	ldr	r0, [pc, #32]	; (80022fc <MX_USART1_UART_Init+0x90>)
 80022da:	f00a faa9 	bl	800c830 <HAL_UARTEx_SetRxFifoThreshold>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80022e4:	f7ff f8ee 	bl	80014c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80022e8:	4804      	ldr	r0, [pc, #16]	; (80022fc <MX_USART1_UART_Init+0x90>)
 80022ea:	f00a fa2a 	bl	800c742 <HAL_UARTEx_DisableFifoMode>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022f4:	f7ff f8e6 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	24003c30 	.word	0x24003c30
 8002300:	40011000 	.word	0x40011000

08002304 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b0b8      	sub	sp, #224	; 0xe0
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	22bc      	movs	r2, #188	; 0xbc
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f00b f82f 	bl	800d388 <memset>
  if(uartHandle->Instance==USART1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a24      	ldr	r2, [pc, #144]	; (80023c0 <HAL_UART_MspInit+0xbc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d141      	bne.n	80023b8 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002334:	2301      	movs	r3, #1
 8002336:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	4618      	mov	r0, r3
 8002344:	f005 fb48 	bl	80079d8 <HAL_RCCEx_PeriphCLKConfig>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800234e:	f7ff f8b9 	bl	80014c4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <HAL_UART_MspInit+0xc0>)
 8002354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002358:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <HAL_UART_MspInit+0xc0>)
 800235a:	f043 0310 	orr.w	r3, r3, #16
 800235e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_UART_MspInit+0xc0>)
 8002364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_UART_MspInit+0xc0>)
 8002372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002376:	4a13      	ldr	r2, [pc, #76]	; (80023c4 <HAL_UART_MspInit+0xc0>)
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_UART_MspInit+0xc0>)
 8002382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800238e:	23c0      	movs	r3, #192	; 0xc0
 8002390:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023a6:	2307      	movs	r3, #7
 80023a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023b0:	4619      	mov	r1, r3
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <HAL_UART_MspInit+0xc4>)
 80023b4:	f004 f908 	bl	80065c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023b8:	bf00      	nop
 80023ba:	37e0      	adds	r7, #224	; 0xe0
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40011000 	.word	0x40011000
 80023c4:	58024400 	.word	0x58024400
 80023c8:	58020400 	.word	0x58020400

080023cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002404 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023d0:	f7fe f95a 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d4:	480c      	ldr	r0, [pc, #48]	; (8002408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023d6:	490d      	ldr	r1, [pc, #52]	; (800240c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023d8:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023dc:	e002      	b.n	80023e4 <LoopCopyDataInit>

080023de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e2:	3304      	adds	r3, #4

080023e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e8:	d3f9      	bcc.n	80023de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023ec:	4c0a      	ldr	r4, [pc, #40]	; (8002418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f0:	e001      	b.n	80023f6 <LoopFillZerobss>

080023f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f4:	3204      	adds	r2, #4

080023f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f8:	d3fb      	bcc.n	80023f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023fa:	f00a ff99 	bl	800d330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fe:	f7fe ff01 	bl	8001204 <main>
  bx  lr
 8002402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002404:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8002408:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800240c:	240035e0 	.word	0x240035e0
  ldr r2, =_sidata
 8002410:	0801007c 	.word	0x0801007c
  ldr r2, =_sbss
 8002414:	240036a0 	.word	0x240036a0
  ldr r4, =_ebss
 8002418:	240064d4 	.word	0x240064d4

0800241c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC3_IRQHandler>
	...

08002420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002426:	2003      	movs	r0, #3
 8002428:	f001 fa54 	bl	80038d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800242c:	f005 f8fe 	bl	800762c <HAL_RCC_GetSysClockFreq>
 8002430:	4602      	mov	r2, r0
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <HAL_Init+0x68>)
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	4913      	ldr	r1, [pc, #76]	; (800248c <HAL_Init+0x6c>)
 800243e:	5ccb      	ldrb	r3, [r1, r3]
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_Init+0x68>)
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	4a0e      	ldr	r2, [pc, #56]	; (800248c <HAL_Init+0x6c>)
 8002454:	5cd3      	ldrb	r3, [r2, r3]
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
 8002460:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <HAL_Init+0x70>)
 8002462:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002464:	4a0b      	ldr	r2, [pc, #44]	; (8002494 <HAL_Init+0x74>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800246a:	2000      	movs	r0, #0
 800246c:	f000 f814 	bl	8002498 <HAL_InitTick>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e002      	b.n	8002480 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800247a:	f7ff fa4d 	bl	8001918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	58024400 	.word	0x58024400
 800248c:	0800fc48 	.word	0x0800fc48
 8002490:	24000004 	.word	0x24000004
 8002494:	24000000 	.word	0x24000000

08002498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80024a0:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_InitTick+0x60>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e021      	b.n	80024f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_InitTick+0x64>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_InitTick+0x60>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80024be:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f001 fa39 	bl	800393a <HAL_SYSTICK_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00e      	b.n	80024f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b0f      	cmp	r3, #15
 80024d6:	d80a      	bhi.n	80024ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d8:	2200      	movs	r2, #0
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024e0:	f001 fa03 	bl	80038ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024e4:	4a06      	ldr	r2, [pc, #24]	; (8002500 <HAL_InitTick+0x68>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	2400000c 	.word	0x2400000c
 80024fc:	24000000 	.word	0x24000000
 8002500:	24000008 	.word	0x24000008

08002504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_IncTick+0x20>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_IncTick+0x24>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4413      	add	r3, r2
 8002514:	4a04      	ldr	r2, [pc, #16]	; (8002528 <HAL_IncTick+0x24>)
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	2400000c 	.word	0x2400000c
 8002528:	24003cc0 	.word	0x24003cc0

0800252c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return uwTick;
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <HAL_GetTick+0x14>)
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	24003cc0 	.word	0x24003cc0

08002544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800254c:	f7ff ffee 	bl	800252c <HAL_GetTick>
 8002550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800255c:	d005      	beq.n	800256a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_Delay+0x44>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800256a:	bf00      	nop
 800256c:	f7ff ffde 	bl	800252c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	429a      	cmp	r2, r3
 800257a:	d8f7      	bhi.n	800256c <HAL_Delay+0x28>
  {
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2400000c 	.word	0x2400000c

0800258c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <HAL_GetREVID+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0c1b      	lsrs	r3, r3, #16
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	5c001000 	.word	0x5c001000

080025a4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80025b4:	4904      	ldr	r1, [pc, #16]	; (80025c8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	58000400 	.word	0x58000400

080025cc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	43db      	mvns	r3, r3
 80025de:	401a      	ands	r2, r3
 80025e0:	4904      	ldr	r1, [pc, #16]	; (80025f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	58000400 	.word	0x58000400

080025f8 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_SetFMCMemorySwappingConfig+0x24>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002608:	4904      	ldr	r1, [pc, #16]	; (800261c <HAL_SetFMCMemorySwappingConfig+0x24>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	52004000 	.word	0x52004000

08002620 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	609a      	str	r2, [r3, #8]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	609a      	str	r2, [r3, #8]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3360      	adds	r3, #96	; 0x60
 800269a:	461a      	mov	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	431a      	orrs	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80026bc:	bf00      	nop
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	611a      	str	r2, [r3, #16]
}
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b087      	sub	sp, #28
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3360      	adds	r3, #96	; 0x60
 800270a:	461a      	mov	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	431a      	orrs	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	601a      	str	r2, [r3, #0]
  }
}
 8002724:	bf00      	nop
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3330      	adds	r3, #48	; 0x30
 8002740:	461a      	mov	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	4413      	add	r3, r2
 800274e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	211f      	movs	r1, #31
 800275c:	fa01 f303 	lsl.w	r3, r1, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	401a      	ands	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	0e9b      	lsrs	r3, r3, #26
 8002768:	f003 011f 	and.w	r1, r3, #31
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	431a      	orrs	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800277c:	bf00      	nop
 800277e:	371c      	adds	r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3314      	adds	r3, #20
 8002798:	461a      	mov	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	0e5b      	lsrs	r3, r3, #25
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	4413      	add	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	0d1b      	lsrs	r3, r3, #20
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	2107      	movs	r1, #7
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	401a      	ands	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	0d1b      	lsrs	r3, r3, #20
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	fa01 f303 	lsl.w	r3, r1, r3
 80027cc:	431a      	orrs	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027f8:	43db      	mvns	r3, r3
 80027fa:	401a      	ands	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 0318 	and.w	r3, r3, #24
 8002802:	4908      	ldr	r1, [pc, #32]	; (8002824 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002804:	40d9      	lsrs	r1, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	400b      	ands	r3, r1
 800280a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800280e:	431a      	orrs	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	000fffff 	.word	0x000fffff

08002828 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	4b04      	ldr	r3, [pc, #16]	; (8002848 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002836:	4013      	ands	r3, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6093      	str	r3, [r2, #8]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	5fffffc0 	.word	0x5fffffc0

0800284c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800285c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002860:	d101      	bne.n	8002866 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <LL_ADC_EnableInternalRegulator+0x24>)
 8002882:	4013      	ands	r3, r2
 8002884:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	6fffffc0 	.word	0x6fffffc0

0800289c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028b0:	d101      	bne.n	80028b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <LL_ADC_IsEnabled+0x18>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <LL_ADC_IsEnabled+0x1a>
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d101      	bne.n	8002902 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b08      	cmp	r3, #8
 8002922:	d101      	bne.n	8002928 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b089      	sub	sp, #36	; 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e18e      	b.n	8002c70 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7fe f86d 	bl	8000a40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff67 	bl	800284c <LL_ADC_IsDeepPowerDownEnabled>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d004      	beq.n	800298e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff4d 	bl	8002828 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff ff82 	bl	800289c <LL_ADC_IsInternalRegulatorEnabled>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d114      	bne.n	80029c8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff66 	bl	8002874 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029a8:	4b9a      	ldr	r3, [pc, #616]	; (8002c14 <HAL_ADC_Init+0x2dc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	4a9a      	ldr	r2, [pc, #616]	; (8002c18 <HAL_ADC_Init+0x2e0>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	3301      	adds	r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029ba:	e002      	b.n	80029c2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	3b01      	subs	r3, #1
 80029c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f9      	bne.n	80029bc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff65 	bl	800289c <LL_ADC_IsInternalRegulatorEnabled>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10d      	bne.n	80029f4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	f043 0210 	orr.w	r2, r3, #16
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff76 	bl	80028ea <LL_ADC_REG_IsConversionOngoing>
 80029fe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f040 8128 	bne.w	8002c5e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f040 8124 	bne.w	8002c5e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a1e:	f043 0202 	orr.w	r2, r3, #2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ff4a 	bl	80028c4 <LL_ADC_IsEnabled>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d136      	bne.n	8002aa4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a78      	ldr	r2, [pc, #480]	; (8002c1c <HAL_ADC_Init+0x2e4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_ADC_Init+0x112>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a76      	ldr	r2, [pc, #472]	; (8002c20 <HAL_ADC_Init+0x2e8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10e      	bne.n	8002a68 <HAL_ADC_Init+0x130>
 8002a4a:	4874      	ldr	r0, [pc, #464]	; (8002c1c <HAL_ADC_Init+0x2e4>)
 8002a4c:	f7ff ff3a 	bl	80028c4 <LL_ADC_IsEnabled>
 8002a50:	4604      	mov	r4, r0
 8002a52:	4873      	ldr	r0, [pc, #460]	; (8002c20 <HAL_ADC_Init+0x2e8>)
 8002a54:	f7ff ff36 	bl	80028c4 <LL_ADC_IsEnabled>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4323      	orrs	r3, r4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e008      	b.n	8002a7a <HAL_ADC_Init+0x142>
 8002a68:	486e      	ldr	r0, [pc, #440]	; (8002c24 <HAL_ADC_Init+0x2ec>)
 8002a6a:	f7ff ff2b 	bl	80028c4 <LL_ADC_IsEnabled>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d012      	beq.n	8002aa4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a66      	ldr	r2, [pc, #408]	; (8002c1c <HAL_ADC_Init+0x2e4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d004      	beq.n	8002a92 <HAL_ADC_Init+0x15a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a64      	ldr	r2, [pc, #400]	; (8002c20 <HAL_ADC_Init+0x2e8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_Init+0x15e>
 8002a92:	4a65      	ldr	r2, [pc, #404]	; (8002c28 <HAL_ADC_Init+0x2f0>)
 8002a94:	e000      	b.n	8002a98 <HAL_ADC_Init+0x160>
 8002a96:	4a65      	ldr	r2, [pc, #404]	; (8002c2c <HAL_ADC_Init+0x2f4>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	f7ff fdbe 	bl	8002620 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002aa4:	f7ff fd72 	bl	800258c <HAL_GetREVID>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f241 0203 	movw	r2, #4099	; 0x1003
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d914      	bls.n	8002adc <HAL_ADC_Init+0x1a4>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d110      	bne.n	8002adc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	7d5b      	ldrb	r3, [r3, #21]
 8002abe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ac4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002aca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7f1b      	ldrb	r3, [r3, #28]
 8002ad0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002ad2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ad4:	f043 030c 	orr.w	r3, r3, #12
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	e00d      	b.n	8002af8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7d5b      	ldrb	r3, [r3, #21]
 8002ae0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ae6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002aec:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	7f1b      	ldrb	r3, [r3, #28]
 8002af2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7f1b      	ldrb	r3, [r3, #28]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d106      	bne.n	8002b0e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	045b      	lsls	r3, r3, #17
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	4b3f      	ldr	r3, [pc, #252]	; (8002c30 <HAL_ADC_Init+0x2f8>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	69b9      	ldr	r1, [r7, #24]
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fed1 	bl	80028ea <LL_ADC_REG_IsConversionOngoing>
 8002b48:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fede 	bl	8002910 <LL_ADC_INJ_IsConversionOngoing>
 8002b54:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d14a      	bne.n	8002bf2 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d147      	bne.n	8002bf2 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7d1b      	ldrb	r3, [r3, #20]
 8002b66:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <HAL_ADC_Init+0x2fc>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6812      	ldr	r2, [r2, #0]
 8002b7e:	69b9      	ldr	r1, [r7, #24]
 8002b80:	430b      	orrs	r3, r1
 8002b82:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d11b      	bne.n	8002bc6 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <HAL_ADC_Init+0x300>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ba2:	3a01      	subs	r2, #1
 8002ba4:	0411      	lsls	r1, r2, #16
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002baa:	4311      	orrs	r1, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	611a      	str	r2, [r3, #16]
 8002bc4:	e007      	b.n	8002bd6 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fb93 	bl	8003318 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d120      	bne.n	8002c3c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	f023 010f 	bic.w	r1, r3, #15
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	1e5a      	subs	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
 8002c12:	e01b      	b.n	8002c4c <HAL_ADC_Init+0x314>
 8002c14:	24000000 	.word	0x24000000
 8002c18:	053e2d63 	.word	0x053e2d63
 8002c1c:	40022000 	.word	0x40022000
 8002c20:	40022100 	.word	0x40022100
 8002c24:	58026000 	.word	0x58026000
 8002c28:	40022300 	.word	0x40022300
 8002c2c:	58026300 	.word	0x58026300
 8002c30:	fff0c003 	.word	0xfff0c003
 8002c34:	ffffbffc 	.word	0xffffbffc
 8002c38:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 020f 	bic.w	r2, r2, #15
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	f023 0303 	bic.w	r3, r3, #3
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
 8002c5c:	e007      	b.n	8002c6e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	f043 0210 	orr.w	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3724      	adds	r7, #36	; 0x24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}

08002c78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b0a1      	sub	sp, #132	; 0x84
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a9d      	ldr	r2, [pc, #628]	; (8002f08 <HAL_ADC_ConfigChannel+0x290>)
 8002c92:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x2a>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e321      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x66e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fe1b 	bl	80028ea <LL_ADC_REG_IsConversionOngoing>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f040 8306 	bne.w	80032c8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d108      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x62>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	0e9b      	lsrs	r3, r3, #26
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	e016      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x90>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cea:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	e003      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002cf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	2201      	movs	r2, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	69d1      	ldr	r1, [r2, #28]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	430b      	orrs	r3, r1
 8002d14:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f7ff fd04 	bl	8002730 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fddc 	bl	80028ea <LL_ADC_REG_IsConversionOngoing>
 8002d32:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fde9 	bl	8002910 <LL_ADC_INJ_IsConversionOngoing>
 8002d3e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f040 80b3 	bne.w	8002eae <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 80af 	bne.w	8002eae <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	6819      	ldr	r1, [r3, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f7ff fd13 	bl	8002788 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d62:	4b6a      	ldr	r3, [pc, #424]	; (8002f0c <HAL_ADC_ConfigChannel+0x294>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002d6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d6e:	d10b      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x110>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	e01d      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x14c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10b      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x136>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	e00a      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x14c>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	089b      	lsrs	r3, r3, #2
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d027      	beq.n	8002e1e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6919      	ldr	r1, [r3, #16]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ddc:	f7ff fc54 	bl	8002688 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6919      	ldr	r1, [r3, #16]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	7e5b      	ldrb	r3, [r3, #25]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d102      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x17e>
 8002df0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002df4:	e000      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x180>
 8002df6:	2300      	movs	r3, #0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f7ff fc7e 	bl	80026fa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6919      	ldr	r1, [r3, #16]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	7e1b      	ldrb	r3, [r3, #24]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d102      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x19c>
 8002e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e12:	e000      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x19e>
 8002e14:	2300      	movs	r3, #0
 8002e16:	461a      	mov	r2, r3
 8002e18:	f7ff fc56 	bl	80026c8 <LL_ADC_SetDataRightShift>
 8002e1c:	e047      	b.n	8002eae <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	069b      	lsls	r3, r3, #26
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d107      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e40:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	069b      	lsls	r3, r3, #26
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d107      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e64:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	069b      	lsls	r3, r3, #26
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d107      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e88:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	069b      	lsls	r3, r3, #26
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d107      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002eac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fd06 	bl	80028c4 <LL_ADC_IsEnabled>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 820d 	bne.w	80032da <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	6819      	ldr	r1, [r3, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f7ff fc87 	bl	80027e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	4a0c      	ldr	r2, [pc, #48]	; (8002f08 <HAL_ADC_ConfigChannel+0x290>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	f040 8133 	bne.w	8003144 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d110      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x298>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	0e9b      	lsrs	r3, r3, #26
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	2b09      	cmp	r3, #9
 8002efc:	bf94      	ite	ls
 8002efe:	2301      	movls	r3, #1
 8002f00:	2300      	movhi	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	e01e      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x2cc>
 8002f06:	bf00      	nop
 8002f08:	47ff0000 	.word	0x47ff0000
 8002f0c:	5c001000 	.word	0x5c001000
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002f28:	2320      	movs	r3, #32
 8002f2a:	e003      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	2b09      	cmp	r3, #9
 8002f3c:	bf94      	ite	ls
 8002f3e:	2301      	movls	r3, #1
 8002f40:	2300      	movhi	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d079      	beq.n	800303c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d107      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x2ec>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	0e9b      	lsrs	r3, r3, #26
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	069b      	lsls	r3, r3, #26
 8002f5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f62:	e015      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x318>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f74:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	e003      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	069b      	lsls	r3, r3, #26
 8002f8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x338>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	0e9b      	lsrs	r3, r3, #26
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	2101      	movs	r1, #1
 8002faa:	fa01 f303 	lsl.w	r3, r1, r3
 8002fae:	e017      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x368>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002fc8:	2320      	movs	r3, #32
 8002fca:	e003      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	2101      	movs	r1, #1
 8002fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe0:	ea42 0103 	orr.w	r1, r2, r3
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x38e>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0e9b      	lsrs	r3, r3, #26
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f003 021f 	and.w	r2, r3, #31
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	051b      	lsls	r3, r3, #20
 8003004:	e018      	b.n	8003038 <HAL_ADC_ConfigChannel+0x3c0>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800301e:	2320      	movs	r3, #32
 8003020:	e003      	b.n	800302a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	3301      	adds	r3, #1
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003038:	430b      	orrs	r3, r1
 800303a:	e07e      	b.n	800313a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x3e0>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	0e9b      	lsrs	r3, r3, #26
 800304e:	3301      	adds	r3, #1
 8003050:	069b      	lsls	r3, r3, #26
 8003052:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003056:	e015      	b.n	8003084 <HAL_ADC_ConfigChannel+0x40c>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800306a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003070:	2320      	movs	r3, #32
 8003072:	e003      	b.n	800307c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	fab3 f383 	clz	r3, r3
 800307a:	b2db      	uxtb	r3, r3
 800307c:	3301      	adds	r3, #1
 800307e:	069b      	lsls	r3, r3, #26
 8003080:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800308c:	2b00      	cmp	r3, #0
 800308e:	d109      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x42c>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	0e9b      	lsrs	r3, r3, #26
 8003096:	3301      	adds	r3, #1
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	e017      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x45c>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	61bb      	str	r3, [r7, #24]
  return result;
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80030bc:	2320      	movs	r3, #32
 80030be:	e003      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	ea42 0103 	orr.w	r1, r2, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10d      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x488>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	0e9b      	lsrs	r3, r3, #26
 80030ea:	3301      	adds	r3, #1
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	3b1e      	subs	r3, #30
 80030f8:	051b      	lsls	r3, r3, #20
 80030fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030fe:	e01b      	b.n	8003138 <HAL_ADC_ConfigChannel+0x4c0>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	60fb      	str	r3, [r7, #12]
  return result;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003118:	2320      	movs	r3, #32
 800311a:	e003      	b.n	8003124 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	3301      	adds	r3, #1
 8003126:	f003 021f 	and.w	r2, r3, #31
 800312a:	4613      	mov	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	3b1e      	subs	r3, #30
 8003132:	051b      	lsls	r3, r3, #20
 8003134:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003138:	430b      	orrs	r3, r1
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	6892      	ldr	r2, [r2, #8]
 800313e:	4619      	mov	r1, r3
 8003140:	f7ff fb22 	bl	8002788 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f280 80c6 	bge.w	80032da <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a67      	ldr	r2, [pc, #412]	; (80032f0 <HAL_ADC_ConfigChannel+0x678>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d004      	beq.n	8003162 <HAL_ADC_ConfigChannel+0x4ea>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a65      	ldr	r2, [pc, #404]	; (80032f4 <HAL_ADC_ConfigChannel+0x67c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x4ee>
 8003162:	4b65      	ldr	r3, [pc, #404]	; (80032f8 <HAL_ADC_ConfigChannel+0x680>)
 8003164:	e000      	b.n	8003168 <HAL_ADC_ConfigChannel+0x4f0>
 8003166:	4b65      	ldr	r3, [pc, #404]	; (80032fc <HAL_ADC_ConfigChannel+0x684>)
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fa7f 	bl	800266c <LL_ADC_GetCommonPathInternalCh>
 800316e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a5e      	ldr	r2, [pc, #376]	; (80032f0 <HAL_ADC_ConfigChannel+0x678>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <HAL_ADC_ConfigChannel+0x50c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a5d      	ldr	r2, [pc, #372]	; (80032f4 <HAL_ADC_ConfigChannel+0x67c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d10e      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x52a>
 8003184:	485a      	ldr	r0, [pc, #360]	; (80032f0 <HAL_ADC_ConfigChannel+0x678>)
 8003186:	f7ff fb9d 	bl	80028c4 <LL_ADC_IsEnabled>
 800318a:	4604      	mov	r4, r0
 800318c:	4859      	ldr	r0, [pc, #356]	; (80032f4 <HAL_ADC_ConfigChannel+0x67c>)
 800318e:	f7ff fb99 	bl	80028c4 <LL_ADC_IsEnabled>
 8003192:	4603      	mov	r3, r0
 8003194:	4323      	orrs	r3, r4
 8003196:	2b00      	cmp	r3, #0
 8003198:	bf0c      	ite	eq
 800319a:	2301      	moveq	r3, #1
 800319c:	2300      	movne	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	e008      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x53c>
 80031a2:	4857      	ldr	r0, [pc, #348]	; (8003300 <HAL_ADC_ConfigChannel+0x688>)
 80031a4:	f7ff fb8e 	bl	80028c4 <LL_ADC_IsEnabled>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf0c      	ite	eq
 80031ae:	2301      	moveq	r3, #1
 80031b0:	2300      	movne	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d07d      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a51      	ldr	r2, [pc, #324]	; (8003304 <HAL_ADC_ConfigChannel+0x68c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d130      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x5ac>
 80031c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d12b      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a4b      	ldr	r2, [pc, #300]	; (8003300 <HAL_ADC_ConfigChannel+0x688>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	f040 8081 	bne.w	80032da <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a44      	ldr	r2, [pc, #272]	; (80032f0 <HAL_ADC_ConfigChannel+0x678>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d004      	beq.n	80031ec <HAL_ADC_ConfigChannel+0x574>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a43      	ldr	r2, [pc, #268]	; (80032f4 <HAL_ADC_ConfigChannel+0x67c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x578>
 80031ec:	4a42      	ldr	r2, [pc, #264]	; (80032f8 <HAL_ADC_ConfigChannel+0x680>)
 80031ee:	e000      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x57a>
 80031f0:	4a42      	ldr	r2, [pc, #264]	; (80032fc <HAL_ADC_ConfigChannel+0x684>)
 80031f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f7ff fa23 	bl	8002646 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003200:	4b41      	ldr	r3, [pc, #260]	; (8003308 <HAL_ADC_ConfigChannel+0x690>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	4a41      	ldr	r2, [pc, #260]	; (800330c <HAL_ADC_ConfigChannel+0x694>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	099b      	lsrs	r3, r3, #6
 800320e:	3301      	adds	r3, #1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003214:	e002      	b.n	800321c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3b01      	subs	r3, #1
 800321a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f9      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003222:	e05a      	b.n	80032da <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a39      	ldr	r2, [pc, #228]	; (8003310 <HAL_ADC_ConfigChannel+0x698>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d11e      	bne.n	800326c <HAL_ADC_ConfigChannel+0x5f4>
 800322e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d119      	bne.n	800326c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a30      	ldr	r2, [pc, #192]	; (8003300 <HAL_ADC_ConfigChannel+0x688>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d14b      	bne.n	80032da <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2a      	ldr	r2, [pc, #168]	; (80032f0 <HAL_ADC_ConfigChannel+0x678>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_ADC_ConfigChannel+0x5de>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a28      	ldr	r2, [pc, #160]	; (80032f4 <HAL_ADC_ConfigChannel+0x67c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_ADC_ConfigChannel+0x5e2>
 8003256:	4a28      	ldr	r2, [pc, #160]	; (80032f8 <HAL_ADC_ConfigChannel+0x680>)
 8003258:	e000      	b.n	800325c <HAL_ADC_ConfigChannel+0x5e4>
 800325a:	4a28      	ldr	r2, [pc, #160]	; (80032fc <HAL_ADC_ConfigChannel+0x684>)
 800325c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003262:	4619      	mov	r1, r3
 8003264:	4610      	mov	r0, r2
 8003266:	f7ff f9ee 	bl	8002646 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800326a:	e036      	b.n	80032da <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a28      	ldr	r2, [pc, #160]	; (8003314 <HAL_ADC_ConfigChannel+0x69c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d131      	bne.n	80032da <HAL_ADC_ConfigChannel+0x662>
 8003276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d12c      	bne.n	80032da <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1e      	ldr	r2, [pc, #120]	; (8003300 <HAL_ADC_ConfigChannel+0x688>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d127      	bne.n	80032da <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <HAL_ADC_ConfigChannel+0x678>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_ADC_ConfigChannel+0x626>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a16      	ldr	r2, [pc, #88]	; (80032f4 <HAL_ADC_ConfigChannel+0x67c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x62a>
 800329e:	4a16      	ldr	r2, [pc, #88]	; (80032f8 <HAL_ADC_ConfigChannel+0x680>)
 80032a0:	e000      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x62c>
 80032a2:	4a16      	ldr	r2, [pc, #88]	; (80032fc <HAL_ADC_ConfigChannel+0x684>)
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f7ff f9ca 	bl	8002646 <LL_ADC_SetCommonPathInternalCh>
 80032b2:	e012      	b.n	80032da <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	f043 0220 	orr.w	r2, r3, #32
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80032c6:	e008      	b.n	80032da <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	f043 0220 	orr.w	r2, r3, #32
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3784      	adds	r7, #132	; 0x84
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd90      	pop	{r4, r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40022000 	.word	0x40022000
 80032f4:	40022100 	.word	0x40022100
 80032f8:	40022300 	.word	0x40022300
 80032fc:	58026300 	.word	0x58026300
 8003300:	58026000 	.word	0x58026000
 8003304:	cb840000 	.word	0xcb840000
 8003308:	24000000 	.word	0x24000000
 800330c:	053e2d63 	.word	0x053e2d63
 8003310:	c7520000 	.word	0xc7520000
 8003314:	cfb80000 	.word	0xcfb80000

08003318 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a79      	ldr	r2, [pc, #484]	; (800350c <ADC_ConfigureBoostMode+0x1f4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d004      	beq.n	8003334 <ADC_ConfigureBoostMode+0x1c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a78      	ldr	r2, [pc, #480]	; (8003510 <ADC_ConfigureBoostMode+0x1f8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d109      	bne.n	8003348 <ADC_ConfigureBoostMode+0x30>
 8003334:	4b77      	ldr	r3, [pc, #476]	; (8003514 <ADC_ConfigureBoostMode+0x1fc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf14      	ite	ne
 8003340:	2301      	movne	r3, #1
 8003342:	2300      	moveq	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	e008      	b.n	800335a <ADC_ConfigureBoostMode+0x42>
 8003348:	4b73      	ldr	r3, [pc, #460]	; (8003518 <ADC_ConfigureBoostMode+0x200>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf14      	ite	ne
 8003354:	2301      	movne	r3, #1
 8003356:	2300      	moveq	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d01c      	beq.n	8003398 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800335e:	f004 fadf 	bl	8007920 <HAL_RCC_GetHCLKFreq>
 8003362:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800336c:	d010      	beq.n	8003390 <ADC_ConfigureBoostMode+0x78>
 800336e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003372:	d871      	bhi.n	8003458 <ADC_ConfigureBoostMode+0x140>
 8003374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003378:	d002      	beq.n	8003380 <ADC_ConfigureBoostMode+0x68>
 800337a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800337e:	d16b      	bne.n	8003458 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	60fb      	str	r3, [r7, #12]
        break;
 800338e:	e066      	b.n	800345e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	60fb      	str	r3, [r7, #12]
        break;
 8003396:	e062      	b.n	800345e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003398:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800339c:	f005 fa5c 	bl	8008858 <HAL_RCCEx_GetPeriphCLKFreq>
 80033a0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80033aa:	d051      	beq.n	8003450 <ADC_ConfigureBoostMode+0x138>
 80033ac:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80033b0:	d854      	bhi.n	800345c <ADC_ConfigureBoostMode+0x144>
 80033b2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80033b6:	d047      	beq.n	8003448 <ADC_ConfigureBoostMode+0x130>
 80033b8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80033bc:	d84e      	bhi.n	800345c <ADC_ConfigureBoostMode+0x144>
 80033be:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80033c2:	d03d      	beq.n	8003440 <ADC_ConfigureBoostMode+0x128>
 80033c4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80033c8:	d848      	bhi.n	800345c <ADC_ConfigureBoostMode+0x144>
 80033ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ce:	d033      	beq.n	8003438 <ADC_ConfigureBoostMode+0x120>
 80033d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033d4:	d842      	bhi.n	800345c <ADC_ConfigureBoostMode+0x144>
 80033d6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80033da:	d029      	beq.n	8003430 <ADC_ConfigureBoostMode+0x118>
 80033dc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80033e0:	d83c      	bhi.n	800345c <ADC_ConfigureBoostMode+0x144>
 80033e2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80033e6:	d01a      	beq.n	800341e <ADC_ConfigureBoostMode+0x106>
 80033e8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80033ec:	d836      	bhi.n	800345c <ADC_ConfigureBoostMode+0x144>
 80033ee:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80033f2:	d014      	beq.n	800341e <ADC_ConfigureBoostMode+0x106>
 80033f4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80033f8:	d830      	bhi.n	800345c <ADC_ConfigureBoostMode+0x144>
 80033fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033fe:	d00e      	beq.n	800341e <ADC_ConfigureBoostMode+0x106>
 8003400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003404:	d82a      	bhi.n	800345c <ADC_ConfigureBoostMode+0x144>
 8003406:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800340a:	d008      	beq.n	800341e <ADC_ConfigureBoostMode+0x106>
 800340c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003410:	d824      	bhi.n	800345c <ADC_ConfigureBoostMode+0x144>
 8003412:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003416:	d002      	beq.n	800341e <ADC_ConfigureBoostMode+0x106>
 8003418:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800341c:	d11e      	bne.n	800345c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	0c9b      	lsrs	r3, r3, #18
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	60fb      	str	r3, [r7, #12]
        break;
 800342e:	e016      	b.n	800345e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	60fb      	str	r3, [r7, #12]
        break;
 8003436:	e012      	b.n	800345e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	60fb      	str	r3, [r7, #12]
        break;
 800343e:	e00e      	b.n	800345e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	099b      	lsrs	r3, r3, #6
 8003444:	60fb      	str	r3, [r7, #12]
        break;
 8003446:	e00a      	b.n	800345e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	09db      	lsrs	r3, r3, #7
 800344c:	60fb      	str	r3, [r7, #12]
        break;
 800344e:	e006      	b.n	800345e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	60fb      	str	r3, [r7, #12]
        break;
 8003456:	e002      	b.n	800345e <ADC_ConfigureBoostMode+0x146>
        break;
 8003458:	bf00      	nop
 800345a:	e000      	b.n	800345e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800345c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800345e:	f7ff f895 	bl	800258c <HAL_GetREVID>
 8003462:	4603      	mov	r3, r0
 8003464:	f241 0203 	movw	r2, #4099	; 0x1003
 8003468:	4293      	cmp	r3, r2
 800346a:	d815      	bhi.n	8003498 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a2b      	ldr	r2, [pc, #172]	; (800351c <ADC_ConfigureBoostMode+0x204>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d908      	bls.n	8003486 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003482:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003484:	e03e      	b.n	8003504 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003494:	609a      	str	r2, [r3, #8]
}
 8003496:	e035      	b.n	8003504 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	085b      	lsrs	r3, r3, #1
 800349c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4a1f      	ldr	r2, [pc, #124]	; (8003520 <ADC_ConfigureBoostMode+0x208>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d808      	bhi.n	80034b8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034b4:	609a      	str	r2, [r3, #8]
}
 80034b6:	e025      	b.n	8003504 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4a1a      	ldr	r2, [pc, #104]	; (8003524 <ADC_ConfigureBoostMode+0x20c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d80a      	bhi.n	80034d6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d2:	609a      	str	r2, [r3, #8]
}
 80034d4:	e016      	b.n	8003504 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a13      	ldr	r2, [pc, #76]	; (8003528 <ADC_ConfigureBoostMode+0x210>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d80a      	bhi.n	80034f4 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f0:	609a      	str	r2, [r3, #8]
}
 80034f2:	e007      	b.n	8003504 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003502:	609a      	str	r2, [r3, #8]
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40022000 	.word	0x40022000
 8003510:	40022100 	.word	0x40022100
 8003514:	40022300 	.word	0x40022300
 8003518:	58026300 	.word	0x58026300
 800351c:	01312d00 	.word	0x01312d00
 8003520:	005f5e10 	.word	0x005f5e10
 8003524:	00bebc20 	.word	0x00bebc20
 8003528:	017d7840 	.word	0x017d7840

0800352c <LL_ADC_IsEnabled>:
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <LL_ADC_IsEnabled+0x18>
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <LL_ADC_IsEnabled+0x1a>
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <LL_ADC_REG_IsConversionOngoing>:
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b04      	cmp	r3, #4
 8003564:	d101      	bne.n	800356a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b09f      	sub	sp, #124	; 0x7c
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003592:	2302      	movs	r3, #2
 8003594:	e0be      	b.n	8003714 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80035a2:	2300      	movs	r3, #0
 80035a4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a5c      	ldr	r2, [pc, #368]	; (800371c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d102      	bne.n	80035b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035b0:	4b5b      	ldr	r3, [pc, #364]	; (8003720 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	e001      	b.n	80035ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10b      	bne.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	f043 0220 	orr.w	r2, r3, #32
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e09d      	b.n	8003714 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ffb9 	bl	8003552 <LL_ADC_REG_IsConversionOngoing>
 80035e0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff ffb3 	bl	8003552 <LL_ADC_REG_IsConversionOngoing>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d17f      	bne.n	80036f2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80035f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d17c      	bne.n	80036f2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a47      	ldr	r2, [pc, #284]	; (800371c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d004      	beq.n	800360c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a46      	ldr	r2, [pc, #280]	; (8003720 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d101      	bne.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800360c:	4b45      	ldr	r3, [pc, #276]	; (8003724 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800360e:	e000      	b.n	8003612 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003610:	4b45      	ldr	r3, [pc, #276]	; (8003728 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003612:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d039      	beq.n	8003690 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800361c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	431a      	orrs	r2, r3
 800362a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a3a      	ldr	r2, [pc, #232]	; (800371c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d004      	beq.n	8003642 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a38      	ldr	r2, [pc, #224]	; (8003720 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d10e      	bne.n	8003660 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003642:	4836      	ldr	r0, [pc, #216]	; (800371c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003644:	f7ff ff72 	bl	800352c <LL_ADC_IsEnabled>
 8003648:	4604      	mov	r4, r0
 800364a:	4835      	ldr	r0, [pc, #212]	; (8003720 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800364c:	f7ff ff6e 	bl	800352c <LL_ADC_IsEnabled>
 8003650:	4603      	mov	r3, r0
 8003652:	4323      	orrs	r3, r4
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e008      	b.n	8003672 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003660:	4832      	ldr	r0, [pc, #200]	; (800372c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003662:	f7ff ff63 	bl	800352c <LL_ADC_IsEnabled>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	bf0c      	ite	eq
 800366c:	2301      	moveq	r3, #1
 800366e:	2300      	movne	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d047      	beq.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800367c:	4013      	ands	r3, r2
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	6811      	ldr	r1, [r2, #0]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	6892      	ldr	r2, [r2, #8]
 8003686:	430a      	orrs	r2, r1
 8003688:	431a      	orrs	r2, r3
 800368a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800368e:	e03a      	b.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1e      	ldr	r2, [pc, #120]	; (800371c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d10e      	bne.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80036b0:	481a      	ldr	r0, [pc, #104]	; (800371c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036b2:	f7ff ff3b 	bl	800352c <LL_ADC_IsEnabled>
 80036b6:	4604      	mov	r4, r0
 80036b8:	4819      	ldr	r0, [pc, #100]	; (8003720 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036ba:	f7ff ff37 	bl	800352c <LL_ADC_IsEnabled>
 80036be:	4603      	mov	r3, r0
 80036c0:	4323      	orrs	r3, r4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	bf0c      	ite	eq
 80036c6:	2301      	moveq	r3, #1
 80036c8:	2300      	movne	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	e008      	b.n	80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80036ce:	4817      	ldr	r0, [pc, #92]	; (800372c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80036d0:	f7ff ff2c 	bl	800352c <LL_ADC_IsEnabled>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bf0c      	ite	eq
 80036da:	2301      	moveq	r3, #1
 80036dc:	2300      	movne	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d010      	beq.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036ee:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036f0:	e009      	b.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003704:	e000      	b.n	8003708 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003706:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003710:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003714:	4618      	mov	r0, r3
 8003716:	377c      	adds	r7, #124	; 0x7c
 8003718:	46bd      	mov	sp, r7
 800371a:	bd90      	pop	{r4, r7, pc}
 800371c:	40022000 	.word	0x40022000
 8003720:	40022100 	.word	0x40022100
 8003724:	40022300 	.word	0x40022300
 8003728:	58026300 	.word	0x58026300
 800372c:	58026000 	.word	0x58026000
 8003730:	fffff0e0 	.word	0xfffff0e0

08003734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <__NVIC_SetPriorityGrouping+0x40>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003750:	4013      	ands	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <__NVIC_SetPriorityGrouping+0x44>)
 800375e:	4313      	orrs	r3, r2
 8003760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003762:	4a04      	ldr	r2, [pc, #16]	; (8003774 <__NVIC_SetPriorityGrouping+0x40>)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	60d3      	str	r3, [r2, #12]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000ed00 	.word	0xe000ed00
 8003778:	05fa0000 	.word	0x05fa0000

0800377c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <__NVIC_GetPriorityGrouping+0x18>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	0a1b      	lsrs	r3, r3, #8
 8003786:	f003 0307 	and.w	r3, r3, #7
}
 800378a:	4618      	mov	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	e000ed00 	.word	0xe000ed00

08003798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	db0b      	blt.n	80037c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	f003 021f 	and.w	r2, r3, #31
 80037b0:	4907      	ldr	r1, [pc, #28]	; (80037d0 <__NVIC_EnableIRQ+0x38>)
 80037b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	2001      	movs	r0, #1
 80037ba:	fa00 f202 	lsl.w	r2, r0, r2
 80037be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	e000e100 	.word	0xe000e100

080037d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	6039      	str	r1, [r7, #0]
 80037de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	db0a      	blt.n	80037fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	490c      	ldr	r1, [pc, #48]	; (8003820 <__NVIC_SetPriority+0x4c>)
 80037ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037f2:	0112      	lsls	r2, r2, #4
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	440b      	add	r3, r1
 80037f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037fc:	e00a      	b.n	8003814 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4908      	ldr	r1, [pc, #32]	; (8003824 <__NVIC_SetPriority+0x50>)
 8003804:	88fb      	ldrh	r3, [r7, #6]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	3b04      	subs	r3, #4
 800380c:	0112      	lsls	r2, r2, #4
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	440b      	add	r3, r1
 8003812:	761a      	strb	r2, [r3, #24]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000e100 	.word	0xe000e100
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003828:	b480      	push	{r7}
 800382a:	b089      	sub	sp, #36	; 0x24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f1c3 0307 	rsb	r3, r3, #7
 8003842:	2b04      	cmp	r3, #4
 8003844:	bf28      	it	cs
 8003846:	2304      	movcs	r3, #4
 8003848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3304      	adds	r3, #4
 800384e:	2b06      	cmp	r3, #6
 8003850:	d902      	bls.n	8003858 <NVIC_EncodePriority+0x30>
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3b03      	subs	r3, #3
 8003856:	e000      	b.n	800385a <NVIC_EncodePriority+0x32>
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800385c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43da      	mvns	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	401a      	ands	r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa01 f303 	lsl.w	r3, r1, r3
 800387a:	43d9      	mvns	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003880:	4313      	orrs	r3, r2
         );
}
 8003882:	4618      	mov	r0, r3
 8003884:	3724      	adds	r7, #36	; 0x24
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3b01      	subs	r3, #1
 800389c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038a0:	d301      	bcc.n	80038a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038a2:	2301      	movs	r3, #1
 80038a4:	e00f      	b.n	80038c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038a6:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <SysTick_Config+0x40>)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ae:	210f      	movs	r1, #15
 80038b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038b4:	f7ff ff8e 	bl	80037d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <SysTick_Config+0x40>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <SysTick_Config+0x40>)
 80038c0:	2207      	movs	r2, #7
 80038c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	e000e010 	.word	0xe000e010

080038d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff ff29 	bl	8003734 <__NVIC_SetPriorityGrouping>
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b086      	sub	sp, #24
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	4603      	mov	r3, r0
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038f8:	f7ff ff40 	bl	800377c <__NVIC_GetPriorityGrouping>
 80038fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	6978      	ldr	r0, [r7, #20]
 8003904:	f7ff ff90 	bl	8003828 <NVIC_EncodePriority>
 8003908:	4602      	mov	r2, r0
 800390a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff ff5f 	bl	80037d4 <__NVIC_SetPriority>
}
 8003916:	bf00      	nop
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	4603      	mov	r3, r0
 8003926:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff33 	bl	8003798 <__NVIC_EnableIRQ>
}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ffa4 	bl	8003890 <SysTick_Config>
 8003948:	4603      	mov	r3, r0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800395c:	f7fe fde6 	bl	800252c <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e316      	b.n	8003f9a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a66      	ldr	r2, [pc, #408]	; (8003b0c <HAL_DMA_Init+0x1b8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d04a      	beq.n	8003a0c <HAL_DMA_Init+0xb8>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a65      	ldr	r2, [pc, #404]	; (8003b10 <HAL_DMA_Init+0x1bc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d045      	beq.n	8003a0c <HAL_DMA_Init+0xb8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a63      	ldr	r2, [pc, #396]	; (8003b14 <HAL_DMA_Init+0x1c0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d040      	beq.n	8003a0c <HAL_DMA_Init+0xb8>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a62      	ldr	r2, [pc, #392]	; (8003b18 <HAL_DMA_Init+0x1c4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d03b      	beq.n	8003a0c <HAL_DMA_Init+0xb8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a60      	ldr	r2, [pc, #384]	; (8003b1c <HAL_DMA_Init+0x1c8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d036      	beq.n	8003a0c <HAL_DMA_Init+0xb8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a5f      	ldr	r2, [pc, #380]	; (8003b20 <HAL_DMA_Init+0x1cc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d031      	beq.n	8003a0c <HAL_DMA_Init+0xb8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a5d      	ldr	r2, [pc, #372]	; (8003b24 <HAL_DMA_Init+0x1d0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d02c      	beq.n	8003a0c <HAL_DMA_Init+0xb8>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a5c      	ldr	r2, [pc, #368]	; (8003b28 <HAL_DMA_Init+0x1d4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d027      	beq.n	8003a0c <HAL_DMA_Init+0xb8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a5a      	ldr	r2, [pc, #360]	; (8003b2c <HAL_DMA_Init+0x1d8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d022      	beq.n	8003a0c <HAL_DMA_Init+0xb8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a59      	ldr	r2, [pc, #356]	; (8003b30 <HAL_DMA_Init+0x1dc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d01d      	beq.n	8003a0c <HAL_DMA_Init+0xb8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a57      	ldr	r2, [pc, #348]	; (8003b34 <HAL_DMA_Init+0x1e0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d018      	beq.n	8003a0c <HAL_DMA_Init+0xb8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a56      	ldr	r2, [pc, #344]	; (8003b38 <HAL_DMA_Init+0x1e4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d013      	beq.n	8003a0c <HAL_DMA_Init+0xb8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a54      	ldr	r2, [pc, #336]	; (8003b3c <HAL_DMA_Init+0x1e8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00e      	beq.n	8003a0c <HAL_DMA_Init+0xb8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a53      	ldr	r2, [pc, #332]	; (8003b40 <HAL_DMA_Init+0x1ec>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d009      	beq.n	8003a0c <HAL_DMA_Init+0xb8>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a51      	ldr	r2, [pc, #324]	; (8003b44 <HAL_DMA_Init+0x1f0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d004      	beq.n	8003a0c <HAL_DMA_Init+0xb8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a50      	ldr	r2, [pc, #320]	; (8003b48 <HAL_DMA_Init+0x1f4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d101      	bne.n	8003a10 <HAL_DMA_Init+0xbc>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <HAL_DMA_Init+0xbe>
 8003a10:	2300      	movs	r3, #0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 813b 	beq.w	8003c8e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a37      	ldr	r2, [pc, #220]	; (8003b0c <HAL_DMA_Init+0x1b8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d04a      	beq.n	8003ac8 <HAL_DMA_Init+0x174>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a36      	ldr	r2, [pc, #216]	; (8003b10 <HAL_DMA_Init+0x1bc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d045      	beq.n	8003ac8 <HAL_DMA_Init+0x174>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a34      	ldr	r2, [pc, #208]	; (8003b14 <HAL_DMA_Init+0x1c0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d040      	beq.n	8003ac8 <HAL_DMA_Init+0x174>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a33      	ldr	r2, [pc, #204]	; (8003b18 <HAL_DMA_Init+0x1c4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d03b      	beq.n	8003ac8 <HAL_DMA_Init+0x174>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a31      	ldr	r2, [pc, #196]	; (8003b1c <HAL_DMA_Init+0x1c8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d036      	beq.n	8003ac8 <HAL_DMA_Init+0x174>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a30      	ldr	r2, [pc, #192]	; (8003b20 <HAL_DMA_Init+0x1cc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d031      	beq.n	8003ac8 <HAL_DMA_Init+0x174>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2e      	ldr	r2, [pc, #184]	; (8003b24 <HAL_DMA_Init+0x1d0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d02c      	beq.n	8003ac8 <HAL_DMA_Init+0x174>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a2d      	ldr	r2, [pc, #180]	; (8003b28 <HAL_DMA_Init+0x1d4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d027      	beq.n	8003ac8 <HAL_DMA_Init+0x174>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a2b      	ldr	r2, [pc, #172]	; (8003b2c <HAL_DMA_Init+0x1d8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d022      	beq.n	8003ac8 <HAL_DMA_Init+0x174>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2a      	ldr	r2, [pc, #168]	; (8003b30 <HAL_DMA_Init+0x1dc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d01d      	beq.n	8003ac8 <HAL_DMA_Init+0x174>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a28      	ldr	r2, [pc, #160]	; (8003b34 <HAL_DMA_Init+0x1e0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d018      	beq.n	8003ac8 <HAL_DMA_Init+0x174>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a27      	ldr	r2, [pc, #156]	; (8003b38 <HAL_DMA_Init+0x1e4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d013      	beq.n	8003ac8 <HAL_DMA_Init+0x174>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a25      	ldr	r2, [pc, #148]	; (8003b3c <HAL_DMA_Init+0x1e8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00e      	beq.n	8003ac8 <HAL_DMA_Init+0x174>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <HAL_DMA_Init+0x1ec>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d009      	beq.n	8003ac8 <HAL_DMA_Init+0x174>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a22      	ldr	r2, [pc, #136]	; (8003b44 <HAL_DMA_Init+0x1f0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d004      	beq.n	8003ac8 <HAL_DMA_Init+0x174>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a21      	ldr	r2, [pc, #132]	; (8003b48 <HAL_DMA_Init+0x1f4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d108      	bne.n	8003ada <HAL_DMA_Init+0x186>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	e007      	b.n	8003aea <HAL_DMA_Init+0x196>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003aea:	e02f      	b.n	8003b4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aec:	f7fe fd1e 	bl	800252c <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d928      	bls.n	8003b4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2203      	movs	r2, #3
 8003b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e246      	b.n	8003f9a <HAL_DMA_Init+0x646>
 8003b0c:	40020010 	.word	0x40020010
 8003b10:	40020028 	.word	0x40020028
 8003b14:	40020040 	.word	0x40020040
 8003b18:	40020058 	.word	0x40020058
 8003b1c:	40020070 	.word	0x40020070
 8003b20:	40020088 	.word	0x40020088
 8003b24:	400200a0 	.word	0x400200a0
 8003b28:	400200b8 	.word	0x400200b8
 8003b2c:	40020410 	.word	0x40020410
 8003b30:	40020428 	.word	0x40020428
 8003b34:	40020440 	.word	0x40020440
 8003b38:	40020458 	.word	0x40020458
 8003b3c:	40020470 	.word	0x40020470
 8003b40:	40020488 	.word	0x40020488
 8003b44:	400204a0 	.word	0x400204a0
 8003b48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1c8      	bne.n	8003aec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4b83      	ldr	r3, [pc, #524]	; (8003d74 <HAL_DMA_Init+0x420>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003b72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d107      	bne.n	8003bb0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003bb0:	4b71      	ldr	r3, [pc, #452]	; (8003d78 <HAL_DMA_Init+0x424>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b71      	ldr	r3, [pc, #452]	; (8003d7c <HAL_DMA_Init+0x428>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bbc:	d328      	bcc.n	8003c10 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b28      	cmp	r3, #40	; 0x28
 8003bc4:	d903      	bls.n	8003bce <HAL_DMA_Init+0x27a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b2e      	cmp	r3, #46	; 0x2e
 8003bcc:	d917      	bls.n	8003bfe <HAL_DMA_Init+0x2aa>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b3e      	cmp	r3, #62	; 0x3e
 8003bd4:	d903      	bls.n	8003bde <HAL_DMA_Init+0x28a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b42      	cmp	r3, #66	; 0x42
 8003bdc:	d90f      	bls.n	8003bfe <HAL_DMA_Init+0x2aa>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b46      	cmp	r3, #70	; 0x46
 8003be4:	d903      	bls.n	8003bee <HAL_DMA_Init+0x29a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b48      	cmp	r3, #72	; 0x48
 8003bec:	d907      	bls.n	8003bfe <HAL_DMA_Init+0x2aa>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b4e      	cmp	r3, #78	; 0x4e
 8003bf4:	d905      	bls.n	8003c02 <HAL_DMA_Init+0x2ae>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b52      	cmp	r3, #82	; 0x52
 8003bfc:	d801      	bhi.n	8003c02 <HAL_DMA_Init+0x2ae>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <HAL_DMA_Init+0x2b0>
 8003c02:	2300      	movs	r3, #0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c0e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 0307 	bic.w	r3, r3, #7
 8003c26:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d117      	bne.n	8003c6a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00e      	beq.n	8003c6a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f001 ff1b 	bl	8005a88 <DMA_CheckFifoParam>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2240      	movs	r2, #64	; 0x40
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e197      	b.n	8003f9a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f001 fe56 	bl	8005924 <DMA_CalcBaseAndBitshift>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	223f      	movs	r2, #63	; 0x3f
 8003c86:	409a      	lsls	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	e0cd      	b.n	8003e2a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a3b      	ldr	r2, [pc, #236]	; (8003d80 <HAL_DMA_Init+0x42c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d022      	beq.n	8003cde <HAL_DMA_Init+0x38a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a39      	ldr	r2, [pc, #228]	; (8003d84 <HAL_DMA_Init+0x430>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01d      	beq.n	8003cde <HAL_DMA_Init+0x38a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a38      	ldr	r2, [pc, #224]	; (8003d88 <HAL_DMA_Init+0x434>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d018      	beq.n	8003cde <HAL_DMA_Init+0x38a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a36      	ldr	r2, [pc, #216]	; (8003d8c <HAL_DMA_Init+0x438>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_DMA_Init+0x38a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a35      	ldr	r2, [pc, #212]	; (8003d90 <HAL_DMA_Init+0x43c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00e      	beq.n	8003cde <HAL_DMA_Init+0x38a>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a33      	ldr	r2, [pc, #204]	; (8003d94 <HAL_DMA_Init+0x440>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_DMA_Init+0x38a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a32      	ldr	r2, [pc, #200]	; (8003d98 <HAL_DMA_Init+0x444>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_DMA_Init+0x38a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a30      	ldr	r2, [pc, #192]	; (8003d9c <HAL_DMA_Init+0x448>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d101      	bne.n	8003ce2 <HAL_DMA_Init+0x38e>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <HAL_DMA_Init+0x390>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8097 	beq.w	8003e18 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a24      	ldr	r2, [pc, #144]	; (8003d80 <HAL_DMA_Init+0x42c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d021      	beq.n	8003d38 <HAL_DMA_Init+0x3e4>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a22      	ldr	r2, [pc, #136]	; (8003d84 <HAL_DMA_Init+0x430>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01c      	beq.n	8003d38 <HAL_DMA_Init+0x3e4>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a21      	ldr	r2, [pc, #132]	; (8003d88 <HAL_DMA_Init+0x434>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d017      	beq.n	8003d38 <HAL_DMA_Init+0x3e4>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <HAL_DMA_Init+0x438>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d012      	beq.n	8003d38 <HAL_DMA_Init+0x3e4>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <HAL_DMA_Init+0x43c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00d      	beq.n	8003d38 <HAL_DMA_Init+0x3e4>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <HAL_DMA_Init+0x440>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d008      	beq.n	8003d38 <HAL_DMA_Init+0x3e4>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <HAL_DMA_Init+0x444>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d003      	beq.n	8003d38 <HAL_DMA_Init+0x3e4>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a19      	ldr	r2, [pc, #100]	; (8003d9c <HAL_DMA_Init+0x448>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2202      	movs	r2, #2
 8003d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <HAL_DMA_Init+0x44c>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b40      	cmp	r3, #64	; 0x40
 8003d60:	d020      	beq.n	8003da4 <HAL_DMA_Init+0x450>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b80      	cmp	r3, #128	; 0x80
 8003d68:	d102      	bne.n	8003d70 <HAL_DMA_Init+0x41c>
 8003d6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d6e:	e01a      	b.n	8003da6 <HAL_DMA_Init+0x452>
 8003d70:	2300      	movs	r3, #0
 8003d72:	e018      	b.n	8003da6 <HAL_DMA_Init+0x452>
 8003d74:	fe10803f 	.word	0xfe10803f
 8003d78:	5c001000 	.word	0x5c001000
 8003d7c:	ffff0000 	.word	0xffff0000
 8003d80:	58025408 	.word	0x58025408
 8003d84:	5802541c 	.word	0x5802541c
 8003d88:	58025430 	.word	0x58025430
 8003d8c:	58025444 	.word	0x58025444
 8003d90:	58025458 	.word	0x58025458
 8003d94:	5802546c 	.word	0x5802546c
 8003d98:	58025480 	.word	0x58025480
 8003d9c:	58025494 	.word	0x58025494
 8003da0:	fffe000f 	.word	0xfffe000f
 8003da4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68d2      	ldr	r2, [r2, #12]
 8003daa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003dac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003db4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003dbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003dc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003dcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003dd4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	4b6e      	ldr	r3, [pc, #440]	; (8003fa4 <HAL_DMA_Init+0x650>)
 8003dec:	4413      	add	r3, r2
 8003dee:	4a6e      	ldr	r2, [pc, #440]	; (8003fa8 <HAL_DMA_Init+0x654>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	009a      	lsls	r2, r3, #2
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f001 fd91 	bl	8005924 <DMA_CalcBaseAndBitshift>
 8003e02:	4603      	mov	r3, r0
 8003e04:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	2201      	movs	r2, #1
 8003e10:	409a      	lsls	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	e008      	b.n	8003e2a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2240      	movs	r2, #64	; 0x40
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2203      	movs	r2, #3
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e0b7      	b.n	8003f9a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a5f      	ldr	r2, [pc, #380]	; (8003fac <HAL_DMA_Init+0x658>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d072      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a5d      	ldr	r2, [pc, #372]	; (8003fb0 <HAL_DMA_Init+0x65c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d06d      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a5c      	ldr	r2, [pc, #368]	; (8003fb4 <HAL_DMA_Init+0x660>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d068      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a5a      	ldr	r2, [pc, #360]	; (8003fb8 <HAL_DMA_Init+0x664>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d063      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a59      	ldr	r2, [pc, #356]	; (8003fbc <HAL_DMA_Init+0x668>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d05e      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a57      	ldr	r2, [pc, #348]	; (8003fc0 <HAL_DMA_Init+0x66c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d059      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a56      	ldr	r2, [pc, #344]	; (8003fc4 <HAL_DMA_Init+0x670>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d054      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a54      	ldr	r2, [pc, #336]	; (8003fc8 <HAL_DMA_Init+0x674>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d04f      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a53      	ldr	r2, [pc, #332]	; (8003fcc <HAL_DMA_Init+0x678>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d04a      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a51      	ldr	r2, [pc, #324]	; (8003fd0 <HAL_DMA_Init+0x67c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d045      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a50      	ldr	r2, [pc, #320]	; (8003fd4 <HAL_DMA_Init+0x680>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d040      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a4e      	ldr	r2, [pc, #312]	; (8003fd8 <HAL_DMA_Init+0x684>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d03b      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a4d      	ldr	r2, [pc, #308]	; (8003fdc <HAL_DMA_Init+0x688>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d036      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a4b      	ldr	r2, [pc, #300]	; (8003fe0 <HAL_DMA_Init+0x68c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d031      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a4a      	ldr	r2, [pc, #296]	; (8003fe4 <HAL_DMA_Init+0x690>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d02c      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a48      	ldr	r2, [pc, #288]	; (8003fe8 <HAL_DMA_Init+0x694>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d027      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a47      	ldr	r2, [pc, #284]	; (8003fec <HAL_DMA_Init+0x698>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d022      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a45      	ldr	r2, [pc, #276]	; (8003ff0 <HAL_DMA_Init+0x69c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01d      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a44      	ldr	r2, [pc, #272]	; (8003ff4 <HAL_DMA_Init+0x6a0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d018      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a42      	ldr	r2, [pc, #264]	; (8003ff8 <HAL_DMA_Init+0x6a4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d013      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a41      	ldr	r2, [pc, #260]	; (8003ffc <HAL_DMA_Init+0x6a8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00e      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a3f      	ldr	r2, [pc, #252]	; (8004000 <HAL_DMA_Init+0x6ac>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d009      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a3e      	ldr	r2, [pc, #248]	; (8004004 <HAL_DMA_Init+0x6b0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d004      	beq.n	8003f1a <HAL_DMA_Init+0x5c6>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a3c      	ldr	r2, [pc, #240]	; (8004008 <HAL_DMA_Init+0x6b4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d101      	bne.n	8003f1e <HAL_DMA_Init+0x5ca>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <HAL_DMA_Init+0x5cc>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d032      	beq.n	8003f8a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f001 fe2b 	bl	8005b80 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b80      	cmp	r3, #128	; 0x80
 8003f30:	d102      	bne.n	8003f38 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f4c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d010      	beq.n	8003f78 <HAL_DMA_Init+0x624>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d80c      	bhi.n	8003f78 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f001 fea8 	bl	8005cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	e008      	b.n	8003f8a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	a7fdabf8 	.word	0xa7fdabf8
 8003fa8:	cccccccd 	.word	0xcccccccd
 8003fac:	40020010 	.word	0x40020010
 8003fb0:	40020028 	.word	0x40020028
 8003fb4:	40020040 	.word	0x40020040
 8003fb8:	40020058 	.word	0x40020058
 8003fbc:	40020070 	.word	0x40020070
 8003fc0:	40020088 	.word	0x40020088
 8003fc4:	400200a0 	.word	0x400200a0
 8003fc8:	400200b8 	.word	0x400200b8
 8003fcc:	40020410 	.word	0x40020410
 8003fd0:	40020428 	.word	0x40020428
 8003fd4:	40020440 	.word	0x40020440
 8003fd8:	40020458 	.word	0x40020458
 8003fdc:	40020470 	.word	0x40020470
 8003fe0:	40020488 	.word	0x40020488
 8003fe4:	400204a0 	.word	0x400204a0
 8003fe8:	400204b8 	.word	0x400204b8
 8003fec:	58025408 	.word	0x58025408
 8003ff0:	5802541c 	.word	0x5802541c
 8003ff4:	58025430 	.word	0x58025430
 8003ff8:	58025444 	.word	0x58025444
 8003ffc:	58025458 	.word	0x58025458
 8004000:	5802546c 	.word	0x5802546c
 8004004:	58025480 	.word	0x58025480
 8004008:	58025494 	.word	0x58025494

0800400c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004014:	f7fe fa8a 	bl	800252c <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e2dc      	b.n	80045de <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d008      	beq.n	8004042 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2280      	movs	r2, #128	; 0x80
 8004034:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e2cd      	b.n	80045de <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a76      	ldr	r2, [pc, #472]	; (8004220 <HAL_DMA_Abort+0x214>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d04a      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a74      	ldr	r2, [pc, #464]	; (8004224 <HAL_DMA_Abort+0x218>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d045      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a73      	ldr	r2, [pc, #460]	; (8004228 <HAL_DMA_Abort+0x21c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d040      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a71      	ldr	r2, [pc, #452]	; (800422c <HAL_DMA_Abort+0x220>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d03b      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a70      	ldr	r2, [pc, #448]	; (8004230 <HAL_DMA_Abort+0x224>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d036      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a6e      	ldr	r2, [pc, #440]	; (8004234 <HAL_DMA_Abort+0x228>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d031      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a6d      	ldr	r2, [pc, #436]	; (8004238 <HAL_DMA_Abort+0x22c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d02c      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a6b      	ldr	r2, [pc, #428]	; (800423c <HAL_DMA_Abort+0x230>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d027      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a6a      	ldr	r2, [pc, #424]	; (8004240 <HAL_DMA_Abort+0x234>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d022      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a68      	ldr	r2, [pc, #416]	; (8004244 <HAL_DMA_Abort+0x238>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d01d      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a67      	ldr	r2, [pc, #412]	; (8004248 <HAL_DMA_Abort+0x23c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d018      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a65      	ldr	r2, [pc, #404]	; (800424c <HAL_DMA_Abort+0x240>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a64      	ldr	r2, [pc, #400]	; (8004250 <HAL_DMA_Abort+0x244>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00e      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a62      	ldr	r2, [pc, #392]	; (8004254 <HAL_DMA_Abort+0x248>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d009      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a61      	ldr	r2, [pc, #388]	; (8004258 <HAL_DMA_Abort+0x24c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a5f      	ldr	r2, [pc, #380]	; (800425c <HAL_DMA_Abort+0x250>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d101      	bne.n	80040e6 <HAL_DMA_Abort+0xda>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <HAL_DMA_Abort+0xdc>
 80040e6:	2300      	movs	r3, #0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d013      	beq.n	8004114 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 021e 	bic.w	r2, r2, #30
 80040fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800410a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	e00a      	b.n	800412a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 020e 	bic.w	r2, r2, #14
 8004122:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a3c      	ldr	r2, [pc, #240]	; (8004220 <HAL_DMA_Abort+0x214>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d072      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a3a      	ldr	r2, [pc, #232]	; (8004224 <HAL_DMA_Abort+0x218>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d06d      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a39      	ldr	r2, [pc, #228]	; (8004228 <HAL_DMA_Abort+0x21c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d068      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a37      	ldr	r2, [pc, #220]	; (800422c <HAL_DMA_Abort+0x220>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d063      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a36      	ldr	r2, [pc, #216]	; (8004230 <HAL_DMA_Abort+0x224>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d05e      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a34      	ldr	r2, [pc, #208]	; (8004234 <HAL_DMA_Abort+0x228>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d059      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a33      	ldr	r2, [pc, #204]	; (8004238 <HAL_DMA_Abort+0x22c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d054      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a31      	ldr	r2, [pc, #196]	; (800423c <HAL_DMA_Abort+0x230>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d04f      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a30      	ldr	r2, [pc, #192]	; (8004240 <HAL_DMA_Abort+0x234>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d04a      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a2e      	ldr	r2, [pc, #184]	; (8004244 <HAL_DMA_Abort+0x238>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d045      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2d      	ldr	r2, [pc, #180]	; (8004248 <HAL_DMA_Abort+0x23c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d040      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a2b      	ldr	r2, [pc, #172]	; (800424c <HAL_DMA_Abort+0x240>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d03b      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a2a      	ldr	r2, [pc, #168]	; (8004250 <HAL_DMA_Abort+0x244>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d036      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a28      	ldr	r2, [pc, #160]	; (8004254 <HAL_DMA_Abort+0x248>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d031      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a27      	ldr	r2, [pc, #156]	; (8004258 <HAL_DMA_Abort+0x24c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d02c      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a25      	ldr	r2, [pc, #148]	; (800425c <HAL_DMA_Abort+0x250>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d027      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a24      	ldr	r2, [pc, #144]	; (8004260 <HAL_DMA_Abort+0x254>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d022      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a22      	ldr	r2, [pc, #136]	; (8004264 <HAL_DMA_Abort+0x258>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d01d      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a21      	ldr	r2, [pc, #132]	; (8004268 <HAL_DMA_Abort+0x25c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d018      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1f      	ldr	r2, [pc, #124]	; (800426c <HAL_DMA_Abort+0x260>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1e      	ldr	r2, [pc, #120]	; (8004270 <HAL_DMA_Abort+0x264>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00e      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <HAL_DMA_Abort+0x268>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d009      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1b      	ldr	r2, [pc, #108]	; (8004278 <HAL_DMA_Abort+0x26c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a19      	ldr	r2, [pc, #100]	; (800427c <HAL_DMA_Abort+0x270>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d132      	bne.n	8004280 <HAL_DMA_Abort+0x274>
 800421a:	2301      	movs	r3, #1
 800421c:	e031      	b.n	8004282 <HAL_DMA_Abort+0x276>
 800421e:	bf00      	nop
 8004220:	40020010 	.word	0x40020010
 8004224:	40020028 	.word	0x40020028
 8004228:	40020040 	.word	0x40020040
 800422c:	40020058 	.word	0x40020058
 8004230:	40020070 	.word	0x40020070
 8004234:	40020088 	.word	0x40020088
 8004238:	400200a0 	.word	0x400200a0
 800423c:	400200b8 	.word	0x400200b8
 8004240:	40020410 	.word	0x40020410
 8004244:	40020428 	.word	0x40020428
 8004248:	40020440 	.word	0x40020440
 800424c:	40020458 	.word	0x40020458
 8004250:	40020470 	.word	0x40020470
 8004254:	40020488 	.word	0x40020488
 8004258:	400204a0 	.word	0x400204a0
 800425c:	400204b8 	.word	0x400204b8
 8004260:	58025408 	.word	0x58025408
 8004264:	5802541c 	.word	0x5802541c
 8004268:	58025430 	.word	0x58025430
 800426c:	58025444 	.word	0x58025444
 8004270:	58025458 	.word	0x58025458
 8004274:	5802546c 	.word	0x5802546c
 8004278:	58025480 	.word	0x58025480
 800427c:	58025494 	.word	0x58025494
 8004280:	2300      	movs	r3, #0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d007      	beq.n	8004296 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004294:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a6d      	ldr	r2, [pc, #436]	; (8004450 <HAL_DMA_Abort+0x444>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d04a      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a6b      	ldr	r2, [pc, #428]	; (8004454 <HAL_DMA_Abort+0x448>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d045      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a6a      	ldr	r2, [pc, #424]	; (8004458 <HAL_DMA_Abort+0x44c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d040      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a68      	ldr	r2, [pc, #416]	; (800445c <HAL_DMA_Abort+0x450>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d03b      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a67      	ldr	r2, [pc, #412]	; (8004460 <HAL_DMA_Abort+0x454>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d036      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a65      	ldr	r2, [pc, #404]	; (8004464 <HAL_DMA_Abort+0x458>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d031      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a64      	ldr	r2, [pc, #400]	; (8004468 <HAL_DMA_Abort+0x45c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d02c      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a62      	ldr	r2, [pc, #392]	; (800446c <HAL_DMA_Abort+0x460>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d027      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a61      	ldr	r2, [pc, #388]	; (8004470 <HAL_DMA_Abort+0x464>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d022      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a5f      	ldr	r2, [pc, #380]	; (8004474 <HAL_DMA_Abort+0x468>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01d      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a5e      	ldr	r2, [pc, #376]	; (8004478 <HAL_DMA_Abort+0x46c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d018      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a5c      	ldr	r2, [pc, #368]	; (800447c <HAL_DMA_Abort+0x470>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a5b      	ldr	r2, [pc, #364]	; (8004480 <HAL_DMA_Abort+0x474>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00e      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a59      	ldr	r2, [pc, #356]	; (8004484 <HAL_DMA_Abort+0x478>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d009      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a58      	ldr	r2, [pc, #352]	; (8004488 <HAL_DMA_Abort+0x47c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a56      	ldr	r2, [pc, #344]	; (800448c <HAL_DMA_Abort+0x480>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d108      	bne.n	8004348 <HAL_DMA_Abort+0x33c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e007      	b.n	8004358 <HAL_DMA_Abort+0x34c>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004358:	e013      	b.n	8004382 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800435a:	f7fe f8e7 	bl	800252c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b05      	cmp	r3, #5
 8004366:	d90c      	bls.n	8004382 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2203      	movs	r2, #3
 800437a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e12d      	b.n	80045de <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e5      	bne.n	800435a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2f      	ldr	r2, [pc, #188]	; (8004450 <HAL_DMA_Abort+0x444>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d04a      	beq.n	800442e <HAL_DMA_Abort+0x422>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a2d      	ldr	r2, [pc, #180]	; (8004454 <HAL_DMA_Abort+0x448>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d045      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a2c      	ldr	r2, [pc, #176]	; (8004458 <HAL_DMA_Abort+0x44c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d040      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a2a      	ldr	r2, [pc, #168]	; (800445c <HAL_DMA_Abort+0x450>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d03b      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a29      	ldr	r2, [pc, #164]	; (8004460 <HAL_DMA_Abort+0x454>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d036      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a27      	ldr	r2, [pc, #156]	; (8004464 <HAL_DMA_Abort+0x458>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d031      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a26      	ldr	r2, [pc, #152]	; (8004468 <HAL_DMA_Abort+0x45c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d02c      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a24      	ldr	r2, [pc, #144]	; (800446c <HAL_DMA_Abort+0x460>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d027      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a23      	ldr	r2, [pc, #140]	; (8004470 <HAL_DMA_Abort+0x464>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d022      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a21      	ldr	r2, [pc, #132]	; (8004474 <HAL_DMA_Abort+0x468>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d01d      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a20      	ldr	r2, [pc, #128]	; (8004478 <HAL_DMA_Abort+0x46c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d018      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a1e      	ldr	r2, [pc, #120]	; (800447c <HAL_DMA_Abort+0x470>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <HAL_DMA_Abort+0x422>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1d      	ldr	r2, [pc, #116]	; (8004480 <HAL_DMA_Abort+0x474>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00e      	beq.n	800442e <HAL_DMA_Abort+0x422>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1b      	ldr	r2, [pc, #108]	; (8004484 <HAL_DMA_Abort+0x478>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d009      	beq.n	800442e <HAL_DMA_Abort+0x422>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1a      	ldr	r2, [pc, #104]	; (8004488 <HAL_DMA_Abort+0x47c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_DMA_Abort+0x422>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a18      	ldr	r2, [pc, #96]	; (800448c <HAL_DMA_Abort+0x480>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d101      	bne.n	8004432 <HAL_DMA_Abort+0x426>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_DMA_Abort+0x428>
 8004432:	2300      	movs	r3, #0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d02b      	beq.n	8004490 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	223f      	movs	r2, #63	; 0x3f
 8004448:	409a      	lsls	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	609a      	str	r2, [r3, #8]
 800444e:	e02a      	b.n	80044a6 <HAL_DMA_Abort+0x49a>
 8004450:	40020010 	.word	0x40020010
 8004454:	40020028 	.word	0x40020028
 8004458:	40020040 	.word	0x40020040
 800445c:	40020058 	.word	0x40020058
 8004460:	40020070 	.word	0x40020070
 8004464:	40020088 	.word	0x40020088
 8004468:	400200a0 	.word	0x400200a0
 800446c:	400200b8 	.word	0x400200b8
 8004470:	40020410 	.word	0x40020410
 8004474:	40020428 	.word	0x40020428
 8004478:	40020440 	.word	0x40020440
 800447c:	40020458 	.word	0x40020458
 8004480:	40020470 	.word	0x40020470
 8004484:	40020488 	.word	0x40020488
 8004488:	400204a0 	.word	0x400204a0
 800448c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	2201      	movs	r2, #1
 80044a0:	409a      	lsls	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a4f      	ldr	r2, [pc, #316]	; (80045e8 <HAL_DMA_Abort+0x5dc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d072      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a4d      	ldr	r2, [pc, #308]	; (80045ec <HAL_DMA_Abort+0x5e0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d06d      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a4c      	ldr	r2, [pc, #304]	; (80045f0 <HAL_DMA_Abort+0x5e4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d068      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a4a      	ldr	r2, [pc, #296]	; (80045f4 <HAL_DMA_Abort+0x5e8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d063      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a49      	ldr	r2, [pc, #292]	; (80045f8 <HAL_DMA_Abort+0x5ec>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d05e      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a47      	ldr	r2, [pc, #284]	; (80045fc <HAL_DMA_Abort+0x5f0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d059      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a46      	ldr	r2, [pc, #280]	; (8004600 <HAL_DMA_Abort+0x5f4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d054      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a44      	ldr	r2, [pc, #272]	; (8004604 <HAL_DMA_Abort+0x5f8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d04f      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a43      	ldr	r2, [pc, #268]	; (8004608 <HAL_DMA_Abort+0x5fc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d04a      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a41      	ldr	r2, [pc, #260]	; (800460c <HAL_DMA_Abort+0x600>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d045      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a40      	ldr	r2, [pc, #256]	; (8004610 <HAL_DMA_Abort+0x604>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d040      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a3e      	ldr	r2, [pc, #248]	; (8004614 <HAL_DMA_Abort+0x608>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d03b      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a3d      	ldr	r2, [pc, #244]	; (8004618 <HAL_DMA_Abort+0x60c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d036      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a3b      	ldr	r2, [pc, #236]	; (800461c <HAL_DMA_Abort+0x610>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d031      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a3a      	ldr	r2, [pc, #232]	; (8004620 <HAL_DMA_Abort+0x614>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d02c      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a38      	ldr	r2, [pc, #224]	; (8004624 <HAL_DMA_Abort+0x618>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d027      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a37      	ldr	r2, [pc, #220]	; (8004628 <HAL_DMA_Abort+0x61c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d022      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a35      	ldr	r2, [pc, #212]	; (800462c <HAL_DMA_Abort+0x620>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d01d      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a34      	ldr	r2, [pc, #208]	; (8004630 <HAL_DMA_Abort+0x624>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d018      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a32      	ldr	r2, [pc, #200]	; (8004634 <HAL_DMA_Abort+0x628>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d013      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a31      	ldr	r2, [pc, #196]	; (8004638 <HAL_DMA_Abort+0x62c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00e      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a2f      	ldr	r2, [pc, #188]	; (800463c <HAL_DMA_Abort+0x630>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d009      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a2e      	ldr	r2, [pc, #184]	; (8004640 <HAL_DMA_Abort+0x634>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d004      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <HAL_DMA_Abort+0x638>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d101      	bne.n	800459a <HAL_DMA_Abort+0x58e>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <HAL_DMA_Abort+0x590>
 800459a:	2300      	movs	r3, #0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d015      	beq.n	80045cc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045a8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00c      	beq.n	80045cc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045ca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40020010 	.word	0x40020010
 80045ec:	40020028 	.word	0x40020028
 80045f0:	40020040 	.word	0x40020040
 80045f4:	40020058 	.word	0x40020058
 80045f8:	40020070 	.word	0x40020070
 80045fc:	40020088 	.word	0x40020088
 8004600:	400200a0 	.word	0x400200a0
 8004604:	400200b8 	.word	0x400200b8
 8004608:	40020410 	.word	0x40020410
 800460c:	40020428 	.word	0x40020428
 8004610:	40020440 	.word	0x40020440
 8004614:	40020458 	.word	0x40020458
 8004618:	40020470 	.word	0x40020470
 800461c:	40020488 	.word	0x40020488
 8004620:	400204a0 	.word	0x400204a0
 8004624:	400204b8 	.word	0x400204b8
 8004628:	58025408 	.word	0x58025408
 800462c:	5802541c 	.word	0x5802541c
 8004630:	58025430 	.word	0x58025430
 8004634:	58025444 	.word	0x58025444
 8004638:	58025458 	.word	0x58025458
 800463c:	5802546c 	.word	0x5802546c
 8004640:	58025480 	.word	0x58025480
 8004644:	58025494 	.word	0x58025494

08004648 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e205      	b.n	8004a66 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d004      	beq.n	8004670 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2280      	movs	r2, #128	; 0x80
 800466a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e1fa      	b.n	8004a66 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a8c      	ldr	r2, [pc, #560]	; (80048a8 <HAL_DMA_Abort_IT+0x260>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d04a      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a8b      	ldr	r2, [pc, #556]	; (80048ac <HAL_DMA_Abort_IT+0x264>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d045      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a89      	ldr	r2, [pc, #548]	; (80048b0 <HAL_DMA_Abort_IT+0x268>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d040      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a88      	ldr	r2, [pc, #544]	; (80048b4 <HAL_DMA_Abort_IT+0x26c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d03b      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a86      	ldr	r2, [pc, #536]	; (80048b8 <HAL_DMA_Abort_IT+0x270>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d036      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a85      	ldr	r2, [pc, #532]	; (80048bc <HAL_DMA_Abort_IT+0x274>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d031      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a83      	ldr	r2, [pc, #524]	; (80048c0 <HAL_DMA_Abort_IT+0x278>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d02c      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a82      	ldr	r2, [pc, #520]	; (80048c4 <HAL_DMA_Abort_IT+0x27c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d027      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a80      	ldr	r2, [pc, #512]	; (80048c8 <HAL_DMA_Abort_IT+0x280>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d022      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a7f      	ldr	r2, [pc, #508]	; (80048cc <HAL_DMA_Abort_IT+0x284>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d01d      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a7d      	ldr	r2, [pc, #500]	; (80048d0 <HAL_DMA_Abort_IT+0x288>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d018      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a7c      	ldr	r2, [pc, #496]	; (80048d4 <HAL_DMA_Abort_IT+0x28c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d013      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a7a      	ldr	r2, [pc, #488]	; (80048d8 <HAL_DMA_Abort_IT+0x290>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00e      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a79      	ldr	r2, [pc, #484]	; (80048dc <HAL_DMA_Abort_IT+0x294>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d009      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a77      	ldr	r2, [pc, #476]	; (80048e0 <HAL_DMA_Abort_IT+0x298>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d004      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a76      	ldr	r2, [pc, #472]	; (80048e4 <HAL_DMA_Abort_IT+0x29c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d101      	bne.n	8004714 <HAL_DMA_Abort_IT+0xcc>
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <HAL_DMA_Abort_IT+0xce>
 8004714:	2300      	movs	r3, #0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d065      	beq.n	80047e6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2204      	movs	r2, #4
 800471e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a60      	ldr	r2, [pc, #384]	; (80048a8 <HAL_DMA_Abort_IT+0x260>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d04a      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x17a>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a5e      	ldr	r2, [pc, #376]	; (80048ac <HAL_DMA_Abort_IT+0x264>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d045      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x17a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a5d      	ldr	r2, [pc, #372]	; (80048b0 <HAL_DMA_Abort_IT+0x268>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d040      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x17a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a5b      	ldr	r2, [pc, #364]	; (80048b4 <HAL_DMA_Abort_IT+0x26c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d03b      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x17a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a5a      	ldr	r2, [pc, #360]	; (80048b8 <HAL_DMA_Abort_IT+0x270>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d036      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x17a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a58      	ldr	r2, [pc, #352]	; (80048bc <HAL_DMA_Abort_IT+0x274>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d031      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x17a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a57      	ldr	r2, [pc, #348]	; (80048c0 <HAL_DMA_Abort_IT+0x278>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d02c      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x17a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a55      	ldr	r2, [pc, #340]	; (80048c4 <HAL_DMA_Abort_IT+0x27c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d027      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x17a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a54      	ldr	r2, [pc, #336]	; (80048c8 <HAL_DMA_Abort_IT+0x280>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d022      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x17a>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a52      	ldr	r2, [pc, #328]	; (80048cc <HAL_DMA_Abort_IT+0x284>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d01d      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x17a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a51      	ldr	r2, [pc, #324]	; (80048d0 <HAL_DMA_Abort_IT+0x288>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d018      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x17a>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a4f      	ldr	r2, [pc, #316]	; (80048d4 <HAL_DMA_Abort_IT+0x28c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d013      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x17a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a4e      	ldr	r2, [pc, #312]	; (80048d8 <HAL_DMA_Abort_IT+0x290>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00e      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x17a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a4c      	ldr	r2, [pc, #304]	; (80048dc <HAL_DMA_Abort_IT+0x294>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d009      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x17a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a4b      	ldr	r2, [pc, #300]	; (80048e0 <HAL_DMA_Abort_IT+0x298>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x17a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a49      	ldr	r2, [pc, #292]	; (80048e4 <HAL_DMA_Abort_IT+0x29c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d108      	bne.n	80047d4 <HAL_DMA_Abort_IT+0x18c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0201 	bic.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	e147      	b.n	8004a64 <HAL_DMA_Abort_IT+0x41c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0201 	bic.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	e13e      	b.n	8004a64 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 020e 	bic.w	r2, r2, #14
 80047f4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a2b      	ldr	r2, [pc, #172]	; (80048a8 <HAL_DMA_Abort_IT+0x260>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d04a      	beq.n	8004896 <HAL_DMA_Abort_IT+0x24e>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a29      	ldr	r2, [pc, #164]	; (80048ac <HAL_DMA_Abort_IT+0x264>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d045      	beq.n	8004896 <HAL_DMA_Abort_IT+0x24e>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a28      	ldr	r2, [pc, #160]	; (80048b0 <HAL_DMA_Abort_IT+0x268>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d040      	beq.n	8004896 <HAL_DMA_Abort_IT+0x24e>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a26      	ldr	r2, [pc, #152]	; (80048b4 <HAL_DMA_Abort_IT+0x26c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d03b      	beq.n	8004896 <HAL_DMA_Abort_IT+0x24e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a25      	ldr	r2, [pc, #148]	; (80048b8 <HAL_DMA_Abort_IT+0x270>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d036      	beq.n	8004896 <HAL_DMA_Abort_IT+0x24e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a23      	ldr	r2, [pc, #140]	; (80048bc <HAL_DMA_Abort_IT+0x274>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d031      	beq.n	8004896 <HAL_DMA_Abort_IT+0x24e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a22      	ldr	r2, [pc, #136]	; (80048c0 <HAL_DMA_Abort_IT+0x278>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d02c      	beq.n	8004896 <HAL_DMA_Abort_IT+0x24e>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a20      	ldr	r2, [pc, #128]	; (80048c4 <HAL_DMA_Abort_IT+0x27c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d027      	beq.n	8004896 <HAL_DMA_Abort_IT+0x24e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1f      	ldr	r2, [pc, #124]	; (80048c8 <HAL_DMA_Abort_IT+0x280>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d022      	beq.n	8004896 <HAL_DMA_Abort_IT+0x24e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1d      	ldr	r2, [pc, #116]	; (80048cc <HAL_DMA_Abort_IT+0x284>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01d      	beq.n	8004896 <HAL_DMA_Abort_IT+0x24e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1c      	ldr	r2, [pc, #112]	; (80048d0 <HAL_DMA_Abort_IT+0x288>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d018      	beq.n	8004896 <HAL_DMA_Abort_IT+0x24e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1a      	ldr	r2, [pc, #104]	; (80048d4 <HAL_DMA_Abort_IT+0x28c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <HAL_DMA_Abort_IT+0x24e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a19      	ldr	r2, [pc, #100]	; (80048d8 <HAL_DMA_Abort_IT+0x290>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00e      	beq.n	8004896 <HAL_DMA_Abort_IT+0x24e>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a17      	ldr	r2, [pc, #92]	; (80048dc <HAL_DMA_Abort_IT+0x294>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d009      	beq.n	8004896 <HAL_DMA_Abort_IT+0x24e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a16      	ldr	r2, [pc, #88]	; (80048e0 <HAL_DMA_Abort_IT+0x298>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_DMA_Abort_IT+0x24e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a14      	ldr	r2, [pc, #80]	; (80048e4 <HAL_DMA_Abort_IT+0x29c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d128      	bne.n	80048e8 <HAL_DMA_Abort_IT+0x2a0>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0201 	bic.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e027      	b.n	80048f8 <HAL_DMA_Abort_IT+0x2b0>
 80048a8:	40020010 	.word	0x40020010
 80048ac:	40020028 	.word	0x40020028
 80048b0:	40020040 	.word	0x40020040
 80048b4:	40020058 	.word	0x40020058
 80048b8:	40020070 	.word	0x40020070
 80048bc:	40020088 	.word	0x40020088
 80048c0:	400200a0 	.word	0x400200a0
 80048c4:	400200b8 	.word	0x400200b8
 80048c8:	40020410 	.word	0x40020410
 80048cc:	40020428 	.word	0x40020428
 80048d0:	40020440 	.word	0x40020440
 80048d4:	40020458 	.word	0x40020458
 80048d8:	40020470 	.word	0x40020470
 80048dc:	40020488 	.word	0x40020488
 80048e0:	400204a0 	.word	0x400204a0
 80048e4:	400204b8 	.word	0x400204b8
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a5c      	ldr	r2, [pc, #368]	; (8004a70 <HAL_DMA_Abort_IT+0x428>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d072      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a5b      	ldr	r2, [pc, #364]	; (8004a74 <HAL_DMA_Abort_IT+0x42c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d06d      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a59      	ldr	r2, [pc, #356]	; (8004a78 <HAL_DMA_Abort_IT+0x430>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d068      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a58      	ldr	r2, [pc, #352]	; (8004a7c <HAL_DMA_Abort_IT+0x434>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d063      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a56      	ldr	r2, [pc, #344]	; (8004a80 <HAL_DMA_Abort_IT+0x438>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d05e      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a55      	ldr	r2, [pc, #340]	; (8004a84 <HAL_DMA_Abort_IT+0x43c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d059      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a53      	ldr	r2, [pc, #332]	; (8004a88 <HAL_DMA_Abort_IT+0x440>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d054      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a52      	ldr	r2, [pc, #328]	; (8004a8c <HAL_DMA_Abort_IT+0x444>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d04f      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a50      	ldr	r2, [pc, #320]	; (8004a90 <HAL_DMA_Abort_IT+0x448>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d04a      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a4f      	ldr	r2, [pc, #316]	; (8004a94 <HAL_DMA_Abort_IT+0x44c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d045      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a4d      	ldr	r2, [pc, #308]	; (8004a98 <HAL_DMA_Abort_IT+0x450>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d040      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a4c      	ldr	r2, [pc, #304]	; (8004a9c <HAL_DMA_Abort_IT+0x454>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d03b      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a4a      	ldr	r2, [pc, #296]	; (8004aa0 <HAL_DMA_Abort_IT+0x458>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d036      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a49      	ldr	r2, [pc, #292]	; (8004aa4 <HAL_DMA_Abort_IT+0x45c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d031      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a47      	ldr	r2, [pc, #284]	; (8004aa8 <HAL_DMA_Abort_IT+0x460>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d02c      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a46      	ldr	r2, [pc, #280]	; (8004aac <HAL_DMA_Abort_IT+0x464>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d027      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a44      	ldr	r2, [pc, #272]	; (8004ab0 <HAL_DMA_Abort_IT+0x468>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d022      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a43      	ldr	r2, [pc, #268]	; (8004ab4 <HAL_DMA_Abort_IT+0x46c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d01d      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a41      	ldr	r2, [pc, #260]	; (8004ab8 <HAL_DMA_Abort_IT+0x470>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d018      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a40      	ldr	r2, [pc, #256]	; (8004abc <HAL_DMA_Abort_IT+0x474>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d013      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a3e      	ldr	r2, [pc, #248]	; (8004ac0 <HAL_DMA_Abort_IT+0x478>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00e      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a3d      	ldr	r2, [pc, #244]	; (8004ac4 <HAL_DMA_Abort_IT+0x47c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d009      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a3b      	ldr	r2, [pc, #236]	; (8004ac8 <HAL_DMA_Abort_IT+0x480>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x3a0>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a3a      	ldr	r2, [pc, #232]	; (8004acc <HAL_DMA_Abort_IT+0x484>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d101      	bne.n	80049ec <HAL_DMA_Abort_IT+0x3a4>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <HAL_DMA_Abort_IT+0x3a6>
 80049ec:	2300      	movs	r3, #0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d028      	beq.n	8004a44 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a00:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a06:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	2201      	movs	r2, #1
 8004a12:	409a      	lsls	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a20:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a38:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a42:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40020010 	.word	0x40020010
 8004a74:	40020028 	.word	0x40020028
 8004a78:	40020040 	.word	0x40020040
 8004a7c:	40020058 	.word	0x40020058
 8004a80:	40020070 	.word	0x40020070
 8004a84:	40020088 	.word	0x40020088
 8004a88:	400200a0 	.word	0x400200a0
 8004a8c:	400200b8 	.word	0x400200b8
 8004a90:	40020410 	.word	0x40020410
 8004a94:	40020428 	.word	0x40020428
 8004a98:	40020440 	.word	0x40020440
 8004a9c:	40020458 	.word	0x40020458
 8004aa0:	40020470 	.word	0x40020470
 8004aa4:	40020488 	.word	0x40020488
 8004aa8:	400204a0 	.word	0x400204a0
 8004aac:	400204b8 	.word	0x400204b8
 8004ab0:	58025408 	.word	0x58025408
 8004ab4:	5802541c 	.word	0x5802541c
 8004ab8:	58025430 	.word	0x58025430
 8004abc:	58025444 	.word	0x58025444
 8004ac0:	58025458 	.word	0x58025458
 8004ac4:	5802546c 	.word	0x5802546c
 8004ac8:	58025480 	.word	0x58025480
 8004acc:	58025494 	.word	0x58025494

08004ad0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	; 0x28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004adc:	4b67      	ldr	r3, [pc, #412]	; (8004c7c <HAL_DMA_IRQHandler+0x1ac>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a67      	ldr	r2, [pc, #412]	; (8004c80 <HAL_DMA_IRQHandler+0x1b0>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	0a9b      	lsrs	r3, r3, #10
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a5f      	ldr	r2, [pc, #380]	; (8004c84 <HAL_DMA_IRQHandler+0x1b4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d04a      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xd2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a5d      	ldr	r2, [pc, #372]	; (8004c88 <HAL_DMA_IRQHandler+0x1b8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d045      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xd2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a5c      	ldr	r2, [pc, #368]	; (8004c8c <HAL_DMA_IRQHandler+0x1bc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d040      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xd2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a5a      	ldr	r2, [pc, #360]	; (8004c90 <HAL_DMA_IRQHandler+0x1c0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d03b      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xd2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a59      	ldr	r2, [pc, #356]	; (8004c94 <HAL_DMA_IRQHandler+0x1c4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d036      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xd2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a57      	ldr	r2, [pc, #348]	; (8004c98 <HAL_DMA_IRQHandler+0x1c8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d031      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xd2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a56      	ldr	r2, [pc, #344]	; (8004c9c <HAL_DMA_IRQHandler+0x1cc>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d02c      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xd2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a54      	ldr	r2, [pc, #336]	; (8004ca0 <HAL_DMA_IRQHandler+0x1d0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d027      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xd2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a53      	ldr	r2, [pc, #332]	; (8004ca4 <HAL_DMA_IRQHandler+0x1d4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d022      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xd2>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a51      	ldr	r2, [pc, #324]	; (8004ca8 <HAL_DMA_IRQHandler+0x1d8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01d      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xd2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a50      	ldr	r2, [pc, #320]	; (8004cac <HAL_DMA_IRQHandler+0x1dc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d018      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xd2>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a4e      	ldr	r2, [pc, #312]	; (8004cb0 <HAL_DMA_IRQHandler+0x1e0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d013      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xd2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a4d      	ldr	r2, [pc, #308]	; (8004cb4 <HAL_DMA_IRQHandler+0x1e4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00e      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xd2>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a4b      	ldr	r2, [pc, #300]	; (8004cb8 <HAL_DMA_IRQHandler+0x1e8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xd2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a4a      	ldr	r2, [pc, #296]	; (8004cbc <HAL_DMA_IRQHandler+0x1ec>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xd2>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a48      	ldr	r2, [pc, #288]	; (8004cc0 <HAL_DMA_IRQHandler+0x1f0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d101      	bne.n	8004ba6 <HAL_DMA_IRQHandler+0xd6>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <HAL_DMA_IRQHandler+0xd8>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 842b 	beq.w	8005404 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	2208      	movs	r2, #8
 8004bb8:	409a      	lsls	r2, r3
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80a2 	beq.w	8004d08 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a2e      	ldr	r2, [pc, #184]	; (8004c84 <HAL_DMA_IRQHandler+0x1b4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d04a      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x194>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2d      	ldr	r2, [pc, #180]	; (8004c88 <HAL_DMA_IRQHandler+0x1b8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d045      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x194>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2b      	ldr	r2, [pc, #172]	; (8004c8c <HAL_DMA_IRQHandler+0x1bc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d040      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x194>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2a      	ldr	r2, [pc, #168]	; (8004c90 <HAL_DMA_IRQHandler+0x1c0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d03b      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x194>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a28      	ldr	r2, [pc, #160]	; (8004c94 <HAL_DMA_IRQHandler+0x1c4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d036      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x194>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a27      	ldr	r2, [pc, #156]	; (8004c98 <HAL_DMA_IRQHandler+0x1c8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d031      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x194>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a25      	ldr	r2, [pc, #148]	; (8004c9c <HAL_DMA_IRQHandler+0x1cc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d02c      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x194>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a24      	ldr	r2, [pc, #144]	; (8004ca0 <HAL_DMA_IRQHandler+0x1d0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d027      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x194>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a22      	ldr	r2, [pc, #136]	; (8004ca4 <HAL_DMA_IRQHandler+0x1d4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d022      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x194>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a21      	ldr	r2, [pc, #132]	; (8004ca8 <HAL_DMA_IRQHandler+0x1d8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d01d      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x194>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1f      	ldr	r2, [pc, #124]	; (8004cac <HAL_DMA_IRQHandler+0x1dc>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d018      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x194>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <HAL_DMA_IRQHandler+0x1e0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d013      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x194>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1c      	ldr	r2, [pc, #112]	; (8004cb4 <HAL_DMA_IRQHandler+0x1e4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00e      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x194>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1b      	ldr	r2, [pc, #108]	; (8004cb8 <HAL_DMA_IRQHandler+0x1e8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d009      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x194>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a19      	ldr	r2, [pc, #100]	; (8004cbc <HAL_DMA_IRQHandler+0x1ec>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d004      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x194>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a18      	ldr	r2, [pc, #96]	; (8004cc0 <HAL_DMA_IRQHandler+0x1f0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d12f      	bne.n	8004cc4 <HAL_DMA_IRQHandler+0x1f4>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bf14      	ite	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	2300      	moveq	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	e02e      	b.n	8004cd8 <HAL_DMA_IRQHandler+0x208>
 8004c7a:	bf00      	nop
 8004c7c:	24000000 	.word	0x24000000
 8004c80:	1b4e81b5 	.word	0x1b4e81b5
 8004c84:	40020010 	.word	0x40020010
 8004c88:	40020028 	.word	0x40020028
 8004c8c:	40020040 	.word	0x40020040
 8004c90:	40020058 	.word	0x40020058
 8004c94:	40020070 	.word	0x40020070
 8004c98:	40020088 	.word	0x40020088
 8004c9c:	400200a0 	.word	0x400200a0
 8004ca0:	400200b8 	.word	0x400200b8
 8004ca4:	40020410 	.word	0x40020410
 8004ca8:	40020428 	.word	0x40020428
 8004cac:	40020440 	.word	0x40020440
 8004cb0:	40020458 	.word	0x40020458
 8004cb4:	40020470 	.word	0x40020470
 8004cb8:	40020488 	.word	0x40020488
 8004cbc:	400204a0 	.word	0x400204a0
 8004cc0:	400204b8 	.word	0x400204b8
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	bf14      	ite	ne
 8004cd2:	2301      	movne	r3, #1
 8004cd4:	2300      	moveq	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d015      	beq.n	8004d08 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0204 	bic.w	r2, r2, #4
 8004cea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	409a      	lsls	r2, r3
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d00:	f043 0201 	orr.w	r2, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	fa22 f303 	lsr.w	r3, r2, r3
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d06e      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a69      	ldr	r2, [pc, #420]	; (8004ec8 <HAL_DMA_IRQHandler+0x3f8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d04a      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x2ee>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a67      	ldr	r2, [pc, #412]	; (8004ecc <HAL_DMA_IRQHandler+0x3fc>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d045      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x2ee>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a66      	ldr	r2, [pc, #408]	; (8004ed0 <HAL_DMA_IRQHandler+0x400>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d040      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x2ee>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a64      	ldr	r2, [pc, #400]	; (8004ed4 <HAL_DMA_IRQHandler+0x404>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d03b      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x2ee>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a63      	ldr	r2, [pc, #396]	; (8004ed8 <HAL_DMA_IRQHandler+0x408>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d036      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x2ee>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a61      	ldr	r2, [pc, #388]	; (8004edc <HAL_DMA_IRQHandler+0x40c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d031      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x2ee>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a60      	ldr	r2, [pc, #384]	; (8004ee0 <HAL_DMA_IRQHandler+0x410>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d02c      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x2ee>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a5e      	ldr	r2, [pc, #376]	; (8004ee4 <HAL_DMA_IRQHandler+0x414>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d027      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x2ee>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a5d      	ldr	r2, [pc, #372]	; (8004ee8 <HAL_DMA_IRQHandler+0x418>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d022      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x2ee>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a5b      	ldr	r2, [pc, #364]	; (8004eec <HAL_DMA_IRQHandler+0x41c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d01d      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x2ee>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a5a      	ldr	r2, [pc, #360]	; (8004ef0 <HAL_DMA_IRQHandler+0x420>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d018      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x2ee>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a58      	ldr	r2, [pc, #352]	; (8004ef4 <HAL_DMA_IRQHandler+0x424>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d013      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x2ee>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a57      	ldr	r2, [pc, #348]	; (8004ef8 <HAL_DMA_IRQHandler+0x428>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00e      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x2ee>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a55      	ldr	r2, [pc, #340]	; (8004efc <HAL_DMA_IRQHandler+0x42c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d009      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x2ee>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a54      	ldr	r2, [pc, #336]	; (8004f00 <HAL_DMA_IRQHandler+0x430>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d004      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x2ee>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a52      	ldr	r2, [pc, #328]	; (8004f04 <HAL_DMA_IRQHandler+0x434>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d10a      	bne.n	8004dd4 <HAL_DMA_IRQHandler+0x304>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bf14      	ite	ne
 8004dcc:	2301      	movne	r3, #1
 8004dce:	2300      	moveq	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	e003      	b.n	8004ddc <HAL_DMA_IRQHandler+0x30c>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00d      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	2201      	movs	r2, #1
 8004dea:	409a      	lsls	r2, r3
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df4:	f043 0202 	orr.w	r2, r3, #2
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	2204      	movs	r2, #4
 8004e06:	409a      	lsls	r2, r3
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 808f 	beq.w	8004f30 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a2c      	ldr	r2, [pc, #176]	; (8004ec8 <HAL_DMA_IRQHandler+0x3f8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d04a      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3e2>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a2a      	ldr	r2, [pc, #168]	; (8004ecc <HAL_DMA_IRQHandler+0x3fc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d045      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3e2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a29      	ldr	r2, [pc, #164]	; (8004ed0 <HAL_DMA_IRQHandler+0x400>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d040      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3e2>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a27      	ldr	r2, [pc, #156]	; (8004ed4 <HAL_DMA_IRQHandler+0x404>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d03b      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3e2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a26      	ldr	r2, [pc, #152]	; (8004ed8 <HAL_DMA_IRQHandler+0x408>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d036      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3e2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a24      	ldr	r2, [pc, #144]	; (8004edc <HAL_DMA_IRQHandler+0x40c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d031      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3e2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a23      	ldr	r2, [pc, #140]	; (8004ee0 <HAL_DMA_IRQHandler+0x410>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d02c      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3e2>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a21      	ldr	r2, [pc, #132]	; (8004ee4 <HAL_DMA_IRQHandler+0x414>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d027      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3e2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a20      	ldr	r2, [pc, #128]	; (8004ee8 <HAL_DMA_IRQHandler+0x418>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d022      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3e2>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1e      	ldr	r2, [pc, #120]	; (8004eec <HAL_DMA_IRQHandler+0x41c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01d      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3e2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a1d      	ldr	r2, [pc, #116]	; (8004ef0 <HAL_DMA_IRQHandler+0x420>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d018      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3e2>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a1b      	ldr	r2, [pc, #108]	; (8004ef4 <HAL_DMA_IRQHandler+0x424>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3e2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a1a      	ldr	r2, [pc, #104]	; (8004ef8 <HAL_DMA_IRQHandler+0x428>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00e      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3e2>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a18      	ldr	r2, [pc, #96]	; (8004efc <HAL_DMA_IRQHandler+0x42c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d009      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3e2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a17      	ldr	r2, [pc, #92]	; (8004f00 <HAL_DMA_IRQHandler+0x430>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d004      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0x3e2>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <HAL_DMA_IRQHandler+0x434>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d12a      	bne.n	8004f08 <HAL_DMA_IRQHandler+0x438>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	bf14      	ite	ne
 8004ec0:	2301      	movne	r3, #1
 8004ec2:	2300      	moveq	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	e023      	b.n	8004f10 <HAL_DMA_IRQHandler+0x440>
 8004ec8:	40020010 	.word	0x40020010
 8004ecc:	40020028 	.word	0x40020028
 8004ed0:	40020040 	.word	0x40020040
 8004ed4:	40020058 	.word	0x40020058
 8004ed8:	40020070 	.word	0x40020070
 8004edc:	40020088 	.word	0x40020088
 8004ee0:	400200a0 	.word	0x400200a0
 8004ee4:	400200b8 	.word	0x400200b8
 8004ee8:	40020410 	.word	0x40020410
 8004eec:	40020428 	.word	0x40020428
 8004ef0:	40020440 	.word	0x40020440
 8004ef4:	40020458 	.word	0x40020458
 8004ef8:	40020470 	.word	0x40020470
 8004efc:	40020488 	.word	0x40020488
 8004f00:	400204a0 	.word	0x400204a0
 8004f04:	400204b8 	.word	0x400204b8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00d      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f18:	f003 031f 	and.w	r3, r3, #31
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	f043 0204 	orr.w	r2, r3, #4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	2210      	movs	r2, #16
 8004f3a:	409a      	lsls	r2, r3
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 80a6 	beq.w	8005092 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a85      	ldr	r2, [pc, #532]	; (8005160 <HAL_DMA_IRQHandler+0x690>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d04a      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x516>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a83      	ldr	r2, [pc, #524]	; (8005164 <HAL_DMA_IRQHandler+0x694>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d045      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x516>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a82      	ldr	r2, [pc, #520]	; (8005168 <HAL_DMA_IRQHandler+0x698>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d040      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x516>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a80      	ldr	r2, [pc, #512]	; (800516c <HAL_DMA_IRQHandler+0x69c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d03b      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x516>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a7f      	ldr	r2, [pc, #508]	; (8005170 <HAL_DMA_IRQHandler+0x6a0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d036      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x516>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a7d      	ldr	r2, [pc, #500]	; (8005174 <HAL_DMA_IRQHandler+0x6a4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d031      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x516>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a7c      	ldr	r2, [pc, #496]	; (8005178 <HAL_DMA_IRQHandler+0x6a8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d02c      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x516>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a7a      	ldr	r2, [pc, #488]	; (800517c <HAL_DMA_IRQHandler+0x6ac>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d027      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x516>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a79      	ldr	r2, [pc, #484]	; (8005180 <HAL_DMA_IRQHandler+0x6b0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d022      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x516>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a77      	ldr	r2, [pc, #476]	; (8005184 <HAL_DMA_IRQHandler+0x6b4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d01d      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x516>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a76      	ldr	r2, [pc, #472]	; (8005188 <HAL_DMA_IRQHandler+0x6b8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d018      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x516>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a74      	ldr	r2, [pc, #464]	; (800518c <HAL_DMA_IRQHandler+0x6bc>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d013      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x516>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a73      	ldr	r2, [pc, #460]	; (8005190 <HAL_DMA_IRQHandler+0x6c0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00e      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x516>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a71      	ldr	r2, [pc, #452]	; (8005194 <HAL_DMA_IRQHandler+0x6c4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d009      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x516>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a70      	ldr	r2, [pc, #448]	; (8005198 <HAL_DMA_IRQHandler+0x6c8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d004      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x516>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a6e      	ldr	r2, [pc, #440]	; (800519c <HAL_DMA_IRQHandler+0x6cc>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d10a      	bne.n	8004ffc <HAL_DMA_IRQHandler+0x52c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	bf14      	ite	ne
 8004ff4:	2301      	movne	r3, #1
 8004ff6:	2300      	moveq	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	e009      	b.n	8005010 <HAL_DMA_IRQHandler+0x540>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	bf14      	ite	ne
 800500a:	2301      	movne	r3, #1
 800500c:	2300      	moveq	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d03e      	beq.n	8005092 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005018:	f003 031f 	and.w	r3, r3, #31
 800501c:	2210      	movs	r2, #16
 800501e:	409a      	lsls	r2, r3
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d018      	beq.n	8005064 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d108      	bne.n	8005052 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d024      	beq.n	8005092 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3
 8005050:	e01f      	b.n	8005092 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005056:	2b00      	cmp	r3, #0
 8005058:	d01b      	beq.n	8005092 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	4798      	blx	r3
 8005062:	e016      	b.n	8005092 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506e:	2b00      	cmp	r3, #0
 8005070:	d107      	bne.n	8005082 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0208 	bic.w	r2, r2, #8
 8005080:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	2220      	movs	r2, #32
 800509c:	409a      	lsls	r2, r3
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	4013      	ands	r3, r2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8110 	beq.w	80052c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2c      	ldr	r2, [pc, #176]	; (8005160 <HAL_DMA_IRQHandler+0x690>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d04a      	beq.n	8005148 <HAL_DMA_IRQHandler+0x678>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2b      	ldr	r2, [pc, #172]	; (8005164 <HAL_DMA_IRQHandler+0x694>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d045      	beq.n	8005148 <HAL_DMA_IRQHandler+0x678>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a29      	ldr	r2, [pc, #164]	; (8005168 <HAL_DMA_IRQHandler+0x698>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d040      	beq.n	8005148 <HAL_DMA_IRQHandler+0x678>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a28      	ldr	r2, [pc, #160]	; (800516c <HAL_DMA_IRQHandler+0x69c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d03b      	beq.n	8005148 <HAL_DMA_IRQHandler+0x678>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a26      	ldr	r2, [pc, #152]	; (8005170 <HAL_DMA_IRQHandler+0x6a0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d036      	beq.n	8005148 <HAL_DMA_IRQHandler+0x678>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a25      	ldr	r2, [pc, #148]	; (8005174 <HAL_DMA_IRQHandler+0x6a4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d031      	beq.n	8005148 <HAL_DMA_IRQHandler+0x678>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a23      	ldr	r2, [pc, #140]	; (8005178 <HAL_DMA_IRQHandler+0x6a8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d02c      	beq.n	8005148 <HAL_DMA_IRQHandler+0x678>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a22      	ldr	r2, [pc, #136]	; (800517c <HAL_DMA_IRQHandler+0x6ac>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d027      	beq.n	8005148 <HAL_DMA_IRQHandler+0x678>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a20      	ldr	r2, [pc, #128]	; (8005180 <HAL_DMA_IRQHandler+0x6b0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d022      	beq.n	8005148 <HAL_DMA_IRQHandler+0x678>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1f      	ldr	r2, [pc, #124]	; (8005184 <HAL_DMA_IRQHandler+0x6b4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d01d      	beq.n	8005148 <HAL_DMA_IRQHandler+0x678>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1d      	ldr	r2, [pc, #116]	; (8005188 <HAL_DMA_IRQHandler+0x6b8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d018      	beq.n	8005148 <HAL_DMA_IRQHandler+0x678>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1c      	ldr	r2, [pc, #112]	; (800518c <HAL_DMA_IRQHandler+0x6bc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <HAL_DMA_IRQHandler+0x678>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1a      	ldr	r2, [pc, #104]	; (8005190 <HAL_DMA_IRQHandler+0x6c0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00e      	beq.n	8005148 <HAL_DMA_IRQHandler+0x678>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a19      	ldr	r2, [pc, #100]	; (8005194 <HAL_DMA_IRQHandler+0x6c4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d009      	beq.n	8005148 <HAL_DMA_IRQHandler+0x678>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a17      	ldr	r2, [pc, #92]	; (8005198 <HAL_DMA_IRQHandler+0x6c8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_DMA_IRQHandler+0x678>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a16      	ldr	r2, [pc, #88]	; (800519c <HAL_DMA_IRQHandler+0x6cc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d12b      	bne.n	80051a0 <HAL_DMA_IRQHandler+0x6d0>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b00      	cmp	r3, #0
 8005154:	bf14      	ite	ne
 8005156:	2301      	movne	r3, #1
 8005158:	2300      	moveq	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	e02a      	b.n	80051b4 <HAL_DMA_IRQHandler+0x6e4>
 800515e:	bf00      	nop
 8005160:	40020010 	.word	0x40020010
 8005164:	40020028 	.word	0x40020028
 8005168:	40020040 	.word	0x40020040
 800516c:	40020058 	.word	0x40020058
 8005170:	40020070 	.word	0x40020070
 8005174:	40020088 	.word	0x40020088
 8005178:	400200a0 	.word	0x400200a0
 800517c:	400200b8 	.word	0x400200b8
 8005180:	40020410 	.word	0x40020410
 8005184:	40020428 	.word	0x40020428
 8005188:	40020440 	.word	0x40020440
 800518c:	40020458 	.word	0x40020458
 8005190:	40020470 	.word	0x40020470
 8005194:	40020488 	.word	0x40020488
 8005198:	400204a0 	.word	0x400204a0
 800519c:	400204b8 	.word	0x400204b8
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf14      	ite	ne
 80051ae:	2301      	movne	r3, #1
 80051b0:	2300      	moveq	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8087 	beq.w	80052c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051be:	f003 031f 	and.w	r3, r3, #31
 80051c2:	2220      	movs	r2, #32
 80051c4:	409a      	lsls	r2, r3
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d139      	bne.n	800524a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0216 	bic.w	r2, r2, #22
 80051e4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695a      	ldr	r2, [r3, #20]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051f4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d103      	bne.n	8005206 <HAL_DMA_IRQHandler+0x736>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005202:	2b00      	cmp	r3, #0
 8005204:	d007      	beq.n	8005216 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0208 	bic.w	r2, r2, #8
 8005214:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521a:	f003 031f 	and.w	r3, r3, #31
 800521e:	223f      	movs	r2, #63	; 0x3f
 8005220:	409a      	lsls	r2, r3
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 834a 	beq.w	80058d4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	4798      	blx	r3
          }
          return;
 8005248:	e344      	b.n	80058d4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d018      	beq.n	800528a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d108      	bne.n	8005278 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	2b00      	cmp	r3, #0
 800526c:	d02c      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	4798      	blx	r3
 8005276:	e027      	b.n	80052c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d023      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	4798      	blx	r3
 8005288:	e01e      	b.n	80052c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10f      	bne.n	80052b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0210 	bic.w	r2, r2, #16
 80052a6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8306 	beq.w	80058de <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 8088 	beq.w	80053f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2204      	movs	r2, #4
 80052e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a7a      	ldr	r2, [pc, #488]	; (80054d8 <HAL_DMA_IRQHandler+0xa08>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d04a      	beq.n	8005388 <HAL_DMA_IRQHandler+0x8b8>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a79      	ldr	r2, [pc, #484]	; (80054dc <HAL_DMA_IRQHandler+0xa0c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d045      	beq.n	8005388 <HAL_DMA_IRQHandler+0x8b8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a77      	ldr	r2, [pc, #476]	; (80054e0 <HAL_DMA_IRQHandler+0xa10>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d040      	beq.n	8005388 <HAL_DMA_IRQHandler+0x8b8>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a76      	ldr	r2, [pc, #472]	; (80054e4 <HAL_DMA_IRQHandler+0xa14>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d03b      	beq.n	8005388 <HAL_DMA_IRQHandler+0x8b8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a74      	ldr	r2, [pc, #464]	; (80054e8 <HAL_DMA_IRQHandler+0xa18>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d036      	beq.n	8005388 <HAL_DMA_IRQHandler+0x8b8>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a73      	ldr	r2, [pc, #460]	; (80054ec <HAL_DMA_IRQHandler+0xa1c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d031      	beq.n	8005388 <HAL_DMA_IRQHandler+0x8b8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a71      	ldr	r2, [pc, #452]	; (80054f0 <HAL_DMA_IRQHandler+0xa20>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d02c      	beq.n	8005388 <HAL_DMA_IRQHandler+0x8b8>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a70      	ldr	r2, [pc, #448]	; (80054f4 <HAL_DMA_IRQHandler+0xa24>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d027      	beq.n	8005388 <HAL_DMA_IRQHandler+0x8b8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a6e      	ldr	r2, [pc, #440]	; (80054f8 <HAL_DMA_IRQHandler+0xa28>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d022      	beq.n	8005388 <HAL_DMA_IRQHandler+0x8b8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a6d      	ldr	r2, [pc, #436]	; (80054fc <HAL_DMA_IRQHandler+0xa2c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d01d      	beq.n	8005388 <HAL_DMA_IRQHandler+0x8b8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a6b      	ldr	r2, [pc, #428]	; (8005500 <HAL_DMA_IRQHandler+0xa30>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d018      	beq.n	8005388 <HAL_DMA_IRQHandler+0x8b8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a6a      	ldr	r2, [pc, #424]	; (8005504 <HAL_DMA_IRQHandler+0xa34>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d013      	beq.n	8005388 <HAL_DMA_IRQHandler+0x8b8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a68      	ldr	r2, [pc, #416]	; (8005508 <HAL_DMA_IRQHandler+0xa38>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00e      	beq.n	8005388 <HAL_DMA_IRQHandler+0x8b8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a67      	ldr	r2, [pc, #412]	; (800550c <HAL_DMA_IRQHandler+0xa3c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d009      	beq.n	8005388 <HAL_DMA_IRQHandler+0x8b8>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a65      	ldr	r2, [pc, #404]	; (8005510 <HAL_DMA_IRQHandler+0xa40>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d004      	beq.n	8005388 <HAL_DMA_IRQHandler+0x8b8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a64      	ldr	r2, [pc, #400]	; (8005514 <HAL_DMA_IRQHandler+0xa44>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d108      	bne.n	800539a <HAL_DMA_IRQHandler+0x8ca>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0201 	bic.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	e007      	b.n	80053aa <HAL_DMA_IRQHandler+0x8da>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3301      	adds	r3, #1
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d307      	bcc.n	80053c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1f2      	bne.n	80053aa <HAL_DMA_IRQHandler+0x8da>
 80053c4:	e000      	b.n	80053c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80053c6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2203      	movs	r2, #3
 80053e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80053e6:	e003      	b.n	80053f0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 8272 	beq.w	80058de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	4798      	blx	r3
 8005402:	e26c      	b.n	80058de <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a43      	ldr	r2, [pc, #268]	; (8005518 <HAL_DMA_IRQHandler+0xa48>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d022      	beq.n	8005454 <HAL_DMA_IRQHandler+0x984>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a42      	ldr	r2, [pc, #264]	; (800551c <HAL_DMA_IRQHandler+0xa4c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d01d      	beq.n	8005454 <HAL_DMA_IRQHandler+0x984>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a40      	ldr	r2, [pc, #256]	; (8005520 <HAL_DMA_IRQHandler+0xa50>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d018      	beq.n	8005454 <HAL_DMA_IRQHandler+0x984>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a3f      	ldr	r2, [pc, #252]	; (8005524 <HAL_DMA_IRQHandler+0xa54>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d013      	beq.n	8005454 <HAL_DMA_IRQHandler+0x984>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a3d      	ldr	r2, [pc, #244]	; (8005528 <HAL_DMA_IRQHandler+0xa58>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00e      	beq.n	8005454 <HAL_DMA_IRQHandler+0x984>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a3c      	ldr	r2, [pc, #240]	; (800552c <HAL_DMA_IRQHandler+0xa5c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d009      	beq.n	8005454 <HAL_DMA_IRQHandler+0x984>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a3a      	ldr	r2, [pc, #232]	; (8005530 <HAL_DMA_IRQHandler+0xa60>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d004      	beq.n	8005454 <HAL_DMA_IRQHandler+0x984>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a39      	ldr	r2, [pc, #228]	; (8005534 <HAL_DMA_IRQHandler+0xa64>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d101      	bne.n	8005458 <HAL_DMA_IRQHandler+0x988>
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <HAL_DMA_IRQHandler+0x98a>
 8005458:	2300      	movs	r3, #0
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 823f 	beq.w	80058de <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546c:	f003 031f 	and.w	r3, r3, #31
 8005470:	2204      	movs	r2, #4
 8005472:	409a      	lsls	r2, r3
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	4013      	ands	r3, r2
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 80cd 	beq.w	8005618 <HAL_DMA_IRQHandler+0xb48>
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80c7 	beq.w	8005618 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548e:	f003 031f 	and.w	r3, r3, #31
 8005492:	2204      	movs	r2, #4
 8005494:	409a      	lsls	r2, r3
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d049      	beq.n	8005538 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8210 	beq.w	80058d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054c0:	e20a      	b.n	80058d8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 8206 	beq.w	80058d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054d4:	e200      	b.n	80058d8 <HAL_DMA_IRQHandler+0xe08>
 80054d6:	bf00      	nop
 80054d8:	40020010 	.word	0x40020010
 80054dc:	40020028 	.word	0x40020028
 80054e0:	40020040 	.word	0x40020040
 80054e4:	40020058 	.word	0x40020058
 80054e8:	40020070 	.word	0x40020070
 80054ec:	40020088 	.word	0x40020088
 80054f0:	400200a0 	.word	0x400200a0
 80054f4:	400200b8 	.word	0x400200b8
 80054f8:	40020410 	.word	0x40020410
 80054fc:	40020428 	.word	0x40020428
 8005500:	40020440 	.word	0x40020440
 8005504:	40020458 	.word	0x40020458
 8005508:	40020470 	.word	0x40020470
 800550c:	40020488 	.word	0x40020488
 8005510:	400204a0 	.word	0x400204a0
 8005514:	400204b8 	.word	0x400204b8
 8005518:	58025408 	.word	0x58025408
 800551c:	5802541c 	.word	0x5802541c
 8005520:	58025430 	.word	0x58025430
 8005524:	58025444 	.word	0x58025444
 8005528:	58025458 	.word	0x58025458
 800552c:	5802546c 	.word	0x5802546c
 8005530:	58025480 	.word	0x58025480
 8005534:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	d160      	bne.n	8005604 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a8c      	ldr	r2, [pc, #560]	; (8005778 <HAL_DMA_IRQHandler+0xca8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d04a      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xb12>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a8a      	ldr	r2, [pc, #552]	; (800577c <HAL_DMA_IRQHandler+0xcac>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d045      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xb12>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a89      	ldr	r2, [pc, #548]	; (8005780 <HAL_DMA_IRQHandler+0xcb0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d040      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xb12>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a87      	ldr	r2, [pc, #540]	; (8005784 <HAL_DMA_IRQHandler+0xcb4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d03b      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xb12>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a86      	ldr	r2, [pc, #536]	; (8005788 <HAL_DMA_IRQHandler+0xcb8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d036      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xb12>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a84      	ldr	r2, [pc, #528]	; (800578c <HAL_DMA_IRQHandler+0xcbc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d031      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xb12>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a83      	ldr	r2, [pc, #524]	; (8005790 <HAL_DMA_IRQHandler+0xcc0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d02c      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xb12>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a81      	ldr	r2, [pc, #516]	; (8005794 <HAL_DMA_IRQHandler+0xcc4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d027      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xb12>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a80      	ldr	r2, [pc, #512]	; (8005798 <HAL_DMA_IRQHandler+0xcc8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d022      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xb12>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a7e      	ldr	r2, [pc, #504]	; (800579c <HAL_DMA_IRQHandler+0xccc>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01d      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xb12>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a7d      	ldr	r2, [pc, #500]	; (80057a0 <HAL_DMA_IRQHandler+0xcd0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d018      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xb12>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a7b      	ldr	r2, [pc, #492]	; (80057a4 <HAL_DMA_IRQHandler+0xcd4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xb12>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a7a      	ldr	r2, [pc, #488]	; (80057a8 <HAL_DMA_IRQHandler+0xcd8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00e      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xb12>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a78      	ldr	r2, [pc, #480]	; (80057ac <HAL_DMA_IRQHandler+0xcdc>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d009      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xb12>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a77      	ldr	r2, [pc, #476]	; (80057b0 <HAL_DMA_IRQHandler+0xce0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xb12>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a75      	ldr	r2, [pc, #468]	; (80057b4 <HAL_DMA_IRQHandler+0xce4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d108      	bne.n	80055f4 <HAL_DMA_IRQHandler+0xb24>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0208 	bic.w	r2, r2, #8
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e007      	b.n	8005604 <HAL_DMA_IRQHandler+0xb34>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0204 	bic.w	r2, r2, #4
 8005602:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 8165 	beq.w	80058d8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005616:	e15f      	b.n	80058d8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	2202      	movs	r2, #2
 8005622:	409a      	lsls	r2, r3
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	4013      	ands	r3, r2
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 80c5 	beq.w	80057b8 <HAL_DMA_IRQHandler+0xce8>
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80bf 	beq.w	80057b8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	2202      	movs	r2, #2
 8005644:	409a      	lsls	r2, r3
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d018      	beq.n	8005686 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 813a 	beq.w	80058dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005670:	e134      	b.n	80058dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 8130 	beq.w	80058dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005684:	e12a      	b.n	80058dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d168      	bne.n	8005762 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a38      	ldr	r2, [pc, #224]	; (8005778 <HAL_DMA_IRQHandler+0xca8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d04a      	beq.n	8005730 <HAL_DMA_IRQHandler+0xc60>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a37      	ldr	r2, [pc, #220]	; (800577c <HAL_DMA_IRQHandler+0xcac>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d045      	beq.n	8005730 <HAL_DMA_IRQHandler+0xc60>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a35      	ldr	r2, [pc, #212]	; (8005780 <HAL_DMA_IRQHandler+0xcb0>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d040      	beq.n	8005730 <HAL_DMA_IRQHandler+0xc60>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a34      	ldr	r2, [pc, #208]	; (8005784 <HAL_DMA_IRQHandler+0xcb4>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d03b      	beq.n	8005730 <HAL_DMA_IRQHandler+0xc60>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a32      	ldr	r2, [pc, #200]	; (8005788 <HAL_DMA_IRQHandler+0xcb8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d036      	beq.n	8005730 <HAL_DMA_IRQHandler+0xc60>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a31      	ldr	r2, [pc, #196]	; (800578c <HAL_DMA_IRQHandler+0xcbc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d031      	beq.n	8005730 <HAL_DMA_IRQHandler+0xc60>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a2f      	ldr	r2, [pc, #188]	; (8005790 <HAL_DMA_IRQHandler+0xcc0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d02c      	beq.n	8005730 <HAL_DMA_IRQHandler+0xc60>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a2e      	ldr	r2, [pc, #184]	; (8005794 <HAL_DMA_IRQHandler+0xcc4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d027      	beq.n	8005730 <HAL_DMA_IRQHandler+0xc60>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a2c      	ldr	r2, [pc, #176]	; (8005798 <HAL_DMA_IRQHandler+0xcc8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d022      	beq.n	8005730 <HAL_DMA_IRQHandler+0xc60>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a2b      	ldr	r2, [pc, #172]	; (800579c <HAL_DMA_IRQHandler+0xccc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d01d      	beq.n	8005730 <HAL_DMA_IRQHandler+0xc60>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a29      	ldr	r2, [pc, #164]	; (80057a0 <HAL_DMA_IRQHandler+0xcd0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d018      	beq.n	8005730 <HAL_DMA_IRQHandler+0xc60>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a28      	ldr	r2, [pc, #160]	; (80057a4 <HAL_DMA_IRQHandler+0xcd4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d013      	beq.n	8005730 <HAL_DMA_IRQHandler+0xc60>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a26      	ldr	r2, [pc, #152]	; (80057a8 <HAL_DMA_IRQHandler+0xcd8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00e      	beq.n	8005730 <HAL_DMA_IRQHandler+0xc60>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a25      	ldr	r2, [pc, #148]	; (80057ac <HAL_DMA_IRQHandler+0xcdc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d009      	beq.n	8005730 <HAL_DMA_IRQHandler+0xc60>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a23      	ldr	r2, [pc, #140]	; (80057b0 <HAL_DMA_IRQHandler+0xce0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d004      	beq.n	8005730 <HAL_DMA_IRQHandler+0xc60>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a22      	ldr	r2, [pc, #136]	; (80057b4 <HAL_DMA_IRQHandler+0xce4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d108      	bne.n	8005742 <HAL_DMA_IRQHandler+0xc72>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0214 	bic.w	r2, r2, #20
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	e007      	b.n	8005752 <HAL_DMA_IRQHandler+0xc82>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 020a 	bic.w	r2, r2, #10
 8005750:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 80b8 	beq.w	80058dc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005774:	e0b2      	b.n	80058dc <HAL_DMA_IRQHandler+0xe0c>
 8005776:	bf00      	nop
 8005778:	40020010 	.word	0x40020010
 800577c:	40020028 	.word	0x40020028
 8005780:	40020040 	.word	0x40020040
 8005784:	40020058 	.word	0x40020058
 8005788:	40020070 	.word	0x40020070
 800578c:	40020088 	.word	0x40020088
 8005790:	400200a0 	.word	0x400200a0
 8005794:	400200b8 	.word	0x400200b8
 8005798:	40020410 	.word	0x40020410
 800579c:	40020428 	.word	0x40020428
 80057a0:	40020440 	.word	0x40020440
 80057a4:	40020458 	.word	0x40020458
 80057a8:	40020470 	.word	0x40020470
 80057ac:	40020488 	.word	0x40020488
 80057b0:	400204a0 	.word	0x400204a0
 80057b4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	2208      	movs	r2, #8
 80057c2:	409a      	lsls	r2, r3
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	4013      	ands	r3, r2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 8088 	beq.w	80058de <HAL_DMA_IRQHandler+0xe0e>
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f003 0308 	and.w	r3, r3, #8
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8082 	beq.w	80058de <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a41      	ldr	r2, [pc, #260]	; (80058e4 <HAL_DMA_IRQHandler+0xe14>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d04a      	beq.n	800587a <HAL_DMA_IRQHandler+0xdaa>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a3f      	ldr	r2, [pc, #252]	; (80058e8 <HAL_DMA_IRQHandler+0xe18>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d045      	beq.n	800587a <HAL_DMA_IRQHandler+0xdaa>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a3e      	ldr	r2, [pc, #248]	; (80058ec <HAL_DMA_IRQHandler+0xe1c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d040      	beq.n	800587a <HAL_DMA_IRQHandler+0xdaa>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a3c      	ldr	r2, [pc, #240]	; (80058f0 <HAL_DMA_IRQHandler+0xe20>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d03b      	beq.n	800587a <HAL_DMA_IRQHandler+0xdaa>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a3b      	ldr	r2, [pc, #236]	; (80058f4 <HAL_DMA_IRQHandler+0xe24>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d036      	beq.n	800587a <HAL_DMA_IRQHandler+0xdaa>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a39      	ldr	r2, [pc, #228]	; (80058f8 <HAL_DMA_IRQHandler+0xe28>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d031      	beq.n	800587a <HAL_DMA_IRQHandler+0xdaa>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a38      	ldr	r2, [pc, #224]	; (80058fc <HAL_DMA_IRQHandler+0xe2c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d02c      	beq.n	800587a <HAL_DMA_IRQHandler+0xdaa>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a36      	ldr	r2, [pc, #216]	; (8005900 <HAL_DMA_IRQHandler+0xe30>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d027      	beq.n	800587a <HAL_DMA_IRQHandler+0xdaa>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a35      	ldr	r2, [pc, #212]	; (8005904 <HAL_DMA_IRQHandler+0xe34>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d022      	beq.n	800587a <HAL_DMA_IRQHandler+0xdaa>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a33      	ldr	r2, [pc, #204]	; (8005908 <HAL_DMA_IRQHandler+0xe38>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d01d      	beq.n	800587a <HAL_DMA_IRQHandler+0xdaa>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a32      	ldr	r2, [pc, #200]	; (800590c <HAL_DMA_IRQHandler+0xe3c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d018      	beq.n	800587a <HAL_DMA_IRQHandler+0xdaa>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a30      	ldr	r2, [pc, #192]	; (8005910 <HAL_DMA_IRQHandler+0xe40>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d013      	beq.n	800587a <HAL_DMA_IRQHandler+0xdaa>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a2f      	ldr	r2, [pc, #188]	; (8005914 <HAL_DMA_IRQHandler+0xe44>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00e      	beq.n	800587a <HAL_DMA_IRQHandler+0xdaa>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a2d      	ldr	r2, [pc, #180]	; (8005918 <HAL_DMA_IRQHandler+0xe48>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d009      	beq.n	800587a <HAL_DMA_IRQHandler+0xdaa>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a2c      	ldr	r2, [pc, #176]	; (800591c <HAL_DMA_IRQHandler+0xe4c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d004      	beq.n	800587a <HAL_DMA_IRQHandler+0xdaa>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <HAL_DMA_IRQHandler+0xe50>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d108      	bne.n	800588c <HAL_DMA_IRQHandler+0xdbc>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 021c 	bic.w	r2, r2, #28
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	e007      	b.n	800589c <HAL_DMA_IRQHandler+0xdcc>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 020e 	bic.w	r2, r2, #14
 800589a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a0:	f003 031f 	and.w	r3, r3, #31
 80058a4:	2201      	movs	r2, #1
 80058a6:	409a      	lsls	r2, r3
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	4798      	blx	r3
 80058d2:	e004      	b.n	80058de <HAL_DMA_IRQHandler+0xe0e>
          return;
 80058d4:	bf00      	nop
 80058d6:	e002      	b.n	80058de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058d8:	bf00      	nop
 80058da:	e000      	b.n	80058de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058dc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80058de:	3728      	adds	r7, #40	; 0x28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40020010 	.word	0x40020010
 80058e8:	40020028 	.word	0x40020028
 80058ec:	40020040 	.word	0x40020040
 80058f0:	40020058 	.word	0x40020058
 80058f4:	40020070 	.word	0x40020070
 80058f8:	40020088 	.word	0x40020088
 80058fc:	400200a0 	.word	0x400200a0
 8005900:	400200b8 	.word	0x400200b8
 8005904:	40020410 	.word	0x40020410
 8005908:	40020428 	.word	0x40020428
 800590c:	40020440 	.word	0x40020440
 8005910:	40020458 	.word	0x40020458
 8005914:	40020470 	.word	0x40020470
 8005918:	40020488 	.word	0x40020488
 800591c:	400204a0 	.word	0x400204a0
 8005920:	400204b8 	.word	0x400204b8

08005924 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a42      	ldr	r2, [pc, #264]	; (8005a3c <DMA_CalcBaseAndBitshift+0x118>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d04a      	beq.n	80059cc <DMA_CalcBaseAndBitshift+0xa8>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a41      	ldr	r2, [pc, #260]	; (8005a40 <DMA_CalcBaseAndBitshift+0x11c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d045      	beq.n	80059cc <DMA_CalcBaseAndBitshift+0xa8>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a3f      	ldr	r2, [pc, #252]	; (8005a44 <DMA_CalcBaseAndBitshift+0x120>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d040      	beq.n	80059cc <DMA_CalcBaseAndBitshift+0xa8>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a3e      	ldr	r2, [pc, #248]	; (8005a48 <DMA_CalcBaseAndBitshift+0x124>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d03b      	beq.n	80059cc <DMA_CalcBaseAndBitshift+0xa8>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a3c      	ldr	r2, [pc, #240]	; (8005a4c <DMA_CalcBaseAndBitshift+0x128>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d036      	beq.n	80059cc <DMA_CalcBaseAndBitshift+0xa8>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a3b      	ldr	r2, [pc, #236]	; (8005a50 <DMA_CalcBaseAndBitshift+0x12c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d031      	beq.n	80059cc <DMA_CalcBaseAndBitshift+0xa8>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a39      	ldr	r2, [pc, #228]	; (8005a54 <DMA_CalcBaseAndBitshift+0x130>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d02c      	beq.n	80059cc <DMA_CalcBaseAndBitshift+0xa8>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a38      	ldr	r2, [pc, #224]	; (8005a58 <DMA_CalcBaseAndBitshift+0x134>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d027      	beq.n	80059cc <DMA_CalcBaseAndBitshift+0xa8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a36      	ldr	r2, [pc, #216]	; (8005a5c <DMA_CalcBaseAndBitshift+0x138>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d022      	beq.n	80059cc <DMA_CalcBaseAndBitshift+0xa8>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a35      	ldr	r2, [pc, #212]	; (8005a60 <DMA_CalcBaseAndBitshift+0x13c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d01d      	beq.n	80059cc <DMA_CalcBaseAndBitshift+0xa8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a33      	ldr	r2, [pc, #204]	; (8005a64 <DMA_CalcBaseAndBitshift+0x140>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d018      	beq.n	80059cc <DMA_CalcBaseAndBitshift+0xa8>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a32      	ldr	r2, [pc, #200]	; (8005a68 <DMA_CalcBaseAndBitshift+0x144>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d013      	beq.n	80059cc <DMA_CalcBaseAndBitshift+0xa8>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a30      	ldr	r2, [pc, #192]	; (8005a6c <DMA_CalcBaseAndBitshift+0x148>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00e      	beq.n	80059cc <DMA_CalcBaseAndBitshift+0xa8>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a2f      	ldr	r2, [pc, #188]	; (8005a70 <DMA_CalcBaseAndBitshift+0x14c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d009      	beq.n	80059cc <DMA_CalcBaseAndBitshift+0xa8>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a2d      	ldr	r2, [pc, #180]	; (8005a74 <DMA_CalcBaseAndBitshift+0x150>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d004      	beq.n	80059cc <DMA_CalcBaseAndBitshift+0xa8>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a2c      	ldr	r2, [pc, #176]	; (8005a78 <DMA_CalcBaseAndBitshift+0x154>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d101      	bne.n	80059d0 <DMA_CalcBaseAndBitshift+0xac>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <DMA_CalcBaseAndBitshift+0xae>
 80059d0:	2300      	movs	r3, #0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d024      	beq.n	8005a20 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	3b10      	subs	r3, #16
 80059de:	4a27      	ldr	r2, [pc, #156]	; (8005a7c <DMA_CalcBaseAndBitshift+0x158>)
 80059e0:	fba2 2303 	umull	r2, r3, r2, r3
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	4a24      	ldr	r2, [pc, #144]	; (8005a80 <DMA_CalcBaseAndBitshift+0x15c>)
 80059f0:	5cd3      	ldrb	r3, [r2, r3]
 80059f2:	461a      	mov	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d908      	bls.n	8005a10 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	4b1f      	ldr	r3, [pc, #124]	; (8005a84 <DMA_CalcBaseAndBitshift+0x160>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	1d1a      	adds	r2, r3, #4
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	659a      	str	r2, [r3, #88]	; 0x58
 8005a0e:	e00d      	b.n	8005a2c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <DMA_CalcBaseAndBitshift+0x160>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8005a1e:	e005      	b.n	8005a2c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	40020010 	.word	0x40020010
 8005a40:	40020028 	.word	0x40020028
 8005a44:	40020040 	.word	0x40020040
 8005a48:	40020058 	.word	0x40020058
 8005a4c:	40020070 	.word	0x40020070
 8005a50:	40020088 	.word	0x40020088
 8005a54:	400200a0 	.word	0x400200a0
 8005a58:	400200b8 	.word	0x400200b8
 8005a5c:	40020410 	.word	0x40020410
 8005a60:	40020428 	.word	0x40020428
 8005a64:	40020440 	.word	0x40020440
 8005a68:	40020458 	.word	0x40020458
 8005a6c:	40020470 	.word	0x40020470
 8005a70:	40020488 	.word	0x40020488
 8005a74:	400204a0 	.word	0x400204a0
 8005a78:	400204b8 	.word	0x400204b8
 8005a7c:	aaaaaaab 	.word	0xaaaaaaab
 8005a80:	0800fc58 	.word	0x0800fc58
 8005a84:	fffffc00 	.word	0xfffffc00

08005a88 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d120      	bne.n	8005ade <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d858      	bhi.n	8005b56 <DMA_CheckFifoParam+0xce>
 8005aa4:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <DMA_CheckFifoParam+0x24>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005abd 	.word	0x08005abd
 8005ab0:	08005acf 	.word	0x08005acf
 8005ab4:	08005abd 	.word	0x08005abd
 8005ab8:	08005b57 	.word	0x08005b57
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d048      	beq.n	8005b5a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005acc:	e045      	b.n	8005b5a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ad6:	d142      	bne.n	8005b5e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005adc:	e03f      	b.n	8005b5e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae6:	d123      	bne.n	8005b30 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	d838      	bhi.n	8005b62 <DMA_CheckFifoParam+0xda>
 8005af0:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <DMA_CheckFifoParam+0x70>)
 8005af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af6:	bf00      	nop
 8005af8:	08005b09 	.word	0x08005b09
 8005afc:	08005b0f 	.word	0x08005b0f
 8005b00:	08005b09 	.word	0x08005b09
 8005b04:	08005b21 	.word	0x08005b21
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
        break;
 8005b0c:	e030      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d025      	beq.n	8005b66 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b1e:	e022      	b.n	8005b66 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b28:	d11f      	bne.n	8005b6a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b2e:	e01c      	b.n	8005b6a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d902      	bls.n	8005b3e <DMA_CheckFifoParam+0xb6>
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d003      	beq.n	8005b44 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005b3c:	e018      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	73fb      	strb	r3, [r7, #15]
        break;
 8005b42:	e015      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00e      	beq.n	8005b6e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	73fb      	strb	r3, [r7, #15]
    break;
 8005b54:	e00b      	b.n	8005b6e <DMA_CheckFifoParam+0xe6>
        break;
 8005b56:	bf00      	nop
 8005b58:	e00a      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
        break;
 8005b5a:	bf00      	nop
 8005b5c:	e008      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
        break;
 8005b5e:	bf00      	nop
 8005b60:	e006      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
        break;
 8005b62:	bf00      	nop
 8005b64:	e004      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
        break;
 8005b66:	bf00      	nop
 8005b68:	e002      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
        break;
 8005b6a:	bf00      	nop
 8005b6c:	e000      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
    break;
 8005b6e:	bf00      	nop
    }
  }

  return status;
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop

08005b80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a38      	ldr	r2, [pc, #224]	; (8005c74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d022      	beq.n	8005bde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a36      	ldr	r2, [pc, #216]	; (8005c78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d01d      	beq.n	8005bde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a35      	ldr	r2, [pc, #212]	; (8005c7c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d018      	beq.n	8005bde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a33      	ldr	r2, [pc, #204]	; (8005c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a32      	ldr	r2, [pc, #200]	; (8005c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00e      	beq.n	8005bde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a30      	ldr	r2, [pc, #192]	; (8005c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d009      	beq.n	8005bde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a2f      	ldr	r2, [pc, #188]	; (8005c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d004      	beq.n	8005bde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a2d      	ldr	r2, [pc, #180]	; (8005c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d101      	bne.n	8005be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e000      	b.n	8005be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005be2:	2300      	movs	r3, #0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d01a      	beq.n	8005c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	3b08      	subs	r3, #8
 8005bf0:	4a28      	ldr	r2, [pc, #160]	; (8005c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	091b      	lsrs	r3, r3, #4
 8005bf8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4b26      	ldr	r3, [pc, #152]	; (8005c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	461a      	mov	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a24      	ldr	r2, [pc, #144]	; (8005c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005c0c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f003 031f 	and.w	r3, r3, #31
 8005c14:	2201      	movs	r2, #1
 8005c16:	409a      	lsls	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005c1c:	e024      	b.n	8005c68 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	3b10      	subs	r3, #16
 8005c26:	4a1e      	ldr	r2, [pc, #120]	; (8005ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005c28:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2c:	091b      	lsrs	r3, r3, #4
 8005c2e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4a1c      	ldr	r2, [pc, #112]	; (8005ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d806      	bhi.n	8005c46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4a1b      	ldr	r2, [pc, #108]	; (8005ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d902      	bls.n	8005c46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3308      	adds	r3, #8
 8005c44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4b18      	ldr	r3, [pc, #96]	; (8005cac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	461a      	mov	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a16      	ldr	r2, [pc, #88]	; (8005cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005c58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	2201      	movs	r2, #1
 8005c62:	409a      	lsls	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c68:	bf00      	nop
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	58025408 	.word	0x58025408
 8005c78:	5802541c 	.word	0x5802541c
 8005c7c:	58025430 	.word	0x58025430
 8005c80:	58025444 	.word	0x58025444
 8005c84:	58025458 	.word	0x58025458
 8005c88:	5802546c 	.word	0x5802546c
 8005c8c:	58025480 	.word	0x58025480
 8005c90:	58025494 	.word	0x58025494
 8005c94:	cccccccd 	.word	0xcccccccd
 8005c98:	16009600 	.word	0x16009600
 8005c9c:	58025880 	.word	0x58025880
 8005ca0:	aaaaaaab 	.word	0xaaaaaaab
 8005ca4:	400204b8 	.word	0x400204b8
 8005ca8:	4002040f 	.word	0x4002040f
 8005cac:	10008200 	.word	0x10008200
 8005cb0:	40020880 	.word	0x40020880

08005cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d04a      	beq.n	8005d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d847      	bhi.n	8005d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a25      	ldr	r2, [pc, #148]	; (8005d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d022      	beq.n	8005d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a24      	ldr	r2, [pc, #144]	; (8005d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d01d      	beq.n	8005d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a22      	ldr	r2, [pc, #136]	; (8005d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d018      	beq.n	8005d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a21      	ldr	r2, [pc, #132]	; (8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d013      	beq.n	8005d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a1f      	ldr	r2, [pc, #124]	; (8005d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00e      	beq.n	8005d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1e      	ldr	r2, [pc, #120]	; (8005d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d009      	beq.n	8005d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1c      	ldr	r2, [pc, #112]	; (8005d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d004      	beq.n	8005d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1b      	ldr	r2, [pc, #108]	; (8005d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d101      	bne.n	8005d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005d24:	2300      	movs	r3, #0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4b17      	ldr	r3, [pc, #92]	; (8005d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	461a      	mov	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005d3c:	671a      	str	r2, [r3, #112]	; 0x70
 8005d3e:	e009      	b.n	8005d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4b14      	ldr	r3, [pc, #80]	; (8005d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	461a      	mov	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a11      	ldr	r2, [pc, #68]	; (8005d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005d52:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	2201      	movs	r2, #1
 8005d5a:	409a      	lsls	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005d60:	bf00      	nop
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	58025408 	.word	0x58025408
 8005d70:	5802541c 	.word	0x5802541c
 8005d74:	58025430 	.word	0x58025430
 8005d78:	58025444 	.word	0x58025444
 8005d7c:	58025458 	.word	0x58025458
 8005d80:	5802546c 	.word	0x5802546c
 8005d84:	58025480 	.word	0x58025480
 8005d88:	58025494 	.word	0x58025494
 8005d8c:	1600963f 	.word	0x1600963f
 8005d90:	58025940 	.word	0x58025940
 8005d94:	1000823f 	.word	0x1000823f
 8005d98:	40020940 	.word	0x40020940

08005d9c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e0c6      	b.n	8005f3c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fa ff56 	bl	8000c68 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2223      	movs	r2, #35	; 0x23
 8005dc0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dc2:	4b60      	ldr	r3, [pc, #384]	; (8005f44 <HAL_ETH_Init+0x1a8>)
 8005dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dc8:	4a5e      	ldr	r2, [pc, #376]	; (8005f44 <HAL_ETH_Init+0x1a8>)
 8005dca:	f043 0302 	orr.w	r3, r3, #2
 8005dce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005dd2:	4b5c      	ldr	r3, [pc, #368]	; (8005f44 <HAL_ETH_Init+0x1a8>)
 8005dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	60bb      	str	r3, [r7, #8]
 8005dde:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	7a1b      	ldrb	r3, [r3, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d103      	bne.n	8005df0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005de8:	2000      	movs	r0, #0
 8005dea:	f7fc fbdb 	bl	80025a4 <HAL_SYSCFG_ETHInterfaceSelect>
 8005dee:	e003      	b.n	8005df8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005df0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005df4:	f7fc fbd6 	bl	80025a4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e10:	f7fc fb8c 	bl	800252c <HAL_GetTick>
 8005e14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005e16:	e00f      	b.n	8005e38 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005e18:	f7fc fb88 	bl	800252c <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005e26:	d907      	bls.n	8005e38 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	22e0      	movs	r2, #224	; 0xe0
 8005e32:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e081      	b.n	8005f3c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e6      	bne.n	8005e18 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fac0 	bl	80063d0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005e50:	f001 fd66 	bl	8007920 <HAL_RCC_GetHCLKFreq>
 8005e54:	4603      	mov	r3, r0
 8005e56:	4a3c      	ldr	r2, [pc, #240]	; (8005f48 <HAL_ETH_Init+0x1ac>)
 8005e58:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5c:	0c9a      	lsrs	r2, r3, #18
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3a01      	subs	r2, #1
 8005e64:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fa13 	bl	8006294 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005e84:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005e88:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d007      	beq.n	8005ea6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	22e0      	movs	r2, #224	; 0xe0
 8005ea0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e04a      	b.n	8005f3c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	f241 1308 	movw	r3, #4360	; 0x1108
 8005eae:	4413      	add	r3, r2
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4b26      	ldr	r3, [pc, #152]	; (8005f4c <HAL_ETH_Init+0x1b0>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6952      	ldr	r2, [r2, #20]
 8005eba:	0052      	lsls	r2, r2, #1
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	6809      	ldr	r1, [r1, #0]
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	f241 1308 	movw	r3, #4360	; 0x1108
 8005ec6:	440b      	add	r3, r1
 8005ec8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fad8 	bl	8006480 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fb1c 	bl	800650e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	3305      	adds	r3, #5
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	021a      	lsls	r2, r3, #8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	3303      	adds	r3, #3
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	061a      	lsls	r2, r3, #24
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	3302      	adds	r3, #2
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	041b      	lsls	r3, r3, #16
 8005f08:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f14:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f22:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2210      	movs	r2, #16
 8005f32:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2210      	movs	r2, #16
 8005f38:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	58024400 	.word	0x58024400
 8005f48:	431bde83 	.word	0x431bde83
 8005f4c:	ffff8001 	.word	0xffff8001

08005f50 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005f62:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	791b      	ldrb	r3, [r3, #4]
 8005f68:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8005f6a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	7b1b      	ldrb	r3, [r3, #12]
 8005f70:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005f72:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	7b5b      	ldrb	r3, [r3, #13]
 8005f78:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005f7a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	7b9b      	ldrb	r3, [r3, #14]
 8005f80:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005f82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	7bdb      	ldrb	r3, [r3, #15]
 8005f88:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005f8a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	7c12      	ldrb	r2, [r2, #16]
 8005f90:	2a00      	cmp	r2, #0
 8005f92:	d102      	bne.n	8005f9a <ETH_SetMACConfig+0x4a>
 8005f94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005f98:	e000      	b.n	8005f9c <ETH_SetMACConfig+0x4c>
 8005f9a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005f9c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	7c52      	ldrb	r2, [r2, #17]
 8005fa2:	2a00      	cmp	r2, #0
 8005fa4:	d102      	bne.n	8005fac <ETH_SetMACConfig+0x5c>
 8005fa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005faa:	e000      	b.n	8005fae <ETH_SetMACConfig+0x5e>
 8005fac:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005fae:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	7c9b      	ldrb	r3, [r3, #18]
 8005fb4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005fb6:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005fbc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005fc2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	7f1b      	ldrb	r3, [r3, #28]
 8005fc8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005fca:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	7f5b      	ldrb	r3, [r3, #29]
 8005fd0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005fd2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	7f92      	ldrb	r2, [r2, #30]
 8005fd8:	2a00      	cmp	r2, #0
 8005fda:	d102      	bne.n	8005fe2 <ETH_SetMACConfig+0x92>
 8005fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fe0:	e000      	b.n	8005fe4 <ETH_SetMACConfig+0x94>
 8005fe2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005fe4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	7fdb      	ldrb	r3, [r3, #31]
 8005fea:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005fec:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005ff4:	2a00      	cmp	r2, #0
 8005ff6:	d102      	bne.n	8005ffe <ETH_SetMACConfig+0xae>
 8005ff8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ffc:	e000      	b.n	8006000 <ETH_SetMACConfig+0xb0>
 8005ffe:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8006000:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8006006:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800600e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8006010:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	4b56      	ldr	r3, [pc, #344]	; (800617c <ETH_SetMACConfig+0x22c>)
 8006022:	4013      	ands	r3, r2
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6812      	ldr	r2, [r2, #0]
 8006028:	68f9      	ldr	r1, [r7, #12]
 800602a:	430b      	orrs	r3, r1
 800602c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006032:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800603a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800603c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006044:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006046:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800604e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8006050:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006058:	2a00      	cmp	r2, #0
 800605a:	d102      	bne.n	8006062 <ETH_SetMACConfig+0x112>
 800605c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006060:	e000      	b.n	8006064 <ETH_SetMACConfig+0x114>
 8006062:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006064:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	4b42      	ldr	r3, [pc, #264]	; (8006180 <ETH_SetMACConfig+0x230>)
 8006076:	4013      	ands	r3, r2
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6812      	ldr	r2, [r2, #0]
 800607c:	68f9      	ldr	r1, [r7, #12]
 800607e:	430b      	orrs	r3, r1
 8006080:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006088:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	4b3a      	ldr	r3, [pc, #232]	; (8006184 <ETH_SetMACConfig+0x234>)
 800609a:	4013      	ands	r3, r2
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6812      	ldr	r2, [r2, #0]
 80060a0:	68f9      	ldr	r1, [r7, #12]
 80060a2:	430b      	orrs	r3, r1
 80060a4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80060ac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80060b2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80060ba:	2a00      	cmp	r2, #0
 80060bc:	d101      	bne.n	80060c2 <ETH_SetMACConfig+0x172>
 80060be:	2280      	movs	r2, #128	; 0x80
 80060c0:	e000      	b.n	80060c4 <ETH_SetMACConfig+0x174>
 80060c2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80060c4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060d6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80060da:	4013      	ands	r3, r2
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6812      	ldr	r2, [r2, #0]
 80060e0:	68f9      	ldr	r1, [r7, #12]
 80060e2:	430b      	orrs	r3, r1
 80060e4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80060ec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80060f4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006102:	f023 0103 	bic.w	r1, r3, #3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	430a      	orrs	r2, r1
 800610e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800611a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006136:	2a00      	cmp	r2, #0
 8006138:	d101      	bne.n	800613e <ETH_SetMACConfig+0x1ee>
 800613a:	2240      	movs	r2, #64	; 0x40
 800613c:	e000      	b.n	8006140 <ETH_SetMACConfig+0x1f0>
 800613e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006140:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006148:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800614a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006152:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006160:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	430a      	orrs	r2, r1
 800616c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	00048083 	.word	0x00048083
 8006180:	c0f88000 	.word	0xc0f88000
 8006184:	fffffef0 	.word	0xfffffef0

08006188 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	4b38      	ldr	r3, [pc, #224]	; (8006280 <ETH_SetDMAConfig+0xf8>)
 800619e:	4013      	ands	r3, r2
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	6809      	ldr	r1, [r1, #0]
 80061a8:	431a      	orrs	r2, r3
 80061aa:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80061ae:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	791b      	ldrb	r3, [r3, #4]
 80061b4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80061ba:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	7b1b      	ldrb	r3, [r3, #12]
 80061c0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	f241 0304 	movw	r3, #4100	; 0x1004
 80061ce:	4413      	add	r3, r2
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b2c      	ldr	r3, [pc, #176]	; (8006284 <ETH_SetDMAConfig+0xfc>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6811      	ldr	r1, [r2, #0]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	431a      	orrs	r2, r3
 80061de:	f241 0304 	movw	r3, #4100	; 0x1004
 80061e2:	440b      	add	r3, r1
 80061e4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	7b5b      	ldrb	r3, [r3, #13]
 80061ea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4b22      	ldr	r3, [pc, #136]	; (8006288 <ETH_SetDMAConfig+0x100>)
 8006200:	4013      	ands	r3, r2
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6811      	ldr	r1, [r2, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	431a      	orrs	r2, r3
 800620a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800620e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	7d1b      	ldrb	r3, [r3, #20]
 8006218:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800621a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	7f5b      	ldrb	r3, [r3, #29]
 8006220:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	f241 1304 	movw	r3, #4356	; 0x1104
 800622e:	4413      	add	r3, r2
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4b16      	ldr	r3, [pc, #88]	; (800628c <ETH_SetDMAConfig+0x104>)
 8006234:	4013      	ands	r3, r2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6811      	ldr	r1, [r2, #0]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	431a      	orrs	r2, r3
 800623e:	f241 1304 	movw	r3, #4356	; 0x1104
 8006242:	440b      	add	r3, r1
 8006244:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	7f1b      	ldrb	r3, [r3, #28]
 800624a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006250:	4313      	orrs	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	f241 1308 	movw	r3, #4360	; 0x1108
 800625c:	4413      	add	r3, r2
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <ETH_SetDMAConfig+0x108>)
 8006262:	4013      	ands	r3, r2
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6811      	ldr	r1, [r2, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	431a      	orrs	r2, r3
 800626c:	f241 1308 	movw	r3, #4360	; 0x1108
 8006270:	440b      	add	r3, r1
 8006272:	601a      	str	r2, [r3, #0]
}
 8006274:	bf00      	nop
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	ffff87fd 	.word	0xffff87fd
 8006284:	ffff2ffe 	.word	0xffff2ffe
 8006288:	fffec000 	.word	0xfffec000
 800628c:	ffc0efef 	.word	0xffc0efef
 8006290:	7fc0ffff 	.word	0x7fc0ffff

08006294 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b0a4      	sub	sp, #144	; 0x90
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800629c:	2301      	movs	r3, #1
 800629e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80062a2:	2300      	movs	r3, #0
 80062a4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80062a6:	2300      	movs	r3, #0
 80062a8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80062ac:	2300      	movs	r3, #0
 80062ae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80062b8:	2301      	movs	r3, #1
 80062ba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80062be:	2301      	movs	r3, #1
 80062c0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80062c4:	2300      	movs	r3, #0
 80062c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80062d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062d4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80062d6:	2300      	movs	r3, #0
 80062d8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80062dc:	2300      	movs	r3, #0
 80062de:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80062e0:	2300      	movs	r3, #0
 80062e2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80062e6:	2300      	movs	r3, #0
 80062e8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80062ec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80062f0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80062f2:	2300      	movs	r3, #0
 80062f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80062f8:	2300      	movs	r3, #0
 80062fa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80062fc:	2301      	movs	r3, #1
 80062fe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006302:	2300      	movs	r3, #0
 8006304:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006308:	2300      	movs	r3, #0
 800630a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800630e:	2300      	movs	r3, #0
 8006310:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006312:	2300      	movs	r3, #0
 8006314:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006316:	2300      	movs	r3, #0
 8006318:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800631a:	2300      	movs	r3, #0
 800631c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006320:	2300      	movs	r3, #0
 8006322:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006326:	2301      	movs	r3, #1
 8006328:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800632c:	2320      	movs	r3, #32
 800632e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006338:	2300      	movs	r3, #0
 800633a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800633e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006344:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006348:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800634a:	2300      	movs	r3, #0
 800634c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006350:	2302      	movs	r3, #2
 8006352:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006356:	2300      	movs	r3, #0
 8006358:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800635c:	2300      	movs	r3, #0
 800635e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006362:	2300      	movs	r3, #0
 8006364:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006368:	2301      	movs	r3, #1
 800636a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800636e:	2300      	movs	r3, #0
 8006370:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006372:	2301      	movs	r3, #1
 8006374:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800637c:	4619      	mov	r1, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7ff fde6 	bl	8005f50 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006384:	2301      	movs	r3, #1
 8006386:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006388:	2301      	movs	r3, #1
 800638a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800638c:	2300      	movs	r3, #0
 800638e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006390:	2300      	movs	r3, #0
 8006392:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006396:	2300      	movs	r3, #0
 8006398:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800639a:	2300      	movs	r3, #0
 800639c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800639e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80063a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80063a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80063ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80063b4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80063b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80063ba:	f107 0308 	add.w	r3, r7, #8
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff fee1 	bl	8006188 <ETH_SetDMAConfig>
}
 80063c6:	bf00      	nop
 80063c8:	3790      	adds	r7, #144	; 0x90
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063e0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80063ea:	f001 fa99 	bl	8007920 <HAL_RCC_GetHCLKFreq>
 80063ee:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4a1e      	ldr	r2, [pc, #120]	; (800646c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d908      	bls.n	800640a <ETH_MAC_MDIO_ClkConfig+0x3a>
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	4a1d      	ldr	r2, [pc, #116]	; (8006470 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d804      	bhi.n	800640a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	e027      	b.n	800645a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	4a18      	ldr	r2, [pc, #96]	; (8006470 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d908      	bls.n	8006424 <ETH_MAC_MDIO_ClkConfig+0x54>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4a17      	ldr	r2, [pc, #92]	; (8006474 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d204      	bcs.n	8006424 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	e01a      	b.n	800645a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4a13      	ldr	r2, [pc, #76]	; (8006474 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d303      	bcc.n	8006434 <ETH_MAC_MDIO_ClkConfig+0x64>
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4a12      	ldr	r2, [pc, #72]	; (8006478 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d911      	bls.n	8006458 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4a10      	ldr	r2, [pc, #64]	; (8006478 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d908      	bls.n	800644e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4a0f      	ldr	r2, [pc, #60]	; (800647c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d804      	bhi.n	800644e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	e005      	b.n	800645a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	e000      	b.n	800645a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006458:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	01312cff 	.word	0x01312cff
 8006470:	02160ebf 	.word	0x02160ebf
 8006474:	03938700 	.word	0x03938700
 8006478:	05f5e0ff 	.word	0x05f5e0ff
 800647c:	08f0d17f 	.word	0x08f0d17f

08006480 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006488:	2300      	movs	r3, #0
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	e01d      	b.n	80064ca <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68d9      	ldr	r1, [r3, #12]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4613      	mov	r3, r2
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	4413      	add	r3, r2
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	440b      	add	r3, r1
 800649e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2200      	movs	r2, #0
 80064aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2200      	movs	r2, #0
 80064b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2200      	movs	r2, #0
 80064b6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	3206      	adds	r2, #6
 80064c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3301      	adds	r3, #1
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d9de      	bls.n	800648e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	f241 132c 	movw	r3, #4396	; 0x112c
 80064de:	4413      	add	r3, r2
 80064e0:	2203      	movs	r2, #3
 80064e2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68d9      	ldr	r1, [r3, #12]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	f241 1314 	movw	r3, #4372	; 0x1114
 80064f0:	4413      	add	r3, r2
 80064f2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006500:	601a      	str	r2, [r3, #0]
}
 8006502:	bf00      	nop
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800650e:	b480      	push	{r7}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	e024      	b.n	8006566 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6919      	ldr	r1, [r3, #16]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4613      	mov	r3, r2
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	4413      	add	r3, r2
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	440b      	add	r3, r1
 800652c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2200      	movs	r2, #0
 8006538:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2200      	movs	r2, #0
 800653e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2200      	movs	r2, #0
 8006544:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2200      	movs	r2, #0
 800654a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2200      	movs	r2, #0
 8006550:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3310      	adds	r3, #16
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	440b      	add	r3, r1
 800655e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3301      	adds	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b03      	cmp	r3, #3
 800656a:	d9d7      	bls.n	800651c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	f241 1330 	movw	r3, #4400	; 0x1130
 8006592:	4413      	add	r3, r2
 8006594:	2203      	movs	r2, #3
 8006596:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6919      	ldr	r1, [r3, #16]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	f241 131c 	movw	r3, #4380	; 0x111c
 80065a4:	4413      	add	r3, r2
 80065a6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	f241 1328 	movw	r3, #4392	; 0x1128
 80065b8:	4413      	add	r3, r2
 80065ba:	6019      	str	r1, [r3, #0]
}
 80065bc:	bf00      	nop
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b089      	sub	sp, #36	; 0x24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80065d6:	4b89      	ldr	r3, [pc, #548]	; (80067fc <HAL_GPIO_Init+0x234>)
 80065d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065da:	e194      	b.n	8006906 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	2101      	movs	r1, #1
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	fa01 f303 	lsl.w	r3, r1, r3
 80065e8:	4013      	ands	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 8186 	beq.w	8006900 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d00b      	beq.n	8006614 <HAL_GPIO_Init+0x4c>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d007      	beq.n	8006614 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006608:	2b11      	cmp	r3, #17
 800660a:	d003      	beq.n	8006614 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2b12      	cmp	r3, #18
 8006612:	d130      	bne.n	8006676 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	2203      	movs	r2, #3
 8006620:	fa02 f303 	lsl.w	r3, r2, r3
 8006624:	43db      	mvns	r3, r3
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	4013      	ands	r3, r2
 800662a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	fa02 f303 	lsl.w	r3, r2, r3
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	4313      	orrs	r3, r2
 800663c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800664a:	2201      	movs	r2, #1
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	fa02 f303 	lsl.w	r3, r2, r3
 8006652:	43db      	mvns	r3, r3
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	4013      	ands	r3, r2
 8006658:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	091b      	lsrs	r3, r3, #4
 8006660:	f003 0201 	and.w	r2, r3, #1
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	4313      	orrs	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	2203      	movs	r2, #3
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	43db      	mvns	r3, r3
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	4013      	ands	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	fa02 f303 	lsl.w	r3, r2, r3
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	4313      	orrs	r3, r2
 800669e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d003      	beq.n	80066b6 <HAL_GPIO_Init+0xee>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2b12      	cmp	r3, #18
 80066b4:	d123      	bne.n	80066fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	08da      	lsrs	r2, r3, #3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3208      	adds	r2, #8
 80066be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	220f      	movs	r2, #15
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	43db      	mvns	r3, r3
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	4013      	ands	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	691a      	ldr	r2, [r3, #16]
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	08da      	lsrs	r2, r3, #3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3208      	adds	r2, #8
 80066f8:	69b9      	ldr	r1, [r7, #24]
 80066fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	2203      	movs	r2, #3
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	43db      	mvns	r3, r3
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	4013      	ands	r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f003 0203 	and.w	r2, r3, #3
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	fa02 f303 	lsl.w	r3, r2, r3
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	4313      	orrs	r3, r2
 800672a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 80e0 	beq.w	8006900 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006740:	4b2f      	ldr	r3, [pc, #188]	; (8006800 <HAL_GPIO_Init+0x238>)
 8006742:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006746:	4a2e      	ldr	r2, [pc, #184]	; (8006800 <HAL_GPIO_Init+0x238>)
 8006748:	f043 0302 	orr.w	r3, r3, #2
 800674c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006750:	4b2b      	ldr	r3, [pc, #172]	; (8006800 <HAL_GPIO_Init+0x238>)
 8006752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800675e:	4a29      	ldr	r2, [pc, #164]	; (8006804 <HAL_GPIO_Init+0x23c>)
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	089b      	lsrs	r3, r3, #2
 8006764:	3302      	adds	r3, #2
 8006766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800676a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	220f      	movs	r2, #15
 8006776:	fa02 f303 	lsl.w	r3, r2, r3
 800677a:	43db      	mvns	r3, r3
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	4013      	ands	r3, r2
 8006780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a20      	ldr	r2, [pc, #128]	; (8006808 <HAL_GPIO_Init+0x240>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d052      	beq.n	8006830 <HAL_GPIO_Init+0x268>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a1f      	ldr	r2, [pc, #124]	; (800680c <HAL_GPIO_Init+0x244>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d031      	beq.n	80067f6 <HAL_GPIO_Init+0x22e>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a1e      	ldr	r2, [pc, #120]	; (8006810 <HAL_GPIO_Init+0x248>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d02b      	beq.n	80067f2 <HAL_GPIO_Init+0x22a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <HAL_GPIO_Init+0x24c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d025      	beq.n	80067ee <HAL_GPIO_Init+0x226>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <HAL_GPIO_Init+0x250>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d01f      	beq.n	80067ea <HAL_GPIO_Init+0x222>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1b      	ldr	r2, [pc, #108]	; (800681c <HAL_GPIO_Init+0x254>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d019      	beq.n	80067e6 <HAL_GPIO_Init+0x21e>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a1a      	ldr	r2, [pc, #104]	; (8006820 <HAL_GPIO_Init+0x258>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <HAL_GPIO_Init+0x21a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a19      	ldr	r2, [pc, #100]	; (8006824 <HAL_GPIO_Init+0x25c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00d      	beq.n	80067de <HAL_GPIO_Init+0x216>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a18      	ldr	r2, [pc, #96]	; (8006828 <HAL_GPIO_Init+0x260>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d007      	beq.n	80067da <HAL_GPIO_Init+0x212>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a17      	ldr	r2, [pc, #92]	; (800682c <HAL_GPIO_Init+0x264>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d101      	bne.n	80067d6 <HAL_GPIO_Init+0x20e>
 80067d2:	2309      	movs	r3, #9
 80067d4:	e02d      	b.n	8006832 <HAL_GPIO_Init+0x26a>
 80067d6:	230a      	movs	r3, #10
 80067d8:	e02b      	b.n	8006832 <HAL_GPIO_Init+0x26a>
 80067da:	2308      	movs	r3, #8
 80067dc:	e029      	b.n	8006832 <HAL_GPIO_Init+0x26a>
 80067de:	2307      	movs	r3, #7
 80067e0:	e027      	b.n	8006832 <HAL_GPIO_Init+0x26a>
 80067e2:	2306      	movs	r3, #6
 80067e4:	e025      	b.n	8006832 <HAL_GPIO_Init+0x26a>
 80067e6:	2305      	movs	r3, #5
 80067e8:	e023      	b.n	8006832 <HAL_GPIO_Init+0x26a>
 80067ea:	2304      	movs	r3, #4
 80067ec:	e021      	b.n	8006832 <HAL_GPIO_Init+0x26a>
 80067ee:	2303      	movs	r3, #3
 80067f0:	e01f      	b.n	8006832 <HAL_GPIO_Init+0x26a>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e01d      	b.n	8006832 <HAL_GPIO_Init+0x26a>
 80067f6:	2301      	movs	r3, #1
 80067f8:	e01b      	b.n	8006832 <HAL_GPIO_Init+0x26a>
 80067fa:	bf00      	nop
 80067fc:	58000080 	.word	0x58000080
 8006800:	58024400 	.word	0x58024400
 8006804:	58000400 	.word	0x58000400
 8006808:	58020000 	.word	0x58020000
 800680c:	58020400 	.word	0x58020400
 8006810:	58020800 	.word	0x58020800
 8006814:	58020c00 	.word	0x58020c00
 8006818:	58021000 	.word	0x58021000
 800681c:	58021400 	.word	0x58021400
 8006820:	58021800 	.word	0x58021800
 8006824:	58021c00 	.word	0x58021c00
 8006828:	58022000 	.word	0x58022000
 800682c:	58022400 	.word	0x58022400
 8006830:	2300      	movs	r3, #0
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	f002 0203 	and.w	r2, r2, #3
 8006838:	0092      	lsls	r2, r2, #2
 800683a:	4093      	lsls	r3, r2
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	4313      	orrs	r3, r2
 8006840:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006842:	4938      	ldr	r1, [pc, #224]	; (8006924 <HAL_GPIO_Init+0x35c>)
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	089b      	lsrs	r3, r3, #2
 8006848:	3302      	adds	r3, #2
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	43db      	mvns	r3, r3
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	4013      	ands	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	4313      	orrs	r3, r2
 8006872:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	43db      	mvns	r3, r3
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	4013      	ands	r3, r2
 8006888:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	43db      	mvns	r3, r3
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	4013      	ands	r3, r2
 80068b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80068ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80068d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	43db      	mvns	r3, r3
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	4013      	ands	r3, r2
 80068e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80068f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	3301      	adds	r3, #1
 8006904:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	fa22 f303 	lsr.w	r3, r2, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	f47f ae63 	bne.w	80065dc <HAL_GPIO_Init+0x14>
  }
}
 8006916:	bf00      	nop
 8006918:	bf00      	nop
 800691a:	3724      	adds	r7, #36	; 0x24
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	58000400 	.word	0x58000400

08006928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	807b      	strh	r3, [r7, #2]
 8006934:	4613      	mov	r3, r2
 8006936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006938:	787b      	ldrb	r3, [r7, #1]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800693e:	887a      	ldrh	r2, [r7, #2]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006944:	e003      	b.n	800694e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006946:	887b      	ldrh	r3, [r7, #2]
 8006948:	041a      	lsls	r2, r3, #16
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	619a      	str	r2, [r3, #24]
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800695a:	b480      	push	{r7}
 800695c:	b085      	sub	sp, #20
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	460b      	mov	r3, r1
 8006964:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800696c:	887a      	ldrh	r2, [r7, #2]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4013      	ands	r3, r2
 8006972:	041a      	lsls	r2, r3, #16
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	43d9      	mvns	r1, r3
 8006978:	887b      	ldrh	r3, [r7, #2]
 800697a:	400b      	ands	r3, r1
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	619a      	str	r2, [r3, #24]
}
 8006982:	bf00      	nop
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
	...

08006990 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006998:	4a08      	ldr	r2, [pc, #32]	; (80069bc <HAL_HSEM_FastTake+0x2c>)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3320      	adds	r3, #32
 800699e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a2:	4a07      	ldr	r2, [pc, #28]	; (80069c0 <HAL_HSEM_FastTake+0x30>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d101      	bne.n	80069ac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	e000      	b.n	80069ae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	58026400 	.word	0x58026400
 80069c0:	80000300 	.word	0x80000300

080069c4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80069ce:	4906      	ldr	r1, [pc, #24]	; (80069e8 <HAL_HSEM_Release+0x24>)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	58026400 	.word	0x58026400

080069ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80069f4:	4b29      	ldr	r3, [pc, #164]	; (8006a9c <HAL_PWREx_ConfigSupply+0xb0>)
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	2b06      	cmp	r3, #6
 80069fe:	d00a      	beq.n	8006a16 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006a00:	4b26      	ldr	r3, [pc, #152]	; (8006a9c <HAL_PWREx_ConfigSupply+0xb0>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d001      	beq.n	8006a12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e040      	b.n	8006a94 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	e03e      	b.n	8006a94 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006a16:	4b21      	ldr	r3, [pc, #132]	; (8006a9c <HAL_PWREx_ConfigSupply+0xb0>)
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006a1e:	491f      	ldr	r1, [pc, #124]	; (8006a9c <HAL_PWREx_ConfigSupply+0xb0>)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006a26:	f7fb fd81 	bl	800252c <HAL_GetTick>
 8006a2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a2c:	e009      	b.n	8006a42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006a2e:	f7fb fd7d 	bl	800252c <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a3c:	d901      	bls.n	8006a42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e028      	b.n	8006a94 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a42:	4b16      	ldr	r3, [pc, #88]	; (8006a9c <HAL_PWREx_ConfigSupply+0xb0>)
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a4e:	d1ee      	bne.n	8006a2e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b1e      	cmp	r3, #30
 8006a54:	d008      	beq.n	8006a68 <HAL_PWREx_ConfigSupply+0x7c>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b2e      	cmp	r3, #46	; 0x2e
 8006a5a:	d005      	beq.n	8006a68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b1d      	cmp	r3, #29
 8006a60:	d002      	beq.n	8006a68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b2d      	cmp	r3, #45	; 0x2d
 8006a66:	d114      	bne.n	8006a92 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006a68:	f7fb fd60 	bl	800252c <HAL_GetTick>
 8006a6c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006a6e:	e009      	b.n	8006a84 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006a70:	f7fb fd5c 	bl	800252c <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a7e:	d901      	bls.n	8006a84 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e007      	b.n	8006a94 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006a84:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <HAL_PWREx_ConfigSupply+0xb0>)
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a90:	d1ee      	bne.n	8006a70 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	58024800 	.word	0x58024800

08006aa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08c      	sub	sp, #48	; 0x30
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e3ff      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 8087 	beq.w	8006bce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ac0:	4b99      	ldr	r3, [pc, #612]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006aca:	4b97      	ldr	r3, [pc, #604]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	2b10      	cmp	r3, #16
 8006ad4:	d007      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x46>
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	2b18      	cmp	r3, #24
 8006ada:	d110      	bne.n	8006afe <HAL_RCC_OscConfig+0x5e>
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d10b      	bne.n	8006afe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ae6:	4b90      	ldr	r3, [pc, #576]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d06c      	beq.n	8006bcc <HAL_RCC_OscConfig+0x12c>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d168      	bne.n	8006bcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e3d9      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b06:	d106      	bne.n	8006b16 <HAL_RCC_OscConfig+0x76>
 8006b08:	4b87      	ldr	r3, [pc, #540]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a86      	ldr	r2, [pc, #536]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	e02e      	b.n	8006b74 <HAL_RCC_OscConfig+0xd4>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10c      	bne.n	8006b38 <HAL_RCC_OscConfig+0x98>
 8006b1e:	4b82      	ldr	r3, [pc, #520]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a81      	ldr	r2, [pc, #516]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	4b7f      	ldr	r3, [pc, #508]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a7e      	ldr	r2, [pc, #504]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	e01d      	b.n	8006b74 <HAL_RCC_OscConfig+0xd4>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b40:	d10c      	bne.n	8006b5c <HAL_RCC_OscConfig+0xbc>
 8006b42:	4b79      	ldr	r3, [pc, #484]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a78      	ldr	r2, [pc, #480]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	4b76      	ldr	r3, [pc, #472]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a75      	ldr	r2, [pc, #468]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	e00b      	b.n	8006b74 <HAL_RCC_OscConfig+0xd4>
 8006b5c:	4b72      	ldr	r3, [pc, #456]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a71      	ldr	r2, [pc, #452]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b66:	6013      	str	r3, [r2, #0]
 8006b68:	4b6f      	ldr	r3, [pc, #444]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a6e      	ldr	r2, [pc, #440]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d013      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b7c:	f7fb fcd6 	bl	800252c <HAL_GetTick>
 8006b80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b84:	f7fb fcd2 	bl	800252c <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b64      	cmp	r3, #100	; 0x64
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e38d      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b96:	4b64      	ldr	r3, [pc, #400]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0f0      	beq.n	8006b84 <HAL_RCC_OscConfig+0xe4>
 8006ba2:	e014      	b.n	8006bce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba4:	f7fb fcc2 	bl	800252c <HAL_GetTick>
 8006ba8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bac:	f7fb fcbe 	bl	800252c <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b64      	cmp	r3, #100	; 0x64
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e379      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006bbe:	4b5a      	ldr	r3, [pc, #360]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1f0      	bne.n	8006bac <HAL_RCC_OscConfig+0x10c>
 8006bca:	e000      	b.n	8006bce <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 80ae 	beq.w	8006d38 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bdc:	4b52      	ldr	r3, [pc, #328]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006be4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006be6:	4b50      	ldr	r3, [pc, #320]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d007      	beq.n	8006c02 <HAL_RCC_OscConfig+0x162>
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	2b18      	cmp	r3, #24
 8006bf6:	d13a      	bne.n	8006c6e <HAL_RCC_OscConfig+0x1ce>
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d135      	bne.n	8006c6e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c02:	4b49      	ldr	r3, [pc, #292]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0304 	and.w	r3, r3, #4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <HAL_RCC_OscConfig+0x17a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e34b      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c1a:	f7fb fcb7 	bl	800258c <HAL_GetREVID>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d817      	bhi.n	8006c58 <HAL_RCC_OscConfig+0x1b8>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	2b40      	cmp	r3, #64	; 0x40
 8006c2e:	d108      	bne.n	8006c42 <HAL_RCC_OscConfig+0x1a2>
 8006c30:	4b3d      	ldr	r3, [pc, #244]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006c38:	4a3b      	ldr	r2, [pc, #236]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c3e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c40:	e07a      	b.n	8006d38 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c42:	4b39      	ldr	r3, [pc, #228]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	031b      	lsls	r3, r3, #12
 8006c50:	4935      	ldr	r1, [pc, #212]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c56:	e06f      	b.n	8006d38 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c58:	4b33      	ldr	r3, [pc, #204]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	061b      	lsls	r3, r3, #24
 8006c66:	4930      	ldr	r1, [pc, #192]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c6c:	e064      	b.n	8006d38 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d045      	beq.n	8006d02 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c76:	4b2c      	ldr	r3, [pc, #176]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f023 0219 	bic.w	r2, r3, #25
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	4929      	ldr	r1, [pc, #164]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c88:	f7fb fc50 	bl	800252c <HAL_GetTick>
 8006c8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c90:	f7fb fc4c 	bl	800252c <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e307      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ca2:	4b21      	ldr	r3, [pc, #132]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0304 	and.w	r3, r3, #4
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0f0      	beq.n	8006c90 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cae:	f7fb fc6d 	bl	800258c <HAL_GetREVID>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d817      	bhi.n	8006cec <HAL_RCC_OscConfig+0x24c>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	2b40      	cmp	r3, #64	; 0x40
 8006cc2:	d108      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x236>
 8006cc4:	4b18      	ldr	r3, [pc, #96]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ccc:	4a16      	ldr	r2, [pc, #88]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cd2:	6053      	str	r3, [r2, #4]
 8006cd4:	e030      	b.n	8006d38 <HAL_RCC_OscConfig+0x298>
 8006cd6:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	031b      	lsls	r3, r3, #12
 8006ce4:	4910      	ldr	r1, [pc, #64]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	604b      	str	r3, [r1, #4]
 8006cea:	e025      	b.n	8006d38 <HAL_RCC_OscConfig+0x298>
 8006cec:	4b0e      	ldr	r3, [pc, #56]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	061b      	lsls	r3, r3, #24
 8006cfa:	490b      	ldr	r1, [pc, #44]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	604b      	str	r3, [r1, #4]
 8006d00:	e01a      	b.n	8006d38 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d02:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a08      	ldr	r2, [pc, #32]	; (8006d28 <HAL_RCC_OscConfig+0x288>)
 8006d08:	f023 0301 	bic.w	r3, r3, #1
 8006d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d0e:	f7fb fc0d 	bl	800252c <HAL_GetTick>
 8006d12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d14:	e00a      	b.n	8006d2c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d16:	f7fb fc09 	bl	800252c <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d903      	bls.n	8006d2c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e2c4      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
 8006d28:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d2c:	4ba4      	ldr	r3, [pc, #656]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1ee      	bne.n	8006d16 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0310 	and.w	r3, r3, #16
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 80a9 	beq.w	8006e98 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d46:	4b9e      	ldr	r3, [pc, #632]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d50:	4b9b      	ldr	r3, [pc, #620]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d54:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d007      	beq.n	8006d6c <HAL_RCC_OscConfig+0x2cc>
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	2b18      	cmp	r3, #24
 8006d60:	d13a      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x338>
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f003 0303 	and.w	r3, r3, #3
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d135      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d6c:	4b94      	ldr	r3, [pc, #592]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d005      	beq.n	8006d84 <HAL_RCC_OscConfig+0x2e4>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	2b80      	cmp	r3, #128	; 0x80
 8006d7e:	d001      	beq.n	8006d84 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e296      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d84:	f7fb fc02 	bl	800258c <HAL_GetREVID>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d817      	bhi.n	8006dc2 <HAL_RCC_OscConfig+0x322>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	d108      	bne.n	8006dac <HAL_RCC_OscConfig+0x30c>
 8006d9a:	4b89      	ldr	r3, [pc, #548]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006da2:	4a87      	ldr	r2, [pc, #540]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006da8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006daa:	e075      	b.n	8006e98 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006dac:	4b84      	ldr	r3, [pc, #528]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	069b      	lsls	r3, r3, #26
 8006dba:	4981      	ldr	r1, [pc, #516]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006dc0:	e06a      	b.n	8006e98 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006dc2:	4b7f      	ldr	r3, [pc, #508]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	061b      	lsls	r3, r3, #24
 8006dd0:	497b      	ldr	r1, [pc, #492]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006dd6:	e05f      	b.n	8006e98 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d042      	beq.n	8006e66 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006de0:	4b77      	ldr	r3, [pc, #476]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a76      	ldr	r2, [pc, #472]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dec:	f7fb fb9e 	bl	800252c <HAL_GetTick>
 8006df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006df4:	f7fb fb9a 	bl	800252c <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e255      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e06:	4b6e      	ldr	r3, [pc, #440]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0f0      	beq.n	8006df4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e12:	f7fb fbbb 	bl	800258c <HAL_GetREVID>
 8006e16:	4603      	mov	r3, r0
 8006e18:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d817      	bhi.n	8006e50 <HAL_RCC_OscConfig+0x3b0>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	2b20      	cmp	r3, #32
 8006e26:	d108      	bne.n	8006e3a <HAL_RCC_OscConfig+0x39a>
 8006e28:	4b65      	ldr	r3, [pc, #404]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006e30:	4a63      	ldr	r2, [pc, #396]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006e32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e36:	6053      	str	r3, [r2, #4]
 8006e38:	e02e      	b.n	8006e98 <HAL_RCC_OscConfig+0x3f8>
 8006e3a:	4b61      	ldr	r3, [pc, #388]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	069b      	lsls	r3, r3, #26
 8006e48:	495d      	ldr	r1, [pc, #372]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	604b      	str	r3, [r1, #4]
 8006e4e:	e023      	b.n	8006e98 <HAL_RCC_OscConfig+0x3f8>
 8006e50:	4b5b      	ldr	r3, [pc, #364]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	061b      	lsls	r3, r3, #24
 8006e5e:	4958      	ldr	r1, [pc, #352]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	60cb      	str	r3, [r1, #12]
 8006e64:	e018      	b.n	8006e98 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e66:	4b56      	ldr	r3, [pc, #344]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a55      	ldr	r2, [pc, #340]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e72:	f7fb fb5b 	bl	800252c <HAL_GetTick>
 8006e76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e78:	e008      	b.n	8006e8c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e7a:	f7fb fb57 	bl	800252c <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e212      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e8c:	4b4c      	ldr	r3, [pc, #304]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1f0      	bne.n	8006e7a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0308 	and.w	r3, r3, #8
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d036      	beq.n	8006f12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d019      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eac:	4b44      	ldr	r3, [pc, #272]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eb0:	4a43      	ldr	r2, [pc, #268]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006eb2:	f043 0301 	orr.w	r3, r3, #1
 8006eb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb8:	f7fb fb38 	bl	800252c <HAL_GetTick>
 8006ebc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ec0:	f7fb fb34 	bl	800252c <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e1ef      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ed2:	4b3b      	ldr	r3, [pc, #236]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0f0      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x420>
 8006ede:	e018      	b.n	8006f12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ee0:	4b37      	ldr	r3, [pc, #220]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee4:	4a36      	ldr	r2, [pc, #216]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006ee6:	f023 0301 	bic.w	r3, r3, #1
 8006eea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eec:	f7fb fb1e 	bl	800252c <HAL_GetTick>
 8006ef0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ef4:	f7fb fb1a 	bl	800252c <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e1d5      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f06:	4b2e      	ldr	r3, [pc, #184]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f0      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d036      	beq.n	8006f8c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d019      	beq.n	8006f5a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f26:	4b26      	ldr	r3, [pc, #152]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a25      	ldr	r2, [pc, #148]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006f2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f32:	f7fb fafb 	bl	800252c <HAL_GetTick>
 8006f36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f38:	e008      	b.n	8006f4c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006f3a:	f7fb faf7 	bl	800252c <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d901      	bls.n	8006f4c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e1b2      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f4c:	4b1c      	ldr	r3, [pc, #112]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0f0      	beq.n	8006f3a <HAL_RCC_OscConfig+0x49a>
 8006f58:	e018      	b.n	8006f8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f5a:	4b19      	ldr	r3, [pc, #100]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a18      	ldr	r2, [pc, #96]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006f60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f66:	f7fb fae1 	bl	800252c <HAL_GetTick>
 8006f6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f6c:	e008      	b.n	8006f80 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006f6e:	f7fb fadd 	bl	800252c <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d901      	bls.n	8006f80 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e198      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f80:	4b0f      	ldr	r3, [pc, #60]	; (8006fc0 <HAL_RCC_OscConfig+0x520>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1f0      	bne.n	8006f6e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8085 	beq.w	80070a4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f9a:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <HAL_RCC_OscConfig+0x524>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a09      	ldr	r2, [pc, #36]	; (8006fc4 <HAL_RCC_OscConfig+0x524>)
 8006fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fa6:	f7fb fac1 	bl	800252c <HAL_GetTick>
 8006faa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fac:	e00c      	b.n	8006fc8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006fae:	f7fb fabd 	bl	800252c <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	2b64      	cmp	r3, #100	; 0x64
 8006fba:	d905      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e178      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
 8006fc0:	58024400 	.word	0x58024400
 8006fc4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fc8:	4b96      	ldr	r3, [pc, #600]	; (8007224 <HAL_RCC_OscConfig+0x784>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d0ec      	beq.n	8006fae <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d106      	bne.n	8006fea <HAL_RCC_OscConfig+0x54a>
 8006fdc:	4b92      	ldr	r3, [pc, #584]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8006fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe0:	4a91      	ldr	r2, [pc, #580]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8006fe2:	f043 0301 	orr.w	r3, r3, #1
 8006fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe8:	e02d      	b.n	8007046 <HAL_RCC_OscConfig+0x5a6>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10c      	bne.n	800700c <HAL_RCC_OscConfig+0x56c>
 8006ff2:	4b8d      	ldr	r3, [pc, #564]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8006ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff6:	4a8c      	ldr	r2, [pc, #560]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8006ff8:	f023 0301 	bic.w	r3, r3, #1
 8006ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ffe:	4b8a      	ldr	r3, [pc, #552]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8007000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007002:	4a89      	ldr	r2, [pc, #548]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8007004:	f023 0304 	bic.w	r3, r3, #4
 8007008:	6713      	str	r3, [r2, #112]	; 0x70
 800700a:	e01c      	b.n	8007046 <HAL_RCC_OscConfig+0x5a6>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	2b05      	cmp	r3, #5
 8007012:	d10c      	bne.n	800702e <HAL_RCC_OscConfig+0x58e>
 8007014:	4b84      	ldr	r3, [pc, #528]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8007016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007018:	4a83      	ldr	r2, [pc, #524]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 800701a:	f043 0304 	orr.w	r3, r3, #4
 800701e:	6713      	str	r3, [r2, #112]	; 0x70
 8007020:	4b81      	ldr	r3, [pc, #516]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8007022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007024:	4a80      	ldr	r2, [pc, #512]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8007026:	f043 0301 	orr.w	r3, r3, #1
 800702a:	6713      	str	r3, [r2, #112]	; 0x70
 800702c:	e00b      	b.n	8007046 <HAL_RCC_OscConfig+0x5a6>
 800702e:	4b7e      	ldr	r3, [pc, #504]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8007030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007032:	4a7d      	ldr	r2, [pc, #500]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8007034:	f023 0301 	bic.w	r3, r3, #1
 8007038:	6713      	str	r3, [r2, #112]	; 0x70
 800703a:	4b7b      	ldr	r3, [pc, #492]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 800703c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703e:	4a7a      	ldr	r2, [pc, #488]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8007040:	f023 0304 	bic.w	r3, r3, #4
 8007044:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d015      	beq.n	800707a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800704e:	f7fb fa6d 	bl	800252c <HAL_GetTick>
 8007052:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007054:	e00a      	b.n	800706c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007056:	f7fb fa69 	bl	800252c <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	f241 3288 	movw	r2, #5000	; 0x1388
 8007064:	4293      	cmp	r3, r2
 8007066:	d901      	bls.n	800706c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e122      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800706c:	4b6e      	ldr	r3, [pc, #440]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 800706e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0ee      	beq.n	8007056 <HAL_RCC_OscConfig+0x5b6>
 8007078:	e014      	b.n	80070a4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800707a:	f7fb fa57 	bl	800252c <HAL_GetTick>
 800707e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007080:	e00a      	b.n	8007098 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007082:	f7fb fa53 	bl	800252c <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007090:	4293      	cmp	r3, r2
 8007092:	d901      	bls.n	8007098 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e10c      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007098:	4b63      	ldr	r3, [pc, #396]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 800709a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1ee      	bne.n	8007082 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 8101 	beq.w	80072b0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80070ae:	4b5e      	ldr	r3, [pc, #376]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070b6:	2b18      	cmp	r3, #24
 80070b8:	f000 80bc 	beq.w	8007234 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	f040 8095 	bne.w	80071f0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070c6:	4b58      	ldr	r3, [pc, #352]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a57      	ldr	r2, [pc, #348]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 80070cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d2:	f7fb fa2b 	bl	800252c <HAL_GetTick>
 80070d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070d8:	e008      	b.n	80070ec <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070da:	f7fb fa27 	bl	800252c <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e0e2      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070ec:	4b4e      	ldr	r3, [pc, #312]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1f0      	bne.n	80070da <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070f8:	4b4b      	ldr	r3, [pc, #300]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 80070fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070fc:	4b4b      	ldr	r3, [pc, #300]	; (800722c <HAL_RCC_OscConfig+0x78c>)
 80070fe:	4013      	ands	r3, r2
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007108:	0112      	lsls	r2, r2, #4
 800710a:	430a      	orrs	r2, r1
 800710c:	4946      	ldr	r1, [pc, #280]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 800710e:	4313      	orrs	r3, r2
 8007110:	628b      	str	r3, [r1, #40]	; 0x28
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	3b01      	subs	r3, #1
 8007118:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007120:	3b01      	subs	r3, #1
 8007122:	025b      	lsls	r3, r3, #9
 8007124:	b29b      	uxth	r3, r3
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	3b01      	subs	r3, #1
 800712e:	041b      	lsls	r3, r3, #16
 8007130:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713a:	3b01      	subs	r3, #1
 800713c:	061b      	lsls	r3, r3, #24
 800713e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007142:	4939      	ldr	r1, [pc, #228]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8007144:	4313      	orrs	r3, r2
 8007146:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007148:	4b37      	ldr	r3, [pc, #220]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	4a36      	ldr	r2, [pc, #216]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 800714e:	f023 0301 	bic.w	r3, r3, #1
 8007152:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007154:	4b34      	ldr	r3, [pc, #208]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8007156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007158:	4b35      	ldr	r3, [pc, #212]	; (8007230 <HAL_RCC_OscConfig+0x790>)
 800715a:	4013      	ands	r3, r2
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007160:	00d2      	lsls	r2, r2, #3
 8007162:	4931      	ldr	r1, [pc, #196]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8007164:	4313      	orrs	r3, r2
 8007166:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007168:	4b2f      	ldr	r3, [pc, #188]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	f023 020c 	bic.w	r2, r3, #12
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007174:	492c      	ldr	r1, [pc, #176]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8007176:	4313      	orrs	r3, r2
 8007178:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800717a:	4b2b      	ldr	r3, [pc, #172]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	f023 0202 	bic.w	r2, r3, #2
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007186:	4928      	ldr	r1, [pc, #160]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8007188:	4313      	orrs	r3, r2
 800718a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800718c:	4b26      	ldr	r3, [pc, #152]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	4a25      	ldr	r2, [pc, #148]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8007192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007198:	4b23      	ldr	r3, [pc, #140]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	4a22      	ldr	r2, [pc, #136]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 800719e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80071a4:	4b20      	ldr	r3, [pc, #128]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	4a1f      	ldr	r2, [pc, #124]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 80071aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80071b0:	4b1d      	ldr	r3, [pc, #116]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	4a1c      	ldr	r2, [pc, #112]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 80071b6:	f043 0301 	orr.w	r3, r3, #1
 80071ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071bc:	4b1a      	ldr	r3, [pc, #104]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a19      	ldr	r2, [pc, #100]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 80071c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c8:	f7fb f9b0 	bl	800252c <HAL_GetTick>
 80071cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071d0:	f7fb f9ac 	bl	800252c <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e067      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071e2:	4b11      	ldr	r3, [pc, #68]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0f0      	beq.n	80071d0 <HAL_RCC_OscConfig+0x730>
 80071ee:	e05f      	b.n	80072b0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a0c      	ldr	r2, [pc, #48]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 80071f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fc:	f7fb f996 	bl	800252c <HAL_GetTick>
 8007200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007204:	f7fb f992 	bl	800252c <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e04d      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007216:	4b04      	ldr	r3, [pc, #16]	; (8007228 <HAL_RCC_OscConfig+0x788>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1f0      	bne.n	8007204 <HAL_RCC_OscConfig+0x764>
 8007222:	e045      	b.n	80072b0 <HAL_RCC_OscConfig+0x810>
 8007224:	58024800 	.word	0x58024800
 8007228:	58024400 	.word	0x58024400
 800722c:	fffffc0c 	.word	0xfffffc0c
 8007230:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007234:	4b21      	ldr	r3, [pc, #132]	; (80072bc <HAL_RCC_OscConfig+0x81c>)
 8007236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007238:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800723a:	4b20      	ldr	r3, [pc, #128]	; (80072bc <HAL_RCC_OscConfig+0x81c>)
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	2b01      	cmp	r3, #1
 8007246:	d031      	beq.n	80072ac <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f003 0203 	and.w	r2, r3, #3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007252:	429a      	cmp	r2, r3
 8007254:	d12a      	bne.n	80072ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	091b      	lsrs	r3, r3, #4
 800725a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007262:	429a      	cmp	r2, r3
 8007264:	d122      	bne.n	80072ac <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007270:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007272:	429a      	cmp	r2, r3
 8007274:	d11a      	bne.n	80072ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	0a5b      	lsrs	r3, r3, #9
 800727a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007282:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007284:	429a      	cmp	r2, r3
 8007286:	d111      	bne.n	80072ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	0c1b      	lsrs	r3, r3, #16
 800728c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007294:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007296:	429a      	cmp	r2, r3
 8007298:	d108      	bne.n	80072ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	0e1b      	lsrs	r3, r3, #24
 800729e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d001      	beq.n	80072b0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e000      	b.n	80072b2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3730      	adds	r7, #48	; 0x30
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	58024400 	.word	0x58024400

080072c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e19c      	b.n	800760e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072d4:	4b8a      	ldr	r3, [pc, #552]	; (8007500 <HAL_RCC_ClockConfig+0x240>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 030f 	and.w	r3, r3, #15
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d910      	bls.n	8007304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072e2:	4b87      	ldr	r3, [pc, #540]	; (8007500 <HAL_RCC_ClockConfig+0x240>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f023 020f 	bic.w	r2, r3, #15
 80072ea:	4985      	ldr	r1, [pc, #532]	; (8007500 <HAL_RCC_ClockConfig+0x240>)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072f2:	4b83      	ldr	r3, [pc, #524]	; (8007500 <HAL_RCC_ClockConfig+0x240>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 030f 	and.w	r3, r3, #15
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d001      	beq.n	8007304 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e184      	b.n	800760e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b00      	cmp	r3, #0
 800730e:	d010      	beq.n	8007332 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	691a      	ldr	r2, [r3, #16]
 8007314:	4b7b      	ldr	r3, [pc, #492]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800731c:	429a      	cmp	r2, r3
 800731e:	d908      	bls.n	8007332 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007320:	4b78      	ldr	r3, [pc, #480]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	4975      	ldr	r1, [pc, #468]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 800732e:	4313      	orrs	r3, r2
 8007330:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0308 	and.w	r3, r3, #8
 800733a:	2b00      	cmp	r3, #0
 800733c:	d010      	beq.n	8007360 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	695a      	ldr	r2, [r3, #20]
 8007342:	4b70      	ldr	r3, [pc, #448]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800734a:	429a      	cmp	r2, r3
 800734c:	d908      	bls.n	8007360 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800734e:	4b6d      	ldr	r3, [pc, #436]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	496a      	ldr	r1, [pc, #424]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 800735c:	4313      	orrs	r3, r2
 800735e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0310 	and.w	r3, r3, #16
 8007368:	2b00      	cmp	r3, #0
 800736a:	d010      	beq.n	800738e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	699a      	ldr	r2, [r3, #24]
 8007370:	4b64      	ldr	r3, [pc, #400]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007378:	429a      	cmp	r2, r3
 800737a:	d908      	bls.n	800738e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800737c:	4b61      	ldr	r3, [pc, #388]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	495e      	ldr	r1, [pc, #376]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 800738a:	4313      	orrs	r3, r2
 800738c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	d010      	beq.n	80073bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69da      	ldr	r2, [r3, #28]
 800739e:	4b59      	ldr	r3, [pc, #356]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d908      	bls.n	80073bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80073aa:	4b56      	ldr	r3, [pc, #344]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	4953      	ldr	r1, [pc, #332]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d010      	beq.n	80073ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68da      	ldr	r2, [r3, #12]
 80073cc:	4b4d      	ldr	r3, [pc, #308]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	f003 030f 	and.w	r3, r3, #15
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d908      	bls.n	80073ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073d8:	4b4a      	ldr	r3, [pc, #296]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	f023 020f 	bic.w	r2, r3, #15
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	4947      	ldr	r1, [pc, #284]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d055      	beq.n	80074a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80073f6:	4b43      	ldr	r3, [pc, #268]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	4940      	ldr	r1, [pc, #256]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 8007404:	4313      	orrs	r3, r2
 8007406:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d107      	bne.n	8007420 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007410:	4b3c      	ldr	r3, [pc, #240]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d121      	bne.n	8007460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e0f6      	b.n	800760e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	2b03      	cmp	r3, #3
 8007426:	d107      	bne.n	8007438 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007428:	4b36      	ldr	r3, [pc, #216]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d115      	bne.n	8007460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e0ea      	b.n	800760e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d107      	bne.n	8007450 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007440:	4b30      	ldr	r3, [pc, #192]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007448:	2b00      	cmp	r3, #0
 800744a:	d109      	bne.n	8007460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e0de      	b.n	800760e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007450:	4b2c      	ldr	r3, [pc, #176]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e0d6      	b.n	800760e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007460:	4b28      	ldr	r3, [pc, #160]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f023 0207 	bic.w	r2, r3, #7
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	4925      	ldr	r1, [pc, #148]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 800746e:	4313      	orrs	r3, r2
 8007470:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007472:	f7fb f85b 	bl	800252c <HAL_GetTick>
 8007476:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007478:	e00a      	b.n	8007490 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800747a:	f7fb f857 	bl	800252c <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	f241 3288 	movw	r2, #5000	; 0x1388
 8007488:	4293      	cmp	r3, r2
 800748a:	d901      	bls.n	8007490 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e0be      	b.n	800760e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007490:	4b1c      	ldr	r3, [pc, #112]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	00db      	lsls	r3, r3, #3
 800749e:	429a      	cmp	r2, r3
 80074a0:	d1eb      	bne.n	800747a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d010      	beq.n	80074d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	4b14      	ldr	r3, [pc, #80]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	f003 030f 	and.w	r3, r3, #15
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d208      	bcs.n	80074d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074be:	4b11      	ldr	r3, [pc, #68]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f023 020f 	bic.w	r2, r3, #15
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	490e      	ldr	r1, [pc, #56]	; (8007504 <HAL_RCC_ClockConfig+0x244>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074d0:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <HAL_RCC_ClockConfig+0x240>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 030f 	and.w	r3, r3, #15
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d214      	bcs.n	8007508 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074de:	4b08      	ldr	r3, [pc, #32]	; (8007500 <HAL_RCC_ClockConfig+0x240>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f023 020f 	bic.w	r2, r3, #15
 80074e6:	4906      	ldr	r1, [pc, #24]	; (8007500 <HAL_RCC_ClockConfig+0x240>)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ee:	4b04      	ldr	r3, [pc, #16]	; (8007500 <HAL_RCC_ClockConfig+0x240>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 030f 	and.w	r3, r3, #15
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d005      	beq.n	8007508 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e086      	b.n	800760e <HAL_RCC_ClockConfig+0x34e>
 8007500:	52002000 	.word	0x52002000
 8007504:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b00      	cmp	r3, #0
 8007512:	d010      	beq.n	8007536 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	691a      	ldr	r2, [r3, #16]
 8007518:	4b3f      	ldr	r3, [pc, #252]	; (8007618 <HAL_RCC_ClockConfig+0x358>)
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007520:	429a      	cmp	r2, r3
 8007522:	d208      	bcs.n	8007536 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007524:	4b3c      	ldr	r3, [pc, #240]	; (8007618 <HAL_RCC_ClockConfig+0x358>)
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	4939      	ldr	r1, [pc, #228]	; (8007618 <HAL_RCC_ClockConfig+0x358>)
 8007532:	4313      	orrs	r3, r2
 8007534:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0308 	and.w	r3, r3, #8
 800753e:	2b00      	cmp	r3, #0
 8007540:	d010      	beq.n	8007564 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	695a      	ldr	r2, [r3, #20]
 8007546:	4b34      	ldr	r3, [pc, #208]	; (8007618 <HAL_RCC_ClockConfig+0x358>)
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800754e:	429a      	cmp	r2, r3
 8007550:	d208      	bcs.n	8007564 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007552:	4b31      	ldr	r3, [pc, #196]	; (8007618 <HAL_RCC_ClockConfig+0x358>)
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	492e      	ldr	r1, [pc, #184]	; (8007618 <HAL_RCC_ClockConfig+0x358>)
 8007560:	4313      	orrs	r3, r2
 8007562:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b00      	cmp	r3, #0
 800756e:	d010      	beq.n	8007592 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	4b28      	ldr	r3, [pc, #160]	; (8007618 <HAL_RCC_ClockConfig+0x358>)
 8007576:	69db      	ldr	r3, [r3, #28]
 8007578:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800757c:	429a      	cmp	r2, r3
 800757e:	d208      	bcs.n	8007592 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007580:	4b25      	ldr	r3, [pc, #148]	; (8007618 <HAL_RCC_ClockConfig+0x358>)
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	4922      	ldr	r1, [pc, #136]	; (8007618 <HAL_RCC_ClockConfig+0x358>)
 800758e:	4313      	orrs	r3, r2
 8007590:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b00      	cmp	r3, #0
 800759c:	d010      	beq.n	80075c0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	69da      	ldr	r2, [r3, #28]
 80075a2:	4b1d      	ldr	r3, [pc, #116]	; (8007618 <HAL_RCC_ClockConfig+0x358>)
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d208      	bcs.n	80075c0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80075ae:	4b1a      	ldr	r3, [pc, #104]	; (8007618 <HAL_RCC_ClockConfig+0x358>)
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	4917      	ldr	r1, [pc, #92]	; (8007618 <HAL_RCC_ClockConfig+0x358>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80075c0:	f000 f834 	bl	800762c <HAL_RCC_GetSysClockFreq>
 80075c4:	4602      	mov	r2, r0
 80075c6:	4b14      	ldr	r3, [pc, #80]	; (8007618 <HAL_RCC_ClockConfig+0x358>)
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	0a1b      	lsrs	r3, r3, #8
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	4912      	ldr	r1, [pc, #72]	; (800761c <HAL_RCC_ClockConfig+0x35c>)
 80075d2:	5ccb      	ldrb	r3, [r1, r3]
 80075d4:	f003 031f 	and.w	r3, r3, #31
 80075d8:	fa22 f303 	lsr.w	r3, r2, r3
 80075dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075de:	4b0e      	ldr	r3, [pc, #56]	; (8007618 <HAL_RCC_ClockConfig+0x358>)
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	f003 030f 	and.w	r3, r3, #15
 80075e6:	4a0d      	ldr	r2, [pc, #52]	; (800761c <HAL_RCC_ClockConfig+0x35c>)
 80075e8:	5cd3      	ldrb	r3, [r2, r3]
 80075ea:	f003 031f 	and.w	r3, r3, #31
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	fa22 f303 	lsr.w	r3, r2, r3
 80075f4:	4a0a      	ldr	r2, [pc, #40]	; (8007620 <HAL_RCC_ClockConfig+0x360>)
 80075f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075f8:	4a0a      	ldr	r2, [pc, #40]	; (8007624 <HAL_RCC_ClockConfig+0x364>)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80075fe:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <HAL_RCC_ClockConfig+0x368>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4618      	mov	r0, r3
 8007604:	f7fa ff48 	bl	8002498 <HAL_InitTick>
 8007608:	4603      	mov	r3, r0
 800760a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	58024400 	.word	0x58024400
 800761c:	0800fc48 	.word	0x0800fc48
 8007620:	24000004 	.word	0x24000004
 8007624:	24000000 	.word	0x24000000
 8007628:	24000008 	.word	0x24000008

0800762c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800762c:	b480      	push	{r7}
 800762e:	b089      	sub	sp, #36	; 0x24
 8007630:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007632:	4bb3      	ldr	r3, [pc, #716]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800763a:	2b18      	cmp	r3, #24
 800763c:	f200 8155 	bhi.w	80078ea <HAL_RCC_GetSysClockFreq+0x2be>
 8007640:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	080076ad 	.word	0x080076ad
 800764c:	080078eb 	.word	0x080078eb
 8007650:	080078eb 	.word	0x080078eb
 8007654:	080078eb 	.word	0x080078eb
 8007658:	080078eb 	.word	0x080078eb
 800765c:	080078eb 	.word	0x080078eb
 8007660:	080078eb 	.word	0x080078eb
 8007664:	080078eb 	.word	0x080078eb
 8007668:	080076d3 	.word	0x080076d3
 800766c:	080078eb 	.word	0x080078eb
 8007670:	080078eb 	.word	0x080078eb
 8007674:	080078eb 	.word	0x080078eb
 8007678:	080078eb 	.word	0x080078eb
 800767c:	080078eb 	.word	0x080078eb
 8007680:	080078eb 	.word	0x080078eb
 8007684:	080078eb 	.word	0x080078eb
 8007688:	080076d9 	.word	0x080076d9
 800768c:	080078eb 	.word	0x080078eb
 8007690:	080078eb 	.word	0x080078eb
 8007694:	080078eb 	.word	0x080078eb
 8007698:	080078eb 	.word	0x080078eb
 800769c:	080078eb 	.word	0x080078eb
 80076a0:	080078eb 	.word	0x080078eb
 80076a4:	080078eb 	.word	0x080078eb
 80076a8:	080076df 	.word	0x080076df
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076ac:	4b94      	ldr	r3, [pc, #592]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0320 	and.w	r3, r3, #32
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d009      	beq.n	80076cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076b8:	4b91      	ldr	r3, [pc, #580]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	08db      	lsrs	r3, r3, #3
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	4a90      	ldr	r2, [pc, #576]	; (8007904 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076c4:	fa22 f303 	lsr.w	r3, r2, r3
 80076c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80076ca:	e111      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80076cc:	4b8d      	ldr	r3, [pc, #564]	; (8007904 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076ce:	61bb      	str	r3, [r7, #24]
    break;
 80076d0:	e10e      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80076d2:	4b8d      	ldr	r3, [pc, #564]	; (8007908 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80076d4:	61bb      	str	r3, [r7, #24]
    break;
 80076d6:	e10b      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80076d8:	4b8c      	ldr	r3, [pc, #560]	; (800790c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80076da:	61bb      	str	r3, [r7, #24]
    break;
 80076dc:	e108      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076de:	4b88      	ldr	r3, [pc, #544]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e2:	f003 0303 	and.w	r3, r3, #3
 80076e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80076e8:	4b85      	ldr	r3, [pc, #532]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	091b      	lsrs	r3, r3, #4
 80076ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80076f4:	4b82      	ldr	r3, [pc, #520]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80076fe:	4b80      	ldr	r3, [pc, #512]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007702:	08db      	lsrs	r3, r3, #3
 8007704:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	fb02 f303 	mul.w	r3, r2, r3
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007716:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80e1 	beq.w	80078e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2b02      	cmp	r3, #2
 8007726:	f000 8083 	beq.w	8007830 <HAL_RCC_GetSysClockFreq+0x204>
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2b02      	cmp	r3, #2
 800772e:	f200 80a1 	bhi.w	8007874 <HAL_RCC_GetSysClockFreq+0x248>
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <HAL_RCC_GetSysClockFreq+0x114>
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d056      	beq.n	80077ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800773e:	e099      	b.n	8007874 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007740:	4b6f      	ldr	r3, [pc, #444]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0320 	and.w	r3, r3, #32
 8007748:	2b00      	cmp	r3, #0
 800774a:	d02d      	beq.n	80077a8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800774c:	4b6c      	ldr	r3, [pc, #432]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	08db      	lsrs	r3, r3, #3
 8007752:	f003 0303 	and.w	r3, r3, #3
 8007756:	4a6b      	ldr	r2, [pc, #428]	; (8007904 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007758:	fa22 f303 	lsr.w	r3, r2, r3
 800775c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	ee07 3a90 	vmov	s15, r3
 8007764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007776:	4b62      	ldr	r3, [pc, #392]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777e:	ee07 3a90 	vmov	s15, r3
 8007782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007786:	ed97 6a02 	vldr	s12, [r7, #8]
 800778a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007910 <HAL_RCC_GetSysClockFreq+0x2e4>
 800778e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800779a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80077a6:	e087      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	ee07 3a90 	vmov	s15, r3
 80077ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007914 <HAL_RCC_GetSysClockFreq+0x2e8>
 80077b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ba:	4b51      	ldr	r3, [pc, #324]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c2:	ee07 3a90 	vmov	s15, r3
 80077c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80077ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007910 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ea:	e065      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007918 <HAL_RCC_GetSysClockFreq+0x2ec>
 80077fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fe:	4b40      	ldr	r3, [pc, #256]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007812:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007910 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800781a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800782a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800782e:	e043      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800791c <HAL_RCC_GetSysClockFreq+0x2f0>
 800783e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007842:	4b2f      	ldr	r3, [pc, #188]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007852:	ed97 6a02 	vldr	s12, [r7, #8]
 8007856:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007910 <HAL_RCC_GetSysClockFreq+0x2e4>
 800785a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007872:	e021      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007918 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007886:	4b1e      	ldr	r3, [pc, #120]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007896:	ed97 6a02 	vldr	s12, [r7, #8]
 800789a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007910 <HAL_RCC_GetSysClockFreq+0x2e4>
 800789e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078b6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80078b8:	4b11      	ldr	r3, [pc, #68]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078bc:	0a5b      	lsrs	r3, r3, #9
 80078be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c2:	3301      	adds	r3, #1
 80078c4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	ee07 3a90 	vmov	s15, r3
 80078cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80078d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078dc:	ee17 3a90 	vmov	r3, s15
 80078e0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80078e2:	e005      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	61bb      	str	r3, [r7, #24]
    break;
 80078e8:	e002      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80078ea:	4b07      	ldr	r3, [pc, #28]	; (8007908 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80078ec:	61bb      	str	r3, [r7, #24]
    break;
 80078ee:	bf00      	nop
  }

  return sysclockfreq;
 80078f0:	69bb      	ldr	r3, [r7, #24]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3724      	adds	r7, #36	; 0x24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	58024400 	.word	0x58024400
 8007904:	03d09000 	.word	0x03d09000
 8007908:	003d0900 	.word	0x003d0900
 800790c:	017d7840 	.word	0x017d7840
 8007910:	46000000 	.word	0x46000000
 8007914:	4c742400 	.word	0x4c742400
 8007918:	4a742400 	.word	0x4a742400
 800791c:	4bbebc20 	.word	0x4bbebc20

08007920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007926:	f7ff fe81 	bl	800762c <HAL_RCC_GetSysClockFreq>
 800792a:	4602      	mov	r2, r0
 800792c:	4b10      	ldr	r3, [pc, #64]	; (8007970 <HAL_RCC_GetHCLKFreq+0x50>)
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	0a1b      	lsrs	r3, r3, #8
 8007932:	f003 030f 	and.w	r3, r3, #15
 8007936:	490f      	ldr	r1, [pc, #60]	; (8007974 <HAL_RCC_GetHCLKFreq+0x54>)
 8007938:	5ccb      	ldrb	r3, [r1, r3]
 800793a:	f003 031f 	and.w	r3, r3, #31
 800793e:	fa22 f303 	lsr.w	r3, r2, r3
 8007942:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007944:	4b0a      	ldr	r3, [pc, #40]	; (8007970 <HAL_RCC_GetHCLKFreq+0x50>)
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	f003 030f 	and.w	r3, r3, #15
 800794c:	4a09      	ldr	r2, [pc, #36]	; (8007974 <HAL_RCC_GetHCLKFreq+0x54>)
 800794e:	5cd3      	ldrb	r3, [r2, r3]
 8007950:	f003 031f 	and.w	r3, r3, #31
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	fa22 f303 	lsr.w	r3, r2, r3
 800795a:	4a07      	ldr	r2, [pc, #28]	; (8007978 <HAL_RCC_GetHCLKFreq+0x58>)
 800795c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800795e:	4a07      	ldr	r2, [pc, #28]	; (800797c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007964:	4b04      	ldr	r3, [pc, #16]	; (8007978 <HAL_RCC_GetHCLKFreq+0x58>)
 8007966:	681b      	ldr	r3, [r3, #0]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	58024400 	.word	0x58024400
 8007974:	0800fc48 	.word	0x0800fc48
 8007978:	24000004 	.word	0x24000004
 800797c:	24000000 	.word	0x24000000

08007980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007984:	f7ff ffcc 	bl	8007920 <HAL_RCC_GetHCLKFreq>
 8007988:	4602      	mov	r2, r0
 800798a:	4b06      	ldr	r3, [pc, #24]	; (80079a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	091b      	lsrs	r3, r3, #4
 8007990:	f003 0307 	and.w	r3, r3, #7
 8007994:	4904      	ldr	r1, [pc, #16]	; (80079a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007996:	5ccb      	ldrb	r3, [r1, r3]
 8007998:	f003 031f 	and.w	r3, r3, #31
 800799c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	58024400 	.word	0x58024400
 80079a8:	0800fc48 	.word	0x0800fc48

080079ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80079b0:	f7ff ffb6 	bl	8007920 <HAL_RCC_GetHCLKFreq>
 80079b4:	4602      	mov	r2, r0
 80079b6:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	0a1b      	lsrs	r3, r3, #8
 80079bc:	f003 0307 	and.w	r3, r3, #7
 80079c0:	4904      	ldr	r1, [pc, #16]	; (80079d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80079c2:	5ccb      	ldrb	r3, [r1, r3]
 80079c4:	f003 031f 	and.w	r3, r3, #31
 80079c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	58024400 	.word	0x58024400
 80079d4:	0800fc48 	.word	0x0800fc48

080079d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079e0:	2300      	movs	r3, #0
 80079e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079e4:	2300      	movs	r3, #0
 80079e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d03f      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079fc:	d02a      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80079fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a02:	d824      	bhi.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a08:	d018      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a0e:	d81e      	bhi.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a18:	d007      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007a1a:	e018      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a1c:	4bab      	ldr	r3, [pc, #684]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	4aaa      	ldr	r2, [pc, #680]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a28:	e015      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	2102      	movs	r1, #2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f001 fff3 	bl	8009a1c <RCCEx_PLL2_Config>
 8007a36:	4603      	mov	r3, r0
 8007a38:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a3a:	e00c      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3324      	adds	r3, #36	; 0x24
 8007a40:	2102      	movs	r1, #2
 8007a42:	4618      	mov	r0, r3
 8007a44:	f002 f89c 	bl	8009b80 <RCCEx_PLL3_Config>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a4c:	e003      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	75fb      	strb	r3, [r7, #23]
      break;
 8007a52:	e000      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d109      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007a5c:	4b9b      	ldr	r3, [pc, #620]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a68:	4998      	ldr	r1, [pc, #608]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	650b      	str	r3, [r1, #80]	; 0x50
 8007a6e:	e001      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
 8007a72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d03d      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a84:	2b04      	cmp	r3, #4
 8007a86:	d826      	bhi.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007a88:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8e:	bf00      	nop
 8007a90:	08007aa5 	.word	0x08007aa5
 8007a94:	08007ab3 	.word	0x08007ab3
 8007a98:	08007ac5 	.word	0x08007ac5
 8007a9c:	08007add 	.word	0x08007add
 8007aa0:	08007add 	.word	0x08007add
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aa4:	4b89      	ldr	r3, [pc, #548]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	4a88      	ldr	r2, [pc, #544]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ab0:	e015      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f001 ffaf 	bl	8009a1c <RCCEx_PLL2_Config>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ac2:	e00c      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	3324      	adds	r3, #36	; 0x24
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4618      	mov	r0, r3
 8007acc:	f002 f858 	bl	8009b80 <RCCEx_PLL3_Config>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ad4:	e003      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8007ada:	e000      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ade:	7dfb      	ldrb	r3, [r7, #23]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d109      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ae4:	4b79      	ldr	r3, [pc, #484]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae8:	f023 0207 	bic.w	r2, r3, #7
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af0:	4976      	ldr	r1, [pc, #472]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	650b      	str	r3, [r1, #80]	; 0x50
 8007af6:	e001      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
 8007afa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d042      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b10:	d02b      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b16:	d825      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007b18:	2bc0      	cmp	r3, #192	; 0xc0
 8007b1a:	d028      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007b1c:	2bc0      	cmp	r3, #192	; 0xc0
 8007b1e:	d821      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007b20:	2b80      	cmp	r3, #128	; 0x80
 8007b22:	d016      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007b24:	2b80      	cmp	r3, #128	; 0x80
 8007b26:	d81d      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007b2c:	2b40      	cmp	r3, #64	; 0x40
 8007b2e:	d007      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007b30:	e018      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b32:	4b66      	ldr	r3, [pc, #408]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b36:	4a65      	ldr	r2, [pc, #404]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b3e:	e017      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3304      	adds	r3, #4
 8007b44:	2100      	movs	r1, #0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f001 ff68 	bl	8009a1c <RCCEx_PLL2_Config>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b50:	e00e      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3324      	adds	r3, #36	; 0x24
 8007b56:	2100      	movs	r1, #0
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f002 f811 	bl	8009b80 <RCCEx_PLL3_Config>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b62:	e005      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	75fb      	strb	r3, [r7, #23]
      break;
 8007b68:	e002      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007b6a:	bf00      	nop
 8007b6c:	e000      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d109      	bne.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007b76:	4b55      	ldr	r3, [pc, #340]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b7a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b82:	4952      	ldr	r1, [pc, #328]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	650b      	str	r3, [r1, #80]	; 0x50
 8007b88:	e001      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
 8007b8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d049      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ba4:	d030      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007ba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007baa:	d82a      	bhi.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007bac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bb0:	d02c      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007bb2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bb6:	d824      	bhi.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bbc:	d018      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bc2:	d81e      	bhi.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007bc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bcc:	d007      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007bce:	e018      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bd0:	4b3e      	ldr	r3, [pc, #248]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	4a3d      	ldr	r2, [pc, #244]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bdc:	e017      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	3304      	adds	r3, #4
 8007be2:	2100      	movs	r1, #0
 8007be4:	4618      	mov	r0, r3
 8007be6:	f001 ff19 	bl	8009a1c <RCCEx_PLL2_Config>
 8007bea:	4603      	mov	r3, r0
 8007bec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007bee:	e00e      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3324      	adds	r3, #36	; 0x24
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f001 ffc2 	bl	8009b80 <RCCEx_PLL3_Config>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c00:	e005      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	75fb      	strb	r3, [r7, #23]
      break;
 8007c06:	e002      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007c08:	bf00      	nop
 8007c0a:	e000      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007c14:	4b2d      	ldr	r3, [pc, #180]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c18:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c22:	492a      	ldr	r1, [pc, #168]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	658b      	str	r3, [r1, #88]	; 0x58
 8007c28:	e001      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d04c      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c44:	d030      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007c46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c4a:	d82a      	bhi.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c50:	d02c      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007c52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c56:	d824      	bhi.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c5c:	d018      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c62:	d81e      	bhi.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d003      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c6c:	d007      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007c6e:	e018      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c70:	4b16      	ldr	r3, [pc, #88]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c74:	4a15      	ldr	r2, [pc, #84]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c7c:	e017      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3304      	adds	r3, #4
 8007c82:	2100      	movs	r1, #0
 8007c84:	4618      	mov	r0, r3
 8007c86:	f001 fec9 	bl	8009a1c <RCCEx_PLL2_Config>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007c8e:	e00e      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	3324      	adds	r3, #36	; 0x24
 8007c94:	2100      	movs	r1, #0
 8007c96:	4618      	mov	r0, r3
 8007c98:	f001 ff72 	bl	8009b80 <RCCEx_PLL3_Config>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ca0:	e005      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ca6:	e002      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007ca8:	bf00      	nop
 8007caa:	e000      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10d      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007cb4:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007cc2:	4902      	ldr	r1, [pc, #8]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	658b      	str	r3, [r1, #88]	; 0x58
 8007cc8:	e004      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007cca:	bf00      	nop
 8007ccc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d032      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ce4:	2b30      	cmp	r3, #48	; 0x30
 8007ce6:	d01c      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007ce8:	2b30      	cmp	r3, #48	; 0x30
 8007cea:	d817      	bhi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	d00c      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007cf0:	2b20      	cmp	r3, #32
 8007cf2:	d813      	bhi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d016      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007cf8:	2b10      	cmp	r3, #16
 8007cfa:	d10f      	bne.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cfc:	4baf      	ldr	r3, [pc, #700]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	4aae      	ldr	r2, [pc, #696]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007d08:	e00e      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	2102      	movs	r1, #2
 8007d10:	4618      	mov	r0, r3
 8007d12:	f001 fe83 	bl	8009a1c <RCCEx_PLL2_Config>
 8007d16:	4603      	mov	r3, r0
 8007d18:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007d1a:	e005      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d20:	e002      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007d22:	bf00      	nop
 8007d24:	e000      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007d26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d109      	bne.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d2e:	4ba3      	ldr	r3, [pc, #652]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d3a:	49a0      	ldr	r1, [pc, #640]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d40:	e001      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
 8007d44:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d047      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d5a:	d030      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d60:	d82a      	bhi.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007d62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d66:	d02c      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007d68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d6c:	d824      	bhi.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d72:	d018      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d78:	d81e      	bhi.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d82:	d007      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007d84:	e018      	b.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d86:	4b8d      	ldr	r3, [pc, #564]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	4a8c      	ldr	r2, [pc, #560]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d92:	e017      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	3304      	adds	r3, #4
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f001 fe3e 	bl	8009a1c <RCCEx_PLL2_Config>
 8007da0:	4603      	mov	r3, r0
 8007da2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007da4:	e00e      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	3324      	adds	r3, #36	; 0x24
 8007daa:	2100      	movs	r1, #0
 8007dac:	4618      	mov	r0, r3
 8007dae:	f001 fee7 	bl	8009b80 <RCCEx_PLL3_Config>
 8007db2:	4603      	mov	r3, r0
 8007db4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007db6:	e005      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	75fb      	strb	r3, [r7, #23]
      break;
 8007dbc:	e002      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007dbe:	bf00      	nop
 8007dc0:	e000      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d109      	bne.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007dca:	4b7c      	ldr	r3, [pc, #496]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd6:	4979      	ldr	r1, [pc, #484]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	650b      	str	r3, [r1, #80]	; 0x50
 8007ddc:	e001      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
 8007de0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d049      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007df6:	d02e      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dfc:	d828      	bhi.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007dfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e02:	d02a      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007e04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e08:	d822      	bhi.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007e0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e0e:	d026      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007e10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e14:	d81c      	bhi.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007e16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e1a:	d010      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007e1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e20:	d816      	bhi.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d01d      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e2a:	d111      	bne.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	2101      	movs	r1, #1
 8007e32:	4618      	mov	r0, r3
 8007e34:	f001 fdf2 	bl	8009a1c <RCCEx_PLL2_Config>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e3c:	e012      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3324      	adds	r3, #36	; 0x24
 8007e42:	2101      	movs	r1, #1
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 fe9b 	bl	8009b80 <RCCEx_PLL3_Config>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e4e:	e009      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	75fb      	strb	r3, [r7, #23]
      break;
 8007e54:	e006      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e56:	bf00      	nop
 8007e58:	e004      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e5a:	bf00      	nop
 8007e5c:	e002      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e5e:	bf00      	nop
 8007e60:	e000      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d109      	bne.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e6a:	4b54      	ldr	r3, [pc, #336]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e6e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e76:	4951      	ldr	r1, [pc, #324]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	650b      	str	r3, [r1, #80]	; 0x50
 8007e7c:	e001      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e7e:	7dfb      	ldrb	r3, [r7, #23]
 8007e80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d04b      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e98:	d02e      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e9e:	d828      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea4:	d02a      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eaa:	d822      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007eac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007eb0:	d026      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007eb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007eb6:	d81c      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ebc:	d010      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec2:	d816      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01d      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007ec8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ecc:	d111      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 fda1 	bl	8009a1c <RCCEx_PLL2_Config>
 8007eda:	4603      	mov	r3, r0
 8007edc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ede:	e012      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3324      	adds	r3, #36	; 0x24
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f001 fe4a 	bl	8009b80 <RCCEx_PLL3_Config>
 8007eec:	4603      	mov	r3, r0
 8007eee:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ef0:	e009      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef6:	e006      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007ef8:	bf00      	nop
 8007efa:	e004      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007efc:	bf00      	nop
 8007efe:	e002      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007f00:	bf00      	nop
 8007f02:	e000      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10a      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007f0c:	4b2b      	ldr	r3, [pc, #172]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f10:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f1a:	4928      	ldr	r1, [pc, #160]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	658b      	str	r3, [r1, #88]	; 0x58
 8007f20:	e001      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d02f      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f3a:	d00e      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f40:	d814      	bhi.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d015      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f4a:	d10f      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f4c:	4b1b      	ldr	r3, [pc, #108]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f50:	4a1a      	ldr	r2, [pc, #104]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f58:	e00c      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	2101      	movs	r1, #1
 8007f60:	4618      	mov	r0, r3
 8007f62:	f001 fd5b 	bl	8009a1c <RCCEx_PLL2_Config>
 8007f66:	4603      	mov	r3, r0
 8007f68:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f6a:	e003      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f70:	e000      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d109      	bne.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f7a:	4b10      	ldr	r3, [pc, #64]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f86:	490d      	ldr	r1, [pc, #52]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	650b      	str	r3, [r1, #80]	; 0x50
 8007f8c:	e001      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
 8007f90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d033      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d81c      	bhi.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007fa6:	a201      	add	r2, pc, #4	; (adr r2, 8007fac <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fac:	08007fe7 	.word	0x08007fe7
 8007fb0:	08007fc1 	.word	0x08007fc1
 8007fb4:	08007fcf 	.word	0x08007fcf
 8007fb8:	08007fe7 	.word	0x08007fe7
 8007fbc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc0:	4bb8      	ldr	r3, [pc, #736]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	4ab7      	ldr	r2, [pc, #732]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007fcc:	e00c      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	2102      	movs	r1, #2
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f001 fd21 	bl	8009a1c <RCCEx_PLL2_Config>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007fde:	e003      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe4:	e000      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d109      	bne.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007fee:	4bad      	ldr	r3, [pc, #692]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff2:	f023 0203 	bic.w	r2, r3, #3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffa:	49aa      	ldr	r1, [pc, #680]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008000:	e001      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 8086 	beq.w	8008120 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008014:	4ba4      	ldr	r3, [pc, #656]	; (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4aa3      	ldr	r2, [pc, #652]	; (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800801a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800801e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008020:	f7fa fa84 	bl	800252c <HAL_GetTick>
 8008024:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008026:	e009      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008028:	f7fa fa80 	bl	800252c <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	2b64      	cmp	r3, #100	; 0x64
 8008034:	d902      	bls.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	75fb      	strb	r3, [r7, #23]
        break;
 800803a:	e005      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800803c:	4b9a      	ldr	r3, [pc, #616]	; (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008044:	2b00      	cmp	r3, #0
 8008046:	d0ef      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d166      	bne.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800804e:	4b95      	ldr	r3, [pc, #596]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008050:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008058:	4053      	eors	r3, r2
 800805a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800805e:	2b00      	cmp	r3, #0
 8008060:	d013      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008062:	4b90      	ldr	r3, [pc, #576]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800806a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800806c:	4b8d      	ldr	r3, [pc, #564]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800806e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008070:	4a8c      	ldr	r2, [pc, #560]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008076:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008078:	4b8a      	ldr	r3, [pc, #552]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800807a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807c:	4a89      	ldr	r2, [pc, #548]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800807e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008082:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008084:	4a87      	ldr	r2, [pc, #540]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008094:	d115      	bne.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008096:	f7fa fa49 	bl	800252c <HAL_GetTick>
 800809a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800809c:	e00b      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800809e:	f7fa fa45 	bl	800252c <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d902      	bls.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	75fb      	strb	r3, [r7, #23]
            break;
 80080b4:	e005      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080b6:	4b7b      	ldr	r3, [pc, #492]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0ed      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d126      	bne.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080d6:	d10d      	bne.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80080d8:	4b72      	ldr	r3, [pc, #456]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080e6:	0919      	lsrs	r1, r3, #4
 80080e8:	4b70      	ldr	r3, [pc, #448]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80080ea:	400b      	ands	r3, r1
 80080ec:	496d      	ldr	r1, [pc, #436]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	610b      	str	r3, [r1, #16]
 80080f2:	e005      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80080f4:	4b6b      	ldr	r3, [pc, #428]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	4a6a      	ldr	r2, [pc, #424]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80080fe:	6113      	str	r3, [r2, #16]
 8008100:	4b68      	ldr	r3, [pc, #416]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008102:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800810a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800810e:	4965      	ldr	r1, [pc, #404]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008110:	4313      	orrs	r3, r2
 8008112:	670b      	str	r3, [r1, #112]	; 0x70
 8008114:	e004      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008116:	7dfb      	ldrb	r3, [r7, #23]
 8008118:	75bb      	strb	r3, [r7, #22]
 800811a:	e001      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d07e      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008130:	2b28      	cmp	r3, #40	; 0x28
 8008132:	d867      	bhi.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008134:	a201      	add	r2, pc, #4	; (adr r2, 800813c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	0800820b 	.word	0x0800820b
 8008140:	08008205 	.word	0x08008205
 8008144:	08008205 	.word	0x08008205
 8008148:	08008205 	.word	0x08008205
 800814c:	08008205 	.word	0x08008205
 8008150:	08008205 	.word	0x08008205
 8008154:	08008205 	.word	0x08008205
 8008158:	08008205 	.word	0x08008205
 800815c:	080081e1 	.word	0x080081e1
 8008160:	08008205 	.word	0x08008205
 8008164:	08008205 	.word	0x08008205
 8008168:	08008205 	.word	0x08008205
 800816c:	08008205 	.word	0x08008205
 8008170:	08008205 	.word	0x08008205
 8008174:	08008205 	.word	0x08008205
 8008178:	08008205 	.word	0x08008205
 800817c:	080081f3 	.word	0x080081f3
 8008180:	08008205 	.word	0x08008205
 8008184:	08008205 	.word	0x08008205
 8008188:	08008205 	.word	0x08008205
 800818c:	08008205 	.word	0x08008205
 8008190:	08008205 	.word	0x08008205
 8008194:	08008205 	.word	0x08008205
 8008198:	08008205 	.word	0x08008205
 800819c:	0800820b 	.word	0x0800820b
 80081a0:	08008205 	.word	0x08008205
 80081a4:	08008205 	.word	0x08008205
 80081a8:	08008205 	.word	0x08008205
 80081ac:	08008205 	.word	0x08008205
 80081b0:	08008205 	.word	0x08008205
 80081b4:	08008205 	.word	0x08008205
 80081b8:	08008205 	.word	0x08008205
 80081bc:	0800820b 	.word	0x0800820b
 80081c0:	08008205 	.word	0x08008205
 80081c4:	08008205 	.word	0x08008205
 80081c8:	08008205 	.word	0x08008205
 80081cc:	08008205 	.word	0x08008205
 80081d0:	08008205 	.word	0x08008205
 80081d4:	08008205 	.word	0x08008205
 80081d8:	08008205 	.word	0x08008205
 80081dc:	0800820b 	.word	0x0800820b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3304      	adds	r3, #4
 80081e4:	2101      	movs	r1, #1
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 fc18 	bl	8009a1c <RCCEx_PLL2_Config>
 80081ec:	4603      	mov	r3, r0
 80081ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80081f0:	e00c      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3324      	adds	r3, #36	; 0x24
 80081f6:	2101      	movs	r1, #1
 80081f8:	4618      	mov	r0, r3
 80081fa:	f001 fcc1 	bl	8009b80 <RCCEx_PLL3_Config>
 80081fe:	4603      	mov	r3, r0
 8008200:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008202:	e003      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	75fb      	strb	r3, [r7, #23]
      break;
 8008208:	e000      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800820a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800820c:	7dfb      	ldrb	r3, [r7, #23]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d109      	bne.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008212:	4b24      	ldr	r3, [pc, #144]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008216:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800821e:	4921      	ldr	r1, [pc, #132]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008220:	4313      	orrs	r3, r2
 8008222:	654b      	str	r3, [r1, #84]	; 0x54
 8008224:	e001      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008226:	7dfb      	ldrb	r3, [r7, #23]
 8008228:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0302 	and.w	r3, r3, #2
 8008232:	2b00      	cmp	r3, #0
 8008234:	d03e      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800823a:	2b05      	cmp	r3, #5
 800823c:	d820      	bhi.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800823e:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008244:	08008287 	.word	0x08008287
 8008248:	0800825d 	.word	0x0800825d
 800824c:	0800826f 	.word	0x0800826f
 8008250:	08008287 	.word	0x08008287
 8008254:	08008287 	.word	0x08008287
 8008258:	08008287 	.word	0x08008287
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	3304      	adds	r3, #4
 8008260:	2101      	movs	r1, #1
 8008262:	4618      	mov	r0, r3
 8008264:	f001 fbda 	bl	8009a1c <RCCEx_PLL2_Config>
 8008268:	4603      	mov	r3, r0
 800826a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800826c:	e00c      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	3324      	adds	r3, #36	; 0x24
 8008272:	2101      	movs	r1, #1
 8008274:	4618      	mov	r0, r3
 8008276:	f001 fc83 	bl	8009b80 <RCCEx_PLL3_Config>
 800827a:	4603      	mov	r3, r0
 800827c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800827e:	e003      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	75fb      	strb	r3, [r7, #23]
      break;
 8008284:	e000      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008288:	7dfb      	ldrb	r3, [r7, #23]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d110      	bne.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800828e:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008292:	f023 0207 	bic.w	r2, r3, #7
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800829a:	4902      	ldr	r1, [pc, #8]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800829c:	4313      	orrs	r3, r2
 800829e:	654b      	str	r3, [r1, #84]	; 0x54
 80082a0:	e008      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80082a2:	bf00      	nop
 80082a4:	58024400 	.word	0x58024400
 80082a8:	58024800 	.word	0x58024800
 80082ac:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d039      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c6:	2b05      	cmp	r3, #5
 80082c8:	d820      	bhi.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80082ca:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80082cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d0:	08008313 	.word	0x08008313
 80082d4:	080082e9 	.word	0x080082e9
 80082d8:	080082fb 	.word	0x080082fb
 80082dc:	08008313 	.word	0x08008313
 80082e0:	08008313 	.word	0x08008313
 80082e4:	08008313 	.word	0x08008313
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3304      	adds	r3, #4
 80082ec:	2101      	movs	r1, #1
 80082ee:	4618      	mov	r0, r3
 80082f0:	f001 fb94 	bl	8009a1c <RCCEx_PLL2_Config>
 80082f4:	4603      	mov	r3, r0
 80082f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80082f8:	e00c      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3324      	adds	r3, #36	; 0x24
 80082fe:	2101      	movs	r1, #1
 8008300:	4618      	mov	r0, r3
 8008302:	f001 fc3d 	bl	8009b80 <RCCEx_PLL3_Config>
 8008306:	4603      	mov	r3, r0
 8008308:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800830a:	e003      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	75fb      	strb	r3, [r7, #23]
      break;
 8008310:	e000      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008314:	7dfb      	ldrb	r3, [r7, #23]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10a      	bne.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800831a:	4bb7      	ldr	r3, [pc, #732]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800831c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831e:	f023 0207 	bic.w	r2, r3, #7
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008328:	49b3      	ldr	r1, [pc, #716]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800832a:	4313      	orrs	r3, r2
 800832c:	658b      	str	r3, [r1, #88]	; 0x58
 800832e:	e001      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008330:	7dfb      	ldrb	r3, [r7, #23]
 8008332:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0320 	and.w	r3, r3, #32
 800833c:	2b00      	cmp	r3, #0
 800833e:	d04b      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008346:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800834a:	d02e      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800834c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008350:	d828      	bhi.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008356:	d02a      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800835c:	d822      	bhi.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800835e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008362:	d026      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008364:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008368:	d81c      	bhi.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800836a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800836e:	d010      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008374:	d816      	bhi.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d01d      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800837a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800837e:	d111      	bne.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3304      	adds	r3, #4
 8008384:	2100      	movs	r1, #0
 8008386:	4618      	mov	r0, r3
 8008388:	f001 fb48 	bl	8009a1c <RCCEx_PLL2_Config>
 800838c:	4603      	mov	r3, r0
 800838e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008390:	e012      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	3324      	adds	r3, #36	; 0x24
 8008396:	2102      	movs	r1, #2
 8008398:	4618      	mov	r0, r3
 800839a:	f001 fbf1 	bl	8009b80 <RCCEx_PLL3_Config>
 800839e:	4603      	mov	r3, r0
 80083a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80083a2:	e009      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	75fb      	strb	r3, [r7, #23]
      break;
 80083a8:	e006      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80083aa:	bf00      	nop
 80083ac:	e004      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80083ae:	bf00      	nop
 80083b0:	e002      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80083b2:	bf00      	nop
 80083b4:	e000      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80083b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10a      	bne.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083be:	4b8e      	ldr	r3, [pc, #568]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083cc:	498a      	ldr	r1, [pc, #552]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	654b      	str	r3, [r1, #84]	; 0x54
 80083d2:	e001      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
 80083d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d04b      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083ee:	d02e      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80083f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083f4:	d828      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80083f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083fa:	d02a      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80083fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008400:	d822      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008402:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008406:	d026      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800840c:	d81c      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800840e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008412:	d010      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008418:	d816      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d01d      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800841e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008422:	d111      	bne.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3304      	adds	r3, #4
 8008428:	2100      	movs	r1, #0
 800842a:	4618      	mov	r0, r3
 800842c:	f001 faf6 	bl	8009a1c <RCCEx_PLL2_Config>
 8008430:	4603      	mov	r3, r0
 8008432:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008434:	e012      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	3324      	adds	r3, #36	; 0x24
 800843a:	2102      	movs	r1, #2
 800843c:	4618      	mov	r0, r3
 800843e:	f001 fb9f 	bl	8009b80 <RCCEx_PLL3_Config>
 8008442:	4603      	mov	r3, r0
 8008444:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008446:	e009      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	75fb      	strb	r3, [r7, #23]
      break;
 800844c:	e006      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800844e:	bf00      	nop
 8008450:	e004      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008452:	bf00      	nop
 8008454:	e002      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008456:	bf00      	nop
 8008458:	e000      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800845a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10a      	bne.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008462:	4b65      	ldr	r3, [pc, #404]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008466:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008470:	4961      	ldr	r1, [pc, #388]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008472:	4313      	orrs	r3, r2
 8008474:	658b      	str	r3, [r1, #88]	; 0x58
 8008476:	e001      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008478:	7dfb      	ldrb	r3, [r7, #23]
 800847a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008484:	2b00      	cmp	r3, #0
 8008486:	d04b      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800848e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008492:	d02e      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008494:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008498:	d828      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800849a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800849e:	d02a      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80084a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084a4:	d822      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80084a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80084aa:	d026      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80084ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80084b0:	d81c      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80084b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084b6:	d010      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80084b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084bc:	d816      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d01d      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80084c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084c6:	d111      	bne.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3304      	adds	r3, #4
 80084cc:	2100      	movs	r1, #0
 80084ce:	4618      	mov	r0, r3
 80084d0:	f001 faa4 	bl	8009a1c <RCCEx_PLL2_Config>
 80084d4:	4603      	mov	r3, r0
 80084d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084d8:	e012      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3324      	adds	r3, #36	; 0x24
 80084de:	2102      	movs	r1, #2
 80084e0:	4618      	mov	r0, r3
 80084e2:	f001 fb4d 	bl	8009b80 <RCCEx_PLL3_Config>
 80084e6:	4603      	mov	r3, r0
 80084e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084ea:	e009      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	75fb      	strb	r3, [r7, #23]
      break;
 80084f0:	e006      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084f2:	bf00      	nop
 80084f4:	e004      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084f6:	bf00      	nop
 80084f8:	e002      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084fa:	bf00      	nop
 80084fc:	e000      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10a      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008506:	4b3c      	ldr	r3, [pc, #240]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008514:	4938      	ldr	r1, [pc, #224]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008516:	4313      	orrs	r3, r2
 8008518:	658b      	str	r3, [r1, #88]	; 0x58
 800851a:	e001      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800851c:	7dfb      	ldrb	r3, [r7, #23]
 800851e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0308 	and.w	r3, r3, #8
 8008528:	2b00      	cmp	r3, #0
 800852a:	d01a      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008536:	d10a      	bne.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3324      	adds	r3, #36	; 0x24
 800853c:	2102      	movs	r1, #2
 800853e:	4618      	mov	r0, r3
 8008540:	f001 fb1e 	bl	8009b80 <RCCEx_PLL3_Config>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800854e:	4b2a      	ldr	r3, [pc, #168]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008552:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800855c:	4926      	ldr	r1, [pc, #152]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800855e:	4313      	orrs	r3, r2
 8008560:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0310 	and.w	r3, r3, #16
 800856a:	2b00      	cmp	r3, #0
 800856c:	d01a      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008578:	d10a      	bne.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	3324      	adds	r3, #36	; 0x24
 800857e:	2102      	movs	r1, #2
 8008580:	4618      	mov	r0, r3
 8008582:	f001 fafd 	bl	8009b80 <RCCEx_PLL3_Config>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008590:	4b19      	ldr	r3, [pc, #100]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800859e:	4916      	ldr	r1, [pc, #88]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d036      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80085b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085ba:	d01f      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80085bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085c0:	d817      	bhi.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80085c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ca:	d009      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80085cc:	e011      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3304      	adds	r3, #4
 80085d2:	2100      	movs	r1, #0
 80085d4:	4618      	mov	r0, r3
 80085d6:	f001 fa21 	bl	8009a1c <RCCEx_PLL2_Config>
 80085da:	4603      	mov	r3, r0
 80085dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80085de:	e00e      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	3324      	adds	r3, #36	; 0x24
 80085e4:	2102      	movs	r1, #2
 80085e6:	4618      	mov	r0, r3
 80085e8:	f001 faca 	bl	8009b80 <RCCEx_PLL3_Config>
 80085ec:	4603      	mov	r3, r0
 80085ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80085f0:	e005      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	75fb      	strb	r3, [r7, #23]
      break;
 80085f6:	e002      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80085f8:	58024400 	.word	0x58024400
      break;
 80085fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10a      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008604:	4b93      	ldr	r3, [pc, #588]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008608:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008612:	4990      	ldr	r1, [pc, #576]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008614:	4313      	orrs	r3, r2
 8008616:	658b      	str	r3, [r1, #88]	; 0x58
 8008618:	e001      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861a:	7dfb      	ldrb	r3, [r7, #23]
 800861c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d033      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008630:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008634:	d01c      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008636:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800863a:	d816      	bhi.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800863c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008640:	d003      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008646:	d007      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008648:	e00f      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800864a:	4b82      	ldr	r3, [pc, #520]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864e:	4a81      	ldr	r2, [pc, #516]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008654:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008656:	e00c      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3324      	adds	r3, #36	; 0x24
 800865c:	2101      	movs	r1, #1
 800865e:	4618      	mov	r0, r3
 8008660:	f001 fa8e 	bl	8009b80 <RCCEx_PLL3_Config>
 8008664:	4603      	mov	r3, r0
 8008666:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008668:	e003      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	75fb      	strb	r3, [r7, #23]
      break;
 800866e:	e000      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10a      	bne.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008678:	4b76      	ldr	r3, [pc, #472]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800867a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008686:	4973      	ldr	r1, [pc, #460]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008688:	4313      	orrs	r3, r2
 800868a:	654b      	str	r3, [r1, #84]	; 0x54
 800868c:	e001      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d029      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80086a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086aa:	d007      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80086ac:	e00f      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086ae:	4b69      	ldr	r3, [pc, #420]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b2:	4a68      	ldr	r2, [pc, #416]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80086ba:	e00b      	b.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3304      	adds	r3, #4
 80086c0:	2102      	movs	r1, #2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f001 f9aa 	bl	8009a1c <RCCEx_PLL2_Config>
 80086c8:	4603      	mov	r3, r0
 80086ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80086cc:	e002      	b.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	75fb      	strb	r3, [r7, #23]
      break;
 80086d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d109      	bne.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80086da:	4b5e      	ldr	r3, [pc, #376]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e6:	495b      	ldr	r1, [pc, #364]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086e8:	4313      	orrs	r3, r2
 80086ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80086ec:	e001      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ee:	7dfb      	ldrb	r3, [r7, #23]
 80086f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00a      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	3324      	adds	r3, #36	; 0x24
 8008702:	2102      	movs	r1, #2
 8008704:	4618      	mov	r0, r3
 8008706:	f001 fa3b 	bl	8009b80 <RCCEx_PLL3_Config>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d030      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008728:	d017      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800872a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800872e:	d811      	bhi.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008734:	d013      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800873a:	d80b      	bhi.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d010      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008744:	d106      	bne.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008746:	4b43      	ldr	r3, [pc, #268]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874a:	4a42      	ldr	r2, [pc, #264]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800874c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008750:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008752:	e007      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	75fb      	strb	r3, [r7, #23]
      break;
 8008758:	e004      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800875a:	bf00      	nop
 800875c:	e002      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800875e:	bf00      	nop
 8008760:	e000      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d109      	bne.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800876a:	4b3a      	ldr	r3, [pc, #232]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800876c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800876e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008776:	4937      	ldr	r1, [pc, #220]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008778:	4313      	orrs	r3, r2
 800877a:	654b      	str	r3, [r1, #84]	; 0x54
 800877c:	e001      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d008      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800878e:	4b31      	ldr	r3, [pc, #196]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008792:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800879a:	492e      	ldr	r1, [pc, #184]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800879c:	4313      	orrs	r3, r2
 800879e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d009      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80087ac:	4b29      	ldr	r3, [pc, #164]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087ba:	4926      	ldr	r1, [pc, #152]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d008      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80087cc:	4b21      	ldr	r3, [pc, #132]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087d8:	491e      	ldr	r1, [pc, #120]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00d      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087ea:	4b1a      	ldr	r3, [pc, #104]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	4a19      	ldr	r2, [pc, #100]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087f4:	6113      	str	r3, [r2, #16]
 80087f6:	4b17      	ldr	r3, [pc, #92]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087f8:	691a      	ldr	r2, [r3, #16]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008800:	4914      	ldr	r1, [pc, #80]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008802:	4313      	orrs	r3, r2
 8008804:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	da08      	bge.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800880e:	4b11      	ldr	r3, [pc, #68]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008812:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800881a:	490e      	ldr	r1, [pc, #56]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800881c:	4313      	orrs	r3, r2
 800881e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d009      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800882c:	4b09      	ldr	r3, [pc, #36]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800882e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008830:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800883a:	4906      	ldr	r1, [pc, #24]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800883c:	4313      	orrs	r3, r2
 800883e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008840:	7dbb      	ldrb	r3, [r7, #22]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	e000      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
}
 800884c:	4618      	mov	r0, r3
 800884e:	3718      	adds	r7, #24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	58024400 	.word	0x58024400

08008858 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b090      	sub	sp, #64	; 0x40
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008866:	f040 8095 	bne.w	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800886a:	4bae      	ldr	r3, [pc, #696]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800886c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800886e:	f003 0307 	and.w	r3, r3, #7
 8008872:	633b      	str	r3, [r7, #48]	; 0x30
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	2b04      	cmp	r3, #4
 8008878:	f200 8088 	bhi.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800887c:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800887e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008882:	bf00      	nop
 8008884:	08008899 	.word	0x08008899
 8008888:	080088c1 	.word	0x080088c1
 800888c:	080088e9 	.word	0x080088e9
 8008890:	08008985 	.word	0x08008985
 8008894:	08008911 	.word	0x08008911

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008898:	4ba2      	ldr	r3, [pc, #648]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088a4:	d108      	bne.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 ff64 	bl	8009778 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088b4:	f000 bc95 	b.w	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088bc:	f000 bc91 	b.w	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088c0:	4b98      	ldr	r3, [pc, #608]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088cc:	d108      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ce:	f107 0318 	add.w	r3, r7, #24
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fca8 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088dc:	f000 bc81 	b.w	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088e4:	f000 bc7d 	b.w	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088e8:	4b8e      	ldr	r3, [pc, #568]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088f4:	d108      	bne.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088f6:	f107 030c 	add.w	r3, r7, #12
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fde8 	bl	80094d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008904:	f000 bc6d 	b.w	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008908:	2300      	movs	r3, #0
 800890a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800890c:	f000 bc69 	b.w	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008910:	4b84      	ldr	r3, [pc, #528]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008914:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008918:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800891a:	4b82      	ldr	r3, [pc, #520]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0304 	and.w	r3, r3, #4
 8008922:	2b04      	cmp	r3, #4
 8008924:	d10c      	bne.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008928:	2b00      	cmp	r3, #0
 800892a:	d109      	bne.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800892c:	4b7d      	ldr	r3, [pc, #500]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	08db      	lsrs	r3, r3, #3
 8008932:	f003 0303 	and.w	r3, r3, #3
 8008936:	4a7c      	ldr	r2, [pc, #496]	; (8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008938:	fa22 f303 	lsr.w	r3, r2, r3
 800893c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800893e:	e01f      	b.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008940:	4b78      	ldr	r3, [pc, #480]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800894c:	d106      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800894e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008954:	d102      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008956:	4b75      	ldr	r3, [pc, #468]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800895a:	e011      	b.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800895c:	4b71      	ldr	r3, [pc, #452]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008968:	d106      	bne.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800896a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008970:	d102      	bne.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008972:	4b6f      	ldr	r3, [pc, #444]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008976:	e003      	b.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800897c:	f000 bc31 	b.w	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008980:	f000 bc2f 	b.w	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008984:	4b6b      	ldr	r3, [pc, #428]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008988:	f000 bc2b 	b.w	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008990:	f000 bc27 	b.w	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800899a:	f040 8095 	bne.w	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800899e:	4b61      	ldr	r3, [pc, #388]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80089a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80089a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089ae:	d04d      	beq.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80089b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089b6:	f200 8084 	bhi.w	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089bc:	2bc0      	cmp	r3, #192	; 0xc0
 80089be:	d07d      	beq.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	2bc0      	cmp	r3, #192	; 0xc0
 80089c4:	d87d      	bhi.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80089c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c8:	2b80      	cmp	r3, #128	; 0x80
 80089ca:	d02d      	beq.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	2b80      	cmp	r3, #128	; 0x80
 80089d0:	d877      	bhi.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80089d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089da:	2b40      	cmp	r3, #64	; 0x40
 80089dc:	d012      	beq.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80089de:	e070      	b.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089e0:	4b50      	ldr	r3, [pc, #320]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089ec:	d107      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fec0 	bl	8009778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089fc:	e3f1      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a02:	e3ee      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a04:	4b47      	ldr	r3, [pc, #284]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a10:	d107      	bne.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a12:	f107 0318 	add.w	r3, r7, #24
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 fc06 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a20:	e3df      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a22:	2300      	movs	r3, #0
 8008a24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a26:	e3dc      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a28:	4b3e      	ldr	r3, [pc, #248]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a34:	d107      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a36:	f107 030c 	add.w	r3, r7, #12
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 fd48 	bl	80094d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a44:	e3cd      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a4a:	e3ca      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a4c:	4b35      	ldr	r3, [pc, #212]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a54:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a56:	4b33      	ldr	r3, [pc, #204]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0304 	and.w	r3, r3, #4
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d10c      	bne.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d109      	bne.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a68:	4b2e      	ldr	r3, [pc, #184]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	08db      	lsrs	r3, r3, #3
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	4a2d      	ldr	r2, [pc, #180]	; (8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008a74:	fa22 f303 	lsr.w	r3, r2, r3
 8008a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a7a:	e01e      	b.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a7c:	4b29      	ldr	r3, [pc, #164]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a88:	d106      	bne.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a90:	d102      	bne.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a92:	4b26      	ldr	r3, [pc, #152]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a96:	e010      	b.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a98:	4b22      	ldr	r3, [pc, #136]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008aa4:	d106      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aac:	d102      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008aae:	4b20      	ldr	r3, [pc, #128]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ab2:	e002      	b.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008ab8:	e393      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008aba:	e392      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008abc:	4b1d      	ldr	r3, [pc, #116]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ac0:	e38f      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ac6:	e38c      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ace:	f040 80a7 	bne.w	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008ad2:	4b14      	ldr	r3, [pc, #80]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008ada:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ae2:	d05f      	beq.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008aea:	f200 8096 	bhi.w	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008af4:	f000 808e 	beq.w	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008afe:	f200 808c 	bhi.w	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b08:	d03a      	beq.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b10:	f200 8083 	bhi.w	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00e      	beq.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b20:	d01c      	beq.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008b22:	e07a      	b.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008b24:	58024400 	.word	0x58024400
 8008b28:	03d09000 	.word	0x03d09000
 8008b2c:	003d0900 	.word	0x003d0900
 8008b30:	017d7840 	.word	0x017d7840
 8008b34:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b38:	4baa      	ldr	r3, [pc, #680]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b44:	d107      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 fe14 	bl	8009778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b54:	e345      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b56:	2300      	movs	r3, #0
 8008b58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b5a:	e342      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b5c:	4ba1      	ldr	r3, [pc, #644]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b68:	d107      	bne.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b6a:	f107 0318 	add.w	r3, r7, #24
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 fb5a 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b78:	e333      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b7e:	e330      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b80:	4b98      	ldr	r3, [pc, #608]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b8c:	d107      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b8e:	f107 030c 	add.w	r3, r7, #12
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fc9c 	bl	80094d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b9c:	e321      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ba2:	e31e      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ba4:	4b8f      	ldr	r3, [pc, #572]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ba8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bae:	4b8d      	ldr	r3, [pc, #564]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0304 	and.w	r3, r3, #4
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d10c      	bne.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d109      	bne.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bc0:	4b88      	ldr	r3, [pc, #544]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	08db      	lsrs	r3, r3, #3
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	4a87      	ldr	r2, [pc, #540]	; (8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bd2:	e01e      	b.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bd4:	4b83      	ldr	r3, [pc, #524]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be0:	d106      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008be8:	d102      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008bea:	4b80      	ldr	r3, [pc, #512]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bee:	e010      	b.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bf0:	4b7c      	ldr	r3, [pc, #496]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bfc:	d106      	bne.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c04:	d102      	bne.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008c06:	4b7a      	ldr	r3, [pc, #488]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c0a:	e002      	b.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008c10:	e2e7      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c12:	e2e6      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c14:	4b77      	ldr	r3, [pc, #476]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c18:	e2e3      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c1e:	e2e0      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c26:	f040 809c 	bne.w	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008c2a:	4b6e      	ldr	r3, [pc, #440]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c2e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008c32:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c3a:	d054      	beq.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c42:	f200 808b 	bhi.w	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c4c:	f000 8083 	beq.w	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c56:	f200 8081 	bhi.w	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c60:	d02f      	beq.n	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c68:	d878      	bhi.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d004      	beq.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c76:	d012      	beq.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008c78:	e070      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c7a:	4b5a      	ldr	r3, [pc, #360]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c86:	d107      	bne.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 fd73 	bl	8009778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c96:	e2a4      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c9c:	e2a1      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c9e:	4b51      	ldr	r3, [pc, #324]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008caa:	d107      	bne.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cac:	f107 0318 	add.w	r3, r7, #24
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 fab9 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008cba:	e292      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc0:	e28f      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cc2:	4b48      	ldr	r3, [pc, #288]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cce:	d107      	bne.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cd0:	f107 030c 	add.w	r3, r7, #12
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 fbfb 	bl	80094d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cde:	e280      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ce4:	e27d      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ce6:	4b3f      	ldr	r3, [pc, #252]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cee:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cf0:	4b3c      	ldr	r3, [pc, #240]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0304 	and.w	r3, r3, #4
 8008cf8:	2b04      	cmp	r3, #4
 8008cfa:	d10c      	bne.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d109      	bne.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d02:	4b38      	ldr	r3, [pc, #224]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	08db      	lsrs	r3, r3, #3
 8008d08:	f003 0303 	and.w	r3, r3, #3
 8008d0c:	4a36      	ldr	r2, [pc, #216]	; (8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d14:	e01e      	b.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d16:	4b33      	ldr	r3, [pc, #204]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d22:	d106      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d2a:	d102      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d2c:	4b2f      	ldr	r3, [pc, #188]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d30:	e010      	b.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d32:	4b2c      	ldr	r3, [pc, #176]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d3e:	d106      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d46:	d102      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d48:	4b29      	ldr	r3, [pc, #164]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d4c:	e002      	b.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d52:	e246      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d54:	e245      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d56:	4b27      	ldr	r3, [pc, #156]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d5a:	e242      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d60:	e23f      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d68:	f040 80a8 	bne.w	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008d6c:	4b1d      	ldr	r3, [pc, #116]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d70:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008d74:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d7c:	d060      	beq.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d84:	f200 8097 	bhi.w	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d8e:	f000 808f 	beq.w	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d98:	f200 808d 	bhi.w	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008da2:	d03b      	beq.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008daa:	f200 8084 	bhi.w	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d004      	beq.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dba:	d01d      	beq.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008dbc:	e07b      	b.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008dbe:	4b09      	ldr	r3, [pc, #36]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dca:	d107      	bne.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 fcd1 	bl	8009778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008dda:	e202      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008de0:	e1ff      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008de2:	bf00      	nop
 8008de4:	58024400 	.word	0x58024400
 8008de8:	03d09000 	.word	0x03d09000
 8008dec:	003d0900 	.word	0x003d0900
 8008df0:	017d7840 	.word	0x017d7840
 8008df4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008df8:	4ba3      	ldr	r3, [pc, #652]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e04:	d107      	bne.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e06:	f107 0318 	add.w	r3, r7, #24
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 fa0c 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e14:	e1e5      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e1a:	e1e2      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e1c:	4b9a      	ldr	r3, [pc, #616]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e28:	d107      	bne.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e2a:	f107 030c 	add.w	r3, r7, #12
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 fb4e 	bl	80094d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e38:	e1d3      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e3e:	e1d0      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e40:	4b91      	ldr	r3, [pc, #580]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e48:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e4a:	4b8f      	ldr	r3, [pc, #572]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0304 	and.w	r3, r3, #4
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	d10c      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d109      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e5c:	4b8a      	ldr	r3, [pc, #552]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	08db      	lsrs	r3, r3, #3
 8008e62:	f003 0303 	and.w	r3, r3, #3
 8008e66:	4a89      	ldr	r2, [pc, #548]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008e68:	fa22 f303 	lsr.w	r3, r2, r3
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e6e:	e01e      	b.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e70:	4b85      	ldr	r3, [pc, #532]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e7c:	d106      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8008e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e84:	d102      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e86:	4b82      	ldr	r3, [pc, #520]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e8a:	e010      	b.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e8c:	4b7e      	ldr	r3, [pc, #504]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e98:	d106      	bne.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea0:	d102      	bne.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008ea2:	4b7c      	ldr	r3, [pc, #496]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ea6:	e002      	b.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008eac:	e199      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008eae:	e198      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008eb0:	4b79      	ldr	r3, [pc, #484]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eb4:	e195      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eba:	e192      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ec2:	d173      	bne.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008ec4:	4b70      	ldr	r3, [pc, #448]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ecc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ed4:	d02f      	beq.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008edc:	d863      	bhi.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d004      	beq.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eea:	d012      	beq.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8008eec:	e05b      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008eee:	4b66      	ldr	r3, [pc, #408]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008efa:	d107      	bne.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008efc:	f107 0318 	add.w	r3, r7, #24
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 f991 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f0a:	e16a      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f10:	e167      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f12:	4b5d      	ldr	r3, [pc, #372]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f1e:	d107      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f20:	f107 030c 	add.w	r3, r7, #12
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 fad3 	bl	80094d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f2e:	e158      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f30:	2300      	movs	r3, #0
 8008f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f34:	e155      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f36:	4b54      	ldr	r3, [pc, #336]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f3e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f40:	4b51      	ldr	r3, [pc, #324]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0304 	and.w	r3, r3, #4
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d10c      	bne.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8008f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d109      	bne.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f52:	4b4d      	ldr	r3, [pc, #308]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	08db      	lsrs	r3, r3, #3
 8008f58:	f003 0303 	and.w	r3, r3, #3
 8008f5c:	4a4b      	ldr	r2, [pc, #300]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f64:	e01e      	b.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f66:	4b48      	ldr	r3, [pc, #288]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f72:	d106      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8008f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f7a:	d102      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008f7c:	4b44      	ldr	r3, [pc, #272]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f80:	e010      	b.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f82:	4b41      	ldr	r3, [pc, #260]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f8e:	d106      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f96:	d102      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008f98:	4b3e      	ldr	r3, [pc, #248]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f9c:	e002      	b.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008fa2:	e11e      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008fa4:	e11d      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008faa:	e11a      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb2:	d133      	bne.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008fb4:	4b34      	ldr	r3, [pc, #208]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fbc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d004      	beq.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8008fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fca:	d012      	beq.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008fcc:	e023      	b.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fce:	4b2e      	ldr	r3, [pc, #184]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fda:	d107      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 fbc9 	bl	8009778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008fea:	e0fa      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ff0:	e0f7      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ff2:	4b25      	ldr	r3, [pc, #148]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ffe:	d107      	bne.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009000:	f107 0318 	add.w	r3, r7, #24
 8009004:	4618      	mov	r0, r3
 8009006:	f000 f90f 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800900e:	e0e8      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009014:	e0e5      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009016:	2300      	movs	r3, #0
 8009018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800901a:	e0e2      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009022:	f040 808f 	bne.w	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009026:	4b18      	ldr	r3, [pc, #96]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800902a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800902e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009032:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009036:	d075      	beq.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8009038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800903e:	d87e      	bhi.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009046:	d060      	beq.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800904e:	d876      	bhi.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009056:	d045      	beq.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800905e:	d86e      	bhi.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009066:	d02b      	beq.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800906e:	d866      	bhi.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	2b00      	cmp	r3, #0
 8009074:	d004      	beq.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8009076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009078:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800907c:	d00e      	beq.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800907e:	e05e      	b.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009080:	f000 f8bc 	bl	80091fc <HAL_RCCEx_GetD3PCLK1Freq>
 8009084:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009086:	e0ac      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009088:	58024400 	.word	0x58024400
 800908c:	03d09000 	.word	0x03d09000
 8009090:	003d0900 	.word	0x003d0900
 8009094:	017d7840 	.word	0x017d7840
 8009098:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800909c:	4b53      	ldr	r3, [pc, #332]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090a8:	d107      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090aa:	f107 0318 	add.w	r3, r7, #24
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 f8ba 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80090b8:	e093      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090be:	e090      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090c0:	4b4a      	ldr	r3, [pc, #296]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090cc:	d107      	bne.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ce:	f107 030c 	add.w	r3, r7, #12
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 f9fc 	bl	80094d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80090dc:	e081      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090de:	2300      	movs	r3, #0
 80090e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090e2:	e07e      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090e4:	4b41      	ldr	r3, [pc, #260]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 0304 	and.w	r3, r3, #4
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d109      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090f0:	4b3e      	ldr	r3, [pc, #248]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	08db      	lsrs	r3, r3, #3
 80090f6:	f003 0303 	and.w	r3, r3, #3
 80090fa:	4a3d      	ldr	r2, [pc, #244]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80090fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009100:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009102:	e06e      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009108:	e06b      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800910a:	4b38      	ldr	r3, [pc, #224]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009116:	d102      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8009118:	4b36      	ldr	r3, [pc, #216]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800911a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800911c:	e061      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009122:	e05e      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009124:	4b31      	ldr	r3, [pc, #196]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800912c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009130:	d102      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8009132:	4b31      	ldr	r3, [pc, #196]	; (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009134:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009136:	e054      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800913c:	e051      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009142:	e04e      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800914a:	d148      	bne.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800914c:	4b27      	ldr	r3, [pc, #156]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800914e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009150:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009154:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800915c:	d02a      	beq.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800915e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009164:	d838      	bhi.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009168:	2b00      	cmp	r3, #0
 800916a:	d004      	beq.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800916c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009172:	d00d      	beq.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009174:	e030      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009176:	4b1d      	ldr	r3, [pc, #116]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800917e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009182:	d102      	bne.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8009184:	4b1c      	ldr	r3, [pc, #112]	; (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009186:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009188:	e02b      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800918a:	2300      	movs	r3, #0
 800918c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800918e:	e028      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009190:	4b16      	ldr	r3, [pc, #88]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800919c:	d107      	bne.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800919e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 fae8 	bl	8009778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80091ac:	e019      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091ae:	2300      	movs	r3, #0
 80091b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091b2:	e016      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091b4:	4b0d      	ldr	r3, [pc, #52]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091c0:	d107      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091c2:	f107 0318 	add.w	r3, r7, #24
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 f82e 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80091d0:	e007      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091d2:	2300      	movs	r3, #0
 80091d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091d6:	e004      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091dc:	e001      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80091de:	2300      	movs	r3, #0
 80091e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80091e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3740      	adds	r7, #64	; 0x40
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	58024400 	.word	0x58024400
 80091f0:	03d09000 	.word	0x03d09000
 80091f4:	003d0900 	.word	0x003d0900
 80091f8:	017d7840 	.word	0x017d7840

080091fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009200:	f7fe fb8e 	bl	8007920 <HAL_RCC_GetHCLKFreq>
 8009204:	4602      	mov	r2, r0
 8009206:	4b06      	ldr	r3, [pc, #24]	; (8009220 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	091b      	lsrs	r3, r3, #4
 800920c:	f003 0307 	and.w	r3, r3, #7
 8009210:	4904      	ldr	r1, [pc, #16]	; (8009224 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009212:	5ccb      	ldrb	r3, [r1, r3]
 8009214:	f003 031f 	and.w	r3, r3, #31
 8009218:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800921c:	4618      	mov	r0, r3
 800921e:	bd80      	pop	{r7, pc}
 8009220:	58024400 	.word	0x58024400
 8009224:	0800fc48 	.word	0x0800fc48

08009228 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009228:	b480      	push	{r7}
 800922a:	b089      	sub	sp, #36	; 0x24
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009230:	4ba1      	ldr	r3, [pc, #644]	; (80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009234:	f003 0303 	and.w	r3, r3, #3
 8009238:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800923a:	4b9f      	ldr	r3, [pc, #636]	; (80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923e:	0b1b      	lsrs	r3, r3, #12
 8009240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009244:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009246:	4b9c      	ldr	r3, [pc, #624]	; (80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924a:	091b      	lsrs	r3, r3, #4
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009252:	4b99      	ldr	r3, [pc, #612]	; (80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009256:	08db      	lsrs	r3, r3, #3
 8009258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	fb02 f303 	mul.w	r3, r2, r3
 8009262:	ee07 3a90 	vmov	s15, r3
 8009266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 8111 	beq.w	8009498 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	2b02      	cmp	r3, #2
 800927a:	f000 8083 	beq.w	8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	2b02      	cmp	r3, #2
 8009282:	f200 80a1 	bhi.w	80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d003      	beq.n	8009294 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d056      	beq.n	8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009292:	e099      	b.n	80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009294:	4b88      	ldr	r3, [pc, #544]	; (80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0320 	and.w	r3, r3, #32
 800929c:	2b00      	cmp	r3, #0
 800929e:	d02d      	beq.n	80092fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092a0:	4b85      	ldr	r3, [pc, #532]	; (80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	08db      	lsrs	r3, r3, #3
 80092a6:	f003 0303 	and.w	r3, r3, #3
 80092aa:	4a84      	ldr	r2, [pc, #528]	; (80094bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80092ac:	fa22 f303 	lsr.w	r3, r2, r3
 80092b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	ee07 3a90 	vmov	s15, r3
 80092b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	ee07 3a90 	vmov	s15, r3
 80092c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ca:	4b7b      	ldr	r3, [pc, #492]	; (80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d2:	ee07 3a90 	vmov	s15, r3
 80092d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092da:	ed97 6a03 	vldr	s12, [r7, #12]
 80092de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80092fa:	e087      	b.n	800940c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	ee07 3a90 	vmov	s15, r3
 8009302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009306:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800930a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800930e:	4b6a      	ldr	r3, [pc, #424]	; (80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009316:	ee07 3a90 	vmov	s15, r3
 800931a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009322:	eddf 5a67 	vldr	s11, [pc, #412]	; 80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800932a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800932e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800933a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800933e:	e065      	b.n	800940c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	ee07 3a90 	vmov	s15, r3
 8009346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800934e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009352:	4b59      	ldr	r3, [pc, #356]	; (80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935a:	ee07 3a90 	vmov	s15, r3
 800935e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009362:	ed97 6a03 	vldr	s12, [r7, #12]
 8009366:	eddf 5a56 	vldr	s11, [pc, #344]	; 80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800936a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800936e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800937a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800937e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009382:	e043      	b.n	800940c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009396:	4b48      	ldr	r3, [pc, #288]	; (80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939e:	ee07 3a90 	vmov	s15, r3
 80093a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093c6:	e021      	b.n	800940c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	ee07 3a90 	vmov	s15, r3
 80093ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093da:	4b37      	ldr	r3, [pc, #220]	; (80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e2:	ee07 3a90 	vmov	s15, r3
 80093e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009406:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800940a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800940c:	4b2a      	ldr	r3, [pc, #168]	; (80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800940e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009410:	0a5b      	lsrs	r3, r3, #9
 8009412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009422:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009426:	edd7 6a07 	vldr	s13, [r7, #28]
 800942a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800942e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009432:	ee17 2a90 	vmov	r2, s15
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800943a:	4b1f      	ldr	r3, [pc, #124]	; (80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800943c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943e:	0c1b      	lsrs	r3, r3, #16
 8009440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009444:	ee07 3a90 	vmov	s15, r3
 8009448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009450:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009454:	edd7 6a07 	vldr	s13, [r7, #28]
 8009458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800945c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009460:	ee17 2a90 	vmov	r2, s15
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009468:	4b13      	ldr	r3, [pc, #76]	; (80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800946a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946c:	0e1b      	lsrs	r3, r3, #24
 800946e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800947e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009482:	edd7 6a07 	vldr	s13, [r7, #28]
 8009486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800948a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800948e:	ee17 2a90 	vmov	r2, s15
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009496:	e008      	b.n	80094aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	609a      	str	r2, [r3, #8]
}
 80094aa:	bf00      	nop
 80094ac:	3724      	adds	r7, #36	; 0x24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	58024400 	.word	0x58024400
 80094bc:	03d09000 	.word	0x03d09000
 80094c0:	46000000 	.word	0x46000000
 80094c4:	4c742400 	.word	0x4c742400
 80094c8:	4a742400 	.word	0x4a742400
 80094cc:	4bbebc20 	.word	0x4bbebc20

080094d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b089      	sub	sp, #36	; 0x24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094d8:	4ba1      	ldr	r3, [pc, #644]	; (8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094dc:	f003 0303 	and.w	r3, r3, #3
 80094e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80094e2:	4b9f      	ldr	r3, [pc, #636]	; (8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e6:	0d1b      	lsrs	r3, r3, #20
 80094e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80094ee:	4b9c      	ldr	r3, [pc, #624]	; (8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f2:	0a1b      	lsrs	r3, r3, #8
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80094fa:	4b99      	ldr	r3, [pc, #612]	; (8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fe:	08db      	lsrs	r3, r3, #3
 8009500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	fb02 f303 	mul.w	r3, r2, r3
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009512:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 8111 	beq.w	8009740 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	2b02      	cmp	r3, #2
 8009522:	f000 8083 	beq.w	800962c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	2b02      	cmp	r3, #2
 800952a:	f200 80a1 	bhi.w	8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d003      	beq.n	800953c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d056      	beq.n	80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800953a:	e099      	b.n	8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800953c:	4b88      	ldr	r3, [pc, #544]	; (8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0320 	and.w	r3, r3, #32
 8009544:	2b00      	cmp	r3, #0
 8009546:	d02d      	beq.n	80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009548:	4b85      	ldr	r3, [pc, #532]	; (8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	08db      	lsrs	r3, r3, #3
 800954e:	f003 0303 	and.w	r3, r3, #3
 8009552:	4a84      	ldr	r2, [pc, #528]	; (8009764 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009554:	fa22 f303 	lsr.w	r3, r2, r3
 8009558:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	ee07 3a90 	vmov	s15, r3
 8009560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009572:	4b7b      	ldr	r3, [pc, #492]	; (8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800957a:	ee07 3a90 	vmov	s15, r3
 800957e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009582:	ed97 6a03 	vldr	s12, [r7, #12]
 8009586:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800958a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800958e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800959a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800959e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80095a2:	e087      	b.n	80096b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	ee07 3a90 	vmov	s15, r3
 80095aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800976c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80095b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b6:	4b6a      	ldr	r3, [pc, #424]	; (8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095be:	ee07 3a90 	vmov	s15, r3
 80095c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095e6:	e065      	b.n	80096b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	ee07 3a90 	vmov	s15, r3
 80095ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095fa:	4b59      	ldr	r3, [pc, #356]	; (8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009602:	ee07 3a90 	vmov	s15, r3
 8009606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800960a:	ed97 6a03 	vldr	s12, [r7, #12]
 800960e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800961a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800961e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009626:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800962a:	e043      	b.n	80096b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009636:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800963a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800963e:	4b48      	ldr	r3, [pc, #288]	; (8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009646:	ee07 3a90 	vmov	s15, r3
 800964a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800964e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009652:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800965a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800965e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800966a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800966e:	e021      	b.n	80096b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	ee07 3a90 	vmov	s15, r3
 8009676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800967e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009682:	4b37      	ldr	r3, [pc, #220]	; (8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800968a:	ee07 3a90 	vmov	s15, r3
 800968e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009692:	ed97 6a03 	vldr	s12, [r7, #12]
 8009696:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800969a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800969e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80096b4:	4b2a      	ldr	r3, [pc, #168]	; (8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b8:	0a5b      	lsrs	r3, r3, #9
 80096ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096be:	ee07 3a90 	vmov	s15, r3
 80096c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80096d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096da:	ee17 2a90 	vmov	r2, s15
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80096e2:	4b1f      	ldr	r3, [pc, #124]	; (8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e6:	0c1b      	lsrs	r3, r3, #16
 80096e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ec:	ee07 3a90 	vmov	s15, r3
 80096f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009708:	ee17 2a90 	vmov	r2, s15
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009710:	4b13      	ldr	r3, [pc, #76]	; (8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009714:	0e1b      	lsrs	r3, r3, #24
 8009716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800971a:	ee07 3a90 	vmov	s15, r3
 800971e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800972a:	edd7 6a07 	vldr	s13, [r7, #28]
 800972e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009736:	ee17 2a90 	vmov	r2, s15
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800973e:	e008      	b.n	8009752 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	609a      	str	r2, [r3, #8]
}
 8009752:	bf00      	nop
 8009754:	3724      	adds	r7, #36	; 0x24
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	58024400 	.word	0x58024400
 8009764:	03d09000 	.word	0x03d09000
 8009768:	46000000 	.word	0x46000000
 800976c:	4c742400 	.word	0x4c742400
 8009770:	4a742400 	.word	0x4a742400
 8009774:	4bbebc20 	.word	0x4bbebc20

08009778 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009778:	b480      	push	{r7}
 800977a:	b089      	sub	sp, #36	; 0x24
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009780:	4ba0      	ldr	r3, [pc, #640]	; (8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009784:	f003 0303 	and.w	r3, r3, #3
 8009788:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800978a:	4b9e      	ldr	r3, [pc, #632]	; (8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800978c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978e:	091b      	lsrs	r3, r3, #4
 8009790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009794:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009796:	4b9b      	ldr	r3, [pc, #620]	; (8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80097a0:	4b98      	ldr	r3, [pc, #608]	; (8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a4:	08db      	lsrs	r3, r3, #3
 80097a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	fb02 f303 	mul.w	r3, r2, r3
 80097b0:	ee07 3a90 	vmov	s15, r3
 80097b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 8111 	beq.w	80099e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	f000 8083 	beq.w	80098d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	f200 80a1 	bhi.w	8009916 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d056      	beq.n	800988e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80097e0:	e099      	b.n	8009916 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097e2:	4b88      	ldr	r3, [pc, #544]	; (8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0320 	and.w	r3, r3, #32
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d02d      	beq.n	800984a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097ee:	4b85      	ldr	r3, [pc, #532]	; (8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	08db      	lsrs	r3, r3, #3
 80097f4:	f003 0303 	and.w	r3, r3, #3
 80097f8:	4a83      	ldr	r2, [pc, #524]	; (8009a08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80097fa:	fa22 f303 	lsr.w	r3, r2, r3
 80097fe:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	ee07 3a90 	vmov	s15, r3
 8009806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	ee07 3a90 	vmov	s15, r3
 8009810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009818:	4b7a      	ldr	r3, [pc, #488]	; (8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800981a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009820:	ee07 3a90 	vmov	s15, r3
 8009824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009828:	ed97 6a03 	vldr	s12, [r7, #12]
 800982c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009838:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800983c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009844:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009848:	e087      	b.n	800995a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	ee07 3a90 	vmov	s15, r3
 8009850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009854:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800985c:	4b69      	ldr	r3, [pc, #420]	; (8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800985e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009864:	ee07 3a90 	vmov	s15, r3
 8009868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800986c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009870:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800987c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009888:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800988c:	e065      	b.n	800995a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	ee07 3a90 	vmov	s15, r3
 8009894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009898:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800989c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a0:	4b58      	ldr	r3, [pc, #352]	; (8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a8:	ee07 3a90 	vmov	s15, r3
 80098ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80098b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098d0:	e043      	b.n	800995a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	ee07 3a90 	vmov	s15, r3
 80098d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80098e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098e4:	4b47      	ldr	r3, [pc, #284]	; (8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ec:	ee07 3a90 	vmov	s15, r3
 80098f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80098f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800990c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009910:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009914:	e021      	b.n	800995a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	ee07 3a90 	vmov	s15, r3
 800991c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009920:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009928:	4b36      	ldr	r3, [pc, #216]	; (8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800992a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009930:	ee07 3a90 	vmov	s15, r3
 8009934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009938:	ed97 6a03 	vldr	s12, [r7, #12]
 800993c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009940:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009944:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009948:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800994c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009954:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009958:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800995a:	4b2a      	ldr	r3, [pc, #168]	; (8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800995c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800995e:	0a5b      	lsrs	r3, r3, #9
 8009960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009964:	ee07 3a90 	vmov	s15, r3
 8009968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009974:	edd7 6a07 	vldr	s13, [r7, #28]
 8009978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800997c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009980:	ee17 2a90 	vmov	r2, s15
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009988:	4b1e      	ldr	r3, [pc, #120]	; (8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800998a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998c:	0c1b      	lsrs	r3, r3, #16
 800998e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800999e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ae:	ee17 2a90 	vmov	r2, s15
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80099b6:	4b13      	ldr	r3, [pc, #76]	; (8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ba:	0e1b      	lsrs	r3, r3, #24
 80099bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c0:	ee07 3a90 	vmov	s15, r3
 80099c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80099d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099dc:	ee17 2a90 	vmov	r2, s15
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80099e4:	e008      	b.n	80099f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	609a      	str	r2, [r3, #8]
}
 80099f8:	bf00      	nop
 80099fa:	3724      	adds	r7, #36	; 0x24
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	58024400 	.word	0x58024400
 8009a08:	03d09000 	.word	0x03d09000
 8009a0c:	46000000 	.word	0x46000000
 8009a10:	4c742400 	.word	0x4c742400
 8009a14:	4a742400 	.word	0x4a742400
 8009a18:	4bbebc20 	.word	0x4bbebc20

08009a1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a2a:	4b53      	ldr	r3, [pc, #332]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	d101      	bne.n	8009a3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e099      	b.n	8009b6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a3a:	4b4f      	ldr	r3, [pc, #316]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a4e      	ldr	r2, [pc, #312]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009a40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a46:	f7f8 fd71 	bl	800252c <HAL_GetTick>
 8009a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a4c:	e008      	b.n	8009a60 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009a4e:	f7f8 fd6d 	bl	800252c <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d901      	bls.n	8009a60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e086      	b.n	8009b6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a60:	4b45      	ldr	r3, [pc, #276]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1f0      	bne.n	8009a4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a6c:	4b42      	ldr	r3, [pc, #264]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	031b      	lsls	r3, r3, #12
 8009a7a:	493f      	ldr	r1, [pc, #252]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	628b      	str	r3, [r1, #40]	; 0x28
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	3b01      	subs	r3, #1
 8009a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	025b      	lsls	r3, r3, #9
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	431a      	orrs	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	041b      	lsls	r3, r3, #16
 8009a9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	061b      	lsls	r3, r3, #24
 8009aac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ab0:	4931      	ldr	r1, [pc, #196]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009ab6:	4b30      	ldr	r3, [pc, #192]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	492d      	ldr	r1, [pc, #180]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ac8:	4b2b      	ldr	r3, [pc, #172]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	f023 0220 	bic.w	r2, r3, #32
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	4928      	ldr	r1, [pc, #160]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009ada:	4b27      	ldr	r3, [pc, #156]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ade:	4a26      	ldr	r2, [pc, #152]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009ae0:	f023 0310 	bic.w	r3, r3, #16
 8009ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009ae6:	4b24      	ldr	r3, [pc, #144]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009aea:	4b24      	ldr	r3, [pc, #144]	; (8009b7c <RCCEx_PLL2_Config+0x160>)
 8009aec:	4013      	ands	r3, r2
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	69d2      	ldr	r2, [r2, #28]
 8009af2:	00d2      	lsls	r2, r2, #3
 8009af4:	4920      	ldr	r1, [pc, #128]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009af6:	4313      	orrs	r3, r2
 8009af8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009afa:	4b1f      	ldr	r3, [pc, #124]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afe:	4a1e      	ldr	r2, [pc, #120]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009b00:	f043 0310 	orr.w	r3, r3, #16
 8009b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d106      	bne.n	8009b1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b0c:	4b1a      	ldr	r3, [pc, #104]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b10:	4a19      	ldr	r2, [pc, #100]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009b12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b18:	e00f      	b.n	8009b3a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d106      	bne.n	8009b2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b20:	4b15      	ldr	r3, [pc, #84]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b24:	4a14      	ldr	r2, [pc, #80]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b2c:	e005      	b.n	8009b3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b2e:	4b12      	ldr	r3, [pc, #72]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b32:	4a11      	ldr	r2, [pc, #68]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b3a:	4b0f      	ldr	r3, [pc, #60]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a0e      	ldr	r2, [pc, #56]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b46:	f7f8 fcf1 	bl	800252c <HAL_GetTick>
 8009b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b4c:	e008      	b.n	8009b60 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009b4e:	f7f8 fced 	bl	800252c <HAL_GetTick>
 8009b52:	4602      	mov	r2, r0
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d901      	bls.n	8009b60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e006      	b.n	8009b6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b60:	4b05      	ldr	r3, [pc, #20]	; (8009b78 <RCCEx_PLL2_Config+0x15c>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d0f0      	beq.n	8009b4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	58024400 	.word	0x58024400
 8009b7c:	ffff0007 	.word	0xffff0007

08009b80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b8e:	4b53      	ldr	r3, [pc, #332]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	f003 0303 	and.w	r3, r3, #3
 8009b96:	2b03      	cmp	r3, #3
 8009b98:	d101      	bne.n	8009b9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e099      	b.n	8009cd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009b9e:	4b4f      	ldr	r3, [pc, #316]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a4e      	ldr	r2, [pc, #312]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009baa:	f7f8 fcbf 	bl	800252c <HAL_GetTick>
 8009bae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bb0:	e008      	b.n	8009bc4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009bb2:	f7f8 fcbb 	bl	800252c <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d901      	bls.n	8009bc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e086      	b.n	8009cd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bc4:	4b45      	ldr	r3, [pc, #276]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1f0      	bne.n	8009bb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009bd0:	4b42      	ldr	r3, [pc, #264]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	051b      	lsls	r3, r3, #20
 8009bde:	493f      	ldr	r1, [pc, #252]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009be0:	4313      	orrs	r3, r2
 8009be2:	628b      	str	r3, [r1, #40]	; 0x28
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	3b01      	subs	r3, #1
 8009bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	025b      	lsls	r3, r3, #9
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	431a      	orrs	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	041b      	lsls	r3, r3, #16
 8009c02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c06:	431a      	orrs	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	061b      	lsls	r3, r3, #24
 8009c10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c14:	4931      	ldr	r1, [pc, #196]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c16:	4313      	orrs	r3, r2
 8009c18:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c1a:	4b30      	ldr	r3, [pc, #192]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	492d      	ldr	r1, [pc, #180]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c2c:	4b2b      	ldr	r3, [pc, #172]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	699b      	ldr	r3, [r3, #24]
 8009c38:	4928      	ldr	r1, [pc, #160]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c3e:	4b27      	ldr	r3, [pc, #156]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c42:	4a26      	ldr	r2, [pc, #152]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c4a:	4b24      	ldr	r3, [pc, #144]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c4e:	4b24      	ldr	r3, [pc, #144]	; (8009ce0 <RCCEx_PLL3_Config+0x160>)
 8009c50:	4013      	ands	r3, r2
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	69d2      	ldr	r2, [r2, #28]
 8009c56:	00d2      	lsls	r2, r2, #3
 8009c58:	4920      	ldr	r1, [pc, #128]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c5e:	4b1f      	ldr	r3, [pc, #124]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c62:	4a1e      	ldr	r2, [pc, #120]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d106      	bne.n	8009c7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c70:	4b1a      	ldr	r3, [pc, #104]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c74:	4a19      	ldr	r2, [pc, #100]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c7c:	e00f      	b.n	8009c9e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d106      	bne.n	8009c92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c84:	4b15      	ldr	r3, [pc, #84]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c88:	4a14      	ldr	r2, [pc, #80]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c90:	e005      	b.n	8009c9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009c92:	4b12      	ldr	r3, [pc, #72]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c96:	4a11      	ldr	r2, [pc, #68]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009c98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009c9e:	4b0f      	ldr	r3, [pc, #60]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a0e      	ldr	r2, [pc, #56]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009caa:	f7f8 fc3f 	bl	800252c <HAL_GetTick>
 8009cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cb0:	e008      	b.n	8009cc4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009cb2:	f7f8 fc3b 	bl	800252c <HAL_GetTick>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d901      	bls.n	8009cc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e006      	b.n	8009cd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cc4:	4b05      	ldr	r3, [pc, #20]	; (8009cdc <RCCEx_PLL3_Config+0x15c>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d0f0      	beq.n	8009cb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	58024400 	.word	0x58024400
 8009ce0:	ffff0007 	.word	0xffff0007

08009ce4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e04d      	b.n	8009d92 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	7a5b      	ldrb	r3, [r3, #9]
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d105      	bne.n	8009d0c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7f7 fbf8 	bl	80014fc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2202      	movs	r2, #2
 8009d10:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f023 0120 	bic.w	r1, r3, #32
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	430a      	orrs	r2, r1
 8009d26:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f042 0204 	orr.w	r2, r2, #4
 8009d36:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d42:	2b40      	cmp	r3, #64	; 0x40
 8009d44:	d104      	bne.n	8009d50 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2204      	movs	r2, #4
 8009d4a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e020      	b.n	8009d92 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8009d50:	f7f8 fbec 	bl	800252c <HAL_GetTick>
 8009d54:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009d56:	e00e      	b.n	8009d76 <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009d58:	f7f8 fbe8 	bl	800252c <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d907      	bls.n	8009d76 <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2204      	movs	r2, #4
 8009d6a:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e00d      	b.n	8009d92 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f003 0304 	and.w	r3, r3, #4
 8009d80:	2b04      	cmp	r3, #4
 8009d82:	d0e9      	beq.n	8009d58 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b086      	sub	sp, #24
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	60f8      	str	r0, [r7, #12]
 8009da2:	60b9      	str	r1, [r7, #8]
 8009da4:	607a      	str	r2, [r7, #4]
 8009da6:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d904      	bls.n	8009db8 <HAL_SAI_InitProtocol+0x1e>
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	3b03      	subs	r3, #3
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d812      	bhi.n	8009ddc <HAL_SAI_InitProtocol+0x42>
 8009db6:	e008      	b.n	8009dca <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	68b9      	ldr	r1, [r7, #8]
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f000 fd0e 	bl	800a7e0 <SAI_InitI2S>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc8:	e00b      	b.n	8009de2 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	68b9      	ldr	r1, [r7, #8]
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 fdb7 	bl	800a944 <SAI_InitPCM>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8009dda:	e002      	b.n	8009de2 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	75fb      	strb	r3, [r7, #23]
      break;
 8009de0:	bf00      	nop
  }

  if (status == HAL_OK)
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d104      	bne.n	8009df2 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f000 f807 	bl	8009dfc <HAL_SAI_Init>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3718      	adds	r7, #24
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b08a      	sub	sp, #40	; 0x28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d101      	bne.n	8009e0e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e283      	b.n	800a316 <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009e0e:	f7f8 fbbd 	bl	800258c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d113      	bne.n	8009e44 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a94      	ldr	r2, [pc, #592]	; (800a074 <HAL_SAI_Init+0x278>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d004      	beq.n	8009e30 <HAL_SAI_Init+0x34>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a93      	ldr	r2, [pc, #588]	; (800a078 <HAL_SAI_Init+0x27c>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d107      	bne.n	8009e40 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d103      	bne.n	8009e40 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e268      	b.n	800a316 <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a8a      	ldr	r2, [pc, #552]	; (800a074 <HAL_SAI_Init+0x278>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d004      	beq.n	8009e58 <HAL_SAI_Init+0x5c>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a8a      	ldr	r2, [pc, #552]	; (800a07c <HAL_SAI_Init+0x280>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d102      	bne.n	8009e5e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8009e58:	4b89      	ldr	r3, [pc, #548]	; (800a080 <HAL_SAI_Init+0x284>)
 8009e5a:	61bb      	str	r3, [r7, #24]
 8009e5c:	e028      	b.n	8009eb0 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a88      	ldr	r2, [pc, #544]	; (800a084 <HAL_SAI_Init+0x288>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d004      	beq.n	8009e72 <HAL_SAI_Init+0x76>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a86      	ldr	r2, [pc, #536]	; (800a088 <HAL_SAI_Init+0x28c>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d102      	bne.n	8009e78 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8009e72:	4b86      	ldr	r3, [pc, #536]	; (800a08c <HAL_SAI_Init+0x290>)
 8009e74:	61bb      	str	r3, [r7, #24]
 8009e76:	e01b      	b.n	8009eb0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a84      	ldr	r2, [pc, #528]	; (800a090 <HAL_SAI_Init+0x294>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d004      	beq.n	8009e8c <HAL_SAI_Init+0x90>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a83      	ldr	r2, [pc, #524]	; (800a094 <HAL_SAI_Init+0x298>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d102      	bne.n	8009e92 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8009e8c:	4b82      	ldr	r3, [pc, #520]	; (800a098 <HAL_SAI_Init+0x29c>)
 8009e8e:	61bb      	str	r3, [r7, #24]
 8009e90:	e00e      	b.n	8009eb0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a78      	ldr	r2, [pc, #480]	; (800a078 <HAL_SAI_Init+0x27c>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d004      	beq.n	8009ea6 <HAL_SAI_Init+0xaa>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a7e      	ldr	r2, [pc, #504]	; (800a09c <HAL_SAI_Init+0x2a0>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d102      	bne.n	8009eac <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8009ea6:	4b7e      	ldr	r3, [pc, #504]	; (800a0a0 <HAL_SAI_Init+0x2a4>)
 8009ea8:	61bb      	str	r3, [r7, #24]
 8009eaa:	e001      	b.n	8009eb0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e232      	b.n	800a316 <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d106      	bne.n	8009eca <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7f7 fb87 	bl	80015d8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fdbc 	bl	800aa48 <SAI_Disable>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e21d      	b.n	800a316 <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2202      	movs	r2, #2
 8009ede:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d00c      	beq.n	8009f04 <HAL_SAI_Init+0x108>
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d80d      	bhi.n	8009f0a <HAL_SAI_Init+0x10e>
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <HAL_SAI_Init+0xfc>
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d003      	beq.n	8009efe <HAL_SAI_Init+0x102>
 8009ef6:	e008      	b.n	8009f0a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009efc:	e008      	b.n	8009f10 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009efe:	2310      	movs	r3, #16
 8009f00:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009f02:	e005      	b.n	8009f10 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009f04:	2320      	movs	r3, #32
 8009f06:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009f08:	e002      	b.n	8009f10 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009f0e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	2b05      	cmp	r3, #5
 8009f16:	d832      	bhi.n	8009f7e <HAL_SAI_Init+0x182>
 8009f18:	a201      	add	r2, pc, #4	; (adr r2, 8009f20 <HAL_SAI_Init+0x124>)
 8009f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1e:	bf00      	nop
 8009f20:	08009f39 	.word	0x08009f39
 8009f24:	08009f3f 	.word	0x08009f3f
 8009f28:	08009f47 	.word	0x08009f47
 8009f2c:	08009f4f 	.word	0x08009f4f
 8009f30:	08009f5f 	.word	0x08009f5f
 8009f34:	08009f6f 	.word	0x08009f6f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	61fb      	str	r3, [r7, #28]
      break;
 8009f3c:	e022      	b.n	8009f84 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f42:	61fb      	str	r3, [r7, #28]
      break;
 8009f44:	e01e      	b.n	8009f84 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009f46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f4a:	61fb      	str	r3, [r7, #28]
      break;
 8009f4c:	e01a      	b.n	8009f84 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f52:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f56:	f043 0301 	orr.w	r3, r3, #1
 8009f5a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009f5c:	e012      	b.n	8009f84 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009f5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f62:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	f043 0302 	orr.w	r3, r3, #2
 8009f6a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009f6c:	e00a      	b.n	8009f84 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009f6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f72:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	f043 0303 	orr.w	r3, r3, #3
 8009f7a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009f7c:	e002      	b.n	8009f84 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	61fb      	str	r3, [r7, #28]
      break;
 8009f82:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f88:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f000 80ba 	beq.w	800a108 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8009f94:	2300      	movs	r3, #0
 8009f96:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a35      	ldr	r2, [pc, #212]	; (800a074 <HAL_SAI_Init+0x278>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d004      	beq.n	8009fac <HAL_SAI_Init+0x1b0>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a35      	ldr	r2, [pc, #212]	; (800a07c <HAL_SAI_Init+0x280>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d104      	bne.n	8009fb6 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009fac:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009fb0:	f7fe fc52 	bl	8008858 <HAL_RCCEx_GetPeriphCLKFreq>
 8009fb4:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a32      	ldr	r2, [pc, #200]	; (800a084 <HAL_SAI_Init+0x288>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d004      	beq.n	8009fca <HAL_SAI_Init+0x1ce>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a30      	ldr	r2, [pc, #192]	; (800a088 <HAL_SAI_Init+0x28c>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d104      	bne.n	8009fd4 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009fca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009fce:	f7fe fc43 	bl	8008858 <HAL_RCCEx_GetPeriphCLKFreq>
 8009fd2:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a2d      	ldr	r2, [pc, #180]	; (800a090 <HAL_SAI_Init+0x294>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d004      	beq.n	8009fe8 <HAL_SAI_Init+0x1ec>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a2c      	ldr	r2, [pc, #176]	; (800a094 <HAL_SAI_Init+0x298>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d104      	bne.n	8009ff2 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8009fe8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009fec:	f7fe fc34 	bl	8008858 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ff0:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a20      	ldr	r2, [pc, #128]	; (800a078 <HAL_SAI_Init+0x27c>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d104      	bne.n	800a006 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009ffc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a000:	f7fe fc2a 	bl	8008858 <HAL_RCCEx_GetPeriphCLKFreq>
 800a004:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a24      	ldr	r2, [pc, #144]	; (800a09c <HAL_SAI_Init+0x2a0>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d104      	bne.n	800a01a <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a010:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a014:	f7fe fc20 	bl	8008858 <HAL_RCCEx_GetPeriphCLKFreq>
 800a018:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a022:	d120      	bne.n	800a066 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a028:	2b04      	cmp	r3, #4
 800a02a:	d102      	bne.n	800a032 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800a02c:	2340      	movs	r3, #64	; 0x40
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	e00a      	b.n	800a048 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a036:	2b08      	cmp	r3, #8
 800a038:	d103      	bne.n	800a042 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800a03a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a03e:	60fb      	str	r3, [r7, #12]
 800a040:	e002      	b.n	800a048 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a046:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	4613      	mov	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4413      	add	r3, r2
 800a050:	005b      	lsls	r3, r3, #1
 800a052:	4619      	mov	r1, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	fb02 f303 	mul.w	r3, r2, r3
 800a05e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a062:	613b      	str	r3, [r7, #16]
 800a064:	e02f      	b.n	800a0c6 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a06e:	d119      	bne.n	800a0a4 <HAL_SAI_Init+0x2a8>
 800a070:	2302      	movs	r3, #2
 800a072:	e018      	b.n	800a0a6 <HAL_SAI_Init+0x2aa>
 800a074:	40015804 	.word	0x40015804
 800a078:	58005404 	.word	0x58005404
 800a07c:	40015824 	.word	0x40015824
 800a080:	40015800 	.word	0x40015800
 800a084:	40015c04 	.word	0x40015c04
 800a088:	40015c24 	.word	0x40015c24
 800a08c:	40015c00 	.word	0x40015c00
 800a090:	40016004 	.word	0x40016004
 800a094:	40016024 	.word	0x40016024
 800a098:	40016000 	.word	0x40016000
 800a09c:	58005424 	.word	0x58005424
 800a0a0:	58005400 	.word	0x58005400
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a1b      	ldr	r3, [r3, #32]
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	fb02 f303 	mul.w	r3, r2, r3
 800a0be:	021b      	lsls	r3, r3, #8
 800a0c0:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0c4:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	4a95      	ldr	r2, [pc, #596]	; (800a320 <HAL_SAI_Init+0x524>)
 800a0ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ce:	08da      	lsrs	r2, r3, #3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a0d4:	6939      	ldr	r1, [r7, #16]
 800a0d6:	4b92      	ldr	r3, [pc, #584]	; (800a320 <HAL_SAI_Init+0x524>)
 800a0d8:	fba3 2301 	umull	r2, r3, r3, r1
 800a0dc:	08da      	lsrs	r2, r3, #3
 800a0de:	4613      	mov	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	005b      	lsls	r3, r3, #1
 800a0e6:	1aca      	subs	r2, r1, r3
 800a0e8:	2a08      	cmp	r2, #8
 800a0ea:	d904      	bls.n	800a0f6 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0fa:	2b04      	cmp	r3, #4
 800a0fc:	d104      	bne.n	800a108 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a102:	085a      	lsrs	r2, r3, #1
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d003      	beq.n	800a118 <HAL_SAI_Init+0x31c>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	2b02      	cmp	r3, #2
 800a116:	d109      	bne.n	800a12c <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d101      	bne.n	800a124 <HAL_SAI_Init+0x328>
 800a120:	2300      	movs	r3, #0
 800a122:	e001      	b.n	800a128 <HAL_SAI_Init+0x32c>
 800a124:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a128:	623b      	str	r3, [r7, #32]
 800a12a:	e008      	b.n	800a13e <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a130:	2b01      	cmp	r3, #1
 800a132:	d102      	bne.n	800a13a <HAL_SAI_Init+0x33e>
 800a134:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a138:	e000      	b.n	800a13c <HAL_SAI_Init+0x340>
 800a13a:	2300      	movs	r3, #0
 800a13c:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a13e:	f7f8 fa25 	bl	800258c <HAL_GetREVID>
 800a142:	4603      	mov	r3, r0
 800a144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a148:	d331      	bcc.n	800a1ae <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6819      	ldr	r1, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	4b73      	ldr	r3, [pc, #460]	; (800a324 <HAL_SAI_Init+0x528>)
 800a156:	400b      	ands	r3, r1
 800a158:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6819      	ldr	r1, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a168:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a16e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a174:	431a      	orrs	r2, r3
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a182:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a18e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a194:	051b      	lsls	r3, r3, #20
 800a196:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a19c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	430a      	orrs	r2, r1
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	e02d      	b.n	800a20a <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	6819      	ldr	r1, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	4b5b      	ldr	r3, [pc, #364]	; (800a328 <HAL_SAI_Init+0x52c>)
 800a1ba:	400b      	ands	r3, r1
 800a1bc:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	6819      	ldr	r1, [r3, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685a      	ldr	r2, [r3, #4]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1cc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a1d2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1d8:	431a      	orrs	r2, r3
 800a1da:	6a3b      	ldr	r3, [r7, #32]
 800a1dc:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a1e6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	695b      	ldr	r3, [r3, #20]
 800a1ec:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a1f2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	051b      	lsls	r3, r3, #20
 800a1fa:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a200:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	430a      	orrs	r2, r1
 800a208:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	6859      	ldr	r1, [r3, #4]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	4b45      	ldr	r3, [pc, #276]	; (800a32c <HAL_SAI_Init+0x530>)
 800a216:	400b      	ands	r3, r1
 800a218:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	6859      	ldr	r1, [r3, #4]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	69da      	ldr	r2, [r3, #28]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a228:	431a      	orrs	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a22e:	431a      	orrs	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	430a      	orrs	r2, r1
 800a236:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	6899      	ldr	r1, [r3, #8]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	4b3b      	ldr	r3, [pc, #236]	; (800a330 <HAL_SAI_Init+0x534>)
 800a244:	400b      	ands	r3, r1
 800a246:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	6899      	ldr	r1, [r3, #8]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a252:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a258:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a25e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a264:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a26a:	3b01      	subs	r3, #1
 800a26c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a26e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	430a      	orrs	r2, r1
 800a276:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68d9      	ldr	r1, [r3, #12]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a286:	400b      	ands	r3, r1
 800a288:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68d9      	ldr	r1, [r3, #12]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a298:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a29e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a2a0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	021b      	lsls	r3, r3, #8
 800a2aa:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	430a      	orrs	r2, r1
 800a2b2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a1e      	ldr	r2, [pc, #120]	; (800a334 <HAL_SAI_Init+0x538>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d004      	beq.n	800a2c8 <HAL_SAI_Init+0x4cc>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a1d      	ldr	r2, [pc, #116]	; (800a338 <HAL_SAI_Init+0x53c>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d119      	bne.n	800a2fc <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2cc:	f023 0201 	bic.w	r2, r3, #1
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d10e      	bne.n	800a2fc <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a2ea:	431a      	orrs	r2, r3
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f4:	f043 0201 	orr.w	r2, r3, #1
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3728      	adds	r7, #40	; 0x28
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	cccccccd 	.word	0xcccccccd
 800a324:	f005c010 	.word	0xf005c010
 800a328:	f805c010 	.word	0xf805c010
 800a32c:	ffff1ff0 	.word	0xffff1ff0
 800a330:	fff88000 	.word	0xfff88000
 800a334:	40015804 	.word	0x40015804
 800a338:	58005404 	.word	0x58005404

0800a33c <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a344:	2300      	movs	r3, #0
 800a346:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d101      	bne.n	800a356 <HAL_SAI_Abort+0x1a>
 800a352:	2302      	movs	r3, #2
 800a354:	e07d      	b.n	800a452 <HAL_SAI_Abort+0x116>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a36c:	d14f      	bne.n	800a40e <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a37c:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b12      	cmp	r3, #18
 800a388:	d11d      	bne.n	800a3c6 <HAL_SAI_Abort+0x8a>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a390:	2b00      	cmp	r3, #0
 800a392:	d018      	beq.n	800a3c6 <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7f9 fe36 	bl	800400c <HAL_DMA_Abort>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00f      	beq.n	800a3c6 <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ae:	2b80      	cmp	r3, #128	; 0x80
 800a3b0:	d009      	beq.n	800a3c6 <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	2b22      	cmp	r3, #34	; 0x22
 800a3d0:	d11d      	bne.n	800a40e <HAL_SAI_Abort+0xd2>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d018      	beq.n	800a40e <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7f9 fe12 	bl	800400c <HAL_DMA_Abort>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00f      	beq.n	800a40e <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f6:	2b80      	cmp	r3, #128	; 0x80
 800a3f8:	d009      	beq.n	800a40e <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a404:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2200      	movs	r2, #0
 800a414:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a41e:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fb11 	bl	800aa48 <SAI_Disable>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	685a      	ldr	r2, [r3, #4]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f042 0208 	orr.w	r2, r2, #8
 800a43e:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 800a450:	7bfb      	ldrb	r3, [r7, #15]
}
 800a452:	4618      	mov	r0, r3
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
	...

0800a45c <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 81a7 	beq.w	800a7c0 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	695b      	ldr	r3, [r3, #20]
 800a478:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f003 0308 	and.w	r3, r3, #8
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00a      	beq.n	800a4aa <HAL_SAI_IRQHandler+0x4e>
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	f003 0308 	and.w	r3, r3, #8
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d005      	beq.n	800a4aa <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	4798      	blx	r3
 800a4a8:	e18a      	b.n	800a7c0 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d01e      	beq.n	800a4f2 <HAL_SAI_IRQHandler+0x96>
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d019      	beq.n	800a4f2 <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b22      	cmp	r3, #34	; 0x22
 800a4d0:	d101      	bne.n	800a4d6 <HAL_SAI_IRQHandler+0x7a>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e000      	b.n	800a4d8 <HAL_SAI_IRQHandler+0x7c>
 800a4d6:	2302      	movs	r3, #2
 800a4d8:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f96e 	bl	800a7cc <HAL_SAI_ErrorCallback>
 800a4f0:	e166      	b.n	800a7c0 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f003 0302 	and.w	r3, r3, #2
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d013      	beq.n	800a524 <HAL_SAI_IRQHandler+0xc8>
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	f003 0302 	and.w	r3, r3, #2
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00e      	beq.n	800a524 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2202      	movs	r2, #2
 800a50c:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a514:	2b00      	cmp	r3, #0
 800a516:	f000 8153 	beq.w	800a7c0 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a520:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800a522:	e14d      	b.n	800a7c0 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	f003 0320 	and.w	r3, r3, #32
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d05b      	beq.n	800a5e6 <HAL_SAI_IRQHandler+0x18a>
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	f003 0320 	and.w	r3, r3, #32
 800a534:	2b00      	cmp	r3, #0
 800a536:	d056      	beq.n	800a5e6 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2220      	movs	r2, #32
 800a53e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a546:	f043 0204 	orr.w	r2, r3, #4
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a556:	2b00      	cmp	r3, #0
 800a558:	d03e      	beq.n	800a5d8 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a560:	2b00      	cmp	r3, #0
 800a562:	d018      	beq.n	800a596 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a56a:	4a97      	ldr	r2, [pc, #604]	; (800a7c8 <HAL_SAI_IRQHandler+0x36c>)
 800a56c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a574:	4618      	mov	r0, r3
 800a576:	f7fa f867 	bl	8004648 <HAL_DMA_Abort_IT>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00a      	beq.n	800a596 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a586:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f91b 	bl	800a7cc <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f000 810a 	beq.w	800a7b6 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5a8:	4a87      	ldr	r2, [pc, #540]	; (800a7c8 <HAL_SAI_IRQHandler+0x36c>)
 800a5aa:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fa f848 	bl	8004648 <HAL_DMA_Abort_IT>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f000 80fb 	beq.w	800a7b6 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 f8fb 	bl	800a7cc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a5d6:	e0ee      	b.n	800a7b6 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff feaf 	bl	800a33c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f8f4 	bl	800a7cc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a5e4:	e0e7      	b.n	800a7b6 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d05b      	beq.n	800a6a8 <HAL_SAI_IRQHandler+0x24c>
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d056      	beq.n	800a6a8 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2240      	movs	r2, #64	; 0x40
 800a600:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a608:	f043 0208 	orr.w	r2, r3, #8
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d03e      	beq.n	800a69a <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a622:	2b00      	cmp	r3, #0
 800a624:	d018      	beq.n	800a658 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a62c:	4a66      	ldr	r2, [pc, #408]	; (800a7c8 <HAL_SAI_IRQHandler+0x36c>)
 800a62e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a636:	4618      	mov	r0, r3
 800a638:	f7fa f806 	bl	8004648 <HAL_DMA_Abort_IT>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00a      	beq.n	800a658 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a648:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f8ba 	bl	800a7cc <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 80ab 	beq.w	800a7ba <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a66a:	4a57      	ldr	r2, [pc, #348]	; (800a7c8 <HAL_SAI_IRQHandler+0x36c>)
 800a66c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a674:	4618      	mov	r0, r3
 800a676:	f7f9 ffe7 	bl	8004648 <HAL_DMA_Abort_IT>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 809c 	beq.w	800a7ba <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a688:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f89a 	bl	800a7cc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a698:	e08f      	b.n	800a7ba <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f7ff fe4e 	bl	800a33c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f893 	bl	800a7cc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a6a6:	e088      	b.n	800a7ba <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	f003 0304 	and.w	r3, r3, #4
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d067      	beq.n	800a782 <HAL_SAI_IRQHandler+0x326>
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d062      	beq.n	800a782 <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2204      	movs	r2, #4
 800a6c2:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6ca:	f043 0220 	orr.w	r2, r3, #32
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d03c      	beq.n	800a758 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d018      	beq.n	800a71a <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6ee:	4a36      	ldr	r2, [pc, #216]	; (800a7c8 <HAL_SAI_IRQHandler+0x36c>)
 800a6f0:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7f9 ffa5 	bl	8004648 <HAL_DMA_Abort_IT>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00a      	beq.n	800a71a <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a70a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f859 	bl	800a7cc <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a720:	2b00      	cmp	r3, #0
 800a722:	d04c      	beq.n	800a7be <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a72a:	4a27      	ldr	r2, [pc, #156]	; (800a7c8 <HAL_SAI_IRQHandler+0x36c>)
 800a72c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a734:	4618      	mov	r0, r3
 800a736:	f7f9 ff87 	bl	8004648 <HAL_DMA_Abort_IT>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d03e      	beq.n	800a7be <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a746:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 f83b 	bl	800a7cc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a756:	e032      	b.n	800a7be <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2200      	movs	r2, #0
 800a75e:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a768:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2201      	movs	r2, #1
 800a76e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f826 	bl	800a7cc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a780:	e01d      	b.n	800a7be <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	f003 0310 	and.w	r3, r3, #16
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d019      	beq.n	800a7c0 <HAL_SAI_IRQHandler+0x364>
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	f003 0310 	and.w	r3, r3, #16
 800a792:	2b00      	cmp	r3, #0
 800a794:	d014      	beq.n	800a7c0 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2210      	movs	r2, #16
 800a79c:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7a4:	f043 0210 	orr.w	r2, r3, #16
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f80c 	bl	800a7cc <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800a7b4:	e004      	b.n	800a7c0 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a7b6:	bf00      	nop
 800a7b8:	e002      	b.n	800a7c0 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a7ba:	bf00      	nop
 800a7bc:	e000      	b.n	800a7c0 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a7be:	bf00      	nop
}
 800a7c0:	bf00      	nop
 800a7c2:	3718      	adds	r7, #24
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	0800aabd 	.word	0x0800aabd

0800a7cc <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
 800a7ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d003      	beq.n	800a80e <SAI_InitI2S+0x2e>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d103      	bne.n	800a816 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	651a      	str	r2, [r3, #80]	; 0x50
 800a814:	e002      	b.n	800a81c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2201      	movs	r2, #1
 800a81a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a822:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a82a:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	683a      	ldr	r2, [r7, #0]
 800a836:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	f003 0301 	and.w	r3, r3, #1
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d001      	beq.n	800a846 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	e077      	b.n	800a936 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d107      	bne.n	800a85c <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a858:	665a      	str	r2, [r3, #100]	; 0x64
 800a85a:	e006      	b.n	800a86a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a862:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	665a      	str	r2, [r3, #100]	; 0x64
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	d84f      	bhi.n	800a910 <SAI_InitI2S+0x130>
 800a870:	a201      	add	r2, pc, #4	; (adr r2, 800a878 <SAI_InitI2S+0x98>)
 800a872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a876:	bf00      	nop
 800a878:	0800a889 	.word	0x0800a889
 800a87c:	0800a8ab 	.word	0x0800a8ab
 800a880:	0800a8cd 	.word	0x0800a8cd
 800a884:	0800a8ef 	.word	0x0800a8ef

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2280      	movs	r2, #128	; 0x80
 800a88c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	085b      	lsrs	r3, r3, #1
 800a892:	015a      	lsls	r2, r3, #5
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	085b      	lsrs	r3, r3, #1
 800a89c:	011a      	lsls	r2, r3, #4
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2240      	movs	r2, #64	; 0x40
 800a8a6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a8a8:	e035      	b.n	800a916 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2280      	movs	r2, #128	; 0x80
 800a8ae:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	085b      	lsrs	r3, r3, #1
 800a8b4:	019a      	lsls	r2, r3, #6
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	085b      	lsrs	r3, r3, #1
 800a8be:	015a      	lsls	r2, r3, #5
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2280      	movs	r2, #128	; 0x80
 800a8c8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a8ca:	e024      	b.n	800a916 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	22c0      	movs	r2, #192	; 0xc0
 800a8d0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	085b      	lsrs	r3, r3, #1
 800a8d6:	019a      	lsls	r2, r3, #6
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	085b      	lsrs	r3, r3, #1
 800a8e0:	015a      	lsls	r2, r3, #5
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2280      	movs	r2, #128	; 0x80
 800a8ea:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a8ec:	e013      	b.n	800a916 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	22e0      	movs	r2, #224	; 0xe0
 800a8f2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	085b      	lsrs	r3, r3, #1
 800a8f8:	019a      	lsls	r2, r3, #6
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	085b      	lsrs	r3, r3, #1
 800a902:	015a      	lsls	r2, r3, #5
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2280      	movs	r2, #128	; 0x80
 800a90c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a90e:	e002      	b.n	800a916 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	75fb      	strb	r3, [r7, #23]
      break;
 800a914:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	2b02      	cmp	r3, #2
 800a91a:	d10b      	bne.n	800a934 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d102      	bne.n	800a928 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2210      	movs	r2, #16
 800a926:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d102      	bne.n	800a934 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2208      	movs	r2, #8
 800a932:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800a934:	7dfb      	ldrb	r3, [r7, #23]
}
 800a936:	4618      	mov	r0, r3
 800a938:	371c      	adds	r7, #28
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop

0800a944 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a944:	b480      	push	{r7}
 800a946:	b087      	sub	sp, #28
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
 800a950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d003      	beq.n	800a972 <SAI_InitPCM+0x2e>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	2b02      	cmp	r3, #2
 800a970:	d103      	bne.n	800a97a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2201      	movs	r2, #1
 800a976:	651a      	str	r2, [r3, #80]	; 0x50
 800a978:	e002      	b.n	800a980 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a98c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a994:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9a8:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	d103      	bne.n	800a9b8 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	659a      	str	r2, [r3, #88]	; 0x58
 800a9b6:	e002      	b.n	800a9be <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	220d      	movs	r2, #13
 800a9bc:	659a      	str	r2, [r3, #88]	; 0x58
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b03      	cmp	r3, #3
 800a9c2:	d837      	bhi.n	800aa34 <SAI_InitPCM+0xf0>
 800a9c4:	a201      	add	r2, pc, #4	; (adr r2, 800a9cc <SAI_InitPCM+0x88>)
 800a9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ca:	bf00      	nop
 800a9cc:	0800a9dd 	.word	0x0800a9dd
 800a9d0:	0800a9f3 	.word	0x0800a9f3
 800a9d4:	0800aa09 	.word	0x0800aa09
 800a9d8:	0800aa1f 	.word	0x0800aa1f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2280      	movs	r2, #128	; 0x80
 800a9e0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	011a      	lsls	r2, r3, #4
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2240      	movs	r2, #64	; 0x40
 800a9ee:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a9f0:	e023      	b.n	800aa3a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2280      	movs	r2, #128	; 0x80
 800a9f6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2280      	movs	r2, #128	; 0x80
 800aa04:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800aa06:	e018      	b.n	800aa3a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	22c0      	movs	r2, #192	; 0xc0
 800aa0c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	015a      	lsls	r2, r3, #5
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2280      	movs	r2, #128	; 0x80
 800aa1a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800aa1c:	e00d      	b.n	800aa3a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	22e0      	movs	r2, #224	; 0xe0
 800aa22:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	015a      	lsls	r2, r3, #5
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2280      	movs	r2, #128	; 0x80
 800aa30:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800aa32:	e002      	b.n	800aa3a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	75fb      	strb	r3, [r7, #23]
      break;
 800aa38:	bf00      	nop
  }

  return status;
 800aa3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	371c      	adds	r7, #28
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800aa50:	4b18      	ldr	r3, [pc, #96]	; (800aab4 <SAI_Disable+0x6c>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a18      	ldr	r2, [pc, #96]	; (800aab8 <SAI_Disable+0x70>)
 800aa56:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5a:	0b1b      	lsrs	r3, r3, #12
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aa72:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10a      	bne.n	800aa90 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	72fb      	strb	r3, [r7, #11]
      break;
 800aa8e:	e009      	b.n	800aaa4 <SAI_Disable+0x5c>
    }
    count--;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	3b01      	subs	r3, #1
 800aa94:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1e7      	bne.n	800aa74 <SAI_Disable+0x2c>

  return status;
 800aaa4:	7afb      	ldrb	r3, [r7, #11]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	24000000 	.word	0x24000000
 800aab8:	95cbec1b 	.word	0x95cbec1b

0800aabc <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800aad8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2200      	movs	r2, #0
 800aae0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aaea:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aaf2:	2b20      	cmp	r3, #32
 800aaf4:	d00a      	beq.n	800ab0c <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f7ff ffa6 	bl	800aa48 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	685a      	ldr	r2, [r3, #4]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f042 0208 	orr.w	r2, r2, #8
 800ab0a:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f7ff fe55 	bl	800a7cc <HAL_SAI_ErrorCallback>
#endif
}
 800ab22:	bf00      	nop
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
	...

0800ab2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800ab34:	2300      	movs	r3, #0
 800ab36:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e0eb      	b.n	800ad1a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a75      	ldr	r2, [pc, #468]	; (800ad24 <HAL_SPI_Init+0x1f8>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d00f      	beq.n	800ab72 <HAL_SPI_Init+0x46>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a74      	ldr	r2, [pc, #464]	; (800ad28 <HAL_SPI_Init+0x1fc>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d00a      	beq.n	800ab72 <HAL_SPI_Init+0x46>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a72      	ldr	r2, [pc, #456]	; (800ad2c <HAL_SPI_Init+0x200>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d005      	beq.n	800ab72 <HAL_SPI_Init+0x46>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	2b0f      	cmp	r3, #15
 800ab6c:	d901      	bls.n	800ab72 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e0d3      	b.n	800ad1a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 f8dc 	bl	800ad30 <SPI_GetPacketSize>
 800ab78:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a69      	ldr	r2, [pc, #420]	; (800ad24 <HAL_SPI_Init+0x1f8>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d00c      	beq.n	800ab9e <HAL_SPI_Init+0x72>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a67      	ldr	r2, [pc, #412]	; (800ad28 <HAL_SPI_Init+0x1fc>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d007      	beq.n	800ab9e <HAL_SPI_Init+0x72>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a66      	ldr	r2, [pc, #408]	; (800ad2c <HAL_SPI_Init+0x200>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d002      	beq.n	800ab9e <HAL_SPI_Init+0x72>
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	2b08      	cmp	r3, #8
 800ab9c:	d811      	bhi.n	800abc2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aba2:	4a60      	ldr	r2, [pc, #384]	; (800ad24 <HAL_SPI_Init+0x1f8>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d009      	beq.n	800abbc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a5e      	ldr	r2, [pc, #376]	; (800ad28 <HAL_SPI_Init+0x1fc>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d004      	beq.n	800abbc <HAL_SPI_Init+0x90>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a5d      	ldr	r2, [pc, #372]	; (800ad2c <HAL_SPI_Init+0x200>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d104      	bne.n	800abc6 <HAL_SPI_Init+0x9a>
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2b10      	cmp	r3, #16
 800abc0:	d901      	bls.n	800abc6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e0a9      	b.n	800ad1a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d106      	bne.n	800abe0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7f6 fe10 	bl	8001800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2202      	movs	r2, #2
 800abe4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f022 0201 	bic.w	r2, r2, #1
 800abf6:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	699b      	ldr	r3, [r3, #24]
 800abfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac00:	d119      	bne.n	800ac36 <HAL_SPI_Init+0x10a>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac0a:	d103      	bne.n	800ac14 <HAL_SPI_Init+0xe8>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d008      	beq.n	800ac26 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10c      	bne.n	800ac36 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac24:	d107      	bne.n	800ac36 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ac34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	69da      	ldr	r2, [r3, #28]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	431a      	orrs	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	431a      	orrs	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac48:	ea42 0103 	orr.w	r1, r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	68da      	ldr	r2, [r3, #12]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	430a      	orrs	r2, r1
 800ac56:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	431a      	orrs	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac66:	431a      	orrs	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	699b      	ldr	r3, [r3, #24]
 800ac6c:	431a      	orrs	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	431a      	orrs	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	695b      	ldr	r3, [r3, #20]
 800ac78:	431a      	orrs	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	431a      	orrs	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	431a      	orrs	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac8a:	431a      	orrs	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	431a      	orrs	r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac96:	ea42 0103 	orr.w	r1, r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	430a      	orrs	r2, r1
 800aca4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d113      	bne.n	800acd6 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800acc0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800acd4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f022 0201 	bic.w	r2, r2, #1
 800ace4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00a      	beq.n	800ad08 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	430a      	orrs	r2, r1
 800ad06:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	40013000 	.word	0x40013000
 800ad28:	40003800 	.word	0x40003800
 800ad2c:	40003c00 	.word	0x40003c00

0800ad30 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad3c:	095b      	lsrs	r3, r3, #5
 800ad3e:	3301      	adds	r3, #1
 800ad40:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	3301      	adds	r3, #1
 800ad48:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	3307      	adds	r3, #7
 800ad4e:	08db      	lsrs	r3, r3, #3
 800ad50:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	fb02 f303 	mul.w	r3, r2, r3
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
	...

0800ad68 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d101      	bne.n	800ad7e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e03e      	b.n	800adfc <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d106      	bne.n	800ad98 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f7f6 f91e 	bl	8000fd4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	3308      	adds	r3, #8
 800ada0:	4619      	mov	r1, r3
 800ada2:	4610      	mov	r0, r2
 800ada4:	f001 fdd0 	bl	800c948 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6818      	ldr	r0, [r3, #0]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	461a      	mov	r2, r3
 800adb2:	68b9      	ldr	r1, [r7, #8]
 800adb4:	f001 fe58 	bl	800ca68 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6858      	ldr	r0, [r3, #4]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	689a      	ldr	r2, [r3, #8]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc4:	6879      	ldr	r1, [r7, #4]
 800adc6:	f001 fe9f 	bl	800cb08 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	6892      	ldr	r2, [r2, #8]
 800add2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	6892      	ldr	r2, [r2, #8]
 800adde:	f041 0101 	orr.w	r1, r1, #1
 800ade2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800ade6:	4b07      	ldr	r3, [pc, #28]	; (800ae04 <HAL_SRAM_Init+0x9c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a06      	ldr	r2, [pc, #24]	; (800ae04 <HAL_SRAM_Init+0x9c>)
 800adec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adf0:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2201      	movs	r2, #1
 800adf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	52004000 	.word	0x52004000

0800ae08 <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b089      	sub	sp, #36	; 0x24
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d12b      	bne.n	800ae82 <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d101      	bne.n	800ae38 <HAL_SRAM_Write_8b+0x30>
 800ae34:	2302      	movs	r3, #2
 800ae36:	e025      	b.n	800ae84 <HAL_SRAM_Write_8b+0x7c>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2202      	movs	r2, #2
 800ae44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	61fb      	str	r3, [r7, #28]
 800ae4c:	e00c      	b.n	800ae68 <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	781a      	ldrb	r2, [r3, #0]
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	61fb      	str	r3, [r7, #28]
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1ef      	bne.n	800ae4e <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	e000      	b.n	800ae84 <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3724      	adds	r7, #36	; 0x24
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e049      	b.n	800af36 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d106      	bne.n	800aebc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7f7 f87a 	bl	8001fb0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2202      	movs	r2, #2
 800aec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	3304      	adds	r3, #4
 800aecc:	4619      	mov	r1, r3
 800aece:	4610      	mov	r0, r2
 800aed0:	f000 f8ac 	bl	800b02c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
	...

0800af40 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af52:	2b01      	cmp	r3, #1
 800af54:	d101      	bne.n	800af5a <HAL_TIM_OC_ConfigChannel+0x1a>
 800af56:	2302      	movs	r3, #2
 800af58:	e064      	b.n	800b024 <HAL_TIM_OC_ConfigChannel+0xe4>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2b14      	cmp	r3, #20
 800af66:	d857      	bhi.n	800b018 <HAL_TIM_OC_ConfigChannel+0xd8>
 800af68:	a201      	add	r2, pc, #4	; (adr r2, 800af70 <HAL_TIM_OC_ConfigChannel+0x30>)
 800af6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6e:	bf00      	nop
 800af70:	0800afc5 	.word	0x0800afc5
 800af74:	0800b019 	.word	0x0800b019
 800af78:	0800b019 	.word	0x0800b019
 800af7c:	0800b019 	.word	0x0800b019
 800af80:	0800afd3 	.word	0x0800afd3
 800af84:	0800b019 	.word	0x0800b019
 800af88:	0800b019 	.word	0x0800b019
 800af8c:	0800b019 	.word	0x0800b019
 800af90:	0800afe1 	.word	0x0800afe1
 800af94:	0800b019 	.word	0x0800b019
 800af98:	0800b019 	.word	0x0800b019
 800af9c:	0800b019 	.word	0x0800b019
 800afa0:	0800afef 	.word	0x0800afef
 800afa4:	0800b019 	.word	0x0800b019
 800afa8:	0800b019 	.word	0x0800b019
 800afac:	0800b019 	.word	0x0800b019
 800afb0:	0800affd 	.word	0x0800affd
 800afb4:	0800b019 	.word	0x0800b019
 800afb8:	0800b019 	.word	0x0800b019
 800afbc:	0800b019 	.word	0x0800b019
 800afc0:	0800b00b 	.word	0x0800b00b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68b9      	ldr	r1, [r7, #8]
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 f8c8 	bl	800b160 <TIM_OC1_SetConfig>
      break;
 800afd0:	e023      	b.n	800b01a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68b9      	ldr	r1, [r7, #8]
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 f951 	bl	800b280 <TIM_OC2_SetConfig>
      break;
 800afde:	e01c      	b.n	800b01a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68b9      	ldr	r1, [r7, #8]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 f9d4 	bl	800b394 <TIM_OC3_SetConfig>
      break;
 800afec:	e015      	b.n	800b01a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68b9      	ldr	r1, [r7, #8]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 fa53 	bl	800b4a0 <TIM_OC4_SetConfig>
      break;
 800affa:	e00e      	b.n	800b01a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68b9      	ldr	r1, [r7, #8]
 800b002:	4618      	mov	r0, r3
 800b004:	f000 fab4 	bl	800b570 <TIM_OC5_SetConfig>
      break;
 800b008:	e007      	b.n	800b01a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	68b9      	ldr	r1, [r7, #8]
 800b010:	4618      	mov	r0, r3
 800b012:	f000 fb0f 	bl	800b634 <TIM_OC6_SetConfig>
      break;
 800b016:	e000      	b.n	800b01a <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800b018:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a40      	ldr	r2, [pc, #256]	; (800b140 <TIM_Base_SetConfig+0x114>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d013      	beq.n	800b06c <TIM_Base_SetConfig+0x40>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b04a:	d00f      	beq.n	800b06c <TIM_Base_SetConfig+0x40>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a3d      	ldr	r2, [pc, #244]	; (800b144 <TIM_Base_SetConfig+0x118>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d00b      	beq.n	800b06c <TIM_Base_SetConfig+0x40>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a3c      	ldr	r2, [pc, #240]	; (800b148 <TIM_Base_SetConfig+0x11c>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d007      	beq.n	800b06c <TIM_Base_SetConfig+0x40>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a3b      	ldr	r2, [pc, #236]	; (800b14c <TIM_Base_SetConfig+0x120>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d003      	beq.n	800b06c <TIM_Base_SetConfig+0x40>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a3a      	ldr	r2, [pc, #232]	; (800b150 <TIM_Base_SetConfig+0x124>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d108      	bne.n	800b07e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a2f      	ldr	r2, [pc, #188]	; (800b140 <TIM_Base_SetConfig+0x114>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d01f      	beq.n	800b0c6 <TIM_Base_SetConfig+0x9a>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b08c:	d01b      	beq.n	800b0c6 <TIM_Base_SetConfig+0x9a>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a2c      	ldr	r2, [pc, #176]	; (800b144 <TIM_Base_SetConfig+0x118>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d017      	beq.n	800b0c6 <TIM_Base_SetConfig+0x9a>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a2b      	ldr	r2, [pc, #172]	; (800b148 <TIM_Base_SetConfig+0x11c>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d013      	beq.n	800b0c6 <TIM_Base_SetConfig+0x9a>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a2a      	ldr	r2, [pc, #168]	; (800b14c <TIM_Base_SetConfig+0x120>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d00f      	beq.n	800b0c6 <TIM_Base_SetConfig+0x9a>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a29      	ldr	r2, [pc, #164]	; (800b150 <TIM_Base_SetConfig+0x124>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d00b      	beq.n	800b0c6 <TIM_Base_SetConfig+0x9a>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a28      	ldr	r2, [pc, #160]	; (800b154 <TIM_Base_SetConfig+0x128>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d007      	beq.n	800b0c6 <TIM_Base_SetConfig+0x9a>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a27      	ldr	r2, [pc, #156]	; (800b158 <TIM_Base_SetConfig+0x12c>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d003      	beq.n	800b0c6 <TIM_Base_SetConfig+0x9a>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a26      	ldr	r2, [pc, #152]	; (800b15c <TIM_Base_SetConfig+0x130>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d108      	bne.n	800b0d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	695b      	ldr	r3, [r3, #20]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	689a      	ldr	r2, [r3, #8]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a10      	ldr	r2, [pc, #64]	; (800b140 <TIM_Base_SetConfig+0x114>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d00f      	beq.n	800b124 <TIM_Base_SetConfig+0xf8>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a12      	ldr	r2, [pc, #72]	; (800b150 <TIM_Base_SetConfig+0x124>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d00b      	beq.n	800b124 <TIM_Base_SetConfig+0xf8>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4a11      	ldr	r2, [pc, #68]	; (800b154 <TIM_Base_SetConfig+0x128>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d007      	beq.n	800b124 <TIM_Base_SetConfig+0xf8>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a10      	ldr	r2, [pc, #64]	; (800b158 <TIM_Base_SetConfig+0x12c>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d003      	beq.n	800b124 <TIM_Base_SetConfig+0xf8>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	4a0f      	ldr	r2, [pc, #60]	; (800b15c <TIM_Base_SetConfig+0x130>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d103      	bne.n	800b12c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	691a      	ldr	r2, [r3, #16]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	615a      	str	r2, [r3, #20]
}
 800b132:	bf00      	nop
 800b134:	3714      	adds	r7, #20
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	40010000 	.word	0x40010000
 800b144:	40000400 	.word	0x40000400
 800b148:	40000800 	.word	0x40000800
 800b14c:	40000c00 	.word	0x40000c00
 800b150:	40010400 	.word	0x40010400
 800b154:	40014000 	.word	0x40014000
 800b158:	40014400 	.word	0x40014400
 800b15c:	40014800 	.word	0x40014800

0800b160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b160:	b480      	push	{r7}
 800b162:	b087      	sub	sp, #28
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a1b      	ldr	r3, [r3, #32]
 800b16e:	f023 0201 	bic.w	r2, r3, #1
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a1b      	ldr	r3, [r3, #32]
 800b17a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	699b      	ldr	r3, [r3, #24]
 800b186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	4b37      	ldr	r3, [pc, #220]	; (800b268 <TIM_OC1_SetConfig+0x108>)
 800b18c:	4013      	ands	r3, r2
 800b18e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f023 0303 	bic.w	r3, r3, #3
 800b196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	f023 0302 	bic.w	r3, r3, #2
 800b1a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a2d      	ldr	r2, [pc, #180]	; (800b26c <TIM_OC1_SetConfig+0x10c>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d00f      	beq.n	800b1dc <TIM_OC1_SetConfig+0x7c>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a2c      	ldr	r2, [pc, #176]	; (800b270 <TIM_OC1_SetConfig+0x110>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d00b      	beq.n	800b1dc <TIM_OC1_SetConfig+0x7c>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a2b      	ldr	r2, [pc, #172]	; (800b274 <TIM_OC1_SetConfig+0x114>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d007      	beq.n	800b1dc <TIM_OC1_SetConfig+0x7c>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a2a      	ldr	r2, [pc, #168]	; (800b278 <TIM_OC1_SetConfig+0x118>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d003      	beq.n	800b1dc <TIM_OC1_SetConfig+0x7c>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a29      	ldr	r2, [pc, #164]	; (800b27c <TIM_OC1_SetConfig+0x11c>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d10c      	bne.n	800b1f6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	f023 0308 	bic.w	r3, r3, #8
 800b1e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	697a      	ldr	r2, [r7, #20]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	f023 0304 	bic.w	r3, r3, #4
 800b1f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a1c      	ldr	r2, [pc, #112]	; (800b26c <TIM_OC1_SetConfig+0x10c>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d00f      	beq.n	800b21e <TIM_OC1_SetConfig+0xbe>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a1b      	ldr	r2, [pc, #108]	; (800b270 <TIM_OC1_SetConfig+0x110>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d00b      	beq.n	800b21e <TIM_OC1_SetConfig+0xbe>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a1a      	ldr	r2, [pc, #104]	; (800b274 <TIM_OC1_SetConfig+0x114>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d007      	beq.n	800b21e <TIM_OC1_SetConfig+0xbe>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4a19      	ldr	r2, [pc, #100]	; (800b278 <TIM_OC1_SetConfig+0x118>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d003      	beq.n	800b21e <TIM_OC1_SetConfig+0xbe>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a18      	ldr	r2, [pc, #96]	; (800b27c <TIM_OC1_SetConfig+0x11c>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d111      	bne.n	800b242 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b22c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	695b      	ldr	r3, [r3, #20]
 800b232:	693a      	ldr	r2, [r7, #16]
 800b234:	4313      	orrs	r3, r2
 800b236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	4313      	orrs	r3, r2
 800b240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	685a      	ldr	r2, [r3, #4]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	697a      	ldr	r2, [r7, #20]
 800b25a:	621a      	str	r2, [r3, #32]
}
 800b25c:	bf00      	nop
 800b25e:	371c      	adds	r7, #28
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr
 800b268:	fffeff8f 	.word	0xfffeff8f
 800b26c:	40010000 	.word	0x40010000
 800b270:	40010400 	.word	0x40010400
 800b274:	40014000 	.word	0x40014000
 800b278:	40014400 	.word	0x40014400
 800b27c:	40014800 	.word	0x40014800

0800b280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a1b      	ldr	r3, [r3, #32]
 800b28e:	f023 0210 	bic.w	r2, r3, #16
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	699b      	ldr	r3, [r3, #24]
 800b2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b2a8:	68fa      	ldr	r2, [r7, #12]
 800b2aa:	4b34      	ldr	r3, [pc, #208]	; (800b37c <TIM_OC2_SetConfig+0xfc>)
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	021b      	lsls	r3, r3, #8
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	f023 0320 	bic.w	r3, r3, #32
 800b2ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	011b      	lsls	r3, r3, #4
 800b2d2:	697a      	ldr	r2, [r7, #20]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a29      	ldr	r2, [pc, #164]	; (800b380 <TIM_OC2_SetConfig+0x100>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d003      	beq.n	800b2e8 <TIM_OC2_SetConfig+0x68>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a28      	ldr	r2, [pc, #160]	; (800b384 <TIM_OC2_SetConfig+0x104>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d10d      	bne.n	800b304 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	011b      	lsls	r3, r3, #4
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a1e      	ldr	r2, [pc, #120]	; (800b380 <TIM_OC2_SetConfig+0x100>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d00f      	beq.n	800b32c <TIM_OC2_SetConfig+0xac>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a1d      	ldr	r2, [pc, #116]	; (800b384 <TIM_OC2_SetConfig+0x104>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d00b      	beq.n	800b32c <TIM_OC2_SetConfig+0xac>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4a1c      	ldr	r2, [pc, #112]	; (800b388 <TIM_OC2_SetConfig+0x108>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d007      	beq.n	800b32c <TIM_OC2_SetConfig+0xac>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a1b      	ldr	r2, [pc, #108]	; (800b38c <TIM_OC2_SetConfig+0x10c>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d003      	beq.n	800b32c <TIM_OC2_SetConfig+0xac>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a1a      	ldr	r2, [pc, #104]	; (800b390 <TIM_OC2_SetConfig+0x110>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d113      	bne.n	800b354 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b33a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	4313      	orrs	r3, r2
 800b346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	4313      	orrs	r3, r2
 800b352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	693a      	ldr	r2, [r7, #16]
 800b358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	685a      	ldr	r2, [r3, #4]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	621a      	str	r2, [r3, #32]
}
 800b36e:	bf00      	nop
 800b370:	371c      	adds	r7, #28
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	feff8fff 	.word	0xfeff8fff
 800b380:	40010000 	.word	0x40010000
 800b384:	40010400 	.word	0x40010400
 800b388:	40014000 	.word	0x40014000
 800b38c:	40014400 	.word	0x40014400
 800b390:	40014800 	.word	0x40014800

0800b394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b394:	b480      	push	{r7}
 800b396:	b087      	sub	sp, #28
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a1b      	ldr	r3, [r3, #32]
 800b3a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a1b      	ldr	r3, [r3, #32]
 800b3ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	69db      	ldr	r3, [r3, #28]
 800b3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f023 0303 	bic.w	r3, r3, #3
 800b3ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	021b      	lsls	r3, r3, #8
 800b3e4:	697a      	ldr	r2, [r7, #20]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a27      	ldr	r2, [pc, #156]	; (800b48c <TIM_OC3_SetConfig+0xf8>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d003      	beq.n	800b3fa <TIM_OC3_SetConfig+0x66>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a26      	ldr	r2, [pc, #152]	; (800b490 <TIM_OC3_SetConfig+0xfc>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d10d      	bne.n	800b416 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	68db      	ldr	r3, [r3, #12]
 800b406:	021b      	lsls	r3, r3, #8
 800b408:	697a      	ldr	r2, [r7, #20]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a1c      	ldr	r2, [pc, #112]	; (800b48c <TIM_OC3_SetConfig+0xf8>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d00f      	beq.n	800b43e <TIM_OC3_SetConfig+0xaa>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4a1b      	ldr	r2, [pc, #108]	; (800b490 <TIM_OC3_SetConfig+0xfc>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d00b      	beq.n	800b43e <TIM_OC3_SetConfig+0xaa>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4a1a      	ldr	r2, [pc, #104]	; (800b494 <TIM_OC3_SetConfig+0x100>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d007      	beq.n	800b43e <TIM_OC3_SetConfig+0xaa>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4a19      	ldr	r2, [pc, #100]	; (800b498 <TIM_OC3_SetConfig+0x104>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d003      	beq.n	800b43e <TIM_OC3_SetConfig+0xaa>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a18      	ldr	r2, [pc, #96]	; (800b49c <TIM_OC3_SetConfig+0x108>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d113      	bne.n	800b466 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b44c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	011b      	lsls	r3, r3, #4
 800b454:	693a      	ldr	r2, [r7, #16]
 800b456:	4313      	orrs	r3, r2
 800b458:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	699b      	ldr	r3, [r3, #24]
 800b45e:	011b      	lsls	r3, r3, #4
 800b460:	693a      	ldr	r2, [r7, #16]
 800b462:	4313      	orrs	r3, r2
 800b464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	693a      	ldr	r2, [r7, #16]
 800b46a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	685a      	ldr	r2, [r3, #4]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	697a      	ldr	r2, [r7, #20]
 800b47e:	621a      	str	r2, [r3, #32]
}
 800b480:	bf00      	nop
 800b482:	371c      	adds	r7, #28
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr
 800b48c:	40010000 	.word	0x40010000
 800b490:	40010400 	.word	0x40010400
 800b494:	40014000 	.word	0x40014000
 800b498:	40014400 	.word	0x40014400
 800b49c:	40014800 	.word	0x40014800

0800b4a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b087      	sub	sp, #28
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a1b      	ldr	r3, [r3, #32]
 800b4ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	69db      	ldr	r3, [r3, #28]
 800b4c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	021b      	lsls	r3, r3, #8
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b4ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	031b      	lsls	r3, r3, #12
 800b4f2:	693a      	ldr	r2, [r7, #16]
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4a18      	ldr	r2, [pc, #96]	; (800b55c <TIM_OC4_SetConfig+0xbc>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d00f      	beq.n	800b520 <TIM_OC4_SetConfig+0x80>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	4a17      	ldr	r2, [pc, #92]	; (800b560 <TIM_OC4_SetConfig+0xc0>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d00b      	beq.n	800b520 <TIM_OC4_SetConfig+0x80>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4a16      	ldr	r2, [pc, #88]	; (800b564 <TIM_OC4_SetConfig+0xc4>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d007      	beq.n	800b520 <TIM_OC4_SetConfig+0x80>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4a15      	ldr	r2, [pc, #84]	; (800b568 <TIM_OC4_SetConfig+0xc8>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d003      	beq.n	800b520 <TIM_OC4_SetConfig+0x80>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4a14      	ldr	r2, [pc, #80]	; (800b56c <TIM_OC4_SetConfig+0xcc>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d109      	bne.n	800b534 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	695b      	ldr	r3, [r3, #20]
 800b52c:	019b      	lsls	r3, r3, #6
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	4313      	orrs	r3, r2
 800b532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	697a      	ldr	r2, [r7, #20]
 800b538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	685a      	ldr	r2, [r3, #4]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	621a      	str	r2, [r3, #32]
}
 800b54e:	bf00      	nop
 800b550:	371c      	adds	r7, #28
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	40010000 	.word	0x40010000
 800b560:	40010400 	.word	0x40010400
 800b564:	40014000 	.word	0x40014000
 800b568:	40014400 	.word	0x40014400
 800b56c:	40014800 	.word	0x40014800

0800b570 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b570:	b480      	push	{r7}
 800b572:	b087      	sub	sp, #28
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a1b      	ldr	r3, [r3, #32]
 800b58a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b59e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b5b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	041b      	lsls	r3, r3, #16
 800b5b8:	693a      	ldr	r2, [r7, #16]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a17      	ldr	r2, [pc, #92]	; (800b620 <TIM_OC5_SetConfig+0xb0>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d00f      	beq.n	800b5e6 <TIM_OC5_SetConfig+0x76>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a16      	ldr	r2, [pc, #88]	; (800b624 <TIM_OC5_SetConfig+0xb4>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d00b      	beq.n	800b5e6 <TIM_OC5_SetConfig+0x76>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a15      	ldr	r2, [pc, #84]	; (800b628 <TIM_OC5_SetConfig+0xb8>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d007      	beq.n	800b5e6 <TIM_OC5_SetConfig+0x76>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a14      	ldr	r2, [pc, #80]	; (800b62c <TIM_OC5_SetConfig+0xbc>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d003      	beq.n	800b5e6 <TIM_OC5_SetConfig+0x76>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a13      	ldr	r2, [pc, #76]	; (800b630 <TIM_OC5_SetConfig+0xc0>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d109      	bne.n	800b5fa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	695b      	ldr	r3, [r3, #20]
 800b5f2:	021b      	lsls	r3, r3, #8
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	685a      	ldr	r2, [r3, #4]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	693a      	ldr	r2, [r7, #16]
 800b612:	621a      	str	r2, [r3, #32]
}
 800b614:	bf00      	nop
 800b616:	371c      	adds	r7, #28
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	40010000 	.word	0x40010000
 800b624:	40010400 	.word	0x40010400
 800b628:	40014000 	.word	0x40014000
 800b62c:	40014400 	.word	0x40014400
 800b630:	40014800 	.word	0x40014800

0800b634 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b634:	b480      	push	{r7}
 800b636:	b087      	sub	sp, #28
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a1b      	ldr	r3, [r3, #32]
 800b642:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a1b      	ldr	r3, [r3, #32]
 800b64e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b65a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	021b      	lsls	r3, r3, #8
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	051b      	lsls	r3, r3, #20
 800b67e:	693a      	ldr	r2, [r7, #16]
 800b680:	4313      	orrs	r3, r2
 800b682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a18      	ldr	r2, [pc, #96]	; (800b6e8 <TIM_OC6_SetConfig+0xb4>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d00f      	beq.n	800b6ac <TIM_OC6_SetConfig+0x78>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a17      	ldr	r2, [pc, #92]	; (800b6ec <TIM_OC6_SetConfig+0xb8>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d00b      	beq.n	800b6ac <TIM_OC6_SetConfig+0x78>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a16      	ldr	r2, [pc, #88]	; (800b6f0 <TIM_OC6_SetConfig+0xbc>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d007      	beq.n	800b6ac <TIM_OC6_SetConfig+0x78>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a15      	ldr	r2, [pc, #84]	; (800b6f4 <TIM_OC6_SetConfig+0xc0>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d003      	beq.n	800b6ac <TIM_OC6_SetConfig+0x78>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a14      	ldr	r2, [pc, #80]	; (800b6f8 <TIM_OC6_SetConfig+0xc4>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d109      	bne.n	800b6c0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b6b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	695b      	ldr	r3, [r3, #20]
 800b6b8:	029b      	lsls	r3, r3, #10
 800b6ba:	697a      	ldr	r2, [r7, #20]
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	685a      	ldr	r2, [r3, #4]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	621a      	str	r2, [r3, #32]
}
 800b6da:	bf00      	nop
 800b6dc:	371c      	adds	r7, #28
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	40010000 	.word	0x40010000
 800b6ec:	40010400 	.word	0x40010400
 800b6f0:	40014000 	.word	0x40014000
 800b6f4:	40014400 	.word	0x40014400
 800b6f8:	40014800 	.word	0x40014800

0800b6fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d101      	bne.n	800b714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b710:	2302      	movs	r3, #2
 800b712:	e068      	b.n	800b7e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2202      	movs	r2, #2
 800b720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a2e      	ldr	r2, [pc, #184]	; (800b7f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d004      	beq.n	800b748 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a2d      	ldr	r2, [pc, #180]	; (800b7f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d108      	bne.n	800b75a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b74e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	4313      	orrs	r3, r2
 800b758:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b760:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	4313      	orrs	r3, r2
 800b76a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a1e      	ldr	r2, [pc, #120]	; (800b7f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d01d      	beq.n	800b7ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b786:	d018      	beq.n	800b7ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a1b      	ldr	r2, [pc, #108]	; (800b7fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d013      	beq.n	800b7ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a1a      	ldr	r2, [pc, #104]	; (800b800 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d00e      	beq.n	800b7ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a18      	ldr	r2, [pc, #96]	; (800b804 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d009      	beq.n	800b7ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a13      	ldr	r2, [pc, #76]	; (800b7f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d004      	beq.n	800b7ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a14      	ldr	r2, [pc, #80]	; (800b808 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d10c      	bne.n	800b7d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	68ba      	ldr	r2, [r7, #8]
 800b7d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3714      	adds	r7, #20
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	40010000 	.word	0x40010000
 800b7f8:	40010400 	.word	0x40010400
 800b7fc:	40000400 	.word	0x40000400
 800b800:	40000800 	.word	0x40000800
 800b804:	40000c00 	.word	0x40000c00
 800b808:	40001800 	.word	0x40001800

0800b80c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b085      	sub	sp, #20
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b816:	2300      	movs	r3, #0
 800b818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b820:	2b01      	cmp	r3, #1
 800b822:	d101      	bne.n	800b828 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b824:	2302      	movs	r3, #2
 800b826:	e065      	b.n	800b8f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	4313      	orrs	r3, r2
 800b84a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	4313      	orrs	r3, r2
 800b858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4313      	orrs	r3, r2
 800b866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	4313      	orrs	r3, r2
 800b874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	695b      	ldr	r3, [r3, #20]
 800b880:	4313      	orrs	r3, r2
 800b882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b88e:	4313      	orrs	r3, r2
 800b890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	699b      	ldr	r3, [r3, #24]
 800b89c:	041b      	lsls	r3, r3, #16
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a16      	ldr	r2, [pc, #88]	; (800b900 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d004      	beq.n	800b8b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a14      	ldr	r2, [pc, #80]	; (800b904 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d115      	bne.n	800b8e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c0:	051b      	lsls	r3, r3, #20
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	69db      	ldr	r3, [r3, #28]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	6a1b      	ldr	r3, [r3, #32]
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	40010000 	.word	0x40010000
 800b904:	40010400 	.word	0x40010400

0800b908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d101      	bne.n	800b91a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e042      	b.n	800b9a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b920:	2b00      	cmp	r3, #0
 800b922:	d106      	bne.n	800b932 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f7f6 fce9 	bl	8002304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2224      	movs	r2, #36	; 0x24
 800b936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f022 0201 	bic.w	r2, r2, #1
 800b948:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f82c 	bl	800b9a8 <UART_SetConfig>
 800b950:	4603      	mov	r3, r0
 800b952:	2b01      	cmp	r3, #1
 800b954:	d101      	bne.n	800b95a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	e022      	b.n	800b9a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d002      	beq.n	800b968 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fd80 	bl	800c468 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	685a      	ldr	r2, [r3, #4]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	689a      	ldr	r2, [r3, #8]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f042 0201 	orr.w	r2, r2, #1
 800b996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fe07 	bl	800c5ac <UART_CheckIdleState>
 800b99e:	4603      	mov	r3, r0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9a8:	b5b0      	push	{r4, r5, r7, lr}
 800b9aa:	b08e      	sub	sp, #56	; 0x38
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	689a      	ldr	r2, [r3, #8]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	431a      	orrs	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	431a      	orrs	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	69db      	ldr	r3, [r3, #28]
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	4bbf      	ldr	r3, [pc, #764]	; (800bcd4 <UART_SetConfig+0x32c>)
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	6812      	ldr	r2, [r2, #0]
 800b9dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9de:	430b      	orrs	r3, r1
 800b9e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	68da      	ldr	r2, [r3, #12]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	430a      	orrs	r2, r1
 800b9f6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4ab5      	ldr	r2, [pc, #724]	; (800bcd8 <UART_SetConfig+0x330>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d004      	beq.n	800ba12 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a1b      	ldr	r3, [r3, #32]
 800ba0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	689a      	ldr	r2, [r3, #8]
 800ba18:	4bb0      	ldr	r3, [pc, #704]	; (800bcdc <UART_SetConfig+0x334>)
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	6812      	ldr	r2, [r2, #0]
 800ba20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba22:	430b      	orrs	r3, r1
 800ba24:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba2c:	f023 010f 	bic.w	r1, r3, #15
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	430a      	orrs	r2, r1
 800ba3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4aa7      	ldr	r2, [pc, #668]	; (800bce0 <UART_SetConfig+0x338>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d176      	bne.n	800bb34 <UART_SetConfig+0x18c>
 800ba46:	4ba7      	ldr	r3, [pc, #668]	; (800bce4 <UART_SetConfig+0x33c>)
 800ba48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba4e:	2b28      	cmp	r3, #40	; 0x28
 800ba50:	d86c      	bhi.n	800bb2c <UART_SetConfig+0x184>
 800ba52:	a201      	add	r2, pc, #4	; (adr r2, 800ba58 <UART_SetConfig+0xb0>)
 800ba54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba58:	0800bafd 	.word	0x0800bafd
 800ba5c:	0800bb2d 	.word	0x0800bb2d
 800ba60:	0800bb2d 	.word	0x0800bb2d
 800ba64:	0800bb2d 	.word	0x0800bb2d
 800ba68:	0800bb2d 	.word	0x0800bb2d
 800ba6c:	0800bb2d 	.word	0x0800bb2d
 800ba70:	0800bb2d 	.word	0x0800bb2d
 800ba74:	0800bb2d 	.word	0x0800bb2d
 800ba78:	0800bb05 	.word	0x0800bb05
 800ba7c:	0800bb2d 	.word	0x0800bb2d
 800ba80:	0800bb2d 	.word	0x0800bb2d
 800ba84:	0800bb2d 	.word	0x0800bb2d
 800ba88:	0800bb2d 	.word	0x0800bb2d
 800ba8c:	0800bb2d 	.word	0x0800bb2d
 800ba90:	0800bb2d 	.word	0x0800bb2d
 800ba94:	0800bb2d 	.word	0x0800bb2d
 800ba98:	0800bb0d 	.word	0x0800bb0d
 800ba9c:	0800bb2d 	.word	0x0800bb2d
 800baa0:	0800bb2d 	.word	0x0800bb2d
 800baa4:	0800bb2d 	.word	0x0800bb2d
 800baa8:	0800bb2d 	.word	0x0800bb2d
 800baac:	0800bb2d 	.word	0x0800bb2d
 800bab0:	0800bb2d 	.word	0x0800bb2d
 800bab4:	0800bb2d 	.word	0x0800bb2d
 800bab8:	0800bb15 	.word	0x0800bb15
 800babc:	0800bb2d 	.word	0x0800bb2d
 800bac0:	0800bb2d 	.word	0x0800bb2d
 800bac4:	0800bb2d 	.word	0x0800bb2d
 800bac8:	0800bb2d 	.word	0x0800bb2d
 800bacc:	0800bb2d 	.word	0x0800bb2d
 800bad0:	0800bb2d 	.word	0x0800bb2d
 800bad4:	0800bb2d 	.word	0x0800bb2d
 800bad8:	0800bb1d 	.word	0x0800bb1d
 800badc:	0800bb2d 	.word	0x0800bb2d
 800bae0:	0800bb2d 	.word	0x0800bb2d
 800bae4:	0800bb2d 	.word	0x0800bb2d
 800bae8:	0800bb2d 	.word	0x0800bb2d
 800baec:	0800bb2d 	.word	0x0800bb2d
 800baf0:	0800bb2d 	.word	0x0800bb2d
 800baf4:	0800bb2d 	.word	0x0800bb2d
 800baf8:	0800bb25 	.word	0x0800bb25
 800bafc:	2301      	movs	r3, #1
 800bafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb02:	e222      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bb04:	2304      	movs	r3, #4
 800bb06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb0a:	e21e      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bb0c:	2308      	movs	r3, #8
 800bb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb12:	e21a      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bb14:	2310      	movs	r3, #16
 800bb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb1a:	e216      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bb1c:	2320      	movs	r3, #32
 800bb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb22:	e212      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bb24:	2340      	movs	r3, #64	; 0x40
 800bb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb2a:	e20e      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bb2c:	2380      	movs	r3, #128	; 0x80
 800bb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb32:	e20a      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a6b      	ldr	r2, [pc, #428]	; (800bce8 <UART_SetConfig+0x340>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d130      	bne.n	800bba0 <UART_SetConfig+0x1f8>
 800bb3e:	4b69      	ldr	r3, [pc, #420]	; (800bce4 <UART_SetConfig+0x33c>)
 800bb40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb42:	f003 0307 	and.w	r3, r3, #7
 800bb46:	2b05      	cmp	r3, #5
 800bb48:	d826      	bhi.n	800bb98 <UART_SetConfig+0x1f0>
 800bb4a:	a201      	add	r2, pc, #4	; (adr r2, 800bb50 <UART_SetConfig+0x1a8>)
 800bb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb50:	0800bb69 	.word	0x0800bb69
 800bb54:	0800bb71 	.word	0x0800bb71
 800bb58:	0800bb79 	.word	0x0800bb79
 800bb5c:	0800bb81 	.word	0x0800bb81
 800bb60:	0800bb89 	.word	0x0800bb89
 800bb64:	0800bb91 	.word	0x0800bb91
 800bb68:	2300      	movs	r3, #0
 800bb6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb6e:	e1ec      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bb70:	2304      	movs	r3, #4
 800bb72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb76:	e1e8      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bb78:	2308      	movs	r3, #8
 800bb7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb7e:	e1e4      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bb80:	2310      	movs	r3, #16
 800bb82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb86:	e1e0      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bb88:	2320      	movs	r3, #32
 800bb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb8e:	e1dc      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bb90:	2340      	movs	r3, #64	; 0x40
 800bb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb96:	e1d8      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bb98:	2380      	movs	r3, #128	; 0x80
 800bb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb9e:	e1d4      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a51      	ldr	r2, [pc, #324]	; (800bcec <UART_SetConfig+0x344>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d130      	bne.n	800bc0c <UART_SetConfig+0x264>
 800bbaa:	4b4e      	ldr	r3, [pc, #312]	; (800bce4 <UART_SetConfig+0x33c>)
 800bbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbae:	f003 0307 	and.w	r3, r3, #7
 800bbb2:	2b05      	cmp	r3, #5
 800bbb4:	d826      	bhi.n	800bc04 <UART_SetConfig+0x25c>
 800bbb6:	a201      	add	r2, pc, #4	; (adr r2, 800bbbc <UART_SetConfig+0x214>)
 800bbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbbc:	0800bbd5 	.word	0x0800bbd5
 800bbc0:	0800bbdd 	.word	0x0800bbdd
 800bbc4:	0800bbe5 	.word	0x0800bbe5
 800bbc8:	0800bbed 	.word	0x0800bbed
 800bbcc:	0800bbf5 	.word	0x0800bbf5
 800bbd0:	0800bbfd 	.word	0x0800bbfd
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbda:	e1b6      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bbdc:	2304      	movs	r3, #4
 800bbde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbe2:	e1b2      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bbe4:	2308      	movs	r3, #8
 800bbe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbea:	e1ae      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bbec:	2310      	movs	r3, #16
 800bbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbf2:	e1aa      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bbf4:	2320      	movs	r3, #32
 800bbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbfa:	e1a6      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bbfc:	2340      	movs	r3, #64	; 0x40
 800bbfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc02:	e1a2      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bc04:	2380      	movs	r3, #128	; 0x80
 800bc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc0a:	e19e      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a37      	ldr	r2, [pc, #220]	; (800bcf0 <UART_SetConfig+0x348>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d130      	bne.n	800bc78 <UART_SetConfig+0x2d0>
 800bc16:	4b33      	ldr	r3, [pc, #204]	; (800bce4 <UART_SetConfig+0x33c>)
 800bc18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc1a:	f003 0307 	and.w	r3, r3, #7
 800bc1e:	2b05      	cmp	r3, #5
 800bc20:	d826      	bhi.n	800bc70 <UART_SetConfig+0x2c8>
 800bc22:	a201      	add	r2, pc, #4	; (adr r2, 800bc28 <UART_SetConfig+0x280>)
 800bc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc28:	0800bc41 	.word	0x0800bc41
 800bc2c:	0800bc49 	.word	0x0800bc49
 800bc30:	0800bc51 	.word	0x0800bc51
 800bc34:	0800bc59 	.word	0x0800bc59
 800bc38:	0800bc61 	.word	0x0800bc61
 800bc3c:	0800bc69 	.word	0x0800bc69
 800bc40:	2300      	movs	r3, #0
 800bc42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc46:	e180      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bc48:	2304      	movs	r3, #4
 800bc4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc4e:	e17c      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bc50:	2308      	movs	r3, #8
 800bc52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc56:	e178      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bc58:	2310      	movs	r3, #16
 800bc5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc5e:	e174      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bc60:	2320      	movs	r3, #32
 800bc62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc66:	e170      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bc68:	2340      	movs	r3, #64	; 0x40
 800bc6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc6e:	e16c      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bc70:	2380      	movs	r3, #128	; 0x80
 800bc72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc76:	e168      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a1d      	ldr	r2, [pc, #116]	; (800bcf4 <UART_SetConfig+0x34c>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d142      	bne.n	800bd08 <UART_SetConfig+0x360>
 800bc82:	4b18      	ldr	r3, [pc, #96]	; (800bce4 <UART_SetConfig+0x33c>)
 800bc84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc86:	f003 0307 	and.w	r3, r3, #7
 800bc8a:	2b05      	cmp	r3, #5
 800bc8c:	d838      	bhi.n	800bd00 <UART_SetConfig+0x358>
 800bc8e:	a201      	add	r2, pc, #4	; (adr r2, 800bc94 <UART_SetConfig+0x2ec>)
 800bc90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc94:	0800bcad 	.word	0x0800bcad
 800bc98:	0800bcb5 	.word	0x0800bcb5
 800bc9c:	0800bcbd 	.word	0x0800bcbd
 800bca0:	0800bcc5 	.word	0x0800bcc5
 800bca4:	0800bccd 	.word	0x0800bccd
 800bca8:	0800bcf9 	.word	0x0800bcf9
 800bcac:	2300      	movs	r3, #0
 800bcae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcb2:	e14a      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bcb4:	2304      	movs	r3, #4
 800bcb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcba:	e146      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bcbc:	2308      	movs	r3, #8
 800bcbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcc2:	e142      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bcc4:	2310      	movs	r3, #16
 800bcc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcca:	e13e      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bccc:	2320      	movs	r3, #32
 800bcce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcd2:	e13a      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bcd4:	cfff69f3 	.word	0xcfff69f3
 800bcd8:	58000c00 	.word	0x58000c00
 800bcdc:	11fff4ff 	.word	0x11fff4ff
 800bce0:	40011000 	.word	0x40011000
 800bce4:	58024400 	.word	0x58024400
 800bce8:	40004400 	.word	0x40004400
 800bcec:	40004800 	.word	0x40004800
 800bcf0:	40004c00 	.word	0x40004c00
 800bcf4:	40005000 	.word	0x40005000
 800bcf8:	2340      	movs	r3, #64	; 0x40
 800bcfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcfe:	e124      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bd00:	2380      	movs	r3, #128	; 0x80
 800bd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd06:	e120      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4acc      	ldr	r2, [pc, #816]	; (800c040 <UART_SetConfig+0x698>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d176      	bne.n	800be00 <UART_SetConfig+0x458>
 800bd12:	4bcc      	ldr	r3, [pc, #816]	; (800c044 <UART_SetConfig+0x69c>)
 800bd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd1a:	2b28      	cmp	r3, #40	; 0x28
 800bd1c:	d86c      	bhi.n	800bdf8 <UART_SetConfig+0x450>
 800bd1e:	a201      	add	r2, pc, #4	; (adr r2, 800bd24 <UART_SetConfig+0x37c>)
 800bd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd24:	0800bdc9 	.word	0x0800bdc9
 800bd28:	0800bdf9 	.word	0x0800bdf9
 800bd2c:	0800bdf9 	.word	0x0800bdf9
 800bd30:	0800bdf9 	.word	0x0800bdf9
 800bd34:	0800bdf9 	.word	0x0800bdf9
 800bd38:	0800bdf9 	.word	0x0800bdf9
 800bd3c:	0800bdf9 	.word	0x0800bdf9
 800bd40:	0800bdf9 	.word	0x0800bdf9
 800bd44:	0800bdd1 	.word	0x0800bdd1
 800bd48:	0800bdf9 	.word	0x0800bdf9
 800bd4c:	0800bdf9 	.word	0x0800bdf9
 800bd50:	0800bdf9 	.word	0x0800bdf9
 800bd54:	0800bdf9 	.word	0x0800bdf9
 800bd58:	0800bdf9 	.word	0x0800bdf9
 800bd5c:	0800bdf9 	.word	0x0800bdf9
 800bd60:	0800bdf9 	.word	0x0800bdf9
 800bd64:	0800bdd9 	.word	0x0800bdd9
 800bd68:	0800bdf9 	.word	0x0800bdf9
 800bd6c:	0800bdf9 	.word	0x0800bdf9
 800bd70:	0800bdf9 	.word	0x0800bdf9
 800bd74:	0800bdf9 	.word	0x0800bdf9
 800bd78:	0800bdf9 	.word	0x0800bdf9
 800bd7c:	0800bdf9 	.word	0x0800bdf9
 800bd80:	0800bdf9 	.word	0x0800bdf9
 800bd84:	0800bde1 	.word	0x0800bde1
 800bd88:	0800bdf9 	.word	0x0800bdf9
 800bd8c:	0800bdf9 	.word	0x0800bdf9
 800bd90:	0800bdf9 	.word	0x0800bdf9
 800bd94:	0800bdf9 	.word	0x0800bdf9
 800bd98:	0800bdf9 	.word	0x0800bdf9
 800bd9c:	0800bdf9 	.word	0x0800bdf9
 800bda0:	0800bdf9 	.word	0x0800bdf9
 800bda4:	0800bde9 	.word	0x0800bde9
 800bda8:	0800bdf9 	.word	0x0800bdf9
 800bdac:	0800bdf9 	.word	0x0800bdf9
 800bdb0:	0800bdf9 	.word	0x0800bdf9
 800bdb4:	0800bdf9 	.word	0x0800bdf9
 800bdb8:	0800bdf9 	.word	0x0800bdf9
 800bdbc:	0800bdf9 	.word	0x0800bdf9
 800bdc0:	0800bdf9 	.word	0x0800bdf9
 800bdc4:	0800bdf1 	.word	0x0800bdf1
 800bdc8:	2301      	movs	r3, #1
 800bdca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdce:	e0bc      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bdd0:	2304      	movs	r3, #4
 800bdd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdd6:	e0b8      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bdd8:	2308      	movs	r3, #8
 800bdda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdde:	e0b4      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bde0:	2310      	movs	r3, #16
 800bde2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bde6:	e0b0      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bde8:	2320      	movs	r3, #32
 800bdea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdee:	e0ac      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bdf0:	2340      	movs	r3, #64	; 0x40
 800bdf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdf6:	e0a8      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bdf8:	2380      	movs	r3, #128	; 0x80
 800bdfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdfe:	e0a4      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a90      	ldr	r2, [pc, #576]	; (800c048 <UART_SetConfig+0x6a0>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d130      	bne.n	800be6c <UART_SetConfig+0x4c4>
 800be0a:	4b8e      	ldr	r3, [pc, #568]	; (800c044 <UART_SetConfig+0x69c>)
 800be0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be0e:	f003 0307 	and.w	r3, r3, #7
 800be12:	2b05      	cmp	r3, #5
 800be14:	d826      	bhi.n	800be64 <UART_SetConfig+0x4bc>
 800be16:	a201      	add	r2, pc, #4	; (adr r2, 800be1c <UART_SetConfig+0x474>)
 800be18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1c:	0800be35 	.word	0x0800be35
 800be20:	0800be3d 	.word	0x0800be3d
 800be24:	0800be45 	.word	0x0800be45
 800be28:	0800be4d 	.word	0x0800be4d
 800be2c:	0800be55 	.word	0x0800be55
 800be30:	0800be5d 	.word	0x0800be5d
 800be34:	2300      	movs	r3, #0
 800be36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be3a:	e086      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800be3c:	2304      	movs	r3, #4
 800be3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be42:	e082      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800be44:	2308      	movs	r3, #8
 800be46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be4a:	e07e      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800be4c:	2310      	movs	r3, #16
 800be4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be52:	e07a      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800be54:	2320      	movs	r3, #32
 800be56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be5a:	e076      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800be5c:	2340      	movs	r3, #64	; 0x40
 800be5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be62:	e072      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800be64:	2380      	movs	r3, #128	; 0x80
 800be66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be6a:	e06e      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a76      	ldr	r2, [pc, #472]	; (800c04c <UART_SetConfig+0x6a4>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d130      	bne.n	800bed8 <UART_SetConfig+0x530>
 800be76:	4b73      	ldr	r3, [pc, #460]	; (800c044 <UART_SetConfig+0x69c>)
 800be78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be7a:	f003 0307 	and.w	r3, r3, #7
 800be7e:	2b05      	cmp	r3, #5
 800be80:	d826      	bhi.n	800bed0 <UART_SetConfig+0x528>
 800be82:	a201      	add	r2, pc, #4	; (adr r2, 800be88 <UART_SetConfig+0x4e0>)
 800be84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be88:	0800bea1 	.word	0x0800bea1
 800be8c:	0800bea9 	.word	0x0800bea9
 800be90:	0800beb1 	.word	0x0800beb1
 800be94:	0800beb9 	.word	0x0800beb9
 800be98:	0800bec1 	.word	0x0800bec1
 800be9c:	0800bec9 	.word	0x0800bec9
 800bea0:	2300      	movs	r3, #0
 800bea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bea6:	e050      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bea8:	2304      	movs	r3, #4
 800beaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beae:	e04c      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800beb0:	2308      	movs	r3, #8
 800beb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beb6:	e048      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800beb8:	2310      	movs	r3, #16
 800beba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bebe:	e044      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bec0:	2320      	movs	r3, #32
 800bec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bec6:	e040      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bec8:	2340      	movs	r3, #64	; 0x40
 800beca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bece:	e03c      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bed0:	2380      	movs	r3, #128	; 0x80
 800bed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bed6:	e038      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a5c      	ldr	r2, [pc, #368]	; (800c050 <UART_SetConfig+0x6a8>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d130      	bne.n	800bf44 <UART_SetConfig+0x59c>
 800bee2:	4b58      	ldr	r3, [pc, #352]	; (800c044 <UART_SetConfig+0x69c>)
 800bee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bee6:	f003 0307 	and.w	r3, r3, #7
 800beea:	2b05      	cmp	r3, #5
 800beec:	d826      	bhi.n	800bf3c <UART_SetConfig+0x594>
 800beee:	a201      	add	r2, pc, #4	; (adr r2, 800bef4 <UART_SetConfig+0x54c>)
 800bef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef4:	0800bf0d 	.word	0x0800bf0d
 800bef8:	0800bf15 	.word	0x0800bf15
 800befc:	0800bf1d 	.word	0x0800bf1d
 800bf00:	0800bf25 	.word	0x0800bf25
 800bf04:	0800bf2d 	.word	0x0800bf2d
 800bf08:	0800bf35 	.word	0x0800bf35
 800bf0c:	2302      	movs	r3, #2
 800bf0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf12:	e01a      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bf14:	2304      	movs	r3, #4
 800bf16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf1a:	e016      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bf1c:	2308      	movs	r3, #8
 800bf1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf22:	e012      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bf24:	2310      	movs	r3, #16
 800bf26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf2a:	e00e      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bf2c:	2320      	movs	r3, #32
 800bf2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf32:	e00a      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bf34:	2340      	movs	r3, #64	; 0x40
 800bf36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf3a:	e006      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bf3c:	2380      	movs	r3, #128	; 0x80
 800bf3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf42:	e002      	b.n	800bf4a <UART_SetConfig+0x5a2>
 800bf44:	2380      	movs	r3, #128	; 0x80
 800bf46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a40      	ldr	r2, [pc, #256]	; (800c050 <UART_SetConfig+0x6a8>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	f040 80ef 	bne.w	800c134 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bf56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf5a:	2b20      	cmp	r3, #32
 800bf5c:	dc46      	bgt.n	800bfec <UART_SetConfig+0x644>
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	f2c0 8081 	blt.w	800c066 <UART_SetConfig+0x6be>
 800bf64:	3b02      	subs	r3, #2
 800bf66:	2b1e      	cmp	r3, #30
 800bf68:	d87d      	bhi.n	800c066 <UART_SetConfig+0x6be>
 800bf6a:	a201      	add	r2, pc, #4	; (adr r2, 800bf70 <UART_SetConfig+0x5c8>)
 800bf6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf70:	0800bff3 	.word	0x0800bff3
 800bf74:	0800c067 	.word	0x0800c067
 800bf78:	0800bffb 	.word	0x0800bffb
 800bf7c:	0800c067 	.word	0x0800c067
 800bf80:	0800c067 	.word	0x0800c067
 800bf84:	0800c067 	.word	0x0800c067
 800bf88:	0800c00b 	.word	0x0800c00b
 800bf8c:	0800c067 	.word	0x0800c067
 800bf90:	0800c067 	.word	0x0800c067
 800bf94:	0800c067 	.word	0x0800c067
 800bf98:	0800c067 	.word	0x0800c067
 800bf9c:	0800c067 	.word	0x0800c067
 800bfa0:	0800c067 	.word	0x0800c067
 800bfa4:	0800c067 	.word	0x0800c067
 800bfa8:	0800c01b 	.word	0x0800c01b
 800bfac:	0800c067 	.word	0x0800c067
 800bfb0:	0800c067 	.word	0x0800c067
 800bfb4:	0800c067 	.word	0x0800c067
 800bfb8:	0800c067 	.word	0x0800c067
 800bfbc:	0800c067 	.word	0x0800c067
 800bfc0:	0800c067 	.word	0x0800c067
 800bfc4:	0800c067 	.word	0x0800c067
 800bfc8:	0800c067 	.word	0x0800c067
 800bfcc:	0800c067 	.word	0x0800c067
 800bfd0:	0800c067 	.word	0x0800c067
 800bfd4:	0800c067 	.word	0x0800c067
 800bfd8:	0800c067 	.word	0x0800c067
 800bfdc:	0800c067 	.word	0x0800c067
 800bfe0:	0800c067 	.word	0x0800c067
 800bfe4:	0800c067 	.word	0x0800c067
 800bfe8:	0800c059 	.word	0x0800c059
 800bfec:	2b40      	cmp	r3, #64	; 0x40
 800bfee:	d036      	beq.n	800c05e <UART_SetConfig+0x6b6>
 800bff0:	e039      	b.n	800c066 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bff2:	f7fd f903 	bl	80091fc <HAL_RCCEx_GetD3PCLK1Freq>
 800bff6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bff8:	e03b      	b.n	800c072 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bffa:	f107 0314 	add.w	r3, r7, #20
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fd f912 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c008:	e033      	b.n	800c072 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c00a:	f107 0308 	add.w	r3, r7, #8
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fd fa5e 	bl	80094d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c018:	e02b      	b.n	800c072 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c01a:	4b0a      	ldr	r3, [pc, #40]	; (800c044 <UART_SetConfig+0x69c>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f003 0320 	and.w	r3, r3, #32
 800c022:	2b00      	cmp	r3, #0
 800c024:	d009      	beq.n	800c03a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c026:	4b07      	ldr	r3, [pc, #28]	; (800c044 <UART_SetConfig+0x69c>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	08db      	lsrs	r3, r3, #3
 800c02c:	f003 0303 	and.w	r3, r3, #3
 800c030:	4a08      	ldr	r2, [pc, #32]	; (800c054 <UART_SetConfig+0x6ac>)
 800c032:	fa22 f303 	lsr.w	r3, r2, r3
 800c036:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c038:	e01b      	b.n	800c072 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800c03a:	4b06      	ldr	r3, [pc, #24]	; (800c054 <UART_SetConfig+0x6ac>)
 800c03c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c03e:	e018      	b.n	800c072 <UART_SetConfig+0x6ca>
 800c040:	40011400 	.word	0x40011400
 800c044:	58024400 	.word	0x58024400
 800c048:	40007800 	.word	0x40007800
 800c04c:	40007c00 	.word	0x40007c00
 800c050:	58000c00 	.word	0x58000c00
 800c054:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c058:	4bc4      	ldr	r3, [pc, #784]	; (800c36c <UART_SetConfig+0x9c4>)
 800c05a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c05c:	e009      	b.n	800c072 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c05e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c062:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c064:	e005      	b.n	800c072 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800c066:	2300      	movs	r3, #0
 800c068:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c070:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c074:	2b00      	cmp	r3, #0
 800c076:	f000 81da 	beq.w	800c42e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07e:	4abc      	ldr	r2, [pc, #752]	; (800c370 <UART_SetConfig+0x9c8>)
 800c080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c084:	461a      	mov	r2, r3
 800c086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c088:	fbb3 f3f2 	udiv	r3, r3, r2
 800c08c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	685a      	ldr	r2, [r3, #4]
 800c092:	4613      	mov	r3, r2
 800c094:	005b      	lsls	r3, r3, #1
 800c096:	4413      	add	r3, r2
 800c098:	6a3a      	ldr	r2, [r7, #32]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d305      	bcc.n	800c0aa <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0a4:	6a3a      	ldr	r2, [r7, #32]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d903      	bls.n	800c0b2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c0b0:	e1bd      	b.n	800c42e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f04f 0100 	mov.w	r1, #0
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0be:	4aac      	ldr	r2, [pc, #688]	; (800c370 <UART_SetConfig+0x9c8>)
 800c0c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	f04f 0300 	mov.w	r3, #0
 800c0ca:	f7f4 f961 	bl	8000390 <__aeabi_uldivmod>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	4610      	mov	r0, r2
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	f04f 0200 	mov.w	r2, #0
 800c0da:	f04f 0300 	mov.w	r3, #0
 800c0de:	020b      	lsls	r3, r1, #8
 800c0e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c0e4:	0202      	lsls	r2, r0, #8
 800c0e6:	6879      	ldr	r1, [r7, #4]
 800c0e8:	6849      	ldr	r1, [r1, #4]
 800c0ea:	0849      	lsrs	r1, r1, #1
 800c0ec:	4608      	mov	r0, r1
 800c0ee:	f04f 0100 	mov.w	r1, #0
 800c0f2:	1814      	adds	r4, r2, r0
 800c0f4:	eb43 0501 	adc.w	r5, r3, r1
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	f04f 0300 	mov.w	r3, #0
 800c102:	4620      	mov	r0, r4
 800c104:	4629      	mov	r1, r5
 800c106:	f7f4 f943 	bl	8000390 <__aeabi_uldivmod>
 800c10a:	4602      	mov	r2, r0
 800c10c:	460b      	mov	r3, r1
 800c10e:	4613      	mov	r3, r2
 800c110:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c118:	d308      	bcc.n	800c12c <UART_SetConfig+0x784>
 800c11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c120:	d204      	bcs.n	800c12c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c128:	60da      	str	r2, [r3, #12]
 800c12a:	e180      	b.n	800c42e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800c12c:	2301      	movs	r3, #1
 800c12e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c132:	e17c      	b.n	800c42e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	69db      	ldr	r3, [r3, #28]
 800c138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c13c:	f040 80bf 	bne.w	800c2be <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800c140:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c144:	2b20      	cmp	r3, #32
 800c146:	dc49      	bgt.n	800c1dc <UART_SetConfig+0x834>
 800c148:	2b00      	cmp	r3, #0
 800c14a:	db7c      	blt.n	800c246 <UART_SetConfig+0x89e>
 800c14c:	2b20      	cmp	r3, #32
 800c14e:	d87a      	bhi.n	800c246 <UART_SetConfig+0x89e>
 800c150:	a201      	add	r2, pc, #4	; (adr r2, 800c158 <UART_SetConfig+0x7b0>)
 800c152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c156:	bf00      	nop
 800c158:	0800c1e3 	.word	0x0800c1e3
 800c15c:	0800c1eb 	.word	0x0800c1eb
 800c160:	0800c247 	.word	0x0800c247
 800c164:	0800c247 	.word	0x0800c247
 800c168:	0800c1f3 	.word	0x0800c1f3
 800c16c:	0800c247 	.word	0x0800c247
 800c170:	0800c247 	.word	0x0800c247
 800c174:	0800c247 	.word	0x0800c247
 800c178:	0800c203 	.word	0x0800c203
 800c17c:	0800c247 	.word	0x0800c247
 800c180:	0800c247 	.word	0x0800c247
 800c184:	0800c247 	.word	0x0800c247
 800c188:	0800c247 	.word	0x0800c247
 800c18c:	0800c247 	.word	0x0800c247
 800c190:	0800c247 	.word	0x0800c247
 800c194:	0800c247 	.word	0x0800c247
 800c198:	0800c213 	.word	0x0800c213
 800c19c:	0800c247 	.word	0x0800c247
 800c1a0:	0800c247 	.word	0x0800c247
 800c1a4:	0800c247 	.word	0x0800c247
 800c1a8:	0800c247 	.word	0x0800c247
 800c1ac:	0800c247 	.word	0x0800c247
 800c1b0:	0800c247 	.word	0x0800c247
 800c1b4:	0800c247 	.word	0x0800c247
 800c1b8:	0800c247 	.word	0x0800c247
 800c1bc:	0800c247 	.word	0x0800c247
 800c1c0:	0800c247 	.word	0x0800c247
 800c1c4:	0800c247 	.word	0x0800c247
 800c1c8:	0800c247 	.word	0x0800c247
 800c1cc:	0800c247 	.word	0x0800c247
 800c1d0:	0800c247 	.word	0x0800c247
 800c1d4:	0800c247 	.word	0x0800c247
 800c1d8:	0800c239 	.word	0x0800c239
 800c1dc:	2b40      	cmp	r3, #64	; 0x40
 800c1de:	d02e      	beq.n	800c23e <UART_SetConfig+0x896>
 800c1e0:	e031      	b.n	800c246 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1e2:	f7fb fbcd 	bl	8007980 <HAL_RCC_GetPCLK1Freq>
 800c1e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1e8:	e033      	b.n	800c252 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1ea:	f7fb fbdf 	bl	80079ac <HAL_RCC_GetPCLK2Freq>
 800c1ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1f0:	e02f      	b.n	800c252 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1f2:	f107 0314 	add.w	r3, r7, #20
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fd f816 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c200:	e027      	b.n	800c252 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c202:	f107 0308 	add.w	r3, r7, #8
 800c206:	4618      	mov	r0, r3
 800c208:	f7fd f962 	bl	80094d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c210:	e01f      	b.n	800c252 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c212:	4b58      	ldr	r3, [pc, #352]	; (800c374 <UART_SetConfig+0x9cc>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f003 0320 	and.w	r3, r3, #32
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d009      	beq.n	800c232 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c21e:	4b55      	ldr	r3, [pc, #340]	; (800c374 <UART_SetConfig+0x9cc>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	08db      	lsrs	r3, r3, #3
 800c224:	f003 0303 	and.w	r3, r3, #3
 800c228:	4a53      	ldr	r2, [pc, #332]	; (800c378 <UART_SetConfig+0x9d0>)
 800c22a:	fa22 f303 	lsr.w	r3, r2, r3
 800c22e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c230:	e00f      	b.n	800c252 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c232:	4b51      	ldr	r3, [pc, #324]	; (800c378 <UART_SetConfig+0x9d0>)
 800c234:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c236:	e00c      	b.n	800c252 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c238:	4b4c      	ldr	r3, [pc, #304]	; (800c36c <UART_SetConfig+0x9c4>)
 800c23a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c23c:	e009      	b.n	800c252 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c23e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c242:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c244:	e005      	b.n	800c252 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c246:	2300      	movs	r3, #0
 800c248:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c24a:	2301      	movs	r3, #1
 800c24c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c250:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c254:	2b00      	cmp	r3, #0
 800c256:	f000 80ea 	beq.w	800c42e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c25e:	4a44      	ldr	r2, [pc, #272]	; (800c370 <UART_SetConfig+0x9c8>)
 800c260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c264:	461a      	mov	r2, r3
 800c266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c268:	fbb3 f3f2 	udiv	r3, r3, r2
 800c26c:	005a      	lsls	r2, r3, #1
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	085b      	lsrs	r3, r3, #1
 800c274:	441a      	add	r2, r3
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c27e:	b29b      	uxth	r3, r3
 800c280:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c284:	2b0f      	cmp	r3, #15
 800c286:	d916      	bls.n	800c2b6 <UART_SetConfig+0x90e>
 800c288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c28e:	d212      	bcs.n	800c2b6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c292:	b29b      	uxth	r3, r3
 800c294:	f023 030f 	bic.w	r3, r3, #15
 800c298:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29c:	085b      	lsrs	r3, r3, #1
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	f003 0307 	and.w	r3, r3, #7
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c2b2:	60da      	str	r2, [r3, #12]
 800c2b4:	e0bb      	b.n	800c42e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c2bc:	e0b7      	b.n	800c42e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c2be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c2c2:	2b20      	cmp	r3, #32
 800c2c4:	dc4a      	bgt.n	800c35c <UART_SetConfig+0x9b4>
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	f2c0 8086 	blt.w	800c3d8 <UART_SetConfig+0xa30>
 800c2cc:	2b20      	cmp	r3, #32
 800c2ce:	f200 8083 	bhi.w	800c3d8 <UART_SetConfig+0xa30>
 800c2d2:	a201      	add	r2, pc, #4	; (adr r2, 800c2d8 <UART_SetConfig+0x930>)
 800c2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d8:	0800c363 	.word	0x0800c363
 800c2dc:	0800c37d 	.word	0x0800c37d
 800c2e0:	0800c3d9 	.word	0x0800c3d9
 800c2e4:	0800c3d9 	.word	0x0800c3d9
 800c2e8:	0800c385 	.word	0x0800c385
 800c2ec:	0800c3d9 	.word	0x0800c3d9
 800c2f0:	0800c3d9 	.word	0x0800c3d9
 800c2f4:	0800c3d9 	.word	0x0800c3d9
 800c2f8:	0800c395 	.word	0x0800c395
 800c2fc:	0800c3d9 	.word	0x0800c3d9
 800c300:	0800c3d9 	.word	0x0800c3d9
 800c304:	0800c3d9 	.word	0x0800c3d9
 800c308:	0800c3d9 	.word	0x0800c3d9
 800c30c:	0800c3d9 	.word	0x0800c3d9
 800c310:	0800c3d9 	.word	0x0800c3d9
 800c314:	0800c3d9 	.word	0x0800c3d9
 800c318:	0800c3a5 	.word	0x0800c3a5
 800c31c:	0800c3d9 	.word	0x0800c3d9
 800c320:	0800c3d9 	.word	0x0800c3d9
 800c324:	0800c3d9 	.word	0x0800c3d9
 800c328:	0800c3d9 	.word	0x0800c3d9
 800c32c:	0800c3d9 	.word	0x0800c3d9
 800c330:	0800c3d9 	.word	0x0800c3d9
 800c334:	0800c3d9 	.word	0x0800c3d9
 800c338:	0800c3d9 	.word	0x0800c3d9
 800c33c:	0800c3d9 	.word	0x0800c3d9
 800c340:	0800c3d9 	.word	0x0800c3d9
 800c344:	0800c3d9 	.word	0x0800c3d9
 800c348:	0800c3d9 	.word	0x0800c3d9
 800c34c:	0800c3d9 	.word	0x0800c3d9
 800c350:	0800c3d9 	.word	0x0800c3d9
 800c354:	0800c3d9 	.word	0x0800c3d9
 800c358:	0800c3cb 	.word	0x0800c3cb
 800c35c:	2b40      	cmp	r3, #64	; 0x40
 800c35e:	d037      	beq.n	800c3d0 <UART_SetConfig+0xa28>
 800c360:	e03a      	b.n	800c3d8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c362:	f7fb fb0d 	bl	8007980 <HAL_RCC_GetPCLK1Freq>
 800c366:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c368:	e03c      	b.n	800c3e4 <UART_SetConfig+0xa3c>
 800c36a:	bf00      	nop
 800c36c:	003d0900 	.word	0x003d0900
 800c370:	0800fc60 	.word	0x0800fc60
 800c374:	58024400 	.word	0x58024400
 800c378:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c37c:	f7fb fb16 	bl	80079ac <HAL_RCC_GetPCLK2Freq>
 800c380:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c382:	e02f      	b.n	800c3e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c384:	f107 0314 	add.w	r3, r7, #20
 800c388:	4618      	mov	r0, r3
 800c38a:	f7fc ff4d 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c392:	e027      	b.n	800c3e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c394:	f107 0308 	add.w	r3, r7, #8
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fd f899 	bl	80094d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3a2:	e01f      	b.n	800c3e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3a4:	4b2c      	ldr	r3, [pc, #176]	; (800c458 <UART_SetConfig+0xab0>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 0320 	and.w	r3, r3, #32
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d009      	beq.n	800c3c4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c3b0:	4b29      	ldr	r3, [pc, #164]	; (800c458 <UART_SetConfig+0xab0>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	08db      	lsrs	r3, r3, #3
 800c3b6:	f003 0303 	and.w	r3, r3, #3
 800c3ba:	4a28      	ldr	r2, [pc, #160]	; (800c45c <UART_SetConfig+0xab4>)
 800c3bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c3c2:	e00f      	b.n	800c3e4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c3c4:	4b25      	ldr	r3, [pc, #148]	; (800c45c <UART_SetConfig+0xab4>)
 800c3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3c8:	e00c      	b.n	800c3e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c3ca:	4b25      	ldr	r3, [pc, #148]	; (800c460 <UART_SetConfig+0xab8>)
 800c3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3ce:	e009      	b.n	800c3e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3d6:	e005      	b.n	800c3e4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c3e2:	bf00      	nop
    }

    if (pclk != 0U)
 800c3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d021      	beq.n	800c42e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ee:	4a1d      	ldr	r2, [pc, #116]	; (800c464 <UART_SetConfig+0xabc>)
 800c3f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f8:	fbb3 f2f2 	udiv	r2, r3, r2
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	085b      	lsrs	r3, r3, #1
 800c402:	441a      	add	r2, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	fbb2 f3f3 	udiv	r3, r2, r3
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c412:	2b0f      	cmp	r3, #15
 800c414:	d908      	bls.n	800c428 <UART_SetConfig+0xa80>
 800c416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c41c:	d204      	bcs.n	800c428 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c424:	60da      	str	r2, [r3, #12]
 800c426:	e002      	b.n	800c42e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c428:	2301      	movs	r3, #1
 800c42a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2201      	movs	r2, #1
 800c432:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2201      	movs	r2, #1
 800c43a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c44a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3738      	adds	r7, #56	; 0x38
 800c452:	46bd      	mov	sp, r7
 800c454:	bdb0      	pop	{r4, r5, r7, pc}
 800c456:	bf00      	nop
 800c458:	58024400 	.word	0x58024400
 800c45c:	03d09000 	.word	0x03d09000
 800c460:	003d0900 	.word	0x003d0900
 800c464:	0800fc60 	.word	0x0800fc60

0800c468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c474:	f003 0301 	and.w	r3, r3, #1
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00a      	beq.n	800c492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	430a      	orrs	r2, r1
 800c490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c496:	f003 0302 	and.w	r3, r3, #2
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00a      	beq.n	800c4b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	430a      	orrs	r2, r1
 800c4b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4b8:	f003 0304 	and.w	r3, r3, #4
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00a      	beq.n	800c4d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	430a      	orrs	r2, r1
 800c4d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4da:	f003 0308 	and.w	r3, r3, #8
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00a      	beq.n	800c4f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	430a      	orrs	r2, r1
 800c4f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4fc:	f003 0310 	and.w	r3, r3, #16
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00a      	beq.n	800c51a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	430a      	orrs	r2, r1
 800c518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c51e:	f003 0320 	and.w	r3, r3, #32
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00a      	beq.n	800c53c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	430a      	orrs	r2, r1
 800c53a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c544:	2b00      	cmp	r3, #0
 800c546:	d01a      	beq.n	800c57e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	430a      	orrs	r2, r1
 800c55c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c566:	d10a      	bne.n	800c57e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	430a      	orrs	r2, r1
 800c57c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c586:	2b00      	cmp	r3, #0
 800c588:	d00a      	beq.n	800c5a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	430a      	orrs	r2, r1
 800c59e:	605a      	str	r2, [r3, #4]
  }
}
 800c5a0:	bf00      	nop
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af02      	add	r7, sp, #8
 800c5b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c5bc:	f7f5 ffb6 	bl	800252c <HAL_GetTick>
 800c5c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f003 0308 	and.w	r3, r3, #8
 800c5cc:	2b08      	cmp	r3, #8
 800c5ce:	d10e      	bne.n	800c5ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c5d4:	9300      	str	r3, [sp, #0]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 f82f 	bl	800c642 <UART_WaitOnFlagUntilTimeout>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d001      	beq.n	800c5ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5ea:	2303      	movs	r3, #3
 800c5ec:	e025      	b.n	800c63a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 0304 	and.w	r3, r3, #4
 800c5f8:	2b04      	cmp	r3, #4
 800c5fa:	d10e      	bne.n	800c61a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2200      	movs	r2, #0
 800c606:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 f819 	bl	800c642 <UART_WaitOnFlagUntilTimeout>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	d001      	beq.n	800c61a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c616:	2303      	movs	r3, #3
 800c618:	e00f      	b.n	800c63a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2220      	movs	r2, #32
 800c61e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2220      	movs	r2, #32
 800c626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b084      	sub	sp, #16
 800c646:	af00      	add	r7, sp, #0
 800c648:	60f8      	str	r0, [r7, #12]
 800c64a:	60b9      	str	r1, [r7, #8]
 800c64c:	603b      	str	r3, [r7, #0]
 800c64e:	4613      	mov	r3, r2
 800c650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c652:	e062      	b.n	800c71a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c65a:	d05e      	beq.n	800c71a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c65c:	f7f5 ff66 	bl	800252c <HAL_GetTick>
 800c660:	4602      	mov	r2, r0
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	1ad3      	subs	r3, r2, r3
 800c666:	69ba      	ldr	r2, [r7, #24]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d302      	bcc.n	800c672 <UART_WaitOnFlagUntilTimeout+0x30>
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d11d      	bne.n	800c6ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c680:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	689a      	ldr	r2, [r3, #8]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f022 0201 	bic.w	r2, r2, #1
 800c690:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2220      	movs	r2, #32
 800c696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2220      	movs	r2, #32
 800c69e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c6aa:	2303      	movs	r3, #3
 800c6ac:	e045      	b.n	800c73a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f003 0304 	and.w	r3, r3, #4
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d02e      	beq.n	800c71a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	69db      	ldr	r3, [r3, #28]
 800c6c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c6c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c6ca:	d126      	bne.n	800c71a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c6e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	689a      	ldr	r2, [r3, #8]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f022 0201 	bic.w	r2, r2, #1
 800c6f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2220      	movs	r2, #32
 800c6fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2220      	movs	r2, #32
 800c702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2220      	movs	r2, #32
 800c70a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2200      	movs	r2, #0
 800c712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c716:	2303      	movs	r3, #3
 800c718:	e00f      	b.n	800c73a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	69da      	ldr	r2, [r3, #28]
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	4013      	ands	r3, r2
 800c724:	68ba      	ldr	r2, [r7, #8]
 800c726:	429a      	cmp	r2, r3
 800c728:	bf0c      	ite	eq
 800c72a:	2301      	moveq	r3, #1
 800c72c:	2300      	movne	r3, #0
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	461a      	mov	r2, r3
 800c732:	79fb      	ldrb	r3, [r7, #7]
 800c734:	429a      	cmp	r2, r3
 800c736:	d08d      	beq.n	800c654 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c742:	b480      	push	{r7}
 800c744:	b085      	sub	sp, #20
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c750:	2b01      	cmp	r3, #1
 800c752:	d101      	bne.n	800c758 <HAL_UARTEx_DisableFifoMode+0x16>
 800c754:	2302      	movs	r3, #2
 800c756:	e027      	b.n	800c7a8 <HAL_UARTEx_DisableFifoMode+0x66>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2224      	movs	r2, #36	; 0x24
 800c764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f022 0201 	bic.w	r2, r2, #1
 800c77e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c786:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2220      	movs	r2, #32
 800c79a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3714      	adds	r7, #20
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d101      	bne.n	800c7cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c7c8:	2302      	movs	r3, #2
 800c7ca:	e02d      	b.n	800c828 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2224      	movs	r2, #36	; 0x24
 800c7d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f022 0201 	bic.w	r2, r2, #1
 800c7f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	683a      	ldr	r2, [r7, #0]
 800c804:	430a      	orrs	r2, r1
 800c806:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 f84f 	bl	800c8ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	68fa      	ldr	r2, [r7, #12]
 800c814:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2220      	movs	r2, #32
 800c81a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c826:	2300      	movs	r3, #0
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3710      	adds	r7, #16
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c840:	2b01      	cmp	r3, #1
 800c842:	d101      	bne.n	800c848 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c844:	2302      	movs	r3, #2
 800c846:	e02d      	b.n	800c8a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2224      	movs	r2, #36	; 0x24
 800c854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f022 0201 	bic.w	r2, r2, #1
 800c86e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	683a      	ldr	r2, [r7, #0]
 800c880:	430a      	orrs	r2, r1
 800c882:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 f811 	bl	800c8ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2220      	movs	r2, #32
 800c896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2200      	movs	r2, #0
 800c89e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3710      	adds	r7, #16
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d108      	bne.n	800c8ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c8cc:	e031      	b.n	800c932 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c8ce:	2310      	movs	r3, #16
 800c8d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c8d2:	2310      	movs	r3, #16
 800c8d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	0e5b      	lsrs	r3, r3, #25
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	f003 0307 	and.w	r3, r3, #7
 800c8e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	0f5b      	lsrs	r3, r3, #29
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	f003 0307 	and.w	r3, r3, #7
 800c8f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8f6:	7bbb      	ldrb	r3, [r7, #14]
 800c8f8:	7b3a      	ldrb	r2, [r7, #12]
 800c8fa:	4911      	ldr	r1, [pc, #68]	; (800c940 <UARTEx_SetNbDataToProcess+0x94>)
 800c8fc:	5c8a      	ldrb	r2, [r1, r2]
 800c8fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c902:	7b3a      	ldrb	r2, [r7, #12]
 800c904:	490f      	ldr	r1, [pc, #60]	; (800c944 <UARTEx_SetNbDataToProcess+0x98>)
 800c906:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c908:	fb93 f3f2 	sdiv	r3, r3, r2
 800c90c:	b29a      	uxth	r2, r3
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c914:	7bfb      	ldrb	r3, [r7, #15]
 800c916:	7b7a      	ldrb	r2, [r7, #13]
 800c918:	4909      	ldr	r1, [pc, #36]	; (800c940 <UARTEx_SetNbDataToProcess+0x94>)
 800c91a:	5c8a      	ldrb	r2, [r1, r2]
 800c91c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c920:	7b7a      	ldrb	r2, [r7, #13]
 800c922:	4908      	ldr	r1, [pc, #32]	; (800c944 <UARTEx_SetNbDataToProcess+0x98>)
 800c924:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c926:	fb93 f3f2 	sdiv	r3, r3, r2
 800c92a:	b29a      	uxth	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c932:	bf00      	nop
 800c934:	3714      	adds	r7, #20
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	0800fc78 	.word	0x0800fc78
 800c944:	0800fc80 	.word	0x0800fc80

0800c948 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800c948:	b480      	push	{r7}
 800c94a:	b087      	sub	sp, #28
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c95c:	683a      	ldr	r2, [r7, #0]
 800c95e:	6812      	ldr	r2, [r2, #0]
 800c960:	f023 0101 	bic.w	r1, r3, #1
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	2b08      	cmp	r3, #8
 800c970:	d102      	bne.n	800c978 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c972:	2340      	movs	r3, #64	; 0x40
 800c974:	617b      	str	r3, [r7, #20]
 800c976:	e001      	b.n	800c97c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800c978:	2300      	movs	r3, #0
 800c97a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800c988:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800c98e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800c994:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800c99a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800c9a0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800c9a6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800c9ac:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800c9b2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800c9b8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9c6:	693a      	ldr	r2, [r7, #16]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9d0:	693a      	ldr	r2, [r7, #16]
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9da:	693a      	ldr	r2, [r7, #16]
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800c9e0:	4b20      	ldr	r3, [pc, #128]	; (800ca64 <FMC_NORSRAM_Init+0x11c>)
 800c9e2:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9ea:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c9f2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800c9fa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	43db      	mvns	r3, r3
 800ca0a:	ea02 0103 	and.w	r1, r2, r3
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	4319      	orrs	r1, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca24:	d10c      	bne.n	800ca40 <FMC_NORSRAM_Init+0xf8>
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d008      	beq.n	800ca40 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca3a:	431a      	orrs	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d006      	beq.n	800ca56 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca50:	431a      	orrs	r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	371c      	adds	r7, #28
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr
 800ca64:	0008fb7f 	.word	0x0008fb7f

0800ca68 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b087      	sub	sp, #28
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	1c5a      	adds	r2, r3, #1
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca7e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	011b      	lsls	r3, r3, #4
 800ca8c:	431a      	orrs	r2, r3
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	689b      	ldr	r3, [r3, #8]
 800ca92:	021b      	lsls	r3, r3, #8
 800ca94:	431a      	orrs	r2, r3
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	041b      	lsls	r3, r3, #16
 800ca9c:	431a      	orrs	r2, r3
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	3b01      	subs	r3, #1
 800caa4:	051b      	lsls	r3, r3, #20
 800caa6:	431a      	orrs	r2, r3
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	695b      	ldr	r3, [r3, #20]
 800caac:	3b02      	subs	r3, #2
 800caae:	061b      	lsls	r3, r3, #24
 800cab0:	431a      	orrs	r2, r3
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	699b      	ldr	r3, [r3, #24]
 800cab6:	4313      	orrs	r3, r2
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	3201      	adds	r2, #1
 800cabc:	4319      	orrs	r1, r3
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cacc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cad0:	d113      	bne.n	800cafa <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cada:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	3b01      	subs	r3, #1
 800cae2:	051b      	lsls	r3, r3, #20
 800cae4:	697a      	ldr	r2, [r7, #20]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	431a      	orrs	r2, r3
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	371c      	adds	r7, #28
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b085      	sub	sp, #20
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb1c:	d11d      	bne.n	800cb5a <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cb26:	4b13      	ldr	r3, [pc, #76]	; (800cb74 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800cb28:	4013      	ands	r3, r2
 800cb2a:	68ba      	ldr	r2, [r7, #8]
 800cb2c:	6811      	ldr	r1, [r2, #0]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	6852      	ldr	r2, [r2, #4]
 800cb32:	0112      	lsls	r2, r2, #4
 800cb34:	4311      	orrs	r1, r2
 800cb36:	68ba      	ldr	r2, [r7, #8]
 800cb38:	6892      	ldr	r2, [r2, #8]
 800cb3a:	0212      	lsls	r2, r2, #8
 800cb3c:	4311      	orrs	r1, r2
 800cb3e:	68ba      	ldr	r2, [r7, #8]
 800cb40:	6992      	ldr	r2, [r2, #24]
 800cb42:	4311      	orrs	r1, r2
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	68d2      	ldr	r2, [r2, #12]
 800cb48:	0412      	lsls	r2, r2, #16
 800cb4a:	430a      	orrs	r2, r1
 800cb4c:	ea43 0102 	orr.w	r1, r3, r2
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800cb58:	e005      	b.n	800cb66 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800cb62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3714      	adds	r7, #20
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	cff00000 	.word	0xcff00000

0800cb78 <ssd1362_Reset>:
void ssd1362_writeBuffer(uint8_t* buffer, uint16_t buff_size);

uint8_t frameBuffer[(SSD1362_HEIGHT * SSD1362_WIDTH) / 2];   // Should mirror the display's own frameBuffer.
uint8_t changedPixels[2048]; // Each bit of this array represets whether a given byte of frameBuffer (e.g. a pair of pixels) is not up to date.

void ssd1362_Reset(void) {
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	af00      	add	r7, sp, #0
    // Reset the OLED
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_RESET);
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb82:	4808      	ldr	r0, [pc, #32]	; (800cba4 <ssd1362_Reset+0x2c>)
 800cb84:	f7f9 fed0 	bl	8006928 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800cb88:	200a      	movs	r0, #10
 800cb8a:	f7f5 fcdb 	bl	8002544 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_SET);
 800cb8e:	2201      	movs	r2, #1
 800cb90:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb94:	4803      	ldr	r0, [pc, #12]	; (800cba4 <ssd1362_Reset+0x2c>)
 800cb96:	f7f9 fec7 	bl	8006928 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800cb9a:	200a      	movs	r0, #10
 800cb9c:	f7f5 fcd2 	bl	8002544 <HAL_Delay>
}
 800cba0:	bf00      	nop
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	58020400 	.word	0x58020400

0800cba8 <ssd1362_writeCmd>:

//Writes a command byte to the driver
void ssd1362_writeCmd(uint8_t reg)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	4603      	mov	r3, r0
 800cbb0:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_REG, (uint8_t *)&reg, 1);
 800cbb2:	1dfa      	adds	r2, r7, #7
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800cbba:	4803      	ldr	r0, [pc, #12]	; (800cbc8 <ssd1362_writeCmd+0x20>)
 800cbbc:	f7fe f924 	bl	800ae08 <HAL_SRAM_Write_8b>
}
 800cbc0:	bf00      	nop
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	240038bc 	.word	0x240038bc

0800cbcc <ssd1362_writeData>:

//Writes 1 byte to the display's memory
void ssd1362_writeData(uint8_t data)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_RAM, (uint8_t *)&data, 1);
 800cbd6:	1dfa      	adds	r2, r7, #7
 800cbd8:	2301      	movs	r3, #1
 800cbda:	4904      	ldr	r1, [pc, #16]	; (800cbec <ssd1362_writeData+0x20>)
 800cbdc:	4804      	ldr	r0, [pc, #16]	; (800cbf0 <ssd1362_writeData+0x24>)
 800cbde:	f7fe f913 	bl	800ae08 <HAL_SRAM_Write_8b>
}
 800cbe2:	bf00      	nop
 800cbe4:	3708      	adds	r7, #8
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	c0000001 	.word	0xc0000001
 800cbf0:	240038bc 	.word	0x240038bc

0800cbf4 <bitWrite>:
void ssd1362_writeBuffer(uint8_t* buffer, uint16_t buff_size)
{
    HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_RAM, (uint8_t *)buffer, buff_size);
}

void bitWrite(uint8_t *x, uint8_t n, uint8_t value) {
 800cbf4:	b480      	push	{r7}
 800cbf6:	b083      	sub	sp, #12
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	70fb      	strb	r3, [r7, #3]
 800cc00:	4613      	mov	r3, r2
 800cc02:	70bb      	strb	r3, [r7, #2]
   if (value)
 800cc04:	78bb      	ldrb	r3, [r7, #2]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00d      	beq.n	800cc26 <bitWrite+0x32>
      *x |= (1 << n);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	b25a      	sxtb	r2, r3
 800cc10:	78fb      	ldrb	r3, [r7, #3]
 800cc12:	2101      	movs	r1, #1
 800cc14:	fa01 f303 	lsl.w	r3, r1, r3
 800cc18:	b25b      	sxtb	r3, r3
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	b25b      	sxtb	r3, r3
 800cc1e:	b2da      	uxtb	r2, r3
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	701a      	strb	r2, [r3, #0]
   else
      *x &= ~(1 << n);
}
 800cc24:	e00e      	b.n	800cc44 <bitWrite+0x50>
      *x &= ~(1 << n);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	b25a      	sxtb	r2, r3
 800cc2c:	78fb      	ldrb	r3, [r7, #3]
 800cc2e:	2101      	movs	r1, #1
 800cc30:	fa01 f303 	lsl.w	r3, r1, r3
 800cc34:	b25b      	sxtb	r3, r3
 800cc36:	43db      	mvns	r3, r3
 800cc38:	b25b      	sxtb	r3, r3
 800cc3a:	4013      	ands	r3, r2
 800cc3c:	b25b      	sxtb	r3, r3
 800cc3e:	b2da      	uxtb	r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	701a      	strb	r2, [r3, #0]
}
 800cc44:	bf00      	nop
 800cc46:	370c      	adds	r7, #12
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <bitRead>:

char bitRead(uint8_t *x, uint8_t n) {
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	460b      	mov	r3, r1
 800cc5a:	70fb      	strb	r3, [r7, #3]
   return (*x & (1 << n)) ? 1 : 0;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	461a      	mov	r2, r3
 800cc62:	78fb      	ldrb	r3, [r7, #3]
 800cc64:	fa42 f303 	asr.w	r3, r2, r3
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	f003 0301 	and.w	r3, r3, #1
 800cc6e:	b2db      	uxtb	r3, r3
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	370c      	adds	r7, #12
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <ssd1362_setWriteZone>:

//defines a rectangular area of memory which the driver will itterate through. This function takes memory locations, meaning a 64x256 space
void ssd1362_setWriteZone(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800cc7c:	b590      	push	{r4, r7, lr}
 800cc7e:	b083      	sub	sp, #12
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	4604      	mov	r4, r0
 800cc84:	4608      	mov	r0, r1
 800cc86:	4611      	mov	r1, r2
 800cc88:	461a      	mov	r2, r3
 800cc8a:	4623      	mov	r3, r4
 800cc8c:	80fb      	strh	r3, [r7, #6]
 800cc8e:	4603      	mov	r3, r0
 800cc90:	80bb      	strh	r3, [r7, #4]
 800cc92:	460b      	mov	r3, r1
 800cc94:	807b      	strh	r3, [r7, #2]
 800cc96:	4613      	mov	r3, r2
 800cc98:	803b      	strh	r3, [r7, #0]
	ssd1362_writeCmd(0x15); //Set Column Address
 800cc9a:	2015      	movs	r0, #21
 800cc9c:	f7ff ff84 	bl	800cba8 <ssd1362_writeCmd>
	ssd1362_writeCmd(x1); //Beginning. Note that you must divide the column by 2, since 1 byte in memory is 2 pixels
 800cca0:	88fb      	ldrh	r3, [r7, #6]
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7ff ff7f 	bl	800cba8 <ssd1362_writeCmd>
	ssd1362_writeCmd(x2); //End
 800ccaa:	887b      	ldrh	r3, [r7, #2]
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7ff ff7a 	bl	800cba8 <ssd1362_writeCmd>

	ssd1362_writeCmd(0x75); //Set Row Address
 800ccb4:	2075      	movs	r0, #117	; 0x75
 800ccb6:	f7ff ff77 	bl	800cba8 <ssd1362_writeCmd>
	ssd1362_writeCmd(y1); //Beginning
 800ccba:	88bb      	ldrh	r3, [r7, #4]
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7ff ff72 	bl	800cba8 <ssd1362_writeCmd>
	ssd1362_writeCmd(y2); //End
 800ccc4:	883b      	ldrh	r3, [r7, #0]
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7ff ff6d 	bl	800cba8 <ssd1362_writeCmd>
}
 800ccce:	bf00      	nop
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd90      	pop	{r4, r7, pc}

0800ccd6 <ssd1362_coordsToAddress>:

//Converts a pixel location to a linear memory address
uint16_t ssd1362_coordsToAddress(uint16_t x, uint16_t y)
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	b083      	sub	sp, #12
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	4603      	mov	r3, r0
 800ccde:	460a      	mov	r2, r1
 800cce0:	80fb      	strh	r3, [r7, #6]
 800cce2:	4613      	mov	r3, r2
 800cce4:	80bb      	strh	r3, [r7, #4]
	return (x/2)+(y*128);
 800cce6:	88fb      	ldrh	r3, [r7, #6]
 800cce8:	085b      	lsrs	r3, r3, #1
 800ccea:	b29a      	uxth	r2, r3
 800ccec:	88bb      	ldrh	r3, [r7, #4]
 800ccee:	01db      	lsls	r3, r3, #7
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	4413      	add	r3, r2
 800ccf4:	b29b      	uxth	r3, r3
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	370c      	adds	r7, #12
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
	...

0800cd04 <ssd1362_setPixelChanged>:

void ssd1362_setPixelChanged(uint16_t x, uint16_t y, bool changed)
{
 800cd04:	b590      	push	{r4, r7, lr}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	80fb      	strh	r3, [r7, #6]
 800cd0e:	460b      	mov	r3, r1
 800cd10:	80bb      	strh	r3, [r7, #4]
 800cd12:	4613      	mov	r3, r2
 800cd14:	70fb      	strb	r3, [r7, #3]
	uint16_t targetByte = ssd1362_coordsToAddress(x, y)/8;
 800cd16:	88ba      	ldrh	r2, [r7, #4]
 800cd18:	88fb      	ldrh	r3, [r7, #6]
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7ff ffda 	bl	800ccd6 <ssd1362_coordsToAddress>
 800cd22:	4603      	mov	r3, r0
 800cd24:	08db      	lsrs	r3, r3, #3
 800cd26:	81fb      	strh	r3, [r7, #14]
	bitWrite(&changedPixels[targetByte], ssd1362_coordsToAddress(x, y) % 8, changed);
 800cd28:	89fb      	ldrh	r3, [r7, #14]
 800cd2a:	4a0b      	ldr	r2, [pc, #44]	; (800cd58 <ssd1362_setPixelChanged+0x54>)
 800cd2c:	189c      	adds	r4, r3, r2
 800cd2e:	88ba      	ldrh	r2, [r7, #4]
 800cd30:	88fb      	ldrh	r3, [r7, #6]
 800cd32:	4611      	mov	r1, r2
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7ff ffce 	bl	800ccd6 <ssd1362_coordsToAddress>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	f003 0307 	and.w	r3, r3, #7
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	78fa      	ldrb	r2, [r7, #3]
 800cd46:	4619      	mov	r1, r3
 800cd48:	4620      	mov	r0, r4
 800cd4a:	f7ff ff53 	bl	800cbf4 <bitWrite>
}
 800cd4e:	bf00      	nop
 800cd50:	3714      	adds	r7, #20
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd90      	pop	{r4, r7, pc}
 800cd56:	bf00      	nop
 800cd58:	24003cc4 	.word	0x24003cc4

0800cd5c <ssd1362_drawPixel>:

//pixel xy coordinates 0-255, color 0-15, and whether to immediately output it to the display or buffer it
void ssd1362_drawPixel(uint16_t x, uint16_t y, uint8_t color, bool display)
{
 800cd5c:	b590      	push	{r4, r7, lr}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	4604      	mov	r4, r0
 800cd64:	4608      	mov	r0, r1
 800cd66:	4611      	mov	r1, r2
 800cd68:	461a      	mov	r2, r3
 800cd6a:	4623      	mov	r3, r4
 800cd6c:	80fb      	strh	r3, [r7, #6]
 800cd6e:	4603      	mov	r3, r0
 800cd70:	80bb      	strh	r3, [r7, #4]
 800cd72:	460b      	mov	r3, r1
 800cd74:	70fb      	strb	r3, [r7, #3]
 800cd76:	4613      	mov	r3, r2
 800cd78:	70bb      	strb	r3, [r7, #2]
	uint32_t address = ssd1362_coordsToAddress(x,y);
 800cd7a:	88ba      	ldrh	r2, [r7, #4]
 800cd7c:	88fb      	ldrh	r3, [r7, #6]
 800cd7e:	4611      	mov	r1, r2
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7ff ffa8 	bl	800ccd6 <ssd1362_coordsToAddress>
 800cd86:	4603      	mov	r3, r0
 800cd88:	60fb      	str	r3, [r7, #12]
	if((x%2) == 0)
 800cd8a:	88fb      	ldrh	r3, [r7, #6]
 800cd8c:	f003 0301 	and.w	r3, r3, #1
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d113      	bne.n	800cdbe <ssd1362_drawPixel+0x62>
	{//If this is an even pixel, and therefore needs shifting to the more significant nibble
		frameBuffer[address] = (frameBuffer[address] & 0x0f) | (color<<4);
 800cd96:	4a25      	ldr	r2, [pc, #148]	; (800ce2c <ssd1362_drawPixel+0xd0>)
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	b25b      	sxtb	r3, r3
 800cda0:	f003 030f 	and.w	r3, r3, #15
 800cda4:	b25a      	sxtb	r2, r3
 800cda6:	78fb      	ldrb	r3, [r7, #3]
 800cda8:	011b      	lsls	r3, r3, #4
 800cdaa:	b25b      	sxtb	r3, r3
 800cdac:	4313      	orrs	r3, r2
 800cdae:	b25b      	sxtb	r3, r3
 800cdb0:	b2d9      	uxtb	r1, r3
 800cdb2:	4a1e      	ldr	r2, [pc, #120]	; (800ce2c <ssd1362_drawPixel+0xd0>)
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	460a      	mov	r2, r1
 800cdba:	701a      	strb	r2, [r3, #0]
 800cdbc:	e011      	b.n	800cde2 <ssd1362_drawPixel+0x86>
	} else {
		frameBuffer[address] = (frameBuffer[address] & 0xf0) | (color);
 800cdbe:	4a1b      	ldr	r2, [pc, #108]	; (800ce2c <ssd1362_drawPixel+0xd0>)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	4413      	add	r3, r2
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	b25b      	sxtb	r3, r3
 800cdc8:	f023 030f 	bic.w	r3, r3, #15
 800cdcc:	b25a      	sxtb	r2, r3
 800cdce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	b25b      	sxtb	r3, r3
 800cdd6:	b2d9      	uxtb	r1, r3
 800cdd8:	4a14      	ldr	r2, [pc, #80]	; (800ce2c <ssd1362_drawPixel+0xd0>)
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	4413      	add	r3, r2
 800cdde:	460a      	mov	r2, r1
 800cde0:	701a      	strb	r2, [r3, #0]
	}

	if(display)
 800cde2:	78bb      	ldrb	r3, [r7, #2]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d017      	beq.n	800ce18 <ssd1362_drawPixel+0xbc>
	{
		ssd1362_setWriteZone(x/2,y,x/2,y);
 800cde8:	88fb      	ldrh	r3, [r7, #6]
 800cdea:	085b      	lsrs	r3, r3, #1
 800cdec:	b298      	uxth	r0, r3
 800cdee:	88fb      	ldrh	r3, [r7, #6]
 800cdf0:	085b      	lsrs	r3, r3, #1
 800cdf2:	b29a      	uxth	r2, r3
 800cdf4:	88bb      	ldrh	r3, [r7, #4]
 800cdf6:	88b9      	ldrh	r1, [r7, #4]
 800cdf8:	f7ff ff40 	bl	800cc7c <ssd1362_setWriteZone>
		ssd1362_writeData(frameBuffer[address]);
 800cdfc:	4a0b      	ldr	r2, [pc, #44]	; (800ce2c <ssd1362_drawPixel+0xd0>)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	4413      	add	r3, r2
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7ff fee1 	bl	800cbcc <ssd1362_writeData>
		ssd1362_setPixelChanged(x, y, false); // We've now synced the display with this byte of the buffer, no need to write it again
 800ce0a:	88b9      	ldrh	r1, [r7, #4]
 800ce0c:	88fb      	ldrh	r3, [r7, #6]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7ff ff77 	bl	800cd04 <ssd1362_setPixelChanged>
	} else {
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
	}
}
 800ce16:	e005      	b.n	800ce24 <ssd1362_drawPixel+0xc8>
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
 800ce18:	88b9      	ldrh	r1, [r7, #4]
 800ce1a:	88fb      	ldrh	r3, [r7, #6]
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7ff ff70 	bl	800cd04 <ssd1362_setPixelChanged>
}
 800ce24:	bf00      	nop
 800ce26:	3714      	adds	r7, #20
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd90      	pop	{r4, r7, pc}
 800ce2c:	240044c4 	.word	0x240044c4

0800ce30 <ssd1362_drawHLine>:
		}
	}
}

void ssd1362_drawHLine(uint16_t x, uint16_t y, uint16_t length, uint8_t color, bool display)
	{
 800ce30:	b590      	push	{r4, r7, lr}
 800ce32:	b085      	sub	sp, #20
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	4604      	mov	r4, r0
 800ce38:	4608      	mov	r0, r1
 800ce3a:	4611      	mov	r1, r2
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	4623      	mov	r3, r4
 800ce40:	80fb      	strh	r3, [r7, #6]
 800ce42:	4603      	mov	r3, r0
 800ce44:	80bb      	strh	r3, [r7, #4]
 800ce46:	460b      	mov	r3, r1
 800ce48:	807b      	strh	r3, [r7, #2]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	707b      	strb	r3, [r7, #1]
	for (uint32_t i = x; i < x+length; i++)
 800ce4e:	88fb      	ldrh	r3, [r7, #6]
 800ce50:	60fb      	str	r3, [r7, #12]
 800ce52:	e00a      	b.n	800ce6a <ssd1362_drawHLine+0x3a>
	{
		ssd1362_drawPixel(i, y, color, display);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	b298      	uxth	r0, r3
 800ce58:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce5c:	787a      	ldrb	r2, [r7, #1]
 800ce5e:	88b9      	ldrh	r1, [r7, #4]
 800ce60:	f7ff ff7c 	bl	800cd5c <ssd1362_drawPixel>
	for (uint32_t i = x; i < x+length; i++)
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	3301      	adds	r3, #1
 800ce68:	60fb      	str	r3, [r7, #12]
 800ce6a:	88fa      	ldrh	r2, [r7, #6]
 800ce6c:	887b      	ldrh	r3, [r7, #2]
 800ce6e:	4413      	add	r3, r2
 800ce70:	461a      	mov	r2, r3
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d3ed      	bcc.n	800ce54 <ssd1362_drawHLine+0x24>
	}
}
 800ce78:	bf00      	nop
 800ce7a:	bf00      	nop
 800ce7c:	3714      	adds	r7, #20
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd90      	pop	{r4, r7, pc}

0800ce82 <ssd1362_drawByteAsRow>:
	}
}

//Draws a byte as an 8 pixel row
void ssd1362_drawByteAsRow(uint16_t x, uint16_t y, uint8_t byte, uint8_t color)
{
 800ce82:	b590      	push	{r4, r7, lr}
 800ce84:	b085      	sub	sp, #20
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	4604      	mov	r4, r0
 800ce8a:	4608      	mov	r0, r1
 800ce8c:	4611      	mov	r1, r2
 800ce8e:	461a      	mov	r2, r3
 800ce90:	4623      	mov	r3, r4
 800ce92:	80fb      	strh	r3, [r7, #6]
 800ce94:	4603      	mov	r3, r0
 800ce96:	80bb      	strh	r3, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	70fb      	strb	r3, [r7, #3]
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	70bb      	strb	r3, [r7, #2]
	for (uint32_t i = 0; i < 8; i++)
 800cea0:	2300      	movs	r3, #0
 800cea2:	60fb      	str	r3, [r7, #12]
 800cea4:	e016      	b.n	800ced4 <ssd1362_drawByteAsRow+0x52>
	{
		if(bitRead(&byte, i))
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	b2da      	uxtb	r2, r3
 800ceaa:	1cfb      	adds	r3, r7, #3
 800ceac:	4611      	mov	r1, r2
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7ff fece 	bl	800cc50 <bitRead>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d009      	beq.n	800cece <ssd1362_drawByteAsRow+0x4c>
	{
			ssd1362_drawPixel(x+i, y, color, false);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	88fb      	ldrh	r3, [r7, #6]
 800cec0:	4413      	add	r3, r2
 800cec2:	b298      	uxth	r0, r3
 800cec4:	78ba      	ldrb	r2, [r7, #2]
 800cec6:	88b9      	ldrh	r1, [r7, #4]
 800cec8:	2300      	movs	r3, #0
 800ceca:	f7ff ff47 	bl	800cd5c <ssd1362_drawPixel>
	for (uint32_t i = 0; i < 8; i++)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	3301      	adds	r3, #1
 800ced2:	60fb      	str	r3, [r7, #12]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2b07      	cmp	r3, #7
 800ced8:	d9e5      	bls.n	800cea6 <ssd1362_drawByteAsRow+0x24>
		}
	}
}
 800ceda:	bf00      	nop
 800cedc:	bf00      	nop
 800cede:	3714      	adds	r7, #20
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd90      	pop	{r4, r7, pc}

0800cee4 <ssd1362_drawChar>:

void ssd1362_drawChar(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 800cee4:	b590      	push	{r4, r7, lr}
 800cee6:	b085      	sub	sp, #20
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	4604      	mov	r4, r0
 800ceec:	4608      	mov	r0, r1
 800ceee:	4611      	mov	r1, r2
 800cef0:	461a      	mov	r2, r3
 800cef2:	4623      	mov	r3, r4
 800cef4:	80fb      	strh	r3, [r7, #6]
 800cef6:	4603      	mov	r3, r0
 800cef8:	80bb      	strh	r3, [r7, #4]
 800cefa:	460b      	mov	r3, r1
 800cefc:	70fb      	strb	r3, [r7, #3]
 800cefe:	4613      	mov	r3, r2
 800cf00:	70bb      	strb	r3, [r7, #2]
	for (size_t i = 0; i < 8; i++)
 800cf02:	2300      	movs	r3, #0
 800cf04:	60fb      	str	r3, [r7, #12]
 800cf06:	e012      	b.n	800cf2e <ssd1362_drawChar+0x4a>
	{
		ssd1362_drawByteAsRow(x, y+i, font8x8_basic[(unsigned char)thisChar][i], color);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	b29a      	uxth	r2, r3
 800cf0c:	88bb      	ldrh	r3, [r7, #4]
 800cf0e:	4413      	add	r3, r2
 800cf10:	b299      	uxth	r1, r3
 800cf12:	78fb      	ldrb	r3, [r7, #3]
 800cf14:	4a0a      	ldr	r2, [pc, #40]	; (800cf40 <ssd1362_drawChar+0x5c>)
 800cf16:	00db      	lsls	r3, r3, #3
 800cf18:	441a      	add	r2, r3
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	781a      	ldrb	r2, [r3, #0]
 800cf20:	78bb      	ldrb	r3, [r7, #2]
 800cf22:	88f8      	ldrh	r0, [r7, #6]
 800cf24:	f7ff ffad 	bl	800ce82 <ssd1362_drawByteAsRow>
	for (size_t i = 0; i < 8; i++)
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	60fb      	str	r3, [r7, #12]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2b07      	cmp	r3, #7
 800cf32:	d9e9      	bls.n	800cf08 <ssd1362_drawChar+0x24>
	}
}
 800cf34:	bf00      	nop
 800cf36:	bf00      	nop
 800cf38:	3714      	adds	r7, #20
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd90      	pop	{r4, r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	24003010 	.word	0x24003010

0800cf44 <ssd1362_drawCharArray>:

void ssd1362_drawCharArray(uint16_t x, uint16_t y, int8_t text[], uint8_t color, uint32_t size)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b086      	sub	sp, #24
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60ba      	str	r2, [r7, #8]
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	4603      	mov	r3, r0
 800cf50:	81fb      	strh	r3, [r7, #14]
 800cf52:	460b      	mov	r3, r1
 800cf54:	81bb      	strh	r3, [r7, #12]
 800cf56:	4613      	mov	r3, r2
 800cf58:	71fb      	strb	r3, [r7, #7]
	const int8_t* thisChar;
	uint16_t xOffset = 0;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	827b      	strh	r3, [r7, #18]
	if(size==16)
 800cf5e:	6a3b      	ldr	r3, [r7, #32]
 800cf60:	2b10      	cmp	r3, #16
 800cf62:	d11a      	bne.n	800cf9a <ssd1362_drawCharArray+0x56>
	{
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	617b      	str	r3, [r7, #20]
 800cf68:	e011      	b.n	800cf8e <ssd1362_drawCharArray+0x4a>
		{
			ssd1362_drawChar16(x+xOffset, y, *thisChar, color);
 800cf6a:	89fa      	ldrh	r2, [r7, #14]
 800cf6c:	8a7b      	ldrh	r3, [r7, #18]
 800cf6e:	4413      	add	r3, r2
 800cf70:	b298      	uxth	r0, r3
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	f993 3000 	ldrsb.w	r3, [r3]
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	79fb      	ldrb	r3, [r7, #7]
 800cf7c:	89b9      	ldrh	r1, [r7, #12]
 800cf7e:	f000 f861 	bl	800d044 <ssd1362_drawChar16>
			xOffset += 8;
 800cf82:	8a7b      	ldrh	r3, [r7, #18]
 800cf84:	3308      	adds	r3, #8
 800cf86:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	617b      	str	r3, [r7, #20]
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	f993 3000 	ldrsb.w	r3, [r3]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d1e8      	bne.n	800cf6a <ssd1362_drawCharArray+0x26>
		{
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
			xOffset += 8;
		}
	}
}
 800cf98:	e037      	b.n	800d00a <ssd1362_drawCharArray+0xc6>
	} else if(size==32)
 800cf9a:	6a3b      	ldr	r3, [r7, #32]
 800cf9c:	2b20      	cmp	r3, #32
 800cf9e:	d11a      	bne.n	800cfd6 <ssd1362_drawCharArray+0x92>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	617b      	str	r3, [r7, #20]
 800cfa4:	e011      	b.n	800cfca <ssd1362_drawCharArray+0x86>
			ssd1362_drawChar32(x+xOffset, y, *thisChar, color);
 800cfa6:	89fa      	ldrh	r2, [r7, #14]
 800cfa8:	8a7b      	ldrh	r3, [r7, #18]
 800cfaa:	4413      	add	r3, r2
 800cfac:	b298      	uxth	r0, r3
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	f993 3000 	ldrsb.w	r3, [r3]
 800cfb4:	b2da      	uxtb	r2, r3
 800cfb6:	79fb      	ldrb	r3, [r7, #7]
 800cfb8:	89b9      	ldrh	r1, [r7, #12]
 800cfba:	f000 f887 	bl	800d0cc <ssd1362_drawChar32>
			xOffset += 16;
 800cfbe:	8a7b      	ldrh	r3, [r7, #18]
 800cfc0:	3310      	adds	r3, #16
 800cfc2:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	617b      	str	r3, [r7, #20]
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	f993 3000 	ldrsb.w	r3, [r3]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d1e8      	bne.n	800cfa6 <ssd1362_drawCharArray+0x62>
}
 800cfd4:	e019      	b.n	800d00a <ssd1362_drawCharArray+0xc6>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	617b      	str	r3, [r7, #20]
 800cfda:	e011      	b.n	800d000 <ssd1362_drawCharArray+0xbc>
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
 800cfdc:	89fa      	ldrh	r2, [r7, #14]
 800cfde:	8a7b      	ldrh	r3, [r7, #18]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	b298      	uxth	r0, r3
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	f993 3000 	ldrsb.w	r3, [r3]
 800cfea:	b2da      	uxtb	r2, r3
 800cfec:	79fb      	ldrb	r3, [r7, #7]
 800cfee:	89b9      	ldrh	r1, [r7, #12]
 800cff0:	f7ff ff78 	bl	800cee4 <ssd1362_drawChar>
			xOffset += 8;
 800cff4:	8a7b      	ldrh	r3, [r7, #18]
 800cff6:	3308      	adds	r3, #8
 800cff8:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	3301      	adds	r3, #1
 800cffe:	617b      	str	r3, [r7, #20]
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	f993 3000 	ldrsb.w	r3, [r3]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d1e8      	bne.n	800cfdc <ssd1362_drawCharArray+0x98>
}
 800d00a:	bf00      	nop
 800d00c:	3718      	adds	r7, #24
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <ssd1362_drawString>:

void ssd1362_drawString(uint16_t x, uint16_t y, int8_t textString[], uint8_t color, uint32_t size)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b086      	sub	sp, #24
 800d016:	af02      	add	r7, sp, #8
 800d018:	60ba      	str	r2, [r7, #8]
 800d01a:	461a      	mov	r2, r3
 800d01c:	4603      	mov	r3, r0
 800d01e:	81fb      	strh	r3, [r7, #14]
 800d020:	460b      	mov	r3, r1
 800d022:	81bb      	strh	r3, [r7, #12]
 800d024:	4613      	mov	r3, r2
 800d026:	71fb      	strb	r3, [r7, #7]
//	uint8_t text[64];
//	textString.toCharArray(text, 64);
	ssd1362_drawCharArray(x,y, textString, color, size);
 800d028:	79fa      	ldrb	r2, [r7, #7]
 800d02a:	89b9      	ldrh	r1, [r7, #12]
 800d02c:	89f8      	ldrh	r0, [r7, #14]
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	4613      	mov	r3, r2
 800d034:	68ba      	ldr	r2, [r7, #8]
 800d036:	f7ff ff85 	bl	800cf44 <ssd1362_drawCharArray>
}
 800d03a:	bf00      	nop
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
	...

0800d044 <ssd1362_drawChar16>:

void ssd1362_drawChar16(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 800d044:	b590      	push	{r4, r7, lr}
 800d046:	b085      	sub	sp, #20
 800d048:	af00      	add	r7, sp, #0
 800d04a:	4604      	mov	r4, r0
 800d04c:	4608      	mov	r0, r1
 800d04e:	4611      	mov	r1, r2
 800d050:	461a      	mov	r2, r3
 800d052:	4623      	mov	r3, r4
 800d054:	80fb      	strh	r3, [r7, #6]
 800d056:	4603      	mov	r3, r0
 800d058:	80bb      	strh	r3, [r7, #4]
 800d05a:	460b      	mov	r3, r1
 800d05c:	70fb      	strb	r3, [r7, #3]
 800d05e:	4613      	mov	r3, r2
 800d060:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 16; row++) {
 800d062:	2300      	movs	r3, #0
 800d064:	60fb      	str	r3, [r7, #12]
 800d066:	e027      	b.n	800d0b8 <ssd1362_drawChar16+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x16[(unsigned char)thisChar][row*2], color);
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	88bb      	ldrh	r3, [r7, #4]
 800d06e:	4413      	add	r3, r2
 800d070:	b299      	uxth	r1, r3
 800d072:	78fa      	ldrb	r2, [r7, #3]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	005b      	lsls	r3, r3, #1
 800d078:	4813      	ldr	r0, [pc, #76]	; (800d0c8 <ssd1362_drawChar16+0x84>)
 800d07a:	0152      	lsls	r2, r2, #5
 800d07c:	4402      	add	r2, r0
 800d07e:	4413      	add	r3, r2
 800d080:	781a      	ldrb	r2, [r3, #0]
 800d082:	78bb      	ldrb	r3, [r7, #2]
 800d084:	88f8      	ldrh	r0, [r7, #6]
 800d086:	f7ff fefc 	bl	800ce82 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x16[(unsigned char)thisChar][(row*2)+1], color);
 800d08a:	88fb      	ldrh	r3, [r7, #6]
 800d08c:	3308      	adds	r3, #8
 800d08e:	b298      	uxth	r0, r3
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	b29a      	uxth	r2, r3
 800d094:	88bb      	ldrh	r3, [r7, #4]
 800d096:	4413      	add	r3, r2
 800d098:	b299      	uxth	r1, r3
 800d09a:	78fa      	ldrb	r2, [r7, #3]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	005b      	lsls	r3, r3, #1
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	4c09      	ldr	r4, [pc, #36]	; (800d0c8 <ssd1362_drawChar16+0x84>)
 800d0a4:	0152      	lsls	r2, r2, #5
 800d0a6:	4422      	add	r2, r4
 800d0a8:	4413      	add	r3, r2
 800d0aa:	781a      	ldrb	r2, [r3, #0]
 800d0ac:	78bb      	ldrb	r3, [r7, #2]
 800d0ae:	f7ff fee8 	bl	800ce82 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 16; row++) {
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	60fb      	str	r3, [r7, #12]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2b0f      	cmp	r3, #15
 800d0bc:	d9d4      	bls.n	800d068 <ssd1362_drawChar16+0x24>
	}
}
 800d0be:	bf00      	nop
 800d0c0:	bf00      	nop
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd90      	pop	{r4, r7, pc}
 800d0c8:	24000010 	.word	0x24000010

0800d0cc <ssd1362_drawChar32>:

void ssd1362_drawChar32(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 800d0cc:	b590      	push	{r4, r7, lr}
 800d0ce:	b085      	sub	sp, #20
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	4608      	mov	r0, r1
 800d0d6:	4611      	mov	r1, r2
 800d0d8:	461a      	mov	r2, r3
 800d0da:	4623      	mov	r3, r4
 800d0dc:	80fb      	strh	r3, [r7, #6]
 800d0de:	4603      	mov	r3, r0
 800d0e0:	80bb      	strh	r3, [r7, #4]
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	70fb      	strb	r3, [r7, #3]
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 32; row++) {
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	60fb      	str	r3, [r7, #12]
 800d0ee:	e027      	b.n	800d140 <ssd1362_drawChar32+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x32[(unsigned char)thisChar][row*2], color);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	88bb      	ldrh	r3, [r7, #4]
 800d0f6:	4413      	add	r3, r2
 800d0f8:	b299      	uxth	r1, r3
 800d0fa:	78fa      	ldrb	r2, [r7, #3]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	005b      	lsls	r3, r3, #1
 800d100:	4813      	ldr	r0, [pc, #76]	; (800d150 <ssd1362_drawChar32+0x84>)
 800d102:	0192      	lsls	r2, r2, #6
 800d104:	4402      	add	r2, r0
 800d106:	4413      	add	r3, r2
 800d108:	781a      	ldrb	r2, [r3, #0]
 800d10a:	78bb      	ldrb	r3, [r7, #2]
 800d10c:	88f8      	ldrh	r0, [r7, #6]
 800d10e:	f7ff feb8 	bl	800ce82 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x32[(unsigned char)thisChar][(row*2)+1], color);
 800d112:	88fb      	ldrh	r3, [r7, #6]
 800d114:	3308      	adds	r3, #8
 800d116:	b298      	uxth	r0, r3
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	b29a      	uxth	r2, r3
 800d11c:	88bb      	ldrh	r3, [r7, #4]
 800d11e:	4413      	add	r3, r2
 800d120:	b299      	uxth	r1, r3
 800d122:	78fa      	ldrb	r2, [r7, #3]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	005b      	lsls	r3, r3, #1
 800d128:	3301      	adds	r3, #1
 800d12a:	4c09      	ldr	r4, [pc, #36]	; (800d150 <ssd1362_drawChar32+0x84>)
 800d12c:	0192      	lsls	r2, r2, #6
 800d12e:	4422      	add	r2, r4
 800d130:	4413      	add	r3, r2
 800d132:	781a      	ldrb	r2, [r3, #0]
 800d134:	78bb      	ldrb	r3, [r7, #2]
 800d136:	f7ff fea4 	bl	800ce82 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 32; row++) {
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	3301      	adds	r3, #1
 800d13e:	60fb      	str	r3, [r7, #12]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2b1f      	cmp	r3, #31
 800d144:	d9d4      	bls.n	800d0f0 <ssd1362_drawChar32+0x24>
	}
}
 800d146:	bf00      	nop
 800d148:	bf00      	nop
 800d14a:	3714      	adds	r7, #20
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd90      	pop	{r4, r7, pc}
 800d150:	24001010 	.word	0x24001010

0800d154 <ssd1362_clearBuffer>:
	HAL_Delay(15);
	ssd1362_stopScrolling();
}

void ssd1362_clearBuffer()
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 800d15a:	2300      	movs	r3, #0
 800d15c:	607b      	str	r3, [r7, #4]
 800d15e:	e01a      	b.n	800d196 <ssd1362_clearBuffer+0x42>
	{
		// If there is a non-zero (non-black) byte here, make sure it gets updated
		if (frameBuffer[i])
 800d160:	4a11      	ldr	r2, [pc, #68]	; (800d1a8 <ssd1362_clearBuffer+0x54>)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	4413      	add	r3, r2
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d011      	beq.n	800d190 <ssd1362_clearBuffer+0x3c>
		{
			frameBuffer[i] = 0;
 800d16c:	4a0e      	ldr	r2, [pc, #56]	; (800d1a8 <ssd1362_clearBuffer+0x54>)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4413      	add	r3, r2
 800d172:	2200      	movs	r2, #0
 800d174:	701a      	strb	r2, [r3, #0]
			bitWrite(&changedPixels[i/8], i%8, 1); // Mark this pixel as needing an update
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	08db      	lsrs	r3, r3, #3
 800d17a:	4a0c      	ldr	r2, [pc, #48]	; (800d1ac <ssd1362_clearBuffer+0x58>)
 800d17c:	1898      	adds	r0, r3, r2
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	b2db      	uxtb	r3, r3
 800d182:	f003 0307 	and.w	r3, r3, #7
 800d186:	b2db      	uxtb	r3, r3
 800d188:	2201      	movs	r2, #1
 800d18a:	4619      	mov	r1, r3
 800d18c:	f7ff fd32 	bl	800cbf4 <bitWrite>
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	3301      	adds	r3, #1
 800d194:	607b      	str	r3, [r7, #4]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d19c:	d3e0      	bcc.n	800d160 <ssd1362_clearBuffer+0xc>
		}
	}
}
 800d19e:	bf00      	nop
 800d1a0:	bf00      	nop
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	240044c4 	.word	0x240044c4
 800d1ac:	24003cc4 	.word	0x24003cc4

0800d1b0 <ssd1362_writeFullBuffer>:

//Outputs the full framebuffer to the display
void ssd1362_writeFullBuffer()
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
//	ssd1362_setWriteZone(0, 0, SSD1362_WIDTH - 1, SSD1362_HEIGHT - 1); //Full display
    ssd1362_writeCmd(0X15); //Set column Address
 800d1b6:	2015      	movs	r0, #21
 800d1b8:	f7ff fcf6 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start column Address
 800d1bc:	2000      	movs	r0, #0
 800d1be:	f7ff fcf3 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X7F); //End column Address
 800d1c2:	207f      	movs	r0, #127	; 0x7f
 800d1c4:	f7ff fcf0 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X75); //Set Row Address
 800d1c8:	2075      	movs	r0, #117	; 0x75
 800d1ca:	f7ff fced 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start Row Address
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	f7ff fcea 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F); //End Row Address
 800d1d4:	203f      	movs	r0, #63	; 0x3f
 800d1d6:	f7ff fce7 	bl	800cba8 <ssd1362_writeCmd>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 800d1da:	2300      	movs	r3, #0
 800d1dc:	607b      	str	r3, [r7, #4]
 800d1de:	e009      	b.n	800d1f4 <ssd1362_writeFullBuffer+0x44>
	{
		ssd1362_writeData(frameBuffer[i]);
 800d1e0:	4a10      	ldr	r2, [pc, #64]	; (800d224 <ssd1362_writeFullBuffer+0x74>)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7ff fcef 	bl	800cbcc <ssd1362_writeData>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	607b      	str	r3, [r7, #4]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d1fa:	d3f1      	bcc.n	800d1e0 <ssd1362_writeFullBuffer+0x30>
	}
//	ssd1362_writeBuffer(&frameBuffer[0], ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2));
	for (uint32_t i = 0; i < 1024; i++)
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	603b      	str	r3, [r7, #0]
 800d200:	e007      	b.n	800d212 <ssd1362_writeFullBuffer+0x62>
	{
		changedPixels[i] = 0; // Set all pixels as up to date.
 800d202:	4a09      	ldr	r2, [pc, #36]	; (800d228 <ssd1362_writeFullBuffer+0x78>)
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	4413      	add	r3, r2
 800d208:	2200      	movs	r2, #0
 800d20a:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 1024; i++)
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	3301      	adds	r3, #1
 800d210:	603b      	str	r3, [r7, #0]
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d218:	d3f3      	bcc.n	800d202 <ssd1362_writeFullBuffer+0x52>
	}
}
 800d21a:	bf00      	nop
 800d21c:	bf00      	nop
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	240044c4 	.word	0x240044c4
 800d228:	24003cc4 	.word	0x24003cc4

0800d22c <ssd1362_init>:
	ssd1362_writeCmd(contrast);  //Contrast byte
}

//Sends all the boilerplate startup and config commands to the driver
void ssd1362_init()
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1362_Reset();
 800d230:	f7ff fca2 	bl	800cb78 <ssd1362_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800d234:	2064      	movs	r0, #100	; 0x64
 800d236:	f7f5 f985 	bl	8002544 <HAL_Delay>

    // Init OLED
    ssd1362_writeCmd(0XFD); //Set Command Lock
 800d23a:	20fd      	movs	r0, #253	; 0xfd
 800d23c:	f7ff fcb4 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X12); //(12H=Unlock,16H=Lock)
 800d240:	2012      	movs	r0, #18
 800d242:	f7ff fcb1 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAE); //Display OFF(Sleep Mode)
 800d246:	20ae      	movs	r0, #174	; 0xae
 800d248:	f7ff fcae 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X15); //Set column Address
 800d24c:	2015      	movs	r0, #21
 800d24e:	f7ff fcab 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start column Address
 800d252:	2000      	movs	r0, #0
 800d254:	f7ff fca8 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X7F); //End column Address
 800d258:	207f      	movs	r0, #127	; 0x7f
 800d25a:	f7ff fca5 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X75); //Set Row Address
 800d25e:	2075      	movs	r0, #117	; 0x75
 800d260:	f7ff fca2 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start Row Address
 800d264:	2000      	movs	r0, #0
 800d266:	f7ff fc9f 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F); //End Row Address
 800d26a:	203f      	movs	r0, #63	; 0x3f
 800d26c:	f7ff fc9c 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X81); //Set contrast
 800d270:	2081      	movs	r0, #129	; 0x81
 800d272:	f7ff fc99 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0x2f);
 800d276:	202f      	movs	r0, #47	; 0x2f
 800d278:	f7ff fc96 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA0); //Set Remap
 800d27c:	20a0      	movs	r0, #160	; 0xa0
 800d27e:	f7ff fc93 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XC3);
 800d282:	20c3      	movs	r0, #195	; 0xc3
 800d284:	f7ff fc90 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA1); //Set Display Start Line
 800d288:	20a1      	movs	r0, #161	; 0xa1
 800d28a:	f7ff fc8d 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 800d28e:	2000      	movs	r0, #0
 800d290:	f7ff fc8a 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA2); //Set Display Offset
 800d294:	20a2      	movs	r0, #162	; 0xa2
 800d296:	f7ff fc87 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 800d29a:	2000      	movs	r0, #0
 800d29c:	f7ff fc84 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA4); //Normal Display
 800d2a0:	20a4      	movs	r0, #164	; 0xa4
 800d2a2:	f7ff fc81 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA8); //Set Multiplex Ratio
 800d2a6:	20a8      	movs	r0, #168	; 0xa8
 800d2a8:	f7ff fc7e 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F);
 800d2ac:	203f      	movs	r0, #63	; 0x3f
 800d2ae:	f7ff fc7b 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAB); //Set VDD regulator
 800d2b2:	20ab      	movs	r0, #171	; 0xab
 800d2b4:	f7ff fc78 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01); //Regulator Enable
 800d2b8:	2001      	movs	r0, #1
 800d2ba:	f7ff fc75 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAD); //External /Internal IREF Selection
 800d2be:	20ad      	movs	r0, #173	; 0xad
 800d2c0:	f7ff fc72 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X8E);
 800d2c4:	208e      	movs	r0, #142	; 0x8e
 800d2c6:	f7ff fc6f 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB1); //Set Phase Length
 800d2ca:	20b1      	movs	r0, #177	; 0xb1
 800d2cc:	f7ff fc6c 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X22);
 800d2d0:	2022      	movs	r0, #34	; 0x22
 800d2d2:	f7ff fc69 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB3); //Display clock Divider
 800d2d6:	20b3      	movs	r0, #179	; 0xb3
 800d2d8:	f7ff fc66 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XA0);
 800d2dc:	20a0      	movs	r0, #160	; 0xa0
 800d2de:	f7ff fc63 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB6); //Set Second pre-charge Period
 800d2e2:	20b6      	movs	r0, #182	; 0xb6
 800d2e4:	f7ff fc60 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X04);
 800d2e8:	2004      	movs	r0, #4
 800d2ea:	f7ff fc5d 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB9); //Set Linear LUT
 800d2ee:	20b9      	movs	r0, #185	; 0xb9
 800d2f0:	f7ff fc5a 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBc); //Set pre-charge voltage level
 800d2f4:	20bc      	movs	r0, #188	; 0xbc
 800d2f6:	f7ff fc57 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X10); //0.5*Vcc
 800d2fa:	2010      	movs	r0, #16
 800d2fc:	f7ff fc54 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBD); //Pre-charge voltage capacitor Selection
 800d300:	20bd      	movs	r0, #189	; 0xbd
 800d302:	f7ff fc51 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01);
 800d306:	2001      	movs	r0, #1
 800d308:	f7ff fc4e 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBE); //Set COM deselect voltage level
 800d30c:	20be      	movs	r0, #190	; 0xbe
 800d30e:	f7ff fc4b 	bl	800cba8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X07); //0.82*Vcc
 800d312:	2007      	movs	r0, #7
 800d314:	f7ff fc48 	bl	800cba8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAF); //Display ON
 800d318:	20af      	movs	r0, #175	; 0xaf
 800d31a:	f7ff fc45 	bl	800cba8 <ssd1362_writeCmd>
}
 800d31e:	bf00      	nop
 800d320:	bd80      	pop	{r7, pc}
	...

0800d324 <__errno>:
 800d324:	4b01      	ldr	r3, [pc, #4]	; (800d32c <__errno+0x8>)
 800d326:	6818      	ldr	r0, [r3, #0]
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	24003410 	.word	0x24003410

0800d330 <__libc_init_array>:
 800d330:	b570      	push	{r4, r5, r6, lr}
 800d332:	4d0d      	ldr	r5, [pc, #52]	; (800d368 <__libc_init_array+0x38>)
 800d334:	4c0d      	ldr	r4, [pc, #52]	; (800d36c <__libc_init_array+0x3c>)
 800d336:	1b64      	subs	r4, r4, r5
 800d338:	10a4      	asrs	r4, r4, #2
 800d33a:	2600      	movs	r6, #0
 800d33c:	42a6      	cmp	r6, r4
 800d33e:	d109      	bne.n	800d354 <__libc_init_array+0x24>
 800d340:	4d0b      	ldr	r5, [pc, #44]	; (800d370 <__libc_init_array+0x40>)
 800d342:	4c0c      	ldr	r4, [pc, #48]	; (800d374 <__libc_init_array+0x44>)
 800d344:	f002 fc60 	bl	800fc08 <_init>
 800d348:	1b64      	subs	r4, r4, r5
 800d34a:	10a4      	asrs	r4, r4, #2
 800d34c:	2600      	movs	r6, #0
 800d34e:	42a6      	cmp	r6, r4
 800d350:	d105      	bne.n	800d35e <__libc_init_array+0x2e>
 800d352:	bd70      	pop	{r4, r5, r6, pc}
 800d354:	f855 3b04 	ldr.w	r3, [r5], #4
 800d358:	4798      	blx	r3
 800d35a:	3601      	adds	r6, #1
 800d35c:	e7ee      	b.n	800d33c <__libc_init_array+0xc>
 800d35e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d362:	4798      	blx	r3
 800d364:	3601      	adds	r6, #1
 800d366:	e7f2      	b.n	800d34e <__libc_init_array+0x1e>
 800d368:	08010074 	.word	0x08010074
 800d36c:	08010074 	.word	0x08010074
 800d370:	08010074 	.word	0x08010074
 800d374:	08010078 	.word	0x08010078

0800d378 <malloc>:
 800d378:	4b02      	ldr	r3, [pc, #8]	; (800d384 <malloc+0xc>)
 800d37a:	4601      	mov	r1, r0
 800d37c:	6818      	ldr	r0, [r3, #0]
 800d37e:	f000 b85b 	b.w	800d438 <_malloc_r>
 800d382:	bf00      	nop
 800d384:	24003410 	.word	0x24003410

0800d388 <memset>:
 800d388:	4402      	add	r2, r0
 800d38a:	4603      	mov	r3, r0
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d100      	bne.n	800d392 <memset+0xa>
 800d390:	4770      	bx	lr
 800d392:	f803 1b01 	strb.w	r1, [r3], #1
 800d396:	e7f9      	b.n	800d38c <memset+0x4>

0800d398 <_free_r>:
 800d398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d39a:	2900      	cmp	r1, #0
 800d39c:	d048      	beq.n	800d430 <_free_r+0x98>
 800d39e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3a2:	9001      	str	r0, [sp, #4]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f1a1 0404 	sub.w	r4, r1, #4
 800d3aa:	bfb8      	it	lt
 800d3ac:	18e4      	addlt	r4, r4, r3
 800d3ae:	f001 fdf3 	bl	800ef98 <__malloc_lock>
 800d3b2:	4a20      	ldr	r2, [pc, #128]	; (800d434 <_free_r+0x9c>)
 800d3b4:	9801      	ldr	r0, [sp, #4]
 800d3b6:	6813      	ldr	r3, [r2, #0]
 800d3b8:	4615      	mov	r5, r2
 800d3ba:	b933      	cbnz	r3, 800d3ca <_free_r+0x32>
 800d3bc:	6063      	str	r3, [r4, #4]
 800d3be:	6014      	str	r4, [r2, #0]
 800d3c0:	b003      	add	sp, #12
 800d3c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3c6:	f001 bded 	b.w	800efa4 <__malloc_unlock>
 800d3ca:	42a3      	cmp	r3, r4
 800d3cc:	d90b      	bls.n	800d3e6 <_free_r+0x4e>
 800d3ce:	6821      	ldr	r1, [r4, #0]
 800d3d0:	1862      	adds	r2, r4, r1
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	bf04      	itt	eq
 800d3d6:	681a      	ldreq	r2, [r3, #0]
 800d3d8:	685b      	ldreq	r3, [r3, #4]
 800d3da:	6063      	str	r3, [r4, #4]
 800d3dc:	bf04      	itt	eq
 800d3de:	1852      	addeq	r2, r2, r1
 800d3e0:	6022      	streq	r2, [r4, #0]
 800d3e2:	602c      	str	r4, [r5, #0]
 800d3e4:	e7ec      	b.n	800d3c0 <_free_r+0x28>
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	b10b      	cbz	r3, 800d3f0 <_free_r+0x58>
 800d3ec:	42a3      	cmp	r3, r4
 800d3ee:	d9fa      	bls.n	800d3e6 <_free_r+0x4e>
 800d3f0:	6811      	ldr	r1, [r2, #0]
 800d3f2:	1855      	adds	r5, r2, r1
 800d3f4:	42a5      	cmp	r5, r4
 800d3f6:	d10b      	bne.n	800d410 <_free_r+0x78>
 800d3f8:	6824      	ldr	r4, [r4, #0]
 800d3fa:	4421      	add	r1, r4
 800d3fc:	1854      	adds	r4, r2, r1
 800d3fe:	42a3      	cmp	r3, r4
 800d400:	6011      	str	r1, [r2, #0]
 800d402:	d1dd      	bne.n	800d3c0 <_free_r+0x28>
 800d404:	681c      	ldr	r4, [r3, #0]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	6053      	str	r3, [r2, #4]
 800d40a:	4421      	add	r1, r4
 800d40c:	6011      	str	r1, [r2, #0]
 800d40e:	e7d7      	b.n	800d3c0 <_free_r+0x28>
 800d410:	d902      	bls.n	800d418 <_free_r+0x80>
 800d412:	230c      	movs	r3, #12
 800d414:	6003      	str	r3, [r0, #0]
 800d416:	e7d3      	b.n	800d3c0 <_free_r+0x28>
 800d418:	6825      	ldr	r5, [r4, #0]
 800d41a:	1961      	adds	r1, r4, r5
 800d41c:	428b      	cmp	r3, r1
 800d41e:	bf04      	itt	eq
 800d420:	6819      	ldreq	r1, [r3, #0]
 800d422:	685b      	ldreq	r3, [r3, #4]
 800d424:	6063      	str	r3, [r4, #4]
 800d426:	bf04      	itt	eq
 800d428:	1949      	addeq	r1, r1, r5
 800d42a:	6021      	streq	r1, [r4, #0]
 800d42c:	6054      	str	r4, [r2, #4]
 800d42e:	e7c7      	b.n	800d3c0 <_free_r+0x28>
 800d430:	b003      	add	sp, #12
 800d432:	bd30      	pop	{r4, r5, pc}
 800d434:	240036cc 	.word	0x240036cc

0800d438 <_malloc_r>:
 800d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43a:	1ccd      	adds	r5, r1, #3
 800d43c:	f025 0503 	bic.w	r5, r5, #3
 800d440:	3508      	adds	r5, #8
 800d442:	2d0c      	cmp	r5, #12
 800d444:	bf38      	it	cc
 800d446:	250c      	movcc	r5, #12
 800d448:	2d00      	cmp	r5, #0
 800d44a:	4606      	mov	r6, r0
 800d44c:	db01      	blt.n	800d452 <_malloc_r+0x1a>
 800d44e:	42a9      	cmp	r1, r5
 800d450:	d903      	bls.n	800d45a <_malloc_r+0x22>
 800d452:	230c      	movs	r3, #12
 800d454:	6033      	str	r3, [r6, #0]
 800d456:	2000      	movs	r0, #0
 800d458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d45a:	f001 fd9d 	bl	800ef98 <__malloc_lock>
 800d45e:	4921      	ldr	r1, [pc, #132]	; (800d4e4 <_malloc_r+0xac>)
 800d460:	680a      	ldr	r2, [r1, #0]
 800d462:	4614      	mov	r4, r2
 800d464:	b99c      	cbnz	r4, 800d48e <_malloc_r+0x56>
 800d466:	4f20      	ldr	r7, [pc, #128]	; (800d4e8 <_malloc_r+0xb0>)
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	b923      	cbnz	r3, 800d476 <_malloc_r+0x3e>
 800d46c:	4621      	mov	r1, r4
 800d46e:	4630      	mov	r0, r6
 800d470:	f000 fc80 	bl	800dd74 <_sbrk_r>
 800d474:	6038      	str	r0, [r7, #0]
 800d476:	4629      	mov	r1, r5
 800d478:	4630      	mov	r0, r6
 800d47a:	f000 fc7b 	bl	800dd74 <_sbrk_r>
 800d47e:	1c43      	adds	r3, r0, #1
 800d480:	d123      	bne.n	800d4ca <_malloc_r+0x92>
 800d482:	230c      	movs	r3, #12
 800d484:	6033      	str	r3, [r6, #0]
 800d486:	4630      	mov	r0, r6
 800d488:	f001 fd8c 	bl	800efa4 <__malloc_unlock>
 800d48c:	e7e3      	b.n	800d456 <_malloc_r+0x1e>
 800d48e:	6823      	ldr	r3, [r4, #0]
 800d490:	1b5b      	subs	r3, r3, r5
 800d492:	d417      	bmi.n	800d4c4 <_malloc_r+0x8c>
 800d494:	2b0b      	cmp	r3, #11
 800d496:	d903      	bls.n	800d4a0 <_malloc_r+0x68>
 800d498:	6023      	str	r3, [r4, #0]
 800d49a:	441c      	add	r4, r3
 800d49c:	6025      	str	r5, [r4, #0]
 800d49e:	e004      	b.n	800d4aa <_malloc_r+0x72>
 800d4a0:	6863      	ldr	r3, [r4, #4]
 800d4a2:	42a2      	cmp	r2, r4
 800d4a4:	bf0c      	ite	eq
 800d4a6:	600b      	streq	r3, [r1, #0]
 800d4a8:	6053      	strne	r3, [r2, #4]
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	f001 fd7a 	bl	800efa4 <__malloc_unlock>
 800d4b0:	f104 000b 	add.w	r0, r4, #11
 800d4b4:	1d23      	adds	r3, r4, #4
 800d4b6:	f020 0007 	bic.w	r0, r0, #7
 800d4ba:	1ac2      	subs	r2, r0, r3
 800d4bc:	d0cc      	beq.n	800d458 <_malloc_r+0x20>
 800d4be:	1a1b      	subs	r3, r3, r0
 800d4c0:	50a3      	str	r3, [r4, r2]
 800d4c2:	e7c9      	b.n	800d458 <_malloc_r+0x20>
 800d4c4:	4622      	mov	r2, r4
 800d4c6:	6864      	ldr	r4, [r4, #4]
 800d4c8:	e7cc      	b.n	800d464 <_malloc_r+0x2c>
 800d4ca:	1cc4      	adds	r4, r0, #3
 800d4cc:	f024 0403 	bic.w	r4, r4, #3
 800d4d0:	42a0      	cmp	r0, r4
 800d4d2:	d0e3      	beq.n	800d49c <_malloc_r+0x64>
 800d4d4:	1a21      	subs	r1, r4, r0
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	f000 fc4c 	bl	800dd74 <_sbrk_r>
 800d4dc:	3001      	adds	r0, #1
 800d4de:	d1dd      	bne.n	800d49c <_malloc_r+0x64>
 800d4e0:	e7cf      	b.n	800d482 <_malloc_r+0x4a>
 800d4e2:	bf00      	nop
 800d4e4:	240036cc 	.word	0x240036cc
 800d4e8:	240036d0 	.word	0x240036d0

0800d4ec <__cvt>:
 800d4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4ee:	ed2d 8b02 	vpush	{d8}
 800d4f2:	eeb0 8b40 	vmov.f64	d8, d0
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	4617      	mov	r7, r2
 800d4fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d4fc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d4fe:	ee18 2a90 	vmov	r2, s17
 800d502:	f025 0520 	bic.w	r5, r5, #32
 800d506:	2a00      	cmp	r2, #0
 800d508:	bfb6      	itet	lt
 800d50a:	222d      	movlt	r2, #45	; 0x2d
 800d50c:	2200      	movge	r2, #0
 800d50e:	eeb1 8b40 	vneglt.f64	d8, d0
 800d512:	2d46      	cmp	r5, #70	; 0x46
 800d514:	460c      	mov	r4, r1
 800d516:	701a      	strb	r2, [r3, #0]
 800d518:	d004      	beq.n	800d524 <__cvt+0x38>
 800d51a:	2d45      	cmp	r5, #69	; 0x45
 800d51c:	d100      	bne.n	800d520 <__cvt+0x34>
 800d51e:	3401      	adds	r4, #1
 800d520:	2102      	movs	r1, #2
 800d522:	e000      	b.n	800d526 <__cvt+0x3a>
 800d524:	2103      	movs	r1, #3
 800d526:	ab03      	add	r3, sp, #12
 800d528:	9301      	str	r3, [sp, #4]
 800d52a:	ab02      	add	r3, sp, #8
 800d52c:	9300      	str	r3, [sp, #0]
 800d52e:	4622      	mov	r2, r4
 800d530:	4633      	mov	r3, r6
 800d532:	eeb0 0b48 	vmov.f64	d0, d8
 800d536:	f000 fd7b 	bl	800e030 <_dtoa_r>
 800d53a:	2d47      	cmp	r5, #71	; 0x47
 800d53c:	d109      	bne.n	800d552 <__cvt+0x66>
 800d53e:	07fb      	lsls	r3, r7, #31
 800d540:	d407      	bmi.n	800d552 <__cvt+0x66>
 800d542:	9b03      	ldr	r3, [sp, #12]
 800d544:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d546:	1a1b      	subs	r3, r3, r0
 800d548:	6013      	str	r3, [r2, #0]
 800d54a:	b005      	add	sp, #20
 800d54c:	ecbd 8b02 	vpop	{d8}
 800d550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d552:	2d46      	cmp	r5, #70	; 0x46
 800d554:	eb00 0204 	add.w	r2, r0, r4
 800d558:	d10c      	bne.n	800d574 <__cvt+0x88>
 800d55a:	7803      	ldrb	r3, [r0, #0]
 800d55c:	2b30      	cmp	r3, #48	; 0x30
 800d55e:	d107      	bne.n	800d570 <__cvt+0x84>
 800d560:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d568:	bf1c      	itt	ne
 800d56a:	f1c4 0401 	rsbne	r4, r4, #1
 800d56e:	6034      	strne	r4, [r6, #0]
 800d570:	6833      	ldr	r3, [r6, #0]
 800d572:	441a      	add	r2, r3
 800d574:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d57c:	bf08      	it	eq
 800d57e:	9203      	streq	r2, [sp, #12]
 800d580:	2130      	movs	r1, #48	; 0x30
 800d582:	9b03      	ldr	r3, [sp, #12]
 800d584:	4293      	cmp	r3, r2
 800d586:	d2dc      	bcs.n	800d542 <__cvt+0x56>
 800d588:	1c5c      	adds	r4, r3, #1
 800d58a:	9403      	str	r4, [sp, #12]
 800d58c:	7019      	strb	r1, [r3, #0]
 800d58e:	e7f8      	b.n	800d582 <__cvt+0x96>

0800d590 <__exponent>:
 800d590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d592:	4603      	mov	r3, r0
 800d594:	2900      	cmp	r1, #0
 800d596:	bfb8      	it	lt
 800d598:	4249      	neglt	r1, r1
 800d59a:	f803 2b02 	strb.w	r2, [r3], #2
 800d59e:	bfb4      	ite	lt
 800d5a0:	222d      	movlt	r2, #45	; 0x2d
 800d5a2:	222b      	movge	r2, #43	; 0x2b
 800d5a4:	2909      	cmp	r1, #9
 800d5a6:	7042      	strb	r2, [r0, #1]
 800d5a8:	dd2a      	ble.n	800d600 <__exponent+0x70>
 800d5aa:	f10d 0407 	add.w	r4, sp, #7
 800d5ae:	46a4      	mov	ip, r4
 800d5b0:	270a      	movs	r7, #10
 800d5b2:	46a6      	mov	lr, r4
 800d5b4:	460a      	mov	r2, r1
 800d5b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800d5ba:	fb07 1516 	mls	r5, r7, r6, r1
 800d5be:	3530      	adds	r5, #48	; 0x30
 800d5c0:	2a63      	cmp	r2, #99	; 0x63
 800d5c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d5c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d5ca:	4631      	mov	r1, r6
 800d5cc:	dcf1      	bgt.n	800d5b2 <__exponent+0x22>
 800d5ce:	3130      	adds	r1, #48	; 0x30
 800d5d0:	f1ae 0502 	sub.w	r5, lr, #2
 800d5d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d5d8:	1c44      	adds	r4, r0, #1
 800d5da:	4629      	mov	r1, r5
 800d5dc:	4561      	cmp	r1, ip
 800d5de:	d30a      	bcc.n	800d5f6 <__exponent+0x66>
 800d5e0:	f10d 0209 	add.w	r2, sp, #9
 800d5e4:	eba2 020e 	sub.w	r2, r2, lr
 800d5e8:	4565      	cmp	r5, ip
 800d5ea:	bf88      	it	hi
 800d5ec:	2200      	movhi	r2, #0
 800d5ee:	4413      	add	r3, r2
 800d5f0:	1a18      	subs	r0, r3, r0
 800d5f2:	b003      	add	sp, #12
 800d5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d5fe:	e7ed      	b.n	800d5dc <__exponent+0x4c>
 800d600:	2330      	movs	r3, #48	; 0x30
 800d602:	3130      	adds	r1, #48	; 0x30
 800d604:	7083      	strb	r3, [r0, #2]
 800d606:	70c1      	strb	r1, [r0, #3]
 800d608:	1d03      	adds	r3, r0, #4
 800d60a:	e7f1      	b.n	800d5f0 <__exponent+0x60>
 800d60c:	0000      	movs	r0, r0
	...

0800d610 <_printf_float>:
 800d610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d614:	b08b      	sub	sp, #44	; 0x2c
 800d616:	460c      	mov	r4, r1
 800d618:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d61c:	4616      	mov	r6, r2
 800d61e:	461f      	mov	r7, r3
 800d620:	4605      	mov	r5, r0
 800d622:	f001 fc3f 	bl	800eea4 <_localeconv_r>
 800d626:	f8d0 b000 	ldr.w	fp, [r0]
 800d62a:	4658      	mov	r0, fp
 800d62c:	f7f2 fe58 	bl	80002e0 <strlen>
 800d630:	2300      	movs	r3, #0
 800d632:	9308      	str	r3, [sp, #32]
 800d634:	f8d8 3000 	ldr.w	r3, [r8]
 800d638:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d63c:	6822      	ldr	r2, [r4, #0]
 800d63e:	3307      	adds	r3, #7
 800d640:	f023 0307 	bic.w	r3, r3, #7
 800d644:	f103 0108 	add.w	r1, r3, #8
 800d648:	f8c8 1000 	str.w	r1, [r8]
 800d64c:	4682      	mov	sl, r0
 800d64e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d652:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d656:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d8b8 <_printf_float+0x2a8>
 800d65a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d65e:	eeb0 6bc0 	vabs.f64	d6, d0
 800d662:	eeb4 6b47 	vcmp.f64	d6, d7
 800d666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d66a:	dd24      	ble.n	800d6b6 <_printf_float+0xa6>
 800d66c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d674:	d502      	bpl.n	800d67c <_printf_float+0x6c>
 800d676:	232d      	movs	r3, #45	; 0x2d
 800d678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d67c:	4b90      	ldr	r3, [pc, #576]	; (800d8c0 <_printf_float+0x2b0>)
 800d67e:	4891      	ldr	r0, [pc, #580]	; (800d8c4 <_printf_float+0x2b4>)
 800d680:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d684:	bf94      	ite	ls
 800d686:	4698      	movls	r8, r3
 800d688:	4680      	movhi	r8, r0
 800d68a:	2303      	movs	r3, #3
 800d68c:	6123      	str	r3, [r4, #16]
 800d68e:	f022 0204 	bic.w	r2, r2, #4
 800d692:	2300      	movs	r3, #0
 800d694:	6022      	str	r2, [r4, #0]
 800d696:	9304      	str	r3, [sp, #16]
 800d698:	9700      	str	r7, [sp, #0]
 800d69a:	4633      	mov	r3, r6
 800d69c:	aa09      	add	r2, sp, #36	; 0x24
 800d69e:	4621      	mov	r1, r4
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	f000 f9d3 	bl	800da4c <_printf_common>
 800d6a6:	3001      	adds	r0, #1
 800d6a8:	f040 808a 	bne.w	800d7c0 <_printf_float+0x1b0>
 800d6ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6b0:	b00b      	add	sp, #44	; 0x2c
 800d6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b6:	eeb4 0b40 	vcmp.f64	d0, d0
 800d6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6be:	d709      	bvc.n	800d6d4 <_printf_float+0xc4>
 800d6c0:	ee10 3a90 	vmov	r3, s1
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	bfbc      	itt	lt
 800d6c8:	232d      	movlt	r3, #45	; 0x2d
 800d6ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d6ce:	487e      	ldr	r0, [pc, #504]	; (800d8c8 <_printf_float+0x2b8>)
 800d6d0:	4b7e      	ldr	r3, [pc, #504]	; (800d8cc <_printf_float+0x2bc>)
 800d6d2:	e7d5      	b.n	800d680 <_printf_float+0x70>
 800d6d4:	6863      	ldr	r3, [r4, #4]
 800d6d6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d6da:	9104      	str	r1, [sp, #16]
 800d6dc:	1c59      	adds	r1, r3, #1
 800d6de:	d13c      	bne.n	800d75a <_printf_float+0x14a>
 800d6e0:	2306      	movs	r3, #6
 800d6e2:	6063      	str	r3, [r4, #4]
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	9303      	str	r3, [sp, #12]
 800d6e8:	ab08      	add	r3, sp, #32
 800d6ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d6ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d6f2:	ab07      	add	r3, sp, #28
 800d6f4:	6861      	ldr	r1, [r4, #4]
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	6022      	str	r2, [r4, #0]
 800d6fa:	f10d 031b 	add.w	r3, sp, #27
 800d6fe:	4628      	mov	r0, r5
 800d700:	f7ff fef4 	bl	800d4ec <__cvt>
 800d704:	9b04      	ldr	r3, [sp, #16]
 800d706:	9907      	ldr	r1, [sp, #28]
 800d708:	2b47      	cmp	r3, #71	; 0x47
 800d70a:	4680      	mov	r8, r0
 800d70c:	d108      	bne.n	800d720 <_printf_float+0x110>
 800d70e:	1cc8      	adds	r0, r1, #3
 800d710:	db02      	blt.n	800d718 <_printf_float+0x108>
 800d712:	6863      	ldr	r3, [r4, #4]
 800d714:	4299      	cmp	r1, r3
 800d716:	dd41      	ble.n	800d79c <_printf_float+0x18c>
 800d718:	f1a9 0902 	sub.w	r9, r9, #2
 800d71c:	fa5f f989 	uxtb.w	r9, r9
 800d720:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d724:	d820      	bhi.n	800d768 <_printf_float+0x158>
 800d726:	3901      	subs	r1, #1
 800d728:	464a      	mov	r2, r9
 800d72a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d72e:	9107      	str	r1, [sp, #28]
 800d730:	f7ff ff2e 	bl	800d590 <__exponent>
 800d734:	9a08      	ldr	r2, [sp, #32]
 800d736:	9004      	str	r0, [sp, #16]
 800d738:	1813      	adds	r3, r2, r0
 800d73a:	2a01      	cmp	r2, #1
 800d73c:	6123      	str	r3, [r4, #16]
 800d73e:	dc02      	bgt.n	800d746 <_printf_float+0x136>
 800d740:	6822      	ldr	r2, [r4, #0]
 800d742:	07d2      	lsls	r2, r2, #31
 800d744:	d501      	bpl.n	800d74a <_printf_float+0x13a>
 800d746:	3301      	adds	r3, #1
 800d748:	6123      	str	r3, [r4, #16]
 800d74a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d0a2      	beq.n	800d698 <_printf_float+0x88>
 800d752:	232d      	movs	r3, #45	; 0x2d
 800d754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d758:	e79e      	b.n	800d698 <_printf_float+0x88>
 800d75a:	9904      	ldr	r1, [sp, #16]
 800d75c:	2947      	cmp	r1, #71	; 0x47
 800d75e:	d1c1      	bne.n	800d6e4 <_printf_float+0xd4>
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1bf      	bne.n	800d6e4 <_printf_float+0xd4>
 800d764:	2301      	movs	r3, #1
 800d766:	e7bc      	b.n	800d6e2 <_printf_float+0xd2>
 800d768:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d76c:	d118      	bne.n	800d7a0 <_printf_float+0x190>
 800d76e:	2900      	cmp	r1, #0
 800d770:	6863      	ldr	r3, [r4, #4]
 800d772:	dd0b      	ble.n	800d78c <_printf_float+0x17c>
 800d774:	6121      	str	r1, [r4, #16]
 800d776:	b913      	cbnz	r3, 800d77e <_printf_float+0x16e>
 800d778:	6822      	ldr	r2, [r4, #0]
 800d77a:	07d0      	lsls	r0, r2, #31
 800d77c:	d502      	bpl.n	800d784 <_printf_float+0x174>
 800d77e:	3301      	adds	r3, #1
 800d780:	440b      	add	r3, r1
 800d782:	6123      	str	r3, [r4, #16]
 800d784:	2300      	movs	r3, #0
 800d786:	65a1      	str	r1, [r4, #88]	; 0x58
 800d788:	9304      	str	r3, [sp, #16]
 800d78a:	e7de      	b.n	800d74a <_printf_float+0x13a>
 800d78c:	b913      	cbnz	r3, 800d794 <_printf_float+0x184>
 800d78e:	6822      	ldr	r2, [r4, #0]
 800d790:	07d2      	lsls	r2, r2, #31
 800d792:	d501      	bpl.n	800d798 <_printf_float+0x188>
 800d794:	3302      	adds	r3, #2
 800d796:	e7f4      	b.n	800d782 <_printf_float+0x172>
 800d798:	2301      	movs	r3, #1
 800d79a:	e7f2      	b.n	800d782 <_printf_float+0x172>
 800d79c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d7a0:	9b08      	ldr	r3, [sp, #32]
 800d7a2:	4299      	cmp	r1, r3
 800d7a4:	db05      	blt.n	800d7b2 <_printf_float+0x1a2>
 800d7a6:	6823      	ldr	r3, [r4, #0]
 800d7a8:	6121      	str	r1, [r4, #16]
 800d7aa:	07d8      	lsls	r0, r3, #31
 800d7ac:	d5ea      	bpl.n	800d784 <_printf_float+0x174>
 800d7ae:	1c4b      	adds	r3, r1, #1
 800d7b0:	e7e7      	b.n	800d782 <_printf_float+0x172>
 800d7b2:	2900      	cmp	r1, #0
 800d7b4:	bfd4      	ite	le
 800d7b6:	f1c1 0202 	rsble	r2, r1, #2
 800d7ba:	2201      	movgt	r2, #1
 800d7bc:	4413      	add	r3, r2
 800d7be:	e7e0      	b.n	800d782 <_printf_float+0x172>
 800d7c0:	6823      	ldr	r3, [r4, #0]
 800d7c2:	055a      	lsls	r2, r3, #21
 800d7c4:	d407      	bmi.n	800d7d6 <_printf_float+0x1c6>
 800d7c6:	6923      	ldr	r3, [r4, #16]
 800d7c8:	4642      	mov	r2, r8
 800d7ca:	4631      	mov	r1, r6
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	47b8      	blx	r7
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	d12a      	bne.n	800d82a <_printf_float+0x21a>
 800d7d4:	e76a      	b.n	800d6ac <_printf_float+0x9c>
 800d7d6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d7da:	f240 80e2 	bls.w	800d9a2 <_printf_float+0x392>
 800d7de:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d7e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ea:	d133      	bne.n	800d854 <_printf_float+0x244>
 800d7ec:	4a38      	ldr	r2, [pc, #224]	; (800d8d0 <_printf_float+0x2c0>)
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	4631      	mov	r1, r6
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	47b8      	blx	r7
 800d7f6:	3001      	adds	r0, #1
 800d7f8:	f43f af58 	beq.w	800d6ac <_printf_float+0x9c>
 800d7fc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d800:	429a      	cmp	r2, r3
 800d802:	db02      	blt.n	800d80a <_printf_float+0x1fa>
 800d804:	6823      	ldr	r3, [r4, #0]
 800d806:	07d8      	lsls	r0, r3, #31
 800d808:	d50f      	bpl.n	800d82a <_printf_float+0x21a>
 800d80a:	4653      	mov	r3, sl
 800d80c:	465a      	mov	r2, fp
 800d80e:	4631      	mov	r1, r6
 800d810:	4628      	mov	r0, r5
 800d812:	47b8      	blx	r7
 800d814:	3001      	adds	r0, #1
 800d816:	f43f af49 	beq.w	800d6ac <_printf_float+0x9c>
 800d81a:	f04f 0800 	mov.w	r8, #0
 800d81e:	f104 091a 	add.w	r9, r4, #26
 800d822:	9b08      	ldr	r3, [sp, #32]
 800d824:	3b01      	subs	r3, #1
 800d826:	4543      	cmp	r3, r8
 800d828:	dc09      	bgt.n	800d83e <_printf_float+0x22e>
 800d82a:	6823      	ldr	r3, [r4, #0]
 800d82c:	079b      	lsls	r3, r3, #30
 800d82e:	f100 8108 	bmi.w	800da42 <_printf_float+0x432>
 800d832:	68e0      	ldr	r0, [r4, #12]
 800d834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d836:	4298      	cmp	r0, r3
 800d838:	bfb8      	it	lt
 800d83a:	4618      	movlt	r0, r3
 800d83c:	e738      	b.n	800d6b0 <_printf_float+0xa0>
 800d83e:	2301      	movs	r3, #1
 800d840:	464a      	mov	r2, r9
 800d842:	4631      	mov	r1, r6
 800d844:	4628      	mov	r0, r5
 800d846:	47b8      	blx	r7
 800d848:	3001      	adds	r0, #1
 800d84a:	f43f af2f 	beq.w	800d6ac <_printf_float+0x9c>
 800d84e:	f108 0801 	add.w	r8, r8, #1
 800d852:	e7e6      	b.n	800d822 <_printf_float+0x212>
 800d854:	9b07      	ldr	r3, [sp, #28]
 800d856:	2b00      	cmp	r3, #0
 800d858:	dc3c      	bgt.n	800d8d4 <_printf_float+0x2c4>
 800d85a:	4a1d      	ldr	r2, [pc, #116]	; (800d8d0 <_printf_float+0x2c0>)
 800d85c:	2301      	movs	r3, #1
 800d85e:	4631      	mov	r1, r6
 800d860:	4628      	mov	r0, r5
 800d862:	47b8      	blx	r7
 800d864:	3001      	adds	r0, #1
 800d866:	f43f af21 	beq.w	800d6ac <_printf_float+0x9c>
 800d86a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d86e:	4313      	orrs	r3, r2
 800d870:	d102      	bne.n	800d878 <_printf_float+0x268>
 800d872:	6823      	ldr	r3, [r4, #0]
 800d874:	07d9      	lsls	r1, r3, #31
 800d876:	d5d8      	bpl.n	800d82a <_printf_float+0x21a>
 800d878:	4653      	mov	r3, sl
 800d87a:	465a      	mov	r2, fp
 800d87c:	4631      	mov	r1, r6
 800d87e:	4628      	mov	r0, r5
 800d880:	47b8      	blx	r7
 800d882:	3001      	adds	r0, #1
 800d884:	f43f af12 	beq.w	800d6ac <_printf_float+0x9c>
 800d888:	f04f 0900 	mov.w	r9, #0
 800d88c:	f104 0a1a 	add.w	sl, r4, #26
 800d890:	9b07      	ldr	r3, [sp, #28]
 800d892:	425b      	negs	r3, r3
 800d894:	454b      	cmp	r3, r9
 800d896:	dc01      	bgt.n	800d89c <_printf_float+0x28c>
 800d898:	9b08      	ldr	r3, [sp, #32]
 800d89a:	e795      	b.n	800d7c8 <_printf_float+0x1b8>
 800d89c:	2301      	movs	r3, #1
 800d89e:	4652      	mov	r2, sl
 800d8a0:	4631      	mov	r1, r6
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	47b8      	blx	r7
 800d8a6:	3001      	adds	r0, #1
 800d8a8:	f43f af00 	beq.w	800d6ac <_printf_float+0x9c>
 800d8ac:	f109 0901 	add.w	r9, r9, #1
 800d8b0:	e7ee      	b.n	800d890 <_printf_float+0x280>
 800d8b2:	bf00      	nop
 800d8b4:	f3af 8000 	nop.w
 800d8b8:	ffffffff 	.word	0xffffffff
 800d8bc:	7fefffff 	.word	0x7fefffff
 800d8c0:	0800fc8c 	.word	0x0800fc8c
 800d8c4:	0800fc90 	.word	0x0800fc90
 800d8c8:	0800fc98 	.word	0x0800fc98
 800d8cc:	0800fc94 	.word	0x0800fc94
 800d8d0:	0800fc9c 	.word	0x0800fc9c
 800d8d4:	9a08      	ldr	r2, [sp, #32]
 800d8d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	bfa8      	it	ge
 800d8dc:	461a      	movge	r2, r3
 800d8de:	2a00      	cmp	r2, #0
 800d8e0:	4691      	mov	r9, r2
 800d8e2:	dc38      	bgt.n	800d956 <_printf_float+0x346>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	9305      	str	r3, [sp, #20]
 800d8e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8ec:	f104 021a 	add.w	r2, r4, #26
 800d8f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8f2:	9905      	ldr	r1, [sp, #20]
 800d8f4:	9304      	str	r3, [sp, #16]
 800d8f6:	eba3 0309 	sub.w	r3, r3, r9
 800d8fa:	428b      	cmp	r3, r1
 800d8fc:	dc33      	bgt.n	800d966 <_printf_float+0x356>
 800d8fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d902:	429a      	cmp	r2, r3
 800d904:	db3c      	blt.n	800d980 <_printf_float+0x370>
 800d906:	6823      	ldr	r3, [r4, #0]
 800d908:	07da      	lsls	r2, r3, #31
 800d90a:	d439      	bmi.n	800d980 <_printf_float+0x370>
 800d90c:	9a08      	ldr	r2, [sp, #32]
 800d90e:	9b04      	ldr	r3, [sp, #16]
 800d910:	9907      	ldr	r1, [sp, #28]
 800d912:	1ad3      	subs	r3, r2, r3
 800d914:	eba2 0901 	sub.w	r9, r2, r1
 800d918:	4599      	cmp	r9, r3
 800d91a:	bfa8      	it	ge
 800d91c:	4699      	movge	r9, r3
 800d91e:	f1b9 0f00 	cmp.w	r9, #0
 800d922:	dc35      	bgt.n	800d990 <_printf_float+0x380>
 800d924:	f04f 0800 	mov.w	r8, #0
 800d928:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d92c:	f104 0a1a 	add.w	sl, r4, #26
 800d930:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d934:	1a9b      	subs	r3, r3, r2
 800d936:	eba3 0309 	sub.w	r3, r3, r9
 800d93a:	4543      	cmp	r3, r8
 800d93c:	f77f af75 	ble.w	800d82a <_printf_float+0x21a>
 800d940:	2301      	movs	r3, #1
 800d942:	4652      	mov	r2, sl
 800d944:	4631      	mov	r1, r6
 800d946:	4628      	mov	r0, r5
 800d948:	47b8      	blx	r7
 800d94a:	3001      	adds	r0, #1
 800d94c:	f43f aeae 	beq.w	800d6ac <_printf_float+0x9c>
 800d950:	f108 0801 	add.w	r8, r8, #1
 800d954:	e7ec      	b.n	800d930 <_printf_float+0x320>
 800d956:	4613      	mov	r3, r2
 800d958:	4631      	mov	r1, r6
 800d95a:	4642      	mov	r2, r8
 800d95c:	4628      	mov	r0, r5
 800d95e:	47b8      	blx	r7
 800d960:	3001      	adds	r0, #1
 800d962:	d1bf      	bne.n	800d8e4 <_printf_float+0x2d4>
 800d964:	e6a2      	b.n	800d6ac <_printf_float+0x9c>
 800d966:	2301      	movs	r3, #1
 800d968:	4631      	mov	r1, r6
 800d96a:	4628      	mov	r0, r5
 800d96c:	9204      	str	r2, [sp, #16]
 800d96e:	47b8      	blx	r7
 800d970:	3001      	adds	r0, #1
 800d972:	f43f ae9b 	beq.w	800d6ac <_printf_float+0x9c>
 800d976:	9b05      	ldr	r3, [sp, #20]
 800d978:	9a04      	ldr	r2, [sp, #16]
 800d97a:	3301      	adds	r3, #1
 800d97c:	9305      	str	r3, [sp, #20]
 800d97e:	e7b7      	b.n	800d8f0 <_printf_float+0x2e0>
 800d980:	4653      	mov	r3, sl
 800d982:	465a      	mov	r2, fp
 800d984:	4631      	mov	r1, r6
 800d986:	4628      	mov	r0, r5
 800d988:	47b8      	blx	r7
 800d98a:	3001      	adds	r0, #1
 800d98c:	d1be      	bne.n	800d90c <_printf_float+0x2fc>
 800d98e:	e68d      	b.n	800d6ac <_printf_float+0x9c>
 800d990:	9a04      	ldr	r2, [sp, #16]
 800d992:	464b      	mov	r3, r9
 800d994:	4442      	add	r2, r8
 800d996:	4631      	mov	r1, r6
 800d998:	4628      	mov	r0, r5
 800d99a:	47b8      	blx	r7
 800d99c:	3001      	adds	r0, #1
 800d99e:	d1c1      	bne.n	800d924 <_printf_float+0x314>
 800d9a0:	e684      	b.n	800d6ac <_printf_float+0x9c>
 800d9a2:	9a08      	ldr	r2, [sp, #32]
 800d9a4:	2a01      	cmp	r2, #1
 800d9a6:	dc01      	bgt.n	800d9ac <_printf_float+0x39c>
 800d9a8:	07db      	lsls	r3, r3, #31
 800d9aa:	d537      	bpl.n	800da1c <_printf_float+0x40c>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	4642      	mov	r2, r8
 800d9b0:	4631      	mov	r1, r6
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	47b8      	blx	r7
 800d9b6:	3001      	adds	r0, #1
 800d9b8:	f43f ae78 	beq.w	800d6ac <_printf_float+0x9c>
 800d9bc:	4653      	mov	r3, sl
 800d9be:	465a      	mov	r2, fp
 800d9c0:	4631      	mov	r1, r6
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	47b8      	blx	r7
 800d9c6:	3001      	adds	r0, #1
 800d9c8:	f43f ae70 	beq.w	800d6ac <_printf_float+0x9c>
 800d9cc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d9d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d8:	d01b      	beq.n	800da12 <_printf_float+0x402>
 800d9da:	9b08      	ldr	r3, [sp, #32]
 800d9dc:	f108 0201 	add.w	r2, r8, #1
 800d9e0:	3b01      	subs	r3, #1
 800d9e2:	4631      	mov	r1, r6
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	47b8      	blx	r7
 800d9e8:	3001      	adds	r0, #1
 800d9ea:	d10e      	bne.n	800da0a <_printf_float+0x3fa>
 800d9ec:	e65e      	b.n	800d6ac <_printf_float+0x9c>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	464a      	mov	r2, r9
 800d9f2:	4631      	mov	r1, r6
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	47b8      	blx	r7
 800d9f8:	3001      	adds	r0, #1
 800d9fa:	f43f ae57 	beq.w	800d6ac <_printf_float+0x9c>
 800d9fe:	f108 0801 	add.w	r8, r8, #1
 800da02:	9b08      	ldr	r3, [sp, #32]
 800da04:	3b01      	subs	r3, #1
 800da06:	4543      	cmp	r3, r8
 800da08:	dcf1      	bgt.n	800d9ee <_printf_float+0x3de>
 800da0a:	9b04      	ldr	r3, [sp, #16]
 800da0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800da10:	e6db      	b.n	800d7ca <_printf_float+0x1ba>
 800da12:	f04f 0800 	mov.w	r8, #0
 800da16:	f104 091a 	add.w	r9, r4, #26
 800da1a:	e7f2      	b.n	800da02 <_printf_float+0x3f2>
 800da1c:	2301      	movs	r3, #1
 800da1e:	4642      	mov	r2, r8
 800da20:	e7df      	b.n	800d9e2 <_printf_float+0x3d2>
 800da22:	2301      	movs	r3, #1
 800da24:	464a      	mov	r2, r9
 800da26:	4631      	mov	r1, r6
 800da28:	4628      	mov	r0, r5
 800da2a:	47b8      	blx	r7
 800da2c:	3001      	adds	r0, #1
 800da2e:	f43f ae3d 	beq.w	800d6ac <_printf_float+0x9c>
 800da32:	f108 0801 	add.w	r8, r8, #1
 800da36:	68e3      	ldr	r3, [r4, #12]
 800da38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da3a:	1a5b      	subs	r3, r3, r1
 800da3c:	4543      	cmp	r3, r8
 800da3e:	dcf0      	bgt.n	800da22 <_printf_float+0x412>
 800da40:	e6f7      	b.n	800d832 <_printf_float+0x222>
 800da42:	f04f 0800 	mov.w	r8, #0
 800da46:	f104 0919 	add.w	r9, r4, #25
 800da4a:	e7f4      	b.n	800da36 <_printf_float+0x426>

0800da4c <_printf_common>:
 800da4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da50:	4616      	mov	r6, r2
 800da52:	4699      	mov	r9, r3
 800da54:	688a      	ldr	r2, [r1, #8]
 800da56:	690b      	ldr	r3, [r1, #16]
 800da58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da5c:	4293      	cmp	r3, r2
 800da5e:	bfb8      	it	lt
 800da60:	4613      	movlt	r3, r2
 800da62:	6033      	str	r3, [r6, #0]
 800da64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da68:	4607      	mov	r7, r0
 800da6a:	460c      	mov	r4, r1
 800da6c:	b10a      	cbz	r2, 800da72 <_printf_common+0x26>
 800da6e:	3301      	adds	r3, #1
 800da70:	6033      	str	r3, [r6, #0]
 800da72:	6823      	ldr	r3, [r4, #0]
 800da74:	0699      	lsls	r1, r3, #26
 800da76:	bf42      	ittt	mi
 800da78:	6833      	ldrmi	r3, [r6, #0]
 800da7a:	3302      	addmi	r3, #2
 800da7c:	6033      	strmi	r3, [r6, #0]
 800da7e:	6825      	ldr	r5, [r4, #0]
 800da80:	f015 0506 	ands.w	r5, r5, #6
 800da84:	d106      	bne.n	800da94 <_printf_common+0x48>
 800da86:	f104 0a19 	add.w	sl, r4, #25
 800da8a:	68e3      	ldr	r3, [r4, #12]
 800da8c:	6832      	ldr	r2, [r6, #0]
 800da8e:	1a9b      	subs	r3, r3, r2
 800da90:	42ab      	cmp	r3, r5
 800da92:	dc26      	bgt.n	800dae2 <_printf_common+0x96>
 800da94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da98:	1e13      	subs	r3, r2, #0
 800da9a:	6822      	ldr	r2, [r4, #0]
 800da9c:	bf18      	it	ne
 800da9e:	2301      	movne	r3, #1
 800daa0:	0692      	lsls	r2, r2, #26
 800daa2:	d42b      	bmi.n	800dafc <_printf_common+0xb0>
 800daa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800daa8:	4649      	mov	r1, r9
 800daaa:	4638      	mov	r0, r7
 800daac:	47c0      	blx	r8
 800daae:	3001      	adds	r0, #1
 800dab0:	d01e      	beq.n	800daf0 <_printf_common+0xa4>
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	68e5      	ldr	r5, [r4, #12]
 800dab6:	6832      	ldr	r2, [r6, #0]
 800dab8:	f003 0306 	and.w	r3, r3, #6
 800dabc:	2b04      	cmp	r3, #4
 800dabe:	bf08      	it	eq
 800dac0:	1aad      	subeq	r5, r5, r2
 800dac2:	68a3      	ldr	r3, [r4, #8]
 800dac4:	6922      	ldr	r2, [r4, #16]
 800dac6:	bf0c      	ite	eq
 800dac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dacc:	2500      	movne	r5, #0
 800dace:	4293      	cmp	r3, r2
 800dad0:	bfc4      	itt	gt
 800dad2:	1a9b      	subgt	r3, r3, r2
 800dad4:	18ed      	addgt	r5, r5, r3
 800dad6:	2600      	movs	r6, #0
 800dad8:	341a      	adds	r4, #26
 800dada:	42b5      	cmp	r5, r6
 800dadc:	d11a      	bne.n	800db14 <_printf_common+0xc8>
 800dade:	2000      	movs	r0, #0
 800dae0:	e008      	b.n	800daf4 <_printf_common+0xa8>
 800dae2:	2301      	movs	r3, #1
 800dae4:	4652      	mov	r2, sl
 800dae6:	4649      	mov	r1, r9
 800dae8:	4638      	mov	r0, r7
 800daea:	47c0      	blx	r8
 800daec:	3001      	adds	r0, #1
 800daee:	d103      	bne.n	800daf8 <_printf_common+0xac>
 800daf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800daf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daf8:	3501      	adds	r5, #1
 800dafa:	e7c6      	b.n	800da8a <_printf_common+0x3e>
 800dafc:	18e1      	adds	r1, r4, r3
 800dafe:	1c5a      	adds	r2, r3, #1
 800db00:	2030      	movs	r0, #48	; 0x30
 800db02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db06:	4422      	add	r2, r4
 800db08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db10:	3302      	adds	r3, #2
 800db12:	e7c7      	b.n	800daa4 <_printf_common+0x58>
 800db14:	2301      	movs	r3, #1
 800db16:	4622      	mov	r2, r4
 800db18:	4649      	mov	r1, r9
 800db1a:	4638      	mov	r0, r7
 800db1c:	47c0      	blx	r8
 800db1e:	3001      	adds	r0, #1
 800db20:	d0e6      	beq.n	800daf0 <_printf_common+0xa4>
 800db22:	3601      	adds	r6, #1
 800db24:	e7d9      	b.n	800dada <_printf_common+0x8e>
	...

0800db28 <_printf_i>:
 800db28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db2c:	460c      	mov	r4, r1
 800db2e:	4691      	mov	r9, r2
 800db30:	7e27      	ldrb	r7, [r4, #24]
 800db32:	990c      	ldr	r1, [sp, #48]	; 0x30
 800db34:	2f78      	cmp	r7, #120	; 0x78
 800db36:	4680      	mov	r8, r0
 800db38:	469a      	mov	sl, r3
 800db3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db3e:	d807      	bhi.n	800db50 <_printf_i+0x28>
 800db40:	2f62      	cmp	r7, #98	; 0x62
 800db42:	d80a      	bhi.n	800db5a <_printf_i+0x32>
 800db44:	2f00      	cmp	r7, #0
 800db46:	f000 80d8 	beq.w	800dcfa <_printf_i+0x1d2>
 800db4a:	2f58      	cmp	r7, #88	; 0x58
 800db4c:	f000 80a3 	beq.w	800dc96 <_printf_i+0x16e>
 800db50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800db54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db58:	e03a      	b.n	800dbd0 <_printf_i+0xa8>
 800db5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db5e:	2b15      	cmp	r3, #21
 800db60:	d8f6      	bhi.n	800db50 <_printf_i+0x28>
 800db62:	a001      	add	r0, pc, #4	; (adr r0, 800db68 <_printf_i+0x40>)
 800db64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800db68:	0800dbc1 	.word	0x0800dbc1
 800db6c:	0800dbd5 	.word	0x0800dbd5
 800db70:	0800db51 	.word	0x0800db51
 800db74:	0800db51 	.word	0x0800db51
 800db78:	0800db51 	.word	0x0800db51
 800db7c:	0800db51 	.word	0x0800db51
 800db80:	0800dbd5 	.word	0x0800dbd5
 800db84:	0800db51 	.word	0x0800db51
 800db88:	0800db51 	.word	0x0800db51
 800db8c:	0800db51 	.word	0x0800db51
 800db90:	0800db51 	.word	0x0800db51
 800db94:	0800dce1 	.word	0x0800dce1
 800db98:	0800dc05 	.word	0x0800dc05
 800db9c:	0800dcc3 	.word	0x0800dcc3
 800dba0:	0800db51 	.word	0x0800db51
 800dba4:	0800db51 	.word	0x0800db51
 800dba8:	0800dd03 	.word	0x0800dd03
 800dbac:	0800db51 	.word	0x0800db51
 800dbb0:	0800dc05 	.word	0x0800dc05
 800dbb4:	0800db51 	.word	0x0800db51
 800dbb8:	0800db51 	.word	0x0800db51
 800dbbc:	0800dccb 	.word	0x0800dccb
 800dbc0:	680b      	ldr	r3, [r1, #0]
 800dbc2:	1d1a      	adds	r2, r3, #4
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	600a      	str	r2, [r1, #0]
 800dbc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dbcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e0a3      	b.n	800dd1c <_printf_i+0x1f4>
 800dbd4:	6825      	ldr	r5, [r4, #0]
 800dbd6:	6808      	ldr	r0, [r1, #0]
 800dbd8:	062e      	lsls	r6, r5, #24
 800dbda:	f100 0304 	add.w	r3, r0, #4
 800dbde:	d50a      	bpl.n	800dbf6 <_printf_i+0xce>
 800dbe0:	6805      	ldr	r5, [r0, #0]
 800dbe2:	600b      	str	r3, [r1, #0]
 800dbe4:	2d00      	cmp	r5, #0
 800dbe6:	da03      	bge.n	800dbf0 <_printf_i+0xc8>
 800dbe8:	232d      	movs	r3, #45	; 0x2d
 800dbea:	426d      	negs	r5, r5
 800dbec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbf0:	485e      	ldr	r0, [pc, #376]	; (800dd6c <_printf_i+0x244>)
 800dbf2:	230a      	movs	r3, #10
 800dbf4:	e019      	b.n	800dc2a <_printf_i+0x102>
 800dbf6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800dbfa:	6805      	ldr	r5, [r0, #0]
 800dbfc:	600b      	str	r3, [r1, #0]
 800dbfe:	bf18      	it	ne
 800dc00:	b22d      	sxthne	r5, r5
 800dc02:	e7ef      	b.n	800dbe4 <_printf_i+0xbc>
 800dc04:	680b      	ldr	r3, [r1, #0]
 800dc06:	6825      	ldr	r5, [r4, #0]
 800dc08:	1d18      	adds	r0, r3, #4
 800dc0a:	6008      	str	r0, [r1, #0]
 800dc0c:	0628      	lsls	r0, r5, #24
 800dc0e:	d501      	bpl.n	800dc14 <_printf_i+0xec>
 800dc10:	681d      	ldr	r5, [r3, #0]
 800dc12:	e002      	b.n	800dc1a <_printf_i+0xf2>
 800dc14:	0669      	lsls	r1, r5, #25
 800dc16:	d5fb      	bpl.n	800dc10 <_printf_i+0xe8>
 800dc18:	881d      	ldrh	r5, [r3, #0]
 800dc1a:	4854      	ldr	r0, [pc, #336]	; (800dd6c <_printf_i+0x244>)
 800dc1c:	2f6f      	cmp	r7, #111	; 0x6f
 800dc1e:	bf0c      	ite	eq
 800dc20:	2308      	moveq	r3, #8
 800dc22:	230a      	movne	r3, #10
 800dc24:	2100      	movs	r1, #0
 800dc26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc2a:	6866      	ldr	r6, [r4, #4]
 800dc2c:	60a6      	str	r6, [r4, #8]
 800dc2e:	2e00      	cmp	r6, #0
 800dc30:	bfa2      	ittt	ge
 800dc32:	6821      	ldrge	r1, [r4, #0]
 800dc34:	f021 0104 	bicge.w	r1, r1, #4
 800dc38:	6021      	strge	r1, [r4, #0]
 800dc3a:	b90d      	cbnz	r5, 800dc40 <_printf_i+0x118>
 800dc3c:	2e00      	cmp	r6, #0
 800dc3e:	d04d      	beq.n	800dcdc <_printf_i+0x1b4>
 800dc40:	4616      	mov	r6, r2
 800dc42:	fbb5 f1f3 	udiv	r1, r5, r3
 800dc46:	fb03 5711 	mls	r7, r3, r1, r5
 800dc4a:	5dc7      	ldrb	r7, [r0, r7]
 800dc4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc50:	462f      	mov	r7, r5
 800dc52:	42bb      	cmp	r3, r7
 800dc54:	460d      	mov	r5, r1
 800dc56:	d9f4      	bls.n	800dc42 <_printf_i+0x11a>
 800dc58:	2b08      	cmp	r3, #8
 800dc5a:	d10b      	bne.n	800dc74 <_printf_i+0x14c>
 800dc5c:	6823      	ldr	r3, [r4, #0]
 800dc5e:	07df      	lsls	r7, r3, #31
 800dc60:	d508      	bpl.n	800dc74 <_printf_i+0x14c>
 800dc62:	6923      	ldr	r3, [r4, #16]
 800dc64:	6861      	ldr	r1, [r4, #4]
 800dc66:	4299      	cmp	r1, r3
 800dc68:	bfde      	ittt	le
 800dc6a:	2330      	movle	r3, #48	; 0x30
 800dc6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc70:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800dc74:	1b92      	subs	r2, r2, r6
 800dc76:	6122      	str	r2, [r4, #16]
 800dc78:	f8cd a000 	str.w	sl, [sp]
 800dc7c:	464b      	mov	r3, r9
 800dc7e:	aa03      	add	r2, sp, #12
 800dc80:	4621      	mov	r1, r4
 800dc82:	4640      	mov	r0, r8
 800dc84:	f7ff fee2 	bl	800da4c <_printf_common>
 800dc88:	3001      	adds	r0, #1
 800dc8a:	d14c      	bne.n	800dd26 <_printf_i+0x1fe>
 800dc8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc90:	b004      	add	sp, #16
 800dc92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc96:	4835      	ldr	r0, [pc, #212]	; (800dd6c <_printf_i+0x244>)
 800dc98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dc9c:	6823      	ldr	r3, [r4, #0]
 800dc9e:	680e      	ldr	r6, [r1, #0]
 800dca0:	061f      	lsls	r7, r3, #24
 800dca2:	f856 5b04 	ldr.w	r5, [r6], #4
 800dca6:	600e      	str	r6, [r1, #0]
 800dca8:	d514      	bpl.n	800dcd4 <_printf_i+0x1ac>
 800dcaa:	07d9      	lsls	r1, r3, #31
 800dcac:	bf44      	itt	mi
 800dcae:	f043 0320 	orrmi.w	r3, r3, #32
 800dcb2:	6023      	strmi	r3, [r4, #0]
 800dcb4:	b91d      	cbnz	r5, 800dcbe <_printf_i+0x196>
 800dcb6:	6823      	ldr	r3, [r4, #0]
 800dcb8:	f023 0320 	bic.w	r3, r3, #32
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	2310      	movs	r3, #16
 800dcc0:	e7b0      	b.n	800dc24 <_printf_i+0xfc>
 800dcc2:	6823      	ldr	r3, [r4, #0]
 800dcc4:	f043 0320 	orr.w	r3, r3, #32
 800dcc8:	6023      	str	r3, [r4, #0]
 800dcca:	2378      	movs	r3, #120	; 0x78
 800dccc:	4828      	ldr	r0, [pc, #160]	; (800dd70 <_printf_i+0x248>)
 800dcce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dcd2:	e7e3      	b.n	800dc9c <_printf_i+0x174>
 800dcd4:	065e      	lsls	r6, r3, #25
 800dcd6:	bf48      	it	mi
 800dcd8:	b2ad      	uxthmi	r5, r5
 800dcda:	e7e6      	b.n	800dcaa <_printf_i+0x182>
 800dcdc:	4616      	mov	r6, r2
 800dcde:	e7bb      	b.n	800dc58 <_printf_i+0x130>
 800dce0:	680b      	ldr	r3, [r1, #0]
 800dce2:	6826      	ldr	r6, [r4, #0]
 800dce4:	6960      	ldr	r0, [r4, #20]
 800dce6:	1d1d      	adds	r5, r3, #4
 800dce8:	600d      	str	r5, [r1, #0]
 800dcea:	0635      	lsls	r5, r6, #24
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	d501      	bpl.n	800dcf4 <_printf_i+0x1cc>
 800dcf0:	6018      	str	r0, [r3, #0]
 800dcf2:	e002      	b.n	800dcfa <_printf_i+0x1d2>
 800dcf4:	0671      	lsls	r1, r6, #25
 800dcf6:	d5fb      	bpl.n	800dcf0 <_printf_i+0x1c8>
 800dcf8:	8018      	strh	r0, [r3, #0]
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	6123      	str	r3, [r4, #16]
 800dcfe:	4616      	mov	r6, r2
 800dd00:	e7ba      	b.n	800dc78 <_printf_i+0x150>
 800dd02:	680b      	ldr	r3, [r1, #0]
 800dd04:	1d1a      	adds	r2, r3, #4
 800dd06:	600a      	str	r2, [r1, #0]
 800dd08:	681e      	ldr	r6, [r3, #0]
 800dd0a:	6862      	ldr	r2, [r4, #4]
 800dd0c:	2100      	movs	r1, #0
 800dd0e:	4630      	mov	r0, r6
 800dd10:	f7f2 faee 	bl	80002f0 <memchr>
 800dd14:	b108      	cbz	r0, 800dd1a <_printf_i+0x1f2>
 800dd16:	1b80      	subs	r0, r0, r6
 800dd18:	6060      	str	r0, [r4, #4]
 800dd1a:	6863      	ldr	r3, [r4, #4]
 800dd1c:	6123      	str	r3, [r4, #16]
 800dd1e:	2300      	movs	r3, #0
 800dd20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd24:	e7a8      	b.n	800dc78 <_printf_i+0x150>
 800dd26:	6923      	ldr	r3, [r4, #16]
 800dd28:	4632      	mov	r2, r6
 800dd2a:	4649      	mov	r1, r9
 800dd2c:	4640      	mov	r0, r8
 800dd2e:	47d0      	blx	sl
 800dd30:	3001      	adds	r0, #1
 800dd32:	d0ab      	beq.n	800dc8c <_printf_i+0x164>
 800dd34:	6823      	ldr	r3, [r4, #0]
 800dd36:	079b      	lsls	r3, r3, #30
 800dd38:	d413      	bmi.n	800dd62 <_printf_i+0x23a>
 800dd3a:	68e0      	ldr	r0, [r4, #12]
 800dd3c:	9b03      	ldr	r3, [sp, #12]
 800dd3e:	4298      	cmp	r0, r3
 800dd40:	bfb8      	it	lt
 800dd42:	4618      	movlt	r0, r3
 800dd44:	e7a4      	b.n	800dc90 <_printf_i+0x168>
 800dd46:	2301      	movs	r3, #1
 800dd48:	4632      	mov	r2, r6
 800dd4a:	4649      	mov	r1, r9
 800dd4c:	4640      	mov	r0, r8
 800dd4e:	47d0      	blx	sl
 800dd50:	3001      	adds	r0, #1
 800dd52:	d09b      	beq.n	800dc8c <_printf_i+0x164>
 800dd54:	3501      	adds	r5, #1
 800dd56:	68e3      	ldr	r3, [r4, #12]
 800dd58:	9903      	ldr	r1, [sp, #12]
 800dd5a:	1a5b      	subs	r3, r3, r1
 800dd5c:	42ab      	cmp	r3, r5
 800dd5e:	dcf2      	bgt.n	800dd46 <_printf_i+0x21e>
 800dd60:	e7eb      	b.n	800dd3a <_printf_i+0x212>
 800dd62:	2500      	movs	r5, #0
 800dd64:	f104 0619 	add.w	r6, r4, #25
 800dd68:	e7f5      	b.n	800dd56 <_printf_i+0x22e>
 800dd6a:	bf00      	nop
 800dd6c:	0800fc9e 	.word	0x0800fc9e
 800dd70:	0800fcaf 	.word	0x0800fcaf

0800dd74 <_sbrk_r>:
 800dd74:	b538      	push	{r3, r4, r5, lr}
 800dd76:	4d06      	ldr	r5, [pc, #24]	; (800dd90 <_sbrk_r+0x1c>)
 800dd78:	2300      	movs	r3, #0
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	4608      	mov	r0, r1
 800dd7e:	602b      	str	r3, [r5, #0]
 800dd80:	f7f3 feb2 	bl	8001ae8 <_sbrk>
 800dd84:	1c43      	adds	r3, r0, #1
 800dd86:	d102      	bne.n	800dd8e <_sbrk_r+0x1a>
 800dd88:	682b      	ldr	r3, [r5, #0]
 800dd8a:	b103      	cbz	r3, 800dd8e <_sbrk_r+0x1a>
 800dd8c:	6023      	str	r3, [r4, #0]
 800dd8e:	bd38      	pop	{r3, r4, r5, pc}
 800dd90:	240064d0 	.word	0x240064d0

0800dd94 <__swbuf_r>:
 800dd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd96:	460e      	mov	r6, r1
 800dd98:	4614      	mov	r4, r2
 800dd9a:	4605      	mov	r5, r0
 800dd9c:	b118      	cbz	r0, 800dda6 <__swbuf_r+0x12>
 800dd9e:	6983      	ldr	r3, [r0, #24]
 800dda0:	b90b      	cbnz	r3, 800dda6 <__swbuf_r+0x12>
 800dda2:	f000 ffe1 	bl	800ed68 <__sinit>
 800dda6:	4b21      	ldr	r3, [pc, #132]	; (800de2c <__swbuf_r+0x98>)
 800dda8:	429c      	cmp	r4, r3
 800ddaa:	d12b      	bne.n	800de04 <__swbuf_r+0x70>
 800ddac:	686c      	ldr	r4, [r5, #4]
 800ddae:	69a3      	ldr	r3, [r4, #24]
 800ddb0:	60a3      	str	r3, [r4, #8]
 800ddb2:	89a3      	ldrh	r3, [r4, #12]
 800ddb4:	071a      	lsls	r2, r3, #28
 800ddb6:	d52f      	bpl.n	800de18 <__swbuf_r+0x84>
 800ddb8:	6923      	ldr	r3, [r4, #16]
 800ddba:	b36b      	cbz	r3, 800de18 <__swbuf_r+0x84>
 800ddbc:	6923      	ldr	r3, [r4, #16]
 800ddbe:	6820      	ldr	r0, [r4, #0]
 800ddc0:	1ac0      	subs	r0, r0, r3
 800ddc2:	6963      	ldr	r3, [r4, #20]
 800ddc4:	b2f6      	uxtb	r6, r6
 800ddc6:	4283      	cmp	r3, r0
 800ddc8:	4637      	mov	r7, r6
 800ddca:	dc04      	bgt.n	800ddd6 <__swbuf_r+0x42>
 800ddcc:	4621      	mov	r1, r4
 800ddce:	4628      	mov	r0, r5
 800ddd0:	f000 ff36 	bl	800ec40 <_fflush_r>
 800ddd4:	bb30      	cbnz	r0, 800de24 <__swbuf_r+0x90>
 800ddd6:	68a3      	ldr	r3, [r4, #8]
 800ddd8:	3b01      	subs	r3, #1
 800ddda:	60a3      	str	r3, [r4, #8]
 800dddc:	6823      	ldr	r3, [r4, #0]
 800ddde:	1c5a      	adds	r2, r3, #1
 800dde0:	6022      	str	r2, [r4, #0]
 800dde2:	701e      	strb	r6, [r3, #0]
 800dde4:	6963      	ldr	r3, [r4, #20]
 800dde6:	3001      	adds	r0, #1
 800dde8:	4283      	cmp	r3, r0
 800ddea:	d004      	beq.n	800ddf6 <__swbuf_r+0x62>
 800ddec:	89a3      	ldrh	r3, [r4, #12]
 800ddee:	07db      	lsls	r3, r3, #31
 800ddf0:	d506      	bpl.n	800de00 <__swbuf_r+0x6c>
 800ddf2:	2e0a      	cmp	r6, #10
 800ddf4:	d104      	bne.n	800de00 <__swbuf_r+0x6c>
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f000 ff21 	bl	800ec40 <_fflush_r>
 800ddfe:	b988      	cbnz	r0, 800de24 <__swbuf_r+0x90>
 800de00:	4638      	mov	r0, r7
 800de02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de04:	4b0a      	ldr	r3, [pc, #40]	; (800de30 <__swbuf_r+0x9c>)
 800de06:	429c      	cmp	r4, r3
 800de08:	d101      	bne.n	800de0e <__swbuf_r+0x7a>
 800de0a:	68ac      	ldr	r4, [r5, #8]
 800de0c:	e7cf      	b.n	800ddae <__swbuf_r+0x1a>
 800de0e:	4b09      	ldr	r3, [pc, #36]	; (800de34 <__swbuf_r+0xa0>)
 800de10:	429c      	cmp	r4, r3
 800de12:	bf08      	it	eq
 800de14:	68ec      	ldreq	r4, [r5, #12]
 800de16:	e7ca      	b.n	800ddae <__swbuf_r+0x1a>
 800de18:	4621      	mov	r1, r4
 800de1a:	4628      	mov	r0, r5
 800de1c:	f000 f80c 	bl	800de38 <__swsetup_r>
 800de20:	2800      	cmp	r0, #0
 800de22:	d0cb      	beq.n	800ddbc <__swbuf_r+0x28>
 800de24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800de28:	e7ea      	b.n	800de00 <__swbuf_r+0x6c>
 800de2a:	bf00      	nop
 800de2c:	0800fd74 	.word	0x0800fd74
 800de30:	0800fd94 	.word	0x0800fd94
 800de34:	0800fd54 	.word	0x0800fd54

0800de38 <__swsetup_r>:
 800de38:	4b32      	ldr	r3, [pc, #200]	; (800df04 <__swsetup_r+0xcc>)
 800de3a:	b570      	push	{r4, r5, r6, lr}
 800de3c:	681d      	ldr	r5, [r3, #0]
 800de3e:	4606      	mov	r6, r0
 800de40:	460c      	mov	r4, r1
 800de42:	b125      	cbz	r5, 800de4e <__swsetup_r+0x16>
 800de44:	69ab      	ldr	r3, [r5, #24]
 800de46:	b913      	cbnz	r3, 800de4e <__swsetup_r+0x16>
 800de48:	4628      	mov	r0, r5
 800de4a:	f000 ff8d 	bl	800ed68 <__sinit>
 800de4e:	4b2e      	ldr	r3, [pc, #184]	; (800df08 <__swsetup_r+0xd0>)
 800de50:	429c      	cmp	r4, r3
 800de52:	d10f      	bne.n	800de74 <__swsetup_r+0x3c>
 800de54:	686c      	ldr	r4, [r5, #4]
 800de56:	89a3      	ldrh	r3, [r4, #12]
 800de58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de5c:	0719      	lsls	r1, r3, #28
 800de5e:	d42c      	bmi.n	800deba <__swsetup_r+0x82>
 800de60:	06dd      	lsls	r5, r3, #27
 800de62:	d411      	bmi.n	800de88 <__swsetup_r+0x50>
 800de64:	2309      	movs	r3, #9
 800de66:	6033      	str	r3, [r6, #0]
 800de68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de6c:	81a3      	strh	r3, [r4, #12]
 800de6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de72:	e03e      	b.n	800def2 <__swsetup_r+0xba>
 800de74:	4b25      	ldr	r3, [pc, #148]	; (800df0c <__swsetup_r+0xd4>)
 800de76:	429c      	cmp	r4, r3
 800de78:	d101      	bne.n	800de7e <__swsetup_r+0x46>
 800de7a:	68ac      	ldr	r4, [r5, #8]
 800de7c:	e7eb      	b.n	800de56 <__swsetup_r+0x1e>
 800de7e:	4b24      	ldr	r3, [pc, #144]	; (800df10 <__swsetup_r+0xd8>)
 800de80:	429c      	cmp	r4, r3
 800de82:	bf08      	it	eq
 800de84:	68ec      	ldreq	r4, [r5, #12]
 800de86:	e7e6      	b.n	800de56 <__swsetup_r+0x1e>
 800de88:	0758      	lsls	r0, r3, #29
 800de8a:	d512      	bpl.n	800deb2 <__swsetup_r+0x7a>
 800de8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de8e:	b141      	cbz	r1, 800dea2 <__swsetup_r+0x6a>
 800de90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de94:	4299      	cmp	r1, r3
 800de96:	d002      	beq.n	800de9e <__swsetup_r+0x66>
 800de98:	4630      	mov	r0, r6
 800de9a:	f7ff fa7d 	bl	800d398 <_free_r>
 800de9e:	2300      	movs	r3, #0
 800dea0:	6363      	str	r3, [r4, #52]	; 0x34
 800dea2:	89a3      	ldrh	r3, [r4, #12]
 800dea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dea8:	81a3      	strh	r3, [r4, #12]
 800deaa:	2300      	movs	r3, #0
 800deac:	6063      	str	r3, [r4, #4]
 800deae:	6923      	ldr	r3, [r4, #16]
 800deb0:	6023      	str	r3, [r4, #0]
 800deb2:	89a3      	ldrh	r3, [r4, #12]
 800deb4:	f043 0308 	orr.w	r3, r3, #8
 800deb8:	81a3      	strh	r3, [r4, #12]
 800deba:	6923      	ldr	r3, [r4, #16]
 800debc:	b94b      	cbnz	r3, 800ded2 <__swsetup_r+0x9a>
 800debe:	89a3      	ldrh	r3, [r4, #12]
 800dec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dec8:	d003      	beq.n	800ded2 <__swsetup_r+0x9a>
 800deca:	4621      	mov	r1, r4
 800decc:	4630      	mov	r0, r6
 800dece:	f001 f815 	bl	800eefc <__smakebuf_r>
 800ded2:	89a0      	ldrh	r0, [r4, #12]
 800ded4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ded8:	f010 0301 	ands.w	r3, r0, #1
 800dedc:	d00a      	beq.n	800def4 <__swsetup_r+0xbc>
 800dede:	2300      	movs	r3, #0
 800dee0:	60a3      	str	r3, [r4, #8]
 800dee2:	6963      	ldr	r3, [r4, #20]
 800dee4:	425b      	negs	r3, r3
 800dee6:	61a3      	str	r3, [r4, #24]
 800dee8:	6923      	ldr	r3, [r4, #16]
 800deea:	b943      	cbnz	r3, 800defe <__swsetup_r+0xc6>
 800deec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800def0:	d1ba      	bne.n	800de68 <__swsetup_r+0x30>
 800def2:	bd70      	pop	{r4, r5, r6, pc}
 800def4:	0781      	lsls	r1, r0, #30
 800def6:	bf58      	it	pl
 800def8:	6963      	ldrpl	r3, [r4, #20]
 800defa:	60a3      	str	r3, [r4, #8]
 800defc:	e7f4      	b.n	800dee8 <__swsetup_r+0xb0>
 800defe:	2000      	movs	r0, #0
 800df00:	e7f7      	b.n	800def2 <__swsetup_r+0xba>
 800df02:	bf00      	nop
 800df04:	24003410 	.word	0x24003410
 800df08:	0800fd74 	.word	0x0800fd74
 800df0c:	0800fd94 	.word	0x0800fd94
 800df10:	0800fd54 	.word	0x0800fd54

0800df14 <quorem>:
 800df14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df18:	6903      	ldr	r3, [r0, #16]
 800df1a:	690c      	ldr	r4, [r1, #16]
 800df1c:	42a3      	cmp	r3, r4
 800df1e:	4607      	mov	r7, r0
 800df20:	f2c0 8081 	blt.w	800e026 <quorem+0x112>
 800df24:	3c01      	subs	r4, #1
 800df26:	f101 0814 	add.w	r8, r1, #20
 800df2a:	f100 0514 	add.w	r5, r0, #20
 800df2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df32:	9301      	str	r3, [sp, #4]
 800df34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800df38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df3c:	3301      	adds	r3, #1
 800df3e:	429a      	cmp	r2, r3
 800df40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800df44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800df48:	fbb2 f6f3 	udiv	r6, r2, r3
 800df4c:	d331      	bcc.n	800dfb2 <quorem+0x9e>
 800df4e:	f04f 0e00 	mov.w	lr, #0
 800df52:	4640      	mov	r0, r8
 800df54:	46ac      	mov	ip, r5
 800df56:	46f2      	mov	sl, lr
 800df58:	f850 2b04 	ldr.w	r2, [r0], #4
 800df5c:	b293      	uxth	r3, r2
 800df5e:	fb06 e303 	mla	r3, r6, r3, lr
 800df62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800df66:	b29b      	uxth	r3, r3
 800df68:	ebaa 0303 	sub.w	r3, sl, r3
 800df6c:	0c12      	lsrs	r2, r2, #16
 800df6e:	f8dc a000 	ldr.w	sl, [ip]
 800df72:	fb06 e202 	mla	r2, r6, r2, lr
 800df76:	fa13 f38a 	uxtah	r3, r3, sl
 800df7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800df7e:	fa1f fa82 	uxth.w	sl, r2
 800df82:	f8dc 2000 	ldr.w	r2, [ip]
 800df86:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800df8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800df8e:	b29b      	uxth	r3, r3
 800df90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df94:	4581      	cmp	r9, r0
 800df96:	f84c 3b04 	str.w	r3, [ip], #4
 800df9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800df9e:	d2db      	bcs.n	800df58 <quorem+0x44>
 800dfa0:	f855 300b 	ldr.w	r3, [r5, fp]
 800dfa4:	b92b      	cbnz	r3, 800dfb2 <quorem+0x9e>
 800dfa6:	9b01      	ldr	r3, [sp, #4]
 800dfa8:	3b04      	subs	r3, #4
 800dfaa:	429d      	cmp	r5, r3
 800dfac:	461a      	mov	r2, r3
 800dfae:	d32e      	bcc.n	800e00e <quorem+0xfa>
 800dfb0:	613c      	str	r4, [r7, #16]
 800dfb2:	4638      	mov	r0, r7
 800dfb4:	f001 fa7a 	bl	800f4ac <__mcmp>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	db24      	blt.n	800e006 <quorem+0xf2>
 800dfbc:	3601      	adds	r6, #1
 800dfbe:	4628      	mov	r0, r5
 800dfc0:	f04f 0c00 	mov.w	ip, #0
 800dfc4:	f858 2b04 	ldr.w	r2, [r8], #4
 800dfc8:	f8d0 e000 	ldr.w	lr, [r0]
 800dfcc:	b293      	uxth	r3, r2
 800dfce:	ebac 0303 	sub.w	r3, ip, r3
 800dfd2:	0c12      	lsrs	r2, r2, #16
 800dfd4:	fa13 f38e 	uxtah	r3, r3, lr
 800dfd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dfdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfe6:	45c1      	cmp	r9, r8
 800dfe8:	f840 3b04 	str.w	r3, [r0], #4
 800dfec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dff0:	d2e8      	bcs.n	800dfc4 <quorem+0xb0>
 800dff2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dff6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dffa:	b922      	cbnz	r2, 800e006 <quorem+0xf2>
 800dffc:	3b04      	subs	r3, #4
 800dffe:	429d      	cmp	r5, r3
 800e000:	461a      	mov	r2, r3
 800e002:	d30a      	bcc.n	800e01a <quorem+0x106>
 800e004:	613c      	str	r4, [r7, #16]
 800e006:	4630      	mov	r0, r6
 800e008:	b003      	add	sp, #12
 800e00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e00e:	6812      	ldr	r2, [r2, #0]
 800e010:	3b04      	subs	r3, #4
 800e012:	2a00      	cmp	r2, #0
 800e014:	d1cc      	bne.n	800dfb0 <quorem+0x9c>
 800e016:	3c01      	subs	r4, #1
 800e018:	e7c7      	b.n	800dfaa <quorem+0x96>
 800e01a:	6812      	ldr	r2, [r2, #0]
 800e01c:	3b04      	subs	r3, #4
 800e01e:	2a00      	cmp	r2, #0
 800e020:	d1f0      	bne.n	800e004 <quorem+0xf0>
 800e022:	3c01      	subs	r4, #1
 800e024:	e7eb      	b.n	800dffe <quorem+0xea>
 800e026:	2000      	movs	r0, #0
 800e028:	e7ee      	b.n	800e008 <quorem+0xf4>
 800e02a:	0000      	movs	r0, r0
 800e02c:	0000      	movs	r0, r0
	...

0800e030 <_dtoa_r>:
 800e030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e034:	ec59 8b10 	vmov	r8, r9, d0
 800e038:	b095      	sub	sp, #84	; 0x54
 800e03a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e03c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800e03e:	9107      	str	r1, [sp, #28]
 800e040:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e044:	4606      	mov	r6, r0
 800e046:	9209      	str	r2, [sp, #36]	; 0x24
 800e048:	9310      	str	r3, [sp, #64]	; 0x40
 800e04a:	b975      	cbnz	r5, 800e06a <_dtoa_r+0x3a>
 800e04c:	2010      	movs	r0, #16
 800e04e:	f7ff f993 	bl	800d378 <malloc>
 800e052:	4602      	mov	r2, r0
 800e054:	6270      	str	r0, [r6, #36]	; 0x24
 800e056:	b920      	cbnz	r0, 800e062 <_dtoa_r+0x32>
 800e058:	4bab      	ldr	r3, [pc, #684]	; (800e308 <_dtoa_r+0x2d8>)
 800e05a:	21ea      	movs	r1, #234	; 0xea
 800e05c:	48ab      	ldr	r0, [pc, #684]	; (800e30c <_dtoa_r+0x2dc>)
 800e05e:	f001 fce3 	bl	800fa28 <__assert_func>
 800e062:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e066:	6005      	str	r5, [r0, #0]
 800e068:	60c5      	str	r5, [r0, #12]
 800e06a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e06c:	6819      	ldr	r1, [r3, #0]
 800e06e:	b151      	cbz	r1, 800e086 <_dtoa_r+0x56>
 800e070:	685a      	ldr	r2, [r3, #4]
 800e072:	604a      	str	r2, [r1, #4]
 800e074:	2301      	movs	r3, #1
 800e076:	4093      	lsls	r3, r2
 800e078:	608b      	str	r3, [r1, #8]
 800e07a:	4630      	mov	r0, r6
 800e07c:	f000 ffd8 	bl	800f030 <_Bfree>
 800e080:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e082:	2200      	movs	r2, #0
 800e084:	601a      	str	r2, [r3, #0]
 800e086:	f1b9 0300 	subs.w	r3, r9, #0
 800e08a:	bfbb      	ittet	lt
 800e08c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e090:	9303      	strlt	r3, [sp, #12]
 800e092:	2300      	movge	r3, #0
 800e094:	2201      	movlt	r2, #1
 800e096:	bfac      	ite	ge
 800e098:	6023      	strge	r3, [r4, #0]
 800e09a:	6022      	strlt	r2, [r4, #0]
 800e09c:	4b9c      	ldr	r3, [pc, #624]	; (800e310 <_dtoa_r+0x2e0>)
 800e09e:	9c03      	ldr	r4, [sp, #12]
 800e0a0:	43a3      	bics	r3, r4
 800e0a2:	d11a      	bne.n	800e0da <_dtoa_r+0xaa>
 800e0a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e0a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e0aa:	6013      	str	r3, [r2, #0]
 800e0ac:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800e0b0:	ea53 0308 	orrs.w	r3, r3, r8
 800e0b4:	f000 8512 	beq.w	800eadc <_dtoa_r+0xaac>
 800e0b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e0ba:	b953      	cbnz	r3, 800e0d2 <_dtoa_r+0xa2>
 800e0bc:	4b95      	ldr	r3, [pc, #596]	; (800e314 <_dtoa_r+0x2e4>)
 800e0be:	e01f      	b.n	800e100 <_dtoa_r+0xd0>
 800e0c0:	4b95      	ldr	r3, [pc, #596]	; (800e318 <_dtoa_r+0x2e8>)
 800e0c2:	9300      	str	r3, [sp, #0]
 800e0c4:	3308      	adds	r3, #8
 800e0c6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e0c8:	6013      	str	r3, [r2, #0]
 800e0ca:	9800      	ldr	r0, [sp, #0]
 800e0cc:	b015      	add	sp, #84	; 0x54
 800e0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d2:	4b90      	ldr	r3, [pc, #576]	; (800e314 <_dtoa_r+0x2e4>)
 800e0d4:	9300      	str	r3, [sp, #0]
 800e0d6:	3303      	adds	r3, #3
 800e0d8:	e7f5      	b.n	800e0c6 <_dtoa_r+0x96>
 800e0da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0e6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e0ea:	d10b      	bne.n	800e104 <_dtoa_r+0xd4>
 800e0ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	6013      	str	r3, [r2, #0]
 800e0f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f000 84ee 	beq.w	800ead6 <_dtoa_r+0xaa6>
 800e0fa:	4888      	ldr	r0, [pc, #544]	; (800e31c <_dtoa_r+0x2ec>)
 800e0fc:	6018      	str	r0, [r3, #0]
 800e0fe:	1e43      	subs	r3, r0, #1
 800e100:	9300      	str	r3, [sp, #0]
 800e102:	e7e2      	b.n	800e0ca <_dtoa_r+0x9a>
 800e104:	a913      	add	r1, sp, #76	; 0x4c
 800e106:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e10a:	aa12      	add	r2, sp, #72	; 0x48
 800e10c:	4630      	mov	r0, r6
 800e10e:	f001 fa71 	bl	800f5f4 <__d2b>
 800e112:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800e116:	4605      	mov	r5, r0
 800e118:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e11a:	2900      	cmp	r1, #0
 800e11c:	d047      	beq.n	800e1ae <_dtoa_r+0x17e>
 800e11e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e120:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e124:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e128:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800e12c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e130:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e134:	2400      	movs	r4, #0
 800e136:	ec43 2b16 	vmov	d6, r2, r3
 800e13a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e13e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800e2f0 <_dtoa_r+0x2c0>
 800e142:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e146:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800e2f8 <_dtoa_r+0x2c8>
 800e14a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e14e:	eeb0 7b46 	vmov.f64	d7, d6
 800e152:	ee06 1a90 	vmov	s13, r1
 800e156:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800e15a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e300 <_dtoa_r+0x2d0>
 800e15e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e162:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e166:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e16e:	ee16 ba90 	vmov	fp, s13
 800e172:	9411      	str	r4, [sp, #68]	; 0x44
 800e174:	d508      	bpl.n	800e188 <_dtoa_r+0x158>
 800e176:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e17a:	eeb4 6b47 	vcmp.f64	d6, d7
 800e17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e182:	bf18      	it	ne
 800e184:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800e188:	f1bb 0f16 	cmp.w	fp, #22
 800e18c:	d832      	bhi.n	800e1f4 <_dtoa_r+0x1c4>
 800e18e:	4b64      	ldr	r3, [pc, #400]	; (800e320 <_dtoa_r+0x2f0>)
 800e190:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e194:	ed93 7b00 	vldr	d7, [r3]
 800e198:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e19c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a4:	d501      	bpl.n	800e1aa <_dtoa_r+0x17a>
 800e1a6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	e023      	b.n	800e1f6 <_dtoa_r+0x1c6>
 800e1ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e1b0:	4401      	add	r1, r0
 800e1b2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800e1b6:	2b20      	cmp	r3, #32
 800e1b8:	bfc3      	ittte	gt
 800e1ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e1be:	fa04 f303 	lslgt.w	r3, r4, r3
 800e1c2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800e1c6:	f1c3 0320 	rsble	r3, r3, #32
 800e1ca:	bfc6      	itte	gt
 800e1cc:	fa28 f804 	lsrgt.w	r8, r8, r4
 800e1d0:	ea43 0308 	orrgt.w	r3, r3, r8
 800e1d4:	fa08 f303 	lslle.w	r3, r8, r3
 800e1d8:	ee07 3a90 	vmov	s15, r3
 800e1dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e1e0:	3901      	subs	r1, #1
 800e1e2:	ed8d 7b00 	vstr	d7, [sp]
 800e1e6:	9c01      	ldr	r4, [sp, #4]
 800e1e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1ec:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800e1f0:	2401      	movs	r4, #1
 800e1f2:	e7a0      	b.n	800e136 <_dtoa_r+0x106>
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1f8:	1a43      	subs	r3, r0, r1
 800e1fa:	1e5a      	subs	r2, r3, #1
 800e1fc:	bf45      	ittet	mi
 800e1fe:	f1c3 0301 	rsbmi	r3, r3, #1
 800e202:	9305      	strmi	r3, [sp, #20]
 800e204:	2300      	movpl	r3, #0
 800e206:	2300      	movmi	r3, #0
 800e208:	9206      	str	r2, [sp, #24]
 800e20a:	bf54      	ite	pl
 800e20c:	9305      	strpl	r3, [sp, #20]
 800e20e:	9306      	strmi	r3, [sp, #24]
 800e210:	f1bb 0f00 	cmp.w	fp, #0
 800e214:	db18      	blt.n	800e248 <_dtoa_r+0x218>
 800e216:	9b06      	ldr	r3, [sp, #24]
 800e218:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800e21c:	445b      	add	r3, fp
 800e21e:	9306      	str	r3, [sp, #24]
 800e220:	2300      	movs	r3, #0
 800e222:	9a07      	ldr	r2, [sp, #28]
 800e224:	2a09      	cmp	r2, #9
 800e226:	d849      	bhi.n	800e2bc <_dtoa_r+0x28c>
 800e228:	2a05      	cmp	r2, #5
 800e22a:	bfc4      	itt	gt
 800e22c:	3a04      	subgt	r2, #4
 800e22e:	9207      	strgt	r2, [sp, #28]
 800e230:	9a07      	ldr	r2, [sp, #28]
 800e232:	f1a2 0202 	sub.w	r2, r2, #2
 800e236:	bfcc      	ite	gt
 800e238:	2400      	movgt	r4, #0
 800e23a:	2401      	movle	r4, #1
 800e23c:	2a03      	cmp	r2, #3
 800e23e:	d848      	bhi.n	800e2d2 <_dtoa_r+0x2a2>
 800e240:	e8df f002 	tbb	[pc, r2]
 800e244:	3a2c2e0b 	.word	0x3a2c2e0b
 800e248:	9b05      	ldr	r3, [sp, #20]
 800e24a:	2200      	movs	r2, #0
 800e24c:	eba3 030b 	sub.w	r3, r3, fp
 800e250:	9305      	str	r3, [sp, #20]
 800e252:	920e      	str	r2, [sp, #56]	; 0x38
 800e254:	f1cb 0300 	rsb	r3, fp, #0
 800e258:	e7e3      	b.n	800e222 <_dtoa_r+0x1f2>
 800e25a:	2200      	movs	r2, #0
 800e25c:	9208      	str	r2, [sp, #32]
 800e25e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e260:	2a00      	cmp	r2, #0
 800e262:	dc39      	bgt.n	800e2d8 <_dtoa_r+0x2a8>
 800e264:	f04f 0a01 	mov.w	sl, #1
 800e268:	46d1      	mov	r9, sl
 800e26a:	4652      	mov	r2, sl
 800e26c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e270:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800e272:	2100      	movs	r1, #0
 800e274:	6079      	str	r1, [r7, #4]
 800e276:	2004      	movs	r0, #4
 800e278:	f100 0c14 	add.w	ip, r0, #20
 800e27c:	4594      	cmp	ip, r2
 800e27e:	6879      	ldr	r1, [r7, #4]
 800e280:	d92f      	bls.n	800e2e2 <_dtoa_r+0x2b2>
 800e282:	4630      	mov	r0, r6
 800e284:	930c      	str	r3, [sp, #48]	; 0x30
 800e286:	f000 fe93 	bl	800efb0 <_Balloc>
 800e28a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e28c:	9000      	str	r0, [sp, #0]
 800e28e:	4602      	mov	r2, r0
 800e290:	2800      	cmp	r0, #0
 800e292:	d149      	bne.n	800e328 <_dtoa_r+0x2f8>
 800e294:	4b23      	ldr	r3, [pc, #140]	; (800e324 <_dtoa_r+0x2f4>)
 800e296:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e29a:	e6df      	b.n	800e05c <_dtoa_r+0x2c>
 800e29c:	2201      	movs	r2, #1
 800e29e:	e7dd      	b.n	800e25c <_dtoa_r+0x22c>
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	9208      	str	r2, [sp, #32]
 800e2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2a6:	eb0b 0a02 	add.w	sl, fp, r2
 800e2aa:	f10a 0901 	add.w	r9, sl, #1
 800e2ae:	464a      	mov	r2, r9
 800e2b0:	2a01      	cmp	r2, #1
 800e2b2:	bfb8      	it	lt
 800e2b4:	2201      	movlt	r2, #1
 800e2b6:	e7db      	b.n	800e270 <_dtoa_r+0x240>
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	e7f2      	b.n	800e2a2 <_dtoa_r+0x272>
 800e2bc:	2401      	movs	r4, #1
 800e2be:	2200      	movs	r2, #0
 800e2c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800e2c4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	46d1      	mov	r9, sl
 800e2cc:	2212      	movs	r2, #18
 800e2ce:	9109      	str	r1, [sp, #36]	; 0x24
 800e2d0:	e7ce      	b.n	800e270 <_dtoa_r+0x240>
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	9208      	str	r2, [sp, #32]
 800e2d6:	e7f5      	b.n	800e2c4 <_dtoa_r+0x294>
 800e2d8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e2dc:	46d1      	mov	r9, sl
 800e2de:	4652      	mov	r2, sl
 800e2e0:	e7c6      	b.n	800e270 <_dtoa_r+0x240>
 800e2e2:	3101      	adds	r1, #1
 800e2e4:	6079      	str	r1, [r7, #4]
 800e2e6:	0040      	lsls	r0, r0, #1
 800e2e8:	e7c6      	b.n	800e278 <_dtoa_r+0x248>
 800e2ea:	bf00      	nop
 800e2ec:	f3af 8000 	nop.w
 800e2f0:	636f4361 	.word	0x636f4361
 800e2f4:	3fd287a7 	.word	0x3fd287a7
 800e2f8:	8b60c8b3 	.word	0x8b60c8b3
 800e2fc:	3fc68a28 	.word	0x3fc68a28
 800e300:	509f79fb 	.word	0x509f79fb
 800e304:	3fd34413 	.word	0x3fd34413
 800e308:	0800fccd 	.word	0x0800fccd
 800e30c:	0800fce4 	.word	0x0800fce4
 800e310:	7ff00000 	.word	0x7ff00000
 800e314:	0800fcc9 	.word	0x0800fcc9
 800e318:	0800fcc0 	.word	0x0800fcc0
 800e31c:	0800fc9d 	.word	0x0800fc9d
 800e320:	0800fe40 	.word	0x0800fe40
 800e324:	0800fd43 	.word	0x0800fd43
 800e328:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800e32a:	9900      	ldr	r1, [sp, #0]
 800e32c:	6011      	str	r1, [r2, #0]
 800e32e:	f1b9 0f0e 	cmp.w	r9, #14
 800e332:	d872      	bhi.n	800e41a <_dtoa_r+0x3ea>
 800e334:	2c00      	cmp	r4, #0
 800e336:	d070      	beq.n	800e41a <_dtoa_r+0x3ea>
 800e338:	f1bb 0f00 	cmp.w	fp, #0
 800e33c:	f340 80a6 	ble.w	800e48c <_dtoa_r+0x45c>
 800e340:	49ca      	ldr	r1, [pc, #808]	; (800e66c <_dtoa_r+0x63c>)
 800e342:	f00b 020f 	and.w	r2, fp, #15
 800e346:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e34a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e34e:	ed92 7b00 	vldr	d7, [r2]
 800e352:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e356:	f000 808d 	beq.w	800e474 <_dtoa_r+0x444>
 800e35a:	4ac5      	ldr	r2, [pc, #788]	; (800e670 <_dtoa_r+0x640>)
 800e35c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e360:	ed92 6b08 	vldr	d6, [r2, #32]
 800e364:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800e368:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e36c:	f001 010f 	and.w	r1, r1, #15
 800e370:	2203      	movs	r2, #3
 800e372:	48bf      	ldr	r0, [pc, #764]	; (800e670 <_dtoa_r+0x640>)
 800e374:	2900      	cmp	r1, #0
 800e376:	d17f      	bne.n	800e478 <_dtoa_r+0x448>
 800e378:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e37c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e380:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e384:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e386:	2900      	cmp	r1, #0
 800e388:	f000 80b2 	beq.w	800e4f0 <_dtoa_r+0x4c0>
 800e38c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e390:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e394:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e39c:	f140 80a8 	bpl.w	800e4f0 <_dtoa_r+0x4c0>
 800e3a0:	f1b9 0f00 	cmp.w	r9, #0
 800e3a4:	f000 80a4 	beq.w	800e4f0 <_dtoa_r+0x4c0>
 800e3a8:	f1ba 0f00 	cmp.w	sl, #0
 800e3ac:	dd31      	ble.n	800e412 <_dtoa_r+0x3e2>
 800e3ae:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e3b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e3b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e3ba:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800e3be:	3201      	adds	r2, #1
 800e3c0:	4650      	mov	r0, sl
 800e3c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e3c6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e3ca:	ee07 2a90 	vmov	s15, r2
 800e3ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e3d2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e3d6:	ed8d 5b02 	vstr	d5, [sp, #8]
 800e3da:	9c03      	ldr	r4, [sp, #12]
 800e3dc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e3e0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	f040 8086 	bne.w	800e4f6 <_dtoa_r+0x4c6>
 800e3ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e3ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e3f2:	ec42 1b17 	vmov	d7, r1, r2
 800e3f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3fe:	f300 8272 	bgt.w	800e8e6 <_dtoa_r+0x8b6>
 800e402:	eeb1 7b47 	vneg.f64	d7, d7
 800e406:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40e:	f100 8267 	bmi.w	800e8e0 <_dtoa_r+0x8b0>
 800e412:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800e416:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e41a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e41c:	2a00      	cmp	r2, #0
 800e41e:	f2c0 8129 	blt.w	800e674 <_dtoa_r+0x644>
 800e422:	f1bb 0f0e 	cmp.w	fp, #14
 800e426:	f300 8125 	bgt.w	800e674 <_dtoa_r+0x644>
 800e42a:	4b90      	ldr	r3, [pc, #576]	; (800e66c <_dtoa_r+0x63c>)
 800e42c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e430:	ed93 6b00 	vldr	d6, [r3]
 800e434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e436:	2b00      	cmp	r3, #0
 800e438:	f280 80c3 	bge.w	800e5c2 <_dtoa_r+0x592>
 800e43c:	f1b9 0f00 	cmp.w	r9, #0
 800e440:	f300 80bf 	bgt.w	800e5c2 <_dtoa_r+0x592>
 800e444:	f040 824c 	bne.w	800e8e0 <_dtoa_r+0x8b0>
 800e448:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e44c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e450:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e454:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e45c:	464c      	mov	r4, r9
 800e45e:	464f      	mov	r7, r9
 800e460:	f280 8222 	bge.w	800e8a8 <_dtoa_r+0x878>
 800e464:	f8dd 8000 	ldr.w	r8, [sp]
 800e468:	2331      	movs	r3, #49	; 0x31
 800e46a:	f808 3b01 	strb.w	r3, [r8], #1
 800e46e:	f10b 0b01 	add.w	fp, fp, #1
 800e472:	e21e      	b.n	800e8b2 <_dtoa_r+0x882>
 800e474:	2202      	movs	r2, #2
 800e476:	e77c      	b.n	800e372 <_dtoa_r+0x342>
 800e478:	07cc      	lsls	r4, r1, #31
 800e47a:	d504      	bpl.n	800e486 <_dtoa_r+0x456>
 800e47c:	ed90 6b00 	vldr	d6, [r0]
 800e480:	3201      	adds	r2, #1
 800e482:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e486:	1049      	asrs	r1, r1, #1
 800e488:	3008      	adds	r0, #8
 800e48a:	e773      	b.n	800e374 <_dtoa_r+0x344>
 800e48c:	d02e      	beq.n	800e4ec <_dtoa_r+0x4bc>
 800e48e:	f1cb 0100 	rsb	r1, fp, #0
 800e492:	4a76      	ldr	r2, [pc, #472]	; (800e66c <_dtoa_r+0x63c>)
 800e494:	f001 000f 	and.w	r0, r1, #15
 800e498:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e49c:	ed92 7b00 	vldr	d7, [r2]
 800e4a0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e4a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e4a8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e4ac:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800e4b0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e4b4:	486e      	ldr	r0, [pc, #440]	; (800e670 <_dtoa_r+0x640>)
 800e4b6:	1109      	asrs	r1, r1, #4
 800e4b8:	2400      	movs	r4, #0
 800e4ba:	2202      	movs	r2, #2
 800e4bc:	b939      	cbnz	r1, 800e4ce <_dtoa_r+0x49e>
 800e4be:	2c00      	cmp	r4, #0
 800e4c0:	f43f af60 	beq.w	800e384 <_dtoa_r+0x354>
 800e4c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e4c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4cc:	e75a      	b.n	800e384 <_dtoa_r+0x354>
 800e4ce:	07cf      	lsls	r7, r1, #31
 800e4d0:	d509      	bpl.n	800e4e6 <_dtoa_r+0x4b6>
 800e4d2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e4d6:	ed90 7b00 	vldr	d7, [r0]
 800e4da:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e4de:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e4e2:	3201      	adds	r2, #1
 800e4e4:	2401      	movs	r4, #1
 800e4e6:	1049      	asrs	r1, r1, #1
 800e4e8:	3008      	adds	r0, #8
 800e4ea:	e7e7      	b.n	800e4bc <_dtoa_r+0x48c>
 800e4ec:	2202      	movs	r2, #2
 800e4ee:	e749      	b.n	800e384 <_dtoa_r+0x354>
 800e4f0:	465f      	mov	r7, fp
 800e4f2:	4648      	mov	r0, r9
 800e4f4:	e765      	b.n	800e3c2 <_dtoa_r+0x392>
 800e4f6:	ec42 1b17 	vmov	d7, r1, r2
 800e4fa:	4a5c      	ldr	r2, [pc, #368]	; (800e66c <_dtoa_r+0x63c>)
 800e4fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e500:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e504:	9a00      	ldr	r2, [sp, #0]
 800e506:	1814      	adds	r4, r2, r0
 800e508:	9a08      	ldr	r2, [sp, #32]
 800e50a:	b352      	cbz	r2, 800e562 <_dtoa_r+0x532>
 800e50c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e510:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e514:	f8dd 8000 	ldr.w	r8, [sp]
 800e518:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e51c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e520:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e524:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e528:	ee14 2a90 	vmov	r2, s9
 800e52c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e530:	3230      	adds	r2, #48	; 0x30
 800e532:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e536:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e53e:	f808 2b01 	strb.w	r2, [r8], #1
 800e542:	d439      	bmi.n	800e5b8 <_dtoa_r+0x588>
 800e544:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e548:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e550:	d472      	bmi.n	800e638 <_dtoa_r+0x608>
 800e552:	45a0      	cmp	r8, r4
 800e554:	f43f af5d 	beq.w	800e412 <_dtoa_r+0x3e2>
 800e558:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e55c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e560:	e7e0      	b.n	800e524 <_dtoa_r+0x4f4>
 800e562:	f8dd 8000 	ldr.w	r8, [sp]
 800e566:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e56a:	4621      	mov	r1, r4
 800e56c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e570:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e574:	ee14 2a90 	vmov	r2, s9
 800e578:	3230      	adds	r2, #48	; 0x30
 800e57a:	f808 2b01 	strb.w	r2, [r8], #1
 800e57e:	45a0      	cmp	r8, r4
 800e580:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e584:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e588:	d118      	bne.n	800e5bc <_dtoa_r+0x58c>
 800e58a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e58e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e592:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e59a:	dc4d      	bgt.n	800e638 <_dtoa_r+0x608>
 800e59c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e5a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5a8:	f57f af33 	bpl.w	800e412 <_dtoa_r+0x3e2>
 800e5ac:	4688      	mov	r8, r1
 800e5ae:	3901      	subs	r1, #1
 800e5b0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e5b4:	2b30      	cmp	r3, #48	; 0x30
 800e5b6:	d0f9      	beq.n	800e5ac <_dtoa_r+0x57c>
 800e5b8:	46bb      	mov	fp, r7
 800e5ba:	e02a      	b.n	800e612 <_dtoa_r+0x5e2>
 800e5bc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e5c0:	e7d6      	b.n	800e570 <_dtoa_r+0x540>
 800e5c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e5c6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e5ca:	f8dd 8000 	ldr.w	r8, [sp]
 800e5ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e5d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e5d6:	ee15 3a10 	vmov	r3, s10
 800e5da:	3330      	adds	r3, #48	; 0x30
 800e5dc:	f808 3b01 	strb.w	r3, [r8], #1
 800e5e0:	9b00      	ldr	r3, [sp, #0]
 800e5e2:	eba8 0303 	sub.w	r3, r8, r3
 800e5e6:	4599      	cmp	r9, r3
 800e5e8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e5ec:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e5f0:	d133      	bne.n	800e65a <_dtoa_r+0x62a>
 800e5f2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e5f6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5fe:	dc1a      	bgt.n	800e636 <_dtoa_r+0x606>
 800e600:	eeb4 7b46 	vcmp.f64	d7, d6
 800e604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e608:	d103      	bne.n	800e612 <_dtoa_r+0x5e2>
 800e60a:	ee15 3a10 	vmov	r3, s10
 800e60e:	07d9      	lsls	r1, r3, #31
 800e610:	d411      	bmi.n	800e636 <_dtoa_r+0x606>
 800e612:	4629      	mov	r1, r5
 800e614:	4630      	mov	r0, r6
 800e616:	f000 fd0b 	bl	800f030 <_Bfree>
 800e61a:	2300      	movs	r3, #0
 800e61c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e61e:	f888 3000 	strb.w	r3, [r8]
 800e622:	f10b 0301 	add.w	r3, fp, #1
 800e626:	6013      	str	r3, [r2, #0]
 800e628:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	f43f ad4d 	beq.w	800e0ca <_dtoa_r+0x9a>
 800e630:	f8c3 8000 	str.w	r8, [r3]
 800e634:	e549      	b.n	800e0ca <_dtoa_r+0x9a>
 800e636:	465f      	mov	r7, fp
 800e638:	4643      	mov	r3, r8
 800e63a:	4698      	mov	r8, r3
 800e63c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e640:	2a39      	cmp	r2, #57	; 0x39
 800e642:	d106      	bne.n	800e652 <_dtoa_r+0x622>
 800e644:	9a00      	ldr	r2, [sp, #0]
 800e646:	429a      	cmp	r2, r3
 800e648:	d1f7      	bne.n	800e63a <_dtoa_r+0x60a>
 800e64a:	9900      	ldr	r1, [sp, #0]
 800e64c:	2230      	movs	r2, #48	; 0x30
 800e64e:	3701      	adds	r7, #1
 800e650:	700a      	strb	r2, [r1, #0]
 800e652:	781a      	ldrb	r2, [r3, #0]
 800e654:	3201      	adds	r2, #1
 800e656:	701a      	strb	r2, [r3, #0]
 800e658:	e7ae      	b.n	800e5b8 <_dtoa_r+0x588>
 800e65a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e65e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e666:	d1b2      	bne.n	800e5ce <_dtoa_r+0x59e>
 800e668:	e7d3      	b.n	800e612 <_dtoa_r+0x5e2>
 800e66a:	bf00      	nop
 800e66c:	0800fe40 	.word	0x0800fe40
 800e670:	0800fe18 	.word	0x0800fe18
 800e674:	9908      	ldr	r1, [sp, #32]
 800e676:	2900      	cmp	r1, #0
 800e678:	f000 80d1 	beq.w	800e81e <_dtoa_r+0x7ee>
 800e67c:	9907      	ldr	r1, [sp, #28]
 800e67e:	2901      	cmp	r1, #1
 800e680:	f300 80b4 	bgt.w	800e7ec <_dtoa_r+0x7bc>
 800e684:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e686:	2900      	cmp	r1, #0
 800e688:	f000 80ac 	beq.w	800e7e4 <_dtoa_r+0x7b4>
 800e68c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e690:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e694:	461c      	mov	r4, r3
 800e696:	930a      	str	r3, [sp, #40]	; 0x28
 800e698:	9b05      	ldr	r3, [sp, #20]
 800e69a:	4413      	add	r3, r2
 800e69c:	9305      	str	r3, [sp, #20]
 800e69e:	9b06      	ldr	r3, [sp, #24]
 800e6a0:	2101      	movs	r1, #1
 800e6a2:	4413      	add	r3, r2
 800e6a4:	4630      	mov	r0, r6
 800e6a6:	9306      	str	r3, [sp, #24]
 800e6a8:	f000 fd7e 	bl	800f1a8 <__i2b>
 800e6ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6ae:	4607      	mov	r7, r0
 800e6b0:	f1b8 0f00 	cmp.w	r8, #0
 800e6b4:	dd0d      	ble.n	800e6d2 <_dtoa_r+0x6a2>
 800e6b6:	9a06      	ldr	r2, [sp, #24]
 800e6b8:	2a00      	cmp	r2, #0
 800e6ba:	dd0a      	ble.n	800e6d2 <_dtoa_r+0x6a2>
 800e6bc:	4542      	cmp	r2, r8
 800e6be:	9905      	ldr	r1, [sp, #20]
 800e6c0:	bfa8      	it	ge
 800e6c2:	4642      	movge	r2, r8
 800e6c4:	1a89      	subs	r1, r1, r2
 800e6c6:	9105      	str	r1, [sp, #20]
 800e6c8:	9906      	ldr	r1, [sp, #24]
 800e6ca:	eba8 0802 	sub.w	r8, r8, r2
 800e6ce:	1a8a      	subs	r2, r1, r2
 800e6d0:	9206      	str	r2, [sp, #24]
 800e6d2:	b303      	cbz	r3, 800e716 <_dtoa_r+0x6e6>
 800e6d4:	9a08      	ldr	r2, [sp, #32]
 800e6d6:	2a00      	cmp	r2, #0
 800e6d8:	f000 80a6 	beq.w	800e828 <_dtoa_r+0x7f8>
 800e6dc:	2c00      	cmp	r4, #0
 800e6de:	dd13      	ble.n	800e708 <_dtoa_r+0x6d8>
 800e6e0:	4639      	mov	r1, r7
 800e6e2:	4622      	mov	r2, r4
 800e6e4:	4630      	mov	r0, r6
 800e6e6:	930c      	str	r3, [sp, #48]	; 0x30
 800e6e8:	f000 fe1a 	bl	800f320 <__pow5mult>
 800e6ec:	462a      	mov	r2, r5
 800e6ee:	4601      	mov	r1, r0
 800e6f0:	4607      	mov	r7, r0
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	f000 fd6e 	bl	800f1d4 <__multiply>
 800e6f8:	4629      	mov	r1, r5
 800e6fa:	900a      	str	r0, [sp, #40]	; 0x28
 800e6fc:	4630      	mov	r0, r6
 800e6fe:	f000 fc97 	bl	800f030 <_Bfree>
 800e702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e706:	4615      	mov	r5, r2
 800e708:	1b1a      	subs	r2, r3, r4
 800e70a:	d004      	beq.n	800e716 <_dtoa_r+0x6e6>
 800e70c:	4629      	mov	r1, r5
 800e70e:	4630      	mov	r0, r6
 800e710:	f000 fe06 	bl	800f320 <__pow5mult>
 800e714:	4605      	mov	r5, r0
 800e716:	2101      	movs	r1, #1
 800e718:	4630      	mov	r0, r6
 800e71a:	f000 fd45 	bl	800f1a8 <__i2b>
 800e71e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e720:	2b00      	cmp	r3, #0
 800e722:	4604      	mov	r4, r0
 800e724:	f340 8082 	ble.w	800e82c <_dtoa_r+0x7fc>
 800e728:	461a      	mov	r2, r3
 800e72a:	4601      	mov	r1, r0
 800e72c:	4630      	mov	r0, r6
 800e72e:	f000 fdf7 	bl	800f320 <__pow5mult>
 800e732:	9b07      	ldr	r3, [sp, #28]
 800e734:	2b01      	cmp	r3, #1
 800e736:	4604      	mov	r4, r0
 800e738:	dd7b      	ble.n	800e832 <_dtoa_r+0x802>
 800e73a:	2300      	movs	r3, #0
 800e73c:	930a      	str	r3, [sp, #40]	; 0x28
 800e73e:	6922      	ldr	r2, [r4, #16]
 800e740:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e744:	6910      	ldr	r0, [r2, #16]
 800e746:	f000 fcdf 	bl	800f108 <__hi0bits>
 800e74a:	f1c0 0020 	rsb	r0, r0, #32
 800e74e:	9b06      	ldr	r3, [sp, #24]
 800e750:	4418      	add	r0, r3
 800e752:	f010 001f 	ands.w	r0, r0, #31
 800e756:	f000 808d 	beq.w	800e874 <_dtoa_r+0x844>
 800e75a:	f1c0 0220 	rsb	r2, r0, #32
 800e75e:	2a04      	cmp	r2, #4
 800e760:	f340 8086 	ble.w	800e870 <_dtoa_r+0x840>
 800e764:	f1c0 001c 	rsb	r0, r0, #28
 800e768:	9b05      	ldr	r3, [sp, #20]
 800e76a:	4403      	add	r3, r0
 800e76c:	9305      	str	r3, [sp, #20]
 800e76e:	9b06      	ldr	r3, [sp, #24]
 800e770:	4403      	add	r3, r0
 800e772:	4480      	add	r8, r0
 800e774:	9306      	str	r3, [sp, #24]
 800e776:	9b05      	ldr	r3, [sp, #20]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	dd05      	ble.n	800e788 <_dtoa_r+0x758>
 800e77c:	4629      	mov	r1, r5
 800e77e:	461a      	mov	r2, r3
 800e780:	4630      	mov	r0, r6
 800e782:	f000 fe27 	bl	800f3d4 <__lshift>
 800e786:	4605      	mov	r5, r0
 800e788:	9b06      	ldr	r3, [sp, #24]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	dd05      	ble.n	800e79a <_dtoa_r+0x76a>
 800e78e:	4621      	mov	r1, r4
 800e790:	461a      	mov	r2, r3
 800e792:	4630      	mov	r0, r6
 800e794:	f000 fe1e 	bl	800f3d4 <__lshift>
 800e798:	4604      	mov	r4, r0
 800e79a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d06b      	beq.n	800e878 <_dtoa_r+0x848>
 800e7a0:	4621      	mov	r1, r4
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	f000 fe82 	bl	800f4ac <__mcmp>
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	da65      	bge.n	800e878 <_dtoa_r+0x848>
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	4629      	mov	r1, r5
 800e7b0:	220a      	movs	r2, #10
 800e7b2:	4630      	mov	r0, r6
 800e7b4:	f000 fc5e 	bl	800f074 <__multadd>
 800e7b8:	9b08      	ldr	r3, [sp, #32]
 800e7ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e7be:	4605      	mov	r5, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f000 8192 	beq.w	800eaea <_dtoa_r+0xaba>
 800e7c6:	4639      	mov	r1, r7
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	220a      	movs	r2, #10
 800e7cc:	4630      	mov	r0, r6
 800e7ce:	f000 fc51 	bl	800f074 <__multadd>
 800e7d2:	f1ba 0f00 	cmp.w	sl, #0
 800e7d6:	4607      	mov	r7, r0
 800e7d8:	f300 808e 	bgt.w	800e8f8 <_dtoa_r+0x8c8>
 800e7dc:	9b07      	ldr	r3, [sp, #28]
 800e7de:	2b02      	cmp	r3, #2
 800e7e0:	dc51      	bgt.n	800e886 <_dtoa_r+0x856>
 800e7e2:	e089      	b.n	800e8f8 <_dtoa_r+0x8c8>
 800e7e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e7e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e7ea:	e751      	b.n	800e690 <_dtoa_r+0x660>
 800e7ec:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800e7f0:	42a3      	cmp	r3, r4
 800e7f2:	bfbf      	itttt	lt
 800e7f4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800e7f6:	1ae3      	sublt	r3, r4, r3
 800e7f8:	18d2      	addlt	r2, r2, r3
 800e7fa:	4613      	movlt	r3, r2
 800e7fc:	bfb7      	itett	lt
 800e7fe:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e800:	1b1c      	subge	r4, r3, r4
 800e802:	4623      	movlt	r3, r4
 800e804:	2400      	movlt	r4, #0
 800e806:	f1b9 0f00 	cmp.w	r9, #0
 800e80a:	bfb5      	itete	lt
 800e80c:	9a05      	ldrlt	r2, [sp, #20]
 800e80e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800e812:	eba2 0809 	sublt.w	r8, r2, r9
 800e816:	464a      	movge	r2, r9
 800e818:	bfb8      	it	lt
 800e81a:	2200      	movlt	r2, #0
 800e81c:	e73b      	b.n	800e696 <_dtoa_r+0x666>
 800e81e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e822:	9f08      	ldr	r7, [sp, #32]
 800e824:	461c      	mov	r4, r3
 800e826:	e743      	b.n	800e6b0 <_dtoa_r+0x680>
 800e828:	461a      	mov	r2, r3
 800e82a:	e76f      	b.n	800e70c <_dtoa_r+0x6dc>
 800e82c:	9b07      	ldr	r3, [sp, #28]
 800e82e:	2b01      	cmp	r3, #1
 800e830:	dc18      	bgt.n	800e864 <_dtoa_r+0x834>
 800e832:	9b02      	ldr	r3, [sp, #8]
 800e834:	b9b3      	cbnz	r3, 800e864 <_dtoa_r+0x834>
 800e836:	9b03      	ldr	r3, [sp, #12]
 800e838:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e83c:	b9a2      	cbnz	r2, 800e868 <_dtoa_r+0x838>
 800e83e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e842:	0d12      	lsrs	r2, r2, #20
 800e844:	0512      	lsls	r2, r2, #20
 800e846:	b18a      	cbz	r2, 800e86c <_dtoa_r+0x83c>
 800e848:	9b05      	ldr	r3, [sp, #20]
 800e84a:	3301      	adds	r3, #1
 800e84c:	9305      	str	r3, [sp, #20]
 800e84e:	9b06      	ldr	r3, [sp, #24]
 800e850:	3301      	adds	r3, #1
 800e852:	9306      	str	r3, [sp, #24]
 800e854:	2301      	movs	r3, #1
 800e856:	930a      	str	r3, [sp, #40]	; 0x28
 800e858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	f47f af6f 	bne.w	800e73e <_dtoa_r+0x70e>
 800e860:	2001      	movs	r0, #1
 800e862:	e774      	b.n	800e74e <_dtoa_r+0x71e>
 800e864:	2300      	movs	r3, #0
 800e866:	e7f6      	b.n	800e856 <_dtoa_r+0x826>
 800e868:	9b02      	ldr	r3, [sp, #8]
 800e86a:	e7f4      	b.n	800e856 <_dtoa_r+0x826>
 800e86c:	920a      	str	r2, [sp, #40]	; 0x28
 800e86e:	e7f3      	b.n	800e858 <_dtoa_r+0x828>
 800e870:	d081      	beq.n	800e776 <_dtoa_r+0x746>
 800e872:	4610      	mov	r0, r2
 800e874:	301c      	adds	r0, #28
 800e876:	e777      	b.n	800e768 <_dtoa_r+0x738>
 800e878:	f1b9 0f00 	cmp.w	r9, #0
 800e87c:	dc37      	bgt.n	800e8ee <_dtoa_r+0x8be>
 800e87e:	9b07      	ldr	r3, [sp, #28]
 800e880:	2b02      	cmp	r3, #2
 800e882:	dd34      	ble.n	800e8ee <_dtoa_r+0x8be>
 800e884:	46ca      	mov	sl, r9
 800e886:	f1ba 0f00 	cmp.w	sl, #0
 800e88a:	d10d      	bne.n	800e8a8 <_dtoa_r+0x878>
 800e88c:	4621      	mov	r1, r4
 800e88e:	4653      	mov	r3, sl
 800e890:	2205      	movs	r2, #5
 800e892:	4630      	mov	r0, r6
 800e894:	f000 fbee 	bl	800f074 <__multadd>
 800e898:	4601      	mov	r1, r0
 800e89a:	4604      	mov	r4, r0
 800e89c:	4628      	mov	r0, r5
 800e89e:	f000 fe05 	bl	800f4ac <__mcmp>
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	f73f adde 	bgt.w	800e464 <_dtoa_r+0x434>
 800e8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8aa:	f8dd 8000 	ldr.w	r8, [sp]
 800e8ae:	ea6f 0b03 	mvn.w	fp, r3
 800e8b2:	f04f 0900 	mov.w	r9, #0
 800e8b6:	4621      	mov	r1, r4
 800e8b8:	4630      	mov	r0, r6
 800e8ba:	f000 fbb9 	bl	800f030 <_Bfree>
 800e8be:	2f00      	cmp	r7, #0
 800e8c0:	f43f aea7 	beq.w	800e612 <_dtoa_r+0x5e2>
 800e8c4:	f1b9 0f00 	cmp.w	r9, #0
 800e8c8:	d005      	beq.n	800e8d6 <_dtoa_r+0x8a6>
 800e8ca:	45b9      	cmp	r9, r7
 800e8cc:	d003      	beq.n	800e8d6 <_dtoa_r+0x8a6>
 800e8ce:	4649      	mov	r1, r9
 800e8d0:	4630      	mov	r0, r6
 800e8d2:	f000 fbad 	bl	800f030 <_Bfree>
 800e8d6:	4639      	mov	r1, r7
 800e8d8:	4630      	mov	r0, r6
 800e8da:	f000 fba9 	bl	800f030 <_Bfree>
 800e8de:	e698      	b.n	800e612 <_dtoa_r+0x5e2>
 800e8e0:	2400      	movs	r4, #0
 800e8e2:	4627      	mov	r7, r4
 800e8e4:	e7e0      	b.n	800e8a8 <_dtoa_r+0x878>
 800e8e6:	46bb      	mov	fp, r7
 800e8e8:	4604      	mov	r4, r0
 800e8ea:	4607      	mov	r7, r0
 800e8ec:	e5ba      	b.n	800e464 <_dtoa_r+0x434>
 800e8ee:	9b08      	ldr	r3, [sp, #32]
 800e8f0:	46ca      	mov	sl, r9
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	f000 8100 	beq.w	800eaf8 <_dtoa_r+0xac8>
 800e8f8:	f1b8 0f00 	cmp.w	r8, #0
 800e8fc:	dd05      	ble.n	800e90a <_dtoa_r+0x8da>
 800e8fe:	4639      	mov	r1, r7
 800e900:	4642      	mov	r2, r8
 800e902:	4630      	mov	r0, r6
 800e904:	f000 fd66 	bl	800f3d4 <__lshift>
 800e908:	4607      	mov	r7, r0
 800e90a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d05d      	beq.n	800e9cc <_dtoa_r+0x99c>
 800e910:	6879      	ldr	r1, [r7, #4]
 800e912:	4630      	mov	r0, r6
 800e914:	f000 fb4c 	bl	800efb0 <_Balloc>
 800e918:	4680      	mov	r8, r0
 800e91a:	b928      	cbnz	r0, 800e928 <_dtoa_r+0x8f8>
 800e91c:	4b82      	ldr	r3, [pc, #520]	; (800eb28 <_dtoa_r+0xaf8>)
 800e91e:	4602      	mov	r2, r0
 800e920:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e924:	f7ff bb9a 	b.w	800e05c <_dtoa_r+0x2c>
 800e928:	693a      	ldr	r2, [r7, #16]
 800e92a:	3202      	adds	r2, #2
 800e92c:	0092      	lsls	r2, r2, #2
 800e92e:	f107 010c 	add.w	r1, r7, #12
 800e932:	300c      	adds	r0, #12
 800e934:	f000 fb22 	bl	800ef7c <memcpy>
 800e938:	2201      	movs	r2, #1
 800e93a:	4641      	mov	r1, r8
 800e93c:	4630      	mov	r0, r6
 800e93e:	f000 fd49 	bl	800f3d4 <__lshift>
 800e942:	9b00      	ldr	r3, [sp, #0]
 800e944:	3301      	adds	r3, #1
 800e946:	9305      	str	r3, [sp, #20]
 800e948:	9b00      	ldr	r3, [sp, #0]
 800e94a:	4453      	add	r3, sl
 800e94c:	9309      	str	r3, [sp, #36]	; 0x24
 800e94e:	9b02      	ldr	r3, [sp, #8]
 800e950:	f003 0301 	and.w	r3, r3, #1
 800e954:	46b9      	mov	r9, r7
 800e956:	9308      	str	r3, [sp, #32]
 800e958:	4607      	mov	r7, r0
 800e95a:	9b05      	ldr	r3, [sp, #20]
 800e95c:	4621      	mov	r1, r4
 800e95e:	3b01      	subs	r3, #1
 800e960:	4628      	mov	r0, r5
 800e962:	9302      	str	r3, [sp, #8]
 800e964:	f7ff fad6 	bl	800df14 <quorem>
 800e968:	4603      	mov	r3, r0
 800e96a:	3330      	adds	r3, #48	; 0x30
 800e96c:	9006      	str	r0, [sp, #24]
 800e96e:	4649      	mov	r1, r9
 800e970:	4628      	mov	r0, r5
 800e972:	930a      	str	r3, [sp, #40]	; 0x28
 800e974:	f000 fd9a 	bl	800f4ac <__mcmp>
 800e978:	463a      	mov	r2, r7
 800e97a:	4682      	mov	sl, r0
 800e97c:	4621      	mov	r1, r4
 800e97e:	4630      	mov	r0, r6
 800e980:	f000 fdb0 	bl	800f4e4 <__mdiff>
 800e984:	68c2      	ldr	r2, [r0, #12]
 800e986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e988:	4680      	mov	r8, r0
 800e98a:	bb0a      	cbnz	r2, 800e9d0 <_dtoa_r+0x9a0>
 800e98c:	4601      	mov	r1, r0
 800e98e:	4628      	mov	r0, r5
 800e990:	f000 fd8c 	bl	800f4ac <__mcmp>
 800e994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e996:	4602      	mov	r2, r0
 800e998:	4641      	mov	r1, r8
 800e99a:	4630      	mov	r0, r6
 800e99c:	920e      	str	r2, [sp, #56]	; 0x38
 800e99e:	930a      	str	r3, [sp, #40]	; 0x28
 800e9a0:	f000 fb46 	bl	800f030 <_Bfree>
 800e9a4:	9b07      	ldr	r3, [sp, #28]
 800e9a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9a8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e9ac:	ea43 0102 	orr.w	r1, r3, r2
 800e9b0:	9b08      	ldr	r3, [sp, #32]
 800e9b2:	430b      	orrs	r3, r1
 800e9b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9b6:	d10d      	bne.n	800e9d4 <_dtoa_r+0x9a4>
 800e9b8:	2b39      	cmp	r3, #57	; 0x39
 800e9ba:	d029      	beq.n	800ea10 <_dtoa_r+0x9e0>
 800e9bc:	f1ba 0f00 	cmp.w	sl, #0
 800e9c0:	dd01      	ble.n	800e9c6 <_dtoa_r+0x996>
 800e9c2:	9b06      	ldr	r3, [sp, #24]
 800e9c4:	3331      	adds	r3, #49	; 0x31
 800e9c6:	9a02      	ldr	r2, [sp, #8]
 800e9c8:	7013      	strb	r3, [r2, #0]
 800e9ca:	e774      	b.n	800e8b6 <_dtoa_r+0x886>
 800e9cc:	4638      	mov	r0, r7
 800e9ce:	e7b8      	b.n	800e942 <_dtoa_r+0x912>
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	e7e1      	b.n	800e998 <_dtoa_r+0x968>
 800e9d4:	f1ba 0f00 	cmp.w	sl, #0
 800e9d8:	db06      	blt.n	800e9e8 <_dtoa_r+0x9b8>
 800e9da:	9907      	ldr	r1, [sp, #28]
 800e9dc:	ea41 0a0a 	orr.w	sl, r1, sl
 800e9e0:	9908      	ldr	r1, [sp, #32]
 800e9e2:	ea5a 0101 	orrs.w	r1, sl, r1
 800e9e6:	d120      	bne.n	800ea2a <_dtoa_r+0x9fa>
 800e9e8:	2a00      	cmp	r2, #0
 800e9ea:	ddec      	ble.n	800e9c6 <_dtoa_r+0x996>
 800e9ec:	4629      	mov	r1, r5
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	4630      	mov	r0, r6
 800e9f2:	9305      	str	r3, [sp, #20]
 800e9f4:	f000 fcee 	bl	800f3d4 <__lshift>
 800e9f8:	4621      	mov	r1, r4
 800e9fa:	4605      	mov	r5, r0
 800e9fc:	f000 fd56 	bl	800f4ac <__mcmp>
 800ea00:	2800      	cmp	r0, #0
 800ea02:	9b05      	ldr	r3, [sp, #20]
 800ea04:	dc02      	bgt.n	800ea0c <_dtoa_r+0x9dc>
 800ea06:	d1de      	bne.n	800e9c6 <_dtoa_r+0x996>
 800ea08:	07da      	lsls	r2, r3, #31
 800ea0a:	d5dc      	bpl.n	800e9c6 <_dtoa_r+0x996>
 800ea0c:	2b39      	cmp	r3, #57	; 0x39
 800ea0e:	d1d8      	bne.n	800e9c2 <_dtoa_r+0x992>
 800ea10:	9a02      	ldr	r2, [sp, #8]
 800ea12:	2339      	movs	r3, #57	; 0x39
 800ea14:	7013      	strb	r3, [r2, #0]
 800ea16:	4643      	mov	r3, r8
 800ea18:	4698      	mov	r8, r3
 800ea1a:	3b01      	subs	r3, #1
 800ea1c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ea20:	2a39      	cmp	r2, #57	; 0x39
 800ea22:	d051      	beq.n	800eac8 <_dtoa_r+0xa98>
 800ea24:	3201      	adds	r2, #1
 800ea26:	701a      	strb	r2, [r3, #0]
 800ea28:	e745      	b.n	800e8b6 <_dtoa_r+0x886>
 800ea2a:	2a00      	cmp	r2, #0
 800ea2c:	dd03      	ble.n	800ea36 <_dtoa_r+0xa06>
 800ea2e:	2b39      	cmp	r3, #57	; 0x39
 800ea30:	d0ee      	beq.n	800ea10 <_dtoa_r+0x9e0>
 800ea32:	3301      	adds	r3, #1
 800ea34:	e7c7      	b.n	800e9c6 <_dtoa_r+0x996>
 800ea36:	9a05      	ldr	r2, [sp, #20]
 800ea38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea3a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ea3e:	428a      	cmp	r2, r1
 800ea40:	d02b      	beq.n	800ea9a <_dtoa_r+0xa6a>
 800ea42:	4629      	mov	r1, r5
 800ea44:	2300      	movs	r3, #0
 800ea46:	220a      	movs	r2, #10
 800ea48:	4630      	mov	r0, r6
 800ea4a:	f000 fb13 	bl	800f074 <__multadd>
 800ea4e:	45b9      	cmp	r9, r7
 800ea50:	4605      	mov	r5, r0
 800ea52:	f04f 0300 	mov.w	r3, #0
 800ea56:	f04f 020a 	mov.w	r2, #10
 800ea5a:	4649      	mov	r1, r9
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	d107      	bne.n	800ea70 <_dtoa_r+0xa40>
 800ea60:	f000 fb08 	bl	800f074 <__multadd>
 800ea64:	4681      	mov	r9, r0
 800ea66:	4607      	mov	r7, r0
 800ea68:	9b05      	ldr	r3, [sp, #20]
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	9305      	str	r3, [sp, #20]
 800ea6e:	e774      	b.n	800e95a <_dtoa_r+0x92a>
 800ea70:	f000 fb00 	bl	800f074 <__multadd>
 800ea74:	4639      	mov	r1, r7
 800ea76:	4681      	mov	r9, r0
 800ea78:	2300      	movs	r3, #0
 800ea7a:	220a      	movs	r2, #10
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	f000 faf9 	bl	800f074 <__multadd>
 800ea82:	4607      	mov	r7, r0
 800ea84:	e7f0      	b.n	800ea68 <_dtoa_r+0xa38>
 800ea86:	f1ba 0f00 	cmp.w	sl, #0
 800ea8a:	9a00      	ldr	r2, [sp, #0]
 800ea8c:	bfcc      	ite	gt
 800ea8e:	46d0      	movgt	r8, sl
 800ea90:	f04f 0801 	movle.w	r8, #1
 800ea94:	4490      	add	r8, r2
 800ea96:	f04f 0900 	mov.w	r9, #0
 800ea9a:	4629      	mov	r1, r5
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	9302      	str	r3, [sp, #8]
 800eaa2:	f000 fc97 	bl	800f3d4 <__lshift>
 800eaa6:	4621      	mov	r1, r4
 800eaa8:	4605      	mov	r5, r0
 800eaaa:	f000 fcff 	bl	800f4ac <__mcmp>
 800eaae:	2800      	cmp	r0, #0
 800eab0:	dcb1      	bgt.n	800ea16 <_dtoa_r+0x9e6>
 800eab2:	d102      	bne.n	800eaba <_dtoa_r+0xa8a>
 800eab4:	9b02      	ldr	r3, [sp, #8]
 800eab6:	07db      	lsls	r3, r3, #31
 800eab8:	d4ad      	bmi.n	800ea16 <_dtoa_r+0x9e6>
 800eaba:	4643      	mov	r3, r8
 800eabc:	4698      	mov	r8, r3
 800eabe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eac2:	2a30      	cmp	r2, #48	; 0x30
 800eac4:	d0fa      	beq.n	800eabc <_dtoa_r+0xa8c>
 800eac6:	e6f6      	b.n	800e8b6 <_dtoa_r+0x886>
 800eac8:	9a00      	ldr	r2, [sp, #0]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d1a4      	bne.n	800ea18 <_dtoa_r+0x9e8>
 800eace:	f10b 0b01 	add.w	fp, fp, #1
 800ead2:	2331      	movs	r3, #49	; 0x31
 800ead4:	e778      	b.n	800e9c8 <_dtoa_r+0x998>
 800ead6:	4b15      	ldr	r3, [pc, #84]	; (800eb2c <_dtoa_r+0xafc>)
 800ead8:	f7ff bb12 	b.w	800e100 <_dtoa_r+0xd0>
 800eadc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eade:	2b00      	cmp	r3, #0
 800eae0:	f47f aaee 	bne.w	800e0c0 <_dtoa_r+0x90>
 800eae4:	4b12      	ldr	r3, [pc, #72]	; (800eb30 <_dtoa_r+0xb00>)
 800eae6:	f7ff bb0b 	b.w	800e100 <_dtoa_r+0xd0>
 800eaea:	f1ba 0f00 	cmp.w	sl, #0
 800eaee:	dc03      	bgt.n	800eaf8 <_dtoa_r+0xac8>
 800eaf0:	9b07      	ldr	r3, [sp, #28]
 800eaf2:	2b02      	cmp	r3, #2
 800eaf4:	f73f aec7 	bgt.w	800e886 <_dtoa_r+0x856>
 800eaf8:	f8dd 8000 	ldr.w	r8, [sp]
 800eafc:	4621      	mov	r1, r4
 800eafe:	4628      	mov	r0, r5
 800eb00:	f7ff fa08 	bl	800df14 <quorem>
 800eb04:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800eb08:	f808 3b01 	strb.w	r3, [r8], #1
 800eb0c:	9a00      	ldr	r2, [sp, #0]
 800eb0e:	eba8 0202 	sub.w	r2, r8, r2
 800eb12:	4592      	cmp	sl, r2
 800eb14:	ddb7      	ble.n	800ea86 <_dtoa_r+0xa56>
 800eb16:	4629      	mov	r1, r5
 800eb18:	2300      	movs	r3, #0
 800eb1a:	220a      	movs	r2, #10
 800eb1c:	4630      	mov	r0, r6
 800eb1e:	f000 faa9 	bl	800f074 <__multadd>
 800eb22:	4605      	mov	r5, r0
 800eb24:	e7ea      	b.n	800eafc <_dtoa_r+0xacc>
 800eb26:	bf00      	nop
 800eb28:	0800fd43 	.word	0x0800fd43
 800eb2c:	0800fc9c 	.word	0x0800fc9c
 800eb30:	0800fcc0 	.word	0x0800fcc0

0800eb34 <__sflush_r>:
 800eb34:	898a      	ldrh	r2, [r1, #12]
 800eb36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb3a:	4605      	mov	r5, r0
 800eb3c:	0710      	lsls	r0, r2, #28
 800eb3e:	460c      	mov	r4, r1
 800eb40:	d458      	bmi.n	800ebf4 <__sflush_r+0xc0>
 800eb42:	684b      	ldr	r3, [r1, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	dc05      	bgt.n	800eb54 <__sflush_r+0x20>
 800eb48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	dc02      	bgt.n	800eb54 <__sflush_r+0x20>
 800eb4e:	2000      	movs	r0, #0
 800eb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb56:	2e00      	cmp	r6, #0
 800eb58:	d0f9      	beq.n	800eb4e <__sflush_r+0x1a>
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb60:	682f      	ldr	r7, [r5, #0]
 800eb62:	602b      	str	r3, [r5, #0]
 800eb64:	d032      	beq.n	800ebcc <__sflush_r+0x98>
 800eb66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb68:	89a3      	ldrh	r3, [r4, #12]
 800eb6a:	075a      	lsls	r2, r3, #29
 800eb6c:	d505      	bpl.n	800eb7a <__sflush_r+0x46>
 800eb6e:	6863      	ldr	r3, [r4, #4]
 800eb70:	1ac0      	subs	r0, r0, r3
 800eb72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb74:	b10b      	cbz	r3, 800eb7a <__sflush_r+0x46>
 800eb76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb78:	1ac0      	subs	r0, r0, r3
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb80:	6a21      	ldr	r1, [r4, #32]
 800eb82:	4628      	mov	r0, r5
 800eb84:	47b0      	blx	r6
 800eb86:	1c43      	adds	r3, r0, #1
 800eb88:	89a3      	ldrh	r3, [r4, #12]
 800eb8a:	d106      	bne.n	800eb9a <__sflush_r+0x66>
 800eb8c:	6829      	ldr	r1, [r5, #0]
 800eb8e:	291d      	cmp	r1, #29
 800eb90:	d82c      	bhi.n	800ebec <__sflush_r+0xb8>
 800eb92:	4a2a      	ldr	r2, [pc, #168]	; (800ec3c <__sflush_r+0x108>)
 800eb94:	40ca      	lsrs	r2, r1
 800eb96:	07d6      	lsls	r6, r2, #31
 800eb98:	d528      	bpl.n	800ebec <__sflush_r+0xb8>
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	6062      	str	r2, [r4, #4]
 800eb9e:	04d9      	lsls	r1, r3, #19
 800eba0:	6922      	ldr	r2, [r4, #16]
 800eba2:	6022      	str	r2, [r4, #0]
 800eba4:	d504      	bpl.n	800ebb0 <__sflush_r+0x7c>
 800eba6:	1c42      	adds	r2, r0, #1
 800eba8:	d101      	bne.n	800ebae <__sflush_r+0x7a>
 800ebaa:	682b      	ldr	r3, [r5, #0]
 800ebac:	b903      	cbnz	r3, 800ebb0 <__sflush_r+0x7c>
 800ebae:	6560      	str	r0, [r4, #84]	; 0x54
 800ebb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebb2:	602f      	str	r7, [r5, #0]
 800ebb4:	2900      	cmp	r1, #0
 800ebb6:	d0ca      	beq.n	800eb4e <__sflush_r+0x1a>
 800ebb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebbc:	4299      	cmp	r1, r3
 800ebbe:	d002      	beq.n	800ebc6 <__sflush_r+0x92>
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	f7fe fbe9 	bl	800d398 <_free_r>
 800ebc6:	2000      	movs	r0, #0
 800ebc8:	6360      	str	r0, [r4, #52]	; 0x34
 800ebca:	e7c1      	b.n	800eb50 <__sflush_r+0x1c>
 800ebcc:	6a21      	ldr	r1, [r4, #32]
 800ebce:	2301      	movs	r3, #1
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	47b0      	blx	r6
 800ebd4:	1c41      	adds	r1, r0, #1
 800ebd6:	d1c7      	bne.n	800eb68 <__sflush_r+0x34>
 800ebd8:	682b      	ldr	r3, [r5, #0]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d0c4      	beq.n	800eb68 <__sflush_r+0x34>
 800ebde:	2b1d      	cmp	r3, #29
 800ebe0:	d001      	beq.n	800ebe6 <__sflush_r+0xb2>
 800ebe2:	2b16      	cmp	r3, #22
 800ebe4:	d101      	bne.n	800ebea <__sflush_r+0xb6>
 800ebe6:	602f      	str	r7, [r5, #0]
 800ebe8:	e7b1      	b.n	800eb4e <__sflush_r+0x1a>
 800ebea:	89a3      	ldrh	r3, [r4, #12]
 800ebec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebf0:	81a3      	strh	r3, [r4, #12]
 800ebf2:	e7ad      	b.n	800eb50 <__sflush_r+0x1c>
 800ebf4:	690f      	ldr	r7, [r1, #16]
 800ebf6:	2f00      	cmp	r7, #0
 800ebf8:	d0a9      	beq.n	800eb4e <__sflush_r+0x1a>
 800ebfa:	0793      	lsls	r3, r2, #30
 800ebfc:	680e      	ldr	r6, [r1, #0]
 800ebfe:	bf08      	it	eq
 800ec00:	694b      	ldreq	r3, [r1, #20]
 800ec02:	600f      	str	r7, [r1, #0]
 800ec04:	bf18      	it	ne
 800ec06:	2300      	movne	r3, #0
 800ec08:	eba6 0807 	sub.w	r8, r6, r7
 800ec0c:	608b      	str	r3, [r1, #8]
 800ec0e:	f1b8 0f00 	cmp.w	r8, #0
 800ec12:	dd9c      	ble.n	800eb4e <__sflush_r+0x1a>
 800ec14:	6a21      	ldr	r1, [r4, #32]
 800ec16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec18:	4643      	mov	r3, r8
 800ec1a:	463a      	mov	r2, r7
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	47b0      	blx	r6
 800ec20:	2800      	cmp	r0, #0
 800ec22:	dc06      	bgt.n	800ec32 <__sflush_r+0xfe>
 800ec24:	89a3      	ldrh	r3, [r4, #12]
 800ec26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec2a:	81a3      	strh	r3, [r4, #12]
 800ec2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec30:	e78e      	b.n	800eb50 <__sflush_r+0x1c>
 800ec32:	4407      	add	r7, r0
 800ec34:	eba8 0800 	sub.w	r8, r8, r0
 800ec38:	e7e9      	b.n	800ec0e <__sflush_r+0xda>
 800ec3a:	bf00      	nop
 800ec3c:	20400001 	.word	0x20400001

0800ec40 <_fflush_r>:
 800ec40:	b538      	push	{r3, r4, r5, lr}
 800ec42:	690b      	ldr	r3, [r1, #16]
 800ec44:	4605      	mov	r5, r0
 800ec46:	460c      	mov	r4, r1
 800ec48:	b913      	cbnz	r3, 800ec50 <_fflush_r+0x10>
 800ec4a:	2500      	movs	r5, #0
 800ec4c:	4628      	mov	r0, r5
 800ec4e:	bd38      	pop	{r3, r4, r5, pc}
 800ec50:	b118      	cbz	r0, 800ec5a <_fflush_r+0x1a>
 800ec52:	6983      	ldr	r3, [r0, #24]
 800ec54:	b90b      	cbnz	r3, 800ec5a <_fflush_r+0x1a>
 800ec56:	f000 f887 	bl	800ed68 <__sinit>
 800ec5a:	4b14      	ldr	r3, [pc, #80]	; (800ecac <_fflush_r+0x6c>)
 800ec5c:	429c      	cmp	r4, r3
 800ec5e:	d11b      	bne.n	800ec98 <_fflush_r+0x58>
 800ec60:	686c      	ldr	r4, [r5, #4]
 800ec62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d0ef      	beq.n	800ec4a <_fflush_r+0xa>
 800ec6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec6c:	07d0      	lsls	r0, r2, #31
 800ec6e:	d404      	bmi.n	800ec7a <_fflush_r+0x3a>
 800ec70:	0599      	lsls	r1, r3, #22
 800ec72:	d402      	bmi.n	800ec7a <_fflush_r+0x3a>
 800ec74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec76:	f000 f91a 	bl	800eeae <__retarget_lock_acquire_recursive>
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	4621      	mov	r1, r4
 800ec7e:	f7ff ff59 	bl	800eb34 <__sflush_r>
 800ec82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec84:	07da      	lsls	r2, r3, #31
 800ec86:	4605      	mov	r5, r0
 800ec88:	d4e0      	bmi.n	800ec4c <_fflush_r+0xc>
 800ec8a:	89a3      	ldrh	r3, [r4, #12]
 800ec8c:	059b      	lsls	r3, r3, #22
 800ec8e:	d4dd      	bmi.n	800ec4c <_fflush_r+0xc>
 800ec90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec92:	f000 f90d 	bl	800eeb0 <__retarget_lock_release_recursive>
 800ec96:	e7d9      	b.n	800ec4c <_fflush_r+0xc>
 800ec98:	4b05      	ldr	r3, [pc, #20]	; (800ecb0 <_fflush_r+0x70>)
 800ec9a:	429c      	cmp	r4, r3
 800ec9c:	d101      	bne.n	800eca2 <_fflush_r+0x62>
 800ec9e:	68ac      	ldr	r4, [r5, #8]
 800eca0:	e7df      	b.n	800ec62 <_fflush_r+0x22>
 800eca2:	4b04      	ldr	r3, [pc, #16]	; (800ecb4 <_fflush_r+0x74>)
 800eca4:	429c      	cmp	r4, r3
 800eca6:	bf08      	it	eq
 800eca8:	68ec      	ldreq	r4, [r5, #12]
 800ecaa:	e7da      	b.n	800ec62 <_fflush_r+0x22>
 800ecac:	0800fd74 	.word	0x0800fd74
 800ecb0:	0800fd94 	.word	0x0800fd94
 800ecb4:	0800fd54 	.word	0x0800fd54

0800ecb8 <std>:
 800ecb8:	2300      	movs	r3, #0
 800ecba:	b510      	push	{r4, lr}
 800ecbc:	4604      	mov	r4, r0
 800ecbe:	e9c0 3300 	strd	r3, r3, [r0]
 800ecc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecc6:	6083      	str	r3, [r0, #8]
 800ecc8:	8181      	strh	r1, [r0, #12]
 800ecca:	6643      	str	r3, [r0, #100]	; 0x64
 800eccc:	81c2      	strh	r2, [r0, #14]
 800ecce:	6183      	str	r3, [r0, #24]
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	2208      	movs	r2, #8
 800ecd4:	305c      	adds	r0, #92	; 0x5c
 800ecd6:	f7fe fb57 	bl	800d388 <memset>
 800ecda:	4b05      	ldr	r3, [pc, #20]	; (800ecf0 <std+0x38>)
 800ecdc:	6263      	str	r3, [r4, #36]	; 0x24
 800ecde:	4b05      	ldr	r3, [pc, #20]	; (800ecf4 <std+0x3c>)
 800ece0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ece2:	4b05      	ldr	r3, [pc, #20]	; (800ecf8 <std+0x40>)
 800ece4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ece6:	4b05      	ldr	r3, [pc, #20]	; (800ecfc <std+0x44>)
 800ece8:	6224      	str	r4, [r4, #32]
 800ecea:	6323      	str	r3, [r4, #48]	; 0x30
 800ecec:	bd10      	pop	{r4, pc}
 800ecee:	bf00      	nop
 800ecf0:	0800f97d 	.word	0x0800f97d
 800ecf4:	0800f99f 	.word	0x0800f99f
 800ecf8:	0800f9d7 	.word	0x0800f9d7
 800ecfc:	0800f9fb 	.word	0x0800f9fb

0800ed00 <_cleanup_r>:
 800ed00:	4901      	ldr	r1, [pc, #4]	; (800ed08 <_cleanup_r+0x8>)
 800ed02:	f000 b8af 	b.w	800ee64 <_fwalk_reent>
 800ed06:	bf00      	nop
 800ed08:	0800ec41 	.word	0x0800ec41

0800ed0c <__sfmoreglue>:
 800ed0c:	b570      	push	{r4, r5, r6, lr}
 800ed0e:	1e4a      	subs	r2, r1, #1
 800ed10:	2568      	movs	r5, #104	; 0x68
 800ed12:	4355      	muls	r5, r2
 800ed14:	460e      	mov	r6, r1
 800ed16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed1a:	f7fe fb8d 	bl	800d438 <_malloc_r>
 800ed1e:	4604      	mov	r4, r0
 800ed20:	b140      	cbz	r0, 800ed34 <__sfmoreglue+0x28>
 800ed22:	2100      	movs	r1, #0
 800ed24:	e9c0 1600 	strd	r1, r6, [r0]
 800ed28:	300c      	adds	r0, #12
 800ed2a:	60a0      	str	r0, [r4, #8]
 800ed2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed30:	f7fe fb2a 	bl	800d388 <memset>
 800ed34:	4620      	mov	r0, r4
 800ed36:	bd70      	pop	{r4, r5, r6, pc}

0800ed38 <__sfp_lock_acquire>:
 800ed38:	4801      	ldr	r0, [pc, #4]	; (800ed40 <__sfp_lock_acquire+0x8>)
 800ed3a:	f000 b8b8 	b.w	800eeae <__retarget_lock_acquire_recursive>
 800ed3e:	bf00      	nop
 800ed40:	240064cc 	.word	0x240064cc

0800ed44 <__sfp_lock_release>:
 800ed44:	4801      	ldr	r0, [pc, #4]	; (800ed4c <__sfp_lock_release+0x8>)
 800ed46:	f000 b8b3 	b.w	800eeb0 <__retarget_lock_release_recursive>
 800ed4a:	bf00      	nop
 800ed4c:	240064cc 	.word	0x240064cc

0800ed50 <__sinit_lock_acquire>:
 800ed50:	4801      	ldr	r0, [pc, #4]	; (800ed58 <__sinit_lock_acquire+0x8>)
 800ed52:	f000 b8ac 	b.w	800eeae <__retarget_lock_acquire_recursive>
 800ed56:	bf00      	nop
 800ed58:	240064c7 	.word	0x240064c7

0800ed5c <__sinit_lock_release>:
 800ed5c:	4801      	ldr	r0, [pc, #4]	; (800ed64 <__sinit_lock_release+0x8>)
 800ed5e:	f000 b8a7 	b.w	800eeb0 <__retarget_lock_release_recursive>
 800ed62:	bf00      	nop
 800ed64:	240064c7 	.word	0x240064c7

0800ed68 <__sinit>:
 800ed68:	b510      	push	{r4, lr}
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	f7ff fff0 	bl	800ed50 <__sinit_lock_acquire>
 800ed70:	69a3      	ldr	r3, [r4, #24]
 800ed72:	b11b      	cbz	r3, 800ed7c <__sinit+0x14>
 800ed74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed78:	f7ff bff0 	b.w	800ed5c <__sinit_lock_release>
 800ed7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ed80:	6523      	str	r3, [r4, #80]	; 0x50
 800ed82:	4b13      	ldr	r3, [pc, #76]	; (800edd0 <__sinit+0x68>)
 800ed84:	4a13      	ldr	r2, [pc, #76]	; (800edd4 <__sinit+0x6c>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	62a2      	str	r2, [r4, #40]	; 0x28
 800ed8a:	42a3      	cmp	r3, r4
 800ed8c:	bf04      	itt	eq
 800ed8e:	2301      	moveq	r3, #1
 800ed90:	61a3      	streq	r3, [r4, #24]
 800ed92:	4620      	mov	r0, r4
 800ed94:	f000 f820 	bl	800edd8 <__sfp>
 800ed98:	6060      	str	r0, [r4, #4]
 800ed9a:	4620      	mov	r0, r4
 800ed9c:	f000 f81c 	bl	800edd8 <__sfp>
 800eda0:	60a0      	str	r0, [r4, #8]
 800eda2:	4620      	mov	r0, r4
 800eda4:	f000 f818 	bl	800edd8 <__sfp>
 800eda8:	2200      	movs	r2, #0
 800edaa:	60e0      	str	r0, [r4, #12]
 800edac:	2104      	movs	r1, #4
 800edae:	6860      	ldr	r0, [r4, #4]
 800edb0:	f7ff ff82 	bl	800ecb8 <std>
 800edb4:	68a0      	ldr	r0, [r4, #8]
 800edb6:	2201      	movs	r2, #1
 800edb8:	2109      	movs	r1, #9
 800edba:	f7ff ff7d 	bl	800ecb8 <std>
 800edbe:	68e0      	ldr	r0, [r4, #12]
 800edc0:	2202      	movs	r2, #2
 800edc2:	2112      	movs	r1, #18
 800edc4:	f7ff ff78 	bl	800ecb8 <std>
 800edc8:	2301      	movs	r3, #1
 800edca:	61a3      	str	r3, [r4, #24]
 800edcc:	e7d2      	b.n	800ed74 <__sinit+0xc>
 800edce:	bf00      	nop
 800edd0:	0800fc88 	.word	0x0800fc88
 800edd4:	0800ed01 	.word	0x0800ed01

0800edd8 <__sfp>:
 800edd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edda:	4607      	mov	r7, r0
 800eddc:	f7ff ffac 	bl	800ed38 <__sfp_lock_acquire>
 800ede0:	4b1e      	ldr	r3, [pc, #120]	; (800ee5c <__sfp+0x84>)
 800ede2:	681e      	ldr	r6, [r3, #0]
 800ede4:	69b3      	ldr	r3, [r6, #24]
 800ede6:	b913      	cbnz	r3, 800edee <__sfp+0x16>
 800ede8:	4630      	mov	r0, r6
 800edea:	f7ff ffbd 	bl	800ed68 <__sinit>
 800edee:	3648      	adds	r6, #72	; 0x48
 800edf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800edf4:	3b01      	subs	r3, #1
 800edf6:	d503      	bpl.n	800ee00 <__sfp+0x28>
 800edf8:	6833      	ldr	r3, [r6, #0]
 800edfa:	b30b      	cbz	r3, 800ee40 <__sfp+0x68>
 800edfc:	6836      	ldr	r6, [r6, #0]
 800edfe:	e7f7      	b.n	800edf0 <__sfp+0x18>
 800ee00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee04:	b9d5      	cbnz	r5, 800ee3c <__sfp+0x64>
 800ee06:	4b16      	ldr	r3, [pc, #88]	; (800ee60 <__sfp+0x88>)
 800ee08:	60e3      	str	r3, [r4, #12]
 800ee0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee0e:	6665      	str	r5, [r4, #100]	; 0x64
 800ee10:	f000 f84c 	bl	800eeac <__retarget_lock_init_recursive>
 800ee14:	f7ff ff96 	bl	800ed44 <__sfp_lock_release>
 800ee18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee20:	6025      	str	r5, [r4, #0]
 800ee22:	61a5      	str	r5, [r4, #24]
 800ee24:	2208      	movs	r2, #8
 800ee26:	4629      	mov	r1, r5
 800ee28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee2c:	f7fe faac 	bl	800d388 <memset>
 800ee30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee38:	4620      	mov	r0, r4
 800ee3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee3c:	3468      	adds	r4, #104	; 0x68
 800ee3e:	e7d9      	b.n	800edf4 <__sfp+0x1c>
 800ee40:	2104      	movs	r1, #4
 800ee42:	4638      	mov	r0, r7
 800ee44:	f7ff ff62 	bl	800ed0c <__sfmoreglue>
 800ee48:	4604      	mov	r4, r0
 800ee4a:	6030      	str	r0, [r6, #0]
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	d1d5      	bne.n	800edfc <__sfp+0x24>
 800ee50:	f7ff ff78 	bl	800ed44 <__sfp_lock_release>
 800ee54:	230c      	movs	r3, #12
 800ee56:	603b      	str	r3, [r7, #0]
 800ee58:	e7ee      	b.n	800ee38 <__sfp+0x60>
 800ee5a:	bf00      	nop
 800ee5c:	0800fc88 	.word	0x0800fc88
 800ee60:	ffff0001 	.word	0xffff0001

0800ee64 <_fwalk_reent>:
 800ee64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee68:	4606      	mov	r6, r0
 800ee6a:	4688      	mov	r8, r1
 800ee6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee70:	2700      	movs	r7, #0
 800ee72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee76:	f1b9 0901 	subs.w	r9, r9, #1
 800ee7a:	d505      	bpl.n	800ee88 <_fwalk_reent+0x24>
 800ee7c:	6824      	ldr	r4, [r4, #0]
 800ee7e:	2c00      	cmp	r4, #0
 800ee80:	d1f7      	bne.n	800ee72 <_fwalk_reent+0xe>
 800ee82:	4638      	mov	r0, r7
 800ee84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee88:	89ab      	ldrh	r3, [r5, #12]
 800ee8a:	2b01      	cmp	r3, #1
 800ee8c:	d907      	bls.n	800ee9e <_fwalk_reent+0x3a>
 800ee8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee92:	3301      	adds	r3, #1
 800ee94:	d003      	beq.n	800ee9e <_fwalk_reent+0x3a>
 800ee96:	4629      	mov	r1, r5
 800ee98:	4630      	mov	r0, r6
 800ee9a:	47c0      	blx	r8
 800ee9c:	4307      	orrs	r7, r0
 800ee9e:	3568      	adds	r5, #104	; 0x68
 800eea0:	e7e9      	b.n	800ee76 <_fwalk_reent+0x12>
	...

0800eea4 <_localeconv_r>:
 800eea4:	4800      	ldr	r0, [pc, #0]	; (800eea8 <_localeconv_r+0x4>)
 800eea6:	4770      	bx	lr
 800eea8:	24003564 	.word	0x24003564

0800eeac <__retarget_lock_init_recursive>:
 800eeac:	4770      	bx	lr

0800eeae <__retarget_lock_acquire_recursive>:
 800eeae:	4770      	bx	lr

0800eeb0 <__retarget_lock_release_recursive>:
 800eeb0:	4770      	bx	lr

0800eeb2 <__swhatbuf_r>:
 800eeb2:	b570      	push	{r4, r5, r6, lr}
 800eeb4:	460e      	mov	r6, r1
 800eeb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeba:	2900      	cmp	r1, #0
 800eebc:	b096      	sub	sp, #88	; 0x58
 800eebe:	4614      	mov	r4, r2
 800eec0:	461d      	mov	r5, r3
 800eec2:	da07      	bge.n	800eed4 <__swhatbuf_r+0x22>
 800eec4:	2300      	movs	r3, #0
 800eec6:	602b      	str	r3, [r5, #0]
 800eec8:	89b3      	ldrh	r3, [r6, #12]
 800eeca:	061a      	lsls	r2, r3, #24
 800eecc:	d410      	bmi.n	800eef0 <__swhatbuf_r+0x3e>
 800eece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eed2:	e00e      	b.n	800eef2 <__swhatbuf_r+0x40>
 800eed4:	466a      	mov	r2, sp
 800eed6:	f000 fde7 	bl	800faa8 <_fstat_r>
 800eeda:	2800      	cmp	r0, #0
 800eedc:	dbf2      	blt.n	800eec4 <__swhatbuf_r+0x12>
 800eede:	9a01      	ldr	r2, [sp, #4]
 800eee0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eee4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eee8:	425a      	negs	r2, r3
 800eeea:	415a      	adcs	r2, r3
 800eeec:	602a      	str	r2, [r5, #0]
 800eeee:	e7ee      	b.n	800eece <__swhatbuf_r+0x1c>
 800eef0:	2340      	movs	r3, #64	; 0x40
 800eef2:	2000      	movs	r0, #0
 800eef4:	6023      	str	r3, [r4, #0]
 800eef6:	b016      	add	sp, #88	; 0x58
 800eef8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eefc <__smakebuf_r>:
 800eefc:	898b      	ldrh	r3, [r1, #12]
 800eefe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef00:	079d      	lsls	r5, r3, #30
 800ef02:	4606      	mov	r6, r0
 800ef04:	460c      	mov	r4, r1
 800ef06:	d507      	bpl.n	800ef18 <__smakebuf_r+0x1c>
 800ef08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef0c:	6023      	str	r3, [r4, #0]
 800ef0e:	6123      	str	r3, [r4, #16]
 800ef10:	2301      	movs	r3, #1
 800ef12:	6163      	str	r3, [r4, #20]
 800ef14:	b002      	add	sp, #8
 800ef16:	bd70      	pop	{r4, r5, r6, pc}
 800ef18:	ab01      	add	r3, sp, #4
 800ef1a:	466a      	mov	r2, sp
 800ef1c:	f7ff ffc9 	bl	800eeb2 <__swhatbuf_r>
 800ef20:	9900      	ldr	r1, [sp, #0]
 800ef22:	4605      	mov	r5, r0
 800ef24:	4630      	mov	r0, r6
 800ef26:	f7fe fa87 	bl	800d438 <_malloc_r>
 800ef2a:	b948      	cbnz	r0, 800ef40 <__smakebuf_r+0x44>
 800ef2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef30:	059a      	lsls	r2, r3, #22
 800ef32:	d4ef      	bmi.n	800ef14 <__smakebuf_r+0x18>
 800ef34:	f023 0303 	bic.w	r3, r3, #3
 800ef38:	f043 0302 	orr.w	r3, r3, #2
 800ef3c:	81a3      	strh	r3, [r4, #12]
 800ef3e:	e7e3      	b.n	800ef08 <__smakebuf_r+0xc>
 800ef40:	4b0d      	ldr	r3, [pc, #52]	; (800ef78 <__smakebuf_r+0x7c>)
 800ef42:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef44:	89a3      	ldrh	r3, [r4, #12]
 800ef46:	6020      	str	r0, [r4, #0]
 800ef48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef4c:	81a3      	strh	r3, [r4, #12]
 800ef4e:	9b00      	ldr	r3, [sp, #0]
 800ef50:	6163      	str	r3, [r4, #20]
 800ef52:	9b01      	ldr	r3, [sp, #4]
 800ef54:	6120      	str	r0, [r4, #16]
 800ef56:	b15b      	cbz	r3, 800ef70 <__smakebuf_r+0x74>
 800ef58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef5c:	4630      	mov	r0, r6
 800ef5e:	f000 fdb5 	bl	800facc <_isatty_r>
 800ef62:	b128      	cbz	r0, 800ef70 <__smakebuf_r+0x74>
 800ef64:	89a3      	ldrh	r3, [r4, #12]
 800ef66:	f023 0303 	bic.w	r3, r3, #3
 800ef6a:	f043 0301 	orr.w	r3, r3, #1
 800ef6e:	81a3      	strh	r3, [r4, #12]
 800ef70:	89a0      	ldrh	r0, [r4, #12]
 800ef72:	4305      	orrs	r5, r0
 800ef74:	81a5      	strh	r5, [r4, #12]
 800ef76:	e7cd      	b.n	800ef14 <__smakebuf_r+0x18>
 800ef78:	0800ed01 	.word	0x0800ed01

0800ef7c <memcpy>:
 800ef7c:	440a      	add	r2, r1
 800ef7e:	4291      	cmp	r1, r2
 800ef80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ef84:	d100      	bne.n	800ef88 <memcpy+0xc>
 800ef86:	4770      	bx	lr
 800ef88:	b510      	push	{r4, lr}
 800ef8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef92:	4291      	cmp	r1, r2
 800ef94:	d1f9      	bne.n	800ef8a <memcpy+0xe>
 800ef96:	bd10      	pop	{r4, pc}

0800ef98 <__malloc_lock>:
 800ef98:	4801      	ldr	r0, [pc, #4]	; (800efa0 <__malloc_lock+0x8>)
 800ef9a:	f7ff bf88 	b.w	800eeae <__retarget_lock_acquire_recursive>
 800ef9e:	bf00      	nop
 800efa0:	240064c8 	.word	0x240064c8

0800efa4 <__malloc_unlock>:
 800efa4:	4801      	ldr	r0, [pc, #4]	; (800efac <__malloc_unlock+0x8>)
 800efa6:	f7ff bf83 	b.w	800eeb0 <__retarget_lock_release_recursive>
 800efaa:	bf00      	nop
 800efac:	240064c8 	.word	0x240064c8

0800efb0 <_Balloc>:
 800efb0:	b570      	push	{r4, r5, r6, lr}
 800efb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800efb4:	4604      	mov	r4, r0
 800efb6:	460d      	mov	r5, r1
 800efb8:	b976      	cbnz	r6, 800efd8 <_Balloc+0x28>
 800efba:	2010      	movs	r0, #16
 800efbc:	f7fe f9dc 	bl	800d378 <malloc>
 800efc0:	4602      	mov	r2, r0
 800efc2:	6260      	str	r0, [r4, #36]	; 0x24
 800efc4:	b920      	cbnz	r0, 800efd0 <_Balloc+0x20>
 800efc6:	4b18      	ldr	r3, [pc, #96]	; (800f028 <_Balloc+0x78>)
 800efc8:	4818      	ldr	r0, [pc, #96]	; (800f02c <_Balloc+0x7c>)
 800efca:	2166      	movs	r1, #102	; 0x66
 800efcc:	f000 fd2c 	bl	800fa28 <__assert_func>
 800efd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800efd4:	6006      	str	r6, [r0, #0]
 800efd6:	60c6      	str	r6, [r0, #12]
 800efd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800efda:	68f3      	ldr	r3, [r6, #12]
 800efdc:	b183      	cbz	r3, 800f000 <_Balloc+0x50>
 800efde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800efe6:	b9b8      	cbnz	r0, 800f018 <_Balloc+0x68>
 800efe8:	2101      	movs	r1, #1
 800efea:	fa01 f605 	lsl.w	r6, r1, r5
 800efee:	1d72      	adds	r2, r6, #5
 800eff0:	0092      	lsls	r2, r2, #2
 800eff2:	4620      	mov	r0, r4
 800eff4:	f000 fb5a 	bl	800f6ac <_calloc_r>
 800eff8:	b160      	cbz	r0, 800f014 <_Balloc+0x64>
 800effa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800effe:	e00e      	b.n	800f01e <_Balloc+0x6e>
 800f000:	2221      	movs	r2, #33	; 0x21
 800f002:	2104      	movs	r1, #4
 800f004:	4620      	mov	r0, r4
 800f006:	f000 fb51 	bl	800f6ac <_calloc_r>
 800f00a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f00c:	60f0      	str	r0, [r6, #12]
 800f00e:	68db      	ldr	r3, [r3, #12]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d1e4      	bne.n	800efde <_Balloc+0x2e>
 800f014:	2000      	movs	r0, #0
 800f016:	bd70      	pop	{r4, r5, r6, pc}
 800f018:	6802      	ldr	r2, [r0, #0]
 800f01a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f01e:	2300      	movs	r3, #0
 800f020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f024:	e7f7      	b.n	800f016 <_Balloc+0x66>
 800f026:	bf00      	nop
 800f028:	0800fccd 	.word	0x0800fccd
 800f02c:	0800fdb4 	.word	0x0800fdb4

0800f030 <_Bfree>:
 800f030:	b570      	push	{r4, r5, r6, lr}
 800f032:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f034:	4605      	mov	r5, r0
 800f036:	460c      	mov	r4, r1
 800f038:	b976      	cbnz	r6, 800f058 <_Bfree+0x28>
 800f03a:	2010      	movs	r0, #16
 800f03c:	f7fe f99c 	bl	800d378 <malloc>
 800f040:	4602      	mov	r2, r0
 800f042:	6268      	str	r0, [r5, #36]	; 0x24
 800f044:	b920      	cbnz	r0, 800f050 <_Bfree+0x20>
 800f046:	4b09      	ldr	r3, [pc, #36]	; (800f06c <_Bfree+0x3c>)
 800f048:	4809      	ldr	r0, [pc, #36]	; (800f070 <_Bfree+0x40>)
 800f04a:	218a      	movs	r1, #138	; 0x8a
 800f04c:	f000 fcec 	bl	800fa28 <__assert_func>
 800f050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f054:	6006      	str	r6, [r0, #0]
 800f056:	60c6      	str	r6, [r0, #12]
 800f058:	b13c      	cbz	r4, 800f06a <_Bfree+0x3a>
 800f05a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f05c:	6862      	ldr	r2, [r4, #4]
 800f05e:	68db      	ldr	r3, [r3, #12]
 800f060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f064:	6021      	str	r1, [r4, #0]
 800f066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f06a:	bd70      	pop	{r4, r5, r6, pc}
 800f06c:	0800fccd 	.word	0x0800fccd
 800f070:	0800fdb4 	.word	0x0800fdb4

0800f074 <__multadd>:
 800f074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f078:	690e      	ldr	r6, [r1, #16]
 800f07a:	4607      	mov	r7, r0
 800f07c:	4698      	mov	r8, r3
 800f07e:	460c      	mov	r4, r1
 800f080:	f101 0014 	add.w	r0, r1, #20
 800f084:	2300      	movs	r3, #0
 800f086:	6805      	ldr	r5, [r0, #0]
 800f088:	b2a9      	uxth	r1, r5
 800f08a:	fb02 8101 	mla	r1, r2, r1, r8
 800f08e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f092:	0c2d      	lsrs	r5, r5, #16
 800f094:	fb02 c505 	mla	r5, r2, r5, ip
 800f098:	b289      	uxth	r1, r1
 800f09a:	3301      	adds	r3, #1
 800f09c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f0a0:	429e      	cmp	r6, r3
 800f0a2:	f840 1b04 	str.w	r1, [r0], #4
 800f0a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f0aa:	dcec      	bgt.n	800f086 <__multadd+0x12>
 800f0ac:	f1b8 0f00 	cmp.w	r8, #0
 800f0b0:	d022      	beq.n	800f0f8 <__multadd+0x84>
 800f0b2:	68a3      	ldr	r3, [r4, #8]
 800f0b4:	42b3      	cmp	r3, r6
 800f0b6:	dc19      	bgt.n	800f0ec <__multadd+0x78>
 800f0b8:	6861      	ldr	r1, [r4, #4]
 800f0ba:	4638      	mov	r0, r7
 800f0bc:	3101      	adds	r1, #1
 800f0be:	f7ff ff77 	bl	800efb0 <_Balloc>
 800f0c2:	4605      	mov	r5, r0
 800f0c4:	b928      	cbnz	r0, 800f0d2 <__multadd+0x5e>
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	4b0d      	ldr	r3, [pc, #52]	; (800f100 <__multadd+0x8c>)
 800f0ca:	480e      	ldr	r0, [pc, #56]	; (800f104 <__multadd+0x90>)
 800f0cc:	21b5      	movs	r1, #181	; 0xb5
 800f0ce:	f000 fcab 	bl	800fa28 <__assert_func>
 800f0d2:	6922      	ldr	r2, [r4, #16]
 800f0d4:	3202      	adds	r2, #2
 800f0d6:	f104 010c 	add.w	r1, r4, #12
 800f0da:	0092      	lsls	r2, r2, #2
 800f0dc:	300c      	adds	r0, #12
 800f0de:	f7ff ff4d 	bl	800ef7c <memcpy>
 800f0e2:	4621      	mov	r1, r4
 800f0e4:	4638      	mov	r0, r7
 800f0e6:	f7ff ffa3 	bl	800f030 <_Bfree>
 800f0ea:	462c      	mov	r4, r5
 800f0ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f0f0:	3601      	adds	r6, #1
 800f0f2:	f8c3 8014 	str.w	r8, [r3, #20]
 800f0f6:	6126      	str	r6, [r4, #16]
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0fe:	bf00      	nop
 800f100:	0800fd43 	.word	0x0800fd43
 800f104:	0800fdb4 	.word	0x0800fdb4

0800f108 <__hi0bits>:
 800f108:	0c03      	lsrs	r3, r0, #16
 800f10a:	041b      	lsls	r3, r3, #16
 800f10c:	b9d3      	cbnz	r3, 800f144 <__hi0bits+0x3c>
 800f10e:	0400      	lsls	r0, r0, #16
 800f110:	2310      	movs	r3, #16
 800f112:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f116:	bf04      	itt	eq
 800f118:	0200      	lsleq	r0, r0, #8
 800f11a:	3308      	addeq	r3, #8
 800f11c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f120:	bf04      	itt	eq
 800f122:	0100      	lsleq	r0, r0, #4
 800f124:	3304      	addeq	r3, #4
 800f126:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f12a:	bf04      	itt	eq
 800f12c:	0080      	lsleq	r0, r0, #2
 800f12e:	3302      	addeq	r3, #2
 800f130:	2800      	cmp	r0, #0
 800f132:	db05      	blt.n	800f140 <__hi0bits+0x38>
 800f134:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f138:	f103 0301 	add.w	r3, r3, #1
 800f13c:	bf08      	it	eq
 800f13e:	2320      	moveq	r3, #32
 800f140:	4618      	mov	r0, r3
 800f142:	4770      	bx	lr
 800f144:	2300      	movs	r3, #0
 800f146:	e7e4      	b.n	800f112 <__hi0bits+0xa>

0800f148 <__lo0bits>:
 800f148:	6803      	ldr	r3, [r0, #0]
 800f14a:	f013 0207 	ands.w	r2, r3, #7
 800f14e:	4601      	mov	r1, r0
 800f150:	d00b      	beq.n	800f16a <__lo0bits+0x22>
 800f152:	07da      	lsls	r2, r3, #31
 800f154:	d424      	bmi.n	800f1a0 <__lo0bits+0x58>
 800f156:	0798      	lsls	r0, r3, #30
 800f158:	bf49      	itett	mi
 800f15a:	085b      	lsrmi	r3, r3, #1
 800f15c:	089b      	lsrpl	r3, r3, #2
 800f15e:	2001      	movmi	r0, #1
 800f160:	600b      	strmi	r3, [r1, #0]
 800f162:	bf5c      	itt	pl
 800f164:	600b      	strpl	r3, [r1, #0]
 800f166:	2002      	movpl	r0, #2
 800f168:	4770      	bx	lr
 800f16a:	b298      	uxth	r0, r3
 800f16c:	b9b0      	cbnz	r0, 800f19c <__lo0bits+0x54>
 800f16e:	0c1b      	lsrs	r3, r3, #16
 800f170:	2010      	movs	r0, #16
 800f172:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f176:	bf04      	itt	eq
 800f178:	0a1b      	lsreq	r3, r3, #8
 800f17a:	3008      	addeq	r0, #8
 800f17c:	071a      	lsls	r2, r3, #28
 800f17e:	bf04      	itt	eq
 800f180:	091b      	lsreq	r3, r3, #4
 800f182:	3004      	addeq	r0, #4
 800f184:	079a      	lsls	r2, r3, #30
 800f186:	bf04      	itt	eq
 800f188:	089b      	lsreq	r3, r3, #2
 800f18a:	3002      	addeq	r0, #2
 800f18c:	07da      	lsls	r2, r3, #31
 800f18e:	d403      	bmi.n	800f198 <__lo0bits+0x50>
 800f190:	085b      	lsrs	r3, r3, #1
 800f192:	f100 0001 	add.w	r0, r0, #1
 800f196:	d005      	beq.n	800f1a4 <__lo0bits+0x5c>
 800f198:	600b      	str	r3, [r1, #0]
 800f19a:	4770      	bx	lr
 800f19c:	4610      	mov	r0, r2
 800f19e:	e7e8      	b.n	800f172 <__lo0bits+0x2a>
 800f1a0:	2000      	movs	r0, #0
 800f1a2:	4770      	bx	lr
 800f1a4:	2020      	movs	r0, #32
 800f1a6:	4770      	bx	lr

0800f1a8 <__i2b>:
 800f1a8:	b510      	push	{r4, lr}
 800f1aa:	460c      	mov	r4, r1
 800f1ac:	2101      	movs	r1, #1
 800f1ae:	f7ff feff 	bl	800efb0 <_Balloc>
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	b928      	cbnz	r0, 800f1c2 <__i2b+0x1a>
 800f1b6:	4b05      	ldr	r3, [pc, #20]	; (800f1cc <__i2b+0x24>)
 800f1b8:	4805      	ldr	r0, [pc, #20]	; (800f1d0 <__i2b+0x28>)
 800f1ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f1be:	f000 fc33 	bl	800fa28 <__assert_func>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	6144      	str	r4, [r0, #20]
 800f1c6:	6103      	str	r3, [r0, #16]
 800f1c8:	bd10      	pop	{r4, pc}
 800f1ca:	bf00      	nop
 800f1cc:	0800fd43 	.word	0x0800fd43
 800f1d0:	0800fdb4 	.word	0x0800fdb4

0800f1d4 <__multiply>:
 800f1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d8:	4614      	mov	r4, r2
 800f1da:	690a      	ldr	r2, [r1, #16]
 800f1dc:	6923      	ldr	r3, [r4, #16]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	bfb8      	it	lt
 800f1e2:	460b      	movlt	r3, r1
 800f1e4:	460d      	mov	r5, r1
 800f1e6:	bfbc      	itt	lt
 800f1e8:	4625      	movlt	r5, r4
 800f1ea:	461c      	movlt	r4, r3
 800f1ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f1f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f1f4:	68ab      	ldr	r3, [r5, #8]
 800f1f6:	6869      	ldr	r1, [r5, #4]
 800f1f8:	eb0a 0709 	add.w	r7, sl, r9
 800f1fc:	42bb      	cmp	r3, r7
 800f1fe:	b085      	sub	sp, #20
 800f200:	bfb8      	it	lt
 800f202:	3101      	addlt	r1, #1
 800f204:	f7ff fed4 	bl	800efb0 <_Balloc>
 800f208:	b930      	cbnz	r0, 800f218 <__multiply+0x44>
 800f20a:	4602      	mov	r2, r0
 800f20c:	4b42      	ldr	r3, [pc, #264]	; (800f318 <__multiply+0x144>)
 800f20e:	4843      	ldr	r0, [pc, #268]	; (800f31c <__multiply+0x148>)
 800f210:	f240 115d 	movw	r1, #349	; 0x15d
 800f214:	f000 fc08 	bl	800fa28 <__assert_func>
 800f218:	f100 0614 	add.w	r6, r0, #20
 800f21c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f220:	4633      	mov	r3, r6
 800f222:	2200      	movs	r2, #0
 800f224:	4543      	cmp	r3, r8
 800f226:	d31e      	bcc.n	800f266 <__multiply+0x92>
 800f228:	f105 0c14 	add.w	ip, r5, #20
 800f22c:	f104 0314 	add.w	r3, r4, #20
 800f230:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f234:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f238:	9202      	str	r2, [sp, #8]
 800f23a:	ebac 0205 	sub.w	r2, ip, r5
 800f23e:	3a15      	subs	r2, #21
 800f240:	f022 0203 	bic.w	r2, r2, #3
 800f244:	3204      	adds	r2, #4
 800f246:	f105 0115 	add.w	r1, r5, #21
 800f24a:	458c      	cmp	ip, r1
 800f24c:	bf38      	it	cc
 800f24e:	2204      	movcc	r2, #4
 800f250:	9201      	str	r2, [sp, #4]
 800f252:	9a02      	ldr	r2, [sp, #8]
 800f254:	9303      	str	r3, [sp, #12]
 800f256:	429a      	cmp	r2, r3
 800f258:	d808      	bhi.n	800f26c <__multiply+0x98>
 800f25a:	2f00      	cmp	r7, #0
 800f25c:	dc55      	bgt.n	800f30a <__multiply+0x136>
 800f25e:	6107      	str	r7, [r0, #16]
 800f260:	b005      	add	sp, #20
 800f262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f266:	f843 2b04 	str.w	r2, [r3], #4
 800f26a:	e7db      	b.n	800f224 <__multiply+0x50>
 800f26c:	f8b3 a000 	ldrh.w	sl, [r3]
 800f270:	f1ba 0f00 	cmp.w	sl, #0
 800f274:	d020      	beq.n	800f2b8 <__multiply+0xe4>
 800f276:	f105 0e14 	add.w	lr, r5, #20
 800f27a:	46b1      	mov	r9, r6
 800f27c:	2200      	movs	r2, #0
 800f27e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f282:	f8d9 b000 	ldr.w	fp, [r9]
 800f286:	b2a1      	uxth	r1, r4
 800f288:	fa1f fb8b 	uxth.w	fp, fp
 800f28c:	fb0a b101 	mla	r1, sl, r1, fp
 800f290:	4411      	add	r1, r2
 800f292:	f8d9 2000 	ldr.w	r2, [r9]
 800f296:	0c24      	lsrs	r4, r4, #16
 800f298:	0c12      	lsrs	r2, r2, #16
 800f29a:	fb0a 2404 	mla	r4, sl, r4, r2
 800f29e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f2a2:	b289      	uxth	r1, r1
 800f2a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f2a8:	45f4      	cmp	ip, lr
 800f2aa:	f849 1b04 	str.w	r1, [r9], #4
 800f2ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f2b2:	d8e4      	bhi.n	800f27e <__multiply+0xaa>
 800f2b4:	9901      	ldr	r1, [sp, #4]
 800f2b6:	5072      	str	r2, [r6, r1]
 800f2b8:	9a03      	ldr	r2, [sp, #12]
 800f2ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f2be:	3304      	adds	r3, #4
 800f2c0:	f1b9 0f00 	cmp.w	r9, #0
 800f2c4:	d01f      	beq.n	800f306 <__multiply+0x132>
 800f2c6:	6834      	ldr	r4, [r6, #0]
 800f2c8:	f105 0114 	add.w	r1, r5, #20
 800f2cc:	46b6      	mov	lr, r6
 800f2ce:	f04f 0a00 	mov.w	sl, #0
 800f2d2:	880a      	ldrh	r2, [r1, #0]
 800f2d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f2d8:	fb09 b202 	mla	r2, r9, r2, fp
 800f2dc:	4492      	add	sl, r2
 800f2de:	b2a4      	uxth	r4, r4
 800f2e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f2e4:	f84e 4b04 	str.w	r4, [lr], #4
 800f2e8:	f851 4b04 	ldr.w	r4, [r1], #4
 800f2ec:	f8be 2000 	ldrh.w	r2, [lr]
 800f2f0:	0c24      	lsrs	r4, r4, #16
 800f2f2:	fb09 2404 	mla	r4, r9, r4, r2
 800f2f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f2fa:	458c      	cmp	ip, r1
 800f2fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f300:	d8e7      	bhi.n	800f2d2 <__multiply+0xfe>
 800f302:	9a01      	ldr	r2, [sp, #4]
 800f304:	50b4      	str	r4, [r6, r2]
 800f306:	3604      	adds	r6, #4
 800f308:	e7a3      	b.n	800f252 <__multiply+0x7e>
 800f30a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d1a5      	bne.n	800f25e <__multiply+0x8a>
 800f312:	3f01      	subs	r7, #1
 800f314:	e7a1      	b.n	800f25a <__multiply+0x86>
 800f316:	bf00      	nop
 800f318:	0800fd43 	.word	0x0800fd43
 800f31c:	0800fdb4 	.word	0x0800fdb4

0800f320 <__pow5mult>:
 800f320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f324:	4615      	mov	r5, r2
 800f326:	f012 0203 	ands.w	r2, r2, #3
 800f32a:	4606      	mov	r6, r0
 800f32c:	460f      	mov	r7, r1
 800f32e:	d007      	beq.n	800f340 <__pow5mult+0x20>
 800f330:	4c25      	ldr	r4, [pc, #148]	; (800f3c8 <__pow5mult+0xa8>)
 800f332:	3a01      	subs	r2, #1
 800f334:	2300      	movs	r3, #0
 800f336:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f33a:	f7ff fe9b 	bl	800f074 <__multadd>
 800f33e:	4607      	mov	r7, r0
 800f340:	10ad      	asrs	r5, r5, #2
 800f342:	d03d      	beq.n	800f3c0 <__pow5mult+0xa0>
 800f344:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f346:	b97c      	cbnz	r4, 800f368 <__pow5mult+0x48>
 800f348:	2010      	movs	r0, #16
 800f34a:	f7fe f815 	bl	800d378 <malloc>
 800f34e:	4602      	mov	r2, r0
 800f350:	6270      	str	r0, [r6, #36]	; 0x24
 800f352:	b928      	cbnz	r0, 800f360 <__pow5mult+0x40>
 800f354:	4b1d      	ldr	r3, [pc, #116]	; (800f3cc <__pow5mult+0xac>)
 800f356:	481e      	ldr	r0, [pc, #120]	; (800f3d0 <__pow5mult+0xb0>)
 800f358:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f35c:	f000 fb64 	bl	800fa28 <__assert_func>
 800f360:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f364:	6004      	str	r4, [r0, #0]
 800f366:	60c4      	str	r4, [r0, #12]
 800f368:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f36c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f370:	b94c      	cbnz	r4, 800f386 <__pow5mult+0x66>
 800f372:	f240 2171 	movw	r1, #625	; 0x271
 800f376:	4630      	mov	r0, r6
 800f378:	f7ff ff16 	bl	800f1a8 <__i2b>
 800f37c:	2300      	movs	r3, #0
 800f37e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f382:	4604      	mov	r4, r0
 800f384:	6003      	str	r3, [r0, #0]
 800f386:	f04f 0900 	mov.w	r9, #0
 800f38a:	07eb      	lsls	r3, r5, #31
 800f38c:	d50a      	bpl.n	800f3a4 <__pow5mult+0x84>
 800f38e:	4639      	mov	r1, r7
 800f390:	4622      	mov	r2, r4
 800f392:	4630      	mov	r0, r6
 800f394:	f7ff ff1e 	bl	800f1d4 <__multiply>
 800f398:	4639      	mov	r1, r7
 800f39a:	4680      	mov	r8, r0
 800f39c:	4630      	mov	r0, r6
 800f39e:	f7ff fe47 	bl	800f030 <_Bfree>
 800f3a2:	4647      	mov	r7, r8
 800f3a4:	106d      	asrs	r5, r5, #1
 800f3a6:	d00b      	beq.n	800f3c0 <__pow5mult+0xa0>
 800f3a8:	6820      	ldr	r0, [r4, #0]
 800f3aa:	b938      	cbnz	r0, 800f3bc <__pow5mult+0x9c>
 800f3ac:	4622      	mov	r2, r4
 800f3ae:	4621      	mov	r1, r4
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	f7ff ff0f 	bl	800f1d4 <__multiply>
 800f3b6:	6020      	str	r0, [r4, #0]
 800f3b8:	f8c0 9000 	str.w	r9, [r0]
 800f3bc:	4604      	mov	r4, r0
 800f3be:	e7e4      	b.n	800f38a <__pow5mult+0x6a>
 800f3c0:	4638      	mov	r0, r7
 800f3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3c6:	bf00      	nop
 800f3c8:	0800ff08 	.word	0x0800ff08
 800f3cc:	0800fccd 	.word	0x0800fccd
 800f3d0:	0800fdb4 	.word	0x0800fdb4

0800f3d4 <__lshift>:
 800f3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3d8:	460c      	mov	r4, r1
 800f3da:	6849      	ldr	r1, [r1, #4]
 800f3dc:	6923      	ldr	r3, [r4, #16]
 800f3de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f3e2:	68a3      	ldr	r3, [r4, #8]
 800f3e4:	4607      	mov	r7, r0
 800f3e6:	4691      	mov	r9, r2
 800f3e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f3ec:	f108 0601 	add.w	r6, r8, #1
 800f3f0:	42b3      	cmp	r3, r6
 800f3f2:	db0b      	blt.n	800f40c <__lshift+0x38>
 800f3f4:	4638      	mov	r0, r7
 800f3f6:	f7ff fddb 	bl	800efb0 <_Balloc>
 800f3fa:	4605      	mov	r5, r0
 800f3fc:	b948      	cbnz	r0, 800f412 <__lshift+0x3e>
 800f3fe:	4602      	mov	r2, r0
 800f400:	4b28      	ldr	r3, [pc, #160]	; (800f4a4 <__lshift+0xd0>)
 800f402:	4829      	ldr	r0, [pc, #164]	; (800f4a8 <__lshift+0xd4>)
 800f404:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f408:	f000 fb0e 	bl	800fa28 <__assert_func>
 800f40c:	3101      	adds	r1, #1
 800f40e:	005b      	lsls	r3, r3, #1
 800f410:	e7ee      	b.n	800f3f0 <__lshift+0x1c>
 800f412:	2300      	movs	r3, #0
 800f414:	f100 0114 	add.w	r1, r0, #20
 800f418:	f100 0210 	add.w	r2, r0, #16
 800f41c:	4618      	mov	r0, r3
 800f41e:	4553      	cmp	r3, sl
 800f420:	db33      	blt.n	800f48a <__lshift+0xb6>
 800f422:	6920      	ldr	r0, [r4, #16]
 800f424:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f428:	f104 0314 	add.w	r3, r4, #20
 800f42c:	f019 091f 	ands.w	r9, r9, #31
 800f430:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f434:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f438:	d02b      	beq.n	800f492 <__lshift+0xbe>
 800f43a:	f1c9 0e20 	rsb	lr, r9, #32
 800f43e:	468a      	mov	sl, r1
 800f440:	2200      	movs	r2, #0
 800f442:	6818      	ldr	r0, [r3, #0]
 800f444:	fa00 f009 	lsl.w	r0, r0, r9
 800f448:	4302      	orrs	r2, r0
 800f44a:	f84a 2b04 	str.w	r2, [sl], #4
 800f44e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f452:	459c      	cmp	ip, r3
 800f454:	fa22 f20e 	lsr.w	r2, r2, lr
 800f458:	d8f3      	bhi.n	800f442 <__lshift+0x6e>
 800f45a:	ebac 0304 	sub.w	r3, ip, r4
 800f45e:	3b15      	subs	r3, #21
 800f460:	f023 0303 	bic.w	r3, r3, #3
 800f464:	3304      	adds	r3, #4
 800f466:	f104 0015 	add.w	r0, r4, #21
 800f46a:	4584      	cmp	ip, r0
 800f46c:	bf38      	it	cc
 800f46e:	2304      	movcc	r3, #4
 800f470:	50ca      	str	r2, [r1, r3]
 800f472:	b10a      	cbz	r2, 800f478 <__lshift+0xa4>
 800f474:	f108 0602 	add.w	r6, r8, #2
 800f478:	3e01      	subs	r6, #1
 800f47a:	4638      	mov	r0, r7
 800f47c:	612e      	str	r6, [r5, #16]
 800f47e:	4621      	mov	r1, r4
 800f480:	f7ff fdd6 	bl	800f030 <_Bfree>
 800f484:	4628      	mov	r0, r5
 800f486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f48a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f48e:	3301      	adds	r3, #1
 800f490:	e7c5      	b.n	800f41e <__lshift+0x4a>
 800f492:	3904      	subs	r1, #4
 800f494:	f853 2b04 	ldr.w	r2, [r3], #4
 800f498:	f841 2f04 	str.w	r2, [r1, #4]!
 800f49c:	459c      	cmp	ip, r3
 800f49e:	d8f9      	bhi.n	800f494 <__lshift+0xc0>
 800f4a0:	e7ea      	b.n	800f478 <__lshift+0xa4>
 800f4a2:	bf00      	nop
 800f4a4:	0800fd43 	.word	0x0800fd43
 800f4a8:	0800fdb4 	.word	0x0800fdb4

0800f4ac <__mcmp>:
 800f4ac:	b530      	push	{r4, r5, lr}
 800f4ae:	6902      	ldr	r2, [r0, #16]
 800f4b0:	690c      	ldr	r4, [r1, #16]
 800f4b2:	1b12      	subs	r2, r2, r4
 800f4b4:	d10e      	bne.n	800f4d4 <__mcmp+0x28>
 800f4b6:	f100 0314 	add.w	r3, r0, #20
 800f4ba:	3114      	adds	r1, #20
 800f4bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f4c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f4c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f4c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f4cc:	42a5      	cmp	r5, r4
 800f4ce:	d003      	beq.n	800f4d8 <__mcmp+0x2c>
 800f4d0:	d305      	bcc.n	800f4de <__mcmp+0x32>
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	4610      	mov	r0, r2
 800f4d6:	bd30      	pop	{r4, r5, pc}
 800f4d8:	4283      	cmp	r3, r0
 800f4da:	d3f3      	bcc.n	800f4c4 <__mcmp+0x18>
 800f4dc:	e7fa      	b.n	800f4d4 <__mcmp+0x28>
 800f4de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4e2:	e7f7      	b.n	800f4d4 <__mcmp+0x28>

0800f4e4 <__mdiff>:
 800f4e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e8:	460c      	mov	r4, r1
 800f4ea:	4606      	mov	r6, r0
 800f4ec:	4611      	mov	r1, r2
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	4617      	mov	r7, r2
 800f4f2:	f7ff ffdb 	bl	800f4ac <__mcmp>
 800f4f6:	1e05      	subs	r5, r0, #0
 800f4f8:	d110      	bne.n	800f51c <__mdiff+0x38>
 800f4fa:	4629      	mov	r1, r5
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	f7ff fd57 	bl	800efb0 <_Balloc>
 800f502:	b930      	cbnz	r0, 800f512 <__mdiff+0x2e>
 800f504:	4b39      	ldr	r3, [pc, #228]	; (800f5ec <__mdiff+0x108>)
 800f506:	4602      	mov	r2, r0
 800f508:	f240 2132 	movw	r1, #562	; 0x232
 800f50c:	4838      	ldr	r0, [pc, #224]	; (800f5f0 <__mdiff+0x10c>)
 800f50e:	f000 fa8b 	bl	800fa28 <__assert_func>
 800f512:	2301      	movs	r3, #1
 800f514:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f51c:	bfa4      	itt	ge
 800f51e:	463b      	movge	r3, r7
 800f520:	4627      	movge	r7, r4
 800f522:	4630      	mov	r0, r6
 800f524:	6879      	ldr	r1, [r7, #4]
 800f526:	bfa6      	itte	ge
 800f528:	461c      	movge	r4, r3
 800f52a:	2500      	movge	r5, #0
 800f52c:	2501      	movlt	r5, #1
 800f52e:	f7ff fd3f 	bl	800efb0 <_Balloc>
 800f532:	b920      	cbnz	r0, 800f53e <__mdiff+0x5a>
 800f534:	4b2d      	ldr	r3, [pc, #180]	; (800f5ec <__mdiff+0x108>)
 800f536:	4602      	mov	r2, r0
 800f538:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f53c:	e7e6      	b.n	800f50c <__mdiff+0x28>
 800f53e:	693e      	ldr	r6, [r7, #16]
 800f540:	60c5      	str	r5, [r0, #12]
 800f542:	6925      	ldr	r5, [r4, #16]
 800f544:	f107 0114 	add.w	r1, r7, #20
 800f548:	f104 0914 	add.w	r9, r4, #20
 800f54c:	f100 0e14 	add.w	lr, r0, #20
 800f550:	f107 0210 	add.w	r2, r7, #16
 800f554:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f558:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f55c:	46f2      	mov	sl, lr
 800f55e:	2700      	movs	r7, #0
 800f560:	f859 3b04 	ldr.w	r3, [r9], #4
 800f564:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f568:	fa1f f883 	uxth.w	r8, r3
 800f56c:	fa17 f78b 	uxtah	r7, r7, fp
 800f570:	0c1b      	lsrs	r3, r3, #16
 800f572:	eba7 0808 	sub.w	r8, r7, r8
 800f576:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f57a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f57e:	fa1f f888 	uxth.w	r8, r8
 800f582:	141f      	asrs	r7, r3, #16
 800f584:	454d      	cmp	r5, r9
 800f586:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f58a:	f84a 3b04 	str.w	r3, [sl], #4
 800f58e:	d8e7      	bhi.n	800f560 <__mdiff+0x7c>
 800f590:	1b2b      	subs	r3, r5, r4
 800f592:	3b15      	subs	r3, #21
 800f594:	f023 0303 	bic.w	r3, r3, #3
 800f598:	3304      	adds	r3, #4
 800f59a:	3415      	adds	r4, #21
 800f59c:	42a5      	cmp	r5, r4
 800f59e:	bf38      	it	cc
 800f5a0:	2304      	movcc	r3, #4
 800f5a2:	4419      	add	r1, r3
 800f5a4:	4473      	add	r3, lr
 800f5a6:	469e      	mov	lr, r3
 800f5a8:	460d      	mov	r5, r1
 800f5aa:	4565      	cmp	r5, ip
 800f5ac:	d30e      	bcc.n	800f5cc <__mdiff+0xe8>
 800f5ae:	f10c 0203 	add.w	r2, ip, #3
 800f5b2:	1a52      	subs	r2, r2, r1
 800f5b4:	f022 0203 	bic.w	r2, r2, #3
 800f5b8:	3903      	subs	r1, #3
 800f5ba:	458c      	cmp	ip, r1
 800f5bc:	bf38      	it	cc
 800f5be:	2200      	movcc	r2, #0
 800f5c0:	441a      	add	r2, r3
 800f5c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f5c6:	b17b      	cbz	r3, 800f5e8 <__mdiff+0x104>
 800f5c8:	6106      	str	r6, [r0, #16]
 800f5ca:	e7a5      	b.n	800f518 <__mdiff+0x34>
 800f5cc:	f855 8b04 	ldr.w	r8, [r5], #4
 800f5d0:	fa17 f488 	uxtah	r4, r7, r8
 800f5d4:	1422      	asrs	r2, r4, #16
 800f5d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f5da:	b2a4      	uxth	r4, r4
 800f5dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f5e0:	f84e 4b04 	str.w	r4, [lr], #4
 800f5e4:	1417      	asrs	r7, r2, #16
 800f5e6:	e7e0      	b.n	800f5aa <__mdiff+0xc6>
 800f5e8:	3e01      	subs	r6, #1
 800f5ea:	e7ea      	b.n	800f5c2 <__mdiff+0xde>
 800f5ec:	0800fd43 	.word	0x0800fd43
 800f5f0:	0800fdb4 	.word	0x0800fdb4

0800f5f4 <__d2b>:
 800f5f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f5f8:	4689      	mov	r9, r1
 800f5fa:	2101      	movs	r1, #1
 800f5fc:	ec57 6b10 	vmov	r6, r7, d0
 800f600:	4690      	mov	r8, r2
 800f602:	f7ff fcd5 	bl	800efb0 <_Balloc>
 800f606:	4604      	mov	r4, r0
 800f608:	b930      	cbnz	r0, 800f618 <__d2b+0x24>
 800f60a:	4602      	mov	r2, r0
 800f60c:	4b25      	ldr	r3, [pc, #148]	; (800f6a4 <__d2b+0xb0>)
 800f60e:	4826      	ldr	r0, [pc, #152]	; (800f6a8 <__d2b+0xb4>)
 800f610:	f240 310a 	movw	r1, #778	; 0x30a
 800f614:	f000 fa08 	bl	800fa28 <__assert_func>
 800f618:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f61c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f620:	bb35      	cbnz	r5, 800f670 <__d2b+0x7c>
 800f622:	2e00      	cmp	r6, #0
 800f624:	9301      	str	r3, [sp, #4]
 800f626:	d028      	beq.n	800f67a <__d2b+0x86>
 800f628:	4668      	mov	r0, sp
 800f62a:	9600      	str	r6, [sp, #0]
 800f62c:	f7ff fd8c 	bl	800f148 <__lo0bits>
 800f630:	9900      	ldr	r1, [sp, #0]
 800f632:	b300      	cbz	r0, 800f676 <__d2b+0x82>
 800f634:	9a01      	ldr	r2, [sp, #4]
 800f636:	f1c0 0320 	rsb	r3, r0, #32
 800f63a:	fa02 f303 	lsl.w	r3, r2, r3
 800f63e:	430b      	orrs	r3, r1
 800f640:	40c2      	lsrs	r2, r0
 800f642:	6163      	str	r3, [r4, #20]
 800f644:	9201      	str	r2, [sp, #4]
 800f646:	9b01      	ldr	r3, [sp, #4]
 800f648:	61a3      	str	r3, [r4, #24]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	bf14      	ite	ne
 800f64e:	2202      	movne	r2, #2
 800f650:	2201      	moveq	r2, #1
 800f652:	6122      	str	r2, [r4, #16]
 800f654:	b1d5      	cbz	r5, 800f68c <__d2b+0x98>
 800f656:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f65a:	4405      	add	r5, r0
 800f65c:	f8c9 5000 	str.w	r5, [r9]
 800f660:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f664:	f8c8 0000 	str.w	r0, [r8]
 800f668:	4620      	mov	r0, r4
 800f66a:	b003      	add	sp, #12
 800f66c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f674:	e7d5      	b.n	800f622 <__d2b+0x2e>
 800f676:	6161      	str	r1, [r4, #20]
 800f678:	e7e5      	b.n	800f646 <__d2b+0x52>
 800f67a:	a801      	add	r0, sp, #4
 800f67c:	f7ff fd64 	bl	800f148 <__lo0bits>
 800f680:	9b01      	ldr	r3, [sp, #4]
 800f682:	6163      	str	r3, [r4, #20]
 800f684:	2201      	movs	r2, #1
 800f686:	6122      	str	r2, [r4, #16]
 800f688:	3020      	adds	r0, #32
 800f68a:	e7e3      	b.n	800f654 <__d2b+0x60>
 800f68c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f690:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f694:	f8c9 0000 	str.w	r0, [r9]
 800f698:	6918      	ldr	r0, [r3, #16]
 800f69a:	f7ff fd35 	bl	800f108 <__hi0bits>
 800f69e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f6a2:	e7df      	b.n	800f664 <__d2b+0x70>
 800f6a4:	0800fd43 	.word	0x0800fd43
 800f6a8:	0800fdb4 	.word	0x0800fdb4

0800f6ac <_calloc_r>:
 800f6ac:	b513      	push	{r0, r1, r4, lr}
 800f6ae:	434a      	muls	r2, r1
 800f6b0:	4611      	mov	r1, r2
 800f6b2:	9201      	str	r2, [sp, #4]
 800f6b4:	f7fd fec0 	bl	800d438 <_malloc_r>
 800f6b8:	4604      	mov	r4, r0
 800f6ba:	b118      	cbz	r0, 800f6c4 <_calloc_r+0x18>
 800f6bc:	9a01      	ldr	r2, [sp, #4]
 800f6be:	2100      	movs	r1, #0
 800f6c0:	f7fd fe62 	bl	800d388 <memset>
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	b002      	add	sp, #8
 800f6c8:	bd10      	pop	{r4, pc}

0800f6ca <__sfputc_r>:
 800f6ca:	6893      	ldr	r3, [r2, #8]
 800f6cc:	3b01      	subs	r3, #1
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	b410      	push	{r4}
 800f6d2:	6093      	str	r3, [r2, #8]
 800f6d4:	da08      	bge.n	800f6e8 <__sfputc_r+0x1e>
 800f6d6:	6994      	ldr	r4, [r2, #24]
 800f6d8:	42a3      	cmp	r3, r4
 800f6da:	db01      	blt.n	800f6e0 <__sfputc_r+0x16>
 800f6dc:	290a      	cmp	r1, #10
 800f6de:	d103      	bne.n	800f6e8 <__sfputc_r+0x1e>
 800f6e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6e4:	f7fe bb56 	b.w	800dd94 <__swbuf_r>
 800f6e8:	6813      	ldr	r3, [r2, #0]
 800f6ea:	1c58      	adds	r0, r3, #1
 800f6ec:	6010      	str	r0, [r2, #0]
 800f6ee:	7019      	strb	r1, [r3, #0]
 800f6f0:	4608      	mov	r0, r1
 800f6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6f6:	4770      	bx	lr

0800f6f8 <__sfputs_r>:
 800f6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6fa:	4606      	mov	r6, r0
 800f6fc:	460f      	mov	r7, r1
 800f6fe:	4614      	mov	r4, r2
 800f700:	18d5      	adds	r5, r2, r3
 800f702:	42ac      	cmp	r4, r5
 800f704:	d101      	bne.n	800f70a <__sfputs_r+0x12>
 800f706:	2000      	movs	r0, #0
 800f708:	e007      	b.n	800f71a <__sfputs_r+0x22>
 800f70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f70e:	463a      	mov	r2, r7
 800f710:	4630      	mov	r0, r6
 800f712:	f7ff ffda 	bl	800f6ca <__sfputc_r>
 800f716:	1c43      	adds	r3, r0, #1
 800f718:	d1f3      	bne.n	800f702 <__sfputs_r+0xa>
 800f71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f71c <_vfiprintf_r>:
 800f71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f720:	460d      	mov	r5, r1
 800f722:	b09d      	sub	sp, #116	; 0x74
 800f724:	4614      	mov	r4, r2
 800f726:	4698      	mov	r8, r3
 800f728:	4606      	mov	r6, r0
 800f72a:	b118      	cbz	r0, 800f734 <_vfiprintf_r+0x18>
 800f72c:	6983      	ldr	r3, [r0, #24]
 800f72e:	b90b      	cbnz	r3, 800f734 <_vfiprintf_r+0x18>
 800f730:	f7ff fb1a 	bl	800ed68 <__sinit>
 800f734:	4b89      	ldr	r3, [pc, #548]	; (800f95c <_vfiprintf_r+0x240>)
 800f736:	429d      	cmp	r5, r3
 800f738:	d11b      	bne.n	800f772 <_vfiprintf_r+0x56>
 800f73a:	6875      	ldr	r5, [r6, #4]
 800f73c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f73e:	07d9      	lsls	r1, r3, #31
 800f740:	d405      	bmi.n	800f74e <_vfiprintf_r+0x32>
 800f742:	89ab      	ldrh	r3, [r5, #12]
 800f744:	059a      	lsls	r2, r3, #22
 800f746:	d402      	bmi.n	800f74e <_vfiprintf_r+0x32>
 800f748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f74a:	f7ff fbb0 	bl	800eeae <__retarget_lock_acquire_recursive>
 800f74e:	89ab      	ldrh	r3, [r5, #12]
 800f750:	071b      	lsls	r3, r3, #28
 800f752:	d501      	bpl.n	800f758 <_vfiprintf_r+0x3c>
 800f754:	692b      	ldr	r3, [r5, #16]
 800f756:	b9eb      	cbnz	r3, 800f794 <_vfiprintf_r+0x78>
 800f758:	4629      	mov	r1, r5
 800f75a:	4630      	mov	r0, r6
 800f75c:	f7fe fb6c 	bl	800de38 <__swsetup_r>
 800f760:	b1c0      	cbz	r0, 800f794 <_vfiprintf_r+0x78>
 800f762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f764:	07dc      	lsls	r4, r3, #31
 800f766:	d50e      	bpl.n	800f786 <_vfiprintf_r+0x6a>
 800f768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f76c:	b01d      	add	sp, #116	; 0x74
 800f76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f772:	4b7b      	ldr	r3, [pc, #492]	; (800f960 <_vfiprintf_r+0x244>)
 800f774:	429d      	cmp	r5, r3
 800f776:	d101      	bne.n	800f77c <_vfiprintf_r+0x60>
 800f778:	68b5      	ldr	r5, [r6, #8]
 800f77a:	e7df      	b.n	800f73c <_vfiprintf_r+0x20>
 800f77c:	4b79      	ldr	r3, [pc, #484]	; (800f964 <_vfiprintf_r+0x248>)
 800f77e:	429d      	cmp	r5, r3
 800f780:	bf08      	it	eq
 800f782:	68f5      	ldreq	r5, [r6, #12]
 800f784:	e7da      	b.n	800f73c <_vfiprintf_r+0x20>
 800f786:	89ab      	ldrh	r3, [r5, #12]
 800f788:	0598      	lsls	r0, r3, #22
 800f78a:	d4ed      	bmi.n	800f768 <_vfiprintf_r+0x4c>
 800f78c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f78e:	f7ff fb8f 	bl	800eeb0 <__retarget_lock_release_recursive>
 800f792:	e7e9      	b.n	800f768 <_vfiprintf_r+0x4c>
 800f794:	2300      	movs	r3, #0
 800f796:	9309      	str	r3, [sp, #36]	; 0x24
 800f798:	2320      	movs	r3, #32
 800f79a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f79e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7a2:	2330      	movs	r3, #48	; 0x30
 800f7a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f968 <_vfiprintf_r+0x24c>
 800f7a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7ac:	f04f 0901 	mov.w	r9, #1
 800f7b0:	4623      	mov	r3, r4
 800f7b2:	469a      	mov	sl, r3
 800f7b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7b8:	b10a      	cbz	r2, 800f7be <_vfiprintf_r+0xa2>
 800f7ba:	2a25      	cmp	r2, #37	; 0x25
 800f7bc:	d1f9      	bne.n	800f7b2 <_vfiprintf_r+0x96>
 800f7be:	ebba 0b04 	subs.w	fp, sl, r4
 800f7c2:	d00b      	beq.n	800f7dc <_vfiprintf_r+0xc0>
 800f7c4:	465b      	mov	r3, fp
 800f7c6:	4622      	mov	r2, r4
 800f7c8:	4629      	mov	r1, r5
 800f7ca:	4630      	mov	r0, r6
 800f7cc:	f7ff ff94 	bl	800f6f8 <__sfputs_r>
 800f7d0:	3001      	adds	r0, #1
 800f7d2:	f000 80aa 	beq.w	800f92a <_vfiprintf_r+0x20e>
 800f7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7d8:	445a      	add	r2, fp
 800f7da:	9209      	str	r2, [sp, #36]	; 0x24
 800f7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	f000 80a2 	beq.w	800f92a <_vfiprintf_r+0x20e>
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f7ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7f0:	f10a 0a01 	add.w	sl, sl, #1
 800f7f4:	9304      	str	r3, [sp, #16]
 800f7f6:	9307      	str	r3, [sp, #28]
 800f7f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7fc:	931a      	str	r3, [sp, #104]	; 0x68
 800f7fe:	4654      	mov	r4, sl
 800f800:	2205      	movs	r2, #5
 800f802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f806:	4858      	ldr	r0, [pc, #352]	; (800f968 <_vfiprintf_r+0x24c>)
 800f808:	f7f0 fd72 	bl	80002f0 <memchr>
 800f80c:	9a04      	ldr	r2, [sp, #16]
 800f80e:	b9d8      	cbnz	r0, 800f848 <_vfiprintf_r+0x12c>
 800f810:	06d1      	lsls	r1, r2, #27
 800f812:	bf44      	itt	mi
 800f814:	2320      	movmi	r3, #32
 800f816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f81a:	0713      	lsls	r3, r2, #28
 800f81c:	bf44      	itt	mi
 800f81e:	232b      	movmi	r3, #43	; 0x2b
 800f820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f824:	f89a 3000 	ldrb.w	r3, [sl]
 800f828:	2b2a      	cmp	r3, #42	; 0x2a
 800f82a:	d015      	beq.n	800f858 <_vfiprintf_r+0x13c>
 800f82c:	9a07      	ldr	r2, [sp, #28]
 800f82e:	4654      	mov	r4, sl
 800f830:	2000      	movs	r0, #0
 800f832:	f04f 0c0a 	mov.w	ip, #10
 800f836:	4621      	mov	r1, r4
 800f838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f83c:	3b30      	subs	r3, #48	; 0x30
 800f83e:	2b09      	cmp	r3, #9
 800f840:	d94e      	bls.n	800f8e0 <_vfiprintf_r+0x1c4>
 800f842:	b1b0      	cbz	r0, 800f872 <_vfiprintf_r+0x156>
 800f844:	9207      	str	r2, [sp, #28]
 800f846:	e014      	b.n	800f872 <_vfiprintf_r+0x156>
 800f848:	eba0 0308 	sub.w	r3, r0, r8
 800f84c:	fa09 f303 	lsl.w	r3, r9, r3
 800f850:	4313      	orrs	r3, r2
 800f852:	9304      	str	r3, [sp, #16]
 800f854:	46a2      	mov	sl, r4
 800f856:	e7d2      	b.n	800f7fe <_vfiprintf_r+0xe2>
 800f858:	9b03      	ldr	r3, [sp, #12]
 800f85a:	1d19      	adds	r1, r3, #4
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	9103      	str	r1, [sp, #12]
 800f860:	2b00      	cmp	r3, #0
 800f862:	bfbb      	ittet	lt
 800f864:	425b      	neglt	r3, r3
 800f866:	f042 0202 	orrlt.w	r2, r2, #2
 800f86a:	9307      	strge	r3, [sp, #28]
 800f86c:	9307      	strlt	r3, [sp, #28]
 800f86e:	bfb8      	it	lt
 800f870:	9204      	strlt	r2, [sp, #16]
 800f872:	7823      	ldrb	r3, [r4, #0]
 800f874:	2b2e      	cmp	r3, #46	; 0x2e
 800f876:	d10c      	bne.n	800f892 <_vfiprintf_r+0x176>
 800f878:	7863      	ldrb	r3, [r4, #1]
 800f87a:	2b2a      	cmp	r3, #42	; 0x2a
 800f87c:	d135      	bne.n	800f8ea <_vfiprintf_r+0x1ce>
 800f87e:	9b03      	ldr	r3, [sp, #12]
 800f880:	1d1a      	adds	r2, r3, #4
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	9203      	str	r2, [sp, #12]
 800f886:	2b00      	cmp	r3, #0
 800f888:	bfb8      	it	lt
 800f88a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f88e:	3402      	adds	r4, #2
 800f890:	9305      	str	r3, [sp, #20]
 800f892:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f978 <_vfiprintf_r+0x25c>
 800f896:	7821      	ldrb	r1, [r4, #0]
 800f898:	2203      	movs	r2, #3
 800f89a:	4650      	mov	r0, sl
 800f89c:	f7f0 fd28 	bl	80002f0 <memchr>
 800f8a0:	b140      	cbz	r0, 800f8b4 <_vfiprintf_r+0x198>
 800f8a2:	2340      	movs	r3, #64	; 0x40
 800f8a4:	eba0 000a 	sub.w	r0, r0, sl
 800f8a8:	fa03 f000 	lsl.w	r0, r3, r0
 800f8ac:	9b04      	ldr	r3, [sp, #16]
 800f8ae:	4303      	orrs	r3, r0
 800f8b0:	3401      	adds	r4, #1
 800f8b2:	9304      	str	r3, [sp, #16]
 800f8b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8b8:	482c      	ldr	r0, [pc, #176]	; (800f96c <_vfiprintf_r+0x250>)
 800f8ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8be:	2206      	movs	r2, #6
 800f8c0:	f7f0 fd16 	bl	80002f0 <memchr>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	d03f      	beq.n	800f948 <_vfiprintf_r+0x22c>
 800f8c8:	4b29      	ldr	r3, [pc, #164]	; (800f970 <_vfiprintf_r+0x254>)
 800f8ca:	bb1b      	cbnz	r3, 800f914 <_vfiprintf_r+0x1f8>
 800f8cc:	9b03      	ldr	r3, [sp, #12]
 800f8ce:	3307      	adds	r3, #7
 800f8d0:	f023 0307 	bic.w	r3, r3, #7
 800f8d4:	3308      	adds	r3, #8
 800f8d6:	9303      	str	r3, [sp, #12]
 800f8d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8da:	443b      	add	r3, r7
 800f8dc:	9309      	str	r3, [sp, #36]	; 0x24
 800f8de:	e767      	b.n	800f7b0 <_vfiprintf_r+0x94>
 800f8e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8e4:	460c      	mov	r4, r1
 800f8e6:	2001      	movs	r0, #1
 800f8e8:	e7a5      	b.n	800f836 <_vfiprintf_r+0x11a>
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	3401      	adds	r4, #1
 800f8ee:	9305      	str	r3, [sp, #20]
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	f04f 0c0a 	mov.w	ip, #10
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8fc:	3a30      	subs	r2, #48	; 0x30
 800f8fe:	2a09      	cmp	r2, #9
 800f900:	d903      	bls.n	800f90a <_vfiprintf_r+0x1ee>
 800f902:	2b00      	cmp	r3, #0
 800f904:	d0c5      	beq.n	800f892 <_vfiprintf_r+0x176>
 800f906:	9105      	str	r1, [sp, #20]
 800f908:	e7c3      	b.n	800f892 <_vfiprintf_r+0x176>
 800f90a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f90e:	4604      	mov	r4, r0
 800f910:	2301      	movs	r3, #1
 800f912:	e7f0      	b.n	800f8f6 <_vfiprintf_r+0x1da>
 800f914:	ab03      	add	r3, sp, #12
 800f916:	9300      	str	r3, [sp, #0]
 800f918:	462a      	mov	r2, r5
 800f91a:	4b16      	ldr	r3, [pc, #88]	; (800f974 <_vfiprintf_r+0x258>)
 800f91c:	a904      	add	r1, sp, #16
 800f91e:	4630      	mov	r0, r6
 800f920:	f7fd fe76 	bl	800d610 <_printf_float>
 800f924:	4607      	mov	r7, r0
 800f926:	1c78      	adds	r0, r7, #1
 800f928:	d1d6      	bne.n	800f8d8 <_vfiprintf_r+0x1bc>
 800f92a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f92c:	07d9      	lsls	r1, r3, #31
 800f92e:	d405      	bmi.n	800f93c <_vfiprintf_r+0x220>
 800f930:	89ab      	ldrh	r3, [r5, #12]
 800f932:	059a      	lsls	r2, r3, #22
 800f934:	d402      	bmi.n	800f93c <_vfiprintf_r+0x220>
 800f936:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f938:	f7ff faba 	bl	800eeb0 <__retarget_lock_release_recursive>
 800f93c:	89ab      	ldrh	r3, [r5, #12]
 800f93e:	065b      	lsls	r3, r3, #25
 800f940:	f53f af12 	bmi.w	800f768 <_vfiprintf_r+0x4c>
 800f944:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f946:	e711      	b.n	800f76c <_vfiprintf_r+0x50>
 800f948:	ab03      	add	r3, sp, #12
 800f94a:	9300      	str	r3, [sp, #0]
 800f94c:	462a      	mov	r2, r5
 800f94e:	4b09      	ldr	r3, [pc, #36]	; (800f974 <_vfiprintf_r+0x258>)
 800f950:	a904      	add	r1, sp, #16
 800f952:	4630      	mov	r0, r6
 800f954:	f7fe f8e8 	bl	800db28 <_printf_i>
 800f958:	e7e4      	b.n	800f924 <_vfiprintf_r+0x208>
 800f95a:	bf00      	nop
 800f95c:	0800fd74 	.word	0x0800fd74
 800f960:	0800fd94 	.word	0x0800fd94
 800f964:	0800fd54 	.word	0x0800fd54
 800f968:	0800ff14 	.word	0x0800ff14
 800f96c:	0800ff1e 	.word	0x0800ff1e
 800f970:	0800d611 	.word	0x0800d611
 800f974:	0800f6f9 	.word	0x0800f6f9
 800f978:	0800ff1a 	.word	0x0800ff1a

0800f97c <__sread>:
 800f97c:	b510      	push	{r4, lr}
 800f97e:	460c      	mov	r4, r1
 800f980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f984:	f000 f8d6 	bl	800fb34 <_read_r>
 800f988:	2800      	cmp	r0, #0
 800f98a:	bfab      	itete	ge
 800f98c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f98e:	89a3      	ldrhlt	r3, [r4, #12]
 800f990:	181b      	addge	r3, r3, r0
 800f992:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f996:	bfac      	ite	ge
 800f998:	6563      	strge	r3, [r4, #84]	; 0x54
 800f99a:	81a3      	strhlt	r3, [r4, #12]
 800f99c:	bd10      	pop	{r4, pc}

0800f99e <__swrite>:
 800f99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a2:	461f      	mov	r7, r3
 800f9a4:	898b      	ldrh	r3, [r1, #12]
 800f9a6:	05db      	lsls	r3, r3, #23
 800f9a8:	4605      	mov	r5, r0
 800f9aa:	460c      	mov	r4, r1
 800f9ac:	4616      	mov	r6, r2
 800f9ae:	d505      	bpl.n	800f9bc <__swrite+0x1e>
 800f9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9b4:	2302      	movs	r3, #2
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	f000 f898 	bl	800faec <_lseek_r>
 800f9bc:	89a3      	ldrh	r3, [r4, #12]
 800f9be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9c6:	81a3      	strh	r3, [r4, #12]
 800f9c8:	4632      	mov	r2, r6
 800f9ca:	463b      	mov	r3, r7
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9d2:	f000 b817 	b.w	800fa04 <_write_r>

0800f9d6 <__sseek>:
 800f9d6:	b510      	push	{r4, lr}
 800f9d8:	460c      	mov	r4, r1
 800f9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9de:	f000 f885 	bl	800faec <_lseek_r>
 800f9e2:	1c43      	adds	r3, r0, #1
 800f9e4:	89a3      	ldrh	r3, [r4, #12]
 800f9e6:	bf15      	itete	ne
 800f9e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f9f2:	81a3      	strheq	r3, [r4, #12]
 800f9f4:	bf18      	it	ne
 800f9f6:	81a3      	strhne	r3, [r4, #12]
 800f9f8:	bd10      	pop	{r4, pc}

0800f9fa <__sclose>:
 800f9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9fe:	f000 b831 	b.w	800fa64 <_close_r>
	...

0800fa04 <_write_r>:
 800fa04:	b538      	push	{r3, r4, r5, lr}
 800fa06:	4d07      	ldr	r5, [pc, #28]	; (800fa24 <_write_r+0x20>)
 800fa08:	4604      	mov	r4, r0
 800fa0a:	4608      	mov	r0, r1
 800fa0c:	4611      	mov	r1, r2
 800fa0e:	2200      	movs	r2, #0
 800fa10:	602a      	str	r2, [r5, #0]
 800fa12:	461a      	mov	r2, r3
 800fa14:	f7f2 f817 	bl	8001a46 <_write>
 800fa18:	1c43      	adds	r3, r0, #1
 800fa1a:	d102      	bne.n	800fa22 <_write_r+0x1e>
 800fa1c:	682b      	ldr	r3, [r5, #0]
 800fa1e:	b103      	cbz	r3, 800fa22 <_write_r+0x1e>
 800fa20:	6023      	str	r3, [r4, #0]
 800fa22:	bd38      	pop	{r3, r4, r5, pc}
 800fa24:	240064d0 	.word	0x240064d0

0800fa28 <__assert_func>:
 800fa28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa2a:	4614      	mov	r4, r2
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	4b09      	ldr	r3, [pc, #36]	; (800fa54 <__assert_func+0x2c>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	4605      	mov	r5, r0
 800fa34:	68d8      	ldr	r0, [r3, #12]
 800fa36:	b14c      	cbz	r4, 800fa4c <__assert_func+0x24>
 800fa38:	4b07      	ldr	r3, [pc, #28]	; (800fa58 <__assert_func+0x30>)
 800fa3a:	9100      	str	r1, [sp, #0]
 800fa3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa40:	4906      	ldr	r1, [pc, #24]	; (800fa5c <__assert_func+0x34>)
 800fa42:	462b      	mov	r3, r5
 800fa44:	f000 f81e 	bl	800fa84 <fiprintf>
 800fa48:	f000 f893 	bl	800fb72 <abort>
 800fa4c:	4b04      	ldr	r3, [pc, #16]	; (800fa60 <__assert_func+0x38>)
 800fa4e:	461c      	mov	r4, r3
 800fa50:	e7f3      	b.n	800fa3a <__assert_func+0x12>
 800fa52:	bf00      	nop
 800fa54:	24003410 	.word	0x24003410
 800fa58:	0800ff25 	.word	0x0800ff25
 800fa5c:	0800ff32 	.word	0x0800ff32
 800fa60:	0800ff60 	.word	0x0800ff60

0800fa64 <_close_r>:
 800fa64:	b538      	push	{r3, r4, r5, lr}
 800fa66:	4d06      	ldr	r5, [pc, #24]	; (800fa80 <_close_r+0x1c>)
 800fa68:	2300      	movs	r3, #0
 800fa6a:	4604      	mov	r4, r0
 800fa6c:	4608      	mov	r0, r1
 800fa6e:	602b      	str	r3, [r5, #0]
 800fa70:	f7f2 f805 	bl	8001a7e <_close>
 800fa74:	1c43      	adds	r3, r0, #1
 800fa76:	d102      	bne.n	800fa7e <_close_r+0x1a>
 800fa78:	682b      	ldr	r3, [r5, #0]
 800fa7a:	b103      	cbz	r3, 800fa7e <_close_r+0x1a>
 800fa7c:	6023      	str	r3, [r4, #0]
 800fa7e:	bd38      	pop	{r3, r4, r5, pc}
 800fa80:	240064d0 	.word	0x240064d0

0800fa84 <fiprintf>:
 800fa84:	b40e      	push	{r1, r2, r3}
 800fa86:	b503      	push	{r0, r1, lr}
 800fa88:	4601      	mov	r1, r0
 800fa8a:	ab03      	add	r3, sp, #12
 800fa8c:	4805      	ldr	r0, [pc, #20]	; (800faa4 <fiprintf+0x20>)
 800fa8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa92:	6800      	ldr	r0, [r0, #0]
 800fa94:	9301      	str	r3, [sp, #4]
 800fa96:	f7ff fe41 	bl	800f71c <_vfiprintf_r>
 800fa9a:	b002      	add	sp, #8
 800fa9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800faa0:	b003      	add	sp, #12
 800faa2:	4770      	bx	lr
 800faa4:	24003410 	.word	0x24003410

0800faa8 <_fstat_r>:
 800faa8:	b538      	push	{r3, r4, r5, lr}
 800faaa:	4d07      	ldr	r5, [pc, #28]	; (800fac8 <_fstat_r+0x20>)
 800faac:	2300      	movs	r3, #0
 800faae:	4604      	mov	r4, r0
 800fab0:	4608      	mov	r0, r1
 800fab2:	4611      	mov	r1, r2
 800fab4:	602b      	str	r3, [r5, #0]
 800fab6:	f7f1 ffee 	bl	8001a96 <_fstat>
 800faba:	1c43      	adds	r3, r0, #1
 800fabc:	d102      	bne.n	800fac4 <_fstat_r+0x1c>
 800fabe:	682b      	ldr	r3, [r5, #0]
 800fac0:	b103      	cbz	r3, 800fac4 <_fstat_r+0x1c>
 800fac2:	6023      	str	r3, [r4, #0]
 800fac4:	bd38      	pop	{r3, r4, r5, pc}
 800fac6:	bf00      	nop
 800fac8:	240064d0 	.word	0x240064d0

0800facc <_isatty_r>:
 800facc:	b538      	push	{r3, r4, r5, lr}
 800face:	4d06      	ldr	r5, [pc, #24]	; (800fae8 <_isatty_r+0x1c>)
 800fad0:	2300      	movs	r3, #0
 800fad2:	4604      	mov	r4, r0
 800fad4:	4608      	mov	r0, r1
 800fad6:	602b      	str	r3, [r5, #0]
 800fad8:	f7f1 ffed 	bl	8001ab6 <_isatty>
 800fadc:	1c43      	adds	r3, r0, #1
 800fade:	d102      	bne.n	800fae6 <_isatty_r+0x1a>
 800fae0:	682b      	ldr	r3, [r5, #0]
 800fae2:	b103      	cbz	r3, 800fae6 <_isatty_r+0x1a>
 800fae4:	6023      	str	r3, [r4, #0]
 800fae6:	bd38      	pop	{r3, r4, r5, pc}
 800fae8:	240064d0 	.word	0x240064d0

0800faec <_lseek_r>:
 800faec:	b538      	push	{r3, r4, r5, lr}
 800faee:	4d07      	ldr	r5, [pc, #28]	; (800fb0c <_lseek_r+0x20>)
 800faf0:	4604      	mov	r4, r0
 800faf2:	4608      	mov	r0, r1
 800faf4:	4611      	mov	r1, r2
 800faf6:	2200      	movs	r2, #0
 800faf8:	602a      	str	r2, [r5, #0]
 800fafa:	461a      	mov	r2, r3
 800fafc:	f7f1 ffe6 	bl	8001acc <_lseek>
 800fb00:	1c43      	adds	r3, r0, #1
 800fb02:	d102      	bne.n	800fb0a <_lseek_r+0x1e>
 800fb04:	682b      	ldr	r3, [r5, #0]
 800fb06:	b103      	cbz	r3, 800fb0a <_lseek_r+0x1e>
 800fb08:	6023      	str	r3, [r4, #0]
 800fb0a:	bd38      	pop	{r3, r4, r5, pc}
 800fb0c:	240064d0 	.word	0x240064d0

0800fb10 <__ascii_mbtowc>:
 800fb10:	b082      	sub	sp, #8
 800fb12:	b901      	cbnz	r1, 800fb16 <__ascii_mbtowc+0x6>
 800fb14:	a901      	add	r1, sp, #4
 800fb16:	b142      	cbz	r2, 800fb2a <__ascii_mbtowc+0x1a>
 800fb18:	b14b      	cbz	r3, 800fb2e <__ascii_mbtowc+0x1e>
 800fb1a:	7813      	ldrb	r3, [r2, #0]
 800fb1c:	600b      	str	r3, [r1, #0]
 800fb1e:	7812      	ldrb	r2, [r2, #0]
 800fb20:	1e10      	subs	r0, r2, #0
 800fb22:	bf18      	it	ne
 800fb24:	2001      	movne	r0, #1
 800fb26:	b002      	add	sp, #8
 800fb28:	4770      	bx	lr
 800fb2a:	4610      	mov	r0, r2
 800fb2c:	e7fb      	b.n	800fb26 <__ascii_mbtowc+0x16>
 800fb2e:	f06f 0001 	mvn.w	r0, #1
 800fb32:	e7f8      	b.n	800fb26 <__ascii_mbtowc+0x16>

0800fb34 <_read_r>:
 800fb34:	b538      	push	{r3, r4, r5, lr}
 800fb36:	4d07      	ldr	r5, [pc, #28]	; (800fb54 <_read_r+0x20>)
 800fb38:	4604      	mov	r4, r0
 800fb3a:	4608      	mov	r0, r1
 800fb3c:	4611      	mov	r1, r2
 800fb3e:	2200      	movs	r2, #0
 800fb40:	602a      	str	r2, [r5, #0]
 800fb42:	461a      	mov	r2, r3
 800fb44:	f7f1 ff62 	bl	8001a0c <_read>
 800fb48:	1c43      	adds	r3, r0, #1
 800fb4a:	d102      	bne.n	800fb52 <_read_r+0x1e>
 800fb4c:	682b      	ldr	r3, [r5, #0]
 800fb4e:	b103      	cbz	r3, 800fb52 <_read_r+0x1e>
 800fb50:	6023      	str	r3, [r4, #0]
 800fb52:	bd38      	pop	{r3, r4, r5, pc}
 800fb54:	240064d0 	.word	0x240064d0

0800fb58 <__ascii_wctomb>:
 800fb58:	b149      	cbz	r1, 800fb6e <__ascii_wctomb+0x16>
 800fb5a:	2aff      	cmp	r2, #255	; 0xff
 800fb5c:	bf85      	ittet	hi
 800fb5e:	238a      	movhi	r3, #138	; 0x8a
 800fb60:	6003      	strhi	r3, [r0, #0]
 800fb62:	700a      	strbls	r2, [r1, #0]
 800fb64:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800fb68:	bf98      	it	ls
 800fb6a:	2001      	movls	r0, #1
 800fb6c:	4770      	bx	lr
 800fb6e:	4608      	mov	r0, r1
 800fb70:	4770      	bx	lr

0800fb72 <abort>:
 800fb72:	b508      	push	{r3, lr}
 800fb74:	2006      	movs	r0, #6
 800fb76:	f000 f82b 	bl	800fbd0 <raise>
 800fb7a:	2001      	movs	r0, #1
 800fb7c:	f7f1 ff3c 	bl	80019f8 <_exit>

0800fb80 <_raise_r>:
 800fb80:	291f      	cmp	r1, #31
 800fb82:	b538      	push	{r3, r4, r5, lr}
 800fb84:	4604      	mov	r4, r0
 800fb86:	460d      	mov	r5, r1
 800fb88:	d904      	bls.n	800fb94 <_raise_r+0x14>
 800fb8a:	2316      	movs	r3, #22
 800fb8c:	6003      	str	r3, [r0, #0]
 800fb8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb92:	bd38      	pop	{r3, r4, r5, pc}
 800fb94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fb96:	b112      	cbz	r2, 800fb9e <_raise_r+0x1e>
 800fb98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb9c:	b94b      	cbnz	r3, 800fbb2 <_raise_r+0x32>
 800fb9e:	4620      	mov	r0, r4
 800fba0:	f000 f830 	bl	800fc04 <_getpid_r>
 800fba4:	462a      	mov	r2, r5
 800fba6:	4601      	mov	r1, r0
 800fba8:	4620      	mov	r0, r4
 800fbaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbae:	f000 b817 	b.w	800fbe0 <_kill_r>
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d00a      	beq.n	800fbcc <_raise_r+0x4c>
 800fbb6:	1c59      	adds	r1, r3, #1
 800fbb8:	d103      	bne.n	800fbc2 <_raise_r+0x42>
 800fbba:	2316      	movs	r3, #22
 800fbbc:	6003      	str	r3, [r0, #0]
 800fbbe:	2001      	movs	r0, #1
 800fbc0:	e7e7      	b.n	800fb92 <_raise_r+0x12>
 800fbc2:	2400      	movs	r4, #0
 800fbc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fbc8:	4628      	mov	r0, r5
 800fbca:	4798      	blx	r3
 800fbcc:	2000      	movs	r0, #0
 800fbce:	e7e0      	b.n	800fb92 <_raise_r+0x12>

0800fbd0 <raise>:
 800fbd0:	4b02      	ldr	r3, [pc, #8]	; (800fbdc <raise+0xc>)
 800fbd2:	4601      	mov	r1, r0
 800fbd4:	6818      	ldr	r0, [r3, #0]
 800fbd6:	f7ff bfd3 	b.w	800fb80 <_raise_r>
 800fbda:	bf00      	nop
 800fbdc:	24003410 	.word	0x24003410

0800fbe0 <_kill_r>:
 800fbe0:	b538      	push	{r3, r4, r5, lr}
 800fbe2:	4d07      	ldr	r5, [pc, #28]	; (800fc00 <_kill_r+0x20>)
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	4604      	mov	r4, r0
 800fbe8:	4608      	mov	r0, r1
 800fbea:	4611      	mov	r1, r2
 800fbec:	602b      	str	r3, [r5, #0]
 800fbee:	f7f1 fef3 	bl	80019d8 <_kill>
 800fbf2:	1c43      	adds	r3, r0, #1
 800fbf4:	d102      	bne.n	800fbfc <_kill_r+0x1c>
 800fbf6:	682b      	ldr	r3, [r5, #0]
 800fbf8:	b103      	cbz	r3, 800fbfc <_kill_r+0x1c>
 800fbfa:	6023      	str	r3, [r4, #0]
 800fbfc:	bd38      	pop	{r3, r4, r5, pc}
 800fbfe:	bf00      	nop
 800fc00:	240064d0 	.word	0x240064d0

0800fc04 <_getpid_r>:
 800fc04:	f7f1 bee0 	b.w	80019c8 <_getpid>

0800fc08 <_init>:
 800fc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc0a:	bf00      	nop
 800fc0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc0e:	bc08      	pop	{r3}
 800fc10:	469e      	mov	lr, r3
 800fc12:	4770      	bx	lr

0800fc14 <_fini>:
 800fc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc16:	bf00      	nop
 800fc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc1a:	bc08      	pop	{r3}
 800fc1c:	469e      	mov	lr, r3
 800fc1e:	4770      	bx	lr
