
SSS_CIS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025afc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005868  08025da0  08025da0  00035da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b608  0802b608  00043a1c  2**0
                  CONTENTS
  4 .ARM          00000008  0802b608  0802b608  0003b608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b610  0802b610  00043a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b610  0802b610  0003b610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b614  0802b614  0003b614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003a1c  24000000  0802b618  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009cb8  24003a20  0802f034  00043a20  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2400d6d8  0802f034  0004d6d8  2**0
                  ALLOC
 11 .lwip_sec     000019d0  30040000  0802f034  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00043a1c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00079147  00000000  00000000  00043a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c6a5  00000000  00000000  000bcb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e90  00000000  00000000  000c9238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002bd8  00000000  00000000  000cc0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000533b4  00000000  00000000  000ceca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00051fa1  00000000  00000000  00122054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c0b53  00000000  00000000  00173ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d1  00000000  00000000  00334b48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d910  00000000  00000000  00334c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24003a20 	.word	0x24003a20
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08025d84 	.word	0x08025d84

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24003a24 	.word	0x24003a24
 80002dc:	08025d84 	.word	0x08025d84

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <cisynth_ifft>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int cisynth_ifft(void)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	ed2d 8b02 	vpush	{d8}
 8000a76:	b0c7      	sub	sp, #284	; 0x11c
 8000a78:	af02      	add	r7, sp, #8
	uint8_t FreqStr[256] = {0};
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	3304      	adds	r3, #4
 8000a82:	22fc      	movs	r2, #252	; 0xfc
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f01f fa46 	bl	801ff18 <memset>
	uint32_t cis_color = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	printf("Start BW ifft mode \n");
 8000a92:	489b      	ldr	r0, [pc, #620]	; (8000d00 <cisynth_ifft+0x290>)
 8000a94:	f020 f9c0 	bl	8020e18 <puts>

	cisynth_ifft_SetHint();
 8000a98:	f000 f940 	bl	8000d1c <cisynth_ifft_SetHint>
	pcm5102_Init();
 8000a9c:	f01c feb2 	bl	801d804 <pcm5102_Init>
	cis_Init(IFFT_MODE);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f01c fa2b 	bl	801cefc <cis_Init>
	synth_IfftInit();
 8000aa6:	f010 fc11 	bl	80112cc <synth_IfftInit>
	//	cis_Test();

	/* Infinite loop */
	static uint32_t start_tick;
	uint32_t latency;
	uint32_t i = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t note = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	while (1)
	{
		start_tick = HAL_GetTick();
 8000ab6:	f003 fa45 	bl	8003f44 <HAL_GetTick>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4a91      	ldr	r2, [pc, #580]	; (8000d04 <cisynth_ifft+0x294>)
 8000abe:	6013      	str	r3, [r2, #0]
		while (synth_process_cnt < (SAMPLING_FREQUENCY / DISPLAY_REFRESH_FPS))
 8000ac0:	e002      	b.n	8000ac8 <cisynth_ifft+0x58>
		{
			synth_AudioProcess(IFFT_MODE);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f010 ff5e 	bl	8011984 <synth_AudioProcess>
		while (synth_process_cnt < (SAMPLING_FREQUENCY / DISPLAY_REFRESH_FPS))
 8000ac8:	4b8f      	ldr	r3, [pc, #572]	; (8000d08 <cisynth_ifft+0x298>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 8000ad0:	d3f7      	bcc.n	8000ac2 <cisynth_ifft+0x52>
		}

		synth_process_cnt = 0;
 8000ad2:	4b8d      	ldr	r3, [pc, #564]	; (8000d08 <cisynth_ifft+0x298>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
		latency = HAL_GetTick() - start_tick;
 8000ad8:	f003 fa34 	bl	8003f44 <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	4b89      	ldr	r3, [pc, #548]	; (8000d04 <cisynth_ifft+0x294>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		sprintf((char *)FreqStr, "%dHz", (int)((SAMPLING_FREQUENCY * 1000) / (latency * DISPLAY_REFRESH_FPS)));
 8000ae8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000aec:	4613      	mov	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b85      	ldr	r3, [pc, #532]	; (8000d0c <cisynth_ifft+0x29c>)
 8000af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000afc:	461a      	mov	r2, r3
 8000afe:	463b      	mov	r3, r7
 8000b00:	4983      	ldr	r1, [pc, #524]	; (8000d10 <cisynth_ifft+0x2a0>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f020 f9e6 	bl	8020ed4 <siprintf>

		ssd1362_drawRect(0, DISPLAY_AERA1_Y1POS, DISPLAY_MAX_X_LENGTH / 2 - 1, DISPLAY_AERA1_Y2POS, 3, false);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	231c      	movs	r3, #28
 8000b12:	227f      	movs	r2, #127	; 0x7f
 8000b14:	210a      	movs	r1, #10
 8000b16:	2000      	movs	r0, #0
 8000b18:	f01d f810 	bl	801db3c <ssd1362_drawRect>
		ssd1362_drawRect(DISPLAY_MAX_X_LENGTH / 2 + 1, DISPLAY_AERA1_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA1_Y2POS, 4, false);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	2304      	movs	r3, #4
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	231c      	movs	r3, #28
 8000b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b2a:	210a      	movs	r1, #10
 8000b2c:	2081      	movs	r0, #129	; 0x81
 8000b2e:	f01d f805 	bl	801db3c <ssd1362_drawRect>
		ssd1362_drawRect(0, DISPLAY_AERA2_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA2_Y2POS, 3, false);
 8000b32:	2300      	movs	r3, #0
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	2303      	movs	r3, #3
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2329      	movs	r3, #41	; 0x29
 8000b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b40:	211d      	movs	r1, #29
 8000b42:	2000      	movs	r0, #0
 8000b44:	f01c fffa 	bl	801db3c <ssd1362_drawRect>
		ssd1362_drawRect(0, DISPLAY_AERA3_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA3_Y2POS, 8, false);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2332      	movs	r3, #50	; 0x32
 8000b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b56:	212a      	movs	r1, #42	; 0x2a
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f01c ffef 	bl	801db3c <ssd1362_drawRect>

		if (note > cis_GetEffectivePixelNb())
 8000b5e:	f01c fa33 	bl	801cfc8 <cis_GetEffectivePixelNb>
 8000b62:	4603      	mov	r3, r0
 8000b64:	461a      	mov	r2, r3
 8000b66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d902      	bls.n	8000b74 <cisynth_ifft+0x104>
		{
			note = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		}

		synth_SetImageData(++note, 65535); //for testing
 8000b74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b78:	3301      	adds	r3, #1
 8000b7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000b7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b82:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8000b86:	f010 fcf5 	bl	8011574 <synth_SetImageData>
		synth_SetImageData(note - 1, 0);
 8000b8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f010 fcee 	bl	8011574 <synth_SetImageData>

		for (i = 0; i < ((DISPLAY_MAX_X_LENGTH / 2) - 1); i++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b9e:	e033      	b.n	8000c08 <cisynth_ifft+0x198>
		{
			ssd1362_drawPixel(i, DISPLAY_AERA1_Y1POS + (DISPLAY_AERAS1_HEIGHT / 2) + ((synth_GetAudioData(i) << 16 >> 16) / 4096) - 1, 10, false);
 8000ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ba4:	b29c      	uxth	r4, r3
 8000ba6:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8000baa:	f010 fcd3 	bl	8011554 <synth_GetAudioData>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	041b      	lsls	r3, r3, #16
 8000bb2:	141b      	asrs	r3, r3, #16
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	da01      	bge.n	8000bbc <cisynth_ifft+0x14c>
 8000bb8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000bbc:	131b      	asrs	r3, r3, #12
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	3312      	adds	r3, #18
 8000bc2:	b299      	uxth	r1, r3
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	220a      	movs	r2, #10
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f01c ff4d 	bl	801da68 <ssd1362_drawPixel>
			ssd1362_drawPixel(i + (DISPLAY_MAX_X_LENGTH / 2) + 1, DISPLAY_AERA1_Y1POS + (DISPLAY_AERAS1_HEIGHT / 2) + ((synth_GetAudioData(i) >> 16) / 4096) - 1, 10, false);
 8000bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	3381      	adds	r3, #129	; 0x81
 8000bd6:	b29c      	uxth	r4, r3
 8000bd8:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8000bdc:	f010 fcba 	bl	8011554 <synth_GetAudioData>
 8000be0:	4603      	mov	r3, r0
 8000be2:	141b      	asrs	r3, r3, #16
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	da01      	bge.n	8000bec <cisynth_ifft+0x17c>
 8000be8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000bec:	131b      	asrs	r3, r3, #12
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	3312      	adds	r3, #18
 8000bf2:	b299      	uxth	r1, r3
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	220a      	movs	r2, #10
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f01c ff35 	bl	801da68 <ssd1362_drawPixel>
		for (i = 0; i < ((DISPLAY_MAX_X_LENGTH / 2) - 1); i++)
 8000bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c02:	3301      	adds	r3, #1
 8000c04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c0c:	2b7e      	cmp	r3, #126	; 0x7e
 8000c0e:	d9c7      	bls.n	8000ba0 <cisynth_ifft+0x130>
		}

		for (i = 0; i < (DISPLAY_MAX_X_LENGTH); i++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000c16:	e055      	b.n	8000cc4 <cisynth_ifft+0x254>
		{
			cis_color = cis_GetBuffData((i * ((float)cis_GetEffectivePixelNb() / (float)DISPLAY_MAX_X_LENGTH)));
 8000c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c1c:	ee07 3a90 	vmov	s15, r3
 8000c20:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000c24:	f01c f9d0 	bl	801cfc8 <cis_GetEffectivePixelNb>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	ee07 3a90 	vmov	s15, r3
 8000c2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c32:	eddf 6a38 	vldr	s13, [pc, #224]	; 8000d14 <cisynth_ifft+0x2a4>
 8000c36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c3a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c42:	ee17 0a90 	vmov	r0, s15
 8000c46:	f01c f9cb 	bl	801cfe0 <cis_GetBuffData>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			cis_color = cis_color >> 8;
 8000c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			ssd1362_drawPixel(i, DISPLAY_AERA2_Y1POS + DISPLAY_AERAS2_HEIGHT - DISPLAY_INTER_AERAS_HEIGHT - (cis_color >> 5) - 1, 15, false);
 8000c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c5e:	b298      	uxth	r0, r3
 8000c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c64:	095b      	lsrs	r3, r3, #5
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8000c6c:	b299      	uxth	r1, r3
 8000c6e:	2300      	movs	r3, #0
 8000c70:	220f      	movs	r2, #15
 8000c72:	f01c fef9 	bl	801da68 <ssd1362_drawPixel>

			cis_color |= 0xFF000000;
 8000c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000c7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			cis_color |= cis_color << 8;
 8000c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			cis_color |= cis_color << 16;
 8000c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c96:	041b      	lsls	r3, r3, #16
 8000c98:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			ssd1362_drawVLine(i, DISPLAY_AERA3_Y1POS + 1, DISPLAY_AERAS3_HEIGHT - 2, cis_color, false);
 8000ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ca6:	b298      	uxth	r0, r3
 8000ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2200      	movs	r2, #0
 8000cb0:	9200      	str	r2, [sp, #0]
 8000cb2:	2206      	movs	r2, #6
 8000cb4:	212b      	movs	r1, #43	; 0x2b
 8000cb6:	f01c ffb2 	bl	801dc1e <ssd1362_drawVLine>
		for (i = 0; i < (DISPLAY_MAX_X_LENGTH); i++)
 8000cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000cc8:	2bff      	cmp	r3, #255	; 0xff
 8000cca:	d9a5      	bls.n	8000c18 <cisynth_ifft+0x1a8>

			//			cis_color = synth_GetImageData((i * ((float)cis_GetEffectivePixelNb() / (float)DISPLAY_MAX_X_LENGTH)));
			//			cis_color = cis_color >> 11;
			//			ssd1362_drawPixel(i, DISPLAY_AERA5_YPOS + DISPLAY_AERAS_HEIGHT - DISPLAY_INTER_AERAS_HEIGHT - cis_color, 15, false);
		}
		ssd1362_drawRect(200, DISPLAY_HEAD_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_HEAD_Y2POS, 4, false);
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2309      	movs	r3, #9
 8000cd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cda:	2100      	movs	r1, #0
 8000cdc:	20c8      	movs	r0, #200	; 0xc8
 8000cde:	f01c ff2d 	bl	801db3c <ssd1362_drawRect>
		ssd1362_drawString(200, 1, (int8_t*)FreqStr, 15, 8);
 8000ce2:	463a      	mov	r2, r7
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	230f      	movs	r3, #15
 8000cea:	2101      	movs	r1, #1
 8000cec:	20c8      	movs	r0, #200	; 0xc8
 8000cee:	f01d f888 	bl	801de02 <ssd1362_drawString>
		ssd1362_writeFullBuffer();
 8000cf2:	f01d f955 	bl	801dfa0 <ssd1362_writeFullBuffer>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000cf6:	2140      	movs	r1, #64	; 0x40
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <cisynth_ifft+0x2a8>)
 8000cfa:	f008 fdd6 	bl	80098aa <HAL_GPIO_TogglePin>
		start_tick = HAL_GetTick();
 8000cfe:	e6da      	b.n	8000ab6 <cisynth_ifft+0x46>
 8000d00:	08025da0 	.word	0x08025da0
 8000d04:	24003a40 	.word	0x24003a40
 8000d08:	24004654 	.word	0x24004654
 8000d0c:	02dc6c00 	.word	0x02dc6c00
 8000d10:	08025db4 	.word	0x08025db4
 8000d14:	43800000 	.word	0x43800000
 8000d18:	58021c00 	.word	0x58021c00

08000d1c <cisynth_ifft_SetHint>:
 * @brief  Display Audio demo hint
 * @param  None
 * @retval None
 */
static void cisynth_ifft_SetHint(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af02      	add	r7, sp, #8
	/* Set Audio header description */
	ssd1362_clearBuffer();
 8000d22:	f01d f90f 	bl	801df44 <ssd1362_clearBuffer>
	ssd1362_drawRect(0, DISPLAY_HEAD_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_HEAD_Y2POS, 4, false);
 8000d26:	2300      	movs	r3, #0
 8000d28:	9301      	str	r3, [sp, #4]
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2309      	movs	r3, #9
 8000d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d34:	2100      	movs	r1, #0
 8000d36:	2000      	movs	r0, #0
 8000d38:	f01c ff00 	bl	801db3c <ssd1362_drawRect>
	ssd1362_drawString(100, 1, (int8_t *)"CISYNTH 3", 0xF, 8);
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	230f      	movs	r3, #15
 8000d42:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <cisynth_ifft_SetHint+0x4c>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	2064      	movs	r0, #100	; 0x64
 8000d48:	f01d f85b 	bl	801de02 <ssd1362_drawString>
	ssd1362_drawString(0, 1, (int8_t *)"BW ifft", 0xF, 8);
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	230f      	movs	r3, #15
 8000d52:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <cisynth_ifft_SetHint+0x50>)
 8000d54:	2101      	movs	r1, #1
 8000d56:	2000      	movs	r0, #0
 8000d58:	f01d f853 	bl	801de02 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 8000d5c:	f01d f920 	bl	801dfa0 <ssd1362_writeFullBuffer>
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	08025dbc 	.word	0x08025dbc
 8000d6c:	08025dc8 	.word	0x08025dc8

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d74:	4b3f      	ldr	r3, [pc, #252]	; (8000e74 <SystemInit+0x104>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a3e      	ldr	r2, [pc, #248]	; (8000e74 <SystemInit+0x104>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000d84:	4b3b      	ldr	r3, [pc, #236]	; (8000e74 <SystemInit+0x104>)
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	4a3a      	ldr	r2, [pc, #232]	; (8000e74 <SystemInit+0x104>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d90:	4b39      	ldr	r3, [pc, #228]	; (8000e78 <SystemInit+0x108>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 030f 	and.w	r3, r3, #15
 8000d98:	2b06      	cmp	r3, #6
 8000d9a:	d807      	bhi.n	8000dac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d9c:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <SystemInit+0x108>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f023 030f 	bic.w	r3, r3, #15
 8000da4:	4a34      	ldr	r2, [pc, #208]	; (8000e78 <SystemInit+0x108>)
 8000da6:	f043 0307 	orr.w	r3, r3, #7
 8000daa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000dac:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <SystemInit+0x10c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a32      	ldr	r2, [pc, #200]	; (8000e7c <SystemInit+0x10c>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000db8:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <SystemInit+0x10c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <SystemInit+0x10c>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	492e      	ldr	r1, [pc, #184]	; (8000e7c <SystemInit+0x10c>)
 8000dc4:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <SystemInit+0x110>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dca:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <SystemInit+0x108>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d007      	beq.n	8000de6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dd6:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <SystemInit+0x108>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f023 030f 	bic.w	r3, r3, #15
 8000dde:	4a26      	ldr	r2, [pc, #152]	; (8000e78 <SystemInit+0x108>)
 8000de0:	f043 0307 	orr.w	r3, r3, #7
 8000de4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <SystemInit+0x10c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <SystemInit+0x10c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <SystemInit+0x10c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000df8:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <SystemInit+0x10c>)
 8000dfa:	4a22      	ldr	r2, [pc, #136]	; (8000e84 <SystemInit+0x114>)
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <SystemInit+0x10c>)
 8000e00:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <SystemInit+0x118>)
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <SystemInit+0x10c>)
 8000e06:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <SystemInit+0x11c>)
 8000e08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <SystemInit+0x10c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <SystemInit+0x10c>)
 8000e12:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <SystemInit+0x11c>)
 8000e14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <SystemInit+0x10c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <SystemInit+0x10c>)
 8000e1e:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <SystemInit+0x11c>)
 8000e20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <SystemInit+0x10c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <SystemInit+0x10c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <SystemInit+0x10c>)
 8000e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <SystemInit+0x10c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <SystemInit+0x120>)
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <SystemInit+0x120>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e44:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <SystemInit+0x124>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <SystemInit+0x128>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e52:	d202      	bcs.n	8000e5a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <SystemInit+0x12c>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <SystemInit+0x130>)
 8000e5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e60:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <SystemInit+0x104>)
 8000e64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e68:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00
 8000e78:	52002000 	.word	0x52002000
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e84:	02020200 	.word	0x02020200
 8000e88:	01ff0000 	.word	0x01ff0000
 8000e8c:	01010280 	.word	0x01010280
 8000e90:	580000c0 	.word	0x580000c0
 8000e94:	5c001000 	.word	0x5c001000
 8000e98:	ffff0000 	.word	0xffff0000
 8000e9c:	51008108 	.word	0x51008108
 8000ea0:	52004000 	.word	0x52004000

08000ea4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
 8000ec4:	615a      	str	r2, [r3, #20]
 8000ec6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000eca:	4a30      	ldr	r2, [pc, #192]	; (8000f8c <MX_ADC1_Init+0xe8>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ece:	4b2e      	ldr	r3, [pc, #184]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef8:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efe:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f24:	4818      	ldr	r0, [pc, #96]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f26:	f003 fa13 	bl	8004350 <HAL_ADC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f30:	f001 fe54 	bl	8002bdc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4812      	ldr	r0, [pc, #72]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f40:	f004 f826 	bl	8004f90 <HAL_ADCEx_MultiModeConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f4a:	f001 fe47 	bl	8002bdc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f52:	2306      	movs	r3, #6
 8000f54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f5a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f5e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f60:	2304      	movs	r3, #4
 8000f62:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f72:	f003 fb8d 	bl	8004690 <HAL_ADC_ConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000f7c:	f001 fe2e 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2400787c 	.word	0x2400787c
 8000f8c:	40022000 	.word	0x40022000

08000f90 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
 8000fa4:	615a      	str	r2, [r3, #20]
 8000fa6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000faa:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <MX_ADC2_Init+0xc4>)
 8000fac:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000fb4:	4b26      	ldr	r3, [pc, #152]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fba:	4b25      	ldr	r3, [pc, #148]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_ADC2_Init+0xc0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001004:	4812      	ldr	r0, [pc, #72]	; (8001050 <MX_ADC2_Init+0xc0>)
 8001006:	f003 f9a3 	bl	8004350 <HAL_ADC_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001010:	f001 fde4 	bl	8002bdc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <MX_ADC2_Init+0xc8>)
 8001016:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001018:	2306      	movs	r3, #6
 800101a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001020:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001024:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001026:	2304      	movs	r3, #4
 8001028:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <MX_ADC2_Init+0xc0>)
 8001038:	f003 fb2a 	bl	8004690 <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001042:	f001 fdcb 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	3720      	adds	r7, #32
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	24007818 	.word	0x24007818
 8001054:	40022100 	.word	0x40022100
 8001058:	04300002 	.word	0x04300002

0800105c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	615a      	str	r2, [r3, #20]
 8001072:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <MX_ADC3_Init+0xc0>)
 8001076:	4a2a      	ldr	r2, [pc, #168]	; (8001120 <MX_ADC3_Init+0xc4>)
 8001078:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <MX_ADC3_Init+0xc0>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001080:	4b26      	ldr	r3, [pc, #152]	; (800111c <MX_ADC3_Init+0xc0>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <MX_ADC3_Init+0xc0>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <MX_ADC3_Init+0xc0>)
 800108e:	2204      	movs	r2, #4
 8001090:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <MX_ADC3_Init+0xc0>)
 8001094:	2200      	movs	r2, #0
 8001096:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <MX_ADC3_Init+0xc0>)
 800109a:	2200      	movs	r2, #0
 800109c:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <MX_ADC3_Init+0xc0>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_ADC3_Init+0xc0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <MX_ADC3_Init+0xc0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_ADC3_Init+0xc0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <MX_ADC3_Init+0xc0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_ADC3_Init+0xc0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_ADC3_Init+0xc0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_ADC3_Init+0xc0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010d0:	4812      	ldr	r0, [pc, #72]	; (800111c <MX_ADC3_Init+0xc0>)
 80010d2:	f003 f93d 	bl	8004350 <HAL_ADC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80010dc:	f001 fd7e 	bl	8002bdc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <MX_ADC3_Init+0xc8>)
 80010e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e4:	2306      	movs	r3, #6
 80010e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f2:	2304      	movs	r3, #4
 80010f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <MX_ADC3_Init+0xc0>)
 8001104:	f003 fac4 	bl	8004690 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 800110e:	f001 fd65 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	240078e0 	.word	0x240078e0
 8001120:	58026000 	.word	0x58026000
 8001124:	04300002 	.word	0x04300002

08001128 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a48      	ldr	r2, [pc, #288]	; (8001258 <HAL_ADC_MspInit+0x130>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d12d      	bne.n	8001196 <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800113a:	4b48      	ldr	r3, [pc, #288]	; (800125c <HAL_ADC_MspInit+0x134>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	4a46      	ldr	r2, [pc, #280]	; (800125c <HAL_ADC_MspInit+0x134>)
 8001142:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001144:	4b45      	ldr	r3, [pc, #276]	; (800125c <HAL_ADC_MspInit+0x134>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10e      	bne.n	800116a <HAL_ADC_MspInit+0x42>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800114c:	4b44      	ldr	r3, [pc, #272]	; (8001260 <HAL_ADC_MspInit+0x138>)
 800114e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001152:	4a43      	ldr	r2, [pc, #268]	; (8001260 <HAL_ADC_MspInit+0x138>)
 8001154:	f043 0320 	orr.w	r3, r3, #32
 8001158:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800115c:	4b40      	ldr	r3, [pc, #256]	; (8001260 <HAL_ADC_MspInit+0x138>)
 800115e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <HAL_ADC_MspInit+0x138>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	4a3b      	ldr	r2, [pc, #236]	; (8001260 <HAL_ADC_MspInit+0x138>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117a:	4b39      	ldr	r3, [pc, #228]	; (8001260 <HAL_ADC_MspInit+0x138>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001188:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800118c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001190:	f002 ff28 	bl	8003fe4 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001194:	e05b      	b.n	800124e <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC2)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a32      	ldr	r2, [pc, #200]	; (8001264 <HAL_ADC_MspInit+0x13c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d12d      	bne.n	80011fc <HAL_ADC_MspInit+0xd4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011a0:	4b2e      	ldr	r3, [pc, #184]	; (800125c <HAL_ADC_MspInit+0x134>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	4a2d      	ldr	r2, [pc, #180]	; (800125c <HAL_ADC_MspInit+0x134>)
 80011a8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <HAL_ADC_MspInit+0x134>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d10e      	bne.n	80011d0 <HAL_ADC_MspInit+0xa8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_ADC_MspInit+0x138>)
 80011b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011b8:	4a29      	ldr	r2, [pc, #164]	; (8001260 <HAL_ADC_MspInit+0x138>)
 80011ba:	f043 0320 	orr.w	r3, r3, #32
 80011be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011c2:	4b27      	ldr	r3, [pc, #156]	; (8001260 <HAL_ADC_MspInit+0x138>)
 80011c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011c8:	f003 0320 	and.w	r3, r3, #32
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_ADC_MspInit+0x138>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d6:	4a22      	ldr	r2, [pc, #136]	; (8001260 <HAL_ADC_MspInit+0x138>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <HAL_ADC_MspInit+0x138>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80011ee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80011f2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80011f6:	f002 fef5 	bl	8003fe4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80011fa:	e028      	b.n	800124e <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC3)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a19      	ldr	r2, [pc, #100]	; (8001268 <HAL_ADC_MspInit+0x140>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d123      	bne.n	800124e <HAL_ADC_MspInit+0x126>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_ADC_MspInit+0x138>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	4a14      	ldr	r2, [pc, #80]	; (8001260 <HAL_ADC_MspInit+0x138>)
 800120e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_ADC_MspInit+0x138>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_ADC_MspInit+0x138>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122a:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_ADC_MspInit+0x138>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_ADC_MspInit+0x138>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001242:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001246:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800124a:	f002 fecb 	bl	8003fe4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 800124e:	bf00      	nop
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40022000 	.word	0x40022000
 800125c:	24003a44 	.word	0x24003a44
 8001260:	58024400 	.word	0x58024400
 8001264:	40022100 	.word	0x40022100
 8001268:	58026000 	.word	0x58026000

0800126c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <MX_CRC_Init+0x3c>)
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <MX_CRC_Init+0x40>)
 8001274:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_CRC_Init+0x3c>)
 8001278:	2200      	movs	r2, #0
 800127a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_CRC_Init+0x3c>)
 800127e:	2200      	movs	r2, #0
 8001280:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_CRC_Init+0x3c>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_CRC_Init+0x3c>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_CRC_Init+0x3c>)
 8001290:	2201      	movs	r2, #1
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_CRC_Init+0x3c>)
 8001296:	f004 f8f9 	bl	800548c <HAL_CRC_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80012a0:	f001 fc9c 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	24007944 	.word	0x24007944
 80012ac:	58024c00 	.word	0x58024c00

080012b0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <HAL_CRC_MspInit+0x3c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d10e      	bne.n	80012e0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_CRC_MspInit+0x40>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c8:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <HAL_CRC_MspInit+0x40>)
 80012ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <HAL_CRC_MspInit+0x40>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	58024c00 	.word	0x58024c00
 80012f0:	58024400 	.word	0x58024400

080012f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <MX_DMA_Init+0x3c>)
 80012fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <MX_DMA_Init+0x3c>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_DMA_Init+0x3c>)
 800130c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2101      	movs	r1, #1
 800131c:	200b      	movs	r0, #11
 800131e:	f003 fff0 	bl	8005302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001322:	200b      	movs	r0, #11
 8001324:	f004 f807 	bl	8005336 <HAL_NVIC_EnableIRQ>

}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	58024400 	.word	0x58024400

08001334 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	; 0x38
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
 800134a:	615a      	str	r2, [r3, #20]
 800134c:	619a      	str	r2, [r3, #24]
  FMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800134e:	463b      	mov	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001360:	4b32      	ldr	r3, [pc, #200]	; (800142c <MX_FMC_Init+0xf8>)
 8001362:	4a33      	ldr	r2, [pc, #204]	; (8001430 <MX_FMC_Init+0xfc>)
 8001364:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001366:	4b31      	ldr	r3, [pc, #196]	; (800142c <MX_FMC_Init+0xf8>)
 8001368:	4a32      	ldr	r2, [pc, #200]	; (8001434 <MX_FMC_Init+0x100>)
 800136a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <MX_FMC_Init+0xf8>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001372:	4b2e      	ldr	r3, [pc, #184]	; (800142c <MX_FMC_Init+0xf8>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001378:	4b2c      	ldr	r3, [pc, #176]	; (800142c <MX_FMC_Init+0xf8>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 800137e:	4b2b      	ldr	r3, [pc, #172]	; (800142c <MX_FMC_Init+0xf8>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <MX_FMC_Init+0xf8>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <MX_FMC_Init+0xf8>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001390:	4b26      	ldr	r3, [pc, #152]	; (800142c <MX_FMC_Init+0xf8>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <MX_FMC_Init+0xf8>)
 8001398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <MX_FMC_Init+0xf8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_FMC_Init+0xf8>)
 80013a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_FMC_Init+0xf8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_FMC_Init+0xf8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80013b8:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_FMC_Init+0xf8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_FMC_Init+0xf8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_FMC_Init+0xf8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 8;
 80013ca:	2308      	movs	r3, #8
 80013cc:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80013ce:	230f      	movs	r3, #15
 80013d0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 10;
 80013d2:	230a      	movs	r3, #10
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 5;
 80013d6:	2305      	movs	r3, #5
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80013da:	2310      	movs	r3, #16
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80013de:	2311      	movs	r3, #17
 80013e0:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80013e2:	2300      	movs	r3, #0
 80013e4:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80013e6:	2308      	movs	r3, #8
 80013e8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80013ea:	230f      	movs	r3, #15
 80013ec:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 10;
 80013ee:	230a      	movs	r3, #10
 80013f0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 5;
 80013f2:	2305      	movs	r3, #5
 80013f4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80013f6:	2310      	movs	r3, #16
 80013f8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80013fa:	2311      	movs	r3, #17
 80013fc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FMC_ACCESS_MODE_A;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001402:	463a      	mov	r2, r7
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	4808      	ldr	r0, [pc, #32]	; (800142c <MX_FMC_Init+0xf8>)
 800140c:	f00d fb50 	bl	800eab0 <HAL_SRAM_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_FMC_Init+0xe6>
  {
    Error_Handler( );
 8001416:	f001 fbe1 	bl	8002bdc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800141a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800141e:	f002 fdf7 	bl	8004010 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE END FMC_Init 2 */
}
 8001422:	bf00      	nop
 8001424:	3738      	adds	r7, #56	; 0x38
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	24007968 	.word	0x24007968
 8001430:	52004000 	.word	0x52004000
 8001434:	52004104 	.word	0x52004104

08001438 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001438:	b580      	push	{r7, lr}
 800143a:	b0b6      	sub	sp, #216	; 0xd8
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800144e:	4b39      	ldr	r3, [pc, #228]	; (8001534 <HAL_FMC_MspInit+0xfc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d169      	bne.n	800152a <HAL_FMC_MspInit+0xf2>
    return;
  }
  FMC_Initialized = 1;
 8001456:	4b37      	ldr	r3, [pc, #220]	; (8001534 <HAL_FMC_MspInit+0xfc>)
 8001458:	2201      	movs	r2, #1
 800145a:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	22bc      	movs	r2, #188	; 0xbc
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f01e fd57 	bl	801ff18 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800146a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800146e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001470:	2300      	movs	r3, #0
 8001472:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4618      	mov	r0, r3
 800147a:	f009 fa79 	bl	800a970 <HAL_RCCEx_PeriphCLKConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 8001484:	f001 fbaa 	bl	8002bdc <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <HAL_FMC_MspInit+0x100>)
 800148a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800148e:	4a2a      	ldr	r2, [pc, #168]	; (8001538 <HAL_FMC_MspInit+0x100>)
 8001490:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001494:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_FMC_MspInit+0x100>)
 800149a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800149e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE9   ------> FMC_D6
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4
 80014a6:	f24c 03b3 	movw	r3, #49331	; 0xc0b3
 80014aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014c0:	230c      	movs	r3, #12
 80014c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014ca:	4619      	mov	r1, r3
 80014cc:	481b      	ldr	r0, [pc, #108]	; (800153c <HAL_FMC_MspInit+0x104>)
 80014ce:	f008 f823 	bl	8009518 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014d2:	2301      	movs	r3, #1
 80014d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ea:	230c      	movs	r3, #12
 80014ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014f4:	4619      	mov	r1, r3
 80014f6:	4812      	ldr	r0, [pc, #72]	; (8001540 <HAL_FMC_MspInit+0x108>)
 80014f8:	f008 f80e 	bl	8009518 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_9;
 80014fc:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001500:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001516:	230c      	movs	r3, #12
 8001518:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800151c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001520:	4619      	mov	r1, r3
 8001522:	4808      	ldr	r0, [pc, #32]	; (8001544 <HAL_FMC_MspInit+0x10c>)
 8001524:	f007 fff8 	bl	8009518 <HAL_GPIO_Init>
 8001528:	e000      	b.n	800152c <HAL_FMC_MspInit+0xf4>
    return;
 800152a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800152c:	37d8      	adds	r7, #216	; 0xd8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	24003a48 	.word	0x24003a48
 8001538:	58024400 	.word	0x58024400
 800153c:	58020c00 	.word	0x58020c00
 8001540:	58021400 	.word	0x58021400
 8001544:	58021000 	.word	0x58021000

08001548 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001550:	f7ff ff72 	bl	8001438 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	; 0x38
 8001560:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b96      	ldr	r3, [pc, #600]	; (80017cc <MX_GPIO_Init+0x270>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	4a94      	ldr	r2, [pc, #592]	; (80017cc <MX_GPIO_Init+0x270>)
 800157a:	f043 0302 	orr.w	r3, r3, #2
 800157e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001582:	4b92      	ldr	r3, [pc, #584]	; (80017cc <MX_GPIO_Init+0x270>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	623b      	str	r3, [r7, #32]
 800158e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001590:	4b8e      	ldr	r3, [pc, #568]	; (80017cc <MX_GPIO_Init+0x270>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001596:	4a8d      	ldr	r2, [pc, #564]	; (80017cc <MX_GPIO_Init+0x270>)
 8001598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800159c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a0:	4b8a      	ldr	r3, [pc, #552]	; (80017cc <MX_GPIO_Init+0x270>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ae:	4b87      	ldr	r3, [pc, #540]	; (80017cc <MX_GPIO_Init+0x270>)
 80015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b4:	4a85      	ldr	r2, [pc, #532]	; (80017cc <MX_GPIO_Init+0x270>)
 80015b6:	f043 0308 	orr.w	r3, r3, #8
 80015ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015be:	4b83      	ldr	r3, [pc, #524]	; (80017cc <MX_GPIO_Init+0x270>)
 80015c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	4b7f      	ldr	r3, [pc, #508]	; (80017cc <MX_GPIO_Init+0x270>)
 80015ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d2:	4a7e      	ldr	r2, [pc, #504]	; (80017cc <MX_GPIO_Init+0x270>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015dc:	4b7b      	ldr	r3, [pc, #492]	; (80017cc <MX_GPIO_Init+0x270>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ea:	4b78      	ldr	r3, [pc, #480]	; (80017cc <MX_GPIO_Init+0x270>)
 80015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f0:	4a76      	ldr	r2, [pc, #472]	; (80017cc <MX_GPIO_Init+0x270>)
 80015f2:	f043 0310 	orr.w	r3, r3, #16
 80015f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fa:	4b74      	ldr	r3, [pc, #464]	; (80017cc <MX_GPIO_Init+0x270>)
 80015fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001608:	4b70      	ldr	r3, [pc, #448]	; (80017cc <MX_GPIO_Init+0x270>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160e:	4a6f      	ldr	r2, [pc, #444]	; (80017cc <MX_GPIO_Init+0x270>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001618:	4b6c      	ldr	r3, [pc, #432]	; (80017cc <MX_GPIO_Init+0x270>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001626:	4b69      	ldr	r3, [pc, #420]	; (80017cc <MX_GPIO_Init+0x270>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162c:	4a67      	ldr	r2, [pc, #412]	; (80017cc <MX_GPIO_Init+0x270>)
 800162e:	f043 0320 	orr.w	r3, r3, #32
 8001632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001636:	4b65      	ldr	r3, [pc, #404]	; (80017cc <MX_GPIO_Init+0x270>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163c:	f003 0320 	and.w	r3, r3, #32
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001644:	4b61      	ldr	r3, [pc, #388]	; (80017cc <MX_GPIO_Init+0x270>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	4a60      	ldr	r2, [pc, #384]	; (80017cc <MX_GPIO_Init+0x270>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001654:	4b5d      	ldr	r3, [pc, #372]	; (80017cc <MX_GPIO_Init+0x270>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RESET_Pin|MEMS_CS_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001668:	4859      	ldr	r0, [pc, #356]	; (80017d0 <MX_GPIO_Init+0x274>)
 800166a:	f008 f905 	bl	8009878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CIS_RS_GPIO_Port, CIS_RS_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001674:	4857      	ldr	r0, [pc, #348]	; (80017d4 <MX_GPIO_Init+0x278>)
 8001676:	f008 f8ff 	bl	8009878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAC_FLT_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	f242 0104 	movw	r1, #8196	; 0x2004
 8001680:	4855      	ldr	r0, [pc, #340]	; (80017d8 <MX_GPIO_Init+0x27c>)
 8001682:	f008 f8f9 	bl	8009878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, EN_12V_Pin|EN_5V_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2124      	movs	r1, #36	; 0x24
 800168a:	4854      	ldr	r0, [pc, #336]	; (80017dc <MX_GPIO_Init+0x280>)
 800168c:	f008 f8f4 	bl	8009878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2140      	movs	r1, #64	; 0x40
 8001694:	4852      	ldr	r0, [pc, #328]	; (80017e0 <MX_GPIO_Init+0x284>)
 8001696:	f008 f8ef 	bl	8009878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_Pin|DAC_DEMP_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	2148      	movs	r1, #72	; 0x48
 800169e:	4851      	ldr	r0, [pc, #324]	; (80017e4 <MX_GPIO_Init+0x288>)
 80016a0:	f008 f8ea 	bl	8009878 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin|MEMS_CS_Pin;
 80016a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ba:	4619      	mov	r1, r3
 80016bc:	4844      	ldr	r0, [pc, #272]	; (80017d0 <MX_GPIO_Init+0x274>)
 80016be:	f007 ff2b 	bl	8009518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_FSYNC_Pin;
 80016c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_FSYNC_GPIO_Port, &GPIO_InitStruct);
 80016d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d4:	4619      	mov	r1, r3
 80016d6:	483f      	ldr	r0, [pc, #252]	; (80017d4 <MX_GPIO_Init+0x278>)
 80016d8:	f007 ff1e 	bl	8009518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CIS_RS_Pin;
 80016dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CIS_RS_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	4619      	mov	r1, r3
 80016f4:	4837      	ldr	r0, [pc, #220]	; (80017d4 <MX_GPIO_Init+0x278>)
 80016f6:	f007 ff0f 	bl	8009518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAC_FLT_Pin|DAC_XSMT_Pin;
 80016fa:	f242 0304 	movw	r3, #8196	; 0x2004
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	4831      	ldr	r0, [pc, #196]	; (80017d8 <MX_GPIO_Init+0x27c>)
 8001714:	f007 ff00 	bl	8009518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|EN_5V_Pin;
 8001718:	2324      	movs	r3, #36	; 0x24
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	4619      	mov	r1, r3
 800172e:	482b      	ldr	r0, [pc, #172]	; (80017dc <MX_GPIO_Init+0x280>)
 8001730:	f007 fef2 	bl	8009518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_FMT_Pin;
 8001734:	2340      	movs	r3, #64	; 0x40
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_FMT_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001748:	4619      	mov	r1, r3
 800174a:	4825      	ldr	r0, [pc, #148]	; (80017e0 <MX_GPIO_Init+0x284>)
 800174c:	f007 fee4 	bl	8009518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT_Pin;
 8001750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001756:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <MX_GPIO_Init+0x28c>)
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001762:	4619      	mov	r1, r3
 8001764:	4821      	ldr	r0, [pc, #132]	; (80017ec <MX_GPIO_Init+0x290>)
 8001766:	f007 fed7 	bl	8009518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SW_4_Pin|SW_5_Pin|SW_1_Pin|SW_3_Pin
 800176a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SW_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <MX_GPIO_Init+0x28c>)
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	481c      	ldr	r0, [pc, #112]	; (80017f0 <MX_GPIO_Init+0x294>)
 8001780:	f007 feca 	bl	8009518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001784:	2340      	movs	r3, #64	; 0x40
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001798:	4619      	mov	r1, r3
 800179a:	4812      	ldr	r0, [pc, #72]	; (80017e4 <MX_GPIO_Init+0x288>)
 800179c:	f007 febc 	bl	8009518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_DEMP_Pin;
 80017a0:	2308      	movs	r3, #8
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_DEMP_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	480b      	ldr	r0, [pc, #44]	; (80017e4 <MX_GPIO_Init+0x288>)
 80017b8:	f007 feae 	bl	8009518 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 80017bc:	2040      	movs	r0, #64	; 0x40
 80017be:	f008 f8bd 	bl	800993c <HAL_I2CEx_EnableFastModePlus>

}
 80017c2:	bf00      	nop
 80017c4:	3738      	adds	r7, #56	; 0x38
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	58024400 	.word	0x58024400
 80017d0:	58020400 	.word	0x58020400
 80017d4:	58020000 	.word	0x58020000
 80017d8:	58020800 	.word	0x58020800
 80017dc:	58021800 	.word	0x58021800
 80017e0:	58021400 	.word	0x58021400
 80017e4:	58021c00 	.word	0x58021c00
 80017e8:	11110000 	.word	0x11110000
 80017ec:	58020c00 	.word	0x58020c00
 80017f0:	58021000 	.word	0x58021000

080017f4 <lwiperf_list_add>:


/** Add an iperf session to the 'active' list */
static void
lwiperf_list_add(lwiperf_state_base_t *item)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  item->next = lwiperf_all_connections;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <lwiperf_list_add+0x24>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	601a      	str	r2, [r3, #0]
  lwiperf_all_connections = item;
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <lwiperf_list_add+0x24>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	24003a4c 	.word	0x24003a4c

0800181c <lwiperf_list_remove>:

/** Remove an iperf session from the 'active' list */
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *prev = NULL;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <lwiperf_list_remove+0x78>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	e029      	b.n	8001884 <lwiperf_list_remove+0x68>
    if (iter == item) {
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	d120      	bne.n	800187a <lwiperf_list_remove+0x5e>
      if (prev == NULL) {
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d104      	bne.n	8001848 <lwiperf_list_remove+0x2c>
        lwiperf_all_connections = iter->next;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a14      	ldr	r2, [pc, #80]	; (8001894 <lwiperf_list_remove+0x78>)
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e003      	b.n	8001850 <lwiperf_list_remove+0x34>
      } else {
        prev->next = iter->next;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	601a      	str	r2, [r3, #0]
      }
      /* @debug: ensure this item is listed only once */
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	e00c      	b.n	8001872 <lwiperf_list_remove+0x56>
        LWIP_ASSERT("duplicate entry", iter != item);
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	d105      	bne.n	800186c <lwiperf_list_remove+0x50>
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <lwiperf_list_remove+0x7c>)
 8001862:	22d0      	movs	r2, #208	; 0xd0
 8001864:	490d      	ldr	r1, [pc, #52]	; (800189c <lwiperf_list_remove+0x80>)
 8001866:	480e      	ldr	r0, [pc, #56]	; (80018a0 <lwiperf_list_remove+0x84>)
 8001868:	f01f fa50 	bl	8020d0c <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ef      	bne.n	8001858 <lwiperf_list_remove+0x3c>
      }
      break;
 8001878:	e008      	b.n	800188c <lwiperf_list_remove+0x70>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1d2      	bne.n	8001830 <lwiperf_list_remove+0x14>
    }
  }
}
 800188a:	bf00      	nop
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	24003a4c 	.word	0x24003a4c
 8001898:	08025dd0 	.word	0x08025dd0
 800189c:	08025de8 	.word	0x08025de8
 80018a0:	08025df8 	.word	0x08025df8

080018a4 <lwiperf_list_find>:

static lwiperf_state_base_t *
lwiperf_list_find(lwiperf_state_base_t *item)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <lwiperf_list_find+0x38>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e008      	b.n	80018c6 <lwiperf_list_find+0x22>
    if (iter == item) {
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d101      	bne.n	80018c0 <lwiperf_list_find+0x1c>
      return item;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	e006      	b.n	80018ce <lwiperf_list_find+0x2a>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f3      	bne.n	80018b4 <lwiperf_list_find+0x10>
    }
  }
  return NULL;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	24003a4c 	.word	0x24003a4c

080018e0 <lwip_tcp_conn_report>:

/** Call the report function of an iperf tcp session */
static void
lwip_tcp_conn_report(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	b08d      	sub	sp, #52	; 0x34
 80018e4:	af06      	add	r7, sp, #24
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d038      	beq.n	8001964 <lwip_tcp_conn_report+0x84>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d034      	beq.n	8001964 <lwip_tcp_conn_report+0x84>
    u32_t now, duration_ms, bandwidth_kbitpsec;
    now = sys_now();
 80018fa:	f00f fc0d 	bl	8011118 <sys_now>
 80018fe:	6138      	str	r0, [r7, #16]
    duration_ms = now - conn->time_started;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	60fb      	str	r3, [r7, #12]
    if (duration_ms == 0) {
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <lwip_tcp_conn_report+0x36>
      bandwidth_kbitpsec = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	e006      	b.n	8001924 <lwip_tcp_conn_report+0x44>
    } else {
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	617b      	str	r3, [r7, #20]
    }
    conn->report_fn(conn->report_arg, report_type,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699c      	ldr	r4, [r3, #24]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69dd      	ldr	r5, [r3, #28]
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	469e      	mov	lr, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
    conn->report_fn(conn->report_arg, report_type,
 8001936:	f8b3 c016 	ldrh.w	ip, [r3, #22]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	3304      	adds	r3, #4
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6912      	ldr	r2, [r2, #16]
    conn->report_fn(conn->report_arg, report_type,
 8001944:	8b12      	ldrh	r2, [r2, #24]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800194a:	78fe      	ldrb	r6, [r7, #3]
 800194c:	6978      	ldr	r0, [r7, #20]
 800194e:	9004      	str	r0, [sp, #16]
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	9003      	str	r0, [sp, #12]
 8001954:	9102      	str	r1, [sp, #8]
 8001956:	9201      	str	r2, [sp, #4]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	4663      	mov	r3, ip
 800195c:	4672      	mov	r2, lr
 800195e:	4631      	mov	r1, r6
 8001960:	4628      	mov	r0, r5
 8001962:	47a0      	blx	r4
                    conn->bytes_transferred, duration_ms, bandwidth_kbitpsec);
  }
}
 8001964:	bf00      	nop
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800196c <lwiperf_tcp_close>:

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	70fb      	strb	r3, [r7, #3]
  err_t err;

  lwiperf_list_remove(&conn->base);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff4e 	bl	800181c <lwiperf_list_remove>
  lwip_tcp_conn_report(conn, report_type);
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	4619      	mov	r1, r3
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ffab 	bl	80018e0 <lwip_tcp_conn_report>
  if (conn->conn_pcb != NULL) {
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d02f      	beq.n	80019f2 <lwiperf_tcp_close+0x86>
    tcp_arg(conn->conn_pcb, NULL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f016 f99d 	bl	8017cd8 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f016 fa26 	bl	8017df8 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f016 f9c4 	bl	8017d40 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f016 f99c 	bl	8017cfc <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f016 f9da 	bl	8017d84 <tcp_err>
    err = tcp_close(conn->conn_pcb);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f014 fedd 	bl	8016794 <tcp_close>
 80019da:	4603      	mov	r3, r0
 80019dc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80019de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d017      	beq.n	8001a16 <lwiperf_tcp_close+0xaa>
      /* don't want to wait for free memory here... */
      tcp_abort(conn->conn_pcb);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f014 ffbc 	bl	8016968 <tcp_abort>
 80019f0:	e011      	b.n	8001a16 <lwiperf_tcp_close+0xaa>
    }
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f014 fecc 	bl	8016794 <tcp_close>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73fb      	strb	r3, [r7, #15]
    LWIP_ASSERT("error", err == ERR_OK);
 8001a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <lwiperf_tcp_close+0xaa>
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <lwiperf_tcp_close+0xb8>)
 8001a0a:	f240 120d 	movw	r2, #269	; 0x10d
 8001a0e:	4906      	ldr	r1, [pc, #24]	; (8001a28 <lwiperf_tcp_close+0xbc>)
 8001a10:	4806      	ldr	r0, [pc, #24]	; (8001a2c <lwiperf_tcp_close+0xc0>)
 8001a12:	f01f f97b 	bl	8020d0c <iprintf>
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f012 ff8a 	bl	8014930 <mem_free>
}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	08025dd0 	.word	0x08025dd0
 8001a28:	08025e20 	.word	0x08025e20
 8001a2c:	08025df8 	.word	0x08025df8

08001a30 <lwiperf_tcp_client_send_more>:

/** Try to send more data on an iperf tcp session */
static err_t
lwiperf_tcp_client_send_more(lwiperf_state_tcp_t *conn)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	; 0x30
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  u16_t txlen;
  u16_t txlen_max;
  void *txptr;
  u8_t apiflags;

  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <lwiperf_tcp_client_send_more+0x1e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	791b      	ldrb	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <lwiperf_tcp_client_send_more+0x1e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	795b      	ldrb	r3, [r3, #5]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d006      	beq.n	8001a5c <lwiperf_tcp_client_send_more+0x2c>
 8001a4e:	4b61      	ldr	r3, [pc, #388]	; (8001bd4 <lwiperf_tcp_client_send_more+0x1a4>)
 8001a50:	f240 121d 	movw	r2, #285	; 0x11d
 8001a54:	4960      	ldr	r1, [pc, #384]	; (8001bd8 <lwiperf_tcp_client_send_more+0x1a8>)
 8001a56:	4861      	ldr	r0, [pc, #388]	; (8001bdc <lwiperf_tcp_client_send_more+0x1ac>)
 8001a58:	f01f f958 	bl	8020d0c <iprintf>

  do {
    send_more = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d01f      	beq.n	8001aac <lwiperf_tcp_client_send_more+0x7c>
      /* this session is time-limited */
      u32_t now = sys_now();
 8001a6c:	f00f fb54 	bl	8011118 <sys_now>
 8001a70:	61b8      	str	r0, [r7, #24]
      u32_t diff_ms = now - conn->time_started;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a80:	4618      	mov	r0, r3
 8001a82:	f010 fa4a 	bl	8011f1a <lwip_htonl>
 8001a86:	4603      	mov	r3, r0
 8001a88:	425b      	negs	r3, r3
 8001a8a:	613b      	str	r3, [r7, #16]
      u32_t time_ms = time * 10;
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
      if (diff_ms >= time_ms) {
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d316      	bcc.n	8001ace <lwiperf_tcp_client_send_more+0x9e>
        /* time specified by the client is over -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff62 	bl	800196c <lwiperf_tcp_close>
        return ERR_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e08e      	b.n	8001bca <lwiperf_tcp_client_send_more+0x19a>
      }
    } else {
      /* this session is byte-limited */
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f010 fa32 	bl	8011f1a <lwip_htonl>
 8001ab6:	61f8      	str	r0, [r7, #28]
      /* @todo: this can send up to 1*MSS more than requested... */
      if (amount_bytes >= conn->bytes_transferred) {
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d305      	bcc.n	8001ace <lwiperf_tcp_client_send_more+0x9e>
        /* all requested bytes transferred -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff51 	bl	800196c <lwiperf_tcp_close>
        return ERR_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e07d      	b.n	8001bca <lwiperf_tcp_client_send_more+0x19a>
      }
    }

    if (conn->bytes_transferred < 24) {
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	2b17      	cmp	r3, #23
 8001ad4:	d810      	bhi.n	8001af8 <lwiperf_tcp_client_send_more+0xc8>
      /* transmit the settings a first time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	4413      	add	r3, r2
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	f1c3 0318 	rsb	r3, r3, #24
 8001aee:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY;
 8001af0:	2301      	movs	r3, #1
 8001af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001af6:	e034      	b.n	8001b62 <lwiperf_tcp_client_send_more+0x132>
    } else if (conn->bytes_transferred < 48) {
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	2b2f      	cmp	r3, #47	; 0x2f
 8001afe:	d813      	bhi.n	8001b28 <lwiperf_tcp_client_send_more+0xf8>
      /* transmit the settings a second time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	3b18      	subs	r3, #24
 8001b0c:	4413      	add	r3, r2
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 8001b1a:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b26:	e01c      	b.n	8001b62 <lwiperf_tcp_client_send_more+0x132>
    } else {
      /* transmit data */
      /* @todo: every x bytes, transmit the settings again */
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b2c:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <lwiperf_tcp_client_send_more+0x1b0>)
 8001b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8001b32:	08da      	lsrs	r2, r3, #3
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	1aca      	subs	r2, r1, r3
 8001b3e:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <lwiperf_tcp_client_send_more+0x1b4>)
 8001b40:	4413      	add	r3, r2
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = TCP_MSS;
 8001b44:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001b48:	853b      	strh	r3, [r7, #40]	; 0x28
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	2b30      	cmp	r3, #48	; 0x30
 8001b50:	d102      	bne.n	8001b58 <lwiperf_tcp_client_send_more+0x128>
        txlen_max = TCP_MSS - 24;
 8001b52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b56:	853b      	strh	r3, [r7, #40]	; 0x28
      }
      apiflags = 0; /* no copying needed */
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    txlen = txlen_max;
 8001b62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b64:	857b      	strh	r3, [r7, #42]	; 0x2a
    do {
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6918      	ldr	r0, [r3, #16]
 8001b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b6e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b72:	f018 ffef 	bl	801ab54 <tcp_write>
 8001b76:	4603      	mov	r3, r0
 8001b78:	72fb      	strb	r3, [r7, #11]
      if (err ==  ERR_MEM) {
 8001b7a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b82:	d102      	bne.n	8001b8a <lwiperf_tcp_client_send_more+0x15a>
        txlen /= 2;
 8001b84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b86:	085b      	lsrs	r3, r3, #1
 8001b88:	857b      	strh	r3, [r7, #42]	; 0x2a
      }
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8001b8a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b92:	d103      	bne.n	8001b9c <lwiperf_tcp_client_send_more+0x16c>
 8001b94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b96:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8001b9a:	d2e4      	bcs.n	8001b66 <lwiperf_tcp_client_send_more+0x136>

    if (err == ERR_OK) {
 8001b9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d106      	bne.n	8001bb2 <lwiperf_tcp_client_send_more+0x182>
      conn->bytes_transferred += txlen;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001baa:	441a      	add	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
 8001bb0:	e001      	b.n	8001bb6 <lwiperf_tcp_client_send_more+0x186>
    } else {
      send_more = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  } while (send_more);
 8001bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f47f af4f 	bne.w	8001a5c <lwiperf_tcp_client_send_more+0x2c>

  tcp_output(conn->conn_pcb);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f019 fdb0 	bl	801b728 <tcp_output>
  return ERR_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3730      	adds	r7, #48	; 0x30
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	08025dd0 	.word	0x08025dd0
 8001bd8:	08025e28 	.word	0x08025e28
 8001bdc:	08025df8 	.word	0x08025df8
 8001be0:	cccccccd 	.word	0xcccccccd
 8001be4:	08028c8c 	.word	0x08028c8c

08001be8 <lwiperf_tcp_client_sent>:

/** TCP sent callback, try to send more data */
static err_t
lwiperf_tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	80fb      	strh	r3, [r7, #6]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	617b      	str	r3, [r7, #20]
  /* @todo: check 'len' (e.g. to time ACK of all data)? for now, we just send more... */
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d006      	beq.n	8001c12 <lwiperf_tcp_client_sent+0x2a>
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <lwiperf_tcp_client_sent+0x44>)
 8001c06:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8001c0a:	4909      	ldr	r1, [pc, #36]	; (8001c30 <lwiperf_tcp_client_sent+0x48>)
 8001c0c:	4809      	ldr	r0, [pc, #36]	; (8001c34 <lwiperf_tcp_client_sent+0x4c>)
 8001c0e:	f01f f87d 	bl	8020d0c <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  conn->poll_count = 0;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2020 	strb.w	r2, [r3, #32]

  return lwiperf_tcp_client_send_more(conn);
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f7ff ff08 	bl	8001a30 <lwiperf_tcp_client_send_more>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	08025dd0 	.word	0x08025dd0
 8001c30:	08025e38 	.word	0x08025e38
 8001c34:	08025df8 	.word	0x08025df8

08001c38 <lwiperf_tcp_client_connected>:

/** TCP connected callback (active connection), send data now */
static err_t
lwiperf_tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	4613      	mov	r3, r2
 8001c44:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d006      	beq.n	8001c62 <lwiperf_tcp_client_connected+0x2a>
 8001c54:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <lwiperf_tcp_client_connected+0x60>)
 8001c56:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8001c5a:	4910      	ldr	r1, [pc, #64]	; (8001c9c <lwiperf_tcp_client_connected+0x64>)
 8001c5c:	4810      	ldr	r0, [pc, #64]	; (8001ca0 <lwiperf_tcp_client_connected+0x68>)
 8001c5e:	f01f f855 	bl	8020d0c <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (err != ERR_OK) {
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <lwiperf_tcp_client_connected+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8001c6a:	2105      	movs	r1, #5
 8001c6c:	6978      	ldr	r0, [r7, #20]
 8001c6e:	f7ff fe7d 	bl	800196c <lwiperf_tcp_close>
    return ERR_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e00c      	b.n	8001c90 <lwiperf_tcp_client_connected+0x58>
  }
  conn->poll_count = 0;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2020 	strb.w	r2, [r3, #32]
  conn->time_started = sys_now();
 8001c7e:	f00f fa4b 	bl	8011118 <sys_now>
 8001c82:	4602      	mov	r2, r0
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	615a      	str	r2, [r3, #20]
  return lwiperf_tcp_client_send_more(conn);
 8001c88:	6978      	ldr	r0, [r7, #20]
 8001c8a:	f7ff fed1 	bl	8001a30 <lwiperf_tcp_client_send_more>
 8001c8e:	4603      	mov	r3, r0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	08025dd0 	.word	0x08025dd0
 8001c9c:	08025e38 	.word	0x08025e38
 8001ca0:	08025df8 	.word	0x08025df8

08001ca4 <lwiperf_tx_start_impl>:
 * receive test has finished.
 */
static err_t
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
                      void *report_arg, lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **new_conn)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *client_conn;
  struct tcp_pcb *newpcb;
  ip_addr_t remote_addr;

  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d106      	bne.n	8001cc8 <lwiperf_tx_start_impl+0x24>
 8001cba:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <lwiperf_tx_start_impl+0x140>)
 8001cbc:	f240 128b 	movw	r2, #395	; 0x18b
 8001cc0:	4949      	ldr	r1, [pc, #292]	; (8001de8 <lwiperf_tx_start_impl+0x144>)
 8001cc2:	484a      	ldr	r0, [pc, #296]	; (8001dec <lwiperf_tx_start_impl+0x148>)
 8001cc4:	f01f f822 	bl	8020d0c <iprintf>
  LWIP_ASSERT("remote_ip != NULL", settings != NULL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <lwiperf_tx_start_impl+0x38>
 8001cce:	4b45      	ldr	r3, [pc, #276]	; (8001de4 <lwiperf_tx_start_impl+0x140>)
 8001cd0:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8001cd4:	4944      	ldr	r1, [pc, #272]	; (8001de8 <lwiperf_tx_start_impl+0x144>)
 8001cd6:	4845      	ldr	r0, [pc, #276]	; (8001dec <lwiperf_tx_start_impl+0x148>)
 8001cd8:	f01f f818 	bl	8020d0c <iprintf>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8001cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <lwiperf_tx_start_impl+0x4c>
 8001ce2:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <lwiperf_tx_start_impl+0x140>)
 8001ce4:	f240 128d 	movw	r2, #397	; 0x18d
 8001ce8:	4941      	ldr	r1, [pc, #260]	; (8001df0 <lwiperf_tx_start_impl+0x14c>)
 8001cea:	4840      	ldr	r0, [pc, #256]	; (8001dec <lwiperf_tx_start_impl+0x148>)
 8001cec:	f01f f80e 	bl	8020d0c <iprintf>
  *new_conn = NULL;
 8001cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]

  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8001cf6:	2048      	movs	r0, #72	; 0x48
 8001cf8:	f012 ff80 	bl	8014bfc <mem_malloc>
 8001cfc:	61f8      	str	r0, [r7, #28]
  if (client_conn == NULL) {
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <lwiperf_tx_start_impl+0x66>
    return ERR_MEM;
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d08:	e067      	b.n	8001dda <lwiperf_tx_start_impl+0x136>
  }
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f015 ffd6 	bl	8017cbc <tcp_new_ip_type>
 8001d10:	61b8      	str	r0, [r7, #24]
  if (newpcb == NULL) {
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d105      	bne.n	8001d24 <lwiperf_tx_start_impl+0x80>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 8001d18:	69f8      	ldr	r0, [r7, #28]
 8001d1a:	f012 fe09 	bl	8014930 <mem_free>
    return ERR_MEM;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d22:	e05a      	b.n	8001dda <lwiperf_tx_start_impl+0x136>
  }
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 8001d24:	2248      	movs	r2, #72	; 0x48
 8001d26:	2100      	movs	r1, #0
 8001d28:	69f8      	ldr	r0, [r7, #28]
 8001d2a:	f01e f8f5 	bl	801ff18 <memset>
  client_conn->base.tcp = 1;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	2201      	movs	r2, #1
 8001d32:	711a      	strb	r2, [r3, #4]
  client_conn->base.related_master_state = related_master_state;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d38:	609a      	str	r2, [r3, #8]
  client_conn->conn_pcb = newpcb;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	611a      	str	r2, [r3, #16]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8001d40:	f00f f9ea 	bl	8011118 <sys_now>
 8001d44:	4602      	mov	r2, r0
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	615a      	str	r2, [r3, #20]
  client_conn->report_fn = report_fn;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	619a      	str	r2, [r3, #24]
  client_conn->report_arg = report_arg;
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d54:	61da      	str	r2, [r3, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	2204      	movs	r2, #4
 8001d5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  client_conn->bytes_transferred = 0;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	2200      	movs	r2, #0
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	3328      	adds	r3, #40	; 0x28
 8001d68:	2218      	movs	r2, #24
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f01e f8ab 	bl	801fec8 <memcpy>
  client_conn->have_settings_buf = 1;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  tcp_arg(newpcb, client_conn);
 8001d7a:	69f9      	ldr	r1, [r7, #28]
 8001d7c:	69b8      	ldr	r0, [r7, #24]
 8001d7e:	f015 ffab 	bl	8017cd8 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8001d82:	491c      	ldr	r1, [pc, #112]	; (8001df4 <lwiperf_tx_start_impl+0x150>)
 8001d84:	69b8      	ldr	r0, [r7, #24]
 8001d86:	f015 ffdb 	bl	8017d40 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	491a      	ldr	r1, [pc, #104]	; (8001df8 <lwiperf_tx_start_impl+0x154>)
 8001d8e:	69b8      	ldr	r0, [r7, #24]
 8001d90:	f016 f832 	bl	8017df8 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 8001d94:	4919      	ldr	r1, [pc, #100]	; (8001dfc <lwiperf_tx_start_impl+0x158>)
 8001d96:	69b8      	ldr	r0, [r7, #24]
 8001d98:	f015 fff4 	bl	8017d84 <tcp_err>

  ip_addr_copy(remote_addr, *remote_ip);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	613b      	str	r3, [r7, #16]

  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8001da2:	897a      	ldrh	r2, [r7, #10]
 8001da4:	f107 0110 	add.w	r1, r7, #16
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <lwiperf_tx_start_impl+0x15c>)
 8001daa:	69b8      	ldr	r0, [r7, #24]
 8001dac:	f015 f84c 	bl	8016e48 <tcp_connect>
 8001db0:	4603      	mov	r3, r0
 8001db2:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8001db4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <lwiperf_tx_start_impl+0x126>
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	69f8      	ldr	r0, [r7, #28]
 8001dc0:	f7ff fdd4 	bl	800196c <lwiperf_tcp_close>
    return err;
 8001dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dc8:	e007      	b.n	8001dda <lwiperf_tx_start_impl+0x136>
  }
  lwiperf_list_add(&client_conn->base);
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fd11 	bl	80017f4 <lwiperf_list_add>
  *new_conn = client_conn;
 8001dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	08025dd0 	.word	0x08025dd0
 8001de8:	08025e48 	.word	0x08025e48
 8001dec:	08025df8 	.word	0x08025df8
 8001df0:	08025e5c 	.word	0x08025e5c
 8001df4:	08001be9 	.word	0x08001be9
 8001df8:	080020d9 	.word	0x080020d9
 8001dfc:	080020b9 	.word	0x080020b9
 8001e00:	08001c39 	.word	0x08001c39

08001e04 <lwiperf_tx_start_passive>:

static err_t
lwiperf_tx_start_passive(lwiperf_state_tcp_t *conn)
{
 8001e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af04      	add	r7, sp, #16
 8001e0a:	6078      	str	r0, [r7, #4]
  err_t ret;
  lwiperf_state_tcp_t *new_conn = NULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	4618      	mov	r0, r3
 8001e16:	f010 f880 	bl	8011f1a <lwip_htonl>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	81fb      	strh	r3, [r7, #14]

  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	1d18      	adds	r0, r3, #4
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699e      	ldr	r6, [r3, #24]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6892      	ldr	r2, [r2, #8]
 8001e36:	89fc      	ldrh	r4, [r7, #14]
 8001e38:	f107 0108 	add.w	r1, r7, #8
 8001e3c:	9102      	str	r1, [sp, #8]
 8001e3e:	9201      	str	r2, [sp, #4]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	4633      	mov	r3, r6
 8001e44:	462a      	mov	r2, r5
 8001e46:	4621      	mov	r1, r4
 8001e48:	f7ff ff2c 	bl	8001ca4 <lwiperf_tx_start_impl>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	737b      	strb	r3, [r7, #13]
    conn->base.related_master_state, &new_conn);
  if (ret == ERR_OK) {
 8001e50:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10c      	bne.n	8001e72 <lwiperf_tx_start_passive+0x6e>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <lwiperf_tx_start_passive+0x68>
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <lwiperf_tx_start_passive+0x7c>)
 8001e60:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001e64:	4907      	ldr	r1, [pc, #28]	; (8001e84 <lwiperf_tx_start_passive+0x80>)
 8001e66:	4808      	ldr	r0, [pc, #32]	; (8001e88 <lwiperf_tx_start_passive+0x84>)
 8001e68:	f01e ff50 	bl	8020d0c <iprintf>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return ret;
 8001e72:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	08025dd0 	.word	0x08025dd0
 8001e84:	08025e5c 	.word	0x08025e5c
 8001e88:	08025df8 	.word	0x08025df8

08001e8c <lwiperf_tcp_recv>:

/** Receive data on an iperf tcp session */
static err_t
lwiperf_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	70fb      	strb	r3, [r7, #3]
  u8_t tmp;
  u16_t tot_len;
  u32_t packet_idx;
  struct pbuf *q;
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d006      	beq.n	8001eb6 <lwiperf_tcp_recv+0x2a>
 8001ea8:	4b7e      	ldr	r3, [pc, #504]	; (80020a4 <lwiperf_tcp_recv+0x218>)
 8001eaa:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8001eae:	497e      	ldr	r1, [pc, #504]	; (80020a8 <lwiperf_tcp_recv+0x21c>)
 8001eb0:	487e      	ldr	r0, [pc, #504]	; (80020ac <lwiperf_tcp_recv+0x220>)
 8001eb2:	f01e ff2b 	bl	8020d0c <iprintf>
  LWIP_UNUSED_ARG(tpcb);

  if (err != ERR_OK) {
 8001eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <lwiperf_tcp_recv+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8001ebe:	2105      	movs	r1, #5
 8001ec0:	6978      	ldr	r0, [r7, #20]
 8001ec2:	f7ff fd53 	bl	800196c <lwiperf_tcp_close>
    return ERR_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e0e8      	b.n	800209c <lwiperf_tcp_recv+0x210>
  }
  if (p == NULL) {
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d114      	bne.n	8001efa <lwiperf_tcp_recv+0x6e>
    /* connection closed -> test done */
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <lwiperf_tcp_recv+0x62>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <lwiperf_tcp_recv+0x62>
        /* client requested transmission after end of test */
        lwiperf_tx_start_passive(conn);
 8001ee8:	6978      	ldr	r0, [r7, #20]
 8001eea:	f7ff ff8b 	bl	8001e04 <lwiperf_tx_start_passive>
      }
    }
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8001eee:	2100      	movs	r1, #0
 8001ef0:	6978      	ldr	r0, [r7, #20]
 8001ef2:	f7ff fd3b 	bl	800196c <lwiperf_tcp_close>
    return ERR_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e0d0      	b.n	800209c <lwiperf_tcp_recv+0x210>
  }
  tot_len = p->tot_len;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	891b      	ldrh	r3, [r3, #8]
 8001efe:	827b      	strh	r3, [r7, #18]

  conn->poll_count = 0;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2020 	strb.w	r2, [r3, #32]

  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <lwiperf_tcp_recv+0x96>
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	3b18      	subs	r3, #24
 8001f18:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f040 8090 	bne.w	8002042 <lwiperf_tcp_recv+0x1b6>
    /* wait for 24-byte header */
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	891b      	ldrh	r3, [r3, #8]
 8001f26:	2b17      	cmp	r3, #23
 8001f28:	d808      	bhi.n	8001f3c <lwiperf_tcp_recv+0xb0>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8001f2a:	2103      	movs	r1, #3
 8001f2c:	6978      	ldr	r0, [r7, #20]
 8001f2e:	f7ff fd1d 	bl	800196c <lwiperf_tcp_close>
      pbuf_free(p);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f013 fed8 	bl	8015ce8 <pbuf_free>
      return ERR_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e0af      	b.n	800209c <lwiperf_tcp_recv+0x210>
    }
    if (!conn->have_settings_buf) {
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d135      	bne.n	8001fb2 <lwiperf_tcp_recv+0x126>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2218      	movs	r2, #24
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f014 f8b3 	bl	80160bc <pbuf_copy_partial>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b18      	cmp	r3, #24
 8001f5a:	d008      	beq.n	8001f6e <lwiperf_tcp_recv+0xe2>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff fd04 	bl	800196c <lwiperf_tcp_close>
        pbuf_free(p);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f013 febf 	bl	8015ce8 <pbuf_free>
        return ERR_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e096      	b.n	800209c <lwiperf_tcp_recv+0x210>
      }
      conn->have_settings_buf = 1;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d031      	beq.n	8001fe6 <lwiperf_tcp_recv+0x15a>
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d02b      	beq.n	8001fe6 <lwiperf_tcp_recv+0x15a>
          /* client requested parallel transmission test */
          err_t err2 = lwiperf_tx_start_passive(conn);
 8001f8e:	6978      	ldr	r0, [r7, #20]
 8001f90:	f7ff ff38 	bl	8001e04 <lwiperf_tx_start_passive>
 8001f94:	4603      	mov	r3, r0
 8001f96:	747b      	strb	r3, [r7, #17]
          if (err2 != ERR_OK) {
 8001f98:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d022      	beq.n	8001fe6 <lwiperf_tcp_recv+0x15a>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8001fa0:	2104      	movs	r1, #4
 8001fa2:	6978      	ldr	r0, [r7, #20]
 8001fa4:	f7ff fce2 	bl	800196c <lwiperf_tcp_close>
            pbuf_free(p);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f013 fe9d 	bl	8015ce8 <pbuf_free>
            return ERR_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e074      	b.n	800209c <lwiperf_tcp_recv+0x210>
          }
        }
      }
    } else {
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d013      	beq.n	8001fe6 <lwiperf_tcp_recv+0x15a>
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001fc4:	2318      	movs	r3, #24
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f014 f97e 	bl	80162ca <pbuf_memcmp>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <lwiperf_tcp_recv+0x15a>
          lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8001fd4:	2103      	movs	r1, #3
 8001fd6:	6978      	ldr	r0, [r7, #20]
 8001fd8:	f7ff fcc8 	bl	800196c <lwiperf_tcp_close>
          pbuf_free(p);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f013 fe83 	bl	8015ce8 <pbuf_free>
          return ERR_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e05a      	b.n	800209c <lwiperf_tcp_recv+0x210>
        }
      }
    }
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	f103 0218 	add.w	r2, r3, #24
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	2b18      	cmp	r3, #24
 8001ff8:	d80f      	bhi.n	800201a <lwiperf_tcp_recv+0x18e>
      conn->time_started = sys_now();
 8001ffa:	f00f f88d 	bl	8011118 <sys_now>
 8001ffe:	4602      	mov	r2, r0
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	615a      	str	r2, [r3, #20]
      tcp_recved(tpcb, p->tot_len);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	891b      	ldrh	r3, [r3, #8]
 8002008:	4619      	mov	r1, r3
 800200a:	68b8      	ldr	r0, [r7, #8]
 800200c:	f014 fe86 	bl	8016d1c <tcp_recved>
      pbuf_free(p);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f013 fe69 	bl	8015ce8 <pbuf_free>
      return ERR_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	e040      	b.n	800209c <lwiperf_tcp_recv+0x210>
    }
    conn->next_num = 4; /* 24 bytes received... */
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2204      	movs	r2, #4
 800201e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    tmp = pbuf_remove_header(p, 24);
 8002022:	2118      	movs	r1, #24
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f013 fdd9 	bl	8015bdc <pbuf_remove_header>
 800202a:	4603      	mov	r3, r0
 800202c:	743b      	strb	r3, [r7, #16]
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 800202e:	7c3b      	ldrb	r3, [r7, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <lwiperf_tcp_recv+0x1b6>
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <lwiperf_tcp_recv+0x218>)
 8002036:	f240 2211 	movw	r2, #529	; 0x211
 800203a:	491d      	ldr	r1, [pc, #116]	; (80020b0 <lwiperf_tcp_recv+0x224>)
 800203c:	481b      	ldr	r0, [pc, #108]	; (80020ac <lwiperf_tcp_recv+0x220>)
 800203e:	f01e fe65 	bl	8020d0c <iprintf>
    LWIP_UNUSED_ARG(tmp); /* for LWIP_NOASSERT */
  }

  packet_idx = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	e008      	b.n	800205e <lwiperf_tcp_recv+0x1d2>
        pbuf_free(p);
        return ERR_OK;
      }
    }
#endif
    packet_idx += q->len;
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	895b      	ldrh	r3, [r3, #10]
 8002050:	461a      	mov	r2, r3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	4413      	add	r3, r2
 8002056:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f3      	bne.n	800204c <lwiperf_tcp_recv+0x1c0>
  }
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	891b      	ldrh	r3, [r3, #8]
 8002068:	461a      	mov	r2, r3
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	4293      	cmp	r3, r2
 800206e:	d006      	beq.n	800207e <lwiperf_tcp_recv+0x1f2>
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <lwiperf_tcp_recv+0x218>)
 8002072:	f240 222b 	movw	r2, #555	; 0x22b
 8002076:	490f      	ldr	r1, [pc, #60]	; (80020b4 <lwiperf_tcp_recv+0x228>)
 8002078:	480c      	ldr	r0, [pc, #48]	; (80020ac <lwiperf_tcp_recv+0x220>)
 800207a:	f01e fe47 	bl	8020d0c <iprintf>
  conn->bytes_transferred += packet_idx;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	441a      	add	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 800208a:	8a7b      	ldrh	r3, [r7, #18]
 800208c:	4619      	mov	r1, r3
 800208e:	68b8      	ldr	r0, [r7, #8]
 8002090:	f014 fe44 	bl	8016d1c <tcp_recved>
  pbuf_free(p);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f013 fe27 	bl	8015ce8 <pbuf_free>
  return ERR_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3720      	adds	r7, #32
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	08025dd0 	.word	0x08025dd0
 80020a8:	08025e70 	.word	0x08025e70
 80020ac:	08025df8 	.word	0x08025df8
 80020b0:	08025e80 	.word	0x08025e80
 80020b4:	08025e9c 	.word	0x08025e9c

080020b8 <lwiperf_tcp_err>:

/** Error callback, iperf tcp session aborted */
static void
lwiperf_tcp_err(void *arg, err_t err)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 80020c8:	2105      	movs	r1, #5
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f7ff fc4e 	bl	800196c <lwiperf_tcp_close>
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <lwiperf_tcp_poll>:

/** TCP poll callback, try to send more data */
static err_t
lwiperf_tcp_poll(void *arg, struct tcp_pcb *tpcb)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d006      	beq.n	80020fe <lwiperf_tcp_poll+0x26>
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <lwiperf_tcp_poll+0x64>)
 80020f2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80020f6:	4912      	ldr	r1, [pc, #72]	; (8002140 <lwiperf_tcp_poll+0x68>)
 80020f8:	4812      	ldr	r0, [pc, #72]	; (8002144 <lwiperf_tcp_poll+0x6c>)
 80020fa:	f01e fe07 	bl	8020d0c <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002104:	3301      	adds	r3, #1
 8002106:	b2da      	uxtb	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f883 2020 	strb.w	r2, [r3, #32]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002114:	2b09      	cmp	r3, #9
 8002116:	d905      	bls.n	8002124 <lwiperf_tcp_poll+0x4c>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8002118:	2102      	movs	r1, #2
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f7ff fc26 	bl	800196c <lwiperf_tcp_close>
    return ERR_OK; /* lwiperf_tcp_close frees conn */
 8002120:	2300      	movs	r3, #0
 8002122:	e007      	b.n	8002134 <lwiperf_tcp_poll+0x5c>
  }

  if (!conn->base.server) {
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	795b      	ldrb	r3, [r3, #5]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <lwiperf_tcp_poll+0x5a>
    lwiperf_tcp_client_send_more(conn);
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7ff fc7f 	bl	8001a30 <lwiperf_tcp_client_send_more>
  }

  return ERR_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	08025dd0 	.word	0x08025dd0
 8002140:	08025e70 	.word	0x08025e70
 8002144:	08025df8 	.word	0x08025df8

08002148 <lwiperf_tcp_accept>:

/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d105      	bne.n	800216a <lwiperf_tcp_accept+0x22>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <lwiperf_tcp_accept+0x22>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <lwiperf_tcp_accept+0x28>
    return ERR_VAL;
 800216a:	f06f 0305 	mvn.w	r3, #5
 800216e:	e0a3      	b.n	80022b8 <lwiperf_tcp_accept+0x170>
  }

  s = (lwiperf_state_tcp_t *)arg;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid session", s->base.server);
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	795b      	ldrb	r3, [r3, #5]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d106      	bne.n	800218a <lwiperf_tcp_accept+0x42>
 800217c:	4b50      	ldr	r3, [pc, #320]	; (80022c0 <lwiperf_tcp_accept+0x178>)
 800217e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002182:	4950      	ldr	r1, [pc, #320]	; (80022c4 <lwiperf_tcp_accept+0x17c>)
 8002184:	4850      	ldr	r0, [pc, #320]	; (80022c8 <lwiperf_tcp_accept+0x180>)
 8002186:	f01e fdc1 	bl	8020d0c <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <lwiperf_tcp_accept+0x58>
 8002192:	4b4b      	ldr	r3, [pc, #300]	; (80022c0 <lwiperf_tcp_accept+0x178>)
 8002194:	f240 2259 	movw	r2, #601	; 0x259
 8002198:	494c      	ldr	r1, [pc, #304]	; (80022cc <lwiperf_tcp_accept+0x184>)
 800219a:	484b      	ldr	r0, [pc, #300]	; (80022c8 <lwiperf_tcp_accept+0x180>)
 800219c:	f01e fdb6 	bl	8020d0c <iprintf>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <lwiperf_tcp_accept+0x6e>
 80021a8:	4b45      	ldr	r3, [pc, #276]	; (80022c0 <lwiperf_tcp_accept+0x178>)
 80021aa:	f240 225a 	movw	r2, #602	; 0x25a
 80021ae:	4948      	ldr	r1, [pc, #288]	; (80022d0 <lwiperf_tcp_accept+0x188>)
 80021b0:	4845      	ldr	r0, [pc, #276]	; (80022c8 <lwiperf_tcp_accept+0x180>)
 80021b2:	f01e fdab 	bl	8020d0c <iprintf>
  if (s->specific_remote) {
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <lwiperf_tcp_accept+0xa0>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d106      	bne.n	80021d6 <lwiperf_tcp_accept+0x8e>
 80021c8:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <lwiperf_tcp_accept+0x178>)
 80021ca:	f44f 7217 	mov.w	r2, #604	; 0x25c
 80021ce:	4941      	ldr	r1, [pc, #260]	; (80022d4 <lwiperf_tcp_accept+0x18c>)
 80021d0:	483d      	ldr	r0, [pc, #244]	; (80022c8 <lwiperf_tcp_accept+0x180>)
 80021d2:	f01e fd9b 	bl	8020d0c <iprintf>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	429a      	cmp	r2, r3
 80021e0:	d00d      	beq.n	80021fe <lwiperf_tcp_accept+0xb6>
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
 80021e2:	f06f 0305 	mvn.w	r3, #5
 80021e6:	e067      	b.n	80022b8 <lwiperf_tcp_accept+0x170>
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d006      	beq.n	80021fe <lwiperf_tcp_accept+0xb6>
 80021f0:	4b33      	ldr	r3, [pc, #204]	; (80022c0 <lwiperf_tcp_accept+0x178>)
 80021f2:	f240 2262 	movw	r2, #610	; 0x262
 80021f6:	4938      	ldr	r1, [pc, #224]	; (80022d8 <lwiperf_tcp_accept+0x190>)
 80021f8:	4833      	ldr	r0, [pc, #204]	; (80022c8 <lwiperf_tcp_accept+0x180>)
 80021fa:	f01e fd87 	bl	8020d0c <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80021fe:	2048      	movs	r0, #72	; 0x48
 8002200:	f012 fcfc 	bl	8014bfc <mem_malloc>
 8002204:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <lwiperf_tcp_accept+0xca>
    return ERR_MEM;
 800220c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002210:	e052      	b.n	80022b8 <lwiperf_tcp_accept+0x170>
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 8002212:	2248      	movs	r2, #72	; 0x48
 8002214:	2100      	movs	r1, #0
 8002216:	6938      	ldr	r0, [r7, #16]
 8002218:	f01d fe7e 	bl	801ff18 <memset>
  conn->base.tcp = 1;
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2201      	movs	r2, #1
 8002220:	711a      	strb	r2, [r3, #4]
  conn->base.server = 1;
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2201      	movs	r2, #1
 8002226:	715a      	strb	r2, [r3, #5]
  conn->base.related_master_state = &s->base;
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	609a      	str	r2, [r3, #8]
  conn->conn_pcb = newpcb;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	611a      	str	r2, [r3, #16]
  conn->time_started = sys_now();
 8002234:	f00e ff70 	bl	8011118 <sys_now>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	615a      	str	r2, [r3, #20]
  conn->report_fn = s->report_fn;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	619a      	str	r2, [r3, #24]
  conn->report_arg = s->report_arg;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	69da      	ldr	r2, [r3, #28]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	61da      	str	r2, [r3, #28]

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 800224e:	6939      	ldr	r1, [r7, #16]
 8002250:	68b8      	ldr	r0, [r7, #8]
 8002252:	f015 fd41 	bl	8017cd8 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 8002256:	4921      	ldr	r1, [pc, #132]	; (80022dc <lwiperf_tcp_accept+0x194>)
 8002258:	68b8      	ldr	r0, [r7, #8]
 800225a:	f015 fd4f 	bl	8017cfc <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 800225e:	2202      	movs	r2, #2
 8002260:	491f      	ldr	r1, [pc, #124]	; (80022e0 <lwiperf_tcp_accept+0x198>)
 8002262:	68b8      	ldr	r0, [r7, #8]
 8002264:	f015 fdc8 	bl	8017df8 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	491d      	ldr	r1, [pc, #116]	; (80022e4 <lwiperf_tcp_accept+0x19c>)
 800226e:	4618      	mov	r0, r3
 8002270:	f015 fd88 	bl	8017d84 <tcp_err>

  if (s->specific_remote) {
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800227a:	2b00      	cmp	r3, #0
 800227c:	d017      	beq.n	80022ae <lwiperf_tcp_accept+0x166>
    /* this listener belongs to a client, so make the client the master of the newly created connection */
    conn->base.related_master_state = s->base.related_master_state;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	609a      	str	r2, [r3, #8]
    /* if dual mode or (tradeoff mode AND client is done): close the listener */
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <lwiperf_tcp_accept+0x158>
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fb05 	bl	80018a4 <lwiperf_list_find>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d106      	bne.n	80022ae <lwiperf_tcp_accept+0x166>
      /* prevent report when closing: this is expected */
      s->report_fn = NULL;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2200      	movs	r2, #0
 80022a4:	619a      	str	r2, [r3, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 80022a6:	2102      	movs	r1, #2
 80022a8:	6978      	ldr	r0, [r7, #20]
 80022aa:	f7ff fb5f 	bl	800196c <lwiperf_tcp_close>
    }
  }
  lwiperf_list_add(&conn->base);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fa9f 	bl	80017f4 <lwiperf_list_add>
  return ERR_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	08025dd0 	.word	0x08025dd0
 80022c4:	08025eac 	.word	0x08025eac
 80022c8:	08025df8 	.word	0x08025df8
 80022cc:	08025ebc 	.word	0x08025ebc
 80022d0:	08025ed0 	.word	0x08025ed0
 80022d4:	08025ee4 	.word	0x08025ee4
 80022d8:	08025f0c 	.word	0x08025f0c
 80022dc:	08001e8d 	.word	0x08001e8d
 80022e0:	080020d9 	.word	0x080020d9
 80022e4:	080020b9 	.word	0x080020b9

080022e8 <lwiperf_start_tcp_server_default>:
 * @returns a connection handle that can be used to abort the server
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server_default(lwiperf_report_fn report_fn, void *report_arg)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  return lwiperf_start_tcp_server(IP_ADDR_ANY, LWIPERF_TCP_PORT_DEFAULT,
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	f241 3189 	movw	r1, #5001	; 0x1389
 80022fa:	4804      	ldr	r0, [pc, #16]	; (800230c <lwiperf_start_tcp_server_default+0x24>)
 80022fc:	f000 f808 	bl	8002310 <lwiperf_start_tcp_server>
 8002300:	4603      	mov	r3, r0
                                  report_fn, report_arg);
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	08029318 	.word	0x08029318

08002310 <lwiperf_start_tcp_server>:
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server(const ip_addr_t *local_addr, u16_t local_port,
                         lwiperf_report_fn report_fn, void *report_arg)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	460b      	mov	r3, r1
 800231e:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *state = NULL;
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]

  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8002324:	8979      	ldrh	r1, [r7, #10]
 8002326:	f107 0310 	add.w	r3, r7, #16
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	2300      	movs	r3, #0
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 f80d 	bl	8002354 <lwiperf_start_tcp_server_impl>
 800233a:	4603      	mov	r3, r0
 800233c:	75fb      	strb	r3, [r7, #23]
    NULL, &state);
  if (err == ERR_OK) {
 800233e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <lwiperf_start_tcp_server+0x3a>
    return state;
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	e000      	b.n	800234c <lwiperf_start_tcp_server+0x3c>
  }
  return NULL;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <lwiperf_start_tcp_server_impl>:

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
                                           lwiperf_report_fn report_fn, void *report_arg,
                                           lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **state)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	460b      	mov	r3, r1
 8002362:	817b      	strh	r3, [r7, #10]
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("state != NULL", state != NULL);
 8002364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <lwiperf_start_tcp_server_impl+0x24>
 800236a:	4b3a      	ldr	r3, [pc, #232]	; (8002454 <lwiperf_start_tcp_server_impl+0x100>)
 800236c:	f240 22b6 	movw	r2, #694	; 0x2b6
 8002370:	4939      	ldr	r1, [pc, #228]	; (8002458 <lwiperf_start_tcp_server_impl+0x104>)
 8002372:	483a      	ldr	r0, [pc, #232]	; (800245c <lwiperf_start_tcp_server_impl+0x108>)
 8002374:	f01e fcca 	bl	8020d0c <iprintf>

  if (local_addr == NULL) {
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d102      	bne.n	8002384 <lwiperf_start_tcp_server_impl+0x30>
    return ERR_ARG;
 800237e:	f06f 030f 	mvn.w	r3, #15
 8002382:	e063      	b.n	800244c <lwiperf_start_tcp_server_impl+0xf8>
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8002384:	2048      	movs	r0, #72	; 0x48
 8002386:	f012 fc39 	bl	8014bfc <mem_malloc>
 800238a:	61f8      	str	r0, [r7, #28]
  if (s == NULL) {
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <lwiperf_start_tcp_server_impl+0x44>
    return ERR_MEM;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002396:	e059      	b.n	800244c <lwiperf_start_tcp_server_impl+0xf8>
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 8002398:	2248      	movs	r2, #72	; 0x48
 800239a:	2100      	movs	r1, #0
 800239c:	69f8      	ldr	r0, [r7, #28]
 800239e:	f01d fdbb 	bl	801ff18 <memset>
  s->base.tcp = 1;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	2201      	movs	r2, #1
 80023a6:	711a      	strb	r2, [r3, #4]
  s->base.server = 1;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2201      	movs	r2, #1
 80023ac:	715a      	strb	r2, [r3, #5]
  s->base.related_master_state = related_master_state;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023b2:	609a      	str	r2, [r3, #8]
  s->report_fn = report_fn;
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	619a      	str	r2, [r3, #24]
  s->report_arg = report_arg;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	61da      	str	r2, [r3, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 80023c0:	202e      	movs	r0, #46	; 0x2e
 80023c2:	f015 fc7b 	bl	8017cbc <tcp_new_ip_type>
 80023c6:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <lwiperf_start_tcp_server_impl+0x80>
    return ERR_MEM;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023d2:	e03b      	b.n	800244c <lwiperf_start_tcp_server_impl+0xf8>
  }
  err = tcp_bind(pcb, local_addr, local_port);
 80023d4:	897b      	ldrh	r3, [r7, #10]
 80023d6:	461a      	mov	r2, r3
 80023d8:	68f9      	ldr	r1, [r7, #12]
 80023da:	69b8      	ldr	r0, [r7, #24]
 80023dc:	f014 fad0 	bl	8016980 <tcp_bind>
 80023e0:	4603      	mov	r3, r0
 80023e2:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80023e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <lwiperf_start_tcp_server_impl+0x9e>
    return err;
 80023ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023f0:	e02c      	b.n	800244c <lwiperf_start_tcp_server_impl+0xf8>
  }
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 80023f2:	2101      	movs	r1, #1
 80023f4:	69b8      	ldr	r0, [r7, #24]
 80023f6:	f014 fb7b 	bl	8016af0 <tcp_listen_with_backlog>
 80023fa:	4602      	mov	r2, r0
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	60da      	str	r2, [r3, #12]
  if (s->server_pcb == NULL) {
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10b      	bne.n	8002420 <lwiperf_start_tcp_server_impl+0xcc>
    if (pcb != NULL) {
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <lwiperf_start_tcp_server_impl+0xc0>
      tcp_close(pcb);
 800240e:	69b8      	ldr	r0, [r7, #24]
 8002410:	f014 f9c0 	bl	8016794 <tcp_close>
    }
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 8002414:	69f8      	ldr	r0, [r7, #28]
 8002416:	f012 fa8b 	bl	8014930 <mem_free>
    return ERR_MEM;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800241e:	e015      	b.n	800244c <lwiperf_start_tcp_server_impl+0xf8>
  }
  pcb = NULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61bb      	str	r3, [r7, #24]

  tcp_arg(s->server_pcb, s);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	69f9      	ldr	r1, [r7, #28]
 800242a:	4618      	mov	r0, r3
 800242c:	f015 fc54 	bl	8017cd8 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	490a      	ldr	r1, [pc, #40]	; (8002460 <lwiperf_start_tcp_server_impl+0x10c>)
 8002436:	4618      	mov	r0, r3
 8002438:	f015 fcc6 	bl	8017dc8 <tcp_accept>

  lwiperf_list_add(&s->base);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f9d8 	bl	80017f4 <lwiperf_list_add>
  *state = s;
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3720      	adds	r7, #32
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	08025dd0 	.word	0x08025dd0
 8002458:	08025f34 	.word	0x08025f34
 800245c:	08025df8 	.word	0x08025df8
 8002460:	08002149 	.word	0x08002149

08002464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	f5ad 5d1f 	sub.w	sp, sp, #10176	; 0x27c0
 800246a:	b085      	sub	sp, #20
 800246c:	af04      	add	r7, sp, #16
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800246e:	f000 fb75 	bl	8002b5c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002472:	4ba1      	ldr	r3, [pc, #644]	; (80026f8 <main+0x294>)
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d11b      	bne.n	80024b6 <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800247e:	f3bf 8f4f 	dsb	sy
}
 8002482:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002484:	f3bf 8f6f 	isb	sy
}
 8002488:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800248a:	4b9b      	ldr	r3, [pc, #620]	; (80026f8 <main+0x294>)
 800248c:	2200      	movs	r2, #0
 800248e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002492:	f3bf 8f4f 	dsb	sy
}
 8002496:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002498:	f3bf 8f6f 	isb	sy
}
 800249c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800249e:	4b96      	ldr	r3, [pc, #600]	; (80026f8 <main+0x294>)
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	4a95      	ldr	r2, [pc, #596]	; (80026f8 <main+0x294>)
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80024aa:	f3bf 8f4f 	dsb	sy
}
 80024ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024b0:	f3bf 8f6f 	isb	sy
}
 80024b4:	e000      	b.n	80024b8 <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80024b6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80024b8:	4b8f      	ldr	r3, [pc, #572]	; (80026f8 <main+0x294>)
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d159      	bne.n	8002578 <main+0x114>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80024c4:	4b8c      	ldr	r3, [pc, #560]	; (80026f8 <main+0x294>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80024cc:	f3bf 8f4f 	dsb	sy
}
 80024d0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80024d2:	4b89      	ldr	r3, [pc, #548]	; (80026f8 <main+0x294>)
 80024d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024d8:	f242 72a8 	movw	r2, #10152	; 0x27a8
 80024dc:	443a      	add	r2, r7
 80024de:	6013      	str	r3, [r2, #0]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80024e0:	f242 73a8 	movw	r3, #10152	; 0x27a8
 80024e4:	443b      	add	r3, r7
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0b5b      	lsrs	r3, r3, #13
 80024ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80024ee:	f242 72a4 	movw	r2, #10148	; 0x27a4
 80024f2:	443a      	add	r2, r7
 80024f4:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80024f6:	f242 73a8 	movw	r3, #10152	; 0x27a8
 80024fa:	443b      	add	r3, r7
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	08db      	lsrs	r3, r3, #3
 8002500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002504:	f242 72a0 	movw	r2, #10144	; 0x27a0
 8002508:	443a      	add	r2, r7
 800250a:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800250c:	f242 73a4 	movw	r3, #10148	; 0x27a4
 8002510:	443b      	add	r3, r7
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800251a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800251c:	f242 72a0 	movw	r2, #10144	; 0x27a0
 8002520:	443a      	add	r2, r7
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002526:	4974      	ldr	r1, [pc, #464]	; (80026f8 <main+0x294>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800252e:	f242 73a0 	movw	r3, #10144	; 0x27a0
 8002532:	443b      	add	r3, r7
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	1e5a      	subs	r2, r3, #1
 8002538:	f242 71a0 	movw	r1, #10144	; 0x27a0
 800253c:	4439      	add	r1, r7
 800253e:	600a      	str	r2, [r1, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1e3      	bne.n	800250c <main+0xa8>
    } while(sets-- != 0U);
 8002544:	f242 73a4 	movw	r3, #10148	; 0x27a4
 8002548:	443b      	add	r3, r7
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	1e5a      	subs	r2, r3, #1
 800254e:	f242 71a4 	movw	r1, #10148	; 0x27a4
 8002552:	4439      	add	r1, r7
 8002554:	600a      	str	r2, [r1, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1cd      	bne.n	80024f6 <main+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
 800255a:	f3bf 8f4f 	dsb	sy
}
 800255e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002560:	4b65      	ldr	r3, [pc, #404]	; (80026f8 <main+0x294>)
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	4a64      	ldr	r2, [pc, #400]	; (80026f8 <main+0x294>)
 8002566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800256c:	f3bf 8f4f 	dsb	sy
}
 8002570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002572:	f3bf 8f6f 	isb	sy
}
 8002576:	e000      	b.n	800257a <main+0x116>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002578:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800257a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800257e:	f242 72bc 	movw	r2, #10172	; 0x27bc
 8002582:	443a      	add	r2, r7
 8002584:	6013      	str	r3, [r2, #0]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8002586:	bf00      	nop
 8002588:	4b5c      	ldr	r3, [pc, #368]	; (80026fc <main+0x298>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <main+0x146>
 8002594:	f242 73bc 	movw	r3, #10172	; 0x27bc
 8002598:	443b      	add	r3, r7
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	1e5a      	subs	r2, r3, #1
 800259e:	f242 71bc 	movw	r1, #10172	; 0x27bc
 80025a2:	4439      	add	r1, r7
 80025a4:	600a      	str	r2, [r1, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	dcee      	bgt.n	8002588 <main+0x124>
	if ( timeout < 0 )
 80025aa:	f242 73bc 	movw	r3, #10172	; 0x27bc
 80025ae:	443b      	add	r3, r7
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	da01      	bge.n	80025ba <main+0x156>
	{
		Error_Handler();
 80025b6:	f000 fb11 	bl	8002bdc <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ba:	f001 fc3d 	bl	8003e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025be:	f000 fa17 	bl	80029f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80025c2:	f000 fa9b 	bl	8002afc <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80025c6:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <main+0x298>)
 80025c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025cc:	4a4b      	ldr	r2, [pc, #300]	; (80026fc <main+0x298>)
 80025ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025d6:	4b49      	ldr	r3, [pc, #292]	; (80026fc <main+0x298>)
 80025d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025dc:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80025e0:	4b47      	ldr	r3, [pc, #284]	; (8002700 <main+0x29c>)
 80025e2:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 80025e6:	440b      	add	r3, r1
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	4b45      	ldr	r3, [pc, #276]	; (8002700 <main+0x29c>)
 80025ec:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 80025f0:	4413      	add	r3, r2
 80025f2:	681b      	ldr	r3, [r3, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f007 f973 	bl	80098e0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80025fa:	2100      	movs	r1, #0
 80025fc:	2000      	movs	r0, #0
 80025fe:	f007 f989 	bl	8009914 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8002602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002606:	f242 72bc 	movw	r2, #10172	; 0x27bc
 800260a:	443a      	add	r2, r7
 800260c:	6013      	str	r3, [r2, #0]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800260e:	bf00      	nop
 8002610:	4b3a      	ldr	r3, [pc, #232]	; (80026fc <main+0x298>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10a      	bne.n	8002632 <main+0x1ce>
 800261c:	f242 73bc 	movw	r3, #10172	; 0x27bc
 8002620:	443b      	add	r3, r7
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	1e5a      	subs	r2, r3, #1
 8002626:	f242 71bc 	movw	r1, #10172	; 0x27bc
 800262a:	4439      	add	r1, r7
 800262c:	600a      	str	r2, [r1, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	dcee      	bgt.n	8002610 <main+0x1ac>
	if ( timeout < 0 )
 8002632:	f242 73bc 	movw	r3, #10172	; 0x27bc
 8002636:	443b      	add	r3, r7
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	da01      	bge.n	8002642 <main+0x1de>
	{
		Error_Handler();
 800263e:	f000 facd 	bl	8002bdc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002642:	f7fe ff8b 	bl	800155c <MX_GPIO_Init>
  MX_DMA_Init();
 8002646:	f7fe fe55 	bl	80012f4 <MX_DMA_Init>
  MX_ADC1_Init();
 800264a:	f7fe fc2b 	bl	8000ea4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800264e:	f7fe fc9f 	bl	8000f90 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002652:	f7fe fd03 	bl	800105c <MX_ADC3_Init>
  MX_FMC_Init();
 8002656:	f7fe fe6d 	bl	8001334 <MX_FMC_Init>
  MX_SAI1_Init();
 800265a:	f000 fb13 	bl	8002c84 <MX_SAI1_Init>
  MX_SPI2_Init();
 800265e:	f000 fbdd 	bl	8002e1c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002662:	f001 f96b 	bl	800393c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002666:	f000 fddd 	bl	8003224 <MX_TIM1_Init>
  MX_TIM3_Init();
 800266a:	f000 fe6b 	bl	8003344 <MX_TIM3_Init>
  MX_TIM4_Init();
 800266e:	f000 fec3 	bl	80033f8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002672:	f000 ff1b 	bl	80034ac <MX_TIM5_Init>
  MX_TIM8_Init();
 8002676:	f000 ff73 	bl	8003560 <MX_TIM8_Init>
  MX_RNG_Init();
 800267a:	f000 fab5 	bl	8002be8 <MX_RNG_Init>
  MX_CRC_Init();
 800267e:	f7fe fdf5 	bl	800126c <MX_CRC_Init>
  MX_LWIP_Init();
 8002682:	f00e f91d 	bl	80108c0 <MX_LWIP_Init>
  MX_PDM2PCM_Init();
 8002686:	f01a fc0f 	bl	801cea8 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);
 800268a:	2201      	movs	r2, #1
 800268c:	2120      	movs	r1, #32
 800268e:	481d      	ldr	r0, [pc, #116]	; (8002704 <main+0x2a0>)
 8002690:	f007 f8f2 	bl	8009878 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8002694:	2201      	movs	r2, #1
 8002696:	2104      	movs	r1, #4
 8002698:	481a      	ldr	r0, [pc, #104]	; (8002704 <main+0x2a0>)
 800269a:	f007 f8ed 	bl	8009878 <HAL_GPIO_WritePin>

	//  int8_t timeText[] = {'1', '2', ':', '3', '5'};
	//  uint32_t framecount = 0;

	ssd1362_init();
 800269e:	f01b fcb1 	bl	801e004 <ssd1362_init>

	ssd1362_clearBuffer();
 80026a2:	f01b fc4f 	bl	801df44 <ssd1362_clearBuffer>
	ssd1362_drawHLine(0, 5, 256,0xF, 0);
 80026a6:	2300      	movs	r3, #0
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	230f      	movs	r3, #15
 80026ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b0:	2105      	movs	r1, #5
 80026b2:	2000      	movs	r0, #0
 80026b4:	f01b fa8a 	bl	801dbcc <ssd1362_drawHLine>
	ssd1362_drawHLine(0, 40, 256,0xF, 0);
 80026b8:	2300      	movs	r3, #0
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	230f      	movs	r3, #15
 80026be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026c2:	2128      	movs	r1, #40	; 0x28
 80026c4:	2000      	movs	r0, #0
 80026c6:	f01b fa81 	bl	801dbcc <ssd1362_drawHLine>
	ssd1362_drawString(16, 15, (int8_t *)"Hello Spectral Sound Scanner", 0xF, 16);
 80026ca:	2310      	movs	r3, #16
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	230f      	movs	r3, #15
 80026d0:	4a0d      	ldr	r2, [pc, #52]	; (8002708 <main+0x2a4>)
 80026d2:	210f      	movs	r1, #15
 80026d4:	2010      	movs	r0, #16
 80026d6:	f01b fb94 	bl	801de02 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 80026da:	f01b fc61 	bl	801dfa0 <ssd1362_writeFullBuffer>

	cisynth_ifft();  //while(1)
 80026de:	f7fe f9c7 	bl	8000a70 <cisynth_ifft>



	uint32_t aRandom32bit = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f242 7290 	movw	r2, #10128	; 0x2790
 80026e8:	443a      	add	r2, r7
 80026ea:	6013      	str	r3, [r2, #0]
	uint8_t buff[10000];

	for (uint32_t i = 0; i < 10000; i++)
 80026ec:	2300      	movs	r3, #0
 80026ee:	f242 72b8 	movw	r2, #10168	; 0x27b8
 80026f2:	443a      	add	r2, r7
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e02c      	b.n	8002752 <main+0x2ee>
 80026f8:	e000ed00 	.word	0xe000ed00
 80026fc:	58024400 	.word	0x58024400
 8002700:	ffffd8a8 	.word	0xffffd8a8
 8002704:	58021800 	.word	0x58021800
 8002708:	08025f44 	.word	0x08025f44
	{
		if (HAL_RNG_GenerateRandomNumber(&hrng, &aRandom32bit) != HAL_OK)
 800270c:	f242 7390 	movw	r3, #10128	; 0x2790
 8002710:	443b      	add	r3, r7
 8002712:	4619      	mov	r1, r3
 8002714:	48a5      	ldr	r0, [pc, #660]	; (80029ac <main+0x548>)
 8002716:	f00a fb0c 	bl	800cd32 <HAL_RNG_GenerateRandomNumber>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <main+0x2c0>
		{
			/* Random number generation error */
			Error_Handler();
 8002720:	f000 fa5c 	bl	8002bdc <Error_Handler>
		}
		buff[i] = aRandom32bit;
 8002724:	f242 7390 	movw	r3, #10128	; 0x2790
 8002728:	443b      	add	r3, r7
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	b2d9      	uxtb	r1, r3
 800272e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002732:	f242 73b8 	movw	r3, #10168	; 0x27b8
 8002736:	443b      	add	r3, r7
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4413      	add	r3, r2
 800273c:	460a      	mov	r2, r1
 800273e:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 10000; i++)
 8002740:	f242 73b8 	movw	r3, #10168	; 0x27b8
 8002744:	443b      	add	r3, r7
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	f242 72b8 	movw	r2, #10168	; 0x27b8
 800274e:	443a      	add	r2, r7
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	f242 73b8 	movw	r3, #10168	; 0x27b8
 8002756:	443b      	add	r3, r7
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f242 720f 	movw	r2, #9999	; 0x270f
 800275e:	4293      	cmp	r3, r2
 8002760:	d9d4      	bls.n	800270c <main+0x2a8>
	}

	Audio_Player_Play(buff, 10000);
 8002762:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002766:	f242 7110 	movw	r1, #10000	; 0x2710
 800276a:	4618      	mov	r0, r3
 800276c:	f01b f86a 	bl	801d844 <Audio_Player_Play>

	//  HAL_GPIO_WritePin(MEMS_FSYNC_GPIO_Port, MEMS_FSYNC_Pin, GPIO_PIN_RESET);
	icm20602_init();
 8002770:	f01a fdc8 	bl	801d304 <icm20602_init>
	int16_t accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z, tmp;


	const char* message = "Hello UDP message!\n\r";
 8002774:	4b8e      	ldr	r3, [pc, #568]	; (80029b0 <main+0x54c>)
 8002776:	f242 72b4 	movw	r2, #10164	; 0x27b4
 800277a:	443a      	add	r2, r7
 800277c:	6013      	str	r3, [r2, #0]

	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 192, 168, 1, 1);
 800277e:	4b8d      	ldr	r3, [pc, #564]	; (80029b4 <main+0x550>)
 8002780:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002784:	4413      	add	r3, r2
 8002786:	4a8c      	ldr	r2, [pc, #560]	; (80029b8 <main+0x554>)
 8002788:	601a      	str	r2, [r3, #0]

	struct udp_pcb* my_udp = udp_new();
 800278a:	f01a fb45 	bl	801ce18 <udp_new>
 800278e:	f242 73b0 	movw	r3, #10160	; 0x27b0
 8002792:	443b      	add	r3, r7
 8002794:	6018      	str	r0, [r3, #0]
	udp_connect(my_udp, &PC_IPADDR, 55151);
 8002796:	4b87      	ldr	r3, [pc, #540]	; (80029b4 <main+0x550>)
 8002798:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 800279c:	4413      	add	r3, r2
 800279e:	f24d 726f 	movw	r2, #55151	; 0xd76f
 80027a2:	4619      	mov	r1, r3
 80027a4:	f242 73b0 	movw	r3, #10160	; 0x27b0
 80027a8:	443b      	add	r3, r7
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	f01a fac6 	bl	801cd3c <udp_connect>
	struct pbuf* udp_buffer = NULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f242 72ac 	movw	r2, #10156	; 0x27ac
 80027b6:	443a      	add	r2, r7
 80027b8:	6013      	str	r3, [r2, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80027ba:	4b80      	ldr	r3, [pc, #512]	; (80029bc <main+0x558>)
 80027bc:	2200      	movs	r2, #0
 80027be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80027c2:	f3bf 8f4f 	dsb	sy
}
 80027c6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80027c8:	4b7c      	ldr	r3, [pc, #496]	; (80029bc <main+0x558>)
 80027ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ce:	f242 729c 	movw	r2, #10140	; 0x279c
 80027d2:	443a      	add	r2, r7
 80027d4:	6013      	str	r3, [r2, #0]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80027d6:	f242 739c 	movw	r3, #10140	; 0x279c
 80027da:	443b      	add	r3, r7
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0b5b      	lsrs	r3, r3, #13
 80027e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80027e4:	f242 7298 	movw	r2, #10136	; 0x2798
 80027e8:	443a      	add	r2, r7
 80027ea:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80027ec:	f242 739c 	movw	r3, #10140	; 0x279c
 80027f0:	443b      	add	r3, r7
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	08db      	lsrs	r3, r3, #3
 80027f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027fa:	f242 7294 	movw	r2, #10132	; 0x2794
 80027fe:	443a      	add	r2, r7
 8002800:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002802:	f242 7398 	movw	r3, #10136	; 0x2798
 8002806:	443b      	add	r3, r7
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002810:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8002812:	f242 7294 	movw	r2, #10132	; 0x2794
 8002816:	443a      	add	r2, r7
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800281c:	4967      	ldr	r1, [pc, #412]	; (80029bc <main+0x558>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002824:	f242 7394 	movw	r3, #10132	; 0x2794
 8002828:	443b      	add	r3, r7
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	1e5a      	subs	r2, r3, #1
 800282e:	f242 7194 	movw	r1, #10132	; 0x2794
 8002832:	4439      	add	r1, r7
 8002834:	600a      	str	r2, [r1, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e3      	bne.n	8002802 <main+0x39e>
    } while(sets-- != 0U);
 800283a:	f242 7398 	movw	r3, #10136	; 0x2798
 800283e:	443b      	add	r3, r7
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	1e5a      	subs	r2, r3, #1
 8002844:	f242 7198 	movw	r1, #10136	; 0x2798
 8002848:	4439      	add	r1, r7
 800284a:	600a      	str	r2, [r1, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1cd      	bne.n	80027ec <main+0x388>
  __ASM volatile ("dsb 0xF":::"memory");
 8002850:	f3bf 8f4f 	dsb	sy
}
 8002854:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002856:	f3bf 8f6f 	isb	sy
}
 800285a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800285c:	bf00      	nop

	SCB_CleanInvalidateDCache();


	lwiperf_start_tcp_server_default(NULL, NULL); // TCP Perf = iperf -c 192.168.1.1 -i1 -t60 -u -b 1000M UDP Perf = iperf -c 192.168.1.1 -i1 -t60
 800285e:	2100      	movs	r1, #0
 8002860:	2000      	movs	r0, #0
 8002862:	f7ff fd41 	bl	80022e8 <lwiperf_start_tcp_server_default>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		MX_LWIP_Process();
 8002866:	f00e f977 	bl	8010b58 <MX_LWIP_Process>
		//	  ssd1362_writeFullBuffer();
		//	  HAL_Delay(1);

		//	  icm20602_read_accel(&accel_x, &accel_y, &accel_z);
		//	  icm20602_read_gyro(&gyro_x, &gyro_y, &gyro_z);
		icm20602_read_data_raw(&accel_x, &accel_y, &accel_z, &gyro_x, &gyro_y, &gyro_z, &tmp);
 800286a:	4c55      	ldr	r4, [pc, #340]	; (80029c0 <main+0x55c>)
 800286c:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002870:	441c      	add	r4, r3
 8002872:	4a54      	ldr	r2, [pc, #336]	; (80029c4 <main+0x560>)
 8002874:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002878:	441a      	add	r2, r3
 800287a:	4953      	ldr	r1, [pc, #332]	; (80029c8 <main+0x564>)
 800287c:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002880:	4419      	add	r1, r3
 8002882:	4852      	ldr	r0, [pc, #328]	; (80029cc <main+0x568>)
 8002884:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002888:	4418      	add	r0, r3
 800288a:	4b51      	ldr	r3, [pc, #324]	; (80029d0 <main+0x56c>)
 800288c:	f507 5c1f 	add.w	ip, r7, #10176	; 0x27c0
 8002890:	4463      	add	r3, ip
 8002892:	9302      	str	r3, [sp, #8]
 8002894:	4b4f      	ldr	r3, [pc, #316]	; (80029d4 <main+0x570>)
 8002896:	f507 5c1f 	add.w	ip, r7, #10176	; 0x27c0
 800289a:	4463      	add	r3, ip
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	4b4e      	ldr	r3, [pc, #312]	; (80029d8 <main+0x574>)
 80028a0:	f507 5c1f 	add.w	ip, r7, #10176	; 0x27c0
 80028a4:	4463      	add	r3, ip
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	4623      	mov	r3, r4
 80028aa:	f01a fef9 	bl	801d6a0 <icm20602_read_data_raw>

		ssd1362_clearBuffer();
 80028ae:	f01b fb49 	bl	801df44 <ssd1362_clearBuffer>
		char text[100] = {0};
 80028b2:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <main+0x578>)
 80028b4:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 80028b8:	4413      	add	r3, r2
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	3304      	adds	r3, #4
 80028c0:	2260      	movs	r2, #96	; 0x60
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f01d fb27 	bl	801ff18 <memset>
		//	  sprintf(text,"Accel : %.2f  %.2f  %.2f", accel_x, accel_y, accel_z);
		//	  ssd1362_drawString(0, 10, (int8_t *)text, 0xF, 16);
		//	  sprintf(text,"Gyro  : %.2f  %.2f  %.2f", gyro_x, gyro_y, gyro_z);
		//	  ssd1362_drawString(0, 30, (int8_t *)text, 0xF, 16);
		//	  sprintf(text,"temp. : %.2f", tmp);
		sprintf(text,"Accel : %d  %d  %d", accel_x, accel_y, accel_z);
 80028ca:	4b40      	ldr	r3, [pc, #256]	; (80029cc <main+0x568>)
 80028cc:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 80028d0:	4413      	add	r3, r2
 80028d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d6:	461a      	mov	r2, r3
 80028d8:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <main+0x564>)
 80028da:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 80028de:	440b      	add	r3, r1
 80028e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e4:	4619      	mov	r1, r3
 80028e6:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <main+0x560>)
 80028e8:	f507 501f 	add.w	r0, r7, #10176	; 0x27c0
 80028ec:	4403      	add	r3, r0
 80028ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f2:	483a      	ldr	r0, [pc, #232]	; (80029dc <main+0x578>)
 80028f4:	f507 541f 	add.w	r4, r7, #10176	; 0x27c0
 80028f8:	4420      	add	r0, r4
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	460b      	mov	r3, r1
 80028fe:	4938      	ldr	r1, [pc, #224]	; (80029e0 <main+0x57c>)
 8002900:	f01e fae8 	bl	8020ed4 <siprintf>
		ssd1362_drawString(0, 10, (int8_t *)text, 0xF, 16);
 8002904:	4a35      	ldr	r2, [pc, #212]	; (80029dc <main+0x578>)
 8002906:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 800290a:	441a      	add	r2, r3
 800290c:	2310      	movs	r3, #16
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	230f      	movs	r3, #15
 8002912:	210a      	movs	r1, #10
 8002914:	2000      	movs	r0, #0
 8002916:	f01b fa74 	bl	801de02 <ssd1362_drawString>
		sprintf(text,"Gyro  : %d  %d  %d", gyro_x, gyro_y, gyro_z);
 800291a:	4b29      	ldr	r3, [pc, #164]	; (80029c0 <main+0x55c>)
 800291c:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002920:	4413      	add	r3, r2
 8002922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002926:	461a      	mov	r2, r3
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <main+0x574>)
 800292a:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 800292e:	440b      	add	r3, r1
 8002930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002934:	4619      	mov	r1, r3
 8002936:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <main+0x570>)
 8002938:	f507 501f 	add.w	r0, r7, #10176	; 0x27c0
 800293c:	4403      	add	r3, r0
 800293e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002942:	4826      	ldr	r0, [pc, #152]	; (80029dc <main+0x578>)
 8002944:	f507 541f 	add.w	r4, r7, #10176	; 0x27c0
 8002948:	4420      	add	r0, r4
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	460b      	mov	r3, r1
 800294e:	4925      	ldr	r1, [pc, #148]	; (80029e4 <main+0x580>)
 8002950:	f01e fac0 	bl	8020ed4 <siprintf>
		ssd1362_drawString(0, 30, (int8_t *)text, 0xF, 16);
 8002954:	4a21      	ldr	r2, [pc, #132]	; (80029dc <main+0x578>)
 8002956:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 800295a:	441a      	add	r2, r3
 800295c:	2310      	movs	r3, #16
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	230f      	movs	r3, #15
 8002962:	211e      	movs	r1, #30
 8002964:	2000      	movs	r0, #0
 8002966:	f01b fa4c 	bl	801de02 <ssd1362_drawString>
		sprintf(text,"temp. : %d", tmp);
 800296a:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <main+0x56c>)
 800296c:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002970:	4413      	add	r3, r2
 8002972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002976:	461a      	mov	r2, r3
 8002978:	4b18      	ldr	r3, [pc, #96]	; (80029dc <main+0x578>)
 800297a:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 800297e:	440b      	add	r3, r1
 8002980:	4919      	ldr	r1, [pc, #100]	; (80029e8 <main+0x584>)
 8002982:	4618      	mov	r0, r3
 8002984:	f01e faa6 	bl	8020ed4 <siprintf>
		ssd1362_drawString(0, 50, (int8_t *)text, 0xF, 16);
 8002988:	4a14      	ldr	r2, [pc, #80]	; (80029dc <main+0x578>)
 800298a:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 800298e:	441a      	add	r2, r3
 8002990:	2310      	movs	r3, #16
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	230f      	movs	r3, #15
 8002996:	2132      	movs	r1, #50	; 0x32
 8002998:	2000      	movs	r0, #0
 800299a:	f01b fa32 	bl	801de02 <ssd1362_drawString>
		ssd1362_writeFullBuffer();
 800299e:	f01b faff 	bl	801dfa0 <ssd1362_writeFullBuffer>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80029a2:	2140      	movs	r1, #64	; 0x40
 80029a4:	4811      	ldr	r0, [pc, #68]	; (80029ec <main+0x588>)
 80029a6:	f006 ff80 	bl	80098aa <HAL_GPIO_TogglePin>
	{
 80029aa:	e75c      	b.n	8002866 <main+0x402>
 80029ac:	240079b4 	.word	0x240079b4
 80029b0:	08025f64 	.word	0x08025f64
 80029b4:	ffffd8ac 	.word	0xffffd8ac
 80029b8:	0101a8c0 	.word	0x0101a8c0
 80029bc:	e000ed00 	.word	0xe000ed00
 80029c0:	ffffd8b8 	.word	0xffffd8b8
 80029c4:	ffffd8ba 	.word	0xffffd8ba
 80029c8:	ffffd8bc 	.word	0xffffd8bc
 80029cc:	ffffd8be 	.word	0xffffd8be
 80029d0:	ffffd8b2 	.word	0xffffd8b2
 80029d4:	ffffd8b4 	.word	0xffffd8b4
 80029d8:	ffffd8b6 	.word	0xffffd8b6
 80029dc:	ffffd844 	.word	0xffffd844
 80029e0:	08025f7c 	.word	0x08025f7c
 80029e4:	08025f90 	.word	0x08025f90
 80029e8:	08025fa4 	.word	0x08025fa4
 80029ec:	58021c00 	.word	0x58021c00

080029f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b09c      	sub	sp, #112	; 0x70
 80029f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029fa:	224c      	movs	r2, #76	; 0x4c
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f01d fa8a 	bl	801ff18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	2220      	movs	r2, #32
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f01d fa84 	bl	801ff18 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002a10:	2004      	movs	r0, #4
 8002a12:	f006 ffb7 	bl	8009984 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002a16:	2300      	movs	r3, #0
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	4b35      	ldr	r3, [pc, #212]	; (8002af0 <SystemClock_Config+0x100>)
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	4a34      	ldr	r2, [pc, #208]	; (8002af0 <SystemClock_Config+0x100>)
 8002a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a24:	6193      	str	r3, [r2, #24]
 8002a26:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <SystemClock_Config+0x100>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	4b30      	ldr	r3, [pc, #192]	; (8002af4 <SystemClock_Config+0x104>)
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	4a2f      	ldr	r2, [pc, #188]	; (8002af4 <SystemClock_Config+0x104>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <SystemClock_Config+0x104>)
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002a48:	bf00      	nop
 8002a4a:	4b29      	ldr	r3, [pc, #164]	; (8002af0 <SystemClock_Config+0x100>)
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a56:	d1f8      	bne.n	8002a4a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002a58:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <SystemClock_Config+0x108>)
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	f023 0303 	bic.w	r3, r3, #3
 8002a60:	4a25      	ldr	r2, [pc, #148]	; (8002af8 <SystemClock_Config+0x108>)
 8002a62:	f043 0302 	orr.w	r3, r3, #2
 8002a66:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002a68:	2321      	movs	r3, #33	; 0x21
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002a72:	2301      	movs	r3, #1
 8002a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a76:	2302      	movs	r3, #2
 8002a78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002a7e:	2305      	movs	r3, #5
 8002a80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002a82:	23c0      	movs	r3, #192	; 0xc0
 8002a84:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002a86:	2302      	movs	r3, #2
 8002a88:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 8002a8e:	2308      	movs	r3, #8
 8002a90:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002a92:	2308      	movs	r3, #8
 8002a94:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f006 ffc8 	bl	8009a38 <HAL_RCC_OscConfig>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002aae:	f000 f895 	bl	8002bdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab2:	233f      	movs	r3, #63	; 0x3f
 8002ab4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002abe:	2308      	movs	r3, #8
 8002ac0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002ac2:	2340      	movs	r3, #64	; 0x40
 8002ac4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002ac6:	2340      	movs	r3, #64	; 0x40
 8002ac8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ace:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002ad0:	2340      	movs	r3, #64	; 0x40
 8002ad2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	2104      	movs	r1, #4
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f007 fbbd 	bl	800a258 <HAL_RCC_ClockConfig>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002ae4:	f000 f87a 	bl	8002bdc <Error_Handler>
  }
}
 8002ae8:	bf00      	nop
 8002aea:	3770      	adds	r7, #112	; 0x70
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	58024800 	.word	0x58024800
 8002af4:	58000400 	.word	0x58000400
 8002af8:	58024400 	.word	0x58024400

08002afc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b0b0      	sub	sp, #192	; 0xc0
 8002b00:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	22bc      	movs	r2, #188	; 0xbc
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f01d fa05 	bl	801ff18 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SAI1;
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <PeriphCommonClock_Config+0x5c>)
 8002b10:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 6;
 8002b12:	2306      	movs	r3, #6
 8002b14:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 193;
 8002b16:	23c1      	movs	r3, #193	; 0xc1
 8002b18:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 11;
 8002b1a:	230b      	movs	r3, #11
 8002b1c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 11;
 8002b1e:	230b      	movs	r3, #11
 8002b20:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 11;
 8002b22:	230b      	movs	r3, #11
 8002b24:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8002b32:	2301      	movs	r3, #1
 8002b34:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f007 ff16 	bl	800a970 <HAL_RCCEx_PeriphCLKConfig>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8002b4a:	f000 f847 	bl	8002bdc <Error_Handler>
  }
}
 8002b4e:	bf00      	nop
 8002b50:	37c0      	adds	r7, #192	; 0xc0
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	00080100 	.word	0x00080100

08002b5c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002b62:	463b      	mov	r3, r7
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002b6e:	f002 fbfd 	bl	800536c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002b72:	2301      	movs	r3, #1
 8002b74:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8002b7a:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <MPU_Config+0x78>)
 8002b7c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8002b7e:	2307      	movs	r3, #7
 8002b80:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f002 fc1b 	bl	80053dc <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8002baa:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <MPU_Config+0x7c>)
 8002bac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8002bae:	230d      	movs	r3, #13
 8002bb0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002bbe:	463b      	mov	r3, r7
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 fc0b 	bl	80053dc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002bc6:	2004      	movs	r0, #4
 8002bc8:	f002 fbe8 	bl	800539c <HAL_MPU_Enable>

}
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	30040000 	.word	0x30040000
 8002bd8:	30044000 	.word	0x30044000

08002bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002be0:	b672      	cpsid	i
}
 8002be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002be4:	e7fe      	b.n	8002be4 <Error_Handler+0x8>
	...

08002be8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <MX_RNG_Init+0x24>)
 8002bee:	4a08      	ldr	r2, [pc, #32]	; (8002c10 <MX_RNG_Init+0x28>)
 8002bf0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_RNG_Init+0x24>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002bf8:	4804      	ldr	r0, [pc, #16]	; (8002c0c <MX_RNG_Init+0x24>)
 8002bfa:	f00a f83f 	bl	800cc7c <HAL_RNG_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002c04:	f7ff ffea 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	240079b4 	.word	0x240079b4
 8002c10:	48021800 	.word	0x48021800

08002c14 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b0b2      	sub	sp, #200	; 0xc8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c1c:	f107 030c 	add.w	r3, r7, #12
 8002c20:	22bc      	movs	r2, #188	; 0xbc
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f01d f977 	bl	801ff18 <memset>
  if(rngHandle->Instance==RNG)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <HAL_RNG_MspInit+0x68>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d11e      	bne.n	8002c72 <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002c34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c38:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c40:	f107 030c 	add.w	r3, r7, #12
 8002c44:	4618      	mov	r0, r3
 8002c46:	f007 fe93 	bl	800a970 <HAL_RCCEx_PeriphCLKConfig>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002c50:	f7ff ffc4 	bl	8002bdc <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002c54:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_RNG_MspInit+0x6c>)
 8002c56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002c5a:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <HAL_RNG_MspInit+0x6c>)
 8002c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c60:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_RNG_MspInit+0x6c>)
 8002c66:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002c72:	bf00      	nop
 8002c74:	37c8      	adds	r7, #200	; 0xc8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	48021800 	.word	0x48021800
 8002c80:	58024400 	.word	0x58024400

08002c84 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002c88:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <MX_SAI1_Init+0x64>)
 8002c8a:	4a18      	ldr	r2, [pc, #96]	; (8002cec <MX_SAI1_Init+0x68>)
 8002c8c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002c8e:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <MX_SAI1_Init+0x64>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002c94:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <MX_SAI1_Init+0x64>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002c9a:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <MX_SAI1_Init+0x64>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <MX_SAI1_Init+0x64>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <MX_SAI1_Init+0x64>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <MX_SAI1_Init+0x64>)
 8002cae:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002cb2:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <MX_SAI1_Init+0x64>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <MX_SAI1_Init+0x64>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002cc0:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <MX_SAI1_Init+0x64>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <MX_SAI1_Init+0x64>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002ccc:	2302      	movs	r3, #2
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <MX_SAI1_Init+0x64>)
 8002cd4:	f00a f87c 	bl	800cdd0 <HAL_SAI_InitProtocol>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8002cde:	f7ff ff7d 	bl	8002bdc <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	24007a40 	.word	0x24007a40
 8002cec:	40015804 	.word	0x40015804

08002cf0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a40      	ldr	r2, [pc, #256]	; (8002e00 <HAL_SAI_MspInit+0x110>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d179      	bne.n	8002df6 <HAL_SAI_MspInit+0x106>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8002d02:	4b40      	ldr	r3, [pc, #256]	; (8002e04 <HAL_SAI_MspInit+0x114>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10e      	bne.n	8002d28 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002d0a:	4b3f      	ldr	r3, [pc, #252]	; (8002e08 <HAL_SAI_MspInit+0x118>)
 8002d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d10:	4a3d      	ldr	r2, [pc, #244]	; (8002e08 <HAL_SAI_MspInit+0x118>)
 8002d12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_SAI_MspInit+0x118>)
 8002d1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8002d28:	4b36      	ldr	r3, [pc, #216]	; (8002e04 <HAL_SAI_MspInit+0x114>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	4a35      	ldr	r2, [pc, #212]	; (8002e04 <HAL_SAI_MspInit+0x114>)
 8002d30:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_5;
 8002d32:	2334      	movs	r3, #52	; 0x34
 8002d34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d36:	2302      	movs	r3, #2
 8002d38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002d42:	2306      	movs	r3, #6
 8002d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d46:	f107 030c 	add.w	r3, r7, #12
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	482f      	ldr	r0, [pc, #188]	; (8002e0c <HAL_SAI_MspInit+0x11c>)
 8002d4e:	f006 fbe3 	bl	8009518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d52:	2340      	movs	r3, #64	; 0x40
 8002d54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002d62:	2306      	movs	r3, #6
 8002d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d66:	f107 030c 	add.w	r3, r7, #12
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4828      	ldr	r0, [pc, #160]	; (8002e10 <HAL_SAI_MspInit+0x120>)
 8002d6e:	f006 fbd3 	bl	8009518 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8002d72:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002d74:	4a28      	ldr	r2, [pc, #160]	; (8002e18 <HAL_SAI_MspInit+0x128>)
 8002d76:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002d78:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002d7a:	2257      	movs	r2, #87	; 0x57
 8002d7c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d7e:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002d80:	2240      	movs	r2, #64	; 0x40
 8002d82:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d84:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d90:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d92:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d98:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002d9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002da0:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002da2:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002da4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002da8:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8002daa:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002dac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002db0:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002db2:	4b18      	ldr	r3, [pc, #96]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002db4:	2204      	movs	r2, #4
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002db8:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002dba:	2203      	movs	r2, #3
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002dc4:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002dca:	4812      	ldr	r0, [pc, #72]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002dcc:	f002 fc48 	bl	8005660 <HAL_DMA_Init>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_SAI_MspInit+0xea>
    {
      Error_Handler();
 8002dd6:	f7ff ff01 	bl	8002bdc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a0d      	ldr	r2, [pc, #52]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002de2:	4a0c      	ldr	r2, [pc, #48]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002dec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002df0:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <HAL_SAI_MspInit+0x124>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8002df6:	bf00      	nop
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40015804 	.word	0x40015804
 8002e04:	24003a50 	.word	0x24003a50
 8002e08:	58024400 	.word	0x58024400
 8002e0c:	58021000 	.word	0x58021000
 8002e10:	58020c00 	.word	0x58020c00
 8002e14:	240079c8 	.word	0x240079c8
 8002e18:	40020010 	.word	0x40020010

08002e1c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002e20:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e22:	4a28      	ldr	r2, [pc, #160]	; (8002ec4 <MX_SPI2_Init+0xa8>)
 8002e24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e26:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002e2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e2e:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e34:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e36:	2207      	movs	r2, #7
 8002e38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e3a:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e40:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e46:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e50:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002e54:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e5c:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002e68:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002eaa:	4805      	ldr	r0, [pc, #20]	; (8002ec0 <MX_SPI2_Init+0xa4>)
 8002eac:	f00a fd36 	bl	800d91c <HAL_SPI_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8002eb6:	f7ff fe91 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	24007ad8 	.word	0x24007ad8
 8002ec4:	40003800 	.word	0x40003800

08002ec8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b0ba      	sub	sp, #232	; 0xe8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ee0:	f107 0318 	add.w	r3, r7, #24
 8002ee4:	22bc      	movs	r2, #188	; 0xbc
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f01d f815 	bl	801ff18 <memset>
  if(spiHandle->Instance==SPI2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a37      	ldr	r2, [pc, #220]	; (8002fd0 <HAL_SPI_MspInit+0x108>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d166      	bne.n	8002fc6 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002efc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f02:	f107 0318 	add.w	r3, r7, #24
 8002f06:	4618      	mov	r0, r3
 8002f08:	f007 fd32 	bl	800a970 <HAL_RCCEx_PeriphCLKConfig>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002f12:	f7ff fe63 	bl	8002bdc <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f16:	4b2f      	ldr	r3, [pc, #188]	; (8002fd4 <HAL_SPI_MspInit+0x10c>)
 8002f18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f1c:	4a2d      	ldr	r2, [pc, #180]	; (8002fd4 <HAL_SPI_MspInit+0x10c>)
 8002f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f26:	4b2b      	ldr	r3, [pc, #172]	; (8002fd4 <HAL_SPI_MspInit+0x10c>)
 8002f28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f34:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <HAL_SPI_MspInit+0x10c>)
 8002f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f3a:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <HAL_SPI_MspInit+0x10c>)
 8002f3c:	f043 0308 	orr.w	r3, r3, #8
 8002f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f44:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <HAL_SPI_MspInit+0x10c>)
 8002f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f52:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <HAL_SPI_MspInit+0x10c>)
 8002f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f58:	4a1e      	ldr	r2, [pc, #120]	; (8002fd4 <HAL_SPI_MspInit+0x10c>)
 8002f5a:	f043 0302 	orr.w	r3, r3, #2
 8002f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f62:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <HAL_SPI_MspInit+0x10c>)
 8002f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f70:	2308      	movs	r3, #8
 8002f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f82:	2303      	movs	r3, #3
 8002f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f88:	2305      	movs	r3, #5
 8002f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f8e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f92:	4619      	mov	r1, r3
 8002f94:	4810      	ldr	r0, [pc, #64]	; (8002fd8 <HAL_SPI_MspInit+0x110>)
 8002f96:	f006 fabf 	bl	8009518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8002f9a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fb4:	2305      	movs	r3, #5
 8002fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4806      	ldr	r0, [pc, #24]	; (8002fdc <HAL_SPI_MspInit+0x114>)
 8002fc2:	f006 faa9 	bl	8009518 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	37e8      	adds	r7, #232	; 0xe8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40003800 	.word	0x40003800
 8002fd4:	58024400 	.word	0x58024400
 8002fd8:	58020c00 	.word	0x58020c00
 8002fdc:	58020400 	.word	0x58020400

08002fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <HAL_MspInit+0x30>)
 8002fe8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fec:	4a08      	ldr	r2, [pc, #32]	; (8003010 <HAL_MspInit+0x30>)
 8002fee:	f043 0302 	orr.w	r3, r3, #2
 8002ff2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_MspInit+0x30>)
 8002ff8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	58024400 	.word	0x58024400

08003014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003018:	e7fe      	b.n	8003018 <NMI_Handler+0x4>

0800301a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800301a:	b480      	push	{r7}
 800301c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800301e:	e7fe      	b.n	800301e <HardFault_Handler+0x4>

08003020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003024:	e7fe      	b.n	8003024 <MemManage_Handler+0x4>

08003026 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800302a:	e7fe      	b.n	800302a <BusFault_Handler+0x4>

0800302c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003030:	e7fe      	b.n	8003030 <UsageFault_Handler+0x4>

08003032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003060:	f000 ff5c 	bl	8003f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003064:	bf00      	nop
 8003066:	bd80      	pop	{r7, pc}

08003068 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800306c:	4802      	ldr	r0, [pc, #8]	; (8003078 <DMA1_Stream0_IRQHandler+0x10>)
 800306e:	f003 f8bd 	bl	80061ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	240079c8 	.word	0x240079c8

0800307c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003080:	4802      	ldr	r0, [pc, #8]	; (800308c <ETH_IRQHandler+0x10>)
 8003082:	f005 f859 	bl	8008138 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	24007eac 	.word	0x24007eac

08003090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
	return 1;
 8003094:	2301      	movs	r3, #1
}
 8003096:	4618      	mov	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <_kill>:

int _kill(int pid, int sig)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <_kill+0x20>)
 80030ac:	2216      	movs	r2, #22
 80030ae:	601a      	str	r2, [r3, #0]
	return -1;
 80030b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	2400d6c8 	.word	0x2400d6c8

080030c4 <_exit>:

void _exit (int status)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ffe5 	bl	80030a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80030d6:	e7fe      	b.n	80030d6 <_exit+0x12>

080030d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	e00a      	b.n	8003100 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030ea:	f3af 8000 	nop.w
 80030ee:	4601      	mov	r1, r0
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	60ba      	str	r2, [r7, #8]
 80030f6:	b2ca      	uxtb	r2, r1
 80030f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	3301      	adds	r3, #1
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	429a      	cmp	r2, r3
 8003106:	dbf0      	blt.n	80030ea <_read+0x12>
	}

return len;
 8003108:	687b      	ldr	r3, [r7, #4]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	e009      	b.n	8003138 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	60ba      	str	r2, [r7, #8]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	3301      	adds	r3, #1
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	429a      	cmp	r2, r3
 800313e:	dbf1      	blt.n	8003124 <_write+0x12>
	}
	return len;
 8003140:	687b      	ldr	r3, [r7, #4]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <_close>:

int _close(int file)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
	return -1;
 8003152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003172:	605a      	str	r2, [r3, #4]
	return 0;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <_isatty>:

int _isatty(int file)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
	return 1;
 800318a:	2301      	movs	r3, #1
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
	return 0;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031bc:	4a14      	ldr	r2, [pc, #80]	; (8003210 <_sbrk+0x5c>)
 80031be:	4b15      	ldr	r3, [pc, #84]	; (8003214 <_sbrk+0x60>)
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031c8:	4b13      	ldr	r3, [pc, #76]	; (8003218 <_sbrk+0x64>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d102      	bne.n	80031d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <_sbrk+0x64>)
 80031d2:	4a12      	ldr	r2, [pc, #72]	; (800321c <_sbrk+0x68>)
 80031d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <_sbrk+0x64>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4413      	add	r3, r2
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d205      	bcs.n	80031f0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80031e4:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <_sbrk+0x6c>)
 80031e6:	220c      	movs	r2, #12
 80031e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031ee:	e009      	b.n	8003204 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <_sbrk+0x64>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <_sbrk+0x64>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	4a06      	ldr	r2, [pc, #24]	; (8003218 <_sbrk+0x64>)
 8003200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003202:	68fb      	ldr	r3, [r7, #12]
}
 8003204:	4618      	mov	r0, r3
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	24080000 	.word	0x24080000
 8003214:	00000400 	.word	0x00000400
 8003218:	24003a54 	.word	0x24003a54
 800321c:	2400d6d8 	.word	0x2400d6d8
 8003220:	2400d6c8 	.word	0x2400d6c8

08003224 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b096      	sub	sp, #88	; 0x58
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800322a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	609a      	str	r2, [r3, #8]
 8003242:	60da      	str	r2, [r3, #12]
 8003244:	611a      	str	r2, [r3, #16]
 8003246:	615a      	str	r2, [r3, #20]
 8003248:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800324a:	1d3b      	adds	r3, r7, #4
 800324c:	222c      	movs	r2, #44	; 0x2c
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f01c fe61 	bl	801ff18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003256:	4b39      	ldr	r3, [pc, #228]	; (800333c <MX_TIM1_Init+0x118>)
 8003258:	4a39      	ldr	r2, [pc, #228]	; (8003340 <MX_TIM1_Init+0x11c>)
 800325a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800325c:	4b37      	ldr	r3, [pc, #220]	; (800333c <MX_TIM1_Init+0x118>)
 800325e:	2200      	movs	r2, #0
 8003260:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003262:	4b36      	ldr	r3, [pc, #216]	; (800333c <MX_TIM1_Init+0x118>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003268:	4b34      	ldr	r3, [pc, #208]	; (800333c <MX_TIM1_Init+0x118>)
 800326a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800326e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003270:	4b32      	ldr	r3, [pc, #200]	; (800333c <MX_TIM1_Init+0x118>)
 8003272:	2200      	movs	r2, #0
 8003274:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003276:	4b31      	ldr	r3, [pc, #196]	; (800333c <MX_TIM1_Init+0x118>)
 8003278:	2200      	movs	r2, #0
 800327a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800327c:	4b2f      	ldr	r3, [pc, #188]	; (800333c <MX_TIM1_Init+0x118>)
 800327e:	2200      	movs	r2, #0
 8003280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003282:	482e      	ldr	r0, [pc, #184]	; (800333c <MX_TIM1_Init+0x118>)
 8003284:	f00b fca8 	bl	800ebd8 <HAL_TIM_OC_Init>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800328e:	f7ff fca5 	bl	8002bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800329a:	2300      	movs	r3, #0
 800329c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800329e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032a2:	4619      	mov	r1, r3
 80032a4:	4825      	ldr	r0, [pc, #148]	; (800333c <MX_TIM1_Init+0x118>)
 80032a6:	f00c f8cd 	bl	800f444 <HAL_TIMEx_MasterConfigSynchronization>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80032b0:	f7ff fc94 	bl	8002bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80032b4:	2300      	movs	r3, #0
 80032b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032bc:	2300      	movs	r3, #0
 80032be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80032c0:	2300      	movs	r3, #0
 80032c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80032c8:	2300      	movs	r3, #0
 80032ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032cc:	2300      	movs	r3, #0
 80032ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032d4:	2204      	movs	r2, #4
 80032d6:	4619      	mov	r1, r3
 80032d8:	4818      	ldr	r0, [pc, #96]	; (800333c <MX_TIM1_Init+0x118>)
 80032da:	f00b fcd5 	bl	800ec88 <HAL_TIM_OC_ConfigChannel>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80032e4:	f7ff fc7a 	bl	8002bdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003300:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003306:	2300      	movs	r3, #0
 8003308:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800330a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003314:	2300      	movs	r3, #0
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003318:	1d3b      	adds	r3, r7, #4
 800331a:	4619      	mov	r1, r3
 800331c:	4807      	ldr	r0, [pc, #28]	; (800333c <MX_TIM1_Init+0x118>)
 800331e:	f00c f919 	bl	800f554 <HAL_TIMEx_ConfigBreakDeadTime>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8003328:	f7ff fc58 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800332c:	4803      	ldr	r0, [pc, #12]	; (800333c <MX_TIM1_Init+0x118>)
 800332e:	f000 fa25 	bl	800377c <HAL_TIM_MspPostInit>

}
 8003332:	bf00      	nop
 8003334:	3758      	adds	r7, #88	; 0x58
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	24007c90 	.word	0x24007c90
 8003340:	40010000 	.word	0x40010000

08003344 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08a      	sub	sp, #40	; 0x28
 8003348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800334a:	f107 031c 	add.w	r3, r7, #28
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003356:	463b      	mov	r3, r7
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	611a      	str	r2, [r3, #16]
 8003364:	615a      	str	r2, [r3, #20]
 8003366:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003368:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <MX_TIM3_Init+0xac>)
 800336a:	4a22      	ldr	r2, [pc, #136]	; (80033f4 <MX_TIM3_Init+0xb0>)
 800336c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800336e:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <MX_TIM3_Init+0xac>)
 8003370:	2200      	movs	r2, #0
 8003372:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003374:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <MX_TIM3_Init+0xac>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800337a:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <MX_TIM3_Init+0xac>)
 800337c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003380:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003382:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <MX_TIM3_Init+0xac>)
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003388:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <MX_TIM3_Init+0xac>)
 800338a:	2200      	movs	r2, #0
 800338c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800338e:	4818      	ldr	r0, [pc, #96]	; (80033f0 <MX_TIM3_Init+0xac>)
 8003390:	f00b fc22 	bl	800ebd8 <HAL_TIM_OC_Init>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800339a:	f7ff fc1f 	bl	8002bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033a6:	f107 031c 	add.w	r3, r7, #28
 80033aa:	4619      	mov	r1, r3
 80033ac:	4810      	ldr	r0, [pc, #64]	; (80033f0 <MX_TIM3_Init+0xac>)
 80033ae:	f00c f849 	bl	800f444 <HAL_TIMEx_MasterConfigSynchronization>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80033b8:	f7ff fc10 	bl	8002bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80033bc:	2300      	movs	r3, #0
 80033be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033cc:	463b      	mov	r3, r7
 80033ce:	2200      	movs	r2, #0
 80033d0:	4619      	mov	r1, r3
 80033d2:	4807      	ldr	r0, [pc, #28]	; (80033f0 <MX_TIM3_Init+0xac>)
 80033d4:	f00b fc58 	bl	800ec88 <HAL_TIM_OC_ConfigChannel>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80033de:	f7ff fbfd 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80033e2:	4803      	ldr	r0, [pc, #12]	; (80033f0 <MX_TIM3_Init+0xac>)
 80033e4:	f000 f9ca 	bl	800377c <HAL_TIM_MspPostInit>

}
 80033e8:	bf00      	nop
 80033ea:	3728      	adds	r7, #40	; 0x28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	24007c44 	.word	0x24007c44
 80033f4:	40000400 	.word	0x40000400

080033f8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033fe:	f107 031c 	add.w	r3, r7, #28
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800340a:	463b      	mov	r3, r7
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
 8003418:	615a      	str	r2, [r3, #20]
 800341a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800341c:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <MX_TIM4_Init+0xac>)
 800341e:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <MX_TIM4_Init+0xb0>)
 8003420:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003422:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <MX_TIM4_Init+0xac>)
 8003424:	2200      	movs	r2, #0
 8003426:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003428:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <MX_TIM4_Init+0xac>)
 800342a:	2200      	movs	r2, #0
 800342c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800342e:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <MX_TIM4_Init+0xac>)
 8003430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003434:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003436:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <MX_TIM4_Init+0xac>)
 8003438:	2200      	movs	r2, #0
 800343a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <MX_TIM4_Init+0xac>)
 800343e:	2200      	movs	r2, #0
 8003440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003442:	4818      	ldr	r0, [pc, #96]	; (80034a4 <MX_TIM4_Init+0xac>)
 8003444:	f00b fbc8 	bl	800ebd8 <HAL_TIM_OC_Init>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800344e:	f7ff fbc5 	bl	8002bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003456:	2300      	movs	r3, #0
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800345a:	f107 031c 	add.w	r3, r7, #28
 800345e:	4619      	mov	r1, r3
 8003460:	4810      	ldr	r0, [pc, #64]	; (80034a4 <MX_TIM4_Init+0xac>)
 8003462:	f00b ffef 	bl	800f444 <HAL_TIMEx_MasterConfigSynchronization>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800346c:	f7ff fbb6 	bl	8002bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003470:	2300      	movs	r3, #0
 8003472:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003480:	463b      	mov	r3, r7
 8003482:	2204      	movs	r2, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4807      	ldr	r0, [pc, #28]	; (80034a4 <MX_TIM4_Init+0xac>)
 8003488:	f00b fbfe 	bl	800ec88 <HAL_TIM_OC_ConfigChannel>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8003492:	f7ff fba3 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003496:	4803      	ldr	r0, [pc, #12]	; (80034a4 <MX_TIM4_Init+0xac>)
 8003498:	f000 f970 	bl	800377c <HAL_TIM_MspPostInit>

}
 800349c:	bf00      	nop
 800349e:	3728      	adds	r7, #40	; 0x28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	24007bac 	.word	0x24007bac
 80034a8:	40000800 	.word	0x40000800

080034ac <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	; 0x28
 80034b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034b2:	f107 031c 	add.w	r3, r7, #28
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034be:	463b      	mov	r3, r7
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	611a      	str	r2, [r3, #16]
 80034cc:	615a      	str	r2, [r3, #20]
 80034ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80034d0:	4b21      	ldr	r3, [pc, #132]	; (8003558 <MX_TIM5_Init+0xac>)
 80034d2:	4a22      	ldr	r2, [pc, #136]	; (800355c <MX_TIM5_Init+0xb0>)
 80034d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <MX_TIM5_Init+0xac>)
 80034d8:	2200      	movs	r2, #0
 80034da:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034dc:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <MX_TIM5_Init+0xac>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80034e2:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <MX_TIM5_Init+0xac>)
 80034e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034e8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ea:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <MX_TIM5_Init+0xac>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <MX_TIM5_Init+0xac>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80034f6:	4818      	ldr	r0, [pc, #96]	; (8003558 <MX_TIM5_Init+0xac>)
 80034f8:	f00b fb6e 	bl	800ebd8 <HAL_TIM_OC_Init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8003502:	f7ff fb6b 	bl	8002bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800350e:	f107 031c 	add.w	r3, r7, #28
 8003512:	4619      	mov	r1, r3
 8003514:	4810      	ldr	r0, [pc, #64]	; (8003558 <MX_TIM5_Init+0xac>)
 8003516:	f00b ff95 	bl	800f444 <HAL_TIMEx_MasterConfigSynchronization>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8003520:	f7ff fb5c 	bl	8002bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003524:	2300      	movs	r3, #0
 8003526:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800352c:	2300      	movs	r3, #0
 800352e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003530:	2300      	movs	r3, #0
 8003532:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003534:	463b      	mov	r3, r7
 8003536:	2208      	movs	r2, #8
 8003538:	4619      	mov	r1, r3
 800353a:	4807      	ldr	r0, [pc, #28]	; (8003558 <MX_TIM5_Init+0xac>)
 800353c:	f00b fba4 	bl	800ec88 <HAL_TIM_OC_ConfigChannel>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8003546:	f7ff fb49 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800354a:	4803      	ldr	r0, [pc, #12]	; (8003558 <MX_TIM5_Init+0xac>)
 800354c:	f000 f916 	bl	800377c <HAL_TIM_MspPostInit>

}
 8003550:	bf00      	nop
 8003552:	3728      	adds	r7, #40	; 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	24007bf8 	.word	0x24007bf8
 800355c:	40000c00 	.word	0x40000c00

08003560 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b096      	sub	sp, #88	; 0x58
 8003564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003566:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	605a      	str	r2, [r3, #4]
 8003570:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003572:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	605a      	str	r2, [r3, #4]
 800357c:	609a      	str	r2, [r3, #8]
 800357e:	60da      	str	r2, [r3, #12]
 8003580:	611a      	str	r2, [r3, #16]
 8003582:	615a      	str	r2, [r3, #20]
 8003584:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003586:	1d3b      	adds	r3, r7, #4
 8003588:	222c      	movs	r2, #44	; 0x2c
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f01c fcc3 	bl	801ff18 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003592:	4b39      	ldr	r3, [pc, #228]	; (8003678 <MX_TIM8_Init+0x118>)
 8003594:	4a39      	ldr	r2, [pc, #228]	; (800367c <MX_TIM8_Init+0x11c>)
 8003596:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003598:	4b37      	ldr	r3, [pc, #220]	; (8003678 <MX_TIM8_Init+0x118>)
 800359a:	2200      	movs	r2, #0
 800359c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800359e:	4b36      	ldr	r3, [pc, #216]	; (8003678 <MX_TIM8_Init+0x118>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80035a4:	4b34      	ldr	r3, [pc, #208]	; (8003678 <MX_TIM8_Init+0x118>)
 80035a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ac:	4b32      	ldr	r3, [pc, #200]	; (8003678 <MX_TIM8_Init+0x118>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80035b2:	4b31      	ldr	r3, [pc, #196]	; (8003678 <MX_TIM8_Init+0x118>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035b8:	4b2f      	ldr	r3, [pc, #188]	; (8003678 <MX_TIM8_Init+0x118>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80035be:	482e      	ldr	r0, [pc, #184]	; (8003678 <MX_TIM8_Init+0x118>)
 80035c0:	f00b fb0a 	bl	800ebd8 <HAL_TIM_OC_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80035ca:	f7ff fb07 	bl	8002bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80035da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035de:	4619      	mov	r1, r3
 80035e0:	4825      	ldr	r0, [pc, #148]	; (8003678 <MX_TIM8_Init+0x118>)
 80035e2:	f00b ff2f 	bl	800f444 <HAL_TIMEx_MasterConfigSynchronization>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80035ec:	f7ff faf6 	bl	8002bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80035f0:	2300      	movs	r3, #0
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035f8:	2300      	movs	r3, #0
 80035fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035fc:	2300      	movs	r3, #0
 80035fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003600:	2300      	movs	r3, #0
 8003602:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003604:	2300      	movs	r3, #0
 8003606:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003608:	2300      	movs	r3, #0
 800360a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800360c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003610:	2208      	movs	r2, #8
 8003612:	4619      	mov	r1, r3
 8003614:	4818      	ldr	r0, [pc, #96]	; (8003678 <MX_TIM8_Init+0x118>)
 8003616:	f00b fb37 	bl	800ec88 <HAL_TIM_OC_ConfigChannel>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003620:	f7ff fadc 	bl	8002bdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003624:	2300      	movs	r3, #0
 8003626:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003628:	2300      	movs	r3, #0
 800362a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800363c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003642:	2300      	movs	r3, #0
 8003644:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003650:	2300      	movs	r3, #0
 8003652:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003654:	1d3b      	adds	r3, r7, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4807      	ldr	r0, [pc, #28]	; (8003678 <MX_TIM8_Init+0x118>)
 800365a:	f00b ff7b 	bl	800f554 <HAL_TIMEx_ConfigBreakDeadTime>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8003664:	f7ff faba 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003668:	4803      	ldr	r0, [pc, #12]	; (8003678 <MX_TIM8_Init+0x118>)
 800366a:	f000 f887 	bl	800377c <HAL_TIM_MspPostInit>

}
 800366e:	bf00      	nop
 8003670:	3758      	adds	r7, #88	; 0x58
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	24007b60 	.word	0x24007b60
 800367c:	40010400 	.word	0x40010400

08003680 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8003680:	b480      	push	{r7}
 8003682:	b089      	sub	sp, #36	; 0x24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a35      	ldr	r2, [pc, #212]	; (8003764 <HAL_TIM_OC_MspInit+0xe4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10f      	bne.n	80036b2 <HAL_TIM_OC_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003692:	4b35      	ldr	r3, [pc, #212]	; (8003768 <HAL_TIM_OC_MspInit+0xe8>)
 8003694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003698:	4a33      	ldr	r2, [pc, #204]	; (8003768 <HAL_TIM_OC_MspInit+0xe8>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036a2:	4b31      	ldr	r3, [pc, #196]	; (8003768 <HAL_TIM_OC_MspInit+0xe8>)
 80036a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80036b0:	e052      	b.n	8003758 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM3)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a2d      	ldr	r2, [pc, #180]	; (800376c <HAL_TIM_OC_MspInit+0xec>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d10f      	bne.n	80036dc <HAL_TIM_OC_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036bc:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <HAL_TIM_OC_MspInit+0xe8>)
 80036be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036c2:	4a29      	ldr	r2, [pc, #164]	; (8003768 <HAL_TIM_OC_MspInit+0xe8>)
 80036c4:	f043 0302 	orr.w	r3, r3, #2
 80036c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036cc:	4b26      	ldr	r3, [pc, #152]	; (8003768 <HAL_TIM_OC_MspInit+0xe8>)
 80036ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	69bb      	ldr	r3, [r7, #24]
}
 80036da:	e03d      	b.n	8003758 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM4)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a23      	ldr	r2, [pc, #140]	; (8003770 <HAL_TIM_OC_MspInit+0xf0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d10f      	bne.n	8003706 <HAL_TIM_OC_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036e6:	4b20      	ldr	r3, [pc, #128]	; (8003768 <HAL_TIM_OC_MspInit+0xe8>)
 80036e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036ec:	4a1e      	ldr	r2, [pc, #120]	; (8003768 <HAL_TIM_OC_MspInit+0xe8>)
 80036ee:	f043 0304 	orr.w	r3, r3, #4
 80036f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036f6:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <HAL_TIM_OC_MspInit+0xe8>)
 80036f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	697b      	ldr	r3, [r7, #20]
}
 8003704:	e028      	b.n	8003758 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM5)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1a      	ldr	r2, [pc, #104]	; (8003774 <HAL_TIM_OC_MspInit+0xf4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d10f      	bne.n	8003730 <HAL_TIM_OC_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003710:	4b15      	ldr	r3, [pc, #84]	; (8003768 <HAL_TIM_OC_MspInit+0xe8>)
 8003712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003716:	4a14      	ldr	r2, [pc, #80]	; (8003768 <HAL_TIM_OC_MspInit+0xe8>)
 8003718:	f043 0308 	orr.w	r3, r3, #8
 800371c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <HAL_TIM_OC_MspInit+0xe8>)
 8003722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	693b      	ldr	r3, [r7, #16]
}
 800372e:	e013      	b.n	8003758 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM8)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a10      	ldr	r2, [pc, #64]	; (8003778 <HAL_TIM_OC_MspInit+0xf8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d10e      	bne.n	8003758 <HAL_TIM_OC_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_TIM_OC_MspInit+0xe8>)
 800373c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003740:	4a09      	ldr	r2, [pc, #36]	; (8003768 <HAL_TIM_OC_MspInit+0xe8>)
 8003742:	f043 0302 	orr.w	r3, r3, #2
 8003746:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800374a:	4b07      	ldr	r3, [pc, #28]	; (8003768 <HAL_TIM_OC_MspInit+0xe8>)
 800374c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
}
 8003758:	bf00      	nop
 800375a:	3724      	adds	r7, #36	; 0x24
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	40010000 	.word	0x40010000
 8003768:	58024400 	.word	0x58024400
 800376c:	40000400 	.word	0x40000400
 8003770:	40000800 	.word	0x40000800
 8003774:	40000c00 	.word	0x40000c00
 8003778:	40010400 	.word	0x40010400

0800377c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08c      	sub	sp, #48	; 0x30
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003784:	f107 031c 	add.w	r3, r7, #28
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a5e      	ldr	r2, [pc, #376]	; (8003914 <HAL_TIM_MspPostInit+0x198>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d120      	bne.n	80037e0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800379e:	4b5e      	ldr	r3, [pc, #376]	; (8003918 <HAL_TIM_MspPostInit+0x19c>)
 80037a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037a4:	4a5c      	ldr	r2, [pc, #368]	; (8003918 <HAL_TIM_MspPostInit+0x19c>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037ae:	4b5a      	ldr	r3, [pc, #360]	; (8003918 <HAL_TIM_MspPostInit+0x19c>)
 80037b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CIS_CP_Pin;
 80037bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c2:	2302      	movs	r3, #2
 80037c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ca:	2300      	movs	r3, #0
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037ce:	2301      	movs	r3, #1
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_CP_GPIO_Port, &GPIO_InitStruct);
 80037d2:	f107 031c 	add.w	r3, r7, #28
 80037d6:	4619      	mov	r1, r3
 80037d8:	4850      	ldr	r0, [pc, #320]	; (800391c <HAL_TIM_MspPostInit+0x1a0>)
 80037da:	f005 fe9d 	bl	8009518 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80037de:	e095      	b.n	800390c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM3)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a4e      	ldr	r2, [pc, #312]	; (8003920 <HAL_TIM_MspPostInit+0x1a4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d11f      	bne.n	800382a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ea:	4b4b      	ldr	r3, [pc, #300]	; (8003918 <HAL_TIM_MspPostInit+0x19c>)
 80037ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037f0:	4a49      	ldr	r2, [pc, #292]	; (8003918 <HAL_TIM_MspPostInit+0x19c>)
 80037f2:	f043 0304 	orr.w	r3, r3, #4
 80037f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037fa:	4b47      	ldr	r3, [pc, #284]	; (8003918 <HAL_TIM_MspPostInit+0x19c>)
 80037fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = CIS_VLED_R_Pin;
 8003808:	2340      	movs	r3, #64	; 0x40
 800380a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380c:	2302      	movs	r3, #2
 800380e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003810:	2300      	movs	r3, #0
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003814:	2300      	movs	r3, #0
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003818:	2302      	movs	r3, #2
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_R_GPIO_Port, &GPIO_InitStruct);
 800381c:	f107 031c 	add.w	r3, r7, #28
 8003820:	4619      	mov	r1, r3
 8003822:	4840      	ldr	r0, [pc, #256]	; (8003924 <HAL_TIM_MspPostInit+0x1a8>)
 8003824:	f005 fe78 	bl	8009518 <HAL_GPIO_Init>
}
 8003828:	e070      	b.n	800390c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM4)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a3e      	ldr	r2, [pc, #248]	; (8003928 <HAL_TIM_MspPostInit+0x1ac>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d120      	bne.n	8003876 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003834:	4b38      	ldr	r3, [pc, #224]	; (8003918 <HAL_TIM_MspPostInit+0x19c>)
 8003836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800383a:	4a37      	ldr	r2, [pc, #220]	; (8003918 <HAL_TIM_MspPostInit+0x19c>)
 800383c:	f043 0308 	orr.w	r3, r3, #8
 8003840:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003844:	4b34      	ldr	r3, [pc, #208]	; (8003918 <HAL_TIM_MspPostInit+0x19c>)
 8003846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CIS_VLED_G_Pin;
 8003852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003858:	2302      	movs	r3, #2
 800385a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385c:	2300      	movs	r3, #0
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003860:	2300      	movs	r3, #0
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003864:	2302      	movs	r3, #2
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_G_GPIO_Port, &GPIO_InitStruct);
 8003868:	f107 031c 	add.w	r3, r7, #28
 800386c:	4619      	mov	r1, r3
 800386e:	482f      	ldr	r0, [pc, #188]	; (800392c <HAL_TIM_MspPostInit+0x1b0>)
 8003870:	f005 fe52 	bl	8009518 <HAL_GPIO_Init>
}
 8003874:	e04a      	b.n	800390c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM5)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a2d      	ldr	r2, [pc, #180]	; (8003930 <HAL_TIM_MspPostInit+0x1b4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d120      	bne.n	80038c2 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003880:	4b25      	ldr	r3, [pc, #148]	; (8003918 <HAL_TIM_MspPostInit+0x19c>)
 8003882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003886:	4a24      	ldr	r2, [pc, #144]	; (8003918 <HAL_TIM_MspPostInit+0x19c>)
 8003888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003890:	4b21      	ldr	r3, [pc, #132]	; (8003918 <HAL_TIM_MspPostInit+0x19c>)
 8003892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CIS_VLED_B_Pin;
 800389e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a4:	2302      	movs	r3, #2
 80038a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	2300      	movs	r3, #0
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80038b0:	2302      	movs	r3, #2
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_B_GPIO_Port, &GPIO_InitStruct);
 80038b4:	f107 031c 	add.w	r3, r7, #28
 80038b8:	4619      	mov	r1, r3
 80038ba:	481e      	ldr	r0, [pc, #120]	; (8003934 <HAL_TIM_MspPostInit+0x1b8>)
 80038bc:	f005 fe2c 	bl	8009518 <HAL_GPIO_Init>
}
 80038c0:	e024      	b.n	800390c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM8)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1c      	ldr	r2, [pc, #112]	; (8003938 <HAL_TIM_MspPostInit+0x1bc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d11f      	bne.n	800390c <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <HAL_TIM_MspPostInit+0x19c>)
 80038ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d2:	4a11      	ldr	r2, [pc, #68]	; (8003918 <HAL_TIM_MspPostInit+0x19c>)
 80038d4:	f043 0304 	orr.w	r3, r3, #4
 80038d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <HAL_TIM_MspPostInit+0x19c>)
 80038de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CIS_SP_Pin;
 80038ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f0:	2302      	movs	r3, #2
 80038f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f8:	2300      	movs	r3, #0
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80038fc:	2303      	movs	r3, #3
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_SP_GPIO_Port, &GPIO_InitStruct);
 8003900:	f107 031c 	add.w	r3, r7, #28
 8003904:	4619      	mov	r1, r3
 8003906:	4807      	ldr	r0, [pc, #28]	; (8003924 <HAL_TIM_MspPostInit+0x1a8>)
 8003908:	f005 fe06 	bl	8009518 <HAL_GPIO_Init>
}
 800390c:	bf00      	nop
 800390e:	3730      	adds	r7, #48	; 0x30
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40010000 	.word	0x40010000
 8003918:	58024400 	.word	0x58024400
 800391c:	58020000 	.word	0x58020000
 8003920:	40000400 	.word	0x40000400
 8003924:	58020800 	.word	0x58020800
 8003928:	40000800 	.word	0x40000800
 800392c:	58020c00 	.word	0x58020c00
 8003930:	40000c00 	.word	0x40000c00
 8003934:	58021c00 	.word	0x58021c00
 8003938:	40010400 	.word	0x40010400

0800393c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003940:	4b22      	ldr	r3, [pc, #136]	; (80039cc <MX_USART1_UART_Init+0x90>)
 8003942:	4a23      	ldr	r2, [pc, #140]	; (80039d0 <MX_USART1_UART_Init+0x94>)
 8003944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003946:	4b21      	ldr	r3, [pc, #132]	; (80039cc <MX_USART1_UART_Init+0x90>)
 8003948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800394c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800394e:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <MX_USART1_UART_Init+0x90>)
 8003950:	2200      	movs	r2, #0
 8003952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003954:	4b1d      	ldr	r3, [pc, #116]	; (80039cc <MX_USART1_UART_Init+0x90>)
 8003956:	2200      	movs	r2, #0
 8003958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800395a:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <MX_USART1_UART_Init+0x90>)
 800395c:	2200      	movs	r2, #0
 800395e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003960:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <MX_USART1_UART_Init+0x90>)
 8003962:	220c      	movs	r2, #12
 8003964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003966:	4b19      	ldr	r3, [pc, #100]	; (80039cc <MX_USART1_UART_Init+0x90>)
 8003968:	2200      	movs	r2, #0
 800396a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800396c:	4b17      	ldr	r3, [pc, #92]	; (80039cc <MX_USART1_UART_Init+0x90>)
 800396e:	2200      	movs	r2, #0
 8003970:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003972:	4b16      	ldr	r3, [pc, #88]	; (80039cc <MX_USART1_UART_Init+0x90>)
 8003974:	2200      	movs	r2, #0
 8003976:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003978:	4b14      	ldr	r3, [pc, #80]	; (80039cc <MX_USART1_UART_Init+0x90>)
 800397a:	2200      	movs	r2, #0
 800397c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800397e:	4b13      	ldr	r3, [pc, #76]	; (80039cc <MX_USART1_UART_Init+0x90>)
 8003980:	2200      	movs	r2, #0
 8003982:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003984:	4811      	ldr	r0, [pc, #68]	; (80039cc <MX_USART1_UART_Init+0x90>)
 8003986:	f00b fe63 	bl	800f650 <HAL_UART_Init>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003990:	f7ff f924 	bl	8002bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003994:	2100      	movs	r1, #0
 8003996:	480d      	ldr	r0, [pc, #52]	; (80039cc <MX_USART1_UART_Init+0x90>)
 8003998:	f00c fdb0 	bl	80104fc <HAL_UARTEx_SetTxFifoThreshold>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80039a2:	f7ff f91b 	bl	8002bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039a6:	2100      	movs	r1, #0
 80039a8:	4808      	ldr	r0, [pc, #32]	; (80039cc <MX_USART1_UART_Init+0x90>)
 80039aa:	f00c fde5 	bl	8010578 <HAL_UARTEx_SetRxFifoThreshold>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80039b4:	f7ff f912 	bl	8002bdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80039b8:	4804      	ldr	r0, [pc, #16]	; (80039cc <MX_USART1_UART_Init+0x90>)
 80039ba:	f00c fd66 	bl	801048a <HAL_UARTEx_DisableFifoMode>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80039c4:	f7ff f90a 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	24007cdc 	.word	0x24007cdc
 80039d0:	40011000 	.word	0x40011000

080039d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b0b8      	sub	sp, #224	; 0xe0
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	60da      	str	r2, [r3, #12]
 80039ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039ec:	f107 0310 	add.w	r3, r7, #16
 80039f0:	22bc      	movs	r2, #188	; 0xbc
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f01c fa8f 	bl	801ff18 <memset>
  if(uartHandle->Instance==USART1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a24      	ldr	r2, [pc, #144]	; (8003a90 <HAL_UART_MspInit+0xbc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d141      	bne.n	8003a88 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a04:	2301      	movs	r3, #1
 8003a06:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a0e:	f107 0310 	add.w	r3, r7, #16
 8003a12:	4618      	mov	r0, r3
 8003a14:	f006 ffac 	bl	800a970 <HAL_RCCEx_PeriphCLKConfig>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003a1e:	f7ff f8dd 	bl	8002bdc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a22:	4b1c      	ldr	r3, [pc, #112]	; (8003a94 <HAL_UART_MspInit+0xc0>)
 8003a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a28:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <HAL_UART_MspInit+0xc0>)
 8003a2a:	f043 0310 	orr.w	r3, r3, #16
 8003a2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a32:	4b18      	ldr	r3, [pc, #96]	; (8003a94 <HAL_UART_MspInit+0xc0>)
 8003a34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a40:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <HAL_UART_MspInit+0xc0>)
 8003a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a46:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <HAL_UART_MspInit+0xc0>)
 8003a48:	f043 0302 	orr.w	r3, r3, #2
 8003a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a50:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <HAL_UART_MspInit+0xc0>)
 8003a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a5e:	23c0      	movs	r3, #192	; 0xc0
 8003a60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a64:	2302      	movs	r3, #2
 8003a66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a76:	2307      	movs	r3, #7
 8003a78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a80:	4619      	mov	r1, r3
 8003a82:	4805      	ldr	r0, [pc, #20]	; (8003a98 <HAL_UART_MspInit+0xc4>)
 8003a84:	f005 fd48 	bl	8009518 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003a88:	bf00      	nop
 8003a8a:	37e0      	adds	r7, #224	; 0xe0
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40011000 	.word	0x40011000
 8003a94:	58024400 	.word	0x58024400
 8003a98:	58020400 	.word	0x58020400

08003a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ad4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003aa0:	f7fd f966 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003aa4:	480c      	ldr	r0, [pc, #48]	; (8003ad8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003aa6:	490d      	ldr	r1, [pc, #52]	; (8003adc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003aa8:	4a0d      	ldr	r2, [pc, #52]	; (8003ae0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003aac:	e002      	b.n	8003ab4 <LoopCopyDataInit>

08003aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ab2:	3304      	adds	r3, #4

08003ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ab8:	d3f9      	bcc.n	8003aae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aba:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003abc:	4c0a      	ldr	r4, [pc, #40]	; (8003ae8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ac0:	e001      	b.n	8003ac6 <LoopFillZerobss>

08003ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ac4:	3204      	adds	r2, #4

08003ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ac8:	d3fb      	bcc.n	8003ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003aca:	f01c f9c3 	bl	801fe54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ace:	f7fe fcc9 	bl	8002464 <main>
  bx  lr
 8003ad2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ad4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003ad8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003adc:	24003a1c 	.word	0x24003a1c
  ldr r2, =_sidata
 8003ae0:	0802b618 	.word	0x0802b618
  ldr r2, =_sbss
 8003ae4:	24003a20 	.word	0x24003a20
  ldr r4, =_ebss
 8003ae8:	2400d6d8 	.word	0x2400d6d8

08003aec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aec:	e7fe      	b.n	8003aec <ADC3_IRQHandler>

08003aee <arm_copy_q15>:

void arm_copy_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b087      	sub	sp, #28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	089b      	lsrs	r3, r3, #2
 8003afe:	617b      	str	r3, [r7, #20]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8003b00:	e01a      	b.n	8003b38 <arm_copy_q15+0x4a>
  {
    /* C = A */
    /* Read two inputs */
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8003b02:	f107 030c 	add.w	r3, r7, #12
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	1d11      	adds	r1, r2, #4
 8003b0a:	6019      	str	r1, [r3, #0]
 8003b0c:	f107 0108 	add.w	r1, r7, #8
 8003b10:	680b      	ldr	r3, [r1, #0]
 8003b12:	1d18      	adds	r0, r3, #4
 8003b14:	6008      	str	r0, [r1, #0]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	601a      	str	r2, [r3, #0]
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	1d11      	adds	r1, r2, #4
 8003b22:	6019      	str	r1, [r3, #0]
 8003b24:	f107 0108 	add.w	r1, r7, #8
 8003b28:	680b      	ldr	r3, [r1, #0]
 8003b2a:	1d18      	adds	r0, r3, #4
 8003b2c:	6008      	str	r0, [r1, #0]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
  while(blkCnt > 0u)
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e1      	bne.n	8003b02 <arm_copy_q15+0x14>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	617b      	str	r3, [r7, #20]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8003b46:	e00b      	b.n	8003b60 <arm_copy_q15+0x72>
  {
    /* C = A */
    /* Copy and then store the value in the destination buffer */
    *pDst++ = *pSrc++;
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	1c93      	adds	r3, r2, #2
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	1c99      	adds	r1, r3, #2
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003b58:	801a      	strh	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	617b      	str	r3, [r7, #20]
  while(blkCnt > 0u)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <arm_copy_q15+0x5a>
  }
}
 8003b66:	bf00      	nop
 8003b68:	bf00      	nop
 8003b6a:	371c      	adds	r7, #28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00b      	beq.n	8003b9c <LAN8742_RegisterBusIO+0x28>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d007      	beq.n	8003b9c <LAN8742_RegisterBusIO+0x28>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <LAN8742_RegisterBusIO+0x28>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d102      	bne.n	8003ba2 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ba0:	e014      	b.n	8003bcc <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	2300      	movs	r3, #0
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d17c      	bne.n	8003cf2 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	e01c      	b.n	8003c4c <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f107 0208 	add.w	r2, r7, #8
 8003c1a:	2112      	movs	r1, #18
 8003c1c:	6978      	ldr	r0, [r7, #20]
 8003c1e:	4798      	blx	r3
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	da03      	bge.n	8003c2e <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003c26:	f06f 0304 	mvn.w	r3, #4
 8003c2a:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003c2c:	e00b      	b.n	8003c46 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d105      	bne.n	8003c46 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	613b      	str	r3, [r7, #16]
         break;
 8003c44:	e005      	b.n	8003c52 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2b1f      	cmp	r3, #31
 8003c50:	d9df      	bls.n	8003c12 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b1f      	cmp	r3, #31
 8003c58:	d902      	bls.n	8003c60 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003c5a:	f06f 0302 	mvn.w	r3, #2
 8003c5e:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d145      	bne.n	8003cf2 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6810      	ldr	r0, [r2, #0]
 8003c6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c72:	2100      	movs	r1, #0
 8003c74:	4798      	blx	r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	db37      	blt.n	8003cec <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6810      	ldr	r0, [r2, #0]
 8003c84:	f107 0208 	add.w	r2, r7, #8
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4798      	blx	r3
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	db28      	blt.n	8003ce4 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	4798      	blx	r3
 8003c98:	4603      	mov	r3, r0
 8003c9a:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003c9c:	e01c      	b.n	8003cd8 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	4798      	blx	r3
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003cb0:	d80e      	bhi.n	8003cd0 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6810      	ldr	r0, [r2, #0]
 8003cba:	f107 0208 	add.w	r2, r7, #8
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	4798      	blx	r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	da07      	bge.n	8003cd8 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003cc8:	f06f 0304 	mvn.w	r3, #4
 8003ccc:	613b      	str	r3, [r7, #16]
                 break;
 8003cce:	e010      	b.n	8003cf2 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003cd0:	f06f 0301 	mvn.w	r3, #1
 8003cd4:	613b      	str	r3, [r7, #16]
               break;
 8003cd6:	e00c      	b.n	8003cf2 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1dd      	bne.n	8003c9e <LAN8742_Init+0xc6>
 8003ce2:	e006      	b.n	8003cf2 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003ce4:	f06f 0304 	mvn.w	r3, #4
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	e002      	b.n	8003cf2 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003cec:	f06f 0303 	mvn.w	r3, #3
 8003cf0:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d112      	bne.n	8003d1e <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	4798      	blx	r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003d02:	bf00      	nop
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	4798      	blx	r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003d16:	d9f5      	bls.n	8003d04 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 }
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6810      	ldr	r0, [r2, #0]
 8003d3c:	f107 020c 	add.w	r2, r7, #12
 8003d40:	2101      	movs	r1, #1
 8003d42:	4798      	blx	r3
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	da02      	bge.n	8003d50 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003d4a:	f06f 0304 	mvn.w	r3, #4
 8003d4e:	e06e      	b.n	8003e2e <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6810      	ldr	r0, [r2, #0]
 8003d58:	f107 020c 	add.w	r2, r7, #12
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	4798      	blx	r3
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	da02      	bge.n	8003d6c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003d66:	f06f 0304 	mvn.w	r3, #4
 8003d6a:	e060      	b.n	8003e2e <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003d76:	2301      	movs	r3, #1
 8003d78:	e059      	b.n	8003e2e <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6810      	ldr	r0, [r2, #0]
 8003d82:	f107 020c 	add.w	r2, r7, #12
 8003d86:	2100      	movs	r1, #0
 8003d88:	4798      	blx	r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	da02      	bge.n	8003d96 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003d90:	f06f 0304 	mvn.w	r3, #4
 8003d94:	e04b      	b.n	8003e2e <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d11b      	bne.n	8003dd8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d006      	beq.n	8003db8 <LAN8742_GetLinkState+0x90>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003db4:	2302      	movs	r3, #2
 8003db6:	e03a      	b.n	8003e2e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e033      	b.n	8003e2e <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	e02c      	b.n	8003e2e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003dd4:	2305      	movs	r3, #5
 8003dd6:	e02a      	b.n	8003e2e <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6810      	ldr	r0, [r2, #0]
 8003de0:	f107 020c 	add.w	r2, r7, #12
 8003de4:	211f      	movs	r1, #31
 8003de6:	4798      	blx	r3
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	da02      	bge.n	8003df4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003dee:	f06f 0304 	mvn.w	r3, #4
 8003df2:	e01c      	b.n	8003e2e <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003dfe:	2306      	movs	r3, #6
 8003e00:	e015      	b.n	8003e2e <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f003 031c 	and.w	r3, r3, #28
 8003e08:	2b18      	cmp	r3, #24
 8003e0a:	d101      	bne.n	8003e10 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e00e      	b.n	8003e2e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 031c 	and.w	r3, r3, #28
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d101      	bne.n	8003e1e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e007      	b.n	8003e2e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 031c 	and.w	r3, r3, #28
 8003e24:	2b14      	cmp	r3, #20
 8003e26:	d101      	bne.n	8003e2c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003e28:	2304      	movs	r3, #4
 8003e2a:	e000      	b.n	8003e2e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003e2c:	2305      	movs	r3, #5
    }				
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e3e:	2003      	movs	r0, #3
 8003e40:	f001 fa54 	bl	80052ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e44:	f006 fbbe 	bl	800a5c4 <HAL_RCC_GetSysClockFreq>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <HAL_Init+0x68>)
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	4913      	ldr	r1, [pc, #76]	; (8003ea4 <HAL_Init+0x6c>)
 8003e56:	5ccb      	ldrb	r3, [r1, r3]
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e62:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <HAL_Init+0x68>)
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ea4 <HAL_Init+0x6c>)
 8003e6c:	5cd3      	ldrb	r3, [r2, r3]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
 8003e78:	4a0b      	ldr	r2, [pc, #44]	; (8003ea8 <HAL_Init+0x70>)
 8003e7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e7c:	4a0b      	ldr	r2, [pc, #44]	; (8003eac <HAL_Init+0x74>)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e82:	2000      	movs	r0, #0
 8003e84:	f000 f814 	bl	8003eb0 <HAL_InitTick>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e002      	b.n	8003e98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e92:	f7ff f8a5 	bl	8002fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	58024400 	.word	0x58024400
 8003ea4:	08028c7c 	.word	0x08028c7c
 8003ea8:	24000404 	.word	0x24000404
 8003eac:	24000400 	.word	0x24000400

08003eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003eb8:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_InitTick+0x60>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e021      	b.n	8003f08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003ec4:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <HAL_InitTick+0x64>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <HAL_InitTick+0x60>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 fa39 	bl	8005352 <HAL_SYSTICK_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e00e      	b.n	8003f08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b0f      	cmp	r3, #15
 8003eee:	d80a      	bhi.n	8003f06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ef8:	f001 fa03 	bl	8005302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003efc:	4a06      	ldr	r2, [pc, #24]	; (8003f18 <HAL_InitTick+0x68>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e000      	b.n	8003f08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	2400040c 	.word	0x2400040c
 8003f14:	24000400 	.word	0x24000400
 8003f18:	24000408 	.word	0x24000408

08003f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_IncTick+0x20>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_IncTick+0x24>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <HAL_IncTick+0x24>)
 8003f2e:	6013      	str	r3, [r2, #0]
}
 8003f30:	bf00      	nop
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	2400040c 	.word	0x2400040c
 8003f40:	24007d6c 	.word	0x24007d6c

08003f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return uwTick;
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_GetTick+0x14>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	24007d6c 	.word	0x24007d6c

08003f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f64:	f7ff ffee 	bl	8003f44 <HAL_GetTick>
 8003f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f74:	d005      	beq.n	8003f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_Delay+0x44>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f82:	bf00      	nop
 8003f84:	f7ff ffde 	bl	8003f44 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d8f7      	bhi.n	8003f84 <HAL_Delay+0x28>
  {
  }
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	2400040c 	.word	0x2400040c

08003fa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003fa8:	4b03      	ldr	r3, [pc, #12]	; (8003fb8 <HAL_GetREVID+0x14>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	0c1b      	lsrs	r3, r3, #16
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	5c001000 	.word	0x5c001000

08003fbc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003fcc:	4904      	ldr	r1, [pc, #16]	; (8003fe0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	604b      	str	r3, [r1, #4]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	58000400 	.word	0x58000400

08003fe4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003fee:	4b07      	ldr	r3, [pc, #28]	; (800400c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	4904      	ldr	r1, [pc, #16]	; (800400c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	58000400 	.word	0x58000400

08004010 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <HAL_SetFMCMemorySwappingConfig+0x24>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004020:	4904      	ldr	r1, [pc, #16]	; (8004034 <HAL_SetFMCMemorySwappingConfig+0x24>)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	52004000 	.word	0x52004000

08004038 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	609a      	str	r2, [r3, #8]
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	609a      	str	r2, [r3, #8]
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3360      	adds	r3, #96	; 0x60
 80040b2:	461a      	mov	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	430b      	orrs	r3, r1
 80040ce:	431a      	orrs	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	431a      	orrs	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	611a      	str	r2, [r3, #16]
}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004112:	b480      	push	{r7}
 8004114:	b087      	sub	sp, #28
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3360      	adds	r3, #96	; 0x60
 8004122:	461a      	mov	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	431a      	orrs	r2, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	601a      	str	r2, [r3, #0]
  }
}
 800413c:	bf00      	nop
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	3330      	adds	r3, #48	; 0x30
 8004158:	461a      	mov	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	0a1b      	lsrs	r3, r3, #8
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	4413      	add	r3, r2
 8004166:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	211f      	movs	r1, #31
 8004174:	fa01 f303 	lsl.w	r3, r1, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	401a      	ands	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	0e9b      	lsrs	r3, r3, #26
 8004180:	f003 011f 	and.w	r1, r3, #31
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	431a      	orrs	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004194:	bf00      	nop
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3314      	adds	r3, #20
 80041b0:	461a      	mov	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	0e5b      	lsrs	r3, r3, #25
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	4413      	add	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	0d1b      	lsrs	r3, r3, #20
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	2107      	movs	r1, #7
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	43db      	mvns	r3, r3
 80041d4:	401a      	ands	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	0d1b      	lsrs	r3, r3, #20
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	fa01 f303 	lsl.w	r3, r1, r3
 80041e4:	431a      	orrs	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004210:	43db      	mvns	r3, r3
 8004212:	401a      	ands	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f003 0318 	and.w	r3, r3, #24
 800421a:	4908      	ldr	r1, [pc, #32]	; (800423c <LL_ADC_SetChannelSingleDiff+0x44>)
 800421c:	40d9      	lsrs	r1, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	400b      	ands	r3, r1
 8004222:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004226:	431a      	orrs	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	000fffff 	.word	0x000fffff

08004240 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	4b04      	ldr	r3, [pc, #16]	; (8004260 <LL_ADC_DisableDeepPowerDown+0x20>)
 800424e:	4013      	ands	r3, r2
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6093      	str	r3, [r2, #8]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	5fffffc0 	.word	0x5fffffc0

08004264 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004278:	d101      	bne.n	800427e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <LL_ADC_EnableInternalRegulator+0x24>)
 800429a:	4013      	ands	r3, r2
 800429c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	6fffffc0 	.word	0x6fffffc0

080042b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042c8:	d101      	bne.n	80042ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <LL_ADC_IsEnabled+0x18>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <LL_ADC_IsEnabled+0x1a>
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b04      	cmp	r3, #4
 8004314:	d101      	bne.n	800431a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b08      	cmp	r3, #8
 800433a:	d101      	bne.n	8004340 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
	...

08004350 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004350:	b590      	push	{r4, r7, lr}
 8004352:	b089      	sub	sp, #36	; 0x24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800435c:	2300      	movs	r3, #0
 800435e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e18e      	b.n	8004688 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7fc fed5 	bl	8001128 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff67 	bl	8004264 <LL_ADC_IsDeepPowerDownEnabled>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ff4d 	bl	8004240 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff ff82 	bl	80042b4 <LL_ADC_IsInternalRegulatorEnabled>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d114      	bne.n	80043e0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff ff66 	bl	800428c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043c0:	4b9a      	ldr	r3, [pc, #616]	; (800462c <HAL_ADC_Init+0x2dc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	099b      	lsrs	r3, r3, #6
 80043c6:	4a9a      	ldr	r2, [pc, #616]	; (8004630 <HAL_ADC_Init+0x2e0>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	099b      	lsrs	r3, r3, #6
 80043ce:	3301      	adds	r3, #1
 80043d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80043d2:	e002      	b.n	80043da <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f9      	bne.n	80043d4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff ff65 	bl	80042b4 <LL_ADC_IsInternalRegulatorEnabled>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10d      	bne.n	800440c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f4:	f043 0210 	orr.w	r2, r3, #16
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	f043 0201 	orr.w	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff76 	bl	8004302 <LL_ADC_REG_IsConversionOngoing>
 8004416:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 8128 	bne.w	8004676 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	f040 8124 	bne.w	8004676 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004436:	f043 0202 	orr.w	r2, r3, #2
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff ff4a 	bl	80042dc <LL_ADC_IsEnabled>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d136      	bne.n	80044bc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a78      	ldr	r2, [pc, #480]	; (8004634 <HAL_ADC_Init+0x2e4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d004      	beq.n	8004462 <HAL_ADC_Init+0x112>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a76      	ldr	r2, [pc, #472]	; (8004638 <HAL_ADC_Init+0x2e8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d10e      	bne.n	8004480 <HAL_ADC_Init+0x130>
 8004462:	4874      	ldr	r0, [pc, #464]	; (8004634 <HAL_ADC_Init+0x2e4>)
 8004464:	f7ff ff3a 	bl	80042dc <LL_ADC_IsEnabled>
 8004468:	4604      	mov	r4, r0
 800446a:	4873      	ldr	r0, [pc, #460]	; (8004638 <HAL_ADC_Init+0x2e8>)
 800446c:	f7ff ff36 	bl	80042dc <LL_ADC_IsEnabled>
 8004470:	4603      	mov	r3, r0
 8004472:	4323      	orrs	r3, r4
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e008      	b.n	8004492 <HAL_ADC_Init+0x142>
 8004480:	486e      	ldr	r0, [pc, #440]	; (800463c <HAL_ADC_Init+0x2ec>)
 8004482:	f7ff ff2b 	bl	80042dc <LL_ADC_IsEnabled>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d012      	beq.n	80044bc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a66      	ldr	r2, [pc, #408]	; (8004634 <HAL_ADC_Init+0x2e4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d004      	beq.n	80044aa <HAL_ADC_Init+0x15a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a64      	ldr	r2, [pc, #400]	; (8004638 <HAL_ADC_Init+0x2e8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d101      	bne.n	80044ae <HAL_ADC_Init+0x15e>
 80044aa:	4a65      	ldr	r2, [pc, #404]	; (8004640 <HAL_ADC_Init+0x2f0>)
 80044ac:	e000      	b.n	80044b0 <HAL_ADC_Init+0x160>
 80044ae:	4a65      	ldr	r2, [pc, #404]	; (8004644 <HAL_ADC_Init+0x2f4>)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4619      	mov	r1, r3
 80044b6:	4610      	mov	r0, r2
 80044b8:	f7ff fdbe 	bl	8004038 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80044bc:	f7ff fd72 	bl	8003fa4 <HAL_GetREVID>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d914      	bls.n	80044f4 <HAL_ADC_Init+0x1a4>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	d110      	bne.n	80044f4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	7d5b      	ldrb	r3, [r3, #21]
 80044d6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044dc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80044e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7f1b      	ldrb	r3, [r3, #28]
 80044e8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80044ea:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044ec:	f043 030c 	orr.w	r3, r3, #12
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	e00d      	b.n	8004510 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	7d5b      	ldrb	r3, [r3, #21]
 80044f8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044fe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004504:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	7f1b      	ldrb	r3, [r3, #28]
 800450a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	7f1b      	ldrb	r3, [r3, #28]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d106      	bne.n	8004526 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	3b01      	subs	r3, #1
 800451e:	045b      	lsls	r3, r3, #17
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	4b3f      	ldr	r3, [pc, #252]	; (8004648 <HAL_ADC_Init+0x2f8>)
 800454a:	4013      	ands	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	69b9      	ldr	r1, [r7, #24]
 8004552:	430b      	orrs	r3, r1
 8004554:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fed1 	bl	8004302 <LL_ADC_REG_IsConversionOngoing>
 8004560:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fede 	bl	8004328 <LL_ADC_INJ_IsConversionOngoing>
 800456c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d14a      	bne.n	800460a <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d147      	bne.n	800460a <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	7d1b      	ldrb	r3, [r3, #20]
 800457e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	4b2f      	ldr	r3, [pc, #188]	; (800464c <HAL_ADC_Init+0x2fc>)
 8004590:	4013      	ands	r3, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	69b9      	ldr	r1, [r7, #24]
 8004598:	430b      	orrs	r3, r1
 800459a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d11b      	bne.n	80045de <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	4b27      	ldr	r3, [pc, #156]	; (8004650 <HAL_ADC_Init+0x300>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045ba:	3a01      	subs	r2, #1
 80045bc:	0411      	lsls	r1, r2, #16
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045c2:	4311      	orrs	r1, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80045c8:	4311      	orrs	r1, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80045ce:	430a      	orrs	r2, r1
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	611a      	str	r2, [r3, #16]
 80045dc:	e007      	b.n	80045ee <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0201 	bic.w	r2, r2, #1
 80045ec:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fb93 	bl	8004d30 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d120      	bne.n	8004654 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	f023 010f 	bic.w	r1, r3, #15
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	1e5a      	subs	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	631a      	str	r2, [r3, #48]	; 0x30
 800462a:	e01b      	b.n	8004664 <HAL_ADC_Init+0x314>
 800462c:	24000400 	.word	0x24000400
 8004630:	053e2d63 	.word	0x053e2d63
 8004634:	40022000 	.word	0x40022000
 8004638:	40022100 	.word	0x40022100
 800463c:	58026000 	.word	0x58026000
 8004640:	40022300 	.word	0x40022300
 8004644:	58026300 	.word	0x58026300
 8004648:	fff0c003 	.word	0xfff0c003
 800464c:	ffffbffc 	.word	0xffffbffc
 8004650:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 020f 	bic.w	r2, r2, #15
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004668:	f023 0303 	bic.w	r3, r3, #3
 800466c:	f043 0201 	orr.w	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	655a      	str	r2, [r3, #84]	; 0x54
 8004674:	e007      	b.n	8004686 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	f043 0210 	orr.w	r2, r3, #16
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004686:	7ffb      	ldrb	r3, [r7, #31]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3724      	adds	r7, #36	; 0x24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd90      	pop	{r4, r7, pc}

08004690 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004690:	b590      	push	{r4, r7, lr}
 8004692:	b0a1      	sub	sp, #132	; 0x84
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4a9d      	ldr	r2, [pc, #628]	; (8004920 <HAL_ADC_ConfigChannel+0x290>)
 80046aa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <HAL_ADC_ConfigChannel+0x2a>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e321      	b.n	8004cfe <HAL_ADC_ConfigChannel+0x66e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff fe1b 	bl	8004302 <LL_ADC_REG_IsConversionOngoing>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f040 8306 	bne.w	8004ce0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d108      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x62>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	0e9b      	lsrs	r3, r3, #26
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	2201      	movs	r2, #1
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	e016      	b.n	8004720 <HAL_ADC_ConfigChannel+0x90>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046fa:	fa93 f3a3 	rbit	r3, r3
 80046fe:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004700:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004702:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800470a:	2320      	movs	r3, #32
 800470c:	e003      	b.n	8004716 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800470e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004710:	fab3 f383 	clz	r3, r3
 8004714:	b2db      	uxtb	r3, r3
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	2201      	movs	r2, #1
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	69d1      	ldr	r1, [r2, #28]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	430b      	orrs	r3, r1
 800472c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	6859      	ldr	r1, [r3, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	f7ff fd04 	bl	8004148 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff fddc 	bl	8004302 <LL_ADC_REG_IsConversionOngoing>
 800474a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff fde9 	bl	8004328 <LL_ADC_INJ_IsConversionOngoing>
 8004756:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800475a:	2b00      	cmp	r3, #0
 800475c:	f040 80b3 	bne.w	80048c6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004762:	2b00      	cmp	r3, #0
 8004764:	f040 80af 	bne.w	80048c6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6818      	ldr	r0, [r3, #0]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	6819      	ldr	r1, [r3, #0]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	461a      	mov	r2, r3
 8004776:	f7ff fd13 	bl	80041a0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800477a:	4b6a      	ldr	r3, [pc, #424]	; (8004924 <HAL_ADC_ConfigChannel+0x294>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004786:	d10b      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x110>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	695a      	ldr	r2, [r3, #20]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	e01d      	b.n	80047dc <HAL_ADC_ConfigChannel+0x14c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10b      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x136>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	089b      	lsrs	r3, r3, #2
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	e00a      	b.n	80047dc <HAL_ADC_ConfigChannel+0x14c>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	089b      	lsrs	r3, r3, #2
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d027      	beq.n	8004836 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6919      	ldr	r1, [r3, #16]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f4:	f7ff fc54 	bl	80040a0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	6919      	ldr	r1, [r3, #16]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	7e5b      	ldrb	r3, [r3, #25]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d102      	bne.n	800480e <HAL_ADC_ConfigChannel+0x17e>
 8004808:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800480c:	e000      	b.n	8004810 <HAL_ADC_ConfigChannel+0x180>
 800480e:	2300      	movs	r3, #0
 8004810:	461a      	mov	r2, r3
 8004812:	f7ff fc7e 	bl	8004112 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6919      	ldr	r1, [r3, #16]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	7e1b      	ldrb	r3, [r3, #24]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d102      	bne.n	800482c <HAL_ADC_ConfigChannel+0x19c>
 8004826:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800482a:	e000      	b.n	800482e <HAL_ADC_ConfigChannel+0x19e>
 800482c:	2300      	movs	r3, #0
 800482e:	461a      	mov	r2, r3
 8004830:	f7ff fc56 	bl	80040e0 <LL_ADC_SetDataRightShift>
 8004834:	e047      	b.n	80048c6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	069b      	lsls	r3, r3, #26
 8004846:	429a      	cmp	r2, r3
 8004848:	d107      	bne.n	800485a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004858:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004860:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	069b      	lsls	r3, r3, #26
 800486a:	429a      	cmp	r2, r3
 800486c:	d107      	bne.n	800487e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800487c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004884:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	069b      	lsls	r3, r3, #26
 800488e:	429a      	cmp	r2, r3
 8004890:	d107      	bne.n	80048a2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048a0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	069b      	lsls	r3, r3, #26
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d107      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048c4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff fd06 	bl	80042dc <LL_ADC_IsEnabled>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f040 820d 	bne.w	8004cf2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	6819      	ldr	r1, [r3, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	461a      	mov	r2, r3
 80048e6:	f7ff fc87 	bl	80041f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	4a0c      	ldr	r2, [pc, #48]	; (8004920 <HAL_ADC_ConfigChannel+0x290>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	f040 8133 	bne.w	8004b5c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004902:	2b00      	cmp	r3, #0
 8004904:	d110      	bne.n	8004928 <HAL_ADC_ConfigChannel+0x298>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	0e9b      	lsrs	r3, r3, #26
 800490c:	3301      	adds	r3, #1
 800490e:	f003 031f 	and.w	r3, r3, #31
 8004912:	2b09      	cmp	r3, #9
 8004914:	bf94      	ite	ls
 8004916:	2301      	movls	r3, #1
 8004918:	2300      	movhi	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	e01e      	b.n	800495c <HAL_ADC_ConfigChannel+0x2cc>
 800491e:	bf00      	nop
 8004920:	47ff0000 	.word	0x47ff0000
 8004924:	5c001000 	.word	0x5c001000
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004930:	fa93 f3a3 	rbit	r3, r3
 8004934:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004938:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800493a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004940:	2320      	movs	r3, #32
 8004942:	e003      	b.n	800494c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004946:	fab3 f383 	clz	r3, r3
 800494a:	b2db      	uxtb	r3, r3
 800494c:	3301      	adds	r3, #1
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	2b09      	cmp	r3, #9
 8004954:	bf94      	ite	ls
 8004956:	2301      	movls	r3, #1
 8004958:	2300      	movhi	r3, #0
 800495a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800495c:	2b00      	cmp	r3, #0
 800495e:	d079      	beq.n	8004a54 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004968:	2b00      	cmp	r3, #0
 800496a:	d107      	bne.n	800497c <HAL_ADC_ConfigChannel+0x2ec>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	0e9b      	lsrs	r3, r3, #26
 8004972:	3301      	adds	r3, #1
 8004974:	069b      	lsls	r3, r3, #26
 8004976:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800497a:	e015      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x318>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004984:	fa93 f3a3 	rbit	r3, r3
 8004988:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800498a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800498c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800498e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004994:	2320      	movs	r3, #32
 8004996:	e003      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800499a:	fab3 f383 	clz	r3, r3
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	3301      	adds	r3, #1
 80049a2:	069b      	lsls	r3, r3, #26
 80049a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d109      	bne.n	80049c8 <HAL_ADC_ConfigChannel+0x338>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	0e9b      	lsrs	r3, r3, #26
 80049ba:	3301      	adds	r3, #1
 80049bc:	f003 031f 	and.w	r3, r3, #31
 80049c0:	2101      	movs	r1, #1
 80049c2:	fa01 f303 	lsl.w	r3, r1, r3
 80049c6:	e017      	b.n	80049f8 <HAL_ADC_ConfigChannel+0x368>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d0:	fa93 f3a3 	rbit	r3, r3
 80049d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80049d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80049da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80049e0:	2320      	movs	r3, #32
 80049e2:	e003      	b.n	80049ec <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80049e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e6:	fab3 f383 	clz	r3, r3
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	3301      	adds	r3, #1
 80049ee:	f003 031f 	and.w	r3, r3, #31
 80049f2:	2101      	movs	r1, #1
 80049f4:	fa01 f303 	lsl.w	r3, r1, r3
 80049f8:	ea42 0103 	orr.w	r1, r2, r3
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x38e>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	0e9b      	lsrs	r3, r3, #26
 8004a0e:	3301      	adds	r3, #1
 8004a10:	f003 021f 	and.w	r2, r3, #31
 8004a14:	4613      	mov	r3, r2
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	4413      	add	r3, r2
 8004a1a:	051b      	lsls	r3, r3, #20
 8004a1c:	e018      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x3c0>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a26:	fa93 f3a3 	rbit	r3, r3
 8004a2a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004a36:	2320      	movs	r3, #32
 8004a38:	e003      	b.n	8004a42 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	fab3 f383 	clz	r3, r3
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	3301      	adds	r3, #1
 8004a44:	f003 021f 	and.w	r2, r3, #31
 8004a48:	4613      	mov	r3, r2
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	4413      	add	r3, r2
 8004a4e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a50:	430b      	orrs	r3, r1
 8004a52:	e07e      	b.n	8004b52 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d107      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x3e0>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	0e9b      	lsrs	r3, r3, #26
 8004a66:	3301      	adds	r3, #1
 8004a68:	069b      	lsls	r3, r3, #26
 8004a6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a6e:	e015      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x40c>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	fa93 f3a3 	rbit	r3, r3
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004a88:	2320      	movs	r3, #32
 8004a8a:	e003      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8e:	fab3 f383 	clz	r3, r3
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	3301      	adds	r3, #1
 8004a96:	069b      	lsls	r3, r3, #26
 8004a98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d109      	bne.n	8004abc <HAL_ADC_ConfigChannel+0x42c>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	0e9b      	lsrs	r3, r3, #26
 8004aae:	3301      	adds	r3, #1
 8004ab0:	f003 031f 	and.w	r3, r3, #31
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aba:	e017      	b.n	8004aec <HAL_ADC_ConfigChannel+0x45c>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	fa93 f3a3 	rbit	r3, r3
 8004ac8:	61bb      	str	r3, [r7, #24]
  return result;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004ad4:	2320      	movs	r3, #32
 8004ad6:	e003      	b.n	8004ae0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	fab3 f383 	clz	r3, r3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	f003 031f 	and.w	r3, r3, #31
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aec:	ea42 0103 	orr.w	r1, r2, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10d      	bne.n	8004b18 <HAL_ADC_ConfigChannel+0x488>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	0e9b      	lsrs	r3, r3, #26
 8004b02:	3301      	adds	r3, #1
 8004b04:	f003 021f 	and.w	r2, r3, #31
 8004b08:	4613      	mov	r3, r2
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	4413      	add	r3, r2
 8004b0e:	3b1e      	subs	r3, #30
 8004b10:	051b      	lsls	r3, r3, #20
 8004b12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b16:	e01b      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x4c0>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	fa93 f3a3 	rbit	r3, r3
 8004b24:	60fb      	str	r3, [r7, #12]
  return result;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004b30:	2320      	movs	r3, #32
 8004b32:	e003      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	fab3 f383 	clz	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	f003 021f 	and.w	r2, r3, #31
 8004b42:	4613      	mov	r3, r2
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	4413      	add	r3, r2
 8004b48:	3b1e      	subs	r3, #30
 8004b4a:	051b      	lsls	r3, r3, #20
 8004b4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b50:	430b      	orrs	r3, r1
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	6892      	ldr	r2, [r2, #8]
 8004b56:	4619      	mov	r1, r3
 8004b58:	f7ff fb22 	bl	80041a0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f280 80c6 	bge.w	8004cf2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a67      	ldr	r2, [pc, #412]	; (8004d08 <HAL_ADC_ConfigChannel+0x678>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d004      	beq.n	8004b7a <HAL_ADC_ConfigChannel+0x4ea>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a65      	ldr	r2, [pc, #404]	; (8004d0c <HAL_ADC_ConfigChannel+0x67c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d101      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0x4ee>
 8004b7a:	4b65      	ldr	r3, [pc, #404]	; (8004d10 <HAL_ADC_ConfigChannel+0x680>)
 8004b7c:	e000      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x4f0>
 8004b7e:	4b65      	ldr	r3, [pc, #404]	; (8004d14 <HAL_ADC_ConfigChannel+0x684>)
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff fa7f 	bl	8004084 <LL_ADC_GetCommonPathInternalCh>
 8004b86:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a5e      	ldr	r2, [pc, #376]	; (8004d08 <HAL_ADC_ConfigChannel+0x678>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d004      	beq.n	8004b9c <HAL_ADC_ConfigChannel+0x50c>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a5d      	ldr	r2, [pc, #372]	; (8004d0c <HAL_ADC_ConfigChannel+0x67c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d10e      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x52a>
 8004b9c:	485a      	ldr	r0, [pc, #360]	; (8004d08 <HAL_ADC_ConfigChannel+0x678>)
 8004b9e:	f7ff fb9d 	bl	80042dc <LL_ADC_IsEnabled>
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	4859      	ldr	r0, [pc, #356]	; (8004d0c <HAL_ADC_ConfigChannel+0x67c>)
 8004ba6:	f7ff fb99 	bl	80042dc <LL_ADC_IsEnabled>
 8004baa:	4603      	mov	r3, r0
 8004bac:	4323      	orrs	r3, r4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bf0c      	ite	eq
 8004bb2:	2301      	moveq	r3, #1
 8004bb4:	2300      	movne	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	e008      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x53c>
 8004bba:	4857      	ldr	r0, [pc, #348]	; (8004d18 <HAL_ADC_ConfigChannel+0x688>)
 8004bbc:	f7ff fb8e 	bl	80042dc <LL_ADC_IsEnabled>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d07d      	beq.n	8004ccc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a51      	ldr	r2, [pc, #324]	; (8004d1c <HAL_ADC_ConfigChannel+0x68c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d130      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x5ac>
 8004bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d12b      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a4b      	ldr	r2, [pc, #300]	; (8004d18 <HAL_ADC_ConfigChannel+0x688>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	f040 8081 	bne.w	8004cf2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a44      	ldr	r2, [pc, #272]	; (8004d08 <HAL_ADC_ConfigChannel+0x678>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d004      	beq.n	8004c04 <HAL_ADC_ConfigChannel+0x574>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a43      	ldr	r2, [pc, #268]	; (8004d0c <HAL_ADC_ConfigChannel+0x67c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d101      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x578>
 8004c04:	4a42      	ldr	r2, [pc, #264]	; (8004d10 <HAL_ADC_ConfigChannel+0x680>)
 8004c06:	e000      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x57a>
 8004c08:	4a42      	ldr	r2, [pc, #264]	; (8004d14 <HAL_ADC_ConfigChannel+0x684>)
 8004c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f7ff fa23 	bl	800405e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c18:	4b41      	ldr	r3, [pc, #260]	; (8004d20 <HAL_ADC_ConfigChannel+0x690>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	099b      	lsrs	r3, r3, #6
 8004c1e:	4a41      	ldr	r2, [pc, #260]	; (8004d24 <HAL_ADC_ConfigChannel+0x694>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	099b      	lsrs	r3, r3, #6
 8004c26:	3301      	adds	r3, #1
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c2c:	e002      	b.n	8004c34 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f9      	bne.n	8004c2e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c3a:	e05a      	b.n	8004cf2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a39      	ldr	r2, [pc, #228]	; (8004d28 <HAL_ADC_ConfigChannel+0x698>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d11e      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x5f4>
 8004c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d119      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a30      	ldr	r2, [pc, #192]	; (8004d18 <HAL_ADC_ConfigChannel+0x688>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d14b      	bne.n	8004cf2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2a      	ldr	r2, [pc, #168]	; (8004d08 <HAL_ADC_ConfigChannel+0x678>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d004      	beq.n	8004c6e <HAL_ADC_ConfigChannel+0x5de>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a28      	ldr	r2, [pc, #160]	; (8004d0c <HAL_ADC_ConfigChannel+0x67c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d101      	bne.n	8004c72 <HAL_ADC_ConfigChannel+0x5e2>
 8004c6e:	4a28      	ldr	r2, [pc, #160]	; (8004d10 <HAL_ADC_ConfigChannel+0x680>)
 8004c70:	e000      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x5e4>
 8004c72:	4a28      	ldr	r2, [pc, #160]	; (8004d14 <HAL_ADC_ConfigChannel+0x684>)
 8004c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	f7ff f9ee 	bl	800405e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c82:	e036      	b.n	8004cf2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a28      	ldr	r2, [pc, #160]	; (8004d2c <HAL_ADC_ConfigChannel+0x69c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d131      	bne.n	8004cf2 <HAL_ADC_ConfigChannel+0x662>
 8004c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d12c      	bne.n	8004cf2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <HAL_ADC_ConfigChannel+0x688>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d127      	bne.n	8004cf2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <HAL_ADC_ConfigChannel+0x678>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <HAL_ADC_ConfigChannel+0x626>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a16      	ldr	r2, [pc, #88]	; (8004d0c <HAL_ADC_ConfigChannel+0x67c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d101      	bne.n	8004cba <HAL_ADC_ConfigChannel+0x62a>
 8004cb6:	4a16      	ldr	r2, [pc, #88]	; (8004d10 <HAL_ADC_ConfigChannel+0x680>)
 8004cb8:	e000      	b.n	8004cbc <HAL_ADC_ConfigChannel+0x62c>
 8004cba:	4a16      	ldr	r2, [pc, #88]	; (8004d14 <HAL_ADC_ConfigChannel+0x684>)
 8004cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	f7ff f9ca 	bl	800405e <LL_ADC_SetCommonPathInternalCh>
 8004cca:	e012      	b.n	8004cf2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004cde:	e008      	b.n	8004cf2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce4:	f043 0220 	orr.w	r2, r3, #32
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004cfa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3784      	adds	r7, #132	; 0x84
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd90      	pop	{r4, r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40022000 	.word	0x40022000
 8004d0c:	40022100 	.word	0x40022100
 8004d10:	40022300 	.word	0x40022300
 8004d14:	58026300 	.word	0x58026300
 8004d18:	58026000 	.word	0x58026000
 8004d1c:	cb840000 	.word	0xcb840000
 8004d20:	24000400 	.word	0x24000400
 8004d24:	053e2d63 	.word	0x053e2d63
 8004d28:	c7520000 	.word	0xc7520000
 8004d2c:	cfb80000 	.word	0xcfb80000

08004d30 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a79      	ldr	r2, [pc, #484]	; (8004f24 <ADC_ConfigureBoostMode+0x1f4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <ADC_ConfigureBoostMode+0x1c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a78      	ldr	r2, [pc, #480]	; (8004f28 <ADC_ConfigureBoostMode+0x1f8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d109      	bne.n	8004d60 <ADC_ConfigureBoostMode+0x30>
 8004d4c:	4b77      	ldr	r3, [pc, #476]	; (8004f2c <ADC_ConfigureBoostMode+0x1fc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2300      	moveq	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e008      	b.n	8004d72 <ADC_ConfigureBoostMode+0x42>
 8004d60:	4b73      	ldr	r3, [pc, #460]	; (8004f30 <ADC_ConfigureBoostMode+0x200>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bf14      	ite	ne
 8004d6c:	2301      	movne	r3, #1
 8004d6e:	2300      	moveq	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d01c      	beq.n	8004db0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004d76:	f005 fd9f 	bl	800a8b8 <HAL_RCC_GetHCLKFreq>
 8004d7a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d84:	d010      	beq.n	8004da8 <ADC_ConfigureBoostMode+0x78>
 8004d86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d8a:	d871      	bhi.n	8004e70 <ADC_ConfigureBoostMode+0x140>
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d90:	d002      	beq.n	8004d98 <ADC_ConfigureBoostMode+0x68>
 8004d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d96:	d16b      	bne.n	8004e70 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da4:	60fb      	str	r3, [r7, #12]
        break;
 8004da6:	e066      	b.n	8004e76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	089b      	lsrs	r3, r3, #2
 8004dac:	60fb      	str	r3, [r7, #12]
        break;
 8004dae:	e062      	b.n	8004e76 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004db0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004db4:	f006 fd1c 	bl	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004db8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004dc2:	d051      	beq.n	8004e68 <ADC_ConfigureBoostMode+0x138>
 8004dc4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004dc8:	d854      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x144>
 8004dca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004dce:	d047      	beq.n	8004e60 <ADC_ConfigureBoostMode+0x130>
 8004dd0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004dd4:	d84e      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x144>
 8004dd6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004dda:	d03d      	beq.n	8004e58 <ADC_ConfigureBoostMode+0x128>
 8004ddc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004de0:	d848      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x144>
 8004de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004de6:	d033      	beq.n	8004e50 <ADC_ConfigureBoostMode+0x120>
 8004de8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dec:	d842      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x144>
 8004dee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004df2:	d029      	beq.n	8004e48 <ADC_ConfigureBoostMode+0x118>
 8004df4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004df8:	d83c      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x144>
 8004dfa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004dfe:	d01a      	beq.n	8004e36 <ADC_ConfigureBoostMode+0x106>
 8004e00:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e04:	d836      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x144>
 8004e06:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e0a:	d014      	beq.n	8004e36 <ADC_ConfigureBoostMode+0x106>
 8004e0c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e10:	d830      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x144>
 8004e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e16:	d00e      	beq.n	8004e36 <ADC_ConfigureBoostMode+0x106>
 8004e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e1c:	d82a      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x144>
 8004e1e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e22:	d008      	beq.n	8004e36 <ADC_ConfigureBoostMode+0x106>
 8004e24:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e28:	d824      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x144>
 8004e2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e2e:	d002      	beq.n	8004e36 <ADC_ConfigureBoostMode+0x106>
 8004e30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e34:	d11e      	bne.n	8004e74 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	0c9b      	lsrs	r3, r3, #18
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	60fb      	str	r3, [r7, #12]
        break;
 8004e46:	e016      	b.n	8004e76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	091b      	lsrs	r3, r3, #4
 8004e4c:	60fb      	str	r3, [r7, #12]
        break;
 8004e4e:	e012      	b.n	8004e76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	60fb      	str	r3, [r7, #12]
        break;
 8004e56:	e00e      	b.n	8004e76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	099b      	lsrs	r3, r3, #6
 8004e5c:	60fb      	str	r3, [r7, #12]
        break;
 8004e5e:	e00a      	b.n	8004e76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	09db      	lsrs	r3, r3, #7
 8004e64:	60fb      	str	r3, [r7, #12]
        break;
 8004e66:	e006      	b.n	8004e76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	60fb      	str	r3, [r7, #12]
        break;
 8004e6e:	e002      	b.n	8004e76 <ADC_ConfigureBoostMode+0x146>
        break;
 8004e70:	bf00      	nop
 8004e72:	e000      	b.n	8004e76 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004e74:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004e76:	f7ff f895 	bl	8003fa4 <HAL_GetREVID>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d815      	bhi.n	8004eb0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4a2b      	ldr	r2, [pc, #172]	; (8004f34 <ADC_ConfigureBoostMode+0x204>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d908      	bls.n	8004e9e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e9a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004e9c:	e03e      	b.n	8004f1c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eac:	609a      	str	r2, [r3, #8]
}
 8004eae:	e035      	b.n	8004f1c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	085b      	lsrs	r3, r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a1f      	ldr	r2, [pc, #124]	; (8004f38 <ADC_ConfigureBoostMode+0x208>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d808      	bhi.n	8004ed0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ecc:	609a      	str	r2, [r3, #8]
}
 8004ece:	e025      	b.n	8004f1c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4a1a      	ldr	r2, [pc, #104]	; (8004f3c <ADC_ConfigureBoostMode+0x20c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d80a      	bhi.n	8004eee <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eea:	609a      	str	r2, [r3, #8]
}
 8004eec:	e016      	b.n	8004f1c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <ADC_ConfigureBoostMode+0x210>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d80a      	bhi.n	8004f0c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f08:	609a      	str	r2, [r3, #8]
}
 8004f0a:	e007      	b.n	8004f1c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004f1a:	609a      	str	r2, [r3, #8]
}
 8004f1c:	bf00      	nop
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40022000 	.word	0x40022000
 8004f28:	40022100 	.word	0x40022100
 8004f2c:	40022300 	.word	0x40022300
 8004f30:	58026300 	.word	0x58026300
 8004f34:	01312d00 	.word	0x01312d00
 8004f38:	005f5e10 	.word	0x005f5e10
 8004f3c:	00bebc20 	.word	0x00bebc20
 8004f40:	017d7840 	.word	0x017d7840

08004f44 <LL_ADC_IsEnabled>:
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <LL_ADC_IsEnabled+0x18>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <LL_ADC_IsEnabled+0x1a>
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <LL_ADC_REG_IsConversionOngoing>:
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d101      	bne.n	8004f82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004f90:	b590      	push	{r4, r7, lr}
 8004f92:	b09f      	sub	sp, #124	; 0x7c
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e0be      	b.n	800512c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a5c      	ldr	r2, [pc, #368]	; (8005134 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d102      	bne.n	8004fce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004fc8:	4b5b      	ldr	r3, [pc, #364]	; (8005138 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004fca:	60bb      	str	r3, [r7, #8]
 8004fcc:	e001      	b.n	8004fd2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	f043 0220 	orr.w	r2, r3, #32
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e09d      	b.n	800512c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff ffb9 	bl	8004f6a <LL_ADC_REG_IsConversionOngoing>
 8004ff8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff ffb3 	bl	8004f6a <LL_ADC_REG_IsConversionOngoing>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d17f      	bne.n	800510a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800500a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800500c:	2b00      	cmp	r3, #0
 800500e:	d17c      	bne.n	800510a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a47      	ldr	r2, [pc, #284]	; (8005134 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a46      	ldr	r2, [pc, #280]	; (8005138 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d101      	bne.n	8005028 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005024:	4b45      	ldr	r3, [pc, #276]	; (800513c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005026:	e000      	b.n	800502a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005028:	4b45      	ldr	r3, [pc, #276]	; (8005140 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800502a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d039      	beq.n	80050a8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	431a      	orrs	r2, r3
 8005042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005044:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a3a      	ldr	r2, [pc, #232]	; (8005134 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a38      	ldr	r2, [pc, #224]	; (8005138 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d10e      	bne.n	8005078 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800505a:	4836      	ldr	r0, [pc, #216]	; (8005134 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800505c:	f7ff ff72 	bl	8004f44 <LL_ADC_IsEnabled>
 8005060:	4604      	mov	r4, r0
 8005062:	4835      	ldr	r0, [pc, #212]	; (8005138 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005064:	f7ff ff6e 	bl	8004f44 <LL_ADC_IsEnabled>
 8005068:	4603      	mov	r3, r0
 800506a:	4323      	orrs	r3, r4
 800506c:	2b00      	cmp	r3, #0
 800506e:	bf0c      	ite	eq
 8005070:	2301      	moveq	r3, #1
 8005072:	2300      	movne	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	e008      	b.n	800508a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005078:	4832      	ldr	r0, [pc, #200]	; (8005144 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800507a:	f7ff ff63 	bl	8004f44 <LL_ADC_IsEnabled>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	bf0c      	ite	eq
 8005084:	2301      	moveq	r3, #1
 8005086:	2300      	movne	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d047      	beq.n	800511e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800508e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	4b2d      	ldr	r3, [pc, #180]	; (8005148 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005094:	4013      	ands	r3, r2
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	6811      	ldr	r1, [r2, #0]
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	6892      	ldr	r2, [r2, #8]
 800509e:	430a      	orrs	r2, r1
 80050a0:	431a      	orrs	r2, r3
 80050a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050a6:	e03a      	b.n	800511e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80050a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1e      	ldr	r2, [pc, #120]	; (8005134 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d004      	beq.n	80050c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1d      	ldr	r2, [pc, #116]	; (8005138 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d10e      	bne.n	80050e6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80050c8:	481a      	ldr	r0, [pc, #104]	; (8005134 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80050ca:	f7ff ff3b 	bl	8004f44 <LL_ADC_IsEnabled>
 80050ce:	4604      	mov	r4, r0
 80050d0:	4819      	ldr	r0, [pc, #100]	; (8005138 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050d2:	f7ff ff37 	bl	8004f44 <LL_ADC_IsEnabled>
 80050d6:	4603      	mov	r3, r0
 80050d8:	4323      	orrs	r3, r4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bf0c      	ite	eq
 80050de:	2301      	moveq	r3, #1
 80050e0:	2300      	movne	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	e008      	b.n	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80050e6:	4817      	ldr	r0, [pc, #92]	; (8005144 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80050e8:	f7ff ff2c 	bl	8004f44 <LL_ADC_IsEnabled>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bf0c      	ite	eq
 80050f2:	2301      	moveq	r3, #1
 80050f4:	2300      	movne	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d010      	beq.n	800511e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80050fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	4b11      	ldr	r3, [pc, #68]	; (8005148 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005102:	4013      	ands	r3, r2
 8005104:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005106:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005108:	e009      	b.n	800511e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510e:	f043 0220 	orr.w	r2, r3, #32
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800511c:	e000      	b.n	8005120 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800511e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005128:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800512c:	4618      	mov	r0, r3
 800512e:	377c      	adds	r7, #124	; 0x7c
 8005130:	46bd      	mov	sp, r7
 8005132:	bd90      	pop	{r4, r7, pc}
 8005134:	40022000 	.word	0x40022000
 8005138:	40022100 	.word	0x40022100
 800513c:	40022300 	.word	0x40022300
 8005140:	58026300 	.word	0x58026300
 8005144:	58026000 	.word	0x58026000
 8005148:	fffff0e0 	.word	0xfffff0e0

0800514c <__NVIC_SetPriorityGrouping>:
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800515c:	4b0b      	ldr	r3, [pc, #44]	; (800518c <__NVIC_SetPriorityGrouping+0x40>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005168:	4013      	ands	r3, r2
 800516a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005174:	4b06      	ldr	r3, [pc, #24]	; (8005190 <__NVIC_SetPriorityGrouping+0x44>)
 8005176:	4313      	orrs	r3, r2
 8005178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800517a:	4a04      	ldr	r2, [pc, #16]	; (800518c <__NVIC_SetPriorityGrouping+0x40>)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	60d3      	str	r3, [r2, #12]
}
 8005180:	bf00      	nop
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	e000ed00 	.word	0xe000ed00
 8005190:	05fa0000 	.word	0x05fa0000

08005194 <__NVIC_GetPriorityGrouping>:
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005198:	4b04      	ldr	r3, [pc, #16]	; (80051ac <__NVIC_GetPriorityGrouping+0x18>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	0a1b      	lsrs	r3, r3, #8
 800519e:	f003 0307 	and.w	r3, r3, #7
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	e000ed00 	.word	0xe000ed00

080051b0 <__NVIC_EnableIRQ>:
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	db0b      	blt.n	80051da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	f003 021f 	and.w	r2, r3, #31
 80051c8:	4907      	ldr	r1, [pc, #28]	; (80051e8 <__NVIC_EnableIRQ+0x38>)
 80051ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	2001      	movs	r0, #1
 80051d2:	fa00 f202 	lsl.w	r2, r0, r2
 80051d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	e000e100 	.word	0xe000e100

080051ec <__NVIC_SetPriority>:
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	6039      	str	r1, [r7, #0]
 80051f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	db0a      	blt.n	8005216 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	b2da      	uxtb	r2, r3
 8005204:	490c      	ldr	r1, [pc, #48]	; (8005238 <__NVIC_SetPriority+0x4c>)
 8005206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800520a:	0112      	lsls	r2, r2, #4
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	440b      	add	r3, r1
 8005210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005214:	e00a      	b.n	800522c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	b2da      	uxtb	r2, r3
 800521a:	4908      	ldr	r1, [pc, #32]	; (800523c <__NVIC_SetPriority+0x50>)
 800521c:	88fb      	ldrh	r3, [r7, #6]
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	3b04      	subs	r3, #4
 8005224:	0112      	lsls	r2, r2, #4
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	440b      	add	r3, r1
 800522a:	761a      	strb	r2, [r3, #24]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	e000e100 	.word	0xe000e100
 800523c:	e000ed00 	.word	0xe000ed00

08005240 <NVIC_EncodePriority>:
{
 8005240:	b480      	push	{r7}
 8005242:	b089      	sub	sp, #36	; 0x24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f1c3 0307 	rsb	r3, r3, #7
 800525a:	2b04      	cmp	r3, #4
 800525c:	bf28      	it	cs
 800525e:	2304      	movcs	r3, #4
 8005260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	3304      	adds	r3, #4
 8005266:	2b06      	cmp	r3, #6
 8005268:	d902      	bls.n	8005270 <NVIC_EncodePriority+0x30>
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	3b03      	subs	r3, #3
 800526e:	e000      	b.n	8005272 <NVIC_EncodePriority+0x32>
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43da      	mvns	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	401a      	ands	r2, r3
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	fa01 f303 	lsl.w	r3, r1, r3
 8005292:	43d9      	mvns	r1, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005298:	4313      	orrs	r3, r2
}
 800529a:	4618      	mov	r0, r3
 800529c:	3724      	adds	r7, #36	; 0x24
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052b8:	d301      	bcc.n	80052be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052ba:	2301      	movs	r3, #1
 80052bc:	e00f      	b.n	80052de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052be:	4a0a      	ldr	r2, [pc, #40]	; (80052e8 <SysTick_Config+0x40>)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052c6:	210f      	movs	r1, #15
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052cc:	f7ff ff8e 	bl	80051ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052d0:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <SysTick_Config+0x40>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052d6:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <SysTick_Config+0x40>)
 80052d8:	2207      	movs	r2, #7
 80052da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	e000e010 	.word	0xe000e010

080052ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff ff29 	bl	800514c <__NVIC_SetPriorityGrouping>
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b086      	sub	sp, #24
 8005306:	af00      	add	r7, sp, #0
 8005308:	4603      	mov	r3, r0
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005310:	f7ff ff40 	bl	8005194 <__NVIC_GetPriorityGrouping>
 8005314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	6978      	ldr	r0, [r7, #20]
 800531c:	f7ff ff90 	bl	8005240 <NVIC_EncodePriority>
 8005320:	4602      	mov	r2, r0
 8005322:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005326:	4611      	mov	r1, r2
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff ff5f 	bl	80051ec <__NVIC_SetPriority>
}
 800532e:	bf00      	nop
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	4603      	mov	r3, r0
 800533e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005340:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff ff33 	bl	80051b0 <__NVIC_EnableIRQ>
}
 800534a:	bf00      	nop
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b082      	sub	sp, #8
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff ffa4 	bl	80052a8 <SysTick_Config>
 8005360:	4603      	mov	r3, r0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005370:	f3bf 8f5f 	dmb	sy
}
 8005374:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005376:	4b07      	ldr	r3, [pc, #28]	; (8005394 <HAL_MPU_Disable+0x28>)
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	4a06      	ldr	r2, [pc, #24]	; (8005394 <HAL_MPU_Disable+0x28>)
 800537c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005380:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005382:	4b05      	ldr	r3, [pc, #20]	; (8005398 <HAL_MPU_Disable+0x2c>)
 8005384:	2200      	movs	r2, #0
 8005386:	605a      	str	r2, [r3, #4]
}
 8005388:	bf00      	nop
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	e000ed00 	.word	0xe000ed00
 8005398:	e000ed90 	.word	0xe000ed90

0800539c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80053a4:	4a0b      	ldr	r2, [pc, #44]	; (80053d4 <HAL_MPU_Enable+0x38>)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80053ae:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <HAL_MPU_Enable+0x3c>)
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	4a09      	ldr	r2, [pc, #36]	; (80053d8 <HAL_MPU_Enable+0x3c>)
 80053b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80053ba:	f3bf 8f4f 	dsb	sy
}
 80053be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80053c0:	f3bf 8f6f 	isb	sy
}
 80053c4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	e000ed90 	.word	0xe000ed90
 80053d8:	e000ed00 	.word	0xe000ed00

080053dc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	785a      	ldrb	r2, [r3, #1]
 80053e8:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <HAL_MPU_ConfigRegion+0x84>)
 80053ea:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d029      	beq.n	8005448 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80053f4:	4a1a      	ldr	r2, [pc, #104]	; (8005460 <HAL_MPU_ConfigRegion+0x84>)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	7b1b      	ldrb	r3, [r3, #12]
 8005400:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	7adb      	ldrb	r3, [r3, #11]
 8005406:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005408:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	7a9b      	ldrb	r3, [r3, #10]
 800540e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005410:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	7b5b      	ldrb	r3, [r3, #13]
 8005416:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005418:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	7b9b      	ldrb	r3, [r3, #14]
 800541e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005420:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	7bdb      	ldrb	r3, [r3, #15]
 8005426:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005428:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	7a5b      	ldrb	r3, [r3, #9]
 800542e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005430:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	7a1b      	ldrb	r3, [r3, #8]
 8005436:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005438:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	7812      	ldrb	r2, [r2, #0]
 800543e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005440:	4a07      	ldr	r2, [pc, #28]	; (8005460 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005442:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005444:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005446:	e005      	b.n	8005454 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <HAL_MPU_ConfigRegion+0x84>)
 800544a:	2200      	movs	r2, #0
 800544c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800544e:	4b04      	ldr	r3, [pc, #16]	; (8005460 <HAL_MPU_ConfigRegion+0x84>)
 8005450:	2200      	movs	r2, #0
 8005452:	611a      	str	r2, [r3, #16]
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	e000ed90 	.word	0xe000ed90

08005464 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8005468:	4b07      	ldr	r3, [pc, #28]	; (8005488 <HAL_GetCurrentCPUID+0x24>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	2b07      	cmp	r3, #7
 8005474:	d101      	bne.n	800547a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8005476:	2303      	movs	r3, #3
 8005478:	e000      	b.n	800547c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800547a:	2301      	movs	r3, #1
  }
}
 800547c:	4618      	mov	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	e000ed00 	.word	0xe000ed00

0800548c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e054      	b.n	8005548 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	7f5b      	ldrb	r3, [r3, #29]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d105      	bne.n	80054b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fb fefe 	bl	80012b0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	791b      	ldrb	r3, [r3, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10c      	bne.n	80054dc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a22      	ldr	r2, [pc, #136]	; (8005550 <HAL_CRC_Init+0xc4>)
 80054c8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0218 	bic.w	r2, r2, #24
 80054d8:	609a      	str	r2, [r3, #8]
 80054da:	e00c      	b.n	80054f6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6899      	ldr	r1, [r3, #8]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	461a      	mov	r2, r3
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f834 	bl	8005554 <HAL_CRCEx_Polynomial_Set>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e028      	b.n	8005548 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	795b      	ldrb	r3, [r3, #5]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d105      	bne.n	800550a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005506:	611a      	str	r2, [r3, #16]
 8005508:	e004      	b.n	8005514 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6912      	ldr	r2, [r2, #16]
 8005512:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695a      	ldr	r2, [r3, #20]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	04c11db7 	.word	0x04c11db7

08005554 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005560:	2300      	movs	r3, #0
 8005562:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005564:	231f      	movs	r3, #31
 8005566:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005568:	bf00      	nop
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1e5a      	subs	r2, r3, #1
 800556e:	613a      	str	r2, [r7, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d009      	beq.n	8005588 <HAL_CRCEx_Polynomial_Set+0x34>
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f003 031f 	and.w	r3, r3, #31
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0f0      	beq.n	800556a <HAL_CRCEx_Polynomial_Set+0x16>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b18      	cmp	r3, #24
 800558c:	d846      	bhi.n	800561c <HAL_CRCEx_Polynomial_Set+0xc8>
 800558e:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	08005623 	.word	0x08005623
 8005598:	0800561d 	.word	0x0800561d
 800559c:	0800561d 	.word	0x0800561d
 80055a0:	0800561d 	.word	0x0800561d
 80055a4:	0800561d 	.word	0x0800561d
 80055a8:	0800561d 	.word	0x0800561d
 80055ac:	0800561d 	.word	0x0800561d
 80055b0:	0800561d 	.word	0x0800561d
 80055b4:	08005611 	.word	0x08005611
 80055b8:	0800561d 	.word	0x0800561d
 80055bc:	0800561d 	.word	0x0800561d
 80055c0:	0800561d 	.word	0x0800561d
 80055c4:	0800561d 	.word	0x0800561d
 80055c8:	0800561d 	.word	0x0800561d
 80055cc:	0800561d 	.word	0x0800561d
 80055d0:	0800561d 	.word	0x0800561d
 80055d4:	08005605 	.word	0x08005605
 80055d8:	0800561d 	.word	0x0800561d
 80055dc:	0800561d 	.word	0x0800561d
 80055e0:	0800561d 	.word	0x0800561d
 80055e4:	0800561d 	.word	0x0800561d
 80055e8:	0800561d 	.word	0x0800561d
 80055ec:	0800561d 	.word	0x0800561d
 80055f0:	0800561d 	.word	0x0800561d
 80055f4:	080055f9 	.word	0x080055f9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2b06      	cmp	r3, #6
 80055fc:	d913      	bls.n	8005626 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005602:	e010      	b.n	8005626 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	2b07      	cmp	r3, #7
 8005608:	d90f      	bls.n	800562a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800560e:	e00c      	b.n	800562a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2b0f      	cmp	r3, #15
 8005614:	d90b      	bls.n	800562e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800561a:	e008      	b.n	800562e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	75fb      	strb	r3, [r7, #23]
      break;
 8005620:	e006      	b.n	8005630 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005622:	bf00      	nop
 8005624:	e004      	b.n	8005630 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005626:	bf00      	nop
 8005628:	e002      	b.n	8005630 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800562a:	bf00      	nop
 800562c:	e000      	b.n	8005630 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800562e:	bf00      	nop
  }
  if (status == HAL_OK)
 8005630:	7dfb      	ldrb	r3, [r7, #23]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10d      	bne.n	8005652 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f023 0118 	bic.w	r1, r3, #24
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	430a      	orrs	r2, r1
 8005650:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005652:	7dfb      	ldrb	r3, [r7, #23]
}
 8005654:	4618      	mov	r0, r3
 8005656:	371c      	adds	r7, #28
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005668:	f7fe fc6c 	bl	8003f44 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e316      	b.n	8005ca6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a66      	ldr	r2, [pc, #408]	; (8005818 <HAL_DMA_Init+0x1b8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d04a      	beq.n	8005718 <HAL_DMA_Init+0xb8>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a65      	ldr	r2, [pc, #404]	; (800581c <HAL_DMA_Init+0x1bc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d045      	beq.n	8005718 <HAL_DMA_Init+0xb8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a63      	ldr	r2, [pc, #396]	; (8005820 <HAL_DMA_Init+0x1c0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d040      	beq.n	8005718 <HAL_DMA_Init+0xb8>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a62      	ldr	r2, [pc, #392]	; (8005824 <HAL_DMA_Init+0x1c4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d03b      	beq.n	8005718 <HAL_DMA_Init+0xb8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a60      	ldr	r2, [pc, #384]	; (8005828 <HAL_DMA_Init+0x1c8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d036      	beq.n	8005718 <HAL_DMA_Init+0xb8>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a5f      	ldr	r2, [pc, #380]	; (800582c <HAL_DMA_Init+0x1cc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d031      	beq.n	8005718 <HAL_DMA_Init+0xb8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a5d      	ldr	r2, [pc, #372]	; (8005830 <HAL_DMA_Init+0x1d0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d02c      	beq.n	8005718 <HAL_DMA_Init+0xb8>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a5c      	ldr	r2, [pc, #368]	; (8005834 <HAL_DMA_Init+0x1d4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d027      	beq.n	8005718 <HAL_DMA_Init+0xb8>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a5a      	ldr	r2, [pc, #360]	; (8005838 <HAL_DMA_Init+0x1d8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d022      	beq.n	8005718 <HAL_DMA_Init+0xb8>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a59      	ldr	r2, [pc, #356]	; (800583c <HAL_DMA_Init+0x1dc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d01d      	beq.n	8005718 <HAL_DMA_Init+0xb8>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a57      	ldr	r2, [pc, #348]	; (8005840 <HAL_DMA_Init+0x1e0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d018      	beq.n	8005718 <HAL_DMA_Init+0xb8>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a56      	ldr	r2, [pc, #344]	; (8005844 <HAL_DMA_Init+0x1e4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d013      	beq.n	8005718 <HAL_DMA_Init+0xb8>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a54      	ldr	r2, [pc, #336]	; (8005848 <HAL_DMA_Init+0x1e8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00e      	beq.n	8005718 <HAL_DMA_Init+0xb8>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a53      	ldr	r2, [pc, #332]	; (800584c <HAL_DMA_Init+0x1ec>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d009      	beq.n	8005718 <HAL_DMA_Init+0xb8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a51      	ldr	r2, [pc, #324]	; (8005850 <HAL_DMA_Init+0x1f0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d004      	beq.n	8005718 <HAL_DMA_Init+0xb8>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a50      	ldr	r2, [pc, #320]	; (8005854 <HAL_DMA_Init+0x1f4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d101      	bne.n	800571c <HAL_DMA_Init+0xbc>
 8005718:	2301      	movs	r3, #1
 800571a:	e000      	b.n	800571e <HAL_DMA_Init+0xbe>
 800571c:	2300      	movs	r3, #0
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 813b 	beq.w	800599a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a37      	ldr	r2, [pc, #220]	; (8005818 <HAL_DMA_Init+0x1b8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d04a      	beq.n	80057d4 <HAL_DMA_Init+0x174>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a36      	ldr	r2, [pc, #216]	; (800581c <HAL_DMA_Init+0x1bc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d045      	beq.n	80057d4 <HAL_DMA_Init+0x174>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a34      	ldr	r2, [pc, #208]	; (8005820 <HAL_DMA_Init+0x1c0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d040      	beq.n	80057d4 <HAL_DMA_Init+0x174>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a33      	ldr	r2, [pc, #204]	; (8005824 <HAL_DMA_Init+0x1c4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d03b      	beq.n	80057d4 <HAL_DMA_Init+0x174>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a31      	ldr	r2, [pc, #196]	; (8005828 <HAL_DMA_Init+0x1c8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d036      	beq.n	80057d4 <HAL_DMA_Init+0x174>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a30      	ldr	r2, [pc, #192]	; (800582c <HAL_DMA_Init+0x1cc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d031      	beq.n	80057d4 <HAL_DMA_Init+0x174>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a2e      	ldr	r2, [pc, #184]	; (8005830 <HAL_DMA_Init+0x1d0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d02c      	beq.n	80057d4 <HAL_DMA_Init+0x174>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a2d      	ldr	r2, [pc, #180]	; (8005834 <HAL_DMA_Init+0x1d4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d027      	beq.n	80057d4 <HAL_DMA_Init+0x174>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a2b      	ldr	r2, [pc, #172]	; (8005838 <HAL_DMA_Init+0x1d8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d022      	beq.n	80057d4 <HAL_DMA_Init+0x174>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a2a      	ldr	r2, [pc, #168]	; (800583c <HAL_DMA_Init+0x1dc>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d01d      	beq.n	80057d4 <HAL_DMA_Init+0x174>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a28      	ldr	r2, [pc, #160]	; (8005840 <HAL_DMA_Init+0x1e0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d018      	beq.n	80057d4 <HAL_DMA_Init+0x174>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a27      	ldr	r2, [pc, #156]	; (8005844 <HAL_DMA_Init+0x1e4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d013      	beq.n	80057d4 <HAL_DMA_Init+0x174>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a25      	ldr	r2, [pc, #148]	; (8005848 <HAL_DMA_Init+0x1e8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00e      	beq.n	80057d4 <HAL_DMA_Init+0x174>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a24      	ldr	r2, [pc, #144]	; (800584c <HAL_DMA_Init+0x1ec>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d009      	beq.n	80057d4 <HAL_DMA_Init+0x174>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a22      	ldr	r2, [pc, #136]	; (8005850 <HAL_DMA_Init+0x1f0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_DMA_Init+0x174>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a21      	ldr	r2, [pc, #132]	; (8005854 <HAL_DMA_Init+0x1f4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d108      	bne.n	80057e6 <HAL_DMA_Init+0x186>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	e007      	b.n	80057f6 <HAL_DMA_Init+0x196>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0201 	bic.w	r2, r2, #1
 80057f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057f6:	e02f      	b.n	8005858 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057f8:	f7fe fba4 	bl	8003f44 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b05      	cmp	r3, #5
 8005804:	d928      	bls.n	8005858 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2203      	movs	r2, #3
 8005810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e246      	b.n	8005ca6 <HAL_DMA_Init+0x646>
 8005818:	40020010 	.word	0x40020010
 800581c:	40020028 	.word	0x40020028
 8005820:	40020040 	.word	0x40020040
 8005824:	40020058 	.word	0x40020058
 8005828:	40020070 	.word	0x40020070
 800582c:	40020088 	.word	0x40020088
 8005830:	400200a0 	.word	0x400200a0
 8005834:	400200b8 	.word	0x400200b8
 8005838:	40020410 	.word	0x40020410
 800583c:	40020428 	.word	0x40020428
 8005840:	40020440 	.word	0x40020440
 8005844:	40020458 	.word	0x40020458
 8005848:	40020470 	.word	0x40020470
 800584c:	40020488 	.word	0x40020488
 8005850:	400204a0 	.word	0x400204a0
 8005854:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1c8      	bne.n	80057f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4b83      	ldr	r3, [pc, #524]	; (8005a80 <HAL_DMA_Init+0x420>)
 8005872:	4013      	ands	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800587e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800588a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005896:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d107      	bne.n	80058bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b4:	4313      	orrs	r3, r2
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80058bc:	4b71      	ldr	r3, [pc, #452]	; (8005a84 <HAL_DMA_Init+0x424>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	4b71      	ldr	r3, [pc, #452]	; (8005a88 <HAL_DMA_Init+0x428>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058c8:	d328      	bcc.n	800591c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b28      	cmp	r3, #40	; 0x28
 80058d0:	d903      	bls.n	80058da <HAL_DMA_Init+0x27a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b2e      	cmp	r3, #46	; 0x2e
 80058d8:	d917      	bls.n	800590a <HAL_DMA_Init+0x2aa>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b3e      	cmp	r3, #62	; 0x3e
 80058e0:	d903      	bls.n	80058ea <HAL_DMA_Init+0x28a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b42      	cmp	r3, #66	; 0x42
 80058e8:	d90f      	bls.n	800590a <HAL_DMA_Init+0x2aa>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b46      	cmp	r3, #70	; 0x46
 80058f0:	d903      	bls.n	80058fa <HAL_DMA_Init+0x29a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b48      	cmp	r3, #72	; 0x48
 80058f8:	d907      	bls.n	800590a <HAL_DMA_Init+0x2aa>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b4e      	cmp	r3, #78	; 0x4e
 8005900:	d905      	bls.n	800590e <HAL_DMA_Init+0x2ae>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b52      	cmp	r3, #82	; 0x52
 8005908:	d801      	bhi.n	800590e <HAL_DMA_Init+0x2ae>
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <HAL_DMA_Init+0x2b0>
 800590e:	2300      	movs	r3, #0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800591a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f023 0307 	bic.w	r3, r3, #7
 8005932:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	2b04      	cmp	r3, #4
 8005944:	d117      	bne.n	8005976 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00e      	beq.n	8005976 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 fddb 	bl	8007514 <DMA_CheckFifoParam>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2240      	movs	r2, #64	; 0x40
 8005968:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e197      	b.n	8005ca6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 fd16 	bl	80073b0 <DMA_CalcBaseAndBitshift>
 8005984:	4603      	mov	r3, r0
 8005986:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598c:	f003 031f 	and.w	r3, r3, #31
 8005990:	223f      	movs	r2, #63	; 0x3f
 8005992:	409a      	lsls	r2, r3
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	609a      	str	r2, [r3, #8]
 8005998:	e0cd      	b.n	8005b36 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a3b      	ldr	r2, [pc, #236]	; (8005a8c <HAL_DMA_Init+0x42c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d022      	beq.n	80059ea <HAL_DMA_Init+0x38a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a39      	ldr	r2, [pc, #228]	; (8005a90 <HAL_DMA_Init+0x430>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01d      	beq.n	80059ea <HAL_DMA_Init+0x38a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a38      	ldr	r2, [pc, #224]	; (8005a94 <HAL_DMA_Init+0x434>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d018      	beq.n	80059ea <HAL_DMA_Init+0x38a>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a36      	ldr	r2, [pc, #216]	; (8005a98 <HAL_DMA_Init+0x438>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <HAL_DMA_Init+0x38a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a35      	ldr	r2, [pc, #212]	; (8005a9c <HAL_DMA_Init+0x43c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00e      	beq.n	80059ea <HAL_DMA_Init+0x38a>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a33      	ldr	r2, [pc, #204]	; (8005aa0 <HAL_DMA_Init+0x440>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d009      	beq.n	80059ea <HAL_DMA_Init+0x38a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a32      	ldr	r2, [pc, #200]	; (8005aa4 <HAL_DMA_Init+0x444>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d004      	beq.n	80059ea <HAL_DMA_Init+0x38a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a30      	ldr	r2, [pc, #192]	; (8005aa8 <HAL_DMA_Init+0x448>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d101      	bne.n	80059ee <HAL_DMA_Init+0x38e>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <HAL_DMA_Init+0x390>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 8097 	beq.w	8005b24 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a24      	ldr	r2, [pc, #144]	; (8005a8c <HAL_DMA_Init+0x42c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d021      	beq.n	8005a44 <HAL_DMA_Init+0x3e4>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a22      	ldr	r2, [pc, #136]	; (8005a90 <HAL_DMA_Init+0x430>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01c      	beq.n	8005a44 <HAL_DMA_Init+0x3e4>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a21      	ldr	r2, [pc, #132]	; (8005a94 <HAL_DMA_Init+0x434>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d017      	beq.n	8005a44 <HAL_DMA_Init+0x3e4>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a1f      	ldr	r2, [pc, #124]	; (8005a98 <HAL_DMA_Init+0x438>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d012      	beq.n	8005a44 <HAL_DMA_Init+0x3e4>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1e      	ldr	r2, [pc, #120]	; (8005a9c <HAL_DMA_Init+0x43c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00d      	beq.n	8005a44 <HAL_DMA_Init+0x3e4>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1c      	ldr	r2, [pc, #112]	; (8005aa0 <HAL_DMA_Init+0x440>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d008      	beq.n	8005a44 <HAL_DMA_Init+0x3e4>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a1b      	ldr	r2, [pc, #108]	; (8005aa4 <HAL_DMA_Init+0x444>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <HAL_DMA_Init+0x3e4>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a19      	ldr	r2, [pc, #100]	; (8005aa8 <HAL_DMA_Init+0x448>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2202      	movs	r2, #2
 8005a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4b12      	ldr	r3, [pc, #72]	; (8005aac <HAL_DMA_Init+0x44c>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b40      	cmp	r3, #64	; 0x40
 8005a6c:	d020      	beq.n	8005ab0 <HAL_DMA_Init+0x450>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d102      	bne.n	8005a7c <HAL_DMA_Init+0x41c>
 8005a76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a7a:	e01a      	b.n	8005ab2 <HAL_DMA_Init+0x452>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e018      	b.n	8005ab2 <HAL_DMA_Init+0x452>
 8005a80:	fe10803f 	.word	0xfe10803f
 8005a84:	5c001000 	.word	0x5c001000
 8005a88:	ffff0000 	.word	0xffff0000
 8005a8c:	58025408 	.word	0x58025408
 8005a90:	5802541c 	.word	0x5802541c
 8005a94:	58025430 	.word	0x58025430
 8005a98:	58025444 	.word	0x58025444
 8005a9c:	58025458 	.word	0x58025458
 8005aa0:	5802546c 	.word	0x5802546c
 8005aa4:	58025480 	.word	0x58025480
 8005aa8:	58025494 	.word	0x58025494
 8005aac:	fffe000f 	.word	0xfffe000f
 8005ab0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	68d2      	ldr	r2, [r2, #12]
 8005ab6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005ab8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005ac0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005ac8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005ad0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005ad8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005ae0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	461a      	mov	r2, r3
 8005af6:	4b6e      	ldr	r3, [pc, #440]	; (8005cb0 <HAL_DMA_Init+0x650>)
 8005af8:	4413      	add	r3, r2
 8005afa:	4a6e      	ldr	r2, [pc, #440]	; (8005cb4 <HAL_DMA_Init+0x654>)
 8005afc:	fba2 2303 	umull	r2, r3, r2, r3
 8005b00:	091b      	lsrs	r3, r3, #4
 8005b02:	009a      	lsls	r2, r3, #2
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 fc51 	bl	80073b0 <DMA_CalcBaseAndBitshift>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	409a      	lsls	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	605a      	str	r2, [r3, #4]
 8005b22:	e008      	b.n	8005b36 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2240      	movs	r2, #64	; 0x40
 8005b28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2203      	movs	r2, #3
 8005b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e0b7      	b.n	8005ca6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a5f      	ldr	r2, [pc, #380]	; (8005cb8 <HAL_DMA_Init+0x658>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d072      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a5d      	ldr	r2, [pc, #372]	; (8005cbc <HAL_DMA_Init+0x65c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d06d      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a5c      	ldr	r2, [pc, #368]	; (8005cc0 <HAL_DMA_Init+0x660>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d068      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a5a      	ldr	r2, [pc, #360]	; (8005cc4 <HAL_DMA_Init+0x664>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d063      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a59      	ldr	r2, [pc, #356]	; (8005cc8 <HAL_DMA_Init+0x668>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d05e      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a57      	ldr	r2, [pc, #348]	; (8005ccc <HAL_DMA_Init+0x66c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d059      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a56      	ldr	r2, [pc, #344]	; (8005cd0 <HAL_DMA_Init+0x670>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d054      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a54      	ldr	r2, [pc, #336]	; (8005cd4 <HAL_DMA_Init+0x674>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d04f      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a53      	ldr	r2, [pc, #332]	; (8005cd8 <HAL_DMA_Init+0x678>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d04a      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a51      	ldr	r2, [pc, #324]	; (8005cdc <HAL_DMA_Init+0x67c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d045      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a50      	ldr	r2, [pc, #320]	; (8005ce0 <HAL_DMA_Init+0x680>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d040      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a4e      	ldr	r2, [pc, #312]	; (8005ce4 <HAL_DMA_Init+0x684>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d03b      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a4d      	ldr	r2, [pc, #308]	; (8005ce8 <HAL_DMA_Init+0x688>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d036      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a4b      	ldr	r2, [pc, #300]	; (8005cec <HAL_DMA_Init+0x68c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d031      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a4a      	ldr	r2, [pc, #296]	; (8005cf0 <HAL_DMA_Init+0x690>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d02c      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a48      	ldr	r2, [pc, #288]	; (8005cf4 <HAL_DMA_Init+0x694>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d027      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a47      	ldr	r2, [pc, #284]	; (8005cf8 <HAL_DMA_Init+0x698>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d022      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a45      	ldr	r2, [pc, #276]	; (8005cfc <HAL_DMA_Init+0x69c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d01d      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a44      	ldr	r2, [pc, #272]	; (8005d00 <HAL_DMA_Init+0x6a0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d018      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a42      	ldr	r2, [pc, #264]	; (8005d04 <HAL_DMA_Init+0x6a4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a41      	ldr	r2, [pc, #260]	; (8005d08 <HAL_DMA_Init+0x6a8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00e      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a3f      	ldr	r2, [pc, #252]	; (8005d0c <HAL_DMA_Init+0x6ac>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d009      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a3e      	ldr	r2, [pc, #248]	; (8005d10 <HAL_DMA_Init+0x6b0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d004      	beq.n	8005c26 <HAL_DMA_Init+0x5c6>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a3c      	ldr	r2, [pc, #240]	; (8005d14 <HAL_DMA_Init+0x6b4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d101      	bne.n	8005c2a <HAL_DMA_Init+0x5ca>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <HAL_DMA_Init+0x5cc>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d032      	beq.n	8005c96 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f001 fceb 	bl	800760c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	2b80      	cmp	r3, #128	; 0x80
 8005c3c:	d102      	bne.n	8005c44 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c58:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d010      	beq.n	8005c84 <HAL_DMA_Init+0x624>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d80c      	bhi.n	8005c84 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f001 fd68 	bl	8007740 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c80:	605a      	str	r2, [r3, #4]
 8005c82:	e008      	b.n	8005c96 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	a7fdabf8 	.word	0xa7fdabf8
 8005cb4:	cccccccd 	.word	0xcccccccd
 8005cb8:	40020010 	.word	0x40020010
 8005cbc:	40020028 	.word	0x40020028
 8005cc0:	40020040 	.word	0x40020040
 8005cc4:	40020058 	.word	0x40020058
 8005cc8:	40020070 	.word	0x40020070
 8005ccc:	40020088 	.word	0x40020088
 8005cd0:	400200a0 	.word	0x400200a0
 8005cd4:	400200b8 	.word	0x400200b8
 8005cd8:	40020410 	.word	0x40020410
 8005cdc:	40020428 	.word	0x40020428
 8005ce0:	40020440 	.word	0x40020440
 8005ce4:	40020458 	.word	0x40020458
 8005ce8:	40020470 	.word	0x40020470
 8005cec:	40020488 	.word	0x40020488
 8005cf0:	400204a0 	.word	0x400204a0
 8005cf4:	400204b8 	.word	0x400204b8
 8005cf8:	58025408 	.word	0x58025408
 8005cfc:	5802541c 	.word	0x5802541c
 8005d00:	58025430 	.word	0x58025430
 8005d04:	58025444 	.word	0x58025444
 8005d08:	58025458 	.word	0x58025458
 8005d0c:	5802546c 	.word	0x5802546c
 8005d10:	58025480 	.word	0x58025480
 8005d14:	58025494 	.word	0x58025494

08005d18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e226      	b.n	8006182 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_DMA_Start_IT+0x2a>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e21f      	b.n	8006182 <HAL_DMA_Start_IT+0x46a>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	f040 820a 	bne.w	800616c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a68      	ldr	r2, [pc, #416]	; (8005f0c <HAL_DMA_Start_IT+0x1f4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d04a      	beq.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a66      	ldr	r2, [pc, #408]	; (8005f10 <HAL_DMA_Start_IT+0x1f8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d045      	beq.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a65      	ldr	r2, [pc, #404]	; (8005f14 <HAL_DMA_Start_IT+0x1fc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d040      	beq.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a63      	ldr	r2, [pc, #396]	; (8005f18 <HAL_DMA_Start_IT+0x200>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d03b      	beq.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a62      	ldr	r2, [pc, #392]	; (8005f1c <HAL_DMA_Start_IT+0x204>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d036      	beq.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a60      	ldr	r2, [pc, #384]	; (8005f20 <HAL_DMA_Start_IT+0x208>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d031      	beq.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a5f      	ldr	r2, [pc, #380]	; (8005f24 <HAL_DMA_Start_IT+0x20c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d02c      	beq.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a5d      	ldr	r2, [pc, #372]	; (8005f28 <HAL_DMA_Start_IT+0x210>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d027      	beq.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a5c      	ldr	r2, [pc, #368]	; (8005f2c <HAL_DMA_Start_IT+0x214>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d022      	beq.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a5a      	ldr	r2, [pc, #360]	; (8005f30 <HAL_DMA_Start_IT+0x218>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d01d      	beq.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a59      	ldr	r2, [pc, #356]	; (8005f34 <HAL_DMA_Start_IT+0x21c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d018      	beq.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a57      	ldr	r2, [pc, #348]	; (8005f38 <HAL_DMA_Start_IT+0x220>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d013      	beq.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a56      	ldr	r2, [pc, #344]	; (8005f3c <HAL_DMA_Start_IT+0x224>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00e      	beq.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a54      	ldr	r2, [pc, #336]	; (8005f40 <HAL_DMA_Start_IT+0x228>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d009      	beq.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a53      	ldr	r2, [pc, #332]	; (8005f44 <HAL_DMA_Start_IT+0x22c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d004      	beq.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a51      	ldr	r2, [pc, #324]	; (8005f48 <HAL_DMA_Start_IT+0x230>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d108      	bne.n	8005e18 <HAL_DMA_Start_IT+0x100>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0201 	bic.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	e007      	b.n	8005e28 <HAL_DMA_Start_IT+0x110>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0201 	bic.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f001 f912 	bl	8007058 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a34      	ldr	r2, [pc, #208]	; (8005f0c <HAL_DMA_Start_IT+0x1f4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d04a      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x1bc>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a33      	ldr	r2, [pc, #204]	; (8005f10 <HAL_DMA_Start_IT+0x1f8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d045      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x1bc>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a31      	ldr	r2, [pc, #196]	; (8005f14 <HAL_DMA_Start_IT+0x1fc>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d040      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x1bc>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a30      	ldr	r2, [pc, #192]	; (8005f18 <HAL_DMA_Start_IT+0x200>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d03b      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x1bc>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a2e      	ldr	r2, [pc, #184]	; (8005f1c <HAL_DMA_Start_IT+0x204>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d036      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x1bc>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a2d      	ldr	r2, [pc, #180]	; (8005f20 <HAL_DMA_Start_IT+0x208>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d031      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x1bc>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a2b      	ldr	r2, [pc, #172]	; (8005f24 <HAL_DMA_Start_IT+0x20c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d02c      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x1bc>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a2a      	ldr	r2, [pc, #168]	; (8005f28 <HAL_DMA_Start_IT+0x210>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d027      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x1bc>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a28      	ldr	r2, [pc, #160]	; (8005f2c <HAL_DMA_Start_IT+0x214>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d022      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x1bc>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a27      	ldr	r2, [pc, #156]	; (8005f30 <HAL_DMA_Start_IT+0x218>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d01d      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x1bc>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a25      	ldr	r2, [pc, #148]	; (8005f34 <HAL_DMA_Start_IT+0x21c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d018      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x1bc>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a24      	ldr	r2, [pc, #144]	; (8005f38 <HAL_DMA_Start_IT+0x220>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d013      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x1bc>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a22      	ldr	r2, [pc, #136]	; (8005f3c <HAL_DMA_Start_IT+0x224>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00e      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x1bc>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a21      	ldr	r2, [pc, #132]	; (8005f40 <HAL_DMA_Start_IT+0x228>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d009      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x1bc>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a1f      	ldr	r2, [pc, #124]	; (8005f44 <HAL_DMA_Start_IT+0x22c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d004      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x1bc>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a1e      	ldr	r2, [pc, #120]	; (8005f48 <HAL_DMA_Start_IT+0x230>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d101      	bne.n	8005ed8 <HAL_DMA_Start_IT+0x1c0>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e000      	b.n	8005eda <HAL_DMA_Start_IT+0x1c2>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d036      	beq.n	8005f4c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f023 021e 	bic.w	r2, r3, #30
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 0216 	orr.w	r2, r2, #22
 8005ef0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d03e      	beq.n	8005f78 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f042 0208 	orr.w	r2, r2, #8
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	e035      	b.n	8005f78 <HAL_DMA_Start_IT+0x260>
 8005f0c:	40020010 	.word	0x40020010
 8005f10:	40020028 	.word	0x40020028
 8005f14:	40020040 	.word	0x40020040
 8005f18:	40020058 	.word	0x40020058
 8005f1c:	40020070 	.word	0x40020070
 8005f20:	40020088 	.word	0x40020088
 8005f24:	400200a0 	.word	0x400200a0
 8005f28:	400200b8 	.word	0x400200b8
 8005f2c:	40020410 	.word	0x40020410
 8005f30:	40020428 	.word	0x40020428
 8005f34:	40020440 	.word	0x40020440
 8005f38:	40020458 	.word	0x40020458
 8005f3c:	40020470 	.word	0x40020470
 8005f40:	40020488 	.word	0x40020488
 8005f44:	400204a0 	.word	0x400204a0
 8005f48:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f023 020e 	bic.w	r2, r3, #14
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 020a 	orr.w	r2, r2, #10
 8005f5e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0204 	orr.w	r2, r2, #4
 8005f76:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a83      	ldr	r2, [pc, #524]	; (800618c <HAL_DMA_Start_IT+0x474>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d072      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a82      	ldr	r2, [pc, #520]	; (8006190 <HAL_DMA_Start_IT+0x478>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d06d      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a80      	ldr	r2, [pc, #512]	; (8006194 <HAL_DMA_Start_IT+0x47c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d068      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a7f      	ldr	r2, [pc, #508]	; (8006198 <HAL_DMA_Start_IT+0x480>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d063      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a7d      	ldr	r2, [pc, #500]	; (800619c <HAL_DMA_Start_IT+0x484>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d05e      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a7c      	ldr	r2, [pc, #496]	; (80061a0 <HAL_DMA_Start_IT+0x488>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d059      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a7a      	ldr	r2, [pc, #488]	; (80061a4 <HAL_DMA_Start_IT+0x48c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d054      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a79      	ldr	r2, [pc, #484]	; (80061a8 <HAL_DMA_Start_IT+0x490>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d04f      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a77      	ldr	r2, [pc, #476]	; (80061ac <HAL_DMA_Start_IT+0x494>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d04a      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a76      	ldr	r2, [pc, #472]	; (80061b0 <HAL_DMA_Start_IT+0x498>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d045      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a74      	ldr	r2, [pc, #464]	; (80061b4 <HAL_DMA_Start_IT+0x49c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d040      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a73      	ldr	r2, [pc, #460]	; (80061b8 <HAL_DMA_Start_IT+0x4a0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d03b      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a71      	ldr	r2, [pc, #452]	; (80061bc <HAL_DMA_Start_IT+0x4a4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d036      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a70      	ldr	r2, [pc, #448]	; (80061c0 <HAL_DMA_Start_IT+0x4a8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d031      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a6e      	ldr	r2, [pc, #440]	; (80061c4 <HAL_DMA_Start_IT+0x4ac>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d02c      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a6d      	ldr	r2, [pc, #436]	; (80061c8 <HAL_DMA_Start_IT+0x4b0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d027      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a6b      	ldr	r2, [pc, #428]	; (80061cc <HAL_DMA_Start_IT+0x4b4>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d022      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a6a      	ldr	r2, [pc, #424]	; (80061d0 <HAL_DMA_Start_IT+0x4b8>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d01d      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a68      	ldr	r2, [pc, #416]	; (80061d4 <HAL_DMA_Start_IT+0x4bc>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d018      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a67      	ldr	r2, [pc, #412]	; (80061d8 <HAL_DMA_Start_IT+0x4c0>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d013      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a65      	ldr	r2, [pc, #404]	; (80061dc <HAL_DMA_Start_IT+0x4c4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00e      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a64      	ldr	r2, [pc, #400]	; (80061e0 <HAL_DMA_Start_IT+0x4c8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d009      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a62      	ldr	r2, [pc, #392]	; (80061e4 <HAL_DMA_Start_IT+0x4cc>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <HAL_DMA_Start_IT+0x350>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a61      	ldr	r2, [pc, #388]	; (80061e8 <HAL_DMA_Start_IT+0x4d0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d101      	bne.n	800606c <HAL_DMA_Start_IT+0x354>
 8006068:	2301      	movs	r3, #1
 800606a:	e000      	b.n	800606e <HAL_DMA_Start_IT+0x356>
 800606c:	2300      	movs	r3, #0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d01a      	beq.n	80060a8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800608e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006094:	2b00      	cmp	r3, #0
 8006096:	d007      	beq.n	80060a8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a37      	ldr	r2, [pc, #220]	; (800618c <HAL_DMA_Start_IT+0x474>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d04a      	beq.n	8006148 <HAL_DMA_Start_IT+0x430>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a36      	ldr	r2, [pc, #216]	; (8006190 <HAL_DMA_Start_IT+0x478>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d045      	beq.n	8006148 <HAL_DMA_Start_IT+0x430>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a34      	ldr	r2, [pc, #208]	; (8006194 <HAL_DMA_Start_IT+0x47c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d040      	beq.n	8006148 <HAL_DMA_Start_IT+0x430>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a33      	ldr	r2, [pc, #204]	; (8006198 <HAL_DMA_Start_IT+0x480>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d03b      	beq.n	8006148 <HAL_DMA_Start_IT+0x430>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a31      	ldr	r2, [pc, #196]	; (800619c <HAL_DMA_Start_IT+0x484>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d036      	beq.n	8006148 <HAL_DMA_Start_IT+0x430>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a30      	ldr	r2, [pc, #192]	; (80061a0 <HAL_DMA_Start_IT+0x488>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d031      	beq.n	8006148 <HAL_DMA_Start_IT+0x430>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a2e      	ldr	r2, [pc, #184]	; (80061a4 <HAL_DMA_Start_IT+0x48c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d02c      	beq.n	8006148 <HAL_DMA_Start_IT+0x430>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a2d      	ldr	r2, [pc, #180]	; (80061a8 <HAL_DMA_Start_IT+0x490>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d027      	beq.n	8006148 <HAL_DMA_Start_IT+0x430>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a2b      	ldr	r2, [pc, #172]	; (80061ac <HAL_DMA_Start_IT+0x494>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d022      	beq.n	8006148 <HAL_DMA_Start_IT+0x430>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a2a      	ldr	r2, [pc, #168]	; (80061b0 <HAL_DMA_Start_IT+0x498>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d01d      	beq.n	8006148 <HAL_DMA_Start_IT+0x430>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a28      	ldr	r2, [pc, #160]	; (80061b4 <HAL_DMA_Start_IT+0x49c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d018      	beq.n	8006148 <HAL_DMA_Start_IT+0x430>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a27      	ldr	r2, [pc, #156]	; (80061b8 <HAL_DMA_Start_IT+0x4a0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <HAL_DMA_Start_IT+0x430>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a25      	ldr	r2, [pc, #148]	; (80061bc <HAL_DMA_Start_IT+0x4a4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00e      	beq.n	8006148 <HAL_DMA_Start_IT+0x430>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a24      	ldr	r2, [pc, #144]	; (80061c0 <HAL_DMA_Start_IT+0x4a8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d009      	beq.n	8006148 <HAL_DMA_Start_IT+0x430>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a22      	ldr	r2, [pc, #136]	; (80061c4 <HAL_DMA_Start_IT+0x4ac>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <HAL_DMA_Start_IT+0x430>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a21      	ldr	r2, [pc, #132]	; (80061c8 <HAL_DMA_Start_IT+0x4b0>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d108      	bne.n	800615a <HAL_DMA_Start_IT+0x442>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	e012      	b.n	8006180 <HAL_DMA_Start_IT+0x468>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0201 	orr.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e009      	b.n	8006180 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800617a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006180:	7dfb      	ldrb	r3, [r7, #23]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	40020010 	.word	0x40020010
 8006190:	40020028 	.word	0x40020028
 8006194:	40020040 	.word	0x40020040
 8006198:	40020058 	.word	0x40020058
 800619c:	40020070 	.word	0x40020070
 80061a0:	40020088 	.word	0x40020088
 80061a4:	400200a0 	.word	0x400200a0
 80061a8:	400200b8 	.word	0x400200b8
 80061ac:	40020410 	.word	0x40020410
 80061b0:	40020428 	.word	0x40020428
 80061b4:	40020440 	.word	0x40020440
 80061b8:	40020458 	.word	0x40020458
 80061bc:	40020470 	.word	0x40020470
 80061c0:	40020488 	.word	0x40020488
 80061c4:	400204a0 	.word	0x400204a0
 80061c8:	400204b8 	.word	0x400204b8
 80061cc:	58025408 	.word	0x58025408
 80061d0:	5802541c 	.word	0x5802541c
 80061d4:	58025430 	.word	0x58025430
 80061d8:	58025444 	.word	0x58025444
 80061dc:	58025458 	.word	0x58025458
 80061e0:	5802546c 	.word	0x5802546c
 80061e4:	58025480 	.word	0x58025480
 80061e8:	58025494 	.word	0x58025494

080061ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	; 0x28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80061f8:	4b67      	ldr	r3, [pc, #412]	; (8006398 <HAL_DMA_IRQHandler+0x1ac>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a67      	ldr	r2, [pc, #412]	; (800639c <HAL_DMA_IRQHandler+0x1b0>)
 80061fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006202:	0a9b      	lsrs	r3, r3, #10
 8006204:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006210:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a5f      	ldr	r2, [pc, #380]	; (80063a0 <HAL_DMA_IRQHandler+0x1b4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d04a      	beq.n	80062be <HAL_DMA_IRQHandler+0xd2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a5d      	ldr	r2, [pc, #372]	; (80063a4 <HAL_DMA_IRQHandler+0x1b8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d045      	beq.n	80062be <HAL_DMA_IRQHandler+0xd2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a5c      	ldr	r2, [pc, #368]	; (80063a8 <HAL_DMA_IRQHandler+0x1bc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d040      	beq.n	80062be <HAL_DMA_IRQHandler+0xd2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a5a      	ldr	r2, [pc, #360]	; (80063ac <HAL_DMA_IRQHandler+0x1c0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d03b      	beq.n	80062be <HAL_DMA_IRQHandler+0xd2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a59      	ldr	r2, [pc, #356]	; (80063b0 <HAL_DMA_IRQHandler+0x1c4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d036      	beq.n	80062be <HAL_DMA_IRQHandler+0xd2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a57      	ldr	r2, [pc, #348]	; (80063b4 <HAL_DMA_IRQHandler+0x1c8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d031      	beq.n	80062be <HAL_DMA_IRQHandler+0xd2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a56      	ldr	r2, [pc, #344]	; (80063b8 <HAL_DMA_IRQHandler+0x1cc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d02c      	beq.n	80062be <HAL_DMA_IRQHandler+0xd2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a54      	ldr	r2, [pc, #336]	; (80063bc <HAL_DMA_IRQHandler+0x1d0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d027      	beq.n	80062be <HAL_DMA_IRQHandler+0xd2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a53      	ldr	r2, [pc, #332]	; (80063c0 <HAL_DMA_IRQHandler+0x1d4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d022      	beq.n	80062be <HAL_DMA_IRQHandler+0xd2>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a51      	ldr	r2, [pc, #324]	; (80063c4 <HAL_DMA_IRQHandler+0x1d8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d01d      	beq.n	80062be <HAL_DMA_IRQHandler+0xd2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a50      	ldr	r2, [pc, #320]	; (80063c8 <HAL_DMA_IRQHandler+0x1dc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d018      	beq.n	80062be <HAL_DMA_IRQHandler+0xd2>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a4e      	ldr	r2, [pc, #312]	; (80063cc <HAL_DMA_IRQHandler+0x1e0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d013      	beq.n	80062be <HAL_DMA_IRQHandler+0xd2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a4d      	ldr	r2, [pc, #308]	; (80063d0 <HAL_DMA_IRQHandler+0x1e4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00e      	beq.n	80062be <HAL_DMA_IRQHandler+0xd2>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a4b      	ldr	r2, [pc, #300]	; (80063d4 <HAL_DMA_IRQHandler+0x1e8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d009      	beq.n	80062be <HAL_DMA_IRQHandler+0xd2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a4a      	ldr	r2, [pc, #296]	; (80063d8 <HAL_DMA_IRQHandler+0x1ec>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d004      	beq.n	80062be <HAL_DMA_IRQHandler+0xd2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a48      	ldr	r2, [pc, #288]	; (80063dc <HAL_DMA_IRQHandler+0x1f0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d101      	bne.n	80062c2 <HAL_DMA_IRQHandler+0xd6>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <HAL_DMA_IRQHandler+0xd8>
 80062c2:	2300      	movs	r3, #0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 842b 	beq.w	8006b20 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ce:	f003 031f 	and.w	r3, r3, #31
 80062d2:	2208      	movs	r2, #8
 80062d4:	409a      	lsls	r2, r3
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	4013      	ands	r3, r2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 80a2 	beq.w	8006424 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a2e      	ldr	r2, [pc, #184]	; (80063a0 <HAL_DMA_IRQHandler+0x1b4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d04a      	beq.n	8006380 <HAL_DMA_IRQHandler+0x194>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a2d      	ldr	r2, [pc, #180]	; (80063a4 <HAL_DMA_IRQHandler+0x1b8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d045      	beq.n	8006380 <HAL_DMA_IRQHandler+0x194>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a2b      	ldr	r2, [pc, #172]	; (80063a8 <HAL_DMA_IRQHandler+0x1bc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d040      	beq.n	8006380 <HAL_DMA_IRQHandler+0x194>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a2a      	ldr	r2, [pc, #168]	; (80063ac <HAL_DMA_IRQHandler+0x1c0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d03b      	beq.n	8006380 <HAL_DMA_IRQHandler+0x194>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a28      	ldr	r2, [pc, #160]	; (80063b0 <HAL_DMA_IRQHandler+0x1c4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d036      	beq.n	8006380 <HAL_DMA_IRQHandler+0x194>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a27      	ldr	r2, [pc, #156]	; (80063b4 <HAL_DMA_IRQHandler+0x1c8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d031      	beq.n	8006380 <HAL_DMA_IRQHandler+0x194>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a25      	ldr	r2, [pc, #148]	; (80063b8 <HAL_DMA_IRQHandler+0x1cc>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d02c      	beq.n	8006380 <HAL_DMA_IRQHandler+0x194>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a24      	ldr	r2, [pc, #144]	; (80063bc <HAL_DMA_IRQHandler+0x1d0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d027      	beq.n	8006380 <HAL_DMA_IRQHandler+0x194>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <HAL_DMA_IRQHandler+0x1d4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d022      	beq.n	8006380 <HAL_DMA_IRQHandler+0x194>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <HAL_DMA_IRQHandler+0x1d8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d01d      	beq.n	8006380 <HAL_DMA_IRQHandler+0x194>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1f      	ldr	r2, [pc, #124]	; (80063c8 <HAL_DMA_IRQHandler+0x1dc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d018      	beq.n	8006380 <HAL_DMA_IRQHandler+0x194>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a1e      	ldr	r2, [pc, #120]	; (80063cc <HAL_DMA_IRQHandler+0x1e0>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d013      	beq.n	8006380 <HAL_DMA_IRQHandler+0x194>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1c      	ldr	r2, [pc, #112]	; (80063d0 <HAL_DMA_IRQHandler+0x1e4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00e      	beq.n	8006380 <HAL_DMA_IRQHandler+0x194>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1b      	ldr	r2, [pc, #108]	; (80063d4 <HAL_DMA_IRQHandler+0x1e8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d009      	beq.n	8006380 <HAL_DMA_IRQHandler+0x194>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a19      	ldr	r2, [pc, #100]	; (80063d8 <HAL_DMA_IRQHandler+0x1ec>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d004      	beq.n	8006380 <HAL_DMA_IRQHandler+0x194>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a18      	ldr	r2, [pc, #96]	; (80063dc <HAL_DMA_IRQHandler+0x1f0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d12f      	bne.n	80063e0 <HAL_DMA_IRQHandler+0x1f4>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0304 	and.w	r3, r3, #4
 800638a:	2b00      	cmp	r3, #0
 800638c:	bf14      	ite	ne
 800638e:	2301      	movne	r3, #1
 8006390:	2300      	moveq	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	e02e      	b.n	80063f4 <HAL_DMA_IRQHandler+0x208>
 8006396:	bf00      	nop
 8006398:	24000400 	.word	0x24000400
 800639c:	1b4e81b5 	.word	0x1b4e81b5
 80063a0:	40020010 	.word	0x40020010
 80063a4:	40020028 	.word	0x40020028
 80063a8:	40020040 	.word	0x40020040
 80063ac:	40020058 	.word	0x40020058
 80063b0:	40020070 	.word	0x40020070
 80063b4:	40020088 	.word	0x40020088
 80063b8:	400200a0 	.word	0x400200a0
 80063bc:	400200b8 	.word	0x400200b8
 80063c0:	40020410 	.word	0x40020410
 80063c4:	40020428 	.word	0x40020428
 80063c8:	40020440 	.word	0x40020440
 80063cc:	40020458 	.word	0x40020458
 80063d0:	40020470 	.word	0x40020470
 80063d4:	40020488 	.word	0x40020488
 80063d8:	400204a0 	.word	0x400204a0
 80063dc:	400204b8 	.word	0x400204b8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	bf14      	ite	ne
 80063ee:	2301      	movne	r3, #1
 80063f0:	2300      	moveq	r3, #0
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d015      	beq.n	8006424 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0204 	bic.w	r2, r2, #4
 8006406:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	2208      	movs	r2, #8
 8006412:	409a      	lsls	r2, r3
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641c:	f043 0201 	orr.w	r2, r3, #1
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	fa22 f303 	lsr.w	r3, r2, r3
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d06e      	beq.n	8006518 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a69      	ldr	r2, [pc, #420]	; (80065e4 <HAL_DMA_IRQHandler+0x3f8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d04a      	beq.n	80064da <HAL_DMA_IRQHandler+0x2ee>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a67      	ldr	r2, [pc, #412]	; (80065e8 <HAL_DMA_IRQHandler+0x3fc>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d045      	beq.n	80064da <HAL_DMA_IRQHandler+0x2ee>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a66      	ldr	r2, [pc, #408]	; (80065ec <HAL_DMA_IRQHandler+0x400>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d040      	beq.n	80064da <HAL_DMA_IRQHandler+0x2ee>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a64      	ldr	r2, [pc, #400]	; (80065f0 <HAL_DMA_IRQHandler+0x404>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d03b      	beq.n	80064da <HAL_DMA_IRQHandler+0x2ee>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a63      	ldr	r2, [pc, #396]	; (80065f4 <HAL_DMA_IRQHandler+0x408>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d036      	beq.n	80064da <HAL_DMA_IRQHandler+0x2ee>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a61      	ldr	r2, [pc, #388]	; (80065f8 <HAL_DMA_IRQHandler+0x40c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d031      	beq.n	80064da <HAL_DMA_IRQHandler+0x2ee>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a60      	ldr	r2, [pc, #384]	; (80065fc <HAL_DMA_IRQHandler+0x410>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d02c      	beq.n	80064da <HAL_DMA_IRQHandler+0x2ee>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a5e      	ldr	r2, [pc, #376]	; (8006600 <HAL_DMA_IRQHandler+0x414>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d027      	beq.n	80064da <HAL_DMA_IRQHandler+0x2ee>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a5d      	ldr	r2, [pc, #372]	; (8006604 <HAL_DMA_IRQHandler+0x418>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d022      	beq.n	80064da <HAL_DMA_IRQHandler+0x2ee>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a5b      	ldr	r2, [pc, #364]	; (8006608 <HAL_DMA_IRQHandler+0x41c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d01d      	beq.n	80064da <HAL_DMA_IRQHandler+0x2ee>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a5a      	ldr	r2, [pc, #360]	; (800660c <HAL_DMA_IRQHandler+0x420>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d018      	beq.n	80064da <HAL_DMA_IRQHandler+0x2ee>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a58      	ldr	r2, [pc, #352]	; (8006610 <HAL_DMA_IRQHandler+0x424>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d013      	beq.n	80064da <HAL_DMA_IRQHandler+0x2ee>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a57      	ldr	r2, [pc, #348]	; (8006614 <HAL_DMA_IRQHandler+0x428>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00e      	beq.n	80064da <HAL_DMA_IRQHandler+0x2ee>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a55      	ldr	r2, [pc, #340]	; (8006618 <HAL_DMA_IRQHandler+0x42c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d009      	beq.n	80064da <HAL_DMA_IRQHandler+0x2ee>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a54      	ldr	r2, [pc, #336]	; (800661c <HAL_DMA_IRQHandler+0x430>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d004      	beq.n	80064da <HAL_DMA_IRQHandler+0x2ee>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a52      	ldr	r2, [pc, #328]	; (8006620 <HAL_DMA_IRQHandler+0x434>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d10a      	bne.n	80064f0 <HAL_DMA_IRQHandler+0x304>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bf14      	ite	ne
 80064e8:	2301      	movne	r3, #1
 80064ea:	2300      	moveq	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	e003      	b.n	80064f8 <HAL_DMA_IRQHandler+0x30c>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2300      	movs	r3, #0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00d      	beq.n	8006518 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	2201      	movs	r2, #1
 8006506:	409a      	lsls	r2, r3
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006510:	f043 0202 	orr.w	r2, r3, #2
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	2204      	movs	r2, #4
 8006522:	409a      	lsls	r2, r3
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	4013      	ands	r3, r2
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 808f 	beq.w	800664c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a2c      	ldr	r2, [pc, #176]	; (80065e4 <HAL_DMA_IRQHandler+0x3f8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d04a      	beq.n	80065ce <HAL_DMA_IRQHandler+0x3e2>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a2a      	ldr	r2, [pc, #168]	; (80065e8 <HAL_DMA_IRQHandler+0x3fc>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d045      	beq.n	80065ce <HAL_DMA_IRQHandler+0x3e2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a29      	ldr	r2, [pc, #164]	; (80065ec <HAL_DMA_IRQHandler+0x400>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d040      	beq.n	80065ce <HAL_DMA_IRQHandler+0x3e2>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a27      	ldr	r2, [pc, #156]	; (80065f0 <HAL_DMA_IRQHandler+0x404>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d03b      	beq.n	80065ce <HAL_DMA_IRQHandler+0x3e2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a26      	ldr	r2, [pc, #152]	; (80065f4 <HAL_DMA_IRQHandler+0x408>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d036      	beq.n	80065ce <HAL_DMA_IRQHandler+0x3e2>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a24      	ldr	r2, [pc, #144]	; (80065f8 <HAL_DMA_IRQHandler+0x40c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d031      	beq.n	80065ce <HAL_DMA_IRQHandler+0x3e2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a23      	ldr	r2, [pc, #140]	; (80065fc <HAL_DMA_IRQHandler+0x410>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d02c      	beq.n	80065ce <HAL_DMA_IRQHandler+0x3e2>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a21      	ldr	r2, [pc, #132]	; (8006600 <HAL_DMA_IRQHandler+0x414>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d027      	beq.n	80065ce <HAL_DMA_IRQHandler+0x3e2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a20      	ldr	r2, [pc, #128]	; (8006604 <HAL_DMA_IRQHandler+0x418>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d022      	beq.n	80065ce <HAL_DMA_IRQHandler+0x3e2>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <HAL_DMA_IRQHandler+0x41c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01d      	beq.n	80065ce <HAL_DMA_IRQHandler+0x3e2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a1d      	ldr	r2, [pc, #116]	; (800660c <HAL_DMA_IRQHandler+0x420>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d018      	beq.n	80065ce <HAL_DMA_IRQHandler+0x3e2>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1b      	ldr	r2, [pc, #108]	; (8006610 <HAL_DMA_IRQHandler+0x424>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <HAL_DMA_IRQHandler+0x3e2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1a      	ldr	r2, [pc, #104]	; (8006614 <HAL_DMA_IRQHandler+0x428>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00e      	beq.n	80065ce <HAL_DMA_IRQHandler+0x3e2>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a18      	ldr	r2, [pc, #96]	; (8006618 <HAL_DMA_IRQHandler+0x42c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d009      	beq.n	80065ce <HAL_DMA_IRQHandler+0x3e2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a17      	ldr	r2, [pc, #92]	; (800661c <HAL_DMA_IRQHandler+0x430>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d004      	beq.n	80065ce <HAL_DMA_IRQHandler+0x3e2>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a15      	ldr	r2, [pc, #84]	; (8006620 <HAL_DMA_IRQHandler+0x434>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d12a      	bne.n	8006624 <HAL_DMA_IRQHandler+0x438>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bf14      	ite	ne
 80065dc:	2301      	movne	r3, #1
 80065de:	2300      	moveq	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	e023      	b.n	800662c <HAL_DMA_IRQHandler+0x440>
 80065e4:	40020010 	.word	0x40020010
 80065e8:	40020028 	.word	0x40020028
 80065ec:	40020040 	.word	0x40020040
 80065f0:	40020058 	.word	0x40020058
 80065f4:	40020070 	.word	0x40020070
 80065f8:	40020088 	.word	0x40020088
 80065fc:	400200a0 	.word	0x400200a0
 8006600:	400200b8 	.word	0x400200b8
 8006604:	40020410 	.word	0x40020410
 8006608:	40020428 	.word	0x40020428
 800660c:	40020440 	.word	0x40020440
 8006610:	40020458 	.word	0x40020458
 8006614:	40020470 	.word	0x40020470
 8006618:	40020488 	.word	0x40020488
 800661c:	400204a0 	.word	0x400204a0
 8006620:	400204b8 	.word	0x400204b8
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2300      	movs	r3, #0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00d      	beq.n	800664c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	2204      	movs	r2, #4
 800663a:	409a      	lsls	r2, r3
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006644:	f043 0204 	orr.w	r2, r3, #4
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006650:	f003 031f 	and.w	r3, r3, #31
 8006654:	2210      	movs	r2, #16
 8006656:	409a      	lsls	r2, r3
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	4013      	ands	r3, r2
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80a6 	beq.w	80067ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a85      	ldr	r2, [pc, #532]	; (800687c <HAL_DMA_IRQHandler+0x690>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d04a      	beq.n	8006702 <HAL_DMA_IRQHandler+0x516>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a83      	ldr	r2, [pc, #524]	; (8006880 <HAL_DMA_IRQHandler+0x694>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d045      	beq.n	8006702 <HAL_DMA_IRQHandler+0x516>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a82      	ldr	r2, [pc, #520]	; (8006884 <HAL_DMA_IRQHandler+0x698>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d040      	beq.n	8006702 <HAL_DMA_IRQHandler+0x516>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a80      	ldr	r2, [pc, #512]	; (8006888 <HAL_DMA_IRQHandler+0x69c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d03b      	beq.n	8006702 <HAL_DMA_IRQHandler+0x516>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a7f      	ldr	r2, [pc, #508]	; (800688c <HAL_DMA_IRQHandler+0x6a0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d036      	beq.n	8006702 <HAL_DMA_IRQHandler+0x516>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a7d      	ldr	r2, [pc, #500]	; (8006890 <HAL_DMA_IRQHandler+0x6a4>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d031      	beq.n	8006702 <HAL_DMA_IRQHandler+0x516>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a7c      	ldr	r2, [pc, #496]	; (8006894 <HAL_DMA_IRQHandler+0x6a8>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d02c      	beq.n	8006702 <HAL_DMA_IRQHandler+0x516>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a7a      	ldr	r2, [pc, #488]	; (8006898 <HAL_DMA_IRQHandler+0x6ac>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d027      	beq.n	8006702 <HAL_DMA_IRQHandler+0x516>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a79      	ldr	r2, [pc, #484]	; (800689c <HAL_DMA_IRQHandler+0x6b0>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d022      	beq.n	8006702 <HAL_DMA_IRQHandler+0x516>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a77      	ldr	r2, [pc, #476]	; (80068a0 <HAL_DMA_IRQHandler+0x6b4>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d01d      	beq.n	8006702 <HAL_DMA_IRQHandler+0x516>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a76      	ldr	r2, [pc, #472]	; (80068a4 <HAL_DMA_IRQHandler+0x6b8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d018      	beq.n	8006702 <HAL_DMA_IRQHandler+0x516>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a74      	ldr	r2, [pc, #464]	; (80068a8 <HAL_DMA_IRQHandler+0x6bc>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d013      	beq.n	8006702 <HAL_DMA_IRQHandler+0x516>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a73      	ldr	r2, [pc, #460]	; (80068ac <HAL_DMA_IRQHandler+0x6c0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00e      	beq.n	8006702 <HAL_DMA_IRQHandler+0x516>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a71      	ldr	r2, [pc, #452]	; (80068b0 <HAL_DMA_IRQHandler+0x6c4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d009      	beq.n	8006702 <HAL_DMA_IRQHandler+0x516>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a70      	ldr	r2, [pc, #448]	; (80068b4 <HAL_DMA_IRQHandler+0x6c8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d004      	beq.n	8006702 <HAL_DMA_IRQHandler+0x516>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a6e      	ldr	r2, [pc, #440]	; (80068b8 <HAL_DMA_IRQHandler+0x6cc>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d10a      	bne.n	8006718 <HAL_DMA_IRQHandler+0x52c>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0308 	and.w	r3, r3, #8
 800670c:	2b00      	cmp	r3, #0
 800670e:	bf14      	ite	ne
 8006710:	2301      	movne	r3, #1
 8006712:	2300      	moveq	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	e009      	b.n	800672c <HAL_DMA_IRQHandler+0x540>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0304 	and.w	r3, r3, #4
 8006722:	2b00      	cmp	r3, #0
 8006724:	bf14      	ite	ne
 8006726:	2301      	movne	r3, #1
 8006728:	2300      	moveq	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d03e      	beq.n	80067ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	2210      	movs	r2, #16
 800673a:	409a      	lsls	r2, r3
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d018      	beq.n	8006780 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d108      	bne.n	800676e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006760:	2b00      	cmp	r3, #0
 8006762:	d024      	beq.n	80067ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	4798      	blx	r3
 800676c:	e01f      	b.n	80067ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006772:	2b00      	cmp	r3, #0
 8006774:	d01b      	beq.n	80067ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	4798      	blx	r3
 800677e:	e016      	b.n	80067ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678a:	2b00      	cmp	r3, #0
 800678c:	d107      	bne.n	800679e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0208 	bic.w	r2, r2, #8
 800679c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b2:	f003 031f 	and.w	r3, r3, #31
 80067b6:	2220      	movs	r2, #32
 80067b8:	409a      	lsls	r2, r3
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	4013      	ands	r3, r2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 8110 	beq.w	80069e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a2c      	ldr	r2, [pc, #176]	; (800687c <HAL_DMA_IRQHandler+0x690>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d04a      	beq.n	8006864 <HAL_DMA_IRQHandler+0x678>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a2b      	ldr	r2, [pc, #172]	; (8006880 <HAL_DMA_IRQHandler+0x694>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d045      	beq.n	8006864 <HAL_DMA_IRQHandler+0x678>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a29      	ldr	r2, [pc, #164]	; (8006884 <HAL_DMA_IRQHandler+0x698>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d040      	beq.n	8006864 <HAL_DMA_IRQHandler+0x678>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a28      	ldr	r2, [pc, #160]	; (8006888 <HAL_DMA_IRQHandler+0x69c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d03b      	beq.n	8006864 <HAL_DMA_IRQHandler+0x678>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a26      	ldr	r2, [pc, #152]	; (800688c <HAL_DMA_IRQHandler+0x6a0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d036      	beq.n	8006864 <HAL_DMA_IRQHandler+0x678>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a25      	ldr	r2, [pc, #148]	; (8006890 <HAL_DMA_IRQHandler+0x6a4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d031      	beq.n	8006864 <HAL_DMA_IRQHandler+0x678>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a23      	ldr	r2, [pc, #140]	; (8006894 <HAL_DMA_IRQHandler+0x6a8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d02c      	beq.n	8006864 <HAL_DMA_IRQHandler+0x678>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a22      	ldr	r2, [pc, #136]	; (8006898 <HAL_DMA_IRQHandler+0x6ac>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d027      	beq.n	8006864 <HAL_DMA_IRQHandler+0x678>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a20      	ldr	r2, [pc, #128]	; (800689c <HAL_DMA_IRQHandler+0x6b0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d022      	beq.n	8006864 <HAL_DMA_IRQHandler+0x678>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <HAL_DMA_IRQHandler+0x6b4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d01d      	beq.n	8006864 <HAL_DMA_IRQHandler+0x678>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a1d      	ldr	r2, [pc, #116]	; (80068a4 <HAL_DMA_IRQHandler+0x6b8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d018      	beq.n	8006864 <HAL_DMA_IRQHandler+0x678>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a1c      	ldr	r2, [pc, #112]	; (80068a8 <HAL_DMA_IRQHandler+0x6bc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d013      	beq.n	8006864 <HAL_DMA_IRQHandler+0x678>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a1a      	ldr	r2, [pc, #104]	; (80068ac <HAL_DMA_IRQHandler+0x6c0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00e      	beq.n	8006864 <HAL_DMA_IRQHandler+0x678>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a19      	ldr	r2, [pc, #100]	; (80068b0 <HAL_DMA_IRQHandler+0x6c4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d009      	beq.n	8006864 <HAL_DMA_IRQHandler+0x678>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a17      	ldr	r2, [pc, #92]	; (80068b4 <HAL_DMA_IRQHandler+0x6c8>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d004      	beq.n	8006864 <HAL_DMA_IRQHandler+0x678>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a16      	ldr	r2, [pc, #88]	; (80068b8 <HAL_DMA_IRQHandler+0x6cc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d12b      	bne.n	80068bc <HAL_DMA_IRQHandler+0x6d0>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0310 	and.w	r3, r3, #16
 800686e:	2b00      	cmp	r3, #0
 8006870:	bf14      	ite	ne
 8006872:	2301      	movne	r3, #1
 8006874:	2300      	moveq	r3, #0
 8006876:	b2db      	uxtb	r3, r3
 8006878:	e02a      	b.n	80068d0 <HAL_DMA_IRQHandler+0x6e4>
 800687a:	bf00      	nop
 800687c:	40020010 	.word	0x40020010
 8006880:	40020028 	.word	0x40020028
 8006884:	40020040 	.word	0x40020040
 8006888:	40020058 	.word	0x40020058
 800688c:	40020070 	.word	0x40020070
 8006890:	40020088 	.word	0x40020088
 8006894:	400200a0 	.word	0x400200a0
 8006898:	400200b8 	.word	0x400200b8
 800689c:	40020410 	.word	0x40020410
 80068a0:	40020428 	.word	0x40020428
 80068a4:	40020440 	.word	0x40020440
 80068a8:	40020458 	.word	0x40020458
 80068ac:	40020470 	.word	0x40020470
 80068b0:	40020488 	.word	0x40020488
 80068b4:	400204a0 	.word	0x400204a0
 80068b8:	400204b8 	.word	0x400204b8
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	bf14      	ite	ne
 80068ca:	2301      	movne	r3, #1
 80068cc:	2300      	moveq	r3, #0
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 8087 	beq.w	80069e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068da:	f003 031f 	and.w	r3, r3, #31
 80068de:	2220      	movs	r2, #32
 80068e0:	409a      	lsls	r2, r3
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d139      	bne.n	8006966 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0216 	bic.w	r2, r2, #22
 8006900:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	695a      	ldr	r2, [r3, #20]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006910:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	2b00      	cmp	r3, #0
 8006918:	d103      	bne.n	8006922 <HAL_DMA_IRQHandler+0x736>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800691e:	2b00      	cmp	r3, #0
 8006920:	d007      	beq.n	8006932 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0208 	bic.w	r2, r2, #8
 8006930:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	223f      	movs	r2, #63	; 0x3f
 800693c:	409a      	lsls	r2, r3
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 834a 	beq.w	8006ff0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	4798      	blx	r3
          }
          return;
 8006964:	e344      	b.n	8006ff0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d018      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d108      	bne.n	8006994 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006986:	2b00      	cmp	r3, #0
 8006988:	d02c      	beq.n	80069e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	4798      	blx	r3
 8006992:	e027      	b.n	80069e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d023      	beq.n	80069e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	4798      	blx	r3
 80069a4:	e01e      	b.n	80069e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10f      	bne.n	80069d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0210 	bic.w	r2, r2, #16
 80069c2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 8306 	beq.w	8006ffa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 8088 	beq.w	8006b0c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2204      	movs	r2, #4
 8006a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a7a      	ldr	r2, [pc, #488]	; (8006bf4 <HAL_DMA_IRQHandler+0xa08>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d04a      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x8b8>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a79      	ldr	r2, [pc, #484]	; (8006bf8 <HAL_DMA_IRQHandler+0xa0c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d045      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x8b8>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a77      	ldr	r2, [pc, #476]	; (8006bfc <HAL_DMA_IRQHandler+0xa10>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d040      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x8b8>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a76      	ldr	r2, [pc, #472]	; (8006c00 <HAL_DMA_IRQHandler+0xa14>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d03b      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x8b8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a74      	ldr	r2, [pc, #464]	; (8006c04 <HAL_DMA_IRQHandler+0xa18>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d036      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x8b8>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a73      	ldr	r2, [pc, #460]	; (8006c08 <HAL_DMA_IRQHandler+0xa1c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d031      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x8b8>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a71      	ldr	r2, [pc, #452]	; (8006c0c <HAL_DMA_IRQHandler+0xa20>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d02c      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x8b8>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a70      	ldr	r2, [pc, #448]	; (8006c10 <HAL_DMA_IRQHandler+0xa24>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d027      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x8b8>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a6e      	ldr	r2, [pc, #440]	; (8006c14 <HAL_DMA_IRQHandler+0xa28>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d022      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x8b8>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a6d      	ldr	r2, [pc, #436]	; (8006c18 <HAL_DMA_IRQHandler+0xa2c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d01d      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x8b8>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a6b      	ldr	r2, [pc, #428]	; (8006c1c <HAL_DMA_IRQHandler+0xa30>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d018      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x8b8>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a6a      	ldr	r2, [pc, #424]	; (8006c20 <HAL_DMA_IRQHandler+0xa34>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d013      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x8b8>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a68      	ldr	r2, [pc, #416]	; (8006c24 <HAL_DMA_IRQHandler+0xa38>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00e      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x8b8>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a67      	ldr	r2, [pc, #412]	; (8006c28 <HAL_DMA_IRQHandler+0xa3c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d009      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x8b8>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a65      	ldr	r2, [pc, #404]	; (8006c2c <HAL_DMA_IRQHandler+0xa40>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d004      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x8b8>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a64      	ldr	r2, [pc, #400]	; (8006c30 <HAL_DMA_IRQHandler+0xa44>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d108      	bne.n	8006ab6 <HAL_DMA_IRQHandler+0x8ca>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0201 	bic.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	e007      	b.n	8006ac6 <HAL_DMA_IRQHandler+0x8da>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0201 	bic.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d307      	bcc.n	8006ae2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1f2      	bne.n	8006ac6 <HAL_DMA_IRQHandler+0x8da>
 8006ae0:	e000      	b.n	8006ae4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006ae2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d004      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2203      	movs	r2, #3
 8006afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006b02:	e003      	b.n	8006b0c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 8272 	beq.w	8006ffa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	4798      	blx	r3
 8006b1e:	e26c      	b.n	8006ffa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a43      	ldr	r2, [pc, #268]	; (8006c34 <HAL_DMA_IRQHandler+0xa48>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d022      	beq.n	8006b70 <HAL_DMA_IRQHandler+0x984>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a42      	ldr	r2, [pc, #264]	; (8006c38 <HAL_DMA_IRQHandler+0xa4c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d01d      	beq.n	8006b70 <HAL_DMA_IRQHandler+0x984>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a40      	ldr	r2, [pc, #256]	; (8006c3c <HAL_DMA_IRQHandler+0xa50>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d018      	beq.n	8006b70 <HAL_DMA_IRQHandler+0x984>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a3f      	ldr	r2, [pc, #252]	; (8006c40 <HAL_DMA_IRQHandler+0xa54>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d013      	beq.n	8006b70 <HAL_DMA_IRQHandler+0x984>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a3d      	ldr	r2, [pc, #244]	; (8006c44 <HAL_DMA_IRQHandler+0xa58>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00e      	beq.n	8006b70 <HAL_DMA_IRQHandler+0x984>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a3c      	ldr	r2, [pc, #240]	; (8006c48 <HAL_DMA_IRQHandler+0xa5c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d009      	beq.n	8006b70 <HAL_DMA_IRQHandler+0x984>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a3a      	ldr	r2, [pc, #232]	; (8006c4c <HAL_DMA_IRQHandler+0xa60>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d004      	beq.n	8006b70 <HAL_DMA_IRQHandler+0x984>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a39      	ldr	r2, [pc, #228]	; (8006c50 <HAL_DMA_IRQHandler+0xa64>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d101      	bne.n	8006b74 <HAL_DMA_IRQHandler+0x988>
 8006b70:	2301      	movs	r3, #1
 8006b72:	e000      	b.n	8006b76 <HAL_DMA_IRQHandler+0x98a>
 8006b74:	2300      	movs	r3, #0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 823f 	beq.w	8006ffa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b88:	f003 031f 	and.w	r3, r3, #31
 8006b8c:	2204      	movs	r2, #4
 8006b8e:	409a      	lsls	r2, r3
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	4013      	ands	r3, r2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 80cd 	beq.w	8006d34 <HAL_DMA_IRQHandler+0xb48>
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80c7 	beq.w	8006d34 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	2204      	movs	r2, #4
 8006bb0:	409a      	lsls	r2, r3
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d049      	beq.n	8006c54 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d109      	bne.n	8006bde <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 8210 	beq.w	8006ff4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bdc:	e20a      	b.n	8006ff4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 8206 	beq.w	8006ff4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bf0:	e200      	b.n	8006ff4 <HAL_DMA_IRQHandler+0xe08>
 8006bf2:	bf00      	nop
 8006bf4:	40020010 	.word	0x40020010
 8006bf8:	40020028 	.word	0x40020028
 8006bfc:	40020040 	.word	0x40020040
 8006c00:	40020058 	.word	0x40020058
 8006c04:	40020070 	.word	0x40020070
 8006c08:	40020088 	.word	0x40020088
 8006c0c:	400200a0 	.word	0x400200a0
 8006c10:	400200b8 	.word	0x400200b8
 8006c14:	40020410 	.word	0x40020410
 8006c18:	40020428 	.word	0x40020428
 8006c1c:	40020440 	.word	0x40020440
 8006c20:	40020458 	.word	0x40020458
 8006c24:	40020470 	.word	0x40020470
 8006c28:	40020488 	.word	0x40020488
 8006c2c:	400204a0 	.word	0x400204a0
 8006c30:	400204b8 	.word	0x400204b8
 8006c34:	58025408 	.word	0x58025408
 8006c38:	5802541c 	.word	0x5802541c
 8006c3c:	58025430 	.word	0x58025430
 8006c40:	58025444 	.word	0x58025444
 8006c44:	58025458 	.word	0x58025458
 8006c48:	5802546c 	.word	0x5802546c
 8006c4c:	58025480 	.word	0x58025480
 8006c50:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d160      	bne.n	8006d20 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a8c      	ldr	r2, [pc, #560]	; (8006e94 <HAL_DMA_IRQHandler+0xca8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d04a      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xb12>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a8a      	ldr	r2, [pc, #552]	; (8006e98 <HAL_DMA_IRQHandler+0xcac>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d045      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xb12>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a89      	ldr	r2, [pc, #548]	; (8006e9c <HAL_DMA_IRQHandler+0xcb0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d040      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xb12>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a87      	ldr	r2, [pc, #540]	; (8006ea0 <HAL_DMA_IRQHandler+0xcb4>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d03b      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xb12>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a86      	ldr	r2, [pc, #536]	; (8006ea4 <HAL_DMA_IRQHandler+0xcb8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d036      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xb12>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a84      	ldr	r2, [pc, #528]	; (8006ea8 <HAL_DMA_IRQHandler+0xcbc>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d031      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xb12>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a83      	ldr	r2, [pc, #524]	; (8006eac <HAL_DMA_IRQHandler+0xcc0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d02c      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xb12>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a81      	ldr	r2, [pc, #516]	; (8006eb0 <HAL_DMA_IRQHandler+0xcc4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d027      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xb12>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a80      	ldr	r2, [pc, #512]	; (8006eb4 <HAL_DMA_IRQHandler+0xcc8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d022      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xb12>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a7e      	ldr	r2, [pc, #504]	; (8006eb8 <HAL_DMA_IRQHandler+0xccc>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d01d      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xb12>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a7d      	ldr	r2, [pc, #500]	; (8006ebc <HAL_DMA_IRQHandler+0xcd0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d018      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xb12>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a7b      	ldr	r2, [pc, #492]	; (8006ec0 <HAL_DMA_IRQHandler+0xcd4>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d013      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xb12>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a7a      	ldr	r2, [pc, #488]	; (8006ec4 <HAL_DMA_IRQHandler+0xcd8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00e      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xb12>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a78      	ldr	r2, [pc, #480]	; (8006ec8 <HAL_DMA_IRQHandler+0xcdc>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d009      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xb12>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a77      	ldr	r2, [pc, #476]	; (8006ecc <HAL_DMA_IRQHandler+0xce0>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xb12>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a75      	ldr	r2, [pc, #468]	; (8006ed0 <HAL_DMA_IRQHandler+0xce4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d108      	bne.n	8006d10 <HAL_DMA_IRQHandler+0xb24>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0208 	bic.w	r2, r2, #8
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	e007      	b.n	8006d20 <HAL_DMA_IRQHandler+0xb34>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0204 	bic.w	r2, r2, #4
 8006d1e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 8165 	beq.w	8006ff4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d32:	e15f      	b.n	8006ff4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d38:	f003 031f 	and.w	r3, r3, #31
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	409a      	lsls	r2, r3
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	4013      	ands	r3, r2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 80c5 	beq.w	8006ed4 <HAL_DMA_IRQHandler+0xce8>
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 80bf 	beq.w	8006ed4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	2202      	movs	r2, #2
 8006d60:	409a      	lsls	r2, r3
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d018      	beq.n	8006da2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d109      	bne.n	8006d8e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 813a 	beq.w	8006ff8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d8c:	e134      	b.n	8006ff8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 8130 	beq.w	8006ff8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006da0:	e12a      	b.n	8006ff8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d168      	bne.n	8006e7e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a38      	ldr	r2, [pc, #224]	; (8006e94 <HAL_DMA_IRQHandler+0xca8>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d04a      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xc60>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a37      	ldr	r2, [pc, #220]	; (8006e98 <HAL_DMA_IRQHandler+0xcac>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d045      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xc60>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a35      	ldr	r2, [pc, #212]	; (8006e9c <HAL_DMA_IRQHandler+0xcb0>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d040      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xc60>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a34      	ldr	r2, [pc, #208]	; (8006ea0 <HAL_DMA_IRQHandler+0xcb4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d03b      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xc60>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a32      	ldr	r2, [pc, #200]	; (8006ea4 <HAL_DMA_IRQHandler+0xcb8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d036      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xc60>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a31      	ldr	r2, [pc, #196]	; (8006ea8 <HAL_DMA_IRQHandler+0xcbc>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d031      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xc60>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a2f      	ldr	r2, [pc, #188]	; (8006eac <HAL_DMA_IRQHandler+0xcc0>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d02c      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xc60>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a2e      	ldr	r2, [pc, #184]	; (8006eb0 <HAL_DMA_IRQHandler+0xcc4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d027      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xc60>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a2c      	ldr	r2, [pc, #176]	; (8006eb4 <HAL_DMA_IRQHandler+0xcc8>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d022      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xc60>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a2b      	ldr	r2, [pc, #172]	; (8006eb8 <HAL_DMA_IRQHandler+0xccc>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d01d      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xc60>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a29      	ldr	r2, [pc, #164]	; (8006ebc <HAL_DMA_IRQHandler+0xcd0>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d018      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xc60>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a28      	ldr	r2, [pc, #160]	; (8006ec0 <HAL_DMA_IRQHandler+0xcd4>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d013      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xc60>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a26      	ldr	r2, [pc, #152]	; (8006ec4 <HAL_DMA_IRQHandler+0xcd8>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d00e      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xc60>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a25      	ldr	r2, [pc, #148]	; (8006ec8 <HAL_DMA_IRQHandler+0xcdc>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d009      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xc60>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a23      	ldr	r2, [pc, #140]	; (8006ecc <HAL_DMA_IRQHandler+0xce0>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d004      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xc60>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a22      	ldr	r2, [pc, #136]	; (8006ed0 <HAL_DMA_IRQHandler+0xce4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d108      	bne.n	8006e5e <HAL_DMA_IRQHandler+0xc72>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0214 	bic.w	r2, r2, #20
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	e007      	b.n	8006e6e <HAL_DMA_IRQHandler+0xc82>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 020a 	bic.w	r2, r2, #10
 8006e6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 80b8 	beq.w	8006ff8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e90:	e0b2      	b.n	8006ff8 <HAL_DMA_IRQHandler+0xe0c>
 8006e92:	bf00      	nop
 8006e94:	40020010 	.word	0x40020010
 8006e98:	40020028 	.word	0x40020028
 8006e9c:	40020040 	.word	0x40020040
 8006ea0:	40020058 	.word	0x40020058
 8006ea4:	40020070 	.word	0x40020070
 8006ea8:	40020088 	.word	0x40020088
 8006eac:	400200a0 	.word	0x400200a0
 8006eb0:	400200b8 	.word	0x400200b8
 8006eb4:	40020410 	.word	0x40020410
 8006eb8:	40020428 	.word	0x40020428
 8006ebc:	40020440 	.word	0x40020440
 8006ec0:	40020458 	.word	0x40020458
 8006ec4:	40020470 	.word	0x40020470
 8006ec8:	40020488 	.word	0x40020488
 8006ecc:	400204a0 	.word	0x400204a0
 8006ed0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	2208      	movs	r2, #8
 8006ede:	409a      	lsls	r2, r3
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 8088 	beq.w	8006ffa <HAL_DMA_IRQHandler+0xe0e>
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8082 	beq.w	8006ffa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a41      	ldr	r2, [pc, #260]	; (8007000 <HAL_DMA_IRQHandler+0xe14>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d04a      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xdaa>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a3f      	ldr	r2, [pc, #252]	; (8007004 <HAL_DMA_IRQHandler+0xe18>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d045      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xdaa>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a3e      	ldr	r2, [pc, #248]	; (8007008 <HAL_DMA_IRQHandler+0xe1c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d040      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xdaa>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a3c      	ldr	r2, [pc, #240]	; (800700c <HAL_DMA_IRQHandler+0xe20>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d03b      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xdaa>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a3b      	ldr	r2, [pc, #236]	; (8007010 <HAL_DMA_IRQHandler+0xe24>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d036      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xdaa>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a39      	ldr	r2, [pc, #228]	; (8007014 <HAL_DMA_IRQHandler+0xe28>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d031      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xdaa>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a38      	ldr	r2, [pc, #224]	; (8007018 <HAL_DMA_IRQHandler+0xe2c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d02c      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xdaa>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a36      	ldr	r2, [pc, #216]	; (800701c <HAL_DMA_IRQHandler+0xe30>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d027      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xdaa>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a35      	ldr	r2, [pc, #212]	; (8007020 <HAL_DMA_IRQHandler+0xe34>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d022      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xdaa>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a33      	ldr	r2, [pc, #204]	; (8007024 <HAL_DMA_IRQHandler+0xe38>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d01d      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xdaa>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a32      	ldr	r2, [pc, #200]	; (8007028 <HAL_DMA_IRQHandler+0xe3c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d018      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xdaa>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a30      	ldr	r2, [pc, #192]	; (800702c <HAL_DMA_IRQHandler+0xe40>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d013      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xdaa>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a2f      	ldr	r2, [pc, #188]	; (8007030 <HAL_DMA_IRQHandler+0xe44>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d00e      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xdaa>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a2d      	ldr	r2, [pc, #180]	; (8007034 <HAL_DMA_IRQHandler+0xe48>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d009      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xdaa>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a2c      	ldr	r2, [pc, #176]	; (8007038 <HAL_DMA_IRQHandler+0xe4c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d004      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xdaa>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a2a      	ldr	r2, [pc, #168]	; (800703c <HAL_DMA_IRQHandler+0xe50>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d108      	bne.n	8006fa8 <HAL_DMA_IRQHandler+0xdbc>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 021c 	bic.w	r2, r2, #28
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	e007      	b.n	8006fb8 <HAL_DMA_IRQHandler+0xdcc>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 020e 	bic.w	r2, r2, #14
 8006fb6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fbc:	f003 031f 	and.w	r3, r3, #31
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	409a      	lsls	r2, r3
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d009      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	4798      	blx	r3
 8006fee:	e004      	b.n	8006ffa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006ff0:	bf00      	nop
 8006ff2:	e002      	b.n	8006ffa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ff4:	bf00      	nop
 8006ff6:	e000      	b.n	8006ffa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ff8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ffa:	3728      	adds	r7, #40	; 0x28
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	40020010 	.word	0x40020010
 8007004:	40020028 	.word	0x40020028
 8007008:	40020040 	.word	0x40020040
 800700c:	40020058 	.word	0x40020058
 8007010:	40020070 	.word	0x40020070
 8007014:	40020088 	.word	0x40020088
 8007018:	400200a0 	.word	0x400200a0
 800701c:	400200b8 	.word	0x400200b8
 8007020:	40020410 	.word	0x40020410
 8007024:	40020428 	.word	0x40020428
 8007028:	40020440 	.word	0x40020440
 800702c:	40020458 	.word	0x40020458
 8007030:	40020470 	.word	0x40020470
 8007034:	40020488 	.word	0x40020488
 8007038:	400204a0 	.word	0x400204a0
 800703c:	400204b8 	.word	0x400204b8

08007040 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007070:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a84      	ldr	r2, [pc, #528]	; (8007288 <DMA_SetConfig+0x230>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d072      	beq.n	8007162 <DMA_SetConfig+0x10a>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a82      	ldr	r2, [pc, #520]	; (800728c <DMA_SetConfig+0x234>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d06d      	beq.n	8007162 <DMA_SetConfig+0x10a>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a81      	ldr	r2, [pc, #516]	; (8007290 <DMA_SetConfig+0x238>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d068      	beq.n	8007162 <DMA_SetConfig+0x10a>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a7f      	ldr	r2, [pc, #508]	; (8007294 <DMA_SetConfig+0x23c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d063      	beq.n	8007162 <DMA_SetConfig+0x10a>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a7e      	ldr	r2, [pc, #504]	; (8007298 <DMA_SetConfig+0x240>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d05e      	beq.n	8007162 <DMA_SetConfig+0x10a>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a7c      	ldr	r2, [pc, #496]	; (800729c <DMA_SetConfig+0x244>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d059      	beq.n	8007162 <DMA_SetConfig+0x10a>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a7b      	ldr	r2, [pc, #492]	; (80072a0 <DMA_SetConfig+0x248>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d054      	beq.n	8007162 <DMA_SetConfig+0x10a>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a79      	ldr	r2, [pc, #484]	; (80072a4 <DMA_SetConfig+0x24c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d04f      	beq.n	8007162 <DMA_SetConfig+0x10a>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a78      	ldr	r2, [pc, #480]	; (80072a8 <DMA_SetConfig+0x250>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d04a      	beq.n	8007162 <DMA_SetConfig+0x10a>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a76      	ldr	r2, [pc, #472]	; (80072ac <DMA_SetConfig+0x254>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d045      	beq.n	8007162 <DMA_SetConfig+0x10a>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a75      	ldr	r2, [pc, #468]	; (80072b0 <DMA_SetConfig+0x258>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d040      	beq.n	8007162 <DMA_SetConfig+0x10a>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a73      	ldr	r2, [pc, #460]	; (80072b4 <DMA_SetConfig+0x25c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d03b      	beq.n	8007162 <DMA_SetConfig+0x10a>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a72      	ldr	r2, [pc, #456]	; (80072b8 <DMA_SetConfig+0x260>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d036      	beq.n	8007162 <DMA_SetConfig+0x10a>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a70      	ldr	r2, [pc, #448]	; (80072bc <DMA_SetConfig+0x264>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d031      	beq.n	8007162 <DMA_SetConfig+0x10a>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a6f      	ldr	r2, [pc, #444]	; (80072c0 <DMA_SetConfig+0x268>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d02c      	beq.n	8007162 <DMA_SetConfig+0x10a>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a6d      	ldr	r2, [pc, #436]	; (80072c4 <DMA_SetConfig+0x26c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d027      	beq.n	8007162 <DMA_SetConfig+0x10a>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a6c      	ldr	r2, [pc, #432]	; (80072c8 <DMA_SetConfig+0x270>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d022      	beq.n	8007162 <DMA_SetConfig+0x10a>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a6a      	ldr	r2, [pc, #424]	; (80072cc <DMA_SetConfig+0x274>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d01d      	beq.n	8007162 <DMA_SetConfig+0x10a>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a69      	ldr	r2, [pc, #420]	; (80072d0 <DMA_SetConfig+0x278>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d018      	beq.n	8007162 <DMA_SetConfig+0x10a>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a67      	ldr	r2, [pc, #412]	; (80072d4 <DMA_SetConfig+0x27c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d013      	beq.n	8007162 <DMA_SetConfig+0x10a>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a66      	ldr	r2, [pc, #408]	; (80072d8 <DMA_SetConfig+0x280>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d00e      	beq.n	8007162 <DMA_SetConfig+0x10a>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a64      	ldr	r2, [pc, #400]	; (80072dc <DMA_SetConfig+0x284>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d009      	beq.n	8007162 <DMA_SetConfig+0x10a>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a63      	ldr	r2, [pc, #396]	; (80072e0 <DMA_SetConfig+0x288>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d004      	beq.n	8007162 <DMA_SetConfig+0x10a>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a61      	ldr	r2, [pc, #388]	; (80072e4 <DMA_SetConfig+0x28c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d101      	bne.n	8007166 <DMA_SetConfig+0x10e>
 8007162:	2301      	movs	r3, #1
 8007164:	e000      	b.n	8007168 <DMA_SetConfig+0x110>
 8007166:	2300      	movs	r3, #0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00d      	beq.n	8007188 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007174:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800717a:	2b00      	cmp	r3, #0
 800717c:	d004      	beq.n	8007188 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007186:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a3e      	ldr	r2, [pc, #248]	; (8007288 <DMA_SetConfig+0x230>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d04a      	beq.n	8007228 <DMA_SetConfig+0x1d0>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a3d      	ldr	r2, [pc, #244]	; (800728c <DMA_SetConfig+0x234>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d045      	beq.n	8007228 <DMA_SetConfig+0x1d0>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a3b      	ldr	r2, [pc, #236]	; (8007290 <DMA_SetConfig+0x238>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d040      	beq.n	8007228 <DMA_SetConfig+0x1d0>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a3a      	ldr	r2, [pc, #232]	; (8007294 <DMA_SetConfig+0x23c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d03b      	beq.n	8007228 <DMA_SetConfig+0x1d0>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a38      	ldr	r2, [pc, #224]	; (8007298 <DMA_SetConfig+0x240>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d036      	beq.n	8007228 <DMA_SetConfig+0x1d0>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a37      	ldr	r2, [pc, #220]	; (800729c <DMA_SetConfig+0x244>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d031      	beq.n	8007228 <DMA_SetConfig+0x1d0>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a35      	ldr	r2, [pc, #212]	; (80072a0 <DMA_SetConfig+0x248>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d02c      	beq.n	8007228 <DMA_SetConfig+0x1d0>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a34      	ldr	r2, [pc, #208]	; (80072a4 <DMA_SetConfig+0x24c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d027      	beq.n	8007228 <DMA_SetConfig+0x1d0>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a32      	ldr	r2, [pc, #200]	; (80072a8 <DMA_SetConfig+0x250>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d022      	beq.n	8007228 <DMA_SetConfig+0x1d0>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a31      	ldr	r2, [pc, #196]	; (80072ac <DMA_SetConfig+0x254>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d01d      	beq.n	8007228 <DMA_SetConfig+0x1d0>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a2f      	ldr	r2, [pc, #188]	; (80072b0 <DMA_SetConfig+0x258>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d018      	beq.n	8007228 <DMA_SetConfig+0x1d0>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a2e      	ldr	r2, [pc, #184]	; (80072b4 <DMA_SetConfig+0x25c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d013      	beq.n	8007228 <DMA_SetConfig+0x1d0>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a2c      	ldr	r2, [pc, #176]	; (80072b8 <DMA_SetConfig+0x260>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d00e      	beq.n	8007228 <DMA_SetConfig+0x1d0>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a2b      	ldr	r2, [pc, #172]	; (80072bc <DMA_SetConfig+0x264>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d009      	beq.n	8007228 <DMA_SetConfig+0x1d0>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a29      	ldr	r2, [pc, #164]	; (80072c0 <DMA_SetConfig+0x268>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d004      	beq.n	8007228 <DMA_SetConfig+0x1d0>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a28      	ldr	r2, [pc, #160]	; (80072c4 <DMA_SetConfig+0x26c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d101      	bne.n	800722c <DMA_SetConfig+0x1d4>
 8007228:	2301      	movs	r3, #1
 800722a:	e000      	b.n	800722e <DMA_SetConfig+0x1d6>
 800722c:	2300      	movs	r3, #0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d05a      	beq.n	80072e8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007236:	f003 031f 	and.w	r3, r3, #31
 800723a:	223f      	movs	r2, #63	; 0x3f
 800723c:	409a      	lsls	r2, r3
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007250:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2b40      	cmp	r3, #64	; 0x40
 8007260:	d108      	bne.n	8007274 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007272:	e087      	b.n	8007384 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	60da      	str	r2, [r3, #12]
}
 8007284:	e07e      	b.n	8007384 <DMA_SetConfig+0x32c>
 8007286:	bf00      	nop
 8007288:	40020010 	.word	0x40020010
 800728c:	40020028 	.word	0x40020028
 8007290:	40020040 	.word	0x40020040
 8007294:	40020058 	.word	0x40020058
 8007298:	40020070 	.word	0x40020070
 800729c:	40020088 	.word	0x40020088
 80072a0:	400200a0 	.word	0x400200a0
 80072a4:	400200b8 	.word	0x400200b8
 80072a8:	40020410 	.word	0x40020410
 80072ac:	40020428 	.word	0x40020428
 80072b0:	40020440 	.word	0x40020440
 80072b4:	40020458 	.word	0x40020458
 80072b8:	40020470 	.word	0x40020470
 80072bc:	40020488 	.word	0x40020488
 80072c0:	400204a0 	.word	0x400204a0
 80072c4:	400204b8 	.word	0x400204b8
 80072c8:	58025408 	.word	0x58025408
 80072cc:	5802541c 	.word	0x5802541c
 80072d0:	58025430 	.word	0x58025430
 80072d4:	58025444 	.word	0x58025444
 80072d8:	58025458 	.word	0x58025458
 80072dc:	5802546c 	.word	0x5802546c
 80072e0:	58025480 	.word	0x58025480
 80072e4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a28      	ldr	r2, [pc, #160]	; (8007390 <DMA_SetConfig+0x338>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d022      	beq.n	8007338 <DMA_SetConfig+0x2e0>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a27      	ldr	r2, [pc, #156]	; (8007394 <DMA_SetConfig+0x33c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d01d      	beq.n	8007338 <DMA_SetConfig+0x2e0>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a25      	ldr	r2, [pc, #148]	; (8007398 <DMA_SetConfig+0x340>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d018      	beq.n	8007338 <DMA_SetConfig+0x2e0>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a24      	ldr	r2, [pc, #144]	; (800739c <DMA_SetConfig+0x344>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d013      	beq.n	8007338 <DMA_SetConfig+0x2e0>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a22      	ldr	r2, [pc, #136]	; (80073a0 <DMA_SetConfig+0x348>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00e      	beq.n	8007338 <DMA_SetConfig+0x2e0>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a21      	ldr	r2, [pc, #132]	; (80073a4 <DMA_SetConfig+0x34c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d009      	beq.n	8007338 <DMA_SetConfig+0x2e0>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a1f      	ldr	r2, [pc, #124]	; (80073a8 <DMA_SetConfig+0x350>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d004      	beq.n	8007338 <DMA_SetConfig+0x2e0>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a1e      	ldr	r2, [pc, #120]	; (80073ac <DMA_SetConfig+0x354>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d101      	bne.n	800733c <DMA_SetConfig+0x2e4>
 8007338:	2301      	movs	r3, #1
 800733a:	e000      	b.n	800733e <DMA_SetConfig+0x2e6>
 800733c:	2300      	movs	r3, #0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d020      	beq.n	8007384 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007346:	f003 031f 	and.w	r3, r3, #31
 800734a:	2201      	movs	r2, #1
 800734c:	409a      	lsls	r2, r3
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	d108      	bne.n	8007374 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	60da      	str	r2, [r3, #12]
}
 8007372:	e007      	b.n	8007384 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	60da      	str	r2, [r3, #12]
}
 8007384:	bf00      	nop
 8007386:	371c      	adds	r7, #28
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	58025408 	.word	0x58025408
 8007394:	5802541c 	.word	0x5802541c
 8007398:	58025430 	.word	0x58025430
 800739c:	58025444 	.word	0x58025444
 80073a0:	58025458 	.word	0x58025458
 80073a4:	5802546c 	.word	0x5802546c
 80073a8:	58025480 	.word	0x58025480
 80073ac:	58025494 	.word	0x58025494

080073b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a42      	ldr	r2, [pc, #264]	; (80074c8 <DMA_CalcBaseAndBitshift+0x118>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d04a      	beq.n	8007458 <DMA_CalcBaseAndBitshift+0xa8>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a41      	ldr	r2, [pc, #260]	; (80074cc <DMA_CalcBaseAndBitshift+0x11c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d045      	beq.n	8007458 <DMA_CalcBaseAndBitshift+0xa8>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a3f      	ldr	r2, [pc, #252]	; (80074d0 <DMA_CalcBaseAndBitshift+0x120>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d040      	beq.n	8007458 <DMA_CalcBaseAndBitshift+0xa8>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a3e      	ldr	r2, [pc, #248]	; (80074d4 <DMA_CalcBaseAndBitshift+0x124>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d03b      	beq.n	8007458 <DMA_CalcBaseAndBitshift+0xa8>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a3c      	ldr	r2, [pc, #240]	; (80074d8 <DMA_CalcBaseAndBitshift+0x128>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d036      	beq.n	8007458 <DMA_CalcBaseAndBitshift+0xa8>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a3b      	ldr	r2, [pc, #236]	; (80074dc <DMA_CalcBaseAndBitshift+0x12c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d031      	beq.n	8007458 <DMA_CalcBaseAndBitshift+0xa8>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a39      	ldr	r2, [pc, #228]	; (80074e0 <DMA_CalcBaseAndBitshift+0x130>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d02c      	beq.n	8007458 <DMA_CalcBaseAndBitshift+0xa8>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a38      	ldr	r2, [pc, #224]	; (80074e4 <DMA_CalcBaseAndBitshift+0x134>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d027      	beq.n	8007458 <DMA_CalcBaseAndBitshift+0xa8>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a36      	ldr	r2, [pc, #216]	; (80074e8 <DMA_CalcBaseAndBitshift+0x138>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d022      	beq.n	8007458 <DMA_CalcBaseAndBitshift+0xa8>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a35      	ldr	r2, [pc, #212]	; (80074ec <DMA_CalcBaseAndBitshift+0x13c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d01d      	beq.n	8007458 <DMA_CalcBaseAndBitshift+0xa8>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a33      	ldr	r2, [pc, #204]	; (80074f0 <DMA_CalcBaseAndBitshift+0x140>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d018      	beq.n	8007458 <DMA_CalcBaseAndBitshift+0xa8>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a32      	ldr	r2, [pc, #200]	; (80074f4 <DMA_CalcBaseAndBitshift+0x144>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d013      	beq.n	8007458 <DMA_CalcBaseAndBitshift+0xa8>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a30      	ldr	r2, [pc, #192]	; (80074f8 <DMA_CalcBaseAndBitshift+0x148>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00e      	beq.n	8007458 <DMA_CalcBaseAndBitshift+0xa8>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a2f      	ldr	r2, [pc, #188]	; (80074fc <DMA_CalcBaseAndBitshift+0x14c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d009      	beq.n	8007458 <DMA_CalcBaseAndBitshift+0xa8>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a2d      	ldr	r2, [pc, #180]	; (8007500 <DMA_CalcBaseAndBitshift+0x150>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d004      	beq.n	8007458 <DMA_CalcBaseAndBitshift+0xa8>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a2c      	ldr	r2, [pc, #176]	; (8007504 <DMA_CalcBaseAndBitshift+0x154>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d101      	bne.n	800745c <DMA_CalcBaseAndBitshift+0xac>
 8007458:	2301      	movs	r3, #1
 800745a:	e000      	b.n	800745e <DMA_CalcBaseAndBitshift+0xae>
 800745c:	2300      	movs	r3, #0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d024      	beq.n	80074ac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	3b10      	subs	r3, #16
 800746a:	4a27      	ldr	r2, [pc, #156]	; (8007508 <DMA_CalcBaseAndBitshift+0x158>)
 800746c:	fba2 2303 	umull	r2, r3, r2, r3
 8007470:	091b      	lsrs	r3, r3, #4
 8007472:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	4a24      	ldr	r2, [pc, #144]	; (800750c <DMA_CalcBaseAndBitshift+0x15c>)
 800747c:	5cd3      	ldrb	r3, [r2, r3]
 800747e:	461a      	mov	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b03      	cmp	r3, #3
 8007488:	d908      	bls.n	800749c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	4b1f      	ldr	r3, [pc, #124]	; (8007510 <DMA_CalcBaseAndBitshift+0x160>)
 8007492:	4013      	ands	r3, r2
 8007494:	1d1a      	adds	r2, r3, #4
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	659a      	str	r2, [r3, #88]	; 0x58
 800749a:	e00d      	b.n	80074b8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	4b1b      	ldr	r3, [pc, #108]	; (8007510 <DMA_CalcBaseAndBitshift+0x160>)
 80074a4:	4013      	ands	r3, r2
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6593      	str	r3, [r2, #88]	; 0x58
 80074aa:	e005      	b.n	80074b8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	40020010 	.word	0x40020010
 80074cc:	40020028 	.word	0x40020028
 80074d0:	40020040 	.word	0x40020040
 80074d4:	40020058 	.word	0x40020058
 80074d8:	40020070 	.word	0x40020070
 80074dc:	40020088 	.word	0x40020088
 80074e0:	400200a0 	.word	0x400200a0
 80074e4:	400200b8 	.word	0x400200b8
 80074e8:	40020410 	.word	0x40020410
 80074ec:	40020428 	.word	0x40020428
 80074f0:	40020440 	.word	0x40020440
 80074f4:	40020458 	.word	0x40020458
 80074f8:	40020470 	.word	0x40020470
 80074fc:	40020488 	.word	0x40020488
 8007500:	400204a0 	.word	0x400204a0
 8007504:	400204b8 	.word	0x400204b8
 8007508:	aaaaaaab 	.word	0xaaaaaaab
 800750c:	080292cc 	.word	0x080292cc
 8007510:	fffffc00 	.word	0xfffffc00

08007514 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d120      	bne.n	800756a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752c:	2b03      	cmp	r3, #3
 800752e:	d858      	bhi.n	80075e2 <DMA_CheckFifoParam+0xce>
 8007530:	a201      	add	r2, pc, #4	; (adr r2, 8007538 <DMA_CheckFifoParam+0x24>)
 8007532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007536:	bf00      	nop
 8007538:	08007549 	.word	0x08007549
 800753c:	0800755b 	.word	0x0800755b
 8007540:	08007549 	.word	0x08007549
 8007544:	080075e3 	.word	0x080075e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d048      	beq.n	80075e6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007558:	e045      	b.n	80075e6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007562:	d142      	bne.n	80075ea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007568:	e03f      	b.n	80075ea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007572:	d123      	bne.n	80075bc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007578:	2b03      	cmp	r3, #3
 800757a:	d838      	bhi.n	80075ee <DMA_CheckFifoParam+0xda>
 800757c:	a201      	add	r2, pc, #4	; (adr r2, 8007584 <DMA_CheckFifoParam+0x70>)
 800757e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007582:	bf00      	nop
 8007584:	08007595 	.word	0x08007595
 8007588:	0800759b 	.word	0x0800759b
 800758c:	08007595 	.word	0x08007595
 8007590:	080075ad 	.word	0x080075ad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	73fb      	strb	r3, [r7, #15]
        break;
 8007598:	e030      	b.n	80075fc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d025      	beq.n	80075f2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075aa:	e022      	b.n	80075f2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075b4:	d11f      	bne.n	80075f6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075ba:	e01c      	b.n	80075f6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d902      	bls.n	80075ca <DMA_CheckFifoParam+0xb6>
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d003      	beq.n	80075d0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80075c8:	e018      	b.n	80075fc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	73fb      	strb	r3, [r7, #15]
        break;
 80075ce:	e015      	b.n	80075fc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00e      	beq.n	80075fa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	73fb      	strb	r3, [r7, #15]
    break;
 80075e0:	e00b      	b.n	80075fa <DMA_CheckFifoParam+0xe6>
        break;
 80075e2:	bf00      	nop
 80075e4:	e00a      	b.n	80075fc <DMA_CheckFifoParam+0xe8>
        break;
 80075e6:	bf00      	nop
 80075e8:	e008      	b.n	80075fc <DMA_CheckFifoParam+0xe8>
        break;
 80075ea:	bf00      	nop
 80075ec:	e006      	b.n	80075fc <DMA_CheckFifoParam+0xe8>
        break;
 80075ee:	bf00      	nop
 80075f0:	e004      	b.n	80075fc <DMA_CheckFifoParam+0xe8>
        break;
 80075f2:	bf00      	nop
 80075f4:	e002      	b.n	80075fc <DMA_CheckFifoParam+0xe8>
        break;
 80075f6:	bf00      	nop
 80075f8:	e000      	b.n	80075fc <DMA_CheckFifoParam+0xe8>
    break;
 80075fa:	bf00      	nop
    }
  }

  return status;
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop

0800760c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a38      	ldr	r2, [pc, #224]	; (8007700 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d022      	beq.n	800766a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a36      	ldr	r2, [pc, #216]	; (8007704 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d01d      	beq.n	800766a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a35      	ldr	r2, [pc, #212]	; (8007708 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d018      	beq.n	800766a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a33      	ldr	r2, [pc, #204]	; (800770c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d013      	beq.n	800766a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a32      	ldr	r2, [pc, #200]	; (8007710 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d00e      	beq.n	800766a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a30      	ldr	r2, [pc, #192]	; (8007714 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d009      	beq.n	800766a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a2f      	ldr	r2, [pc, #188]	; (8007718 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d004      	beq.n	800766a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a2d      	ldr	r2, [pc, #180]	; (800771c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d101      	bne.n	800766e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800766a:	2301      	movs	r3, #1
 800766c:	e000      	b.n	8007670 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800766e:	2300      	movs	r3, #0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01a      	beq.n	80076aa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	3b08      	subs	r3, #8
 800767c:	4a28      	ldr	r2, [pc, #160]	; (8007720 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	091b      	lsrs	r3, r3, #4
 8007684:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4b26      	ldr	r3, [pc, #152]	; (8007724 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800768a:	4413      	add	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	461a      	mov	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a24      	ldr	r2, [pc, #144]	; (8007728 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007698:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f003 031f 	and.w	r3, r3, #31
 80076a0:	2201      	movs	r2, #1
 80076a2:	409a      	lsls	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80076a8:	e024      	b.n	80076f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	3b10      	subs	r3, #16
 80076b2:	4a1e      	ldr	r2, [pc, #120]	; (800772c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80076b4:	fba2 2303 	umull	r2, r3, r2, r3
 80076b8:	091b      	lsrs	r3, r3, #4
 80076ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	4a1c      	ldr	r2, [pc, #112]	; (8007730 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d806      	bhi.n	80076d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4a1b      	ldr	r2, [pc, #108]	; (8007734 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d902      	bls.n	80076d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3308      	adds	r3, #8
 80076d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4b18      	ldr	r3, [pc, #96]	; (8007738 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	461a      	mov	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a16      	ldr	r2, [pc, #88]	; (800773c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80076e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f003 031f 	and.w	r3, r3, #31
 80076ec:	2201      	movs	r2, #1
 80076ee:	409a      	lsls	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80076f4:	bf00      	nop
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	58025408 	.word	0x58025408
 8007704:	5802541c 	.word	0x5802541c
 8007708:	58025430 	.word	0x58025430
 800770c:	58025444 	.word	0x58025444
 8007710:	58025458 	.word	0x58025458
 8007714:	5802546c 	.word	0x5802546c
 8007718:	58025480 	.word	0x58025480
 800771c:	58025494 	.word	0x58025494
 8007720:	cccccccd 	.word	0xcccccccd
 8007724:	16009600 	.word	0x16009600
 8007728:	58025880 	.word	0x58025880
 800772c:	aaaaaaab 	.word	0xaaaaaaab
 8007730:	400204b8 	.word	0x400204b8
 8007734:	4002040f 	.word	0x4002040f
 8007738:	10008200 	.word	0x10008200
 800773c:	40020880 	.word	0x40020880

08007740 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d04a      	beq.n	80077ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b08      	cmp	r3, #8
 800775a:	d847      	bhi.n	80077ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a25      	ldr	r2, [pc, #148]	; (80077f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d022      	beq.n	80077ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a24      	ldr	r2, [pc, #144]	; (80077fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d01d      	beq.n	80077ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a22      	ldr	r2, [pc, #136]	; (8007800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d018      	beq.n	80077ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a21      	ldr	r2, [pc, #132]	; (8007804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d013      	beq.n	80077ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a1f      	ldr	r2, [pc, #124]	; (8007808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00e      	beq.n	80077ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a1e      	ldr	r2, [pc, #120]	; (800780c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d009      	beq.n	80077ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a1c      	ldr	r2, [pc, #112]	; (8007810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d004      	beq.n	80077ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a1b      	ldr	r2, [pc, #108]	; (8007814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d101      	bne.n	80077b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80077b0:	2300      	movs	r3, #0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	4b17      	ldr	r3, [pc, #92]	; (8007818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80077ba:	4413      	add	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	461a      	mov	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a15      	ldr	r2, [pc, #84]	; (800781c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80077c8:	671a      	str	r2, [r3, #112]	; 0x70
 80077ca:	e009      	b.n	80077e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4b14      	ldr	r3, [pc, #80]	; (8007820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	461a      	mov	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a11      	ldr	r2, [pc, #68]	; (8007824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80077de:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	2201      	movs	r2, #1
 80077e6:	409a      	lsls	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80077ec:	bf00      	nop
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	58025408 	.word	0x58025408
 80077fc:	5802541c 	.word	0x5802541c
 8007800:	58025430 	.word	0x58025430
 8007804:	58025444 	.word	0x58025444
 8007808:	58025458 	.word	0x58025458
 800780c:	5802546c 	.word	0x5802546c
 8007810:	58025480 	.word	0x58025480
 8007814:	58025494 	.word	0x58025494
 8007818:	1600963f 	.word	0x1600963f
 800781c:	58025940 	.word	0x58025940
 8007820:	1000823f 	.word	0x1000823f
 8007824:	40020940 	.word	0x40020940

08007828 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e0c6      	b.n	80079c8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800783e:	2b00      	cmp	r3, #0
 8007840:	d102      	bne.n	8007848 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f009 f9a0 	bl	8010b88 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2223      	movs	r2, #35	; 0x23
 800784c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800784e:	4b60      	ldr	r3, [pc, #384]	; (80079d0 <HAL_ETH_Init+0x1a8>)
 8007850:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007854:	4a5e      	ldr	r2, [pc, #376]	; (80079d0 <HAL_ETH_Init+0x1a8>)
 8007856:	f043 0302 	orr.w	r3, r3, #2
 800785a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800785e:	4b5c      	ldr	r3, [pc, #368]	; (80079d0 <HAL_ETH_Init+0x1a8>)
 8007860:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	60bb      	str	r3, [r7, #8]
 800786a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	7a1b      	ldrb	r3, [r3, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d103      	bne.n	800787c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8007874:	2000      	movs	r0, #0
 8007876:	f7fc fba1 	bl	8003fbc <HAL_SYSCFG_ETHInterfaceSelect>
 800787a:	e003      	b.n	8007884 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800787c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007880:	f7fc fb9c 	bl	8003fbc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0201 	orr.w	r2, r2, #1
 8007896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800789a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800789c:	f7fc fb52 	bl	8003f44 <HAL_GetTick>
 80078a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80078a2:	e00f      	b.n	80078c4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80078a4:	f7fc fb4e 	bl	8003f44 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80078b2:	d907      	bls.n	80078c4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2204      	movs	r2, #4
 80078b8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	22e0      	movs	r2, #224	; 0xe0
 80078be:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e081      	b.n	80079c8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e6      	bne.n	80078a4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 faa4 	bl	8008e24 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80078dc:	f002 ffec 	bl	800a8b8 <HAL_RCC_GetHCLKFreq>
 80078e0:	4603      	mov	r3, r0
 80078e2:	4a3c      	ldr	r2, [pc, #240]	; (80079d4 <HAL_ETH_Init+0x1ac>)
 80078e4:	fba2 2303 	umull	r2, r3, r2, r3
 80078e8:	0c9a      	lsrs	r2, r3, #18
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3a01      	subs	r2, #1
 80078f0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 f9f7 	bl	8008ce8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007910:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8007914:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d007      	beq.n	8007932 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	22e0      	movs	r2, #224	; 0xe0
 800792c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e04a      	b.n	80079c8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	f241 1308 	movw	r3, #4360	; 0x1108
 800793a:	4413      	add	r3, r2
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	4b26      	ldr	r3, [pc, #152]	; (80079d8 <HAL_ETH_Init+0x1b0>)
 8007940:	4013      	ands	r3, r2
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6952      	ldr	r2, [r2, #20]
 8007946:	0052      	lsls	r2, r2, #1
 8007948:	6879      	ldr	r1, [r7, #4]
 800794a:	6809      	ldr	r1, [r1, #0]
 800794c:	431a      	orrs	r2, r3
 800794e:	f241 1308 	movw	r3, #4360	; 0x1108
 8007952:	440b      	add	r3, r1
 8007954:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 fabc 	bl	8008ed4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f001 fb00 	bl	8008f62 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	3305      	adds	r3, #5
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	021a      	lsls	r2, r3, #8
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	3304      	adds	r3, #4
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	4619      	mov	r1, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	3303      	adds	r3, #3
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	061a      	lsls	r2, r3, #24
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	3302      	adds	r3, #2
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	041b      	lsls	r3, r3, #16
 8007994:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	3301      	adds	r3, #1
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80079a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80079ae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80079b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2210      	movs	r2, #16
 80079be:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2210      	movs	r2, #16
 80079c4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	58024400 	.word	0x58024400
 80079d4:	431bde83 	.word	0x431bde83
 80079d8:	ffff8001 	.word	0xffff8001

080079dc <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 80079dc:	b480      	push	{r7}
 80079de:	b087      	sub	sp, #28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	3310      	adds	r3, #16
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <HAL_ETH_DescAssignMemory+0x28>
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d904      	bls.n	8007a0e <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e021      	b.n	8007a52 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00b      	beq.n	8007a44 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	371c      	adds	r7, #28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a6a:	2b10      	cmp	r3, #16
 8007a6c:	d14c      	bne.n	8007b08 <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2223      	movs	r2, #35	; 0x23
 8007a72:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0202 	orr.w	r2, r2, #2
 8007a82:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0201 	orr.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 0201 	orr.w	r2, r2, #1
 8007aa4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	f241 1304 	movw	r3, #4356	; 0x1104
 8007ab0:	4413      	add	r3, r2
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6811      	ldr	r1, [r2, #0]
 8007ab8:	f043 0201 	orr.w	r2, r3, #1
 8007abc:	f241 1304 	movw	r3, #4356	; 0x1104
 8007ac0:	440b      	add	r3, r1
 8007ac2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	f241 1308 	movw	r3, #4360	; 0x1108
 8007acc:	4413      	add	r3, r2
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	6811      	ldr	r1, [r2, #0]
 8007ad4:	f043 0201 	orr.w	r2, r3, #1
 8007ad8:	f241 1308 	movw	r3, #4360	; 0x1108
 8007adc:	440b      	add	r3, r1
 8007ade:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8007af2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007af6:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2210      	movs	r2, #16
 8007afc:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2222      	movs	r2, #34	; 0x22
 8007b02:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	e000      	b.n	8007b0a <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
  }
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d040      	beq.n	8007ba8 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2223      	movs	r2, #35	; 0x23
 8007b2a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	f241 1304 	movw	r3, #4356	; 0x1104
 8007b34:	4413      	add	r3, r2
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6811      	ldr	r1, [r2, #0]
 8007b3c:	f023 0201 	bic.w	r2, r3, #1
 8007b40:	f241 1304 	movw	r3, #4356	; 0x1104
 8007b44:	440b      	add	r3, r1
 8007b46:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	f241 1308 	movw	r3, #4360	; 0x1108
 8007b50:	4413      	add	r3, r2
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	6811      	ldr	r1, [r2, #0]
 8007b58:	f023 0201 	bic.w	r2, r3, #1
 8007b5c:	f241 1308 	movw	r3, #4360	; 0x1108
 8007b60:	440b      	add	r3, r1
 8007b62:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0201 	bic.w	r2, r2, #1
 8007b72:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f042 0201 	orr.w	r2, r2, #1
 8007b84:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0202 	bic.w	r2, r2, #2
 8007b96:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2210      	movs	r2, #16
 8007b9c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2210      	movs	r2, #16
 8007ba2:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	e000      	b.n	8007baa <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
  }
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b086      	sub	sp, #24
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	60f8      	str	r0, [r7, #12]
 8007bbe:	60b9      	str	r1, [r7, #8]
 8007bc0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d107      	bne.n	8007bd8 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bcc:	f043 0201 	orr.w	r2, r3, #1
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e073      	b.n	8007cc0 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bdc:	2b10      	cmp	r3, #16
 8007bde:	d16e      	bne.n	8007cbe <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8007be0:	2200      	movs	r2, #0
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f001 fa19 	bl	800901c <ETH_Prepare_Tx_Descriptors>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d007      	beq.n	8007c00 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf4:	f043 0202 	orr.w	r2, r3, #2
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e05f      	b.n	8007cc0 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3206      	adds	r2, #6
 8007c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0c:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	629a      	str	r2, [r3, #40]	; 0x28
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d904      	bls.n	8007c2a <HAL_ETH_Transmit+0x74>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c24:	1f1a      	subs	r2, r3, #4
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	3106      	adds	r1, #6
 8007c36:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007c3a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8007c3e:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8007c40:	f7fc f980 	bl	8003f44 <HAL_GetTick>
 8007c44:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8007c46:	e034      	b.n	8007cb2 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d011      	beq.n	8007c7e <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c5e:	f043 0208 	orr.w	r2, r3, #8
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	22e0      	movs	r2, #224	; 0xe0
 8007c78:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e020      	b.n	8007cc0 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c84:	d015      	beq.n	8007cb2 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8007c86:	f7fc f95d 	bl	8003f44 <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d302      	bcc.n	8007c9c <HAL_ETH_Transmit+0xe6>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10a      	bne.n	8007cb2 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ca0:	f043 0204 	orr.w	r2, r3, #4
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	22e0      	movs	r2, #224	; 0xe0
 8007cac:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e006      	b.n	8007cc0 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	dbc6      	blt.n	8007c48 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e000      	b.n	8007cc0 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
  }
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b089      	sub	sp, #36	; 0x24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3344      	adds	r3, #68	; 0x44
 8007cd4:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	69fa      	ldr	r2, [r7, #28]
 8007ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce4:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8007cea:	2300      	movs	r3, #0
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d06b      	beq.n	8007dd2 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	e0ce      	b.n	8007e9c <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	3301      	adds	r3, #1
 8007d02:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d036      	beq.n	8007d7e <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	3301      	adds	r3, #1
 8007d14:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	3301      	adds	r3, #1
 8007d24:	61fb      	str	r3, [r7, #28]
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	2b03      	cmp	r3, #3
 8007d2a:	d902      	bls.n	8007d32 <HAL_ETH_IsRxDataAvailable+0x6a>
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	3b04      	subs	r3, #4
 8007d30:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3a:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	db11      	blt.n	8007d68 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00b      	beq.n	8007d68 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2201      	movs	r2, #1
 8007d54:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	61fb      	str	r3, [r7, #28]
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d902      	bls.n	8007d68 <HAL_ETH_IsRxDataAvailable+0xa0>
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	3b04      	subs	r3, #4
 8007d66:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	69fa      	ldr	r2, [r7, #28]
 8007d6c:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e08e      	b.n	8007e9c <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d012      	beq.n	8007db0 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	3301      	adds	r3, #1
 8007d96:	61fb      	str	r3, [r7, #28]
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	2b03      	cmp	r3, #3
 8007d9c:	d902      	bls.n	8007da4 <HAL_ETH_IsRxDataAvailable+0xdc>
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	3b04      	subs	r3, #4
 8007da2:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	69fa      	ldr	r2, [r7, #28]
 8007da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dac:	61bb      	str	r3, [r7, #24]
 8007dae:	e010      	b.n	8007dd2 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	3301      	adds	r3, #1
 8007db4:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	3301      	adds	r3, #1
 8007dba:	61fb      	str	r3, [r7, #28]
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d902      	bls.n	8007dc8 <HAL_ETH_IsRxDataAvailable+0x100>
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	3b04      	subs	r3, #4
 8007dc6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	69fa      	ldr	r2, [r7, #28]
 8007dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd0:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	db02      	blt.n	8007de0 <HAL_ETH_IsRxDataAvailable+0x118>
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d98e      	bls.n	8007cfe <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d056      	beq.n	8007e94 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	69fa      	ldr	r2, [r7, #28]
 8007dea:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	69fa      	ldr	r2, [r7, #28]
 8007dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfe:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	e03b      	b.n	8007e7e <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	691a      	ldr	r2, [r3, #16]
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e14:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d009      	beq.n	8007e32 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	695a      	ldr	r2, [r3, #20]
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d005      	beq.n	8007e52 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d20d      	bcs.n	8007e78 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d902      	bls.n	8007e6e <HAL_ETH_IsRxDataAvailable+0x1a6>
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	3b04      	subs	r3, #4
 8007e6c:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	69fa      	ldr	r2, [r7, #28]
 8007e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e76:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	617b      	str	r3, [r7, #20]
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d3bf      	bcc.n	8007e06 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6819      	ldr	r1, [r3, #0]
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	f241 1328 	movw	r3, #4392	; 0x1128
 8007e90:	440b      	add	r3, r1
 8007e92:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2200      	movs	r2, #0
 8007e98:	619a      	str	r2, [r3, #24]

  return 0;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3724      	adds	r7, #36	; 0x24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08a      	sub	sp, #40	; 0x28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3344      	adds	r3, #68	; 0x44
 8007eb6:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eca:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d104      	bne.n	8007ee0 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e07d      	b.n	8007fdc <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10f      	bne.n	8007f08 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff feed 	bl	8007cc8 <HAL_ETH_IsRxDataAvailable>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e071      	b.n	8007fdc <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f06:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8007f08:	2300      	movs	r3, #0
 8007f0a:	623b      	str	r3, [r7, #32]
 8007f0c:	e031      	b.n	8007f72 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	461a      	mov	r2, r3
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	695a      	ldr	r2, [r3, #20]
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00b      	beq.n	8007f40 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	461a      	mov	r2, r3
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	695a      	ldr	r2, [r3, #20]
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007f48:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d902      	bls.n	8007f5c <HAL_ETH_GetRxDataBuffer+0xb4>
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	3b04      	subs	r3, #4
 8007f5a:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f64:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	623b      	str	r3, [r7, #32]
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	6a3a      	ldr	r2, [r7, #32]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d3c7      	bcc.n	8007f0e <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	461a      	mov	r2, r3
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d803      	bhi.n	8007fa8 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	605a      	str	r2, [r3, #4]
 8007fa6:	e018      	b.n	8007fda <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d012      	beq.n	8007fd6 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	695a      	ldr	r2, [r3, #20]
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	1ad2      	subs	r2, r2, r3
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	605a      	str	r2, [r3, #4]
 8007fd4:	e001      	b.n	8007fda <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e000      	b.n	8007fdc <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3728      	adds	r7, #40	; 0x28
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	3344      	adds	r3, #68	; 0x44
 8007ff2:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d107      	bne.n	8008012 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7ff fe60 	bl	8007cc8 <HAL_ETH_IsRxDataAvailable>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e017      	b.n	8008042 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	699a      	ldr	r2, [r3, #24]
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	4413      	add	r3, r2
 800801a:	3b01      	subs	r3, #1
 800801c:	617b      	str	r3, [r7, #20]
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2b03      	cmp	r3, #3
 8008022:	d902      	bls.n	800802a <HAL_ETH_GetRxDataLength+0x46>
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	3b04      	subs	r3, #4
 8008028:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008032:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 800804a:	b480      	push	{r7}
 800804c:	b089      	sub	sp, #36	; 0x24
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3344      	adds	r3, #68	; 0x44
 8008056:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	69fa      	ldr	r2, [r7, #28]
 8008062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008066:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e057      	b.n	800812a <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	3301      	adds	r3, #1
 8008086:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8008088:	2300      	movs	r3, #0
 800808a:	613b      	str	r3, [r7, #16]
 800808c:	e03b      	b.n	8008106 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	691a      	ldr	r2, [r3, #16]
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800809c:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d009      	beq.n	80080ba <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	695a      	ldr	r2, [r3, #20]
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d005      	beq.n	80080da <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	3b01      	subs	r3, #1
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d20d      	bcs.n	8008100 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	3301      	adds	r3, #1
 80080e8:	61fb      	str	r3, [r7, #28]
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d902      	bls.n	80080f6 <HAL_ETH_BuildRxDescriptors+0xac>
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	3b04      	subs	r3, #4
 80080f4:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	69fa      	ldr	r2, [r7, #28]
 80080fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fe:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	3301      	adds	r3, #1
 8008104:	613b      	str	r3, [r7, #16]
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	429a      	cmp	r2, r3
 800810c:	d3bf      	bcc.n	800808e <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6819      	ldr	r1, [r3, #0]
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	f241 1328 	movw	r3, #4392	; 0x1128
 8008118:	440b      	add	r3, r1
 800811a:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3724      	adds	r7, #36	; 0x24
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
	...

08008138 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814e:	2b40      	cmp	r3, #64	; 0x40
 8008150:	d113      	bne.n	800817a <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	f241 1334 	movw	r3, #4404	; 0x1134
 800815a:	4413      	add	r3, r2
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008162:	2b40      	cmp	r3, #64	; 0x40
 8008164:	d109      	bne.n	800817a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f8f2 	bl	8008350 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008174:	f248 0240 	movw	r2, #32832	; 0x8040
 8008178:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b01      	cmp	r3, #1
 800818a:	d113      	bne.n	80081b4 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	f241 1334 	movw	r3, #4404	; 0x1134
 8008194:	4413      	add	r3, r2
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	2b01      	cmp	r3, #1
 800819e:	d109      	bne.n	80081b4 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f8cb 	bl	800833c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80081ae:	f248 0201 	movw	r2, #32769	; 0x8001
 80081b2:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081c6:	d149      	bne.n	800825c <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	f241 1334 	movw	r3, #4404	; 0x1134
 80081d0:	4413      	add	r3, r2
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081dc:	d13e      	bne.n	800825c <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081e2:	f043 0208 	orr.w	r2, r3, #8
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081fc:	d11b      	bne.n	8008236 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	f241 1302 	movw	r3, #4354	; 0x1102
 800820c:	4013      	ands	r3, r2
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	f241 1334 	movw	r3, #4404	; 0x1134
 800821a:	4413      	add	r3, r2
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	6811      	ldr	r1, [r2, #0]
 8008222:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008226:	f241 1334 	movw	r3, #4404	; 0x1134
 800822a:	440b      	add	r3, r1
 800822c:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	22e0      	movs	r2, #224	; 0xe0
 8008232:	66da      	str	r2, [r3, #108]	; 0x6c
 8008234:	e00f      	b.n	8008256 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008250:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8008254:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f884 	bl	8008364 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008264:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008268:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800826c:	d10e      	bne.n	800828c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	22e0      	movs	r2, #224	; 0xe0
 800827e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f879 	bl	8008378 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008294:	f003 0310 	and.w	r3, r3, #16
 8008298:	2b10      	cmp	r3, #16
 800829a:	d10f      	bne.n	80082bc <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80082a4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f86c 	bl	800838c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082c4:	f003 0320 	and.w	r3, r3, #32
 80082c8:	2b20      	cmp	r3, #32
 80082ca:	d10f      	bne.n	80082ec <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80082d4:	f003 020f 	and.w	r2, r3, #15
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f85e 	bl	80083a0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80082ec:	f7fd f8ba 	bl	8005464 <HAL_GetCurrentCPUID>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d10d      	bne.n	8008312 <HAL_ETH_IRQHandler+0x1da>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80082f6:	4b0f      	ldr	r3, [pc, #60]	; (8008334 <HAL_ETH_IRQHandler+0x1fc>)
 80082f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d014      	beq.n	800832c <HAL_ETH_IRQHandler+0x1f4>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8008302:	4b0c      	ldr	r3, [pc, #48]	; (8008334 <HAL_ETH_IRQHandler+0x1fc>)
 8008304:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008308:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f852 	bl	80083b4 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8008310:	e00c      	b.n	800832c <HAL_ETH_IRQHandler+0x1f4>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8008312:	4b09      	ldr	r3, [pc, #36]	; (8008338 <HAL_ETH_IRQHandler+0x200>)
 8008314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d006      	beq.n	800832c <HAL_ETH_IRQHandler+0x1f4>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800831e:	4b06      	ldr	r3, [pc, #24]	; (8008338 <HAL_ETH_IRQHandler+0x200>)
 8008320:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008324:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f844 	bl	80083b4 <HAL_ETH_WakeUpCallback>
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	58000080 	.word	0x58000080
 8008338:	580000c0 	.word	0x580000c0

0800833c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
 80083d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e03e      	b.n	8008468 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80083f2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	055b      	lsls	r3, r3, #21
 80083fe:	4313      	orrs	r3, r2
 8008400:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	041b      	lsls	r3, r3, #16
 800840c:	4313      	orrs	r3, r2
 800840e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f043 030c 	orr.w	r3, r3, #12
 8008416:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f043 0301 	orr.w	r3, r3, #1
 800841e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800842a:	f7fb fd8b 	bl	8003f44 <HAL_GetTick>
 800842e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008430:	e009      	b.n	8008446 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8008432:	f7fb fd87 	bl	8003f44 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008440:	d901      	bls.n	8008446 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e010      	b.n	8008468 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800844e:	f003 0301 	and.w	r3, r3, #1
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1ed      	bne.n	8008432 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800845e:	b29b      	uxth	r3, r3
 8008460:	461a      	mov	r2, r3
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e03c      	b.n	800850c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800849a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	055b      	lsls	r3, r3, #21
 80084a6:	4313      	orrs	r3, r2
 80084a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	041b      	lsls	r3, r3, #16
 80084b4:	4313      	orrs	r3, r2
 80084b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f023 030c 	bic.w	r3, r3, #12
 80084be:	f043 0304 	orr.w	r3, r3, #4
 80084c2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f043 0301 	orr.w	r3, r3, #1
 80084ca:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	4b10      	ldr	r3, [pc, #64]	; (8008514 <HAL_ETH_WritePHYRegister+0xa4>)
 80084d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80084d6:	4a0f      	ldr	r2, [pc, #60]	; (8008514 <HAL_ETH_WritePHYRegister+0xa4>)
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80084de:	f7fb fd31 	bl	8003f44 <HAL_GetTick>
 80084e2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80084e4:	e009      	b.n	80084fa <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80084e6:	f7fb fd2d 	bl	8003f44 <HAL_GetTick>
 80084ea:	4602      	mov	r2, r0
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084f4:	d901      	bls.n	80084fa <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e008      	b.n	800850c <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1ed      	bne.n	80084e6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3718      	adds	r7, #24
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	40028000 	.word	0x40028000

08008518 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e1c3      	b.n	80088b4 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 020c 	and.w	r2, r3, #12
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0310 	and.w	r3, r3, #16
 8008544:	2b00      	cmp	r3, #0
 8008546:	bf14      	ite	ne
 8008548:	2301      	movne	r3, #1
 800854a:	2300      	moveq	r3, #0
 800854c:	b2db      	uxtb	r3, r3
 800854e:	461a      	mov	r2, r3
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856e:	2b00      	cmp	r3, #0
 8008570:	bf0c      	ite	eq
 8008572:	2301      	moveq	r3, #1
 8008574:	2300      	movne	r3, #0
 8008576:	b2db      	uxtb	r3, r3
 8008578:	461a      	mov	r2, r3
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800858a:	2b00      	cmp	r3, #0
 800858c:	bf14      	ite	ne
 800858e:	2301      	movne	r3, #1
 8008590:	2300      	moveq	r3, #0
 8008592:	b2db      	uxtb	r3, r3
 8008594:	461a      	mov	r2, r3
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	bf0c      	ite	eq
 80085a8:	2301      	moveq	r3, #1
 80085aa:	2300      	movne	r3, #0
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	461a      	mov	r2, r3
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085be:	2b00      	cmp	r3, #0
 80085c0:	bf14      	ite	ne
 80085c2:	2301      	movne	r3, #1
 80085c4:	2300      	moveq	r3, #0
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	461a      	mov	r2, r3
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	bf14      	ite	ne
 80085dc:	2301      	movne	r3, #1
 80085de:	2300      	moveq	r3, #0
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	461a      	mov	r2, r3
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800860e:	2b00      	cmp	r3, #0
 8008610:	bf14      	ite	ne
 8008612:	2301      	movne	r3, #1
 8008614:	2300      	moveq	r3, #0
 8008616:	b2db      	uxtb	r3, r3
 8008618:	461a      	mov	r2, r3
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008628:	2b00      	cmp	r3, #0
 800862a:	bf0c      	ite	eq
 800862c:	2301      	moveq	r3, #1
 800862e:	2300      	movne	r3, #0
 8008630:	b2db      	uxtb	r3, r3
 8008632:	461a      	mov	r2, r3
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008642:	2b00      	cmp	r3, #0
 8008644:	bf0c      	ite	eq
 8008646:	2301      	moveq	r3, #1
 8008648:	2300      	movne	r3, #0
 800864a:	b2db      	uxtb	r3, r3
 800864c:	461a      	mov	r2, r3
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800865c:	2b00      	cmp	r3, #0
 800865e:	bf14      	ite	ne
 8008660:	2301      	movne	r3, #1
 8008662:	2300      	moveq	r3, #0
 8008664:	b2db      	uxtb	r3, r3
 8008666:	461a      	mov	r2, r3
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008676:	2b00      	cmp	r3, #0
 8008678:	bf14      	ite	ne
 800867a:	2301      	movne	r3, #1
 800867c:	2300      	moveq	r3, #0
 800867e:	b2db      	uxtb	r3, r3
 8008680:	461a      	mov	r2, r3
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008690:	2b00      	cmp	r3, #0
 8008692:	bf14      	ite	ne
 8008694:	2301      	movne	r3, #1
 8008696:	2300      	moveq	r3, #0
 8008698:	b2db      	uxtb	r3, r3
 800869a:	461a      	mov	r2, r3
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	bf14      	ite	ne
 80086ae:	2301      	movne	r3, #1
 80086b0:	2300      	moveq	r3, #0
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	461a      	mov	r2, r3
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	bf14      	ite	ne
 80086d6:	2301      	movne	r3, #1
 80086d8:	2300      	moveq	r3, #0
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	461a      	mov	r2, r3
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008708:	2b00      	cmp	r3, #0
 800870a:	bf0c      	ite	eq
 800870c:	2301      	moveq	r3, #1
 800870e:	2300      	movne	r3, #0
 8008710:	b2db      	uxtb	r3, r3
 8008712:	461a      	mov	r2, r3
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008724:	2b00      	cmp	r3, #0
 8008726:	bf14      	ite	ne
 8008728:	2301      	movne	r3, #1
 800872a:	2300      	moveq	r3, #0
 800872c:	b2db      	uxtb	r3, r3
 800872e:	461a      	mov	r2, r3
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008740:	2b00      	cmp	r3, #0
 8008742:	bf14      	ite	ne
 8008744:	2301      	movne	r3, #1
 8008746:	2300      	moveq	r3, #0
 8008748:	b2db      	uxtb	r3, r3
 800874a:	461a      	mov	r2, r3
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800875c:	2b00      	cmp	r3, #0
 800875e:	bf14      	ite	ne
 8008760:	2301      	movne	r3, #1
 8008762:	2300      	moveq	r3, #0
 8008764:	b2db      	uxtb	r3, r3
 8008766:	461a      	mov	r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	0e5b      	lsrs	r3, r3, #25
 8008776:	f003 021f 	and.w	r2, r3, #31
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008788:	2b00      	cmp	r3, #0
 800878a:	bf14      	ite	ne
 800878c:	2301      	movne	r3, #1
 800878e:	2300      	moveq	r3, #0
 8008790:	b2db      	uxtb	r3, r3
 8008792:	461a      	mov	r2, r3
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	f003 020f 	and.w	r2, r3, #15
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	bf14      	ite	ne
 80087b6:	2301      	movne	r3, #1
 80087b8:	2300      	moveq	r3, #0
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	461a      	mov	r2, r3
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	bf0c      	ite	eq
 80087d2:	2301      	moveq	r3, #1
 80087d4:	2300      	movne	r3, #0
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	461a      	mov	r2, r3
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f4:	0c1b      	lsrs	r3, r3, #16
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	bf14      	ite	ne
 800880c:	2301      	movne	r3, #1
 800880e:	2300      	moveq	r3, #0
 8008810:	b2db      	uxtb	r3, r3
 8008812:	461a      	mov	r2, r3
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b00      	cmp	r3, #0
 8008828:	bf14      	ite	ne
 800882a:	2301      	movne	r3, #1
 800882c:	2300      	moveq	r3, #0
 800882e:	b2db      	uxtb	r3, r3
 8008830:	461a      	mov	r2, r3
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8008840:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008850:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008860:	f003 0308 	and.w	r3, r3, #8
 8008864:	2b00      	cmp	r3, #0
 8008866:	bf14      	ite	ne
 8008868:	2301      	movne	r3, #1
 800886a:	2300      	moveq	r3, #0
 800886c:	b2db      	uxtb	r3, r3
 800886e:	461a      	mov	r2, r3
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800887e:	f003 0310 	and.w	r3, r3, #16
 8008882:	2b00      	cmp	r3, #0
 8008884:	bf14      	ite	ne
 8008886:	2301      	movne	r3, #1
 8008888:	2300      	moveq	r3, #0
 800888a:	b2db      	uxtb	r3, r3
 800888c:	461a      	mov	r2, r3
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800889c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bf0c      	ite	eq
 80088a4:	2301      	moveq	r3, #1
 80088a6:	2300      	movne	r3, #0
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	461a      	mov	r2, r3
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e00a      	b.n	80088ea <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d8:	2b10      	cmp	r3, #16
 80088da:	d105      	bne.n	80088e8 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f860 	bl	80089a4 <ETH_SetMACConfig>

    return HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	e000      	b.n	80088ea <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
  }
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
	...

080088f4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008904:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800890c:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800890e:	f001 ffd3 	bl	800a8b8 <HAL_RCC_GetHCLKFreq>
 8008912:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	4a1e      	ldr	r2, [pc, #120]	; (8008990 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d908      	bls.n	800892e <HAL_ETH_SetMDIOClockRange+0x3a>
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	4a1d      	ldr	r2, [pc, #116]	; (8008994 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d804      	bhi.n	800892e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800892a:	60fb      	str	r3, [r7, #12]
 800892c:	e027      	b.n	800897e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	4a18      	ldr	r2, [pc, #96]	; (8008994 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d908      	bls.n	8008948 <HAL_ETH_SetMDIOClockRange+0x54>
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	4a17      	ldr	r2, [pc, #92]	; (8008998 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d204      	bcs.n	8008948 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008944:	60fb      	str	r3, [r7, #12]
 8008946:	e01a      	b.n	800897e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	4a13      	ldr	r2, [pc, #76]	; (8008998 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d303      	bcc.n	8008958 <HAL_ETH_SetMDIOClockRange+0x64>
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4a12      	ldr	r2, [pc, #72]	; (800899c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d911      	bls.n	800897c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	4a10      	ldr	r2, [pc, #64]	; (800899c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d908      	bls.n	8008972 <HAL_ETH_SetMDIOClockRange+0x7e>
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	4a0f      	ldr	r2, [pc, #60]	; (80089a0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d804      	bhi.n	8008972 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	e005      	b.n	800897e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	e000      	b.n	800897e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800897c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8008988:	bf00      	nop
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	01312cff 	.word	0x01312cff
 8008994:	02160ebf 	.word	0x02160ebf
 8008998:	03938700 	.word	0x03938700
 800899c:	05f5e0ff 	.word	0x05f5e0ff
 80089a0:	08f0d17f 	.word	0x08f0d17f

080089a4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80089b6:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	791b      	ldrb	r3, [r3, #4]
 80089bc:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80089be:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	7b1b      	ldrb	r3, [r3, #12]
 80089c4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80089c6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	7b5b      	ldrb	r3, [r3, #13]
 80089cc:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80089ce:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	7b9b      	ldrb	r3, [r3, #14]
 80089d4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80089d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	7bdb      	ldrb	r3, [r3, #15]
 80089dc:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80089de:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	7c12      	ldrb	r2, [r2, #16]
 80089e4:	2a00      	cmp	r2, #0
 80089e6:	d102      	bne.n	80089ee <ETH_SetMACConfig+0x4a>
 80089e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80089ec:	e000      	b.n	80089f0 <ETH_SetMACConfig+0x4c>
 80089ee:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80089f0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	7c52      	ldrb	r2, [r2, #17]
 80089f6:	2a00      	cmp	r2, #0
 80089f8:	d102      	bne.n	8008a00 <ETH_SetMACConfig+0x5c>
 80089fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80089fe:	e000      	b.n	8008a02 <ETH_SetMACConfig+0x5e>
 8008a00:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8008a02:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	7c9b      	ldrb	r3, [r3, #18]
 8008a08:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8008a0a:	431a      	orrs	r2, r3
                                macconf->Speed |
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8008a10:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8008a16:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	7f1b      	ldrb	r3, [r3, #28]
 8008a1c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8008a1e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	7f5b      	ldrb	r3, [r3, #29]
 8008a24:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8008a26:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	7f92      	ldrb	r2, [r2, #30]
 8008a2c:	2a00      	cmp	r2, #0
 8008a2e:	d102      	bne.n	8008a36 <ETH_SetMACConfig+0x92>
 8008a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a34:	e000      	b.n	8008a38 <ETH_SetMACConfig+0x94>
 8008a36:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8008a38:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	7fdb      	ldrb	r3, [r3, #31]
 8008a3e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8008a40:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008a48:	2a00      	cmp	r2, #0
 8008a4a:	d102      	bne.n	8008a52 <ETH_SetMACConfig+0xae>
 8008a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a50:	e000      	b.n	8008a54 <ETH_SetMACConfig+0xb0>
 8008a52:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8008a54:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8008a5a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a62:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8008a64:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	4b56      	ldr	r3, [pc, #344]	; (8008bd0 <ETH_SetMACConfig+0x22c>)
 8008a76:	4013      	ands	r3, r2
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	6812      	ldr	r2, [r2, #0]
 8008a7c:	68f9      	ldr	r1, [r7, #12]
 8008a7e:	430b      	orrs	r3, r1
 8008a80:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a86:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a8e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8008a90:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a98:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8008a9a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008aa2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8008aa4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8008aac:	2a00      	cmp	r2, #0
 8008aae:	d102      	bne.n	8008ab6 <ETH_SetMACConfig+0x112>
 8008ab0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008ab4:	e000      	b.n	8008ab8 <ETH_SetMACConfig+0x114>
 8008ab6:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8008ab8:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	4b42      	ldr	r3, [pc, #264]	; (8008bd4 <ETH_SetMACConfig+0x230>)
 8008aca:	4013      	ands	r3, r2
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6812      	ldr	r2, [r2, #0]
 8008ad0:	68f9      	ldr	r1, [r7, #12]
 8008ad2:	430b      	orrs	r3, r1
 8008ad4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008adc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68da      	ldr	r2, [r3, #12]
 8008aec:	4b3a      	ldr	r3, [pc, #232]	; (8008bd8 <ETH_SetMACConfig+0x234>)
 8008aee:	4013      	ands	r3, r2
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6812      	ldr	r2, [r2, #0]
 8008af4:	68f9      	ldr	r1, [r7, #12]
 8008af6:	430b      	orrs	r3, r1
 8008af8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008b00:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008b06:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8008b0e:	2a00      	cmp	r2, #0
 8008b10:	d101      	bne.n	8008b16 <ETH_SetMACConfig+0x172>
 8008b12:	2280      	movs	r2, #128	; 0x80
 8008b14:	e000      	b.n	8008b18 <ETH_SetMACConfig+0x174>
 8008b16:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8008b18:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b1e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008b20:	4313      	orrs	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b2a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8008b2e:	4013      	ands	r3, r2
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	6812      	ldr	r2, [r2, #0]
 8008b34:	68f9      	ldr	r1, [r7, #12]
 8008b36:	430b      	orrs	r3, r1
 8008b38:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008b40:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008b48:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b56:	f023 0103 	bic.w	r1, r3, #3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	430a      	orrs	r2, r1
 8008b62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8008b6e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8008b8a:	2a00      	cmp	r2, #0
 8008b8c:	d101      	bne.n	8008b92 <ETH_SetMACConfig+0x1ee>
 8008b8e:	2240      	movs	r2, #64	; 0x40
 8008b90:	e000      	b.n	8008b94 <ETH_SetMACConfig+0x1f0>
 8008b92:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8008b94:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008b9c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008b9e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008ba6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008bb4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8008bc4:	bf00      	nop
 8008bc6:	3714      	adds	r7, #20
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	00048083 	.word	0x00048083
 8008bd4:	c0f88000 	.word	0xc0f88000
 8008bd8:	fffffef0 	.word	0xfffffef0

08008bdc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	4b38      	ldr	r3, [pc, #224]	; (8008cd4 <ETH_SetDMAConfig+0xf8>)
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	6812      	ldr	r2, [r2, #0]
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	6809      	ldr	r1, [r1, #0]
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8008c02:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	791b      	ldrb	r3, [r3, #4]
 8008c08:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008c0e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	7b1b      	ldrb	r3, [r3, #12]
 8008c14:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008c16:	4313      	orrs	r3, r2
 8008c18:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	f241 0304 	movw	r3, #4100	; 0x1004
 8008c22:	4413      	add	r3, r2
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	4b2c      	ldr	r3, [pc, #176]	; (8008cd8 <ETH_SetDMAConfig+0xfc>)
 8008c28:	4013      	ands	r3, r2
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	6811      	ldr	r1, [r2, #0]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	431a      	orrs	r2, r3
 8008c32:	f241 0304 	movw	r3, #4100	; 0x1004
 8008c36:	440b      	add	r3, r1
 8008c38:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	7b5b      	ldrb	r3, [r3, #13]
 8008c3e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008c44:	4313      	orrs	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4b22      	ldr	r3, [pc, #136]	; (8008cdc <ETH_SetDMAConfig+0x100>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	6811      	ldr	r1, [r2, #0]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	431a      	orrs	r2, r3
 8008c5e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8008c62:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	7d1b      	ldrb	r3, [r3, #20]
 8008c6c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8008c6e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	7f5b      	ldrb	r3, [r3, #29]
 8008c74:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	f241 1304 	movw	r3, #4356	; 0x1104
 8008c82:	4413      	add	r3, r2
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	4b16      	ldr	r3, [pc, #88]	; (8008ce0 <ETH_SetDMAConfig+0x104>)
 8008c88:	4013      	ands	r3, r2
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	6811      	ldr	r1, [r2, #0]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	431a      	orrs	r2, r3
 8008c92:	f241 1304 	movw	r3, #4356	; 0x1104
 8008c96:	440b      	add	r3, r1
 8008c98:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	7f1b      	ldrb	r3, [r3, #28]
 8008c9e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	f241 1308 	movw	r3, #4360	; 0x1108
 8008cb0:	4413      	add	r3, r2
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ce4 <ETH_SetDMAConfig+0x108>)
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	6811      	ldr	r1, [r2, #0]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	f241 1308 	movw	r3, #4360	; 0x1108
 8008cc4:	440b      	add	r3, r1
 8008cc6:	601a      	str	r2, [r3, #0]
}
 8008cc8:	bf00      	nop
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	ffff87fd 	.word	0xffff87fd
 8008cd8:	ffff2ffe 	.word	0xffff2ffe
 8008cdc:	fffec000 	.word	0xfffec000
 8008ce0:	ffc0efef 	.word	0xffc0efef
 8008ce4:	7fc0ffff 	.word	0x7fc0ffff

08008ce8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b0a4      	sub	sp, #144	; 0x90
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8008d00:	2300      	movs	r3, #0
 8008d02:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8008d06:	2301      	movs	r3, #1
 8008d08:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8008d12:	2301      	movs	r3, #1
 8008d14:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8008d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d28:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8008d30:	2300      	movs	r3, #0
 8008d32:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8008d34:	2300      	movs	r3, #0
 8008d36:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8008d40:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8008d44:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8008d46:	2300      	movs	r3, #0
 8008d48:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8008d56:	2300      	movs	r3, #0
 8008d58:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8008d62:	2300      	movs	r3, #0
 8008d64:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8008d74:	2300      	movs	r3, #0
 8008d76:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8008d80:	2320      	movs	r3, #32
 8008d82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8008d86:	2301      	movs	r3, #1
 8008d88:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8008d92:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8008d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8008d98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d9c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008da4:	2302      	movs	r3, #2
 8008da6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8008daa:	2300      	movs	r3, #0
 8008dac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008db0:	2300      	movs	r3, #0
 8008db2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff fde6 	bl	80089a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008de4:	2300      	movs	r3, #0
 8008de6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8008dea:	2300      	movs	r3, #0
 8008dec:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8008dee:	2300      	movs	r3, #0
 8008df0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008df2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008df6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008dfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e00:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8008e08:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008e0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008e0e:	f107 0308 	add.w	r3, r7, #8
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff fee1 	bl	8008bdc <ETH_SetDMAConfig>
}
 8008e1a:	bf00      	nop
 8008e1c:	3790      	adds	r7, #144	; 0x90
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008e34:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008e3c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008e3e:	f001 fd3b 	bl	800a8b8 <HAL_RCC_GetHCLKFreq>
 8008e42:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	4a1e      	ldr	r2, [pc, #120]	; (8008ec0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d908      	bls.n	8008e5e <ETH_MAC_MDIO_ClkConfig+0x3a>
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	4a1d      	ldr	r2, [pc, #116]	; (8008ec4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d804      	bhi.n	8008e5e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	e027      	b.n	8008eae <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	4a18      	ldr	r2, [pc, #96]	; (8008ec4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d908      	bls.n	8008e78 <ETH_MAC_MDIO_ClkConfig+0x54>
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	4a17      	ldr	r2, [pc, #92]	; (8008ec8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d204      	bcs.n	8008e78 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	e01a      	b.n	8008eae <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	4a13      	ldr	r2, [pc, #76]	; (8008ec8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d303      	bcc.n	8008e88 <ETH_MAC_MDIO_ClkConfig+0x64>
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	4a12      	ldr	r2, [pc, #72]	; (8008ecc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d911      	bls.n	8008eac <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4a10      	ldr	r2, [pc, #64]	; (8008ecc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d908      	bls.n	8008ea2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	4a0f      	ldr	r2, [pc, #60]	; (8008ed0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d804      	bhi.n	8008ea2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	e005      	b.n	8008eae <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ea8:	60fb      	str	r3, [r7, #12]
 8008eaa:	e000      	b.n	8008eae <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8008eac:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8008eb8:	bf00      	nop
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	01312cff 	.word	0x01312cff
 8008ec4:	02160ebf 	.word	0x02160ebf
 8008ec8:	03938700 	.word	0x03938700
 8008ecc:	05f5e0ff 	.word	0x05f5e0ff
 8008ed0:	08f0d17f 	.word	0x08f0d17f

08008ed4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008edc:	2300      	movs	r3, #0
 8008ede:	60fb      	str	r3, [r7, #12]
 8008ee0:	e01d      	b.n	8008f1e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68d9      	ldr	r1, [r3, #12]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	005b      	lsls	r3, r3, #1
 8008eec:	4413      	add	r3, r2
 8008eee:	00db      	lsls	r3, r3, #3
 8008ef0:	440b      	add	r3, r1
 8008ef2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	2200      	movs	r2, #0
 8008efe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2200      	movs	r2, #0
 8008f04:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008f0c:	68b9      	ldr	r1, [r7, #8]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	3206      	adds	r2, #6
 8008f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	d9de      	bls.n	8008ee2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	f241 132c 	movw	r3, #4396	; 0x112c
 8008f32:	4413      	add	r3, r2
 8008f34:	2203      	movs	r2, #3
 8008f36:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68d9      	ldr	r1, [r3, #12]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	f241 1314 	movw	r3, #4372	; 0x1114
 8008f44:	4413      	add	r3, r2
 8008f46:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8008f54:	601a      	str	r2, [r3, #0]
}
 8008f56:	bf00      	nop
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b085      	sub	sp, #20
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	e024      	b.n	8008fba <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6919      	ldr	r1, [r3, #16]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	4613      	mov	r3, r2
 8008f78:	005b      	lsls	r3, r3, #1
 8008f7a:	4413      	add	r3, r2
 8008f7c:	00db      	lsls	r3, r3, #3
 8008f7e:	440b      	add	r3, r1
 8008f80:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2200      	movs	r2, #0
 8008f86:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	2200      	movs	r2, #0
 8008f92:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2200      	movs	r2, #0
 8008f98:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3310      	adds	r3, #16
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	440b      	add	r3, r1
 8008fb2:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d9d7      	bls.n	8008f70 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	f241 1330 	movw	r3, #4400	; 0x1130
 8008fe6:	4413      	add	r3, r2
 8008fe8:	2203      	movs	r2, #3
 8008fea:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6919      	ldr	r1, [r3, #16]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	f241 131c 	movw	r3, #4380	; 0x111c
 8008ff8:	4413      	add	r3, r2
 8008ffa:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	f241 1328 	movw	r3, #4392	; 0x1128
 800900c:	4413      	add	r3, r2
 800900e:	6019      	str	r1, [r3, #0]
}
 8009010:	bf00      	nop
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800901c:	b480      	push	{r7}
 800901e:	b08d      	sub	sp, #52	; 0x34
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	3318      	adds	r3, #24
 800902c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 800903a:	2300      	movs	r3, #0
 800903c:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009046:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8009052:	6a3b      	ldr	r3, [r7, #32]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800905a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800905e:	d007      	beq.n	8009070 <ETH_Prepare_Tx_Descriptors+0x54>
 8009060:	697a      	ldr	r2, [r7, #20]
 8009062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009064:	3304      	adds	r3, #4
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4413      	add	r3, r2
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8009070:	2302      	movs	r3, #2
 8009072:	e24a      	b.n	800950a <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	d044      	beq.n	800910a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	4b72      	ldr	r3, [pc, #456]	; (8009250 <ETH_Prepare_Tx_Descriptors+0x234>)
 8009086:	4013      	ands	r3, r2
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800908c:	431a      	orrs	r2, r3
 800908e:	6a3b      	ldr	r3, [r7, #32]
 8009090:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80090ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0308 	and.w	r3, r3, #8
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d027      	beq.n	800910a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	b29a      	uxth	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	041b      	lsls	r3, r3, #16
 80090c6:	431a      	orrs	r2, r3
 80090c8:	6a3b      	ldr	r3, [r7, #32]
 80090ca:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e4:	431a      	orrs	r2, r3
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80090f8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009108:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0310 	and.w	r3, r3, #16
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00e      	beq.n	8009134 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	689a      	ldr	r2, [r3, #8]
 800911a:	4b4e      	ldr	r3, [pc, #312]	; (8009254 <ETH_Prepare_Tx_Descriptors+0x238>)
 800911c:	4013      	ands	r3, r2
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	6992      	ldr	r2, [r2, #24]
 8009122:	431a      	orrs	r2, r3
 8009124:	6a3b      	ldr	r3, [r7, #32]
 8009126:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8009128:	6a3b      	ldr	r3, [r7, #32]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 0304 	and.w	r3, r3, #4
 800913c:	2b00      	cmp	r3, #0
 800913e:	d105      	bne.n	800914c <ETH_Prepare_Tx_Descriptors+0x130>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0310 	and.w	r3, r3, #16
 8009148:	2b00      	cmp	r3, #0
 800914a:	d030      	beq.n	80091ae <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009154:	6a3b      	ldr	r3, [r7, #32]
 8009156:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009160:	6a3b      	ldr	r3, [r7, #32]
 8009162:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8009164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009166:	3301      	adds	r3, #1
 8009168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800916a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916c:	2b03      	cmp	r3, #3
 800916e:	d902      	bls.n	8009176 <ETH_Prepare_Tx_Descriptors+0x15a>
 8009170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009172:	3b04      	subs	r3, #4
 8009174:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800917a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800917e:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	3301      	adds	r3, #1
 8009184:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800918e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009192:	d10c      	bne.n	80091ae <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919c:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800919e:	6a3b      	ldr	r3, [r7, #32]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80091aa:	2302      	movs	r3, #2
 80091ac:	e1ad      	b.n	800950a <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80091ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b0:	3301      	adds	r3, #1
 80091b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	461a      	mov	r2, r3
 80091ba:	6a3b      	ldr	r3, [r7, #32]
 80091bc:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80091be:	6a3b      	ldr	r3, [r7, #32]
 80091c0:	689a      	ldr	r2, [r3, #8]
 80091c2:	4b24      	ldr	r3, [pc, #144]	; (8009254 <ETH_Prepare_Tx_Descriptors+0x238>)
 80091c4:	4013      	ands	r3, r2
 80091c6:	69fa      	ldr	r2, [r7, #28]
 80091c8:	6852      	ldr	r2, [r2, #4]
 80091ca:	431a      	orrs	r2, r3
 80091cc:	6a3b      	ldr	r3, [r7, #32]
 80091ce:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d012      	beq.n	80091fe <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80091e8:	6a3b      	ldr	r3, [r7, #32]
 80091ea:	689a      	ldr	r2, [r3, #8]
 80091ec:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <ETH_Prepare_Tx_Descriptors+0x23c>)
 80091ee:	4013      	ands	r3, r2
 80091f0:	69fa      	ldr	r2, [r7, #28]
 80091f2:	6852      	ldr	r2, [r2, #4]
 80091f4:	0412      	lsls	r2, r2, #16
 80091f6:	431a      	orrs	r2, r3
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	609a      	str	r2, [r3, #8]
 80091fc:	e008      	b.n	8009210 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	2200      	movs	r2, #0
 8009202:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	4b13      	ldr	r3, [pc, #76]	; (8009258 <ETH_Prepare_Tx_Descriptors+0x23c>)
 800920a:	4013      	ands	r3, r2
 800920c:	6a3a      	ldr	r2, [r7, #32]
 800920e:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0310 	and.w	r3, r3, #16
 8009218:	2b00      	cmp	r3, #0
 800921a:	d021      	beq.n	8009260 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	04db      	lsls	r3, r3, #19
 800922a:	431a      	orrs	r2, r3
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	68da      	ldr	r2, [r3, #12]
 8009234:	4b09      	ldr	r3, [pc, #36]	; (800925c <ETH_Prepare_Tx_Descriptors+0x240>)
 8009236:	4013      	ands	r3, r2
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	69d2      	ldr	r2, [r2, #28]
 800923c:	431a      	orrs	r2, r3
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8009242:	6a3b      	ldr	r3, [r7, #32]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	60da      	str	r2, [r3, #12]
 800924e:	e02e      	b.n	80092ae <ETH_Prepare_Tx_Descriptors+0x292>
 8009250:	ffff0000 	.word	0xffff0000
 8009254:	ffffc000 	.word	0xffffc000
 8009258:	c000ffff 	.word	0xc000ffff
 800925c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8009260:	6a3b      	ldr	r3, [r7, #32]
 8009262:	68da      	ldr	r2, [r3, #12]
 8009264:	4b93      	ldr	r3, [pc, #588]	; (80094b4 <ETH_Prepare_Tx_Descriptors+0x498>)
 8009266:	4013      	ands	r3, r2
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	6852      	ldr	r2, [r2, #4]
 800926c:	431a      	orrs	r2, r3
 800926e:	6a3b      	ldr	r3, [r7, #32]
 8009270:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b00      	cmp	r3, #0
 800927c:	d008      	beq.n	8009290 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800927e:	6a3b      	ldr	r3, [r7, #32]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	431a      	orrs	r2, r3
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0320 	and.w	r3, r3, #32
 8009298:	2b00      	cmp	r3, #0
 800929a:	d008      	beq.n	80092ae <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	431a      	orrs	r2, r3
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0304 	and.w	r3, r3, #4
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d008      	beq.n	80092cc <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c6:	431a      	orrs	r2, r3
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80092cc:	6a3b      	ldr	r3, [r7, #32]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80092d8:	6a3b      	ldr	r3, [r7, #32]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0302 	and.w	r3, r3, #2
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 80cb 	beq.w	8009494 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	431a      	orrs	r2, r3
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8009310:	e0c0      	b.n	8009494 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009320:	3301      	adds	r3, #1
 8009322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009326:	2b03      	cmp	r3, #3
 8009328:	d902      	bls.n	8009330 <ETH_Prepare_Tx_Descriptors+0x314>
 800932a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932c:	3b04      	subs	r3, #4
 800932e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009338:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009342:	6a3b      	ldr	r3, [r7, #32]
 8009344:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800934e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009352:	d007      	beq.n	8009364 <ETH_Prepare_Tx_Descriptors+0x348>
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009358:	3304      	adds	r3, #4
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d026      	beq.n	80093b2 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800936c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009370:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8009372:	2300      	movs	r3, #0
 8009374:	627b      	str	r3, [r7, #36]	; 0x24
 8009376:	e016      	b.n	80093a6 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009380:	6a3b      	ldr	r3, [r7, #32]
 8009382:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8009384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009386:	3301      	adds	r3, #1
 8009388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800938a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938c:	2b03      	cmp	r3, #3
 800938e:	d902      	bls.n	8009396 <ETH_Prepare_Tx_Descriptors+0x37a>
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	3b04      	subs	r3, #4
 8009394:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800939a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800939e:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	3301      	adds	r3, #1
 80093a4:	627b      	str	r3, [r7, #36]	; 0x24
 80093a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d3e4      	bcc.n	8009378 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 80093ae:	2302      	movs	r3, #2
 80093b0:	e0ab      	b.n	800950a <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	3301      	adds	r3, #1
 80093b6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	689a      	ldr	r2, [r3, #8]
 80093cc:	4b3a      	ldr	r3, [pc, #232]	; (80094b8 <ETH_Prepare_Tx_Descriptors+0x49c>)
 80093ce:	4013      	ands	r3, r2
 80093d0:	69fa      	ldr	r2, [r7, #28]
 80093d2:	6852      	ldr	r2, [r2, #4]
 80093d4:	431a      	orrs	r2, r3
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d012      	beq.n	8009408 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	461a      	mov	r2, r3
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	689a      	ldr	r2, [r3, #8]
 80093f6:	4b31      	ldr	r3, [pc, #196]	; (80094bc <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80093f8:	4013      	ands	r3, r2
 80093fa:	69fa      	ldr	r2, [r7, #28]
 80093fc:	6852      	ldr	r2, [r2, #4]
 80093fe:	0412      	lsls	r2, r2, #16
 8009400:	431a      	orrs	r2, r3
 8009402:	6a3b      	ldr	r3, [r7, #32]
 8009404:	609a      	str	r2, [r3, #8]
 8009406:	e008      	b.n	800941a <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009408:	6a3b      	ldr	r3, [r7, #32]
 800940a:	2200      	movs	r2, #0
 800940c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	689a      	ldr	r2, [r3, #8]
 8009412:	4b2a      	ldr	r3, [pc, #168]	; (80094bc <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8009414:	4013      	ands	r3, r2
 8009416:	6a3a      	ldr	r2, [r7, #32]
 8009418:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 0310 	and.w	r3, r3, #16
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00f      	beq.n	8009446 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	68da      	ldr	r2, [r3, #12]
 800942a:	4b25      	ldr	r3, [pc, #148]	; (80094c0 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 800942c:	4013      	ands	r3, r2
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	69d2      	ldr	r2, [r2, #28]
 8009432:	431a      	orrs	r2, r3
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8009438:	6a3b      	ldr	r3, [r7, #32]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009440:	6a3b      	ldr	r3, [r7, #32]
 8009442:	60da      	str	r2, [r3, #12]
 8009444:	e017      	b.n	8009476 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	68da      	ldr	r2, [r3, #12]
 800944a:	4b1a      	ldr	r3, [pc, #104]	; (80094b4 <ETH_Prepare_Tx_Descriptors+0x498>)
 800944c:	4013      	ands	r3, r2
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	6852      	ldr	r2, [r2, #4]
 8009452:	431a      	orrs	r2, r3
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	2b00      	cmp	r3, #0
 8009462:	d008      	beq.n	8009476 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	431a      	orrs	r2, r3
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	3301      	adds	r3, #1
 800947a:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009484:	6a3b      	ldr	r3, [r7, #32]
 8009486:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8009488:	6a3b      	ldr	r3, [r7, #32]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	2b00      	cmp	r3, #0
 800949a:	f47f af3a 	bne.w	8009312 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00f      	beq.n	80094c4 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	609a      	str	r2, [r3, #8]
 80094b0:	e00e      	b.n	80094d0 <ETH_Prepare_Tx_Descriptors+0x4b4>
 80094b2:	bf00      	nop
 80094b4:	ffff8000 	.word	0xffff8000
 80094b8:	ffffc000 	.word	0xffffc000
 80094bc:	c000ffff 	.word	0xc000ffff
 80094c0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80094cc:	6a3b      	ldr	r3, [r7, #32]
 80094ce:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80094d0:	6a3b      	ldr	r3, [r7, #32]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094e0:	6979      	ldr	r1, [r7, #20]
 80094e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e4:	3304      	adds	r3, #4
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	440b      	add	r3, r1
 80094ea:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094f0:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80094f2:	b672      	cpsid	i
}
 80094f4:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	4413      	add	r3, r2
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8009504:	b662      	cpsie	i
}
 8009506:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3734      	adds	r7, #52	; 0x34
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop

08009518 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009518:	b480      	push	{r7}
 800951a:	b089      	sub	sp, #36	; 0x24
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009522:	2300      	movs	r3, #0
 8009524:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009526:	4b89      	ldr	r3, [pc, #548]	; (800974c <HAL_GPIO_Init+0x234>)
 8009528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800952a:	e194      	b.n	8009856 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	2101      	movs	r1, #1
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	fa01 f303 	lsl.w	r3, r1, r3
 8009538:	4013      	ands	r3, r2
 800953a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	2b00      	cmp	r3, #0
 8009540:	f000 8186 	beq.w	8009850 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	2b01      	cmp	r3, #1
 800954a:	d00b      	beq.n	8009564 <HAL_GPIO_Init+0x4c>
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	2b02      	cmp	r3, #2
 8009552:	d007      	beq.n	8009564 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009558:	2b11      	cmp	r3, #17
 800955a:	d003      	beq.n	8009564 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	2b12      	cmp	r3, #18
 8009562:	d130      	bne.n	80095c6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	005b      	lsls	r3, r3, #1
 800956e:	2203      	movs	r2, #3
 8009570:	fa02 f303 	lsl.w	r3, r2, r3
 8009574:	43db      	mvns	r3, r3
 8009576:	69ba      	ldr	r2, [r7, #24]
 8009578:	4013      	ands	r3, r2
 800957a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	68da      	ldr	r2, [r3, #12]
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	005b      	lsls	r3, r3, #1
 8009584:	fa02 f303 	lsl.w	r3, r2, r3
 8009588:	69ba      	ldr	r2, [r7, #24]
 800958a:	4313      	orrs	r3, r2
 800958c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	69ba      	ldr	r2, [r7, #24]
 8009592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800959a:	2201      	movs	r2, #1
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	fa02 f303 	lsl.w	r3, r2, r3
 80095a2:	43db      	mvns	r3, r3
 80095a4:	69ba      	ldr	r2, [r7, #24]
 80095a6:	4013      	ands	r3, r2
 80095a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	091b      	lsrs	r3, r3, #4
 80095b0:	f003 0201 	and.w	r2, r3, #1
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	fa02 f303 	lsl.w	r3, r2, r3
 80095ba:	69ba      	ldr	r2, [r7, #24]
 80095bc:	4313      	orrs	r3, r2
 80095be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	005b      	lsls	r3, r3, #1
 80095d0:	2203      	movs	r2, #3
 80095d2:	fa02 f303 	lsl.w	r3, r2, r3
 80095d6:	43db      	mvns	r3, r3
 80095d8:	69ba      	ldr	r2, [r7, #24]
 80095da:	4013      	ands	r3, r2
 80095dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	689a      	ldr	r2, [r3, #8]
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	fa02 f303 	lsl.w	r3, r2, r3
 80095ea:	69ba      	ldr	r2, [r7, #24]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	69ba      	ldr	r2, [r7, #24]
 80095f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d003      	beq.n	8009606 <HAL_GPIO_Init+0xee>
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	2b12      	cmp	r3, #18
 8009604:	d123      	bne.n	800964e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	08da      	lsrs	r2, r3, #3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	3208      	adds	r2, #8
 800960e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	f003 0307 	and.w	r3, r3, #7
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	220f      	movs	r2, #15
 800961e:	fa02 f303 	lsl.w	r3, r2, r3
 8009622:	43db      	mvns	r3, r3
 8009624:	69ba      	ldr	r2, [r7, #24]
 8009626:	4013      	ands	r3, r2
 8009628:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	691a      	ldr	r2, [r3, #16]
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	f003 0307 	and.w	r3, r3, #7
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	fa02 f303 	lsl.w	r3, r2, r3
 800963a:	69ba      	ldr	r2, [r7, #24]
 800963c:	4313      	orrs	r3, r2
 800963e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	08da      	lsrs	r2, r3, #3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3208      	adds	r2, #8
 8009648:	69b9      	ldr	r1, [r7, #24]
 800964a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	005b      	lsls	r3, r3, #1
 8009658:	2203      	movs	r2, #3
 800965a:	fa02 f303 	lsl.w	r3, r2, r3
 800965e:	43db      	mvns	r3, r3
 8009660:	69ba      	ldr	r2, [r7, #24]
 8009662:	4013      	ands	r3, r2
 8009664:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f003 0203 	and.w	r2, r3, #3
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	005b      	lsls	r3, r3, #1
 8009672:	fa02 f303 	lsl.w	r3, r2, r3
 8009676:	69ba      	ldr	r2, [r7, #24]
 8009678:	4313      	orrs	r3, r2
 800967a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	69ba      	ldr	r2, [r7, #24]
 8009680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 80e0 	beq.w	8009850 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009690:	4b2f      	ldr	r3, [pc, #188]	; (8009750 <HAL_GPIO_Init+0x238>)
 8009692:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009696:	4a2e      	ldr	r2, [pc, #184]	; (8009750 <HAL_GPIO_Init+0x238>)
 8009698:	f043 0302 	orr.w	r3, r3, #2
 800969c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80096a0:	4b2b      	ldr	r3, [pc, #172]	; (8009750 <HAL_GPIO_Init+0x238>)
 80096a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80096a6:	f003 0302 	and.w	r3, r3, #2
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80096ae:	4a29      	ldr	r2, [pc, #164]	; (8009754 <HAL_GPIO_Init+0x23c>)
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	089b      	lsrs	r3, r3, #2
 80096b4:	3302      	adds	r3, #2
 80096b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	f003 0303 	and.w	r3, r3, #3
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	220f      	movs	r2, #15
 80096c6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ca:	43db      	mvns	r3, r3
 80096cc:	69ba      	ldr	r2, [r7, #24]
 80096ce:	4013      	ands	r3, r2
 80096d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a20      	ldr	r2, [pc, #128]	; (8009758 <HAL_GPIO_Init+0x240>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d052      	beq.n	8009780 <HAL_GPIO_Init+0x268>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a1f      	ldr	r2, [pc, #124]	; (800975c <HAL_GPIO_Init+0x244>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d031      	beq.n	8009746 <HAL_GPIO_Init+0x22e>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a1e      	ldr	r2, [pc, #120]	; (8009760 <HAL_GPIO_Init+0x248>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d02b      	beq.n	8009742 <HAL_GPIO_Init+0x22a>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a1d      	ldr	r2, [pc, #116]	; (8009764 <HAL_GPIO_Init+0x24c>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d025      	beq.n	800973e <HAL_GPIO_Init+0x226>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a1c      	ldr	r2, [pc, #112]	; (8009768 <HAL_GPIO_Init+0x250>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d01f      	beq.n	800973a <HAL_GPIO_Init+0x222>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a1b      	ldr	r2, [pc, #108]	; (800976c <HAL_GPIO_Init+0x254>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d019      	beq.n	8009736 <HAL_GPIO_Init+0x21e>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a1a      	ldr	r2, [pc, #104]	; (8009770 <HAL_GPIO_Init+0x258>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d013      	beq.n	8009732 <HAL_GPIO_Init+0x21a>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a19      	ldr	r2, [pc, #100]	; (8009774 <HAL_GPIO_Init+0x25c>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d00d      	beq.n	800972e <HAL_GPIO_Init+0x216>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a18      	ldr	r2, [pc, #96]	; (8009778 <HAL_GPIO_Init+0x260>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d007      	beq.n	800972a <HAL_GPIO_Init+0x212>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a17      	ldr	r2, [pc, #92]	; (800977c <HAL_GPIO_Init+0x264>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d101      	bne.n	8009726 <HAL_GPIO_Init+0x20e>
 8009722:	2309      	movs	r3, #9
 8009724:	e02d      	b.n	8009782 <HAL_GPIO_Init+0x26a>
 8009726:	230a      	movs	r3, #10
 8009728:	e02b      	b.n	8009782 <HAL_GPIO_Init+0x26a>
 800972a:	2308      	movs	r3, #8
 800972c:	e029      	b.n	8009782 <HAL_GPIO_Init+0x26a>
 800972e:	2307      	movs	r3, #7
 8009730:	e027      	b.n	8009782 <HAL_GPIO_Init+0x26a>
 8009732:	2306      	movs	r3, #6
 8009734:	e025      	b.n	8009782 <HAL_GPIO_Init+0x26a>
 8009736:	2305      	movs	r3, #5
 8009738:	e023      	b.n	8009782 <HAL_GPIO_Init+0x26a>
 800973a:	2304      	movs	r3, #4
 800973c:	e021      	b.n	8009782 <HAL_GPIO_Init+0x26a>
 800973e:	2303      	movs	r3, #3
 8009740:	e01f      	b.n	8009782 <HAL_GPIO_Init+0x26a>
 8009742:	2302      	movs	r3, #2
 8009744:	e01d      	b.n	8009782 <HAL_GPIO_Init+0x26a>
 8009746:	2301      	movs	r3, #1
 8009748:	e01b      	b.n	8009782 <HAL_GPIO_Init+0x26a>
 800974a:	bf00      	nop
 800974c:	58000080 	.word	0x58000080
 8009750:	58024400 	.word	0x58024400
 8009754:	58000400 	.word	0x58000400
 8009758:	58020000 	.word	0x58020000
 800975c:	58020400 	.word	0x58020400
 8009760:	58020800 	.word	0x58020800
 8009764:	58020c00 	.word	0x58020c00
 8009768:	58021000 	.word	0x58021000
 800976c:	58021400 	.word	0x58021400
 8009770:	58021800 	.word	0x58021800
 8009774:	58021c00 	.word	0x58021c00
 8009778:	58022000 	.word	0x58022000
 800977c:	58022400 	.word	0x58022400
 8009780:	2300      	movs	r3, #0
 8009782:	69fa      	ldr	r2, [r7, #28]
 8009784:	f002 0203 	and.w	r2, r2, #3
 8009788:	0092      	lsls	r2, r2, #2
 800978a:	4093      	lsls	r3, r2
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	4313      	orrs	r3, r2
 8009790:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009792:	4938      	ldr	r1, [pc, #224]	; (8009874 <HAL_GPIO_Init+0x35c>)
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	089b      	lsrs	r3, r3, #2
 8009798:	3302      	adds	r3, #2
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	43db      	mvns	r3, r3
 80097aa:	69ba      	ldr	r2, [r7, #24]
 80097ac:	4013      	ands	r3, r2
 80097ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d003      	beq.n	80097c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80097bc:	69ba      	ldr	r2, [r7, #24]
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	43db      	mvns	r3, r3
 80097d4:	69ba      	ldr	r2, [r7, #24]
 80097d6:	4013      	ands	r3, r2
 80097d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d003      	beq.n	80097ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80097e6:	69ba      	ldr	r2, [r7, #24]
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	69ba      	ldr	r2, [r7, #24]
 80097f2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80097f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	43db      	mvns	r3, r3
 8009800:	69ba      	ldr	r2, [r7, #24]
 8009802:	4013      	ands	r3, r2
 8009804:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8009812:	69ba      	ldr	r2, [r7, #24]
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	4313      	orrs	r3, r2
 8009818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800981a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	43db      	mvns	r3, r3
 800982e:	69ba      	ldr	r2, [r7, #24]
 8009830:	4013      	ands	r3, r2
 8009832:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d003      	beq.n	8009848 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8009840:	69ba      	ldr	r2, [r7, #24]
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	4313      	orrs	r3, r2
 8009846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	3301      	adds	r3, #1
 8009854:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	fa22 f303 	lsr.w	r3, r2, r3
 8009860:	2b00      	cmp	r3, #0
 8009862:	f47f ae63 	bne.w	800952c <HAL_GPIO_Init+0x14>
  }
}
 8009866:	bf00      	nop
 8009868:	bf00      	nop
 800986a:	3724      	adds	r7, #36	; 0x24
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	58000400 	.word	0x58000400

08009878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	460b      	mov	r3, r1
 8009882:	807b      	strh	r3, [r7, #2]
 8009884:	4613      	mov	r3, r2
 8009886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009888:	787b      	ldrb	r3, [r7, #1]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800988e:	887a      	ldrh	r2, [r7, #2]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009894:	e003      	b.n	800989e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009896:	887b      	ldrh	r3, [r7, #2]
 8009898:	041a      	lsls	r2, r3, #16
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	619a      	str	r2, [r3, #24]
}
 800989e:	bf00      	nop
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b085      	sub	sp, #20
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	460b      	mov	r3, r1
 80098b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80098bc:	887a      	ldrh	r2, [r7, #2]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	4013      	ands	r3, r2
 80098c2:	041a      	lsls	r2, r3, #16
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	43d9      	mvns	r1, r3
 80098c8:	887b      	ldrh	r3, [r7, #2]
 80098ca:	400b      	ands	r3, r1
 80098cc:	431a      	orrs	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	619a      	str	r2, [r3, #24]
}
 80098d2:	bf00      	nop
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
	...

080098e0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80098e8:	4a08      	ldr	r2, [pc, #32]	; (800990c <HAL_HSEM_FastTake+0x2c>)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	3320      	adds	r3, #32
 80098ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098f2:	4a07      	ldr	r2, [pc, #28]	; (8009910 <HAL_HSEM_FastTake+0x30>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d101      	bne.n	80098fc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	e000      	b.n	80098fe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
}
 80098fe:	4618      	mov	r0, r3
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	58026400 	.word	0x58026400
 8009910:	80000300 	.word	0x80000300

08009914 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800991e:	4906      	ldr	r1, [pc, #24]	; (8009938 <HAL_HSEM_Release+0x24>)
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	58026400 	.word	0x58026400

0800993c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009944:	4b0d      	ldr	r3, [pc, #52]	; (800997c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009946:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800994a:	4a0c      	ldr	r2, [pc, #48]	; (800997c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800994c:	f043 0302 	orr.w	r3, r3, #2
 8009950:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009954:	4b09      	ldr	r3, [pc, #36]	; (800997c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009956:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800995a:	f003 0302 	and.w	r3, r3, #2
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009962:	4b07      	ldr	r3, [pc, #28]	; (8009980 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009964:	685a      	ldr	r2, [r3, #4]
 8009966:	4906      	ldr	r1, [pc, #24]	; (8009980 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4313      	orrs	r3, r2
 800996c:	604b      	str	r3, [r1, #4]
}
 800996e:	bf00      	nop
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	58024400 	.word	0x58024400
 8009980:	58000400 	.word	0x58000400

08009984 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800998c:	4b29      	ldr	r3, [pc, #164]	; (8009a34 <HAL_PWREx_ConfigSupply+0xb0>)
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	f003 0307 	and.w	r3, r3, #7
 8009994:	2b06      	cmp	r3, #6
 8009996:	d00a      	beq.n	80099ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009998:	4b26      	ldr	r3, [pc, #152]	; (8009a34 <HAL_PWREx_ConfigSupply+0xb0>)
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d001      	beq.n	80099aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e040      	b.n	8009a2c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	e03e      	b.n	8009a2c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80099ae:	4b21      	ldr	r3, [pc, #132]	; (8009a34 <HAL_PWREx_ConfigSupply+0xb0>)
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80099b6:	491f      	ldr	r1, [pc, #124]	; (8009a34 <HAL_PWREx_ConfigSupply+0xb0>)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80099be:	f7fa fac1 	bl	8003f44 <HAL_GetTick>
 80099c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80099c4:	e009      	b.n	80099da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80099c6:	f7fa fabd 	bl	8003f44 <HAL_GetTick>
 80099ca:	4602      	mov	r2, r0
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099d4:	d901      	bls.n	80099da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e028      	b.n	8009a2c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80099da:	4b16      	ldr	r3, [pc, #88]	; (8009a34 <HAL_PWREx_ConfigSupply+0xb0>)
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099e6:	d1ee      	bne.n	80099c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b1e      	cmp	r3, #30
 80099ec:	d008      	beq.n	8009a00 <HAL_PWREx_ConfigSupply+0x7c>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b2e      	cmp	r3, #46	; 0x2e
 80099f2:	d005      	beq.n	8009a00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b1d      	cmp	r3, #29
 80099f8:	d002      	beq.n	8009a00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b2d      	cmp	r3, #45	; 0x2d
 80099fe:	d114      	bne.n	8009a2a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8009a00:	f7fa faa0 	bl	8003f44 <HAL_GetTick>
 8009a04:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009a06:	e009      	b.n	8009a1c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009a08:	f7fa fa9c 	bl	8003f44 <HAL_GetTick>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a16:	d901      	bls.n	8009a1c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e007      	b.n	8009a2c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009a1c:	4b05      	ldr	r3, [pc, #20]	; (8009a34 <HAL_PWREx_ConfigSupply+0xb0>)
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a28:	d1ee      	bne.n	8009a08 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	58024800 	.word	0x58024800

08009a38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b08c      	sub	sp, #48	; 0x30
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d101      	bne.n	8009a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e3ff      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 0301 	and.w	r3, r3, #1
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	f000 8087 	beq.w	8009b66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a58:	4b99      	ldr	r3, [pc, #612]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a62:	4b97      	ldr	r3, [pc, #604]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a66:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6a:	2b10      	cmp	r3, #16
 8009a6c:	d007      	beq.n	8009a7e <HAL_RCC_OscConfig+0x46>
 8009a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a70:	2b18      	cmp	r3, #24
 8009a72:	d110      	bne.n	8009a96 <HAL_RCC_OscConfig+0x5e>
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	f003 0303 	and.w	r3, r3, #3
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d10b      	bne.n	8009a96 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a7e:	4b90      	ldr	r3, [pc, #576]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d06c      	beq.n	8009b64 <HAL_RCC_OscConfig+0x12c>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d168      	bne.n	8009b64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e3d9      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a9e:	d106      	bne.n	8009aae <HAL_RCC_OscConfig+0x76>
 8009aa0:	4b87      	ldr	r3, [pc, #540]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a86      	ldr	r2, [pc, #536]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009aaa:	6013      	str	r3, [r2, #0]
 8009aac:	e02e      	b.n	8009b0c <HAL_RCC_OscConfig+0xd4>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10c      	bne.n	8009ad0 <HAL_RCC_OscConfig+0x98>
 8009ab6:	4b82      	ldr	r3, [pc, #520]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a81      	ldr	r2, [pc, #516]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ac0:	6013      	str	r3, [r2, #0]
 8009ac2:	4b7f      	ldr	r3, [pc, #508]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a7e      	ldr	r2, [pc, #504]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009acc:	6013      	str	r3, [r2, #0]
 8009ace:	e01d      	b.n	8009b0c <HAL_RCC_OscConfig+0xd4>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ad8:	d10c      	bne.n	8009af4 <HAL_RCC_OscConfig+0xbc>
 8009ada:	4b79      	ldr	r3, [pc, #484]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a78      	ldr	r2, [pc, #480]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	4b76      	ldr	r3, [pc, #472]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a75      	ldr	r2, [pc, #468]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009af0:	6013      	str	r3, [r2, #0]
 8009af2:	e00b      	b.n	8009b0c <HAL_RCC_OscConfig+0xd4>
 8009af4:	4b72      	ldr	r3, [pc, #456]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a71      	ldr	r2, [pc, #452]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	4b6f      	ldr	r3, [pc, #444]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a6e      	ldr	r2, [pc, #440]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d013      	beq.n	8009b3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b14:	f7fa fa16 	bl	8003f44 <HAL_GetTick>
 8009b18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b1a:	e008      	b.n	8009b2e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b1c:	f7fa fa12 	bl	8003f44 <HAL_GetTick>
 8009b20:	4602      	mov	r2, r0
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	2b64      	cmp	r3, #100	; 0x64
 8009b28:	d901      	bls.n	8009b2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e38d      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b2e:	4b64      	ldr	r3, [pc, #400]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d0f0      	beq.n	8009b1c <HAL_RCC_OscConfig+0xe4>
 8009b3a:	e014      	b.n	8009b66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b3c:	f7fa fa02 	bl	8003f44 <HAL_GetTick>
 8009b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b42:	e008      	b.n	8009b56 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b44:	f7fa f9fe 	bl	8003f44 <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	2b64      	cmp	r3, #100	; 0x64
 8009b50:	d901      	bls.n	8009b56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e379      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b56:	4b5a      	ldr	r3, [pc, #360]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1f0      	bne.n	8009b44 <HAL_RCC_OscConfig+0x10c>
 8009b62:	e000      	b.n	8009b66 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0302 	and.w	r3, r3, #2
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f000 80ae 	beq.w	8009cd0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b74:	4b52      	ldr	r3, [pc, #328]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b7e:	4b50      	ldr	r3, [pc, #320]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b82:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009b84:	6a3b      	ldr	r3, [r7, #32]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d007      	beq.n	8009b9a <HAL_RCC_OscConfig+0x162>
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	2b18      	cmp	r3, #24
 8009b8e:	d13a      	bne.n	8009c06 <HAL_RCC_OscConfig+0x1ce>
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	f003 0303 	and.w	r3, r3, #3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d135      	bne.n	8009c06 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b9a:	4b49      	ldr	r3, [pc, #292]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 0304 	and.w	r3, r3, #4
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d005      	beq.n	8009bb2 <HAL_RCC_OscConfig+0x17a>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d101      	bne.n	8009bb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e34b      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bb2:	f7fa f9f7 	bl	8003fa4 <HAL_GetREVID>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	f241 0203 	movw	r2, #4099	; 0x1003
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d817      	bhi.n	8009bf0 <HAL_RCC_OscConfig+0x1b8>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	2b40      	cmp	r3, #64	; 0x40
 8009bc6:	d108      	bne.n	8009bda <HAL_RCC_OscConfig+0x1a2>
 8009bc8:	4b3d      	ldr	r3, [pc, #244]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009bd0:	4a3b      	ldr	r2, [pc, #236]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bd6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bd8:	e07a      	b.n	8009cd0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bda:	4b39      	ldr	r3, [pc, #228]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	031b      	lsls	r3, r3, #12
 8009be8:	4935      	ldr	r1, [pc, #212]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bee:	e06f      	b.n	8009cd0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bf0:	4b33      	ldr	r3, [pc, #204]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	061b      	lsls	r3, r3, #24
 8009bfe:	4930      	ldr	r1, [pc, #192]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009c00:	4313      	orrs	r3, r2
 8009c02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c04:	e064      	b.n	8009cd0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d045      	beq.n	8009c9a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c0e:	4b2c      	ldr	r3, [pc, #176]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f023 0219 	bic.w	r2, r3, #25
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	4929      	ldr	r1, [pc, #164]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c20:	f7fa f990 	bl	8003f44 <HAL_GetTick>
 8009c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c26:	e008      	b.n	8009c3a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c28:	f7fa f98c 	bl	8003f44 <HAL_GetTick>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d901      	bls.n	8009c3a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e307      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c3a:	4b21      	ldr	r3, [pc, #132]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f003 0304 	and.w	r3, r3, #4
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d0f0      	beq.n	8009c28 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c46:	f7fa f9ad 	bl	8003fa4 <HAL_GetREVID>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d817      	bhi.n	8009c84 <HAL_RCC_OscConfig+0x24c>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	2b40      	cmp	r3, #64	; 0x40
 8009c5a:	d108      	bne.n	8009c6e <HAL_RCC_OscConfig+0x236>
 8009c5c:	4b18      	ldr	r3, [pc, #96]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009c64:	4a16      	ldr	r2, [pc, #88]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c6a:	6053      	str	r3, [r2, #4]
 8009c6c:	e030      	b.n	8009cd0 <HAL_RCC_OscConfig+0x298>
 8009c6e:	4b14      	ldr	r3, [pc, #80]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	031b      	lsls	r3, r3, #12
 8009c7c:	4910      	ldr	r1, [pc, #64]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	604b      	str	r3, [r1, #4]
 8009c82:	e025      	b.n	8009cd0 <HAL_RCC_OscConfig+0x298>
 8009c84:	4b0e      	ldr	r3, [pc, #56]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	061b      	lsls	r3, r3, #24
 8009c92:	490b      	ldr	r1, [pc, #44]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009c94:	4313      	orrs	r3, r2
 8009c96:	604b      	str	r3, [r1, #4]
 8009c98:	e01a      	b.n	8009cd0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c9a:	4b09      	ldr	r3, [pc, #36]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a08      	ldr	r2, [pc, #32]	; (8009cc0 <HAL_RCC_OscConfig+0x288>)
 8009ca0:	f023 0301 	bic.w	r3, r3, #1
 8009ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ca6:	f7fa f94d 	bl	8003f44 <HAL_GetTick>
 8009caa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009cac:	e00a      	b.n	8009cc4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009cae:	f7fa f949 	bl	8003f44 <HAL_GetTick>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d903      	bls.n	8009cc4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e2c4      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
 8009cc0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009cc4:	4ba4      	ldr	r3, [pc, #656]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0304 	and.w	r3, r3, #4
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1ee      	bne.n	8009cae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0310 	and.w	r3, r3, #16
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 80a9 	beq.w	8009e30 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cde:	4b9e      	ldr	r3, [pc, #632]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ce6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ce8:	4b9b      	ldr	r3, [pc, #620]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	2b08      	cmp	r3, #8
 8009cf2:	d007      	beq.n	8009d04 <HAL_RCC_OscConfig+0x2cc>
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	2b18      	cmp	r3, #24
 8009cf8:	d13a      	bne.n	8009d70 <HAL_RCC_OscConfig+0x338>
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f003 0303 	and.w	r3, r3, #3
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d135      	bne.n	8009d70 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d04:	4b94      	ldr	r3, [pc, #592]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d005      	beq.n	8009d1c <HAL_RCC_OscConfig+0x2e4>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	69db      	ldr	r3, [r3, #28]
 8009d14:	2b80      	cmp	r3, #128	; 0x80
 8009d16:	d001      	beq.n	8009d1c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e296      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d1c:	f7fa f942 	bl	8003fa4 <HAL_GetREVID>
 8009d20:	4603      	mov	r3, r0
 8009d22:	f241 0203 	movw	r2, #4099	; 0x1003
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d817      	bhi.n	8009d5a <HAL_RCC_OscConfig+0x322>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	2b20      	cmp	r3, #32
 8009d30:	d108      	bne.n	8009d44 <HAL_RCC_OscConfig+0x30c>
 8009d32:	4b89      	ldr	r3, [pc, #548]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009d3a:	4a87      	ldr	r2, [pc, #540]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009d3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d42:	e075      	b.n	8009e30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d44:	4b84      	ldr	r3, [pc, #528]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a1b      	ldr	r3, [r3, #32]
 8009d50:	069b      	lsls	r3, r3, #26
 8009d52:	4981      	ldr	r1, [pc, #516]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009d54:	4313      	orrs	r3, r2
 8009d56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d58:	e06a      	b.n	8009e30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d5a:	4b7f      	ldr	r3, [pc, #508]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	061b      	lsls	r3, r3, #24
 8009d68:	497b      	ldr	r1, [pc, #492]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d6e:	e05f      	b.n	8009e30 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d042      	beq.n	8009dfe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009d78:	4b77      	ldr	r3, [pc, #476]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a76      	ldr	r2, [pc, #472]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d84:	f7fa f8de 	bl	8003f44 <HAL_GetTick>
 8009d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d8a:	e008      	b.n	8009d9e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009d8c:	f7fa f8da 	bl	8003f44 <HAL_GetTick>
 8009d90:	4602      	mov	r2, r0
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d901      	bls.n	8009d9e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e255      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d9e:	4b6e      	ldr	r3, [pc, #440]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0f0      	beq.n	8009d8c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009daa:	f7fa f8fb 	bl	8003fa4 <HAL_GetREVID>
 8009dae:	4603      	mov	r3, r0
 8009db0:	f241 0203 	movw	r2, #4099	; 0x1003
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d817      	bhi.n	8009de8 <HAL_RCC_OscConfig+0x3b0>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	2b20      	cmp	r3, #32
 8009dbe:	d108      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x39a>
 8009dc0:	4b65      	ldr	r3, [pc, #404]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009dc8:	4a63      	ldr	r2, [pc, #396]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dce:	6053      	str	r3, [r2, #4]
 8009dd0:	e02e      	b.n	8009e30 <HAL_RCC_OscConfig+0x3f8>
 8009dd2:	4b61      	ldr	r3, [pc, #388]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	069b      	lsls	r3, r3, #26
 8009de0:	495d      	ldr	r1, [pc, #372]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009de2:	4313      	orrs	r3, r2
 8009de4:	604b      	str	r3, [r1, #4]
 8009de6:	e023      	b.n	8009e30 <HAL_RCC_OscConfig+0x3f8>
 8009de8:	4b5b      	ldr	r3, [pc, #364]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	061b      	lsls	r3, r3, #24
 8009df6:	4958      	ldr	r1, [pc, #352]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	60cb      	str	r3, [r1, #12]
 8009dfc:	e018      	b.n	8009e30 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009dfe:	4b56      	ldr	r3, [pc, #344]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a55      	ldr	r2, [pc, #340]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009e04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e0a:	f7fa f89b 	bl	8003f44 <HAL_GetTick>
 8009e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e10:	e008      	b.n	8009e24 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009e12:	f7fa f897 	bl	8003f44 <HAL_GetTick>
 8009e16:	4602      	mov	r2, r0
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d901      	bls.n	8009e24 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e212      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e24:	4b4c      	ldr	r3, [pc, #304]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1f0      	bne.n	8009e12 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0308 	and.w	r3, r3, #8
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d036      	beq.n	8009eaa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	695b      	ldr	r3, [r3, #20]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d019      	beq.n	8009e78 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e44:	4b44      	ldr	r3, [pc, #272]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e48:	4a43      	ldr	r2, [pc, #268]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009e4a:	f043 0301 	orr.w	r3, r3, #1
 8009e4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e50:	f7fa f878 	bl	8003f44 <HAL_GetTick>
 8009e54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009e56:	e008      	b.n	8009e6a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e58:	f7fa f874 	bl	8003f44 <HAL_GetTick>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d901      	bls.n	8009e6a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e1ef      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009e6a:	4b3b      	ldr	r3, [pc, #236]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e6e:	f003 0302 	and.w	r3, r3, #2
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d0f0      	beq.n	8009e58 <HAL_RCC_OscConfig+0x420>
 8009e76:	e018      	b.n	8009eaa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e78:	4b37      	ldr	r3, [pc, #220]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e7c:	4a36      	ldr	r2, [pc, #216]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009e7e:	f023 0301 	bic.w	r3, r3, #1
 8009e82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e84:	f7fa f85e 	bl	8003f44 <HAL_GetTick>
 8009e88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e8a:	e008      	b.n	8009e9e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e8c:	f7fa f85a 	bl	8003f44 <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d901      	bls.n	8009e9e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e1d5      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e9e:	4b2e      	ldr	r3, [pc, #184]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ea2:	f003 0302 	and.w	r3, r3, #2
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1f0      	bne.n	8009e8c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f003 0320 	and.w	r3, r3, #32
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d036      	beq.n	8009f24 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d019      	beq.n	8009ef2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009ebe:	4b26      	ldr	r3, [pc, #152]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a25      	ldr	r2, [pc, #148]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009ec4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009ec8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009eca:	f7fa f83b 	bl	8003f44 <HAL_GetTick>
 8009ece:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009ed0:	e008      	b.n	8009ee4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009ed2:	f7fa f837 	bl	8003f44 <HAL_GetTick>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d901      	bls.n	8009ee4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e1b2      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009ee4:	4b1c      	ldr	r3, [pc, #112]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d0f0      	beq.n	8009ed2 <HAL_RCC_OscConfig+0x49a>
 8009ef0:	e018      	b.n	8009f24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009ef2:	4b19      	ldr	r3, [pc, #100]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a18      	ldr	r2, [pc, #96]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009ef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009efc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009efe:	f7fa f821 	bl	8003f44 <HAL_GetTick>
 8009f02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f04:	e008      	b.n	8009f18 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009f06:	f7fa f81d 	bl	8003f44 <HAL_GetTick>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d901      	bls.n	8009f18 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e198      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f18:	4b0f      	ldr	r3, [pc, #60]	; (8009f58 <HAL_RCC_OscConfig+0x520>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1f0      	bne.n	8009f06 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f000 8085 	beq.w	800a03c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009f32:	4b0a      	ldr	r3, [pc, #40]	; (8009f5c <HAL_RCC_OscConfig+0x524>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a09      	ldr	r2, [pc, #36]	; (8009f5c <HAL_RCC_OscConfig+0x524>)
 8009f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f3e:	f7fa f801 	bl	8003f44 <HAL_GetTick>
 8009f42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f44:	e00c      	b.n	8009f60 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009f46:	f7f9 fffd 	bl	8003f44 <HAL_GetTick>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4e:	1ad3      	subs	r3, r2, r3
 8009f50:	2b64      	cmp	r3, #100	; 0x64
 8009f52:	d905      	bls.n	8009f60 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8009f54:	2303      	movs	r3, #3
 8009f56:	e178      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
 8009f58:	58024400 	.word	0x58024400
 8009f5c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f60:	4b96      	ldr	r3, [pc, #600]	; (800a1bc <HAL_RCC_OscConfig+0x784>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d0ec      	beq.n	8009f46 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d106      	bne.n	8009f82 <HAL_RCC_OscConfig+0x54a>
 8009f74:	4b92      	ldr	r3, [pc, #584]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 8009f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f78:	4a91      	ldr	r2, [pc, #580]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 8009f7a:	f043 0301 	orr.w	r3, r3, #1
 8009f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8009f80:	e02d      	b.n	8009fde <HAL_RCC_OscConfig+0x5a6>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10c      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x56c>
 8009f8a:	4b8d      	ldr	r3, [pc, #564]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 8009f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f8e:	4a8c      	ldr	r2, [pc, #560]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 8009f90:	f023 0301 	bic.w	r3, r3, #1
 8009f94:	6713      	str	r3, [r2, #112]	; 0x70
 8009f96:	4b8a      	ldr	r3, [pc, #552]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 8009f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f9a:	4a89      	ldr	r2, [pc, #548]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 8009f9c:	f023 0304 	bic.w	r3, r3, #4
 8009fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8009fa2:	e01c      	b.n	8009fde <HAL_RCC_OscConfig+0x5a6>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	2b05      	cmp	r3, #5
 8009faa:	d10c      	bne.n	8009fc6 <HAL_RCC_OscConfig+0x58e>
 8009fac:	4b84      	ldr	r3, [pc, #528]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 8009fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb0:	4a83      	ldr	r2, [pc, #524]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 8009fb2:	f043 0304 	orr.w	r3, r3, #4
 8009fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8009fb8:	4b81      	ldr	r3, [pc, #516]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 8009fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fbc:	4a80      	ldr	r2, [pc, #512]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 8009fbe:	f043 0301 	orr.w	r3, r3, #1
 8009fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8009fc4:	e00b      	b.n	8009fde <HAL_RCC_OscConfig+0x5a6>
 8009fc6:	4b7e      	ldr	r3, [pc, #504]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 8009fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fca:	4a7d      	ldr	r2, [pc, #500]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 8009fcc:	f023 0301 	bic.w	r3, r3, #1
 8009fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8009fd2:	4b7b      	ldr	r3, [pc, #492]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 8009fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd6:	4a7a      	ldr	r2, [pc, #488]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 8009fd8:	f023 0304 	bic.w	r3, r3, #4
 8009fdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d015      	beq.n	800a012 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fe6:	f7f9 ffad 	bl	8003f44 <HAL_GetTick>
 8009fea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fec:	e00a      	b.n	800a004 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fee:	f7f9 ffa9 	bl	8003f44 <HAL_GetTick>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d901      	bls.n	800a004 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800a000:	2303      	movs	r3, #3
 800a002:	e122      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a004:	4b6e      	ldr	r3, [pc, #440]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a008:	f003 0302 	and.w	r3, r3, #2
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d0ee      	beq.n	8009fee <HAL_RCC_OscConfig+0x5b6>
 800a010:	e014      	b.n	800a03c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a012:	f7f9 ff97 	bl	8003f44 <HAL_GetTick>
 800a016:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a018:	e00a      	b.n	800a030 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a01a:	f7f9 ff93 	bl	8003f44 <HAL_GetTick>
 800a01e:	4602      	mov	r2, r0
 800a020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	f241 3288 	movw	r2, #5000	; 0x1388
 800a028:	4293      	cmp	r3, r2
 800a02a:	d901      	bls.n	800a030 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800a02c:	2303      	movs	r3, #3
 800a02e:	e10c      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a030:	4b63      	ldr	r3, [pc, #396]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a034:	f003 0302 	and.w	r3, r3, #2
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1ee      	bne.n	800a01a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 8101 	beq.w	800a248 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a046:	4b5e      	ldr	r3, [pc, #376]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a04e:	2b18      	cmp	r3, #24
 800a050:	f000 80bc 	beq.w	800a1cc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a058:	2b02      	cmp	r3, #2
 800a05a:	f040 8095 	bne.w	800a188 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a05e:	4b58      	ldr	r3, [pc, #352]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a57      	ldr	r2, [pc, #348]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a064:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a06a:	f7f9 ff6b 	bl	8003f44 <HAL_GetTick>
 800a06e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a070:	e008      	b.n	800a084 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a072:	f7f9 ff67 	bl	8003f44 <HAL_GetTick>
 800a076:	4602      	mov	r2, r0
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	1ad3      	subs	r3, r2, r3
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d901      	bls.n	800a084 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800a080:	2303      	movs	r3, #3
 800a082:	e0e2      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a084:	4b4e      	ldr	r3, [pc, #312]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1f0      	bne.n	800a072 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a090:	4b4b      	ldr	r3, [pc, #300]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a094:	4b4b      	ldr	r3, [pc, #300]	; (800a1c4 <HAL_RCC_OscConfig+0x78c>)
 800a096:	4013      	ands	r3, r2
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a0a0:	0112      	lsls	r2, r2, #4
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	4946      	ldr	r1, [pc, #280]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	628b      	str	r3, [r1, #40]	; 0x28
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	025b      	lsls	r3, r3, #9
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	431a      	orrs	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	041b      	lsls	r3, r3, #16
 800a0c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a0cc:	431a      	orrs	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	061b      	lsls	r3, r3, #24
 800a0d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a0da:	4939      	ldr	r1, [pc, #228]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a0e0:	4b37      	ldr	r3, [pc, #220]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e4:	4a36      	ldr	r2, [pc, #216]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a0e6:	f023 0301 	bic.w	r3, r3, #1
 800a0ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a0ec:	4b34      	ldr	r3, [pc, #208]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a0ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0f0:	4b35      	ldr	r3, [pc, #212]	; (800a1c8 <HAL_RCC_OscConfig+0x790>)
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a0f8:	00d2      	lsls	r2, r2, #3
 800a0fa:	4931      	ldr	r1, [pc, #196]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a100:	4b2f      	ldr	r3, [pc, #188]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a104:	f023 020c 	bic.w	r2, r3, #12
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10c:	492c      	ldr	r1, [pc, #176]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a10e:	4313      	orrs	r3, r2
 800a110:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a112:	4b2b      	ldr	r3, [pc, #172]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a116:	f023 0202 	bic.w	r2, r3, #2
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a11e:	4928      	ldr	r1, [pc, #160]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a120:	4313      	orrs	r3, r2
 800a122:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a124:	4b26      	ldr	r3, [pc, #152]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	4a25      	ldr	r2, [pc, #148]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a12a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a12e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a130:	4b23      	ldr	r3, [pc, #140]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a134:	4a22      	ldr	r2, [pc, #136]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a13a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a13c:	4b20      	ldr	r3, [pc, #128]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a140:	4a1f      	ldr	r2, [pc, #124]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a142:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a148:	4b1d      	ldr	r3, [pc, #116]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14c:	4a1c      	ldr	r2, [pc, #112]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a14e:	f043 0301 	orr.w	r3, r3, #1
 800a152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a154:	4b1a      	ldr	r3, [pc, #104]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a19      	ldr	r2, [pc, #100]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a15a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a15e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a160:	f7f9 fef0 	bl	8003f44 <HAL_GetTick>
 800a164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a166:	e008      	b.n	800a17a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a168:	f7f9 feec 	bl	8003f44 <HAL_GetTick>
 800a16c:	4602      	mov	r2, r0
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	2b02      	cmp	r3, #2
 800a174:	d901      	bls.n	800a17a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e067      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a17a:	4b11      	ldr	r3, [pc, #68]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0f0      	beq.n	800a168 <HAL_RCC_OscConfig+0x730>
 800a186:	e05f      	b.n	800a248 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a188:	4b0d      	ldr	r3, [pc, #52]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a0c      	ldr	r2, [pc, #48]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a18e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a194:	f7f9 fed6 	bl	8003f44 <HAL_GetTick>
 800a198:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a19a:	e008      	b.n	800a1ae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a19c:	f7f9 fed2 	bl	8003f44 <HAL_GetTick>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d901      	bls.n	800a1ae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e04d      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1ae:	4b04      	ldr	r3, [pc, #16]	; (800a1c0 <HAL_RCC_OscConfig+0x788>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1f0      	bne.n	800a19c <HAL_RCC_OscConfig+0x764>
 800a1ba:	e045      	b.n	800a248 <HAL_RCC_OscConfig+0x810>
 800a1bc:	58024800 	.word	0x58024800
 800a1c0:	58024400 	.word	0x58024400
 800a1c4:	fffffc0c 	.word	0xfffffc0c
 800a1c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a1cc:	4b21      	ldr	r3, [pc, #132]	; (800a254 <HAL_RCC_OscConfig+0x81c>)
 800a1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a1d2:	4b20      	ldr	r3, [pc, #128]	; (800a254 <HAL_RCC_OscConfig+0x81c>)
 800a1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d031      	beq.n	800a244 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	f003 0203 	and.w	r2, r3, #3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d12a      	bne.n	800a244 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	091b      	lsrs	r3, r3, #4
 800a1f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d122      	bne.n	800a244 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a208:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d11a      	bne.n	800a244 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	0a5b      	lsrs	r3, r3, #9
 800a212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a21a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d111      	bne.n	800a244 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	0c1b      	lsrs	r3, r3, #16
 800a224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a22e:	429a      	cmp	r2, r3
 800a230:	d108      	bne.n	800a244 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	0e1b      	lsrs	r3, r3, #24
 800a236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a23e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a240:	429a      	cmp	r2, r3
 800a242:	d001      	beq.n	800a248 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	e000      	b.n	800a24a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3730      	adds	r7, #48	; 0x30
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	58024400 	.word	0x58024400

0800a258 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	e19c      	b.n	800a5a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a26c:	4b8a      	ldr	r3, [pc, #552]	; (800a498 <HAL_RCC_ClockConfig+0x240>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 030f 	and.w	r3, r3, #15
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	429a      	cmp	r2, r3
 800a278:	d910      	bls.n	800a29c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a27a:	4b87      	ldr	r3, [pc, #540]	; (800a498 <HAL_RCC_ClockConfig+0x240>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f023 020f 	bic.w	r2, r3, #15
 800a282:	4985      	ldr	r1, [pc, #532]	; (800a498 <HAL_RCC_ClockConfig+0x240>)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	4313      	orrs	r3, r2
 800a288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a28a:	4b83      	ldr	r3, [pc, #524]	; (800a498 <HAL_RCC_ClockConfig+0x240>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 030f 	and.w	r3, r3, #15
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	429a      	cmp	r2, r3
 800a296:	d001      	beq.n	800a29c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e184      	b.n	800a5a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 0304 	and.w	r3, r3, #4
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d010      	beq.n	800a2ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	691a      	ldr	r2, [r3, #16]
 800a2ac:	4b7b      	ldr	r3, [pc, #492]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d908      	bls.n	800a2ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a2b8:	4b78      	ldr	r3, [pc, #480]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	4975      	ldr	r1, [pc, #468]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0308 	and.w	r3, r3, #8
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d010      	beq.n	800a2f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	695a      	ldr	r2, [r3, #20]
 800a2da:	4b70      	ldr	r3, [pc, #448]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a2dc:	69db      	ldr	r3, [r3, #28]
 800a2de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d908      	bls.n	800a2f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a2e6:	4b6d      	ldr	r3, [pc, #436]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	496a      	ldr	r1, [pc, #424]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0310 	and.w	r3, r3, #16
 800a300:	2b00      	cmp	r3, #0
 800a302:	d010      	beq.n	800a326 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	699a      	ldr	r2, [r3, #24]
 800a308:	4b64      	ldr	r3, [pc, #400]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a30a:	69db      	ldr	r3, [r3, #28]
 800a30c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a310:	429a      	cmp	r2, r3
 800a312:	d908      	bls.n	800a326 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a314:	4b61      	ldr	r3, [pc, #388]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a316:	69db      	ldr	r3, [r3, #28]
 800a318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	495e      	ldr	r1, [pc, #376]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a322:	4313      	orrs	r3, r2
 800a324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f003 0320 	and.w	r3, r3, #32
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d010      	beq.n	800a354 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	69da      	ldr	r2, [r3, #28]
 800a336:	4b59      	ldr	r3, [pc, #356]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a33e:	429a      	cmp	r2, r3
 800a340:	d908      	bls.n	800a354 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a342:	4b56      	ldr	r3, [pc, #344]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	69db      	ldr	r3, [r3, #28]
 800a34e:	4953      	ldr	r1, [pc, #332]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a350:	4313      	orrs	r3, r2
 800a352:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0302 	and.w	r3, r3, #2
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d010      	beq.n	800a382 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	68da      	ldr	r2, [r3, #12]
 800a364:	4b4d      	ldr	r3, [pc, #308]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	f003 030f 	and.w	r3, r3, #15
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d908      	bls.n	800a382 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a370:	4b4a      	ldr	r3, [pc, #296]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	f023 020f 	bic.w	r2, r3, #15
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	4947      	ldr	r1, [pc, #284]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a37e:	4313      	orrs	r3, r2
 800a380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0301 	and.w	r3, r3, #1
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d055      	beq.n	800a43a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a38e:	4b43      	ldr	r3, [pc, #268]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	4940      	ldr	r1, [pc, #256]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a39c:	4313      	orrs	r3, r2
 800a39e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d107      	bne.n	800a3b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a3a8:	4b3c      	ldr	r3, [pc, #240]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d121      	bne.n	800a3f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e0f6      	b.n	800a5a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	2b03      	cmp	r3, #3
 800a3be:	d107      	bne.n	800a3d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a3c0:	4b36      	ldr	r3, [pc, #216]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d115      	bne.n	800a3f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e0ea      	b.n	800a5a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d107      	bne.n	800a3e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3d8:	4b30      	ldr	r3, [pc, #192]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d109      	bne.n	800a3f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e0de      	b.n	800a5a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a3e8:	4b2c      	ldr	r3, [pc, #176]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 0304 	and.w	r3, r3, #4
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d101      	bne.n	800a3f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e0d6      	b.n	800a5a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a3f8:	4b28      	ldr	r3, [pc, #160]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	f023 0207 	bic.w	r2, r3, #7
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	4925      	ldr	r1, [pc, #148]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a406:	4313      	orrs	r3, r2
 800a408:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a40a:	f7f9 fd9b 	bl	8003f44 <HAL_GetTick>
 800a40e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a410:	e00a      	b.n	800a428 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a412:	f7f9 fd97 	bl	8003f44 <HAL_GetTick>
 800a416:	4602      	mov	r2, r0
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a420:	4293      	cmp	r3, r2
 800a422:	d901      	bls.n	800a428 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a424:	2303      	movs	r3, #3
 800a426:	e0be      	b.n	800a5a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a428:	4b1c      	ldr	r3, [pc, #112]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	00db      	lsls	r3, r3, #3
 800a436:	429a      	cmp	r2, r3
 800a438:	d1eb      	bne.n	800a412 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 0302 	and.w	r3, r3, #2
 800a442:	2b00      	cmp	r3, #0
 800a444:	d010      	beq.n	800a468 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68da      	ldr	r2, [r3, #12]
 800a44a:	4b14      	ldr	r3, [pc, #80]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	f003 030f 	and.w	r3, r3, #15
 800a452:	429a      	cmp	r2, r3
 800a454:	d208      	bcs.n	800a468 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a456:	4b11      	ldr	r3, [pc, #68]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	f023 020f 	bic.w	r2, r3, #15
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	490e      	ldr	r1, [pc, #56]	; (800a49c <HAL_RCC_ClockConfig+0x244>)
 800a464:	4313      	orrs	r3, r2
 800a466:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a468:	4b0b      	ldr	r3, [pc, #44]	; (800a498 <HAL_RCC_ClockConfig+0x240>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 030f 	and.w	r3, r3, #15
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	429a      	cmp	r2, r3
 800a474:	d214      	bcs.n	800a4a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a476:	4b08      	ldr	r3, [pc, #32]	; (800a498 <HAL_RCC_ClockConfig+0x240>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f023 020f 	bic.w	r2, r3, #15
 800a47e:	4906      	ldr	r1, [pc, #24]	; (800a498 <HAL_RCC_ClockConfig+0x240>)
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	4313      	orrs	r3, r2
 800a484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a486:	4b04      	ldr	r3, [pc, #16]	; (800a498 <HAL_RCC_ClockConfig+0x240>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 030f 	and.w	r3, r3, #15
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	429a      	cmp	r2, r3
 800a492:	d005      	beq.n	800a4a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e086      	b.n	800a5a6 <HAL_RCC_ClockConfig+0x34e>
 800a498:	52002000 	.word	0x52002000
 800a49c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d010      	beq.n	800a4ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	691a      	ldr	r2, [r3, #16]
 800a4b0:	4b3f      	ldr	r3, [pc, #252]	; (800a5b0 <HAL_RCC_ClockConfig+0x358>)
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d208      	bcs.n	800a4ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a4bc:	4b3c      	ldr	r3, [pc, #240]	; (800a5b0 <HAL_RCC_ClockConfig+0x358>)
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	691b      	ldr	r3, [r3, #16]
 800a4c8:	4939      	ldr	r1, [pc, #228]	; (800a5b0 <HAL_RCC_ClockConfig+0x358>)
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f003 0308 	and.w	r3, r3, #8
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d010      	beq.n	800a4fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	695a      	ldr	r2, [r3, #20]
 800a4de:	4b34      	ldr	r3, [pc, #208]	; (800a5b0 <HAL_RCC_ClockConfig+0x358>)
 800a4e0:	69db      	ldr	r3, [r3, #28]
 800a4e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d208      	bcs.n	800a4fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a4ea:	4b31      	ldr	r3, [pc, #196]	; (800a5b0 <HAL_RCC_ClockConfig+0x358>)
 800a4ec:	69db      	ldr	r3, [r3, #28]
 800a4ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	695b      	ldr	r3, [r3, #20]
 800a4f6:	492e      	ldr	r1, [pc, #184]	; (800a5b0 <HAL_RCC_ClockConfig+0x358>)
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0310 	and.w	r3, r3, #16
 800a504:	2b00      	cmp	r3, #0
 800a506:	d010      	beq.n	800a52a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	699a      	ldr	r2, [r3, #24]
 800a50c:	4b28      	ldr	r3, [pc, #160]	; (800a5b0 <HAL_RCC_ClockConfig+0x358>)
 800a50e:	69db      	ldr	r3, [r3, #28]
 800a510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a514:	429a      	cmp	r2, r3
 800a516:	d208      	bcs.n	800a52a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a518:	4b25      	ldr	r3, [pc, #148]	; (800a5b0 <HAL_RCC_ClockConfig+0x358>)
 800a51a:	69db      	ldr	r3, [r3, #28]
 800a51c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	4922      	ldr	r1, [pc, #136]	; (800a5b0 <HAL_RCC_ClockConfig+0x358>)
 800a526:	4313      	orrs	r3, r2
 800a528:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 0320 	and.w	r3, r3, #32
 800a532:	2b00      	cmp	r3, #0
 800a534:	d010      	beq.n	800a558 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	69da      	ldr	r2, [r3, #28]
 800a53a:	4b1d      	ldr	r3, [pc, #116]	; (800a5b0 <HAL_RCC_ClockConfig+0x358>)
 800a53c:	6a1b      	ldr	r3, [r3, #32]
 800a53e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a542:	429a      	cmp	r2, r3
 800a544:	d208      	bcs.n	800a558 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a546:	4b1a      	ldr	r3, [pc, #104]	; (800a5b0 <HAL_RCC_ClockConfig+0x358>)
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	69db      	ldr	r3, [r3, #28]
 800a552:	4917      	ldr	r1, [pc, #92]	; (800a5b0 <HAL_RCC_ClockConfig+0x358>)
 800a554:	4313      	orrs	r3, r2
 800a556:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a558:	f000 f834 	bl	800a5c4 <HAL_RCC_GetSysClockFreq>
 800a55c:	4602      	mov	r2, r0
 800a55e:	4b14      	ldr	r3, [pc, #80]	; (800a5b0 <HAL_RCC_ClockConfig+0x358>)
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	0a1b      	lsrs	r3, r3, #8
 800a564:	f003 030f 	and.w	r3, r3, #15
 800a568:	4912      	ldr	r1, [pc, #72]	; (800a5b4 <HAL_RCC_ClockConfig+0x35c>)
 800a56a:	5ccb      	ldrb	r3, [r1, r3]
 800a56c:	f003 031f 	and.w	r3, r3, #31
 800a570:	fa22 f303 	lsr.w	r3, r2, r3
 800a574:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a576:	4b0e      	ldr	r3, [pc, #56]	; (800a5b0 <HAL_RCC_ClockConfig+0x358>)
 800a578:	699b      	ldr	r3, [r3, #24]
 800a57a:	f003 030f 	and.w	r3, r3, #15
 800a57e:	4a0d      	ldr	r2, [pc, #52]	; (800a5b4 <HAL_RCC_ClockConfig+0x35c>)
 800a580:	5cd3      	ldrb	r3, [r2, r3]
 800a582:	f003 031f 	and.w	r3, r3, #31
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	fa22 f303 	lsr.w	r3, r2, r3
 800a58c:	4a0a      	ldr	r2, [pc, #40]	; (800a5b8 <HAL_RCC_ClockConfig+0x360>)
 800a58e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a590:	4a0a      	ldr	r2, [pc, #40]	; (800a5bc <HAL_RCC_ClockConfig+0x364>)
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a596:	4b0a      	ldr	r3, [pc, #40]	; (800a5c0 <HAL_RCC_ClockConfig+0x368>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7f9 fc88 	bl	8003eb0 <HAL_InitTick>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	58024400 	.word	0x58024400
 800a5b4:	08028c7c 	.word	0x08028c7c
 800a5b8:	24000404 	.word	0x24000404
 800a5bc:	24000400 	.word	0x24000400
 800a5c0:	24000408 	.word	0x24000408

0800a5c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b089      	sub	sp, #36	; 0x24
 800a5c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a5ca:	4bb3      	ldr	r3, [pc, #716]	; (800a898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5d2:	2b18      	cmp	r3, #24
 800a5d4:	f200 8155 	bhi.w	800a882 <HAL_RCC_GetSysClockFreq+0x2be>
 800a5d8:	a201      	add	r2, pc, #4	; (adr r2, 800a5e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5de:	bf00      	nop
 800a5e0:	0800a645 	.word	0x0800a645
 800a5e4:	0800a883 	.word	0x0800a883
 800a5e8:	0800a883 	.word	0x0800a883
 800a5ec:	0800a883 	.word	0x0800a883
 800a5f0:	0800a883 	.word	0x0800a883
 800a5f4:	0800a883 	.word	0x0800a883
 800a5f8:	0800a883 	.word	0x0800a883
 800a5fc:	0800a883 	.word	0x0800a883
 800a600:	0800a66b 	.word	0x0800a66b
 800a604:	0800a883 	.word	0x0800a883
 800a608:	0800a883 	.word	0x0800a883
 800a60c:	0800a883 	.word	0x0800a883
 800a610:	0800a883 	.word	0x0800a883
 800a614:	0800a883 	.word	0x0800a883
 800a618:	0800a883 	.word	0x0800a883
 800a61c:	0800a883 	.word	0x0800a883
 800a620:	0800a671 	.word	0x0800a671
 800a624:	0800a883 	.word	0x0800a883
 800a628:	0800a883 	.word	0x0800a883
 800a62c:	0800a883 	.word	0x0800a883
 800a630:	0800a883 	.word	0x0800a883
 800a634:	0800a883 	.word	0x0800a883
 800a638:	0800a883 	.word	0x0800a883
 800a63c:	0800a883 	.word	0x0800a883
 800a640:	0800a677 	.word	0x0800a677
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a644:	4b94      	ldr	r3, [pc, #592]	; (800a898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0320 	and.w	r3, r3, #32
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d009      	beq.n	800a664 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a650:	4b91      	ldr	r3, [pc, #580]	; (800a898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	08db      	lsrs	r3, r3, #3
 800a656:	f003 0303 	and.w	r3, r3, #3
 800a65a:	4a90      	ldr	r2, [pc, #576]	; (800a89c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a65c:	fa22 f303 	lsr.w	r3, r2, r3
 800a660:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a662:	e111      	b.n	800a888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a664:	4b8d      	ldr	r3, [pc, #564]	; (800a89c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a666:	61bb      	str	r3, [r7, #24]
    break;
 800a668:	e10e      	b.n	800a888 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a66a:	4b8d      	ldr	r3, [pc, #564]	; (800a8a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a66c:	61bb      	str	r3, [r7, #24]
    break;
 800a66e:	e10b      	b.n	800a888 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a670:	4b8c      	ldr	r3, [pc, #560]	; (800a8a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a672:	61bb      	str	r3, [r7, #24]
    break;
 800a674:	e108      	b.n	800a888 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a676:	4b88      	ldr	r3, [pc, #544]	; (800a898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a67a:	f003 0303 	and.w	r3, r3, #3
 800a67e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a680:	4b85      	ldr	r3, [pc, #532]	; (800a898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a684:	091b      	lsrs	r3, r3, #4
 800a686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a68a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a68c:	4b82      	ldr	r3, [pc, #520]	; (800a898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a690:	f003 0301 	and.w	r3, r3, #1
 800a694:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a696:	4b80      	ldr	r3, [pc, #512]	; (800a898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a69a:	08db      	lsrs	r3, r3, #3
 800a69c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	fb02 f303 	mul.w	r3, r2, r3
 800a6a6:	ee07 3a90 	vmov	s15, r3
 800a6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f000 80e1 	beq.w	800a87c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	f000 8083 	beq.w	800a7c8 <HAL_RCC_GetSysClockFreq+0x204>
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	f200 80a1 	bhi.w	800a80c <HAL_RCC_GetSysClockFreq+0x248>
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d003      	beq.n	800a6d8 <HAL_RCC_GetSysClockFreq+0x114>
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d056      	beq.n	800a784 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a6d6:	e099      	b.n	800a80c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6d8:	4b6f      	ldr	r3, [pc, #444]	; (800a898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 0320 	and.w	r3, r3, #32
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d02d      	beq.n	800a740 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a6e4:	4b6c      	ldr	r3, [pc, #432]	; (800a898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	08db      	lsrs	r3, r3, #3
 800a6ea:	f003 0303 	and.w	r3, r3, #3
 800a6ee:	4a6b      	ldr	r2, [pc, #428]	; (800a89c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a6f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	ee07 3a90 	vmov	s15, r3
 800a6fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	ee07 3a90 	vmov	s15, r3
 800a706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a70e:	4b62      	ldr	r3, [pc, #392]	; (800a898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a716:	ee07 3a90 	vmov	s15, r3
 800a71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a71e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a722:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a8a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a73a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a73e:	e087      	b.n	800a850 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	ee07 3a90 	vmov	s15, r3
 800a746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a74a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a8ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800a74e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a752:	4b51      	ldr	r3, [pc, #324]	; (800a898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a75a:	ee07 3a90 	vmov	s15, r3
 800a75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a762:	ed97 6a02 	vldr	s12, [r7, #8]
 800a766:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a8a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a76a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a76e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a77e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a782:	e065      	b.n	800a850 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	ee07 3a90 	vmov	s15, r3
 800a78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a78e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a8b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a796:	4b40      	ldr	r3, [pc, #256]	; (800a898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a79e:	ee07 3a90 	vmov	s15, r3
 800a7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a8a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7c6:	e043      	b.n	800a850 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	ee07 3a90 	vmov	s15, r3
 800a7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a8b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a7d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7da:	4b2f      	ldr	r3, [pc, #188]	; (800a898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7e2:	ee07 3a90 	vmov	s15, r3
 800a7e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a8a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a802:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a80a:	e021      	b.n	800a850 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	ee07 3a90 	vmov	s15, r3
 800a812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a816:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a8b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a81a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a81e:	4b1e      	ldr	r3, [pc, #120]	; (800a898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a826:	ee07 3a90 	vmov	s15, r3
 800a82a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a82e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a832:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a8a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a83a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a83e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a84a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a84e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a850:	4b11      	ldr	r3, [pc, #68]	; (800a898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a854:	0a5b      	lsrs	r3, r3, #9
 800a856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a85a:	3301      	adds	r3, #1
 800a85c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	ee07 3a90 	vmov	s15, r3
 800a864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a868:	edd7 6a07 	vldr	s13, [r7, #28]
 800a86c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a874:	ee17 3a90 	vmov	r3, s15
 800a878:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a87a:	e005      	b.n	800a888 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	61bb      	str	r3, [r7, #24]
    break;
 800a880:	e002      	b.n	800a888 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a882:	4b07      	ldr	r3, [pc, #28]	; (800a8a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a884:	61bb      	str	r3, [r7, #24]
    break;
 800a886:	bf00      	nop
  }

  return sysclockfreq;
 800a888:	69bb      	ldr	r3, [r7, #24]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3724      	adds	r7, #36	; 0x24
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	58024400 	.word	0x58024400
 800a89c:	03d09000 	.word	0x03d09000
 800a8a0:	003d0900 	.word	0x003d0900
 800a8a4:	017d7840 	.word	0x017d7840
 800a8a8:	46000000 	.word	0x46000000
 800a8ac:	4c742400 	.word	0x4c742400
 800a8b0:	4a742400 	.word	0x4a742400
 800a8b4:	4bbebc20 	.word	0x4bbebc20

0800a8b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a8be:	f7ff fe81 	bl	800a5c4 <HAL_RCC_GetSysClockFreq>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	4b10      	ldr	r3, [pc, #64]	; (800a908 <HAL_RCC_GetHCLKFreq+0x50>)
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	0a1b      	lsrs	r3, r3, #8
 800a8ca:	f003 030f 	and.w	r3, r3, #15
 800a8ce:	490f      	ldr	r1, [pc, #60]	; (800a90c <HAL_RCC_GetHCLKFreq+0x54>)
 800a8d0:	5ccb      	ldrb	r3, [r1, r3]
 800a8d2:	f003 031f 	and.w	r3, r3, #31
 800a8d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a8dc:	4b0a      	ldr	r3, [pc, #40]	; (800a908 <HAL_RCC_GetHCLKFreq+0x50>)
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	f003 030f 	and.w	r3, r3, #15
 800a8e4:	4a09      	ldr	r2, [pc, #36]	; (800a90c <HAL_RCC_GetHCLKFreq+0x54>)
 800a8e6:	5cd3      	ldrb	r3, [r2, r3]
 800a8e8:	f003 031f 	and.w	r3, r3, #31
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a8f2:	4a07      	ldr	r2, [pc, #28]	; (800a910 <HAL_RCC_GetHCLKFreq+0x58>)
 800a8f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a8f6:	4a07      	ldr	r2, [pc, #28]	; (800a914 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a8fc:	4b04      	ldr	r3, [pc, #16]	; (800a910 <HAL_RCC_GetHCLKFreq+0x58>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	58024400 	.word	0x58024400
 800a90c:	08028c7c 	.word	0x08028c7c
 800a910:	24000404 	.word	0x24000404
 800a914:	24000400 	.word	0x24000400

0800a918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a91c:	f7ff ffcc 	bl	800a8b8 <HAL_RCC_GetHCLKFreq>
 800a920:	4602      	mov	r2, r0
 800a922:	4b06      	ldr	r3, [pc, #24]	; (800a93c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	091b      	lsrs	r3, r3, #4
 800a928:	f003 0307 	and.w	r3, r3, #7
 800a92c:	4904      	ldr	r1, [pc, #16]	; (800a940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a92e:	5ccb      	ldrb	r3, [r1, r3]
 800a930:	f003 031f 	and.w	r3, r3, #31
 800a934:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a938:	4618      	mov	r0, r3
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	58024400 	.word	0x58024400
 800a940:	08028c7c 	.word	0x08028c7c

0800a944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a948:	f7ff ffb6 	bl	800a8b8 <HAL_RCC_GetHCLKFreq>
 800a94c:	4602      	mov	r2, r0
 800a94e:	4b06      	ldr	r3, [pc, #24]	; (800a968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a950:	69db      	ldr	r3, [r3, #28]
 800a952:	0a1b      	lsrs	r3, r3, #8
 800a954:	f003 0307 	and.w	r3, r3, #7
 800a958:	4904      	ldr	r1, [pc, #16]	; (800a96c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a95a:	5ccb      	ldrb	r3, [r1, r3]
 800a95c:	f003 031f 	and.w	r3, r3, #31
 800a960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a964:	4618      	mov	r0, r3
 800a966:	bd80      	pop	{r7, pc}
 800a968:	58024400 	.word	0x58024400
 800a96c:	08028c7c 	.word	0x08028c7c

0800a970 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a978:	2300      	movs	r3, #0
 800a97a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a97c:	2300      	movs	r3, #0
 800a97e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d03f      	beq.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a990:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a994:	d02a      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a996:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a99a:	d824      	bhi.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a99c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9a0:	d018      	beq.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a9a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9a6:	d81e      	bhi.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d003      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a9ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9b0:	d007      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a9b2:	e018      	b.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9b4:	4bab      	ldr	r3, [pc, #684]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b8:	4aaa      	ldr	r2, [pc, #680]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a9c0:	e015      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	3304      	adds	r3, #4
 800a9c6:	2102      	movs	r1, #2
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f001 fff3 	bl	800c9b4 <RCCEx_PLL2_Config>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a9d2:	e00c      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	3324      	adds	r3, #36	; 0x24
 800a9d8:	2102      	movs	r1, #2
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f002 f89c 	bl	800cb18 <RCCEx_PLL3_Config>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a9e4:	e003      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a9ea:	e000      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a9ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d109      	bne.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a9f4:	4b9b      	ldr	r3, [pc, #620]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa00:	4998      	ldr	r1, [pc, #608]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa02:	4313      	orrs	r3, r2
 800aa04:	650b      	str	r3, [r1, #80]	; 0x50
 800aa06:	e001      	b.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa08:	7dfb      	ldrb	r3, [r7, #23]
 800aa0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d03d      	beq.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa1c:	2b04      	cmp	r3, #4
 800aa1e:	d826      	bhi.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800aa20:	a201      	add	r2, pc, #4	; (adr r2, 800aa28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800aa22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa26:	bf00      	nop
 800aa28:	0800aa3d 	.word	0x0800aa3d
 800aa2c:	0800aa4b 	.word	0x0800aa4b
 800aa30:	0800aa5d 	.word	0x0800aa5d
 800aa34:	0800aa75 	.word	0x0800aa75
 800aa38:	0800aa75 	.word	0x0800aa75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa3c:	4b89      	ldr	r3, [pc, #548]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa40:	4a88      	ldr	r2, [pc, #544]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa48:	e015      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	2100      	movs	r1, #0
 800aa50:	4618      	mov	r0, r3
 800aa52:	f001 ffaf 	bl	800c9b4 <RCCEx_PLL2_Config>
 800aa56:	4603      	mov	r3, r0
 800aa58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa5a:	e00c      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3324      	adds	r3, #36	; 0x24
 800aa60:	2100      	movs	r1, #0
 800aa62:	4618      	mov	r0, r3
 800aa64:	f002 f858 	bl	800cb18 <RCCEx_PLL3_Config>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa6c:	e003      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	75fb      	strb	r3, [r7, #23]
      break;
 800aa72:	e000      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800aa74:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa76:	7dfb      	ldrb	r3, [r7, #23]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d109      	bne.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa7c:	4b79      	ldr	r3, [pc, #484]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa80:	f023 0207 	bic.w	r2, r3, #7
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa88:	4976      	ldr	r1, [pc, #472]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	650b      	str	r3, [r1, #80]	; 0x50
 800aa8e:	e001      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa90:	7dfb      	ldrb	r3, [r7, #23]
 800aa92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d042      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaa8:	d02b      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800aaaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaae:	d825      	bhi.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800aab0:	2bc0      	cmp	r3, #192	; 0xc0
 800aab2:	d028      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800aab4:	2bc0      	cmp	r3, #192	; 0xc0
 800aab6:	d821      	bhi.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800aab8:	2b80      	cmp	r3, #128	; 0x80
 800aaba:	d016      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800aabc:	2b80      	cmp	r3, #128	; 0x80
 800aabe:	d81d      	bhi.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800aac4:	2b40      	cmp	r3, #64	; 0x40
 800aac6:	d007      	beq.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800aac8:	e018      	b.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaca:	4b66      	ldr	r3, [pc, #408]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aace:	4a65      	ldr	r2, [pc, #404]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aad4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aad6:	e017      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	3304      	adds	r3, #4
 800aadc:	2100      	movs	r1, #0
 800aade:	4618      	mov	r0, r3
 800aae0:	f001 ff68 	bl	800c9b4 <RCCEx_PLL2_Config>
 800aae4:	4603      	mov	r3, r0
 800aae6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aae8:	e00e      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	3324      	adds	r3, #36	; 0x24
 800aaee:	2100      	movs	r1, #0
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f002 f811 	bl	800cb18 <RCCEx_PLL3_Config>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aafa:	e005      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	75fb      	strb	r3, [r7, #23]
      break;
 800ab00:	e002      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ab02:	bf00      	nop
 800ab04:	e000      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ab06:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab08:	7dfb      	ldrb	r3, [r7, #23]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d109      	bne.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ab0e:	4b55      	ldr	r3, [pc, #340]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab1a:	4952      	ldr	r1, [pc, #328]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	650b      	str	r3, [r1, #80]	; 0x50
 800ab20:	e001      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
 800ab24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d049      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab3c:	d030      	beq.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ab3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab42:	d82a      	bhi.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ab44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ab48:	d02c      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ab4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ab4e:	d824      	bhi.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ab50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab54:	d018      	beq.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800ab56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab5a:	d81e      	bhi.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d003      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ab60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab64:	d007      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ab66:	e018      	b.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab68:	4b3e      	ldr	r3, [pc, #248]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6c:	4a3d      	ldr	r2, [pc, #244]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab74:	e017      	b.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	3304      	adds	r3, #4
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f001 ff19 	bl	800c9b4 <RCCEx_PLL2_Config>
 800ab82:	4603      	mov	r3, r0
 800ab84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ab86:	e00e      	b.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	3324      	adds	r3, #36	; 0x24
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f001 ffc2 	bl	800cb18 <RCCEx_PLL3_Config>
 800ab94:	4603      	mov	r3, r0
 800ab96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab98:	e005      	b.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab9e:	e002      	b.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800aba0:	bf00      	nop
 800aba2:	e000      	b.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800aba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aba6:	7dfb      	ldrb	r3, [r7, #23]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10a      	bne.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800abac:	4b2d      	ldr	r3, [pc, #180]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abb0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800abba:	492a      	ldr	r1, [pc, #168]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abbc:	4313      	orrs	r3, r2
 800abbe:	658b      	str	r3, [r1, #88]	; 0x58
 800abc0:	e001      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abc2:	7dfb      	ldrb	r3, [r7, #23]
 800abc4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d04c      	beq.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800abd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abdc:	d030      	beq.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800abde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abe2:	d82a      	bhi.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800abe4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800abe8:	d02c      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800abea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800abee:	d824      	bhi.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800abf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abf4:	d018      	beq.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800abf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abfa:	d81e      	bhi.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d003      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ac00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac04:	d007      	beq.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ac06:	e018      	b.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac08:	4b16      	ldr	r3, [pc, #88]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0c:	4a15      	ldr	r2, [pc, #84]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac14:	e017      	b.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	3304      	adds	r3, #4
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f001 fec9 	bl	800c9b4 <RCCEx_PLL2_Config>
 800ac22:	4603      	mov	r3, r0
 800ac24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ac26:	e00e      	b.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3324      	adds	r3, #36	; 0x24
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f001 ff72 	bl	800cb18 <RCCEx_PLL3_Config>
 800ac34:	4603      	mov	r3, r0
 800ac36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac38:	e005      	b.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	75fb      	strb	r3, [r7, #23]
      break;
 800ac3e:	e002      	b.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800ac40:	bf00      	nop
 800ac42:	e000      	b.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800ac44:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d10d      	bne.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ac4c:	4b05      	ldr	r3, [pc, #20]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac50:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac5a:	4902      	ldr	r1, [pc, #8]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	658b      	str	r3, [r1, #88]	; 0x58
 800ac60:	e004      	b.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800ac62:	bf00      	nop
 800ac64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac68:	7dfb      	ldrb	r3, [r7, #23]
 800ac6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d032      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac7c:	2b30      	cmp	r3, #48	; 0x30
 800ac7e:	d01c      	beq.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ac80:	2b30      	cmp	r3, #48	; 0x30
 800ac82:	d817      	bhi.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800ac84:	2b20      	cmp	r3, #32
 800ac86:	d00c      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800ac88:	2b20      	cmp	r3, #32
 800ac8a:	d813      	bhi.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d016      	beq.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800ac90:	2b10      	cmp	r3, #16
 800ac92:	d10f      	bne.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac94:	4baf      	ldr	r3, [pc, #700]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ac96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac98:	4aae      	ldr	r2, [pc, #696]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ac9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800aca0:	e00e      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	3304      	adds	r3, #4
 800aca6:	2102      	movs	r1, #2
 800aca8:	4618      	mov	r0, r3
 800acaa:	f001 fe83 	bl	800c9b4 <RCCEx_PLL2_Config>
 800acae:	4603      	mov	r3, r0
 800acb0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800acb2:	e005      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	75fb      	strb	r3, [r7, #23]
      break;
 800acb8:	e002      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800acba:	bf00      	nop
 800acbc:	e000      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800acbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acc0:	7dfb      	ldrb	r3, [r7, #23]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d109      	bne.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800acc6:	4ba3      	ldr	r3, [pc, #652]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800acc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acd2:	49a0      	ldr	r1, [pc, #640]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800acd4:	4313      	orrs	r3, r2
 800acd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800acd8:	e001      	b.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acda:	7dfb      	ldrb	r3, [r7, #23]
 800acdc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d047      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acf2:	d030      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800acf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acf8:	d82a      	bhi.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800acfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800acfe:	d02c      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800ad00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad04:	d824      	bhi.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800ad06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad0a:	d018      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800ad0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad10:	d81e      	bhi.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d003      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800ad16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad1a:	d007      	beq.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800ad1c:	e018      	b.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad1e:	4b8d      	ldr	r3, [pc, #564]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad22:	4a8c      	ldr	r2, [pc, #560]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ad2a:	e017      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3304      	adds	r3, #4
 800ad30:	2100      	movs	r1, #0
 800ad32:	4618      	mov	r0, r3
 800ad34:	f001 fe3e 	bl	800c9b4 <RCCEx_PLL2_Config>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ad3c:	e00e      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	3324      	adds	r3, #36	; 0x24
 800ad42:	2100      	movs	r1, #0
 800ad44:	4618      	mov	r0, r3
 800ad46:	f001 fee7 	bl	800cb18 <RCCEx_PLL3_Config>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ad4e:	e005      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	75fb      	strb	r3, [r7, #23]
      break;
 800ad54:	e002      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800ad56:	bf00      	nop
 800ad58:	e000      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800ad5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad5c:	7dfb      	ldrb	r3, [r7, #23]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d109      	bne.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ad62:	4b7c      	ldr	r3, [pc, #496]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad66:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad6e:	4979      	ldr	r1, [pc, #484]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad70:	4313      	orrs	r3, r2
 800ad72:	650b      	str	r3, [r1, #80]	; 0x50
 800ad74:	e001      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad76:	7dfb      	ldrb	r3, [r7, #23]
 800ad78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d049      	beq.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad8e:	d02e      	beq.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800ad90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad94:	d828      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ad96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad9a:	d02a      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800ad9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ada0:	d822      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ada2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ada6:	d026      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800ada8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800adac:	d81c      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800adae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adb2:	d010      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800adb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adb8:	d816      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d01d      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800adbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adc2:	d111      	bne.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	3304      	adds	r3, #4
 800adc8:	2101      	movs	r1, #1
 800adca:	4618      	mov	r0, r3
 800adcc:	f001 fdf2 	bl	800c9b4 <RCCEx_PLL2_Config>
 800add0:	4603      	mov	r3, r0
 800add2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800add4:	e012      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	3324      	adds	r3, #36	; 0x24
 800adda:	2101      	movs	r1, #1
 800addc:	4618      	mov	r0, r3
 800adde:	f001 fe9b 	bl	800cb18 <RCCEx_PLL3_Config>
 800ade2:	4603      	mov	r3, r0
 800ade4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ade6:	e009      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	75fb      	strb	r3, [r7, #23]
      break;
 800adec:	e006      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800adee:	bf00      	nop
 800adf0:	e004      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800adf2:	bf00      	nop
 800adf4:	e002      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800adf6:	bf00      	nop
 800adf8:	e000      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800adfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adfc:	7dfb      	ldrb	r3, [r7, #23]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d109      	bne.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ae02:	4b54      	ldr	r3, [pc, #336]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ae04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae06:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae0e:	4951      	ldr	r1, [pc, #324]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ae10:	4313      	orrs	r3, r2
 800ae12:	650b      	str	r3, [r1, #80]	; 0x50
 800ae14:	e001      	b.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae16:	7dfb      	ldrb	r3, [r7, #23]
 800ae18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d04b      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae30:	d02e      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800ae32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae36:	d828      	bhi.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ae38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae3c:	d02a      	beq.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800ae3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae42:	d822      	bhi.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ae44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae48:	d026      	beq.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800ae4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae4e:	d81c      	bhi.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ae50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae54:	d010      	beq.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800ae56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae5a:	d816      	bhi.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d01d      	beq.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800ae60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae64:	d111      	bne.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	3304      	adds	r3, #4
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f001 fda1 	bl	800c9b4 <RCCEx_PLL2_Config>
 800ae72:	4603      	mov	r3, r0
 800ae74:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ae76:	e012      	b.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	3324      	adds	r3, #36	; 0x24
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f001 fe4a 	bl	800cb18 <RCCEx_PLL3_Config>
 800ae84:	4603      	mov	r3, r0
 800ae86:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ae88:	e009      	b.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae8e:	e006      	b.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ae90:	bf00      	nop
 800ae92:	e004      	b.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ae94:	bf00      	nop
 800ae96:	e002      	b.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ae98:	bf00      	nop
 800ae9a:	e000      	b.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ae9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae9e:	7dfb      	ldrb	r3, [r7, #23]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10a      	bne.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aea4:	4b2b      	ldr	r3, [pc, #172]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aea8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aeb2:	4928      	ldr	r1, [pc, #160]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	658b      	str	r3, [r1, #88]	; 0x58
 800aeb8:	e001      	b.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeba:	7dfb      	ldrb	r3, [r7, #23]
 800aebc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d02f      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aed2:	d00e      	beq.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800aed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aed8:	d814      	bhi.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d015      	beq.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800aede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aee2:	d10f      	bne.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aee4:	4b1b      	ldr	r3, [pc, #108]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee8:	4a1a      	ldr	r2, [pc, #104]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aeea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800aef0:	e00c      	b.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	3304      	adds	r3, #4
 800aef6:	2101      	movs	r1, #1
 800aef8:	4618      	mov	r0, r3
 800aefa:	f001 fd5b 	bl	800c9b4 <RCCEx_PLL2_Config>
 800aefe:	4603      	mov	r3, r0
 800af00:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800af02:	e003      	b.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	75fb      	strb	r3, [r7, #23]
      break;
 800af08:	e000      	b.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800af0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af0c:	7dfb      	ldrb	r3, [r7, #23]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d109      	bne.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800af12:	4b10      	ldr	r3, [pc, #64]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af1e:	490d      	ldr	r1, [pc, #52]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af20:	4313      	orrs	r3, r2
 800af22:	650b      	str	r3, [r1, #80]	; 0x50
 800af24:	e001      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af26:	7dfb      	ldrb	r3, [r7, #23]
 800af28:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af32:	2b00      	cmp	r3, #0
 800af34:	d033      	beq.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af3a:	2b03      	cmp	r3, #3
 800af3c:	d81c      	bhi.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800af3e:	a201      	add	r2, pc, #4	; (adr r2, 800af44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800af40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af44:	0800af7f 	.word	0x0800af7f
 800af48:	0800af59 	.word	0x0800af59
 800af4c:	0800af67 	.word	0x0800af67
 800af50:	0800af7f 	.word	0x0800af7f
 800af54:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af58:	4bb8      	ldr	r3, [pc, #736]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5c:	4ab7      	ldr	r2, [pc, #732]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800af64:	e00c      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	3304      	adds	r3, #4
 800af6a:	2102      	movs	r1, #2
 800af6c:	4618      	mov	r0, r3
 800af6e:	f001 fd21 	bl	800c9b4 <RCCEx_PLL2_Config>
 800af72:	4603      	mov	r3, r0
 800af74:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800af76:	e003      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	75fb      	strb	r3, [r7, #23]
      break;
 800af7c:	e000      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800af7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af80:	7dfb      	ldrb	r3, [r7, #23]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d109      	bne.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800af86:	4bad      	ldr	r3, [pc, #692]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af8a:	f023 0203 	bic.w	r2, r3, #3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af92:	49aa      	ldr	r1, [pc, #680]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af94:	4313      	orrs	r3, r2
 800af96:	64cb      	str	r3, [r1, #76]	; 0x4c
 800af98:	e001      	b.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af9a:	7dfb      	ldrb	r3, [r7, #23]
 800af9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 8086 	beq.w	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800afac:	4ba4      	ldr	r3, [pc, #656]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4aa3      	ldr	r2, [pc, #652]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800afb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800afb8:	f7f8 ffc4 	bl	8003f44 <HAL_GetTick>
 800afbc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afbe:	e009      	b.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afc0:	f7f8 ffc0 	bl	8003f44 <HAL_GetTick>
 800afc4:	4602      	mov	r2, r0
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	1ad3      	subs	r3, r2, r3
 800afca:	2b64      	cmp	r3, #100	; 0x64
 800afcc:	d902      	bls.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800afce:	2303      	movs	r3, #3
 800afd0:	75fb      	strb	r3, [r7, #23]
        break;
 800afd2:	e005      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afd4:	4b9a      	ldr	r3, [pc, #616]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d0ef      	beq.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800afe0:	7dfb      	ldrb	r3, [r7, #23]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d166      	bne.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800afe6:	4b95      	ldr	r3, [pc, #596]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800afe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aff0:	4053      	eors	r3, r2
 800aff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d013      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800affa:	4b90      	ldr	r3, [pc, #576]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800affc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800affe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b002:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b004:	4b8d      	ldr	r3, [pc, #564]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b008:	4a8c      	ldr	r2, [pc, #560]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b00a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b00e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b010:	4b8a      	ldr	r3, [pc, #552]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b014:	4a89      	ldr	r2, [pc, #548]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b01a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b01c:	4a87      	ldr	r2, [pc, #540]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b02c:	d115      	bne.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b02e:	f7f8 ff89 	bl	8003f44 <HAL_GetTick>
 800b032:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b034:	e00b      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b036:	f7f8 ff85 	bl	8003f44 <HAL_GetTick>
 800b03a:	4602      	mov	r2, r0
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	1ad3      	subs	r3, r2, r3
 800b040:	f241 3288 	movw	r2, #5000	; 0x1388
 800b044:	4293      	cmp	r3, r2
 800b046:	d902      	bls.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b048:	2303      	movs	r3, #3
 800b04a:	75fb      	strb	r3, [r7, #23]
            break;
 800b04c:	e005      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b04e:	4b7b      	ldr	r3, [pc, #492]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b052:	f003 0302 	and.w	r3, r3, #2
 800b056:	2b00      	cmp	r3, #0
 800b058:	d0ed      	beq.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b05a:	7dfb      	ldrb	r3, [r7, #23]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d126      	bne.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b06a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b06e:	d10d      	bne.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b070:	4b72      	ldr	r3, [pc, #456]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b072:	691b      	ldr	r3, [r3, #16]
 800b074:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b07e:	0919      	lsrs	r1, r3, #4
 800b080:	4b70      	ldr	r3, [pc, #448]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800b082:	400b      	ands	r3, r1
 800b084:	496d      	ldr	r1, [pc, #436]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b086:	4313      	orrs	r3, r2
 800b088:	610b      	str	r3, [r1, #16]
 800b08a:	e005      	b.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b08c:	4b6b      	ldr	r3, [pc, #428]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	4a6a      	ldr	r2, [pc, #424]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b092:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b096:	6113      	str	r3, [r2, #16]
 800b098:	4b68      	ldr	r3, [pc, #416]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b09a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0a6:	4965      	ldr	r1, [pc, #404]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	670b      	str	r3, [r1, #112]	; 0x70
 800b0ac:	e004      	b.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b0ae:	7dfb      	ldrb	r3, [r7, #23]
 800b0b0:	75bb      	strb	r3, [r7, #22]
 800b0b2:	e001      	b.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
 800b0b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f003 0301 	and.w	r3, r3, #1
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d07e      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0c8:	2b28      	cmp	r3, #40	; 0x28
 800b0ca:	d867      	bhi.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b0cc:	a201      	add	r2, pc, #4	; (adr r2, 800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d2:	bf00      	nop
 800b0d4:	0800b1a3 	.word	0x0800b1a3
 800b0d8:	0800b19d 	.word	0x0800b19d
 800b0dc:	0800b19d 	.word	0x0800b19d
 800b0e0:	0800b19d 	.word	0x0800b19d
 800b0e4:	0800b19d 	.word	0x0800b19d
 800b0e8:	0800b19d 	.word	0x0800b19d
 800b0ec:	0800b19d 	.word	0x0800b19d
 800b0f0:	0800b19d 	.word	0x0800b19d
 800b0f4:	0800b179 	.word	0x0800b179
 800b0f8:	0800b19d 	.word	0x0800b19d
 800b0fc:	0800b19d 	.word	0x0800b19d
 800b100:	0800b19d 	.word	0x0800b19d
 800b104:	0800b19d 	.word	0x0800b19d
 800b108:	0800b19d 	.word	0x0800b19d
 800b10c:	0800b19d 	.word	0x0800b19d
 800b110:	0800b19d 	.word	0x0800b19d
 800b114:	0800b18b 	.word	0x0800b18b
 800b118:	0800b19d 	.word	0x0800b19d
 800b11c:	0800b19d 	.word	0x0800b19d
 800b120:	0800b19d 	.word	0x0800b19d
 800b124:	0800b19d 	.word	0x0800b19d
 800b128:	0800b19d 	.word	0x0800b19d
 800b12c:	0800b19d 	.word	0x0800b19d
 800b130:	0800b19d 	.word	0x0800b19d
 800b134:	0800b1a3 	.word	0x0800b1a3
 800b138:	0800b19d 	.word	0x0800b19d
 800b13c:	0800b19d 	.word	0x0800b19d
 800b140:	0800b19d 	.word	0x0800b19d
 800b144:	0800b19d 	.word	0x0800b19d
 800b148:	0800b19d 	.word	0x0800b19d
 800b14c:	0800b19d 	.word	0x0800b19d
 800b150:	0800b19d 	.word	0x0800b19d
 800b154:	0800b1a3 	.word	0x0800b1a3
 800b158:	0800b19d 	.word	0x0800b19d
 800b15c:	0800b19d 	.word	0x0800b19d
 800b160:	0800b19d 	.word	0x0800b19d
 800b164:	0800b19d 	.word	0x0800b19d
 800b168:	0800b19d 	.word	0x0800b19d
 800b16c:	0800b19d 	.word	0x0800b19d
 800b170:	0800b19d 	.word	0x0800b19d
 800b174:	0800b1a3 	.word	0x0800b1a3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3304      	adds	r3, #4
 800b17c:	2101      	movs	r1, #1
 800b17e:	4618      	mov	r0, r3
 800b180:	f001 fc18 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b184:	4603      	mov	r3, r0
 800b186:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b188:	e00c      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3324      	adds	r3, #36	; 0x24
 800b18e:	2101      	movs	r1, #1
 800b190:	4618      	mov	r0, r3
 800b192:	f001 fcc1 	bl	800cb18 <RCCEx_PLL3_Config>
 800b196:	4603      	mov	r3, r0
 800b198:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b19a:	e003      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	75fb      	strb	r3, [r7, #23]
      break;
 800b1a0:	e000      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800b1a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1a4:	7dfb      	ldrb	r3, [r7, #23]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d109      	bne.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b1aa:	4b24      	ldr	r3, [pc, #144]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b1ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1b6:	4921      	ldr	r1, [pc, #132]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	654b      	str	r3, [r1, #84]	; 0x54
 800b1bc:	e001      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1be:	7dfb      	ldrb	r3, [r7, #23]
 800b1c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 0302 	and.w	r3, r3, #2
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d03e      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1d2:	2b05      	cmp	r3, #5
 800b1d4:	d820      	bhi.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b1d6:	a201      	add	r2, pc, #4	; (adr r2, 800b1dc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1dc:	0800b21f 	.word	0x0800b21f
 800b1e0:	0800b1f5 	.word	0x0800b1f5
 800b1e4:	0800b207 	.word	0x0800b207
 800b1e8:	0800b21f 	.word	0x0800b21f
 800b1ec:	0800b21f 	.word	0x0800b21f
 800b1f0:	0800b21f 	.word	0x0800b21f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	2101      	movs	r1, #1
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f001 fbda 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b200:	4603      	mov	r3, r0
 800b202:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b204:	e00c      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	3324      	adds	r3, #36	; 0x24
 800b20a:	2101      	movs	r1, #1
 800b20c:	4618      	mov	r0, r3
 800b20e:	f001 fc83 	bl	800cb18 <RCCEx_PLL3_Config>
 800b212:	4603      	mov	r3, r0
 800b214:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b216:	e003      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	75fb      	strb	r3, [r7, #23]
      break;
 800b21c:	e000      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800b21e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b220:	7dfb      	ldrb	r3, [r7, #23]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d110      	bne.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b226:	4b05      	ldr	r3, [pc, #20]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b22a:	f023 0207 	bic.w	r2, r3, #7
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b232:	4902      	ldr	r1, [pc, #8]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b234:	4313      	orrs	r3, r2
 800b236:	654b      	str	r3, [r1, #84]	; 0x54
 800b238:	e008      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b23a:	bf00      	nop
 800b23c:	58024400 	.word	0x58024400
 800b240:	58024800 	.word	0x58024800
 800b244:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b248:	7dfb      	ldrb	r3, [r7, #23]
 800b24a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 0304 	and.w	r3, r3, #4
 800b254:	2b00      	cmp	r3, #0
 800b256:	d039      	beq.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b25e:	2b05      	cmp	r3, #5
 800b260:	d820      	bhi.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800b262:	a201      	add	r2, pc, #4	; (adr r2, 800b268 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800b264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b268:	0800b2ab 	.word	0x0800b2ab
 800b26c:	0800b281 	.word	0x0800b281
 800b270:	0800b293 	.word	0x0800b293
 800b274:	0800b2ab 	.word	0x0800b2ab
 800b278:	0800b2ab 	.word	0x0800b2ab
 800b27c:	0800b2ab 	.word	0x0800b2ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	3304      	adds	r3, #4
 800b284:	2101      	movs	r1, #1
 800b286:	4618      	mov	r0, r3
 800b288:	f001 fb94 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b28c:	4603      	mov	r3, r0
 800b28e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b290:	e00c      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	3324      	adds	r3, #36	; 0x24
 800b296:	2101      	movs	r1, #1
 800b298:	4618      	mov	r0, r3
 800b29a:	f001 fc3d 	bl	800cb18 <RCCEx_PLL3_Config>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b2a2:	e003      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	75fb      	strb	r3, [r7, #23]
      break;
 800b2a8:	e000      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800b2aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2ac:	7dfb      	ldrb	r3, [r7, #23]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d10a      	bne.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b2b2:	4bb7      	ldr	r3, [pc, #732]	; (800b590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2b6:	f023 0207 	bic.w	r2, r3, #7
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2c0:	49b3      	ldr	r1, [pc, #716]	; (800b590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	658b      	str	r3, [r1, #88]	; 0x58
 800b2c6:	e001      	b.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2c8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 0320 	and.w	r3, r3, #32
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d04b      	beq.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2e2:	d02e      	beq.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800b2e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2e8:	d828      	bhi.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b2ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2ee:	d02a      	beq.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b2f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2f4:	d822      	bhi.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b2f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2fa:	d026      	beq.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b2fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b300:	d81c      	bhi.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b306:	d010      	beq.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b30c:	d816      	bhi.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d01d      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b316:	d111      	bne.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	3304      	adds	r3, #4
 800b31c:	2100      	movs	r1, #0
 800b31e:	4618      	mov	r0, r3
 800b320:	f001 fb48 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b324:	4603      	mov	r3, r0
 800b326:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b328:	e012      	b.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	3324      	adds	r3, #36	; 0x24
 800b32e:	2102      	movs	r1, #2
 800b330:	4618      	mov	r0, r3
 800b332:	f001 fbf1 	bl	800cb18 <RCCEx_PLL3_Config>
 800b336:	4603      	mov	r3, r0
 800b338:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b33a:	e009      	b.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	75fb      	strb	r3, [r7, #23]
      break;
 800b340:	e006      	b.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b342:	bf00      	nop
 800b344:	e004      	b.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b346:	bf00      	nop
 800b348:	e002      	b.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b34a:	bf00      	nop
 800b34c:	e000      	b.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b34e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b350:	7dfb      	ldrb	r3, [r7, #23]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10a      	bne.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b356:	4b8e      	ldr	r3, [pc, #568]	; (800b590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b35a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b364:	498a      	ldr	r1, [pc, #552]	; (800b590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b366:	4313      	orrs	r3, r2
 800b368:	654b      	str	r3, [r1, #84]	; 0x54
 800b36a:	e001      	b.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b36c:	7dfb      	ldrb	r3, [r7, #23]
 800b36e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d04b      	beq.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b382:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b386:	d02e      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800b388:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b38c:	d828      	bhi.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b38e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b392:	d02a      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b398:	d822      	bhi.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b39a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b39e:	d026      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b3a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b3a4:	d81c      	bhi.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b3a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3aa:	d010      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800b3ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3b0:	d816      	bhi.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d01d      	beq.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b3b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3ba:	d111      	bne.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	3304      	adds	r3, #4
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f001 faf6 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b3cc:	e012      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	3324      	adds	r3, #36	; 0x24
 800b3d2:	2102      	movs	r1, #2
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f001 fb9f 	bl	800cb18 <RCCEx_PLL3_Config>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b3de:	e009      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	75fb      	strb	r3, [r7, #23]
      break;
 800b3e4:	e006      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b3e6:	bf00      	nop
 800b3e8:	e004      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b3ea:	bf00      	nop
 800b3ec:	e002      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b3ee:	bf00      	nop
 800b3f0:	e000      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b3f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d10a      	bne.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b3fa:	4b65      	ldr	r3, [pc, #404]	; (800b590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b3fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b408:	4961      	ldr	r1, [pc, #388]	; (800b590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b40a:	4313      	orrs	r3, r2
 800b40c:	658b      	str	r3, [r1, #88]	; 0x58
 800b40e:	e001      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b410:	7dfb      	ldrb	r3, [r7, #23]
 800b412:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d04b      	beq.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b426:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b42a:	d02e      	beq.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800b42c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b430:	d828      	bhi.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b436:	d02a      	beq.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800b438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b43c:	d822      	bhi.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b43e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b442:	d026      	beq.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b444:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b448:	d81c      	bhi.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b44a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b44e:	d010      	beq.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800b450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b454:	d816      	bhi.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b456:	2b00      	cmp	r3, #0
 800b458:	d01d      	beq.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b45a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b45e:	d111      	bne.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	3304      	adds	r3, #4
 800b464:	2100      	movs	r1, #0
 800b466:	4618      	mov	r0, r3
 800b468:	f001 faa4 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b46c:	4603      	mov	r3, r0
 800b46e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b470:	e012      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	3324      	adds	r3, #36	; 0x24
 800b476:	2102      	movs	r1, #2
 800b478:	4618      	mov	r0, r3
 800b47a:	f001 fb4d 	bl	800cb18 <RCCEx_PLL3_Config>
 800b47e:	4603      	mov	r3, r0
 800b480:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b482:	e009      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	75fb      	strb	r3, [r7, #23]
      break;
 800b488:	e006      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b48a:	bf00      	nop
 800b48c:	e004      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b48e:	bf00      	nop
 800b490:	e002      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b492:	bf00      	nop
 800b494:	e000      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b496:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b498:	7dfb      	ldrb	r3, [r7, #23]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10a      	bne.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b49e:	4b3c      	ldr	r3, [pc, #240]	; (800b590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b4a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b4ac:	4938      	ldr	r1, [pc, #224]	; (800b590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	658b      	str	r3, [r1, #88]	; 0x58
 800b4b2:	e001      	b.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4b4:	7dfb      	ldrb	r3, [r7, #23]
 800b4b6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f003 0308 	and.w	r3, r3, #8
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d01a      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ce:	d10a      	bne.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	3324      	adds	r3, #36	; 0x24
 800b4d4:	2102      	movs	r1, #2
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f001 fb1e 	bl	800cb18 <RCCEx_PLL3_Config>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d001      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b4e6:	4b2a      	ldr	r3, [pc, #168]	; (800b590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4f4:	4926      	ldr	r1, [pc, #152]	; (800b590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f003 0310 	and.w	r3, r3, #16
 800b502:	2b00      	cmp	r3, #0
 800b504:	d01a      	beq.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b50c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b510:	d10a      	bne.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	3324      	adds	r3, #36	; 0x24
 800b516:	2102      	movs	r1, #2
 800b518:	4618      	mov	r0, r3
 800b51a:	f001 fafd 	bl	800cb18 <RCCEx_PLL3_Config>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b528:	4b19      	ldr	r3, [pc, #100]	; (800b590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b52a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b52c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b536:	4916      	ldr	r1, [pc, #88]	; (800b590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b538:	4313      	orrs	r3, r2
 800b53a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b544:	2b00      	cmp	r3, #0
 800b546:	d036      	beq.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b54e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b552:	d01f      	beq.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b558:	d817      	bhi.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800b55e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b562:	d009      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800b564:	e011      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	3304      	adds	r3, #4
 800b56a:	2100      	movs	r1, #0
 800b56c:	4618      	mov	r0, r3
 800b56e:	f001 fa21 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b572:	4603      	mov	r3, r0
 800b574:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b576:	e00e      	b.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3324      	adds	r3, #36	; 0x24
 800b57c:	2102      	movs	r1, #2
 800b57e:	4618      	mov	r0, r3
 800b580:	f001 faca 	bl	800cb18 <RCCEx_PLL3_Config>
 800b584:	4603      	mov	r3, r0
 800b586:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b588:	e005      	b.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	75fb      	strb	r3, [r7, #23]
      break;
 800b58e:	e002      	b.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800b590:	58024400 	.word	0x58024400
      break;
 800b594:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b596:	7dfb      	ldrb	r3, [r7, #23]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d10a      	bne.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b59c:	4b93      	ldr	r3, [pc, #588]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b5aa:	4990      	ldr	r1, [pc, #576]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	658b      	str	r3, [r1, #88]	; 0x58
 800b5b0:	e001      	b.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5b2:	7dfb      	ldrb	r3, [r7, #23]
 800b5b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d033      	beq.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b5cc:	d01c      	beq.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800b5ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b5d2:	d816      	bhi.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800b5d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5d8:	d003      	beq.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800b5da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5de:	d007      	beq.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800b5e0:	e00f      	b.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5e2:	4b82      	ldr	r3, [pc, #520]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e6:	4a81      	ldr	r2, [pc, #516]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b5ee:	e00c      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	3324      	adds	r3, #36	; 0x24
 800b5f4:	2101      	movs	r1, #1
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f001 fa8e 	bl	800cb18 <RCCEx_PLL3_Config>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b600:	e003      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	75fb      	strb	r3, [r7, #23]
      break;
 800b606:	e000      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800b608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10a      	bne.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b610:	4b76      	ldr	r3, [pc, #472]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b61e:	4973      	ldr	r1, [pc, #460]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b620:	4313      	orrs	r3, r2
 800b622:	654b      	str	r3, [r1, #84]	; 0x54
 800b624:	e001      	b.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b626:	7dfb      	ldrb	r3, [r7, #23]
 800b628:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b632:	2b00      	cmp	r3, #0
 800b634:	d029      	beq.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d003      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800b63e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b642:	d007      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800b644:	e00f      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b646:	4b69      	ldr	r3, [pc, #420]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64a:	4a68      	ldr	r2, [pc, #416]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b64c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b650:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b652:	e00b      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	3304      	adds	r3, #4
 800b658:	2102      	movs	r1, #2
 800b65a:	4618      	mov	r0, r3
 800b65c:	f001 f9aa 	bl	800c9b4 <RCCEx_PLL2_Config>
 800b660:	4603      	mov	r3, r0
 800b662:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b664:	e002      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	75fb      	strb	r3, [r7, #23]
      break;
 800b66a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b66c:	7dfb      	ldrb	r3, [r7, #23]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d109      	bne.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b672:	4b5e      	ldr	r3, [pc, #376]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b676:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b67e:	495b      	ldr	r1, [pc, #364]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b680:	4313      	orrs	r3, r2
 800b682:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b684:	e001      	b.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b686:	7dfb      	ldrb	r3, [r7, #23]
 800b688:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00a      	beq.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	3324      	adds	r3, #36	; 0x24
 800b69a:	2102      	movs	r1, #2
 800b69c:	4618      	mov	r0, r3
 800b69e:	f001 fa3b 	bl	800cb18 <RCCEx_PLL3_Config>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d030      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6c0:	d017      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800b6c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6c6:	d811      	bhi.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b6c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6cc:	d013      	beq.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b6ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6d2:	d80b      	bhi.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d010      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b6d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6dc:	d106      	bne.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6de:	4b43      	ldr	r3, [pc, #268]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e2:	4a42      	ldr	r2, [pc, #264]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b6e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b6ea:	e007      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	75fb      	strb	r3, [r7, #23]
      break;
 800b6f0:	e004      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b6f2:	bf00      	nop
 800b6f4:	e002      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b6f6:	bf00      	nop
 800b6f8:	e000      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b6fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6fc:	7dfb      	ldrb	r3, [r7, #23]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d109      	bne.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b702:	4b3a      	ldr	r3, [pc, #232]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b706:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b70e:	4937      	ldr	r1, [pc, #220]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b710:	4313      	orrs	r3, r2
 800b712:	654b      	str	r3, [r1, #84]	; 0x54
 800b714:	e001      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b716:	7dfb      	ldrb	r3, [r7, #23]
 800b718:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b722:	2b00      	cmp	r3, #0
 800b724:	d008      	beq.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b726:	4b31      	ldr	r3, [pc, #196]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b72a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b732:	492e      	ldr	r1, [pc, #184]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b734:	4313      	orrs	r3, r2
 800b736:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b740:	2b00      	cmp	r3, #0
 800b742:	d009      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b744:	4b29      	ldr	r3, [pc, #164]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b746:	691b      	ldr	r3, [r3, #16]
 800b748:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b752:	4926      	ldr	r1, [pc, #152]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b754:	4313      	orrs	r3, r2
 800b756:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b760:	2b00      	cmp	r3, #0
 800b762:	d008      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b764:	4b21      	ldr	r3, [pc, #132]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b768:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b770:	491e      	ldr	r1, [pc, #120]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b772:	4313      	orrs	r3, r2
 800b774:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00d      	beq.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b782:	4b1a      	ldr	r3, [pc, #104]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	4a19      	ldr	r2, [pc, #100]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b788:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b78c:	6113      	str	r3, [r2, #16]
 800b78e:	4b17      	ldr	r3, [pc, #92]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b790:	691a      	ldr	r2, [r3, #16]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b798:	4914      	ldr	r1, [pc, #80]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b79a:	4313      	orrs	r3, r2
 800b79c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	da08      	bge.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b7a6:	4b11      	ldr	r3, [pc, #68]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7b2:	490e      	ldr	r1, [pc, #56]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d009      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b7c4:	4b09      	ldr	r3, [pc, #36]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7d2:	4906      	ldr	r1, [pc, #24]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b7d8:	7dbb      	ldrb	r3, [r7, #22]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d101      	bne.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e000      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3718      	adds	r7, #24
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	58024400 	.word	0x58024400

0800b7f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b090      	sub	sp, #64	; 0x40
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7fe:	f040 8095 	bne.w	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b802:	4bae      	ldr	r3, [pc, #696]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b806:	f003 0307 	and.w	r3, r3, #7
 800b80a:	633b      	str	r3, [r7, #48]	; 0x30
 800b80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80e:	2b04      	cmp	r3, #4
 800b810:	f200 8088 	bhi.w	800b924 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b814:	a201      	add	r2, pc, #4	; (adr r2, 800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800b816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b81a:	bf00      	nop
 800b81c:	0800b831 	.word	0x0800b831
 800b820:	0800b859 	.word	0x0800b859
 800b824:	0800b881 	.word	0x0800b881
 800b828:	0800b91d 	.word	0x0800b91d
 800b82c:	0800b8a9 	.word	0x0800b8a9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b830:	4ba2      	ldr	r3, [pc, #648]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b838:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b83c:	d108      	bne.n	800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b83e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b842:	4618      	mov	r0, r3
 800b844:	f000 ff64 	bl	800c710 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800b848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b84c:	f000 bc95 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b850:	2300      	movs	r3, #0
 800b852:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b854:	f000 bc91 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b858:	4b98      	ldr	r3, [pc, #608]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b864:	d108      	bne.n	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b866:	f107 0318 	add.w	r3, r7, #24
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 fca8 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b874:	f000 bc81 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b878:	2300      	movs	r3, #0
 800b87a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b87c:	f000 bc7d 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b880:	4b8e      	ldr	r3, [pc, #568]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b88c:	d108      	bne.n	800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b88e:	f107 030c 	add.w	r3, r7, #12
 800b892:	4618      	mov	r0, r3
 800b894:	f000 fde8 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b89c:	f000 bc6d 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8a4:	f000 bc69 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b8a8:	4b84      	ldr	r3, [pc, #528]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b8b0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8b2:	4b82      	ldr	r3, [pc, #520]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f003 0304 	and.w	r3, r3, #4
 800b8ba:	2b04      	cmp	r3, #4
 800b8bc:	d10c      	bne.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800b8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d109      	bne.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b8c4:	4b7d      	ldr	r3, [pc, #500]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	08db      	lsrs	r3, r3, #3
 800b8ca:	f003 0303 	and.w	r3, r3, #3
 800b8ce:	4a7c      	ldr	r2, [pc, #496]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800b8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8d6:	e01f      	b.n	800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8d8:	4b78      	ldr	r3, [pc, #480]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8e4:	d106      	bne.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8ec:	d102      	bne.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b8ee:	4b75      	ldr	r3, [pc, #468]	; (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800b8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8f2:	e011      	b.n	800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8f4:	4b71      	ldr	r3, [pc, #452]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b900:	d106      	bne.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800b902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b908:	d102      	bne.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b90a:	4b6f      	ldr	r3, [pc, #444]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b90c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b90e:	e003      	b.n	800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b910:	2300      	movs	r3, #0
 800b912:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b914:	f000 bc31 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b918:	f000 bc2f 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b91c:	4b6b      	ldr	r3, [pc, #428]	; (800bacc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b91e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b920:	f000 bc2b 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b924:	2300      	movs	r3, #0
 800b926:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b928:	f000 bc27 	b.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b932:	f040 8095 	bne.w	800ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b936:	4b61      	ldr	r3, [pc, #388]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b93a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b93e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b946:	d04d      	beq.n	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800b948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b94e:	f200 8084 	bhi.w	800ba5a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b954:	2bc0      	cmp	r3, #192	; 0xc0
 800b956:	d07d      	beq.n	800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95a:	2bc0      	cmp	r3, #192	; 0xc0
 800b95c:	d87d      	bhi.n	800ba5a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	2b80      	cmp	r3, #128	; 0x80
 800b962:	d02d      	beq.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	2b80      	cmp	r3, #128	; 0x80
 800b968:	d877      	bhi.n	800ba5a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d003      	beq.n	800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800b970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b972:	2b40      	cmp	r3, #64	; 0x40
 800b974:	d012      	beq.n	800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800b976:	e070      	b.n	800ba5a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b978:	4b50      	ldr	r3, [pc, #320]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b980:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b984:	d107      	bne.n	800b996 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b98a:	4618      	mov	r0, r3
 800b98c:	f000 fec0 	bl	800c710 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b992:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b994:	e3f1      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b996:	2300      	movs	r3, #0
 800b998:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b99a:	e3ee      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b99c:	4b47      	ldr	r3, [pc, #284]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9a8:	d107      	bne.n	800b9ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9aa:	f107 0318 	add.w	r3, r7, #24
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 fc06 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b9b8:	e3df      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9be:	e3dc      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9c0:	4b3e      	ldr	r3, [pc, #248]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9cc:	d107      	bne.n	800b9de <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9ce:	f107 030c 	add.w	r3, r7, #12
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f000 fd48 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b9dc:	e3cd      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9e2:	e3ca      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b9e4:	4b35      	ldr	r3, [pc, #212]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b9e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b9ec:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9ee:	4b33      	ldr	r3, [pc, #204]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 0304 	and.w	r3, r3, #4
 800b9f6:	2b04      	cmp	r3, #4
 800b9f8:	d10c      	bne.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800b9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d109      	bne.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba00:	4b2e      	ldr	r3, [pc, #184]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	08db      	lsrs	r3, r3, #3
 800ba06:	f003 0303 	and.w	r3, r3, #3
 800ba0a:	4a2d      	ldr	r2, [pc, #180]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800ba0c:	fa22 f303 	lsr.w	r3, r2, r3
 800ba10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba12:	e01e      	b.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ba14:	4b29      	ldr	r3, [pc, #164]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba20:	d106      	bne.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800ba22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba28:	d102      	bne.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ba2a:	4b26      	ldr	r3, [pc, #152]	; (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800ba2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba2e:	e010      	b.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba30:	4b22      	ldr	r3, [pc, #136]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba3c:	d106      	bne.n	800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800ba3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba44:	d102      	bne.n	800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ba46:	4b20      	ldr	r3, [pc, #128]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800ba48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba4a:	e002      	b.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ba50:	e393      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ba52:	e392      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ba54:	4b1d      	ldr	r3, [pc, #116]	; (800bacc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800ba56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba58:	e38f      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba5e:	e38c      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba66:	f040 80a7 	bne.w	800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800ba6a:	4b14      	ldr	r3, [pc, #80]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ba6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba6e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ba72:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ba74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba7a:	d05f      	beq.n	800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba82:	f200 8096 	bhi.w	800bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ba8c:	f000 808e 	beq.w	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ba96:	f200 808c 	bhi.w	800bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800ba9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800baa0:	d03a      	beq.n	800bb18 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800baa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800baa8:	f200 8083 	bhi.w	800bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800baac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00e      	beq.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800bab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bab8:	d01c      	beq.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800baba:	e07a      	b.n	800bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800babc:	58024400 	.word	0x58024400
 800bac0:	03d09000 	.word	0x03d09000
 800bac4:	003d0900 	.word	0x003d0900
 800bac8:	017d7840 	.word	0x017d7840
 800bacc:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bad0:	4baa      	ldr	r3, [pc, #680]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bad8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800badc:	d107      	bne.n	800baee <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bae2:	4618      	mov	r0, r3
 800bae4:	f000 fe14 	bl	800c710 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800baec:	e345      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800baf2:	e342      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800baf4:	4ba1      	ldr	r3, [pc, #644]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bafc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb00:	d107      	bne.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb02:	f107 0318 	add.w	r3, r7, #24
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 fb5a 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bb10:	e333      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb16:	e330      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb18:	4b98      	ldr	r3, [pc, #608]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb24:	d107      	bne.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb26:	f107 030c 	add.w	r3, r7, #12
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f000 fc9c 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bb34:	e321      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bb36:	2300      	movs	r3, #0
 800bb38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb3a:	e31e      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bb3c:	4b8f      	ldr	r3, [pc, #572]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb44:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb46:	4b8d      	ldr	r3, [pc, #564]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f003 0304 	and.w	r3, r3, #4
 800bb4e:	2b04      	cmp	r3, #4
 800bb50:	d10c      	bne.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800bb52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d109      	bne.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb58:	4b88      	ldr	r3, [pc, #544]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	08db      	lsrs	r3, r3, #3
 800bb5e:	f003 0303 	and.w	r3, r3, #3
 800bb62:	4a87      	ldr	r2, [pc, #540]	; (800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bb64:	fa22 f303 	lsr.w	r3, r2, r3
 800bb68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb6a:	e01e      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb6c:	4b83      	ldr	r3, [pc, #524]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb78:	d106      	bne.n	800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800bb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb80:	d102      	bne.n	800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bb82:	4b80      	ldr	r3, [pc, #512]	; (800bd84 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800bb84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb86:	e010      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb88:	4b7c      	ldr	r3, [pc, #496]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb94:	d106      	bne.n	800bba4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800bb96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb9c:	d102      	bne.n	800bba4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bb9e:	4b7a      	ldr	r3, [pc, #488]	; (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bba2:	e002      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bba4:	2300      	movs	r3, #0
 800bba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bba8:	e2e7      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bbaa:	e2e6      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bbac:	4b77      	ldr	r3, [pc, #476]	; (800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800bbae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbb0:	e2e3      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbb6:	e2e0      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbbe:	f040 809c 	bne.w	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800bbc2:	4b6e      	ldr	r3, [pc, #440]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bbc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbc6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bbca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bbd2:	d054      	beq.n	800bc7e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800bbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bbda:	f200 808b 	bhi.w	800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800bbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bbe4:	f000 8083 	beq.w	800bcee <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800bbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bbee:	f200 8081 	bhi.w	800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800bbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbf8:	d02f      	beq.n	800bc5a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc00:	d878      	bhi.n	800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d004      	beq.n	800bc12 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800bc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc0e:	d012      	beq.n	800bc36 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800bc10:	e070      	b.n	800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc12:	4b5a      	ldr	r3, [pc, #360]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc1e:	d107      	bne.n	800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc24:	4618      	mov	r0, r3
 800bc26:	f000 fd73 	bl	800c710 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bc2e:	e2a4      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bc30:	2300      	movs	r3, #0
 800bc32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc34:	e2a1      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc36:	4b51      	ldr	r3, [pc, #324]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc42:	d107      	bne.n	800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc44:	f107 0318 	add.w	r3, r7, #24
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f000 fab9 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800bc52:	e292      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bc54:	2300      	movs	r3, #0
 800bc56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc58:	e28f      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc5a:	4b48      	ldr	r3, [pc, #288]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc66:	d107      	bne.n	800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc68:	f107 030c 	add.w	r3, r7, #12
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f000 fbfb 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bc76:	e280      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc7c:	e27d      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bc7e:	4b3f      	ldr	r3, [pc, #252]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bc80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc86:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc88:	4b3c      	ldr	r3, [pc, #240]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f003 0304 	and.w	r3, r3, #4
 800bc90:	2b04      	cmp	r3, #4
 800bc92:	d10c      	bne.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800bc94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d109      	bne.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc9a:	4b38      	ldr	r3, [pc, #224]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	08db      	lsrs	r3, r3, #3
 800bca0:	f003 0303 	and.w	r3, r3, #3
 800bca4:	4a36      	ldr	r2, [pc, #216]	; (800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bca6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcac:	e01e      	b.n	800bcec <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bcae:	4b33      	ldr	r3, [pc, #204]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcba:	d106      	bne.n	800bcca <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800bcbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcc2:	d102      	bne.n	800bcca <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bcc4:	4b2f      	ldr	r3, [pc, #188]	; (800bd84 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800bcc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcc8:	e010      	b.n	800bcec <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bcca:	4b2c      	ldr	r3, [pc, #176]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcd6:	d106      	bne.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800bcd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcde:	d102      	bne.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bce0:	4b29      	ldr	r3, [pc, #164]	; (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bce4:	e002      	b.n	800bcec <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bcea:	e246      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bcec:	e245      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bcee:	4b27      	ldr	r3, [pc, #156]	; (800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800bcf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcf2:	e242      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcf8:	e23f      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd00:	f040 80a8 	bne.w	800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800bd04:	4b1d      	ldr	r3, [pc, #116]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bd06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd08:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bd0c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd14:	d060      	beq.n	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800bd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd1c:	f200 8097 	bhi.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800bd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bd26:	f000 808f 	beq.w	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bd30:	f200 808d 	bhi.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800bd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd3a:	d03b      	beq.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800bd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd42:	f200 8084 	bhi.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800bd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d004      	beq.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800bd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd52:	d01d      	beq.n	800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800bd54:	e07b      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd56:	4b09      	ldr	r3, [pc, #36]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd62:	d107      	bne.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f000 fcd1 	bl	800c710 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bd72:	e202      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bd74:	2300      	movs	r3, #0
 800bd76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd78:	e1ff      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd7a:	bf00      	nop
 800bd7c:	58024400 	.word	0x58024400
 800bd80:	03d09000 	.word	0x03d09000
 800bd84:	003d0900 	.word	0x003d0900
 800bd88:	017d7840 	.word	0x017d7840
 800bd8c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd90:	4ba3      	ldr	r3, [pc, #652]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd9c:	d107      	bne.n	800bdae <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd9e:	f107 0318 	add.w	r3, r7, #24
 800bda2:	4618      	mov	r0, r3
 800bda4:	f000 fa0c 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bda8:	69bb      	ldr	r3, [r7, #24]
 800bdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bdac:	e1e5      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdb2:	e1e2      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bdb4:	4b9a      	ldr	r3, [pc, #616]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdc0:	d107      	bne.n	800bdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdc2:	f107 030c 	add.w	r3, r7, #12
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f000 fb4e 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bdd0:	e1d3      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdd6:	e1d0      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bdd8:	4b91      	ldr	r3, [pc, #580]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bdda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bddc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bde0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bde2:	4b8f      	ldr	r3, [pc, #572]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f003 0304 	and.w	r3, r3, #4
 800bdea:	2b04      	cmp	r3, #4
 800bdec:	d10c      	bne.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800bdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d109      	bne.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bdf4:	4b8a      	ldr	r3, [pc, #552]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	08db      	lsrs	r3, r3, #3
 800bdfa:	f003 0303 	and.w	r3, r3, #3
 800bdfe:	4a89      	ldr	r2, [pc, #548]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800be00:	fa22 f303 	lsr.w	r3, r2, r3
 800be04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be06:	e01e      	b.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be08:	4b85      	ldr	r3, [pc, #532]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be14:	d106      	bne.n	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800be16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be1c:	d102      	bne.n	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800be1e:	4b82      	ldr	r3, [pc, #520]	; (800c028 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800be20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be22:	e010      	b.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be24:	4b7e      	ldr	r3, [pc, #504]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be30:	d106      	bne.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800be32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be38:	d102      	bne.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800be3a:	4b7c      	ldr	r3, [pc, #496]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800be3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be3e:	e002      	b.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800be40:	2300      	movs	r3, #0
 800be42:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800be44:	e199      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be46:	e198      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800be48:	4b79      	ldr	r3, [pc, #484]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800be4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be4c:	e195      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800be4e:	2300      	movs	r3, #0
 800be50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be52:	e192      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800be5a:	d173      	bne.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800be5c:	4b70      	ldr	r3, [pc, #448]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800be5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800be64:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800be66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be6c:	d02f      	beq.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800be6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be74:	d863      	bhi.n	800bf3e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800be76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d004      	beq.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800be7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be82:	d012      	beq.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800be84:	e05b      	b.n	800bf3e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be86:	4b66      	ldr	r3, [pc, #408]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be92:	d107      	bne.n	800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be94:	f107 0318 	add.w	r3, r7, #24
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 f991 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bea2:	e16a      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bea4:	2300      	movs	r3, #0
 800bea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bea8:	e167      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800beaa:	4b5d      	ldr	r3, [pc, #372]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beb6:	d107      	bne.n	800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beb8:	f107 030c 	add.w	r3, r7, #12
 800bebc:	4618      	mov	r0, r3
 800bebe:	f000 fad3 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bec6:	e158      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bec8:	2300      	movs	r3, #0
 800beca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800becc:	e155      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bece:	4b54      	ldr	r3, [pc, #336]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bed2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bed6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bed8:	4b51      	ldr	r3, [pc, #324]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f003 0304 	and.w	r3, r3, #4
 800bee0:	2b04      	cmp	r3, #4
 800bee2:	d10c      	bne.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800bee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d109      	bne.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800beea:	4b4d      	ldr	r3, [pc, #308]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	08db      	lsrs	r3, r3, #3
 800bef0:	f003 0303 	and.w	r3, r3, #3
 800bef4:	4a4b      	ldr	r2, [pc, #300]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bef6:	fa22 f303 	lsr.w	r3, r2, r3
 800befa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800befc:	e01e      	b.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800befe:	4b48      	ldr	r3, [pc, #288]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf0a:	d106      	bne.n	800bf1a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800bf0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf12:	d102      	bne.n	800bf1a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bf14:	4b44      	ldr	r3, [pc, #272]	; (800c028 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800bf16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf18:	e010      	b.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf1a:	4b41      	ldr	r3, [pc, #260]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf26:	d106      	bne.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800bf28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf2e:	d102      	bne.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bf30:	4b3e      	ldr	r3, [pc, #248]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bf32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf34:	e002      	b.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bf36:	2300      	movs	r3, #0
 800bf38:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bf3a:	e11e      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf3c:	e11d      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf42:	e11a      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf4a:	d133      	bne.n	800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800bf4c:	4b34      	ldr	r3, [pc, #208]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bf4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf54:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d004      	beq.n	800bf66 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800bf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf62:	d012      	beq.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800bf64:	e023      	b.n	800bfae <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf66:	4b2e      	ldr	r3, [pc, #184]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf72:	d107      	bne.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 fbc9 	bl	800c710 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bf82:	e0fa      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf84:	2300      	movs	r3, #0
 800bf86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf88:	e0f7      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf8a:	4b25      	ldr	r3, [pc, #148]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf96:	d107      	bne.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf98:	f107 0318 	add.w	r3, r7, #24
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f000 f90f 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bfa2:	6a3b      	ldr	r3, [r7, #32]
 800bfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bfa6:	e0e8      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfac:	e0e5      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfb2:	e0e2      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfba:	f040 808f 	bne.w	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800bfbe:	4b18      	ldr	r3, [pc, #96]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bfc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfc2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bfc6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfce:	d075      	beq.n	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800bfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfd6:	d87e      	bhi.n	800c0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800bfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfde:	d060      	beq.n	800c0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfe6:	d876      	bhi.n	800c0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800bfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bfee:	d045      	beq.n	800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800bff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bff6:	d86e      	bhi.n	800c0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800bff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bffe:	d02b      	beq.n	800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800c000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c006:	d866      	bhi.n	800c0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800c008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d004      	beq.n	800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800c00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c010:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c014:	d00e      	beq.n	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800c016:	e05e      	b.n	800c0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c018:	f000 f8bc 	bl	800c194 <HAL_RCCEx_GetD3PCLK1Freq>
 800c01c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800c01e:	e0ac      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c020:	58024400 	.word	0x58024400
 800c024:	03d09000 	.word	0x03d09000
 800c028:	003d0900 	.word	0x003d0900
 800c02c:	017d7840 	.word	0x017d7840
 800c030:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c034:	4b53      	ldr	r3, [pc, #332]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c03c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c040:	d107      	bne.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c042:	f107 0318 	add.w	r3, r7, #24
 800c046:	4618      	mov	r0, r3
 800c048:	f000 f8ba 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c050:	e093      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c052:	2300      	movs	r3, #0
 800c054:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c056:	e090      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c058:	4b4a      	ldr	r3, [pc, #296]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c064:	d107      	bne.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c066:	f107 030c 	add.w	r3, r7, #12
 800c06a:	4618      	mov	r0, r3
 800c06c:	f000 f9fc 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c074:	e081      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c076:	2300      	movs	r3, #0
 800c078:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c07a:	e07e      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c07c:	4b41      	ldr	r3, [pc, #260]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f003 0304 	and.w	r3, r3, #4
 800c084:	2b04      	cmp	r3, #4
 800c086:	d109      	bne.n	800c09c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c088:	4b3e      	ldr	r3, [pc, #248]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	08db      	lsrs	r3, r3, #3
 800c08e:	f003 0303 	and.w	r3, r3, #3
 800c092:	4a3d      	ldr	r2, [pc, #244]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c094:	fa22 f303 	lsr.w	r3, r2, r3
 800c098:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c09a:	e06e      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0a0:	e06b      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c0a2:	4b38      	ldr	r3, [pc, #224]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0ae:	d102      	bne.n	800c0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800c0b0:	4b36      	ldr	r3, [pc, #216]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c0b4:	e061      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0ba:	e05e      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c0bc:	4b31      	ldr	r3, [pc, #196]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0c8:	d102      	bne.n	800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800c0ca:	4b31      	ldr	r3, [pc, #196]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c0ce:	e054      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0d4:	e051      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0da:	e04e      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0e2:	d148      	bne.n	800c176 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800c0e4:	4b27      	ldr	r3, [pc, #156]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c0e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0f4:	d02a      	beq.n	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0fc:	d838      	bhi.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c100:	2b00      	cmp	r3, #0
 800c102:	d004      	beq.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c10a:	d00d      	beq.n	800c128 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c10c:	e030      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c10e:	4b1d      	ldr	r3, [pc, #116]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c11a:	d102      	bne.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800c11c:	4b1c      	ldr	r3, [pc, #112]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c11e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c120:	e02b      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c126:	e028      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c128:	4b16      	ldr	r3, [pc, #88]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c134:	d107      	bne.n	800c146 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 fae8 	bl	800c710 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c144:	e019      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c146:	2300      	movs	r3, #0
 800c148:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c14a:	e016      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c14c:	4b0d      	ldr	r3, [pc, #52]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c158:	d107      	bne.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c15a:	f107 0318 	add.w	r3, r7, #24
 800c15e:	4618      	mov	r0, r3
 800c160:	f000 f82e 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c168:	e007      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c16a:	2300      	movs	r3, #0
 800c16c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c16e:	e004      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c170:	2300      	movs	r3, #0
 800c172:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c174:	e001      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800c176:	2300      	movs	r3, #0
 800c178:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800c17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3740      	adds	r7, #64	; 0x40
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}
 800c184:	58024400 	.word	0x58024400
 800c188:	03d09000 	.word	0x03d09000
 800c18c:	003d0900 	.word	0x003d0900
 800c190:	017d7840 	.word	0x017d7840

0800c194 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c198:	f7fe fb8e 	bl	800a8b8 <HAL_RCC_GetHCLKFreq>
 800c19c:	4602      	mov	r2, r0
 800c19e:	4b06      	ldr	r3, [pc, #24]	; (800c1b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	091b      	lsrs	r3, r3, #4
 800c1a4:	f003 0307 	and.w	r3, r3, #7
 800c1a8:	4904      	ldr	r1, [pc, #16]	; (800c1bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c1aa:	5ccb      	ldrb	r3, [r1, r3]
 800c1ac:	f003 031f 	and.w	r3, r3, #31
 800c1b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	58024400 	.word	0x58024400
 800c1bc:	08028c7c 	.word	0x08028c7c

0800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b089      	sub	sp, #36	; 0x24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c1c8:	4ba1      	ldr	r3, [pc, #644]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1cc:	f003 0303 	and.w	r3, r3, #3
 800c1d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c1d2:	4b9f      	ldr	r3, [pc, #636]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d6:	0b1b      	lsrs	r3, r3, #12
 800c1d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c1de:	4b9c      	ldr	r3, [pc, #624]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e2:	091b      	lsrs	r3, r3, #4
 800c1e4:	f003 0301 	and.w	r3, r3, #1
 800c1e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c1ea:	4b99      	ldr	r3, [pc, #612]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ee:	08db      	lsrs	r3, r3, #3
 800c1f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1f4:	693a      	ldr	r2, [r7, #16]
 800c1f6:	fb02 f303 	mul.w	r3, r2, r3
 800c1fa:	ee07 3a90 	vmov	s15, r3
 800c1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c202:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 8111 	beq.w	800c430 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	2b02      	cmp	r3, #2
 800c212:	f000 8083 	beq.w	800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	2b02      	cmp	r3, #2
 800c21a:	f200 80a1 	bhi.w	800c360 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d003      	beq.n	800c22c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	2b01      	cmp	r3, #1
 800c228:	d056      	beq.n	800c2d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c22a:	e099      	b.n	800c360 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c22c:	4b88      	ldr	r3, [pc, #544]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f003 0320 	and.w	r3, r3, #32
 800c234:	2b00      	cmp	r3, #0
 800c236:	d02d      	beq.n	800c294 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c238:	4b85      	ldr	r3, [pc, #532]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	08db      	lsrs	r3, r3, #3
 800c23e:	f003 0303 	and.w	r3, r3, #3
 800c242:	4a84      	ldr	r2, [pc, #528]	; (800c454 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c244:	fa22 f303 	lsr.w	r3, r2, r3
 800c248:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	ee07 3a90 	vmov	s15, r3
 800c250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	ee07 3a90 	vmov	s15, r3
 800c25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c25e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c262:	4b7b      	ldr	r3, [pc, #492]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c26a:	ee07 3a90 	vmov	s15, r3
 800c26e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c272:	ed97 6a03 	vldr	s12, [r7, #12]
 800c276:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c27a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c27e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c28a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c28e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c292:	e087      	b.n	800c3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	ee07 3a90 	vmov	s15, r3
 800c29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c29e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c45c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c2a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2a6:	4b6a      	ldr	r3, [pc, #424]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ae:	ee07 3a90 	vmov	s15, r3
 800c2b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c2d6:	e065      	b.n	800c3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	ee07 3a90 	vmov	s15, r3
 800c2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c460 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c2e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2ea:	4b59      	ldr	r3, [pc, #356]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2f2:	ee07 3a90 	vmov	s15, r3
 800c2f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c30a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c30e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c312:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c316:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c31a:	e043      	b.n	800c3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	ee07 3a90 	vmov	s15, r3
 800c322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c326:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c464 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c32e:	4b48      	ldr	r3, [pc, #288]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c336:	ee07 3a90 	vmov	s15, r3
 800c33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c342:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c34e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c35a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c35e:	e021      	b.n	800c3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	ee07 3a90 	vmov	s15, r3
 800c366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c36a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c460 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c372:	4b37      	ldr	r3, [pc, #220]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c37a:	ee07 3a90 	vmov	s15, r3
 800c37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c382:	ed97 6a03 	vldr	s12, [r7, #12]
 800c386:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c39e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c3a4:	4b2a      	ldr	r3, [pc, #168]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a8:	0a5b      	lsrs	r3, r3, #9
 800c3aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ae:	ee07 3a90 	vmov	s15, r3
 800c3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3be:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3ca:	ee17 2a90 	vmov	r2, s15
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c3d2:	4b1f      	ldr	r3, [pc, #124]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d6:	0c1b      	lsrs	r3, r3, #16
 800c3d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3dc:	ee07 3a90 	vmov	s15, r3
 800c3e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3f8:	ee17 2a90 	vmov	r2, s15
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c400:	4b13      	ldr	r3, [pc, #76]	; (800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c404:	0e1b      	lsrs	r3, r3, #24
 800c406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c40a:	ee07 3a90 	vmov	s15, r3
 800c40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c416:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c41a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c41e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c426:	ee17 2a90 	vmov	r2, s15
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c42e:	e008      	b.n	800c442 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	609a      	str	r2, [r3, #8]
}
 800c442:	bf00      	nop
 800c444:	3724      	adds	r7, #36	; 0x24
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
 800c44e:	bf00      	nop
 800c450:	58024400 	.word	0x58024400
 800c454:	03d09000 	.word	0x03d09000
 800c458:	46000000 	.word	0x46000000
 800c45c:	4c742400 	.word	0x4c742400
 800c460:	4a742400 	.word	0x4a742400
 800c464:	4bbebc20 	.word	0x4bbebc20

0800c468 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c468:	b480      	push	{r7}
 800c46a:	b089      	sub	sp, #36	; 0x24
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c470:	4ba1      	ldr	r3, [pc, #644]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c474:	f003 0303 	and.w	r3, r3, #3
 800c478:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c47a:	4b9f      	ldr	r3, [pc, #636]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c47e:	0d1b      	lsrs	r3, r3, #20
 800c480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c484:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c486:	4b9c      	ldr	r3, [pc, #624]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c48a:	0a1b      	lsrs	r3, r3, #8
 800c48c:	f003 0301 	and.w	r3, r3, #1
 800c490:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c492:	4b99      	ldr	r3, [pc, #612]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c496:	08db      	lsrs	r3, r3, #3
 800c498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	fb02 f303 	mul.w	r3, r2, r3
 800c4a2:	ee07 3a90 	vmov	s15, r3
 800c4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 8111 	beq.w	800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	f000 8083 	beq.w	800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	2b02      	cmp	r3, #2
 800c4c2:	f200 80a1 	bhi.w	800c608 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d003      	beq.n	800c4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c4cc:	69bb      	ldr	r3, [r7, #24]
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d056      	beq.n	800c580 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c4d2:	e099      	b.n	800c608 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4d4:	4b88      	ldr	r3, [pc, #544]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f003 0320 	and.w	r3, r3, #32
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d02d      	beq.n	800c53c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c4e0:	4b85      	ldr	r3, [pc, #532]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	08db      	lsrs	r3, r3, #3
 800c4e6:	f003 0303 	and.w	r3, r3, #3
 800c4ea:	4a84      	ldr	r2, [pc, #528]	; (800c6fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c4ec:	fa22 f303 	lsr.w	r3, r2, r3
 800c4f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	ee07 3a90 	vmov	s15, r3
 800c4f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	ee07 3a90 	vmov	s15, r3
 800c502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c50a:	4b7b      	ldr	r3, [pc, #492]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c512:	ee07 3a90 	vmov	s15, r3
 800c516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c51a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c51e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c52a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c536:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c53a:	e087      	b.n	800c64c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	ee07 3a90 	vmov	s15, r3
 800c542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c546:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c54a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c54e:	4b6a      	ldr	r3, [pc, #424]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c556:	ee07 3a90 	vmov	s15, r3
 800c55a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c55e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c562:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c56a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c56e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c57a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c57e:	e065      	b.n	800c64c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	ee07 3a90 	vmov	s15, r3
 800c586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c58a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c708 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c592:	4b59      	ldr	r3, [pc, #356]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c59a:	ee07 3a90 	vmov	s15, r3
 800c59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5c2:	e043      	b.n	800c64c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	ee07 3a90 	vmov	s15, r3
 800c5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c70c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c5d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5d6:	4b48      	ldr	r3, [pc, #288]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5de:	ee07 3a90 	vmov	s15, r3
 800c5e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c602:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c606:	e021      	b.n	800c64c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c612:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c708 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c61a:	4b37      	ldr	r3, [pc, #220]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c61e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c622:	ee07 3a90 	vmov	s15, r3
 800c626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c62a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c62e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c63a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c63e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c646:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c64a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c64c:	4b2a      	ldr	r3, [pc, #168]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c650:	0a5b      	lsrs	r3, r3, #9
 800c652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c656:	ee07 3a90 	vmov	s15, r3
 800c65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c65e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c662:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c666:	edd7 6a07 	vldr	s13, [r7, #28]
 800c66a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c66e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c672:	ee17 2a90 	vmov	r2, s15
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c67a:	4b1f      	ldr	r3, [pc, #124]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c67e:	0c1b      	lsrs	r3, r3, #16
 800c680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c684:	ee07 3a90 	vmov	s15, r3
 800c688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c68c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c690:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c694:	edd7 6a07 	vldr	s13, [r7, #28]
 800c698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c69c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6a0:	ee17 2a90 	vmov	r2, s15
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c6a8:	4b13      	ldr	r3, [pc, #76]	; (800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ac:	0e1b      	lsrs	r3, r3, #24
 800c6ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6b2:	ee07 3a90 	vmov	s15, r3
 800c6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6ce:	ee17 2a90 	vmov	r2, s15
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c6d6:	e008      	b.n	800c6ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	609a      	str	r2, [r3, #8]
}
 800c6ea:	bf00      	nop
 800c6ec:	3724      	adds	r7, #36	; 0x24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f4:	4770      	bx	lr
 800c6f6:	bf00      	nop
 800c6f8:	58024400 	.word	0x58024400
 800c6fc:	03d09000 	.word	0x03d09000
 800c700:	46000000 	.word	0x46000000
 800c704:	4c742400 	.word	0x4c742400
 800c708:	4a742400 	.word	0x4a742400
 800c70c:	4bbebc20 	.word	0x4bbebc20

0800c710 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c710:	b480      	push	{r7}
 800c712:	b089      	sub	sp, #36	; 0x24
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c718:	4ba0      	ldr	r3, [pc, #640]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71c:	f003 0303 	and.w	r3, r3, #3
 800c720:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c722:	4b9e      	ldr	r3, [pc, #632]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c726:	091b      	lsrs	r3, r3, #4
 800c728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c72c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c72e:	4b9b      	ldr	r3, [pc, #620]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c732:	f003 0301 	and.w	r3, r3, #1
 800c736:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c738:	4b98      	ldr	r3, [pc, #608]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c73c:	08db      	lsrs	r3, r3, #3
 800c73e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c742:	693a      	ldr	r2, [r7, #16]
 800c744:	fb02 f303 	mul.w	r3, r2, r3
 800c748:	ee07 3a90 	vmov	s15, r3
 800c74c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c750:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 8111 	beq.w	800c97e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	2b02      	cmp	r3, #2
 800c760:	f000 8083 	beq.w	800c86a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	2b02      	cmp	r3, #2
 800c768:	f200 80a1 	bhi.w	800c8ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c76c:	69bb      	ldr	r3, [r7, #24]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d003      	beq.n	800c77a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	2b01      	cmp	r3, #1
 800c776:	d056      	beq.n	800c826 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c778:	e099      	b.n	800c8ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c77a:	4b88      	ldr	r3, [pc, #544]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f003 0320 	and.w	r3, r3, #32
 800c782:	2b00      	cmp	r3, #0
 800c784:	d02d      	beq.n	800c7e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c786:	4b85      	ldr	r3, [pc, #532]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	08db      	lsrs	r3, r3, #3
 800c78c:	f003 0303 	and.w	r3, r3, #3
 800c790:	4a83      	ldr	r2, [pc, #524]	; (800c9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c792:	fa22 f303 	lsr.w	r3, r2, r3
 800c796:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	ee07 3a90 	vmov	s15, r3
 800c79e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	ee07 3a90 	vmov	s15, r3
 800c7a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7b0:	4b7a      	ldr	r3, [pc, #488]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b8:	ee07 3a90 	vmov	s15, r3
 800c7bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c7c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7dc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c7e0:	e087      	b.n	800c8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	ee07 3a90 	vmov	s15, r3
 800c7e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c7f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7f4:	4b69      	ldr	r3, [pc, #420]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7fc:	ee07 3a90 	vmov	s15, r3
 800c800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c804:	ed97 6a03 	vldr	s12, [r7, #12]
 800c808:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c80c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c81c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c820:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c824:	e065      	b.n	800c8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	ee07 3a90 	vmov	s15, r3
 800c82c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c830:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c9ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c838:	4b58      	ldr	r3, [pc, #352]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c83c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c840:	ee07 3a90 	vmov	s15, r3
 800c844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c848:	ed97 6a03 	vldr	s12, [r7, #12]
 800c84c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c858:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c85c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c860:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c864:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c868:	e043      	b.n	800c8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	ee07 3a90 	vmov	s15, r3
 800c870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c874:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c87c:	4b47      	ldr	r3, [pc, #284]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c884:	ee07 3a90 	vmov	s15, r3
 800c888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c88c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c890:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c89c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8ac:	e021      	b.n	800c8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	ee07 3a90 	vmov	s15, r3
 800c8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8b8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c8bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8c0:	4b36      	ldr	r3, [pc, #216]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8c8:	ee07 3a90 	vmov	s15, r3
 800c8cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c8d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c8f2:	4b2a      	ldr	r3, [pc, #168]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f6:	0a5b      	lsrs	r3, r3, #9
 800c8f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8fc:	ee07 3a90 	vmov	s15, r3
 800c900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c90c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c918:	ee17 2a90 	vmov	r2, s15
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c920:	4b1e      	ldr	r3, [pc, #120]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c924:	0c1b      	lsrs	r3, r3, #16
 800c926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c92a:	ee07 3a90 	vmov	s15, r3
 800c92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c93a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c93e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c946:	ee17 2a90 	vmov	r2, s15
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c94e:	4b13      	ldr	r3, [pc, #76]	; (800c99c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c952:	0e1b      	lsrs	r3, r3, #24
 800c954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c958:	ee07 3a90 	vmov	s15, r3
 800c95c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c964:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c968:	edd7 6a07 	vldr	s13, [r7, #28]
 800c96c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c974:	ee17 2a90 	vmov	r2, s15
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c97c:	e008      	b.n	800c990 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	609a      	str	r2, [r3, #8]
}
 800c990:	bf00      	nop
 800c992:	3724      	adds	r7, #36	; 0x24
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr
 800c99c:	58024400 	.word	0x58024400
 800c9a0:	03d09000 	.word	0x03d09000
 800c9a4:	46000000 	.word	0x46000000
 800c9a8:	4c742400 	.word	0x4c742400
 800c9ac:	4a742400 	.word	0x4a742400
 800c9b0:	4bbebc20 	.word	0x4bbebc20

0800c9b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c9c2:	4b53      	ldr	r3, [pc, #332]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800c9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c6:	f003 0303 	and.w	r3, r3, #3
 800c9ca:	2b03      	cmp	r3, #3
 800c9cc:	d101      	bne.n	800c9d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e099      	b.n	800cb06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c9d2:	4b4f      	ldr	r3, [pc, #316]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a4e      	ldr	r2, [pc, #312]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800c9d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c9dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9de:	f7f7 fab1 	bl	8003f44 <HAL_GetTick>
 800c9e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c9e4:	e008      	b.n	800c9f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c9e6:	f7f7 faad 	bl	8003f44 <HAL_GetTick>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	1ad3      	subs	r3, r2, r3
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d901      	bls.n	800c9f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c9f4:	2303      	movs	r3, #3
 800c9f6:	e086      	b.n	800cb06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c9f8:	4b45      	ldr	r3, [pc, #276]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1f0      	bne.n	800c9e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ca04:	4b42      	ldr	r3, [pc, #264]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	031b      	lsls	r3, r3, #12
 800ca12:	493f      	ldr	r1, [pc, #252]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca14:	4313      	orrs	r3, r2
 800ca16:	628b      	str	r3, [r1, #40]	; 0x28
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	3b01      	subs	r3, #1
 800ca28:	025b      	lsls	r3, r3, #9
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	431a      	orrs	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	3b01      	subs	r3, #1
 800ca34:	041b      	lsls	r3, r3, #16
 800ca36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ca3a:	431a      	orrs	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	691b      	ldr	r3, [r3, #16]
 800ca40:	3b01      	subs	r3, #1
 800ca42:	061b      	lsls	r3, r3, #24
 800ca44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ca48:	4931      	ldr	r1, [pc, #196]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ca4e:	4b30      	ldr	r3, [pc, #192]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	695b      	ldr	r3, [r3, #20]
 800ca5a:	492d      	ldr	r1, [pc, #180]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ca60:	4b2b      	ldr	r3, [pc, #172]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca64:	f023 0220 	bic.w	r2, r3, #32
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	699b      	ldr	r3, [r3, #24]
 800ca6c:	4928      	ldr	r1, [pc, #160]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ca72:	4b27      	ldr	r3, [pc, #156]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca76:	4a26      	ldr	r2, [pc, #152]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca78:	f023 0310 	bic.w	r3, r3, #16
 800ca7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ca7e:	4b24      	ldr	r3, [pc, #144]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca82:	4b24      	ldr	r3, [pc, #144]	; (800cb14 <RCCEx_PLL2_Config+0x160>)
 800ca84:	4013      	ands	r3, r2
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	69d2      	ldr	r2, [r2, #28]
 800ca8a:	00d2      	lsls	r2, r2, #3
 800ca8c:	4920      	ldr	r1, [pc, #128]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ca92:	4b1f      	ldr	r3, [pc, #124]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca96:	4a1e      	ldr	r2, [pc, #120]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800ca98:	f043 0310 	orr.w	r3, r3, #16
 800ca9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d106      	bne.n	800cab2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800caa4:	4b1a      	ldr	r3, [pc, #104]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800caa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa8:	4a19      	ldr	r2, [pc, #100]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800caaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800caae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cab0:	e00f      	b.n	800cad2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d106      	bne.n	800cac6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cab8:	4b15      	ldr	r3, [pc, #84]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800caba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cabc:	4a14      	ldr	r2, [pc, #80]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800cabe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cac2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cac4:	e005      	b.n	800cad2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cac6:	4b12      	ldr	r3, [pc, #72]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800cac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caca:	4a11      	ldr	r2, [pc, #68]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800cacc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cad0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cad2:	4b0f      	ldr	r3, [pc, #60]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a0e      	ldr	r2, [pc, #56]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800cad8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cadc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cade:	f7f7 fa31 	bl	8003f44 <HAL_GetTick>
 800cae2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cae4:	e008      	b.n	800caf8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cae6:	f7f7 fa2d 	bl	8003f44 <HAL_GetTick>
 800caea:	4602      	mov	r2, r0
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	d901      	bls.n	800caf8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800caf4:	2303      	movs	r3, #3
 800caf6:	e006      	b.n	800cb06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800caf8:	4b05      	ldr	r3, [pc, #20]	; (800cb10 <RCCEx_PLL2_Config+0x15c>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d0f0      	beq.n	800cae6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	58024400 	.word	0x58024400
 800cb14:	ffff0007 	.word	0xffff0007

0800cb18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cb26:	4b53      	ldr	r3, [pc, #332]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cb28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb2a:	f003 0303 	and.w	r3, r3, #3
 800cb2e:	2b03      	cmp	r3, #3
 800cb30:	d101      	bne.n	800cb36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cb32:	2301      	movs	r3, #1
 800cb34:	e099      	b.n	800cc6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cb36:	4b4f      	ldr	r3, [pc, #316]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a4e      	ldr	r2, [pc, #312]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cb3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb42:	f7f7 f9ff 	bl	8003f44 <HAL_GetTick>
 800cb46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cb48:	e008      	b.n	800cb5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cb4a:	f7f7 f9fb 	bl	8003f44 <HAL_GetTick>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	1ad3      	subs	r3, r2, r3
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d901      	bls.n	800cb5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cb58:	2303      	movs	r3, #3
 800cb5a:	e086      	b.n	800cc6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cb5c:	4b45      	ldr	r3, [pc, #276]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1f0      	bne.n	800cb4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cb68:	4b42      	ldr	r3, [pc, #264]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	051b      	lsls	r3, r3, #20
 800cb76:	493f      	ldr	r1, [pc, #252]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	628b      	str	r3, [r1, #40]	; 0x28
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	3b01      	subs	r3, #1
 800cb82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	025b      	lsls	r3, r3, #9
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	431a      	orrs	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	3b01      	subs	r3, #1
 800cb98:	041b      	lsls	r3, r3, #16
 800cb9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cb9e:	431a      	orrs	r2, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	3b01      	subs	r3, #1
 800cba6:	061b      	lsls	r3, r3, #24
 800cba8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cbac:	4931      	ldr	r1, [pc, #196]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cbb2:	4b30      	ldr	r3, [pc, #192]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	695b      	ldr	r3, [r3, #20]
 800cbbe:	492d      	ldr	r1, [pc, #180]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cbc4:	4b2b      	ldr	r3, [pc, #172]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	699b      	ldr	r3, [r3, #24]
 800cbd0:	4928      	ldr	r1, [pc, #160]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cbd6:	4b27      	ldr	r3, [pc, #156]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbda:	4a26      	ldr	r2, [pc, #152]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbe0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cbe2:	4b24      	ldr	r3, [pc, #144]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbe6:	4b24      	ldr	r3, [pc, #144]	; (800cc78 <RCCEx_PLL3_Config+0x160>)
 800cbe8:	4013      	ands	r3, r2
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	69d2      	ldr	r2, [r2, #28]
 800cbee:	00d2      	lsls	r2, r2, #3
 800cbf0:	4920      	ldr	r1, [pc, #128]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cbf6:	4b1f      	ldr	r3, [pc, #124]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbfa:	4a1e      	ldr	r2, [pc, #120]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cbfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d106      	bne.n	800cc16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cc08:	4b1a      	ldr	r3, [pc, #104]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0c:	4a19      	ldr	r2, [pc, #100]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cc12:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc14:	e00f      	b.n	800cc36 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d106      	bne.n	800cc2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cc1c:	4b15      	ldr	r3, [pc, #84]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc20:	4a14      	ldr	r2, [pc, #80]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cc26:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc28:	e005      	b.n	800cc36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cc2a:	4b12      	ldr	r3, [pc, #72]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2e:	4a11      	ldr	r2, [pc, #68]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cc36:	4b0f      	ldr	r3, [pc, #60]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a0e      	ldr	r2, [pc, #56]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc42:	f7f7 f97f 	bl	8003f44 <HAL_GetTick>
 800cc46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cc48:	e008      	b.n	800cc5c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cc4a:	f7f7 f97b 	bl	8003f44 <HAL_GetTick>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	1ad3      	subs	r3, r2, r3
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	d901      	bls.n	800cc5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cc58:	2303      	movs	r3, #3
 800cc5a:	e006      	b.n	800cc6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cc5c:	4b05      	ldr	r3, [pc, #20]	; (800cc74 <RCCEx_PLL3_Config+0x15c>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d0f0      	beq.n	800cc4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	58024400 	.word	0x58024400
 800cc78:	ffff0007 	.word	0xffff0007

0800cc7c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d101      	bne.n	800cc8e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e04d      	b.n	800cd2a <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	7a5b      	ldrb	r3, [r3, #9]
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d105      	bne.n	800cca4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f7f5 ffb8 	bl	8002c14 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2202      	movs	r2, #2
 800cca8:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f023 0120 	bic.w	r1, r3, #32
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	685a      	ldr	r2, [r3, #4]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	430a      	orrs	r2, r1
 800ccbe:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f042 0204 	orr.w	r2, r2, #4
 800ccce:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccda:	2b40      	cmp	r3, #64	; 0x40
 800ccdc:	d104      	bne.n	800cce8 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2204      	movs	r2, #4
 800cce2:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	e020      	b.n	800cd2a <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800cce8:	f7f7 f92c 	bl	8003f44 <HAL_GetTick>
 800ccec:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800ccee:	e00e      	b.n	800cd0e <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800ccf0:	f7f7 f928 	bl	8003f44 <HAL_GetTick>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	2b02      	cmp	r3, #2
 800ccfc:	d907      	bls.n	800cd0e <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2204      	movs	r2, #4
 800cd02:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2202      	movs	r2, #2
 800cd08:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e00d      	b.n	800cd2a <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	f003 0304 	and.w	r3, r3, #4
 800cd18:	2b04      	cmp	r3, #4
 800cd1a:	d0e9      	beq.n	800ccf0 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800cd28:	2300      	movs	r3, #0
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}

0800cd32 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800cd32:	b580      	push	{r7, lr}
 800cd34:	b084      	sub	sp, #16
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
 800cd3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	7a1b      	ldrb	r3, [r3, #8]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d101      	bne.n	800cd4c <HAL_RNG_GenerateRandomNumber+0x1a>
 800cd48:	2302      	movs	r3, #2
 800cd4a:	e03d      	b.n	800cdc8 <HAL_RNG_GenerateRandomNumber+0x96>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	7a5b      	ldrb	r3, [r3, #9]
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d12c      	bne.n	800cdb6 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2202      	movs	r2, #2
 800cd60:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800cd62:	f7f7 f8ef 	bl	8003f44 <HAL_GetTick>
 800cd66:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800cd68:	e011      	b.n	800cd8e <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800cd6a:	f7f7 f8eb 	bl	8003f44 <HAL_GetTick>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	1ad3      	subs	r3, r2, r3
 800cd74:	2b02      	cmp	r3, #2
 800cd76:	d90a      	bls.n	800cd8e <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2202      	movs	r2, #2
 800cd82:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e01c      	b.n	800cdc8 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	f003 0301 	and.w	r3, r3, #1
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d1e6      	bne.n	800cd6a <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	689a      	ldr	r2, [r3, #8]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	691a      	ldr	r2, [r3, #16]
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	725a      	strb	r2, [r3, #9]
 800cdb4:	e004      	b.n	800cdc0 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2204      	movs	r2, #4
 800cdba:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	721a      	strb	r2, [r3, #8]

  return status;
 800cdc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b086      	sub	sp, #24
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	607a      	str	r2, [r7, #4]
 800cddc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	d904      	bls.n	800cdee <HAL_SAI_InitProtocol+0x1e>
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	3b03      	subs	r3, #3
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d812      	bhi.n	800ce12 <HAL_SAI_InitProtocol+0x42>
 800cdec:	e008      	b.n	800ce00 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	68b9      	ldr	r1, [r7, #8]
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	f000 fb7d 	bl	800d4f4 <SAI_InitI2S>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	75fb      	strb	r3, [r7, #23]
      break;
 800cdfe:	e00b      	b.n	800ce18 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	68b9      	ldr	r1, [r7, #8]
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	f000 fc26 	bl	800d658 <SAI_InitPCM>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	75fb      	strb	r3, [r7, #23]
      break;
 800ce10:	e002      	b.n	800ce18 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800ce12:	2301      	movs	r3, #1
 800ce14:	75fb      	strb	r3, [r7, #23]
      break;
 800ce16:	bf00      	nop
  }

  if (status == HAL_OK)
 800ce18:	7dfb      	ldrb	r3, [r7, #23]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d104      	bne.n	800ce28 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800ce1e:	68f8      	ldr	r0, [r7, #12]
 800ce20:	f000 f808 	bl	800ce34 <HAL_SAI_Init>
 800ce24:	4603      	mov	r3, r0
 800ce26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ce28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3718      	adds	r7, #24
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
	...

0800ce34 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b08a      	sub	sp, #40	; 0x28
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d101      	bne.n	800ce46 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ce42:	2301      	movs	r3, #1
 800ce44:	e283      	b.n	800d34e <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800ce46:	f7f7 f8ad 	bl	8003fa4 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d113      	bne.n	800ce7c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a94      	ldr	r2, [pc, #592]	; (800d0ac <HAL_SAI_Init+0x278>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d004      	beq.n	800ce68 <HAL_SAI_Init+0x34>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a93      	ldr	r2, [pc, #588]	; (800d0b0 <HAL_SAI_Init+0x27c>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d107      	bne.n	800ce78 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d103      	bne.n	800ce78 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d001      	beq.n	800ce7c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	e268      	b.n	800d34e <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a8a      	ldr	r2, [pc, #552]	; (800d0ac <HAL_SAI_Init+0x278>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d004      	beq.n	800ce90 <HAL_SAI_Init+0x5c>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a8a      	ldr	r2, [pc, #552]	; (800d0b4 <HAL_SAI_Init+0x280>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d102      	bne.n	800ce96 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800ce90:	4b89      	ldr	r3, [pc, #548]	; (800d0b8 <HAL_SAI_Init+0x284>)
 800ce92:	61bb      	str	r3, [r7, #24]
 800ce94:	e028      	b.n	800cee8 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	4a88      	ldr	r2, [pc, #544]	; (800d0bc <HAL_SAI_Init+0x288>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d004      	beq.n	800ceaa <HAL_SAI_Init+0x76>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a86      	ldr	r2, [pc, #536]	; (800d0c0 <HAL_SAI_Init+0x28c>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d102      	bne.n	800ceb0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800ceaa:	4b86      	ldr	r3, [pc, #536]	; (800d0c4 <HAL_SAI_Init+0x290>)
 800ceac:	61bb      	str	r3, [r7, #24]
 800ceae:	e01b      	b.n	800cee8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a84      	ldr	r2, [pc, #528]	; (800d0c8 <HAL_SAI_Init+0x294>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d004      	beq.n	800cec4 <HAL_SAI_Init+0x90>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a83      	ldr	r2, [pc, #524]	; (800d0cc <HAL_SAI_Init+0x298>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d102      	bne.n	800ceca <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800cec4:	4b82      	ldr	r3, [pc, #520]	; (800d0d0 <HAL_SAI_Init+0x29c>)
 800cec6:	61bb      	str	r3, [r7, #24]
 800cec8:	e00e      	b.n	800cee8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a78      	ldr	r2, [pc, #480]	; (800d0b0 <HAL_SAI_Init+0x27c>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d004      	beq.n	800cede <HAL_SAI_Init+0xaa>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a7e      	ldr	r2, [pc, #504]	; (800d0d4 <HAL_SAI_Init+0x2a0>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d102      	bne.n	800cee4 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800cede:	4b7e      	ldr	r3, [pc, #504]	; (800d0d8 <HAL_SAI_Init+0x2a4>)
 800cee0:	61bb      	str	r3, [r7, #24]
 800cee2:	e001      	b.n	800cee8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800cee4:	2301      	movs	r3, #1
 800cee6:	e232      	b.n	800d34e <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d106      	bne.n	800cf02 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2200      	movs	r2, #0
 800cef8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7f5 fef7 	bl	8002cf0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 fc62 	bl	800d7cc <SAI_Disable>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d001      	beq.n	800cf12 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e21d      	b.n	800d34e <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2202      	movs	r2, #2
 800cf16:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	2b02      	cmp	r3, #2
 800cf20:	d00c      	beq.n	800cf3c <HAL_SAI_Init+0x108>
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d80d      	bhi.n	800cf42 <HAL_SAI_Init+0x10e>
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d002      	beq.n	800cf30 <HAL_SAI_Init+0xfc>
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d003      	beq.n	800cf36 <HAL_SAI_Init+0x102>
 800cf2e:	e008      	b.n	800cf42 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800cf30:	2300      	movs	r3, #0
 800cf32:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800cf34:	e008      	b.n	800cf48 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800cf36:	2310      	movs	r3, #16
 800cf38:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800cf3a:	e005      	b.n	800cf48 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800cf3c:	2320      	movs	r3, #32
 800cf3e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800cf40:	e002      	b.n	800cf48 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800cf42:	2300      	movs	r3, #0
 800cf44:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800cf46:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	2b05      	cmp	r3, #5
 800cf4e:	d832      	bhi.n	800cfb6 <HAL_SAI_Init+0x182>
 800cf50:	a201      	add	r2, pc, #4	; (adr r2, 800cf58 <HAL_SAI_Init+0x124>)
 800cf52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf56:	bf00      	nop
 800cf58:	0800cf71 	.word	0x0800cf71
 800cf5c:	0800cf77 	.word	0x0800cf77
 800cf60:	0800cf7f 	.word	0x0800cf7f
 800cf64:	0800cf87 	.word	0x0800cf87
 800cf68:	0800cf97 	.word	0x0800cf97
 800cf6c:	0800cfa7 	.word	0x0800cfa7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800cf70:	2300      	movs	r3, #0
 800cf72:	61fb      	str	r3, [r7, #28]
      break;
 800cf74:	e022      	b.n	800cfbc <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800cf76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf7a:	61fb      	str	r3, [r7, #28]
      break;
 800cf7c:	e01e      	b.n	800cfbc <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800cf7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf82:	61fb      	str	r3, [r7, #28]
      break;
 800cf84:	e01a      	b.n	800cfbc <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800cf86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf8a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8e:	f043 0301 	orr.w	r3, r3, #1
 800cf92:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800cf94:	e012      	b.n	800cfbc <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800cf96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf9a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9e:	f043 0302 	orr.w	r3, r3, #2
 800cfa2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800cfa4:	e00a      	b.n	800cfbc <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800cfa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cfaa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800cfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfae:	f043 0303 	orr.w	r3, r3, #3
 800cfb2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800cfb4:	e002      	b.n	800cfbc <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	61fb      	str	r3, [r7, #28]
      break;
 800cfba:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfc0:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	f000 80ba 	beq.w	800d140 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a35      	ldr	r2, [pc, #212]	; (800d0ac <HAL_SAI_Init+0x278>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d004      	beq.n	800cfe4 <HAL_SAI_Init+0x1b0>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a35      	ldr	r2, [pc, #212]	; (800d0b4 <HAL_SAI_Init+0x280>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d104      	bne.n	800cfee <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800cfe4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cfe8:	f7fe fc02 	bl	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800cfec:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a32      	ldr	r2, [pc, #200]	; (800d0bc <HAL_SAI_Init+0x288>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d004      	beq.n	800d002 <HAL_SAI_Init+0x1ce>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a30      	ldr	r2, [pc, #192]	; (800d0c0 <HAL_SAI_Init+0x28c>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d104      	bne.n	800d00c <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d002:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d006:	f7fe fbf3 	bl	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d00a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a2d      	ldr	r2, [pc, #180]	; (800d0c8 <HAL_SAI_Init+0x294>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d004      	beq.n	800d020 <HAL_SAI_Init+0x1ec>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a2c      	ldr	r2, [pc, #176]	; (800d0cc <HAL_SAI_Init+0x298>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d104      	bne.n	800d02a <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800d020:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d024:	f7fe fbe4 	bl	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d028:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4a20      	ldr	r2, [pc, #128]	; (800d0b0 <HAL_SAI_Init+0x27c>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d104      	bne.n	800d03e <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800d034:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800d038:	f7fe fbda 	bl	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d03c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a24      	ldr	r2, [pc, #144]	; (800d0d4 <HAL_SAI_Init+0x2a0>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d104      	bne.n	800d052 <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800d048:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d04c:	f7fe fbd0 	bl	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d050:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	699b      	ldr	r3, [r3, #24]
 800d056:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d05a:	d120      	bne.n	800d09e <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d060:	2b04      	cmp	r3, #4
 800d062:	d102      	bne.n	800d06a <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800d064:	2340      	movs	r3, #64	; 0x40
 800d066:	60fb      	str	r3, [r7, #12]
 800d068:	e00a      	b.n	800d080 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d06e:	2b08      	cmp	r3, #8
 800d070:	d103      	bne.n	800d07a <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800d072:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d076:	60fb      	str	r3, [r7, #12]
 800d078:	e002      	b.n	800d080 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d07e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800d080:	697a      	ldr	r2, [r7, #20]
 800d082:	4613      	mov	r3, r2
 800d084:	009b      	lsls	r3, r3, #2
 800d086:	4413      	add	r3, r2
 800d088:	005b      	lsls	r3, r3, #1
 800d08a:	4619      	mov	r1, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6a1b      	ldr	r3, [r3, #32]
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	fb02 f303 	mul.w	r3, r2, r3
 800d096:	fbb1 f3f3 	udiv	r3, r1, r3
 800d09a:	613b      	str	r3, [r7, #16]
 800d09c:	e02f      	b.n	800d0fe <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d0a6:	d119      	bne.n	800d0dc <HAL_SAI_Init+0x2a8>
 800d0a8:	2302      	movs	r3, #2
 800d0aa:	e018      	b.n	800d0de <HAL_SAI_Init+0x2aa>
 800d0ac:	40015804 	.word	0x40015804
 800d0b0:	58005404 	.word	0x58005404
 800d0b4:	40015824 	.word	0x40015824
 800d0b8:	40015800 	.word	0x40015800
 800d0bc:	40015c04 	.word	0x40015c04
 800d0c0:	40015c24 	.word	0x40015c24
 800d0c4:	40015c00 	.word	0x40015c00
 800d0c8:	40016004 	.word	0x40016004
 800d0cc:	40016024 	.word	0x40016024
 800d0d0:	40016000 	.word	0x40016000
 800d0d4:	58005424 	.word	0x58005424
 800d0d8:	58005400 	.word	0x58005400
 800d0dc:	2301      	movs	r3, #1
 800d0de:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800d0e0:	697a      	ldr	r2, [r7, #20]
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	009b      	lsls	r3, r3, #2
 800d0e6:	4413      	add	r3, r2
 800d0e8:	005b      	lsls	r3, r3, #1
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6a1b      	ldr	r3, [r3, #32]
 800d0f0:	68ba      	ldr	r2, [r7, #8]
 800d0f2:	fb02 f303 	mul.w	r3, r2, r3
 800d0f6:	021b      	lsls	r3, r3, #8
 800d0f8:	fbb1 f3f3 	udiv	r3, r1, r3
 800d0fc:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	4a95      	ldr	r2, [pc, #596]	; (800d358 <HAL_SAI_Init+0x524>)
 800d102:	fba2 2303 	umull	r2, r3, r2, r3
 800d106:	08da      	lsrs	r2, r3, #3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800d10c:	6939      	ldr	r1, [r7, #16]
 800d10e:	4b92      	ldr	r3, [pc, #584]	; (800d358 <HAL_SAI_Init+0x524>)
 800d110:	fba3 2301 	umull	r2, r3, r3, r1
 800d114:	08da      	lsrs	r2, r3, #3
 800d116:	4613      	mov	r3, r2
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	4413      	add	r3, r2
 800d11c:	005b      	lsls	r3, r3, #1
 800d11e:	1aca      	subs	r2, r1, r3
 800d120:	2a08      	cmp	r2, #8
 800d122:	d904      	bls.n	800d12e <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d128:	1c5a      	adds	r2, r3, #1
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d132:	2b04      	cmp	r3, #4
 800d134:	d104      	bne.n	800d140 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13a:	085a      	lsrs	r2, r3, #1
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d003      	beq.n	800d150 <HAL_SAI_Init+0x31c>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	d109      	bne.n	800d164 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d154:	2b01      	cmp	r3, #1
 800d156:	d101      	bne.n	800d15c <HAL_SAI_Init+0x328>
 800d158:	2300      	movs	r3, #0
 800d15a:	e001      	b.n	800d160 <HAL_SAI_Init+0x32c>
 800d15c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d160:	623b      	str	r3, [r7, #32]
 800d162:	e008      	b.n	800d176 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d102      	bne.n	800d172 <HAL_SAI_Init+0x33e>
 800d16c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d170:	e000      	b.n	800d174 <HAL_SAI_Init+0x340>
 800d172:	2300      	movs	r3, #0
 800d174:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800d176:	f7f6 ff15 	bl	8003fa4 <HAL_GetREVID>
 800d17a:	4603      	mov	r3, r0
 800d17c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d180:	d331      	bcc.n	800d1e6 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	6819      	ldr	r1, [r3, #0]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681a      	ldr	r2, [r3, #0]
 800d18c:	4b73      	ldr	r3, [pc, #460]	; (800d35c <HAL_SAI_Init+0x528>)
 800d18e:	400b      	ands	r3, r1
 800d190:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	6819      	ldr	r1, [r3, #0]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1a0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d1a6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1ac:	431a      	orrs	r2, r3
 800d1ae:	6a3b      	ldr	r3, [r7, #32]
 800d1b0:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800d1ba:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	695b      	ldr	r3, [r3, #20]
 800d1c0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d1c6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1cc:	051b      	lsls	r3, r3, #20
 800d1ce:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d1d4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	691b      	ldr	r3, [r3, #16]
 800d1da:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	430a      	orrs	r2, r1
 800d1e2:	601a      	str	r2, [r3, #0]
 800d1e4:	e02d      	b.n	800d242 <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	6819      	ldr	r1, [r3, #0]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	4b5b      	ldr	r3, [pc, #364]	; (800d360 <HAL_SAI_Init+0x52c>)
 800d1f2:	400b      	ands	r3, r1
 800d1f4:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	6819      	ldr	r1, [r3, #0]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	685a      	ldr	r2, [r3, #4]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d204:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d20a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d210:	431a      	orrs	r2, r3
 800d212:	6a3b      	ldr	r3, [r7, #32]
 800d214:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800d21e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	695b      	ldr	r3, [r3, #20]
 800d224:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d22a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d230:	051b      	lsls	r3, r3, #20
 800d232:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d238:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	430a      	orrs	r2, r1
 800d240:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	6859      	ldr	r1, [r3, #4]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	4b45      	ldr	r3, [pc, #276]	; (800d364 <HAL_SAI_Init+0x530>)
 800d24e:	400b      	ands	r3, r1
 800d250:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	6859      	ldr	r1, [r3, #4]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	69da      	ldr	r2, [r3, #28]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d260:	431a      	orrs	r2, r3
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d266:	431a      	orrs	r2, r3
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	430a      	orrs	r2, r1
 800d26e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	6899      	ldr	r1, [r3, #8]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	4b3b      	ldr	r3, [pc, #236]	; (800d368 <HAL_SAI_Init+0x534>)
 800d27c:	400b      	ands	r3, r1
 800d27e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	6899      	ldr	r1, [r3, #8]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d28a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d290:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800d296:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800d29c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d2a6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	430a      	orrs	r2, r1
 800d2ae:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	68d9      	ldr	r1, [r3, #12]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d2be:	400b      	ands	r3, r1
 800d2c0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	68d9      	ldr	r1, [r3, #12]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2d0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2d6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d2d8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2de:	3b01      	subs	r3, #1
 800d2e0:	021b      	lsls	r3, r3, #8
 800d2e2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	430a      	orrs	r2, r1
 800d2ea:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a1e      	ldr	r2, [pc, #120]	; (800d36c <HAL_SAI_Init+0x538>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d004      	beq.n	800d300 <HAL_SAI_Init+0x4cc>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a1d      	ldr	r2, [pc, #116]	; (800d370 <HAL_SAI_Init+0x53c>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d119      	bne.n	800d334 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800d300:	69bb      	ldr	r3, [r7, #24]
 800d302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d304:	f023 0201 	bic.w	r2, r3, #1
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d312:	2b01      	cmp	r3, #1
 800d314:	d10e      	bne.n	800d334 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d31e:	3b01      	subs	r3, #1
 800d320:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800d322:	431a      	orrs	r2, r3
 800d324:	69bb      	ldr	r3, [r7, #24]
 800d326:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800d328:	69bb      	ldr	r3, [r7, #24]
 800d32a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d32c:	f043 0201 	orr.w	r2, r3, #1
 800d330:	69bb      	ldr	r3, [r7, #24]
 800d332:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2201      	movs	r2, #1
 800d340:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2200      	movs	r2, #0
 800d348:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3728      	adds	r7, #40	; 0x28
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	cccccccd 	.word	0xcccccccd
 800d35c:	f005c010 	.word	0xf005c010
 800d360:	f805c010 	.word	0xf805c010
 800d364:	ffff1ff0 	.word	0xffff1ff0
 800d368:	fff88000 	.word	0xfff88000
 800d36c:	40015804 	.word	0x40015804
 800d370:	58005404 	.word	0x58005404

0800d374 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b086      	sub	sp, #24
 800d378:	af00      	add	r7, sp, #0
 800d37a:	60f8      	str	r0, [r7, #12]
 800d37c:	60b9      	str	r1, [r7, #8]
 800d37e:	4613      	mov	r3, r2
 800d380:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800d382:	f7f6 fddf 	bl	8003f44 <HAL_GetTick>
 800d386:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d002      	beq.n	800d394 <HAL_SAI_Transmit_DMA+0x20>
 800d38e:	88fb      	ldrh	r3, [r7, #6]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d101      	bne.n	800d398 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800d394:	2301      	movs	r3, #1
 800d396:	e098      	b.n	800d4ca <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	f040 8091 	bne.w	800d4c8 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d101      	bne.n	800d3b4 <HAL_SAI_Transmit_DMA+0x40>
 800d3b0:	2302      	movs	r3, #2
 800d3b2:	e08a      	b.n	800d4ca <HAL_SAI_Transmit_DMA+0x156>
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	68ba      	ldr	r2, [r7, #8]
 800d3c0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	88fa      	ldrh	r2, [r7, #6]
 800d3c6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	88fa      	ldrh	r2, [r7, #6]
 800d3ce:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2212      	movs	r2, #18
 800d3de:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3e8:	4a3a      	ldr	r2, [pc, #232]	; (800d4d4 <HAL_SAI_Transmit_DMA+0x160>)
 800d3ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3f2:	4a39      	ldr	r2, [pc, #228]	; (800d4d8 <HAL_SAI_Transmit_DMA+0x164>)
 800d3f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3fc:	4a37      	ldr	r2, [pc, #220]	; (800d4dc <HAL_SAI_Transmit_DMA+0x168>)
 800d3fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d406:	2200      	movs	r2, #0
 800d408:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d414:	4619      	mov	r1, r3
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	331c      	adds	r3, #28
 800d41c:	461a      	mov	r2, r3
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800d424:	f7f8 fc78 	bl	8005d18 <HAL_DMA_Start_IT>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d005      	beq.n	800d43a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2200      	movs	r2, #0
 800d432:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800d436:	2301      	movs	r3, #1
 800d438:	e047      	b.n	800d4ca <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d43a:	2100      	movs	r1, #0
 800d43c:	68f8      	ldr	r0, [r7, #12]
 800d43e:	f000 f98d 	bl	800d75c <SAI_InterruptFlag>
 800d442:	4601      	mov	r1, r0
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	691a      	ldr	r2, [r3, #16]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	430a      	orrs	r2, r1
 800d450:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d460:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d462:	e015      	b.n	800d490 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800d464:	f7f6 fd6e 	bl	8003f44 <HAL_GetTick>
 800d468:	4602      	mov	r2, r0
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	1ad3      	subs	r3, r2, r3
 800d46e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d472:	d90d      	bls.n	800d490 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d47a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2200      	movs	r2, #0
 800d488:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800d48c:	2303      	movs	r3, #3
 800d48e:	e01c      	b.n	800d4ca <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	695b      	ldr	r3, [r3, #20]
 800d496:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d0e2      	beq.n	800d464 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d107      	bne.n	800d4bc <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d4ba:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	e000      	b.n	800d4ca <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800d4c8:	2302      	movs	r3, #2
  }
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3718      	adds	r7, #24
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	0800d8a1 	.word	0x0800d8a1
 800d4d8:	0800d841 	.word	0x0800d841
 800d4dc:	0800d8bd 	.word	0x0800d8bd

0800d4e0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800d4e8:	bf00      	nop
 800d4ea:	370c      	adds	r7, #12
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b087      	sub	sp, #28
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
 800d500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d502:	2300      	movs	r3, #0
 800d504:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2200      	movs	r2, #0
 800d50a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2200      	movs	r2, #0
 800d510:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d003      	beq.n	800d522 <SAI_InitI2S+0x2e>
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	2b02      	cmp	r3, #2
 800d520:	d103      	bne.n	800d52a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2200      	movs	r2, #0
 800d526:	651a      	str	r2, [r3, #80]	; 0x50
 800d528:	e002      	b.n	800d530 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2201      	movs	r2, #1
 800d52e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d536:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d53e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2200      	movs	r2, #0
 800d544:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	683a      	ldr	r2, [r7, #0]
 800d54a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	f003 0301 	and.w	r3, r3, #1
 800d552:	2b00      	cmp	r3, #0
 800d554:	d001      	beq.n	800d55a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800d556:	2301      	movs	r3, #1
 800d558:	e077      	b.n	800d64a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d107      	bne.n	800d570 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2200      	movs	r2, #0
 800d564:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800d56c:	665a      	str	r2, [r3, #100]	; 0x64
 800d56e:	e006      	b.n	800d57e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d576:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2200      	movs	r2, #0
 800d57c:	665a      	str	r2, [r3, #100]	; 0x64
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2b03      	cmp	r3, #3
 800d582:	d84f      	bhi.n	800d624 <SAI_InitI2S+0x130>
 800d584:	a201      	add	r2, pc, #4	; (adr r2, 800d58c <SAI_InitI2S+0x98>)
 800d586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d58a:	bf00      	nop
 800d58c:	0800d59d 	.word	0x0800d59d
 800d590:	0800d5bf 	.word	0x0800d5bf
 800d594:	0800d5e1 	.word	0x0800d5e1
 800d598:	0800d603 	.word	0x0800d603

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2280      	movs	r2, #128	; 0x80
 800d5a0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	085b      	lsrs	r3, r3, #1
 800d5a6:	015a      	lsls	r2, r3, #5
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	085b      	lsrs	r3, r3, #1
 800d5b0:	011a      	lsls	r2, r3, #4
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2240      	movs	r2, #64	; 0x40
 800d5ba:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d5bc:	e035      	b.n	800d62a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2280      	movs	r2, #128	; 0x80
 800d5c2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	085b      	lsrs	r3, r3, #1
 800d5c8:	019a      	lsls	r2, r3, #6
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	085b      	lsrs	r3, r3, #1
 800d5d2:	015a      	lsls	r2, r3, #5
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2280      	movs	r2, #128	; 0x80
 800d5dc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d5de:	e024      	b.n	800d62a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	22c0      	movs	r2, #192	; 0xc0
 800d5e4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	085b      	lsrs	r3, r3, #1
 800d5ea:	019a      	lsls	r2, r3, #6
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	085b      	lsrs	r3, r3, #1
 800d5f4:	015a      	lsls	r2, r3, #5
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2280      	movs	r2, #128	; 0x80
 800d5fe:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d600:	e013      	b.n	800d62a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	22e0      	movs	r2, #224	; 0xe0
 800d606:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	085b      	lsrs	r3, r3, #1
 800d60c:	019a      	lsls	r2, r3, #6
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	085b      	lsrs	r3, r3, #1
 800d616:	015a      	lsls	r2, r3, #5
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2280      	movs	r2, #128	; 0x80
 800d620:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d622:	e002      	b.n	800d62a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800d624:	2301      	movs	r3, #1
 800d626:	75fb      	strb	r3, [r7, #23]
      break;
 800d628:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	2b02      	cmp	r3, #2
 800d62e:	d10b      	bne.n	800d648 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2b01      	cmp	r3, #1
 800d634:	d102      	bne.n	800d63c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2210      	movs	r2, #16
 800d63a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b02      	cmp	r3, #2
 800d640:	d102      	bne.n	800d648 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2208      	movs	r2, #8
 800d646:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800d648:	7dfb      	ldrb	r3, [r7, #23]
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	371c      	adds	r7, #28
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop

0800d658 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800d658:	b480      	push	{r7}
 800d65a:	b087      	sub	sp, #28
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	607a      	str	r2, [r7, #4]
 800d664:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d666:	2300      	movs	r3, #0
 800d668:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2200      	movs	r2, #0
 800d66e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2200      	movs	r2, #0
 800d674:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d003      	beq.n	800d686 <SAI_InitPCM+0x2e>
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	2b02      	cmp	r3, #2
 800d684:	d103      	bne.n	800d68e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2201      	movs	r2, #1
 800d68a:	651a      	str	r2, [r3, #80]	; 0x50
 800d68c:	e002      	b.n	800d694 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2200      	movs	r2, #0
 800d692:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2200      	movs	r2, #0
 800d698:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d6a0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800d6a8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	683a      	ldr	r2, [r7, #0]
 800d6b4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6bc:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	2b04      	cmp	r3, #4
 800d6c2:	d103      	bne.n	800d6cc <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	659a      	str	r2, [r3, #88]	; 0x58
 800d6ca:	e002      	b.n	800d6d2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	220d      	movs	r2, #13
 800d6d0:	659a      	str	r2, [r3, #88]	; 0x58
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2b03      	cmp	r3, #3
 800d6d6:	d837      	bhi.n	800d748 <SAI_InitPCM+0xf0>
 800d6d8:	a201      	add	r2, pc, #4	; (adr r2, 800d6e0 <SAI_InitPCM+0x88>)
 800d6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6de:	bf00      	nop
 800d6e0:	0800d6f1 	.word	0x0800d6f1
 800d6e4:	0800d707 	.word	0x0800d707
 800d6e8:	0800d71d 	.word	0x0800d71d
 800d6ec:	0800d733 	.word	0x0800d733
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2280      	movs	r2, #128	; 0x80
 800d6f4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	011a      	lsls	r2, r3, #4
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2240      	movs	r2, #64	; 0x40
 800d702:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d704:	e023      	b.n	800d74e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2280      	movs	r2, #128	; 0x80
 800d70a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	015a      	lsls	r2, r3, #5
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2280      	movs	r2, #128	; 0x80
 800d718:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d71a:	e018      	b.n	800d74e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	22c0      	movs	r2, #192	; 0xc0
 800d720:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	015a      	lsls	r2, r3, #5
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2280      	movs	r2, #128	; 0x80
 800d72e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d730:	e00d      	b.n	800d74e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	22e0      	movs	r2, #224	; 0xe0
 800d736:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	015a      	lsls	r2, r3, #5
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2280      	movs	r2, #128	; 0x80
 800d744:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d746:	e002      	b.n	800d74e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800d748:	2301      	movs	r3, #1
 800d74a:	75fb      	strb	r3, [r7, #23]
      break;
 800d74c:	bf00      	nop
  }

  return status;
 800d74e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d750:	4618      	mov	r0, r3
 800d752:	371c      	adds	r7, #28
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b085      	sub	sp, #20
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	460b      	mov	r3, r1
 800d766:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800d768:	2301      	movs	r3, #1
 800d76a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800d76c:	78fb      	ldrb	r3, [r7, #3]
 800d76e:	2b01      	cmp	r3, #1
 800d770:	d103      	bne.n	800d77a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f043 0308 	orr.w	r3, r3, #8
 800d778:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d77e:	2b08      	cmp	r3, #8
 800d780:	d10b      	bne.n	800d79a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d786:	2b03      	cmp	r3, #3
 800d788:	d003      	beq.n	800d792 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d103      	bne.n	800d79a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f043 0310 	orr.w	r3, r3, #16
 800d798:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	2b03      	cmp	r3, #3
 800d7a0:	d003      	beq.n	800d7aa <SAI_InterruptFlag+0x4e>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	2b02      	cmp	r3, #2
 800d7a8:	d104      	bne.n	800d7b4 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d7b0:	60fb      	str	r3, [r7, #12]
 800d7b2:	e003      	b.n	800d7bc <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f043 0304 	orr.w	r3, r3, #4
 800d7ba:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3714      	adds	r7, #20
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr
	...

0800d7cc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b085      	sub	sp, #20
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d7d4:	4b18      	ldr	r3, [pc, #96]	; (800d838 <SAI_Disable+0x6c>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4a18      	ldr	r2, [pc, #96]	; (800d83c <SAI_Disable+0x70>)
 800d7da:	fba2 2303 	umull	r2, r3, r2, r3
 800d7de:	0b1b      	lsrs	r3, r3, #12
 800d7e0:	009b      	lsls	r3, r3, #2
 800d7e2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	681a      	ldr	r2, [r3, #0]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d7f6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d10a      	bne.n	800d814 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d804:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800d80e:	2303      	movs	r3, #3
 800d810:	72fb      	strb	r3, [r7, #11]
      break;
 800d812:	e009      	b.n	800d828 <SAI_Disable+0x5c>
    }
    count--;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	3b01      	subs	r3, #1
 800d818:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d824:	2b00      	cmp	r3, #0
 800d826:	d1e7      	bne.n	800d7f8 <SAI_Disable+0x2c>

  return status;
 800d828:	7afb      	ldrb	r3, [r7, #11]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3714      	adds	r7, #20
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr
 800d836:	bf00      	nop
 800d838:	24000400 	.word	0x24000400
 800d83c:	95cbec1b 	.word	0x95cbec1b

0800d840 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	69db      	ldr	r3, [r3, #28]
 800d852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d856:	d01c      	beq.n	800d892 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2200      	movs	r2, #0
 800d85c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d86e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d870:	2100      	movs	r1, #0
 800d872:	68f8      	ldr	r0, [r7, #12]
 800d874:	f7ff ff72 	bl	800d75c <SAI_InterruptFlag>
 800d878:	4603      	mov	r3, r0
 800d87a:	43d9      	mvns	r1, r3
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	691a      	ldr	r2, [r3, #16]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	400a      	ands	r2, r1
 800d888:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2201      	movs	r2, #1
 800d88e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800d892:	68f8      	ldr	r0, [r7, #12]
 800d894:	f004 f9c6 	bl	8011c24 <HAL_SAI_TxCpltCallback>
#endif
}
 800d898:	bf00      	nop
 800d89a:	3710      	adds	r7, #16
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800d8ae:	68f8      	ldr	r0, [r7, #12]
 800d8b0:	f004 f99e 	bl	8011bf0 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800d8b4:	bf00      	nop
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c8:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f7f9 fbb8 	bl	8007040 <HAL_DMA_GetError>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	d01d      	beq.n	800d912 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d8dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d8f4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f7ff ff68 	bl	800d7cc <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2200      	movs	r2, #0
 800d908:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f7ff fde7 	bl	800d4e0 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800d912:	bf00      	nop
 800d914:	3710      	adds	r7, #16
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
	...

0800d91c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800d924:	2300      	movs	r3, #0
 800d926:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d101      	bne.n	800d932 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800d92e:	2301      	movs	r3, #1
 800d930:	e0eb      	b.n	800db0a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2200      	movs	r2, #0
 800d936:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a75      	ldr	r2, [pc, #468]	; (800db14 <HAL_SPI_Init+0x1f8>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d00f      	beq.n	800d962 <HAL_SPI_Init+0x46>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a74      	ldr	r2, [pc, #464]	; (800db18 <HAL_SPI_Init+0x1fc>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d00a      	beq.n	800d962 <HAL_SPI_Init+0x46>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a72      	ldr	r2, [pc, #456]	; (800db1c <HAL_SPI_Init+0x200>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d005      	beq.n	800d962 <HAL_SPI_Init+0x46>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	68db      	ldr	r3, [r3, #12]
 800d95a:	2b0f      	cmp	r3, #15
 800d95c:	d901      	bls.n	800d962 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800d95e:	2301      	movs	r3, #1
 800d960:	e0d3      	b.n	800db0a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f001 f888 	bl	800ea78 <SPI_GetPacketSize>
 800d968:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4a69      	ldr	r2, [pc, #420]	; (800db14 <HAL_SPI_Init+0x1f8>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d00c      	beq.n	800d98e <HAL_SPI_Init+0x72>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4a67      	ldr	r2, [pc, #412]	; (800db18 <HAL_SPI_Init+0x1fc>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d007      	beq.n	800d98e <HAL_SPI_Init+0x72>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4a66      	ldr	r2, [pc, #408]	; (800db1c <HAL_SPI_Init+0x200>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d002      	beq.n	800d98e <HAL_SPI_Init+0x72>
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	2b08      	cmp	r3, #8
 800d98c:	d811      	bhi.n	800d9b2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d992:	4a60      	ldr	r2, [pc, #384]	; (800db14 <HAL_SPI_Init+0x1f8>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d009      	beq.n	800d9ac <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4a5e      	ldr	r2, [pc, #376]	; (800db18 <HAL_SPI_Init+0x1fc>)
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d004      	beq.n	800d9ac <HAL_SPI_Init+0x90>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	4a5d      	ldr	r2, [pc, #372]	; (800db1c <HAL_SPI_Init+0x200>)
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d104      	bne.n	800d9b6 <HAL_SPI_Init+0x9a>
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	2b10      	cmp	r3, #16
 800d9b0:	d901      	bls.n	800d9b6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	e0a9      	b.n	800db0a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d106      	bne.n	800d9d0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f7f5 fa7c 	bl	8002ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2202      	movs	r2, #2
 800d9d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	681a      	ldr	r2, [r3, #0]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f022 0201 	bic.w	r2, r2, #1
 800d9e6:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	699b      	ldr	r3, [r3, #24]
 800d9ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d9f0:	d119      	bne.n	800da26 <HAL_SPI_Init+0x10a>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9fa:	d103      	bne.n	800da04 <HAL_SPI_Init+0xe8>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da00:	2b00      	cmp	r3, #0
 800da02:	d008      	beq.n	800da16 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d10c      	bne.n	800da26 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800da14:	d107      	bne.n	800da26 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800da24:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	69da      	ldr	r2, [r3, #28]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da2e:	431a      	orrs	r2, r3
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	431a      	orrs	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da38:	ea42 0103 	orr.w	r1, r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	68da      	ldr	r2, [r3, #12]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	430a      	orrs	r2, r1
 800da46:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da50:	431a      	orrs	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da56:	431a      	orrs	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	699b      	ldr	r3, [r3, #24]
 800da5c:	431a      	orrs	r2, r3
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	691b      	ldr	r3, [r3, #16]
 800da62:	431a      	orrs	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	695b      	ldr	r3, [r3, #20]
 800da68:	431a      	orrs	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a1b      	ldr	r3, [r3, #32]
 800da6e:	431a      	orrs	r2, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	431a      	orrs	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da7a:	431a      	orrs	r2, r3
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	431a      	orrs	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da86:	ea42 0103 	orr.w	r1, r2, r3
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	430a      	orrs	r2, r1
 800da94:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d113      	bne.n	800dac6 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dab0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dac4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f022 0201 	bic.w	r2, r2, #1
 800dad4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d00a      	beq.n	800daf8 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	430a      	orrs	r2, r1
 800daf6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2201      	movs	r2, #1
 800db04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	40013000 	.word	0x40013000
 800db18:	40003800 	.word	0x40003800
 800db1c:	40003c00 	.word	0x40003c00

0800db20 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b08a      	sub	sp, #40	; 0x28
 800db24:	af02      	add	r7, sp, #8
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	603b      	str	r3, [r7, #0]
 800db2c:	4613      	mov	r3, r2
 800db2e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	3320      	adds	r3, #32
 800db36:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800db38:	2300      	movs	r3, #0
 800db3a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db42:	2b01      	cmp	r3, #1
 800db44:	d101      	bne.n	800db4a <HAL_SPI_Transmit+0x2a>
 800db46:	2302      	movs	r3, #2
 800db48:	e1d7      	b.n	800defa <HAL_SPI_Transmit+0x3da>
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2201      	movs	r2, #1
 800db4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db52:	f7f6 f9f7 	bl	8003f44 <HAL_GetTick>
 800db56:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	2b01      	cmp	r3, #1
 800db62:	d007      	beq.n	800db74 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800db64:	2302      	movs	r3, #2
 800db66:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800db70:	7efb      	ldrb	r3, [r7, #27]
 800db72:	e1c2      	b.n	800defa <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d002      	beq.n	800db80 <HAL_SPI_Transmit+0x60>
 800db7a:	88fb      	ldrh	r3, [r7, #6]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d107      	bne.n	800db90 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800db80:	2301      	movs	r3, #1
 800db82:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2200      	movs	r2, #0
 800db88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800db8c:	7efb      	ldrb	r3, [r7, #27]
 800db8e:	e1b4      	b.n	800defa <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2203      	movs	r2, #3
 800db94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2200      	movs	r2, #0
 800db9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	68ba      	ldr	r2, [r7, #8]
 800dba4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	88fa      	ldrh	r2, [r7, #6]
 800dbaa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	88fa      	ldrh	r2, [r7, #6]
 800dbb2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dbe0:	d107      	bne.n	800dbf2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dbf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	685a      	ldr	r2, [r3, #4]
 800dbf8:	4b96      	ldr	r3, [pc, #600]	; (800de54 <HAL_SPI_Transmit+0x334>)
 800dbfa:	4013      	ands	r3, r2
 800dbfc:	88f9      	ldrh	r1, [r7, #6]
 800dbfe:	68fa      	ldr	r2, [r7, #12]
 800dc00:	6812      	ldr	r2, [r2, #0]
 800dc02:	430b      	orrs	r3, r1
 800dc04:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f042 0201 	orr.w	r2, r2, #1
 800dc14:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc1e:	d107      	bne.n	800dc30 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	2b0f      	cmp	r3, #15
 800dc36:	d947      	bls.n	800dcc8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dc38:	e03f      	b.n	800dcba <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	695b      	ldr	r3, [r3, #20]
 800dc40:	f003 0302 	and.w	r3, r3, #2
 800dc44:	2b02      	cmp	r3, #2
 800dc46:	d114      	bne.n	800dc72 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	6812      	ldr	r2, [r2, #0]
 800dc52:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc58:	1d1a      	adds	r2, r3, #4
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	3b01      	subs	r3, #1
 800dc68:	b29a      	uxth	r2, r3
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dc70:	e023      	b.n	800dcba <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc72:	f7f6 f967 	bl	8003f44 <HAL_GetTick>
 800dc76:	4602      	mov	r2, r0
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	1ad3      	subs	r3, r2, r3
 800dc7c:	683a      	ldr	r2, [r7, #0]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d803      	bhi.n	800dc8a <HAL_SPI_Transmit+0x16a>
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc88:	d102      	bne.n	800dc90 <HAL_SPI_Transmit+0x170>
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d114      	bne.n	800dcba <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f000 fe23 	bl	800e8dc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dca4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	e11f      	b.n	800defa <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d1b9      	bne.n	800dc3a <HAL_SPI_Transmit+0x11a>
 800dcc6:	e0f2      	b.n	800deae <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	68db      	ldr	r3, [r3, #12]
 800dccc:	2b07      	cmp	r3, #7
 800dcce:	f240 80e7 	bls.w	800dea0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dcd2:	e05d      	b.n	800dd90 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	695b      	ldr	r3, [r3, #20]
 800dcda:	f003 0302 	and.w	r3, r3, #2
 800dcde:	2b02      	cmp	r3, #2
 800dce0:	d132      	bne.n	800dd48 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d918      	bls.n	800dd20 <HAL_SPI_Transmit+0x200>
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d014      	beq.n	800dd20 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	6812      	ldr	r2, [r2, #0]
 800dd00:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd06:	1d1a      	adds	r2, r3, #4
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	3b02      	subs	r3, #2
 800dd16:	b29a      	uxth	r2, r3
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dd1e:	e037      	b.n	800dd90 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd24:	881a      	ldrh	r2, [r3, #0]
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd2e:	1c9a      	adds	r2, r3, #2
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd3a:	b29b      	uxth	r3, r3
 800dd3c:	3b01      	subs	r3, #1
 800dd3e:	b29a      	uxth	r2, r3
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dd46:	e023      	b.n	800dd90 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd48:	f7f6 f8fc 	bl	8003f44 <HAL_GetTick>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	1ad3      	subs	r3, r2, r3
 800dd52:	683a      	ldr	r2, [r7, #0]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d803      	bhi.n	800dd60 <HAL_SPI_Transmit+0x240>
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd5e:	d102      	bne.n	800dd66 <HAL_SPI_Transmit+0x246>
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d114      	bne.n	800dd90 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	f000 fdb8 	bl	800e8dc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2201      	movs	r2, #1
 800dd88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e0b4      	b.n	800defa <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d19b      	bne.n	800dcd4 <HAL_SPI_Transmit+0x1b4>
 800dd9c:	e087      	b.n	800deae <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	695b      	ldr	r3, [r3, #20]
 800dda4:	f003 0302 	and.w	r3, r3, #2
 800dda8:	2b02      	cmp	r3, #2
 800ddaa:	d155      	bne.n	800de58 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	2b03      	cmp	r3, #3
 800ddb6:	d918      	bls.n	800ddea <HAL_SPI_Transmit+0x2ca>
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddbc:	2b40      	cmp	r3, #64	; 0x40
 800ddbe:	d914      	bls.n	800ddea <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	6812      	ldr	r2, [r2, #0]
 800ddca:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddd0:	1d1a      	adds	r2, r3, #4
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	3b04      	subs	r3, #4
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dde8:	e05a      	b.n	800dea0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d917      	bls.n	800de26 <HAL_SPI_Transmit+0x306>
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d013      	beq.n	800de26 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de02:	881a      	ldrh	r2, [r3, #0]
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de0c:	1c9a      	adds	r2, r3, #2
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de18:	b29b      	uxth	r3, r3
 800de1a:	3b02      	subs	r3, #2
 800de1c:	b29a      	uxth	r2, r3
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de24:	e03c      	b.n	800dea0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	3320      	adds	r3, #32
 800de30:	7812      	ldrb	r2, [r2, #0]
 800de32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de38:	1c5a      	adds	r2, r3, #1
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de44:	b29b      	uxth	r3, r3
 800de46:	3b01      	subs	r3, #1
 800de48:	b29a      	uxth	r2, r3
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de50:	e026      	b.n	800dea0 <HAL_SPI_Transmit+0x380>
 800de52:	bf00      	nop
 800de54:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de58:	f7f6 f874 	bl	8003f44 <HAL_GetTick>
 800de5c:	4602      	mov	r2, r0
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	683a      	ldr	r2, [r7, #0]
 800de64:	429a      	cmp	r2, r3
 800de66:	d803      	bhi.n	800de70 <HAL_SPI_Transmit+0x350>
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de6e:	d102      	bne.n	800de76 <HAL_SPI_Transmit+0x356>
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d114      	bne.n	800dea0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800de76:	68f8      	ldr	r0, [r7, #12]
 800de78:	f000 fd30 	bl	800e8dc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2200      	movs	r2, #0
 800de80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2201      	movs	r2, #1
 800de98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800de9c:	2301      	movs	r3, #1
 800de9e:	e02c      	b.n	800defa <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f47f af78 	bne.w	800dd9e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	9300      	str	r3, [sp, #0]
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	2200      	movs	r2, #0
 800deb6:	2108      	movs	r1, #8
 800deb8:	68f8      	ldr	r0, [r7, #12]
 800deba:	f000 fdaf 	bl	800ea1c <SPI_WaitOnFlagUntilTimeout>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d007      	beq.n	800ded4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800deca:	f043 0220 	orr.w	r2, r3, #32
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	f000 fd01 	bl	800e8dc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2200      	movs	r2, #0
 800dede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2201      	movs	r2, #1
 800dee6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800def0:	2b00      	cmp	r3, #0
 800def2:	d001      	beq.n	800def8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800def4:	2301      	movs	r3, #1
 800def6:	e000      	b.n	800defa <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800def8:	7efb      	ldrb	r3, [r7, #27]
}
 800defa:	4618      	mov	r0, r3
 800defc:	3720      	adds	r7, #32
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop

0800df04 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b08a      	sub	sp, #40	; 0x28
 800df08:	af02      	add	r7, sp, #8
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	603b      	str	r3, [r7, #0]
 800df10:	4613      	mov	r3, r2
 800df12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800df14:	2300      	movs	r3, #0
 800df16:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	3330      	adds	r3, #48	; 0x30
 800df1e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df28:	d112      	bne.n	800df50 <HAL_SPI_Receive+0x4c>
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d10e      	bne.n	800df50 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2204      	movs	r2, #4
 800df36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800df3a:	88fa      	ldrh	r2, [r7, #6]
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	9300      	str	r3, [sp, #0]
 800df40:	4613      	mov	r3, r2
 800df42:	68ba      	ldr	r2, [r7, #8]
 800df44:	68b9      	ldr	r1, [r7, #8]
 800df46:	68f8      	ldr	r0, [r7, #12]
 800df48:	f000 f9ce 	bl	800e2e8 <HAL_SPI_TransmitReceive>
 800df4c:	4603      	mov	r3, r0
 800df4e:	e1c7      	b.n	800e2e0 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df56:	2b01      	cmp	r3, #1
 800df58:	d101      	bne.n	800df5e <HAL_SPI_Receive+0x5a>
 800df5a:	2302      	movs	r3, #2
 800df5c:	e1c0      	b.n	800e2e0 <HAL_SPI_Receive+0x3dc>
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2201      	movs	r2, #1
 800df62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df66:	f7f5 ffed 	bl	8003f44 <HAL_GetTick>
 800df6a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df72:	b2db      	uxtb	r3, r3
 800df74:	2b01      	cmp	r3, #1
 800df76:	d007      	beq.n	800df88 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800df78:	2302      	movs	r3, #2
 800df7a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2200      	movs	r2, #0
 800df80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800df84:	7ffb      	ldrb	r3, [r7, #31]
 800df86:	e1ab      	b.n	800e2e0 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d002      	beq.n	800df94 <HAL_SPI_Receive+0x90>
 800df8e:	88fb      	ldrh	r3, [r7, #6]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d107      	bne.n	800dfa4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800df94:	2301      	movs	r3, #1
 800df96:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2200      	movs	r2, #0
 800df9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dfa0:	7ffb      	ldrb	r3, [r7, #31]
 800dfa2:	e19d      	b.n	800e2e0 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2204      	movs	r2, #4
 800dfa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	68ba      	ldr	r2, [r7, #8]
 800dfb8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	88fa      	ldrh	r2, [r7, #6]
 800dfbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	88fa      	ldrh	r2, [r7, #6]
 800dfc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	689b      	ldr	r3, [r3, #8]
 800dff0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dff4:	d107      	bne.n	800e006 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e004:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	685a      	ldr	r2, [r3, #4]
 800e00c:	4b94      	ldr	r3, [pc, #592]	; (800e260 <HAL_SPI_Receive+0x35c>)
 800e00e:	4013      	ands	r3, r2
 800e010:	88f9      	ldrh	r1, [r7, #6]
 800e012:	68fa      	ldr	r2, [r7, #12]
 800e014:	6812      	ldr	r2, [r2, #0]
 800e016:	430b      	orrs	r3, r1
 800e018:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	681a      	ldr	r2, [r3, #0]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f042 0201 	orr.w	r2, r2, #1
 800e028:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e032:	d107      	bne.n	800e044 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e042:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	68db      	ldr	r3, [r3, #12]
 800e048:	2b0f      	cmp	r3, #15
 800e04a:	d948      	bls.n	800e0de <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e04c:	e040      	b.n	800e0d0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	695a      	ldr	r2, [r3, #20]
 800e054:	f248 0308 	movw	r3, #32776	; 0x8008
 800e058:	4013      	ands	r3, r2
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d014      	beq.n	800e088 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e066:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e068:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e06e:	1d1a      	adds	r2, r3, #4
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	3b01      	subs	r3, #1
 800e07e:	b29a      	uxth	r2, r3
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e086:	e023      	b.n	800e0d0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e088:	f7f5 ff5c 	bl	8003f44 <HAL_GetTick>
 800e08c:	4602      	mov	r2, r0
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	683a      	ldr	r2, [r7, #0]
 800e094:	429a      	cmp	r2, r3
 800e096:	d803      	bhi.n	800e0a0 <HAL_SPI_Receive+0x19c>
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e09e:	d102      	bne.n	800e0a6 <HAL_SPI_Receive+0x1a2>
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d114      	bne.n	800e0d0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e0a6:	68f8      	ldr	r0, [r7, #12]
 800e0a8:	f000 fc18 	bl	800e8dc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	e107      	b.n	800e2e0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d1b8      	bne.n	800e04e <HAL_SPI_Receive+0x14a>
 800e0dc:	e0ed      	b.n	800e2ba <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	2b07      	cmp	r3, #7
 800e0e4:	f240 80e2 	bls.w	800e2ac <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e0e8:	e05b      	b.n	800e1a2 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	695b      	ldr	r3, [r3, #20]
 800e0f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d030      	beq.n	800e15a <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	695b      	ldr	r3, [r3, #20]
 800e0fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e102:	2b00      	cmp	r3, #0
 800e104:	d014      	beq.n	800e130 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e10e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e110:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e116:	1d1a      	adds	r2, r3, #4
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e122:	b29b      	uxth	r3, r3
 800e124:	3b02      	subs	r3, #2
 800e126:	b29a      	uxth	r2, r3
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e12e:	e038      	b.n	800e1a2 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e134:	69ba      	ldr	r2, [r7, #24]
 800e136:	8812      	ldrh	r2, [r2, #0]
 800e138:	b292      	uxth	r2, r2
 800e13a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e140:	1c9a      	adds	r2, r3, #2
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	3b01      	subs	r3, #1
 800e150:	b29a      	uxth	r2, r3
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e158:	e023      	b.n	800e1a2 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e15a:	f7f5 fef3 	bl	8003f44 <HAL_GetTick>
 800e15e:	4602      	mov	r2, r0
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	1ad3      	subs	r3, r2, r3
 800e164:	683a      	ldr	r2, [r7, #0]
 800e166:	429a      	cmp	r2, r3
 800e168:	d803      	bhi.n	800e172 <HAL_SPI_Receive+0x26e>
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e170:	d102      	bne.n	800e178 <HAL_SPI_Receive+0x274>
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d114      	bne.n	800e1a2 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e178:	68f8      	ldr	r0, [r7, #12]
 800e17a:	f000 fbaf 	bl	800e8dc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2200      	movs	r2, #0
 800e182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e18c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2201      	movs	r2, #1
 800e19a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e09e      	b.n	800e2e0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d19d      	bne.n	800e0ea <HAL_SPI_Receive+0x1e6>
 800e1ae:	e084      	b.n	800e2ba <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	695b      	ldr	r3, [r3, #20]
 800e1b6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d052      	beq.n	800e264 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	695b      	ldr	r3, [r3, #20]
 800e1c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d014      	beq.n	800e1f6 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e1d6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1dc:	1d1a      	adds	r2, r3, #4
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	3b04      	subs	r3, #4
 800e1ec:	b29a      	uxth	r2, r3
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e1f4:	e05a      	b.n	800e2ac <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	695b      	ldr	r3, [r3, #20]
 800e1fc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e204:	d914      	bls.n	800e230 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e20a:	69ba      	ldr	r2, [r7, #24]
 800e20c:	8812      	ldrh	r2, [r2, #0]
 800e20e:	b292      	uxth	r2, r2
 800e210:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e216:	1c9a      	adds	r2, r3, #2
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e222:	b29b      	uxth	r3, r3
 800e224:	3b02      	subs	r3, #2
 800e226:	b29a      	uxth	r2, r3
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e22e:	e03d      	b.n	800e2ac <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e23c:	7812      	ldrb	r2, [r2, #0]
 800e23e:	b2d2      	uxtb	r2, r2
 800e240:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e246:	1c5a      	adds	r2, r3, #1
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e252:	b29b      	uxth	r3, r3
 800e254:	3b01      	subs	r3, #1
 800e256:	b29a      	uxth	r2, r3
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e25e:	e025      	b.n	800e2ac <HAL_SPI_Receive+0x3a8>
 800e260:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e264:	f7f5 fe6e 	bl	8003f44 <HAL_GetTick>
 800e268:	4602      	mov	r2, r0
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	1ad3      	subs	r3, r2, r3
 800e26e:	683a      	ldr	r2, [r7, #0]
 800e270:	429a      	cmp	r2, r3
 800e272:	d803      	bhi.n	800e27c <HAL_SPI_Receive+0x378>
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e27a:	d102      	bne.n	800e282 <HAL_SPI_Receive+0x37e>
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d114      	bne.n	800e2ac <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	f000 fb2a 	bl	800e8dc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e296:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	e019      	b.n	800e2e0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f47f af7b 	bne.w	800e1b0 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e2ba:	68f8      	ldr	r0, [r7, #12]
 800e2bc:	f000 fb0e 	bl	800e8dc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d001      	beq.n	800e2de <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e000      	b.n	800e2e0 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800e2de:	7ffb      	ldrb	r3, [r7, #31]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3720      	adds	r7, #32
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b08e      	sub	sp, #56	; 0x38
 800e2ec:	af02      	add	r7, sp, #8
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	607a      	str	r2, [r7, #4]
 800e2f4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	3320      	adds	r3, #32
 800e302:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	3330      	adds	r3, #48	; 0x30
 800e30a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e312:	2b01      	cmp	r3, #1
 800e314:	d101      	bne.n	800e31a <HAL_SPI_TransmitReceive+0x32>
 800e316:	2302      	movs	r3, #2
 800e318:	e2ce      	b.n	800e8b8 <HAL_SPI_TransmitReceive+0x5d0>
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2201      	movs	r2, #1
 800e31e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e322:	f7f5 fe0f 	bl	8003f44 <HAL_GetTick>
 800e326:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800e328:	887b      	ldrh	r3, [r7, #2]
 800e32a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800e32c:	887b      	ldrh	r3, [r7, #2]
 800e32e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e336:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e33e:	7efb      	ldrb	r3, [r7, #27]
 800e340:	2b01      	cmp	r3, #1
 800e342:	d014      	beq.n	800e36e <HAL_SPI_TransmitReceive+0x86>
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e34a:	d106      	bne.n	800e35a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	689b      	ldr	r3, [r3, #8]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d102      	bne.n	800e35a <HAL_SPI_TransmitReceive+0x72>
 800e354:	7efb      	ldrb	r3, [r7, #27]
 800e356:	2b04      	cmp	r3, #4
 800e358:	d009      	beq.n	800e36e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800e35a:	2302      	movs	r3, #2
 800e35c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2200      	movs	r2, #0
 800e364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e368:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e36c:	e2a4      	b.n	800e8b8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d005      	beq.n	800e380 <HAL_SPI_TransmitReceive+0x98>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d002      	beq.n	800e380 <HAL_SPI_TransmitReceive+0x98>
 800e37a:	887b      	ldrh	r3, [r7, #2]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d109      	bne.n	800e394 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800e380:	2301      	movs	r3, #1
 800e382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2200      	movs	r2, #0
 800e38a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e38e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e392:	e291      	b.n	800e8b8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	2b04      	cmp	r3, #4
 800e39e:	d003      	beq.n	800e3a8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2205      	movs	r2, #5
 800e3a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	887a      	ldrh	r2, [r7, #2]
 800e3ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	887a      	ldrh	r2, [r7, #2]
 800e3c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	68ba      	ldr	r2, [r7, #8]
 800e3ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	887a      	ldrh	r2, [r7, #2]
 800e3d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	887a      	ldrh	r2, [r7, #2]
 800e3d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	685a      	ldr	r2, [r3, #4]
 800e3ee:	4b9f      	ldr	r3, [pc, #636]	; (800e66c <HAL_SPI_TransmitReceive+0x384>)
 800e3f0:	4013      	ands	r3, r2
 800e3f2:	8879      	ldrh	r1, [r7, #2]
 800e3f4:	68fa      	ldr	r2, [r7, #12]
 800e3f6:	6812      	ldr	r2, [r2, #0]
 800e3f8:	430b      	orrs	r3, r1
 800e3fa:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f042 0201 	orr.w	r2, r2, #1
 800e40a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e414:	d107      	bne.n	800e426 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e424:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	68db      	ldr	r3, [r3, #12]
 800e42a:	2b0f      	cmp	r3, #15
 800e42c:	d970      	bls.n	800e510 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e42e:	e068      	b.n	800e502 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	695b      	ldr	r3, [r3, #20]
 800e436:	f003 0302 	and.w	r3, r3, #2
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d11a      	bne.n	800e474 <HAL_SPI_TransmitReceive+0x18c>
 800e43e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e440:	2b00      	cmp	r3, #0
 800e442:	d017      	beq.n	800e474 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	6812      	ldr	r2, [r2, #0]
 800e44e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e454:	1d1a      	adds	r2, r3, #4
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e460:	b29b      	uxth	r3, r3
 800e462:	3b01      	subs	r3, #1
 800e464:	b29a      	uxth	r2, r3
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e472:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	695a      	ldr	r2, [r3, #20]
 800e47a:	f248 0308 	movw	r3, #32776	; 0x8008
 800e47e:	4013      	ands	r3, r2
 800e480:	2b00      	cmp	r3, #0
 800e482:	d01a      	beq.n	800e4ba <HAL_SPI_TransmitReceive+0x1d2>
 800e484:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e486:	2b00      	cmp	r3, #0
 800e488:	d017      	beq.n	800e4ba <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e492:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e494:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e49a:	1d1a      	adds	r2, r3, #4
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	3b01      	subs	r3, #1
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4ba:	f7f5 fd43 	bl	8003f44 <HAL_GetTick>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	1ad3      	subs	r3, r2, r3
 800e4c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d803      	bhi.n	800e4d2 <HAL_SPI_TransmitReceive+0x1ea>
 800e4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4d0:	d102      	bne.n	800e4d8 <HAL_SPI_TransmitReceive+0x1f0>
 800e4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d114      	bne.n	800e502 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f000 f9ff 	bl	800e8dc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e4fe:	2301      	movs	r3, #1
 800e500:	e1da      	b.n	800e8b8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e502:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e504:	2b00      	cmp	r3, #0
 800e506:	d193      	bne.n	800e430 <HAL_SPI_TransmitReceive+0x148>
 800e508:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d190      	bne.n	800e430 <HAL_SPI_TransmitReceive+0x148>
 800e50e:	e1ac      	b.n	800e86a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	68db      	ldr	r3, [r3, #12]
 800e514:	2b07      	cmp	r3, #7
 800e516:	f240 81a0 	bls.w	800e85a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e51a:	e0a9      	b.n	800e670 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	695b      	ldr	r3, [r3, #20]
 800e522:	f003 0302 	and.w	r3, r3, #2
 800e526:	2b02      	cmp	r3, #2
 800e528:	d139      	bne.n	800e59e <HAL_SPI_TransmitReceive+0x2b6>
 800e52a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d036      	beq.n	800e59e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e530:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e532:	2b01      	cmp	r3, #1
 800e534:	d91c      	bls.n	800e570 <HAL_SPI_TransmitReceive+0x288>
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d018      	beq.n	800e570 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	6812      	ldr	r2, [r2, #0]
 800e548:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e54e:	1d1a      	adds	r2, r3, #4
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	3b02      	subs	r3, #2
 800e55e:	b29a      	uxth	r2, r3
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e56c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e56e:	e016      	b.n	800e59e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e574:	881a      	ldrh	r2, [r3, #0]
 800e576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e578:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e57e:	1c9a      	adds	r2, r3, #2
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	3b01      	subs	r3, #1
 800e58e:	b29a      	uxth	r2, r3
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e59c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	695b      	ldr	r3, [r3, #20]
 800e5a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d03a      	beq.n	800e622 <HAL_SPI_TransmitReceive+0x33a>
 800e5ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d037      	beq.n	800e622 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	695b      	ldr	r3, [r3, #20]
 800e5b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d018      	beq.n	800e5f2 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681a      	ldr	r2, [r3, #0]
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e5ca:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5d0:	1d1a      	adds	r2, r3, #4
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	3b02      	subs	r3, #2
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e5f0:	e017      	b.n	800e622 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5f6:	6a3a      	ldr	r2, [r7, #32]
 800e5f8:	8812      	ldrh	r2, [r2, #0]
 800e5fa:	b292      	uxth	r2, r2
 800e5fc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e602:	1c9a      	adds	r2, r3, #2
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e60e:	b29b      	uxth	r3, r3
 800e610:	3b01      	subs	r3, #1
 800e612:	b29a      	uxth	r2, r3
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e620:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e622:	f7f5 fc8f 	bl	8003f44 <HAL_GetTick>
 800e626:	4602      	mov	r2, r0
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	1ad3      	subs	r3, r2, r3
 800e62c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e62e:	429a      	cmp	r2, r3
 800e630:	d803      	bhi.n	800e63a <HAL_SPI_TransmitReceive+0x352>
 800e632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e638:	d102      	bne.n	800e640 <HAL_SPI_TransmitReceive+0x358>
 800e63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d117      	bne.n	800e670 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f000 f94b 	bl	800e8dc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2200      	movs	r2, #0
 800e64a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e654:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2201      	movs	r2, #1
 800e662:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e666:	2301      	movs	r3, #1
 800e668:	e126      	b.n	800e8b8 <HAL_SPI_TransmitReceive+0x5d0>
 800e66a:	bf00      	nop
 800e66c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e670:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e672:	2b00      	cmp	r3, #0
 800e674:	f47f af52 	bne.w	800e51c <HAL_SPI_TransmitReceive+0x234>
 800e678:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	f47f af4e 	bne.w	800e51c <HAL_SPI_TransmitReceive+0x234>
 800e680:	e0f3      	b.n	800e86a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	695b      	ldr	r3, [r3, #20]
 800e688:	f003 0302 	and.w	r3, r3, #2
 800e68c:	2b02      	cmp	r3, #2
 800e68e:	d15a      	bne.n	800e746 <HAL_SPI_TransmitReceive+0x45e>
 800e690:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e692:	2b00      	cmp	r3, #0
 800e694:	d057      	beq.n	800e746 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e696:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e698:	2b03      	cmp	r3, #3
 800e69a:	d91c      	bls.n	800e6d6 <HAL_SPI_TransmitReceive+0x3ee>
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6a0:	2b40      	cmp	r3, #64	; 0x40
 800e6a2:	d918      	bls.n	800e6d6 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	6812      	ldr	r2, [r2, #0]
 800e6ae:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6b4:	1d1a      	adds	r2, r3, #4
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	3b04      	subs	r3, #4
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e6d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e6d4:	e037      	b.n	800e746 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e6d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	d91b      	bls.n	800e714 <HAL_SPI_TransmitReceive+0x42c>
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d017      	beq.n	800e714 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6e8:	881a      	ldrh	r2, [r3, #0]
 800e6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6f2:	1c9a      	adds	r2, r3, #2
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	3b02      	subs	r3, #2
 800e702:	b29a      	uxth	r2, r3
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e710:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e712:	e018      	b.n	800e746 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	3320      	adds	r3, #32
 800e71e:	7812      	ldrb	r2, [r2, #0]
 800e720:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e726:	1c5a      	adds	r2, r3, #1
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e732:	b29b      	uxth	r3, r3
 800e734:	3b01      	subs	r3, #1
 800e736:	b29a      	uxth	r2, r3
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e744:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	695b      	ldr	r3, [r3, #20]
 800e74c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e750:	2b00      	cmp	r3, #0
 800e752:	d05e      	beq.n	800e812 <HAL_SPI_TransmitReceive+0x52a>
 800e754:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e756:	2b00      	cmp	r3, #0
 800e758:	d05b      	beq.n	800e812 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	695b      	ldr	r3, [r3, #20]
 800e760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e764:	2b00      	cmp	r3, #0
 800e766:	d018      	beq.n	800e79a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e770:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e772:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e778:	1d1a      	adds	r2, r3, #4
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e784:	b29b      	uxth	r3, r3
 800e786:	3b04      	subs	r3, #4
 800e788:	b29a      	uxth	r2, r3
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e796:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e798:	e03b      	b.n	800e812 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	695b      	ldr	r3, [r3, #20]
 800e7a0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e7a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7a8:	d918      	bls.n	800e7dc <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7ae:	6a3a      	ldr	r2, [r7, #32]
 800e7b0:	8812      	ldrh	r2, [r2, #0]
 800e7b2:	b292      	uxth	r2, r2
 800e7b4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7ba:	1c9a      	adds	r2, r3, #2
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	3b02      	subs	r3, #2
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e7da:	e01a      	b.n	800e812 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7e8:	7812      	ldrb	r2, [r2, #0]
 800e7ea:	b2d2      	uxtb	r2, r2
 800e7ec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7f2:	1c5a      	adds	r2, r3, #1
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	3b01      	subs	r3, #1
 800e802:	b29a      	uxth	r2, r3
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e810:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e812:	f7f5 fb97 	bl	8003f44 <HAL_GetTick>
 800e816:	4602      	mov	r2, r0
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	1ad3      	subs	r3, r2, r3
 800e81c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e81e:	429a      	cmp	r2, r3
 800e820:	d803      	bhi.n	800e82a <HAL_SPI_TransmitReceive+0x542>
 800e822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e828:	d102      	bne.n	800e830 <HAL_SPI_TransmitReceive+0x548>
 800e82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d114      	bne.n	800e85a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e830:	68f8      	ldr	r0, [r7, #12]
 800e832:	f000 f853 	bl	800e8dc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	2200      	movs	r2, #0
 800e83a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e844:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2201      	movs	r2, #1
 800e852:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e856:	2301      	movs	r3, #1
 800e858:	e02e      	b.n	800e8b8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e85a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f47f af10 	bne.w	800e682 <HAL_SPI_TransmitReceive+0x39a>
 800e862:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e864:	2b00      	cmp	r3, #0
 800e866:	f47f af0c 	bne.w	800e682 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	69fb      	ldr	r3, [r7, #28]
 800e870:	2200      	movs	r2, #0
 800e872:	2108      	movs	r1, #8
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f000 f8d1 	bl	800ea1c <SPI_WaitOnFlagUntilTimeout>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d007      	beq.n	800e890 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e886:	f043 0220 	orr.w	r2, r3, #32
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f000 f823 	bl	800e8dc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d001      	beq.n	800e8b4 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	e001      	b.n	800e8b8 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800e8b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3730      	adds	r7, #48	; 0x30
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e8ce:	b2db      	uxtb	r3, r3
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	370c      	adds	r7, #12
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr

0800e8dc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b085      	sub	sp, #20
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	695b      	ldr	r3, [r3, #20]
 800e8ea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	699a      	ldr	r2, [r3, #24]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f042 0208 	orr.w	r2, r2, #8
 800e8fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	699a      	ldr	r2, [r3, #24]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f042 0210 	orr.w	r2, r2, #16
 800e90a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	681a      	ldr	r2, [r3, #0]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f022 0201 	bic.w	r2, r2, #1
 800e91a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	6919      	ldr	r1, [r3, #16]
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	4b3c      	ldr	r3, [pc, #240]	; (800ea18 <SPI_CloseTransfer+0x13c>)
 800e928:	400b      	ands	r3, r1
 800e92a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	689a      	ldr	r2, [r3, #8]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e93a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e942:	b2db      	uxtb	r3, r3
 800e944:	2b04      	cmp	r3, #4
 800e946:	d014      	beq.n	800e972 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f003 0320 	and.w	r3, r3, #32
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d00f      	beq.n	800e972 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e958:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	699a      	ldr	r2, [r3, #24]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f042 0220 	orr.w	r2, r2, #32
 800e970:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e978:	b2db      	uxtb	r3, r3
 800e97a:	2b03      	cmp	r3, #3
 800e97c:	d014      	beq.n	800e9a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e984:	2b00      	cmp	r3, #0
 800e986:	d00f      	beq.n	800e9a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e98e:	f043 0204 	orr.w	r2, r3, #4
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	699a      	ldr	r2, [r3, #24]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e9a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d00f      	beq.n	800e9d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9b8:	f043 0201 	orr.w	r2, r3, #1
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	699a      	ldr	r2, [r3, #24]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e9d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d00f      	beq.n	800e9fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9e2:	f043 0208 	orr.w	r2, r3, #8
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	699a      	ldr	r2, [r3, #24]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e9fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ea0c:	bf00      	nop
 800ea0e:	3714      	adds	r7, #20
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr
 800ea18:	fffffc90 	.word	0xfffffc90

0800ea1c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	603b      	str	r3, [r7, #0]
 800ea28:	4613      	mov	r3, r2
 800ea2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ea2c:	e010      	b.n	800ea50 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea2e:	f7f5 fa89 	bl	8003f44 <HAL_GetTick>
 800ea32:	4602      	mov	r2, r0
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	69ba      	ldr	r2, [r7, #24]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d803      	bhi.n	800ea46 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea44:	d102      	bne.n	800ea4c <SPI_WaitOnFlagUntilTimeout+0x30>
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d101      	bne.n	800ea50 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ea4c:	2303      	movs	r3, #3
 800ea4e:	e00f      	b.n	800ea70 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	695a      	ldr	r2, [r3, #20]
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	4013      	ands	r3, r2
 800ea5a:	68ba      	ldr	r2, [r7, #8]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	bf0c      	ite	eq
 800ea60:	2301      	moveq	r3, #1
 800ea62:	2300      	movne	r3, #0
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	461a      	mov	r2, r3
 800ea68:	79fb      	ldrb	r3, [r7, #7]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d0df      	beq.n	800ea2e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ea6e:	2300      	movs	r3, #0
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3710      	adds	r7, #16
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b085      	sub	sp, #20
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea84:	095b      	lsrs	r3, r3, #5
 800ea86:	3301      	adds	r3, #1
 800ea88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	3301      	adds	r3, #1
 800ea90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	3307      	adds	r3, #7
 800ea96:	08db      	lsrs	r3, r3, #3
 800ea98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	fb02 f303 	mul.w	r3, r2, r3
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3714      	adds	r7, #20
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr
	...

0800eab0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d101      	bne.n	800eac6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800eac2:	2301      	movs	r3, #1
 800eac4:	e03e      	b.n	800eb44 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d106      	bne.n	800eae0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2200      	movs	r2, #0
 800ead6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	f7f2 fd34 	bl	8001548 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	3308      	adds	r3, #8
 800eae8:	4619      	mov	r1, r3
 800eaea:	4610      	mov	r0, r2
 800eaec:	f001 fdd0 	bl	8010690 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	6818      	ldr	r0, [r3, #0]
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	461a      	mov	r2, r3
 800eafa:	68b9      	ldr	r1, [r7, #8]
 800eafc:	f001 fe58 	bl	80107b0 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6858      	ldr	r0, [r3, #4]
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	689a      	ldr	r2, [r3, #8]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb0c:	6879      	ldr	r1, [r7, #4]
 800eb0e:	f001 fe9f 	bl	8010850 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	68fa      	ldr	r2, [r7, #12]
 800eb18:	6892      	ldr	r2, [r2, #8]
 800eb1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	6892      	ldr	r2, [r2, #8]
 800eb26:	f041 0101 	orr.w	r1, r1, #1
 800eb2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800eb2e:	4b07      	ldr	r3, [pc, #28]	; (800eb4c <HAL_SRAM_Init+0x9c>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	4a06      	ldr	r2, [pc, #24]	; (800eb4c <HAL_SRAM_Init+0x9c>)
 800eb34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eb38:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800eb42:	2300      	movs	r3, #0
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3710      	adds	r7, #16
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	52004000 	.word	0x52004000

0800eb50 <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b089      	sub	sp, #36	; 0x24
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
 800eb5c:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	d12b      	bne.n	800ebca <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d101      	bne.n	800eb80 <HAL_SRAM_Write_8b+0x30>
 800eb7c:	2302      	movs	r3, #2
 800eb7e:	e025      	b.n	800ebcc <HAL_SRAM_Write_8b+0x7c>
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2201      	movs	r2, #1
 800eb84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2202      	movs	r2, #2
 800eb8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	61fb      	str	r3, [r7, #28]
 800eb94:	e00c      	b.n	800ebb0 <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	781a      	ldrb	r2, [r3, #0]
 800eb9a:	69bb      	ldr	r3, [r7, #24]
 800eb9c:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	3301      	adds	r3, #1
 800eba2:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800eba4:	69bb      	ldr	r3, [r7, #24]
 800eba6:	3301      	adds	r3, #1
 800eba8:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800ebaa:	69fb      	ldr	r3, [r7, #28]
 800ebac:	3b01      	subs	r3, #1
 800ebae:	61fb      	str	r3, [r7, #28]
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d1ef      	bne.n	800eb96 <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2201      	movs	r2, #1
 800ebba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	e000      	b.n	800ebcc <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 800ebca:	2301      	movs	r3, #1
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3724      	adds	r7, #36	; 0x24
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr

0800ebd8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d101      	bne.n	800ebea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	e049      	b.n	800ec7e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d106      	bne.n	800ec04 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f7f4 fd3e 	bl	8003680 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2202      	movs	r2, #2
 800ec08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	3304      	adds	r3, #4
 800ec14:	4619      	mov	r1, r3
 800ec16:	4610      	mov	r0, r2
 800ec18:	f000 f8ac 	bl	800ed74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2201      	movs	r2, #1
 800ec20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2201      	movs	r2, #1
 800ec28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2201      	movs	r2, #1
 800ec38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2201      	movs	r2, #1
 800ec40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2201      	movs	r2, #1
 800ec48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2201      	movs	r2, #1
 800ec50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2201      	movs	r2, #1
 800ec58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2201      	movs	r2, #1
 800ec60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2201      	movs	r2, #1
 800ec68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2201      	movs	r2, #1
 800ec70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2201      	movs	r2, #1
 800ec78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec7c:	2300      	movs	r3, #0
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3708      	adds	r7, #8
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
	...

0800ec88 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	60f8      	str	r0, [r7, #12]
 800ec90:	60b9      	str	r1, [r7, #8]
 800ec92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	d101      	bne.n	800eca2 <HAL_TIM_OC_ConfigChannel+0x1a>
 800ec9e:	2302      	movs	r3, #2
 800eca0:	e064      	b.n	800ed6c <HAL_TIM_OC_ConfigChannel+0xe4>
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2201      	movs	r2, #1
 800eca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b14      	cmp	r3, #20
 800ecae:	d857      	bhi.n	800ed60 <HAL_TIM_OC_ConfigChannel+0xd8>
 800ecb0:	a201      	add	r2, pc, #4	; (adr r2, 800ecb8 <HAL_TIM_OC_ConfigChannel+0x30>)
 800ecb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb6:	bf00      	nop
 800ecb8:	0800ed0d 	.word	0x0800ed0d
 800ecbc:	0800ed61 	.word	0x0800ed61
 800ecc0:	0800ed61 	.word	0x0800ed61
 800ecc4:	0800ed61 	.word	0x0800ed61
 800ecc8:	0800ed1b 	.word	0x0800ed1b
 800eccc:	0800ed61 	.word	0x0800ed61
 800ecd0:	0800ed61 	.word	0x0800ed61
 800ecd4:	0800ed61 	.word	0x0800ed61
 800ecd8:	0800ed29 	.word	0x0800ed29
 800ecdc:	0800ed61 	.word	0x0800ed61
 800ece0:	0800ed61 	.word	0x0800ed61
 800ece4:	0800ed61 	.word	0x0800ed61
 800ece8:	0800ed37 	.word	0x0800ed37
 800ecec:	0800ed61 	.word	0x0800ed61
 800ecf0:	0800ed61 	.word	0x0800ed61
 800ecf4:	0800ed61 	.word	0x0800ed61
 800ecf8:	0800ed45 	.word	0x0800ed45
 800ecfc:	0800ed61 	.word	0x0800ed61
 800ed00:	0800ed61 	.word	0x0800ed61
 800ed04:	0800ed61 	.word	0x0800ed61
 800ed08:	0800ed53 	.word	0x0800ed53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	68b9      	ldr	r1, [r7, #8]
 800ed12:	4618      	mov	r0, r3
 800ed14:	f000 f8c8 	bl	800eea8 <TIM_OC1_SetConfig>
      break;
 800ed18:	e023      	b.n	800ed62 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	68b9      	ldr	r1, [r7, #8]
 800ed20:	4618      	mov	r0, r3
 800ed22:	f000 f951 	bl	800efc8 <TIM_OC2_SetConfig>
      break;
 800ed26:	e01c      	b.n	800ed62 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	68b9      	ldr	r1, [r7, #8]
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f000 f9d4 	bl	800f0dc <TIM_OC3_SetConfig>
      break;
 800ed34:	e015      	b.n	800ed62 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	68b9      	ldr	r1, [r7, #8]
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f000 fa53 	bl	800f1e8 <TIM_OC4_SetConfig>
      break;
 800ed42:	e00e      	b.n	800ed62 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	68b9      	ldr	r1, [r7, #8]
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f000 fab4 	bl	800f2b8 <TIM_OC5_SetConfig>
      break;
 800ed50:	e007      	b.n	800ed62 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	68b9      	ldr	r1, [r7, #8]
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f000 fb0f 	bl	800f37c <TIM_OC6_SetConfig>
      break;
 800ed5e:	e000      	b.n	800ed62 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800ed60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2200      	movs	r2, #0
 800ed66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ed6a:	2300      	movs	r3, #0
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b085      	sub	sp, #20
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	4a40      	ldr	r2, [pc, #256]	; (800ee88 <TIM_Base_SetConfig+0x114>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d013      	beq.n	800edb4 <TIM_Base_SetConfig+0x40>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed92:	d00f      	beq.n	800edb4 <TIM_Base_SetConfig+0x40>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	4a3d      	ldr	r2, [pc, #244]	; (800ee8c <TIM_Base_SetConfig+0x118>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d00b      	beq.n	800edb4 <TIM_Base_SetConfig+0x40>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	4a3c      	ldr	r2, [pc, #240]	; (800ee90 <TIM_Base_SetConfig+0x11c>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d007      	beq.n	800edb4 <TIM_Base_SetConfig+0x40>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	4a3b      	ldr	r2, [pc, #236]	; (800ee94 <TIM_Base_SetConfig+0x120>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d003      	beq.n	800edb4 <TIM_Base_SetConfig+0x40>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	4a3a      	ldr	r2, [pc, #232]	; (800ee98 <TIM_Base_SetConfig+0x124>)
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d108      	bne.n	800edc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	68fa      	ldr	r2, [r7, #12]
 800edc2:	4313      	orrs	r3, r2
 800edc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4a2f      	ldr	r2, [pc, #188]	; (800ee88 <TIM_Base_SetConfig+0x114>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d01f      	beq.n	800ee0e <TIM_Base_SetConfig+0x9a>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edd4:	d01b      	beq.n	800ee0e <TIM_Base_SetConfig+0x9a>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	4a2c      	ldr	r2, [pc, #176]	; (800ee8c <TIM_Base_SetConfig+0x118>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d017      	beq.n	800ee0e <TIM_Base_SetConfig+0x9a>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	4a2b      	ldr	r2, [pc, #172]	; (800ee90 <TIM_Base_SetConfig+0x11c>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d013      	beq.n	800ee0e <TIM_Base_SetConfig+0x9a>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	4a2a      	ldr	r2, [pc, #168]	; (800ee94 <TIM_Base_SetConfig+0x120>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d00f      	beq.n	800ee0e <TIM_Base_SetConfig+0x9a>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	4a29      	ldr	r2, [pc, #164]	; (800ee98 <TIM_Base_SetConfig+0x124>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d00b      	beq.n	800ee0e <TIM_Base_SetConfig+0x9a>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	4a28      	ldr	r2, [pc, #160]	; (800ee9c <TIM_Base_SetConfig+0x128>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d007      	beq.n	800ee0e <TIM_Base_SetConfig+0x9a>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	4a27      	ldr	r2, [pc, #156]	; (800eea0 <TIM_Base_SetConfig+0x12c>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d003      	beq.n	800ee0e <TIM_Base_SetConfig+0x9a>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	4a26      	ldr	r2, [pc, #152]	; (800eea4 <TIM_Base_SetConfig+0x130>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d108      	bne.n	800ee20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	68db      	ldr	r3, [r3, #12]
 800ee1a:	68fa      	ldr	r2, [r7, #12]
 800ee1c:	4313      	orrs	r3, r2
 800ee1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	695b      	ldr	r3, [r3, #20]
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	68fa      	ldr	r2, [r7, #12]
 800ee32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	689a      	ldr	r2, [r3, #8]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	4a10      	ldr	r2, [pc, #64]	; (800ee88 <TIM_Base_SetConfig+0x114>)
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	d00f      	beq.n	800ee6c <TIM_Base_SetConfig+0xf8>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	4a12      	ldr	r2, [pc, #72]	; (800ee98 <TIM_Base_SetConfig+0x124>)
 800ee50:	4293      	cmp	r3, r2
 800ee52:	d00b      	beq.n	800ee6c <TIM_Base_SetConfig+0xf8>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	4a11      	ldr	r2, [pc, #68]	; (800ee9c <TIM_Base_SetConfig+0x128>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d007      	beq.n	800ee6c <TIM_Base_SetConfig+0xf8>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	4a10      	ldr	r2, [pc, #64]	; (800eea0 <TIM_Base_SetConfig+0x12c>)
 800ee60:	4293      	cmp	r3, r2
 800ee62:	d003      	beq.n	800ee6c <TIM_Base_SetConfig+0xf8>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	4a0f      	ldr	r2, [pc, #60]	; (800eea4 <TIM_Base_SetConfig+0x130>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d103      	bne.n	800ee74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	691a      	ldr	r2, [r3, #16]
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2201      	movs	r2, #1
 800ee78:	615a      	str	r2, [r3, #20]
}
 800ee7a:	bf00      	nop
 800ee7c:	3714      	adds	r7, #20
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	40010000 	.word	0x40010000
 800ee8c:	40000400 	.word	0x40000400
 800ee90:	40000800 	.word	0x40000800
 800ee94:	40000c00 	.word	0x40000c00
 800ee98:	40010400 	.word	0x40010400
 800ee9c:	40014000 	.word	0x40014000
 800eea0:	40014400 	.word	0x40014400
 800eea4:	40014800 	.word	0x40014800

0800eea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b087      	sub	sp, #28
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6a1b      	ldr	r3, [r3, #32]
 800eeb6:	f023 0201 	bic.w	r2, r3, #1
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6a1b      	ldr	r3, [r3, #32]
 800eec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	699b      	ldr	r3, [r3, #24]
 800eece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	4b37      	ldr	r3, [pc, #220]	; (800efb0 <TIM_OC1_SetConfig+0x108>)
 800eed4:	4013      	ands	r3, r2
 800eed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f023 0303 	bic.w	r3, r3, #3
 800eede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	68fa      	ldr	r2, [r7, #12]
 800eee6:	4313      	orrs	r3, r2
 800eee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	f023 0302 	bic.w	r3, r3, #2
 800eef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	697a      	ldr	r2, [r7, #20]
 800eef8:	4313      	orrs	r3, r2
 800eefa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	4a2d      	ldr	r2, [pc, #180]	; (800efb4 <TIM_OC1_SetConfig+0x10c>)
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d00f      	beq.n	800ef24 <TIM_OC1_SetConfig+0x7c>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a2c      	ldr	r2, [pc, #176]	; (800efb8 <TIM_OC1_SetConfig+0x110>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d00b      	beq.n	800ef24 <TIM_OC1_SetConfig+0x7c>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	4a2b      	ldr	r2, [pc, #172]	; (800efbc <TIM_OC1_SetConfig+0x114>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d007      	beq.n	800ef24 <TIM_OC1_SetConfig+0x7c>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	4a2a      	ldr	r2, [pc, #168]	; (800efc0 <TIM_OC1_SetConfig+0x118>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d003      	beq.n	800ef24 <TIM_OC1_SetConfig+0x7c>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	4a29      	ldr	r2, [pc, #164]	; (800efc4 <TIM_OC1_SetConfig+0x11c>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d10c      	bne.n	800ef3e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	f023 0308 	bic.w	r3, r3, #8
 800ef2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	697a      	ldr	r2, [r7, #20]
 800ef32:	4313      	orrs	r3, r2
 800ef34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	f023 0304 	bic.w	r3, r3, #4
 800ef3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4a1c      	ldr	r2, [pc, #112]	; (800efb4 <TIM_OC1_SetConfig+0x10c>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d00f      	beq.n	800ef66 <TIM_OC1_SetConfig+0xbe>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4a1b      	ldr	r2, [pc, #108]	; (800efb8 <TIM_OC1_SetConfig+0x110>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d00b      	beq.n	800ef66 <TIM_OC1_SetConfig+0xbe>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a1a      	ldr	r2, [pc, #104]	; (800efbc <TIM_OC1_SetConfig+0x114>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d007      	beq.n	800ef66 <TIM_OC1_SetConfig+0xbe>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a19      	ldr	r2, [pc, #100]	; (800efc0 <TIM_OC1_SetConfig+0x118>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d003      	beq.n	800ef66 <TIM_OC1_SetConfig+0xbe>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4a18      	ldr	r2, [pc, #96]	; (800efc4 <TIM_OC1_SetConfig+0x11c>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d111      	bne.n	800ef8a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ef74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	695b      	ldr	r3, [r3, #20]
 800ef7a:	693a      	ldr	r2, [r7, #16]
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	699b      	ldr	r3, [r3, #24]
 800ef84:	693a      	ldr	r2, [r7, #16]
 800ef86:	4313      	orrs	r3, r2
 800ef88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	693a      	ldr	r2, [r7, #16]
 800ef8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	685a      	ldr	r2, [r3, #4]
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	697a      	ldr	r2, [r7, #20]
 800efa2:	621a      	str	r2, [r3, #32]
}
 800efa4:	bf00      	nop
 800efa6:	371c      	adds	r7, #28
 800efa8:	46bd      	mov	sp, r7
 800efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efae:	4770      	bx	lr
 800efb0:	fffeff8f 	.word	0xfffeff8f
 800efb4:	40010000 	.word	0x40010000
 800efb8:	40010400 	.word	0x40010400
 800efbc:	40014000 	.word	0x40014000
 800efc0:	40014400 	.word	0x40014400
 800efc4:	40014800 	.word	0x40014800

0800efc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800efc8:	b480      	push	{r7}
 800efca:	b087      	sub	sp, #28
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6a1b      	ldr	r3, [r3, #32]
 800efd6:	f023 0210 	bic.w	r2, r3, #16
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6a1b      	ldr	r3, [r3, #32]
 800efe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	699b      	ldr	r3, [r3, #24]
 800efee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eff0:	68fa      	ldr	r2, [r7, #12]
 800eff2:	4b34      	ldr	r3, [pc, #208]	; (800f0c4 <TIM_OC2_SetConfig+0xfc>)
 800eff4:	4013      	ands	r3, r2
 800eff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800effe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	021b      	lsls	r3, r3, #8
 800f006:	68fa      	ldr	r2, [r7, #12]
 800f008:	4313      	orrs	r3, r2
 800f00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	f023 0320 	bic.w	r3, r3, #32
 800f012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	689b      	ldr	r3, [r3, #8]
 800f018:	011b      	lsls	r3, r3, #4
 800f01a:	697a      	ldr	r2, [r7, #20]
 800f01c:	4313      	orrs	r3, r2
 800f01e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	4a29      	ldr	r2, [pc, #164]	; (800f0c8 <TIM_OC2_SetConfig+0x100>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d003      	beq.n	800f030 <TIM_OC2_SetConfig+0x68>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4a28      	ldr	r2, [pc, #160]	; (800f0cc <TIM_OC2_SetConfig+0x104>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d10d      	bne.n	800f04c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	011b      	lsls	r3, r3, #4
 800f03e:	697a      	ldr	r2, [r7, #20]
 800f040:	4313      	orrs	r3, r2
 800f042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f04a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	4a1e      	ldr	r2, [pc, #120]	; (800f0c8 <TIM_OC2_SetConfig+0x100>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d00f      	beq.n	800f074 <TIM_OC2_SetConfig+0xac>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	4a1d      	ldr	r2, [pc, #116]	; (800f0cc <TIM_OC2_SetConfig+0x104>)
 800f058:	4293      	cmp	r3, r2
 800f05a:	d00b      	beq.n	800f074 <TIM_OC2_SetConfig+0xac>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4a1c      	ldr	r2, [pc, #112]	; (800f0d0 <TIM_OC2_SetConfig+0x108>)
 800f060:	4293      	cmp	r3, r2
 800f062:	d007      	beq.n	800f074 <TIM_OC2_SetConfig+0xac>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4a1b      	ldr	r2, [pc, #108]	; (800f0d4 <TIM_OC2_SetConfig+0x10c>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d003      	beq.n	800f074 <TIM_OC2_SetConfig+0xac>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4a1a      	ldr	r2, [pc, #104]	; (800f0d8 <TIM_OC2_SetConfig+0x110>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d113      	bne.n	800f09c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f07a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f07c:	693b      	ldr	r3, [r7, #16]
 800f07e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	695b      	ldr	r3, [r3, #20]
 800f088:	009b      	lsls	r3, r3, #2
 800f08a:	693a      	ldr	r2, [r7, #16]
 800f08c:	4313      	orrs	r3, r2
 800f08e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	699b      	ldr	r3, [r3, #24]
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	693a      	ldr	r2, [r7, #16]
 800f098:	4313      	orrs	r3, r2
 800f09a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	693a      	ldr	r2, [r7, #16]
 800f0a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	68fa      	ldr	r2, [r7, #12]
 800f0a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	685a      	ldr	r2, [r3, #4]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	697a      	ldr	r2, [r7, #20]
 800f0b4:	621a      	str	r2, [r3, #32]
}
 800f0b6:	bf00      	nop
 800f0b8:	371c      	adds	r7, #28
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop
 800f0c4:	feff8fff 	.word	0xfeff8fff
 800f0c8:	40010000 	.word	0x40010000
 800f0cc:	40010400 	.word	0x40010400
 800f0d0:	40014000 	.word	0x40014000
 800f0d4:	40014400 	.word	0x40014400
 800f0d8:	40014800 	.word	0x40014800

0800f0dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b087      	sub	sp, #28
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6a1b      	ldr	r3, [r3, #32]
 800f0ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6a1b      	ldr	r3, [r3, #32]
 800f0f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	69db      	ldr	r3, [r3, #28]
 800f102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f10a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f023 0303 	bic.w	r3, r3, #3
 800f112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	68fa      	ldr	r2, [r7, #12]
 800f11a:	4313      	orrs	r3, r2
 800f11c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	689b      	ldr	r3, [r3, #8]
 800f12a:	021b      	lsls	r3, r3, #8
 800f12c:	697a      	ldr	r2, [r7, #20]
 800f12e:	4313      	orrs	r3, r2
 800f130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4a27      	ldr	r2, [pc, #156]	; (800f1d4 <TIM_OC3_SetConfig+0xf8>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d003      	beq.n	800f142 <TIM_OC3_SetConfig+0x66>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4a26      	ldr	r2, [pc, #152]	; (800f1d8 <TIM_OC3_SetConfig+0xfc>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	d10d      	bne.n	800f15e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	68db      	ldr	r3, [r3, #12]
 800f14e:	021b      	lsls	r3, r3, #8
 800f150:	697a      	ldr	r2, [r7, #20]
 800f152:	4313      	orrs	r3, r2
 800f154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f15c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	4a1c      	ldr	r2, [pc, #112]	; (800f1d4 <TIM_OC3_SetConfig+0xf8>)
 800f162:	4293      	cmp	r3, r2
 800f164:	d00f      	beq.n	800f186 <TIM_OC3_SetConfig+0xaa>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	4a1b      	ldr	r2, [pc, #108]	; (800f1d8 <TIM_OC3_SetConfig+0xfc>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d00b      	beq.n	800f186 <TIM_OC3_SetConfig+0xaa>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	4a1a      	ldr	r2, [pc, #104]	; (800f1dc <TIM_OC3_SetConfig+0x100>)
 800f172:	4293      	cmp	r3, r2
 800f174:	d007      	beq.n	800f186 <TIM_OC3_SetConfig+0xaa>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	4a19      	ldr	r2, [pc, #100]	; (800f1e0 <TIM_OC3_SetConfig+0x104>)
 800f17a:	4293      	cmp	r3, r2
 800f17c:	d003      	beq.n	800f186 <TIM_OC3_SetConfig+0xaa>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4a18      	ldr	r2, [pc, #96]	; (800f1e4 <TIM_OC3_SetConfig+0x108>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d113      	bne.n	800f1ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f18c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	695b      	ldr	r3, [r3, #20]
 800f19a:	011b      	lsls	r3, r3, #4
 800f19c:	693a      	ldr	r2, [r7, #16]
 800f19e:	4313      	orrs	r3, r2
 800f1a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	699b      	ldr	r3, [r3, #24]
 800f1a6:	011b      	lsls	r3, r3, #4
 800f1a8:	693a      	ldr	r2, [r7, #16]
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	693a      	ldr	r2, [r7, #16]
 800f1b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	68fa      	ldr	r2, [r7, #12]
 800f1b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	685a      	ldr	r2, [r3, #4]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	697a      	ldr	r2, [r7, #20]
 800f1c6:	621a      	str	r2, [r3, #32]
}
 800f1c8:	bf00      	nop
 800f1ca:	371c      	adds	r7, #28
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr
 800f1d4:	40010000 	.word	0x40010000
 800f1d8:	40010400 	.word	0x40010400
 800f1dc:	40014000 	.word	0x40014000
 800f1e0:	40014400 	.word	0x40014400
 800f1e4:	40014800 	.word	0x40014800

0800f1e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b087      	sub	sp, #28
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6a1b      	ldr	r3, [r3, #32]
 800f1f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6a1b      	ldr	r3, [r3, #32]
 800f202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	69db      	ldr	r3, [r3, #28]
 800f20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f21e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	021b      	lsls	r3, r3, #8
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	4313      	orrs	r3, r2
 800f22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	689b      	ldr	r3, [r3, #8]
 800f238:	031b      	lsls	r3, r3, #12
 800f23a:	693a      	ldr	r2, [r7, #16]
 800f23c:	4313      	orrs	r3, r2
 800f23e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	4a18      	ldr	r2, [pc, #96]	; (800f2a4 <TIM_OC4_SetConfig+0xbc>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d00f      	beq.n	800f268 <TIM_OC4_SetConfig+0x80>
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	4a17      	ldr	r2, [pc, #92]	; (800f2a8 <TIM_OC4_SetConfig+0xc0>)
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d00b      	beq.n	800f268 <TIM_OC4_SetConfig+0x80>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	4a16      	ldr	r2, [pc, #88]	; (800f2ac <TIM_OC4_SetConfig+0xc4>)
 800f254:	4293      	cmp	r3, r2
 800f256:	d007      	beq.n	800f268 <TIM_OC4_SetConfig+0x80>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	4a15      	ldr	r2, [pc, #84]	; (800f2b0 <TIM_OC4_SetConfig+0xc8>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d003      	beq.n	800f268 <TIM_OC4_SetConfig+0x80>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	4a14      	ldr	r2, [pc, #80]	; (800f2b4 <TIM_OC4_SetConfig+0xcc>)
 800f264:	4293      	cmp	r3, r2
 800f266:	d109      	bne.n	800f27c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f26e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	695b      	ldr	r3, [r3, #20]
 800f274:	019b      	lsls	r3, r3, #6
 800f276:	697a      	ldr	r2, [r7, #20]
 800f278:	4313      	orrs	r3, r2
 800f27a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	697a      	ldr	r2, [r7, #20]
 800f280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	68fa      	ldr	r2, [r7, #12]
 800f286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	685a      	ldr	r2, [r3, #4]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	693a      	ldr	r2, [r7, #16]
 800f294:	621a      	str	r2, [r3, #32]
}
 800f296:	bf00      	nop
 800f298:	371c      	adds	r7, #28
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	40010000 	.word	0x40010000
 800f2a8:	40010400 	.word	0x40010400
 800f2ac:	40014000 	.word	0x40014000
 800f2b0:	40014400 	.word	0x40014400
 800f2b4:	40014800 	.word	0x40014800

0800f2b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b087      	sub	sp, #28
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6a1b      	ldr	r3, [r3, #32]
 800f2c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6a1b      	ldr	r3, [r3, #32]
 800f2d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	68fa      	ldr	r2, [r7, #12]
 800f2ee:	4313      	orrs	r3, r2
 800f2f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f2f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	689b      	ldr	r3, [r3, #8]
 800f2fe:	041b      	lsls	r3, r3, #16
 800f300:	693a      	ldr	r2, [r7, #16]
 800f302:	4313      	orrs	r3, r2
 800f304:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4a17      	ldr	r2, [pc, #92]	; (800f368 <TIM_OC5_SetConfig+0xb0>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d00f      	beq.n	800f32e <TIM_OC5_SetConfig+0x76>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	4a16      	ldr	r2, [pc, #88]	; (800f36c <TIM_OC5_SetConfig+0xb4>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d00b      	beq.n	800f32e <TIM_OC5_SetConfig+0x76>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4a15      	ldr	r2, [pc, #84]	; (800f370 <TIM_OC5_SetConfig+0xb8>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d007      	beq.n	800f32e <TIM_OC5_SetConfig+0x76>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4a14      	ldr	r2, [pc, #80]	; (800f374 <TIM_OC5_SetConfig+0xbc>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d003      	beq.n	800f32e <TIM_OC5_SetConfig+0x76>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4a13      	ldr	r2, [pc, #76]	; (800f378 <TIM_OC5_SetConfig+0xc0>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d109      	bne.n	800f342 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f334:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	695b      	ldr	r3, [r3, #20]
 800f33a:	021b      	lsls	r3, r3, #8
 800f33c:	697a      	ldr	r2, [r7, #20]
 800f33e:	4313      	orrs	r3, r2
 800f340:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	697a      	ldr	r2, [r7, #20]
 800f346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	68fa      	ldr	r2, [r7, #12]
 800f34c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	685a      	ldr	r2, [r3, #4]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	693a      	ldr	r2, [r7, #16]
 800f35a:	621a      	str	r2, [r3, #32]
}
 800f35c:	bf00      	nop
 800f35e:	371c      	adds	r7, #28
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr
 800f368:	40010000 	.word	0x40010000
 800f36c:	40010400 	.word	0x40010400
 800f370:	40014000 	.word	0x40014000
 800f374:	40014400 	.word	0x40014400
 800f378:	40014800 	.word	0x40014800

0800f37c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f37c:	b480      	push	{r7}
 800f37e:	b087      	sub	sp, #28
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6a1b      	ldr	r3, [r3, #32]
 800f38a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6a1b      	ldr	r3, [r3, #32]
 800f396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	021b      	lsls	r3, r3, #8
 800f3b2:	68fa      	ldr	r2, [r7, #12]
 800f3b4:	4313      	orrs	r3, r2
 800f3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f3be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	689b      	ldr	r3, [r3, #8]
 800f3c4:	051b      	lsls	r3, r3, #20
 800f3c6:	693a      	ldr	r2, [r7, #16]
 800f3c8:	4313      	orrs	r3, r2
 800f3ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	4a18      	ldr	r2, [pc, #96]	; (800f430 <TIM_OC6_SetConfig+0xb4>)
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	d00f      	beq.n	800f3f4 <TIM_OC6_SetConfig+0x78>
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	4a17      	ldr	r2, [pc, #92]	; (800f434 <TIM_OC6_SetConfig+0xb8>)
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	d00b      	beq.n	800f3f4 <TIM_OC6_SetConfig+0x78>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	4a16      	ldr	r2, [pc, #88]	; (800f438 <TIM_OC6_SetConfig+0xbc>)
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	d007      	beq.n	800f3f4 <TIM_OC6_SetConfig+0x78>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	4a15      	ldr	r2, [pc, #84]	; (800f43c <TIM_OC6_SetConfig+0xc0>)
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d003      	beq.n	800f3f4 <TIM_OC6_SetConfig+0x78>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4a14      	ldr	r2, [pc, #80]	; (800f440 <TIM_OC6_SetConfig+0xc4>)
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d109      	bne.n	800f408 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f3fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	695b      	ldr	r3, [r3, #20]
 800f400:	029b      	lsls	r3, r3, #10
 800f402:	697a      	ldr	r2, [r7, #20]
 800f404:	4313      	orrs	r3, r2
 800f406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	697a      	ldr	r2, [r7, #20]
 800f40c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	685a      	ldr	r2, [r3, #4]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	693a      	ldr	r2, [r7, #16]
 800f420:	621a      	str	r2, [r3, #32]
}
 800f422:	bf00      	nop
 800f424:	371c      	adds	r7, #28
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop
 800f430:	40010000 	.word	0x40010000
 800f434:	40010400 	.word	0x40010400
 800f438:	40014000 	.word	0x40014000
 800f43c:	40014400 	.word	0x40014400
 800f440:	40014800 	.word	0x40014800

0800f444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f444:	b480      	push	{r7}
 800f446:	b085      	sub	sp, #20
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f454:	2b01      	cmp	r3, #1
 800f456:	d101      	bne.n	800f45c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f458:	2302      	movs	r3, #2
 800f45a:	e068      	b.n	800f52e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2201      	movs	r2, #1
 800f460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2202      	movs	r2, #2
 800f468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	689b      	ldr	r3, [r3, #8]
 800f47a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	4a2e      	ldr	r2, [pc, #184]	; (800f53c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f482:	4293      	cmp	r3, r2
 800f484:	d004      	beq.n	800f490 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	4a2d      	ldr	r2, [pc, #180]	; (800f540 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d108      	bne.n	800f4a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f496:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	68fa      	ldr	r2, [r7, #12]
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	68fa      	ldr	r2, [r7, #12]
 800f4b0:	4313      	orrs	r3, r2
 800f4b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	68fa      	ldr	r2, [r7, #12]
 800f4ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	4a1e      	ldr	r2, [pc, #120]	; (800f53c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d01d      	beq.n	800f502 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4ce:	d018      	beq.n	800f502 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	4a1b      	ldr	r2, [pc, #108]	; (800f544 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	d013      	beq.n	800f502 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	4a1a      	ldr	r2, [pc, #104]	; (800f548 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d00e      	beq.n	800f502 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	4a18      	ldr	r2, [pc, #96]	; (800f54c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d009      	beq.n	800f502 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	4a13      	ldr	r2, [pc, #76]	; (800f540 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d004      	beq.n	800f502 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4a14      	ldr	r2, [pc, #80]	; (800f550 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d10c      	bne.n	800f51c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	689b      	ldr	r3, [r3, #8]
 800f50e:	68ba      	ldr	r2, [r7, #8]
 800f510:	4313      	orrs	r3, r2
 800f512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	68ba      	ldr	r2, [r7, #8]
 800f51a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2201      	movs	r2, #1
 800f520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2200      	movs	r2, #0
 800f528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f52c:	2300      	movs	r3, #0
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3714      	adds	r7, #20
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr
 800f53a:	bf00      	nop
 800f53c:	40010000 	.word	0x40010000
 800f540:	40010400 	.word	0x40010400
 800f544:	40000400 	.word	0x40000400
 800f548:	40000800 	.word	0x40000800
 800f54c:	40000c00 	.word	0x40000c00
 800f550:	40001800 	.word	0x40001800

0800f554 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f55e:	2300      	movs	r3, #0
 800f560:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d101      	bne.n	800f570 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f56c:	2302      	movs	r3, #2
 800f56e:	e065      	b.n	800f63c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2201      	movs	r2, #1
 800f574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	4313      	orrs	r3, r2
 800f584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	689b      	ldr	r3, [r3, #8]
 800f590:	4313      	orrs	r3, r2
 800f592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	4313      	orrs	r3, r2
 800f5a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	691b      	ldr	r3, [r3, #16]
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	695b      	ldr	r3, [r3, #20]
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5d6:	4313      	orrs	r3, r2
 800f5d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	699b      	ldr	r3, [r3, #24]
 800f5e4:	041b      	lsls	r3, r3, #16
 800f5e6:	4313      	orrs	r3, r2
 800f5e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	4a16      	ldr	r2, [pc, #88]	; (800f648 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d004      	beq.n	800f5fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	4a14      	ldr	r2, [pc, #80]	; (800f64c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d115      	bne.n	800f62a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f608:	051b      	lsls	r3, r3, #20
 800f60a:	4313      	orrs	r3, r2
 800f60c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	69db      	ldr	r3, [r3, #28]
 800f618:	4313      	orrs	r3, r2
 800f61a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	6a1b      	ldr	r3, [r3, #32]
 800f626:	4313      	orrs	r3, r2
 800f628:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	68fa      	ldr	r2, [r7, #12]
 800f630:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2200      	movs	r2, #0
 800f636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f63a:	2300      	movs	r3, #0
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3714      	adds	r7, #20
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr
 800f648:	40010000 	.word	0x40010000
 800f64c:	40010400 	.word	0x40010400

0800f650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b082      	sub	sp, #8
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d101      	bne.n	800f662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f65e:	2301      	movs	r3, #1
 800f660:	e042      	b.n	800f6e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d106      	bne.n	800f67a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f7f4 f9ad 	bl	80039d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2224      	movs	r2, #36	; 0x24
 800f67e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	681a      	ldr	r2, [r3, #0]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f022 0201 	bic.w	r2, r2, #1
 800f690:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f000 f82c 	bl	800f6f0 <UART_SetConfig>
 800f698:	4603      	mov	r3, r0
 800f69a:	2b01      	cmp	r3, #1
 800f69c:	d101      	bne.n	800f6a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e022      	b.n	800f6e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d002      	beq.n	800f6b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 fd80 	bl	80101b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	685a      	ldr	r2, [r3, #4]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f6be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	689a      	ldr	r2, [r3, #8]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f6ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	681a      	ldr	r2, [r3, #0]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f042 0201 	orr.w	r2, r2, #1
 800f6de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f000 fe07 	bl	80102f4 <UART_CheckIdleState>
 800f6e6:	4603      	mov	r3, r0
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f6f0:	b5b0      	push	{r4, r5, r7, lr}
 800f6f2:	b08e      	sub	sp, #56	; 0x38
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	689a      	ldr	r2, [r3, #8]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	691b      	ldr	r3, [r3, #16]
 800f706:	431a      	orrs	r2, r3
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	695b      	ldr	r3, [r3, #20]
 800f70c:	431a      	orrs	r2, r3
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	69db      	ldr	r3, [r3, #28]
 800f712:	4313      	orrs	r3, r2
 800f714:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	4bbf      	ldr	r3, [pc, #764]	; (800fa1c <UART_SetConfig+0x32c>)
 800f71e:	4013      	ands	r3, r2
 800f720:	687a      	ldr	r2, [r7, #4]
 800f722:	6812      	ldr	r2, [r2, #0]
 800f724:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f726:	430b      	orrs	r3, r1
 800f728:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	68da      	ldr	r2, [r3, #12]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	430a      	orrs	r2, r1
 800f73e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	699b      	ldr	r3, [r3, #24]
 800f744:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	4ab5      	ldr	r2, [pc, #724]	; (800fa20 <UART_SetConfig+0x330>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d004      	beq.n	800f75a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6a1b      	ldr	r3, [r3, #32]
 800f754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f756:	4313      	orrs	r3, r2
 800f758:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	689a      	ldr	r2, [r3, #8]
 800f760:	4bb0      	ldr	r3, [pc, #704]	; (800fa24 <UART_SetConfig+0x334>)
 800f762:	4013      	ands	r3, r2
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	6812      	ldr	r2, [r2, #0]
 800f768:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f76a:	430b      	orrs	r3, r1
 800f76c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f774:	f023 010f 	bic.w	r1, r3, #15
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	430a      	orrs	r2, r1
 800f782:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	4aa7      	ldr	r2, [pc, #668]	; (800fa28 <UART_SetConfig+0x338>)
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d176      	bne.n	800f87c <UART_SetConfig+0x18c>
 800f78e:	4ba7      	ldr	r3, [pc, #668]	; (800fa2c <UART_SetConfig+0x33c>)
 800f790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f796:	2b28      	cmp	r3, #40	; 0x28
 800f798:	d86c      	bhi.n	800f874 <UART_SetConfig+0x184>
 800f79a:	a201      	add	r2, pc, #4	; (adr r2, 800f7a0 <UART_SetConfig+0xb0>)
 800f79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a0:	0800f845 	.word	0x0800f845
 800f7a4:	0800f875 	.word	0x0800f875
 800f7a8:	0800f875 	.word	0x0800f875
 800f7ac:	0800f875 	.word	0x0800f875
 800f7b0:	0800f875 	.word	0x0800f875
 800f7b4:	0800f875 	.word	0x0800f875
 800f7b8:	0800f875 	.word	0x0800f875
 800f7bc:	0800f875 	.word	0x0800f875
 800f7c0:	0800f84d 	.word	0x0800f84d
 800f7c4:	0800f875 	.word	0x0800f875
 800f7c8:	0800f875 	.word	0x0800f875
 800f7cc:	0800f875 	.word	0x0800f875
 800f7d0:	0800f875 	.word	0x0800f875
 800f7d4:	0800f875 	.word	0x0800f875
 800f7d8:	0800f875 	.word	0x0800f875
 800f7dc:	0800f875 	.word	0x0800f875
 800f7e0:	0800f855 	.word	0x0800f855
 800f7e4:	0800f875 	.word	0x0800f875
 800f7e8:	0800f875 	.word	0x0800f875
 800f7ec:	0800f875 	.word	0x0800f875
 800f7f0:	0800f875 	.word	0x0800f875
 800f7f4:	0800f875 	.word	0x0800f875
 800f7f8:	0800f875 	.word	0x0800f875
 800f7fc:	0800f875 	.word	0x0800f875
 800f800:	0800f85d 	.word	0x0800f85d
 800f804:	0800f875 	.word	0x0800f875
 800f808:	0800f875 	.word	0x0800f875
 800f80c:	0800f875 	.word	0x0800f875
 800f810:	0800f875 	.word	0x0800f875
 800f814:	0800f875 	.word	0x0800f875
 800f818:	0800f875 	.word	0x0800f875
 800f81c:	0800f875 	.word	0x0800f875
 800f820:	0800f865 	.word	0x0800f865
 800f824:	0800f875 	.word	0x0800f875
 800f828:	0800f875 	.word	0x0800f875
 800f82c:	0800f875 	.word	0x0800f875
 800f830:	0800f875 	.word	0x0800f875
 800f834:	0800f875 	.word	0x0800f875
 800f838:	0800f875 	.word	0x0800f875
 800f83c:	0800f875 	.word	0x0800f875
 800f840:	0800f86d 	.word	0x0800f86d
 800f844:	2301      	movs	r3, #1
 800f846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f84a:	e222      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f84c:	2304      	movs	r3, #4
 800f84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f852:	e21e      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f854:	2308      	movs	r3, #8
 800f856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f85a:	e21a      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f85c:	2310      	movs	r3, #16
 800f85e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f862:	e216      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f864:	2320      	movs	r3, #32
 800f866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f86a:	e212      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f86c:	2340      	movs	r3, #64	; 0x40
 800f86e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f872:	e20e      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f874:	2380      	movs	r3, #128	; 0x80
 800f876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f87a:	e20a      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4a6b      	ldr	r2, [pc, #428]	; (800fa30 <UART_SetConfig+0x340>)
 800f882:	4293      	cmp	r3, r2
 800f884:	d130      	bne.n	800f8e8 <UART_SetConfig+0x1f8>
 800f886:	4b69      	ldr	r3, [pc, #420]	; (800fa2c <UART_SetConfig+0x33c>)
 800f888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f88a:	f003 0307 	and.w	r3, r3, #7
 800f88e:	2b05      	cmp	r3, #5
 800f890:	d826      	bhi.n	800f8e0 <UART_SetConfig+0x1f0>
 800f892:	a201      	add	r2, pc, #4	; (adr r2, 800f898 <UART_SetConfig+0x1a8>)
 800f894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f898:	0800f8b1 	.word	0x0800f8b1
 800f89c:	0800f8b9 	.word	0x0800f8b9
 800f8a0:	0800f8c1 	.word	0x0800f8c1
 800f8a4:	0800f8c9 	.word	0x0800f8c9
 800f8a8:	0800f8d1 	.word	0x0800f8d1
 800f8ac:	0800f8d9 	.word	0x0800f8d9
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8b6:	e1ec      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f8b8:	2304      	movs	r3, #4
 800f8ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8be:	e1e8      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f8c0:	2308      	movs	r3, #8
 800f8c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8c6:	e1e4      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f8c8:	2310      	movs	r3, #16
 800f8ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8ce:	e1e0      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f8d0:	2320      	movs	r3, #32
 800f8d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8d6:	e1dc      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f8d8:	2340      	movs	r3, #64	; 0x40
 800f8da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8de:	e1d8      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f8e0:	2380      	movs	r3, #128	; 0x80
 800f8e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8e6:	e1d4      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	4a51      	ldr	r2, [pc, #324]	; (800fa34 <UART_SetConfig+0x344>)
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d130      	bne.n	800f954 <UART_SetConfig+0x264>
 800f8f2:	4b4e      	ldr	r3, [pc, #312]	; (800fa2c <UART_SetConfig+0x33c>)
 800f8f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8f6:	f003 0307 	and.w	r3, r3, #7
 800f8fa:	2b05      	cmp	r3, #5
 800f8fc:	d826      	bhi.n	800f94c <UART_SetConfig+0x25c>
 800f8fe:	a201      	add	r2, pc, #4	; (adr r2, 800f904 <UART_SetConfig+0x214>)
 800f900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f904:	0800f91d 	.word	0x0800f91d
 800f908:	0800f925 	.word	0x0800f925
 800f90c:	0800f92d 	.word	0x0800f92d
 800f910:	0800f935 	.word	0x0800f935
 800f914:	0800f93d 	.word	0x0800f93d
 800f918:	0800f945 	.word	0x0800f945
 800f91c:	2300      	movs	r3, #0
 800f91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f922:	e1b6      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f924:	2304      	movs	r3, #4
 800f926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f92a:	e1b2      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f92c:	2308      	movs	r3, #8
 800f92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f932:	e1ae      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f934:	2310      	movs	r3, #16
 800f936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f93a:	e1aa      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f93c:	2320      	movs	r3, #32
 800f93e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f942:	e1a6      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f944:	2340      	movs	r3, #64	; 0x40
 800f946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f94a:	e1a2      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f94c:	2380      	movs	r3, #128	; 0x80
 800f94e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f952:	e19e      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	4a37      	ldr	r2, [pc, #220]	; (800fa38 <UART_SetConfig+0x348>)
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d130      	bne.n	800f9c0 <UART_SetConfig+0x2d0>
 800f95e:	4b33      	ldr	r3, [pc, #204]	; (800fa2c <UART_SetConfig+0x33c>)
 800f960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f962:	f003 0307 	and.w	r3, r3, #7
 800f966:	2b05      	cmp	r3, #5
 800f968:	d826      	bhi.n	800f9b8 <UART_SetConfig+0x2c8>
 800f96a:	a201      	add	r2, pc, #4	; (adr r2, 800f970 <UART_SetConfig+0x280>)
 800f96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f970:	0800f989 	.word	0x0800f989
 800f974:	0800f991 	.word	0x0800f991
 800f978:	0800f999 	.word	0x0800f999
 800f97c:	0800f9a1 	.word	0x0800f9a1
 800f980:	0800f9a9 	.word	0x0800f9a9
 800f984:	0800f9b1 	.word	0x0800f9b1
 800f988:	2300      	movs	r3, #0
 800f98a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f98e:	e180      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f990:	2304      	movs	r3, #4
 800f992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f996:	e17c      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f998:	2308      	movs	r3, #8
 800f99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f99e:	e178      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f9a0:	2310      	movs	r3, #16
 800f9a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9a6:	e174      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f9a8:	2320      	movs	r3, #32
 800f9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9ae:	e170      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f9b0:	2340      	movs	r3, #64	; 0x40
 800f9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9b6:	e16c      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f9b8:	2380      	movs	r3, #128	; 0x80
 800f9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9be:	e168      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	4a1d      	ldr	r2, [pc, #116]	; (800fa3c <UART_SetConfig+0x34c>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d142      	bne.n	800fa50 <UART_SetConfig+0x360>
 800f9ca:	4b18      	ldr	r3, [pc, #96]	; (800fa2c <UART_SetConfig+0x33c>)
 800f9cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9ce:	f003 0307 	and.w	r3, r3, #7
 800f9d2:	2b05      	cmp	r3, #5
 800f9d4:	d838      	bhi.n	800fa48 <UART_SetConfig+0x358>
 800f9d6:	a201      	add	r2, pc, #4	; (adr r2, 800f9dc <UART_SetConfig+0x2ec>)
 800f9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9dc:	0800f9f5 	.word	0x0800f9f5
 800f9e0:	0800f9fd 	.word	0x0800f9fd
 800f9e4:	0800fa05 	.word	0x0800fa05
 800f9e8:	0800fa0d 	.word	0x0800fa0d
 800f9ec:	0800fa15 	.word	0x0800fa15
 800f9f0:	0800fa41 	.word	0x0800fa41
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9fa:	e14a      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800f9fc:	2304      	movs	r3, #4
 800f9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa02:	e146      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fa04:	2308      	movs	r3, #8
 800fa06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa0a:	e142      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fa0c:	2310      	movs	r3, #16
 800fa0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa12:	e13e      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fa14:	2320      	movs	r3, #32
 800fa16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa1a:	e13a      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fa1c:	cfff69f3 	.word	0xcfff69f3
 800fa20:	58000c00 	.word	0x58000c00
 800fa24:	11fff4ff 	.word	0x11fff4ff
 800fa28:	40011000 	.word	0x40011000
 800fa2c:	58024400 	.word	0x58024400
 800fa30:	40004400 	.word	0x40004400
 800fa34:	40004800 	.word	0x40004800
 800fa38:	40004c00 	.word	0x40004c00
 800fa3c:	40005000 	.word	0x40005000
 800fa40:	2340      	movs	r3, #64	; 0x40
 800fa42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa46:	e124      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fa48:	2380      	movs	r3, #128	; 0x80
 800fa4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa4e:	e120      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	4acc      	ldr	r2, [pc, #816]	; (800fd88 <UART_SetConfig+0x698>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d176      	bne.n	800fb48 <UART_SetConfig+0x458>
 800fa5a:	4bcc      	ldr	r3, [pc, #816]	; (800fd8c <UART_SetConfig+0x69c>)
 800fa5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fa62:	2b28      	cmp	r3, #40	; 0x28
 800fa64:	d86c      	bhi.n	800fb40 <UART_SetConfig+0x450>
 800fa66:	a201      	add	r2, pc, #4	; (adr r2, 800fa6c <UART_SetConfig+0x37c>)
 800fa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa6c:	0800fb11 	.word	0x0800fb11
 800fa70:	0800fb41 	.word	0x0800fb41
 800fa74:	0800fb41 	.word	0x0800fb41
 800fa78:	0800fb41 	.word	0x0800fb41
 800fa7c:	0800fb41 	.word	0x0800fb41
 800fa80:	0800fb41 	.word	0x0800fb41
 800fa84:	0800fb41 	.word	0x0800fb41
 800fa88:	0800fb41 	.word	0x0800fb41
 800fa8c:	0800fb19 	.word	0x0800fb19
 800fa90:	0800fb41 	.word	0x0800fb41
 800fa94:	0800fb41 	.word	0x0800fb41
 800fa98:	0800fb41 	.word	0x0800fb41
 800fa9c:	0800fb41 	.word	0x0800fb41
 800faa0:	0800fb41 	.word	0x0800fb41
 800faa4:	0800fb41 	.word	0x0800fb41
 800faa8:	0800fb41 	.word	0x0800fb41
 800faac:	0800fb21 	.word	0x0800fb21
 800fab0:	0800fb41 	.word	0x0800fb41
 800fab4:	0800fb41 	.word	0x0800fb41
 800fab8:	0800fb41 	.word	0x0800fb41
 800fabc:	0800fb41 	.word	0x0800fb41
 800fac0:	0800fb41 	.word	0x0800fb41
 800fac4:	0800fb41 	.word	0x0800fb41
 800fac8:	0800fb41 	.word	0x0800fb41
 800facc:	0800fb29 	.word	0x0800fb29
 800fad0:	0800fb41 	.word	0x0800fb41
 800fad4:	0800fb41 	.word	0x0800fb41
 800fad8:	0800fb41 	.word	0x0800fb41
 800fadc:	0800fb41 	.word	0x0800fb41
 800fae0:	0800fb41 	.word	0x0800fb41
 800fae4:	0800fb41 	.word	0x0800fb41
 800fae8:	0800fb41 	.word	0x0800fb41
 800faec:	0800fb31 	.word	0x0800fb31
 800faf0:	0800fb41 	.word	0x0800fb41
 800faf4:	0800fb41 	.word	0x0800fb41
 800faf8:	0800fb41 	.word	0x0800fb41
 800fafc:	0800fb41 	.word	0x0800fb41
 800fb00:	0800fb41 	.word	0x0800fb41
 800fb04:	0800fb41 	.word	0x0800fb41
 800fb08:	0800fb41 	.word	0x0800fb41
 800fb0c:	0800fb39 	.word	0x0800fb39
 800fb10:	2301      	movs	r3, #1
 800fb12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb16:	e0bc      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fb18:	2304      	movs	r3, #4
 800fb1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb1e:	e0b8      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fb20:	2308      	movs	r3, #8
 800fb22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb26:	e0b4      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fb28:	2310      	movs	r3, #16
 800fb2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb2e:	e0b0      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fb30:	2320      	movs	r3, #32
 800fb32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb36:	e0ac      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fb38:	2340      	movs	r3, #64	; 0x40
 800fb3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb3e:	e0a8      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fb40:	2380      	movs	r3, #128	; 0x80
 800fb42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb46:	e0a4      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	4a90      	ldr	r2, [pc, #576]	; (800fd90 <UART_SetConfig+0x6a0>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d130      	bne.n	800fbb4 <UART_SetConfig+0x4c4>
 800fb52:	4b8e      	ldr	r3, [pc, #568]	; (800fd8c <UART_SetConfig+0x69c>)
 800fb54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb56:	f003 0307 	and.w	r3, r3, #7
 800fb5a:	2b05      	cmp	r3, #5
 800fb5c:	d826      	bhi.n	800fbac <UART_SetConfig+0x4bc>
 800fb5e:	a201      	add	r2, pc, #4	; (adr r2, 800fb64 <UART_SetConfig+0x474>)
 800fb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb64:	0800fb7d 	.word	0x0800fb7d
 800fb68:	0800fb85 	.word	0x0800fb85
 800fb6c:	0800fb8d 	.word	0x0800fb8d
 800fb70:	0800fb95 	.word	0x0800fb95
 800fb74:	0800fb9d 	.word	0x0800fb9d
 800fb78:	0800fba5 	.word	0x0800fba5
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb82:	e086      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fb84:	2304      	movs	r3, #4
 800fb86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb8a:	e082      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fb8c:	2308      	movs	r3, #8
 800fb8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb92:	e07e      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fb94:	2310      	movs	r3, #16
 800fb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb9a:	e07a      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fb9c:	2320      	movs	r3, #32
 800fb9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fba2:	e076      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fba4:	2340      	movs	r3, #64	; 0x40
 800fba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbaa:	e072      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fbac:	2380      	movs	r3, #128	; 0x80
 800fbae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbb2:	e06e      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	4a76      	ldr	r2, [pc, #472]	; (800fd94 <UART_SetConfig+0x6a4>)
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d130      	bne.n	800fc20 <UART_SetConfig+0x530>
 800fbbe:	4b73      	ldr	r3, [pc, #460]	; (800fd8c <UART_SetConfig+0x69c>)
 800fbc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbc2:	f003 0307 	and.w	r3, r3, #7
 800fbc6:	2b05      	cmp	r3, #5
 800fbc8:	d826      	bhi.n	800fc18 <UART_SetConfig+0x528>
 800fbca:	a201      	add	r2, pc, #4	; (adr r2, 800fbd0 <UART_SetConfig+0x4e0>)
 800fbcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbd0:	0800fbe9 	.word	0x0800fbe9
 800fbd4:	0800fbf1 	.word	0x0800fbf1
 800fbd8:	0800fbf9 	.word	0x0800fbf9
 800fbdc:	0800fc01 	.word	0x0800fc01
 800fbe0:	0800fc09 	.word	0x0800fc09
 800fbe4:	0800fc11 	.word	0x0800fc11
 800fbe8:	2300      	movs	r3, #0
 800fbea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbee:	e050      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fbf0:	2304      	movs	r3, #4
 800fbf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbf6:	e04c      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fbf8:	2308      	movs	r3, #8
 800fbfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbfe:	e048      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fc00:	2310      	movs	r3, #16
 800fc02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc06:	e044      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fc08:	2320      	movs	r3, #32
 800fc0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc0e:	e040      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fc10:	2340      	movs	r3, #64	; 0x40
 800fc12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc16:	e03c      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fc18:	2380      	movs	r3, #128	; 0x80
 800fc1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc1e:	e038      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4a5c      	ldr	r2, [pc, #368]	; (800fd98 <UART_SetConfig+0x6a8>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d130      	bne.n	800fc8c <UART_SetConfig+0x59c>
 800fc2a:	4b58      	ldr	r3, [pc, #352]	; (800fd8c <UART_SetConfig+0x69c>)
 800fc2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc2e:	f003 0307 	and.w	r3, r3, #7
 800fc32:	2b05      	cmp	r3, #5
 800fc34:	d826      	bhi.n	800fc84 <UART_SetConfig+0x594>
 800fc36:	a201      	add	r2, pc, #4	; (adr r2, 800fc3c <UART_SetConfig+0x54c>)
 800fc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc3c:	0800fc55 	.word	0x0800fc55
 800fc40:	0800fc5d 	.word	0x0800fc5d
 800fc44:	0800fc65 	.word	0x0800fc65
 800fc48:	0800fc6d 	.word	0x0800fc6d
 800fc4c:	0800fc75 	.word	0x0800fc75
 800fc50:	0800fc7d 	.word	0x0800fc7d
 800fc54:	2302      	movs	r3, #2
 800fc56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc5a:	e01a      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fc5c:	2304      	movs	r3, #4
 800fc5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc62:	e016      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fc64:	2308      	movs	r3, #8
 800fc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc6a:	e012      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fc6c:	2310      	movs	r3, #16
 800fc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc72:	e00e      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fc74:	2320      	movs	r3, #32
 800fc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc7a:	e00a      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fc7c:	2340      	movs	r3, #64	; 0x40
 800fc7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc82:	e006      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fc84:	2380      	movs	r3, #128	; 0x80
 800fc86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc8a:	e002      	b.n	800fc92 <UART_SetConfig+0x5a2>
 800fc8c:	2380      	movs	r3, #128	; 0x80
 800fc8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	4a40      	ldr	r2, [pc, #256]	; (800fd98 <UART_SetConfig+0x6a8>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	f040 80ef 	bne.w	800fe7c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fc9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fca2:	2b20      	cmp	r3, #32
 800fca4:	dc46      	bgt.n	800fd34 <UART_SetConfig+0x644>
 800fca6:	2b02      	cmp	r3, #2
 800fca8:	f2c0 8081 	blt.w	800fdae <UART_SetConfig+0x6be>
 800fcac:	3b02      	subs	r3, #2
 800fcae:	2b1e      	cmp	r3, #30
 800fcb0:	d87d      	bhi.n	800fdae <UART_SetConfig+0x6be>
 800fcb2:	a201      	add	r2, pc, #4	; (adr r2, 800fcb8 <UART_SetConfig+0x5c8>)
 800fcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb8:	0800fd3b 	.word	0x0800fd3b
 800fcbc:	0800fdaf 	.word	0x0800fdaf
 800fcc0:	0800fd43 	.word	0x0800fd43
 800fcc4:	0800fdaf 	.word	0x0800fdaf
 800fcc8:	0800fdaf 	.word	0x0800fdaf
 800fccc:	0800fdaf 	.word	0x0800fdaf
 800fcd0:	0800fd53 	.word	0x0800fd53
 800fcd4:	0800fdaf 	.word	0x0800fdaf
 800fcd8:	0800fdaf 	.word	0x0800fdaf
 800fcdc:	0800fdaf 	.word	0x0800fdaf
 800fce0:	0800fdaf 	.word	0x0800fdaf
 800fce4:	0800fdaf 	.word	0x0800fdaf
 800fce8:	0800fdaf 	.word	0x0800fdaf
 800fcec:	0800fdaf 	.word	0x0800fdaf
 800fcf0:	0800fd63 	.word	0x0800fd63
 800fcf4:	0800fdaf 	.word	0x0800fdaf
 800fcf8:	0800fdaf 	.word	0x0800fdaf
 800fcfc:	0800fdaf 	.word	0x0800fdaf
 800fd00:	0800fdaf 	.word	0x0800fdaf
 800fd04:	0800fdaf 	.word	0x0800fdaf
 800fd08:	0800fdaf 	.word	0x0800fdaf
 800fd0c:	0800fdaf 	.word	0x0800fdaf
 800fd10:	0800fdaf 	.word	0x0800fdaf
 800fd14:	0800fdaf 	.word	0x0800fdaf
 800fd18:	0800fdaf 	.word	0x0800fdaf
 800fd1c:	0800fdaf 	.word	0x0800fdaf
 800fd20:	0800fdaf 	.word	0x0800fdaf
 800fd24:	0800fdaf 	.word	0x0800fdaf
 800fd28:	0800fdaf 	.word	0x0800fdaf
 800fd2c:	0800fdaf 	.word	0x0800fdaf
 800fd30:	0800fda1 	.word	0x0800fda1
 800fd34:	2b40      	cmp	r3, #64	; 0x40
 800fd36:	d036      	beq.n	800fda6 <UART_SetConfig+0x6b6>
 800fd38:	e039      	b.n	800fdae <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fd3a:	f7fc fa2b 	bl	800c194 <HAL_RCCEx_GetD3PCLK1Freq>
 800fd3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fd40:	e03b      	b.n	800fdba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd42:	f107 0314 	add.w	r3, r7, #20
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fc fa3a 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd4c:	69bb      	ldr	r3, [r7, #24]
 800fd4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fd50:	e033      	b.n	800fdba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd52:	f107 0308 	add.w	r3, r7, #8
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7fc fb86 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fd60:	e02b      	b.n	800fdba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd62:	4b0a      	ldr	r3, [pc, #40]	; (800fd8c <UART_SetConfig+0x69c>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f003 0320 	and.w	r3, r3, #32
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d009      	beq.n	800fd82 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd6e:	4b07      	ldr	r3, [pc, #28]	; (800fd8c <UART_SetConfig+0x69c>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	08db      	lsrs	r3, r3, #3
 800fd74:	f003 0303 	and.w	r3, r3, #3
 800fd78:	4a08      	ldr	r2, [pc, #32]	; (800fd9c <UART_SetConfig+0x6ac>)
 800fd7a:	fa22 f303 	lsr.w	r3, r2, r3
 800fd7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd80:	e01b      	b.n	800fdba <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800fd82:	4b06      	ldr	r3, [pc, #24]	; (800fd9c <UART_SetConfig+0x6ac>)
 800fd84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fd86:	e018      	b.n	800fdba <UART_SetConfig+0x6ca>
 800fd88:	40011400 	.word	0x40011400
 800fd8c:	58024400 	.word	0x58024400
 800fd90:	40007800 	.word	0x40007800
 800fd94:	40007c00 	.word	0x40007c00
 800fd98:	58000c00 	.word	0x58000c00
 800fd9c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fda0:	4bc4      	ldr	r3, [pc, #784]	; (80100b4 <UART_SetConfig+0x9c4>)
 800fda2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fda4:	e009      	b.n	800fdba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fda6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fdaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fdac:	e005      	b.n	800fdba <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800fdb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	f000 81da 	beq.w	8010176 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc6:	4abc      	ldr	r2, [pc, #752]	; (80100b8 <UART_SetConfig+0x9c8>)
 800fdc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdcc:	461a      	mov	r2, r3
 800fdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdd4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	685a      	ldr	r2, [r3, #4]
 800fdda:	4613      	mov	r3, r2
 800fddc:	005b      	lsls	r3, r3, #1
 800fdde:	4413      	add	r3, r2
 800fde0:	6a3a      	ldr	r2, [r7, #32]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d305      	bcc.n	800fdf2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fdec:	6a3a      	ldr	r2, [r7, #32]
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d903      	bls.n	800fdfa <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800fdf8:	e1bd      	b.n	8010176 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f04f 0100 	mov.w	r1, #0
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe06:	4aac      	ldr	r2, [pc, #688]	; (80100b8 <UART_SetConfig+0x9c8>)
 800fe08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe0c:	b29a      	uxth	r2, r3
 800fe0e:	f04f 0300 	mov.w	r3, #0
 800fe12:	f7f0 fc79 	bl	8000708 <__aeabi_uldivmod>
 800fe16:	4602      	mov	r2, r0
 800fe18:	460b      	mov	r3, r1
 800fe1a:	4610      	mov	r0, r2
 800fe1c:	4619      	mov	r1, r3
 800fe1e:	f04f 0200 	mov.w	r2, #0
 800fe22:	f04f 0300 	mov.w	r3, #0
 800fe26:	020b      	lsls	r3, r1, #8
 800fe28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fe2c:	0202      	lsls	r2, r0, #8
 800fe2e:	6879      	ldr	r1, [r7, #4]
 800fe30:	6849      	ldr	r1, [r1, #4]
 800fe32:	0849      	lsrs	r1, r1, #1
 800fe34:	4608      	mov	r0, r1
 800fe36:	f04f 0100 	mov.w	r1, #0
 800fe3a:	1814      	adds	r4, r2, r0
 800fe3c:	eb43 0501 	adc.w	r5, r3, r1
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	461a      	mov	r2, r3
 800fe46:	f04f 0300 	mov.w	r3, #0
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	4629      	mov	r1, r5
 800fe4e:	f7f0 fc5b 	bl	8000708 <__aeabi_uldivmod>
 800fe52:	4602      	mov	r2, r0
 800fe54:	460b      	mov	r3, r1
 800fe56:	4613      	mov	r3, r2
 800fe58:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fe5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fe60:	d308      	bcc.n	800fe74 <UART_SetConfig+0x784>
 800fe62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fe68:	d204      	bcs.n	800fe74 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe70:	60da      	str	r2, [r3, #12]
 800fe72:	e180      	b.n	8010176 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800fe74:	2301      	movs	r3, #1
 800fe76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800fe7a:	e17c      	b.n	8010176 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	69db      	ldr	r3, [r3, #28]
 800fe80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe84:	f040 80bf 	bne.w	8010006 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800fe88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fe8c:	2b20      	cmp	r3, #32
 800fe8e:	dc49      	bgt.n	800ff24 <UART_SetConfig+0x834>
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	db7c      	blt.n	800ff8e <UART_SetConfig+0x89e>
 800fe94:	2b20      	cmp	r3, #32
 800fe96:	d87a      	bhi.n	800ff8e <UART_SetConfig+0x89e>
 800fe98:	a201      	add	r2, pc, #4	; (adr r2, 800fea0 <UART_SetConfig+0x7b0>)
 800fe9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe9e:	bf00      	nop
 800fea0:	0800ff2b 	.word	0x0800ff2b
 800fea4:	0800ff33 	.word	0x0800ff33
 800fea8:	0800ff8f 	.word	0x0800ff8f
 800feac:	0800ff8f 	.word	0x0800ff8f
 800feb0:	0800ff3b 	.word	0x0800ff3b
 800feb4:	0800ff8f 	.word	0x0800ff8f
 800feb8:	0800ff8f 	.word	0x0800ff8f
 800febc:	0800ff8f 	.word	0x0800ff8f
 800fec0:	0800ff4b 	.word	0x0800ff4b
 800fec4:	0800ff8f 	.word	0x0800ff8f
 800fec8:	0800ff8f 	.word	0x0800ff8f
 800fecc:	0800ff8f 	.word	0x0800ff8f
 800fed0:	0800ff8f 	.word	0x0800ff8f
 800fed4:	0800ff8f 	.word	0x0800ff8f
 800fed8:	0800ff8f 	.word	0x0800ff8f
 800fedc:	0800ff8f 	.word	0x0800ff8f
 800fee0:	0800ff5b 	.word	0x0800ff5b
 800fee4:	0800ff8f 	.word	0x0800ff8f
 800fee8:	0800ff8f 	.word	0x0800ff8f
 800feec:	0800ff8f 	.word	0x0800ff8f
 800fef0:	0800ff8f 	.word	0x0800ff8f
 800fef4:	0800ff8f 	.word	0x0800ff8f
 800fef8:	0800ff8f 	.word	0x0800ff8f
 800fefc:	0800ff8f 	.word	0x0800ff8f
 800ff00:	0800ff8f 	.word	0x0800ff8f
 800ff04:	0800ff8f 	.word	0x0800ff8f
 800ff08:	0800ff8f 	.word	0x0800ff8f
 800ff0c:	0800ff8f 	.word	0x0800ff8f
 800ff10:	0800ff8f 	.word	0x0800ff8f
 800ff14:	0800ff8f 	.word	0x0800ff8f
 800ff18:	0800ff8f 	.word	0x0800ff8f
 800ff1c:	0800ff8f 	.word	0x0800ff8f
 800ff20:	0800ff81 	.word	0x0800ff81
 800ff24:	2b40      	cmp	r3, #64	; 0x40
 800ff26:	d02e      	beq.n	800ff86 <UART_SetConfig+0x896>
 800ff28:	e031      	b.n	800ff8e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff2a:	f7fa fcf5 	bl	800a918 <HAL_RCC_GetPCLK1Freq>
 800ff2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ff30:	e033      	b.n	800ff9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff32:	f7fa fd07 	bl	800a944 <HAL_RCC_GetPCLK2Freq>
 800ff36:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ff38:	e02f      	b.n	800ff9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff3a:	f107 0314 	add.w	r3, r7, #20
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7fc f93e 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff44:	69bb      	ldr	r3, [r7, #24]
 800ff46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ff48:	e027      	b.n	800ff9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff4a:	f107 0308 	add.w	r3, r7, #8
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7fc fa8a 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ff58:	e01f      	b.n	800ff9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff5a:	4b58      	ldr	r3, [pc, #352]	; (80100bc <UART_SetConfig+0x9cc>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f003 0320 	and.w	r3, r3, #32
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d009      	beq.n	800ff7a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff66:	4b55      	ldr	r3, [pc, #340]	; (80100bc <UART_SetConfig+0x9cc>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	08db      	lsrs	r3, r3, #3
 800ff6c:	f003 0303 	and.w	r3, r3, #3
 800ff70:	4a53      	ldr	r2, [pc, #332]	; (80100c0 <UART_SetConfig+0x9d0>)
 800ff72:	fa22 f303 	lsr.w	r3, r2, r3
 800ff76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff78:	e00f      	b.n	800ff9a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ff7a:	4b51      	ldr	r3, [pc, #324]	; (80100c0 <UART_SetConfig+0x9d0>)
 800ff7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ff7e:	e00c      	b.n	800ff9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff80:	4b4c      	ldr	r3, [pc, #304]	; (80100b4 <UART_SetConfig+0x9c4>)
 800ff82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ff84:	e009      	b.n	800ff9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ff8c:	e005      	b.n	800ff9a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ff92:	2301      	movs	r3, #1
 800ff94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ff98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ff9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	f000 80ea 	beq.w	8010176 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa6:	4a44      	ldr	r2, [pc, #272]	; (80100b8 <UART_SetConfig+0x9c8>)
 800ffa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ffac:	461a      	mov	r2, r3
 800ffae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffb4:	005a      	lsls	r2, r3, #1
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	085b      	lsrs	r3, r3, #1
 800ffbc:	441a      	add	r2, r3
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ffca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffcc:	2b0f      	cmp	r3, #15
 800ffce:	d916      	bls.n	800fffe <UART_SetConfig+0x90e>
 800ffd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffd6:	d212      	bcs.n	800fffe <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ffd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	f023 030f 	bic.w	r3, r3, #15
 800ffe0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ffe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe4:	085b      	lsrs	r3, r3, #1
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	f003 0307 	and.w	r3, r3, #7
 800ffec:	b29a      	uxth	r2, r3
 800ffee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fff0:	4313      	orrs	r3, r2
 800fff2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fffa:	60da      	str	r2, [r3, #12]
 800fffc:	e0bb      	b.n	8010176 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800fffe:	2301      	movs	r3, #1
 8010000:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010004:	e0b7      	b.n	8010176 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010006:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801000a:	2b20      	cmp	r3, #32
 801000c:	dc4a      	bgt.n	80100a4 <UART_SetConfig+0x9b4>
 801000e:	2b00      	cmp	r3, #0
 8010010:	f2c0 8086 	blt.w	8010120 <UART_SetConfig+0xa30>
 8010014:	2b20      	cmp	r3, #32
 8010016:	f200 8083 	bhi.w	8010120 <UART_SetConfig+0xa30>
 801001a:	a201      	add	r2, pc, #4	; (adr r2, 8010020 <UART_SetConfig+0x930>)
 801001c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010020:	080100ab 	.word	0x080100ab
 8010024:	080100c5 	.word	0x080100c5
 8010028:	08010121 	.word	0x08010121
 801002c:	08010121 	.word	0x08010121
 8010030:	080100cd 	.word	0x080100cd
 8010034:	08010121 	.word	0x08010121
 8010038:	08010121 	.word	0x08010121
 801003c:	08010121 	.word	0x08010121
 8010040:	080100dd 	.word	0x080100dd
 8010044:	08010121 	.word	0x08010121
 8010048:	08010121 	.word	0x08010121
 801004c:	08010121 	.word	0x08010121
 8010050:	08010121 	.word	0x08010121
 8010054:	08010121 	.word	0x08010121
 8010058:	08010121 	.word	0x08010121
 801005c:	08010121 	.word	0x08010121
 8010060:	080100ed 	.word	0x080100ed
 8010064:	08010121 	.word	0x08010121
 8010068:	08010121 	.word	0x08010121
 801006c:	08010121 	.word	0x08010121
 8010070:	08010121 	.word	0x08010121
 8010074:	08010121 	.word	0x08010121
 8010078:	08010121 	.word	0x08010121
 801007c:	08010121 	.word	0x08010121
 8010080:	08010121 	.word	0x08010121
 8010084:	08010121 	.word	0x08010121
 8010088:	08010121 	.word	0x08010121
 801008c:	08010121 	.word	0x08010121
 8010090:	08010121 	.word	0x08010121
 8010094:	08010121 	.word	0x08010121
 8010098:	08010121 	.word	0x08010121
 801009c:	08010121 	.word	0x08010121
 80100a0:	08010113 	.word	0x08010113
 80100a4:	2b40      	cmp	r3, #64	; 0x40
 80100a6:	d037      	beq.n	8010118 <UART_SetConfig+0xa28>
 80100a8:	e03a      	b.n	8010120 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80100aa:	f7fa fc35 	bl	800a918 <HAL_RCC_GetPCLK1Freq>
 80100ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80100b0:	e03c      	b.n	801012c <UART_SetConfig+0xa3c>
 80100b2:	bf00      	nop
 80100b4:	003d0900 	.word	0x003d0900
 80100b8:	080292d4 	.word	0x080292d4
 80100bc:	58024400 	.word	0x58024400
 80100c0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80100c4:	f7fa fc3e 	bl	800a944 <HAL_RCC_GetPCLK2Freq>
 80100c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80100ca:	e02f      	b.n	801012c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100cc:	f107 0314 	add.w	r3, r7, #20
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7fc f875 	bl	800c1c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80100da:	e027      	b.n	801012c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100dc:	f107 0308 	add.w	r3, r7, #8
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7fc f9c1 	bl	800c468 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80100ea:	e01f      	b.n	801012c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100ec:	4b2c      	ldr	r3, [pc, #176]	; (80101a0 <UART_SetConfig+0xab0>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	f003 0320 	and.w	r3, r3, #32
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d009      	beq.n	801010c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80100f8:	4b29      	ldr	r3, [pc, #164]	; (80101a0 <UART_SetConfig+0xab0>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	08db      	lsrs	r3, r3, #3
 80100fe:	f003 0303 	and.w	r3, r3, #3
 8010102:	4a28      	ldr	r2, [pc, #160]	; (80101a4 <UART_SetConfig+0xab4>)
 8010104:	fa22 f303 	lsr.w	r3, r2, r3
 8010108:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801010a:	e00f      	b.n	801012c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 801010c:	4b25      	ldr	r3, [pc, #148]	; (80101a4 <UART_SetConfig+0xab4>)
 801010e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010110:	e00c      	b.n	801012c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010112:	4b25      	ldr	r3, [pc, #148]	; (80101a8 <UART_SetConfig+0xab8>)
 8010114:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010116:	e009      	b.n	801012c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801011c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801011e:	e005      	b.n	801012c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8010120:	2300      	movs	r3, #0
 8010122:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010124:	2301      	movs	r3, #1
 8010126:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801012a:	bf00      	nop
    }

    if (pclk != 0U)
 801012c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012e:	2b00      	cmp	r3, #0
 8010130:	d021      	beq.n	8010176 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010136:	4a1d      	ldr	r2, [pc, #116]	; (80101ac <UART_SetConfig+0xabc>)
 8010138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801013c:	461a      	mov	r2, r3
 801013e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010140:	fbb3 f2f2 	udiv	r2, r3, r2
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	085b      	lsrs	r3, r3, #1
 801014a:	441a      	add	r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	fbb2 f3f3 	udiv	r3, r2, r3
 8010154:	b29b      	uxth	r3, r3
 8010156:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801015a:	2b0f      	cmp	r3, #15
 801015c:	d908      	bls.n	8010170 <UART_SetConfig+0xa80>
 801015e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010164:	d204      	bcs.n	8010170 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801016c:	60da      	str	r2, [r3, #12]
 801016e:	e002      	b.n	8010176 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8010170:	2301      	movs	r3, #1
 8010172:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2201      	movs	r2, #1
 801017a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2201      	movs	r2, #1
 8010182:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2200      	movs	r2, #0
 801018a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2200      	movs	r2, #0
 8010190:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010192:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8010196:	4618      	mov	r0, r3
 8010198:	3738      	adds	r7, #56	; 0x38
 801019a:	46bd      	mov	sp, r7
 801019c:	bdb0      	pop	{r4, r5, r7, pc}
 801019e:	bf00      	nop
 80101a0:	58024400 	.word	0x58024400
 80101a4:	03d09000 	.word	0x03d09000
 80101a8:	003d0900 	.word	0x003d0900
 80101ac:	080292d4 	.word	0x080292d4

080101b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80101b0:	b480      	push	{r7}
 80101b2:	b083      	sub	sp, #12
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101bc:	f003 0301 	and.w	r3, r3, #1
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d00a      	beq.n	80101da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	685b      	ldr	r3, [r3, #4]
 80101ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	430a      	orrs	r2, r1
 80101d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101de:	f003 0302 	and.w	r3, r3, #2
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d00a      	beq.n	80101fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	430a      	orrs	r2, r1
 80101fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010200:	f003 0304 	and.w	r3, r3, #4
 8010204:	2b00      	cmp	r3, #0
 8010206:	d00a      	beq.n	801021e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	430a      	orrs	r2, r1
 801021c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010222:	f003 0308 	and.w	r3, r3, #8
 8010226:	2b00      	cmp	r3, #0
 8010228:	d00a      	beq.n	8010240 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	685b      	ldr	r3, [r3, #4]
 8010230:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	430a      	orrs	r2, r1
 801023e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010244:	f003 0310 	and.w	r3, r3, #16
 8010248:	2b00      	cmp	r3, #0
 801024a:	d00a      	beq.n	8010262 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	689b      	ldr	r3, [r3, #8]
 8010252:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	430a      	orrs	r2, r1
 8010260:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010266:	f003 0320 	and.w	r3, r3, #32
 801026a:	2b00      	cmp	r3, #0
 801026c:	d00a      	beq.n	8010284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	689b      	ldr	r3, [r3, #8]
 8010274:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	430a      	orrs	r2, r1
 8010282:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801028c:	2b00      	cmp	r3, #0
 801028e:	d01a      	beq.n	80102c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	685b      	ldr	r3, [r3, #4]
 8010296:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	430a      	orrs	r2, r1
 80102a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80102ae:	d10a      	bne.n	80102c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	430a      	orrs	r2, r1
 80102c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d00a      	beq.n	80102e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	685b      	ldr	r3, [r3, #4]
 80102d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	430a      	orrs	r2, r1
 80102e6:	605a      	str	r2, [r3, #4]
  }
}
 80102e8:	bf00      	nop
 80102ea:	370c      	adds	r7, #12
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b086      	sub	sp, #24
 80102f8:	af02      	add	r7, sp, #8
 80102fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2200      	movs	r2, #0
 8010300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010304:	f7f3 fe1e 	bl	8003f44 <HAL_GetTick>
 8010308:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	f003 0308 	and.w	r3, r3, #8
 8010314:	2b08      	cmp	r3, #8
 8010316:	d10e      	bne.n	8010336 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801031c:	9300      	str	r3, [sp, #0]
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	2200      	movs	r2, #0
 8010322:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f000 f82f 	bl	801038a <UART_WaitOnFlagUntilTimeout>
 801032c:	4603      	mov	r3, r0
 801032e:	2b00      	cmp	r3, #0
 8010330:	d001      	beq.n	8010336 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010332:	2303      	movs	r3, #3
 8010334:	e025      	b.n	8010382 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	f003 0304 	and.w	r3, r3, #4
 8010340:	2b04      	cmp	r3, #4
 8010342:	d10e      	bne.n	8010362 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010348:	9300      	str	r3, [sp, #0]
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2200      	movs	r2, #0
 801034e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f000 f819 	bl	801038a <UART_WaitOnFlagUntilTimeout>
 8010358:	4603      	mov	r3, r0
 801035a:	2b00      	cmp	r3, #0
 801035c:	d001      	beq.n	8010362 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801035e:	2303      	movs	r3, #3
 8010360:	e00f      	b.n	8010382 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2220      	movs	r2, #32
 8010366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2220      	movs	r2, #32
 801036e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2200      	movs	r2, #0
 8010376:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2200      	movs	r2, #0
 801037c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010380:	2300      	movs	r3, #0
}
 8010382:	4618      	mov	r0, r3
 8010384:	3710      	adds	r7, #16
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}

0801038a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801038a:	b580      	push	{r7, lr}
 801038c:	b084      	sub	sp, #16
 801038e:	af00      	add	r7, sp, #0
 8010390:	60f8      	str	r0, [r7, #12]
 8010392:	60b9      	str	r1, [r7, #8]
 8010394:	603b      	str	r3, [r7, #0]
 8010396:	4613      	mov	r3, r2
 8010398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801039a:	e062      	b.n	8010462 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801039c:	69bb      	ldr	r3, [r7, #24]
 801039e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103a2:	d05e      	beq.n	8010462 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80103a4:	f7f3 fdce 	bl	8003f44 <HAL_GetTick>
 80103a8:	4602      	mov	r2, r0
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	1ad3      	subs	r3, r2, r3
 80103ae:	69ba      	ldr	r2, [r7, #24]
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d302      	bcc.n	80103ba <UART_WaitOnFlagUntilTimeout+0x30>
 80103b4:	69bb      	ldr	r3, [r7, #24]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d11d      	bne.n	80103f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	681a      	ldr	r2, [r3, #0]
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80103c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	689a      	ldr	r2, [r3, #8]
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	f022 0201 	bic.w	r2, r2, #1
 80103d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2220      	movs	r2, #32
 80103de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	2220      	movs	r2, #32
 80103e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	2200      	movs	r2, #0
 80103ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80103f2:	2303      	movs	r3, #3
 80103f4:	e045      	b.n	8010482 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	f003 0304 	and.w	r3, r3, #4
 8010400:	2b00      	cmp	r3, #0
 8010402:	d02e      	beq.n	8010462 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	69db      	ldr	r3, [r3, #28]
 801040a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801040e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010412:	d126      	bne.n	8010462 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801041c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	681a      	ldr	r2, [r3, #0]
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801042c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	689a      	ldr	r2, [r3, #8]
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f022 0201 	bic.w	r2, r2, #1
 801043c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2220      	movs	r2, #32
 8010442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	2220      	movs	r2, #32
 801044a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2220      	movs	r2, #32
 8010452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	2200      	movs	r2, #0
 801045a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801045e:	2303      	movs	r3, #3
 8010460:	e00f      	b.n	8010482 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	69da      	ldr	r2, [r3, #28]
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	4013      	ands	r3, r2
 801046c:	68ba      	ldr	r2, [r7, #8]
 801046e:	429a      	cmp	r2, r3
 8010470:	bf0c      	ite	eq
 8010472:	2301      	moveq	r3, #1
 8010474:	2300      	movne	r3, #0
 8010476:	b2db      	uxtb	r3, r3
 8010478:	461a      	mov	r2, r3
 801047a:	79fb      	ldrb	r3, [r7, #7]
 801047c:	429a      	cmp	r2, r3
 801047e:	d08d      	beq.n	801039c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010480:	2300      	movs	r3, #0
}
 8010482:	4618      	mov	r0, r3
 8010484:	3710      	adds	r7, #16
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}

0801048a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801048a:	b480      	push	{r7}
 801048c:	b085      	sub	sp, #20
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010498:	2b01      	cmp	r3, #1
 801049a:	d101      	bne.n	80104a0 <HAL_UARTEx_DisableFifoMode+0x16>
 801049c:	2302      	movs	r3, #2
 801049e:	e027      	b.n	80104f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2201      	movs	r2, #1
 80104a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2224      	movs	r2, #36	; 0x24
 80104ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	681a      	ldr	r2, [r3, #0]
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	f022 0201 	bic.w	r2, r2, #1
 80104c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80104ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2200      	movs	r2, #0
 80104d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	68fa      	ldr	r2, [r7, #12]
 80104dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2220      	movs	r2, #32
 80104e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2200      	movs	r2, #0
 80104ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80104ee:	2300      	movs	r3, #0
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3714      	adds	r7, #20
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr

080104fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b084      	sub	sp, #16
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801050c:	2b01      	cmp	r3, #1
 801050e:	d101      	bne.n	8010514 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010510:	2302      	movs	r3, #2
 8010512:	e02d      	b.n	8010570 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2201      	movs	r2, #1
 8010518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2224      	movs	r2, #36	; 0x24
 8010520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	681a      	ldr	r2, [r3, #0]
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f022 0201 	bic.w	r2, r2, #1
 801053a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	689b      	ldr	r3, [r3, #8]
 8010542:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	683a      	ldr	r2, [r7, #0]
 801054c:	430a      	orrs	r2, r1
 801054e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f000 f84f 	bl	80105f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	68fa      	ldr	r2, [r7, #12]
 801055c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2220      	movs	r2, #32
 8010562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2200      	movs	r2, #0
 801056a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801056e:	2300      	movs	r3, #0
}
 8010570:	4618      	mov	r0, r3
 8010572:	3710      	adds	r7, #16
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}

08010578 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010588:	2b01      	cmp	r3, #1
 801058a:	d101      	bne.n	8010590 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801058c:	2302      	movs	r3, #2
 801058e:	e02d      	b.n	80105ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2201      	movs	r2, #1
 8010594:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2224      	movs	r2, #36	; 0x24
 801059c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f022 0201 	bic.w	r2, r2, #1
 80105b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	689b      	ldr	r3, [r3, #8]
 80105be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	683a      	ldr	r2, [r7, #0]
 80105c8:	430a      	orrs	r2, r1
 80105ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f000 f811 	bl	80105f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	68fa      	ldr	r2, [r7, #12]
 80105d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2220      	movs	r2, #32
 80105de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2200      	movs	r2, #0
 80105e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80105ea:	2300      	movs	r3, #0
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3710      	adds	r7, #16
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80105f4:	b480      	push	{r7}
 80105f6:	b085      	sub	sp, #20
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010600:	2b00      	cmp	r3, #0
 8010602:	d108      	bne.n	8010616 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2201      	movs	r2, #1
 8010608:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2201      	movs	r2, #1
 8010610:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010614:	e031      	b.n	801067a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010616:	2310      	movs	r3, #16
 8010618:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801061a:	2310      	movs	r3, #16
 801061c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	689b      	ldr	r3, [r3, #8]
 8010624:	0e5b      	lsrs	r3, r3, #25
 8010626:	b2db      	uxtb	r3, r3
 8010628:	f003 0307 	and.w	r3, r3, #7
 801062c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	689b      	ldr	r3, [r3, #8]
 8010634:	0f5b      	lsrs	r3, r3, #29
 8010636:	b2db      	uxtb	r3, r3
 8010638:	f003 0307 	and.w	r3, r3, #7
 801063c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801063e:	7bbb      	ldrb	r3, [r7, #14]
 8010640:	7b3a      	ldrb	r2, [r7, #12]
 8010642:	4911      	ldr	r1, [pc, #68]	; (8010688 <UARTEx_SetNbDataToProcess+0x94>)
 8010644:	5c8a      	ldrb	r2, [r1, r2]
 8010646:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801064a:	7b3a      	ldrb	r2, [r7, #12]
 801064c:	490f      	ldr	r1, [pc, #60]	; (801068c <UARTEx_SetNbDataToProcess+0x98>)
 801064e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010650:	fb93 f3f2 	sdiv	r3, r3, r2
 8010654:	b29a      	uxth	r2, r3
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801065c:	7bfb      	ldrb	r3, [r7, #15]
 801065e:	7b7a      	ldrb	r2, [r7, #13]
 8010660:	4909      	ldr	r1, [pc, #36]	; (8010688 <UARTEx_SetNbDataToProcess+0x94>)
 8010662:	5c8a      	ldrb	r2, [r1, r2]
 8010664:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010668:	7b7a      	ldrb	r2, [r7, #13]
 801066a:	4908      	ldr	r1, [pc, #32]	; (801068c <UARTEx_SetNbDataToProcess+0x98>)
 801066c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801066e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010672:	b29a      	uxth	r2, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801067a:	bf00      	nop
 801067c:	3714      	adds	r7, #20
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
 8010686:	bf00      	nop
 8010688:	080292ec 	.word	0x080292ec
 801068c:	080292f4 	.word	0x080292f4

08010690 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8010690:	b480      	push	{r7}
 8010692:	b087      	sub	sp, #28
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
 8010698:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	681a      	ldr	r2, [r3, #0]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106a4:	683a      	ldr	r2, [r7, #0]
 80106a6:	6812      	ldr	r2, [r2, #0]
 80106a8:	f023 0101 	bic.w	r1, r3, #1
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	689b      	ldr	r3, [r3, #8]
 80106b6:	2b08      	cmp	r3, #8
 80106b8:	d102      	bne.n	80106c0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80106ba:	2340      	movs	r3, #64	; 0x40
 80106bc:	617b      	str	r3, [r7, #20]
 80106be:	e001      	b.n	80106c4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80106c0:	2300      	movs	r3, #0
 80106c2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80106d0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80106d6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80106dc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80106e2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80106e8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80106ee:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80106f4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80106fa:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8010700:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8010706:	4313      	orrs	r3, r2
 8010708:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801070e:	693a      	ldr	r2, [r7, #16]
 8010710:	4313      	orrs	r3, r2
 8010712:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010718:	693a      	ldr	r2, [r7, #16]
 801071a:	4313      	orrs	r3, r2
 801071c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010722:	693a      	ldr	r2, [r7, #16]
 8010724:	4313      	orrs	r3, r2
 8010726:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8010728:	4b20      	ldr	r3, [pc, #128]	; (80107ac <FMC_NORSRAM_Init+0x11c>)
 801072a:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010732:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801073a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8010742:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	681a      	ldr	r2, [r3, #0]
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	43db      	mvns	r3, r3
 8010752:	ea02 0103 	and.w	r1, r2, r3
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	681a      	ldr	r2, [r3, #0]
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	4319      	orrs	r1, r3
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801076c:	d10c      	bne.n	8010788 <FMC_NORSRAM_Init+0xf8>
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d008      	beq.n	8010788 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010782:	431a      	orrs	r2, r3
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d006      	beq.n	801079e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681a      	ldr	r2, [r3, #0]
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010798:	431a      	orrs	r2, r3
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801079e:	2300      	movs	r3, #0
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	371c      	adds	r7, #28
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr
 80107ac:	0008fb7f 	.word	0x0008fb7f

080107b0 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80107b0:	b480      	push	{r7}
 80107b2:	b087      	sub	sp, #28
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	60f8      	str	r0, [r7, #12]
 80107b8:	60b9      	str	r1, [r7, #8]
 80107ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	1c5a      	adds	r2, r3, #1
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107c6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	681a      	ldr	r2, [r3, #0]
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	011b      	lsls	r3, r3, #4
 80107d4:	431a      	orrs	r2, r3
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	689b      	ldr	r3, [r3, #8]
 80107da:	021b      	lsls	r3, r3, #8
 80107dc:	431a      	orrs	r2, r3
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	68db      	ldr	r3, [r3, #12]
 80107e2:	041b      	lsls	r3, r3, #16
 80107e4:	431a      	orrs	r2, r3
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	691b      	ldr	r3, [r3, #16]
 80107ea:	3b01      	subs	r3, #1
 80107ec:	051b      	lsls	r3, r3, #20
 80107ee:	431a      	orrs	r2, r3
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	695b      	ldr	r3, [r3, #20]
 80107f4:	3b02      	subs	r3, #2
 80107f6:	061b      	lsls	r3, r3, #24
 80107f8:	431a      	orrs	r2, r3
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	699b      	ldr	r3, [r3, #24]
 80107fe:	4313      	orrs	r3, r2
 8010800:	687a      	ldr	r2, [r7, #4]
 8010802:	3201      	adds	r2, #1
 8010804:	4319      	orrs	r1, r3
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010814:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010818:	d113      	bne.n	8010842 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010822:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	691b      	ldr	r3, [r3, #16]
 8010828:	3b01      	subs	r3, #1
 801082a:	051b      	lsls	r3, r3, #20
 801082c:	697a      	ldr	r2, [r7, #20]
 801082e:	4313      	orrs	r3, r2
 8010830:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	685b      	ldr	r3, [r3, #4]
 8010836:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	431a      	orrs	r2, r3
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8010842:	2300      	movs	r3, #0
}
 8010844:	4618      	mov	r0, r3
 8010846:	371c      	adds	r7, #28
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	4770      	bx	lr

08010850 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8010850:	b480      	push	{r7}
 8010852:	b085      	sub	sp, #20
 8010854:	af00      	add	r7, sp, #0
 8010856:	60f8      	str	r0, [r7, #12]
 8010858:	60b9      	str	r1, [r7, #8]
 801085a:	607a      	str	r2, [r7, #4]
 801085c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010864:	d11d      	bne.n	80108a2 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801086e:	4b13      	ldr	r3, [pc, #76]	; (80108bc <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8010870:	4013      	ands	r3, r2
 8010872:	68ba      	ldr	r2, [r7, #8]
 8010874:	6811      	ldr	r1, [r2, #0]
 8010876:	68ba      	ldr	r2, [r7, #8]
 8010878:	6852      	ldr	r2, [r2, #4]
 801087a:	0112      	lsls	r2, r2, #4
 801087c:	4311      	orrs	r1, r2
 801087e:	68ba      	ldr	r2, [r7, #8]
 8010880:	6892      	ldr	r2, [r2, #8]
 8010882:	0212      	lsls	r2, r2, #8
 8010884:	4311      	orrs	r1, r2
 8010886:	68ba      	ldr	r2, [r7, #8]
 8010888:	6992      	ldr	r2, [r2, #24]
 801088a:	4311      	orrs	r1, r2
 801088c:	68ba      	ldr	r2, [r7, #8]
 801088e:	68d2      	ldr	r2, [r2, #12]
 8010890:	0412      	lsls	r2, r2, #16
 8010892:	430a      	orrs	r2, r1
 8010894:	ea43 0102 	orr.w	r1, r3, r2
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80108a0:	e005      	b.n	80108ae <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	687a      	ldr	r2, [r7, #4]
 80108a6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80108aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80108ae:	2300      	movs	r3, #0
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3714      	adds	r7, #20
 80108b4:	46bd      	mov	sp, r7
 80108b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ba:	4770      	bx	lr
 80108bc:	cff00000 	.word	0xcff00000

080108c0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80108c6:	4b8d      	ldr	r3, [pc, #564]	; (8010afc <MX_LWIP_Init+0x23c>)
 80108c8:	22c0      	movs	r2, #192	; 0xc0
 80108ca:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80108cc:	4b8b      	ldr	r3, [pc, #556]	; (8010afc <MX_LWIP_Init+0x23c>)
 80108ce:	22a8      	movs	r2, #168	; 0xa8
 80108d0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80108d2:	4b8a      	ldr	r3, [pc, #552]	; (8010afc <MX_LWIP_Init+0x23c>)
 80108d4:	2201      	movs	r2, #1
 80108d6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 80108d8:	4b88      	ldr	r3, [pc, #544]	; (8010afc <MX_LWIP_Init+0x23c>)
 80108da:	2201      	movs	r2, #1
 80108dc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80108de:	4b88      	ldr	r3, [pc, #544]	; (8010b00 <MX_LWIP_Init+0x240>)
 80108e0:	22ff      	movs	r2, #255	; 0xff
 80108e2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80108e4:	4b86      	ldr	r3, [pc, #536]	; (8010b00 <MX_LWIP_Init+0x240>)
 80108e6:	22ff      	movs	r2, #255	; 0xff
 80108e8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80108ea:	4b85      	ldr	r3, [pc, #532]	; (8010b00 <MX_LWIP_Init+0x240>)
 80108ec:	22ff      	movs	r2, #255	; 0xff
 80108ee:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80108f0:	4b83      	ldr	r3, [pc, #524]	; (8010b00 <MX_LWIP_Init+0x240>)
 80108f2:	2200      	movs	r2, #0
 80108f4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80108f6:	4b83      	ldr	r3, [pc, #524]	; (8010b04 <MX_LWIP_Init+0x244>)
 80108f8:	2200      	movs	r2, #0
 80108fa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80108fc:	4b81      	ldr	r3, [pc, #516]	; (8010b04 <MX_LWIP_Init+0x244>)
 80108fe:	2200      	movs	r2, #0
 8010900:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8010902:	4b80      	ldr	r3, [pc, #512]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010904:	2200      	movs	r2, #0
 8010906:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8010908:	4b7e      	ldr	r3, [pc, #504]	; (8010b04 <MX_LWIP_Init+0x244>)
 801090a:	2200      	movs	r2, #0
 801090c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 801090e:	f002 fdaf 	bl	8013470 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8010912:	4b7a      	ldr	r3, [pc, #488]	; (8010afc <MX_LWIP_Init+0x23c>)
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	061a      	lsls	r2, r3, #24
 8010918:	4b78      	ldr	r3, [pc, #480]	; (8010afc <MX_LWIP_Init+0x23c>)
 801091a:	785b      	ldrb	r3, [r3, #1]
 801091c:	041b      	lsls	r3, r3, #16
 801091e:	431a      	orrs	r2, r3
 8010920:	4b76      	ldr	r3, [pc, #472]	; (8010afc <MX_LWIP_Init+0x23c>)
 8010922:	789b      	ldrb	r3, [r3, #2]
 8010924:	021b      	lsls	r3, r3, #8
 8010926:	4313      	orrs	r3, r2
 8010928:	4a74      	ldr	r2, [pc, #464]	; (8010afc <MX_LWIP_Init+0x23c>)
 801092a:	78d2      	ldrb	r2, [r2, #3]
 801092c:	4313      	orrs	r3, r2
 801092e:	061a      	lsls	r2, r3, #24
 8010930:	4b72      	ldr	r3, [pc, #456]	; (8010afc <MX_LWIP_Init+0x23c>)
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	0619      	lsls	r1, r3, #24
 8010936:	4b71      	ldr	r3, [pc, #452]	; (8010afc <MX_LWIP_Init+0x23c>)
 8010938:	785b      	ldrb	r3, [r3, #1]
 801093a:	041b      	lsls	r3, r3, #16
 801093c:	4319      	orrs	r1, r3
 801093e:	4b6f      	ldr	r3, [pc, #444]	; (8010afc <MX_LWIP_Init+0x23c>)
 8010940:	789b      	ldrb	r3, [r3, #2]
 8010942:	021b      	lsls	r3, r3, #8
 8010944:	430b      	orrs	r3, r1
 8010946:	496d      	ldr	r1, [pc, #436]	; (8010afc <MX_LWIP_Init+0x23c>)
 8010948:	78c9      	ldrb	r1, [r1, #3]
 801094a:	430b      	orrs	r3, r1
 801094c:	021b      	lsls	r3, r3, #8
 801094e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010952:	431a      	orrs	r2, r3
 8010954:	4b69      	ldr	r3, [pc, #420]	; (8010afc <MX_LWIP_Init+0x23c>)
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	0619      	lsls	r1, r3, #24
 801095a:	4b68      	ldr	r3, [pc, #416]	; (8010afc <MX_LWIP_Init+0x23c>)
 801095c:	785b      	ldrb	r3, [r3, #1]
 801095e:	041b      	lsls	r3, r3, #16
 8010960:	4319      	orrs	r1, r3
 8010962:	4b66      	ldr	r3, [pc, #408]	; (8010afc <MX_LWIP_Init+0x23c>)
 8010964:	789b      	ldrb	r3, [r3, #2]
 8010966:	021b      	lsls	r3, r3, #8
 8010968:	430b      	orrs	r3, r1
 801096a:	4964      	ldr	r1, [pc, #400]	; (8010afc <MX_LWIP_Init+0x23c>)
 801096c:	78c9      	ldrb	r1, [r1, #3]
 801096e:	430b      	orrs	r3, r1
 8010970:	0a1b      	lsrs	r3, r3, #8
 8010972:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010976:	431a      	orrs	r2, r3
 8010978:	4b60      	ldr	r3, [pc, #384]	; (8010afc <MX_LWIP_Init+0x23c>)
 801097a:	781b      	ldrb	r3, [r3, #0]
 801097c:	0619      	lsls	r1, r3, #24
 801097e:	4b5f      	ldr	r3, [pc, #380]	; (8010afc <MX_LWIP_Init+0x23c>)
 8010980:	785b      	ldrb	r3, [r3, #1]
 8010982:	041b      	lsls	r3, r3, #16
 8010984:	4319      	orrs	r1, r3
 8010986:	4b5d      	ldr	r3, [pc, #372]	; (8010afc <MX_LWIP_Init+0x23c>)
 8010988:	789b      	ldrb	r3, [r3, #2]
 801098a:	021b      	lsls	r3, r3, #8
 801098c:	430b      	orrs	r3, r1
 801098e:	495b      	ldr	r1, [pc, #364]	; (8010afc <MX_LWIP_Init+0x23c>)
 8010990:	78c9      	ldrb	r1, [r1, #3]
 8010992:	430b      	orrs	r3, r1
 8010994:	0e1b      	lsrs	r3, r3, #24
 8010996:	4313      	orrs	r3, r2
 8010998:	4a5b      	ldr	r2, [pc, #364]	; (8010b08 <MX_LWIP_Init+0x248>)
 801099a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801099c:	4b58      	ldr	r3, [pc, #352]	; (8010b00 <MX_LWIP_Init+0x240>)
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	061a      	lsls	r2, r3, #24
 80109a2:	4b57      	ldr	r3, [pc, #348]	; (8010b00 <MX_LWIP_Init+0x240>)
 80109a4:	785b      	ldrb	r3, [r3, #1]
 80109a6:	041b      	lsls	r3, r3, #16
 80109a8:	431a      	orrs	r2, r3
 80109aa:	4b55      	ldr	r3, [pc, #340]	; (8010b00 <MX_LWIP_Init+0x240>)
 80109ac:	789b      	ldrb	r3, [r3, #2]
 80109ae:	021b      	lsls	r3, r3, #8
 80109b0:	4313      	orrs	r3, r2
 80109b2:	4a53      	ldr	r2, [pc, #332]	; (8010b00 <MX_LWIP_Init+0x240>)
 80109b4:	78d2      	ldrb	r2, [r2, #3]
 80109b6:	4313      	orrs	r3, r2
 80109b8:	061a      	lsls	r2, r3, #24
 80109ba:	4b51      	ldr	r3, [pc, #324]	; (8010b00 <MX_LWIP_Init+0x240>)
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	0619      	lsls	r1, r3, #24
 80109c0:	4b4f      	ldr	r3, [pc, #316]	; (8010b00 <MX_LWIP_Init+0x240>)
 80109c2:	785b      	ldrb	r3, [r3, #1]
 80109c4:	041b      	lsls	r3, r3, #16
 80109c6:	4319      	orrs	r1, r3
 80109c8:	4b4d      	ldr	r3, [pc, #308]	; (8010b00 <MX_LWIP_Init+0x240>)
 80109ca:	789b      	ldrb	r3, [r3, #2]
 80109cc:	021b      	lsls	r3, r3, #8
 80109ce:	430b      	orrs	r3, r1
 80109d0:	494b      	ldr	r1, [pc, #300]	; (8010b00 <MX_LWIP_Init+0x240>)
 80109d2:	78c9      	ldrb	r1, [r1, #3]
 80109d4:	430b      	orrs	r3, r1
 80109d6:	021b      	lsls	r3, r3, #8
 80109d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80109dc:	431a      	orrs	r2, r3
 80109de:	4b48      	ldr	r3, [pc, #288]	; (8010b00 <MX_LWIP_Init+0x240>)
 80109e0:	781b      	ldrb	r3, [r3, #0]
 80109e2:	0619      	lsls	r1, r3, #24
 80109e4:	4b46      	ldr	r3, [pc, #280]	; (8010b00 <MX_LWIP_Init+0x240>)
 80109e6:	785b      	ldrb	r3, [r3, #1]
 80109e8:	041b      	lsls	r3, r3, #16
 80109ea:	4319      	orrs	r1, r3
 80109ec:	4b44      	ldr	r3, [pc, #272]	; (8010b00 <MX_LWIP_Init+0x240>)
 80109ee:	789b      	ldrb	r3, [r3, #2]
 80109f0:	021b      	lsls	r3, r3, #8
 80109f2:	430b      	orrs	r3, r1
 80109f4:	4942      	ldr	r1, [pc, #264]	; (8010b00 <MX_LWIP_Init+0x240>)
 80109f6:	78c9      	ldrb	r1, [r1, #3]
 80109f8:	430b      	orrs	r3, r1
 80109fa:	0a1b      	lsrs	r3, r3, #8
 80109fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010a00:	431a      	orrs	r2, r3
 8010a02:	4b3f      	ldr	r3, [pc, #252]	; (8010b00 <MX_LWIP_Init+0x240>)
 8010a04:	781b      	ldrb	r3, [r3, #0]
 8010a06:	0619      	lsls	r1, r3, #24
 8010a08:	4b3d      	ldr	r3, [pc, #244]	; (8010b00 <MX_LWIP_Init+0x240>)
 8010a0a:	785b      	ldrb	r3, [r3, #1]
 8010a0c:	041b      	lsls	r3, r3, #16
 8010a0e:	4319      	orrs	r1, r3
 8010a10:	4b3b      	ldr	r3, [pc, #236]	; (8010b00 <MX_LWIP_Init+0x240>)
 8010a12:	789b      	ldrb	r3, [r3, #2]
 8010a14:	021b      	lsls	r3, r3, #8
 8010a16:	430b      	orrs	r3, r1
 8010a18:	4939      	ldr	r1, [pc, #228]	; (8010b00 <MX_LWIP_Init+0x240>)
 8010a1a:	78c9      	ldrb	r1, [r1, #3]
 8010a1c:	430b      	orrs	r3, r1
 8010a1e:	0e1b      	lsrs	r3, r3, #24
 8010a20:	4313      	orrs	r3, r2
 8010a22:	4a3a      	ldr	r2, [pc, #232]	; (8010b0c <MX_LWIP_Init+0x24c>)
 8010a24:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8010a26:	4b37      	ldr	r3, [pc, #220]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	061a      	lsls	r2, r3, #24
 8010a2c:	4b35      	ldr	r3, [pc, #212]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010a2e:	785b      	ldrb	r3, [r3, #1]
 8010a30:	041b      	lsls	r3, r3, #16
 8010a32:	431a      	orrs	r2, r3
 8010a34:	4b33      	ldr	r3, [pc, #204]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010a36:	789b      	ldrb	r3, [r3, #2]
 8010a38:	021b      	lsls	r3, r3, #8
 8010a3a:	4313      	orrs	r3, r2
 8010a3c:	4a31      	ldr	r2, [pc, #196]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010a3e:	78d2      	ldrb	r2, [r2, #3]
 8010a40:	4313      	orrs	r3, r2
 8010a42:	061a      	lsls	r2, r3, #24
 8010a44:	4b2f      	ldr	r3, [pc, #188]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	0619      	lsls	r1, r3, #24
 8010a4a:	4b2e      	ldr	r3, [pc, #184]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010a4c:	785b      	ldrb	r3, [r3, #1]
 8010a4e:	041b      	lsls	r3, r3, #16
 8010a50:	4319      	orrs	r1, r3
 8010a52:	4b2c      	ldr	r3, [pc, #176]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010a54:	789b      	ldrb	r3, [r3, #2]
 8010a56:	021b      	lsls	r3, r3, #8
 8010a58:	430b      	orrs	r3, r1
 8010a5a:	492a      	ldr	r1, [pc, #168]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010a5c:	78c9      	ldrb	r1, [r1, #3]
 8010a5e:	430b      	orrs	r3, r1
 8010a60:	021b      	lsls	r3, r3, #8
 8010a62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010a66:	431a      	orrs	r2, r3
 8010a68:	4b26      	ldr	r3, [pc, #152]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	0619      	lsls	r1, r3, #24
 8010a6e:	4b25      	ldr	r3, [pc, #148]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010a70:	785b      	ldrb	r3, [r3, #1]
 8010a72:	041b      	lsls	r3, r3, #16
 8010a74:	4319      	orrs	r1, r3
 8010a76:	4b23      	ldr	r3, [pc, #140]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010a78:	789b      	ldrb	r3, [r3, #2]
 8010a7a:	021b      	lsls	r3, r3, #8
 8010a7c:	430b      	orrs	r3, r1
 8010a7e:	4921      	ldr	r1, [pc, #132]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010a80:	78c9      	ldrb	r1, [r1, #3]
 8010a82:	430b      	orrs	r3, r1
 8010a84:	0a1b      	lsrs	r3, r3, #8
 8010a86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010a8a:	431a      	orrs	r2, r3
 8010a8c:	4b1d      	ldr	r3, [pc, #116]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	0619      	lsls	r1, r3, #24
 8010a92:	4b1c      	ldr	r3, [pc, #112]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010a94:	785b      	ldrb	r3, [r3, #1]
 8010a96:	041b      	lsls	r3, r3, #16
 8010a98:	4319      	orrs	r1, r3
 8010a9a:	4b1a      	ldr	r3, [pc, #104]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010a9c:	789b      	ldrb	r3, [r3, #2]
 8010a9e:	021b      	lsls	r3, r3, #8
 8010aa0:	430b      	orrs	r3, r1
 8010aa2:	4918      	ldr	r1, [pc, #96]	; (8010b04 <MX_LWIP_Init+0x244>)
 8010aa4:	78c9      	ldrb	r1, [r1, #3]
 8010aa6:	430b      	orrs	r3, r1
 8010aa8:	0e1b      	lsrs	r3, r3, #24
 8010aaa:	4313      	orrs	r3, r2
 8010aac:	4a18      	ldr	r2, [pc, #96]	; (8010b10 <MX_LWIP_Init+0x250>)
 8010aae:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8010ab0:	4b18      	ldr	r3, [pc, #96]	; (8010b14 <MX_LWIP_Init+0x254>)
 8010ab2:	9302      	str	r3, [sp, #8]
 8010ab4:	4b18      	ldr	r3, [pc, #96]	; (8010b18 <MX_LWIP_Init+0x258>)
 8010ab6:	9301      	str	r3, [sp, #4]
 8010ab8:	2300      	movs	r3, #0
 8010aba:	9300      	str	r3, [sp, #0]
 8010abc:	4b14      	ldr	r3, [pc, #80]	; (8010b10 <MX_LWIP_Init+0x250>)
 8010abe:	4a13      	ldr	r2, [pc, #76]	; (8010b0c <MX_LWIP_Init+0x24c>)
 8010ac0:	4911      	ldr	r1, [pc, #68]	; (8010b08 <MX_LWIP_Init+0x248>)
 8010ac2:	4816      	ldr	r0, [pc, #88]	; (8010b1c <MX_LWIP_Init+0x25c>)
 8010ac4:	f004 facc 	bl	8015060 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8010ac8:	4814      	ldr	r0, [pc, #80]	; (8010b1c <MX_LWIP_Init+0x25c>)
 8010aca:	f004 fc7b 	bl	80153c4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8010ace:	4b13      	ldr	r3, [pc, #76]	; (8010b1c <MX_LWIP_Init+0x25c>)
 8010ad0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ad4:	089b      	lsrs	r3, r3, #2
 8010ad6:	f003 0301 	and.w	r3, r3, #1
 8010ada:	b2db      	uxtb	r3, r3
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d003      	beq.n	8010ae8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8010ae0:	480e      	ldr	r0, [pc, #56]	; (8010b1c <MX_LWIP_Init+0x25c>)
 8010ae2:	f004 fc7f 	bl	80153e4 <netif_set_up>
 8010ae6:	e002      	b.n	8010aee <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8010ae8:	480c      	ldr	r0, [pc, #48]	; (8010b1c <MX_LWIP_Init+0x25c>)
 8010aea:	f004 fce7 	bl	80154bc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8010aee:	490c      	ldr	r1, [pc, #48]	; (8010b20 <MX_LWIP_Init+0x260>)
 8010af0:	480a      	ldr	r0, [pc, #40]	; (8010b1c <MX_LWIP_Init+0x25c>)
 8010af2:	f004 fd79 	bl	80155e8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8010af6:	bf00      	nop
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}
 8010afc:	24007db4 	.word	0x24007db4
 8010b00:	24007db0 	.word	0x24007db0
 8010b04:	24007d70 	.word	0x24007d70
 8010b08:	24007da8 	.word	0x24007da8
 8010b0c:	24007db8 	.word	0x24007db8
 8010b10:	24007dbc 	.word	0x24007dbc
 8010b14:	08012de5 	.word	0x08012de5
 8010b18:	0801109d 	.word	0x0801109d
 8010b1c:	24007d74 	.word	0x24007d74
 8010b20:	08010b75 	.word	0x08010b75

08010b24 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8010b2c:	f7f3 fa0a 	bl	8003f44 <HAL_GetTick>
 8010b30:	4602      	mov	r2, r0
 8010b32:	4b08      	ldr	r3, [pc, #32]	; (8010b54 <Ethernet_Link_Periodic_Handle+0x30>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	1ad3      	subs	r3, r2, r3
 8010b38:	2b63      	cmp	r3, #99	; 0x63
 8010b3a:	d907      	bls.n	8010b4c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8010b3c:	f7f3 fa02 	bl	8003f44 <HAL_GetTick>
 8010b40:	4603      	mov	r3, r0
 8010b42:	4a04      	ldr	r2, [pc, #16]	; (8010b54 <Ethernet_Link_Periodic_Handle+0x30>)
 8010b44:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f000 fb3c 	bl	80111c4 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8010b4c:	bf00      	nop
 8010b4e:	3708      	adds	r7, #8
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}
 8010b54:	24007dac 	.word	0x24007dac

08010b58 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8010b5c:	4804      	ldr	r0, [pc, #16]	; (8010b70 <MX_LWIP_Process+0x18>)
 8010b5e:	f000 fa7d 	bl	801105c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8010b62:	f00b fe5f 	bl	801c824 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8010b66:	4802      	ldr	r0, [pc, #8]	; (8010b70 <MX_LWIP_Process+0x18>)
 8010b68:	f7ff ffdc 	bl	8010b24 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8010b6c:	bf00      	nop
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	24007d74 	.word	0x24007d74

08010b74 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8010b74:	b480      	push	{r7}
 8010b76:	b083      	sub	sp, #12
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8010b7c:	bf00      	nop
 8010b7e:	370c      	adds	r7, #12
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr

08010b88 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b08e      	sub	sp, #56	; 0x38
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b94:	2200      	movs	r2, #0
 8010b96:	601a      	str	r2, [r3, #0]
 8010b98:	605a      	str	r2, [r3, #4]
 8010b9a:	609a      	str	r2, [r3, #8]
 8010b9c:	60da      	str	r2, [r3, #12]
 8010b9e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	4a4d      	ldr	r2, [pc, #308]	; (8010cdc <HAL_ETH_MspInit+0x154>)
 8010ba6:	4293      	cmp	r3, r2
 8010ba8:	f040 8093 	bne.w	8010cd2 <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8010bac:	4b4c      	ldr	r3, [pc, #304]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010bae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010bb2:	4a4b      	ldr	r2, [pc, #300]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010bb8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010bbc:	4b48      	ldr	r3, [pc, #288]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010bbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010bc6:	623b      	str	r3, [r7, #32]
 8010bc8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8010bca:	4b45      	ldr	r3, [pc, #276]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010bd0:	4a43      	ldr	r2, [pc, #268]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010bd6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010bda:	4b41      	ldr	r3, [pc, #260]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010bdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010be4:	61fb      	str	r3, [r7, #28]
 8010be6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8010be8:	4b3d      	ldr	r3, [pc, #244]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010bea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010bee:	4a3c      	ldr	r2, [pc, #240]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010bf4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010bf8:	4b39      	ldr	r3, [pc, #228]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010bfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c02:	61bb      	str	r3, [r7, #24]
 8010c04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8010c06:	4b36      	ldr	r3, [pc, #216]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010c0c:	4a34      	ldr	r2, [pc, #208]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010c16:	4b32      	ldr	r3, [pc, #200]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c20:	617b      	str	r3, [r7, #20]
 8010c22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010c24:	4b2e      	ldr	r3, [pc, #184]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010c2a:	4a2d      	ldr	r2, [pc, #180]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010c2c:	f043 0304 	orr.w	r3, r3, #4
 8010c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010c34:	4b2a      	ldr	r3, [pc, #168]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010c3a:	f003 0304 	and.w	r3, r3, #4
 8010c3e:	613b      	str	r3, [r7, #16]
 8010c40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c42:	4b27      	ldr	r3, [pc, #156]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010c48:	4a25      	ldr	r2, [pc, #148]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010c4a:	f043 0301 	orr.w	r3, r3, #1
 8010c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010c52:	4b23      	ldr	r3, [pc, #140]	; (8010ce0 <HAL_ETH_MspInit+0x158>)
 8010c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010c58:	f003 0301 	and.w	r3, r3, #1
 8010c5c:	60fb      	str	r3, [r7, #12]
 8010c5e:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ETH_CRS_DV
    PA1     ------> ETH_REF_CLK
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8010c60:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8010c64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c66:	2302      	movs	r3, #2
 8010c68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c6e:	2303      	movs	r3, #3
 8010c70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010c72:	230b      	movs	r3, #11
 8010c74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	4819      	ldr	r0, [pc, #100]	; (8010ce4 <HAL_ETH_MspInit+0x15c>)
 8010c7e:	f7f8 fc4b 	bl	8009518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8010c82:	2332      	movs	r3, #50	; 0x32
 8010c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c86:	2302      	movs	r3, #2
 8010c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c8e:	2303      	movs	r3, #3
 8010c90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010c92:	230b      	movs	r3, #11
 8010c94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	4812      	ldr	r0, [pc, #72]	; (8010ce8 <HAL_ETH_MspInit+0x160>)
 8010c9e:	f7f8 fc3b 	bl	8009518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 8010ca2:	2386      	movs	r3, #134	; 0x86
 8010ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ca6:	2302      	movs	r3, #2
 8010ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010caa:	2300      	movs	r3, #0
 8010cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010cae:	2303      	movs	r3, #3
 8010cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010cb2:	230b      	movs	r3, #11
 8010cb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010cba:	4619      	mov	r1, r3
 8010cbc:	480b      	ldr	r0, [pc, #44]	; (8010cec <HAL_ETH_MspInit+0x164>)
 8010cbe:	f7f8 fc2b 	bl	8009518 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 2, 0);
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	2102      	movs	r1, #2
 8010cc6:	203d      	movs	r0, #61	; 0x3d
 8010cc8:	f7f4 fb1b 	bl	8005302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8010ccc:	203d      	movs	r0, #61	; 0x3d
 8010cce:	f7f4 fb32 	bl	8005336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8010cd2:	bf00      	nop
 8010cd4:	3738      	adds	r7, #56	; 0x38
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}
 8010cda:	bf00      	nop
 8010cdc:	40028000 	.word	0x40028000
 8010ce0:	58024400 	.word	0x58024400
 8010ce4:	58021800 	.word	0x58021800
 8010ce8:	58020800 	.word	0x58020800
 8010cec:	58020000 	.word	0x58020000

08010cf0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b086      	sub	sp, #24
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8010d00:	4b4a      	ldr	r3, [pc, #296]	; (8010e2c <low_level_init+0x13c>)
 8010d02:	4a4b      	ldr	r2, [pc, #300]	; (8010e30 <low_level_init+0x140>)
 8010d04:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8010d06:	2300      	movs	r3, #0
 8010d08:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8010d0a:	2380      	movs	r3, #128	; 0x80
 8010d0c:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8010d0e:	23e1      	movs	r3, #225	; 0xe1
 8010d10:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8010d12:	2300      	movs	r3, #0
 8010d14:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8010d16:	2300      	movs	r3, #0
 8010d18:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8010d1e:	4a43      	ldr	r2, [pc, #268]	; (8010e2c <low_level_init+0x13c>)
 8010d20:	f107 030c 	add.w	r3, r7, #12
 8010d24:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8010d26:	4b41      	ldr	r3, [pc, #260]	; (8010e2c <low_level_init+0x13c>)
 8010d28:	2201      	movs	r2, #1
 8010d2a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8010d2c:	4b3f      	ldr	r3, [pc, #252]	; (8010e2c <low_level_init+0x13c>)
 8010d2e:	4a41      	ldr	r2, [pc, #260]	; (8010e34 <low_level_init+0x144>)
 8010d30:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8010d32:	4b3e      	ldr	r3, [pc, #248]	; (8010e2c <low_level_init+0x13c>)
 8010d34:	4a40      	ldr	r2, [pc, #256]	; (8010e38 <low_level_init+0x148>)
 8010d36:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8010d38:	4b3c      	ldr	r3, [pc, #240]	; (8010e2c <low_level_init+0x13c>)
 8010d3a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010d3e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8010d40:	483a      	ldr	r0, [pc, #232]	; (8010e2c <low_level_init+0x13c>)
 8010d42:	f7f6 fd71 	bl	8007828 <HAL_ETH_Init>
 8010d46:	4603      	mov	r3, r0
 8010d48:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8010d4a:	2234      	movs	r2, #52	; 0x34
 8010d4c:	2100      	movs	r1, #0
 8010d4e:	483b      	ldr	r0, [pc, #236]	; (8010e3c <low_level_init+0x14c>)
 8010d50:	f00f f8e2 	bl	801ff18 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8010d54:	4b39      	ldr	r3, [pc, #228]	; (8010e3c <low_level_init+0x14c>)
 8010d56:	2221      	movs	r2, #33	; 0x21
 8010d58:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8010d5a:	4b38      	ldr	r3, [pc, #224]	; (8010e3c <low_level_init+0x14c>)
 8010d5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010d60:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8010d62:	4b36      	ldr	r3, [pc, #216]	; (8010e3c <low_level_init+0x14c>)
 8010d64:	2200      	movs	r2, #0
 8010d66:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8010d68:	4835      	ldr	r0, [pc, #212]	; (8010e40 <low_level_init+0x150>)
 8010d6a:	f004 f841 	bl	8014df0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2206      	movs	r2, #6
 8010d72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8010d76:	4b2d      	ldr	r3, [pc, #180]	; (8010e2c <low_level_init+0x13c>)
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	781a      	ldrb	r2, [r3, #0]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8010d82:	4b2a      	ldr	r3, [pc, #168]	; (8010e2c <low_level_init+0x13c>)
 8010d84:	685b      	ldr	r3, [r3, #4]
 8010d86:	785a      	ldrb	r2, [r3, #1]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8010d8e:	4b27      	ldr	r3, [pc, #156]	; (8010e2c <low_level_init+0x13c>)
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	789a      	ldrb	r2, [r3, #2]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8010d9a:	4b24      	ldr	r3, [pc, #144]	; (8010e2c <low_level_init+0x13c>)
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	78da      	ldrb	r2, [r3, #3]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8010da6:	4b21      	ldr	r3, [pc, #132]	; (8010e2c <low_level_init+0x13c>)
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	791a      	ldrb	r2, [r3, #4]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8010db2:	4b1e      	ldr	r3, [pc, #120]	; (8010e2c <low_level_init+0x13c>)
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	795a      	ldrb	r2, [r3, #5]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010dc4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010dcc:	f043 030a 	orr.w	r3, r3, #10
 8010dd0:	b2da      	uxtb	r2, r3
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8010dd8:	2300      	movs	r3, #0
 8010dda:	617b      	str	r3, [r7, #20]
 8010ddc:	e00e      	b.n	8010dfc <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010de4:	fb02 f303 	mul.w	r3, r2, r3
 8010de8:	4a16      	ldr	r2, [pc, #88]	; (8010e44 <low_level_init+0x154>)
 8010dea:	441a      	add	r2, r3
 8010dec:	2300      	movs	r3, #0
 8010dee:	6979      	ldr	r1, [r7, #20]
 8010df0:	480e      	ldr	r0, [pc, #56]	; (8010e2c <low_level_init+0x13c>)
 8010df2:	f7f6 fdf3 	bl	80079dc <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	617b      	str	r3, [r7, #20]
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	2b03      	cmp	r3, #3
 8010e00:	d9ed      	bls.n	8010dde <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8010e02:	4911      	ldr	r1, [pc, #68]	; (8010e48 <low_level_init+0x158>)
 8010e04:	4811      	ldr	r0, [pc, #68]	; (8010e4c <low_level_init+0x15c>)
 8010e06:	f7f2 feb5 	bl	8003b74 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8010e0a:	4810      	ldr	r0, [pc, #64]	; (8010e4c <low_level_init+0x15c>)
 8010e0c:	f7f2 fee4 	bl	8003bd8 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8010e10:	7cfb      	ldrb	r3, [r7, #19]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d103      	bne.n	8010e1e <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f000 f9d4 	bl	80111c4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8010e1c:	e001      	b.n	8010e22 <low_level_init+0x132>
    Error_Handler();
 8010e1e:	f7f1 fedd 	bl	8002bdc <Error_Handler>
}
 8010e22:	bf00      	nop
 8010e24:	3718      	adds	r7, #24
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}
 8010e2a:	bf00      	nop
 8010e2c:	24007eac 	.word	0x24007eac
 8010e30:	40028000 	.word	0x40028000
 8010e34:	30040060 	.word	0x30040060
 8010e38:	30040000 	.word	0x30040000
 8010e3c:	24007f34 	.word	0x24007f34
 8010e40:	080292fc 	.word	0x080292fc
 8010e44:	30040200 	.word	0x30040200
 8010e48:	24000410 	.word	0x24000410
 8010e4c:	24007e8c 	.word	0x24007e8c

08010e50 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b092      	sub	sp, #72	; 0x48
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8010e64:	f107 030c 	add.w	r3, r7, #12
 8010e68:	2230      	movs	r2, #48	; 0x30
 8010e6a:	2100      	movs	r1, #0
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f00f f853 	bl	801ff18 <memset>

  for(q = p; q != NULL; q = q->next)
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	643b      	str	r3, [r7, #64]	; 0x40
 8010e76:	e049      	b.n	8010f0c <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8010e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e7a:	2b03      	cmp	r3, #3
 8010e7c:	d902      	bls.n	8010e84 <low_level_output+0x34>
      return ERR_IF;
 8010e7e:	f06f 030b 	mvn.w	r3, #11
 8010e82:	e056      	b.n	8010f32 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8010e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e86:	6859      	ldr	r1, [r3, #4]
 8010e88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e8a:	4613      	mov	r3, r2
 8010e8c:	005b      	lsls	r3, r3, #1
 8010e8e:	4413      	add	r3, r2
 8010e90:	009b      	lsls	r3, r3, #2
 8010e92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010e96:	4413      	add	r3, r2
 8010e98:	3b3c      	subs	r3, #60	; 0x3c
 8010e9a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8010e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e9e:	895b      	ldrh	r3, [r3, #10]
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ea4:	4613      	mov	r3, r2
 8010ea6:	005b      	lsls	r3, r3, #1
 8010ea8:	4413      	add	r3, r2
 8010eaa:	009b      	lsls	r3, r3, #2
 8010eac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010eb0:	4413      	add	r3, r2
 8010eb2:	3b38      	subs	r3, #56	; 0x38
 8010eb4:	6019      	str	r1, [r3, #0]

    if(i>0)
 8010eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d012      	beq.n	8010ee2 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8010ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ebe:	1e5a      	subs	r2, r3, #1
 8010ec0:	f107 000c 	add.w	r0, r7, #12
 8010ec4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ec6:	460b      	mov	r3, r1
 8010ec8:	005b      	lsls	r3, r3, #1
 8010eca:	440b      	add	r3, r1
 8010ecc:	009b      	lsls	r3, r3, #2
 8010ece:	18c1      	adds	r1, r0, r3
 8010ed0:	4613      	mov	r3, r2
 8010ed2:	005b      	lsls	r3, r3, #1
 8010ed4:	4413      	add	r3, r2
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010edc:	4413      	add	r3, r2
 8010ede:	3b34      	subs	r3, #52	; 0x34
 8010ee0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8010ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d10a      	bne.n	8010f00 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8010eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010eec:	4613      	mov	r3, r2
 8010eee:	005b      	lsls	r3, r3, #1
 8010ef0:	4413      	add	r3, r2
 8010ef2:	009b      	lsls	r3, r3, #2
 8010ef4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010ef8:	4413      	add	r3, r2
 8010efa:	3b34      	subs	r3, #52	; 0x34
 8010efc:	2200      	movs	r2, #0
 8010efe:	601a      	str	r2, [r3, #0]
    }

    i++;
 8010f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f02:	3301      	adds	r3, #1
 8010f04:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8010f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	643b      	str	r3, [r7, #64]	; 0x40
 8010f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d1b2      	bne.n	8010e78 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	891b      	ldrh	r3, [r3, #8]
 8010f16:	461a      	mov	r2, r3
 8010f18:	4b08      	ldr	r3, [pc, #32]	; (8010f3c <low_level_output+0xec>)
 8010f1a:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8010f1c:	4a07      	ldr	r2, [pc, #28]	; (8010f3c <low_level_output+0xec>)
 8010f1e:	f107 030c 	add.w	r3, r7, #12
 8010f22:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8010f24:	2214      	movs	r2, #20
 8010f26:	4905      	ldr	r1, [pc, #20]	; (8010f3c <low_level_output+0xec>)
 8010f28:	4805      	ldr	r0, [pc, #20]	; (8010f40 <low_level_output+0xf0>)
 8010f2a:	f7f6 fe44 	bl	8007bb6 <HAL_ETH_Transmit>

  return errval;
 8010f2e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3748      	adds	r7, #72	; 0x48
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	24007f34 	.word	0x24007f34
 8010f40:	24007eac 	.word	0x24007eac

08010f44 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b098      	sub	sp, #96	; 0x60
 8010f48:	af02      	add	r7, sp, #8
 8010f4a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	653b      	str	r3, [r7, #80]	; 0x50
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8010f50:	2300      	movs	r3, #0
 8010f52:	60bb      	str	r3, [r7, #8]
 8010f54:	2300      	movs	r3, #0
 8010f56:	657b      	str	r3, [r7, #84]	; 0x54
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8010f58:	f107 030c 	add.w	r3, r7, #12
 8010f5c:	2230      	movs	r2, #48	; 0x30
 8010f5e:	2100      	movs	r1, #0
 8010f60:	4618      	mov	r0, r3
 8010f62:	f00e ffd9 	bl	801ff18 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8010f66:	2300      	movs	r3, #0
 8010f68:	657b      	str	r3, [r7, #84]	; 0x54
 8010f6a:	e015      	b.n	8010f98 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8010f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f6e:	1c5a      	adds	r2, r3, #1
 8010f70:	f107 010c 	add.w	r1, r7, #12
 8010f74:	4613      	mov	r3, r2
 8010f76:	005b      	lsls	r3, r3, #1
 8010f78:	4413      	add	r3, r2
 8010f7a:	009b      	lsls	r3, r3, #2
 8010f7c:	4419      	add	r1, r3
 8010f7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010f80:	4613      	mov	r3, r2
 8010f82:	005b      	lsls	r3, r3, #1
 8010f84:	4413      	add	r3, r2
 8010f86:	009b      	lsls	r3, r3, #2
 8010f88:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010f8c:	4413      	add	r3, r2
 8010f8e:	3b44      	subs	r3, #68	; 0x44
 8010f90:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8010f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f94:	3301      	adds	r3, #1
 8010f96:	657b      	str	r3, [r7, #84]	; 0x54
 8010f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f9a:	2b02      	cmp	r3, #2
 8010f9c:	d9e6      	bls.n	8010f6c <low_level_input+0x28>
  }

  if (HAL_ETH_IsRxDataAvailable(&heth))
 8010f9e:	482b      	ldr	r0, [pc, #172]	; (801104c <low_level_input+0x108>)
 8010fa0:	f7f6 fe92 	bl	8007cc8 <HAL_ETH_IsRxDataAvailable>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d04a      	beq.n	8011040 <low_level_input+0xfc>
  {
    HAL_ETH_GetRxDataBuffer(&heth, RxBuff);
 8010faa:	f107 030c 	add.w	r3, r7, #12
 8010fae:	4619      	mov	r1, r3
 8010fb0:	4826      	ldr	r0, [pc, #152]	; (801104c <low_level_input+0x108>)
 8010fb2:	f7f6 ff79 	bl	8007ea8 <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8010fb6:	f107 0308 	add.w	r3, r7, #8
 8010fba:	4619      	mov	r1, r3
 8010fbc:	4823      	ldr	r0, [pc, #140]	; (801104c <low_level_input+0x108>)
 8010fbe:	f7f7 f811 	bl	8007fe4 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8010fc2:	4822      	ldr	r0, [pc, #136]	; (801104c <low_level_input+0x108>)
 8010fc4:	f7f7 f841 	bl	800804a <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	68ba      	ldr	r2, [r7, #8]
 8010fcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8010fce:	647a      	str	r2, [r7, #68]	; 0x44
    if ( dsize > 0 ) { 
 8010fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	dd1d      	ble.n	8011012 <low_level_input+0xce>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8010fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fd8:	f003 021f 	and.w	r2, r3, #31
 8010fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fde:	4413      	add	r3, r2
 8010fe0:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8010fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8010fe6:	f3bf 8f4f 	dsb	sy
}
 8010fea:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8010fec:	4a18      	ldr	r2, [pc, #96]	; (8011050 <low_level_input+0x10c>)
 8010fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ff0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8010ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ff6:	3320      	adds	r3, #32
 8010ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8010ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ffc:	3b20      	subs	r3, #32
 8010ffe:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8011000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011002:	2b00      	cmp	r3, #0
 8011004:	dcf2      	bgt.n	8010fec <low_level_input+0xa8>
  __ASM volatile ("dsb 0xF":::"memory");
 8011006:	f3bf 8f4f 	dsb	sy
}
 801100a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801100c:	f3bf 8f6f 	isb	sy
}
 8011010:	bf00      	nop
}
 8011012:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8011014:	480f      	ldr	r0, [pc, #60]	; (8011054 <low_level_input+0x110>)
 8011016:	f003 ff5f 	bl	8014ed8 <memp_malloc_pool>
 801101a:	64f8      	str	r0, [r7, #76]	; 0x4c
    custom_pbuf->custom_free_function = pbuf_free_custom;
 801101c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801101e:	4a0e      	ldr	r2, [pc, #56]	; (8011058 <low_level_input+0x114>)
 8011020:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	b299      	uxth	r1, r3
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	68ba      	ldr	r2, [r7, #8]
 801102a:	b292      	uxth	r2, r2
 801102c:	9201      	str	r2, [sp, #4]
 801102e:	9300      	str	r3, [sp, #0]
 8011030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011032:	2241      	movs	r2, #65	; 0x41
 8011034:	2000      	movs	r0, #0
 8011036:	f004 fc9d 	bl	8015974 <pbuf_alloced_custom>
 801103a:	6538      	str	r0, [r7, #80]	; 0x50

    return p;
 801103c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801103e:	e000      	b.n	8011042 <low_level_input+0xfe>
  }
  else
  {
    return NULL;
 8011040:	2300      	movs	r3, #0
  }
}
 8011042:	4618      	mov	r0, r3
 8011044:	3758      	adds	r7, #88	; 0x58
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
 801104a:	bf00      	nop
 801104c:	24007eac 	.word	0x24007eac
 8011050:	e000ed00 	.word	0xe000ed00
 8011054:	080292fc 	.word	0x080292fc
 8011058:	080110f9 	.word	0x080110f9

0801105c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b084      	sub	sp, #16
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f7ff ff6d 	bl	8010f44 <low_level_input>
 801106a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d010      	beq.n	8011094 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	691b      	ldr	r3, [r3, #16]
 8011076:	6879      	ldr	r1, [r7, #4]
 8011078:	68f8      	ldr	r0, [r7, #12]
 801107a:	4798      	blx	r3
 801107c:	4603      	mov	r3, r0
 801107e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8011080:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d006      	beq.n	8011096 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8011088:	68f8      	ldr	r0, [r7, #12]
 801108a:	f004 fe2d 	bl	8015ce8 <pbuf_free>
    p = NULL;
 801108e:	2300      	movs	r3, #0
 8011090:	60fb      	str	r3, [r7, #12]
 8011092:	e000      	b.n	8011096 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8011094:	bf00      	nop
  }

}
 8011096:	3710      	adds	r7, #16
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d106      	bne.n	80110b8 <ethernetif_init+0x1c>
 80110aa:	4b0e      	ldr	r3, [pc, #56]	; (80110e4 <ethernetif_init+0x48>)
 80110ac:	f240 12f3 	movw	r2, #499	; 0x1f3
 80110b0:	490d      	ldr	r1, [pc, #52]	; (80110e8 <ethernetif_init+0x4c>)
 80110b2:	480e      	ldr	r0, [pc, #56]	; (80110ec <ethernetif_init+0x50>)
 80110b4:	f00f fe2a 	bl	8020d0c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2273      	movs	r2, #115	; 0x73
 80110bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2274      	movs	r2, #116	; 0x74
 80110c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	4a09      	ldr	r2, [pc, #36]	; (80110f0 <ethernetif_init+0x54>)
 80110cc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	4a08      	ldr	r2, [pc, #32]	; (80110f4 <ethernetif_init+0x58>)
 80110d2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f7ff fe0b 	bl	8010cf0 <low_level_init>

  return ERR_OK;
 80110da:	2300      	movs	r3, #0
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3708      	adds	r7, #8
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}
 80110e4:	08025fb0 	.word	0x08025fb0
 80110e8:	08025fcc 	.word	0x08025fcc
 80110ec:	08025fdc 	.word	0x08025fdc
 80110f0:	080127e5 	.word	0x080127e5
 80110f4:	08010e51 	.word	0x08010e51

080110f8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8011104:	68f9      	ldr	r1, [r7, #12]
 8011106:	4803      	ldr	r0, [pc, #12]	; (8011114 <pbuf_free_custom+0x1c>)
 8011108:	f003 ff54 	bl	8014fb4 <memp_free_pool>
}
 801110c:	bf00      	nop
 801110e:	3710      	adds	r7, #16
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}
 8011114:	080292fc 	.word	0x080292fc

08011118 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801111c:	f7f2 ff12 	bl	8003f44 <HAL_GetTick>
 8011120:	4603      	mov	r3, r0
}
 8011122:	4618      	mov	r0, r3
 8011124:	bd80      	pop	{r7, pc}
	...

08011128 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801112c:	4802      	ldr	r0, [pc, #8]	; (8011138 <ETH_PHY_IO_Init+0x10>)
 801112e:	f7f7 fbe1 	bl	80088f4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8011132:	2300      	movs	r3, #0
}
 8011134:	4618      	mov	r0, r3
 8011136:	bd80      	pop	{r7, pc}
 8011138:	24007eac 	.word	0x24007eac

0801113c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801113c:	b480      	push	{r7}
 801113e:	af00      	add	r7, sp, #0
  return 0;
 8011140:	2300      	movs	r3, #0
}
 8011142:	4618      	mov	r0, r3
 8011144:	46bd      	mov	sp, r7
 8011146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114a:	4770      	bx	lr

0801114c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b084      	sub	sp, #16
 8011150:	af00      	add	r7, sp, #0
 8011152:	60f8      	str	r0, [r7, #12]
 8011154:	60b9      	str	r1, [r7, #8]
 8011156:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	68ba      	ldr	r2, [r7, #8]
 801115c:	68f9      	ldr	r1, [r7, #12]
 801115e:	4807      	ldr	r0, [pc, #28]	; (801117c <ETH_PHY_IO_ReadReg+0x30>)
 8011160:	f7f7 f932 	bl	80083c8 <HAL_ETH_ReadPHYRegister>
 8011164:	4603      	mov	r3, r0
 8011166:	2b00      	cmp	r3, #0
 8011168:	d002      	beq.n	8011170 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801116a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801116e:	e000      	b.n	8011172 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8011170:	2300      	movs	r3, #0
}
 8011172:	4618      	mov	r0, r3
 8011174:	3710      	adds	r7, #16
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
 801117a:	bf00      	nop
 801117c:	24007eac 	.word	0x24007eac

08011180 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b084      	sub	sp, #16
 8011184:	af00      	add	r7, sp, #0
 8011186:	60f8      	str	r0, [r7, #12]
 8011188:	60b9      	str	r1, [r7, #8]
 801118a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	68ba      	ldr	r2, [r7, #8]
 8011190:	68f9      	ldr	r1, [r7, #12]
 8011192:	4807      	ldr	r0, [pc, #28]	; (80111b0 <ETH_PHY_IO_WriteReg+0x30>)
 8011194:	f7f7 f96c 	bl	8008470 <HAL_ETH_WritePHYRegister>
 8011198:	4603      	mov	r3, r0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d002      	beq.n	80111a4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801119e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80111a2:	e000      	b.n	80111a6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80111a4:	2300      	movs	r3, #0
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3710      	adds	r7, #16
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	24007eac 	.word	0x24007eac

080111b4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80111b8:	f7f2 fec4 	bl	8003f44 <HAL_GetTick>
 80111bc:	4603      	mov	r3, r0
}
 80111be:	4618      	mov	r0, r3
 80111c0:	bd80      	pop	{r7, pc}
	...

080111c4 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b0a0      	sub	sp, #128	; 0x80
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 80111cc:	2300      	movs	r3, #0
 80111ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80111d0:	2300      	movs	r3, #0
 80111d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80111d4:	2300      	movs	r3, #0
 80111d6:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80111d8:	483a      	ldr	r0, [pc, #232]	; (80112c4 <ethernet_link_check_state+0x100>)
 80111da:	f7f2 fda5 	bl	8003d28 <LAN8742_GetLinkState>
 80111de:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80111e6:	089b      	lsrs	r3, r3, #2
 80111e8:	f003 0301 	and.w	r3, r3, #1
 80111ec:	b2db      	uxtb	r3, r3
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d00c      	beq.n	801120c <ethernet_link_check_state+0x48>
 80111f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	dc09      	bgt.n	801120c <ethernet_link_check_state+0x48>
  {
    HAL_ETH_Stop(&heth);
 80111f8:	4833      	ldr	r0, [pc, #204]	; (80112c8 <ethernet_link_check_state+0x104>)
 80111fa:	f7f6 fc8c 	bl	8007b16 <HAL_ETH_Stop>
    netif_set_down(netif);
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f004 f95c 	bl	80154bc <netif_set_down>
    netif_set_link_down(netif);
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f004 f9bf 	bl	8015588 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 801120a:	e056      	b.n	80112ba <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011212:	f003 0304 	and.w	r3, r3, #4
 8011216:	2b00      	cmp	r3, #0
 8011218:	d14f      	bne.n	80112ba <ethernet_link_check_state+0xf6>
 801121a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801121c:	2b01      	cmp	r3, #1
 801121e:	dd4c      	ble.n	80112ba <ethernet_link_check_state+0xf6>
 8011220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011222:	3b02      	subs	r3, #2
 8011224:	2b03      	cmp	r3, #3
 8011226:	d82b      	bhi.n	8011280 <ethernet_link_check_state+0xbc>
 8011228:	a201      	add	r2, pc, #4	; (adr r2, 8011230 <ethernet_link_check_state+0x6c>)
 801122a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801122e:	bf00      	nop
 8011230:	08011241 	.word	0x08011241
 8011234:	08011253 	.word	0x08011253
 8011238:	08011263 	.word	0x08011263
 801123c:	08011273 	.word	0x08011273
      duplex = ETH_FULLDUPLEX_MODE;
 8011240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011244:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8011246:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801124a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801124c:	2301      	movs	r3, #1
 801124e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011250:	e017      	b.n	8011282 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 8011252:	2300      	movs	r3, #0
 8011254:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8011256:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801125a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801125c:	2301      	movs	r3, #1
 801125e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011260:	e00f      	b.n	8011282 <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 8011262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011266:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8011268:	2300      	movs	r3, #0
 801126a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801126c:	2301      	movs	r3, #1
 801126e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011270:	e007      	b.n	8011282 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 8011272:	2300      	movs	r3, #0
 8011274:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8011276:	2300      	movs	r3, #0
 8011278:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801127a:	2301      	movs	r3, #1
 801127c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801127e:	e000      	b.n	8011282 <ethernet_link_check_state+0xbe>
      break;
 8011280:	bf00      	nop
    if(linkchanged)
 8011282:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011284:	2b00      	cmp	r3, #0
 8011286:	d018      	beq.n	80112ba <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8011288:	f107 030c 	add.w	r3, r7, #12
 801128c:	4619      	mov	r1, r3
 801128e:	480e      	ldr	r0, [pc, #56]	; (80112c8 <ethernet_link_check_state+0x104>)
 8011290:	f7f7 f942 	bl	8008518 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8011294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011296:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8011298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801129a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801129c:	f107 030c 	add.w	r3, r7, #12
 80112a0:	4619      	mov	r1, r3
 80112a2:	4809      	ldr	r0, [pc, #36]	; (80112c8 <ethernet_link_check_state+0x104>)
 80112a4:	f7f7 fb0c 	bl	80088c0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80112a8:	4807      	ldr	r0, [pc, #28]	; (80112c8 <ethernet_link_check_state+0x104>)
 80112aa:	f7f6 fbd8 	bl	8007a5e <HAL_ETH_Start>
      netif_set_up(netif);
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f004 f898 	bl	80153e4 <netif_set_up>
      netif_set_link_up(netif);
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f004 f933 	bl	8015520 <netif_set_link_up>
}
 80112ba:	bf00      	nop
 80112bc:	3780      	adds	r7, #128	; 0x80
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	24007e8c 	.word	0x24007e8c
 80112c8:	24007eac 	.word	0x24007eac

080112cc <synth_IfftInit>:
 * @brief  synth ifft init.
 * @param
 * @retval Error
 */
int32_t synth_IfftInit(void)
{
 80112cc:	b590      	push	{r4, r7, lr}
 80112ce:	ed2d 8b02 	vpush	{d8}
 80112d2:	b0c7      	sub	sp, #284	; 0x11c
 80112d4:	af02      	add	r7, sp, #8
	int32_t buffer_len = 0;
 80112d6:	2300      	movs	r3, #0
 80112d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t aRandom32bit = 0;
 80112dc:	2300      	movs	r3, #0
 80112de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint8_t FreqStr[256] = {0};
 80112e2:	1d3b      	adds	r3, r7, #4
 80112e4:	2200      	movs	r2, #0
 80112e6:	601a      	str	r2, [r3, #0]
 80112e8:	3304      	adds	r3, #4
 80112ea:	22fc      	movs	r2, #252	; 0xfc
 80112ec:	2100      	movs	r1, #0
 80112ee:	4618      	mov	r0, r3
 80112f0:	f00e fe12 	bl	801ff18 <memset>

	//allocate the contiguous memory area for storage image data
	imageData = malloc(cis_GetEffectivePixelNb() * sizeof(uint16_t*));
 80112f4:	f00b fe68 	bl	801cfc8 <cis_GetEffectivePixelNb>
 80112f8:	4603      	mov	r3, r0
 80112fa:	009b      	lsls	r3, r3, #2
 80112fc:	4618      	mov	r0, r3
 80112fe:	f00e fdcd 	bl	801fe9c <malloc>
 8011302:	4603      	mov	r3, r0
 8011304:	461a      	mov	r2, r3
 8011306:	4b6f      	ldr	r3, [pc, #444]	; (80114c4 <synth_IfftInit+0x1f8>)
 8011308:	601a      	str	r2, [r3, #0]
	if (imageData == NULL)
 801130a:	4b6e      	ldr	r3, [pc, #440]	; (80114c4 <synth_IfftInit+0x1f8>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d101      	bne.n	8011316 <synth_IfftInit+0x4a>
	{
		Error_Handler();
 8011312:	f7f1 fc63 	bl	8002bdc <Error_Handler>
	}

	memset(imageData, 0, cis_GetEffectivePixelNb() * sizeof(uint16_t*));
 8011316:	4b6b      	ldr	r3, [pc, #428]	; (80114c4 <synth_IfftInit+0x1f8>)
 8011318:	681c      	ldr	r4, [r3, #0]
 801131a:	f00b fe55 	bl	801cfc8 <cis_GetEffectivePixelNb>
 801131e:	4603      	mov	r3, r0
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	461a      	mov	r2, r3
 8011324:	2100      	movs	r1, #0
 8011326:	4620      	mov	r0, r4
 8011328:	f00e fdf6 	bl	801ff18 <memset>

	buffer_len = init_waves(&unitary_waveform, waves);
 801132c:	4966      	ldr	r1, [pc, #408]	; (80114c8 <synth_IfftInit+0x1fc>)
 801132e:	4867      	ldr	r0, [pc, #412]	; (80114cc <synth_IfftInit+0x200>)
 8011330:	f000 fcc2 	bl	8011cb8 <init_waves>
 8011334:	4603      	mov	r3, r0
 8011336:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	// start with random index
	for (uint32_t i = 0; i < NUMBER_OF_NOTES; i++)
 801133a:	2300      	movs	r3, #0
 801133c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8011340:	e037      	b.n	80113b2 <synth_IfftInit+0xe6>
	{
		if (HAL_RNG_GenerateRandomNumber(&hrng, &aRandom32bit) != HAL_OK)
 8011342:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8011346:	4619      	mov	r1, r3
 8011348:	4861      	ldr	r0, [pc, #388]	; (80114d0 <synth_IfftInit+0x204>)
 801134a:	f7fb fcf2 	bl	800cd32 <HAL_RNG_GenerateRandomNumber>
 801134e:	4603      	mov	r3, r0
 8011350:	2b00      	cmp	r3, #0
 8011352:	d001      	beq.n	8011358 <synth_IfftInit+0x8c>
		{
			/* Random number generation error */
			Error_Handler();
 8011354:	f7f1 fc42 	bl	8002bdc <Error_Handler>
		}
		waves[i].current_idx = aRandom32bit % waves[i].aera_size;
 8011358:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801135c:	485a      	ldr	r0, [pc, #360]	; (80114c8 <synth_IfftInit+0x1fc>)
 801135e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8011362:	460b      	mov	r3, r1
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	440b      	add	r3, r1
 8011368:	009b      	lsls	r3, r3, #2
 801136a:	4403      	add	r3, r0
 801136c:	3306      	adds	r3, #6
 801136e:	881b      	ldrh	r3, [r3, #0]
 8011370:	fbb2 f1f3 	udiv	r1, r2, r3
 8011374:	fb03 f301 	mul.w	r3, r3, r1
 8011378:	1ad3      	subs	r3, r2, r3
 801137a:	b298      	uxth	r0, r3
 801137c:	4952      	ldr	r1, [pc, #328]	; (80114c8 <synth_IfftInit+0x1fc>)
 801137e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8011382:	4613      	mov	r3, r2
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	4413      	add	r3, r2
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	440b      	add	r3, r1
 801138c:	3304      	adds	r3, #4
 801138e:	4602      	mov	r2, r0
 8011390:	801a      	strh	r2, [r3, #0]
		waves[i].current_volume = 0;
 8011392:	494d      	ldr	r1, [pc, #308]	; (80114c8 <synth_IfftInit+0x1fc>)
 8011394:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8011398:	4613      	mov	r3, r2
 801139a:	009b      	lsls	r3, r3, #2
 801139c:	4413      	add	r3, r2
 801139e:	009b      	lsls	r3, r3, #2
 80113a0:	440b      	add	r3, r1
 80113a2:	330c      	adds	r3, #12
 80113a4:	2200      	movs	r2, #0
 80113a6:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < NUMBER_OF_NOTES; i++)
 80113a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80113ac:	3301      	adds	r3, #1
 80113ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80113b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80113b6:	2b98      	cmp	r3, #152	; 0x98
 80113b8:	d9c3      	bls.n	8011342 <synth_IfftInit+0x76>
	}

	if (buffer_len < 0)
 80113ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80113be:	2b00      	cmp	r3, #0
 80113c0:	da05      	bge.n	80113ce <synth_IfftInit+0x102>
	{
		printf("RAM overflow");
 80113c2:	4844      	ldr	r0, [pc, #272]	; (80114d4 <synth_IfftInit+0x208>)
 80113c4:	f00f fca2 	bl	8020d0c <iprintf>
		return -1;
 80113c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113cc:	e073      	b.n	80114b6 <synth_IfftInit+0x1ea>
	}

	printf("Buffer lengh = %d\n", (int)buffer_len);
 80113ce:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80113d2:	4841      	ldr	r0, [pc, #260]	; (80114d8 <synth_IfftInit+0x20c>)
 80113d4:	f00f fc9a 	bl	8020d0c <iprintf>

#ifdef PRINT_FREQUENCY
	ssd1362_drawRect(0, 57, 256, 64, 5, false);
 80113d8:	2300      	movs	r3, #0
 80113da:	9301      	str	r3, [sp, #4]
 80113dc:	2305      	movs	r3, #5
 80113de:	9300      	str	r3, [sp, #0]
 80113e0:	2340      	movs	r3, #64	; 0x40
 80113e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80113e6:	2139      	movs	r1, #57	; 0x39
 80113e8:	2000      	movs	r0, #0
 80113ea:	f00c fba7 	bl	801db3c <ssd1362_drawRect>
	sprintf((char *)FreqStr, "%dHz Sz%d Oc%d", (int)waves[0].frequency, (int)waves[0].aera_size, (int)waves[0].octave_coeff);
 80113ee:	4b36      	ldr	r3, [pc, #216]	; (80114c8 <synth_IfftInit+0x1fc>)
 80113f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80113f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80113f8:	4b33      	ldr	r3, [pc, #204]	; (80114c8 <synth_IfftInit+0x1fc>)
 80113fa:	88db      	ldrh	r3, [r3, #6]
 80113fc:	461a      	mov	r2, r3
 80113fe:	4b32      	ldr	r3, [pc, #200]	; (80114c8 <synth_IfftInit+0x1fc>)
 8011400:	891b      	ldrh	r3, [r3, #8]
 8011402:	1d38      	adds	r0, r7, #4
 8011404:	9300      	str	r3, [sp, #0]
 8011406:	4613      	mov	r3, r2
 8011408:	ee17 2a90 	vmov	r2, s15
 801140c:	4933      	ldr	r1, [pc, #204]	; (80114dc <synth_IfftInit+0x210>)
 801140e:	f00f fd61 	bl	8020ed4 <siprintf>
	ssd1362_drawString(0, 57, (int8_t*)FreqStr, 0, 8);
 8011412:	1d3a      	adds	r2, r7, #4
 8011414:	2308      	movs	r3, #8
 8011416:	9300      	str	r3, [sp, #0]
 8011418:	2300      	movs	r3, #0
 801141a:	2139      	movs	r1, #57	; 0x39
 801141c:	2000      	movs	r0, #0
 801141e:	f00c fcf0 	bl	801de02 <ssd1362_drawString>
	sprintf((char *)FreqStr, "%dHz Sz%d Oc%d", (int)waves[NUMBER_OF_NOTES - 1].frequency, (int)waves[NUMBER_OF_NOTES - 1].aera_size / (int)sqrt(waves[NUMBER_OF_NOTES - 1].octave_coeff), (int)sqrt(waves[NUMBER_OF_NOTES - 1].octave_coeff));
 8011422:	4b29      	ldr	r3, [pc, #164]	; (80114c8 <synth_IfftInit+0x1fc>)
 8011424:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 8011428:	edd3 7a00 	vldr	s15, [r3]
 801142c:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8011430:	4b25      	ldr	r3, [pc, #148]	; (80114c8 <synth_IfftInit+0x1fc>)
 8011432:	f8b3 3be6 	ldrh.w	r3, [r3, #3046]	; 0xbe6
 8011436:	461c      	mov	r4, r3
 8011438:	4b23      	ldr	r3, [pc, #140]	; (80114c8 <synth_IfftInit+0x1fc>)
 801143a:	f8b3 3be8 	ldrh.w	r3, [r3, #3048]	; 0xbe8
 801143e:	ee07 3a90 	vmov	s15, r3
 8011442:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011446:	eeb0 0b47 	vmov.f64	d0, d7
 801144a:	f013 fe21 	bl	8025090 <sqrt>
 801144e:	eeb0 7b40 	vmov.f64	d7, d0
 8011452:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011456:	ee17 3a90 	vmov	r3, s15
 801145a:	fb94 f4f3 	sdiv	r4, r4, r3
 801145e:	4b1a      	ldr	r3, [pc, #104]	; (80114c8 <synth_IfftInit+0x1fc>)
 8011460:	f8b3 3be8 	ldrh.w	r3, [r3, #3048]	; 0xbe8
 8011464:	ee07 3a90 	vmov	s15, r3
 8011468:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801146c:	eeb0 0b47 	vmov.f64	d0, d7
 8011470:	f013 fe0e 	bl	8025090 <sqrt>
 8011474:	eeb0 7b40 	vmov.f64	d7, d0
 8011478:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801147c:	ee17 3a90 	vmov	r3, s15
 8011480:	1d38      	adds	r0, r7, #4
 8011482:	9300      	str	r3, [sp, #0]
 8011484:	4623      	mov	r3, r4
 8011486:	ee18 2a10 	vmov	r2, s16
 801148a:	4914      	ldr	r1, [pc, #80]	; (80114dc <synth_IfftInit+0x210>)
 801148c:	f00f fd22 	bl	8020ed4 <siprintf>
	ssd1362_drawString(128, 57, (int8_t*)FreqStr, 0, 8);
 8011490:	1d3a      	adds	r2, r7, #4
 8011492:	2308      	movs	r3, #8
 8011494:	9300      	str	r3, [sp, #0]
 8011496:	2300      	movs	r3, #0
 8011498:	2139      	movs	r1, #57	; 0x39
 801149a:	2080      	movs	r0, #128	; 0x80
 801149c:	f00c fcb1 	bl	801de02 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 80114a0:	f00c fd7e 	bl	801dfa0 <ssd1362_writeFullBuffer>
	//		//				HAL_Delay(1);
	//	}
	//	printf("---- END ----");
#endif

	if (synth_AudioInit() == 0)
 80114a4:	f000 f81c 	bl	80114e0 <synth_AudioInit>
 80114a8:	4603      	mov	r3, r0
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d101      	bne.n	80114b2 <synth_IfftInit+0x1e6>
		return 0;
 80114ae:	2300      	movs	r3, #0
 80114b0:	e001      	b.n	80114b6 <synth_IfftInit+0x1ea>
	else
		return -1;
 80114b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80114bc:	46bd      	mov	sp, r7
 80114be:	ecbd 8b02 	vpop	{d8}
 80114c2:	bd90      	pop	{r4, r7, pc}
 80114c4:	24004658 	.word	0x24004658
 80114c8:	24003a60 	.word	0x24003a60
 80114cc:	24003a5c 	.word	0x24003a5c
 80114d0:	240079b4 	.word	0x240079b4
 80114d4:	08026004 	.word	0x08026004
 80114d8:	08026014 	.word	0x08026014
 80114dc:	08026028 	.word	0x08026028

080114e0 <synth_AudioInit>:

int32_t synth_AudioInit(void)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
	uint32_t bytesread;

	buffer_ctl.state = AUDIO_BUFFER_OFFSET_NONE;
 80114e6:	4a18      	ldr	r2, [pc, #96]	; (8011548 <synth_AudioInit+0x68>)
 80114e8:	f241 0304 	movw	r3, #4100	; 0x1004
 80114ec:	4413      	add	r3, r2
 80114ee:	2200      	movs	r2, #0
 80114f0:	701a      	strb	r2, [r3, #0]
	buffer_ctl.AudioFileSize = AUDIO_QUARTER_BUFFER_SIZE;
 80114f2:	4a15      	ldr	r2, [pc, #84]	; (8011548 <synth_AudioInit+0x68>)
 80114f4:	f241 0308 	movw	r3, #4104	; 0x1008
 80114f8:	4413      	add	r3, r2
 80114fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80114fe:	601a      	str	r2, [r3, #0]
	buffer_ctl.SrcAddress = (uint32_t*)audioBuff;
 8011500:	4a11      	ldr	r2, [pc, #68]	; (8011548 <synth_AudioInit+0x68>)
 8011502:	f241 030c 	movw	r3, #4108	; 0x100c
 8011506:	4413      	add	r3, r2
 8011508:	4a10      	ldr	r2, [pc, #64]	; (801154c <synth_AudioInit+0x6c>)
 801150a:	601a      	str	r2, [r3, #0]

	bytesread = synthGetDataNb((void *)audioBuff, 0, &buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 801150c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011510:	4a0d      	ldr	r2, [pc, #52]	; (8011548 <synth_AudioInit+0x68>)
 8011512:	2100      	movs	r1, #0
 8011514:	480d      	ldr	r0, [pc, #52]	; (801154c <synth_AudioInit+0x6c>)
 8011516:	f000 fb39 	bl	8011b8c <synthGetDataNb>
 801151a:	6078      	str	r0, [r7, #4]
	if(bytesread > 0)
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d00c      	beq.n	801153c <synth_AudioInit+0x5c>
	{
		HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 8011522:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011526:	4908      	ldr	r1, [pc, #32]	; (8011548 <synth_AudioInit+0x68>)
 8011528:	4809      	ldr	r0, [pc, #36]	; (8011550 <synth_AudioInit+0x70>)
 801152a:	f7fb ff23 	bl	800d374 <HAL_SAI_Transmit_DMA>
		buffer_ctl.fptr = bytesread;
 801152e:	4b06      	ldr	r3, [pc, #24]	; (8011548 <synth_AudioInit+0x68>)
 8011530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011534:	687a      	ldr	r2, [r7, #4]
 8011536:	601a      	str	r2, [r3, #0]

		return 0;
 8011538:	2300      	movs	r3, #0
 801153a:	e001      	b.n	8011540 <synth_AudioInit+0x60>
	}

	return -1;
 801153c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011540:	4618      	mov	r0, r3
 8011542:	3708      	adds	r7, #8
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}
 8011548:	24006660 	.word	0x24006660
 801154c:	24004660 	.word	0x24004660
 8011550:	24007a40 	.word	0x24007a40

08011554 <synth_GetAudioData>:
 * @brief  Get RFFT buffer data
 * @param  Index
 * @retval Value
 */
int32_t synth_GetAudioData(uint32_t index)
{
 8011554:	b480      	push	{r7}
 8011556:	b083      	sub	sp, #12
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
	//	if (index >= RFFT_BUFFER_SIZE)
	//		Error_Handler();
	return audioBuff[index];
 801155c:	4a04      	ldr	r2, [pc, #16]	; (8011570 <synth_GetAudioData+0x1c>)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8011564:	4618      	mov	r0, r3
 8011566:	370c      	adds	r7, #12
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr
 8011570:	24004660 	.word	0x24004660

08011574 <synth_SetImageData>:
 * @brief  Set Image buffer data
 * @param  Index
 * @retval Value
 */
int32_t synth_SetImageData(uint32_t index, uint16_t value)
{
 8011574:	b480      	push	{r7}
 8011576:	b083      	sub	sp, #12
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
 801157c:	460b      	mov	r3, r1
 801157e:	807b      	strh	r3, [r7, #2]
	//	if (index >= RFFT_BUFFER_SIZE)
	//		Error_Handler();
	imageData[index] = value;
 8011580:	4b06      	ldr	r3, [pc, #24]	; (801159c <synth_SetImageData+0x28>)
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	005b      	lsls	r3, r3, #1
 8011588:	4413      	add	r3, r2
 801158a:	887a      	ldrh	r2, [r7, #2]
 801158c:	801a      	strh	r2, [r3, #0]
	return 0;
 801158e:	2300      	movs	r3, #0
}
 8011590:	4618      	mov	r0, r3
 8011592:	370c      	adds	r7, #12
 8011594:	46bd      	mov	sp, r7
 8011596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159a:	4770      	bx	lr
 801159c:	24004658 	.word	0x24004658

080115a0 <synth_IfftMode>:
 * @retval None
 */
#pragma GCC push_options
#pragma GCC optimize ("unroll-loops")
void synth_IfftMode(uint16_t *imageData, int16_t *audioData, uint32_t NbrOfData)
{
 80115a0:	b480      	push	{r7}
 80115a2:	b087      	sub	sp, #28
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	60f8      	str	r0, [r7, #12]
 80115a8:	60b9      	str	r1, [r7, #8]
 80115aa:	607a      	str	r2, [r7, #4]
	static uint16_t new_idx;
	static uint32_t write_data_nbr;
	static int32_t max_volume;
	static int32_t current_image_data;

	write_data_nbr = 0;
 80115ac:	4b50      	ldr	r3, [pc, #320]	; (80116f0 <synth_IfftMode+0x150>)
 80115ae:	2200      	movs	r2, #0
 80115b0:	601a      	str	r2, [r3, #0]

	while(write_data_nbr < (NbrOfData * 2))
 80115b2:	e166      	b.n	8011882 <synth_IfftMode+0x2e2>
	{
		signal_summation = 0;
 80115b4:	4b4f      	ldr	r3, [pc, #316]	; (80116f4 <synth_IfftMode+0x154>)
 80115b6:	2200      	movs	r2, #0
 80115b8:	601a      	str	r2, [r3, #0]
		signal_power_summation = 0;
 80115ba:	4b4f      	ldr	r3, [pc, #316]	; (80116f8 <synth_IfftMode+0x158>)
 80115bc:	2200      	movs	r2, #0
 80115be:	601a      	str	r2, [r3, #0]
		max_volume = 0;
 80115c0:	4b4e      	ldr	r3, [pc, #312]	; (80116fc <synth_IfftMode+0x15c>)
 80115c2:	2200      	movs	r2, #0
 80115c4:	601a      	str	r2, [r3, #0]

		//Summation for all pixel
		for (int32_t note = NUMBER_OF_NOTES; --note >= 1;)
 80115c6:	2399      	movs	r3, #153	; 0x99
 80115c8:	617b      	str	r3, [r7, #20]
 80115ca:	e11e      	b.n	801180a <synth_IfftMode+0x26a>
		{
			//octave_coeff jump current pointer into the fundamental waveform, for example : the 3th octave increment the current pointer 8 per 8 (2^3)
			//example for 17 cell waveform and 3th octave : [X][Y][Z][X][Y][Z][X][Y][Z][X][Y][[Z][X][Y][[Z][X][Y], X for the first pass, Y for second etc...
			new_idx = (waves[note].current_idx + waves[note].octave_coeff);
 80115cc:	494c      	ldr	r1, [pc, #304]	; (8011700 <synth_IfftMode+0x160>)
 80115ce:	697a      	ldr	r2, [r7, #20]
 80115d0:	4613      	mov	r3, r2
 80115d2:	009b      	lsls	r3, r3, #2
 80115d4:	4413      	add	r3, r2
 80115d6:	009b      	lsls	r3, r3, #2
 80115d8:	440b      	add	r3, r1
 80115da:	3304      	adds	r3, #4
 80115dc:	8819      	ldrh	r1, [r3, #0]
 80115de:	4848      	ldr	r0, [pc, #288]	; (8011700 <synth_IfftMode+0x160>)
 80115e0:	697a      	ldr	r2, [r7, #20]
 80115e2:	4613      	mov	r3, r2
 80115e4:	009b      	lsls	r3, r3, #2
 80115e6:	4413      	add	r3, r2
 80115e8:	009b      	lsls	r3, r3, #2
 80115ea:	4403      	add	r3, r0
 80115ec:	3308      	adds	r3, #8
 80115ee:	881b      	ldrh	r3, [r3, #0]
 80115f0:	440b      	add	r3, r1
 80115f2:	b29a      	uxth	r2, r3
 80115f4:	4b43      	ldr	r3, [pc, #268]	; (8011704 <synth_IfftMode+0x164>)
 80115f6:	801a      	strh	r2, [r3, #0]
			if (new_idx >= waves[note].aera_size)
 80115f8:	4941      	ldr	r1, [pc, #260]	; (8011700 <synth_IfftMode+0x160>)
 80115fa:	697a      	ldr	r2, [r7, #20]
 80115fc:	4613      	mov	r3, r2
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	4413      	add	r3, r2
 8011602:	009b      	lsls	r3, r3, #2
 8011604:	440b      	add	r3, r1
 8011606:	3306      	adds	r3, #6
 8011608:	881a      	ldrh	r2, [r3, #0]
 801160a:	4b3e      	ldr	r3, [pc, #248]	; (8011704 <synth_IfftMode+0x164>)
 801160c:	881b      	ldrh	r3, [r3, #0]
 801160e:	429a      	cmp	r2, r3
 8011610:	d80e      	bhi.n	8011630 <synth_IfftMode+0x90>
				new_idx -= waves[note].aera_size;
 8011612:	4b3c      	ldr	r3, [pc, #240]	; (8011704 <synth_IfftMode+0x164>)
 8011614:	8819      	ldrh	r1, [r3, #0]
 8011616:	483a      	ldr	r0, [pc, #232]	; (8011700 <synth_IfftMode+0x160>)
 8011618:	697a      	ldr	r2, [r7, #20]
 801161a:	4613      	mov	r3, r2
 801161c:	009b      	lsls	r3, r3, #2
 801161e:	4413      	add	r3, r2
 8011620:	009b      	lsls	r3, r3, #2
 8011622:	4403      	add	r3, r0
 8011624:	3306      	adds	r3, #6
 8011626:	881b      	ldrh	r3, [r3, #0]
 8011628:	1acb      	subs	r3, r1, r3
 801162a:	b29a      	uxth	r2, r3
 801162c:	4b35      	ldr	r3, [pc, #212]	; (8011704 <synth_IfftMode+0x164>)
 801162e:	801a      	strh	r2, [r3, #0]

			if (imageData[note - 1] - imageData[note] > 0)
 8011630:	697a      	ldr	r2, [r7, #20]
 8011632:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011636:	4413      	add	r3, r2
 8011638:	005b      	lsls	r3, r3, #1
 801163a:	68fa      	ldr	r2, [r7, #12]
 801163c:	4413      	add	r3, r2
 801163e:	881b      	ldrh	r3, [r3, #0]
 8011640:	4619      	mov	r1, r3
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	005b      	lsls	r3, r3, #1
 8011646:	68fa      	ldr	r2, [r7, #12]
 8011648:	4413      	add	r3, r2
 801164a:	881b      	ldrh	r3, [r3, #0]
 801164c:	1acb      	subs	r3, r1, r3
 801164e:	2b00      	cmp	r3, #0
 8011650:	dd11      	ble.n	8011676 <synth_IfftMode+0xd6>
				current_image_data = imageData[note - 1] - imageData[note];
 8011652:	697a      	ldr	r2, [r7, #20]
 8011654:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011658:	4413      	add	r3, r2
 801165a:	005b      	lsls	r3, r3, #1
 801165c:	68fa      	ldr	r2, [r7, #12]
 801165e:	4413      	add	r3, r2
 8011660:	881b      	ldrh	r3, [r3, #0]
 8011662:	4619      	mov	r1, r3
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	005b      	lsls	r3, r3, #1
 8011668:	68fa      	ldr	r2, [r7, #12]
 801166a:	4413      	add	r3, r2
 801166c:	881b      	ldrh	r3, [r3, #0]
 801166e:	1acb      	subs	r3, r1, r3
 8011670:	4a25      	ldr	r2, [pc, #148]	; (8011708 <synth_IfftMode+0x168>)
 8011672:	6013      	str	r3, [r2, #0]
 8011674:	e002      	b.n	801167c <synth_IfftMode+0xdc>
			else
				current_image_data = 0;//imageData[note] - imageData[note - 1];
 8011676:	4b24      	ldr	r3, [pc, #144]	; (8011708 <synth_IfftMode+0x168>)
 8011678:	2200      	movs	r2, #0
 801167a:	601a      	str	r2, [r3, #0]

			if (waves[note].current_volume < current_image_data)
 801167c:	4920      	ldr	r1, [pc, #128]	; (8011700 <synth_IfftMode+0x160>)
 801167e:	697a      	ldr	r2, [r7, #20]
 8011680:	4613      	mov	r3, r2
 8011682:	009b      	lsls	r3, r3, #2
 8011684:	4413      	add	r3, r2
 8011686:	009b      	lsls	r3, r3, #2
 8011688:	440b      	add	r3, r1
 801168a:	330c      	adds	r3, #12
 801168c:	681a      	ldr	r2, [r3, #0]
 801168e:	4b1e      	ldr	r3, [pc, #120]	; (8011708 <synth_IfftMode+0x168>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	429a      	cmp	r2, r3
 8011694:	da3a      	bge.n	801170c <synth_IfftMode+0x16c>
			{
				waves[note].current_volume += IFFT_GAP_PER_MS / (SAMPLING_FREQUENCY / 1000);
 8011696:	491a      	ldr	r1, [pc, #104]	; (8011700 <synth_IfftMode+0x160>)
 8011698:	697a      	ldr	r2, [r7, #20]
 801169a:	4613      	mov	r3, r2
 801169c:	009b      	lsls	r3, r3, #2
 801169e:	4413      	add	r3, r2
 80116a0:	009b      	lsls	r3, r3, #2
 80116a2:	440b      	add	r3, r1
 80116a4:	330c      	adds	r3, #12
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	f103 0129 	add.w	r1, r3, #41	; 0x29
 80116ac:	4814      	ldr	r0, [pc, #80]	; (8011700 <synth_IfftMode+0x160>)
 80116ae:	697a      	ldr	r2, [r7, #20]
 80116b0:	4613      	mov	r3, r2
 80116b2:	009b      	lsls	r3, r3, #2
 80116b4:	4413      	add	r3, r2
 80116b6:	009b      	lsls	r3, r3, #2
 80116b8:	4403      	add	r3, r0
 80116ba:	330c      	adds	r3, #12
 80116bc:	6019      	str	r1, [r3, #0]
				if (waves[note].current_volume > current_image_data)
 80116be:	4910      	ldr	r1, [pc, #64]	; (8011700 <synth_IfftMode+0x160>)
 80116c0:	697a      	ldr	r2, [r7, #20]
 80116c2:	4613      	mov	r3, r2
 80116c4:	009b      	lsls	r3, r3, #2
 80116c6:	4413      	add	r3, r2
 80116c8:	009b      	lsls	r3, r3, #2
 80116ca:	440b      	add	r3, r1
 80116cc:	330c      	adds	r3, #12
 80116ce:	681a      	ldr	r2, [r3, #0]
 80116d0:	4b0d      	ldr	r3, [pc, #52]	; (8011708 <synth_IfftMode+0x168>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	dd45      	ble.n	8011764 <synth_IfftMode+0x1c4>
					waves[note].current_volume = current_image_data;
 80116d8:	4b0b      	ldr	r3, [pc, #44]	; (8011708 <synth_IfftMode+0x168>)
 80116da:	6819      	ldr	r1, [r3, #0]
 80116dc:	4808      	ldr	r0, [pc, #32]	; (8011700 <synth_IfftMode+0x160>)
 80116de:	697a      	ldr	r2, [r7, #20]
 80116e0:	4613      	mov	r3, r2
 80116e2:	009b      	lsls	r3, r3, #2
 80116e4:	4413      	add	r3, r2
 80116e6:	009b      	lsls	r3, r3, #2
 80116e8:	4403      	add	r3, r0
 80116ea:	330c      	adds	r3, #12
 80116ec:	6019      	str	r1, [r3, #0]
 80116ee:	e039      	b.n	8011764 <synth_IfftMode+0x1c4>
 80116f0:	24007670 	.word	0x24007670
 80116f4:	24007674 	.word	0x24007674
 80116f8:	24007678 	.word	0x24007678
 80116fc:	2400767c 	.word	0x2400767c
 8011700:	24003a60 	.word	0x24003a60
 8011704:	24007680 	.word	0x24007680
 8011708:	24007684 	.word	0x24007684
			}
			else
			{
				waves[note].current_volume -= IFFT_GAP_PER_MS / (SAMPLING_FREQUENCY / 1000);
 801170c:	4966      	ldr	r1, [pc, #408]	; (80118a8 <synth_IfftMode+0x308>)
 801170e:	697a      	ldr	r2, [r7, #20]
 8011710:	4613      	mov	r3, r2
 8011712:	009b      	lsls	r3, r3, #2
 8011714:	4413      	add	r3, r2
 8011716:	009b      	lsls	r3, r3, #2
 8011718:	440b      	add	r3, r1
 801171a:	330c      	adds	r3, #12
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	f1a3 0129 	sub.w	r1, r3, #41	; 0x29
 8011722:	4861      	ldr	r0, [pc, #388]	; (80118a8 <synth_IfftMode+0x308>)
 8011724:	697a      	ldr	r2, [r7, #20]
 8011726:	4613      	mov	r3, r2
 8011728:	009b      	lsls	r3, r3, #2
 801172a:	4413      	add	r3, r2
 801172c:	009b      	lsls	r3, r3, #2
 801172e:	4403      	add	r3, r0
 8011730:	330c      	adds	r3, #12
 8011732:	6019      	str	r1, [r3, #0]
				if (waves[note].current_volume < current_image_data)
 8011734:	495c      	ldr	r1, [pc, #368]	; (80118a8 <synth_IfftMode+0x308>)
 8011736:	697a      	ldr	r2, [r7, #20]
 8011738:	4613      	mov	r3, r2
 801173a:	009b      	lsls	r3, r3, #2
 801173c:	4413      	add	r3, r2
 801173e:	009b      	lsls	r3, r3, #2
 8011740:	440b      	add	r3, r1
 8011742:	330c      	adds	r3, #12
 8011744:	681a      	ldr	r2, [r3, #0]
 8011746:	4b59      	ldr	r3, [pc, #356]	; (80118ac <synth_IfftMode+0x30c>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	429a      	cmp	r2, r3
 801174c:	da0a      	bge.n	8011764 <synth_IfftMode+0x1c4>
					waves[note].current_volume = current_image_data;
 801174e:	4b57      	ldr	r3, [pc, #348]	; (80118ac <synth_IfftMode+0x30c>)
 8011750:	6819      	ldr	r1, [r3, #0]
 8011752:	4855      	ldr	r0, [pc, #340]	; (80118a8 <synth_IfftMode+0x308>)
 8011754:	697a      	ldr	r2, [r7, #20]
 8011756:	4613      	mov	r3, r2
 8011758:	009b      	lsls	r3, r3, #2
 801175a:	4413      	add	r3, r2
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	4403      	add	r3, r0
 8011760:	330c      	adds	r3, #12
 8011762:	6019      	str	r1, [r3, #0]
			}

			if (waves[note].current_volume > max_volume)
 8011764:	4950      	ldr	r1, [pc, #320]	; (80118a8 <synth_IfftMode+0x308>)
 8011766:	697a      	ldr	r2, [r7, #20]
 8011768:	4613      	mov	r3, r2
 801176a:	009b      	lsls	r3, r3, #2
 801176c:	4413      	add	r3, r2
 801176e:	009b      	lsls	r3, r3, #2
 8011770:	440b      	add	r3, r1
 8011772:	330c      	adds	r3, #12
 8011774:	681a      	ldr	r2, [r3, #0]
 8011776:	4b4e      	ldr	r3, [pc, #312]	; (80118b0 <synth_IfftMode+0x310>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	429a      	cmp	r2, r3
 801177c:	dd0a      	ble.n	8011794 <synth_IfftMode+0x1f4>
				max_volume = waves[note].current_volume;
 801177e:	494a      	ldr	r1, [pc, #296]	; (80118a8 <synth_IfftMode+0x308>)
 8011780:	697a      	ldr	r2, [r7, #20]
 8011782:	4613      	mov	r3, r2
 8011784:	009b      	lsls	r3, r3, #2
 8011786:	4413      	add	r3, r2
 8011788:	009b      	lsls	r3, r3, #2
 801178a:	440b      	add	r3, r1
 801178c:	330c      	adds	r3, #12
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	4a47      	ldr	r2, [pc, #284]	; (80118b0 <synth_IfftMode+0x310>)
 8011792:	6013      	str	r3, [r2, #0]

			//current audio point summation
			signal_summation += ((*(waves[note].start_ptr + new_idx)) * waves[note].current_volume) >> 16;
 8011794:	4944      	ldr	r1, [pc, #272]	; (80118a8 <synth_IfftMode+0x308>)
 8011796:	697a      	ldr	r2, [r7, #20]
 8011798:	4613      	mov	r3, r2
 801179a:	009b      	lsls	r3, r3, #2
 801179c:	4413      	add	r3, r2
 801179e:	009b      	lsls	r3, r3, #2
 80117a0:	440b      	add	r3, r1
 80117a2:	681a      	ldr	r2, [r3, #0]
 80117a4:	4b43      	ldr	r3, [pc, #268]	; (80118b4 <synth_IfftMode+0x314>)
 80117a6:	881b      	ldrh	r3, [r3, #0]
 80117a8:	005b      	lsls	r3, r3, #1
 80117aa:	4413      	add	r3, r2
 80117ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80117b0:	4618      	mov	r0, r3
 80117b2:	493d      	ldr	r1, [pc, #244]	; (80118a8 <synth_IfftMode+0x308>)
 80117b4:	697a      	ldr	r2, [r7, #20]
 80117b6:	4613      	mov	r3, r2
 80117b8:	009b      	lsls	r3, r3, #2
 80117ba:	4413      	add	r3, r2
 80117bc:	009b      	lsls	r3, r3, #2
 80117be:	440b      	add	r3, r1
 80117c0:	330c      	adds	r3, #12
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	fb03 f300 	mul.w	r3, r3, r0
 80117c8:	141a      	asrs	r2, r3, #16
 80117ca:	4b3b      	ldr	r3, [pc, #236]	; (80118b8 <synth_IfftMode+0x318>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	4413      	add	r3, r2
 80117d0:	4a39      	ldr	r2, [pc, #228]	; (80118b8 <synth_IfftMode+0x318>)
 80117d2:	6013      	str	r3, [r2, #0]

			//read equivalent power of current pixel
			signal_power_summation += waves[note].current_volume;
 80117d4:	4934      	ldr	r1, [pc, #208]	; (80118a8 <synth_IfftMode+0x308>)
 80117d6:	697a      	ldr	r2, [r7, #20]
 80117d8:	4613      	mov	r3, r2
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	4413      	add	r3, r2
 80117de:	009b      	lsls	r3, r3, #2
 80117e0:	440b      	add	r3, r1
 80117e2:	330c      	adds	r3, #12
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	461a      	mov	r2, r3
 80117e8:	4b34      	ldr	r3, [pc, #208]	; (80118bc <synth_IfftMode+0x31c>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	4413      	add	r3, r2
 80117ee:	4a33      	ldr	r2, [pc, #204]	; (80118bc <synth_IfftMode+0x31c>)
 80117f0:	6013      	str	r3, [r2, #0]

			waves[note].current_idx = new_idx;
 80117f2:	4b30      	ldr	r3, [pc, #192]	; (80118b4 <synth_IfftMode+0x314>)
 80117f4:	8818      	ldrh	r0, [r3, #0]
 80117f6:	492c      	ldr	r1, [pc, #176]	; (80118a8 <synth_IfftMode+0x308>)
 80117f8:	697a      	ldr	r2, [r7, #20]
 80117fa:	4613      	mov	r3, r2
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	4413      	add	r3, r2
 8011800:	009b      	lsls	r3, r3, #2
 8011802:	440b      	add	r3, r1
 8011804:	3304      	adds	r3, #4
 8011806:	4602      	mov	r2, r0
 8011808:	801a      	strh	r2, [r3, #0]
		for (int32_t note = NUMBER_OF_NOTES; --note >= 1;)
 801180a:	697b      	ldr	r3, [r7, #20]
 801180c:	3b01      	subs	r3, #1
 801180e:	617b      	str	r3, [r7, #20]
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	2b00      	cmp	r3, #0
 8011814:	f73f aeda 	bgt.w	80115cc <synth_IfftMode+0x2c>
		}

		rfft = (signal_summation * ((double)max_volume) / (double)signal_power_summation);
 8011818:	4b27      	ldr	r3, [pc, #156]	; (80118b8 <synth_IfftMode+0x318>)
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	ee07 3a90 	vmov	s15, r3
 8011820:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8011824:	4b22      	ldr	r3, [pc, #136]	; (80118b0 <synth_IfftMode+0x310>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	ee07 3a90 	vmov	s15, r3
 801182c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011830:	ee26 5b07 	vmul.f64	d5, d6, d7
 8011834:	4b21      	ldr	r3, [pc, #132]	; (80118bc <synth_IfftMode+0x31c>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	ee07 3a90 	vmov	s15, r3
 801183c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8011840:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8011844:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011848:	ee17 3a90 	vmov	r3, s15
 801184c:	b21a      	sxth	r2, r3
 801184e:	4b1c      	ldr	r3, [pc, #112]	; (80118c0 <synth_IfftMode+0x320>)
 8011850:	801a      	strh	r2, [r3, #0]

		audioData[write_data_nbr] = rfft;
 8011852:	4b1c      	ldr	r3, [pc, #112]	; (80118c4 <synth_IfftMode+0x324>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	005b      	lsls	r3, r3, #1
 8011858:	68ba      	ldr	r2, [r7, #8]
 801185a:	4413      	add	r3, r2
 801185c:	4a18      	ldr	r2, [pc, #96]	; (80118c0 <synth_IfftMode+0x320>)
 801185e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011862:	801a      	strh	r2, [r3, #0]
		audioData[write_data_nbr + 1] = rfft;
 8011864:	4b17      	ldr	r3, [pc, #92]	; (80118c4 <synth_IfftMode+0x324>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	3301      	adds	r3, #1
 801186a:	005b      	lsls	r3, r3, #1
 801186c:	68ba      	ldr	r2, [r7, #8]
 801186e:	4413      	add	r3, r2
 8011870:	4a13      	ldr	r2, [pc, #76]	; (80118c0 <synth_IfftMode+0x320>)
 8011872:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011876:	801a      	strh	r2, [r3, #0]
		write_data_nbr+=2;
 8011878:	4b12      	ldr	r3, [pc, #72]	; (80118c4 <synth_IfftMode+0x324>)
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	3302      	adds	r3, #2
 801187e:	4a11      	ldr	r2, [pc, #68]	; (80118c4 <synth_IfftMode+0x324>)
 8011880:	6013      	str	r3, [r2, #0]
	while(write_data_nbr < (NbrOfData * 2))
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	005a      	lsls	r2, r3, #1
 8011886:	4b0f      	ldr	r3, [pc, #60]	; (80118c4 <synth_IfftMode+0x324>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	429a      	cmp	r2, r3
 801188c:	f63f ae92 	bhi.w	80115b4 <synth_IfftMode+0x14>
	}

	synth_process_cnt += NbrOfData;
 8011890:	4b0d      	ldr	r3, [pc, #52]	; (80118c8 <synth_IfftMode+0x328>)
 8011892:	681a      	ldr	r2, [r3, #0]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	4413      	add	r3, r2
 8011898:	4a0b      	ldr	r2, [pc, #44]	; (80118c8 <synth_IfftMode+0x328>)
 801189a:	6013      	str	r3, [r2, #0]
}
 801189c:	bf00      	nop
 801189e:	371c      	adds	r7, #28
 80118a0:	46bd      	mov	sp, r7
 80118a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a6:	4770      	bx	lr
 80118a8:	24003a60 	.word	0x24003a60
 80118ac:	24007684 	.word	0x24007684
 80118b0:	2400767c 	.word	0x2400767c
 80118b4:	24007680 	.word	0x24007680
 80118b8:	24007674 	.word	0x24007674
 80118bc:	24007678 	.word	0x24007678
 80118c0:	24007688 	.word	0x24007688
 80118c4:	24007670 	.word	0x24007670
 80118c8:	24004654 	.word	0x24004654

080118cc <synth_PlayMode>:
 * @retval None
 */
#pragma GCC push_options
#pragma GCC optimize ("unroll-loops")
void synth_PlayMode(uint16_t *imageData, int16_t *audioData, uint32_t NbrOfData)
{
 80118cc:	b590      	push	{r4, r7, lr}
 80118ce:	b085      	sub	sp, #20
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	60f8      	str	r0, [r7, #12]
 80118d4:	60b9      	str	r1, [r7, #8]
 80118d6:	607a      	str	r2, [r7, #4]
	static uint32_t WriteDataNbr;
	static uint32_t CurrentPix = 0;
	static int16_t AudioDot;
	WriteDataNbr = 0;
 80118d8:	4b26      	ldr	r3, [pc, #152]	; (8011974 <synth_PlayMode+0xa8>)
 80118da:	2200      	movs	r2, #0
 80118dc:	601a      	str	r2, [r3, #0]

	while(WriteDataNbr < (NbrOfData * 2))
 80118de:	e039      	b.n	8011954 <synth_PlayMode+0x88>
	{
		if ((CurrentPix + 1) >= (cis_GetEffectivePixelNb()))
 80118e0:	4b25      	ldr	r3, [pc, #148]	; (8011978 <synth_PlayMode+0xac>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	1c5c      	adds	r4, r3, #1
 80118e6:	f00b fb6f 	bl	801cfc8 <cis_GetEffectivePixelNb>
 80118ea:	4603      	mov	r3, r0
 80118ec:	429c      	cmp	r4, r3
 80118ee:	d302      	bcc.n	80118f6 <synth_PlayMode+0x2a>
			CurrentPix = 0;
 80118f0:	4b21      	ldr	r3, [pc, #132]	; (8011978 <synth_PlayMode+0xac>)
 80118f2:	2200      	movs	r2, #0
 80118f4:	601a      	str	r2, [r3, #0]
		AudioDot = imageData[CurrentPix] - imageData[CurrentPix + 1];
 80118f6:	4b20      	ldr	r3, [pc, #128]	; (8011978 <synth_PlayMode+0xac>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	005b      	lsls	r3, r3, #1
 80118fc:	68fa      	ldr	r2, [r7, #12]
 80118fe:	4413      	add	r3, r2
 8011900:	881a      	ldrh	r2, [r3, #0]
 8011902:	4b1d      	ldr	r3, [pc, #116]	; (8011978 <synth_PlayMode+0xac>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	3301      	adds	r3, #1
 8011908:	005b      	lsls	r3, r3, #1
 801190a:	68f9      	ldr	r1, [r7, #12]
 801190c:	440b      	add	r3, r1
 801190e:	881b      	ldrh	r3, [r3, #0]
 8011910:	1ad3      	subs	r3, r2, r3
 8011912:	b29b      	uxth	r3, r3
 8011914:	b21a      	sxth	r2, r3
 8011916:	4b19      	ldr	r3, [pc, #100]	; (801197c <synth_PlayMode+0xb0>)
 8011918:	801a      	strh	r2, [r3, #0]
		audioData[WriteDataNbr] = AudioDot;
 801191a:	4b16      	ldr	r3, [pc, #88]	; (8011974 <synth_PlayMode+0xa8>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	005b      	lsls	r3, r3, #1
 8011920:	68ba      	ldr	r2, [r7, #8]
 8011922:	4413      	add	r3, r2
 8011924:	4a15      	ldr	r2, [pc, #84]	; (801197c <synth_PlayMode+0xb0>)
 8011926:	f9b2 2000 	ldrsh.w	r2, [r2]
 801192a:	801a      	strh	r2, [r3, #0]
		audioData[WriteDataNbr + 1] = AudioDot;
 801192c:	4b11      	ldr	r3, [pc, #68]	; (8011974 <synth_PlayMode+0xa8>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	3301      	adds	r3, #1
 8011932:	005b      	lsls	r3, r3, #1
 8011934:	68ba      	ldr	r2, [r7, #8]
 8011936:	4413      	add	r3, r2
 8011938:	4a10      	ldr	r2, [pc, #64]	; (801197c <synth_PlayMode+0xb0>)
 801193a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801193e:	801a      	strh	r2, [r3, #0]
		WriteDataNbr+=2;
 8011940:	4b0c      	ldr	r3, [pc, #48]	; (8011974 <synth_PlayMode+0xa8>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	3302      	adds	r3, #2
 8011946:	4a0b      	ldr	r2, [pc, #44]	; (8011974 <synth_PlayMode+0xa8>)
 8011948:	6013      	str	r3, [r2, #0]

		CurrentPix++;
 801194a:	4b0b      	ldr	r3, [pc, #44]	; (8011978 <synth_PlayMode+0xac>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	3301      	adds	r3, #1
 8011950:	4a09      	ldr	r2, [pc, #36]	; (8011978 <synth_PlayMode+0xac>)
 8011952:	6013      	str	r3, [r2, #0]
	while(WriteDataNbr < (NbrOfData * 2))
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	005a      	lsls	r2, r3, #1
 8011958:	4b06      	ldr	r3, [pc, #24]	; (8011974 <synth_PlayMode+0xa8>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	429a      	cmp	r2, r3
 801195e:	d8bf      	bhi.n	80118e0 <synth_PlayMode+0x14>
		//		audioData[WriteDataNbr] = aRandom32bit % 32768;
		//		audioData[WriteDataNbr + 1] = aRandom32bit % 32768;
		//		WriteDataNbr+=2;
	}

	synth_process_cnt += NbrOfData;
 8011960:	4b07      	ldr	r3, [pc, #28]	; (8011980 <synth_PlayMode+0xb4>)
 8011962:	681a      	ldr	r2, [r3, #0]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	4413      	add	r3, r2
 8011968:	4a05      	ldr	r2, [pc, #20]	; (8011980 <synth_PlayMode+0xb4>)
 801196a:	6013      	str	r3, [r2, #0]
}
 801196c:	bf00      	nop
 801196e:	3714      	adds	r7, #20
 8011970:	46bd      	mov	sp, r7
 8011972:	bd90      	pop	{r4, r7, pc}
 8011974:	2400768c 	.word	0x2400768c
 8011978:	24007690 	.word	0x24007690
 801197c:	24007694 	.word	0x24007694
 8011980:	24004654 	.word	0x24004654

08011984 <synth_AudioProcess>:
 *                                                                                 ^
 *                                                                                FULL
 *                                                                              COMPLETE
 */
void synth_AudioProcess(synthModeTypeDef mode)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b08c      	sub	sp, #48	; 0x30
 8011988:	af00      	add	r7, sp, #0
 801198a:	4603      	mov	r3, r0
 801198c:	71fb      	strb	r3, [r7, #7]
	uint32_t bytesread = 0;
 801198e:	2300      	movs	r3, #0
 8011990:	62fb      	str	r3, [r7, #44]	; 0x2c
//	int32_t max_power = 0;

	if( buffer_ctl.fptr >= (buffer_ctl.AudioFileSize * 4))
 8011992:	4b77      	ldr	r3, [pc, #476]	; (8011b70 <synth_AudioProcess+0x1ec>)
 8011994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011998:	681a      	ldr	r2, [r3, #0]
 801199a:	4975      	ldr	r1, [pc, #468]	; (8011b70 <synth_AudioProcess+0x1ec>)
 801199c:	f241 0308 	movw	r3, #4104	; 0x1008
 80119a0:	440b      	add	r3, r1
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	009b      	lsls	r3, r3, #2
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d304      	bcc.n	80119b4 <synth_AudioProcess+0x30>
	{
		/* Play audio sample again ... */
		buffer_ctl.fptr = 0;
 80119aa:	4b71      	ldr	r3, [pc, #452]	; (8011b70 <synth_AudioProcess+0x1ec>)
 80119ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80119b0:	2200      	movs	r2, #0
 80119b2:	601a      	str	r2, [r3, #0]
	}

	/* 1st half buffer played; so fill it and continue playing from bottom*/
	if(buffer_ctl.state == AUDIO_BUFFER_OFFSET_HALF)
 80119b4:	4a6e      	ldr	r2, [pc, #440]	; (8011b70 <synth_AudioProcess+0x1ec>)
 80119b6:	f241 0304 	movw	r3, #4100	; 0x1004
 80119ba:	4413      	add	r3, r2
 80119bc:	781b      	ldrb	r3, [r3, #0]
 80119be:	2b01      	cmp	r3, #1
 80119c0:	d163      	bne.n	8011a8a <synth_AudioProcess+0x106>
	{

		bytesread = synthGetDataNb((void *)buffer_ctl.SrcAddress,
 80119c2:	4a6b      	ldr	r2, [pc, #428]	; (8011b70 <synth_AudioProcess+0x1ec>)
 80119c4:	f241 030c 	movw	r3, #4108	; 0x100c
 80119c8:	4413      	add	r3, r2
 80119ca:	6818      	ldr	r0, [r3, #0]
 80119cc:	4b68      	ldr	r3, [pc, #416]	; (8011b70 <synth_AudioProcess+0x1ec>)
 80119ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80119d2:	6819      	ldr	r1, [r3, #0]
 80119d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80119d8:	4a65      	ldr	r2, [pc, #404]	; (8011b70 <synth_AudioProcess+0x1ec>)
 80119da:	f000 f8d7 	bl	8011b8c <synthGetDataNb>
 80119de:	62f8      	str	r0, [r7, #44]	; 0x2c
				buffer_ctl.fptr,
				&buffer_ctl.buff[0],
				AUDIO_BUFFER_SIZE / 2);

		if( bytesread > 0)
 80119e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	f000 80bb 	beq.w	8011b5e <synth_AudioProcess+0x1da>
		{
			buffer_ctl.state = AUDIO_BUFFER_OFFSET_NONE;
 80119e8:	4a61      	ldr	r2, [pc, #388]	; (8011b70 <synth_AudioProcess+0x1ec>)
 80119ea:	f241 0304 	movw	r3, #4100	; 0x1004
 80119ee:	4413      	add	r3, r2
 80119f0:	2200      	movs	r2, #0
 80119f2:	701a      	strb	r2, [r3, #0]
			buffer_ctl.fptr += bytesread;
 80119f4:	4b5e      	ldr	r3, [pc, #376]	; (8011b70 <synth_AudioProcess+0x1ec>)
 80119f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80119fa:	681a      	ldr	r2, [r3, #0]
 80119fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fe:	441a      	add	r2, r3
 8011a00:	4b5b      	ldr	r3, [pc, #364]	; (8011b70 <synth_AudioProcess+0x1ec>)
 8011a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a06:	601a      	str	r2, [r3, #0]
			cis_ImageProcessBW(imageData);
 8011a08:	4b5a      	ldr	r3, [pc, #360]	; (8011b74 <synth_AudioProcess+0x1f0>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f00b faff 	bl	801d010 <cis_ImageProcessBW>
			if (mode == IFFT_MODE)
 8011a12:	79fb      	ldrb	r3, [r7, #7]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d108      	bne.n	8011a2a <synth_AudioProcess+0xa6>
				synth_IfftMode(imageData, (int16_t*)&audioBuff[0], (AUDIO_QUARTER_BUFFER_SIZE / 2));
 8011a18:	4b56      	ldr	r3, [pc, #344]	; (8011b74 <synth_AudioProcess+0x1f0>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a20:	4955      	ldr	r1, [pc, #340]	; (8011b78 <synth_AudioProcess+0x1f4>)
 8011a22:	4618      	mov	r0, r3
 8011a24:	f7ff fdbc 	bl	80115a0 <synth_IfftMode>
 8011a28:	e007      	b.n	8011a3a <synth_AudioProcess+0xb6>
			else
				synth_PlayMode(imageData, (int16_t*)&audioBuff[0], (AUDIO_QUARTER_BUFFER_SIZE / 2));
 8011a2a:	4b52      	ldr	r3, [pc, #328]	; (8011b74 <synth_AudioProcess+0x1f0>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a32:	4951      	ldr	r1, [pc, #324]	; (8011b78 <synth_AudioProcess+0x1f4>)
 8011a34:	4618      	mov	r0, r3
 8011a36:	f7ff ff49 	bl	80118cc <synth_PlayMode>
 8011a3a:	4b4d      	ldr	r3, [pc, #308]	; (8011b70 <synth_AudioProcess+0x1ec>)
 8011a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a42:	627b      	str	r3, [r7, #36]	; 0x24
    if ( dsize > 0 ) { 
 8011a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	dd1d      	ble.n	8011a86 <synth_AudioProcess+0x102>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a4c:	f003 021f 	and.w	r2, r3, #31
 8011a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a52:	4413      	add	r3, r2
 8011a54:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8011a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8011a5a:	f3bf 8f4f 	dsb	sy
}
 8011a5e:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011a60:	4a46      	ldr	r2, [pc, #280]	; (8011b7c <synth_AudioProcess+0x1f8>)
 8011a62:	69fb      	ldr	r3, [r7, #28]
 8011a64:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8011a68:	69fb      	ldr	r3, [r7, #28]
 8011a6a:	3320      	adds	r3, #32
 8011a6c:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011a6e:	6a3b      	ldr	r3, [r7, #32]
 8011a70:	3b20      	subs	r3, #32
 8011a72:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 8011a74:	6a3b      	ldr	r3, [r7, #32]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	dcf2      	bgt.n	8011a60 <synth_AudioProcess+0xdc>
  __ASM volatile ("dsb 0xF":::"memory");
 8011a7a:	f3bf 8f4f 	dsb	sy
}
 8011a7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011a80:	f3bf 8f6f 	isb	sy
}
 8011a84:	bf00      	nop
}
 8011a86:	bf00      	nop
			/* Clean Data Cache to update the content of the SRAM */
			SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE / 8);
		}
		return;
 8011a88:	e069      	b.n	8011b5e <synth_AudioProcess+0x1da>
	}

	/* 2nd half buffer played; so fill it and continue playing from top */
	if(buffer_ctl.state == AUDIO_BUFFER_OFFSET_FULL)
 8011a8a:	4a39      	ldr	r2, [pc, #228]	; (8011b70 <synth_AudioProcess+0x1ec>)
 8011a8c:	f241 0304 	movw	r3, #4100	; 0x1004
 8011a90:	4413      	add	r3, r2
 8011a92:	781b      	ldrb	r3, [r3, #0]
 8011a94:	2b02      	cmp	r3, #2
 8011a96:	d164      	bne.n	8011b62 <synth_AudioProcess+0x1de>
	{
		bytesread = synthGetDataNb((void *)buffer_ctl.SrcAddress,
 8011a98:	4a35      	ldr	r2, [pc, #212]	; (8011b70 <synth_AudioProcess+0x1ec>)
 8011a9a:	f241 030c 	movw	r3, #4108	; 0x100c
 8011a9e:	4413      	add	r3, r2
 8011aa0:	6818      	ldr	r0, [r3, #0]
 8011aa2:	4b33      	ldr	r3, [pc, #204]	; (8011b70 <synth_AudioProcess+0x1ec>)
 8011aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011aa8:	6819      	ldr	r1, [r3, #0]
 8011aaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011aae:	4a34      	ldr	r2, [pc, #208]	; (8011b80 <synth_AudioProcess+0x1fc>)
 8011ab0:	f000 f86c 	bl	8011b8c <synthGetDataNb>
 8011ab4:	62f8      	str	r0, [r7, #44]	; 0x2c
				buffer_ctl.fptr,
				&buffer_ctl.buff[AUDIO_BUFFER_SIZE / 2],
				AUDIO_BUFFER_SIZE / 2);
		if( bytesread > 0)
 8011ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d054      	beq.n	8011b66 <synth_AudioProcess+0x1e2>
		{
			buffer_ctl.state = AUDIO_BUFFER_OFFSET_NONE;
 8011abc:	4a2c      	ldr	r2, [pc, #176]	; (8011b70 <synth_AudioProcess+0x1ec>)
 8011abe:	f241 0304 	movw	r3, #4100	; 0x1004
 8011ac2:	4413      	add	r3, r2
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	701a      	strb	r2, [r3, #0]
			buffer_ctl.fptr += bytesread;
 8011ac8:	4b29      	ldr	r3, [pc, #164]	; (8011b70 <synth_AudioProcess+0x1ec>)
 8011aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ace:	681a      	ldr	r2, [r3, #0]
 8011ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad2:	441a      	add	r2, r3
 8011ad4:	4b26      	ldr	r3, [pc, #152]	; (8011b70 <synth_AudioProcess+0x1ec>)
 8011ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ada:	601a      	str	r2, [r3, #0]
			cis_ImageProcessBW(imageData);
 8011adc:	4b25      	ldr	r3, [pc, #148]	; (8011b74 <synth_AudioProcess+0x1f0>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f00b fa95 	bl	801d010 <cis_ImageProcessBW>
			if (mode == IFFT_MODE)
 8011ae6:	79fb      	ldrb	r3, [r7, #7]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d108      	bne.n	8011afe <synth_AudioProcess+0x17a>
				synth_IfftMode(imageData, (int16_t*)&audioBuff[AUDIO_QUARTER_BUFFER_SIZE / 2], (AUDIO_QUARTER_BUFFER_SIZE / 2));
 8011aec:	4b21      	ldr	r3, [pc, #132]	; (8011b74 <synth_AudioProcess+0x1f0>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011af4:	4923      	ldr	r1, [pc, #140]	; (8011b84 <synth_AudioProcess+0x200>)
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7ff fd52 	bl	80115a0 <synth_IfftMode>
 8011afc:	e007      	b.n	8011b0e <synth_AudioProcess+0x18a>
			else
				synth_PlayMode(imageData, (int16_t*)&audioBuff[AUDIO_QUARTER_BUFFER_SIZE / 2], (AUDIO_QUARTER_BUFFER_SIZE / 2));
 8011afe:	4b1d      	ldr	r3, [pc, #116]	; (8011b74 <synth_AudioProcess+0x1f0>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b06:	491f      	ldr	r1, [pc, #124]	; (8011b84 <synth_AudioProcess+0x200>)
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7ff fedf 	bl	80118cc <synth_PlayMode>
 8011b0e:	4b1e      	ldr	r3, [pc, #120]	; (8011b88 <synth_AudioProcess+0x204>)
 8011b10:	61bb      	str	r3, [r7, #24]
 8011b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b16:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	dd1d      	ble.n	8011b5a <synth_AudioProcess+0x1d6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011b1e:	69bb      	ldr	r3, [r7, #24]
 8011b20:	f003 021f 	and.w	r2, r3, #31
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	4413      	add	r3, r2
 8011b28:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8011b2a:	69bb      	ldr	r3, [r7, #24]
 8011b2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011b2e:	f3bf 8f4f 	dsb	sy
}
 8011b32:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011b34:	4a11      	ldr	r2, [pc, #68]	; (8011b7c <synth_AudioProcess+0x1f8>)
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	3320      	adds	r3, #32
 8011b40:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	3b20      	subs	r3, #32
 8011b46:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	dcf2      	bgt.n	8011b34 <synth_AudioProcess+0x1b0>
  __ASM volatile ("dsb 0xF":::"memory");
 8011b4e:	f3bf 8f4f 	dsb	sy
}
 8011b52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011b54:	f3bf 8f6f 	isb	sy
}
 8011b58:	bf00      	nop
}
 8011b5a:	bf00      	nop
			/* Clean Data Cache to update the content of the SRAM */
			SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[AUDIO_QUARTER_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 8);
		}
		return;
 8011b5c:	e003      	b.n	8011b66 <synth_AudioProcess+0x1e2>
		return;
 8011b5e:	bf00      	nop
 8011b60:	e002      	b.n	8011b68 <synth_AudioProcess+0x1e4>
	}
	return;
 8011b62:	bf00      	nop
 8011b64:	e000      	b.n	8011b68 <synth_AudioProcess+0x1e4>
		return;
 8011b66:	bf00      	nop
}
 8011b68:	3730      	adds	r7, #48	; 0x30
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}
 8011b6e:	bf00      	nop
 8011b70:	24006660 	.word	0x24006660
 8011b74:	24004658 	.word	0x24004658
 8011b78:	24004660 	.word	0x24004660
 8011b7c:	e000ed00 	.word	0xe000ed00
 8011b80:	24006e60 	.word	0x24006e60
 8011b84:	24004e60 	.word	0x24004e60
 8011b88:	24006860 	.word	0x24006860

08011b8c <synthGetDataNb>:
 * @brief  Gets Data from storage unit.
 * @param  None
 * @retval None
 */
static uint32_t synthGetDataNb(void *pdata, uint32_t offset, uint8_t *pbuf, uint32_t NbrOfData)
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b087      	sub	sp, #28
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	60f8      	str	r0, [r7, #12]
 8011b94:	60b9      	str	r1, [r7, #8]
 8011b96:	607a      	str	r2, [r7, #4]
 8011b98:	603b      	str	r3, [r7, #0]
	uint8_t *lptr = pdata;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	613b      	str	r3, [r7, #16]
	uint32_t ReadDataNbr;

	ReadDataNbr = 0;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	617b      	str	r3, [r7, #20]
	while(((offset + ReadDataNbr) < (buffer_ctl.AudioFileSize * 4)) && (ReadDataNbr < NbrOfData))
 8011ba2:	e00c      	b.n	8011bbe <synthGetDataNb+0x32>
	{
		pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8011ba4:	68ba      	ldr	r2, [r7, #8]
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	4413      	add	r3, r2
 8011baa:	693a      	ldr	r2, [r7, #16]
 8011bac:	441a      	add	r2, r3
 8011bae:	6879      	ldr	r1, [r7, #4]
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	440b      	add	r3, r1
 8011bb4:	7812      	ldrb	r2, [r2, #0]
 8011bb6:	701a      	strb	r2, [r3, #0]
		ReadDataNbr++;
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	3301      	adds	r3, #1
 8011bbc:	617b      	str	r3, [r7, #20]
	while(((offset + ReadDataNbr) < (buffer_ctl.AudioFileSize * 4)) && (ReadDataNbr < NbrOfData))
 8011bbe:	68ba      	ldr	r2, [r7, #8]
 8011bc0:	697b      	ldr	r3, [r7, #20]
 8011bc2:	441a      	add	r2, r3
 8011bc4:	4909      	ldr	r1, [pc, #36]	; (8011bec <synthGetDataNb+0x60>)
 8011bc6:	f241 0308 	movw	r3, #4104	; 0x1008
 8011bca:	440b      	add	r3, r1
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	009b      	lsls	r3, r3, #2
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d203      	bcs.n	8011bdc <synthGetDataNb+0x50>
 8011bd4:	697a      	ldr	r2, [r7, #20]
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d3e3      	bcc.n	8011ba4 <synthGetDataNb+0x18>
	}

	return ReadDataNbr;
 8011bdc:	697b      	ldr	r3, [r7, #20]
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	371c      	adds	r7, #28
 8011be2:	46bd      	mov	sp, r7
 8011be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be8:	4770      	bx	lr
 8011bea:	bf00      	nop
 8011bec:	24006660 	.word	0x24006660

08011bf0 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8011bf0:	b480      	push	{r7}
 8011bf2:	b083      	sub	sp, #12
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
	if(hsai_BlockA1->Instance==SAI1_Block_A)
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	4a07      	ldr	r2, [pc, #28]	; (8011c1c <HAL_SAI_TxHalfCpltCallback+0x2c>)
 8011bfe:	4293      	cmp	r3, r2
 8011c00:	d105      	bne.n	8011c0e <HAL_SAI_TxHalfCpltCallback+0x1e>
	{
		buffer_ctl.state = AUDIO_BUFFER_OFFSET_HALF;
 8011c02:	4a07      	ldr	r2, [pc, #28]	; (8011c20 <HAL_SAI_TxHalfCpltCallback+0x30>)
 8011c04:	f241 0304 	movw	r3, #4100	; 0x1004
 8011c08:	4413      	add	r3, r2
 8011c0a:	2201      	movs	r2, #1
 8011c0c:	701a      	strb	r2, [r3, #0]
	}
}
 8011c0e:	bf00      	nop
 8011c10:	370c      	adds	r7, #12
 8011c12:	46bd      	mov	sp, r7
 8011c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c18:	4770      	bx	lr
 8011c1a:	bf00      	nop
 8011c1c:	40015804 	.word	0x40015804
 8011c20:	24006660 	.word	0x24006660

08011c24 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8011c24:	b480      	push	{r7}
 8011c26:	b083      	sub	sp, #12
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
	if(hsai_BlockA1->Instance==SAI1_Block_A)
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	4a07      	ldr	r2, [pc, #28]	; (8011c50 <HAL_SAI_TxCpltCallback+0x2c>)
 8011c32:	4293      	cmp	r3, r2
 8011c34:	d105      	bne.n	8011c42 <HAL_SAI_TxCpltCallback+0x1e>
	{
		/* allows AUDIO_Process() to refill 2nd part of the buffer  */
		buffer_ctl.state = AUDIO_BUFFER_OFFSET_FULL;
 8011c36:	4a07      	ldr	r2, [pc, #28]	; (8011c54 <HAL_SAI_TxCpltCallback+0x30>)
 8011c38:	f241 0304 	movw	r3, #4100	; 0x1004
 8011c3c:	4413      	add	r3, r2
 8011c3e:	2202      	movs	r2, #2
 8011c40:	701a      	strb	r2, [r3, #0]
	}
}
 8011c42:	bf00      	nop
 8011c44:	370c      	adds	r7, #12
 8011c46:	46bd      	mov	sp, r7
 8011c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4c:	4770      	bx	lr
 8011c4e:	bf00      	nop
 8011c50:	40015804 	.word	0x40015804
 8011c54:	24006660 	.word	0x24006660

08011c58 <calculate_frequency>:
 * @brief  calculate frequency,
 * @param  comma cnt
 * @retval frequency
 */
static float calculate_frequency(uint32_t comma_cnt)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b084      	sub	sp, #16
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
	float frequency = 0.0;
 8011c60:	f04f 0300 	mov.w	r3, #0
 8011c64:	60fb      	str	r3, [r7, #12]
	frequency = START_FREQUENCY * pow(2, (comma_cnt / (12.0 * (COMMA_PER_OCTAVE / (12.0 / (log(2)) * log((START_FREQUENCY * 2.0) / START_FREQUENCY))))));
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	ee07 3a90 	vmov	s15, r3
 8011c6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011c70:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8011ca8 <calculate_frequency+0x50>
 8011c74:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8011c78:	eeb0 1b46 	vmov.f64	d1, d6
 8011c7c:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8011c80:	f012 fd7e 	bl	8024780 <pow>
 8011c84:	eeb0 7b40 	vmov.f64	d7, d0
 8011c88:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8011cb0 <calculate_frequency+0x58>
 8011c8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011c90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011c94:	edc7 7a03 	vstr	s15, [r7, #12]

	return frequency;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	ee07 3a90 	vmov	s15, r3
}
 8011c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8011ca2:	3710      	adds	r7, #16
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	00000000 	.word	0x00000000
 8011cac:	40480000 	.word	0x40480000
 8011cb0:	00000000 	.word	0x00000000
 8011cb4:	40718000 	.word	0x40718000

08011cb8 <init_waves>:
 * @param  unitary_waveform pointer,
 * @param  waves structure pointer,
 * @retval buffer length on success, negative value otherwise
 */
uint32_t init_waves(int16_t **unitary_waveform, struct wave *waves)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	ed2d 8b02 	vpush	{d8}
 8011cbe:	b08c      	sub	sp, #48	; 0x30
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
 8011cc4:	6039      	str	r1, [r7, #0]
	uint32_t buffer_len = 0;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t current_unitary_waveform_cell = 0;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t note = 0;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	627b      	str	r3, [r7, #36]	; 0x24

	//compute cell number for storage all oscillators waveform
	for (uint32_t comma_cnt = 0; comma_cnt < COMMA_PER_OCTAVE; comma_cnt++)
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	623b      	str	r3, [r7, #32]
 8011cd6:	e014      	b.n	8011d02 <init_waves+0x4a>
	{
		//store only first octave_coeff frequencies ---- logarithmic distribution
		float frequency = calculate_frequency(comma_cnt);
 8011cd8:	6a38      	ldr	r0, [r7, #32]
 8011cda:	f7ff ffbd 	bl	8011c58 <calculate_frequency>
 8011cde:	ed87 0a02 	vstr	s0, [r7, #8]
		buffer_len += (uint32_t)(SAMPLING_FREQUENCY / frequency);
 8011ce2:	eddf 6a81 	vldr	s13, [pc, #516]	; 8011ee8 <init_waves+0x230>
 8011ce6:	ed97 7a02 	vldr	s14, [r7, #8]
 8011cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011cf2:	ee17 2a90 	vmov	r2, s15
 8011cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf8:	4413      	add	r3, r2
 8011cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t comma_cnt = 0; comma_cnt < COMMA_PER_OCTAVE; comma_cnt++)
 8011cfc:	6a3b      	ldr	r3, [r7, #32]
 8011cfe:	3301      	adds	r3, #1
 8011d00:	623b      	str	r3, [r7, #32]
 8011d02:	6a3b      	ldr	r3, [r7, #32]
 8011d04:	2b2f      	cmp	r3, #47	; 0x2f
 8011d06:	d9e7      	bls.n	8011cd8 <init_waves+0x20>
	}

	//allocate the contiguous memory area for storage all waveforms for the first octave_coeff
	*unitary_waveform = malloc(buffer_len * sizeof(uint16_t*));
 8011d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d0a:	009b      	lsls	r3, r3, #2
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f00e f8c5 	bl	801fe9c <malloc>
 8011d12:	4603      	mov	r3, r0
 8011d14:	461a      	mov	r2, r3
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	601a      	str	r2, [r3, #0]
	if (*unitary_waveform == NULL)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d101      	bne.n	8011d26 <init_waves+0x6e>
	{
		Error_Handler();
 8011d22:	f7f0 ff5b 	bl	8002bdc <Error_Handler>
	}

	//compute and store the waveform into unitary_waveform only for the first octave_coeff
	for (uint32_t current_comma_first_octave = 0; current_comma_first_octave < COMMA_PER_OCTAVE; current_comma_first_octave++)
 8011d26:	2300      	movs	r3, #0
 8011d28:	61fb      	str	r3, [r7, #28]
 8011d2a:	e0be      	b.n	8011eaa <init_waves+0x1f2>
	{
		//compute frequency for each comma into the first octave_coeff
		float frequency = calculate_frequency(current_comma_first_octave);
 8011d2c:	69f8      	ldr	r0, [r7, #28]
 8011d2e:	f7ff ff93 	bl	8011c58 <calculate_frequency>
 8011d32:	ed87 0a04 	vstr	s0, [r7, #16]

		//current aera size is the number of char cell for storage a waveform at the current frequency (one pixel per frequency oscillator)
		uint32_t current_aera_size = (uint32_t)(SAMPLING_FREQUENCY / frequency);
 8011d36:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8011ee8 <init_waves+0x230>
 8011d3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8011d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011d46:	ee17 3a90 	vmov	r3, s15
 8011d4a:	60fb      	str	r3, [r7, #12]

		//fill unitary_waveform buffer with sinusoidal waveform for each comma
		for (uint32_t x = 0; x < current_aera_size; x++)
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	61bb      	str	r3, [r7, #24]
 8011d50:	e030      	b.n	8011db4 <init_waves+0xfc>
		{
			//sanity check
			if (current_unitary_waveform_cell < buffer_len)
 8011d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d229      	bcs.n	8011dae <init_waves+0xf6>
			{
				(*unitary_waveform)[current_unitary_waveform_cell] = ((sin((x * 2.00 * PI )/ (double)current_aera_size))) * (WAVE_AMP_RESOLUTION / 2.00);
 8011d5a:	69bb      	ldr	r3, [r7, #24]
 8011d5c:	ee07 3a90 	vmov	s15, r3
 8011d60:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011d64:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011d68:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8011ed8 <init_waves+0x220>
 8011d6c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	ee07 3a90 	vmov	s15, r3
 8011d76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011d7a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8011d7e:	eeb0 0b45 	vmov.f64	d0, d5
 8011d82:	f012 ffc1 	bl	8024d08 <sin>
 8011d86:	eeb0 7b40 	vmov.f64	d7, d0
 8011d8a:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8011ee0 <init_waves+0x228>
 8011d8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681a      	ldr	r2, [r3, #0]
 8011d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d98:	005b      	lsls	r3, r3, #1
 8011d9a:	4413      	add	r3, r2
 8011d9c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011da0:	ee17 2a90 	vmov	r2, s15
 8011da4:	b212      	sxth	r2, r2
 8011da6:	801a      	strh	r2, [r3, #0]
				current_unitary_waveform_cell++;
 8011da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011daa:	3301      	adds	r3, #1
 8011dac:	62bb      	str	r3, [r7, #40]	; 0x28
		for (uint32_t x = 0; x < current_aera_size; x++)
 8011dae:	69bb      	ldr	r3, [r7, #24]
 8011db0:	3301      	adds	r3, #1
 8011db2:	61bb      	str	r3, [r7, #24]
 8011db4:	69ba      	ldr	r2, [r7, #24]
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	429a      	cmp	r2, r3
 8011dba:	d3ca      	bcc.n	8011d52 <init_waves+0x9a>
			}
		}

		//for each octave (only the first octave_coeff stay in RAM, for multiple octave_coeff start_ptr stay on first octave waveform but current_ptr jump cell according to multiple frequencies)
		for (uint32_t octave = 0; octave <= MAX_OCTAVE_NUMBER; octave++)
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	617b      	str	r3, [r7, #20]
 8011dc0:	e06d      	b.n	8011e9e <init_waves+0x1e6>
			// *** is current pix, --- octave separation
			// *---------*---------*---------*---------*---------*---------*---------*--------- for current comma at each octave
			// ---*---------*---------*---------*---------*---------*---------*---------*------ for the second comma...
			// ------*---------*---------*---------*---------*---------*---------*---------*---
			// ---------*---------*---------*---------*---------*---------*---------*---------*
			note = current_comma_first_octave + COMMA_PER_OCTAVE * octave;
 8011dc2:	697a      	ldr	r2, [r7, #20]
 8011dc4:	4613      	mov	r3, r2
 8011dc6:	005b      	lsls	r3, r3, #1
 8011dc8:	4413      	add	r3, r2
 8011dca:	011b      	lsls	r3, r3, #4
 8011dcc:	461a      	mov	r2, r3
 8011dce:	69fb      	ldr	r3, [r7, #28]
 8011dd0:	4413      	add	r3, r2
 8011dd2:	627b      	str	r3, [r7, #36]	; 0x24
			//sanity check, if user demand is't possible
			if (note < NUMBER_OF_NOTES)
 8011dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd6:	2b98      	cmp	r3, #152	; 0x98
 8011dd8:	d85e      	bhi.n	8011e98 <init_waves+0x1e0>
			{
#ifdef PRINT_FREQUENCY
				//store frequencies
				waves[note].frequency = frequency * pow(2, octave);
 8011dda:	edd7 7a04 	vldr	s15, [r7, #16]
 8011dde:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	ee07 3a90 	vmov	s15, r3
 8011de8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011dec:	eeb0 1b47 	vmov.f64	d1, d7
 8011df0:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8011df4:	f012 fcc4 	bl	8024780 <pow>
 8011df8:	eeb0 7b40 	vmov.f64	d7, d0
 8011dfc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e02:	4613      	mov	r3, r2
 8011e04:	009b      	lsls	r3, r3, #2
 8011e06:	4413      	add	r3, r2
 8011e08:	009b      	lsls	r3, r3, #2
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	4413      	add	r3, r2
 8011e10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011e14:	edc3 7a04 	vstr	s15, [r3, #16]
#endif
				//store octave number
				waves[note].octave_coeff = pow(2, octave);
 8011e18:	697b      	ldr	r3, [r7, #20]
 8011e1a:	ee07 3a90 	vmov	s15, r3
 8011e1e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011e22:	eeb0 1b47 	vmov.f64	d1, d7
 8011e26:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8011e2a:	f012 fca9 	bl	8024780 <pow>
 8011e2e:	eeb0 7b40 	vmov.f64	d7, d0
 8011e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e34:	4613      	mov	r3, r2
 8011e36:	009b      	lsls	r3, r3, #2
 8011e38:	4413      	add	r3, r2
 8011e3a:	009b      	lsls	r3, r3, #2
 8011e3c:	461a      	mov	r2, r3
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	4413      	add	r3, r2
 8011e42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8011e46:	ee17 2a90 	vmov	r2, s15
 8011e4a:	b292      	uxth	r2, r2
 8011e4c:	811a      	strh	r2, [r3, #8]
				//store aera size
				waves[note].aera_size = current_aera_size;
 8011e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e50:	4613      	mov	r3, r2
 8011e52:	009b      	lsls	r3, r3, #2
 8011e54:	4413      	add	r3, r2
 8011e56:	009b      	lsls	r3, r3, #2
 8011e58:	461a      	mov	r2, r3
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	4413      	add	r3, r2
 8011e5e:	68fa      	ldr	r2, [r7, #12]
 8011e60:	b292      	uxth	r2, r2
 8011e62:	80da      	strh	r2, [r3, #6]
				//store pointer address
				waves[note].start_ptr = &(*unitary_waveform)[current_unitary_waveform_cell - current_aera_size];
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6818      	ldr	r0, [r3, #0]
 8011e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	1ad3      	subs	r3, r2, r3
 8011e6e:	0059      	lsls	r1, r3, #1
 8011e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e72:	4613      	mov	r3, r2
 8011e74:	009b      	lsls	r3, r3, #2
 8011e76:	4413      	add	r3, r2
 8011e78:	009b      	lsls	r3, r3, #2
 8011e7a:	461a      	mov	r2, r3
 8011e7c:	683b      	ldr	r3, [r7, #0]
 8011e7e:	4413      	add	r3, r2
 8011e80:	1842      	adds	r2, r0, r1
 8011e82:	601a      	str	r2, [r3, #0]
				//set current pointer at the same address
				waves[note].current_idx = 0;
 8011e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e86:	4613      	mov	r3, r2
 8011e88:	009b      	lsls	r3, r3, #2
 8011e8a:	4413      	add	r3, r2
 8011e8c:	009b      	lsls	r3, r3, #2
 8011e8e:	461a      	mov	r2, r3
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	4413      	add	r3, r2
 8011e94:	2200      	movs	r2, #0
 8011e96:	809a      	strh	r2, [r3, #4]
		for (uint32_t octave = 0; octave <= MAX_OCTAVE_NUMBER; octave++)
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	617b      	str	r3, [r7, #20]
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	2b0a      	cmp	r3, #10
 8011ea2:	d98e      	bls.n	8011dc2 <init_waves+0x10a>
	for (uint32_t current_comma_first_octave = 0; current_comma_first_octave < COMMA_PER_OCTAVE; current_comma_first_octave++)
 8011ea4:	69fb      	ldr	r3, [r7, #28]
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	61fb      	str	r3, [r7, #28]
 8011eaa:	69fb      	ldr	r3, [r7, #28]
 8011eac:	2b2f      	cmp	r3, #47	; 0x2f
 8011eae:	f67f af3d 	bls.w	8011d2c <init_waves+0x74>
			}
		}
	}

	if (note < NUMBER_OF_NOTES)
 8011eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb4:	2b98      	cmp	r3, #152	; 0x98
 8011eb6:	d806      	bhi.n	8011ec6 <init_waves+0x20e>
	{
		printf("Configuration fail, current pix : %d\n", (int)note);
 8011eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eba:	4619      	mov	r1, r3
 8011ebc:	480b      	ldr	r0, [pc, #44]	; (8011eec <init_waves+0x234>)
 8011ebe:	f00e ff25 	bl	8020d0c <iprintf>
		Error_Handler();
 8011ec2:	f7f0 fe8b 	bl	8002bdc <Error_Handler>
	}

	return buffer_len;
 8011ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3730      	adds	r7, #48	; 0x30
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	ecbd 8b02 	vpop	{d8}
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	f3af 8000 	nop.w
 8011ed8:	54442eea 	.word	0x54442eea
 8011edc:	400921fb 	.word	0x400921fb
 8011ee0:	00000000 	.word	0x00000000
 8011ee4:	40dfffe0 	.word	0x40dfffe0
 8011ee8:	473b8000 	.word	0x473b8000
 8011eec:	08026038 	.word	0x08026038

08011ef0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8011ef0:	b480      	push	{r7}
 8011ef2:	b083      	sub	sp, #12
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011efa:	88fb      	ldrh	r3, [r7, #6]
 8011efc:	021b      	lsls	r3, r3, #8
 8011efe:	b21a      	sxth	r2, r3
 8011f00:	88fb      	ldrh	r3, [r7, #6]
 8011f02:	0a1b      	lsrs	r3, r3, #8
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	b21b      	sxth	r3, r3
 8011f08:	4313      	orrs	r3, r2
 8011f0a:	b21b      	sxth	r3, r3
 8011f0c:	b29b      	uxth	r3, r3
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	370c      	adds	r7, #12
 8011f12:	46bd      	mov	sp, r7
 8011f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f18:	4770      	bx	lr

08011f1a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8011f1a:	b480      	push	{r7}
 8011f1c:	b083      	sub	sp, #12
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	061a      	lsls	r2, r3, #24
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	021b      	lsls	r3, r3, #8
 8011f2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011f2e:	431a      	orrs	r2, r3
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	0a1b      	lsrs	r3, r3, #8
 8011f34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011f38:	431a      	orrs	r2, r3
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	0e1b      	lsrs	r3, r3, #24
 8011f3e:	4313      	orrs	r3, r2
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	370c      	adds	r7, #12
 8011f44:	46bd      	mov	sp, r7
 8011f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4a:	4770      	bx	lr

08011f4c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011f54:	4915      	ldr	r1, [pc, #84]	; (8011fac <etharp_free_entry+0x60>)
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	4613      	mov	r3, r2
 8011f5a:	005b      	lsls	r3, r3, #1
 8011f5c:	4413      	add	r3, r2
 8011f5e:	00db      	lsls	r3, r3, #3
 8011f60:	440b      	add	r3, r1
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d013      	beq.n	8011f90 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011f68:	4910      	ldr	r1, [pc, #64]	; (8011fac <etharp_free_entry+0x60>)
 8011f6a:	687a      	ldr	r2, [r7, #4]
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	005b      	lsls	r3, r3, #1
 8011f70:	4413      	add	r3, r2
 8011f72:	00db      	lsls	r3, r3, #3
 8011f74:	440b      	add	r3, r1
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f003 feb5 	bl	8015ce8 <pbuf_free>
    arp_table[i].q = NULL;
 8011f7e:	490b      	ldr	r1, [pc, #44]	; (8011fac <etharp_free_entry+0x60>)
 8011f80:	687a      	ldr	r2, [r7, #4]
 8011f82:	4613      	mov	r3, r2
 8011f84:	005b      	lsls	r3, r3, #1
 8011f86:	4413      	add	r3, r2
 8011f88:	00db      	lsls	r3, r3, #3
 8011f8a:	440b      	add	r3, r1
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011f90:	4906      	ldr	r1, [pc, #24]	; (8011fac <etharp_free_entry+0x60>)
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	4613      	mov	r3, r2
 8011f96:	005b      	lsls	r3, r3, #1
 8011f98:	4413      	add	r3, r2
 8011f9a:	00db      	lsls	r3, r3, #3
 8011f9c:	440b      	add	r3, r1
 8011f9e:	3314      	adds	r3, #20
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011fa4:	bf00      	nop
 8011fa6:	3708      	adds	r7, #8
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}
 8011fac:	24007698 	.word	0x24007698

08011fb0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b082      	sub	sp, #8
 8011fb4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	607b      	str	r3, [r7, #4]
 8011fba:	e096      	b.n	80120ea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011fbc:	494f      	ldr	r1, [pc, #316]	; (80120fc <etharp_tmr+0x14c>)
 8011fbe:	687a      	ldr	r2, [r7, #4]
 8011fc0:	4613      	mov	r3, r2
 8011fc2:	005b      	lsls	r3, r3, #1
 8011fc4:	4413      	add	r3, r2
 8011fc6:	00db      	lsls	r3, r3, #3
 8011fc8:	440b      	add	r3, r1
 8011fca:	3314      	adds	r3, #20
 8011fcc:	781b      	ldrb	r3, [r3, #0]
 8011fce:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011fd0:	78fb      	ldrb	r3, [r7, #3]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	f000 8086 	beq.w	80120e4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011fd8:	4948      	ldr	r1, [pc, #288]	; (80120fc <etharp_tmr+0x14c>)
 8011fda:	687a      	ldr	r2, [r7, #4]
 8011fdc:	4613      	mov	r3, r2
 8011fde:	005b      	lsls	r3, r3, #1
 8011fe0:	4413      	add	r3, r2
 8011fe2:	00db      	lsls	r3, r3, #3
 8011fe4:	440b      	add	r3, r1
 8011fe6:	3312      	adds	r3, #18
 8011fe8:	881b      	ldrh	r3, [r3, #0]
 8011fea:	3301      	adds	r3, #1
 8011fec:	b298      	uxth	r0, r3
 8011fee:	4943      	ldr	r1, [pc, #268]	; (80120fc <etharp_tmr+0x14c>)
 8011ff0:	687a      	ldr	r2, [r7, #4]
 8011ff2:	4613      	mov	r3, r2
 8011ff4:	005b      	lsls	r3, r3, #1
 8011ff6:	4413      	add	r3, r2
 8011ff8:	00db      	lsls	r3, r3, #3
 8011ffa:	440b      	add	r3, r1
 8011ffc:	3312      	adds	r3, #18
 8011ffe:	4602      	mov	r2, r0
 8012000:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012002:	493e      	ldr	r1, [pc, #248]	; (80120fc <etharp_tmr+0x14c>)
 8012004:	687a      	ldr	r2, [r7, #4]
 8012006:	4613      	mov	r3, r2
 8012008:	005b      	lsls	r3, r3, #1
 801200a:	4413      	add	r3, r2
 801200c:	00db      	lsls	r3, r3, #3
 801200e:	440b      	add	r3, r1
 8012010:	3312      	adds	r3, #18
 8012012:	881b      	ldrh	r3, [r3, #0]
 8012014:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012018:	d215      	bcs.n	8012046 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801201a:	4938      	ldr	r1, [pc, #224]	; (80120fc <etharp_tmr+0x14c>)
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	4613      	mov	r3, r2
 8012020:	005b      	lsls	r3, r3, #1
 8012022:	4413      	add	r3, r2
 8012024:	00db      	lsls	r3, r3, #3
 8012026:	440b      	add	r3, r1
 8012028:	3314      	adds	r3, #20
 801202a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801202c:	2b01      	cmp	r3, #1
 801202e:	d10e      	bne.n	801204e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012030:	4932      	ldr	r1, [pc, #200]	; (80120fc <etharp_tmr+0x14c>)
 8012032:	687a      	ldr	r2, [r7, #4]
 8012034:	4613      	mov	r3, r2
 8012036:	005b      	lsls	r3, r3, #1
 8012038:	4413      	add	r3, r2
 801203a:	00db      	lsls	r3, r3, #3
 801203c:	440b      	add	r3, r1
 801203e:	3312      	adds	r3, #18
 8012040:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012042:	2b04      	cmp	r3, #4
 8012044:	d903      	bls.n	801204e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f7ff ff80 	bl	8011f4c <etharp_free_entry>
 801204c:	e04a      	b.n	80120e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801204e:	492b      	ldr	r1, [pc, #172]	; (80120fc <etharp_tmr+0x14c>)
 8012050:	687a      	ldr	r2, [r7, #4]
 8012052:	4613      	mov	r3, r2
 8012054:	005b      	lsls	r3, r3, #1
 8012056:	4413      	add	r3, r2
 8012058:	00db      	lsls	r3, r3, #3
 801205a:	440b      	add	r3, r1
 801205c:	3314      	adds	r3, #20
 801205e:	781b      	ldrb	r3, [r3, #0]
 8012060:	2b03      	cmp	r3, #3
 8012062:	d10a      	bne.n	801207a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012064:	4925      	ldr	r1, [pc, #148]	; (80120fc <etharp_tmr+0x14c>)
 8012066:	687a      	ldr	r2, [r7, #4]
 8012068:	4613      	mov	r3, r2
 801206a:	005b      	lsls	r3, r3, #1
 801206c:	4413      	add	r3, r2
 801206e:	00db      	lsls	r3, r3, #3
 8012070:	440b      	add	r3, r1
 8012072:	3314      	adds	r3, #20
 8012074:	2204      	movs	r2, #4
 8012076:	701a      	strb	r2, [r3, #0]
 8012078:	e034      	b.n	80120e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801207a:	4920      	ldr	r1, [pc, #128]	; (80120fc <etharp_tmr+0x14c>)
 801207c:	687a      	ldr	r2, [r7, #4]
 801207e:	4613      	mov	r3, r2
 8012080:	005b      	lsls	r3, r3, #1
 8012082:	4413      	add	r3, r2
 8012084:	00db      	lsls	r3, r3, #3
 8012086:	440b      	add	r3, r1
 8012088:	3314      	adds	r3, #20
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	2b04      	cmp	r3, #4
 801208e:	d10a      	bne.n	80120a6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012090:	491a      	ldr	r1, [pc, #104]	; (80120fc <etharp_tmr+0x14c>)
 8012092:	687a      	ldr	r2, [r7, #4]
 8012094:	4613      	mov	r3, r2
 8012096:	005b      	lsls	r3, r3, #1
 8012098:	4413      	add	r3, r2
 801209a:	00db      	lsls	r3, r3, #3
 801209c:	440b      	add	r3, r1
 801209e:	3314      	adds	r3, #20
 80120a0:	2202      	movs	r2, #2
 80120a2:	701a      	strb	r2, [r3, #0]
 80120a4:	e01e      	b.n	80120e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80120a6:	4915      	ldr	r1, [pc, #84]	; (80120fc <etharp_tmr+0x14c>)
 80120a8:	687a      	ldr	r2, [r7, #4]
 80120aa:	4613      	mov	r3, r2
 80120ac:	005b      	lsls	r3, r3, #1
 80120ae:	4413      	add	r3, r2
 80120b0:	00db      	lsls	r3, r3, #3
 80120b2:	440b      	add	r3, r1
 80120b4:	3314      	adds	r3, #20
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	2b01      	cmp	r3, #1
 80120ba:	d113      	bne.n	80120e4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80120bc:	490f      	ldr	r1, [pc, #60]	; (80120fc <etharp_tmr+0x14c>)
 80120be:	687a      	ldr	r2, [r7, #4]
 80120c0:	4613      	mov	r3, r2
 80120c2:	005b      	lsls	r3, r3, #1
 80120c4:	4413      	add	r3, r2
 80120c6:	00db      	lsls	r3, r3, #3
 80120c8:	440b      	add	r3, r1
 80120ca:	3308      	adds	r3, #8
 80120cc:	6818      	ldr	r0, [r3, #0]
 80120ce:	687a      	ldr	r2, [r7, #4]
 80120d0:	4613      	mov	r3, r2
 80120d2:	005b      	lsls	r3, r3, #1
 80120d4:	4413      	add	r3, r2
 80120d6:	00db      	lsls	r3, r3, #3
 80120d8:	4a08      	ldr	r2, [pc, #32]	; (80120fc <etharp_tmr+0x14c>)
 80120da:	4413      	add	r3, r2
 80120dc:	3304      	adds	r3, #4
 80120de:	4619      	mov	r1, r3
 80120e0:	f000 fe6e 	bl	8012dc0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	3301      	adds	r3, #1
 80120e8:	607b      	str	r3, [r7, #4]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2b09      	cmp	r3, #9
 80120ee:	f77f af65 	ble.w	8011fbc <etharp_tmr+0xc>
      }
    }
  }
}
 80120f2:	bf00      	nop
 80120f4:	bf00      	nop
 80120f6:	3708      	adds	r7, #8
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}
 80120fc:	24007698 	.word	0x24007698

08012100 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b08a      	sub	sp, #40	; 0x28
 8012104:	af00      	add	r7, sp, #0
 8012106:	60f8      	str	r0, [r7, #12]
 8012108:	460b      	mov	r3, r1
 801210a:	607a      	str	r2, [r7, #4]
 801210c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801210e:	230a      	movs	r3, #10
 8012110:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012112:	230a      	movs	r3, #10
 8012114:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012116:	230a      	movs	r3, #10
 8012118:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801211a:	2300      	movs	r3, #0
 801211c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801211e:	230a      	movs	r3, #10
 8012120:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012122:	2300      	movs	r3, #0
 8012124:	83bb      	strh	r3, [r7, #28]
 8012126:	2300      	movs	r3, #0
 8012128:	837b      	strh	r3, [r7, #26]
 801212a:	2300      	movs	r3, #0
 801212c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801212e:	2300      	movs	r3, #0
 8012130:	843b      	strh	r3, [r7, #32]
 8012132:	e0ae      	b.n	8012292 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012134:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012138:	49a6      	ldr	r1, [pc, #664]	; (80123d4 <etharp_find_entry+0x2d4>)
 801213a:	4613      	mov	r3, r2
 801213c:	005b      	lsls	r3, r3, #1
 801213e:	4413      	add	r3, r2
 8012140:	00db      	lsls	r3, r3, #3
 8012142:	440b      	add	r3, r1
 8012144:	3314      	adds	r3, #20
 8012146:	781b      	ldrb	r3, [r3, #0]
 8012148:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801214a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801214e:	2b0a      	cmp	r3, #10
 8012150:	d105      	bne.n	801215e <etharp_find_entry+0x5e>
 8012152:	7dfb      	ldrb	r3, [r7, #23]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d102      	bne.n	801215e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012158:	8c3b      	ldrh	r3, [r7, #32]
 801215a:	847b      	strh	r3, [r7, #34]	; 0x22
 801215c:	e095      	b.n	801228a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801215e:	7dfb      	ldrb	r3, [r7, #23]
 8012160:	2b00      	cmp	r3, #0
 8012162:	f000 8092 	beq.w	801228a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012166:	7dfb      	ldrb	r3, [r7, #23]
 8012168:	2b01      	cmp	r3, #1
 801216a:	d009      	beq.n	8012180 <etharp_find_entry+0x80>
 801216c:	7dfb      	ldrb	r3, [r7, #23]
 801216e:	2b01      	cmp	r3, #1
 8012170:	d806      	bhi.n	8012180 <etharp_find_entry+0x80>
 8012172:	4b99      	ldr	r3, [pc, #612]	; (80123d8 <etharp_find_entry+0x2d8>)
 8012174:	f240 1223 	movw	r2, #291	; 0x123
 8012178:	4998      	ldr	r1, [pc, #608]	; (80123dc <etharp_find_entry+0x2dc>)
 801217a:	4899      	ldr	r0, [pc, #612]	; (80123e0 <etharp_find_entry+0x2e0>)
 801217c:	f00e fdc6 	bl	8020d0c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d020      	beq.n	80121c8 <etharp_find_entry+0xc8>
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	6819      	ldr	r1, [r3, #0]
 801218a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801218e:	4891      	ldr	r0, [pc, #580]	; (80123d4 <etharp_find_entry+0x2d4>)
 8012190:	4613      	mov	r3, r2
 8012192:	005b      	lsls	r3, r3, #1
 8012194:	4413      	add	r3, r2
 8012196:	00db      	lsls	r3, r3, #3
 8012198:	4403      	add	r3, r0
 801219a:	3304      	adds	r3, #4
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	4299      	cmp	r1, r3
 80121a0:	d112      	bne.n	80121c8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d00c      	beq.n	80121c2 <etharp_find_entry+0xc2>
 80121a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121ac:	4989      	ldr	r1, [pc, #548]	; (80123d4 <etharp_find_entry+0x2d4>)
 80121ae:	4613      	mov	r3, r2
 80121b0:	005b      	lsls	r3, r3, #1
 80121b2:	4413      	add	r3, r2
 80121b4:	00db      	lsls	r3, r3, #3
 80121b6:	440b      	add	r3, r1
 80121b8:	3308      	adds	r3, #8
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	429a      	cmp	r2, r3
 80121c0:	d102      	bne.n	80121c8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80121c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80121c6:	e100      	b.n	80123ca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80121c8:	7dfb      	ldrb	r3, [r7, #23]
 80121ca:	2b01      	cmp	r3, #1
 80121cc:	d140      	bne.n	8012250 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80121ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121d2:	4980      	ldr	r1, [pc, #512]	; (80123d4 <etharp_find_entry+0x2d4>)
 80121d4:	4613      	mov	r3, r2
 80121d6:	005b      	lsls	r3, r3, #1
 80121d8:	4413      	add	r3, r2
 80121da:	00db      	lsls	r3, r3, #3
 80121dc:	440b      	add	r3, r1
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d01a      	beq.n	801221a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80121e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121e8:	497a      	ldr	r1, [pc, #488]	; (80123d4 <etharp_find_entry+0x2d4>)
 80121ea:	4613      	mov	r3, r2
 80121ec:	005b      	lsls	r3, r3, #1
 80121ee:	4413      	add	r3, r2
 80121f0:	00db      	lsls	r3, r3, #3
 80121f2:	440b      	add	r3, r1
 80121f4:	3312      	adds	r3, #18
 80121f6:	881b      	ldrh	r3, [r3, #0]
 80121f8:	8bba      	ldrh	r2, [r7, #28]
 80121fa:	429a      	cmp	r2, r3
 80121fc:	d845      	bhi.n	801228a <etharp_find_entry+0x18a>
            old_queue = i;
 80121fe:	8c3b      	ldrh	r3, [r7, #32]
 8012200:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012202:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012206:	4973      	ldr	r1, [pc, #460]	; (80123d4 <etharp_find_entry+0x2d4>)
 8012208:	4613      	mov	r3, r2
 801220a:	005b      	lsls	r3, r3, #1
 801220c:	4413      	add	r3, r2
 801220e:	00db      	lsls	r3, r3, #3
 8012210:	440b      	add	r3, r1
 8012212:	3312      	adds	r3, #18
 8012214:	881b      	ldrh	r3, [r3, #0]
 8012216:	83bb      	strh	r3, [r7, #28]
 8012218:	e037      	b.n	801228a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801221a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801221e:	496d      	ldr	r1, [pc, #436]	; (80123d4 <etharp_find_entry+0x2d4>)
 8012220:	4613      	mov	r3, r2
 8012222:	005b      	lsls	r3, r3, #1
 8012224:	4413      	add	r3, r2
 8012226:	00db      	lsls	r3, r3, #3
 8012228:	440b      	add	r3, r1
 801222a:	3312      	adds	r3, #18
 801222c:	881b      	ldrh	r3, [r3, #0]
 801222e:	8b7a      	ldrh	r2, [r7, #26]
 8012230:	429a      	cmp	r2, r3
 8012232:	d82a      	bhi.n	801228a <etharp_find_entry+0x18a>
            old_pending = i;
 8012234:	8c3b      	ldrh	r3, [r7, #32]
 8012236:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012238:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801223c:	4965      	ldr	r1, [pc, #404]	; (80123d4 <etharp_find_entry+0x2d4>)
 801223e:	4613      	mov	r3, r2
 8012240:	005b      	lsls	r3, r3, #1
 8012242:	4413      	add	r3, r2
 8012244:	00db      	lsls	r3, r3, #3
 8012246:	440b      	add	r3, r1
 8012248:	3312      	adds	r3, #18
 801224a:	881b      	ldrh	r3, [r3, #0]
 801224c:	837b      	strh	r3, [r7, #26]
 801224e:	e01c      	b.n	801228a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012250:	7dfb      	ldrb	r3, [r7, #23]
 8012252:	2b01      	cmp	r3, #1
 8012254:	d919      	bls.n	801228a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012256:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801225a:	495e      	ldr	r1, [pc, #376]	; (80123d4 <etharp_find_entry+0x2d4>)
 801225c:	4613      	mov	r3, r2
 801225e:	005b      	lsls	r3, r3, #1
 8012260:	4413      	add	r3, r2
 8012262:	00db      	lsls	r3, r3, #3
 8012264:	440b      	add	r3, r1
 8012266:	3312      	adds	r3, #18
 8012268:	881b      	ldrh	r3, [r3, #0]
 801226a:	8b3a      	ldrh	r2, [r7, #24]
 801226c:	429a      	cmp	r2, r3
 801226e:	d80c      	bhi.n	801228a <etharp_find_entry+0x18a>
            old_stable = i;
 8012270:	8c3b      	ldrh	r3, [r7, #32]
 8012272:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012274:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012278:	4956      	ldr	r1, [pc, #344]	; (80123d4 <etharp_find_entry+0x2d4>)
 801227a:	4613      	mov	r3, r2
 801227c:	005b      	lsls	r3, r3, #1
 801227e:	4413      	add	r3, r2
 8012280:	00db      	lsls	r3, r3, #3
 8012282:	440b      	add	r3, r1
 8012284:	3312      	adds	r3, #18
 8012286:	881b      	ldrh	r3, [r3, #0]
 8012288:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801228a:	8c3b      	ldrh	r3, [r7, #32]
 801228c:	3301      	adds	r3, #1
 801228e:	b29b      	uxth	r3, r3
 8012290:	843b      	strh	r3, [r7, #32]
 8012292:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012296:	2b09      	cmp	r3, #9
 8012298:	f77f af4c 	ble.w	8012134 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801229c:	7afb      	ldrb	r3, [r7, #11]
 801229e:	f003 0302 	and.w	r3, r3, #2
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d108      	bne.n	80122b8 <etharp_find_entry+0x1b8>
 80122a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80122aa:	2b0a      	cmp	r3, #10
 80122ac:	d107      	bne.n	80122be <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80122ae:	7afb      	ldrb	r3, [r7, #11]
 80122b0:	f003 0301 	and.w	r3, r3, #1
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d102      	bne.n	80122be <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80122b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80122bc:	e085      	b.n	80123ca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80122be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80122c2:	2b09      	cmp	r3, #9
 80122c4:	dc02      	bgt.n	80122cc <etharp_find_entry+0x1cc>
    i = empty;
 80122c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80122c8:	843b      	strh	r3, [r7, #32]
 80122ca:	e039      	b.n	8012340 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80122cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80122d0:	2b09      	cmp	r3, #9
 80122d2:	dc14      	bgt.n	80122fe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80122d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122d6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80122d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122dc:	493d      	ldr	r1, [pc, #244]	; (80123d4 <etharp_find_entry+0x2d4>)
 80122de:	4613      	mov	r3, r2
 80122e0:	005b      	lsls	r3, r3, #1
 80122e2:	4413      	add	r3, r2
 80122e4:	00db      	lsls	r3, r3, #3
 80122e6:	440b      	add	r3, r1
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d018      	beq.n	8012320 <etharp_find_entry+0x220>
 80122ee:	4b3a      	ldr	r3, [pc, #232]	; (80123d8 <etharp_find_entry+0x2d8>)
 80122f0:	f240 126d 	movw	r2, #365	; 0x16d
 80122f4:	493b      	ldr	r1, [pc, #236]	; (80123e4 <etharp_find_entry+0x2e4>)
 80122f6:	483a      	ldr	r0, [pc, #232]	; (80123e0 <etharp_find_entry+0x2e0>)
 80122f8:	f00e fd08 	bl	8020d0c <iprintf>
 80122fc:	e010      	b.n	8012320 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80122fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012302:	2b09      	cmp	r3, #9
 8012304:	dc02      	bgt.n	801230c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012306:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012308:	843b      	strh	r3, [r7, #32]
 801230a:	e009      	b.n	8012320 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801230c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012310:	2b09      	cmp	r3, #9
 8012312:	dc02      	bgt.n	801231a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012314:	8bfb      	ldrh	r3, [r7, #30]
 8012316:	843b      	strh	r3, [r7, #32]
 8012318:	e002      	b.n	8012320 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801231a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801231e:	e054      	b.n	80123ca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012320:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012324:	2b09      	cmp	r3, #9
 8012326:	dd06      	ble.n	8012336 <etharp_find_entry+0x236>
 8012328:	4b2b      	ldr	r3, [pc, #172]	; (80123d8 <etharp_find_entry+0x2d8>)
 801232a:	f240 127f 	movw	r2, #383	; 0x17f
 801232e:	492e      	ldr	r1, [pc, #184]	; (80123e8 <etharp_find_entry+0x2e8>)
 8012330:	482b      	ldr	r0, [pc, #172]	; (80123e0 <etharp_find_entry+0x2e0>)
 8012332:	f00e fceb 	bl	8020d0c <iprintf>
    etharp_free_entry(i);
 8012336:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801233a:	4618      	mov	r0, r3
 801233c:	f7ff fe06 	bl	8011f4c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012340:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012344:	2b09      	cmp	r3, #9
 8012346:	dd06      	ble.n	8012356 <etharp_find_entry+0x256>
 8012348:	4b23      	ldr	r3, [pc, #140]	; (80123d8 <etharp_find_entry+0x2d8>)
 801234a:	f240 1283 	movw	r2, #387	; 0x183
 801234e:	4926      	ldr	r1, [pc, #152]	; (80123e8 <etharp_find_entry+0x2e8>)
 8012350:	4823      	ldr	r0, [pc, #140]	; (80123e0 <etharp_find_entry+0x2e0>)
 8012352:	f00e fcdb 	bl	8020d0c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012356:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801235a:	491e      	ldr	r1, [pc, #120]	; (80123d4 <etharp_find_entry+0x2d4>)
 801235c:	4613      	mov	r3, r2
 801235e:	005b      	lsls	r3, r3, #1
 8012360:	4413      	add	r3, r2
 8012362:	00db      	lsls	r3, r3, #3
 8012364:	440b      	add	r3, r1
 8012366:	3314      	adds	r3, #20
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d006      	beq.n	801237c <etharp_find_entry+0x27c>
 801236e:	4b1a      	ldr	r3, [pc, #104]	; (80123d8 <etharp_find_entry+0x2d8>)
 8012370:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012374:	491d      	ldr	r1, [pc, #116]	; (80123ec <etharp_find_entry+0x2ec>)
 8012376:	481a      	ldr	r0, [pc, #104]	; (80123e0 <etharp_find_entry+0x2e0>)
 8012378:	f00e fcc8 	bl	8020d0c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d00b      	beq.n	801239a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012382:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	6819      	ldr	r1, [r3, #0]
 801238a:	4812      	ldr	r0, [pc, #72]	; (80123d4 <etharp_find_entry+0x2d4>)
 801238c:	4613      	mov	r3, r2
 801238e:	005b      	lsls	r3, r3, #1
 8012390:	4413      	add	r3, r2
 8012392:	00db      	lsls	r3, r3, #3
 8012394:	4403      	add	r3, r0
 8012396:	3304      	adds	r3, #4
 8012398:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801239a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801239e:	490d      	ldr	r1, [pc, #52]	; (80123d4 <etharp_find_entry+0x2d4>)
 80123a0:	4613      	mov	r3, r2
 80123a2:	005b      	lsls	r3, r3, #1
 80123a4:	4413      	add	r3, r2
 80123a6:	00db      	lsls	r3, r3, #3
 80123a8:	440b      	add	r3, r1
 80123aa:	3312      	adds	r3, #18
 80123ac:	2200      	movs	r2, #0
 80123ae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80123b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123b4:	4907      	ldr	r1, [pc, #28]	; (80123d4 <etharp_find_entry+0x2d4>)
 80123b6:	4613      	mov	r3, r2
 80123b8:	005b      	lsls	r3, r3, #1
 80123ba:	4413      	add	r3, r2
 80123bc:	00db      	lsls	r3, r3, #3
 80123be:	440b      	add	r3, r1
 80123c0:	3308      	adds	r3, #8
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80123c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3728      	adds	r7, #40	; 0x28
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop
 80123d4:	24007698 	.word	0x24007698
 80123d8:	08026060 	.word	0x08026060
 80123dc:	080260c4 	.word	0x080260c4
 80123e0:	08026104 	.word	0x08026104
 80123e4:	0802612c 	.word	0x0802612c
 80123e8:	08026144 	.word	0x08026144
 80123ec:	08026158 	.word	0x08026158

080123f0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b088      	sub	sp, #32
 80123f4:	af02      	add	r7, sp, #8
 80123f6:	60f8      	str	r0, [r7, #12]
 80123f8:	60b9      	str	r1, [r7, #8]
 80123fa:	607a      	str	r2, [r7, #4]
 80123fc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012404:	2b06      	cmp	r3, #6
 8012406:	d006      	beq.n	8012416 <etharp_update_arp_entry+0x26>
 8012408:	4b48      	ldr	r3, [pc, #288]	; (801252c <etharp_update_arp_entry+0x13c>)
 801240a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801240e:	4948      	ldr	r1, [pc, #288]	; (8012530 <etharp_update_arp_entry+0x140>)
 8012410:	4848      	ldr	r0, [pc, #288]	; (8012534 <etharp_update_arp_entry+0x144>)
 8012412:	f00e fc7b 	bl	8020d0c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012416:	68bb      	ldr	r3, [r7, #8]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d012      	beq.n	8012442 <etharp_update_arp_entry+0x52>
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d00e      	beq.n	8012442 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012424:	68bb      	ldr	r3, [r7, #8]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	68f9      	ldr	r1, [r7, #12]
 801242a:	4618      	mov	r0, r3
 801242c:	f001 facc 	bl	80139c8 <ip4_addr_isbroadcast_u32>
 8012430:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012432:	2b00      	cmp	r3, #0
 8012434:	d105      	bne.n	8012442 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801243e:	2be0      	cmp	r3, #224	; 0xe0
 8012440:	d102      	bne.n	8012448 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012442:	f06f 030f 	mvn.w	r3, #15
 8012446:	e06c      	b.n	8012522 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012448:	78fb      	ldrb	r3, [r7, #3]
 801244a:	68fa      	ldr	r2, [r7, #12]
 801244c:	4619      	mov	r1, r3
 801244e:	68b8      	ldr	r0, [r7, #8]
 8012450:	f7ff fe56 	bl	8012100 <etharp_find_entry>
 8012454:	4603      	mov	r3, r0
 8012456:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012458:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801245c:	2b00      	cmp	r3, #0
 801245e:	da02      	bge.n	8012466 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012460:	8afb      	ldrh	r3, [r7, #22]
 8012462:	b25b      	sxtb	r3, r3
 8012464:	e05d      	b.n	8012522 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012466:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801246a:	4933      	ldr	r1, [pc, #204]	; (8012538 <etharp_update_arp_entry+0x148>)
 801246c:	4613      	mov	r3, r2
 801246e:	005b      	lsls	r3, r3, #1
 8012470:	4413      	add	r3, r2
 8012472:	00db      	lsls	r3, r3, #3
 8012474:	440b      	add	r3, r1
 8012476:	3314      	adds	r3, #20
 8012478:	2202      	movs	r2, #2
 801247a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801247c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012480:	492d      	ldr	r1, [pc, #180]	; (8012538 <etharp_update_arp_entry+0x148>)
 8012482:	4613      	mov	r3, r2
 8012484:	005b      	lsls	r3, r3, #1
 8012486:	4413      	add	r3, r2
 8012488:	00db      	lsls	r3, r3, #3
 801248a:	440b      	add	r3, r1
 801248c:	3308      	adds	r3, #8
 801248e:	68fa      	ldr	r2, [r7, #12]
 8012490:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012492:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012496:	4613      	mov	r3, r2
 8012498:	005b      	lsls	r3, r3, #1
 801249a:	4413      	add	r3, r2
 801249c:	00db      	lsls	r3, r3, #3
 801249e:	3308      	adds	r3, #8
 80124a0:	4a25      	ldr	r2, [pc, #148]	; (8012538 <etharp_update_arp_entry+0x148>)
 80124a2:	4413      	add	r3, r2
 80124a4:	3304      	adds	r3, #4
 80124a6:	2206      	movs	r2, #6
 80124a8:	6879      	ldr	r1, [r7, #4]
 80124aa:	4618      	mov	r0, r3
 80124ac:	f00d fd0c 	bl	801fec8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80124b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124b4:	4920      	ldr	r1, [pc, #128]	; (8012538 <etharp_update_arp_entry+0x148>)
 80124b6:	4613      	mov	r3, r2
 80124b8:	005b      	lsls	r3, r3, #1
 80124ba:	4413      	add	r3, r2
 80124bc:	00db      	lsls	r3, r3, #3
 80124be:	440b      	add	r3, r1
 80124c0:	3312      	adds	r3, #18
 80124c2:	2200      	movs	r2, #0
 80124c4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80124c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124ca:	491b      	ldr	r1, [pc, #108]	; (8012538 <etharp_update_arp_entry+0x148>)
 80124cc:	4613      	mov	r3, r2
 80124ce:	005b      	lsls	r3, r3, #1
 80124d0:	4413      	add	r3, r2
 80124d2:	00db      	lsls	r3, r3, #3
 80124d4:	440b      	add	r3, r1
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d021      	beq.n	8012520 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80124dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124e0:	4915      	ldr	r1, [pc, #84]	; (8012538 <etharp_update_arp_entry+0x148>)
 80124e2:	4613      	mov	r3, r2
 80124e4:	005b      	lsls	r3, r3, #1
 80124e6:	4413      	add	r3, r2
 80124e8:	00db      	lsls	r3, r3, #3
 80124ea:	440b      	add	r3, r1
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80124f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124f4:	4910      	ldr	r1, [pc, #64]	; (8012538 <etharp_update_arp_entry+0x148>)
 80124f6:	4613      	mov	r3, r2
 80124f8:	005b      	lsls	r3, r3, #1
 80124fa:	4413      	add	r3, r2
 80124fc:	00db      	lsls	r3, r3, #3
 80124fe:	440b      	add	r3, r1
 8012500:	2200      	movs	r2, #0
 8012502:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801250a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801250e:	9300      	str	r3, [sp, #0]
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6939      	ldr	r1, [r7, #16]
 8012514:	68f8      	ldr	r0, [r7, #12]
 8012516:	f000 fcf3 	bl	8012f00 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801251a:	6938      	ldr	r0, [r7, #16]
 801251c:	f003 fbe4 	bl	8015ce8 <pbuf_free>
  }
  return ERR_OK;
 8012520:	2300      	movs	r3, #0
}
 8012522:	4618      	mov	r0, r3
 8012524:	3718      	adds	r7, #24
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}
 801252a:	bf00      	nop
 801252c:	08026060 	.word	0x08026060
 8012530:	08026184 	.word	0x08026184
 8012534:	08026104 	.word	0x08026104
 8012538:	24007698 	.word	0x24007698

0801253c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b084      	sub	sp, #16
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012544:	2300      	movs	r3, #0
 8012546:	60fb      	str	r3, [r7, #12]
 8012548:	e01e      	b.n	8012588 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801254a:	4913      	ldr	r1, [pc, #76]	; (8012598 <etharp_cleanup_netif+0x5c>)
 801254c:	68fa      	ldr	r2, [r7, #12]
 801254e:	4613      	mov	r3, r2
 8012550:	005b      	lsls	r3, r3, #1
 8012552:	4413      	add	r3, r2
 8012554:	00db      	lsls	r3, r3, #3
 8012556:	440b      	add	r3, r1
 8012558:	3314      	adds	r3, #20
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801255e:	7afb      	ldrb	r3, [r7, #11]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d00e      	beq.n	8012582 <etharp_cleanup_netif+0x46>
 8012564:	490c      	ldr	r1, [pc, #48]	; (8012598 <etharp_cleanup_netif+0x5c>)
 8012566:	68fa      	ldr	r2, [r7, #12]
 8012568:	4613      	mov	r3, r2
 801256a:	005b      	lsls	r3, r3, #1
 801256c:	4413      	add	r3, r2
 801256e:	00db      	lsls	r3, r3, #3
 8012570:	440b      	add	r3, r1
 8012572:	3308      	adds	r3, #8
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	687a      	ldr	r2, [r7, #4]
 8012578:	429a      	cmp	r2, r3
 801257a:	d102      	bne.n	8012582 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801257c:	68f8      	ldr	r0, [r7, #12]
 801257e:	f7ff fce5 	bl	8011f4c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	3301      	adds	r3, #1
 8012586:	60fb      	str	r3, [r7, #12]
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	2b09      	cmp	r3, #9
 801258c:	dddd      	ble.n	801254a <etharp_cleanup_netif+0xe>
    }
  }
}
 801258e:	bf00      	nop
 8012590:	bf00      	nop
 8012592:	3710      	adds	r7, #16
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	24007698 	.word	0x24007698

0801259c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801259c:	b5b0      	push	{r4, r5, r7, lr}
 801259e:	b08a      	sub	sp, #40	; 0x28
 80125a0:	af04      	add	r7, sp, #16
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d107      	bne.n	80125bc <etharp_input+0x20>
 80125ac:	4b3d      	ldr	r3, [pc, #244]	; (80126a4 <etharp_input+0x108>)
 80125ae:	f240 228a 	movw	r2, #650	; 0x28a
 80125b2:	493d      	ldr	r1, [pc, #244]	; (80126a8 <etharp_input+0x10c>)
 80125b4:	483d      	ldr	r0, [pc, #244]	; (80126ac <etharp_input+0x110>)
 80125b6:	f00e fba9 	bl	8020d0c <iprintf>
 80125ba:	e06f      	b.n	801269c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	685b      	ldr	r3, [r3, #4]
 80125c0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	881b      	ldrh	r3, [r3, #0]
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125cc:	d10c      	bne.n	80125e8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80125d2:	2b06      	cmp	r3, #6
 80125d4:	d108      	bne.n	80125e8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80125da:	2b04      	cmp	r3, #4
 80125dc:	d104      	bne.n	80125e8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80125de:	693b      	ldr	r3, [r7, #16]
 80125e0:	885b      	ldrh	r3, [r3, #2]
 80125e2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80125e4:	2b08      	cmp	r3, #8
 80125e6:	d003      	beq.n	80125f0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f003 fb7d 	bl	8015ce8 <pbuf_free>
    return;
 80125ee:	e055      	b.n	801269c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	330e      	adds	r3, #14
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80125f8:	693b      	ldr	r3, [r7, #16]
 80125fa:	3318      	adds	r3, #24
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	3304      	adds	r3, #4
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d102      	bne.n	8012610 <etharp_input+0x74>
    for_us = 0;
 801260a:	2300      	movs	r3, #0
 801260c:	75fb      	strb	r3, [r7, #23]
 801260e:	e009      	b.n	8012624 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012610:	68ba      	ldr	r2, [r7, #8]
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	3304      	adds	r3, #4
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	429a      	cmp	r2, r3
 801261a:	bf0c      	ite	eq
 801261c:	2301      	moveq	r3, #1
 801261e:	2300      	movne	r3, #0
 8012620:	b2db      	uxtb	r3, r3
 8012622:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	f103 0208 	add.w	r2, r3, #8
 801262a:	7dfb      	ldrb	r3, [r7, #23]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d001      	beq.n	8012634 <etharp_input+0x98>
 8012630:	2301      	movs	r3, #1
 8012632:	e000      	b.n	8012636 <etharp_input+0x9a>
 8012634:	2302      	movs	r3, #2
 8012636:	f107 010c 	add.w	r1, r7, #12
 801263a:	6838      	ldr	r0, [r7, #0]
 801263c:	f7ff fed8 	bl	80123f0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	88db      	ldrh	r3, [r3, #6]
 8012644:	b29b      	uxth	r3, r3
 8012646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801264a:	d003      	beq.n	8012654 <etharp_input+0xb8>
 801264c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012650:	d01e      	beq.n	8012690 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012652:	e020      	b.n	8012696 <etharp_input+0xfa>
      if (for_us) {
 8012654:	7dfb      	ldrb	r3, [r7, #23]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d01c      	beq.n	8012694 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012660:	693b      	ldr	r3, [r7, #16]
 8012662:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012670:	693a      	ldr	r2, [r7, #16]
 8012672:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012674:	2102      	movs	r1, #2
 8012676:	9103      	str	r1, [sp, #12]
 8012678:	f107 010c 	add.w	r1, r7, #12
 801267c:	9102      	str	r1, [sp, #8]
 801267e:	9201      	str	r2, [sp, #4]
 8012680:	9300      	str	r3, [sp, #0]
 8012682:	462b      	mov	r3, r5
 8012684:	4622      	mov	r2, r4
 8012686:	4601      	mov	r1, r0
 8012688:	6838      	ldr	r0, [r7, #0]
 801268a:	f000 faeb 	bl	8012c64 <etharp_raw>
      break;
 801268e:	e001      	b.n	8012694 <etharp_input+0xf8>
      break;
 8012690:	bf00      	nop
 8012692:	e000      	b.n	8012696 <etharp_input+0xfa>
      break;
 8012694:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f003 fb26 	bl	8015ce8 <pbuf_free>
}
 801269c:	3718      	adds	r7, #24
 801269e:	46bd      	mov	sp, r7
 80126a0:	bdb0      	pop	{r4, r5, r7, pc}
 80126a2:	bf00      	nop
 80126a4:	08026060 	.word	0x08026060
 80126a8:	080261dc 	.word	0x080261dc
 80126ac:	08026104 	.word	0x08026104

080126b0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b086      	sub	sp, #24
 80126b4:	af02      	add	r7, sp, #8
 80126b6:	60f8      	str	r0, [r7, #12]
 80126b8:	60b9      	str	r1, [r7, #8]
 80126ba:	4613      	mov	r3, r2
 80126bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80126be:	79fa      	ldrb	r2, [r7, #7]
 80126c0:	4944      	ldr	r1, [pc, #272]	; (80127d4 <etharp_output_to_arp_index+0x124>)
 80126c2:	4613      	mov	r3, r2
 80126c4:	005b      	lsls	r3, r3, #1
 80126c6:	4413      	add	r3, r2
 80126c8:	00db      	lsls	r3, r3, #3
 80126ca:	440b      	add	r3, r1
 80126cc:	3314      	adds	r3, #20
 80126ce:	781b      	ldrb	r3, [r3, #0]
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	d806      	bhi.n	80126e2 <etharp_output_to_arp_index+0x32>
 80126d4:	4b40      	ldr	r3, [pc, #256]	; (80127d8 <etharp_output_to_arp_index+0x128>)
 80126d6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80126da:	4940      	ldr	r1, [pc, #256]	; (80127dc <etharp_output_to_arp_index+0x12c>)
 80126dc:	4840      	ldr	r0, [pc, #256]	; (80127e0 <etharp_output_to_arp_index+0x130>)
 80126de:	f00e fb15 	bl	8020d0c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80126e2:	79fa      	ldrb	r2, [r7, #7]
 80126e4:	493b      	ldr	r1, [pc, #236]	; (80127d4 <etharp_output_to_arp_index+0x124>)
 80126e6:	4613      	mov	r3, r2
 80126e8:	005b      	lsls	r3, r3, #1
 80126ea:	4413      	add	r3, r2
 80126ec:	00db      	lsls	r3, r3, #3
 80126ee:	440b      	add	r3, r1
 80126f0:	3314      	adds	r3, #20
 80126f2:	781b      	ldrb	r3, [r3, #0]
 80126f4:	2b02      	cmp	r3, #2
 80126f6:	d153      	bne.n	80127a0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80126f8:	79fa      	ldrb	r2, [r7, #7]
 80126fa:	4936      	ldr	r1, [pc, #216]	; (80127d4 <etharp_output_to_arp_index+0x124>)
 80126fc:	4613      	mov	r3, r2
 80126fe:	005b      	lsls	r3, r3, #1
 8012700:	4413      	add	r3, r2
 8012702:	00db      	lsls	r3, r3, #3
 8012704:	440b      	add	r3, r1
 8012706:	3312      	adds	r3, #18
 8012708:	881b      	ldrh	r3, [r3, #0]
 801270a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801270e:	d919      	bls.n	8012744 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012710:	79fa      	ldrb	r2, [r7, #7]
 8012712:	4613      	mov	r3, r2
 8012714:	005b      	lsls	r3, r3, #1
 8012716:	4413      	add	r3, r2
 8012718:	00db      	lsls	r3, r3, #3
 801271a:	4a2e      	ldr	r2, [pc, #184]	; (80127d4 <etharp_output_to_arp_index+0x124>)
 801271c:	4413      	add	r3, r2
 801271e:	3304      	adds	r3, #4
 8012720:	4619      	mov	r1, r3
 8012722:	68f8      	ldr	r0, [r7, #12]
 8012724:	f000 fb4c 	bl	8012dc0 <etharp_request>
 8012728:	4603      	mov	r3, r0
 801272a:	2b00      	cmp	r3, #0
 801272c:	d138      	bne.n	80127a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801272e:	79fa      	ldrb	r2, [r7, #7]
 8012730:	4928      	ldr	r1, [pc, #160]	; (80127d4 <etharp_output_to_arp_index+0x124>)
 8012732:	4613      	mov	r3, r2
 8012734:	005b      	lsls	r3, r3, #1
 8012736:	4413      	add	r3, r2
 8012738:	00db      	lsls	r3, r3, #3
 801273a:	440b      	add	r3, r1
 801273c:	3314      	adds	r3, #20
 801273e:	2203      	movs	r2, #3
 8012740:	701a      	strb	r2, [r3, #0]
 8012742:	e02d      	b.n	80127a0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012744:	79fa      	ldrb	r2, [r7, #7]
 8012746:	4923      	ldr	r1, [pc, #140]	; (80127d4 <etharp_output_to_arp_index+0x124>)
 8012748:	4613      	mov	r3, r2
 801274a:	005b      	lsls	r3, r3, #1
 801274c:	4413      	add	r3, r2
 801274e:	00db      	lsls	r3, r3, #3
 8012750:	440b      	add	r3, r1
 8012752:	3312      	adds	r3, #18
 8012754:	881b      	ldrh	r3, [r3, #0]
 8012756:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801275a:	d321      	bcc.n	80127a0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801275c:	79fa      	ldrb	r2, [r7, #7]
 801275e:	4613      	mov	r3, r2
 8012760:	005b      	lsls	r3, r3, #1
 8012762:	4413      	add	r3, r2
 8012764:	00db      	lsls	r3, r3, #3
 8012766:	4a1b      	ldr	r2, [pc, #108]	; (80127d4 <etharp_output_to_arp_index+0x124>)
 8012768:	4413      	add	r3, r2
 801276a:	1d19      	adds	r1, r3, #4
 801276c:	79fa      	ldrb	r2, [r7, #7]
 801276e:	4613      	mov	r3, r2
 8012770:	005b      	lsls	r3, r3, #1
 8012772:	4413      	add	r3, r2
 8012774:	00db      	lsls	r3, r3, #3
 8012776:	3308      	adds	r3, #8
 8012778:	4a16      	ldr	r2, [pc, #88]	; (80127d4 <etharp_output_to_arp_index+0x124>)
 801277a:	4413      	add	r3, r2
 801277c:	3304      	adds	r3, #4
 801277e:	461a      	mov	r2, r3
 8012780:	68f8      	ldr	r0, [r7, #12]
 8012782:	f000 fafb 	bl	8012d7c <etharp_request_dst>
 8012786:	4603      	mov	r3, r0
 8012788:	2b00      	cmp	r3, #0
 801278a:	d109      	bne.n	80127a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801278c:	79fa      	ldrb	r2, [r7, #7]
 801278e:	4911      	ldr	r1, [pc, #68]	; (80127d4 <etharp_output_to_arp_index+0x124>)
 8012790:	4613      	mov	r3, r2
 8012792:	005b      	lsls	r3, r3, #1
 8012794:	4413      	add	r3, r2
 8012796:	00db      	lsls	r3, r3, #3
 8012798:	440b      	add	r3, r1
 801279a:	3314      	adds	r3, #20
 801279c:	2203      	movs	r2, #3
 801279e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80127a6:	79fa      	ldrb	r2, [r7, #7]
 80127a8:	4613      	mov	r3, r2
 80127aa:	005b      	lsls	r3, r3, #1
 80127ac:	4413      	add	r3, r2
 80127ae:	00db      	lsls	r3, r3, #3
 80127b0:	3308      	adds	r3, #8
 80127b2:	4a08      	ldr	r2, [pc, #32]	; (80127d4 <etharp_output_to_arp_index+0x124>)
 80127b4:	4413      	add	r3, r2
 80127b6:	3304      	adds	r3, #4
 80127b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80127bc:	9200      	str	r2, [sp, #0]
 80127be:	460a      	mov	r2, r1
 80127c0:	68b9      	ldr	r1, [r7, #8]
 80127c2:	68f8      	ldr	r0, [r7, #12]
 80127c4:	f000 fb9c 	bl	8012f00 <ethernet_output>
 80127c8:	4603      	mov	r3, r0
}
 80127ca:	4618      	mov	r0, r3
 80127cc:	3710      	adds	r7, #16
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	bf00      	nop
 80127d4:	24007698 	.word	0x24007698
 80127d8:	08026060 	.word	0x08026060
 80127dc:	080261fc 	.word	0x080261fc
 80127e0:	08026104 	.word	0x08026104

080127e4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b08a      	sub	sp, #40	; 0x28
 80127e8:	af02      	add	r7, sp, #8
 80127ea:	60f8      	str	r0, [r7, #12]
 80127ec:	60b9      	str	r1, [r7, #8]
 80127ee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d106      	bne.n	8012808 <etharp_output+0x24>
 80127fa:	4b73      	ldr	r3, [pc, #460]	; (80129c8 <etharp_output+0x1e4>)
 80127fc:	f240 321e 	movw	r2, #798	; 0x31e
 8012800:	4972      	ldr	r1, [pc, #456]	; (80129cc <etharp_output+0x1e8>)
 8012802:	4873      	ldr	r0, [pc, #460]	; (80129d0 <etharp_output+0x1ec>)
 8012804:	f00e fa82 	bl	8020d0c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d106      	bne.n	801281c <etharp_output+0x38>
 801280e:	4b6e      	ldr	r3, [pc, #440]	; (80129c8 <etharp_output+0x1e4>)
 8012810:	f240 321f 	movw	r2, #799	; 0x31f
 8012814:	496f      	ldr	r1, [pc, #444]	; (80129d4 <etharp_output+0x1f0>)
 8012816:	486e      	ldr	r0, [pc, #440]	; (80129d0 <etharp_output+0x1ec>)
 8012818:	f00e fa78 	bl	8020d0c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d106      	bne.n	8012830 <etharp_output+0x4c>
 8012822:	4b69      	ldr	r3, [pc, #420]	; (80129c8 <etharp_output+0x1e4>)
 8012824:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012828:	496b      	ldr	r1, [pc, #428]	; (80129d8 <etharp_output+0x1f4>)
 801282a:	4869      	ldr	r0, [pc, #420]	; (80129d0 <etharp_output+0x1ec>)
 801282c:	f00e fa6e 	bl	8020d0c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	68f9      	ldr	r1, [r7, #12]
 8012836:	4618      	mov	r0, r3
 8012838:	f001 f8c6 	bl	80139c8 <ip4_addr_isbroadcast_u32>
 801283c:	4603      	mov	r3, r0
 801283e:	2b00      	cmp	r3, #0
 8012840:	d002      	beq.n	8012848 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012842:	4b66      	ldr	r3, [pc, #408]	; (80129dc <etharp_output+0x1f8>)
 8012844:	61fb      	str	r3, [r7, #28]
 8012846:	e0af      	b.n	80129a8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012850:	2be0      	cmp	r3, #224	; 0xe0
 8012852:	d118      	bne.n	8012886 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012854:	2301      	movs	r3, #1
 8012856:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012858:	2300      	movs	r3, #0
 801285a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801285c:	235e      	movs	r3, #94	; 0x5e
 801285e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	3301      	adds	r3, #1
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801286a:	b2db      	uxtb	r3, r3
 801286c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	3302      	adds	r3, #2
 8012872:	781b      	ldrb	r3, [r3, #0]
 8012874:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	3303      	adds	r3, #3
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801287e:	f107 0310 	add.w	r3, r7, #16
 8012882:	61fb      	str	r3, [r7, #28]
 8012884:	e090      	b.n	80129a8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681a      	ldr	r2, [r3, #0]
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	3304      	adds	r3, #4
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	405a      	eors	r2, r3
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	3308      	adds	r3, #8
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	4013      	ands	r3, r2
 801289a:	2b00      	cmp	r3, #0
 801289c:	d012      	beq.n	80128c4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80128a4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80128a8:	4293      	cmp	r3, r2
 80128aa:	d00b      	beq.n	80128c4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	330c      	adds	r3, #12
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d003      	beq.n	80128be <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	330c      	adds	r3, #12
 80128ba:	61bb      	str	r3, [r7, #24]
 80128bc:	e002      	b.n	80128c4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80128be:	f06f 0303 	mvn.w	r3, #3
 80128c2:	e07d      	b.n	80129c0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80128c4:	4b46      	ldr	r3, [pc, #280]	; (80129e0 <etharp_output+0x1fc>)
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	4619      	mov	r1, r3
 80128ca:	4a46      	ldr	r2, [pc, #280]	; (80129e4 <etharp_output+0x200>)
 80128cc:	460b      	mov	r3, r1
 80128ce:	005b      	lsls	r3, r3, #1
 80128d0:	440b      	add	r3, r1
 80128d2:	00db      	lsls	r3, r3, #3
 80128d4:	4413      	add	r3, r2
 80128d6:	3314      	adds	r3, #20
 80128d8:	781b      	ldrb	r3, [r3, #0]
 80128da:	2b01      	cmp	r3, #1
 80128dc:	d925      	bls.n	801292a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80128de:	4b40      	ldr	r3, [pc, #256]	; (80129e0 <etharp_output+0x1fc>)
 80128e0:	781b      	ldrb	r3, [r3, #0]
 80128e2:	4619      	mov	r1, r3
 80128e4:	4a3f      	ldr	r2, [pc, #252]	; (80129e4 <etharp_output+0x200>)
 80128e6:	460b      	mov	r3, r1
 80128e8:	005b      	lsls	r3, r3, #1
 80128ea:	440b      	add	r3, r1
 80128ec:	00db      	lsls	r3, r3, #3
 80128ee:	4413      	add	r3, r2
 80128f0:	3308      	adds	r3, #8
 80128f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80128f4:	68fa      	ldr	r2, [r7, #12]
 80128f6:	429a      	cmp	r2, r3
 80128f8:	d117      	bne.n	801292a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80128fa:	69bb      	ldr	r3, [r7, #24]
 80128fc:	681a      	ldr	r2, [r3, #0]
 80128fe:	4b38      	ldr	r3, [pc, #224]	; (80129e0 <etharp_output+0x1fc>)
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	4618      	mov	r0, r3
 8012904:	4937      	ldr	r1, [pc, #220]	; (80129e4 <etharp_output+0x200>)
 8012906:	4603      	mov	r3, r0
 8012908:	005b      	lsls	r3, r3, #1
 801290a:	4403      	add	r3, r0
 801290c:	00db      	lsls	r3, r3, #3
 801290e:	440b      	add	r3, r1
 8012910:	3304      	adds	r3, #4
 8012912:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012914:	429a      	cmp	r2, r3
 8012916:	d108      	bne.n	801292a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012918:	4b31      	ldr	r3, [pc, #196]	; (80129e0 <etharp_output+0x1fc>)
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	461a      	mov	r2, r3
 801291e:	68b9      	ldr	r1, [r7, #8]
 8012920:	68f8      	ldr	r0, [r7, #12]
 8012922:	f7ff fec5 	bl	80126b0 <etharp_output_to_arp_index>
 8012926:	4603      	mov	r3, r0
 8012928:	e04a      	b.n	80129c0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801292a:	2300      	movs	r3, #0
 801292c:	75fb      	strb	r3, [r7, #23]
 801292e:	e031      	b.n	8012994 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012930:	7dfa      	ldrb	r2, [r7, #23]
 8012932:	492c      	ldr	r1, [pc, #176]	; (80129e4 <etharp_output+0x200>)
 8012934:	4613      	mov	r3, r2
 8012936:	005b      	lsls	r3, r3, #1
 8012938:	4413      	add	r3, r2
 801293a:	00db      	lsls	r3, r3, #3
 801293c:	440b      	add	r3, r1
 801293e:	3314      	adds	r3, #20
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	2b01      	cmp	r3, #1
 8012944:	d923      	bls.n	801298e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012946:	7dfa      	ldrb	r2, [r7, #23]
 8012948:	4926      	ldr	r1, [pc, #152]	; (80129e4 <etharp_output+0x200>)
 801294a:	4613      	mov	r3, r2
 801294c:	005b      	lsls	r3, r3, #1
 801294e:	4413      	add	r3, r2
 8012950:	00db      	lsls	r3, r3, #3
 8012952:	440b      	add	r3, r1
 8012954:	3308      	adds	r3, #8
 8012956:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012958:	68fa      	ldr	r2, [r7, #12]
 801295a:	429a      	cmp	r2, r3
 801295c:	d117      	bne.n	801298e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801295e:	69bb      	ldr	r3, [r7, #24]
 8012960:	6819      	ldr	r1, [r3, #0]
 8012962:	7dfa      	ldrb	r2, [r7, #23]
 8012964:	481f      	ldr	r0, [pc, #124]	; (80129e4 <etharp_output+0x200>)
 8012966:	4613      	mov	r3, r2
 8012968:	005b      	lsls	r3, r3, #1
 801296a:	4413      	add	r3, r2
 801296c:	00db      	lsls	r3, r3, #3
 801296e:	4403      	add	r3, r0
 8012970:	3304      	adds	r3, #4
 8012972:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012974:	4299      	cmp	r1, r3
 8012976:	d10a      	bne.n	801298e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012978:	4a19      	ldr	r2, [pc, #100]	; (80129e0 <etharp_output+0x1fc>)
 801297a:	7dfb      	ldrb	r3, [r7, #23]
 801297c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801297e:	7dfb      	ldrb	r3, [r7, #23]
 8012980:	461a      	mov	r2, r3
 8012982:	68b9      	ldr	r1, [r7, #8]
 8012984:	68f8      	ldr	r0, [r7, #12]
 8012986:	f7ff fe93 	bl	80126b0 <etharp_output_to_arp_index>
 801298a:	4603      	mov	r3, r0
 801298c:	e018      	b.n	80129c0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801298e:	7dfb      	ldrb	r3, [r7, #23]
 8012990:	3301      	adds	r3, #1
 8012992:	75fb      	strb	r3, [r7, #23]
 8012994:	7dfb      	ldrb	r3, [r7, #23]
 8012996:	2b09      	cmp	r3, #9
 8012998:	d9ca      	bls.n	8012930 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801299a:	68ba      	ldr	r2, [r7, #8]
 801299c:	69b9      	ldr	r1, [r7, #24]
 801299e:	68f8      	ldr	r0, [r7, #12]
 80129a0:	f000 f822 	bl	80129e8 <etharp_query>
 80129a4:	4603      	mov	r3, r0
 80129a6:	e00b      	b.n	80129c0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80129ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80129b2:	9300      	str	r3, [sp, #0]
 80129b4:	69fb      	ldr	r3, [r7, #28]
 80129b6:	68b9      	ldr	r1, [r7, #8]
 80129b8:	68f8      	ldr	r0, [r7, #12]
 80129ba:	f000 faa1 	bl	8012f00 <ethernet_output>
 80129be:	4603      	mov	r3, r0
}
 80129c0:	4618      	mov	r0, r3
 80129c2:	3720      	adds	r7, #32
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}
 80129c8:	08026060 	.word	0x08026060
 80129cc:	080261dc 	.word	0x080261dc
 80129d0:	08026104 	.word	0x08026104
 80129d4:	0802622c 	.word	0x0802622c
 80129d8:	080261cc 	.word	0x080261cc
 80129dc:	08029308 	.word	0x08029308
 80129e0:	24007788 	.word	0x24007788
 80129e4:	24007698 	.word	0x24007698

080129e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b08c      	sub	sp, #48	; 0x30
 80129ec:	af02      	add	r7, sp, #8
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	60b9      	str	r1, [r7, #8]
 80129f2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	3326      	adds	r3, #38	; 0x26
 80129f8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80129fa:	23ff      	movs	r3, #255	; 0xff
 80129fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012a00:	2300      	movs	r3, #0
 8012a02:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	68f9      	ldr	r1, [r7, #12]
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f000 ffdc 	bl	80139c8 <ip4_addr_isbroadcast_u32>
 8012a10:	4603      	mov	r3, r0
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d10c      	bne.n	8012a30 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012a16:	68bb      	ldr	r3, [r7, #8]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012a1e:	2be0      	cmp	r3, #224	; 0xe0
 8012a20:	d006      	beq.n	8012a30 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d003      	beq.n	8012a30 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d102      	bne.n	8012a36 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012a30:	f06f 030f 	mvn.w	r3, #15
 8012a34:	e101      	b.n	8012c3a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012a36:	68fa      	ldr	r2, [r7, #12]
 8012a38:	2101      	movs	r1, #1
 8012a3a:	68b8      	ldr	r0, [r7, #8]
 8012a3c:	f7ff fb60 	bl	8012100 <etharp_find_entry>
 8012a40:	4603      	mov	r3, r0
 8012a42:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012a44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	da02      	bge.n	8012a52 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012a4c:	8a7b      	ldrh	r3, [r7, #18]
 8012a4e:	b25b      	sxtb	r3, r3
 8012a50:	e0f3      	b.n	8012c3a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012a52:	8a7b      	ldrh	r3, [r7, #18]
 8012a54:	2b7e      	cmp	r3, #126	; 0x7e
 8012a56:	d906      	bls.n	8012a66 <etharp_query+0x7e>
 8012a58:	4b7a      	ldr	r3, [pc, #488]	; (8012c44 <etharp_query+0x25c>)
 8012a5a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012a5e:	497a      	ldr	r1, [pc, #488]	; (8012c48 <etharp_query+0x260>)
 8012a60:	487a      	ldr	r0, [pc, #488]	; (8012c4c <etharp_query+0x264>)
 8012a62:	f00e f953 	bl	8020d0c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012a66:	8a7b      	ldrh	r3, [r7, #18]
 8012a68:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012a6a:	7c7a      	ldrb	r2, [r7, #17]
 8012a6c:	4978      	ldr	r1, [pc, #480]	; (8012c50 <etharp_query+0x268>)
 8012a6e:	4613      	mov	r3, r2
 8012a70:	005b      	lsls	r3, r3, #1
 8012a72:	4413      	add	r3, r2
 8012a74:	00db      	lsls	r3, r3, #3
 8012a76:	440b      	add	r3, r1
 8012a78:	3314      	adds	r3, #20
 8012a7a:	781b      	ldrb	r3, [r3, #0]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d115      	bne.n	8012aac <etharp_query+0xc4>
    is_new_entry = 1;
 8012a80:	2301      	movs	r3, #1
 8012a82:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012a84:	7c7a      	ldrb	r2, [r7, #17]
 8012a86:	4972      	ldr	r1, [pc, #456]	; (8012c50 <etharp_query+0x268>)
 8012a88:	4613      	mov	r3, r2
 8012a8a:	005b      	lsls	r3, r3, #1
 8012a8c:	4413      	add	r3, r2
 8012a8e:	00db      	lsls	r3, r3, #3
 8012a90:	440b      	add	r3, r1
 8012a92:	3314      	adds	r3, #20
 8012a94:	2201      	movs	r2, #1
 8012a96:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012a98:	7c7a      	ldrb	r2, [r7, #17]
 8012a9a:	496d      	ldr	r1, [pc, #436]	; (8012c50 <etharp_query+0x268>)
 8012a9c:	4613      	mov	r3, r2
 8012a9e:	005b      	lsls	r3, r3, #1
 8012aa0:	4413      	add	r3, r2
 8012aa2:	00db      	lsls	r3, r3, #3
 8012aa4:	440b      	add	r3, r1
 8012aa6:	3308      	adds	r3, #8
 8012aa8:	68fa      	ldr	r2, [r7, #12]
 8012aaa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012aac:	7c7a      	ldrb	r2, [r7, #17]
 8012aae:	4968      	ldr	r1, [pc, #416]	; (8012c50 <etharp_query+0x268>)
 8012ab0:	4613      	mov	r3, r2
 8012ab2:	005b      	lsls	r3, r3, #1
 8012ab4:	4413      	add	r3, r2
 8012ab6:	00db      	lsls	r3, r3, #3
 8012ab8:	440b      	add	r3, r1
 8012aba:	3314      	adds	r3, #20
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	2b01      	cmp	r3, #1
 8012ac0:	d011      	beq.n	8012ae6 <etharp_query+0xfe>
 8012ac2:	7c7a      	ldrb	r2, [r7, #17]
 8012ac4:	4962      	ldr	r1, [pc, #392]	; (8012c50 <etharp_query+0x268>)
 8012ac6:	4613      	mov	r3, r2
 8012ac8:	005b      	lsls	r3, r3, #1
 8012aca:	4413      	add	r3, r2
 8012acc:	00db      	lsls	r3, r3, #3
 8012ace:	440b      	add	r3, r1
 8012ad0:	3314      	adds	r3, #20
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	2b01      	cmp	r3, #1
 8012ad6:	d806      	bhi.n	8012ae6 <etharp_query+0xfe>
 8012ad8:	4b5a      	ldr	r3, [pc, #360]	; (8012c44 <etharp_query+0x25c>)
 8012ada:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012ade:	495d      	ldr	r1, [pc, #372]	; (8012c54 <etharp_query+0x26c>)
 8012ae0:	485a      	ldr	r0, [pc, #360]	; (8012c4c <etharp_query+0x264>)
 8012ae2:	f00e f913 	bl	8020d0c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012ae6:	6a3b      	ldr	r3, [r7, #32]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d102      	bne.n	8012af2 <etharp_query+0x10a>
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d10c      	bne.n	8012b0c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012af2:	68b9      	ldr	r1, [r7, #8]
 8012af4:	68f8      	ldr	r0, [r7, #12]
 8012af6:	f000 f963 	bl	8012dc0 <etharp_request>
 8012afa:	4603      	mov	r3, r0
 8012afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d102      	bne.n	8012b0c <etharp_query+0x124>
      return result;
 8012b06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012b0a:	e096      	b.n	8012c3a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d106      	bne.n	8012b20 <etharp_query+0x138>
 8012b12:	4b4c      	ldr	r3, [pc, #304]	; (8012c44 <etharp_query+0x25c>)
 8012b14:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012b18:	494f      	ldr	r1, [pc, #316]	; (8012c58 <etharp_query+0x270>)
 8012b1a:	484c      	ldr	r0, [pc, #304]	; (8012c4c <etharp_query+0x264>)
 8012b1c:	f00e f8f6 	bl	8020d0c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012b20:	7c7a      	ldrb	r2, [r7, #17]
 8012b22:	494b      	ldr	r1, [pc, #300]	; (8012c50 <etharp_query+0x268>)
 8012b24:	4613      	mov	r3, r2
 8012b26:	005b      	lsls	r3, r3, #1
 8012b28:	4413      	add	r3, r2
 8012b2a:	00db      	lsls	r3, r3, #3
 8012b2c:	440b      	add	r3, r1
 8012b2e:	3314      	adds	r3, #20
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	2b01      	cmp	r3, #1
 8012b34:	d917      	bls.n	8012b66 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012b36:	4a49      	ldr	r2, [pc, #292]	; (8012c5c <etharp_query+0x274>)
 8012b38:	7c7b      	ldrb	r3, [r7, #17]
 8012b3a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012b3c:	7c7a      	ldrb	r2, [r7, #17]
 8012b3e:	4613      	mov	r3, r2
 8012b40:	005b      	lsls	r3, r3, #1
 8012b42:	4413      	add	r3, r2
 8012b44:	00db      	lsls	r3, r3, #3
 8012b46:	3308      	adds	r3, #8
 8012b48:	4a41      	ldr	r2, [pc, #260]	; (8012c50 <etharp_query+0x268>)
 8012b4a:	4413      	add	r3, r2
 8012b4c:	3304      	adds	r3, #4
 8012b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012b52:	9200      	str	r2, [sp, #0]
 8012b54:	697a      	ldr	r2, [r7, #20]
 8012b56:	6879      	ldr	r1, [r7, #4]
 8012b58:	68f8      	ldr	r0, [r7, #12]
 8012b5a:	f000 f9d1 	bl	8012f00 <ethernet_output>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012b64:	e067      	b.n	8012c36 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012b66:	7c7a      	ldrb	r2, [r7, #17]
 8012b68:	4939      	ldr	r1, [pc, #228]	; (8012c50 <etharp_query+0x268>)
 8012b6a:	4613      	mov	r3, r2
 8012b6c:	005b      	lsls	r3, r3, #1
 8012b6e:	4413      	add	r3, r2
 8012b70:	00db      	lsls	r3, r3, #3
 8012b72:	440b      	add	r3, r1
 8012b74:	3314      	adds	r3, #20
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	2b01      	cmp	r3, #1
 8012b7a:	d15c      	bne.n	8012c36 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012b84:	e01c      	b.n	8012bc0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012b86:	69fb      	ldr	r3, [r7, #28]
 8012b88:	895a      	ldrh	r2, [r3, #10]
 8012b8a:	69fb      	ldr	r3, [r7, #28]
 8012b8c:	891b      	ldrh	r3, [r3, #8]
 8012b8e:	429a      	cmp	r2, r3
 8012b90:	d10a      	bne.n	8012ba8 <etharp_query+0x1c0>
 8012b92:	69fb      	ldr	r3, [r7, #28]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d006      	beq.n	8012ba8 <etharp_query+0x1c0>
 8012b9a:	4b2a      	ldr	r3, [pc, #168]	; (8012c44 <etharp_query+0x25c>)
 8012b9c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012ba0:	492f      	ldr	r1, [pc, #188]	; (8012c60 <etharp_query+0x278>)
 8012ba2:	482a      	ldr	r0, [pc, #168]	; (8012c4c <etharp_query+0x264>)
 8012ba4:	f00e f8b2 	bl	8020d0c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012ba8:	69fb      	ldr	r3, [r7, #28]
 8012baa:	7b1b      	ldrb	r3, [r3, #12]
 8012bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d002      	beq.n	8012bba <etharp_query+0x1d2>
        copy_needed = 1;
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	61bb      	str	r3, [r7, #24]
        break;
 8012bb8:	e005      	b.n	8012bc6 <etharp_query+0x1de>
      }
      p = p->next;
 8012bba:	69fb      	ldr	r3, [r7, #28]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012bc0:	69fb      	ldr	r3, [r7, #28]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d1df      	bne.n	8012b86 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012bc6:	69bb      	ldr	r3, [r7, #24]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d007      	beq.n	8012bdc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012bcc:	687a      	ldr	r2, [r7, #4]
 8012bce:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012bd2:	200e      	movs	r0, #14
 8012bd4:	f003 fb0e 	bl	80161f4 <pbuf_clone>
 8012bd8:	61f8      	str	r0, [r7, #28]
 8012bda:	e004      	b.n	8012be6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012be0:	69f8      	ldr	r0, [r7, #28]
 8012be2:	f003 f921 	bl	8015e28 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012be6:	69fb      	ldr	r3, [r7, #28]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d021      	beq.n	8012c30 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012bec:	7c7a      	ldrb	r2, [r7, #17]
 8012bee:	4918      	ldr	r1, [pc, #96]	; (8012c50 <etharp_query+0x268>)
 8012bf0:	4613      	mov	r3, r2
 8012bf2:	005b      	lsls	r3, r3, #1
 8012bf4:	4413      	add	r3, r2
 8012bf6:	00db      	lsls	r3, r3, #3
 8012bf8:	440b      	add	r3, r1
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d00a      	beq.n	8012c16 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012c00:	7c7a      	ldrb	r2, [r7, #17]
 8012c02:	4913      	ldr	r1, [pc, #76]	; (8012c50 <etharp_query+0x268>)
 8012c04:	4613      	mov	r3, r2
 8012c06:	005b      	lsls	r3, r3, #1
 8012c08:	4413      	add	r3, r2
 8012c0a:	00db      	lsls	r3, r3, #3
 8012c0c:	440b      	add	r3, r1
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	4618      	mov	r0, r3
 8012c12:	f003 f869 	bl	8015ce8 <pbuf_free>
      }
      arp_table[i].q = p;
 8012c16:	7c7a      	ldrb	r2, [r7, #17]
 8012c18:	490d      	ldr	r1, [pc, #52]	; (8012c50 <etharp_query+0x268>)
 8012c1a:	4613      	mov	r3, r2
 8012c1c:	005b      	lsls	r3, r3, #1
 8012c1e:	4413      	add	r3, r2
 8012c20:	00db      	lsls	r3, r3, #3
 8012c22:	440b      	add	r3, r1
 8012c24:	69fa      	ldr	r2, [r7, #28]
 8012c26:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012c28:	2300      	movs	r3, #0
 8012c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012c2e:	e002      	b.n	8012c36 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012c30:	23ff      	movs	r3, #255	; 0xff
 8012c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012c36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3728      	adds	r7, #40	; 0x28
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}
 8012c42:	bf00      	nop
 8012c44:	08026060 	.word	0x08026060
 8012c48:	08026238 	.word	0x08026238
 8012c4c:	08026104 	.word	0x08026104
 8012c50:	24007698 	.word	0x24007698
 8012c54:	08026248 	.word	0x08026248
 8012c58:	0802622c 	.word	0x0802622c
 8012c5c:	24007788 	.word	0x24007788
 8012c60:	08026270 	.word	0x08026270

08012c64 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b08a      	sub	sp, #40	; 0x28
 8012c68:	af02      	add	r7, sp, #8
 8012c6a:	60f8      	str	r0, [r7, #12]
 8012c6c:	60b9      	str	r1, [r7, #8]
 8012c6e:	607a      	str	r2, [r7, #4]
 8012c70:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012c72:	2300      	movs	r3, #0
 8012c74:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d106      	bne.n	8012c8a <etharp_raw+0x26>
 8012c7c:	4b3a      	ldr	r3, [pc, #232]	; (8012d68 <etharp_raw+0x104>)
 8012c7e:	f240 4257 	movw	r2, #1111	; 0x457
 8012c82:	493a      	ldr	r1, [pc, #232]	; (8012d6c <etharp_raw+0x108>)
 8012c84:	483a      	ldr	r0, [pc, #232]	; (8012d70 <etharp_raw+0x10c>)
 8012c86:	f00e f841 	bl	8020d0c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012c8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c8e:	211c      	movs	r1, #28
 8012c90:	200e      	movs	r0, #14
 8012c92:	f002 fd45 	bl	8015720 <pbuf_alloc>
 8012c96:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012c98:	69bb      	ldr	r3, [r7, #24]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d102      	bne.n	8012ca4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ca2:	e05d      	b.n	8012d60 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012ca4:	69bb      	ldr	r3, [r7, #24]
 8012ca6:	895b      	ldrh	r3, [r3, #10]
 8012ca8:	2b1b      	cmp	r3, #27
 8012caa:	d806      	bhi.n	8012cba <etharp_raw+0x56>
 8012cac:	4b2e      	ldr	r3, [pc, #184]	; (8012d68 <etharp_raw+0x104>)
 8012cae:	f240 4262 	movw	r2, #1122	; 0x462
 8012cb2:	4930      	ldr	r1, [pc, #192]	; (8012d74 <etharp_raw+0x110>)
 8012cb4:	482e      	ldr	r0, [pc, #184]	; (8012d70 <etharp_raw+0x10c>)
 8012cb6:	f00e f829 	bl	8020d0c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012cba:	69bb      	ldr	r3, [r7, #24]
 8012cbc:	685b      	ldr	r3, [r3, #4]
 8012cbe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012cc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7ff f914 	bl	8011ef0 <lwip_htons>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	461a      	mov	r2, r3
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012cd6:	2b06      	cmp	r3, #6
 8012cd8:	d006      	beq.n	8012ce8 <etharp_raw+0x84>
 8012cda:	4b23      	ldr	r3, [pc, #140]	; (8012d68 <etharp_raw+0x104>)
 8012cdc:	f240 4269 	movw	r2, #1129	; 0x469
 8012ce0:	4925      	ldr	r1, [pc, #148]	; (8012d78 <etharp_raw+0x114>)
 8012ce2:	4823      	ldr	r0, [pc, #140]	; (8012d70 <etharp_raw+0x10c>)
 8012ce4:	f00e f812 	bl	8020d0c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	3308      	adds	r3, #8
 8012cec:	2206      	movs	r2, #6
 8012cee:	6839      	ldr	r1, [r7, #0]
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f00d f8e9 	bl	801fec8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	3312      	adds	r3, #18
 8012cfa:	2206      	movs	r2, #6
 8012cfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f00d f8e2 	bl	801fec8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012d04:	697b      	ldr	r3, [r7, #20]
 8012d06:	330e      	adds	r3, #14
 8012d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d0a:	6812      	ldr	r2, [r2, #0]
 8012d0c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	3318      	adds	r3, #24
 8012d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d14:	6812      	ldr	r2, [r2, #0]
 8012d16:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012d18:	697b      	ldr	r3, [r7, #20]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	701a      	strb	r2, [r3, #0]
 8012d1e:	2200      	movs	r2, #0
 8012d20:	f042 0201 	orr.w	r2, r2, #1
 8012d24:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012d26:	697b      	ldr	r3, [r7, #20]
 8012d28:	2200      	movs	r2, #0
 8012d2a:	f042 0208 	orr.w	r2, r2, #8
 8012d2e:	709a      	strb	r2, [r3, #2]
 8012d30:	2200      	movs	r2, #0
 8012d32:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	2206      	movs	r2, #6
 8012d38:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012d3a:	697b      	ldr	r3, [r7, #20]
 8012d3c:	2204      	movs	r2, #4
 8012d3e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012d40:	f640 0306 	movw	r3, #2054	; 0x806
 8012d44:	9300      	str	r3, [sp, #0]
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	68ba      	ldr	r2, [r7, #8]
 8012d4a:	69b9      	ldr	r1, [r7, #24]
 8012d4c:	68f8      	ldr	r0, [r7, #12]
 8012d4e:	f000 f8d7 	bl	8012f00 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012d52:	69b8      	ldr	r0, [r7, #24]
 8012d54:	f002 ffc8 	bl	8015ce8 <pbuf_free>
  p = NULL;
 8012d58:	2300      	movs	r3, #0
 8012d5a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012d5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012d60:	4618      	mov	r0, r3
 8012d62:	3720      	adds	r7, #32
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}
 8012d68:	08026060 	.word	0x08026060
 8012d6c:	080261dc 	.word	0x080261dc
 8012d70:	08026104 	.word	0x08026104
 8012d74:	0802628c 	.word	0x0802628c
 8012d78:	080262c0 	.word	0x080262c0

08012d7c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b088      	sub	sp, #32
 8012d80:	af04      	add	r7, sp, #16
 8012d82:	60f8      	str	r0, [r7, #12]
 8012d84:	60b9      	str	r1, [r7, #8]
 8012d86:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012d98:	2201      	movs	r2, #1
 8012d9a:	9203      	str	r2, [sp, #12]
 8012d9c:	68ba      	ldr	r2, [r7, #8]
 8012d9e:	9202      	str	r2, [sp, #8]
 8012da0:	4a06      	ldr	r2, [pc, #24]	; (8012dbc <etharp_request_dst+0x40>)
 8012da2:	9201      	str	r2, [sp, #4]
 8012da4:	9300      	str	r3, [sp, #0]
 8012da6:	4603      	mov	r3, r0
 8012da8:	687a      	ldr	r2, [r7, #4]
 8012daa:	68f8      	ldr	r0, [r7, #12]
 8012dac:	f7ff ff5a 	bl	8012c64 <etharp_raw>
 8012db0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	3710      	adds	r7, #16
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
 8012dba:	bf00      	nop
 8012dbc:	08029310 	.word	0x08029310

08012dc0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012dca:	4a05      	ldr	r2, [pc, #20]	; (8012de0 <etharp_request+0x20>)
 8012dcc:	6839      	ldr	r1, [r7, #0]
 8012dce:	6878      	ldr	r0, [r7, #4]
 8012dd0:	f7ff ffd4 	bl	8012d7c <etharp_request_dst>
 8012dd4:	4603      	mov	r3, r0
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3708      	adds	r7, #8
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}
 8012dde:	bf00      	nop
 8012de0:	08029308 	.word	0x08029308

08012de4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b086      	sub	sp, #24
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012dee:	230e      	movs	r3, #14
 8012df0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	895b      	ldrh	r3, [r3, #10]
 8012df6:	2b0e      	cmp	r3, #14
 8012df8:	d96e      	bls.n	8012ed8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	7bdb      	ldrb	r3, [r3, #15]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d106      	bne.n	8012e10 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012e08:	3301      	adds	r3, #1
 8012e0a:	b2da      	uxtb	r2, r3
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	685b      	ldr	r3, [r3, #4]
 8012e14:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012e16:	693b      	ldr	r3, [r7, #16]
 8012e18:	7b1a      	ldrb	r2, [r3, #12]
 8012e1a:	7b5b      	ldrb	r3, [r3, #13]
 8012e1c:	021b      	lsls	r3, r3, #8
 8012e1e:	4313      	orrs	r3, r2
 8012e20:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	781b      	ldrb	r3, [r3, #0]
 8012e26:	f003 0301 	and.w	r3, r3, #1
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d023      	beq.n	8012e76 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	781b      	ldrb	r3, [r3, #0]
 8012e32:	2b01      	cmp	r3, #1
 8012e34:	d10f      	bne.n	8012e56 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	785b      	ldrb	r3, [r3, #1]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d11b      	bne.n	8012e76 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012e42:	2b5e      	cmp	r3, #94	; 0x5e
 8012e44:	d117      	bne.n	8012e76 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	7b5b      	ldrb	r3, [r3, #13]
 8012e4a:	f043 0310 	orr.w	r3, r3, #16
 8012e4e:	b2da      	uxtb	r2, r3
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	735a      	strb	r2, [r3, #13]
 8012e54:	e00f      	b.n	8012e76 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012e56:	693b      	ldr	r3, [r7, #16]
 8012e58:	2206      	movs	r2, #6
 8012e5a:	4928      	ldr	r1, [pc, #160]	; (8012efc <ethernet_input+0x118>)
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f00d f825 	bl	801feac <memcmp>
 8012e62:	4603      	mov	r3, r0
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d106      	bne.n	8012e76 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	7b5b      	ldrb	r3, [r3, #13]
 8012e6c:	f043 0308 	orr.w	r3, r3, #8
 8012e70:	b2da      	uxtb	r2, r3
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012e76:	89fb      	ldrh	r3, [r7, #14]
 8012e78:	2b08      	cmp	r3, #8
 8012e7a:	d003      	beq.n	8012e84 <ethernet_input+0xa0>
 8012e7c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012e80:	d014      	beq.n	8012eac <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012e82:	e032      	b.n	8012eea <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e8a:	f003 0308 	and.w	r3, r3, #8
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d024      	beq.n	8012edc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012e92:	8afb      	ldrh	r3, [r7, #22]
 8012e94:	4619      	mov	r1, r3
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f002 fea0 	bl	8015bdc <pbuf_remove_header>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d11e      	bne.n	8012ee0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012ea2:	6839      	ldr	r1, [r7, #0]
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f000 fb93 	bl	80135d0 <ip4_input>
      break;
 8012eaa:	e013      	b.n	8012ed4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012eb2:	f003 0308 	and.w	r3, r3, #8
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d014      	beq.n	8012ee4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012eba:	8afb      	ldrh	r3, [r7, #22]
 8012ebc:	4619      	mov	r1, r3
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f002 fe8c 	bl	8015bdc <pbuf_remove_header>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d10e      	bne.n	8012ee8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012eca:	6839      	ldr	r1, [r7, #0]
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f7ff fb65 	bl	801259c <etharp_input>
      break;
 8012ed2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	e00c      	b.n	8012ef2 <ethernet_input+0x10e>
    goto free_and_return;
 8012ed8:	bf00      	nop
 8012eda:	e006      	b.n	8012eea <ethernet_input+0x106>
        goto free_and_return;
 8012edc:	bf00      	nop
 8012ede:	e004      	b.n	8012eea <ethernet_input+0x106>
        goto free_and_return;
 8012ee0:	bf00      	nop
 8012ee2:	e002      	b.n	8012eea <ethernet_input+0x106>
        goto free_and_return;
 8012ee4:	bf00      	nop
 8012ee6:	e000      	b.n	8012eea <ethernet_input+0x106>
        goto free_and_return;
 8012ee8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f002 fefc 	bl	8015ce8 <pbuf_free>
  return ERR_OK;
 8012ef0:	2300      	movs	r3, #0
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3718      	adds	r7, #24
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}
 8012efa:	bf00      	nop
 8012efc:	08029308 	.word	0x08029308

08012f00 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b086      	sub	sp, #24
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	60f8      	str	r0, [r7, #12]
 8012f08:	60b9      	str	r1, [r7, #8]
 8012f0a:	607a      	str	r2, [r7, #4]
 8012f0c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012f0e:	8c3b      	ldrh	r3, [r7, #32]
 8012f10:	4618      	mov	r0, r3
 8012f12:	f7fe ffed 	bl	8011ef0 <lwip_htons>
 8012f16:	4603      	mov	r3, r0
 8012f18:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012f1a:	210e      	movs	r1, #14
 8012f1c:	68b8      	ldr	r0, [r7, #8]
 8012f1e:	f002 fe4d 	bl	8015bbc <pbuf_add_header>
 8012f22:	4603      	mov	r3, r0
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d125      	bne.n	8012f74 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	8afa      	ldrh	r2, [r7, #22]
 8012f32:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012f34:	693b      	ldr	r3, [r7, #16]
 8012f36:	2206      	movs	r2, #6
 8012f38:	6839      	ldr	r1, [r7, #0]
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f00c ffc4 	bl	801fec8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	3306      	adds	r3, #6
 8012f44:	2206      	movs	r2, #6
 8012f46:	6879      	ldr	r1, [r7, #4]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f00c ffbd 	bl	801fec8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012f54:	2b06      	cmp	r3, #6
 8012f56:	d006      	beq.n	8012f66 <ethernet_output+0x66>
 8012f58:	4b0a      	ldr	r3, [pc, #40]	; (8012f84 <ethernet_output+0x84>)
 8012f5a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012f5e:	490a      	ldr	r1, [pc, #40]	; (8012f88 <ethernet_output+0x88>)
 8012f60:	480a      	ldr	r0, [pc, #40]	; (8012f8c <ethernet_output+0x8c>)
 8012f62:	f00d fed3 	bl	8020d0c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	699b      	ldr	r3, [r3, #24]
 8012f6a:	68b9      	ldr	r1, [r7, #8]
 8012f6c:	68f8      	ldr	r0, [r7, #12]
 8012f6e:	4798      	blx	r3
 8012f70:	4603      	mov	r3, r0
 8012f72:	e002      	b.n	8012f7a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012f74:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012f76:	f06f 0301 	mvn.w	r3, #1
}
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	3718      	adds	r7, #24
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}
 8012f82:	bf00      	nop
 8012f84:	08026304 	.word	0x08026304
 8012f88:	08026364 	.word	0x08026364
 8012f8c:	08026398 	.word	0x08026398

08012f90 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b08e      	sub	sp, #56	; 0x38
 8012f94:	af04      	add	r7, sp, #16
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012f9a:	4b87      	ldr	r3, [pc, #540]	; (80131b8 <icmp_input+0x228>)
 8012f9c:	689b      	ldr	r3, [r3, #8]
 8012f9e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa2:	781b      	ldrb	r3, [r3, #0]
 8012fa4:	f003 030f 	and.w	r3, r3, #15
 8012fa8:	b2db      	uxtb	r3, r3
 8012faa:	009b      	lsls	r3, r3, #2
 8012fac:	b2db      	uxtb	r3, r3
 8012fae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012fb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012fb2:	2b13      	cmp	r3, #19
 8012fb4:	f240 80e8 	bls.w	8013188 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	895b      	ldrh	r3, [r3, #10]
 8012fbc:	2b03      	cmp	r3, #3
 8012fbe:	f240 80e5 	bls.w	801318c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	685b      	ldr	r3, [r3, #4]
 8012fc6:	781b      	ldrb	r3, [r3, #0]
 8012fc8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012fcc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	f000 80d2 	beq.w	801317a <icmp_input+0x1ea>
 8012fd6:	2b08      	cmp	r3, #8
 8012fd8:	f040 80d2 	bne.w	8013180 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012fdc:	4b77      	ldr	r3, [pc, #476]	; (80131bc <icmp_input+0x22c>)
 8012fde:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012fe0:	4b75      	ldr	r3, [pc, #468]	; (80131b8 <icmp_input+0x228>)
 8012fe2:	695b      	ldr	r3, [r3, #20]
 8012fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012fe8:	2be0      	cmp	r3, #224	; 0xe0
 8012fea:	f000 80d6 	beq.w	801319a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012fee:	4b72      	ldr	r3, [pc, #456]	; (80131b8 <icmp_input+0x228>)
 8012ff0:	695b      	ldr	r3, [r3, #20]
 8012ff2:	4a71      	ldr	r2, [pc, #452]	; (80131b8 <icmp_input+0x228>)
 8012ff4:	6812      	ldr	r2, [r2, #0]
 8012ff6:	4611      	mov	r1, r2
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f000 fce5 	bl	80139c8 <ip4_addr_isbroadcast_u32>
 8012ffe:	4603      	mov	r3, r0
 8013000:	2b00      	cmp	r3, #0
 8013002:	f040 80cc 	bne.w	801319e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	891b      	ldrh	r3, [r3, #8]
 801300a:	2b07      	cmp	r3, #7
 801300c:	f240 80c0 	bls.w	8013190 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	f000 f9e0 	bl	80133d6 <inet_chksum_pbuf>
 8013016:	4603      	mov	r3, r0
 8013018:	2b00      	cmp	r3, #0
 801301a:	d003      	beq.n	8013024 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f002 fe63 	bl	8015ce8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8013022:	e0c5      	b.n	80131b0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013024:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013026:	330e      	adds	r3, #14
 8013028:	4619      	mov	r1, r3
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f002 fdc6 	bl	8015bbc <pbuf_add_header>
 8013030:	4603      	mov	r3, r0
 8013032:	2b00      	cmp	r3, #0
 8013034:	d04b      	beq.n	80130ce <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	891a      	ldrh	r2, [r3, #8]
 801303a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801303c:	4413      	add	r3, r2
 801303e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	891b      	ldrh	r3, [r3, #8]
 8013044:	8b7a      	ldrh	r2, [r7, #26]
 8013046:	429a      	cmp	r2, r3
 8013048:	f0c0 80ab 	bcc.w	80131a2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801304c:	8b7b      	ldrh	r3, [r7, #26]
 801304e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013052:	4619      	mov	r1, r3
 8013054:	200e      	movs	r0, #14
 8013056:	f002 fb63 	bl	8015720 <pbuf_alloc>
 801305a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	2b00      	cmp	r3, #0
 8013060:	f000 80a1 	beq.w	80131a6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	895b      	ldrh	r3, [r3, #10]
 8013068:	461a      	mov	r2, r3
 801306a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801306c:	3308      	adds	r3, #8
 801306e:	429a      	cmp	r2, r3
 8013070:	d203      	bcs.n	801307a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013072:	6978      	ldr	r0, [r7, #20]
 8013074:	f002 fe38 	bl	8015ce8 <pbuf_free>
          goto icmperr;
 8013078:	e096      	b.n	80131a8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	685b      	ldr	r3, [r3, #4]
 801307e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013082:	4618      	mov	r0, r3
 8013084:	f00c ff20 	bl	801fec8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013088:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801308a:	4619      	mov	r1, r3
 801308c:	6978      	ldr	r0, [r7, #20]
 801308e:	f002 fda5 	bl	8015bdc <pbuf_remove_header>
 8013092:	4603      	mov	r3, r0
 8013094:	2b00      	cmp	r3, #0
 8013096:	d009      	beq.n	80130ac <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013098:	4b49      	ldr	r3, [pc, #292]	; (80131c0 <icmp_input+0x230>)
 801309a:	22b6      	movs	r2, #182	; 0xb6
 801309c:	4949      	ldr	r1, [pc, #292]	; (80131c4 <icmp_input+0x234>)
 801309e:	484a      	ldr	r0, [pc, #296]	; (80131c8 <icmp_input+0x238>)
 80130a0:	f00d fe34 	bl	8020d0c <iprintf>
          pbuf_free(r);
 80130a4:	6978      	ldr	r0, [r7, #20]
 80130a6:	f002 fe1f 	bl	8015ce8 <pbuf_free>
          goto icmperr;
 80130aa:	e07d      	b.n	80131a8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80130ac:	6879      	ldr	r1, [r7, #4]
 80130ae:	6978      	ldr	r0, [r7, #20]
 80130b0:	f002 ff32 	bl	8015f18 <pbuf_copy>
 80130b4:	4603      	mov	r3, r0
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d003      	beq.n	80130c2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80130ba:	6978      	ldr	r0, [r7, #20]
 80130bc:	f002 fe14 	bl	8015ce8 <pbuf_free>
          goto icmperr;
 80130c0:	e072      	b.n	80131a8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f002 fe10 	bl	8015ce8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	607b      	str	r3, [r7, #4]
 80130cc:	e00f      	b.n	80130ee <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80130ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80130d0:	330e      	adds	r3, #14
 80130d2:	4619      	mov	r1, r3
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f002 fd81 	bl	8015bdc <pbuf_remove_header>
 80130da:	4603      	mov	r3, r0
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d006      	beq.n	80130ee <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80130e0:	4b37      	ldr	r3, [pc, #220]	; (80131c0 <icmp_input+0x230>)
 80130e2:	22c7      	movs	r2, #199	; 0xc7
 80130e4:	4939      	ldr	r1, [pc, #228]	; (80131cc <icmp_input+0x23c>)
 80130e6:	4838      	ldr	r0, [pc, #224]	; (80131c8 <icmp_input+0x238>)
 80130e8:	f00d fe10 	bl	8020d0c <iprintf>
          goto icmperr;
 80130ec:	e05c      	b.n	80131a8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	685b      	ldr	r3, [r3, #4]
 80130f2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80130f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80130f6:	4619      	mov	r1, r3
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f002 fd5f 	bl	8015bbc <pbuf_add_header>
 80130fe:	4603      	mov	r3, r0
 8013100:	2b00      	cmp	r3, #0
 8013102:	d13c      	bne.n	801317e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801310a:	69fb      	ldr	r3, [r7, #28]
 801310c:	681a      	ldr	r2, [r3, #0]
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013112:	4b29      	ldr	r3, [pc, #164]	; (80131b8 <icmp_input+0x228>)
 8013114:	691a      	ldr	r2, [r3, #16]
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	2200      	movs	r2, #0
 801311e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8013120:	693b      	ldr	r3, [r7, #16]
 8013122:	885b      	ldrh	r3, [r3, #2]
 8013124:	b29b      	uxth	r3, r3
 8013126:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801312a:	4293      	cmp	r3, r2
 801312c:	d907      	bls.n	801313e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	885b      	ldrh	r3, [r3, #2]
 8013132:	b29b      	uxth	r3, r3
 8013134:	3309      	adds	r3, #9
 8013136:	b29a      	uxth	r2, r3
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	805a      	strh	r2, [r3, #2]
 801313c:	e006      	b.n	801314c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801313e:	693b      	ldr	r3, [r7, #16]
 8013140:	885b      	ldrh	r3, [r3, #2]
 8013142:	b29b      	uxth	r3, r3
 8013144:	3308      	adds	r3, #8
 8013146:	b29a      	uxth	r2, r3
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	22ff      	movs	r2, #255	; 0xff
 8013150:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	2200      	movs	r2, #0
 8013156:	729a      	strb	r2, [r3, #10]
 8013158:	2200      	movs	r2, #0
 801315a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	9302      	str	r3, [sp, #8]
 8013160:	2301      	movs	r3, #1
 8013162:	9301      	str	r3, [sp, #4]
 8013164:	2300      	movs	r3, #0
 8013166:	9300      	str	r3, [sp, #0]
 8013168:	23ff      	movs	r3, #255	; 0xff
 801316a:	2200      	movs	r2, #0
 801316c:	69f9      	ldr	r1, [r7, #28]
 801316e:	6878      	ldr	r0, [r7, #4]
 8013170:	f000 fb52 	bl	8013818 <ip4_output_if>
 8013174:	4603      	mov	r3, r0
 8013176:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013178:	e001      	b.n	801317e <icmp_input+0x1ee>
      break;
 801317a:	bf00      	nop
 801317c:	e000      	b.n	8013180 <icmp_input+0x1f0>
      break;
 801317e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013180:	6878      	ldr	r0, [r7, #4]
 8013182:	f002 fdb1 	bl	8015ce8 <pbuf_free>
  return;
 8013186:	e013      	b.n	80131b0 <icmp_input+0x220>
    goto lenerr;
 8013188:	bf00      	nop
 801318a:	e002      	b.n	8013192 <icmp_input+0x202>
    goto lenerr;
 801318c:	bf00      	nop
 801318e:	e000      	b.n	8013192 <icmp_input+0x202>
        goto lenerr;
 8013190:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013192:	6878      	ldr	r0, [r7, #4]
 8013194:	f002 fda8 	bl	8015ce8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013198:	e00a      	b.n	80131b0 <icmp_input+0x220>
        goto icmperr;
 801319a:	bf00      	nop
 801319c:	e004      	b.n	80131a8 <icmp_input+0x218>
        goto icmperr;
 801319e:	bf00      	nop
 80131a0:	e002      	b.n	80131a8 <icmp_input+0x218>
          goto icmperr;
 80131a2:	bf00      	nop
 80131a4:	e000      	b.n	80131a8 <icmp_input+0x218>
          goto icmperr;
 80131a6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f002 fd9d 	bl	8015ce8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80131ae:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80131b0:	3728      	adds	r7, #40	; 0x28
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	24007f68 	.word	0x24007f68
 80131bc:	24007f7c 	.word	0x24007f7c
 80131c0:	080263c0 	.word	0x080263c0
 80131c4:	08026420 	.word	0x08026420
 80131c8:	08026458 	.word	0x08026458
 80131cc:	08026480 	.word	0x08026480

080131d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b082      	sub	sp, #8
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
 80131d8:	460b      	mov	r3, r1
 80131da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80131dc:	78fb      	ldrb	r3, [r7, #3]
 80131de:	461a      	mov	r2, r3
 80131e0:	2103      	movs	r1, #3
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f000 f814 	bl	8013210 <icmp_send_response>
}
 80131e8:	bf00      	nop
 80131ea:	3708      	adds	r7, #8
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}

080131f0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
 80131f8:	460b      	mov	r3, r1
 80131fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80131fc:	78fb      	ldrb	r3, [r7, #3]
 80131fe:	461a      	mov	r2, r3
 8013200:	210b      	movs	r1, #11
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f000 f804 	bl	8013210 <icmp_send_response>
}
 8013208:	bf00      	nop
 801320a:	3708      	adds	r7, #8
 801320c:	46bd      	mov	sp, r7
 801320e:	bd80      	pop	{r7, pc}

08013210 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b08c      	sub	sp, #48	; 0x30
 8013214:	af04      	add	r7, sp, #16
 8013216:	6078      	str	r0, [r7, #4]
 8013218:	460b      	mov	r3, r1
 801321a:	70fb      	strb	r3, [r7, #3]
 801321c:	4613      	mov	r3, r2
 801321e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013220:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013224:	2124      	movs	r1, #36	; 0x24
 8013226:	2022      	movs	r0, #34	; 0x22
 8013228:	f002 fa7a 	bl	8015720 <pbuf_alloc>
 801322c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801322e:	69fb      	ldr	r3, [r7, #28]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d056      	beq.n	80132e2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013234:	69fb      	ldr	r3, [r7, #28]
 8013236:	895b      	ldrh	r3, [r3, #10]
 8013238:	2b23      	cmp	r3, #35	; 0x23
 801323a:	d806      	bhi.n	801324a <icmp_send_response+0x3a>
 801323c:	4b2b      	ldr	r3, [pc, #172]	; (80132ec <icmp_send_response+0xdc>)
 801323e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013242:	492b      	ldr	r1, [pc, #172]	; (80132f0 <icmp_send_response+0xe0>)
 8013244:	482b      	ldr	r0, [pc, #172]	; (80132f4 <icmp_send_response+0xe4>)
 8013246:	f00d fd61 	bl	8020d0c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013250:	69fb      	ldr	r3, [r7, #28]
 8013252:	685b      	ldr	r3, [r3, #4]
 8013254:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013256:	697b      	ldr	r3, [r7, #20]
 8013258:	78fa      	ldrb	r2, [r7, #3]
 801325a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	78ba      	ldrb	r2, [r7, #2]
 8013260:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013262:	697b      	ldr	r3, [r7, #20]
 8013264:	2200      	movs	r2, #0
 8013266:	711a      	strb	r2, [r3, #4]
 8013268:	2200      	movs	r2, #0
 801326a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801326c:	697b      	ldr	r3, [r7, #20]
 801326e:	2200      	movs	r2, #0
 8013270:	719a      	strb	r2, [r3, #6]
 8013272:	2200      	movs	r2, #0
 8013274:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013276:	69fb      	ldr	r3, [r7, #28]
 8013278:	685b      	ldr	r3, [r3, #4]
 801327a:	f103 0008 	add.w	r0, r3, #8
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	685b      	ldr	r3, [r3, #4]
 8013282:	221c      	movs	r2, #28
 8013284:	4619      	mov	r1, r3
 8013286:	f00c fe1f 	bl	801fec8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801328a:	69bb      	ldr	r3, [r7, #24]
 801328c:	68db      	ldr	r3, [r3, #12]
 801328e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013290:	f107 030c 	add.w	r3, r7, #12
 8013294:	4618      	mov	r0, r3
 8013296:	f000 f901 	bl	801349c <ip4_route>
 801329a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d01b      	beq.n	80132da <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80132a2:	697b      	ldr	r3, [r7, #20]
 80132a4:	2200      	movs	r2, #0
 80132a6:	709a      	strb	r2, [r3, #2]
 80132a8:	2200      	movs	r2, #0
 80132aa:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80132ac:	69fb      	ldr	r3, [r7, #28]
 80132ae:	895b      	ldrh	r3, [r3, #10]
 80132b0:	4619      	mov	r1, r3
 80132b2:	6978      	ldr	r0, [r7, #20]
 80132b4:	f000 f87d 	bl	80133b2 <inet_chksum>
 80132b8:	4603      	mov	r3, r0
 80132ba:	461a      	mov	r2, r3
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80132c0:	f107 020c 	add.w	r2, r7, #12
 80132c4:	693b      	ldr	r3, [r7, #16]
 80132c6:	9302      	str	r3, [sp, #8]
 80132c8:	2301      	movs	r3, #1
 80132ca:	9301      	str	r3, [sp, #4]
 80132cc:	2300      	movs	r3, #0
 80132ce:	9300      	str	r3, [sp, #0]
 80132d0:	23ff      	movs	r3, #255	; 0xff
 80132d2:	2100      	movs	r1, #0
 80132d4:	69f8      	ldr	r0, [r7, #28]
 80132d6:	f000 fa9f 	bl	8013818 <ip4_output_if>
  }
  pbuf_free(q);
 80132da:	69f8      	ldr	r0, [r7, #28]
 80132dc:	f002 fd04 	bl	8015ce8 <pbuf_free>
 80132e0:	e000      	b.n	80132e4 <icmp_send_response+0xd4>
    return;
 80132e2:	bf00      	nop
}
 80132e4:	3720      	adds	r7, #32
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}
 80132ea:	bf00      	nop
 80132ec:	080263c0 	.word	0x080263c0
 80132f0:	080264b4 	.word	0x080264b4
 80132f4:	08026458 	.word	0x08026458

080132f8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80132f8:	b480      	push	{r7}
 80132fa:	b089      	sub	sp, #36	; 0x24
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
 8013300:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8013306:	2300      	movs	r3, #0
 8013308:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801330a:	2300      	movs	r3, #0
 801330c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 801330e:	69fb      	ldr	r3, [r7, #28]
 8013310:	f003 0301 	and.w	r3, r3, #1
 8013314:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d00d      	beq.n	8013338 <lwip_standard_chksum+0x40>
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	2b00      	cmp	r3, #0
 8013320:	dd0a      	ble.n	8013338 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8013322:	69fa      	ldr	r2, [r7, #28]
 8013324:	1c53      	adds	r3, r2, #1
 8013326:	61fb      	str	r3, [r7, #28]
 8013328:	f107 030e 	add.w	r3, r7, #14
 801332c:	3301      	adds	r3, #1
 801332e:	7812      	ldrb	r2, [r2, #0]
 8013330:	701a      	strb	r2, [r3, #0]
    len--;
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	3b01      	subs	r3, #1
 8013336:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8013338:	69fb      	ldr	r3, [r7, #28]
 801333a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 801333c:	e00a      	b.n	8013354 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 801333e:	69bb      	ldr	r3, [r7, #24]
 8013340:	1c9a      	adds	r2, r3, #2
 8013342:	61ba      	str	r2, [r7, #24]
 8013344:	881b      	ldrh	r3, [r3, #0]
 8013346:	461a      	mov	r2, r3
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	4413      	add	r3, r2
 801334c:	617b      	str	r3, [r7, #20]
    len -= 2;
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	3b02      	subs	r3, #2
 8013352:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	2b01      	cmp	r3, #1
 8013358:	dcf1      	bgt.n	801333e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	2b00      	cmp	r3, #0
 801335e:	dd04      	ble.n	801336a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8013360:	f107 030e 	add.w	r3, r7, #14
 8013364:	69ba      	ldr	r2, [r7, #24]
 8013366:	7812      	ldrb	r2, [r2, #0]
 8013368:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801336a:	89fb      	ldrh	r3, [r7, #14]
 801336c:	461a      	mov	r2, r3
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	4413      	add	r3, r2
 8013372:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	0c1a      	lsrs	r2, r3, #16
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	b29b      	uxth	r3, r3
 801337c:	4413      	add	r3, r2
 801337e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	0c1a      	lsrs	r2, r3, #16
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	b29b      	uxth	r3, r3
 8013388:	4413      	add	r3, r2
 801338a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 801338c:	693b      	ldr	r3, [r7, #16]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d007      	beq.n	80133a2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8013392:	697b      	ldr	r3, [r7, #20]
 8013394:	021b      	lsls	r3, r3, #8
 8013396:	b29a      	uxth	r2, r3
 8013398:	697b      	ldr	r3, [r7, #20]
 801339a:	0a1b      	lsrs	r3, r3, #8
 801339c:	b2db      	uxtb	r3, r3
 801339e:	4313      	orrs	r3, r2
 80133a0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	b29b      	uxth	r3, r3
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	3724      	adds	r7, #36	; 0x24
 80133aa:	46bd      	mov	sp, r7
 80133ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b0:	4770      	bx	lr

080133b2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80133b2:	b580      	push	{r7, lr}
 80133b4:	b082      	sub	sp, #8
 80133b6:	af00      	add	r7, sp, #0
 80133b8:	6078      	str	r0, [r7, #4]
 80133ba:	460b      	mov	r3, r1
 80133bc:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80133be:	887b      	ldrh	r3, [r7, #2]
 80133c0:	4619      	mov	r1, r3
 80133c2:	6878      	ldr	r0, [r7, #4]
 80133c4:	f7ff ff98 	bl	80132f8 <lwip_standard_chksum>
 80133c8:	4603      	mov	r3, r0
 80133ca:	43db      	mvns	r3, r3
 80133cc:	b29b      	uxth	r3, r3
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	3708      	adds	r7, #8
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}

080133d6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80133d6:	b580      	push	{r7, lr}
 80133d8:	b086      	sub	sp, #24
 80133da:	af00      	add	r7, sp, #0
 80133dc:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80133de:	2300      	movs	r3, #0
 80133e0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80133e2:	2300      	movs	r3, #0
 80133e4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	613b      	str	r3, [r7, #16]
 80133ea:	e02b      	b.n	8013444 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	685a      	ldr	r2, [r3, #4]
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	895b      	ldrh	r3, [r3, #10]
 80133f4:	4619      	mov	r1, r3
 80133f6:	4610      	mov	r0, r2
 80133f8:	f7ff ff7e 	bl	80132f8 <lwip_standard_chksum>
 80133fc:	4603      	mov	r3, r0
 80133fe:	461a      	mov	r2, r3
 8013400:	697b      	ldr	r3, [r7, #20]
 8013402:	4413      	add	r3, r2
 8013404:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	0c1a      	lsrs	r2, r3, #16
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	b29b      	uxth	r3, r3
 801340e:	4413      	add	r3, r2
 8013410:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	895b      	ldrh	r3, [r3, #10]
 8013416:	f003 0301 	and.w	r3, r3, #1
 801341a:	b29b      	uxth	r3, r3
 801341c:	2b00      	cmp	r3, #0
 801341e:	d00e      	beq.n	801343e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	2b00      	cmp	r3, #0
 8013424:	bf0c      	ite	eq
 8013426:	2301      	moveq	r3, #1
 8013428:	2300      	movne	r3, #0
 801342a:	b2db      	uxtb	r3, r3
 801342c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	021b      	lsls	r3, r3, #8
 8013432:	b29a      	uxth	r2, r3
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	0a1b      	lsrs	r3, r3, #8
 8013438:	b2db      	uxtb	r3, r3
 801343a:	4313      	orrs	r3, r2
 801343c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	613b      	str	r3, [r7, #16]
 8013444:	693b      	ldr	r3, [r7, #16]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d1d0      	bne.n	80133ec <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d007      	beq.n	8013460 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	021b      	lsls	r3, r3, #8
 8013454:	b29a      	uxth	r2, r3
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	0a1b      	lsrs	r3, r3, #8
 801345a:	b2db      	uxtb	r3, r3
 801345c:	4313      	orrs	r3, r2
 801345e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8013460:	697b      	ldr	r3, [r7, #20]
 8013462:	b29b      	uxth	r3, r3
 8013464:	43db      	mvns	r3, r3
 8013466:	b29b      	uxth	r3, r3
}
 8013468:	4618      	mov	r0, r3
 801346a:	3718      	adds	r7, #24
 801346c:	46bd      	mov	sp, r7
 801346e:	bd80      	pop	{r7, pc}

08013470 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b082      	sub	sp, #8
 8013474:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8013476:	2300      	movs	r3, #0
 8013478:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 801347a:	f001 f9e5 	bl	8014848 <mem_init>
  memp_init();
 801347e:	f001 fce7 	bl	8014e50 <memp_init>
  pbuf_init();
  netif_init();
 8013482:	f001 fde5 	bl	8015050 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013486:	f009 fa0f 	bl	801c8a8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801348a:	f002 ff73 	bl	8016374 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801348e:	f009 f981 	bl	801c794 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8013492:	bf00      	nop
 8013494:	3708      	adds	r7, #8
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}
	...

0801349c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801349c:	b480      	push	{r7}
 801349e:	b085      	sub	sp, #20
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80134a4:	4b33      	ldr	r3, [pc, #204]	; (8013574 <ip4_route+0xd8>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	60fb      	str	r3, [r7, #12]
 80134aa:	e036      	b.n	801351a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80134b2:	f003 0301 	and.w	r3, r3, #1
 80134b6:	b2db      	uxtb	r3, r3
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d02b      	beq.n	8013514 <ip4_route+0x78>
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80134c2:	089b      	lsrs	r3, r3, #2
 80134c4:	f003 0301 	and.w	r3, r3, #1
 80134c8:	b2db      	uxtb	r3, r3
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d022      	beq.n	8013514 <ip4_route+0x78>
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	3304      	adds	r3, #4
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d01d      	beq.n	8013514 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	681a      	ldr	r2, [r3, #0]
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	3304      	adds	r3, #4
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	405a      	eors	r2, r3
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	3308      	adds	r3, #8
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	4013      	ands	r3, r2
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d101      	bne.n	80134f4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	e038      	b.n	8013566 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80134fa:	f003 0302 	and.w	r3, r3, #2
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d108      	bne.n	8013514 <ip4_route+0x78>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	681a      	ldr	r2, [r3, #0]
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	330c      	adds	r3, #12
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	429a      	cmp	r2, r3
 801350e:	d101      	bne.n	8013514 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	e028      	b.n	8013566 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	60fb      	str	r3, [r7, #12]
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d1c5      	bne.n	80134ac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013520:	4b15      	ldr	r3, [pc, #84]	; (8013578 <ip4_route+0xdc>)
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d01a      	beq.n	801355e <ip4_route+0xc2>
 8013528:	4b13      	ldr	r3, [pc, #76]	; (8013578 <ip4_route+0xdc>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013530:	f003 0301 	and.w	r3, r3, #1
 8013534:	2b00      	cmp	r3, #0
 8013536:	d012      	beq.n	801355e <ip4_route+0xc2>
 8013538:	4b0f      	ldr	r3, [pc, #60]	; (8013578 <ip4_route+0xdc>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013540:	f003 0304 	and.w	r3, r3, #4
 8013544:	2b00      	cmp	r3, #0
 8013546:	d00a      	beq.n	801355e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013548:	4b0b      	ldr	r3, [pc, #44]	; (8013578 <ip4_route+0xdc>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	3304      	adds	r3, #4
 801354e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013550:	2b00      	cmp	r3, #0
 8013552:	d004      	beq.n	801355e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	b2db      	uxtb	r3, r3
 801355a:	2b7f      	cmp	r3, #127	; 0x7f
 801355c:	d101      	bne.n	8013562 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801355e:	2300      	movs	r3, #0
 8013560:	e001      	b.n	8013566 <ip4_route+0xca>
  }

  return netif_default;
 8013562:	4b05      	ldr	r3, [pc, #20]	; (8013578 <ip4_route+0xdc>)
 8013564:	681b      	ldr	r3, [r3, #0]
}
 8013566:	4618      	mov	r0, r3
 8013568:	3714      	adds	r7, #20
 801356a:	46bd      	mov	sp, r7
 801356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013570:	4770      	bx	lr
 8013572:	bf00      	nop
 8013574:	2400ae48 	.word	0x2400ae48
 8013578:	2400ae4c 	.word	0x2400ae4c

0801357c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801358a:	f003 0301 	and.w	r3, r3, #1
 801358e:	b2db      	uxtb	r3, r3
 8013590:	2b00      	cmp	r3, #0
 8013592:	d016      	beq.n	80135c2 <ip4_input_accept+0x46>
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	3304      	adds	r3, #4
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d011      	beq.n	80135c2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801359e:	4b0b      	ldr	r3, [pc, #44]	; (80135cc <ip4_input_accept+0x50>)
 80135a0:	695a      	ldr	r2, [r3, #20]
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	3304      	adds	r3, #4
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d008      	beq.n	80135be <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80135ac:	4b07      	ldr	r3, [pc, #28]	; (80135cc <ip4_input_accept+0x50>)
 80135ae:	695b      	ldr	r3, [r3, #20]
 80135b0:	6879      	ldr	r1, [r7, #4]
 80135b2:	4618      	mov	r0, r3
 80135b4:	f000 fa08 	bl	80139c8 <ip4_addr_isbroadcast_u32>
 80135b8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d001      	beq.n	80135c2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80135be:	2301      	movs	r3, #1
 80135c0:	e000      	b.n	80135c4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80135c2:	2300      	movs	r3, #0
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	3708      	adds	r7, #8
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}
 80135cc:	24007f68 	.word	0x24007f68

080135d0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b086      	sub	sp, #24
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
 80135d8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	781b      	ldrb	r3, [r3, #0]
 80135e4:	091b      	lsrs	r3, r3, #4
 80135e6:	b2db      	uxtb	r3, r3
 80135e8:	2b04      	cmp	r3, #4
 80135ea:	d004      	beq.n	80135f6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f002 fb7b 	bl	8015ce8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80135f2:	2300      	movs	r3, #0
 80135f4:	e107      	b.n	8013806 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80135f6:	697b      	ldr	r3, [r7, #20]
 80135f8:	781b      	ldrb	r3, [r3, #0]
 80135fa:	f003 030f 	and.w	r3, r3, #15
 80135fe:	b2db      	uxtb	r3, r3
 8013600:	009b      	lsls	r3, r3, #2
 8013602:	b2db      	uxtb	r3, r3
 8013604:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013606:	697b      	ldr	r3, [r7, #20]
 8013608:	885b      	ldrh	r3, [r3, #2]
 801360a:	b29b      	uxth	r3, r3
 801360c:	4618      	mov	r0, r3
 801360e:	f7fe fc6f 	bl	8011ef0 <lwip_htons>
 8013612:	4603      	mov	r3, r0
 8013614:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	891b      	ldrh	r3, [r3, #8]
 801361a:	89ba      	ldrh	r2, [r7, #12]
 801361c:	429a      	cmp	r2, r3
 801361e:	d204      	bcs.n	801362a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013620:	89bb      	ldrh	r3, [r7, #12]
 8013622:	4619      	mov	r1, r3
 8013624:	6878      	ldr	r0, [r7, #4]
 8013626:	f002 f9d9 	bl	80159dc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	895b      	ldrh	r3, [r3, #10]
 801362e:	89fa      	ldrh	r2, [r7, #14]
 8013630:	429a      	cmp	r2, r3
 8013632:	d807      	bhi.n	8013644 <ip4_input+0x74>
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	891b      	ldrh	r3, [r3, #8]
 8013638:	89ba      	ldrh	r2, [r7, #12]
 801363a:	429a      	cmp	r2, r3
 801363c:	d802      	bhi.n	8013644 <ip4_input+0x74>
 801363e:	89fb      	ldrh	r3, [r7, #14]
 8013640:	2b13      	cmp	r3, #19
 8013642:	d804      	bhi.n	801364e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f002 fb4f 	bl	8015ce8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801364a:	2300      	movs	r3, #0
 801364c:	e0db      	b.n	8013806 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	691b      	ldr	r3, [r3, #16]
 8013652:	4a6f      	ldr	r2, [pc, #444]	; (8013810 <ip4_input+0x240>)
 8013654:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	68db      	ldr	r3, [r3, #12]
 801365a:	4a6d      	ldr	r2, [pc, #436]	; (8013810 <ip4_input+0x240>)
 801365c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801365e:	4b6c      	ldr	r3, [pc, #432]	; (8013810 <ip4_input+0x240>)
 8013660:	695b      	ldr	r3, [r3, #20]
 8013662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013666:	2be0      	cmp	r3, #224	; 0xe0
 8013668:	d112      	bne.n	8013690 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013670:	f003 0301 	and.w	r3, r3, #1
 8013674:	b2db      	uxtb	r3, r3
 8013676:	2b00      	cmp	r3, #0
 8013678:	d007      	beq.n	801368a <ip4_input+0xba>
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	3304      	adds	r3, #4
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d002      	beq.n	801368a <ip4_input+0xba>
      netif = inp;
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	613b      	str	r3, [r7, #16]
 8013688:	e02a      	b.n	80136e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801368a:	2300      	movs	r3, #0
 801368c:	613b      	str	r3, [r7, #16]
 801368e:	e027      	b.n	80136e0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013690:	6838      	ldr	r0, [r7, #0]
 8013692:	f7ff ff73 	bl	801357c <ip4_input_accept>
 8013696:	4603      	mov	r3, r0
 8013698:	2b00      	cmp	r3, #0
 801369a:	d002      	beq.n	80136a2 <ip4_input+0xd2>
      netif = inp;
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	613b      	str	r3, [r7, #16]
 80136a0:	e01e      	b.n	80136e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 80136a2:	2300      	movs	r3, #0
 80136a4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80136a6:	4b5a      	ldr	r3, [pc, #360]	; (8013810 <ip4_input+0x240>)
 80136a8:	695b      	ldr	r3, [r3, #20]
 80136aa:	b2db      	uxtb	r3, r3
 80136ac:	2b7f      	cmp	r3, #127	; 0x7f
 80136ae:	d017      	beq.n	80136e0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80136b0:	4b58      	ldr	r3, [pc, #352]	; (8013814 <ip4_input+0x244>)
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	613b      	str	r3, [r7, #16]
 80136b6:	e00e      	b.n	80136d6 <ip4_input+0x106>
          if (netif == inp) {
 80136b8:	693a      	ldr	r2, [r7, #16]
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	429a      	cmp	r2, r3
 80136be:	d006      	beq.n	80136ce <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80136c0:	6938      	ldr	r0, [r7, #16]
 80136c2:	f7ff ff5b 	bl	801357c <ip4_input_accept>
 80136c6:	4603      	mov	r3, r0
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d108      	bne.n	80136de <ip4_input+0x10e>
 80136cc:	e000      	b.n	80136d0 <ip4_input+0x100>
            continue;
 80136ce:	bf00      	nop
        NETIF_FOREACH(netif) {
 80136d0:	693b      	ldr	r3, [r7, #16]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	613b      	str	r3, [r7, #16]
 80136d6:	693b      	ldr	r3, [r7, #16]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d1ed      	bne.n	80136b8 <ip4_input+0xe8>
 80136dc:	e000      	b.n	80136e0 <ip4_input+0x110>
            break;
 80136de:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80136e0:	4b4b      	ldr	r3, [pc, #300]	; (8013810 <ip4_input+0x240>)
 80136e2:	691b      	ldr	r3, [r3, #16]
 80136e4:	6839      	ldr	r1, [r7, #0]
 80136e6:	4618      	mov	r0, r3
 80136e8:	f000 f96e 	bl	80139c8 <ip4_addr_isbroadcast_u32>
 80136ec:	4603      	mov	r3, r0
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d105      	bne.n	80136fe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80136f2:	4b47      	ldr	r3, [pc, #284]	; (8013810 <ip4_input+0x240>)
 80136f4:	691b      	ldr	r3, [r3, #16]
 80136f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80136fa:	2be0      	cmp	r3, #224	; 0xe0
 80136fc:	d104      	bne.n	8013708 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80136fe:	6878      	ldr	r0, [r7, #4]
 8013700:	f002 faf2 	bl	8015ce8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013704:	2300      	movs	r3, #0
 8013706:	e07e      	b.n	8013806 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d104      	bne.n	8013718 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801370e:	6878      	ldr	r0, [r7, #4]
 8013710:	f002 faea 	bl	8015ce8 <pbuf_free>
    return ERR_OK;
 8013714:	2300      	movs	r3, #0
 8013716:	e076      	b.n	8013806 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	88db      	ldrh	r3, [r3, #6]
 801371c:	b29b      	uxth	r3, r3
 801371e:	461a      	mov	r2, r3
 8013720:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013724:	4013      	ands	r3, r2
 8013726:	2b00      	cmp	r3, #0
 8013728:	d00b      	beq.n	8013742 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f000 fc92 	bl	8014054 <ip4_reass>
 8013730:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d101      	bne.n	801373c <ip4_input+0x16c>
      return ERR_OK;
 8013738:	2300      	movs	r3, #0
 801373a:	e064      	b.n	8013806 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	685b      	ldr	r3, [r3, #4]
 8013740:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013742:	4a33      	ldr	r2, [pc, #204]	; (8013810 <ip4_input+0x240>)
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013748:	4a31      	ldr	r2, [pc, #196]	; (8013810 <ip4_input+0x240>)
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801374e:	4a30      	ldr	r2, [pc, #192]	; (8013810 <ip4_input+0x240>)
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	f003 030f 	and.w	r3, r3, #15
 801375c:	b2db      	uxtb	r3, r3
 801375e:	009b      	lsls	r3, r3, #2
 8013760:	b2db      	uxtb	r3, r3
 8013762:	b29a      	uxth	r2, r3
 8013764:	4b2a      	ldr	r3, [pc, #168]	; (8013810 <ip4_input+0x240>)
 8013766:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013768:	89fb      	ldrh	r3, [r7, #14]
 801376a:	4619      	mov	r1, r3
 801376c:	6878      	ldr	r0, [r7, #4]
 801376e:	f002 fa35 	bl	8015bdc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013772:	697b      	ldr	r3, [r7, #20]
 8013774:	7a5b      	ldrb	r3, [r3, #9]
 8013776:	2b11      	cmp	r3, #17
 8013778:	d006      	beq.n	8013788 <ip4_input+0x1b8>
 801377a:	2b11      	cmp	r3, #17
 801377c:	dc13      	bgt.n	80137a6 <ip4_input+0x1d6>
 801377e:	2b01      	cmp	r3, #1
 8013780:	d00c      	beq.n	801379c <ip4_input+0x1cc>
 8013782:	2b06      	cmp	r3, #6
 8013784:	d005      	beq.n	8013792 <ip4_input+0x1c2>
 8013786:	e00e      	b.n	80137a6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013788:	6839      	ldr	r1, [r7, #0]
 801378a:	6878      	ldr	r0, [r7, #4]
 801378c:	f009 f93a 	bl	801ca04 <udp_input>
        break;
 8013790:	e026      	b.n	80137e0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013792:	6839      	ldr	r1, [r7, #0]
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f004 fd27 	bl	80181e8 <tcp_input>
        break;
 801379a:	e021      	b.n	80137e0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801379c:	6839      	ldr	r1, [r7, #0]
 801379e:	6878      	ldr	r0, [r7, #4]
 80137a0:	f7ff fbf6 	bl	8012f90 <icmp_input>
        break;
 80137a4:	e01c      	b.n	80137e0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80137a6:	4b1a      	ldr	r3, [pc, #104]	; (8013810 <ip4_input+0x240>)
 80137a8:	695b      	ldr	r3, [r3, #20]
 80137aa:	6939      	ldr	r1, [r7, #16]
 80137ac:	4618      	mov	r0, r3
 80137ae:	f000 f90b 	bl	80139c8 <ip4_addr_isbroadcast_u32>
 80137b2:	4603      	mov	r3, r0
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d10f      	bne.n	80137d8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80137b8:	4b15      	ldr	r3, [pc, #84]	; (8013810 <ip4_input+0x240>)
 80137ba:	695b      	ldr	r3, [r3, #20]
 80137bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80137c0:	2be0      	cmp	r3, #224	; 0xe0
 80137c2:	d009      	beq.n	80137d8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80137c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80137c8:	4619      	mov	r1, r3
 80137ca:	6878      	ldr	r0, [r7, #4]
 80137cc:	f002 fa79 	bl	8015cc2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80137d0:	2102      	movs	r1, #2
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f7ff fcfc 	bl	80131d0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f002 fa85 	bl	8015ce8 <pbuf_free>
        break;
 80137de:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80137e0:	4b0b      	ldr	r3, [pc, #44]	; (8013810 <ip4_input+0x240>)
 80137e2:	2200      	movs	r2, #0
 80137e4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80137e6:	4b0a      	ldr	r3, [pc, #40]	; (8013810 <ip4_input+0x240>)
 80137e8:	2200      	movs	r2, #0
 80137ea:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80137ec:	4b08      	ldr	r3, [pc, #32]	; (8013810 <ip4_input+0x240>)
 80137ee:	2200      	movs	r2, #0
 80137f0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80137f2:	4b07      	ldr	r3, [pc, #28]	; (8013810 <ip4_input+0x240>)
 80137f4:	2200      	movs	r2, #0
 80137f6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80137f8:	4b05      	ldr	r3, [pc, #20]	; (8013810 <ip4_input+0x240>)
 80137fa:	2200      	movs	r2, #0
 80137fc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80137fe:	4b04      	ldr	r3, [pc, #16]	; (8013810 <ip4_input+0x240>)
 8013800:	2200      	movs	r2, #0
 8013802:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013804:	2300      	movs	r3, #0
}
 8013806:	4618      	mov	r0, r3
 8013808:	3718      	adds	r7, #24
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}
 801380e:	bf00      	nop
 8013810:	24007f68 	.word	0x24007f68
 8013814:	2400ae48 	.word	0x2400ae48

08013818 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b08a      	sub	sp, #40	; 0x28
 801381c:	af04      	add	r7, sp, #16
 801381e:	60f8      	str	r0, [r7, #12]
 8013820:	60b9      	str	r1, [r7, #8]
 8013822:	607a      	str	r2, [r7, #4]
 8013824:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d009      	beq.n	8013844 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d003      	beq.n	801383e <ip4_output_if+0x26>
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d102      	bne.n	8013844 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013840:	3304      	adds	r3, #4
 8013842:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013844:	78fa      	ldrb	r2, [r7, #3]
 8013846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013848:	9302      	str	r3, [sp, #8]
 801384a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801384e:	9301      	str	r3, [sp, #4]
 8013850:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013854:	9300      	str	r3, [sp, #0]
 8013856:	4613      	mov	r3, r2
 8013858:	687a      	ldr	r2, [r7, #4]
 801385a:	6979      	ldr	r1, [r7, #20]
 801385c:	68f8      	ldr	r0, [r7, #12]
 801385e:	f000 f805 	bl	801386c <ip4_output_if_src>
 8013862:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013864:	4618      	mov	r0, r3
 8013866:	3718      	adds	r7, #24
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}

0801386c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b088      	sub	sp, #32
 8013870:	af00      	add	r7, sp, #0
 8013872:	60f8      	str	r0, [r7, #12]
 8013874:	60b9      	str	r1, [r7, #8]
 8013876:	607a      	str	r2, [r7, #4]
 8013878:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	7b9b      	ldrb	r3, [r3, #14]
 801387e:	2b01      	cmp	r3, #1
 8013880:	d006      	beq.n	8013890 <ip4_output_if_src+0x24>
 8013882:	4b4b      	ldr	r3, [pc, #300]	; (80139b0 <ip4_output_if_src+0x144>)
 8013884:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013888:	494a      	ldr	r1, [pc, #296]	; (80139b4 <ip4_output_if_src+0x148>)
 801388a:	484b      	ldr	r0, [pc, #300]	; (80139b8 <ip4_output_if_src+0x14c>)
 801388c:	f00d fa3e 	bl	8020d0c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d060      	beq.n	8013958 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013896:	2314      	movs	r3, #20
 8013898:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801389a:	2114      	movs	r1, #20
 801389c:	68f8      	ldr	r0, [r7, #12]
 801389e:	f002 f98d 	bl	8015bbc <pbuf_add_header>
 80138a2:	4603      	mov	r3, r0
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d002      	beq.n	80138ae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80138a8:	f06f 0301 	mvn.w	r3, #1
 80138ac:	e07c      	b.n	80139a8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	685b      	ldr	r3, [r3, #4]
 80138b2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	895b      	ldrh	r3, [r3, #10]
 80138b8:	2b13      	cmp	r3, #19
 80138ba:	d806      	bhi.n	80138ca <ip4_output_if_src+0x5e>
 80138bc:	4b3c      	ldr	r3, [pc, #240]	; (80139b0 <ip4_output_if_src+0x144>)
 80138be:	f44f 7262 	mov.w	r2, #904	; 0x388
 80138c2:	493e      	ldr	r1, [pc, #248]	; (80139bc <ip4_output_if_src+0x150>)
 80138c4:	483c      	ldr	r0, [pc, #240]	; (80139b8 <ip4_output_if_src+0x14c>)
 80138c6:	f00d fa21 	bl	8020d0c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80138ca:	69fb      	ldr	r3, [r7, #28]
 80138cc:	78fa      	ldrb	r2, [r7, #3]
 80138ce:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80138d0:	69fb      	ldr	r3, [r7, #28]
 80138d2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80138d6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681a      	ldr	r2, [r3, #0]
 80138dc:	69fb      	ldr	r3, [r7, #28]
 80138de:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80138e0:	8b7b      	ldrh	r3, [r7, #26]
 80138e2:	089b      	lsrs	r3, r3, #2
 80138e4:	b29b      	uxth	r3, r3
 80138e6:	b2db      	uxtb	r3, r3
 80138e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138ec:	b2da      	uxtb	r2, r3
 80138ee:	69fb      	ldr	r3, [r7, #28]
 80138f0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80138f2:	69fb      	ldr	r3, [r7, #28]
 80138f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80138f8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	891b      	ldrh	r3, [r3, #8]
 80138fe:	4618      	mov	r0, r3
 8013900:	f7fe faf6 	bl	8011ef0 <lwip_htons>
 8013904:	4603      	mov	r3, r0
 8013906:	461a      	mov	r2, r3
 8013908:	69fb      	ldr	r3, [r7, #28]
 801390a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	2200      	movs	r2, #0
 8013910:	719a      	strb	r2, [r3, #6]
 8013912:	2200      	movs	r2, #0
 8013914:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013916:	4b2a      	ldr	r3, [pc, #168]	; (80139c0 <ip4_output_if_src+0x154>)
 8013918:	881b      	ldrh	r3, [r3, #0]
 801391a:	4618      	mov	r0, r3
 801391c:	f7fe fae8 	bl	8011ef0 <lwip_htons>
 8013920:	4603      	mov	r3, r0
 8013922:	461a      	mov	r2, r3
 8013924:	69fb      	ldr	r3, [r7, #28]
 8013926:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013928:	4b25      	ldr	r3, [pc, #148]	; (80139c0 <ip4_output_if_src+0x154>)
 801392a:	881b      	ldrh	r3, [r3, #0]
 801392c:	3301      	adds	r3, #1
 801392e:	b29a      	uxth	r2, r3
 8013930:	4b23      	ldr	r3, [pc, #140]	; (80139c0 <ip4_output_if_src+0x154>)
 8013932:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013934:	68bb      	ldr	r3, [r7, #8]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d104      	bne.n	8013944 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801393a:	4b22      	ldr	r3, [pc, #136]	; (80139c4 <ip4_output_if_src+0x158>)
 801393c:	681a      	ldr	r2, [r3, #0]
 801393e:	69fb      	ldr	r3, [r7, #28]
 8013940:	60da      	str	r2, [r3, #12]
 8013942:	e003      	b.n	801394c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013944:	68bb      	ldr	r3, [r7, #8]
 8013946:	681a      	ldr	r2, [r3, #0]
 8013948:	69fb      	ldr	r3, [r7, #28]
 801394a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801394c:	69fb      	ldr	r3, [r7, #28]
 801394e:	2200      	movs	r2, #0
 8013950:	729a      	strb	r2, [r3, #10]
 8013952:	2200      	movs	r2, #0
 8013954:	72da      	strb	r2, [r3, #11]
 8013956:	e00f      	b.n	8013978 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	895b      	ldrh	r3, [r3, #10]
 801395c:	2b13      	cmp	r3, #19
 801395e:	d802      	bhi.n	8013966 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013960:	f06f 0301 	mvn.w	r3, #1
 8013964:	e020      	b.n	80139a8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801396c:	69fb      	ldr	r3, [r7, #28]
 801396e:	691b      	ldr	r3, [r3, #16]
 8013970:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013972:	f107 0314 	add.w	r3, r7, #20
 8013976:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801397c:	2b00      	cmp	r3, #0
 801397e:	d00c      	beq.n	801399a <ip4_output_if_src+0x12e>
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	891a      	ldrh	r2, [r3, #8]
 8013984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013986:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013988:	429a      	cmp	r2, r3
 801398a:	d906      	bls.n	801399a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801398c:	687a      	ldr	r2, [r7, #4]
 801398e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013990:	68f8      	ldr	r0, [r7, #12]
 8013992:	f000 fd4d 	bl	8014430 <ip4_frag>
 8013996:	4603      	mov	r3, r0
 8013998:	e006      	b.n	80139a8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801399c:	695b      	ldr	r3, [r3, #20]
 801399e:	687a      	ldr	r2, [r7, #4]
 80139a0:	68f9      	ldr	r1, [r7, #12]
 80139a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139a4:	4798      	blx	r3
 80139a6:	4603      	mov	r3, r0
}
 80139a8:	4618      	mov	r0, r3
 80139aa:	3720      	adds	r7, #32
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}
 80139b0:	080264e0 	.word	0x080264e0
 80139b4:	08026540 	.word	0x08026540
 80139b8:	0802654c 	.word	0x0802654c
 80139bc:	08026574 	.word	0x08026574
 80139c0:	2400778a 	.word	0x2400778a
 80139c4:	08029318 	.word	0x08029318

080139c8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80139c8:	b480      	push	{r7}
 80139ca:	b085      	sub	sp, #20
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80139dc:	d002      	beq.n	80139e4 <ip4_addr_isbroadcast_u32+0x1c>
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d101      	bne.n	80139e8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80139e4:	2301      	movs	r3, #1
 80139e6:	e02a      	b.n	8013a3e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80139ee:	f003 0302 	and.w	r3, r3, #2
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d101      	bne.n	80139fa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80139f6:	2300      	movs	r3, #0
 80139f8:	e021      	b.n	8013a3e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80139fa:	683b      	ldr	r3, [r7, #0]
 80139fc:	3304      	adds	r3, #4
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	687a      	ldr	r2, [r7, #4]
 8013a02:	429a      	cmp	r2, r3
 8013a04:	d101      	bne.n	8013a0a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013a06:	2300      	movs	r3, #0
 8013a08:	e019      	b.n	8013a3e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013a0a:	68fa      	ldr	r2, [r7, #12]
 8013a0c:	683b      	ldr	r3, [r7, #0]
 8013a0e:	3304      	adds	r3, #4
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	405a      	eors	r2, r3
 8013a14:	683b      	ldr	r3, [r7, #0]
 8013a16:	3308      	adds	r3, #8
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	4013      	ands	r3, r2
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d10d      	bne.n	8013a3c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	3308      	adds	r3, #8
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	43da      	mvns	r2, r3
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	3308      	adds	r3, #8
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d101      	bne.n	8013a3c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013a38:	2301      	movs	r3, #1
 8013a3a:	e000      	b.n	8013a3e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013a3c:	2300      	movs	r3, #0
  }
}
 8013a3e:	4618      	mov	r0, r3
 8013a40:	3714      	adds	r7, #20
 8013a42:	46bd      	mov	sp, r7
 8013a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a48:	4770      	bx	lr
	...

08013a4c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b084      	sub	sp, #16
 8013a50:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013a52:	2300      	movs	r3, #0
 8013a54:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013a56:	4b12      	ldr	r3, [pc, #72]	; (8013aa0 <ip_reass_tmr+0x54>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013a5c:	e018      	b.n	8013a90 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	7fdb      	ldrb	r3, [r3, #31]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d00b      	beq.n	8013a7e <ip_reass_tmr+0x32>
      r->timer--;
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	7fdb      	ldrb	r3, [r3, #31]
 8013a6a:	3b01      	subs	r3, #1
 8013a6c:	b2da      	uxtb	r2, r3
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	60fb      	str	r3, [r7, #12]
 8013a7c:	e008      	b.n	8013a90 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013a88:	68b9      	ldr	r1, [r7, #8]
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f000 f80a 	bl	8013aa4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d1e3      	bne.n	8013a5e <ip_reass_tmr+0x12>
    }
  }
}
 8013a96:	bf00      	nop
 8013a98:	bf00      	nop
 8013a9a:	3710      	adds	r7, #16
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}
 8013aa0:	2400778c 	.word	0x2400778c

08013aa4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b088      	sub	sp, #32
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013ab2:	683a      	ldr	r2, [r7, #0]
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d105      	bne.n	8013ac6 <ip_reass_free_complete_datagram+0x22>
 8013aba:	4b45      	ldr	r3, [pc, #276]	; (8013bd0 <ip_reass_free_complete_datagram+0x12c>)
 8013abc:	22ab      	movs	r2, #171	; 0xab
 8013abe:	4945      	ldr	r1, [pc, #276]	; (8013bd4 <ip_reass_free_complete_datagram+0x130>)
 8013ac0:	4845      	ldr	r0, [pc, #276]	; (8013bd8 <ip_reass_free_complete_datagram+0x134>)
 8013ac2:	f00d f923 	bl	8020d0c <iprintf>
  if (prev != NULL) {
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d00a      	beq.n	8013ae2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013acc:	683b      	ldr	r3, [r7, #0]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	687a      	ldr	r2, [r7, #4]
 8013ad2:	429a      	cmp	r2, r3
 8013ad4:	d005      	beq.n	8013ae2 <ip_reass_free_complete_datagram+0x3e>
 8013ad6:	4b3e      	ldr	r3, [pc, #248]	; (8013bd0 <ip_reass_free_complete_datagram+0x12c>)
 8013ad8:	22ad      	movs	r2, #173	; 0xad
 8013ada:	4940      	ldr	r1, [pc, #256]	; (8013bdc <ip_reass_free_complete_datagram+0x138>)
 8013adc:	483e      	ldr	r0, [pc, #248]	; (8013bd8 <ip_reass_free_complete_datagram+0x134>)
 8013ade:	f00d f915 	bl	8020d0c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	685b      	ldr	r3, [r3, #4]
 8013ae8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013aea:	697b      	ldr	r3, [r7, #20]
 8013aec:	889b      	ldrh	r3, [r3, #4]
 8013aee:	b29b      	uxth	r3, r3
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d12a      	bne.n	8013b4a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	685b      	ldr	r3, [r3, #4]
 8013af8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	681a      	ldr	r2, [r3, #0]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013b02:	69bb      	ldr	r3, [r7, #24]
 8013b04:	6858      	ldr	r0, [r3, #4]
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	3308      	adds	r3, #8
 8013b0a:	2214      	movs	r2, #20
 8013b0c:	4619      	mov	r1, r3
 8013b0e:	f00c f9db 	bl	801fec8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013b12:	2101      	movs	r1, #1
 8013b14:	69b8      	ldr	r0, [r7, #24]
 8013b16:	f7ff fb6b 	bl	80131f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013b1a:	69b8      	ldr	r0, [r7, #24]
 8013b1c:	f002 f96c 	bl	8015df8 <pbuf_clen>
 8013b20:	4603      	mov	r3, r0
 8013b22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013b24:	8bfa      	ldrh	r2, [r7, #30]
 8013b26:	8a7b      	ldrh	r3, [r7, #18]
 8013b28:	4413      	add	r3, r2
 8013b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013b2e:	db05      	blt.n	8013b3c <ip_reass_free_complete_datagram+0x98>
 8013b30:	4b27      	ldr	r3, [pc, #156]	; (8013bd0 <ip_reass_free_complete_datagram+0x12c>)
 8013b32:	22bc      	movs	r2, #188	; 0xbc
 8013b34:	492a      	ldr	r1, [pc, #168]	; (8013be0 <ip_reass_free_complete_datagram+0x13c>)
 8013b36:	4828      	ldr	r0, [pc, #160]	; (8013bd8 <ip_reass_free_complete_datagram+0x134>)
 8013b38:	f00d f8e8 	bl	8020d0c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013b3c:	8bfa      	ldrh	r2, [r7, #30]
 8013b3e:	8a7b      	ldrh	r3, [r7, #18]
 8013b40:	4413      	add	r3, r2
 8013b42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013b44:	69b8      	ldr	r0, [r7, #24]
 8013b46:	f002 f8cf 	bl	8015ce8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013b50:	e01f      	b.n	8013b92 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013b52:	69bb      	ldr	r3, [r7, #24]
 8013b54:	685b      	ldr	r3, [r3, #4]
 8013b56:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013b58:	69bb      	ldr	r3, [r7, #24]
 8013b5a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013b62:	68f8      	ldr	r0, [r7, #12]
 8013b64:	f002 f948 	bl	8015df8 <pbuf_clen>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013b6c:	8bfa      	ldrh	r2, [r7, #30]
 8013b6e:	8a7b      	ldrh	r3, [r7, #18]
 8013b70:	4413      	add	r3, r2
 8013b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013b76:	db05      	blt.n	8013b84 <ip_reass_free_complete_datagram+0xe0>
 8013b78:	4b15      	ldr	r3, [pc, #84]	; (8013bd0 <ip_reass_free_complete_datagram+0x12c>)
 8013b7a:	22cc      	movs	r2, #204	; 0xcc
 8013b7c:	4918      	ldr	r1, [pc, #96]	; (8013be0 <ip_reass_free_complete_datagram+0x13c>)
 8013b7e:	4816      	ldr	r0, [pc, #88]	; (8013bd8 <ip_reass_free_complete_datagram+0x134>)
 8013b80:	f00d f8c4 	bl	8020d0c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013b84:	8bfa      	ldrh	r2, [r7, #30]
 8013b86:	8a7b      	ldrh	r3, [r7, #18]
 8013b88:	4413      	add	r3, r2
 8013b8a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013b8c:	68f8      	ldr	r0, [r7, #12]
 8013b8e:	f002 f8ab 	bl	8015ce8 <pbuf_free>
  while (p != NULL) {
 8013b92:	69bb      	ldr	r3, [r7, #24]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d1dc      	bne.n	8013b52 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013b98:	6839      	ldr	r1, [r7, #0]
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	f000 f8c2 	bl	8013d24 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013ba0:	4b10      	ldr	r3, [pc, #64]	; (8013be4 <ip_reass_free_complete_datagram+0x140>)
 8013ba2:	881b      	ldrh	r3, [r3, #0]
 8013ba4:	8bfa      	ldrh	r2, [r7, #30]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d905      	bls.n	8013bb6 <ip_reass_free_complete_datagram+0x112>
 8013baa:	4b09      	ldr	r3, [pc, #36]	; (8013bd0 <ip_reass_free_complete_datagram+0x12c>)
 8013bac:	22d2      	movs	r2, #210	; 0xd2
 8013bae:	490e      	ldr	r1, [pc, #56]	; (8013be8 <ip_reass_free_complete_datagram+0x144>)
 8013bb0:	4809      	ldr	r0, [pc, #36]	; (8013bd8 <ip_reass_free_complete_datagram+0x134>)
 8013bb2:	f00d f8ab 	bl	8020d0c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013bb6:	4b0b      	ldr	r3, [pc, #44]	; (8013be4 <ip_reass_free_complete_datagram+0x140>)
 8013bb8:	881a      	ldrh	r2, [r3, #0]
 8013bba:	8bfb      	ldrh	r3, [r7, #30]
 8013bbc:	1ad3      	subs	r3, r2, r3
 8013bbe:	b29a      	uxth	r2, r3
 8013bc0:	4b08      	ldr	r3, [pc, #32]	; (8013be4 <ip_reass_free_complete_datagram+0x140>)
 8013bc2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013bc4:	8bfb      	ldrh	r3, [r7, #30]
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3720      	adds	r7, #32
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}
 8013bce:	bf00      	nop
 8013bd0:	080265a4 	.word	0x080265a4
 8013bd4:	08026608 	.word	0x08026608
 8013bd8:	08026614 	.word	0x08026614
 8013bdc:	0802663c 	.word	0x0802663c
 8013be0:	08026650 	.word	0x08026650
 8013be4:	24007790 	.word	0x24007790
 8013be8:	08026670 	.word	0x08026670

08013bec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b08a      	sub	sp, #40	; 0x28
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013c02:	2300      	movs	r3, #0
 8013c04:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013c06:	2300      	movs	r3, #0
 8013c08:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013c0a:	4b28      	ldr	r3, [pc, #160]	; (8013cac <ip_reass_remove_oldest_datagram+0xc0>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013c10:	e030      	b.n	8013c74 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c14:	695a      	ldr	r2, [r3, #20]
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	68db      	ldr	r3, [r3, #12]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d10c      	bne.n	8013c38 <ip_reass_remove_oldest_datagram+0x4c>
 8013c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c20:	699a      	ldr	r2, [r3, #24]
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	691b      	ldr	r3, [r3, #16]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d106      	bne.n	8013c38 <ip_reass_remove_oldest_datagram+0x4c>
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2c:	899a      	ldrh	r2, [r3, #12]
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	889b      	ldrh	r3, [r3, #4]
 8013c32:	b29b      	uxth	r3, r3
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d014      	beq.n	8013c62 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	3301      	adds	r3, #1
 8013c3c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013c3e:	6a3b      	ldr	r3, [r7, #32]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d104      	bne.n	8013c4e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c46:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013c48:	69fb      	ldr	r3, [r7, #28]
 8013c4a:	61bb      	str	r3, [r7, #24]
 8013c4c:	e009      	b.n	8013c62 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c50:	7fda      	ldrb	r2, [r3, #31]
 8013c52:	6a3b      	ldr	r3, [r7, #32]
 8013c54:	7fdb      	ldrb	r3, [r3, #31]
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d803      	bhi.n	8013c62 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013c5e:	69fb      	ldr	r3, [r7, #28]
 8013c60:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d001      	beq.n	8013c6e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c6c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d1cb      	bne.n	8013c12 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013c7a:	6a3b      	ldr	r3, [r7, #32]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d008      	beq.n	8013c92 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013c80:	69b9      	ldr	r1, [r7, #24]
 8013c82:	6a38      	ldr	r0, [r7, #32]
 8013c84:	f7ff ff0e 	bl	8013aa4 <ip_reass_free_complete_datagram>
 8013c88:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013c8a:	697a      	ldr	r2, [r7, #20]
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	4413      	add	r3, r2
 8013c90:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013c92:	697a      	ldr	r2, [r7, #20]
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	da02      	bge.n	8013ca0 <ip_reass_remove_oldest_datagram+0xb4>
 8013c9a:	693b      	ldr	r3, [r7, #16]
 8013c9c:	2b01      	cmp	r3, #1
 8013c9e:	dcac      	bgt.n	8013bfa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013ca0:	697b      	ldr	r3, [r7, #20]
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3728      	adds	r7, #40	; 0x28
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}
 8013caa:	bf00      	nop
 8013cac:	2400778c 	.word	0x2400778c

08013cb0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b084      	sub	sp, #16
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
 8013cb8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013cba:	2004      	movs	r0, #4
 8013cbc:	f001 f92e 	bl	8014f1c <memp_malloc>
 8013cc0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d110      	bne.n	8013cea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013cc8:	6839      	ldr	r1, [r7, #0]
 8013cca:	6878      	ldr	r0, [r7, #4]
 8013ccc:	f7ff ff8e 	bl	8013bec <ip_reass_remove_oldest_datagram>
 8013cd0:	4602      	mov	r2, r0
 8013cd2:	683b      	ldr	r3, [r7, #0]
 8013cd4:	4293      	cmp	r3, r2
 8013cd6:	dc03      	bgt.n	8013ce0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013cd8:	2004      	movs	r0, #4
 8013cda:	f001 f91f 	bl	8014f1c <memp_malloc>
 8013cde:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d101      	bne.n	8013cea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	e016      	b.n	8013d18 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013cea:	2220      	movs	r2, #32
 8013cec:	2100      	movs	r1, #0
 8013cee:	68f8      	ldr	r0, [r7, #12]
 8013cf0:	f00c f912 	bl	801ff18 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	220f      	movs	r2, #15
 8013cf8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013cfa:	4b09      	ldr	r3, [pc, #36]	; (8013d20 <ip_reass_enqueue_new_datagram+0x70>)
 8013cfc:	681a      	ldr	r2, [r3, #0]
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013d02:	4a07      	ldr	r2, [pc, #28]	; (8013d20 <ip_reass_enqueue_new_datagram+0x70>)
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	3308      	adds	r3, #8
 8013d0c:	2214      	movs	r2, #20
 8013d0e:	6879      	ldr	r1, [r7, #4]
 8013d10:	4618      	mov	r0, r3
 8013d12:	f00c f8d9 	bl	801fec8 <memcpy>
  return ipr;
 8013d16:	68fb      	ldr	r3, [r7, #12]
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	3710      	adds	r7, #16
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	2400778c 	.word	0x2400778c

08013d24 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b082      	sub	sp, #8
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
 8013d2c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013d2e:	4b10      	ldr	r3, [pc, #64]	; (8013d70 <ip_reass_dequeue_datagram+0x4c>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	687a      	ldr	r2, [r7, #4]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d104      	bne.n	8013d42 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	4a0c      	ldr	r2, [pc, #48]	; (8013d70 <ip_reass_dequeue_datagram+0x4c>)
 8013d3e:	6013      	str	r3, [r2, #0]
 8013d40:	e00d      	b.n	8013d5e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d106      	bne.n	8013d56 <ip_reass_dequeue_datagram+0x32>
 8013d48:	4b0a      	ldr	r3, [pc, #40]	; (8013d74 <ip_reass_dequeue_datagram+0x50>)
 8013d4a:	f240 1245 	movw	r2, #325	; 0x145
 8013d4e:	490a      	ldr	r1, [pc, #40]	; (8013d78 <ip_reass_dequeue_datagram+0x54>)
 8013d50:	480a      	ldr	r0, [pc, #40]	; (8013d7c <ip_reass_dequeue_datagram+0x58>)
 8013d52:	f00c ffdb 	bl	8020d0c <iprintf>
    prev->next = ipr->next;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681a      	ldr	r2, [r3, #0]
 8013d5a:	683b      	ldr	r3, [r7, #0]
 8013d5c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013d5e:	6879      	ldr	r1, [r7, #4]
 8013d60:	2004      	movs	r0, #4
 8013d62:	f001 f94b 	bl	8014ffc <memp_free>
}
 8013d66:	bf00      	nop
 8013d68:	3708      	adds	r7, #8
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	bd80      	pop	{r7, pc}
 8013d6e:	bf00      	nop
 8013d70:	2400778c 	.word	0x2400778c
 8013d74:	080265a4 	.word	0x080265a4
 8013d78:	08026694 	.word	0x08026694
 8013d7c:	08026614 	.word	0x08026614

08013d80 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b08c      	sub	sp, #48	; 0x30
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	60f8      	str	r0, [r7, #12]
 8013d88:	60b9      	str	r1, [r7, #8]
 8013d8a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013d90:	2301      	movs	r3, #1
 8013d92:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	685b      	ldr	r3, [r3, #4]
 8013d98:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013d9a:	69fb      	ldr	r3, [r7, #28]
 8013d9c:	885b      	ldrh	r3, [r3, #2]
 8013d9e:	b29b      	uxth	r3, r3
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7fe f8a5 	bl	8011ef0 <lwip_htons>
 8013da6:	4603      	mov	r3, r0
 8013da8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013daa:	69fb      	ldr	r3, [r7, #28]
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	f003 030f 	and.w	r3, r3, #15
 8013db2:	b2db      	uxtb	r3, r3
 8013db4:	009b      	lsls	r3, r3, #2
 8013db6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013db8:	7e7b      	ldrb	r3, [r7, #25]
 8013dba:	b29b      	uxth	r3, r3
 8013dbc:	8b7a      	ldrh	r2, [r7, #26]
 8013dbe:	429a      	cmp	r2, r3
 8013dc0:	d202      	bcs.n	8013dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013dc6:	e135      	b.n	8014034 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013dc8:	7e7b      	ldrb	r3, [r7, #25]
 8013dca:	b29b      	uxth	r3, r3
 8013dcc:	8b7a      	ldrh	r2, [r7, #26]
 8013dce:	1ad3      	subs	r3, r2, r3
 8013dd0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013dd2:	69fb      	ldr	r3, [r7, #28]
 8013dd4:	88db      	ldrh	r3, [r3, #6]
 8013dd6:	b29b      	uxth	r3, r3
 8013dd8:	4618      	mov	r0, r3
 8013dda:	f7fe f889 	bl	8011ef0 <lwip_htons>
 8013dde:	4603      	mov	r3, r0
 8013de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013de4:	b29b      	uxth	r3, r3
 8013de6:	00db      	lsls	r3, r3, #3
 8013de8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	685b      	ldr	r3, [r3, #4]
 8013dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df2:	2200      	movs	r2, #0
 8013df4:	701a      	strb	r2, [r3, #0]
 8013df6:	2200      	movs	r2, #0
 8013df8:	705a      	strb	r2, [r3, #1]
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	709a      	strb	r2, [r3, #2]
 8013dfe:	2200      	movs	r2, #0
 8013e00:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e04:	8afa      	ldrh	r2, [r7, #22]
 8013e06:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013e08:	8afa      	ldrh	r2, [r7, #22]
 8013e0a:	8b7b      	ldrh	r3, [r7, #26]
 8013e0c:	4413      	add	r3, r2
 8013e0e:	b29a      	uxth	r2, r3
 8013e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e12:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e16:	88db      	ldrh	r3, [r3, #6]
 8013e18:	b29b      	uxth	r3, r3
 8013e1a:	8afa      	ldrh	r2, [r7, #22]
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d902      	bls.n	8013e26 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e24:	e106      	b.n	8014034 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8013e2c:	e068      	b.n	8013f00 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e30:	685b      	ldr	r3, [r3, #4]
 8013e32:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e36:	889b      	ldrh	r3, [r3, #4]
 8013e38:	b29a      	uxth	r2, r3
 8013e3a:	693b      	ldr	r3, [r7, #16]
 8013e3c:	889b      	ldrh	r3, [r3, #4]
 8013e3e:	b29b      	uxth	r3, r3
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d235      	bcs.n	8013eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e48:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d020      	beq.n	8013e92 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e52:	889b      	ldrh	r3, [r3, #4]
 8013e54:	b29a      	uxth	r2, r3
 8013e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e58:	88db      	ldrh	r3, [r3, #6]
 8013e5a:	b29b      	uxth	r3, r3
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d307      	bcc.n	8013e70 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e62:	88db      	ldrh	r3, [r3, #6]
 8013e64:	b29a      	uxth	r2, r3
 8013e66:	693b      	ldr	r3, [r7, #16]
 8013e68:	889b      	ldrh	r3, [r3, #4]
 8013e6a:	b29b      	uxth	r3, r3
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	d902      	bls.n	8013e76 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e74:	e0de      	b.n	8014034 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e78:	68ba      	ldr	r2, [r7, #8]
 8013e7a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e7e:	88db      	ldrh	r3, [r3, #6]
 8013e80:	b29a      	uxth	r2, r3
 8013e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e84:	889b      	ldrh	r3, [r3, #4]
 8013e86:	b29b      	uxth	r3, r3
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d03d      	beq.n	8013f08 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013e90:	e03a      	b.n	8013f08 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e94:	88db      	ldrh	r3, [r3, #6]
 8013e96:	b29a      	uxth	r2, r3
 8013e98:	693b      	ldr	r3, [r7, #16]
 8013e9a:	889b      	ldrh	r3, [r3, #4]
 8013e9c:	b29b      	uxth	r3, r3
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d902      	bls.n	8013ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ea6:	e0c5      	b.n	8014034 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	68ba      	ldr	r2, [r7, #8]
 8013eac:	605a      	str	r2, [r3, #4]
      break;
 8013eae:	e02b      	b.n	8013f08 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb2:	889b      	ldrh	r3, [r3, #4]
 8013eb4:	b29a      	uxth	r2, r3
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	889b      	ldrh	r3, [r3, #4]
 8013eba:	b29b      	uxth	r3, r3
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d102      	bne.n	8013ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ec4:	e0b6      	b.n	8014034 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec8:	889b      	ldrh	r3, [r3, #4]
 8013eca:	b29a      	uxth	r2, r3
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	88db      	ldrh	r3, [r3, #6]
 8013ed0:	b29b      	uxth	r3, r3
 8013ed2:	429a      	cmp	r2, r3
 8013ed4:	d202      	bcs.n	8013edc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013eda:	e0ab      	b.n	8014034 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d009      	beq.n	8013ef6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee4:	88db      	ldrh	r3, [r3, #6]
 8013ee6:	b29a      	uxth	r2, r3
 8013ee8:	693b      	ldr	r3, [r7, #16]
 8013eea:	889b      	ldrh	r3, [r3, #4]
 8013eec:	b29b      	uxth	r3, r3
 8013eee:	429a      	cmp	r2, r3
 8013ef0:	d001      	beq.n	8013ef6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013ef6:	693b      	ldr	r3, [r7, #16]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013efc:	693b      	ldr	r3, [r7, #16]
 8013efe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d193      	bne.n	8013e2e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013f06:	e000      	b.n	8013f0a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013f08:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d12d      	bne.n	8013f6c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d01c      	beq.n	8013f50 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f18:	88db      	ldrh	r3, [r3, #6]
 8013f1a:	b29a      	uxth	r2, r3
 8013f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f1e:	889b      	ldrh	r3, [r3, #4]
 8013f20:	b29b      	uxth	r3, r3
 8013f22:	429a      	cmp	r2, r3
 8013f24:	d906      	bls.n	8013f34 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013f26:	4b45      	ldr	r3, [pc, #276]	; (801403c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013f28:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013f2c:	4944      	ldr	r1, [pc, #272]	; (8014040 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013f2e:	4845      	ldr	r0, [pc, #276]	; (8014044 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013f30:	f00c feec 	bl	8020d0c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f36:	68ba      	ldr	r2, [r7, #8]
 8013f38:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f3c:	88db      	ldrh	r3, [r3, #6]
 8013f3e:	b29a      	uxth	r2, r3
 8013f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f42:	889b      	ldrh	r3, [r3, #4]
 8013f44:	b29b      	uxth	r3, r3
 8013f46:	429a      	cmp	r2, r3
 8013f48:	d010      	beq.n	8013f6c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	623b      	str	r3, [r7, #32]
 8013f4e:	e00d      	b.n	8013f6c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	685b      	ldr	r3, [r3, #4]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d006      	beq.n	8013f66 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013f58:	4b38      	ldr	r3, [pc, #224]	; (801403c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013f5a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013f5e:	493a      	ldr	r1, [pc, #232]	; (8014048 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013f60:	4838      	ldr	r0, [pc, #224]	; (8014044 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013f62:	f00c fed3 	bl	8020d0c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	68ba      	ldr	r2, [r7, #8]
 8013f6a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d105      	bne.n	8013f7e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	7f9b      	ldrb	r3, [r3, #30]
 8013f76:	f003 0301 	and.w	r3, r3, #1
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d059      	beq.n	8014032 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013f7e:	6a3b      	ldr	r3, [r7, #32]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d04f      	beq.n	8014024 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	685b      	ldr	r3, [r3, #4]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d006      	beq.n	8013f9a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	685b      	ldr	r3, [r3, #4]
 8013f90:	685b      	ldr	r3, [r3, #4]
 8013f92:	889b      	ldrh	r3, [r3, #4]
 8013f94:	b29b      	uxth	r3, r3
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d002      	beq.n	8013fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	623b      	str	r3, [r7, #32]
 8013f9e:	e041      	b.n	8014024 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013faa:	e012      	b.n	8013fd2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fae:	685b      	ldr	r3, [r3, #4]
 8013fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb4:	88db      	ldrh	r3, [r3, #6]
 8013fb6:	b29a      	uxth	r2, r3
 8013fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fba:	889b      	ldrh	r3, [r3, #4]
 8013fbc:	b29b      	uxth	r3, r3
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	d002      	beq.n	8013fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	623b      	str	r3, [r7, #32]
            break;
 8013fc6:	e007      	b.n	8013fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fca:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d1e9      	bne.n	8013fac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013fd8:	6a3b      	ldr	r3, [r7, #32]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d022      	beq.n	8014024 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	685b      	ldr	r3, [r3, #4]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d106      	bne.n	8013ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013fe6:	4b15      	ldr	r3, [pc, #84]	; (801403c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013fe8:	f240 12df 	movw	r2, #479	; 0x1df
 8013fec:	4917      	ldr	r1, [pc, #92]	; (801404c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013fee:	4815      	ldr	r0, [pc, #84]	; (8014044 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013ff0:	f00c fe8c 	bl	8020d0c <iprintf>
          LWIP_ASSERT("sanity check",
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	685b      	ldr	r3, [r3, #4]
 8013ff8:	685b      	ldr	r3, [r3, #4]
 8013ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	d106      	bne.n	801400e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014000:	4b0e      	ldr	r3, [pc, #56]	; (801403c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014002:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014006:	4911      	ldr	r1, [pc, #68]	; (801404c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014008:	480e      	ldr	r0, [pc, #56]	; (8014044 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801400a:	f00c fe7f 	bl	8020d0c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d006      	beq.n	8014024 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014016:	4b09      	ldr	r3, [pc, #36]	; (801403c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014018:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801401c:	490c      	ldr	r1, [pc, #48]	; (8014050 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801401e:	4809      	ldr	r0, [pc, #36]	; (8014044 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014020:	f00c fe74 	bl	8020d0c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014024:	6a3b      	ldr	r3, [r7, #32]
 8014026:	2b00      	cmp	r3, #0
 8014028:	bf14      	ite	ne
 801402a:	2301      	movne	r3, #1
 801402c:	2300      	moveq	r3, #0
 801402e:	b2db      	uxtb	r3, r3
 8014030:	e000      	b.n	8014034 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014032:	2300      	movs	r3, #0
}
 8014034:	4618      	mov	r0, r3
 8014036:	3730      	adds	r7, #48	; 0x30
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}
 801403c:	080265a4 	.word	0x080265a4
 8014040:	080266b0 	.word	0x080266b0
 8014044:	08026614 	.word	0x08026614
 8014048:	080266d0 	.word	0x080266d0
 801404c:	08026708 	.word	0x08026708
 8014050:	08026718 	.word	0x08026718

08014054 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014054:	b580      	push	{r7, lr}
 8014056:	b08e      	sub	sp, #56	; 0x38
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	685b      	ldr	r3, [r3, #4]
 8014060:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014064:	781b      	ldrb	r3, [r3, #0]
 8014066:	f003 030f 	and.w	r3, r3, #15
 801406a:	b2db      	uxtb	r3, r3
 801406c:	009b      	lsls	r3, r3, #2
 801406e:	b2db      	uxtb	r3, r3
 8014070:	2b14      	cmp	r3, #20
 8014072:	f040 8167 	bne.w	8014344 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014078:	88db      	ldrh	r3, [r3, #6]
 801407a:	b29b      	uxth	r3, r3
 801407c:	4618      	mov	r0, r3
 801407e:	f7fd ff37 	bl	8011ef0 <lwip_htons>
 8014082:	4603      	mov	r3, r0
 8014084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014088:	b29b      	uxth	r3, r3
 801408a:	00db      	lsls	r3, r3, #3
 801408c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801408e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014090:	885b      	ldrh	r3, [r3, #2]
 8014092:	b29b      	uxth	r3, r3
 8014094:	4618      	mov	r0, r3
 8014096:	f7fd ff2b 	bl	8011ef0 <lwip_htons>
 801409a:	4603      	mov	r3, r0
 801409c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140a0:	781b      	ldrb	r3, [r3, #0]
 80140a2:	f003 030f 	and.w	r3, r3, #15
 80140a6:	b2db      	uxtb	r3, r3
 80140a8:	009b      	lsls	r3, r3, #2
 80140aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80140ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80140b2:	b29b      	uxth	r3, r3
 80140b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80140b6:	429a      	cmp	r2, r3
 80140b8:	f0c0 8146 	bcc.w	8014348 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80140bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80140c0:	b29b      	uxth	r3, r3
 80140c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80140c4:	1ad3      	subs	r3, r2, r3
 80140c6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f001 fe95 	bl	8015df8 <pbuf_clen>
 80140ce:	4603      	mov	r3, r0
 80140d0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80140d2:	4b9f      	ldr	r3, [pc, #636]	; (8014350 <ip4_reass+0x2fc>)
 80140d4:	881b      	ldrh	r3, [r3, #0]
 80140d6:	461a      	mov	r2, r3
 80140d8:	8c3b      	ldrh	r3, [r7, #32]
 80140da:	4413      	add	r3, r2
 80140dc:	2b0a      	cmp	r3, #10
 80140de:	dd10      	ble.n	8014102 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80140e0:	8c3b      	ldrh	r3, [r7, #32]
 80140e2:	4619      	mov	r1, r3
 80140e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140e6:	f7ff fd81 	bl	8013bec <ip_reass_remove_oldest_datagram>
 80140ea:	4603      	mov	r3, r0
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	f000 812d 	beq.w	801434c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80140f2:	4b97      	ldr	r3, [pc, #604]	; (8014350 <ip4_reass+0x2fc>)
 80140f4:	881b      	ldrh	r3, [r3, #0]
 80140f6:	461a      	mov	r2, r3
 80140f8:	8c3b      	ldrh	r3, [r7, #32]
 80140fa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80140fc:	2b0a      	cmp	r3, #10
 80140fe:	f300 8125 	bgt.w	801434c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014102:	4b94      	ldr	r3, [pc, #592]	; (8014354 <ip4_reass+0x300>)
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	633b      	str	r3, [r7, #48]	; 0x30
 8014108:	e015      	b.n	8014136 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801410c:	695a      	ldr	r2, [r3, #20]
 801410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014110:	68db      	ldr	r3, [r3, #12]
 8014112:	429a      	cmp	r2, r3
 8014114:	d10c      	bne.n	8014130 <ip4_reass+0xdc>
 8014116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014118:	699a      	ldr	r2, [r3, #24]
 801411a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801411c:	691b      	ldr	r3, [r3, #16]
 801411e:	429a      	cmp	r2, r3
 8014120:	d106      	bne.n	8014130 <ip4_reass+0xdc>
 8014122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014124:	899a      	ldrh	r2, [r3, #12]
 8014126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014128:	889b      	ldrh	r3, [r3, #4]
 801412a:	b29b      	uxth	r3, r3
 801412c:	429a      	cmp	r2, r3
 801412e:	d006      	beq.n	801413e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	633b      	str	r3, [r7, #48]	; 0x30
 8014136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014138:	2b00      	cmp	r3, #0
 801413a:	d1e6      	bne.n	801410a <ip4_reass+0xb6>
 801413c:	e000      	b.n	8014140 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801413e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014142:	2b00      	cmp	r3, #0
 8014144:	d109      	bne.n	801415a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014146:	8c3b      	ldrh	r3, [r7, #32]
 8014148:	4619      	mov	r1, r3
 801414a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801414c:	f7ff fdb0 	bl	8013cb0 <ip_reass_enqueue_new_datagram>
 8014150:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014154:	2b00      	cmp	r3, #0
 8014156:	d11c      	bne.n	8014192 <ip4_reass+0x13e>
      goto nullreturn;
 8014158:	e109      	b.n	801436e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801415c:	88db      	ldrh	r3, [r3, #6]
 801415e:	b29b      	uxth	r3, r3
 8014160:	4618      	mov	r0, r3
 8014162:	f7fd fec5 	bl	8011ef0 <lwip_htons>
 8014166:	4603      	mov	r3, r0
 8014168:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801416c:	2b00      	cmp	r3, #0
 801416e:	d110      	bne.n	8014192 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014172:	89db      	ldrh	r3, [r3, #14]
 8014174:	4618      	mov	r0, r3
 8014176:	f7fd febb 	bl	8011ef0 <lwip_htons>
 801417a:	4603      	mov	r3, r0
 801417c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014180:	2b00      	cmp	r3, #0
 8014182:	d006      	beq.n	8014192 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014186:	3308      	adds	r3, #8
 8014188:	2214      	movs	r2, #20
 801418a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801418c:	4618      	mov	r0, r3
 801418e:	f00b fe9b 	bl	801fec8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014194:	88db      	ldrh	r3, [r3, #6]
 8014196:	b29b      	uxth	r3, r3
 8014198:	f003 0320 	and.w	r3, r3, #32
 801419c:	2b00      	cmp	r3, #0
 801419e:	bf0c      	ite	eq
 80141a0:	2301      	moveq	r3, #1
 80141a2:	2300      	movne	r3, #0
 80141a4:	b2db      	uxtb	r3, r3
 80141a6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80141a8:	69fb      	ldr	r3, [r7, #28]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d00e      	beq.n	80141cc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80141ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80141b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80141b2:	4413      	add	r3, r2
 80141b4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80141b6:	8b7a      	ldrh	r2, [r7, #26]
 80141b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80141ba:	429a      	cmp	r2, r3
 80141bc:	f0c0 80a0 	bcc.w	8014300 <ip4_reass+0x2ac>
 80141c0:	8b7b      	ldrh	r3, [r7, #26]
 80141c2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80141c6:	4293      	cmp	r3, r2
 80141c8:	f200 809a 	bhi.w	8014300 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80141cc:	69fa      	ldr	r2, [r7, #28]
 80141ce:	6879      	ldr	r1, [r7, #4]
 80141d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141d2:	f7ff fdd5 	bl	8013d80 <ip_reass_chain_frag_into_datagram_and_validate>
 80141d6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80141d8:	697b      	ldr	r3, [r7, #20]
 80141da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80141de:	f000 8091 	beq.w	8014304 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80141e2:	4b5b      	ldr	r3, [pc, #364]	; (8014350 <ip4_reass+0x2fc>)
 80141e4:	881a      	ldrh	r2, [r3, #0]
 80141e6:	8c3b      	ldrh	r3, [r7, #32]
 80141e8:	4413      	add	r3, r2
 80141ea:	b29a      	uxth	r2, r3
 80141ec:	4b58      	ldr	r3, [pc, #352]	; (8014350 <ip4_reass+0x2fc>)
 80141ee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80141f0:	69fb      	ldr	r3, [r7, #28]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d00d      	beq.n	8014212 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80141f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80141f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80141fa:	4413      	add	r3, r2
 80141fc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80141fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014200:	8a7a      	ldrh	r2, [r7, #18]
 8014202:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014206:	7f9b      	ldrb	r3, [r3, #30]
 8014208:	f043 0301 	orr.w	r3, r3, #1
 801420c:	b2da      	uxtb	r2, r3
 801420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014210:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014212:	697b      	ldr	r3, [r7, #20]
 8014214:	2b01      	cmp	r3, #1
 8014216:	d171      	bne.n	80142fc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801421a:	8b9b      	ldrh	r3, [r3, #28]
 801421c:	3314      	adds	r3, #20
 801421e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014222:	685b      	ldr	r3, [r3, #4]
 8014224:	685b      	ldr	r3, [r3, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801422c:	685b      	ldr	r3, [r3, #4]
 801422e:	685b      	ldr	r3, [r3, #4]
 8014230:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014234:	3308      	adds	r3, #8
 8014236:	2214      	movs	r2, #20
 8014238:	4619      	mov	r1, r3
 801423a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801423c:	f00b fe44 	bl	801fec8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014240:	8a3b      	ldrh	r3, [r7, #16]
 8014242:	4618      	mov	r0, r3
 8014244:	f7fd fe54 	bl	8011ef0 <lwip_htons>
 8014248:	4603      	mov	r3, r0
 801424a:	461a      	mov	r2, r3
 801424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801424e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014252:	2200      	movs	r2, #0
 8014254:	719a      	strb	r2, [r3, #6]
 8014256:	2200      	movs	r2, #0
 8014258:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801425c:	2200      	movs	r2, #0
 801425e:	729a      	strb	r2, [r3, #10]
 8014260:	2200      	movs	r2, #0
 8014262:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014266:	685b      	ldr	r3, [r3, #4]
 8014268:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801426a:	e00d      	b.n	8014288 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014272:	2114      	movs	r1, #20
 8014274:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014276:	f001 fcb1 	bl	8015bdc <pbuf_remove_header>
      pbuf_cat(p, r);
 801427a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f001 fdf5 	bl	8015e6c <pbuf_cat>
      r = iprh->next_pbuf;
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801428a:	2b00      	cmp	r3, #0
 801428c:	d1ee      	bne.n	801426c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801428e:	4b31      	ldr	r3, [pc, #196]	; (8014354 <ip4_reass+0x300>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014294:	429a      	cmp	r2, r3
 8014296:	d102      	bne.n	801429e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014298:	2300      	movs	r3, #0
 801429a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801429c:	e010      	b.n	80142c0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801429e:	4b2d      	ldr	r3, [pc, #180]	; (8014354 <ip4_reass+0x300>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80142a4:	e007      	b.n	80142b6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80142a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142ac:	429a      	cmp	r2, r3
 80142ae:	d006      	beq.n	80142be <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80142b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80142b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d1f4      	bne.n	80142a6 <ip4_reass+0x252>
 80142bc:	e000      	b.n	80142c0 <ip4_reass+0x26c>
          break;
 80142be:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80142c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80142c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142c4:	f7ff fd2e 	bl	8013d24 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f001 fd95 	bl	8015df8 <pbuf_clen>
 80142ce:	4603      	mov	r3, r0
 80142d0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80142d2:	4b1f      	ldr	r3, [pc, #124]	; (8014350 <ip4_reass+0x2fc>)
 80142d4:	881b      	ldrh	r3, [r3, #0]
 80142d6:	8c3a      	ldrh	r2, [r7, #32]
 80142d8:	429a      	cmp	r2, r3
 80142da:	d906      	bls.n	80142ea <ip4_reass+0x296>
 80142dc:	4b1e      	ldr	r3, [pc, #120]	; (8014358 <ip4_reass+0x304>)
 80142de:	f240 229b 	movw	r2, #667	; 0x29b
 80142e2:	491e      	ldr	r1, [pc, #120]	; (801435c <ip4_reass+0x308>)
 80142e4:	481e      	ldr	r0, [pc, #120]	; (8014360 <ip4_reass+0x30c>)
 80142e6:	f00c fd11 	bl	8020d0c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80142ea:	4b19      	ldr	r3, [pc, #100]	; (8014350 <ip4_reass+0x2fc>)
 80142ec:	881a      	ldrh	r2, [r3, #0]
 80142ee:	8c3b      	ldrh	r3, [r7, #32]
 80142f0:	1ad3      	subs	r3, r2, r3
 80142f2:	b29a      	uxth	r2, r3
 80142f4:	4b16      	ldr	r3, [pc, #88]	; (8014350 <ip4_reass+0x2fc>)
 80142f6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	e03c      	b.n	8014376 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80142fc:	2300      	movs	r3, #0
 80142fe:	e03a      	b.n	8014376 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8014300:	bf00      	nop
 8014302:	e000      	b.n	8014306 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014304:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014308:	2b00      	cmp	r3, #0
 801430a:	d106      	bne.n	801431a <ip4_reass+0x2c6>
 801430c:	4b12      	ldr	r3, [pc, #72]	; (8014358 <ip4_reass+0x304>)
 801430e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014312:	4914      	ldr	r1, [pc, #80]	; (8014364 <ip4_reass+0x310>)
 8014314:	4812      	ldr	r0, [pc, #72]	; (8014360 <ip4_reass+0x30c>)
 8014316:	f00c fcf9 	bl	8020d0c <iprintf>
  if (ipr->p == NULL) {
 801431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801431c:	685b      	ldr	r3, [r3, #4]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d124      	bne.n	801436c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014322:	4b0c      	ldr	r3, [pc, #48]	; (8014354 <ip4_reass+0x300>)
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014328:	429a      	cmp	r2, r3
 801432a:	d006      	beq.n	801433a <ip4_reass+0x2e6>
 801432c:	4b0a      	ldr	r3, [pc, #40]	; (8014358 <ip4_reass+0x304>)
 801432e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014332:	490d      	ldr	r1, [pc, #52]	; (8014368 <ip4_reass+0x314>)
 8014334:	480a      	ldr	r0, [pc, #40]	; (8014360 <ip4_reass+0x30c>)
 8014336:	f00c fce9 	bl	8020d0c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801433a:	2100      	movs	r1, #0
 801433c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801433e:	f7ff fcf1 	bl	8013d24 <ip_reass_dequeue_datagram>
 8014342:	e014      	b.n	801436e <ip4_reass+0x31a>
    goto nullreturn;
 8014344:	bf00      	nop
 8014346:	e012      	b.n	801436e <ip4_reass+0x31a>
    goto nullreturn;
 8014348:	bf00      	nop
 801434a:	e010      	b.n	801436e <ip4_reass+0x31a>
      goto nullreturn;
 801434c:	bf00      	nop
 801434e:	e00e      	b.n	801436e <ip4_reass+0x31a>
 8014350:	24007790 	.word	0x24007790
 8014354:	2400778c 	.word	0x2400778c
 8014358:	080265a4 	.word	0x080265a4
 801435c:	0802673c 	.word	0x0802673c
 8014360:	08026614 	.word	0x08026614
 8014364:	08026758 	.word	0x08026758
 8014368:	08026764 	.word	0x08026764
  }

nullreturn:
 801436c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801436e:	6878      	ldr	r0, [r7, #4]
 8014370:	f001 fcba 	bl	8015ce8 <pbuf_free>
  return NULL;
 8014374:	2300      	movs	r3, #0
}
 8014376:	4618      	mov	r0, r3
 8014378:	3738      	adds	r7, #56	; 0x38
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}
 801437e:	bf00      	nop

08014380 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014384:	2005      	movs	r0, #5
 8014386:	f000 fdc9 	bl	8014f1c <memp_malloc>
 801438a:	4603      	mov	r3, r0
}
 801438c:	4618      	mov	r0, r3
 801438e:	bd80      	pop	{r7, pc}

08014390 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b082      	sub	sp, #8
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d106      	bne.n	80143ac <ip_frag_free_pbuf_custom_ref+0x1c>
 801439e:	4b07      	ldr	r3, [pc, #28]	; (80143bc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80143a0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80143a4:	4906      	ldr	r1, [pc, #24]	; (80143c0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80143a6:	4807      	ldr	r0, [pc, #28]	; (80143c4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80143a8:	f00c fcb0 	bl	8020d0c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80143ac:	6879      	ldr	r1, [r7, #4]
 80143ae:	2005      	movs	r0, #5
 80143b0:	f000 fe24 	bl	8014ffc <memp_free>
}
 80143b4:	bf00      	nop
 80143b6:	3708      	adds	r7, #8
 80143b8:	46bd      	mov	sp, r7
 80143ba:	bd80      	pop	{r7, pc}
 80143bc:	080265a4 	.word	0x080265a4
 80143c0:	08026784 	.word	0x08026784
 80143c4:	08026614 	.word	0x08026614

080143c8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b084      	sub	sp, #16
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d106      	bne.n	80143e8 <ipfrag_free_pbuf_custom+0x20>
 80143da:	4b11      	ldr	r3, [pc, #68]	; (8014420 <ipfrag_free_pbuf_custom+0x58>)
 80143dc:	f240 22ce 	movw	r2, #718	; 0x2ce
 80143e0:	4910      	ldr	r1, [pc, #64]	; (8014424 <ipfrag_free_pbuf_custom+0x5c>)
 80143e2:	4811      	ldr	r0, [pc, #68]	; (8014428 <ipfrag_free_pbuf_custom+0x60>)
 80143e4:	f00c fc92 	bl	8020d0c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80143e8:	68fa      	ldr	r2, [r7, #12]
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	429a      	cmp	r2, r3
 80143ee:	d006      	beq.n	80143fe <ipfrag_free_pbuf_custom+0x36>
 80143f0:	4b0b      	ldr	r3, [pc, #44]	; (8014420 <ipfrag_free_pbuf_custom+0x58>)
 80143f2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80143f6:	490d      	ldr	r1, [pc, #52]	; (801442c <ipfrag_free_pbuf_custom+0x64>)
 80143f8:	480b      	ldr	r0, [pc, #44]	; (8014428 <ipfrag_free_pbuf_custom+0x60>)
 80143fa:	f00c fc87 	bl	8020d0c <iprintf>
  if (pcr->original != NULL) {
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	695b      	ldr	r3, [r3, #20]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d004      	beq.n	8014410 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	695b      	ldr	r3, [r3, #20]
 801440a:	4618      	mov	r0, r3
 801440c:	f001 fc6c 	bl	8015ce8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014410:	68f8      	ldr	r0, [r7, #12]
 8014412:	f7ff ffbd 	bl	8014390 <ip_frag_free_pbuf_custom_ref>
}
 8014416:	bf00      	nop
 8014418:	3710      	adds	r7, #16
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}
 801441e:	bf00      	nop
 8014420:	080265a4 	.word	0x080265a4
 8014424:	08026790 	.word	0x08026790
 8014428:	08026614 	.word	0x08026614
 801442c:	0802679c 	.word	0x0802679c

08014430 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b094      	sub	sp, #80	; 0x50
 8014434:	af02      	add	r7, sp, #8
 8014436:	60f8      	str	r0, [r7, #12]
 8014438:	60b9      	str	r1, [r7, #8]
 801443a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801443c:	2300      	movs	r3, #0
 801443e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014446:	3b14      	subs	r3, #20
 8014448:	2b00      	cmp	r3, #0
 801444a:	da00      	bge.n	801444e <ip4_frag+0x1e>
 801444c:	3307      	adds	r3, #7
 801444e:	10db      	asrs	r3, r3, #3
 8014450:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014452:	2314      	movs	r3, #20
 8014454:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	685b      	ldr	r3, [r3, #4]
 801445a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801445c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801445e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014462:	781b      	ldrb	r3, [r3, #0]
 8014464:	f003 030f 	and.w	r3, r3, #15
 8014468:	b2db      	uxtb	r3, r3
 801446a:	009b      	lsls	r3, r3, #2
 801446c:	b2db      	uxtb	r3, r3
 801446e:	2b14      	cmp	r3, #20
 8014470:	d002      	beq.n	8014478 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014472:	f06f 0305 	mvn.w	r3, #5
 8014476:	e110      	b.n	801469a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	895b      	ldrh	r3, [r3, #10]
 801447c:	2b13      	cmp	r3, #19
 801447e:	d809      	bhi.n	8014494 <ip4_frag+0x64>
 8014480:	4b88      	ldr	r3, [pc, #544]	; (80146a4 <ip4_frag+0x274>)
 8014482:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014486:	4988      	ldr	r1, [pc, #544]	; (80146a8 <ip4_frag+0x278>)
 8014488:	4888      	ldr	r0, [pc, #544]	; (80146ac <ip4_frag+0x27c>)
 801448a:	f00c fc3f 	bl	8020d0c <iprintf>
 801448e:	f06f 0305 	mvn.w	r3, #5
 8014492:	e102      	b.n	801469a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014496:	88db      	ldrh	r3, [r3, #6]
 8014498:	b29b      	uxth	r3, r3
 801449a:	4618      	mov	r0, r3
 801449c:	f7fd fd28 	bl	8011ef0 <lwip_htons>
 80144a0:	4603      	mov	r3, r0
 80144a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80144a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80144a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80144aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80144ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80144b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80144b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	891b      	ldrh	r3, [r3, #8]
 80144ba:	3b14      	subs	r3, #20
 80144bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80144c0:	e0e1      	b.n	8014686 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80144c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80144c4:	00db      	lsls	r3, r3, #3
 80144c6:	b29b      	uxth	r3, r3
 80144c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80144cc:	4293      	cmp	r3, r2
 80144ce:	bf28      	it	cs
 80144d0:	4613      	movcs	r3, r2
 80144d2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80144d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80144d8:	2114      	movs	r1, #20
 80144da:	200e      	movs	r0, #14
 80144dc:	f001 f920 	bl	8015720 <pbuf_alloc>
 80144e0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80144e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	f000 80d5 	beq.w	8014694 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80144ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ec:	895b      	ldrh	r3, [r3, #10]
 80144ee:	2b13      	cmp	r3, #19
 80144f0:	d806      	bhi.n	8014500 <ip4_frag+0xd0>
 80144f2:	4b6c      	ldr	r3, [pc, #432]	; (80146a4 <ip4_frag+0x274>)
 80144f4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80144f8:	496d      	ldr	r1, [pc, #436]	; (80146b0 <ip4_frag+0x280>)
 80144fa:	486c      	ldr	r0, [pc, #432]	; (80146ac <ip4_frag+0x27c>)
 80144fc:	f00c fc06 	bl	8020d0c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014502:	685b      	ldr	r3, [r3, #4]
 8014504:	2214      	movs	r2, #20
 8014506:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014508:	4618      	mov	r0, r3
 801450a:	f00b fcdd 	bl	801fec8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014510:	685b      	ldr	r3, [r3, #4]
 8014512:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014514:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014516:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801451a:	e064      	b.n	80145e6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	895a      	ldrh	r2, [r3, #10]
 8014520:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014522:	1ad3      	subs	r3, r2, r3
 8014524:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	895b      	ldrh	r3, [r3, #10]
 801452a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801452c:	429a      	cmp	r2, r3
 801452e:	d906      	bls.n	801453e <ip4_frag+0x10e>
 8014530:	4b5c      	ldr	r3, [pc, #368]	; (80146a4 <ip4_frag+0x274>)
 8014532:	f240 322d 	movw	r2, #813	; 0x32d
 8014536:	495f      	ldr	r1, [pc, #380]	; (80146b4 <ip4_frag+0x284>)
 8014538:	485c      	ldr	r0, [pc, #368]	; (80146ac <ip4_frag+0x27c>)
 801453a:	f00c fbe7 	bl	8020d0c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801453e:	8bfa      	ldrh	r2, [r7, #30]
 8014540:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014544:	4293      	cmp	r3, r2
 8014546:	bf28      	it	cs
 8014548:	4613      	movcs	r3, r2
 801454a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801454e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014552:	2b00      	cmp	r3, #0
 8014554:	d105      	bne.n	8014562 <ip4_frag+0x132>
        poff = 0;
 8014556:	2300      	movs	r3, #0
 8014558:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	60fb      	str	r3, [r7, #12]
        continue;
 8014560:	e041      	b.n	80145e6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014562:	f7ff ff0d 	bl	8014380 <ip_frag_alloc_pbuf_custom_ref>
 8014566:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014568:	69bb      	ldr	r3, [r7, #24]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d103      	bne.n	8014576 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801456e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014570:	f001 fbba 	bl	8015ce8 <pbuf_free>
        goto memerr;
 8014574:	e08f      	b.n	8014696 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014576:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801457c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801457e:	4413      	add	r3, r2
 8014580:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014584:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014588:	9201      	str	r2, [sp, #4]
 801458a:	9300      	str	r3, [sp, #0]
 801458c:	4603      	mov	r3, r0
 801458e:	2241      	movs	r2, #65	; 0x41
 8014590:	2000      	movs	r0, #0
 8014592:	f001 f9ef 	bl	8015974 <pbuf_alloced_custom>
 8014596:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014598:	697b      	ldr	r3, [r7, #20]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d106      	bne.n	80145ac <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801459e:	69b8      	ldr	r0, [r7, #24]
 80145a0:	f7ff fef6 	bl	8014390 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80145a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145a6:	f001 fb9f 	bl	8015ce8 <pbuf_free>
        goto memerr;
 80145aa:	e074      	b.n	8014696 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80145ac:	68f8      	ldr	r0, [r7, #12]
 80145ae:	f001 fc3b 	bl	8015e28 <pbuf_ref>
      pcr->original = p;
 80145b2:	69bb      	ldr	r3, [r7, #24]
 80145b4:	68fa      	ldr	r2, [r7, #12]
 80145b6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80145b8:	69bb      	ldr	r3, [r7, #24]
 80145ba:	4a3f      	ldr	r2, [pc, #252]	; (80146b8 <ip4_frag+0x288>)
 80145bc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80145be:	6979      	ldr	r1, [r7, #20]
 80145c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145c2:	f001 fc53 	bl	8015e6c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80145c6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80145ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80145ce:	1ad3      	subs	r3, r2, r3
 80145d0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80145d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d004      	beq.n	80145e6 <ip4_frag+0x1b6>
        poff = 0;
 80145dc:	2300      	movs	r3, #0
 80145de:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80145e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d196      	bne.n	801451c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80145ee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80145f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80145f4:	4413      	add	r3, r2
 80145f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80145f8:	68bb      	ldr	r3, [r7, #8]
 80145fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80145fc:	f1a3 0213 	sub.w	r2, r3, #19
 8014600:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014604:	429a      	cmp	r2, r3
 8014606:	bfcc      	ite	gt
 8014608:	2301      	movgt	r3, #1
 801460a:	2300      	movle	r3, #0
 801460c:	b2db      	uxtb	r3, r3
 801460e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014610:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014618:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801461a:	6a3b      	ldr	r3, [r7, #32]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d002      	beq.n	8014626 <ip4_frag+0x1f6>
 8014620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014622:	2b00      	cmp	r3, #0
 8014624:	d003      	beq.n	801462e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014626:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014628:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801462c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801462e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014630:	4618      	mov	r0, r3
 8014632:	f7fd fc5d 	bl	8011ef0 <lwip_htons>
 8014636:	4603      	mov	r3, r0
 8014638:	461a      	mov	r2, r3
 801463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801463c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801463e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014640:	3314      	adds	r3, #20
 8014642:	b29b      	uxth	r3, r3
 8014644:	4618      	mov	r0, r3
 8014646:	f7fd fc53 	bl	8011ef0 <lwip_htons>
 801464a:	4603      	mov	r3, r0
 801464c:	461a      	mov	r2, r3
 801464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014650:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014654:	2200      	movs	r2, #0
 8014656:	729a      	strb	r2, [r3, #10]
 8014658:	2200      	movs	r2, #0
 801465a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801465c:	68bb      	ldr	r3, [r7, #8]
 801465e:	695b      	ldr	r3, [r3, #20]
 8014660:	687a      	ldr	r2, [r7, #4]
 8014662:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014664:	68b8      	ldr	r0, [r7, #8]
 8014666:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014668:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801466a:	f001 fb3d 	bl	8015ce8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801466e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014672:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014674:	1ad3      	subs	r3, r2, r3
 8014676:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801467a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801467e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014680:	4413      	add	r3, r2
 8014682:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014686:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801468a:	2b00      	cmp	r3, #0
 801468c:	f47f af19 	bne.w	80144c2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014690:	2300      	movs	r3, #0
 8014692:	e002      	b.n	801469a <ip4_frag+0x26a>
      goto memerr;
 8014694:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801469a:	4618      	mov	r0, r3
 801469c:	3748      	adds	r7, #72	; 0x48
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}
 80146a2:	bf00      	nop
 80146a4:	080265a4 	.word	0x080265a4
 80146a8:	080267a8 	.word	0x080267a8
 80146ac:	08026614 	.word	0x08026614
 80146b0:	080267c4 	.word	0x080267c4
 80146b4:	080267e4 	.word	0x080267e4
 80146b8:	080143c9 	.word	0x080143c9

080146bc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80146bc:	b480      	push	{r7}
 80146be:	b083      	sub	sp, #12
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	4603      	mov	r3, r0
 80146c4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80146c6:	4b05      	ldr	r3, [pc, #20]	; (80146dc <ptr_to_mem+0x20>)
 80146c8:	681a      	ldr	r2, [r3, #0]
 80146ca:	88fb      	ldrh	r3, [r7, #6]
 80146cc:	4413      	add	r3, r2
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	370c      	adds	r7, #12
 80146d2:	46bd      	mov	sp, r7
 80146d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d8:	4770      	bx	lr
 80146da:	bf00      	nop
 80146dc:	24007794 	.word	0x24007794

080146e0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80146e0:	b480      	push	{r7}
 80146e2:	b083      	sub	sp, #12
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80146e8:	4b05      	ldr	r3, [pc, #20]	; (8014700 <mem_to_ptr+0x20>)
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	687a      	ldr	r2, [r7, #4]
 80146ee:	1ad3      	subs	r3, r2, r3
 80146f0:	b29b      	uxth	r3, r3
}
 80146f2:	4618      	mov	r0, r3
 80146f4:	370c      	adds	r7, #12
 80146f6:	46bd      	mov	sp, r7
 80146f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fc:	4770      	bx	lr
 80146fe:	bf00      	nop
 8014700:	24007794 	.word	0x24007794

08014704 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8014704:	b590      	push	{r4, r7, lr}
 8014706:	b085      	sub	sp, #20
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801470c:	4b45      	ldr	r3, [pc, #276]	; (8014824 <plug_holes+0x120>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	687a      	ldr	r2, [r7, #4]
 8014712:	429a      	cmp	r2, r3
 8014714:	d206      	bcs.n	8014724 <plug_holes+0x20>
 8014716:	4b44      	ldr	r3, [pc, #272]	; (8014828 <plug_holes+0x124>)
 8014718:	f240 12df 	movw	r2, #479	; 0x1df
 801471c:	4943      	ldr	r1, [pc, #268]	; (801482c <plug_holes+0x128>)
 801471e:	4844      	ldr	r0, [pc, #272]	; (8014830 <plug_holes+0x12c>)
 8014720:	f00c faf4 	bl	8020d0c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8014724:	4b43      	ldr	r3, [pc, #268]	; (8014834 <plug_holes+0x130>)
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	687a      	ldr	r2, [r7, #4]
 801472a:	429a      	cmp	r2, r3
 801472c:	d306      	bcc.n	801473c <plug_holes+0x38>
 801472e:	4b3e      	ldr	r3, [pc, #248]	; (8014828 <plug_holes+0x124>)
 8014730:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014734:	4940      	ldr	r1, [pc, #256]	; (8014838 <plug_holes+0x134>)
 8014736:	483e      	ldr	r0, [pc, #248]	; (8014830 <plug_holes+0x12c>)
 8014738:	f00c fae8 	bl	8020d0c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	791b      	ldrb	r3, [r3, #4]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d006      	beq.n	8014752 <plug_holes+0x4e>
 8014744:	4b38      	ldr	r3, [pc, #224]	; (8014828 <plug_holes+0x124>)
 8014746:	f240 12e1 	movw	r2, #481	; 0x1e1
 801474a:	493c      	ldr	r1, [pc, #240]	; (801483c <plug_holes+0x138>)
 801474c:	4838      	ldr	r0, [pc, #224]	; (8014830 <plug_holes+0x12c>)
 801474e:	f00c fadd 	bl	8020d0c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	881b      	ldrh	r3, [r3, #0]
 8014756:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801475a:	d906      	bls.n	801476a <plug_holes+0x66>
 801475c:	4b32      	ldr	r3, [pc, #200]	; (8014828 <plug_holes+0x124>)
 801475e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8014762:	4937      	ldr	r1, [pc, #220]	; (8014840 <plug_holes+0x13c>)
 8014764:	4832      	ldr	r0, [pc, #200]	; (8014830 <plug_holes+0x12c>)
 8014766:	f00c fad1 	bl	8020d0c <iprintf>

  nmem = ptr_to_mem(mem->next);
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	881b      	ldrh	r3, [r3, #0]
 801476e:	4618      	mov	r0, r3
 8014770:	f7ff ffa4 	bl	80146bc <ptr_to_mem>
 8014774:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8014776:	687a      	ldr	r2, [r7, #4]
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	429a      	cmp	r2, r3
 801477c:	d024      	beq.n	80147c8 <plug_holes+0xc4>
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	791b      	ldrb	r3, [r3, #4]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d120      	bne.n	80147c8 <plug_holes+0xc4>
 8014786:	4b2b      	ldr	r3, [pc, #172]	; (8014834 <plug_holes+0x130>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	68fa      	ldr	r2, [r7, #12]
 801478c:	429a      	cmp	r2, r3
 801478e:	d01b      	beq.n	80147c8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8014790:	4b2c      	ldr	r3, [pc, #176]	; (8014844 <plug_holes+0x140>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	68fa      	ldr	r2, [r7, #12]
 8014796:	429a      	cmp	r2, r3
 8014798:	d102      	bne.n	80147a0 <plug_holes+0x9c>
      lfree = mem;
 801479a:	4a2a      	ldr	r2, [pc, #168]	; (8014844 <plug_holes+0x140>)
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	881a      	ldrh	r2, [r3, #0]
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	881b      	ldrh	r3, [r3, #0]
 80147ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80147b0:	d00a      	beq.n	80147c8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	881b      	ldrh	r3, [r3, #0]
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7ff ff80 	bl	80146bc <ptr_to_mem>
 80147bc:	4604      	mov	r4, r0
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f7ff ff8e 	bl	80146e0 <mem_to_ptr>
 80147c4:	4603      	mov	r3, r0
 80147c6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	885b      	ldrh	r3, [r3, #2]
 80147cc:	4618      	mov	r0, r3
 80147ce:	f7ff ff75 	bl	80146bc <ptr_to_mem>
 80147d2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80147d4:	68ba      	ldr	r2, [r7, #8]
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	429a      	cmp	r2, r3
 80147da:	d01f      	beq.n	801481c <plug_holes+0x118>
 80147dc:	68bb      	ldr	r3, [r7, #8]
 80147de:	791b      	ldrb	r3, [r3, #4]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d11b      	bne.n	801481c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80147e4:	4b17      	ldr	r3, [pc, #92]	; (8014844 <plug_holes+0x140>)
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	687a      	ldr	r2, [r7, #4]
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d102      	bne.n	80147f4 <plug_holes+0xf0>
      lfree = pmem;
 80147ee:	4a15      	ldr	r2, [pc, #84]	; (8014844 <plug_holes+0x140>)
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	881a      	ldrh	r2, [r3, #0]
 80147f8:	68bb      	ldr	r3, [r7, #8]
 80147fa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	881b      	ldrh	r3, [r3, #0]
 8014800:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014804:	d00a      	beq.n	801481c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	881b      	ldrh	r3, [r3, #0]
 801480a:	4618      	mov	r0, r3
 801480c:	f7ff ff56 	bl	80146bc <ptr_to_mem>
 8014810:	4604      	mov	r4, r0
 8014812:	68b8      	ldr	r0, [r7, #8]
 8014814:	f7ff ff64 	bl	80146e0 <mem_to_ptr>
 8014818:	4603      	mov	r3, r0
 801481a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801481c:	bf00      	nop
 801481e:	3714      	adds	r7, #20
 8014820:	46bd      	mov	sp, r7
 8014822:	bd90      	pop	{r4, r7, pc}
 8014824:	24007794 	.word	0x24007794
 8014828:	080267f4 	.word	0x080267f4
 801482c:	08026850 	.word	0x08026850
 8014830:	08026868 	.word	0x08026868
 8014834:	24007798 	.word	0x24007798
 8014838:	08026890 	.word	0x08026890
 801483c:	080268ac 	.word	0x080268ac
 8014840:	080268c8 	.word	0x080268c8
 8014844:	2400779c 	.word	0x2400779c

08014848 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801484e:	4b16      	ldr	r3, [pc, #88]	; (80148a8 <mem_init+0x60>)
 8014850:	4a16      	ldr	r2, [pc, #88]	; (80148ac <mem_init+0x64>)
 8014852:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8014854:	4b14      	ldr	r3, [pc, #80]	; (80148a8 <mem_init+0x60>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014860:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2200      	movs	r2, #0
 8014866:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2200      	movs	r2, #0
 801486c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801486e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8014872:	f7ff ff23 	bl	80146bc <ptr_to_mem>
 8014876:	4603      	mov	r3, r0
 8014878:	4a0d      	ldr	r2, [pc, #52]	; (80148b0 <mem_init+0x68>)
 801487a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801487c:	4b0c      	ldr	r3, [pc, #48]	; (80148b0 <mem_init+0x68>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	2201      	movs	r2, #1
 8014882:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8014884:	4b0a      	ldr	r3, [pc, #40]	; (80148b0 <mem_init+0x68>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801488c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801488e:	4b08      	ldr	r3, [pc, #32]	; (80148b0 <mem_init+0x68>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014896:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8014898:	4b03      	ldr	r3, [pc, #12]	; (80148a8 <mem_init+0x60>)
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	4a05      	ldr	r2, [pc, #20]	; (80148b4 <mem_init+0x6c>)
 801489e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80148a0:	bf00      	nop
 80148a2:	3708      	adds	r7, #8
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}
 80148a8:	24007794 	.word	0x24007794
 80148ac:	30044000 	.word	0x30044000
 80148b0:	24007798 	.word	0x24007798
 80148b4:	2400779c 	.word	0x2400779c

080148b8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b086      	sub	sp, #24
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f7ff ff0d 	bl	80146e0 <mem_to_ptr>
 80148c6:	4603      	mov	r3, r0
 80148c8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	881b      	ldrh	r3, [r3, #0]
 80148ce:	4618      	mov	r0, r3
 80148d0:	f7ff fef4 	bl	80146bc <ptr_to_mem>
 80148d4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	885b      	ldrh	r3, [r3, #2]
 80148da:	4618      	mov	r0, r3
 80148dc:	f7ff feee 	bl	80146bc <ptr_to_mem>
 80148e0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	881b      	ldrh	r3, [r3, #0]
 80148e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80148ea:	d818      	bhi.n	801491e <mem_link_valid+0x66>
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	885b      	ldrh	r3, [r3, #2]
 80148f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80148f4:	d813      	bhi.n	801491e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80148fa:	8afa      	ldrh	r2, [r7, #22]
 80148fc:	429a      	cmp	r2, r3
 80148fe:	d004      	beq.n	801490a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	881b      	ldrh	r3, [r3, #0]
 8014904:	8afa      	ldrh	r2, [r7, #22]
 8014906:	429a      	cmp	r2, r3
 8014908:	d109      	bne.n	801491e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801490a:	4b08      	ldr	r3, [pc, #32]	; (801492c <mem_link_valid+0x74>)
 801490c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801490e:	693a      	ldr	r2, [r7, #16]
 8014910:	429a      	cmp	r2, r3
 8014912:	d006      	beq.n	8014922 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014914:	693b      	ldr	r3, [r7, #16]
 8014916:	885b      	ldrh	r3, [r3, #2]
 8014918:	8afa      	ldrh	r2, [r7, #22]
 801491a:	429a      	cmp	r2, r3
 801491c:	d001      	beq.n	8014922 <mem_link_valid+0x6a>
    return 0;
 801491e:	2300      	movs	r3, #0
 8014920:	e000      	b.n	8014924 <mem_link_valid+0x6c>
  }
  return 1;
 8014922:	2301      	movs	r3, #1
}
 8014924:	4618      	mov	r0, r3
 8014926:	3718      	adds	r7, #24
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}
 801492c:	24007798 	.word	0x24007798

08014930 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b084      	sub	sp, #16
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d04c      	beq.n	80149d8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	f003 0303 	and.w	r3, r3, #3
 8014944:	2b00      	cmp	r3, #0
 8014946:	d007      	beq.n	8014958 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8014948:	4b25      	ldr	r3, [pc, #148]	; (80149e0 <mem_free+0xb0>)
 801494a:	f240 2273 	movw	r2, #627	; 0x273
 801494e:	4925      	ldr	r1, [pc, #148]	; (80149e4 <mem_free+0xb4>)
 8014950:	4825      	ldr	r0, [pc, #148]	; (80149e8 <mem_free+0xb8>)
 8014952:	f00c f9db 	bl	8020d0c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8014956:	e040      	b.n	80149da <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	3b08      	subs	r3, #8
 801495c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801495e:	4b23      	ldr	r3, [pc, #140]	; (80149ec <mem_free+0xbc>)
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	68fa      	ldr	r2, [r7, #12]
 8014964:	429a      	cmp	r2, r3
 8014966:	d306      	bcc.n	8014976 <mem_free+0x46>
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	f103 020c 	add.w	r2, r3, #12
 801496e:	4b20      	ldr	r3, [pc, #128]	; (80149f0 <mem_free+0xc0>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	429a      	cmp	r2, r3
 8014974:	d907      	bls.n	8014986 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8014976:	4b1a      	ldr	r3, [pc, #104]	; (80149e0 <mem_free+0xb0>)
 8014978:	f240 227f 	movw	r2, #639	; 0x27f
 801497c:	491d      	ldr	r1, [pc, #116]	; (80149f4 <mem_free+0xc4>)
 801497e:	481a      	ldr	r0, [pc, #104]	; (80149e8 <mem_free+0xb8>)
 8014980:	f00c f9c4 	bl	8020d0c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8014984:	e029      	b.n	80149da <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	791b      	ldrb	r3, [r3, #4]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d107      	bne.n	801499e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801498e:	4b14      	ldr	r3, [pc, #80]	; (80149e0 <mem_free+0xb0>)
 8014990:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8014994:	4918      	ldr	r1, [pc, #96]	; (80149f8 <mem_free+0xc8>)
 8014996:	4814      	ldr	r0, [pc, #80]	; (80149e8 <mem_free+0xb8>)
 8014998:	f00c f9b8 	bl	8020d0c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801499c:	e01d      	b.n	80149da <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801499e:	68f8      	ldr	r0, [r7, #12]
 80149a0:	f7ff ff8a 	bl	80148b8 <mem_link_valid>
 80149a4:	4603      	mov	r3, r0
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d107      	bne.n	80149ba <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80149aa:	4b0d      	ldr	r3, [pc, #52]	; (80149e0 <mem_free+0xb0>)
 80149ac:	f240 2295 	movw	r2, #661	; 0x295
 80149b0:	4912      	ldr	r1, [pc, #72]	; (80149fc <mem_free+0xcc>)
 80149b2:	480d      	ldr	r0, [pc, #52]	; (80149e8 <mem_free+0xb8>)
 80149b4:	f00c f9aa 	bl	8020d0c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80149b8:	e00f      	b.n	80149da <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	2200      	movs	r2, #0
 80149be:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80149c0:	4b0f      	ldr	r3, [pc, #60]	; (8014a00 <mem_free+0xd0>)
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	68fa      	ldr	r2, [r7, #12]
 80149c6:	429a      	cmp	r2, r3
 80149c8:	d202      	bcs.n	80149d0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80149ca:	4a0d      	ldr	r2, [pc, #52]	; (8014a00 <mem_free+0xd0>)
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80149d0:	68f8      	ldr	r0, [r7, #12]
 80149d2:	f7ff fe97 	bl	8014704 <plug_holes>
 80149d6:	e000      	b.n	80149da <mem_free+0xaa>
    return;
 80149d8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80149da:	3710      	adds	r7, #16
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}
 80149e0:	080267f4 	.word	0x080267f4
 80149e4:	080268f4 	.word	0x080268f4
 80149e8:	08026868 	.word	0x08026868
 80149ec:	24007794 	.word	0x24007794
 80149f0:	24007798 	.word	0x24007798
 80149f4:	08026918 	.word	0x08026918
 80149f8:	08026934 	.word	0x08026934
 80149fc:	0802695c 	.word	0x0802695c
 8014a00:	2400779c 	.word	0x2400779c

08014a04 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b088      	sub	sp, #32
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
 8014a0c:	460b      	mov	r3, r1
 8014a0e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8014a10:	887b      	ldrh	r3, [r7, #2]
 8014a12:	3303      	adds	r3, #3
 8014a14:	b29b      	uxth	r3, r3
 8014a16:	f023 0303 	bic.w	r3, r3, #3
 8014a1a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8014a1c:	8bfb      	ldrh	r3, [r7, #30]
 8014a1e:	2b0b      	cmp	r3, #11
 8014a20:	d801      	bhi.n	8014a26 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8014a22:	230c      	movs	r3, #12
 8014a24:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8014a26:	8bfb      	ldrh	r3, [r7, #30]
 8014a28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014a2c:	d803      	bhi.n	8014a36 <mem_trim+0x32>
 8014a2e:	8bfa      	ldrh	r2, [r7, #30]
 8014a30:	887b      	ldrh	r3, [r7, #2]
 8014a32:	429a      	cmp	r2, r3
 8014a34:	d201      	bcs.n	8014a3a <mem_trim+0x36>
    return NULL;
 8014a36:	2300      	movs	r3, #0
 8014a38:	e0cc      	b.n	8014bd4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8014a3a:	4b68      	ldr	r3, [pc, #416]	; (8014bdc <mem_trim+0x1d8>)
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	687a      	ldr	r2, [r7, #4]
 8014a40:	429a      	cmp	r2, r3
 8014a42:	d304      	bcc.n	8014a4e <mem_trim+0x4a>
 8014a44:	4b66      	ldr	r3, [pc, #408]	; (8014be0 <mem_trim+0x1dc>)
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	687a      	ldr	r2, [r7, #4]
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	d306      	bcc.n	8014a5c <mem_trim+0x58>
 8014a4e:	4b65      	ldr	r3, [pc, #404]	; (8014be4 <mem_trim+0x1e0>)
 8014a50:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014a54:	4964      	ldr	r1, [pc, #400]	; (8014be8 <mem_trim+0x1e4>)
 8014a56:	4865      	ldr	r0, [pc, #404]	; (8014bec <mem_trim+0x1e8>)
 8014a58:	f00c f958 	bl	8020d0c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8014a5c:	4b5f      	ldr	r3, [pc, #380]	; (8014bdc <mem_trim+0x1d8>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	687a      	ldr	r2, [r7, #4]
 8014a62:	429a      	cmp	r2, r3
 8014a64:	d304      	bcc.n	8014a70 <mem_trim+0x6c>
 8014a66:	4b5e      	ldr	r3, [pc, #376]	; (8014be0 <mem_trim+0x1dc>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	687a      	ldr	r2, [r7, #4]
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	d301      	bcc.n	8014a74 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	e0af      	b.n	8014bd4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	3b08      	subs	r3, #8
 8014a78:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8014a7a:	69b8      	ldr	r0, [r7, #24]
 8014a7c:	f7ff fe30 	bl	80146e0 <mem_to_ptr>
 8014a80:	4603      	mov	r3, r0
 8014a82:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8014a84:	69bb      	ldr	r3, [r7, #24]
 8014a86:	881a      	ldrh	r2, [r3, #0]
 8014a88:	8afb      	ldrh	r3, [r7, #22]
 8014a8a:	1ad3      	subs	r3, r2, r3
 8014a8c:	b29b      	uxth	r3, r3
 8014a8e:	3b08      	subs	r3, #8
 8014a90:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8014a92:	8bfa      	ldrh	r2, [r7, #30]
 8014a94:	8abb      	ldrh	r3, [r7, #20]
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d906      	bls.n	8014aa8 <mem_trim+0xa4>
 8014a9a:	4b52      	ldr	r3, [pc, #328]	; (8014be4 <mem_trim+0x1e0>)
 8014a9c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8014aa0:	4953      	ldr	r1, [pc, #332]	; (8014bf0 <mem_trim+0x1ec>)
 8014aa2:	4852      	ldr	r0, [pc, #328]	; (8014bec <mem_trim+0x1e8>)
 8014aa4:	f00c f932 	bl	8020d0c <iprintf>
  if (newsize > size) {
 8014aa8:	8bfa      	ldrh	r2, [r7, #30]
 8014aaa:	8abb      	ldrh	r3, [r7, #20]
 8014aac:	429a      	cmp	r2, r3
 8014aae:	d901      	bls.n	8014ab4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	e08f      	b.n	8014bd4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8014ab4:	8bfa      	ldrh	r2, [r7, #30]
 8014ab6:	8abb      	ldrh	r3, [r7, #20]
 8014ab8:	429a      	cmp	r2, r3
 8014aba:	d101      	bne.n	8014ac0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	e089      	b.n	8014bd4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8014ac0:	69bb      	ldr	r3, [r7, #24]
 8014ac2:	881b      	ldrh	r3, [r3, #0]
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f7ff fdf9 	bl	80146bc <ptr_to_mem>
 8014aca:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8014acc:	693b      	ldr	r3, [r7, #16]
 8014ace:	791b      	ldrb	r3, [r3, #4]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d13f      	bne.n	8014b54 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014ad4:	69bb      	ldr	r3, [r7, #24]
 8014ad6:	881b      	ldrh	r3, [r3, #0]
 8014ad8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014adc:	d106      	bne.n	8014aec <mem_trim+0xe8>
 8014ade:	4b41      	ldr	r3, [pc, #260]	; (8014be4 <mem_trim+0x1e0>)
 8014ae0:	f240 22f5 	movw	r2, #757	; 0x2f5
 8014ae4:	4943      	ldr	r1, [pc, #268]	; (8014bf4 <mem_trim+0x1f0>)
 8014ae6:	4841      	ldr	r0, [pc, #260]	; (8014bec <mem_trim+0x1e8>)
 8014ae8:	f00c f910 	bl	8020d0c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8014aec:	693b      	ldr	r3, [r7, #16]
 8014aee:	881b      	ldrh	r3, [r3, #0]
 8014af0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014af2:	8afa      	ldrh	r2, [r7, #22]
 8014af4:	8bfb      	ldrh	r3, [r7, #30]
 8014af6:	4413      	add	r3, r2
 8014af8:	b29b      	uxth	r3, r3
 8014afa:	3308      	adds	r3, #8
 8014afc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8014afe:	4b3e      	ldr	r3, [pc, #248]	; (8014bf8 <mem_trim+0x1f4>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	693a      	ldr	r2, [r7, #16]
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d106      	bne.n	8014b16 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8014b08:	89fb      	ldrh	r3, [r7, #14]
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7ff fdd6 	bl	80146bc <ptr_to_mem>
 8014b10:	4603      	mov	r3, r0
 8014b12:	4a39      	ldr	r2, [pc, #228]	; (8014bf8 <mem_trim+0x1f4>)
 8014b14:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8014b16:	89fb      	ldrh	r3, [r7, #14]
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f7ff fdcf 	bl	80146bc <ptr_to_mem>
 8014b1e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8014b20:	693b      	ldr	r3, [r7, #16]
 8014b22:	2200      	movs	r2, #0
 8014b24:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8014b26:	693b      	ldr	r3, [r7, #16]
 8014b28:	89ba      	ldrh	r2, [r7, #12]
 8014b2a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8014b2c:	693b      	ldr	r3, [r7, #16]
 8014b2e:	8afa      	ldrh	r2, [r7, #22]
 8014b30:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8014b32:	69bb      	ldr	r3, [r7, #24]
 8014b34:	89fa      	ldrh	r2, [r7, #14]
 8014b36:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014b38:	693b      	ldr	r3, [r7, #16]
 8014b3a:	881b      	ldrh	r3, [r3, #0]
 8014b3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014b40:	d047      	beq.n	8014bd2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014b42:	693b      	ldr	r3, [r7, #16]
 8014b44:	881b      	ldrh	r3, [r3, #0]
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7ff fdb8 	bl	80146bc <ptr_to_mem>
 8014b4c:	4602      	mov	r2, r0
 8014b4e:	89fb      	ldrh	r3, [r7, #14]
 8014b50:	8053      	strh	r3, [r2, #2]
 8014b52:	e03e      	b.n	8014bd2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8014b54:	8bfb      	ldrh	r3, [r7, #30]
 8014b56:	f103 0214 	add.w	r2, r3, #20
 8014b5a:	8abb      	ldrh	r3, [r7, #20]
 8014b5c:	429a      	cmp	r2, r3
 8014b5e:	d838      	bhi.n	8014bd2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014b60:	8afa      	ldrh	r2, [r7, #22]
 8014b62:	8bfb      	ldrh	r3, [r7, #30]
 8014b64:	4413      	add	r3, r2
 8014b66:	b29b      	uxth	r3, r3
 8014b68:	3308      	adds	r3, #8
 8014b6a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014b6c:	69bb      	ldr	r3, [r7, #24]
 8014b6e:	881b      	ldrh	r3, [r3, #0]
 8014b70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014b74:	d106      	bne.n	8014b84 <mem_trim+0x180>
 8014b76:	4b1b      	ldr	r3, [pc, #108]	; (8014be4 <mem_trim+0x1e0>)
 8014b78:	f240 3216 	movw	r2, #790	; 0x316
 8014b7c:	491d      	ldr	r1, [pc, #116]	; (8014bf4 <mem_trim+0x1f0>)
 8014b7e:	481b      	ldr	r0, [pc, #108]	; (8014bec <mem_trim+0x1e8>)
 8014b80:	f00c f8c4 	bl	8020d0c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8014b84:	89fb      	ldrh	r3, [r7, #14]
 8014b86:	4618      	mov	r0, r3
 8014b88:	f7ff fd98 	bl	80146bc <ptr_to_mem>
 8014b8c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8014b8e:	4b1a      	ldr	r3, [pc, #104]	; (8014bf8 <mem_trim+0x1f4>)
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	693a      	ldr	r2, [r7, #16]
 8014b94:	429a      	cmp	r2, r3
 8014b96:	d202      	bcs.n	8014b9e <mem_trim+0x19a>
      lfree = mem2;
 8014b98:	4a17      	ldr	r2, [pc, #92]	; (8014bf8 <mem_trim+0x1f4>)
 8014b9a:	693b      	ldr	r3, [r7, #16]
 8014b9c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8014b9e:	693b      	ldr	r3, [r7, #16]
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8014ba4:	69bb      	ldr	r3, [r7, #24]
 8014ba6:	881a      	ldrh	r2, [r3, #0]
 8014ba8:	693b      	ldr	r3, [r7, #16]
 8014baa:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8014bac:	693b      	ldr	r3, [r7, #16]
 8014bae:	8afa      	ldrh	r2, [r7, #22]
 8014bb0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8014bb2:	69bb      	ldr	r3, [r7, #24]
 8014bb4:	89fa      	ldrh	r2, [r7, #14]
 8014bb6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014bb8:	693b      	ldr	r3, [r7, #16]
 8014bba:	881b      	ldrh	r3, [r3, #0]
 8014bbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014bc0:	d007      	beq.n	8014bd2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014bc2:	693b      	ldr	r3, [r7, #16]
 8014bc4:	881b      	ldrh	r3, [r3, #0]
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f7ff fd78 	bl	80146bc <ptr_to_mem>
 8014bcc:	4602      	mov	r2, r0
 8014bce:	89fb      	ldrh	r3, [r7, #14]
 8014bd0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8014bd2:	687b      	ldr	r3, [r7, #4]
}
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	3720      	adds	r7, #32
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	bd80      	pop	{r7, pc}
 8014bdc:	24007794 	.word	0x24007794
 8014be0:	24007798 	.word	0x24007798
 8014be4:	080267f4 	.word	0x080267f4
 8014be8:	08026990 	.word	0x08026990
 8014bec:	08026868 	.word	0x08026868
 8014bf0:	080269a8 	.word	0x080269a8
 8014bf4:	080269c8 	.word	0x080269c8
 8014bf8:	2400779c 	.word	0x2400779c

08014bfc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b088      	sub	sp, #32
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	4603      	mov	r3, r0
 8014c04:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8014c06:	88fb      	ldrh	r3, [r7, #6]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d101      	bne.n	8014c10 <mem_malloc+0x14>
    return NULL;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	e0d9      	b.n	8014dc4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8014c10:	88fb      	ldrh	r3, [r7, #6]
 8014c12:	3303      	adds	r3, #3
 8014c14:	b29b      	uxth	r3, r3
 8014c16:	f023 0303 	bic.w	r3, r3, #3
 8014c1a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8014c1c:	8bbb      	ldrh	r3, [r7, #28]
 8014c1e:	2b0b      	cmp	r3, #11
 8014c20:	d801      	bhi.n	8014c26 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8014c22:	230c      	movs	r3, #12
 8014c24:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8014c26:	8bbb      	ldrh	r3, [r7, #28]
 8014c28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014c2c:	d803      	bhi.n	8014c36 <mem_malloc+0x3a>
 8014c2e:	8bba      	ldrh	r2, [r7, #28]
 8014c30:	88fb      	ldrh	r3, [r7, #6]
 8014c32:	429a      	cmp	r2, r3
 8014c34:	d201      	bcs.n	8014c3a <mem_malloc+0x3e>
    return NULL;
 8014c36:	2300      	movs	r3, #0
 8014c38:	e0c4      	b.n	8014dc4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014c3a:	4b64      	ldr	r3, [pc, #400]	; (8014dcc <mem_malloc+0x1d0>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7ff fd4e 	bl	80146e0 <mem_to_ptr>
 8014c44:	4603      	mov	r3, r0
 8014c46:	83fb      	strh	r3, [r7, #30]
 8014c48:	e0b4      	b.n	8014db4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8014c4a:	8bfb      	ldrh	r3, [r7, #30]
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f7ff fd35 	bl	80146bc <ptr_to_mem>
 8014c52:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8014c54:	697b      	ldr	r3, [r7, #20]
 8014c56:	791b      	ldrb	r3, [r3, #4]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	f040 80a4 	bne.w	8014da6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	881b      	ldrh	r3, [r3, #0]
 8014c62:	461a      	mov	r2, r3
 8014c64:	8bfb      	ldrh	r3, [r7, #30]
 8014c66:	1ad3      	subs	r3, r2, r3
 8014c68:	f1a3 0208 	sub.w	r2, r3, #8
 8014c6c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	f0c0 8099 	bcc.w	8014da6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8014c74:	697b      	ldr	r3, [r7, #20]
 8014c76:	881b      	ldrh	r3, [r3, #0]
 8014c78:	461a      	mov	r2, r3
 8014c7a:	8bfb      	ldrh	r3, [r7, #30]
 8014c7c:	1ad3      	subs	r3, r2, r3
 8014c7e:	f1a3 0208 	sub.w	r2, r3, #8
 8014c82:	8bbb      	ldrh	r3, [r7, #28]
 8014c84:	3314      	adds	r3, #20
 8014c86:	429a      	cmp	r2, r3
 8014c88:	d333      	bcc.n	8014cf2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8014c8a:	8bfa      	ldrh	r2, [r7, #30]
 8014c8c:	8bbb      	ldrh	r3, [r7, #28]
 8014c8e:	4413      	add	r3, r2
 8014c90:	b29b      	uxth	r3, r3
 8014c92:	3308      	adds	r3, #8
 8014c94:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8014c96:	8a7b      	ldrh	r3, [r7, #18]
 8014c98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014c9c:	d106      	bne.n	8014cac <mem_malloc+0xb0>
 8014c9e:	4b4c      	ldr	r3, [pc, #304]	; (8014dd0 <mem_malloc+0x1d4>)
 8014ca0:	f240 3287 	movw	r2, #903	; 0x387
 8014ca4:	494b      	ldr	r1, [pc, #300]	; (8014dd4 <mem_malloc+0x1d8>)
 8014ca6:	484c      	ldr	r0, [pc, #304]	; (8014dd8 <mem_malloc+0x1dc>)
 8014ca8:	f00c f830 	bl	8020d0c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8014cac:	8a7b      	ldrh	r3, [r7, #18]
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7ff fd04 	bl	80146bc <ptr_to_mem>
 8014cb4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	2200      	movs	r2, #0
 8014cba:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8014cbc:	697b      	ldr	r3, [r7, #20]
 8014cbe:	881a      	ldrh	r2, [r3, #0]
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	8bfa      	ldrh	r2, [r7, #30]
 8014cc8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014cca:	697b      	ldr	r3, [r7, #20]
 8014ccc:	8a7a      	ldrh	r2, [r7, #18]
 8014cce:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8014cd0:	697b      	ldr	r3, [r7, #20]
 8014cd2:	2201      	movs	r2, #1
 8014cd4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	881b      	ldrh	r3, [r3, #0]
 8014cda:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014cde:	d00b      	beq.n	8014cf8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	881b      	ldrh	r3, [r3, #0]
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f7ff fce9 	bl	80146bc <ptr_to_mem>
 8014cea:	4602      	mov	r2, r0
 8014cec:	8a7b      	ldrh	r3, [r7, #18]
 8014cee:	8053      	strh	r3, [r2, #2]
 8014cf0:	e002      	b.n	8014cf8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014cf2:	697b      	ldr	r3, [r7, #20]
 8014cf4:	2201      	movs	r2, #1
 8014cf6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014cf8:	4b34      	ldr	r3, [pc, #208]	; (8014dcc <mem_malloc+0x1d0>)
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	697a      	ldr	r2, [r7, #20]
 8014cfe:	429a      	cmp	r2, r3
 8014d00:	d127      	bne.n	8014d52 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8014d02:	4b32      	ldr	r3, [pc, #200]	; (8014dcc <mem_malloc+0x1d0>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014d08:	e005      	b.n	8014d16 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8014d0a:	69bb      	ldr	r3, [r7, #24]
 8014d0c:	881b      	ldrh	r3, [r3, #0]
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f7ff fcd4 	bl	80146bc <ptr_to_mem>
 8014d14:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8014d16:	69bb      	ldr	r3, [r7, #24]
 8014d18:	791b      	ldrb	r3, [r3, #4]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d004      	beq.n	8014d28 <mem_malloc+0x12c>
 8014d1e:	4b2f      	ldr	r3, [pc, #188]	; (8014ddc <mem_malloc+0x1e0>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	69ba      	ldr	r2, [r7, #24]
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d1f0      	bne.n	8014d0a <mem_malloc+0x10e>
          }
          lfree = cur;
 8014d28:	4a28      	ldr	r2, [pc, #160]	; (8014dcc <mem_malloc+0x1d0>)
 8014d2a:	69bb      	ldr	r3, [r7, #24]
 8014d2c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8014d2e:	4b27      	ldr	r3, [pc, #156]	; (8014dcc <mem_malloc+0x1d0>)
 8014d30:	681a      	ldr	r2, [r3, #0]
 8014d32:	4b2a      	ldr	r3, [pc, #168]	; (8014ddc <mem_malloc+0x1e0>)
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	429a      	cmp	r2, r3
 8014d38:	d00b      	beq.n	8014d52 <mem_malloc+0x156>
 8014d3a:	4b24      	ldr	r3, [pc, #144]	; (8014dcc <mem_malloc+0x1d0>)
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	791b      	ldrb	r3, [r3, #4]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d006      	beq.n	8014d52 <mem_malloc+0x156>
 8014d44:	4b22      	ldr	r3, [pc, #136]	; (8014dd0 <mem_malloc+0x1d4>)
 8014d46:	f240 32b5 	movw	r2, #949	; 0x3b5
 8014d4a:	4925      	ldr	r1, [pc, #148]	; (8014de0 <mem_malloc+0x1e4>)
 8014d4c:	4822      	ldr	r0, [pc, #136]	; (8014dd8 <mem_malloc+0x1dc>)
 8014d4e:	f00b ffdd 	bl	8020d0c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8014d52:	8bba      	ldrh	r2, [r7, #28]
 8014d54:	697b      	ldr	r3, [r7, #20]
 8014d56:	4413      	add	r3, r2
 8014d58:	3308      	adds	r3, #8
 8014d5a:	4a20      	ldr	r2, [pc, #128]	; (8014ddc <mem_malloc+0x1e0>)
 8014d5c:	6812      	ldr	r2, [r2, #0]
 8014d5e:	4293      	cmp	r3, r2
 8014d60:	d906      	bls.n	8014d70 <mem_malloc+0x174>
 8014d62:	4b1b      	ldr	r3, [pc, #108]	; (8014dd0 <mem_malloc+0x1d4>)
 8014d64:	f240 32b9 	movw	r2, #953	; 0x3b9
 8014d68:	491e      	ldr	r1, [pc, #120]	; (8014de4 <mem_malloc+0x1e8>)
 8014d6a:	481b      	ldr	r0, [pc, #108]	; (8014dd8 <mem_malloc+0x1dc>)
 8014d6c:	f00b ffce 	bl	8020d0c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014d70:	697b      	ldr	r3, [r7, #20]
 8014d72:	f003 0303 	and.w	r3, r3, #3
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d006      	beq.n	8014d88 <mem_malloc+0x18c>
 8014d7a:	4b15      	ldr	r3, [pc, #84]	; (8014dd0 <mem_malloc+0x1d4>)
 8014d7c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8014d80:	4919      	ldr	r1, [pc, #100]	; (8014de8 <mem_malloc+0x1ec>)
 8014d82:	4815      	ldr	r0, [pc, #84]	; (8014dd8 <mem_malloc+0x1dc>)
 8014d84:	f00b ffc2 	bl	8020d0c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	f003 0303 	and.w	r3, r3, #3
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d006      	beq.n	8014da0 <mem_malloc+0x1a4>
 8014d92:	4b0f      	ldr	r3, [pc, #60]	; (8014dd0 <mem_malloc+0x1d4>)
 8014d94:	f240 32bd 	movw	r2, #957	; 0x3bd
 8014d98:	4914      	ldr	r1, [pc, #80]	; (8014dec <mem_malloc+0x1f0>)
 8014d9a:	480f      	ldr	r0, [pc, #60]	; (8014dd8 <mem_malloc+0x1dc>)
 8014d9c:	f00b ffb6 	bl	8020d0c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014da0:	697b      	ldr	r3, [r7, #20]
 8014da2:	3308      	adds	r3, #8
 8014da4:	e00e      	b.n	8014dc4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8014da6:	8bfb      	ldrh	r3, [r7, #30]
 8014da8:	4618      	mov	r0, r3
 8014daa:	f7ff fc87 	bl	80146bc <ptr_to_mem>
 8014dae:	4603      	mov	r3, r0
 8014db0:	881b      	ldrh	r3, [r3, #0]
 8014db2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014db4:	8bfa      	ldrh	r2, [r7, #30]
 8014db6:	8bbb      	ldrh	r3, [r7, #28]
 8014db8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	f4ff af44 	bcc.w	8014c4a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8014dc2:	2300      	movs	r3, #0
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3720      	adds	r7, #32
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}
 8014dcc:	2400779c 	.word	0x2400779c
 8014dd0:	080267f4 	.word	0x080267f4
 8014dd4:	080269c8 	.word	0x080269c8
 8014dd8:	08026868 	.word	0x08026868
 8014ddc:	24007798 	.word	0x24007798
 8014de0:	080269dc 	.word	0x080269dc
 8014de4:	080269f8 	.word	0x080269f8
 8014de8:	08026a28 	.word	0x08026a28
 8014dec:	08026a58 	.word	0x08026a58

08014df0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8014df0:	b480      	push	{r7}
 8014df2:	b085      	sub	sp, #20
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	689b      	ldr	r3, [r3, #8]
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	685b      	ldr	r3, [r3, #4]
 8014e04:	3303      	adds	r3, #3
 8014e06:	f023 0303 	bic.w	r3, r3, #3
 8014e0a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	60fb      	str	r3, [r7, #12]
 8014e10:	e011      	b.n	8014e36 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	689b      	ldr	r3, [r3, #8]
 8014e16:	681a      	ldr	r2, [r3, #0]
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	689b      	ldr	r3, [r3, #8]
 8014e20:	68ba      	ldr	r2, [r7, #8]
 8014e22:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	881b      	ldrh	r3, [r3, #0]
 8014e28:	461a      	mov	r2, r3
 8014e2a:	68bb      	ldr	r3, [r7, #8]
 8014e2c:	4413      	add	r3, r2
 8014e2e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	3301      	adds	r3, #1
 8014e34:	60fb      	str	r3, [r7, #12]
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	885b      	ldrh	r3, [r3, #2]
 8014e3a:	461a      	mov	r2, r3
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	4293      	cmp	r3, r2
 8014e40:	dbe7      	blt.n	8014e12 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8014e42:	bf00      	nop
 8014e44:	bf00      	nop
 8014e46:	3714      	adds	r7, #20
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e4e:	4770      	bx	lr

08014e50 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b082      	sub	sp, #8
 8014e54:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014e56:	2300      	movs	r3, #0
 8014e58:	80fb      	strh	r3, [r7, #6]
 8014e5a:	e009      	b.n	8014e70 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8014e5c:	88fb      	ldrh	r3, [r7, #6]
 8014e5e:	4a08      	ldr	r2, [pc, #32]	; (8014e80 <memp_init+0x30>)
 8014e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7ff ffc3 	bl	8014df0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014e6a:	88fb      	ldrh	r3, [r7, #6]
 8014e6c:	3301      	adds	r3, #1
 8014e6e:	80fb      	strh	r3, [r7, #6]
 8014e70:	88fb      	ldrh	r3, [r7, #6]
 8014e72:	2b08      	cmp	r3, #8
 8014e74:	d9f2      	bls.n	8014e5c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8014e76:	bf00      	nop
 8014e78:	bf00      	nop
 8014e7a:	3708      	adds	r7, #8
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}
 8014e80:	08029388 	.word	0x08029388

08014e84 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b084      	sub	sp, #16
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	689b      	ldr	r3, [r3, #8]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d012      	beq.n	8014ec0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	689b      	ldr	r3, [r3, #8]
 8014e9e:	68fa      	ldr	r2, [r7, #12]
 8014ea0:	6812      	ldr	r2, [r2, #0]
 8014ea2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	f003 0303 	and.w	r3, r3, #3
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d006      	beq.n	8014ebc <do_memp_malloc_pool+0x38>
 8014eae:	4b07      	ldr	r3, [pc, #28]	; (8014ecc <do_memp_malloc_pool+0x48>)
 8014eb0:	f44f 728c 	mov.w	r2, #280	; 0x118
 8014eb4:	4906      	ldr	r1, [pc, #24]	; (8014ed0 <do_memp_malloc_pool+0x4c>)
 8014eb6:	4807      	ldr	r0, [pc, #28]	; (8014ed4 <do_memp_malloc_pool+0x50>)
 8014eb8:	f00b ff28 	bl	8020d0c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	e000      	b.n	8014ec2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8014ec0:	2300      	movs	r3, #0
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3710      	adds	r7, #16
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd80      	pop	{r7, pc}
 8014eca:	bf00      	nop
 8014ecc:	08026a7c 	.word	0x08026a7c
 8014ed0:	08026ad8 	.word	0x08026ad8
 8014ed4:	08026afc 	.word	0x08026afc

08014ed8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b082      	sub	sp, #8
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d106      	bne.n	8014ef4 <memp_malloc_pool+0x1c>
 8014ee6:	4b0a      	ldr	r3, [pc, #40]	; (8014f10 <memp_malloc_pool+0x38>)
 8014ee8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8014eec:	4909      	ldr	r1, [pc, #36]	; (8014f14 <memp_malloc_pool+0x3c>)
 8014eee:	480a      	ldr	r0, [pc, #40]	; (8014f18 <memp_malloc_pool+0x40>)
 8014ef0:	f00b ff0c 	bl	8020d0c <iprintf>
  if (desc == NULL) {
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d101      	bne.n	8014efe <memp_malloc_pool+0x26>
    return NULL;
 8014efa:	2300      	movs	r3, #0
 8014efc:	e003      	b.n	8014f06 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	f7ff ffc0 	bl	8014e84 <do_memp_malloc_pool>
 8014f04:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8014f06:	4618      	mov	r0, r3
 8014f08:	3708      	adds	r7, #8
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd80      	pop	{r7, pc}
 8014f0e:	bf00      	nop
 8014f10:	08026a7c 	.word	0x08026a7c
 8014f14:	08026b24 	.word	0x08026b24
 8014f18:	08026afc 	.word	0x08026afc

08014f1c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b084      	sub	sp, #16
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	4603      	mov	r3, r0
 8014f24:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8014f26:	79fb      	ldrb	r3, [r7, #7]
 8014f28:	2b08      	cmp	r3, #8
 8014f2a:	d908      	bls.n	8014f3e <memp_malloc+0x22>
 8014f2c:	4b0a      	ldr	r3, [pc, #40]	; (8014f58 <memp_malloc+0x3c>)
 8014f2e:	f240 1257 	movw	r2, #343	; 0x157
 8014f32:	490a      	ldr	r1, [pc, #40]	; (8014f5c <memp_malloc+0x40>)
 8014f34:	480a      	ldr	r0, [pc, #40]	; (8014f60 <memp_malloc+0x44>)
 8014f36:	f00b fee9 	bl	8020d0c <iprintf>
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	e008      	b.n	8014f50 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8014f3e:	79fb      	ldrb	r3, [r7, #7]
 8014f40:	4a08      	ldr	r2, [pc, #32]	; (8014f64 <memp_malloc+0x48>)
 8014f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014f46:	4618      	mov	r0, r3
 8014f48:	f7ff ff9c 	bl	8014e84 <do_memp_malloc_pool>
 8014f4c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8014f4e:	68fb      	ldr	r3, [r7, #12]
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	3710      	adds	r7, #16
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}
 8014f58:	08026a7c 	.word	0x08026a7c
 8014f5c:	08026b38 	.word	0x08026b38
 8014f60:	08026afc 	.word	0x08026afc
 8014f64:	08029388 	.word	0x08029388

08014f68 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b084      	sub	sp, #16
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
 8014f70:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	f003 0303 	and.w	r3, r3, #3
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d006      	beq.n	8014f8a <do_memp_free_pool+0x22>
 8014f7c:	4b0a      	ldr	r3, [pc, #40]	; (8014fa8 <do_memp_free_pool+0x40>)
 8014f7e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8014f82:	490a      	ldr	r1, [pc, #40]	; (8014fac <do_memp_free_pool+0x44>)
 8014f84:	480a      	ldr	r0, [pc, #40]	; (8014fb0 <do_memp_free_pool+0x48>)
 8014f86:	f00b fec1 	bl	8020d0c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	689b      	ldr	r3, [r3, #8]
 8014f92:	681a      	ldr	r2, [r3, #0]
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	689b      	ldr	r3, [r3, #8]
 8014f9c:	68fa      	ldr	r2, [r7, #12]
 8014f9e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8014fa0:	bf00      	nop
 8014fa2:	3710      	adds	r7, #16
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	bd80      	pop	{r7, pc}
 8014fa8:	08026a7c 	.word	0x08026a7c
 8014fac:	08026b58 	.word	0x08026b58
 8014fb0:	08026afc 	.word	0x08026afc

08014fb4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b082      	sub	sp, #8
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
 8014fbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d106      	bne.n	8014fd2 <memp_free_pool+0x1e>
 8014fc4:	4b0a      	ldr	r3, [pc, #40]	; (8014ff0 <memp_free_pool+0x3c>)
 8014fc6:	f240 1295 	movw	r2, #405	; 0x195
 8014fca:	490a      	ldr	r1, [pc, #40]	; (8014ff4 <memp_free_pool+0x40>)
 8014fcc:	480a      	ldr	r0, [pc, #40]	; (8014ff8 <memp_free_pool+0x44>)
 8014fce:	f00b fe9d 	bl	8020d0c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d007      	beq.n	8014fe8 <memp_free_pool+0x34>
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d004      	beq.n	8014fe8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8014fde:	6839      	ldr	r1, [r7, #0]
 8014fe0:	6878      	ldr	r0, [r7, #4]
 8014fe2:	f7ff ffc1 	bl	8014f68 <do_memp_free_pool>
 8014fe6:	e000      	b.n	8014fea <memp_free_pool+0x36>
    return;
 8014fe8:	bf00      	nop
}
 8014fea:	3708      	adds	r7, #8
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}
 8014ff0:	08026a7c 	.word	0x08026a7c
 8014ff4:	08026b24 	.word	0x08026b24
 8014ff8:	08026afc 	.word	0x08026afc

08014ffc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b082      	sub	sp, #8
 8015000:	af00      	add	r7, sp, #0
 8015002:	4603      	mov	r3, r0
 8015004:	6039      	str	r1, [r7, #0]
 8015006:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8015008:	79fb      	ldrb	r3, [r7, #7]
 801500a:	2b08      	cmp	r3, #8
 801500c:	d907      	bls.n	801501e <memp_free+0x22>
 801500e:	4b0c      	ldr	r3, [pc, #48]	; (8015040 <memp_free+0x44>)
 8015010:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8015014:	490b      	ldr	r1, [pc, #44]	; (8015044 <memp_free+0x48>)
 8015016:	480c      	ldr	r0, [pc, #48]	; (8015048 <memp_free+0x4c>)
 8015018:	f00b fe78 	bl	8020d0c <iprintf>
 801501c:	e00c      	b.n	8015038 <memp_free+0x3c>

  if (mem == NULL) {
 801501e:	683b      	ldr	r3, [r7, #0]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d008      	beq.n	8015036 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8015024:	79fb      	ldrb	r3, [r7, #7]
 8015026:	4a09      	ldr	r2, [pc, #36]	; (801504c <memp_free+0x50>)
 8015028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801502c:	6839      	ldr	r1, [r7, #0]
 801502e:	4618      	mov	r0, r3
 8015030:	f7ff ff9a 	bl	8014f68 <do_memp_free_pool>
 8015034:	e000      	b.n	8015038 <memp_free+0x3c>
    return;
 8015036:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8015038:	3708      	adds	r7, #8
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}
 801503e:	bf00      	nop
 8015040:	08026a7c 	.word	0x08026a7c
 8015044:	08026b78 	.word	0x08026b78
 8015048:	08026afc 	.word	0x08026afc
 801504c:	08029388 	.word	0x08029388

08015050 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015050:	b480      	push	{r7}
 8015052:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015054:	bf00      	nop
 8015056:	46bd      	mov	sp, r7
 8015058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505c:	4770      	bx	lr
	...

08015060 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b086      	sub	sp, #24
 8015064:	af00      	add	r7, sp, #0
 8015066:	60f8      	str	r0, [r7, #12]
 8015068:	60b9      	str	r1, [r7, #8]
 801506a:	607a      	str	r2, [r7, #4]
 801506c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d108      	bne.n	8015086 <netif_add+0x26>
 8015074:	4b57      	ldr	r3, [pc, #348]	; (80151d4 <netif_add+0x174>)
 8015076:	f240 1227 	movw	r2, #295	; 0x127
 801507a:	4957      	ldr	r1, [pc, #348]	; (80151d8 <netif_add+0x178>)
 801507c:	4857      	ldr	r0, [pc, #348]	; (80151dc <netif_add+0x17c>)
 801507e:	f00b fe45 	bl	8020d0c <iprintf>
 8015082:	2300      	movs	r3, #0
 8015084:	e0a2      	b.n	80151cc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8015086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015088:	2b00      	cmp	r3, #0
 801508a:	d108      	bne.n	801509e <netif_add+0x3e>
 801508c:	4b51      	ldr	r3, [pc, #324]	; (80151d4 <netif_add+0x174>)
 801508e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8015092:	4953      	ldr	r1, [pc, #332]	; (80151e0 <netif_add+0x180>)
 8015094:	4851      	ldr	r0, [pc, #324]	; (80151dc <netif_add+0x17c>)
 8015096:	f00b fe39 	bl	8020d0c <iprintf>
 801509a:	2300      	movs	r3, #0
 801509c:	e096      	b.n	80151cc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801509e:	68bb      	ldr	r3, [r7, #8]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d101      	bne.n	80150a8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80150a4:	4b4f      	ldr	r3, [pc, #316]	; (80151e4 <netif_add+0x184>)
 80150a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d101      	bne.n	80150b2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80150ae:	4b4d      	ldr	r3, [pc, #308]	; (80151e4 <netif_add+0x184>)
 80150b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80150b2:	683b      	ldr	r3, [r7, #0]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d101      	bne.n	80150bc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80150b8:	4b4a      	ldr	r3, [pc, #296]	; (80151e4 <netif_add+0x184>)
 80150ba:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	2200      	movs	r2, #0
 80150c0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	2200      	movs	r2, #0
 80150c6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	2200      	movs	r2, #0
 80150cc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	4a45      	ldr	r2, [pc, #276]	; (80151e8 <netif_add+0x188>)
 80150d2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	2200      	movs	r2, #0
 80150d8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	2200      	movs	r2, #0
 80150de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	2200      	movs	r2, #0
 80150e6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	6a3a      	ldr	r2, [r7, #32]
 80150ec:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80150ee:	4b3f      	ldr	r3, [pc, #252]	; (80151ec <netif_add+0x18c>)
 80150f0:	781a      	ldrb	r2, [r3, #0]
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150fc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	687a      	ldr	r2, [r7, #4]
 8015102:	68b9      	ldr	r1, [r7, #8]
 8015104:	68f8      	ldr	r0, [r7, #12]
 8015106:	f000 f913 	bl	8015330 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801510c:	68f8      	ldr	r0, [r7, #12]
 801510e:	4798      	blx	r3
 8015110:	4603      	mov	r3, r0
 8015112:	2b00      	cmp	r3, #0
 8015114:	d001      	beq.n	801511a <netif_add+0xba>
    return NULL;
 8015116:	2300      	movs	r3, #0
 8015118:	e058      	b.n	80151cc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015120:	2bff      	cmp	r3, #255	; 0xff
 8015122:	d103      	bne.n	801512c <netif_add+0xcc>
        netif->num = 0;
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	2200      	movs	r2, #0
 8015128:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 801512c:	2300      	movs	r3, #0
 801512e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015130:	4b2f      	ldr	r3, [pc, #188]	; (80151f0 <netif_add+0x190>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	617b      	str	r3, [r7, #20]
 8015136:	e02b      	b.n	8015190 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8015138:	697a      	ldr	r2, [r7, #20]
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	429a      	cmp	r2, r3
 801513e:	d106      	bne.n	801514e <netif_add+0xee>
 8015140:	4b24      	ldr	r3, [pc, #144]	; (80151d4 <netif_add+0x174>)
 8015142:	f240 128b 	movw	r2, #395	; 0x18b
 8015146:	492b      	ldr	r1, [pc, #172]	; (80151f4 <netif_add+0x194>)
 8015148:	4824      	ldr	r0, [pc, #144]	; (80151dc <netif_add+0x17c>)
 801514a:	f00b fddf 	bl	8020d0c <iprintf>
        num_netifs++;
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	3301      	adds	r3, #1
 8015152:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	2bff      	cmp	r3, #255	; 0xff
 8015158:	dd06      	ble.n	8015168 <netif_add+0x108>
 801515a:	4b1e      	ldr	r3, [pc, #120]	; (80151d4 <netif_add+0x174>)
 801515c:	f240 128d 	movw	r2, #397	; 0x18d
 8015160:	4925      	ldr	r1, [pc, #148]	; (80151f8 <netif_add+0x198>)
 8015162:	481e      	ldr	r0, [pc, #120]	; (80151dc <netif_add+0x17c>)
 8015164:	f00b fdd2 	bl	8020d0c <iprintf>
        if (netif2->num == netif->num) {
 8015168:	697b      	ldr	r3, [r7, #20]
 801516a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015174:	429a      	cmp	r2, r3
 8015176:	d108      	bne.n	801518a <netif_add+0x12a>
          netif->num++;
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801517e:	3301      	adds	r3, #1
 8015180:	b2da      	uxtb	r2, r3
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8015188:	e005      	b.n	8015196 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801518a:	697b      	ldr	r3, [r7, #20]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	617b      	str	r3, [r7, #20]
 8015190:	697b      	ldr	r3, [r7, #20]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d1d0      	bne.n	8015138 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8015196:	697b      	ldr	r3, [r7, #20]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d1be      	bne.n	801511a <netif_add+0xba>
  }
  if (netif->num == 254) {
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80151a2:	2bfe      	cmp	r3, #254	; 0xfe
 80151a4:	d103      	bne.n	80151ae <netif_add+0x14e>
    netif_num = 0;
 80151a6:	4b11      	ldr	r3, [pc, #68]	; (80151ec <netif_add+0x18c>)
 80151a8:	2200      	movs	r2, #0
 80151aa:	701a      	strb	r2, [r3, #0]
 80151ac:	e006      	b.n	80151bc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80151b4:	3301      	adds	r3, #1
 80151b6:	b2da      	uxtb	r2, r3
 80151b8:	4b0c      	ldr	r3, [pc, #48]	; (80151ec <netif_add+0x18c>)
 80151ba:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80151bc:	4b0c      	ldr	r3, [pc, #48]	; (80151f0 <netif_add+0x190>)
 80151be:	681a      	ldr	r2, [r3, #0]
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80151c4:	4a0a      	ldr	r2, [pc, #40]	; (80151f0 <netif_add+0x190>)
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80151ca:	68fb      	ldr	r3, [r7, #12]
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3718      	adds	r7, #24
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}
 80151d4:	08026b94 	.word	0x08026b94
 80151d8:	08026c50 	.word	0x08026c50
 80151dc:	08026c0c 	.word	0x08026c0c
 80151e0:	08026c6c 	.word	0x08026c6c
 80151e4:	08029318 	.word	0x08029318
 80151e8:	0801560b 	.word	0x0801560b
 80151ec:	240077c4 	.word	0x240077c4
 80151f0:	2400ae48 	.word	0x2400ae48
 80151f4:	08026c90 	.word	0x08026c90
 80151f8:	08026ca4 	.word	0x08026ca4

080151fc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b082      	sub	sp, #8
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
 8015204:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8015206:	6839      	ldr	r1, [r7, #0]
 8015208:	6878      	ldr	r0, [r7, #4]
 801520a:	f002 ff9b 	bl	8018144 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801520e:	6839      	ldr	r1, [r7, #0]
 8015210:	6878      	ldr	r0, [r7, #4]
 8015212:	f007 fe19 	bl	801ce48 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8015216:	bf00      	nop
 8015218:	3708      	adds	r7, #8
 801521a:	46bd      	mov	sp, r7
 801521c:	bd80      	pop	{r7, pc}
	...

08015220 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b086      	sub	sp, #24
 8015224:	af00      	add	r7, sp, #0
 8015226:	60f8      	str	r0, [r7, #12]
 8015228:	60b9      	str	r1, [r7, #8]
 801522a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801522c:	68bb      	ldr	r3, [r7, #8]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d106      	bne.n	8015240 <netif_do_set_ipaddr+0x20>
 8015232:	4b1d      	ldr	r3, [pc, #116]	; (80152a8 <netif_do_set_ipaddr+0x88>)
 8015234:	f240 12cb 	movw	r2, #459	; 0x1cb
 8015238:	491c      	ldr	r1, [pc, #112]	; (80152ac <netif_do_set_ipaddr+0x8c>)
 801523a:	481d      	ldr	r0, [pc, #116]	; (80152b0 <netif_do_set_ipaddr+0x90>)
 801523c:	f00b fd66 	bl	8020d0c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d106      	bne.n	8015254 <netif_do_set_ipaddr+0x34>
 8015246:	4b18      	ldr	r3, [pc, #96]	; (80152a8 <netif_do_set_ipaddr+0x88>)
 8015248:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801524c:	4917      	ldr	r1, [pc, #92]	; (80152ac <netif_do_set_ipaddr+0x8c>)
 801524e:	4818      	ldr	r0, [pc, #96]	; (80152b0 <netif_do_set_ipaddr+0x90>)
 8015250:	f00b fd5c 	bl	8020d0c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8015254:	68bb      	ldr	r3, [r7, #8]
 8015256:	681a      	ldr	r2, [r3, #0]
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	3304      	adds	r3, #4
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	429a      	cmp	r2, r3
 8015260:	d01c      	beq.n	801529c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8015262:	68bb      	ldr	r3, [r7, #8]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	3304      	adds	r3, #4
 801526c:	681a      	ldr	r2, [r3, #0]
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8015272:	f107 0314 	add.w	r3, r7, #20
 8015276:	4619      	mov	r1, r3
 8015278:	6878      	ldr	r0, [r7, #4]
 801527a:	f7ff ffbf 	bl	80151fc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d002      	beq.n	801528a <netif_do_set_ipaddr+0x6a>
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	e000      	b.n	801528c <netif_do_set_ipaddr+0x6c>
 801528a:	2300      	movs	r3, #0
 801528c:	68fa      	ldr	r2, [r7, #12]
 801528e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8015290:	2101      	movs	r1, #1
 8015292:	68f8      	ldr	r0, [r7, #12]
 8015294:	f000 f8d2 	bl	801543c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8015298:	2301      	movs	r3, #1
 801529a:	e000      	b.n	801529e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801529c:	2300      	movs	r3, #0
}
 801529e:	4618      	mov	r0, r3
 80152a0:	3718      	adds	r7, #24
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}
 80152a6:	bf00      	nop
 80152a8:	08026b94 	.word	0x08026b94
 80152ac:	08026cd4 	.word	0x08026cd4
 80152b0:	08026c0c 	.word	0x08026c0c

080152b4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80152b4:	b480      	push	{r7}
 80152b6:	b085      	sub	sp, #20
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	60f8      	str	r0, [r7, #12]
 80152bc:	60b9      	str	r1, [r7, #8]
 80152be:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	681a      	ldr	r2, [r3, #0]
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	3308      	adds	r3, #8
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	429a      	cmp	r2, r3
 80152cc:	d00a      	beq.n	80152e4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80152ce:	68bb      	ldr	r3, [r7, #8]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d002      	beq.n	80152da <netif_do_set_netmask+0x26>
 80152d4:	68bb      	ldr	r3, [r7, #8]
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	e000      	b.n	80152dc <netif_do_set_netmask+0x28>
 80152da:	2300      	movs	r3, #0
 80152dc:	68fa      	ldr	r2, [r7, #12]
 80152de:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80152e0:	2301      	movs	r3, #1
 80152e2:	e000      	b.n	80152e6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80152e4:	2300      	movs	r3, #0
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	3714      	adds	r7, #20
 80152ea:	46bd      	mov	sp, r7
 80152ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f0:	4770      	bx	lr

080152f2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80152f2:	b480      	push	{r7}
 80152f4:	b085      	sub	sp, #20
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	60f8      	str	r0, [r7, #12]
 80152fa:	60b9      	str	r1, [r7, #8]
 80152fc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80152fe:	68bb      	ldr	r3, [r7, #8]
 8015300:	681a      	ldr	r2, [r3, #0]
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	330c      	adds	r3, #12
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	429a      	cmp	r2, r3
 801530a:	d00a      	beq.n	8015322 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801530c:	68bb      	ldr	r3, [r7, #8]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d002      	beq.n	8015318 <netif_do_set_gw+0x26>
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	e000      	b.n	801531a <netif_do_set_gw+0x28>
 8015318:	2300      	movs	r3, #0
 801531a:	68fa      	ldr	r2, [r7, #12]
 801531c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801531e:	2301      	movs	r3, #1
 8015320:	e000      	b.n	8015324 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8015322:	2300      	movs	r3, #0
}
 8015324:	4618      	mov	r0, r3
 8015326:	3714      	adds	r7, #20
 8015328:	46bd      	mov	sp, r7
 801532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532e:	4770      	bx	lr

08015330 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b088      	sub	sp, #32
 8015334:	af00      	add	r7, sp, #0
 8015336:	60f8      	str	r0, [r7, #12]
 8015338:	60b9      	str	r1, [r7, #8]
 801533a:	607a      	str	r2, [r7, #4]
 801533c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801533e:	2300      	movs	r3, #0
 8015340:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8015342:	2300      	movs	r3, #0
 8015344:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015346:	68bb      	ldr	r3, [r7, #8]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d101      	bne.n	8015350 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801534c:	4b1c      	ldr	r3, [pc, #112]	; (80153c0 <netif_set_addr+0x90>)
 801534e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d101      	bne.n	801535a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8015356:	4b1a      	ldr	r3, [pc, #104]	; (80153c0 <netif_set_addr+0x90>)
 8015358:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d101      	bne.n	8015364 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8015360:	4b17      	ldr	r3, [pc, #92]	; (80153c0 <netif_set_addr+0x90>)
 8015362:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8015364:	68bb      	ldr	r3, [r7, #8]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d003      	beq.n	8015372 <netif_set_addr+0x42>
 801536a:	68bb      	ldr	r3, [r7, #8]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d101      	bne.n	8015376 <netif_set_addr+0x46>
 8015372:	2301      	movs	r3, #1
 8015374:	e000      	b.n	8015378 <netif_set_addr+0x48>
 8015376:	2300      	movs	r3, #0
 8015378:	617b      	str	r3, [r7, #20]
  if (remove) {
 801537a:	697b      	ldr	r3, [r7, #20]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d006      	beq.n	801538e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015380:	f107 0310 	add.w	r3, r7, #16
 8015384:	461a      	mov	r2, r3
 8015386:	68b9      	ldr	r1, [r7, #8]
 8015388:	68f8      	ldr	r0, [r7, #12]
 801538a:	f7ff ff49 	bl	8015220 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801538e:	69fa      	ldr	r2, [r7, #28]
 8015390:	6879      	ldr	r1, [r7, #4]
 8015392:	68f8      	ldr	r0, [r7, #12]
 8015394:	f7ff ff8e 	bl	80152b4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8015398:	69ba      	ldr	r2, [r7, #24]
 801539a:	6839      	ldr	r1, [r7, #0]
 801539c:	68f8      	ldr	r0, [r7, #12]
 801539e:	f7ff ffa8 	bl	80152f2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80153a2:	697b      	ldr	r3, [r7, #20]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d106      	bne.n	80153b6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80153a8:	f107 0310 	add.w	r3, r7, #16
 80153ac:	461a      	mov	r2, r3
 80153ae:	68b9      	ldr	r1, [r7, #8]
 80153b0:	68f8      	ldr	r0, [r7, #12]
 80153b2:	f7ff ff35 	bl	8015220 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80153b6:	bf00      	nop
 80153b8:	3720      	adds	r7, #32
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}
 80153be:	bf00      	nop
 80153c0:	08029318 	.word	0x08029318

080153c4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80153c4:	b480      	push	{r7}
 80153c6:	b083      	sub	sp, #12
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80153cc:	4a04      	ldr	r2, [pc, #16]	; (80153e0 <netif_set_default+0x1c>)
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80153d2:	bf00      	nop
 80153d4:	370c      	adds	r7, #12
 80153d6:	46bd      	mov	sp, r7
 80153d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153dc:	4770      	bx	lr
 80153de:	bf00      	nop
 80153e0:	2400ae4c 	.word	0x2400ae4c

080153e4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d107      	bne.n	8015402 <netif_set_up+0x1e>
 80153f2:	4b0f      	ldr	r3, [pc, #60]	; (8015430 <netif_set_up+0x4c>)
 80153f4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80153f8:	490e      	ldr	r1, [pc, #56]	; (8015434 <netif_set_up+0x50>)
 80153fa:	480f      	ldr	r0, [pc, #60]	; (8015438 <netif_set_up+0x54>)
 80153fc:	f00b fc86 	bl	8020d0c <iprintf>
 8015400:	e013      	b.n	801542a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015408:	f003 0301 	and.w	r3, r3, #1
 801540c:	2b00      	cmp	r3, #0
 801540e:	d10c      	bne.n	801542a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015416:	f043 0301 	orr.w	r3, r3, #1
 801541a:	b2da      	uxtb	r2, r3
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015422:	2103      	movs	r1, #3
 8015424:	6878      	ldr	r0, [r7, #4]
 8015426:	f000 f809 	bl	801543c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801542a:	3708      	adds	r7, #8
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}
 8015430:	08026b94 	.word	0x08026b94
 8015434:	08026d44 	.word	0x08026d44
 8015438:	08026c0c 	.word	0x08026c0c

0801543c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b082      	sub	sp, #8
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
 8015444:	460b      	mov	r3, r1
 8015446:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d106      	bne.n	801545c <netif_issue_reports+0x20>
 801544e:	4b18      	ldr	r3, [pc, #96]	; (80154b0 <netif_issue_reports+0x74>)
 8015450:	f240 326d 	movw	r2, #877	; 0x36d
 8015454:	4917      	ldr	r1, [pc, #92]	; (80154b4 <netif_issue_reports+0x78>)
 8015456:	4818      	ldr	r0, [pc, #96]	; (80154b8 <netif_issue_reports+0x7c>)
 8015458:	f00b fc58 	bl	8020d0c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015462:	f003 0304 	and.w	r3, r3, #4
 8015466:	2b00      	cmp	r3, #0
 8015468:	d01e      	beq.n	80154a8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015470:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015474:	2b00      	cmp	r3, #0
 8015476:	d017      	beq.n	80154a8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015478:	78fb      	ldrb	r3, [r7, #3]
 801547a:	f003 0301 	and.w	r3, r3, #1
 801547e:	2b00      	cmp	r3, #0
 8015480:	d013      	beq.n	80154aa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	3304      	adds	r3, #4
 8015486:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015488:	2b00      	cmp	r3, #0
 801548a:	d00e      	beq.n	80154aa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015492:	f003 0308 	and.w	r3, r3, #8
 8015496:	2b00      	cmp	r3, #0
 8015498:	d007      	beq.n	80154aa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	3304      	adds	r3, #4
 801549e:	4619      	mov	r1, r3
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f7fd fc8d 	bl	8012dc0 <etharp_request>
 80154a6:	e000      	b.n	80154aa <netif_issue_reports+0x6e>
    return;
 80154a8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80154aa:	3708      	adds	r7, #8
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}
 80154b0:	08026b94 	.word	0x08026b94
 80154b4:	08026d60 	.word	0x08026d60
 80154b8:	08026c0c 	.word	0x08026c0c

080154bc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b082      	sub	sp, #8
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d107      	bne.n	80154da <netif_set_down+0x1e>
 80154ca:	4b12      	ldr	r3, [pc, #72]	; (8015514 <netif_set_down+0x58>)
 80154cc:	f240 329b 	movw	r2, #923	; 0x39b
 80154d0:	4911      	ldr	r1, [pc, #68]	; (8015518 <netif_set_down+0x5c>)
 80154d2:	4812      	ldr	r0, [pc, #72]	; (801551c <netif_set_down+0x60>)
 80154d4:	f00b fc1a 	bl	8020d0c <iprintf>
 80154d8:	e019      	b.n	801550e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80154e0:	f003 0301 	and.w	r3, r3, #1
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d012      	beq.n	801550e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80154ee:	f023 0301 	bic.w	r3, r3, #1
 80154f2:	b2da      	uxtb	r2, r3
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015500:	f003 0308 	and.w	r3, r3, #8
 8015504:	2b00      	cmp	r3, #0
 8015506:	d002      	beq.n	801550e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8015508:	6878      	ldr	r0, [r7, #4]
 801550a:	f7fd f817 	bl	801253c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801550e:	3708      	adds	r7, #8
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}
 8015514:	08026b94 	.word	0x08026b94
 8015518:	08026d84 	.word	0x08026d84
 801551c:	08026c0c 	.word	0x08026c0c

08015520 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b082      	sub	sp, #8
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d107      	bne.n	801553e <netif_set_link_up+0x1e>
 801552e:	4b13      	ldr	r3, [pc, #76]	; (801557c <netif_set_link_up+0x5c>)
 8015530:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8015534:	4912      	ldr	r1, [pc, #72]	; (8015580 <netif_set_link_up+0x60>)
 8015536:	4813      	ldr	r0, [pc, #76]	; (8015584 <netif_set_link_up+0x64>)
 8015538:	f00b fbe8 	bl	8020d0c <iprintf>
 801553c:	e01b      	b.n	8015576 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015544:	f003 0304 	and.w	r3, r3, #4
 8015548:	2b00      	cmp	r3, #0
 801554a:	d114      	bne.n	8015576 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015552:	f043 0304 	orr.w	r3, r3, #4
 8015556:	b2da      	uxtb	r2, r3
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801555e:	2103      	movs	r1, #3
 8015560:	6878      	ldr	r0, [r7, #4]
 8015562:	f7ff ff6b 	bl	801543c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	69db      	ldr	r3, [r3, #28]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d003      	beq.n	8015576 <netif_set_link_up+0x56>
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	69db      	ldr	r3, [r3, #28]
 8015572:	6878      	ldr	r0, [r7, #4]
 8015574:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8015576:	3708      	adds	r7, #8
 8015578:	46bd      	mov	sp, r7
 801557a:	bd80      	pop	{r7, pc}
 801557c:	08026b94 	.word	0x08026b94
 8015580:	08026da4 	.word	0x08026da4
 8015584:	08026c0c 	.word	0x08026c0c

08015588 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b082      	sub	sp, #8
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d107      	bne.n	80155a6 <netif_set_link_down+0x1e>
 8015596:	4b11      	ldr	r3, [pc, #68]	; (80155dc <netif_set_link_down+0x54>)
 8015598:	f240 4206 	movw	r2, #1030	; 0x406
 801559c:	4910      	ldr	r1, [pc, #64]	; (80155e0 <netif_set_link_down+0x58>)
 801559e:	4811      	ldr	r0, [pc, #68]	; (80155e4 <netif_set_link_down+0x5c>)
 80155a0:	f00b fbb4 	bl	8020d0c <iprintf>
 80155a4:	e017      	b.n	80155d6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155ac:	f003 0304 	and.w	r3, r3, #4
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d010      	beq.n	80155d6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155ba:	f023 0304 	bic.w	r3, r3, #4
 80155be:	b2da      	uxtb	r2, r3
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	69db      	ldr	r3, [r3, #28]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d003      	beq.n	80155d6 <netif_set_link_down+0x4e>
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	69db      	ldr	r3, [r3, #28]
 80155d2:	6878      	ldr	r0, [r7, #4]
 80155d4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80155d6:	3708      	adds	r7, #8
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}
 80155dc:	08026b94 	.word	0x08026b94
 80155e0:	08026dc8 	.word	0x08026dc8
 80155e4:	08026c0c 	.word	0x08026c0c

080155e8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80155e8:	b480      	push	{r7}
 80155ea:	b083      	sub	sp, #12
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
 80155f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d002      	beq.n	80155fe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	683a      	ldr	r2, [r7, #0]
 80155fc:	61da      	str	r2, [r3, #28]
  }
}
 80155fe:	bf00      	nop
 8015600:	370c      	adds	r7, #12
 8015602:	46bd      	mov	sp, r7
 8015604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015608:	4770      	bx	lr

0801560a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801560a:	b480      	push	{r7}
 801560c:	b085      	sub	sp, #20
 801560e:	af00      	add	r7, sp, #0
 8015610:	60f8      	str	r0, [r7, #12]
 8015612:	60b9      	str	r1, [r7, #8]
 8015614:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8015616:	f06f 030b 	mvn.w	r3, #11
}
 801561a:	4618      	mov	r0, r3
 801561c:	3714      	adds	r7, #20
 801561e:	46bd      	mov	sp, r7
 8015620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015624:	4770      	bx	lr
	...

08015628 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8015628:	b480      	push	{r7}
 801562a:	b085      	sub	sp, #20
 801562c:	af00      	add	r7, sp, #0
 801562e:	4603      	mov	r3, r0
 8015630:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8015632:	79fb      	ldrb	r3, [r7, #7]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d013      	beq.n	8015660 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8015638:	4b0d      	ldr	r3, [pc, #52]	; (8015670 <netif_get_by_index+0x48>)
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	60fb      	str	r3, [r7, #12]
 801563e:	e00c      	b.n	801565a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015646:	3301      	adds	r3, #1
 8015648:	b2db      	uxtb	r3, r3
 801564a:	79fa      	ldrb	r2, [r7, #7]
 801564c:	429a      	cmp	r2, r3
 801564e:	d101      	bne.n	8015654 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	e006      	b.n	8015662 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	60fb      	str	r3, [r7, #12]
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d1ef      	bne.n	8015640 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8015660:	2300      	movs	r3, #0
}
 8015662:	4618      	mov	r0, r3
 8015664:	3714      	adds	r7, #20
 8015666:	46bd      	mov	sp, r7
 8015668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566c:	4770      	bx	lr
 801566e:	bf00      	nop
 8015670:	2400ae48 	.word	0x2400ae48

08015674 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b082      	sub	sp, #8
 8015678:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801567a:	4b0c      	ldr	r3, [pc, #48]	; (80156ac <pbuf_free_ooseq+0x38>)
 801567c:	2200      	movs	r2, #0
 801567e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015680:	4b0b      	ldr	r3, [pc, #44]	; (80156b0 <pbuf_free_ooseq+0x3c>)
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	607b      	str	r3, [r7, #4]
 8015686:	e00a      	b.n	801569e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801568c:	2b00      	cmp	r3, #0
 801568e:	d003      	beq.n	8015698 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8015690:	6878      	ldr	r0, [r7, #4]
 8015692:	f002 fd95 	bl	80181c0 <tcp_free_ooseq>
      return;
 8015696:	e005      	b.n	80156a4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	68db      	ldr	r3, [r3, #12]
 801569c:	607b      	str	r3, [r7, #4]
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d1f1      	bne.n	8015688 <pbuf_free_ooseq+0x14>
    }
  }
}
 80156a4:	3708      	adds	r7, #8
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
 80156aa:	bf00      	nop
 80156ac:	2400ae50 	.word	0x2400ae50
 80156b0:	2400ae58 	.word	0x2400ae58

080156b4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80156b4:	b480      	push	{r7}
 80156b6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80156b8:	4b03      	ldr	r3, [pc, #12]	; (80156c8 <pbuf_pool_is_empty+0x14>)
 80156ba:	2201      	movs	r2, #1
 80156bc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80156be:	bf00      	nop
 80156c0:	46bd      	mov	sp, r7
 80156c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c6:	4770      	bx	lr
 80156c8:	2400ae50 	.word	0x2400ae50

080156cc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80156cc:	b480      	push	{r7}
 80156ce:	b085      	sub	sp, #20
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	60f8      	str	r0, [r7, #12]
 80156d4:	60b9      	str	r1, [r7, #8]
 80156d6:	4611      	mov	r1, r2
 80156d8:	461a      	mov	r2, r3
 80156da:	460b      	mov	r3, r1
 80156dc:	80fb      	strh	r3, [r7, #6]
 80156de:	4613      	mov	r3, r2
 80156e0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	2200      	movs	r2, #0
 80156e6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	68ba      	ldr	r2, [r7, #8]
 80156ec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	88fa      	ldrh	r2, [r7, #6]
 80156f2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	88ba      	ldrh	r2, [r7, #4]
 80156f8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80156fa:	8b3b      	ldrh	r3, [r7, #24]
 80156fc:	b2da      	uxtb	r2, r3
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	7f3a      	ldrb	r2, [r7, #28]
 8015706:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	2201      	movs	r2, #1
 801570c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	2200      	movs	r2, #0
 8015712:	73da      	strb	r2, [r3, #15]
}
 8015714:	bf00      	nop
 8015716:	3714      	adds	r7, #20
 8015718:	46bd      	mov	sp, r7
 801571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571e:	4770      	bx	lr

08015720 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b08c      	sub	sp, #48	; 0x30
 8015724:	af02      	add	r7, sp, #8
 8015726:	4603      	mov	r3, r0
 8015728:	71fb      	strb	r3, [r7, #7]
 801572a:	460b      	mov	r3, r1
 801572c:	80bb      	strh	r3, [r7, #4]
 801572e:	4613      	mov	r3, r2
 8015730:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8015732:	79fb      	ldrb	r3, [r7, #7]
 8015734:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8015736:	887b      	ldrh	r3, [r7, #2]
 8015738:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801573c:	d07f      	beq.n	801583e <pbuf_alloc+0x11e>
 801573e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8015742:	f300 80c8 	bgt.w	80158d6 <pbuf_alloc+0x1b6>
 8015746:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801574a:	d010      	beq.n	801576e <pbuf_alloc+0x4e>
 801574c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8015750:	f300 80c1 	bgt.w	80158d6 <pbuf_alloc+0x1b6>
 8015754:	2b01      	cmp	r3, #1
 8015756:	d002      	beq.n	801575e <pbuf_alloc+0x3e>
 8015758:	2b41      	cmp	r3, #65	; 0x41
 801575a:	f040 80bc 	bne.w	80158d6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801575e:	887a      	ldrh	r2, [r7, #2]
 8015760:	88bb      	ldrh	r3, [r7, #4]
 8015762:	4619      	mov	r1, r3
 8015764:	2000      	movs	r0, #0
 8015766:	f000 f8d1 	bl	801590c <pbuf_alloc_reference>
 801576a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801576c:	e0bd      	b.n	80158ea <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801576e:	2300      	movs	r3, #0
 8015770:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8015772:	2300      	movs	r3, #0
 8015774:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8015776:	88bb      	ldrh	r3, [r7, #4]
 8015778:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801577a:	2008      	movs	r0, #8
 801577c:	f7ff fbce 	bl	8014f1c <memp_malloc>
 8015780:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8015782:	693b      	ldr	r3, [r7, #16]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d109      	bne.n	801579c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8015788:	f7ff ff94 	bl	80156b4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801578e:	2b00      	cmp	r3, #0
 8015790:	d002      	beq.n	8015798 <pbuf_alloc+0x78>
            pbuf_free(p);
 8015792:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015794:	f000 faa8 	bl	8015ce8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8015798:	2300      	movs	r3, #0
 801579a:	e0a7      	b.n	80158ec <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801579c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801579e:	3303      	adds	r3, #3
 80157a0:	b29b      	uxth	r3, r3
 80157a2:	f023 0303 	bic.w	r3, r3, #3
 80157a6:	b29b      	uxth	r3, r3
 80157a8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80157ac:	b29b      	uxth	r3, r3
 80157ae:	8b7a      	ldrh	r2, [r7, #26]
 80157b0:	4293      	cmp	r3, r2
 80157b2:	bf28      	it	cs
 80157b4:	4613      	movcs	r3, r2
 80157b6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80157b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157ba:	3310      	adds	r3, #16
 80157bc:	693a      	ldr	r2, [r7, #16]
 80157be:	4413      	add	r3, r2
 80157c0:	3303      	adds	r3, #3
 80157c2:	f023 0303 	bic.w	r3, r3, #3
 80157c6:	4618      	mov	r0, r3
 80157c8:	89f9      	ldrh	r1, [r7, #14]
 80157ca:	8b7a      	ldrh	r2, [r7, #26]
 80157cc:	2300      	movs	r3, #0
 80157ce:	9301      	str	r3, [sp, #4]
 80157d0:	887b      	ldrh	r3, [r7, #2]
 80157d2:	9300      	str	r3, [sp, #0]
 80157d4:	460b      	mov	r3, r1
 80157d6:	4601      	mov	r1, r0
 80157d8:	6938      	ldr	r0, [r7, #16]
 80157da:	f7ff ff77 	bl	80156cc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80157de:	693b      	ldr	r3, [r7, #16]
 80157e0:	685b      	ldr	r3, [r3, #4]
 80157e2:	f003 0303 	and.w	r3, r3, #3
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d006      	beq.n	80157f8 <pbuf_alloc+0xd8>
 80157ea:	4b42      	ldr	r3, [pc, #264]	; (80158f4 <pbuf_alloc+0x1d4>)
 80157ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80157f0:	4941      	ldr	r1, [pc, #260]	; (80158f8 <pbuf_alloc+0x1d8>)
 80157f2:	4842      	ldr	r0, [pc, #264]	; (80158fc <pbuf_alloc+0x1dc>)
 80157f4:	f00b fa8a 	bl	8020d0c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80157f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157fa:	3303      	adds	r3, #3
 80157fc:	f023 0303 	bic.w	r3, r3, #3
 8015800:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8015804:	d106      	bne.n	8015814 <pbuf_alloc+0xf4>
 8015806:	4b3b      	ldr	r3, [pc, #236]	; (80158f4 <pbuf_alloc+0x1d4>)
 8015808:	f44f 7281 	mov.w	r2, #258	; 0x102
 801580c:	493c      	ldr	r1, [pc, #240]	; (8015900 <pbuf_alloc+0x1e0>)
 801580e:	483b      	ldr	r0, [pc, #236]	; (80158fc <pbuf_alloc+0x1dc>)
 8015810:	f00b fa7c 	bl	8020d0c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8015814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015816:	2b00      	cmp	r3, #0
 8015818:	d102      	bne.n	8015820 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801581a:	693b      	ldr	r3, [r7, #16]
 801581c:	627b      	str	r3, [r7, #36]	; 0x24
 801581e:	e002      	b.n	8015826 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8015820:	69fb      	ldr	r3, [r7, #28]
 8015822:	693a      	ldr	r2, [r7, #16]
 8015824:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8015826:	693b      	ldr	r3, [r7, #16]
 8015828:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801582a:	8b7a      	ldrh	r2, [r7, #26]
 801582c:	89fb      	ldrh	r3, [r7, #14]
 801582e:	1ad3      	subs	r3, r2, r3
 8015830:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8015832:	2300      	movs	r3, #0
 8015834:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8015836:	8b7b      	ldrh	r3, [r7, #26]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d19e      	bne.n	801577a <pbuf_alloc+0x5a>
      break;
 801583c:	e055      	b.n	80158ea <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801583e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015840:	3303      	adds	r3, #3
 8015842:	b29b      	uxth	r3, r3
 8015844:	f023 0303 	bic.w	r3, r3, #3
 8015848:	b29a      	uxth	r2, r3
 801584a:	88bb      	ldrh	r3, [r7, #4]
 801584c:	3303      	adds	r3, #3
 801584e:	b29b      	uxth	r3, r3
 8015850:	f023 0303 	bic.w	r3, r3, #3
 8015854:	b29b      	uxth	r3, r3
 8015856:	4413      	add	r3, r2
 8015858:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801585a:	8b3b      	ldrh	r3, [r7, #24]
 801585c:	3310      	adds	r3, #16
 801585e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015860:	8b3a      	ldrh	r2, [r7, #24]
 8015862:	88bb      	ldrh	r3, [r7, #4]
 8015864:	3303      	adds	r3, #3
 8015866:	f023 0303 	bic.w	r3, r3, #3
 801586a:	429a      	cmp	r2, r3
 801586c:	d306      	bcc.n	801587c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801586e:	8afa      	ldrh	r2, [r7, #22]
 8015870:	88bb      	ldrh	r3, [r7, #4]
 8015872:	3303      	adds	r3, #3
 8015874:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015878:	429a      	cmp	r2, r3
 801587a:	d201      	bcs.n	8015880 <pbuf_alloc+0x160>
        return NULL;
 801587c:	2300      	movs	r3, #0
 801587e:	e035      	b.n	80158ec <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8015880:	8afb      	ldrh	r3, [r7, #22]
 8015882:	4618      	mov	r0, r3
 8015884:	f7ff f9ba 	bl	8014bfc <mem_malloc>
 8015888:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801588c:	2b00      	cmp	r3, #0
 801588e:	d101      	bne.n	8015894 <pbuf_alloc+0x174>
        return NULL;
 8015890:	2300      	movs	r3, #0
 8015892:	e02b      	b.n	80158ec <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8015894:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015896:	3310      	adds	r3, #16
 8015898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801589a:	4413      	add	r3, r2
 801589c:	3303      	adds	r3, #3
 801589e:	f023 0303 	bic.w	r3, r3, #3
 80158a2:	4618      	mov	r0, r3
 80158a4:	88b9      	ldrh	r1, [r7, #4]
 80158a6:	88ba      	ldrh	r2, [r7, #4]
 80158a8:	2300      	movs	r3, #0
 80158aa:	9301      	str	r3, [sp, #4]
 80158ac:	887b      	ldrh	r3, [r7, #2]
 80158ae:	9300      	str	r3, [sp, #0]
 80158b0:	460b      	mov	r3, r1
 80158b2:	4601      	mov	r1, r0
 80158b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80158b6:	f7ff ff09 	bl	80156cc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80158ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158bc:	685b      	ldr	r3, [r3, #4]
 80158be:	f003 0303 	and.w	r3, r3, #3
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d010      	beq.n	80158e8 <pbuf_alloc+0x1c8>
 80158c6:	4b0b      	ldr	r3, [pc, #44]	; (80158f4 <pbuf_alloc+0x1d4>)
 80158c8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80158cc:	490d      	ldr	r1, [pc, #52]	; (8015904 <pbuf_alloc+0x1e4>)
 80158ce:	480b      	ldr	r0, [pc, #44]	; (80158fc <pbuf_alloc+0x1dc>)
 80158d0:	f00b fa1c 	bl	8020d0c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80158d4:	e008      	b.n	80158e8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80158d6:	4b07      	ldr	r3, [pc, #28]	; (80158f4 <pbuf_alloc+0x1d4>)
 80158d8:	f240 1227 	movw	r2, #295	; 0x127
 80158dc:	490a      	ldr	r1, [pc, #40]	; (8015908 <pbuf_alloc+0x1e8>)
 80158de:	4807      	ldr	r0, [pc, #28]	; (80158fc <pbuf_alloc+0x1dc>)
 80158e0:	f00b fa14 	bl	8020d0c <iprintf>
      return NULL;
 80158e4:	2300      	movs	r3, #0
 80158e6:	e001      	b.n	80158ec <pbuf_alloc+0x1cc>
      break;
 80158e8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80158ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	3728      	adds	r7, #40	; 0x28
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}
 80158f4:	08026dec 	.word	0x08026dec
 80158f8:	08026e48 	.word	0x08026e48
 80158fc:	08026e78 	.word	0x08026e78
 8015900:	08026ea0 	.word	0x08026ea0
 8015904:	08026ed4 	.word	0x08026ed4
 8015908:	08026f00 	.word	0x08026f00

0801590c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b086      	sub	sp, #24
 8015910:	af02      	add	r7, sp, #8
 8015912:	6078      	str	r0, [r7, #4]
 8015914:	460b      	mov	r3, r1
 8015916:	807b      	strh	r3, [r7, #2]
 8015918:	4613      	mov	r3, r2
 801591a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801591c:	883b      	ldrh	r3, [r7, #0]
 801591e:	2b41      	cmp	r3, #65	; 0x41
 8015920:	d009      	beq.n	8015936 <pbuf_alloc_reference+0x2a>
 8015922:	883b      	ldrh	r3, [r7, #0]
 8015924:	2b01      	cmp	r3, #1
 8015926:	d006      	beq.n	8015936 <pbuf_alloc_reference+0x2a>
 8015928:	4b0f      	ldr	r3, [pc, #60]	; (8015968 <pbuf_alloc_reference+0x5c>)
 801592a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801592e:	490f      	ldr	r1, [pc, #60]	; (801596c <pbuf_alloc_reference+0x60>)
 8015930:	480f      	ldr	r0, [pc, #60]	; (8015970 <pbuf_alloc_reference+0x64>)
 8015932:	f00b f9eb 	bl	8020d0c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8015936:	2007      	movs	r0, #7
 8015938:	f7ff faf0 	bl	8014f1c <memp_malloc>
 801593c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d101      	bne.n	8015948 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8015944:	2300      	movs	r3, #0
 8015946:	e00b      	b.n	8015960 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8015948:	8879      	ldrh	r1, [r7, #2]
 801594a:	887a      	ldrh	r2, [r7, #2]
 801594c:	2300      	movs	r3, #0
 801594e:	9301      	str	r3, [sp, #4]
 8015950:	883b      	ldrh	r3, [r7, #0]
 8015952:	9300      	str	r3, [sp, #0]
 8015954:	460b      	mov	r3, r1
 8015956:	6879      	ldr	r1, [r7, #4]
 8015958:	68f8      	ldr	r0, [r7, #12]
 801595a:	f7ff feb7 	bl	80156cc <pbuf_init_alloced_pbuf>
  return p;
 801595e:	68fb      	ldr	r3, [r7, #12]
}
 8015960:	4618      	mov	r0, r3
 8015962:	3710      	adds	r7, #16
 8015964:	46bd      	mov	sp, r7
 8015966:	bd80      	pop	{r7, pc}
 8015968:	08026dec 	.word	0x08026dec
 801596c:	08026f1c 	.word	0x08026f1c
 8015970:	08026e78 	.word	0x08026e78

08015974 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8015974:	b580      	push	{r7, lr}
 8015976:	b088      	sub	sp, #32
 8015978:	af02      	add	r7, sp, #8
 801597a:	607b      	str	r3, [r7, #4]
 801597c:	4603      	mov	r3, r0
 801597e:	73fb      	strb	r3, [r7, #15]
 8015980:	460b      	mov	r3, r1
 8015982:	81bb      	strh	r3, [r7, #12]
 8015984:	4613      	mov	r3, r2
 8015986:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8015988:	7bfb      	ldrb	r3, [r7, #15]
 801598a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801598c:	8a7b      	ldrh	r3, [r7, #18]
 801598e:	3303      	adds	r3, #3
 8015990:	f023 0203 	bic.w	r2, r3, #3
 8015994:	89bb      	ldrh	r3, [r7, #12]
 8015996:	441a      	add	r2, r3
 8015998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801599a:	429a      	cmp	r2, r3
 801599c:	d901      	bls.n	80159a2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801599e:	2300      	movs	r3, #0
 80159a0:	e018      	b.n	80159d4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80159a2:	6a3b      	ldr	r3, [r7, #32]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d007      	beq.n	80159b8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80159a8:	8a7b      	ldrh	r3, [r7, #18]
 80159aa:	3303      	adds	r3, #3
 80159ac:	f023 0303 	bic.w	r3, r3, #3
 80159b0:	6a3a      	ldr	r2, [r7, #32]
 80159b2:	4413      	add	r3, r2
 80159b4:	617b      	str	r3, [r7, #20]
 80159b6:	e001      	b.n	80159bc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80159b8:	2300      	movs	r3, #0
 80159ba:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	89b9      	ldrh	r1, [r7, #12]
 80159c0:	89ba      	ldrh	r2, [r7, #12]
 80159c2:	2302      	movs	r3, #2
 80159c4:	9301      	str	r3, [sp, #4]
 80159c6:	897b      	ldrh	r3, [r7, #10]
 80159c8:	9300      	str	r3, [sp, #0]
 80159ca:	460b      	mov	r3, r1
 80159cc:	6979      	ldr	r1, [r7, #20]
 80159ce:	f7ff fe7d 	bl	80156cc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80159d2:	687b      	ldr	r3, [r7, #4]
}
 80159d4:	4618      	mov	r0, r3
 80159d6:	3718      	adds	r7, #24
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}

080159dc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b084      	sub	sp, #16
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	6078      	str	r0, [r7, #4]
 80159e4:	460b      	mov	r3, r1
 80159e6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d106      	bne.n	80159fc <pbuf_realloc+0x20>
 80159ee:	4b3a      	ldr	r3, [pc, #232]	; (8015ad8 <pbuf_realloc+0xfc>)
 80159f0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80159f4:	4939      	ldr	r1, [pc, #228]	; (8015adc <pbuf_realloc+0x100>)
 80159f6:	483a      	ldr	r0, [pc, #232]	; (8015ae0 <pbuf_realloc+0x104>)
 80159f8:	f00b f988 	bl	8020d0c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	891b      	ldrh	r3, [r3, #8]
 8015a00:	887a      	ldrh	r2, [r7, #2]
 8015a02:	429a      	cmp	r2, r3
 8015a04:	d263      	bcs.n	8015ace <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	891a      	ldrh	r2, [r3, #8]
 8015a0a:	887b      	ldrh	r3, [r7, #2]
 8015a0c:	1ad3      	subs	r3, r2, r3
 8015a0e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015a10:	887b      	ldrh	r3, [r7, #2]
 8015a12:	817b      	strh	r3, [r7, #10]
  q = p;
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015a18:	e018      	b.n	8015a4c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	895b      	ldrh	r3, [r3, #10]
 8015a1e:	897a      	ldrh	r2, [r7, #10]
 8015a20:	1ad3      	subs	r3, r2, r3
 8015a22:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	891a      	ldrh	r2, [r3, #8]
 8015a28:	893b      	ldrh	r3, [r7, #8]
 8015a2a:	1ad3      	subs	r3, r2, r3
 8015a2c:	b29a      	uxth	r2, r3
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d106      	bne.n	8015a4c <pbuf_realloc+0x70>
 8015a3e:	4b26      	ldr	r3, [pc, #152]	; (8015ad8 <pbuf_realloc+0xfc>)
 8015a40:	f240 12af 	movw	r2, #431	; 0x1af
 8015a44:	4927      	ldr	r1, [pc, #156]	; (8015ae4 <pbuf_realloc+0x108>)
 8015a46:	4826      	ldr	r0, [pc, #152]	; (8015ae0 <pbuf_realloc+0x104>)
 8015a48:	f00b f960 	bl	8020d0c <iprintf>
  while (rem_len > q->len) {
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	895b      	ldrh	r3, [r3, #10]
 8015a50:	897a      	ldrh	r2, [r7, #10]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d8e1      	bhi.n	8015a1a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	7b1b      	ldrb	r3, [r3, #12]
 8015a5a:	f003 030f 	and.w	r3, r3, #15
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d121      	bne.n	8015aa6 <pbuf_realloc+0xca>
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	895b      	ldrh	r3, [r3, #10]
 8015a66:	897a      	ldrh	r2, [r7, #10]
 8015a68:	429a      	cmp	r2, r3
 8015a6a:	d01c      	beq.n	8015aa6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	7b5b      	ldrb	r3, [r3, #13]
 8015a70:	f003 0302 	and.w	r3, r3, #2
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d116      	bne.n	8015aa6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	685a      	ldr	r2, [r3, #4]
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	1ad3      	subs	r3, r2, r3
 8015a80:	b29a      	uxth	r2, r3
 8015a82:	897b      	ldrh	r3, [r7, #10]
 8015a84:	4413      	add	r3, r2
 8015a86:	b29b      	uxth	r3, r3
 8015a88:	4619      	mov	r1, r3
 8015a8a:	68f8      	ldr	r0, [r7, #12]
 8015a8c:	f7fe ffba 	bl	8014a04 <mem_trim>
 8015a90:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d106      	bne.n	8015aa6 <pbuf_realloc+0xca>
 8015a98:	4b0f      	ldr	r3, [pc, #60]	; (8015ad8 <pbuf_realloc+0xfc>)
 8015a9a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8015a9e:	4912      	ldr	r1, [pc, #72]	; (8015ae8 <pbuf_realloc+0x10c>)
 8015aa0:	480f      	ldr	r0, [pc, #60]	; (8015ae0 <pbuf_realloc+0x104>)
 8015aa2:	f00b f933 	bl	8020d0c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	897a      	ldrh	r2, [r7, #10]
 8015aaa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	895a      	ldrh	r2, [r3, #10]
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d004      	beq.n	8015ac6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f000 f911 	bl	8015ce8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	2200      	movs	r2, #0
 8015aca:	601a      	str	r2, [r3, #0]
 8015acc:	e000      	b.n	8015ad0 <pbuf_realloc+0xf4>
    return;
 8015ace:	bf00      	nop

}
 8015ad0:	3710      	adds	r7, #16
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}
 8015ad6:	bf00      	nop
 8015ad8:	08026dec 	.word	0x08026dec
 8015adc:	08026f30 	.word	0x08026f30
 8015ae0:	08026e78 	.word	0x08026e78
 8015ae4:	08026f48 	.word	0x08026f48
 8015ae8:	08026f60 	.word	0x08026f60

08015aec <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b086      	sub	sp, #24
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	60f8      	str	r0, [r7, #12]
 8015af4:	60b9      	str	r1, [r7, #8]
 8015af6:	4613      	mov	r3, r2
 8015af8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d106      	bne.n	8015b0e <pbuf_add_header_impl+0x22>
 8015b00:	4b2b      	ldr	r3, [pc, #172]	; (8015bb0 <pbuf_add_header_impl+0xc4>)
 8015b02:	f240 12df 	movw	r2, #479	; 0x1df
 8015b06:	492b      	ldr	r1, [pc, #172]	; (8015bb4 <pbuf_add_header_impl+0xc8>)
 8015b08:	482b      	ldr	r0, [pc, #172]	; (8015bb8 <pbuf_add_header_impl+0xcc>)
 8015b0a:	f00b f8ff 	bl	8020d0c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d003      	beq.n	8015b1c <pbuf_add_header_impl+0x30>
 8015b14:	68bb      	ldr	r3, [r7, #8]
 8015b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b1a:	d301      	bcc.n	8015b20 <pbuf_add_header_impl+0x34>
    return 1;
 8015b1c:	2301      	movs	r3, #1
 8015b1e:	e043      	b.n	8015ba8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d101      	bne.n	8015b2a <pbuf_add_header_impl+0x3e>
    return 0;
 8015b26:	2300      	movs	r3, #0
 8015b28:	e03e      	b.n	8015ba8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8015b2a:	68bb      	ldr	r3, [r7, #8]
 8015b2c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	891a      	ldrh	r2, [r3, #8]
 8015b32:	8a7b      	ldrh	r3, [r7, #18]
 8015b34:	4413      	add	r3, r2
 8015b36:	b29b      	uxth	r3, r3
 8015b38:	8a7a      	ldrh	r2, [r7, #18]
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d901      	bls.n	8015b42 <pbuf_add_header_impl+0x56>
    return 1;
 8015b3e:	2301      	movs	r3, #1
 8015b40:	e032      	b.n	8015ba8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	7b1b      	ldrb	r3, [r3, #12]
 8015b46:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8015b48:	8a3b      	ldrh	r3, [r7, #16]
 8015b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d00c      	beq.n	8015b6c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	685a      	ldr	r2, [r3, #4]
 8015b56:	68bb      	ldr	r3, [r7, #8]
 8015b58:	425b      	negs	r3, r3
 8015b5a:	4413      	add	r3, r2
 8015b5c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	3310      	adds	r3, #16
 8015b62:	697a      	ldr	r2, [r7, #20]
 8015b64:	429a      	cmp	r2, r3
 8015b66:	d20d      	bcs.n	8015b84 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8015b68:	2301      	movs	r3, #1
 8015b6a:	e01d      	b.n	8015ba8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8015b6c:	79fb      	ldrb	r3, [r7, #7]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d006      	beq.n	8015b80 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	685a      	ldr	r2, [r3, #4]
 8015b76:	68bb      	ldr	r3, [r7, #8]
 8015b78:	425b      	negs	r3, r3
 8015b7a:	4413      	add	r3, r2
 8015b7c:	617b      	str	r3, [r7, #20]
 8015b7e:	e001      	b.n	8015b84 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8015b80:	2301      	movs	r3, #1
 8015b82:	e011      	b.n	8015ba8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	697a      	ldr	r2, [r7, #20]
 8015b88:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	895a      	ldrh	r2, [r3, #10]
 8015b8e:	8a7b      	ldrh	r3, [r7, #18]
 8015b90:	4413      	add	r3, r2
 8015b92:	b29a      	uxth	r2, r3
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	891a      	ldrh	r2, [r3, #8]
 8015b9c:	8a7b      	ldrh	r3, [r7, #18]
 8015b9e:	4413      	add	r3, r2
 8015ba0:	b29a      	uxth	r2, r3
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	811a      	strh	r2, [r3, #8]


  return 0;
 8015ba6:	2300      	movs	r3, #0
}
 8015ba8:	4618      	mov	r0, r3
 8015baa:	3718      	adds	r7, #24
 8015bac:	46bd      	mov	sp, r7
 8015bae:	bd80      	pop	{r7, pc}
 8015bb0:	08026dec 	.word	0x08026dec
 8015bb4:	08026f7c 	.word	0x08026f7c
 8015bb8:	08026e78 	.word	0x08026e78

08015bbc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b082      	sub	sp, #8
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
 8015bc4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	6839      	ldr	r1, [r7, #0]
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f7ff ff8e 	bl	8015aec <pbuf_add_header_impl>
 8015bd0:	4603      	mov	r3, r0
}
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	3708      	adds	r7, #8
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	bd80      	pop	{r7, pc}
	...

08015bdc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b084      	sub	sp, #16
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
 8015be4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d106      	bne.n	8015bfa <pbuf_remove_header+0x1e>
 8015bec:	4b20      	ldr	r3, [pc, #128]	; (8015c70 <pbuf_remove_header+0x94>)
 8015bee:	f240 224b 	movw	r2, #587	; 0x24b
 8015bf2:	4920      	ldr	r1, [pc, #128]	; (8015c74 <pbuf_remove_header+0x98>)
 8015bf4:	4820      	ldr	r0, [pc, #128]	; (8015c78 <pbuf_remove_header+0x9c>)
 8015bf6:	f00b f889 	bl	8020d0c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d003      	beq.n	8015c08 <pbuf_remove_header+0x2c>
 8015c00:	683b      	ldr	r3, [r7, #0]
 8015c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015c06:	d301      	bcc.n	8015c0c <pbuf_remove_header+0x30>
    return 1;
 8015c08:	2301      	movs	r3, #1
 8015c0a:	e02c      	b.n	8015c66 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8015c0c:	683b      	ldr	r3, [r7, #0]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d101      	bne.n	8015c16 <pbuf_remove_header+0x3a>
    return 0;
 8015c12:	2300      	movs	r3, #0
 8015c14:	e027      	b.n	8015c66 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8015c16:	683b      	ldr	r3, [r7, #0]
 8015c18:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	895b      	ldrh	r3, [r3, #10]
 8015c1e:	89fa      	ldrh	r2, [r7, #14]
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d908      	bls.n	8015c36 <pbuf_remove_header+0x5a>
 8015c24:	4b12      	ldr	r3, [pc, #72]	; (8015c70 <pbuf_remove_header+0x94>)
 8015c26:	f240 2255 	movw	r2, #597	; 0x255
 8015c2a:	4914      	ldr	r1, [pc, #80]	; (8015c7c <pbuf_remove_header+0xa0>)
 8015c2c:	4812      	ldr	r0, [pc, #72]	; (8015c78 <pbuf_remove_header+0x9c>)
 8015c2e:	f00b f86d 	bl	8020d0c <iprintf>
 8015c32:	2301      	movs	r3, #1
 8015c34:	e017      	b.n	8015c66 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	685b      	ldr	r3, [r3, #4]
 8015c3a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	685a      	ldr	r2, [r3, #4]
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	441a      	add	r2, r3
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	895a      	ldrh	r2, [r3, #10]
 8015c4c:	89fb      	ldrh	r3, [r7, #14]
 8015c4e:	1ad3      	subs	r3, r2, r3
 8015c50:	b29a      	uxth	r2, r3
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	891a      	ldrh	r2, [r3, #8]
 8015c5a:	89fb      	ldrh	r3, [r7, #14]
 8015c5c:	1ad3      	subs	r3, r2, r3
 8015c5e:	b29a      	uxth	r2, r3
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8015c64:	2300      	movs	r3, #0
}
 8015c66:	4618      	mov	r0, r3
 8015c68:	3710      	adds	r7, #16
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	bf00      	nop
 8015c70:	08026dec 	.word	0x08026dec
 8015c74:	08026f7c 	.word	0x08026f7c
 8015c78:	08026e78 	.word	0x08026e78
 8015c7c:	08026f88 	.word	0x08026f88

08015c80 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b082      	sub	sp, #8
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
 8015c88:	460b      	mov	r3, r1
 8015c8a:	807b      	strh	r3, [r7, #2]
 8015c8c:	4613      	mov	r3, r2
 8015c8e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8015c90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	da08      	bge.n	8015caa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8015c98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015c9c:	425b      	negs	r3, r3
 8015c9e:	4619      	mov	r1, r3
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	f7ff ff9b 	bl	8015bdc <pbuf_remove_header>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	e007      	b.n	8015cba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8015caa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015cae:	787a      	ldrb	r2, [r7, #1]
 8015cb0:	4619      	mov	r1, r3
 8015cb2:	6878      	ldr	r0, [r7, #4]
 8015cb4:	f7ff ff1a 	bl	8015aec <pbuf_add_header_impl>
 8015cb8:	4603      	mov	r3, r0
  }
}
 8015cba:	4618      	mov	r0, r3
 8015cbc:	3708      	adds	r7, #8
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}

08015cc2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8015cc2:	b580      	push	{r7, lr}
 8015cc4:	b082      	sub	sp, #8
 8015cc6:	af00      	add	r7, sp, #0
 8015cc8:	6078      	str	r0, [r7, #4]
 8015cca:	460b      	mov	r3, r1
 8015ccc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8015cce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015cd2:	2201      	movs	r2, #1
 8015cd4:	4619      	mov	r1, r3
 8015cd6:	6878      	ldr	r0, [r7, #4]
 8015cd8:	f7ff ffd2 	bl	8015c80 <pbuf_header_impl>
 8015cdc:	4603      	mov	r3, r0
}
 8015cde:	4618      	mov	r0, r3
 8015ce0:	3708      	adds	r7, #8
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	bd80      	pop	{r7, pc}
	...

08015ce8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b086      	sub	sp, #24
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d10b      	bne.n	8015d0e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d106      	bne.n	8015d0a <pbuf_free+0x22>
 8015cfc:	4b38      	ldr	r3, [pc, #224]	; (8015de0 <pbuf_free+0xf8>)
 8015cfe:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8015d02:	4938      	ldr	r1, [pc, #224]	; (8015de4 <pbuf_free+0xfc>)
 8015d04:	4838      	ldr	r0, [pc, #224]	; (8015de8 <pbuf_free+0x100>)
 8015d06:	f00b f801 	bl	8020d0c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	e063      	b.n	8015dd6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8015d0e:	2300      	movs	r3, #0
 8015d10:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015d12:	e05c      	b.n	8015dce <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	7b9b      	ldrb	r3, [r3, #14]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d106      	bne.n	8015d2a <pbuf_free+0x42>
 8015d1c:	4b30      	ldr	r3, [pc, #192]	; (8015de0 <pbuf_free+0xf8>)
 8015d1e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8015d22:	4932      	ldr	r1, [pc, #200]	; (8015dec <pbuf_free+0x104>)
 8015d24:	4830      	ldr	r0, [pc, #192]	; (8015de8 <pbuf_free+0x100>)
 8015d26:	f00a fff1 	bl	8020d0c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	7b9b      	ldrb	r3, [r3, #14]
 8015d2e:	3b01      	subs	r3, #1
 8015d30:	b2da      	uxtb	r2, r3
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	739a      	strb	r2, [r3, #14]
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	7b9b      	ldrb	r3, [r3, #14]
 8015d3a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015d3c:	7dbb      	ldrb	r3, [r7, #22]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d143      	bne.n	8015dca <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	7b1b      	ldrb	r3, [r3, #12]
 8015d4c:	f003 030f 	and.w	r3, r3, #15
 8015d50:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	7b5b      	ldrb	r3, [r3, #13]
 8015d56:	f003 0302 	and.w	r3, r3, #2
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d011      	beq.n	8015d82 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8015d62:	68bb      	ldr	r3, [r7, #8]
 8015d64:	691b      	ldr	r3, [r3, #16]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d106      	bne.n	8015d78 <pbuf_free+0x90>
 8015d6a:	4b1d      	ldr	r3, [pc, #116]	; (8015de0 <pbuf_free+0xf8>)
 8015d6c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8015d70:	491f      	ldr	r1, [pc, #124]	; (8015df0 <pbuf_free+0x108>)
 8015d72:	481d      	ldr	r0, [pc, #116]	; (8015de8 <pbuf_free+0x100>)
 8015d74:	f00a ffca 	bl	8020d0c <iprintf>
        pc->custom_free_function(p);
 8015d78:	68bb      	ldr	r3, [r7, #8]
 8015d7a:	691b      	ldr	r3, [r3, #16]
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	4798      	blx	r3
 8015d80:	e01d      	b.n	8015dbe <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8015d82:	7bfb      	ldrb	r3, [r7, #15]
 8015d84:	2b02      	cmp	r3, #2
 8015d86:	d104      	bne.n	8015d92 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8015d88:	6879      	ldr	r1, [r7, #4]
 8015d8a:	2008      	movs	r0, #8
 8015d8c:	f7ff f936 	bl	8014ffc <memp_free>
 8015d90:	e015      	b.n	8015dbe <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8015d92:	7bfb      	ldrb	r3, [r7, #15]
 8015d94:	2b01      	cmp	r3, #1
 8015d96:	d104      	bne.n	8015da2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8015d98:	6879      	ldr	r1, [r7, #4]
 8015d9a:	2007      	movs	r0, #7
 8015d9c:	f7ff f92e 	bl	8014ffc <memp_free>
 8015da0:	e00d      	b.n	8015dbe <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8015da2:	7bfb      	ldrb	r3, [r7, #15]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d103      	bne.n	8015db0 <pbuf_free+0xc8>
          mem_free(p);
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f7fe fdc1 	bl	8014930 <mem_free>
 8015dae:	e006      	b.n	8015dbe <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8015db0:	4b0b      	ldr	r3, [pc, #44]	; (8015de0 <pbuf_free+0xf8>)
 8015db2:	f240 320f 	movw	r2, #783	; 0x30f
 8015db6:	490f      	ldr	r1, [pc, #60]	; (8015df4 <pbuf_free+0x10c>)
 8015db8:	480b      	ldr	r0, [pc, #44]	; (8015de8 <pbuf_free+0x100>)
 8015dba:	f00a ffa7 	bl	8020d0c <iprintf>
        }
      }
      count++;
 8015dbe:	7dfb      	ldrb	r3, [r7, #23]
 8015dc0:	3301      	adds	r3, #1
 8015dc2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	607b      	str	r3, [r7, #4]
 8015dc8:	e001      	b.n	8015dce <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8015dca:	2300      	movs	r3, #0
 8015dcc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d19f      	bne.n	8015d14 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8015dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3718      	adds	r7, #24
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}
 8015dde:	bf00      	nop
 8015de0:	08026dec 	.word	0x08026dec
 8015de4:	08026f7c 	.word	0x08026f7c
 8015de8:	08026e78 	.word	0x08026e78
 8015dec:	08026fa8 	.word	0x08026fa8
 8015df0:	08026fc0 	.word	0x08026fc0
 8015df4:	08026fe4 	.word	0x08026fe4

08015df8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8015df8:	b480      	push	{r7}
 8015dfa:	b085      	sub	sp, #20
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8015e00:	2300      	movs	r3, #0
 8015e02:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8015e04:	e005      	b.n	8015e12 <pbuf_clen+0x1a>
    ++len;
 8015e06:	89fb      	ldrh	r3, [r7, #14]
 8015e08:	3301      	adds	r3, #1
 8015e0a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d1f6      	bne.n	8015e06 <pbuf_clen+0xe>
  }
  return len;
 8015e18:	89fb      	ldrh	r3, [r7, #14]
}
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	3714      	adds	r7, #20
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e24:	4770      	bx	lr
	...

08015e28 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b082      	sub	sp, #8
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d010      	beq.n	8015e58 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	7b9b      	ldrb	r3, [r3, #14]
 8015e3a:	3301      	adds	r3, #1
 8015e3c:	b2da      	uxtb	r2, r3
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	7b9b      	ldrb	r3, [r3, #14]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d106      	bne.n	8015e58 <pbuf_ref+0x30>
 8015e4a:	4b05      	ldr	r3, [pc, #20]	; (8015e60 <pbuf_ref+0x38>)
 8015e4c:	f240 3242 	movw	r2, #834	; 0x342
 8015e50:	4904      	ldr	r1, [pc, #16]	; (8015e64 <pbuf_ref+0x3c>)
 8015e52:	4805      	ldr	r0, [pc, #20]	; (8015e68 <pbuf_ref+0x40>)
 8015e54:	f00a ff5a 	bl	8020d0c <iprintf>
  }
}
 8015e58:	bf00      	nop
 8015e5a:	3708      	adds	r7, #8
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	bd80      	pop	{r7, pc}
 8015e60:	08026dec 	.word	0x08026dec
 8015e64:	08026ff8 	.word	0x08026ff8
 8015e68:	08026e78 	.word	0x08026e78

08015e6c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b084      	sub	sp, #16
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
 8015e74:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d002      	beq.n	8015e82 <pbuf_cat+0x16>
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d107      	bne.n	8015e92 <pbuf_cat+0x26>
 8015e82:	4b20      	ldr	r3, [pc, #128]	; (8015f04 <pbuf_cat+0x98>)
 8015e84:	f240 3259 	movw	r2, #857	; 0x359
 8015e88:	491f      	ldr	r1, [pc, #124]	; (8015f08 <pbuf_cat+0x9c>)
 8015e8a:	4820      	ldr	r0, [pc, #128]	; (8015f0c <pbuf_cat+0xa0>)
 8015e8c:	f00a ff3e 	bl	8020d0c <iprintf>
 8015e90:	e034      	b.n	8015efc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	60fb      	str	r3, [r7, #12]
 8015e96:	e00a      	b.n	8015eae <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	891a      	ldrh	r2, [r3, #8]
 8015e9c:	683b      	ldr	r3, [r7, #0]
 8015e9e:	891b      	ldrh	r3, [r3, #8]
 8015ea0:	4413      	add	r3, r2
 8015ea2:	b29a      	uxth	r2, r3
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	60fb      	str	r3, [r7, #12]
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d1f0      	bne.n	8015e98 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	891a      	ldrh	r2, [r3, #8]
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	895b      	ldrh	r3, [r3, #10]
 8015ebe:	429a      	cmp	r2, r3
 8015ec0:	d006      	beq.n	8015ed0 <pbuf_cat+0x64>
 8015ec2:	4b10      	ldr	r3, [pc, #64]	; (8015f04 <pbuf_cat+0x98>)
 8015ec4:	f240 3262 	movw	r2, #866	; 0x362
 8015ec8:	4911      	ldr	r1, [pc, #68]	; (8015f10 <pbuf_cat+0xa4>)
 8015eca:	4810      	ldr	r0, [pc, #64]	; (8015f0c <pbuf_cat+0xa0>)
 8015ecc:	f00a ff1e 	bl	8020d0c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d006      	beq.n	8015ee6 <pbuf_cat+0x7a>
 8015ed8:	4b0a      	ldr	r3, [pc, #40]	; (8015f04 <pbuf_cat+0x98>)
 8015eda:	f240 3263 	movw	r2, #867	; 0x363
 8015ede:	490d      	ldr	r1, [pc, #52]	; (8015f14 <pbuf_cat+0xa8>)
 8015ee0:	480a      	ldr	r0, [pc, #40]	; (8015f0c <pbuf_cat+0xa0>)
 8015ee2:	f00a ff13 	bl	8020d0c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	891a      	ldrh	r2, [r3, #8]
 8015eea:	683b      	ldr	r3, [r7, #0]
 8015eec:	891b      	ldrh	r3, [r3, #8]
 8015eee:	4413      	add	r3, r2
 8015ef0:	b29a      	uxth	r2, r3
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	683a      	ldr	r2, [r7, #0]
 8015efa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8015efc:	3710      	adds	r7, #16
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bd80      	pop	{r7, pc}
 8015f02:	bf00      	nop
 8015f04:	08026dec 	.word	0x08026dec
 8015f08:	0802700c 	.word	0x0802700c
 8015f0c:	08026e78 	.word	0x08026e78
 8015f10:	08027044 	.word	0x08027044
 8015f14:	08027074 	.word	0x08027074

08015f18 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b086      	sub	sp, #24
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
 8015f20:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8015f22:	2300      	movs	r3, #0
 8015f24:	617b      	str	r3, [r7, #20]
 8015f26:	2300      	movs	r3, #0
 8015f28:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d008      	beq.n	8015f42 <pbuf_copy+0x2a>
 8015f30:	683b      	ldr	r3, [r7, #0]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d005      	beq.n	8015f42 <pbuf_copy+0x2a>
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	891a      	ldrh	r2, [r3, #8]
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	891b      	ldrh	r3, [r3, #8]
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d209      	bcs.n	8015f56 <pbuf_copy+0x3e>
 8015f42:	4b57      	ldr	r3, [pc, #348]	; (80160a0 <pbuf_copy+0x188>)
 8015f44:	f240 32c9 	movw	r2, #969	; 0x3c9
 8015f48:	4956      	ldr	r1, [pc, #344]	; (80160a4 <pbuf_copy+0x18c>)
 8015f4a:	4857      	ldr	r0, [pc, #348]	; (80160a8 <pbuf_copy+0x190>)
 8015f4c:	f00a fede 	bl	8020d0c <iprintf>
 8015f50:	f06f 030f 	mvn.w	r3, #15
 8015f54:	e09f      	b.n	8016096 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	895b      	ldrh	r3, [r3, #10]
 8015f5a:	461a      	mov	r2, r3
 8015f5c:	697b      	ldr	r3, [r7, #20]
 8015f5e:	1ad2      	subs	r2, r2, r3
 8015f60:	683b      	ldr	r3, [r7, #0]
 8015f62:	895b      	ldrh	r3, [r3, #10]
 8015f64:	4619      	mov	r1, r3
 8015f66:	693b      	ldr	r3, [r7, #16]
 8015f68:	1acb      	subs	r3, r1, r3
 8015f6a:	429a      	cmp	r2, r3
 8015f6c:	d306      	bcc.n	8015f7c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	895b      	ldrh	r3, [r3, #10]
 8015f72:	461a      	mov	r2, r3
 8015f74:	693b      	ldr	r3, [r7, #16]
 8015f76:	1ad3      	subs	r3, r2, r3
 8015f78:	60fb      	str	r3, [r7, #12]
 8015f7a:	e005      	b.n	8015f88 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	895b      	ldrh	r3, [r3, #10]
 8015f80:	461a      	mov	r2, r3
 8015f82:	697b      	ldr	r3, [r7, #20]
 8015f84:	1ad3      	subs	r3, r2, r3
 8015f86:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	685a      	ldr	r2, [r3, #4]
 8015f8c:	697b      	ldr	r3, [r7, #20]
 8015f8e:	18d0      	adds	r0, r2, r3
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	685a      	ldr	r2, [r3, #4]
 8015f94:	693b      	ldr	r3, [r7, #16]
 8015f96:	4413      	add	r3, r2
 8015f98:	68fa      	ldr	r2, [r7, #12]
 8015f9a:	4619      	mov	r1, r3
 8015f9c:	f009 ff94 	bl	801fec8 <memcpy>
    offset_to += len;
 8015fa0:	697a      	ldr	r2, [r7, #20]
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	4413      	add	r3, r2
 8015fa6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8015fa8:	693a      	ldr	r2, [r7, #16]
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	4413      	add	r3, r2
 8015fae:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	895b      	ldrh	r3, [r3, #10]
 8015fb4:	461a      	mov	r2, r3
 8015fb6:	697b      	ldr	r3, [r7, #20]
 8015fb8:	4293      	cmp	r3, r2
 8015fba:	d906      	bls.n	8015fca <pbuf_copy+0xb2>
 8015fbc:	4b38      	ldr	r3, [pc, #224]	; (80160a0 <pbuf_copy+0x188>)
 8015fbe:	f240 32d9 	movw	r2, #985	; 0x3d9
 8015fc2:	493a      	ldr	r1, [pc, #232]	; (80160ac <pbuf_copy+0x194>)
 8015fc4:	4838      	ldr	r0, [pc, #224]	; (80160a8 <pbuf_copy+0x190>)
 8015fc6:	f00a fea1 	bl	8020d0c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8015fca:	683b      	ldr	r3, [r7, #0]
 8015fcc:	895b      	ldrh	r3, [r3, #10]
 8015fce:	461a      	mov	r2, r3
 8015fd0:	693b      	ldr	r3, [r7, #16]
 8015fd2:	4293      	cmp	r3, r2
 8015fd4:	d906      	bls.n	8015fe4 <pbuf_copy+0xcc>
 8015fd6:	4b32      	ldr	r3, [pc, #200]	; (80160a0 <pbuf_copy+0x188>)
 8015fd8:	f240 32da 	movw	r2, #986	; 0x3da
 8015fdc:	4934      	ldr	r1, [pc, #208]	; (80160b0 <pbuf_copy+0x198>)
 8015fde:	4832      	ldr	r0, [pc, #200]	; (80160a8 <pbuf_copy+0x190>)
 8015fe0:	f00a fe94 	bl	8020d0c <iprintf>
    if (offset_from >= p_from->len) {
 8015fe4:	683b      	ldr	r3, [r7, #0]
 8015fe6:	895b      	ldrh	r3, [r3, #10]
 8015fe8:	461a      	mov	r2, r3
 8015fea:	693b      	ldr	r3, [r7, #16]
 8015fec:	4293      	cmp	r3, r2
 8015fee:	d304      	bcc.n	8015ffa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8015ff4:	683b      	ldr	r3, [r7, #0]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	895b      	ldrh	r3, [r3, #10]
 8015ffe:	461a      	mov	r2, r3
 8016000:	697b      	ldr	r3, [r7, #20]
 8016002:	4293      	cmp	r3, r2
 8016004:	d114      	bne.n	8016030 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8016006:	2300      	movs	r3, #0
 8016008:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d10c      	bne.n	8016030 <pbuf_copy+0x118>
 8016016:	683b      	ldr	r3, [r7, #0]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d009      	beq.n	8016030 <pbuf_copy+0x118>
 801601c:	4b20      	ldr	r3, [pc, #128]	; (80160a0 <pbuf_copy+0x188>)
 801601e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8016022:	4924      	ldr	r1, [pc, #144]	; (80160b4 <pbuf_copy+0x19c>)
 8016024:	4820      	ldr	r0, [pc, #128]	; (80160a8 <pbuf_copy+0x190>)
 8016026:	f00a fe71 	bl	8020d0c <iprintf>
 801602a:	f06f 030f 	mvn.w	r3, #15
 801602e:	e032      	b.n	8016096 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016030:	683b      	ldr	r3, [r7, #0]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d013      	beq.n	801605e <pbuf_copy+0x146>
 8016036:	683b      	ldr	r3, [r7, #0]
 8016038:	895a      	ldrh	r2, [r3, #10]
 801603a:	683b      	ldr	r3, [r7, #0]
 801603c:	891b      	ldrh	r3, [r3, #8]
 801603e:	429a      	cmp	r2, r3
 8016040:	d10d      	bne.n	801605e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016042:	683b      	ldr	r3, [r7, #0]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d009      	beq.n	801605e <pbuf_copy+0x146>
 801604a:	4b15      	ldr	r3, [pc, #84]	; (80160a0 <pbuf_copy+0x188>)
 801604c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8016050:	4919      	ldr	r1, [pc, #100]	; (80160b8 <pbuf_copy+0x1a0>)
 8016052:	4815      	ldr	r0, [pc, #84]	; (80160a8 <pbuf_copy+0x190>)
 8016054:	f00a fe5a 	bl	8020d0c <iprintf>
 8016058:	f06f 0305 	mvn.w	r3, #5
 801605c:	e01b      	b.n	8016096 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d013      	beq.n	801608c <pbuf_copy+0x174>
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	895a      	ldrh	r2, [r3, #10]
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	891b      	ldrh	r3, [r3, #8]
 801606c:	429a      	cmp	r2, r3
 801606e:	d10d      	bne.n	801608c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d009      	beq.n	801608c <pbuf_copy+0x174>
 8016078:	4b09      	ldr	r3, [pc, #36]	; (80160a0 <pbuf_copy+0x188>)
 801607a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801607e:	490e      	ldr	r1, [pc, #56]	; (80160b8 <pbuf_copy+0x1a0>)
 8016080:	4809      	ldr	r0, [pc, #36]	; (80160a8 <pbuf_copy+0x190>)
 8016082:	f00a fe43 	bl	8020d0c <iprintf>
 8016086:	f06f 0305 	mvn.w	r3, #5
 801608a:	e004      	b.n	8016096 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801608c:	683b      	ldr	r3, [r7, #0]
 801608e:	2b00      	cmp	r3, #0
 8016090:	f47f af61 	bne.w	8015f56 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016094:	2300      	movs	r3, #0
}
 8016096:	4618      	mov	r0, r3
 8016098:	3718      	adds	r7, #24
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}
 801609e:	bf00      	nop
 80160a0:	08026dec 	.word	0x08026dec
 80160a4:	080270c0 	.word	0x080270c0
 80160a8:	08026e78 	.word	0x08026e78
 80160ac:	080270f0 	.word	0x080270f0
 80160b0:	08027108 	.word	0x08027108
 80160b4:	08027124 	.word	0x08027124
 80160b8:	08027134 	.word	0x08027134

080160bc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b088      	sub	sp, #32
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	60f8      	str	r0, [r7, #12]
 80160c4:	60b9      	str	r1, [r7, #8]
 80160c6:	4611      	mov	r1, r2
 80160c8:	461a      	mov	r2, r3
 80160ca:	460b      	mov	r3, r1
 80160cc:	80fb      	strh	r3, [r7, #6]
 80160ce:	4613      	mov	r3, r2
 80160d0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80160d2:	2300      	movs	r3, #0
 80160d4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80160d6:	2300      	movs	r3, #0
 80160d8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d108      	bne.n	80160f2 <pbuf_copy_partial+0x36>
 80160e0:	4b2b      	ldr	r3, [pc, #172]	; (8016190 <pbuf_copy_partial+0xd4>)
 80160e2:	f240 420a 	movw	r2, #1034	; 0x40a
 80160e6:	492b      	ldr	r1, [pc, #172]	; (8016194 <pbuf_copy_partial+0xd8>)
 80160e8:	482b      	ldr	r0, [pc, #172]	; (8016198 <pbuf_copy_partial+0xdc>)
 80160ea:	f00a fe0f 	bl	8020d0c <iprintf>
 80160ee:	2300      	movs	r3, #0
 80160f0:	e04a      	b.n	8016188 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80160f2:	68bb      	ldr	r3, [r7, #8]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d108      	bne.n	801610a <pbuf_copy_partial+0x4e>
 80160f8:	4b25      	ldr	r3, [pc, #148]	; (8016190 <pbuf_copy_partial+0xd4>)
 80160fa:	f240 420b 	movw	r2, #1035	; 0x40b
 80160fe:	4927      	ldr	r1, [pc, #156]	; (801619c <pbuf_copy_partial+0xe0>)
 8016100:	4825      	ldr	r0, [pc, #148]	; (8016198 <pbuf_copy_partial+0xdc>)
 8016102:	f00a fe03 	bl	8020d0c <iprintf>
 8016106:	2300      	movs	r3, #0
 8016108:	e03e      	b.n	8016188 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	61fb      	str	r3, [r7, #28]
 801610e:	e034      	b.n	801617a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8016110:	88bb      	ldrh	r3, [r7, #4]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d00a      	beq.n	801612c <pbuf_copy_partial+0x70>
 8016116:	69fb      	ldr	r3, [r7, #28]
 8016118:	895b      	ldrh	r3, [r3, #10]
 801611a:	88ba      	ldrh	r2, [r7, #4]
 801611c:	429a      	cmp	r2, r3
 801611e:	d305      	bcc.n	801612c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8016120:	69fb      	ldr	r3, [r7, #28]
 8016122:	895b      	ldrh	r3, [r3, #10]
 8016124:	88ba      	ldrh	r2, [r7, #4]
 8016126:	1ad3      	subs	r3, r2, r3
 8016128:	80bb      	strh	r3, [r7, #4]
 801612a:	e023      	b.n	8016174 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801612c:	69fb      	ldr	r3, [r7, #28]
 801612e:	895a      	ldrh	r2, [r3, #10]
 8016130:	88bb      	ldrh	r3, [r7, #4]
 8016132:	1ad3      	subs	r3, r2, r3
 8016134:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8016136:	8b3a      	ldrh	r2, [r7, #24]
 8016138:	88fb      	ldrh	r3, [r7, #6]
 801613a:	429a      	cmp	r2, r3
 801613c:	d901      	bls.n	8016142 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801613e:	88fb      	ldrh	r3, [r7, #6]
 8016140:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016142:	8b7b      	ldrh	r3, [r7, #26]
 8016144:	68ba      	ldr	r2, [r7, #8]
 8016146:	18d0      	adds	r0, r2, r3
 8016148:	69fb      	ldr	r3, [r7, #28]
 801614a:	685a      	ldr	r2, [r3, #4]
 801614c:	88bb      	ldrh	r3, [r7, #4]
 801614e:	4413      	add	r3, r2
 8016150:	8b3a      	ldrh	r2, [r7, #24]
 8016152:	4619      	mov	r1, r3
 8016154:	f009 feb8 	bl	801fec8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016158:	8afa      	ldrh	r2, [r7, #22]
 801615a:	8b3b      	ldrh	r3, [r7, #24]
 801615c:	4413      	add	r3, r2
 801615e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8016160:	8b7a      	ldrh	r2, [r7, #26]
 8016162:	8b3b      	ldrh	r3, [r7, #24]
 8016164:	4413      	add	r3, r2
 8016166:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8016168:	88fa      	ldrh	r2, [r7, #6]
 801616a:	8b3b      	ldrh	r3, [r7, #24]
 801616c:	1ad3      	subs	r3, r2, r3
 801616e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8016170:	2300      	movs	r3, #0
 8016172:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016174:	69fb      	ldr	r3, [r7, #28]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	61fb      	str	r3, [r7, #28]
 801617a:	88fb      	ldrh	r3, [r7, #6]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d002      	beq.n	8016186 <pbuf_copy_partial+0xca>
 8016180:	69fb      	ldr	r3, [r7, #28]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d1c4      	bne.n	8016110 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8016186:	8afb      	ldrh	r3, [r7, #22]
}
 8016188:	4618      	mov	r0, r3
 801618a:	3720      	adds	r7, #32
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}
 8016190:	08026dec 	.word	0x08026dec
 8016194:	08027160 	.word	0x08027160
 8016198:	08026e78 	.word	0x08026e78
 801619c:	08027180 	.word	0x08027180

080161a0 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80161a0:	b480      	push	{r7}
 80161a2:	b087      	sub	sp, #28
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	60f8      	str	r0, [r7, #12]
 80161a8:	460b      	mov	r3, r1
 80161aa:	607a      	str	r2, [r7, #4]
 80161ac:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80161ae:	897b      	ldrh	r3, [r7, #10]
 80161b0:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80161b6:	e007      	b.n	80161c8 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80161b8:	693b      	ldr	r3, [r7, #16]
 80161ba:	895b      	ldrh	r3, [r3, #10]
 80161bc:	8afa      	ldrh	r2, [r7, #22]
 80161be:	1ad3      	subs	r3, r2, r3
 80161c0:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80161c8:	693b      	ldr	r3, [r7, #16]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d004      	beq.n	80161d8 <pbuf_skip_const+0x38>
 80161ce:	693b      	ldr	r3, [r7, #16]
 80161d0:	895b      	ldrh	r3, [r3, #10]
 80161d2:	8afa      	ldrh	r2, [r7, #22]
 80161d4:	429a      	cmp	r2, r3
 80161d6:	d2ef      	bcs.n	80161b8 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d002      	beq.n	80161e4 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	8afa      	ldrh	r2, [r7, #22]
 80161e2:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80161e4:	693b      	ldr	r3, [r7, #16]
}
 80161e6:	4618      	mov	r0, r3
 80161e8:	371c      	adds	r7, #28
 80161ea:	46bd      	mov	sp, r7
 80161ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f0:	4770      	bx	lr
	...

080161f4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b084      	sub	sp, #16
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	4603      	mov	r3, r0
 80161fc:	603a      	str	r2, [r7, #0]
 80161fe:	71fb      	strb	r3, [r7, #7]
 8016200:	460b      	mov	r3, r1
 8016202:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8016204:	683b      	ldr	r3, [r7, #0]
 8016206:	8919      	ldrh	r1, [r3, #8]
 8016208:	88ba      	ldrh	r2, [r7, #4]
 801620a:	79fb      	ldrb	r3, [r7, #7]
 801620c:	4618      	mov	r0, r3
 801620e:	f7ff fa87 	bl	8015720 <pbuf_alloc>
 8016212:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d101      	bne.n	801621e <pbuf_clone+0x2a>
    return NULL;
 801621a:	2300      	movs	r3, #0
 801621c:	e011      	b.n	8016242 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801621e:	6839      	ldr	r1, [r7, #0]
 8016220:	68f8      	ldr	r0, [r7, #12]
 8016222:	f7ff fe79 	bl	8015f18 <pbuf_copy>
 8016226:	4603      	mov	r3, r0
 8016228:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801622a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d006      	beq.n	8016240 <pbuf_clone+0x4c>
 8016232:	4b06      	ldr	r3, [pc, #24]	; (801624c <pbuf_clone+0x58>)
 8016234:	f240 5224 	movw	r2, #1316	; 0x524
 8016238:	4905      	ldr	r1, [pc, #20]	; (8016250 <pbuf_clone+0x5c>)
 801623a:	4806      	ldr	r0, [pc, #24]	; (8016254 <pbuf_clone+0x60>)
 801623c:	f00a fd66 	bl	8020d0c <iprintf>
  return q;
 8016240:	68fb      	ldr	r3, [r7, #12]
}
 8016242:	4618      	mov	r0, r3
 8016244:	3710      	adds	r7, #16
 8016246:	46bd      	mov	sp, r7
 8016248:	bd80      	pop	{r7, pc}
 801624a:	bf00      	nop
 801624c:	08026dec 	.word	0x08026dec
 8016250:	0802728c 	.word	0x0802728c
 8016254:	08026e78 	.word	0x08026e78

08016258 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b084      	sub	sp, #16
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
 8016260:	460b      	mov	r3, r1
 8016262:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8016264:	887b      	ldrh	r3, [r7, #2]
 8016266:	4619      	mov	r1, r3
 8016268:	6878      	ldr	r0, [r7, #4]
 801626a:	f000 f80c 	bl	8016286 <pbuf_try_get_at>
 801626e:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	2b00      	cmp	r3, #0
 8016274:	db02      	blt.n	801627c <pbuf_get_at+0x24>
    return (u8_t)ret;
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	b2db      	uxtb	r3, r3
 801627a:	e000      	b.n	801627e <pbuf_get_at+0x26>
  }
  return 0;
 801627c:	2300      	movs	r3, #0
}
 801627e:	4618      	mov	r0, r3
 8016280:	3710      	adds	r7, #16
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}

08016286 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8016286:	b580      	push	{r7, lr}
 8016288:	b084      	sub	sp, #16
 801628a:	af00      	add	r7, sp, #0
 801628c:	6078      	str	r0, [r7, #4]
 801628e:	460b      	mov	r3, r1
 8016290:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8016292:	f107 020a 	add.w	r2, r7, #10
 8016296:	887b      	ldrh	r3, [r7, #2]
 8016298:	4619      	mov	r1, r3
 801629a:	6878      	ldr	r0, [r7, #4]
 801629c:	f7ff ff80 	bl	80161a0 <pbuf_skip_const>
 80162a0:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d00a      	beq.n	80162be <pbuf_try_get_at+0x38>
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	895a      	ldrh	r2, [r3, #10]
 80162ac:	897b      	ldrh	r3, [r7, #10]
 80162ae:	429a      	cmp	r2, r3
 80162b0:	d905      	bls.n	80162be <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	897a      	ldrh	r2, [r7, #10]
 80162b8:	4413      	add	r3, r2
 80162ba:	781b      	ldrb	r3, [r3, #0]
 80162bc:	e001      	b.n	80162c2 <pbuf_try_get_at+0x3c>
  }
  return -1;
 80162be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80162c2:	4618      	mov	r0, r3
 80162c4:	3710      	adds	r7, #16
 80162c6:	46bd      	mov	sp, r7
 80162c8:	bd80      	pop	{r7, pc}

080162ca <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 80162ca:	b580      	push	{r7, lr}
 80162cc:	b088      	sub	sp, #32
 80162ce:	af00      	add	r7, sp, #0
 80162d0:	60f8      	str	r0, [r7, #12]
 80162d2:	607a      	str	r2, [r7, #4]
 80162d4:	461a      	mov	r2, r3
 80162d6:	460b      	mov	r3, r1
 80162d8:	817b      	strh	r3, [r7, #10]
 80162da:	4613      	mov	r3, r2
 80162dc:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 80162de:	897b      	ldrh	r3, [r7, #10]
 80162e0:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	891b      	ldrh	r3, [r3, #8]
 80162ea:	4619      	mov	r1, r3
 80162ec:	897a      	ldrh	r2, [r7, #10]
 80162ee:	893b      	ldrh	r3, [r7, #8]
 80162f0:	4413      	add	r3, r2
 80162f2:	4299      	cmp	r1, r3
 80162f4:	da0a      	bge.n	801630c <pbuf_memcmp+0x42>
    return 0xffff;
 80162f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80162fa:	e037      	b.n	801636c <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 80162fc:	69bb      	ldr	r3, [r7, #24]
 80162fe:	895b      	ldrh	r3, [r3, #10]
 8016300:	8bfa      	ldrh	r2, [r7, #30]
 8016302:	1ad3      	subs	r3, r2, r3
 8016304:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 8016306:	69bb      	ldr	r3, [r7, #24]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 801630c:	69bb      	ldr	r3, [r7, #24]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d004      	beq.n	801631c <pbuf_memcmp+0x52>
 8016312:	69bb      	ldr	r3, [r7, #24]
 8016314:	895b      	ldrh	r3, [r3, #10]
 8016316:	8bfa      	ldrh	r2, [r7, #30]
 8016318:	429a      	cmp	r2, r3
 801631a:	d2ef      	bcs.n	80162fc <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 801631c:	2300      	movs	r3, #0
 801631e:	82fb      	strh	r3, [r7, #22]
 8016320:	e01f      	b.n	8016362 <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 8016322:	8bfa      	ldrh	r2, [r7, #30]
 8016324:	8afb      	ldrh	r3, [r7, #22]
 8016326:	4413      	add	r3, r2
 8016328:	b29b      	uxth	r3, r3
 801632a:	4619      	mov	r1, r3
 801632c:	69b8      	ldr	r0, [r7, #24]
 801632e:	f7ff ff93 	bl	8016258 <pbuf_get_at>
 8016332:	4603      	mov	r3, r0
 8016334:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 8016336:	8afb      	ldrh	r3, [r7, #22]
 8016338:	687a      	ldr	r2, [r7, #4]
 801633a:	4413      	add	r3, r2
 801633c:	781b      	ldrb	r3, [r3, #0]
 801633e:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 8016340:	7d7a      	ldrb	r2, [r7, #21]
 8016342:	7d3b      	ldrb	r3, [r7, #20]
 8016344:	429a      	cmp	r2, r3
 8016346:	d009      	beq.n	801635c <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 8016348:	8afb      	ldrh	r3, [r7, #22]
 801634a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801634e:	4293      	cmp	r3, r2
 8016350:	bf28      	it	cs
 8016352:	4613      	movcs	r3, r2
 8016354:	b29b      	uxth	r3, r3
 8016356:	3301      	adds	r3, #1
 8016358:	b29b      	uxth	r3, r3
 801635a:	e007      	b.n	801636c <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 801635c:	8afb      	ldrh	r3, [r7, #22]
 801635e:	3301      	adds	r3, #1
 8016360:	82fb      	strh	r3, [r7, #22]
 8016362:	8afa      	ldrh	r2, [r7, #22]
 8016364:	893b      	ldrh	r3, [r7, #8]
 8016366:	429a      	cmp	r2, r3
 8016368:	d3db      	bcc.n	8016322 <pbuf_memcmp+0x58>
    }
  }
  return 0;
 801636a:	2300      	movs	r3, #0
}
 801636c:	4618      	mov	r0, r3
 801636e:	3720      	adds	r7, #32
 8016370:	46bd      	mov	sp, r7
 8016372:	bd80      	pop	{r7, pc}

08016374 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8016374:	b580      	push	{r7, lr}
 8016376:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016378:	f00a fd56 	bl	8020e28 <rand>
 801637c:	4603      	mov	r3, r0
 801637e:	b29b      	uxth	r3, r3
 8016380:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016384:	b29b      	uxth	r3, r3
 8016386:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801638a:	b29a      	uxth	r2, r3
 801638c:	4b01      	ldr	r3, [pc, #4]	; (8016394 <tcp_init+0x20>)
 801638e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016390:	bf00      	nop
 8016392:	bd80      	pop	{r7, pc}
 8016394:	24000424 	.word	0x24000424

08016398 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8016398:	b580      	push	{r7, lr}
 801639a:	b082      	sub	sp, #8
 801639c:	af00      	add	r7, sp, #0
 801639e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	7d1b      	ldrb	r3, [r3, #20]
 80163a4:	2b01      	cmp	r3, #1
 80163a6:	d105      	bne.n	80163b4 <tcp_free+0x1c>
 80163a8:	4b06      	ldr	r3, [pc, #24]	; (80163c4 <tcp_free+0x2c>)
 80163aa:	22d4      	movs	r2, #212	; 0xd4
 80163ac:	4906      	ldr	r1, [pc, #24]	; (80163c8 <tcp_free+0x30>)
 80163ae:	4807      	ldr	r0, [pc, #28]	; (80163cc <tcp_free+0x34>)
 80163b0:	f00a fcac 	bl	8020d0c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80163b4:	6879      	ldr	r1, [r7, #4]
 80163b6:	2001      	movs	r0, #1
 80163b8:	f7fe fe20 	bl	8014ffc <memp_free>
}
 80163bc:	bf00      	nop
 80163be:	3708      	adds	r7, #8
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}
 80163c4:	08027318 	.word	0x08027318
 80163c8:	08027374 	.word	0x08027374
 80163cc:	08027388 	.word	0x08027388

080163d0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b082      	sub	sp, #8
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	7d1b      	ldrb	r3, [r3, #20]
 80163dc:	2b01      	cmp	r3, #1
 80163de:	d105      	bne.n	80163ec <tcp_free_listen+0x1c>
 80163e0:	4b06      	ldr	r3, [pc, #24]	; (80163fc <tcp_free_listen+0x2c>)
 80163e2:	22df      	movs	r2, #223	; 0xdf
 80163e4:	4906      	ldr	r1, [pc, #24]	; (8016400 <tcp_free_listen+0x30>)
 80163e6:	4807      	ldr	r0, [pc, #28]	; (8016404 <tcp_free_listen+0x34>)
 80163e8:	f00a fc90 	bl	8020d0c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80163ec:	6879      	ldr	r1, [r7, #4]
 80163ee:	2002      	movs	r0, #2
 80163f0:	f7fe fe04 	bl	8014ffc <memp_free>
}
 80163f4:	bf00      	nop
 80163f6:	3708      	adds	r7, #8
 80163f8:	46bd      	mov	sp, r7
 80163fa:	bd80      	pop	{r7, pc}
 80163fc:	08027318 	.word	0x08027318
 8016400:	080273b0 	.word	0x080273b0
 8016404:	08027388 	.word	0x08027388

08016408 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8016408:	b580      	push	{r7, lr}
 801640a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801640c:	f001 f974 	bl	80176f8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8016410:	4b07      	ldr	r3, [pc, #28]	; (8016430 <tcp_tmr+0x28>)
 8016412:	781b      	ldrb	r3, [r3, #0]
 8016414:	3301      	adds	r3, #1
 8016416:	b2da      	uxtb	r2, r3
 8016418:	4b05      	ldr	r3, [pc, #20]	; (8016430 <tcp_tmr+0x28>)
 801641a:	701a      	strb	r2, [r3, #0]
 801641c:	4b04      	ldr	r3, [pc, #16]	; (8016430 <tcp_tmr+0x28>)
 801641e:	781b      	ldrb	r3, [r3, #0]
 8016420:	f003 0301 	and.w	r3, r3, #1
 8016424:	2b00      	cmp	r3, #0
 8016426:	d001      	beq.n	801642c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8016428:	f000 fe26 	bl	8017078 <tcp_slowtmr>
  }
}
 801642c:	bf00      	nop
 801642e:	bd80      	pop	{r7, pc}
 8016430:	240077c5 	.word	0x240077c5

08016434 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b084      	sub	sp, #16
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
 801643c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801643e:	683b      	ldr	r3, [r7, #0]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d105      	bne.n	8016450 <tcp_remove_listener+0x1c>
 8016444:	4b0d      	ldr	r3, [pc, #52]	; (801647c <tcp_remove_listener+0x48>)
 8016446:	22ff      	movs	r2, #255	; 0xff
 8016448:	490d      	ldr	r1, [pc, #52]	; (8016480 <tcp_remove_listener+0x4c>)
 801644a:	480e      	ldr	r0, [pc, #56]	; (8016484 <tcp_remove_listener+0x50>)
 801644c:	f00a fc5e 	bl	8020d0c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	60fb      	str	r3, [r7, #12]
 8016454:	e00a      	b.n	801646c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801645a:	683a      	ldr	r2, [r7, #0]
 801645c:	429a      	cmp	r2, r3
 801645e:	d102      	bne.n	8016466 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	2200      	movs	r2, #0
 8016464:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	68db      	ldr	r3, [r3, #12]
 801646a:	60fb      	str	r3, [r7, #12]
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d1f1      	bne.n	8016456 <tcp_remove_listener+0x22>
    }
  }
}
 8016472:	bf00      	nop
 8016474:	bf00      	nop
 8016476:	3710      	adds	r7, #16
 8016478:	46bd      	mov	sp, r7
 801647a:	bd80      	pop	{r7, pc}
 801647c:	08027318 	.word	0x08027318
 8016480:	080273cc 	.word	0x080273cc
 8016484:	08027388 	.word	0x08027388

08016488 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b084      	sub	sp, #16
 801648c:	af00      	add	r7, sp, #0
 801648e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d106      	bne.n	80164a4 <tcp_listen_closed+0x1c>
 8016496:	4b14      	ldr	r3, [pc, #80]	; (80164e8 <tcp_listen_closed+0x60>)
 8016498:	f240 1211 	movw	r2, #273	; 0x111
 801649c:	4913      	ldr	r1, [pc, #76]	; (80164ec <tcp_listen_closed+0x64>)
 801649e:	4814      	ldr	r0, [pc, #80]	; (80164f0 <tcp_listen_closed+0x68>)
 80164a0:	f00a fc34 	bl	8020d0c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	7d1b      	ldrb	r3, [r3, #20]
 80164a8:	2b01      	cmp	r3, #1
 80164aa:	d006      	beq.n	80164ba <tcp_listen_closed+0x32>
 80164ac:	4b0e      	ldr	r3, [pc, #56]	; (80164e8 <tcp_listen_closed+0x60>)
 80164ae:	f44f 7289 	mov.w	r2, #274	; 0x112
 80164b2:	4910      	ldr	r1, [pc, #64]	; (80164f4 <tcp_listen_closed+0x6c>)
 80164b4:	480e      	ldr	r0, [pc, #56]	; (80164f0 <tcp_listen_closed+0x68>)
 80164b6:	f00a fc29 	bl	8020d0c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80164ba:	2301      	movs	r3, #1
 80164bc:	60fb      	str	r3, [r7, #12]
 80164be:	e00b      	b.n	80164d8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80164c0:	4a0d      	ldr	r2, [pc, #52]	; (80164f8 <tcp_listen_closed+0x70>)
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	6879      	ldr	r1, [r7, #4]
 80164cc:	4618      	mov	r0, r3
 80164ce:	f7ff ffb1 	bl	8016434 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	3301      	adds	r3, #1
 80164d6:	60fb      	str	r3, [r7, #12]
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	2b03      	cmp	r3, #3
 80164dc:	d9f0      	bls.n	80164c0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80164de:	bf00      	nop
 80164e0:	bf00      	nop
 80164e2:	3710      	adds	r7, #16
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}
 80164e8:	08027318 	.word	0x08027318
 80164ec:	080273f4 	.word	0x080273f4
 80164f0:	08027388 	.word	0x08027388
 80164f4:	08027400 	.word	0x08027400
 80164f8:	080293c4 	.word	0x080293c4

080164fc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80164fc:	b5b0      	push	{r4, r5, r7, lr}
 80164fe:	b088      	sub	sp, #32
 8016500:	af04      	add	r7, sp, #16
 8016502:	6078      	str	r0, [r7, #4]
 8016504:	460b      	mov	r3, r1
 8016506:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d106      	bne.n	801651c <tcp_close_shutdown+0x20>
 801650e:	4b63      	ldr	r3, [pc, #396]	; (801669c <tcp_close_shutdown+0x1a0>)
 8016510:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8016514:	4962      	ldr	r1, [pc, #392]	; (80166a0 <tcp_close_shutdown+0x1a4>)
 8016516:	4863      	ldr	r0, [pc, #396]	; (80166a4 <tcp_close_shutdown+0x1a8>)
 8016518:	f00a fbf8 	bl	8020d0c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801651c:	78fb      	ldrb	r3, [r7, #3]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d066      	beq.n	80165f0 <tcp_close_shutdown+0xf4>
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	7d1b      	ldrb	r3, [r3, #20]
 8016526:	2b04      	cmp	r3, #4
 8016528:	d003      	beq.n	8016532 <tcp_close_shutdown+0x36>
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	7d1b      	ldrb	r3, [r3, #20]
 801652e:	2b07      	cmp	r3, #7
 8016530:	d15e      	bne.n	80165f0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016536:	2b00      	cmp	r3, #0
 8016538:	d104      	bne.n	8016544 <tcp_close_shutdown+0x48>
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801653e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016542:	d055      	beq.n	80165f0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	8b5b      	ldrh	r3, [r3, #26]
 8016548:	f003 0310 	and.w	r3, r3, #16
 801654c:	2b00      	cmp	r3, #0
 801654e:	d106      	bne.n	801655e <tcp_close_shutdown+0x62>
 8016550:	4b52      	ldr	r3, [pc, #328]	; (801669c <tcp_close_shutdown+0x1a0>)
 8016552:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8016556:	4954      	ldr	r1, [pc, #336]	; (80166a8 <tcp_close_shutdown+0x1ac>)
 8016558:	4852      	ldr	r0, [pc, #328]	; (80166a4 <tcp_close_shutdown+0x1a8>)
 801655a:	f00a fbd7 	bl	8020d0c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016566:	687d      	ldr	r5, [r7, #4]
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	3304      	adds	r3, #4
 801656c:	687a      	ldr	r2, [r7, #4]
 801656e:	8ad2      	ldrh	r2, [r2, #22]
 8016570:	6879      	ldr	r1, [r7, #4]
 8016572:	8b09      	ldrh	r1, [r1, #24]
 8016574:	9102      	str	r1, [sp, #8]
 8016576:	9201      	str	r2, [sp, #4]
 8016578:	9300      	str	r3, [sp, #0]
 801657a:	462b      	mov	r3, r5
 801657c:	4622      	mov	r2, r4
 801657e:	4601      	mov	r1, r0
 8016580:	6878      	ldr	r0, [r7, #4]
 8016582:	f005 fe85 	bl	801c290 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8016586:	6878      	ldr	r0, [r7, #4]
 8016588:	f001 fc66 	bl	8017e58 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801658c:	4b47      	ldr	r3, [pc, #284]	; (80166ac <tcp_close_shutdown+0x1b0>)
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	687a      	ldr	r2, [r7, #4]
 8016592:	429a      	cmp	r2, r3
 8016594:	d105      	bne.n	80165a2 <tcp_close_shutdown+0xa6>
 8016596:	4b45      	ldr	r3, [pc, #276]	; (80166ac <tcp_close_shutdown+0x1b0>)
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	68db      	ldr	r3, [r3, #12]
 801659c:	4a43      	ldr	r2, [pc, #268]	; (80166ac <tcp_close_shutdown+0x1b0>)
 801659e:	6013      	str	r3, [r2, #0]
 80165a0:	e013      	b.n	80165ca <tcp_close_shutdown+0xce>
 80165a2:	4b42      	ldr	r3, [pc, #264]	; (80166ac <tcp_close_shutdown+0x1b0>)
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	60fb      	str	r3, [r7, #12]
 80165a8:	e00c      	b.n	80165c4 <tcp_close_shutdown+0xc8>
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	68db      	ldr	r3, [r3, #12]
 80165ae:	687a      	ldr	r2, [r7, #4]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d104      	bne.n	80165be <tcp_close_shutdown+0xc2>
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	68da      	ldr	r2, [r3, #12]
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	60da      	str	r2, [r3, #12]
 80165bc:	e005      	b.n	80165ca <tcp_close_shutdown+0xce>
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	68db      	ldr	r3, [r3, #12]
 80165c2:	60fb      	str	r3, [r7, #12]
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d1ef      	bne.n	80165aa <tcp_close_shutdown+0xae>
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	2200      	movs	r2, #0
 80165ce:	60da      	str	r2, [r3, #12]
 80165d0:	4b37      	ldr	r3, [pc, #220]	; (80166b0 <tcp_close_shutdown+0x1b4>)
 80165d2:	2201      	movs	r2, #1
 80165d4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80165d6:	4b37      	ldr	r3, [pc, #220]	; (80166b4 <tcp_close_shutdown+0x1b8>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	687a      	ldr	r2, [r7, #4]
 80165dc:	429a      	cmp	r2, r3
 80165de:	d102      	bne.n	80165e6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80165e0:	f004 f8fa 	bl	801a7d8 <tcp_trigger_input_pcb_close>
 80165e4:	e002      	b.n	80165ec <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80165e6:	6878      	ldr	r0, [r7, #4]
 80165e8:	f7ff fed6 	bl	8016398 <tcp_free>
      }
      return ERR_OK;
 80165ec:	2300      	movs	r3, #0
 80165ee:	e050      	b.n	8016692 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	7d1b      	ldrb	r3, [r3, #20]
 80165f4:	2b02      	cmp	r3, #2
 80165f6:	d03b      	beq.n	8016670 <tcp_close_shutdown+0x174>
 80165f8:	2b02      	cmp	r3, #2
 80165fa:	dc44      	bgt.n	8016686 <tcp_close_shutdown+0x18a>
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d002      	beq.n	8016606 <tcp_close_shutdown+0x10a>
 8016600:	2b01      	cmp	r3, #1
 8016602:	d02a      	beq.n	801665a <tcp_close_shutdown+0x15e>
 8016604:	e03f      	b.n	8016686 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	8adb      	ldrh	r3, [r3, #22]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d021      	beq.n	8016652 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801660e:	4b2a      	ldr	r3, [pc, #168]	; (80166b8 <tcp_close_shutdown+0x1bc>)
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	687a      	ldr	r2, [r7, #4]
 8016614:	429a      	cmp	r2, r3
 8016616:	d105      	bne.n	8016624 <tcp_close_shutdown+0x128>
 8016618:	4b27      	ldr	r3, [pc, #156]	; (80166b8 <tcp_close_shutdown+0x1bc>)
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	68db      	ldr	r3, [r3, #12]
 801661e:	4a26      	ldr	r2, [pc, #152]	; (80166b8 <tcp_close_shutdown+0x1bc>)
 8016620:	6013      	str	r3, [r2, #0]
 8016622:	e013      	b.n	801664c <tcp_close_shutdown+0x150>
 8016624:	4b24      	ldr	r3, [pc, #144]	; (80166b8 <tcp_close_shutdown+0x1bc>)
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	60bb      	str	r3, [r7, #8]
 801662a:	e00c      	b.n	8016646 <tcp_close_shutdown+0x14a>
 801662c:	68bb      	ldr	r3, [r7, #8]
 801662e:	68db      	ldr	r3, [r3, #12]
 8016630:	687a      	ldr	r2, [r7, #4]
 8016632:	429a      	cmp	r2, r3
 8016634:	d104      	bne.n	8016640 <tcp_close_shutdown+0x144>
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	68da      	ldr	r2, [r3, #12]
 801663a:	68bb      	ldr	r3, [r7, #8]
 801663c:	60da      	str	r2, [r3, #12]
 801663e:	e005      	b.n	801664c <tcp_close_shutdown+0x150>
 8016640:	68bb      	ldr	r3, [r7, #8]
 8016642:	68db      	ldr	r3, [r3, #12]
 8016644:	60bb      	str	r3, [r7, #8]
 8016646:	68bb      	ldr	r3, [r7, #8]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d1ef      	bne.n	801662c <tcp_close_shutdown+0x130>
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	2200      	movs	r2, #0
 8016650:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8016652:	6878      	ldr	r0, [r7, #4]
 8016654:	f7ff fea0 	bl	8016398 <tcp_free>
      break;
 8016658:	e01a      	b.n	8016690 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801665a:	6878      	ldr	r0, [r7, #4]
 801665c:	f7ff ff14 	bl	8016488 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8016660:	6879      	ldr	r1, [r7, #4]
 8016662:	4816      	ldr	r0, [pc, #88]	; (80166bc <tcp_close_shutdown+0x1c0>)
 8016664:	f001 fc48 	bl	8017ef8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8016668:	6878      	ldr	r0, [r7, #4]
 801666a:	f7ff feb1 	bl	80163d0 <tcp_free_listen>
      break;
 801666e:	e00f      	b.n	8016690 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016670:	6879      	ldr	r1, [r7, #4]
 8016672:	480e      	ldr	r0, [pc, #56]	; (80166ac <tcp_close_shutdown+0x1b0>)
 8016674:	f001 fc40 	bl	8017ef8 <tcp_pcb_remove>
 8016678:	4b0d      	ldr	r3, [pc, #52]	; (80166b0 <tcp_close_shutdown+0x1b4>)
 801667a:	2201      	movs	r2, #1
 801667c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801667e:	6878      	ldr	r0, [r7, #4]
 8016680:	f7ff fe8a 	bl	8016398 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8016684:	e004      	b.n	8016690 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8016686:	6878      	ldr	r0, [r7, #4]
 8016688:	f000 f81a 	bl	80166c0 <tcp_close_shutdown_fin>
 801668c:	4603      	mov	r3, r0
 801668e:	e000      	b.n	8016692 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8016690:	2300      	movs	r3, #0
}
 8016692:	4618      	mov	r0, r3
 8016694:	3710      	adds	r7, #16
 8016696:	46bd      	mov	sp, r7
 8016698:	bdb0      	pop	{r4, r5, r7, pc}
 801669a:	bf00      	nop
 801669c:	08027318 	.word	0x08027318
 80166a0:	08027418 	.word	0x08027418
 80166a4:	08027388 	.word	0x08027388
 80166a8:	08027438 	.word	0x08027438
 80166ac:	2400ae58 	.word	0x2400ae58
 80166b0:	2400ae54 	.word	0x2400ae54
 80166b4:	2400ae6c 	.word	0x2400ae6c
 80166b8:	2400ae64 	.word	0x2400ae64
 80166bc:	2400ae60 	.word	0x2400ae60

080166c0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b084      	sub	sp, #16
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d106      	bne.n	80166dc <tcp_close_shutdown_fin+0x1c>
 80166ce:	4b2e      	ldr	r3, [pc, #184]	; (8016788 <tcp_close_shutdown_fin+0xc8>)
 80166d0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80166d4:	492d      	ldr	r1, [pc, #180]	; (801678c <tcp_close_shutdown_fin+0xcc>)
 80166d6:	482e      	ldr	r0, [pc, #184]	; (8016790 <tcp_close_shutdown_fin+0xd0>)
 80166d8:	f00a fb18 	bl	8020d0c <iprintf>

  switch (pcb->state) {
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	7d1b      	ldrb	r3, [r3, #20]
 80166e0:	2b07      	cmp	r3, #7
 80166e2:	d020      	beq.n	8016726 <tcp_close_shutdown_fin+0x66>
 80166e4:	2b07      	cmp	r3, #7
 80166e6:	dc2b      	bgt.n	8016740 <tcp_close_shutdown_fin+0x80>
 80166e8:	2b03      	cmp	r3, #3
 80166ea:	d002      	beq.n	80166f2 <tcp_close_shutdown_fin+0x32>
 80166ec:	2b04      	cmp	r3, #4
 80166ee:	d00d      	beq.n	801670c <tcp_close_shutdown_fin+0x4c>
 80166f0:	e026      	b.n	8016740 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80166f2:	6878      	ldr	r0, [r7, #4]
 80166f4:	f004 feda 	bl	801b4ac <tcp_send_fin>
 80166f8:	4603      	mov	r3, r0
 80166fa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80166fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d11f      	bne.n	8016744 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	2205      	movs	r2, #5
 8016708:	751a      	strb	r2, [r3, #20]
      }
      break;
 801670a:	e01b      	b.n	8016744 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801670c:	6878      	ldr	r0, [r7, #4]
 801670e:	f004 fecd 	bl	801b4ac <tcp_send_fin>
 8016712:	4603      	mov	r3, r0
 8016714:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d114      	bne.n	8016748 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	2205      	movs	r2, #5
 8016722:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016724:	e010      	b.n	8016748 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8016726:	6878      	ldr	r0, [r7, #4]
 8016728:	f004 fec0 	bl	801b4ac <tcp_send_fin>
 801672c:	4603      	mov	r3, r0
 801672e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d109      	bne.n	801674c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2209      	movs	r2, #9
 801673c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801673e:	e005      	b.n	801674c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8016740:	2300      	movs	r3, #0
 8016742:	e01c      	b.n	801677e <tcp_close_shutdown_fin+0xbe>
      break;
 8016744:	bf00      	nop
 8016746:	e002      	b.n	801674e <tcp_close_shutdown_fin+0x8e>
      break;
 8016748:	bf00      	nop
 801674a:	e000      	b.n	801674e <tcp_close_shutdown_fin+0x8e>
      break;
 801674c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801674e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d103      	bne.n	801675e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8016756:	6878      	ldr	r0, [r7, #4]
 8016758:	f004 ffe6 	bl	801b728 <tcp_output>
 801675c:	e00d      	b.n	801677a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801675e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016766:	d108      	bne.n	801677a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	8b5b      	ldrh	r3, [r3, #26]
 801676c:	f043 0308 	orr.w	r3, r3, #8
 8016770:	b29a      	uxth	r2, r3
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8016776:	2300      	movs	r3, #0
 8016778:	e001      	b.n	801677e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801677a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801677e:	4618      	mov	r0, r3
 8016780:	3710      	adds	r7, #16
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}
 8016786:	bf00      	nop
 8016788:	08027318 	.word	0x08027318
 801678c:	080273f4 	.word	0x080273f4
 8016790:	08027388 	.word	0x08027388

08016794 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b082      	sub	sp, #8
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d109      	bne.n	80167b6 <tcp_close+0x22>
 80167a2:	4b0f      	ldr	r3, [pc, #60]	; (80167e0 <tcp_close+0x4c>)
 80167a4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80167a8:	490e      	ldr	r1, [pc, #56]	; (80167e4 <tcp_close+0x50>)
 80167aa:	480f      	ldr	r0, [pc, #60]	; (80167e8 <tcp_close+0x54>)
 80167ac:	f00a faae 	bl	8020d0c <iprintf>
 80167b0:	f06f 030f 	mvn.w	r3, #15
 80167b4:	e00f      	b.n	80167d6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	7d1b      	ldrb	r3, [r3, #20]
 80167ba:	2b01      	cmp	r3, #1
 80167bc:	d006      	beq.n	80167cc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	8b5b      	ldrh	r3, [r3, #26]
 80167c2:	f043 0310 	orr.w	r3, r3, #16
 80167c6:	b29a      	uxth	r2, r3
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80167cc:	2101      	movs	r1, #1
 80167ce:	6878      	ldr	r0, [r7, #4]
 80167d0:	f7ff fe94 	bl	80164fc <tcp_close_shutdown>
 80167d4:	4603      	mov	r3, r0
}
 80167d6:	4618      	mov	r0, r3
 80167d8:	3708      	adds	r7, #8
 80167da:	46bd      	mov	sp, r7
 80167dc:	bd80      	pop	{r7, pc}
 80167de:	bf00      	nop
 80167e0:	08027318 	.word	0x08027318
 80167e4:	08027454 	.word	0x08027454
 80167e8:	08027388 	.word	0x08027388

080167ec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80167ec:	b580      	push	{r7, lr}
 80167ee:	b08e      	sub	sp, #56	; 0x38
 80167f0:	af04      	add	r7, sp, #16
 80167f2:	6078      	str	r0, [r7, #4]
 80167f4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d107      	bne.n	801680c <tcp_abandon+0x20>
 80167fc:	4b52      	ldr	r3, [pc, #328]	; (8016948 <tcp_abandon+0x15c>)
 80167fe:	f240 223d 	movw	r2, #573	; 0x23d
 8016802:	4952      	ldr	r1, [pc, #328]	; (801694c <tcp_abandon+0x160>)
 8016804:	4852      	ldr	r0, [pc, #328]	; (8016950 <tcp_abandon+0x164>)
 8016806:	f00a fa81 	bl	8020d0c <iprintf>
 801680a:	e099      	b.n	8016940 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	7d1b      	ldrb	r3, [r3, #20]
 8016810:	2b01      	cmp	r3, #1
 8016812:	d106      	bne.n	8016822 <tcp_abandon+0x36>
 8016814:	4b4c      	ldr	r3, [pc, #304]	; (8016948 <tcp_abandon+0x15c>)
 8016816:	f44f 7210 	mov.w	r2, #576	; 0x240
 801681a:	494e      	ldr	r1, [pc, #312]	; (8016954 <tcp_abandon+0x168>)
 801681c:	484c      	ldr	r0, [pc, #304]	; (8016950 <tcp_abandon+0x164>)
 801681e:	f00a fa75 	bl	8020d0c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	7d1b      	ldrb	r3, [r3, #20]
 8016826:	2b0a      	cmp	r3, #10
 8016828:	d107      	bne.n	801683a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801682a:	6879      	ldr	r1, [r7, #4]
 801682c:	484a      	ldr	r0, [pc, #296]	; (8016958 <tcp_abandon+0x16c>)
 801682e:	f001 fb63 	bl	8017ef8 <tcp_pcb_remove>
    tcp_free(pcb);
 8016832:	6878      	ldr	r0, [r7, #4]
 8016834:	f7ff fdb0 	bl	8016398 <tcp_free>
 8016838:	e082      	b.n	8016940 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801683a:	2300      	movs	r3, #0
 801683c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801683e:	2300      	movs	r3, #0
 8016840:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016846:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801684c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016854:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	691b      	ldr	r3, [r3, #16]
 801685a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	7d1b      	ldrb	r3, [r3, #20]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d126      	bne.n	80168b2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	8adb      	ldrh	r3, [r3, #22]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d02e      	beq.n	80168ca <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801686c:	4b3b      	ldr	r3, [pc, #236]	; (801695c <tcp_abandon+0x170>)
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	687a      	ldr	r2, [r7, #4]
 8016872:	429a      	cmp	r2, r3
 8016874:	d105      	bne.n	8016882 <tcp_abandon+0x96>
 8016876:	4b39      	ldr	r3, [pc, #228]	; (801695c <tcp_abandon+0x170>)
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	68db      	ldr	r3, [r3, #12]
 801687c:	4a37      	ldr	r2, [pc, #220]	; (801695c <tcp_abandon+0x170>)
 801687e:	6013      	str	r3, [r2, #0]
 8016880:	e013      	b.n	80168aa <tcp_abandon+0xbe>
 8016882:	4b36      	ldr	r3, [pc, #216]	; (801695c <tcp_abandon+0x170>)
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	61fb      	str	r3, [r7, #28]
 8016888:	e00c      	b.n	80168a4 <tcp_abandon+0xb8>
 801688a:	69fb      	ldr	r3, [r7, #28]
 801688c:	68db      	ldr	r3, [r3, #12]
 801688e:	687a      	ldr	r2, [r7, #4]
 8016890:	429a      	cmp	r2, r3
 8016892:	d104      	bne.n	801689e <tcp_abandon+0xb2>
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	68da      	ldr	r2, [r3, #12]
 8016898:	69fb      	ldr	r3, [r7, #28]
 801689a:	60da      	str	r2, [r3, #12]
 801689c:	e005      	b.n	80168aa <tcp_abandon+0xbe>
 801689e:	69fb      	ldr	r3, [r7, #28]
 80168a0:	68db      	ldr	r3, [r3, #12]
 80168a2:	61fb      	str	r3, [r7, #28]
 80168a4:	69fb      	ldr	r3, [r7, #28]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d1ef      	bne.n	801688a <tcp_abandon+0x9e>
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	2200      	movs	r2, #0
 80168ae:	60da      	str	r2, [r3, #12]
 80168b0:	e00b      	b.n	80168ca <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80168b2:	683b      	ldr	r3, [r7, #0]
 80168b4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	8adb      	ldrh	r3, [r3, #22]
 80168ba:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80168bc:	6879      	ldr	r1, [r7, #4]
 80168be:	4828      	ldr	r0, [pc, #160]	; (8016960 <tcp_abandon+0x174>)
 80168c0:	f001 fb1a 	bl	8017ef8 <tcp_pcb_remove>
 80168c4:	4b27      	ldr	r3, [pc, #156]	; (8016964 <tcp_abandon+0x178>)
 80168c6:	2201      	movs	r2, #1
 80168c8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d004      	beq.n	80168dc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80168d6:	4618      	mov	r0, r3
 80168d8:	f000 ffee 	bl	80178b8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d004      	beq.n	80168ee <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168e8:	4618      	mov	r0, r3
 80168ea:	f000 ffe5 	bl	80178b8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d004      	beq.n	8016900 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80168fa:	4618      	mov	r0, r3
 80168fc:	f000 ffdc 	bl	80178b8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8016900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016902:	2b00      	cmp	r3, #0
 8016904:	d00e      	beq.n	8016924 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8016906:	6879      	ldr	r1, [r7, #4]
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	3304      	adds	r3, #4
 801690c:	687a      	ldr	r2, [r7, #4]
 801690e:	8b12      	ldrh	r2, [r2, #24]
 8016910:	9202      	str	r2, [sp, #8]
 8016912:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016914:	9201      	str	r2, [sp, #4]
 8016916:	9300      	str	r3, [sp, #0]
 8016918:	460b      	mov	r3, r1
 801691a:	697a      	ldr	r2, [r7, #20]
 801691c:	69b9      	ldr	r1, [r7, #24]
 801691e:	6878      	ldr	r0, [r7, #4]
 8016920:	f005 fcb6 	bl	801c290 <tcp_rst>
    }
    last_state = pcb->state;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	7d1b      	ldrb	r3, [r3, #20]
 8016928:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801692a:	6878      	ldr	r0, [r7, #4]
 801692c:	f7ff fd34 	bl	8016398 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8016930:	693b      	ldr	r3, [r7, #16]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d004      	beq.n	8016940 <tcp_abandon+0x154>
 8016936:	693b      	ldr	r3, [r7, #16]
 8016938:	f06f 010c 	mvn.w	r1, #12
 801693c:	68f8      	ldr	r0, [r7, #12]
 801693e:	4798      	blx	r3
  }
}
 8016940:	3728      	adds	r7, #40	; 0x28
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}
 8016946:	bf00      	nop
 8016948:	08027318 	.word	0x08027318
 801694c:	08027488 	.word	0x08027488
 8016950:	08027388 	.word	0x08027388
 8016954:	080274a4 	.word	0x080274a4
 8016958:	2400ae68 	.word	0x2400ae68
 801695c:	2400ae64 	.word	0x2400ae64
 8016960:	2400ae58 	.word	0x2400ae58
 8016964:	2400ae54 	.word	0x2400ae54

08016968 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b082      	sub	sp, #8
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8016970:	2101      	movs	r1, #1
 8016972:	6878      	ldr	r0, [r7, #4]
 8016974:	f7ff ff3a 	bl	80167ec <tcp_abandon>
}
 8016978:	bf00      	nop
 801697a:	3708      	adds	r7, #8
 801697c:	46bd      	mov	sp, r7
 801697e:	bd80      	pop	{r7, pc}

08016980 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b088      	sub	sp, #32
 8016984:	af00      	add	r7, sp, #0
 8016986:	60f8      	str	r0, [r7, #12]
 8016988:	60b9      	str	r1, [r7, #8]
 801698a:	4613      	mov	r3, r2
 801698c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801698e:	2304      	movs	r3, #4
 8016990:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016992:	68bb      	ldr	r3, [r7, #8]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d101      	bne.n	801699c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8016998:	4b3e      	ldr	r3, [pc, #248]	; (8016a94 <tcp_bind+0x114>)
 801699a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d109      	bne.n	80169b6 <tcp_bind+0x36>
 80169a2:	4b3d      	ldr	r3, [pc, #244]	; (8016a98 <tcp_bind+0x118>)
 80169a4:	f240 22a9 	movw	r2, #681	; 0x2a9
 80169a8:	493c      	ldr	r1, [pc, #240]	; (8016a9c <tcp_bind+0x11c>)
 80169aa:	483d      	ldr	r0, [pc, #244]	; (8016aa0 <tcp_bind+0x120>)
 80169ac:	f00a f9ae 	bl	8020d0c <iprintf>
 80169b0:	f06f 030f 	mvn.w	r3, #15
 80169b4:	e06a      	b.n	8016a8c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	7d1b      	ldrb	r3, [r3, #20]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d009      	beq.n	80169d2 <tcp_bind+0x52>
 80169be:	4b36      	ldr	r3, [pc, #216]	; (8016a98 <tcp_bind+0x118>)
 80169c0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80169c4:	4937      	ldr	r1, [pc, #220]	; (8016aa4 <tcp_bind+0x124>)
 80169c6:	4836      	ldr	r0, [pc, #216]	; (8016aa0 <tcp_bind+0x120>)
 80169c8:	f00a f9a0 	bl	8020d0c <iprintf>
 80169cc:	f06f 0305 	mvn.w	r3, #5
 80169d0:	e05c      	b.n	8016a8c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80169d2:	88fb      	ldrh	r3, [r7, #6]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d109      	bne.n	80169ec <tcp_bind+0x6c>
    port = tcp_new_port();
 80169d8:	f000 f9f0 	bl	8016dbc <tcp_new_port>
 80169dc:	4603      	mov	r3, r0
 80169de:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80169e0:	88fb      	ldrh	r3, [r7, #6]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d135      	bne.n	8016a52 <tcp_bind+0xd2>
      return ERR_BUF;
 80169e6:	f06f 0301 	mvn.w	r3, #1
 80169ea:	e04f      	b.n	8016a8c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80169ec:	2300      	movs	r3, #0
 80169ee:	61fb      	str	r3, [r7, #28]
 80169f0:	e02b      	b.n	8016a4a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80169f2:	4a2d      	ldr	r2, [pc, #180]	; (8016aa8 <tcp_bind+0x128>)
 80169f4:	69fb      	ldr	r3, [r7, #28]
 80169f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	61bb      	str	r3, [r7, #24]
 80169fe:	e01e      	b.n	8016a3e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8016a00:	69bb      	ldr	r3, [r7, #24]
 8016a02:	8adb      	ldrh	r3, [r3, #22]
 8016a04:	88fa      	ldrh	r2, [r7, #6]
 8016a06:	429a      	cmp	r2, r3
 8016a08:	d116      	bne.n	8016a38 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8016a0a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d010      	beq.n	8016a32 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8016a10:	69bb      	ldr	r3, [r7, #24]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d00c      	beq.n	8016a32 <tcp_bind+0xb2>
 8016a18:	68bb      	ldr	r3, [r7, #8]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d009      	beq.n	8016a32 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8016a1e:	68bb      	ldr	r3, [r7, #8]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d005      	beq.n	8016a32 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8016a26:	69bb      	ldr	r3, [r7, #24]
 8016a28:	681a      	ldr	r2, [r3, #0]
 8016a2a:	68bb      	ldr	r3, [r7, #8]
 8016a2c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016a2e:	429a      	cmp	r2, r3
 8016a30:	d102      	bne.n	8016a38 <tcp_bind+0xb8>
              return ERR_USE;
 8016a32:	f06f 0307 	mvn.w	r3, #7
 8016a36:	e029      	b.n	8016a8c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016a38:	69bb      	ldr	r3, [r7, #24]
 8016a3a:	68db      	ldr	r3, [r3, #12]
 8016a3c:	61bb      	str	r3, [r7, #24]
 8016a3e:	69bb      	ldr	r3, [r7, #24]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d1dd      	bne.n	8016a00 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8016a44:	69fb      	ldr	r3, [r7, #28]
 8016a46:	3301      	adds	r3, #1
 8016a48:	61fb      	str	r3, [r7, #28]
 8016a4a:	69fa      	ldr	r2, [r7, #28]
 8016a4c:	697b      	ldr	r3, [r7, #20]
 8016a4e:	429a      	cmp	r2, r3
 8016a50:	dbcf      	blt.n	80169f2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8016a52:	68bb      	ldr	r3, [r7, #8]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d00c      	beq.n	8016a72 <tcp_bind+0xf2>
 8016a58:	68bb      	ldr	r3, [r7, #8]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d008      	beq.n	8016a72 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8016a60:	68bb      	ldr	r3, [r7, #8]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d002      	beq.n	8016a6c <tcp_bind+0xec>
 8016a66:	68bb      	ldr	r3, [r7, #8]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	e000      	b.n	8016a6e <tcp_bind+0xee>
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	68fa      	ldr	r2, [r7, #12]
 8016a70:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	88fa      	ldrh	r2, [r7, #6]
 8016a76:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8016a78:	4b0c      	ldr	r3, [pc, #48]	; (8016aac <tcp_bind+0x12c>)
 8016a7a:	681a      	ldr	r2, [r3, #0]
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	60da      	str	r2, [r3, #12]
 8016a80:	4a0a      	ldr	r2, [pc, #40]	; (8016aac <tcp_bind+0x12c>)
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	6013      	str	r3, [r2, #0]
 8016a86:	f005 fdc5 	bl	801c614 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8016a8a:	2300      	movs	r3, #0
}
 8016a8c:	4618      	mov	r0, r3
 8016a8e:	3720      	adds	r7, #32
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}
 8016a94:	08029318 	.word	0x08029318
 8016a98:	08027318 	.word	0x08027318
 8016a9c:	080274d8 	.word	0x080274d8
 8016aa0:	08027388 	.word	0x08027388
 8016aa4:	080274f0 	.word	0x080274f0
 8016aa8:	080293c4 	.word	0x080293c4
 8016aac:	2400ae64 	.word	0x2400ae64

08016ab0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b084      	sub	sp, #16
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	60f8      	str	r0, [r7, #12]
 8016ab8:	60b9      	str	r1, [r7, #8]
 8016aba:	4613      	mov	r3, r2
 8016abc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8016abe:	68bb      	ldr	r3, [r7, #8]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d106      	bne.n	8016ad2 <tcp_accept_null+0x22>
 8016ac4:	4b07      	ldr	r3, [pc, #28]	; (8016ae4 <tcp_accept_null+0x34>)
 8016ac6:	f240 320f 	movw	r2, #783	; 0x30f
 8016aca:	4907      	ldr	r1, [pc, #28]	; (8016ae8 <tcp_accept_null+0x38>)
 8016acc:	4807      	ldr	r0, [pc, #28]	; (8016aec <tcp_accept_null+0x3c>)
 8016ace:	f00a f91d 	bl	8020d0c <iprintf>

  tcp_abort(pcb);
 8016ad2:	68b8      	ldr	r0, [r7, #8]
 8016ad4:	f7ff ff48 	bl	8016968 <tcp_abort>

  return ERR_ABRT;
 8016ad8:	f06f 030c 	mvn.w	r3, #12
}
 8016adc:	4618      	mov	r0, r3
 8016ade:	3710      	adds	r7, #16
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd80      	pop	{r7, pc}
 8016ae4:	08027318 	.word	0x08027318
 8016ae8:	08027518 	.word	0x08027518
 8016aec:	08027388 	.word	0x08027388

08016af0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b082      	sub	sp, #8
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
 8016af8:	460b      	mov	r3, r1
 8016afa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8016afc:	78fb      	ldrb	r3, [r7, #3]
 8016afe:	2200      	movs	r2, #0
 8016b00:	4619      	mov	r1, r3
 8016b02:	6878      	ldr	r0, [r7, #4]
 8016b04:	f000 f806 	bl	8016b14 <tcp_listen_with_backlog_and_err>
 8016b08:	4603      	mov	r3, r0
}
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	3708      	adds	r7, #8
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	bd80      	pop	{r7, pc}
	...

08016b14 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b088      	sub	sp, #32
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	60f8      	str	r0, [r7, #12]
 8016b1c:	460b      	mov	r3, r1
 8016b1e:	607a      	str	r2, [r7, #4]
 8016b20:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8016b22:	2300      	movs	r3, #0
 8016b24:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d109      	bne.n	8016b40 <tcp_listen_with_backlog_and_err+0x2c>
 8016b2c:	4b47      	ldr	r3, [pc, #284]	; (8016c4c <tcp_listen_with_backlog_and_err+0x138>)
 8016b2e:	f240 3259 	movw	r2, #857	; 0x359
 8016b32:	4947      	ldr	r1, [pc, #284]	; (8016c50 <tcp_listen_with_backlog_and_err+0x13c>)
 8016b34:	4847      	ldr	r0, [pc, #284]	; (8016c54 <tcp_listen_with_backlog_and_err+0x140>)
 8016b36:	f00a f8e9 	bl	8020d0c <iprintf>
 8016b3a:	23f0      	movs	r3, #240	; 0xf0
 8016b3c:	76fb      	strb	r3, [r7, #27]
 8016b3e:	e079      	b.n	8016c34 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	7d1b      	ldrb	r3, [r3, #20]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d009      	beq.n	8016b5c <tcp_listen_with_backlog_and_err+0x48>
 8016b48:	4b40      	ldr	r3, [pc, #256]	; (8016c4c <tcp_listen_with_backlog_and_err+0x138>)
 8016b4a:	f240 325a 	movw	r2, #858	; 0x35a
 8016b4e:	4942      	ldr	r1, [pc, #264]	; (8016c58 <tcp_listen_with_backlog_and_err+0x144>)
 8016b50:	4840      	ldr	r0, [pc, #256]	; (8016c54 <tcp_listen_with_backlog_and_err+0x140>)
 8016b52:	f00a f8db 	bl	8020d0c <iprintf>
 8016b56:	23f1      	movs	r3, #241	; 0xf1
 8016b58:	76fb      	strb	r3, [r7, #27]
 8016b5a:	e06b      	b.n	8016c34 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	7d1b      	ldrb	r3, [r3, #20]
 8016b60:	2b01      	cmp	r3, #1
 8016b62:	d104      	bne.n	8016b6e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8016b68:	23f7      	movs	r3, #247	; 0xf7
 8016b6a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016b6c:	e062      	b.n	8016c34 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8016b6e:	2002      	movs	r0, #2
 8016b70:	f7fe f9d4 	bl	8014f1c <memp_malloc>
 8016b74:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8016b76:	69fb      	ldr	r3, [r7, #28]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d102      	bne.n	8016b82 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8016b7c:	23ff      	movs	r3, #255	; 0xff
 8016b7e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016b80:	e058      	b.n	8016c34 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	691a      	ldr	r2, [r3, #16]
 8016b86:	69fb      	ldr	r3, [r7, #28]
 8016b88:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	8ada      	ldrh	r2, [r3, #22]
 8016b8e:	69fb      	ldr	r3, [r7, #28]
 8016b90:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8016b92:	69fb      	ldr	r3, [r7, #28]
 8016b94:	2201      	movs	r2, #1
 8016b96:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	7d5a      	ldrb	r2, [r3, #21]
 8016b9c:	69fb      	ldr	r3, [r7, #28]
 8016b9e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	7a5a      	ldrb	r2, [r3, #9]
 8016ba4:	69fb      	ldr	r3, [r7, #28]
 8016ba6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8016ba8:	69fb      	ldr	r3, [r7, #28]
 8016baa:	2200      	movs	r2, #0
 8016bac:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	7ada      	ldrb	r2, [r3, #11]
 8016bb2:	69fb      	ldr	r3, [r7, #28]
 8016bb4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	7a9a      	ldrb	r2, [r3, #10]
 8016bba:	69fb      	ldr	r3, [r7, #28]
 8016bbc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	681a      	ldr	r2, [r3, #0]
 8016bc2:	69fb      	ldr	r3, [r7, #28]
 8016bc4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	8adb      	ldrh	r3, [r3, #22]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d021      	beq.n	8016c12 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8016bce:	4b23      	ldr	r3, [pc, #140]	; (8016c5c <tcp_listen_with_backlog_and_err+0x148>)
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	68fa      	ldr	r2, [r7, #12]
 8016bd4:	429a      	cmp	r2, r3
 8016bd6:	d105      	bne.n	8016be4 <tcp_listen_with_backlog_and_err+0xd0>
 8016bd8:	4b20      	ldr	r3, [pc, #128]	; (8016c5c <tcp_listen_with_backlog_and_err+0x148>)
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	68db      	ldr	r3, [r3, #12]
 8016bde:	4a1f      	ldr	r2, [pc, #124]	; (8016c5c <tcp_listen_with_backlog_and_err+0x148>)
 8016be0:	6013      	str	r3, [r2, #0]
 8016be2:	e013      	b.n	8016c0c <tcp_listen_with_backlog_and_err+0xf8>
 8016be4:	4b1d      	ldr	r3, [pc, #116]	; (8016c5c <tcp_listen_with_backlog_and_err+0x148>)
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	617b      	str	r3, [r7, #20]
 8016bea:	e00c      	b.n	8016c06 <tcp_listen_with_backlog_and_err+0xf2>
 8016bec:	697b      	ldr	r3, [r7, #20]
 8016bee:	68db      	ldr	r3, [r3, #12]
 8016bf0:	68fa      	ldr	r2, [r7, #12]
 8016bf2:	429a      	cmp	r2, r3
 8016bf4:	d104      	bne.n	8016c00 <tcp_listen_with_backlog_and_err+0xec>
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	68da      	ldr	r2, [r3, #12]
 8016bfa:	697b      	ldr	r3, [r7, #20]
 8016bfc:	60da      	str	r2, [r3, #12]
 8016bfe:	e005      	b.n	8016c0c <tcp_listen_with_backlog_and_err+0xf8>
 8016c00:	697b      	ldr	r3, [r7, #20]
 8016c02:	68db      	ldr	r3, [r3, #12]
 8016c04:	617b      	str	r3, [r7, #20]
 8016c06:	697b      	ldr	r3, [r7, #20]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d1ef      	bne.n	8016bec <tcp_listen_with_backlog_and_err+0xd8>
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	2200      	movs	r2, #0
 8016c10:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8016c12:	68f8      	ldr	r0, [r7, #12]
 8016c14:	f7ff fbc0 	bl	8016398 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8016c18:	69fb      	ldr	r3, [r7, #28]
 8016c1a:	4a11      	ldr	r2, [pc, #68]	; (8016c60 <tcp_listen_with_backlog_and_err+0x14c>)
 8016c1c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8016c1e:	4b11      	ldr	r3, [pc, #68]	; (8016c64 <tcp_listen_with_backlog_and_err+0x150>)
 8016c20:	681a      	ldr	r2, [r3, #0]
 8016c22:	69fb      	ldr	r3, [r7, #28]
 8016c24:	60da      	str	r2, [r3, #12]
 8016c26:	4a0f      	ldr	r2, [pc, #60]	; (8016c64 <tcp_listen_with_backlog_and_err+0x150>)
 8016c28:	69fb      	ldr	r3, [r7, #28]
 8016c2a:	6013      	str	r3, [r2, #0]
 8016c2c:	f005 fcf2 	bl	801c614 <tcp_timer_needed>
  res = ERR_OK;
 8016c30:	2300      	movs	r3, #0
 8016c32:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d002      	beq.n	8016c40 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	7efa      	ldrb	r2, [r7, #27]
 8016c3e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8016c40:	69fb      	ldr	r3, [r7, #28]
}
 8016c42:	4618      	mov	r0, r3
 8016c44:	3720      	adds	r7, #32
 8016c46:	46bd      	mov	sp, r7
 8016c48:	bd80      	pop	{r7, pc}
 8016c4a:	bf00      	nop
 8016c4c:	08027318 	.word	0x08027318
 8016c50:	08027538 	.word	0x08027538
 8016c54:	08027388 	.word	0x08027388
 8016c58:	08027568 	.word	0x08027568
 8016c5c:	2400ae64 	.word	0x2400ae64
 8016c60:	08016ab1 	.word	0x08016ab1
 8016c64:	2400ae60 	.word	0x2400ae60

08016c68 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b084      	sub	sp, #16
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d106      	bne.n	8016c84 <tcp_update_rcv_ann_wnd+0x1c>
 8016c76:	4b25      	ldr	r3, [pc, #148]	; (8016d0c <tcp_update_rcv_ann_wnd+0xa4>)
 8016c78:	f240 32a6 	movw	r2, #934	; 0x3a6
 8016c7c:	4924      	ldr	r1, [pc, #144]	; (8016d10 <tcp_update_rcv_ann_wnd+0xa8>)
 8016c7e:	4825      	ldr	r0, [pc, #148]	; (8016d14 <tcp_update_rcv_ann_wnd+0xac>)
 8016c80:	f00a f844 	bl	8020d0c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c88:	687a      	ldr	r2, [r7, #4]
 8016c8a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8016c8c:	4413      	add	r3, r2
 8016c8e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c94:	687a      	ldr	r2, [r7, #4]
 8016c96:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8016c98:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8016c9c:	bf28      	it	cs
 8016c9e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8016ca2:	b292      	uxth	r2, r2
 8016ca4:	4413      	add	r3, r2
 8016ca6:	68fa      	ldr	r2, [r7, #12]
 8016ca8:	1ad3      	subs	r3, r2, r3
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	db08      	blt.n	8016cc0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cba:	68fa      	ldr	r2, [r7, #12]
 8016cbc:	1ad3      	subs	r3, r2, r3
 8016cbe:	e020      	b.n	8016d02 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cc8:	1ad3      	subs	r3, r2, r3
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	dd03      	ble.n	8016cd6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016cd4:	e014      	b.n	8016d00 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cde:	1ad3      	subs	r3, r2, r3
 8016ce0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016ce2:	68bb      	ldr	r3, [r7, #8]
 8016ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016ce8:	d306      	bcc.n	8016cf8 <tcp_update_rcv_ann_wnd+0x90>
 8016cea:	4b08      	ldr	r3, [pc, #32]	; (8016d0c <tcp_update_rcv_ann_wnd+0xa4>)
 8016cec:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016cf0:	4909      	ldr	r1, [pc, #36]	; (8016d18 <tcp_update_rcv_ann_wnd+0xb0>)
 8016cf2:	4808      	ldr	r0, [pc, #32]	; (8016d14 <tcp_update_rcv_ann_wnd+0xac>)
 8016cf4:	f00a f80a 	bl	8020d0c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016cf8:	68bb      	ldr	r3, [r7, #8]
 8016cfa:	b29a      	uxth	r2, r3
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016d00:	2300      	movs	r3, #0
  }
}
 8016d02:	4618      	mov	r0, r3
 8016d04:	3710      	adds	r7, #16
 8016d06:	46bd      	mov	sp, r7
 8016d08:	bd80      	pop	{r7, pc}
 8016d0a:	bf00      	nop
 8016d0c:	08027318 	.word	0x08027318
 8016d10:	080275a0 	.word	0x080275a0
 8016d14:	08027388 	.word	0x08027388
 8016d18:	080275c4 	.word	0x080275c4

08016d1c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b084      	sub	sp, #16
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]
 8016d24:	460b      	mov	r3, r1
 8016d26:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d107      	bne.n	8016d3e <tcp_recved+0x22>
 8016d2e:	4b1f      	ldr	r3, [pc, #124]	; (8016dac <tcp_recved+0x90>)
 8016d30:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016d34:	491e      	ldr	r1, [pc, #120]	; (8016db0 <tcp_recved+0x94>)
 8016d36:	481f      	ldr	r0, [pc, #124]	; (8016db4 <tcp_recved+0x98>)
 8016d38:	f009 ffe8 	bl	8020d0c <iprintf>
 8016d3c:	e032      	b.n	8016da4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	7d1b      	ldrb	r3, [r3, #20]
 8016d42:	2b01      	cmp	r3, #1
 8016d44:	d106      	bne.n	8016d54 <tcp_recved+0x38>
 8016d46:	4b19      	ldr	r3, [pc, #100]	; (8016dac <tcp_recved+0x90>)
 8016d48:	f240 32d2 	movw	r2, #978	; 0x3d2
 8016d4c:	491a      	ldr	r1, [pc, #104]	; (8016db8 <tcp_recved+0x9c>)
 8016d4e:	4819      	ldr	r0, [pc, #100]	; (8016db4 <tcp_recved+0x98>)
 8016d50:	f009 ffdc 	bl	8020d0c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016d58:	887b      	ldrh	r3, [r7, #2]
 8016d5a:	4413      	add	r3, r2
 8016d5c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8016d5e:	89fb      	ldrh	r3, [r7, #14]
 8016d60:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016d64:	d804      	bhi.n	8016d70 <tcp_recved+0x54>
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d6a:	89fa      	ldrh	r2, [r7, #14]
 8016d6c:	429a      	cmp	r2, r3
 8016d6e:	d204      	bcs.n	8016d7a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016d76:	851a      	strh	r2, [r3, #40]	; 0x28
 8016d78:	e002      	b.n	8016d80 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	89fa      	ldrh	r2, [r7, #14]
 8016d7e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016d80:	6878      	ldr	r0, [r7, #4]
 8016d82:	f7ff ff71 	bl	8016c68 <tcp_update_rcv_ann_wnd>
 8016d86:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016d88:	68bb      	ldr	r3, [r7, #8]
 8016d8a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016d8e:	d309      	bcc.n	8016da4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	8b5b      	ldrh	r3, [r3, #26]
 8016d94:	f043 0302 	orr.w	r3, r3, #2
 8016d98:	b29a      	uxth	r2, r3
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016d9e:	6878      	ldr	r0, [r7, #4]
 8016da0:	f004 fcc2 	bl	801b728 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016da4:	3710      	adds	r7, #16
 8016da6:	46bd      	mov	sp, r7
 8016da8:	bd80      	pop	{r7, pc}
 8016daa:	bf00      	nop
 8016dac:	08027318 	.word	0x08027318
 8016db0:	080275e0 	.word	0x080275e0
 8016db4:	08027388 	.word	0x08027388
 8016db8:	080275f8 	.word	0x080275f8

08016dbc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016dbc:	b480      	push	{r7}
 8016dbe:	b083      	sub	sp, #12
 8016dc0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8016dc6:	4b1e      	ldr	r3, [pc, #120]	; (8016e40 <tcp_new_port+0x84>)
 8016dc8:	881b      	ldrh	r3, [r3, #0]
 8016dca:	3301      	adds	r3, #1
 8016dcc:	b29a      	uxth	r2, r3
 8016dce:	4b1c      	ldr	r3, [pc, #112]	; (8016e40 <tcp_new_port+0x84>)
 8016dd0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8016dd2:	4b1b      	ldr	r3, [pc, #108]	; (8016e40 <tcp_new_port+0x84>)
 8016dd4:	881b      	ldrh	r3, [r3, #0]
 8016dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016dda:	4293      	cmp	r3, r2
 8016ddc:	d103      	bne.n	8016de6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016dde:	4b18      	ldr	r3, [pc, #96]	; (8016e40 <tcp_new_port+0x84>)
 8016de0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016de4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016de6:	2300      	movs	r3, #0
 8016de8:	71fb      	strb	r3, [r7, #7]
 8016dea:	e01e      	b.n	8016e2a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016dec:	79fb      	ldrb	r3, [r7, #7]
 8016dee:	4a15      	ldr	r2, [pc, #84]	; (8016e44 <tcp_new_port+0x88>)
 8016df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	603b      	str	r3, [r7, #0]
 8016df8:	e011      	b.n	8016e1e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8016dfa:	683b      	ldr	r3, [r7, #0]
 8016dfc:	8ada      	ldrh	r2, [r3, #22]
 8016dfe:	4b10      	ldr	r3, [pc, #64]	; (8016e40 <tcp_new_port+0x84>)
 8016e00:	881b      	ldrh	r3, [r3, #0]
 8016e02:	429a      	cmp	r2, r3
 8016e04:	d108      	bne.n	8016e18 <tcp_new_port+0x5c>
        n++;
 8016e06:	88bb      	ldrh	r3, [r7, #4]
 8016e08:	3301      	adds	r3, #1
 8016e0a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8016e0c:	88bb      	ldrh	r3, [r7, #4]
 8016e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016e12:	d3d8      	bcc.n	8016dc6 <tcp_new_port+0xa>
          return 0;
 8016e14:	2300      	movs	r3, #0
 8016e16:	e00d      	b.n	8016e34 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016e18:	683b      	ldr	r3, [r7, #0]
 8016e1a:	68db      	ldr	r3, [r3, #12]
 8016e1c:	603b      	str	r3, [r7, #0]
 8016e1e:	683b      	ldr	r3, [r7, #0]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d1ea      	bne.n	8016dfa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016e24:	79fb      	ldrb	r3, [r7, #7]
 8016e26:	3301      	adds	r3, #1
 8016e28:	71fb      	strb	r3, [r7, #7]
 8016e2a:	79fb      	ldrb	r3, [r7, #7]
 8016e2c:	2b03      	cmp	r3, #3
 8016e2e:	d9dd      	bls.n	8016dec <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016e30:	4b03      	ldr	r3, [pc, #12]	; (8016e40 <tcp_new_port+0x84>)
 8016e32:	881b      	ldrh	r3, [r3, #0]
}
 8016e34:	4618      	mov	r0, r3
 8016e36:	370c      	adds	r7, #12
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3e:	4770      	bx	lr
 8016e40:	24000424 	.word	0x24000424
 8016e44:	080293c4 	.word	0x080293c4

08016e48 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b08a      	sub	sp, #40	; 0x28
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	60f8      	str	r0, [r7, #12]
 8016e50:	60b9      	str	r1, [r7, #8]
 8016e52:	603b      	str	r3, [r7, #0]
 8016e54:	4613      	mov	r3, r2
 8016e56:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8016e58:	2300      	movs	r3, #0
 8016e5a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d109      	bne.n	8016e76 <tcp_connect+0x2e>
 8016e62:	4b7d      	ldr	r3, [pc, #500]	; (8017058 <tcp_connect+0x210>)
 8016e64:	f240 4235 	movw	r2, #1077	; 0x435
 8016e68:	497c      	ldr	r1, [pc, #496]	; (801705c <tcp_connect+0x214>)
 8016e6a:	487d      	ldr	r0, [pc, #500]	; (8017060 <tcp_connect+0x218>)
 8016e6c:	f009 ff4e 	bl	8020d0c <iprintf>
 8016e70:	f06f 030f 	mvn.w	r3, #15
 8016e74:	e0ec      	b.n	8017050 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8016e76:	68bb      	ldr	r3, [r7, #8]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d109      	bne.n	8016e90 <tcp_connect+0x48>
 8016e7c:	4b76      	ldr	r3, [pc, #472]	; (8017058 <tcp_connect+0x210>)
 8016e7e:	f240 4236 	movw	r2, #1078	; 0x436
 8016e82:	4978      	ldr	r1, [pc, #480]	; (8017064 <tcp_connect+0x21c>)
 8016e84:	4876      	ldr	r0, [pc, #472]	; (8017060 <tcp_connect+0x218>)
 8016e86:	f009 ff41 	bl	8020d0c <iprintf>
 8016e8a:	f06f 030f 	mvn.w	r3, #15
 8016e8e:	e0df      	b.n	8017050 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	7d1b      	ldrb	r3, [r3, #20]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d009      	beq.n	8016eac <tcp_connect+0x64>
 8016e98:	4b6f      	ldr	r3, [pc, #444]	; (8017058 <tcp_connect+0x210>)
 8016e9a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8016e9e:	4972      	ldr	r1, [pc, #456]	; (8017068 <tcp_connect+0x220>)
 8016ea0:	486f      	ldr	r0, [pc, #444]	; (8017060 <tcp_connect+0x218>)
 8016ea2:	f009 ff33 	bl	8020d0c <iprintf>
 8016ea6:	f06f 0309 	mvn.w	r3, #9
 8016eaa:	e0d1      	b.n	8017050 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8016eac:	68bb      	ldr	r3, [r7, #8]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d002      	beq.n	8016eb8 <tcp_connect+0x70>
 8016eb2:	68bb      	ldr	r3, [r7, #8]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	e000      	b.n	8016eba <tcp_connect+0x72>
 8016eb8:	2300      	movs	r3, #0
 8016eba:	68fa      	ldr	r2, [r7, #12]
 8016ebc:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	88fa      	ldrh	r2, [r7, #6]
 8016ec2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	7a1b      	ldrb	r3, [r3, #8]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d006      	beq.n	8016eda <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	7a1b      	ldrb	r3, [r3, #8]
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f7fe fba9 	bl	8015628 <netif_get_by_index>
 8016ed6:	6278      	str	r0, [r7, #36]	; 0x24
 8016ed8:	e005      	b.n	8016ee6 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	3304      	adds	r3, #4
 8016ede:	4618      	mov	r0, r3
 8016ee0:	f7fc fadc 	bl	801349c <ip4_route>
 8016ee4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8016ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d102      	bne.n	8016ef2 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8016eec:	f06f 0303 	mvn.w	r3, #3
 8016ef0:	e0ae      	b.n	8017050 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d003      	beq.n	8016f00 <tcp_connect+0xb8>
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d111      	bne.n	8016f24 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8016f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d002      	beq.n	8016f0c <tcp_connect+0xc4>
 8016f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f08:	3304      	adds	r3, #4
 8016f0a:	e000      	b.n	8016f0e <tcp_connect+0xc6>
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8016f10:	69fb      	ldr	r3, [r7, #28]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d102      	bne.n	8016f1c <tcp_connect+0xd4>
      return ERR_RTE;
 8016f16:	f06f 0303 	mvn.w	r3, #3
 8016f1a:	e099      	b.n	8017050 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016f1c:	69fb      	ldr	r3, [r7, #28]
 8016f1e:	681a      	ldr	r2, [r3, #0]
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	8adb      	ldrh	r3, [r3, #22]
 8016f28:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	8adb      	ldrh	r3, [r3, #22]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d10c      	bne.n	8016f4c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8016f32:	f7ff ff43 	bl	8016dbc <tcp_new_port>
 8016f36:	4603      	mov	r3, r0
 8016f38:	461a      	mov	r2, r3
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	8adb      	ldrh	r3, [r3, #22]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d102      	bne.n	8016f4c <tcp_connect+0x104>
      return ERR_BUF;
 8016f46:	f06f 0301 	mvn.w	r3, #1
 8016f4a:	e081      	b.n	8017050 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8016f4c:	68f8      	ldr	r0, [r7, #12]
 8016f4e:	f001 f867 	bl	8018020 <tcp_next_iss>
 8016f52:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	2200      	movs	r2, #0
 8016f58:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	697a      	ldr	r2, [r7, #20]
 8016f5e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8016f60:	697b      	ldr	r3, [r7, #20]
 8016f62:	1e5a      	subs	r2, r3, #1
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8016f68:	697b      	ldr	r3, [r7, #20]
 8016f6a:	1e5a      	subs	r2, r3, #1
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8016f70:	697b      	ldr	r3, [r7, #20]
 8016f72:	1e5a      	subs	r2, r3, #1
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016f96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016fa0:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	3304      	adds	r3, #4
 8016faa:	461a      	mov	r2, r3
 8016fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016fae:	f001 f85d 	bl	801806c <tcp_eff_send_mss_netif>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	461a      	mov	r2, r3
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	2201      	movs	r2, #1
 8016fbe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	683a      	ldr	r2, [r7, #0]
 8016fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8016fca:	2102      	movs	r1, #2
 8016fcc:	68f8      	ldr	r0, [r7, #12]
 8016fce:	f004 fabd 	bl	801b54c <tcp_enqueue_flags>
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8016fd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d136      	bne.n	801704c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	2202      	movs	r2, #2
 8016fe2:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8016fe4:	8b7b      	ldrh	r3, [r7, #26]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d021      	beq.n	801702e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8016fea:	4b20      	ldr	r3, [pc, #128]	; (801706c <tcp_connect+0x224>)
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	68fa      	ldr	r2, [r7, #12]
 8016ff0:	429a      	cmp	r2, r3
 8016ff2:	d105      	bne.n	8017000 <tcp_connect+0x1b8>
 8016ff4:	4b1d      	ldr	r3, [pc, #116]	; (801706c <tcp_connect+0x224>)
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	68db      	ldr	r3, [r3, #12]
 8016ffa:	4a1c      	ldr	r2, [pc, #112]	; (801706c <tcp_connect+0x224>)
 8016ffc:	6013      	str	r3, [r2, #0]
 8016ffe:	e013      	b.n	8017028 <tcp_connect+0x1e0>
 8017000:	4b1a      	ldr	r3, [pc, #104]	; (801706c <tcp_connect+0x224>)
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	623b      	str	r3, [r7, #32]
 8017006:	e00c      	b.n	8017022 <tcp_connect+0x1da>
 8017008:	6a3b      	ldr	r3, [r7, #32]
 801700a:	68db      	ldr	r3, [r3, #12]
 801700c:	68fa      	ldr	r2, [r7, #12]
 801700e:	429a      	cmp	r2, r3
 8017010:	d104      	bne.n	801701c <tcp_connect+0x1d4>
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	68da      	ldr	r2, [r3, #12]
 8017016:	6a3b      	ldr	r3, [r7, #32]
 8017018:	60da      	str	r2, [r3, #12]
 801701a:	e005      	b.n	8017028 <tcp_connect+0x1e0>
 801701c:	6a3b      	ldr	r3, [r7, #32]
 801701e:	68db      	ldr	r3, [r3, #12]
 8017020:	623b      	str	r3, [r7, #32]
 8017022:	6a3b      	ldr	r3, [r7, #32]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d1ef      	bne.n	8017008 <tcp_connect+0x1c0>
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	2200      	movs	r2, #0
 801702c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801702e:	4b10      	ldr	r3, [pc, #64]	; (8017070 <tcp_connect+0x228>)
 8017030:	681a      	ldr	r2, [r3, #0]
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	60da      	str	r2, [r3, #12]
 8017036:	4a0e      	ldr	r2, [pc, #56]	; (8017070 <tcp_connect+0x228>)
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	6013      	str	r3, [r2, #0]
 801703c:	f005 faea 	bl	801c614 <tcp_timer_needed>
 8017040:	4b0c      	ldr	r3, [pc, #48]	; (8017074 <tcp_connect+0x22c>)
 8017042:	2201      	movs	r2, #1
 8017044:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8017046:	68f8      	ldr	r0, [r7, #12]
 8017048:	f004 fb6e 	bl	801b728 <tcp_output>
  }
  return ret;
 801704c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8017050:	4618      	mov	r0, r3
 8017052:	3728      	adds	r7, #40	; 0x28
 8017054:	46bd      	mov	sp, r7
 8017056:	bd80      	pop	{r7, pc}
 8017058:	08027318 	.word	0x08027318
 801705c:	08027620 	.word	0x08027620
 8017060:	08027388 	.word	0x08027388
 8017064:	0802763c 	.word	0x0802763c
 8017068:	08027658 	.word	0x08027658
 801706c:	2400ae64 	.word	0x2400ae64
 8017070:	2400ae58 	.word	0x2400ae58
 8017074:	2400ae54 	.word	0x2400ae54

08017078 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8017078:	b5b0      	push	{r4, r5, r7, lr}
 801707a:	b090      	sub	sp, #64	; 0x40
 801707c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801707e:	2300      	movs	r3, #0
 8017080:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8017084:	4b94      	ldr	r3, [pc, #592]	; (80172d8 <tcp_slowtmr+0x260>)
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	3301      	adds	r3, #1
 801708a:	4a93      	ldr	r2, [pc, #588]	; (80172d8 <tcp_slowtmr+0x260>)
 801708c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801708e:	4b93      	ldr	r3, [pc, #588]	; (80172dc <tcp_slowtmr+0x264>)
 8017090:	781b      	ldrb	r3, [r3, #0]
 8017092:	3301      	adds	r3, #1
 8017094:	b2da      	uxtb	r2, r3
 8017096:	4b91      	ldr	r3, [pc, #580]	; (80172dc <tcp_slowtmr+0x264>)
 8017098:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801709a:	2300      	movs	r3, #0
 801709c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801709e:	4b90      	ldr	r3, [pc, #576]	; (80172e0 <tcp_slowtmr+0x268>)
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80170a4:	e29d      	b.n	80175e2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80170a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170a8:	7d1b      	ldrb	r3, [r3, #20]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d106      	bne.n	80170bc <tcp_slowtmr+0x44>
 80170ae:	4b8d      	ldr	r3, [pc, #564]	; (80172e4 <tcp_slowtmr+0x26c>)
 80170b0:	f240 42be 	movw	r2, #1214	; 0x4be
 80170b4:	498c      	ldr	r1, [pc, #560]	; (80172e8 <tcp_slowtmr+0x270>)
 80170b6:	488d      	ldr	r0, [pc, #564]	; (80172ec <tcp_slowtmr+0x274>)
 80170b8:	f009 fe28 	bl	8020d0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80170bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170be:	7d1b      	ldrb	r3, [r3, #20]
 80170c0:	2b01      	cmp	r3, #1
 80170c2:	d106      	bne.n	80170d2 <tcp_slowtmr+0x5a>
 80170c4:	4b87      	ldr	r3, [pc, #540]	; (80172e4 <tcp_slowtmr+0x26c>)
 80170c6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80170ca:	4989      	ldr	r1, [pc, #548]	; (80172f0 <tcp_slowtmr+0x278>)
 80170cc:	4887      	ldr	r0, [pc, #540]	; (80172ec <tcp_slowtmr+0x274>)
 80170ce:	f009 fe1d 	bl	8020d0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80170d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d4:	7d1b      	ldrb	r3, [r3, #20]
 80170d6:	2b0a      	cmp	r3, #10
 80170d8:	d106      	bne.n	80170e8 <tcp_slowtmr+0x70>
 80170da:	4b82      	ldr	r3, [pc, #520]	; (80172e4 <tcp_slowtmr+0x26c>)
 80170dc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80170e0:	4984      	ldr	r1, [pc, #528]	; (80172f4 <tcp_slowtmr+0x27c>)
 80170e2:	4882      	ldr	r0, [pc, #520]	; (80172ec <tcp_slowtmr+0x274>)
 80170e4:	f009 fe12 	bl	8020d0c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80170e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ea:	7f9a      	ldrb	r2, [r3, #30]
 80170ec:	4b7b      	ldr	r3, [pc, #492]	; (80172dc <tcp_slowtmr+0x264>)
 80170ee:	781b      	ldrb	r3, [r3, #0]
 80170f0:	429a      	cmp	r2, r3
 80170f2:	d105      	bne.n	8017100 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80170f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80170f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170fa:	68db      	ldr	r3, [r3, #12]
 80170fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80170fe:	e270      	b.n	80175e2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8017100:	4b76      	ldr	r3, [pc, #472]	; (80172dc <tcp_slowtmr+0x264>)
 8017102:	781a      	ldrb	r2, [r3, #0]
 8017104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017106:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8017108:	2300      	movs	r3, #0
 801710a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801710e:	2300      	movs	r3, #0
 8017110:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8017114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017116:	7d1b      	ldrb	r3, [r3, #20]
 8017118:	2b02      	cmp	r3, #2
 801711a:	d10a      	bne.n	8017132 <tcp_slowtmr+0xba>
 801711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801711e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017122:	2b05      	cmp	r3, #5
 8017124:	d905      	bls.n	8017132 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8017126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801712a:	3301      	adds	r3, #1
 801712c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017130:	e11e      	b.n	8017370 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8017132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017134:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017138:	2b0b      	cmp	r3, #11
 801713a:	d905      	bls.n	8017148 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801713c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017140:	3301      	adds	r3, #1
 8017142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017146:	e113      	b.n	8017370 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8017148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801714a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801714e:	2b00      	cmp	r3, #0
 8017150:	d075      	beq.n	801723e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8017152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017156:	2b00      	cmp	r3, #0
 8017158:	d006      	beq.n	8017168 <tcp_slowtmr+0xf0>
 801715a:	4b62      	ldr	r3, [pc, #392]	; (80172e4 <tcp_slowtmr+0x26c>)
 801715c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8017160:	4965      	ldr	r1, [pc, #404]	; (80172f8 <tcp_slowtmr+0x280>)
 8017162:	4862      	ldr	r0, [pc, #392]	; (80172ec <tcp_slowtmr+0x274>)
 8017164:	f009 fdd2 	bl	8020d0c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8017168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801716a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801716c:	2b00      	cmp	r3, #0
 801716e:	d106      	bne.n	801717e <tcp_slowtmr+0x106>
 8017170:	4b5c      	ldr	r3, [pc, #368]	; (80172e4 <tcp_slowtmr+0x26c>)
 8017172:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8017176:	4961      	ldr	r1, [pc, #388]	; (80172fc <tcp_slowtmr+0x284>)
 8017178:	485c      	ldr	r0, [pc, #368]	; (80172ec <tcp_slowtmr+0x274>)
 801717a:	f009 fdc7 	bl	8020d0c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017180:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017184:	2b0b      	cmp	r3, #11
 8017186:	d905      	bls.n	8017194 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8017188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801718c:	3301      	adds	r3, #1
 801718e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017192:	e0ed      	b.n	8017370 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8017194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017196:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801719a:	3b01      	subs	r3, #1
 801719c:	4a58      	ldr	r2, [pc, #352]	; (8017300 <tcp_slowtmr+0x288>)
 801719e:	5cd3      	ldrb	r3, [r2, r3]
 80171a0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80171a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80171a8:	7c7a      	ldrb	r2, [r7, #17]
 80171aa:	429a      	cmp	r2, r3
 80171ac:	d907      	bls.n	80171be <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80171ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80171b4:	3301      	adds	r3, #1
 80171b6:	b2da      	uxtb	r2, r3
 80171b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80171be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80171c4:	7c7a      	ldrb	r2, [r7, #17]
 80171c6:	429a      	cmp	r2, r3
 80171c8:	f200 80d2 	bhi.w	8017370 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80171cc:	2301      	movs	r3, #1
 80171ce:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80171d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d108      	bne.n	80171ec <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80171da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171dc:	f005 f94c 	bl	801c478 <tcp_zero_window_probe>
 80171e0:	4603      	mov	r3, r0
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d014      	beq.n	8017210 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80171e6:	2300      	movs	r3, #0
 80171e8:	623b      	str	r3, [r7, #32]
 80171ea:	e011      	b.n	8017210 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80171ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80171f2:	4619      	mov	r1, r3
 80171f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171f6:	f004 f811 	bl	801b21c <tcp_split_unsent_seg>
 80171fa:	4603      	mov	r3, r0
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d107      	bne.n	8017210 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8017200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017202:	f004 fa91 	bl	801b728 <tcp_output>
 8017206:	4603      	mov	r3, r0
 8017208:	2b00      	cmp	r3, #0
 801720a:	d101      	bne.n	8017210 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801720c:	2300      	movs	r3, #0
 801720e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8017210:	6a3b      	ldr	r3, [r7, #32]
 8017212:	2b00      	cmp	r3, #0
 8017214:	f000 80ac 	beq.w	8017370 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8017218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801721a:	2200      	movs	r2, #0
 801721c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017222:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017226:	2b06      	cmp	r3, #6
 8017228:	f200 80a2 	bhi.w	8017370 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801722e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017232:	3301      	adds	r3, #1
 8017234:	b2da      	uxtb	r2, r3
 8017236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017238:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801723c:	e098      	b.n	8017370 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017240:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017244:	2b00      	cmp	r3, #0
 8017246:	db0f      	blt.n	8017268 <tcp_slowtmr+0x1f0>
 8017248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801724a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801724e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017252:	4293      	cmp	r3, r2
 8017254:	d008      	beq.n	8017268 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8017256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017258:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801725c:	b29b      	uxth	r3, r3
 801725e:	3301      	adds	r3, #1
 8017260:	b29b      	uxth	r3, r3
 8017262:	b21a      	sxth	r2, r3
 8017264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017266:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8017268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801726a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017270:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017274:	429a      	cmp	r2, r3
 8017276:	db7b      	blt.n	8017370 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801727a:	f004 fd47 	bl	801bd0c <tcp_rexmit_rto_prepare>
 801727e:	4603      	mov	r3, r0
 8017280:	2b00      	cmp	r3, #0
 8017282:	d007      	beq.n	8017294 <tcp_slowtmr+0x21c>
 8017284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017288:	2b00      	cmp	r3, #0
 801728a:	d171      	bne.n	8017370 <tcp_slowtmr+0x2f8>
 801728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801728e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017290:	2b00      	cmp	r3, #0
 8017292:	d06d      	beq.n	8017370 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8017294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017296:	7d1b      	ldrb	r3, [r3, #20]
 8017298:	2b02      	cmp	r3, #2
 801729a:	d03a      	beq.n	8017312 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801729e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172a2:	2b0c      	cmp	r3, #12
 80172a4:	bf28      	it	cs
 80172a6:	230c      	movcs	r3, #12
 80172a8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80172aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80172b0:	10db      	asrs	r3, r3, #3
 80172b2:	b21b      	sxth	r3, r3
 80172b4:	461a      	mov	r2, r3
 80172b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80172bc:	4413      	add	r3, r2
 80172be:	7efa      	ldrb	r2, [r7, #27]
 80172c0:	4910      	ldr	r1, [pc, #64]	; (8017304 <tcp_slowtmr+0x28c>)
 80172c2:	5c8a      	ldrb	r2, [r1, r2]
 80172c4:	4093      	lsls	r3, r2
 80172c6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80172c8:	697b      	ldr	r3, [r7, #20]
 80172ca:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80172ce:	4293      	cmp	r3, r2
 80172d0:	dc1a      	bgt.n	8017308 <tcp_slowtmr+0x290>
 80172d2:	697b      	ldr	r3, [r7, #20]
 80172d4:	b21a      	sxth	r2, r3
 80172d6:	e019      	b.n	801730c <tcp_slowtmr+0x294>
 80172d8:	2400ae5c 	.word	0x2400ae5c
 80172dc:	240077c6 	.word	0x240077c6
 80172e0:	2400ae58 	.word	0x2400ae58
 80172e4:	08027318 	.word	0x08027318
 80172e8:	08027688 	.word	0x08027688
 80172ec:	08027388 	.word	0x08027388
 80172f0:	080276b4 	.word	0x080276b4
 80172f4:	080276e0 	.word	0x080276e0
 80172f8:	08027710 	.word	0x08027710
 80172fc:	08027744 	.word	0x08027744
 8017300:	080293bc 	.word	0x080293bc
 8017304:	080293ac 	.word	0x080293ac
 8017308:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801730e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8017312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017314:	2200      	movs	r2, #0
 8017316:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8017318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801731a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017320:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017324:	4293      	cmp	r3, r2
 8017326:	bf28      	it	cs
 8017328:	4613      	movcs	r3, r2
 801732a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801732c:	8a7b      	ldrh	r3, [r7, #18]
 801732e:	085b      	lsrs	r3, r3, #1
 8017330:	b29a      	uxth	r2, r3
 8017332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017334:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801733a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017340:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017342:	005b      	lsls	r3, r3, #1
 8017344:	b29b      	uxth	r3, r3
 8017346:	429a      	cmp	r2, r3
 8017348:	d206      	bcs.n	8017358 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801734c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801734e:	005b      	lsls	r3, r3, #1
 8017350:	b29a      	uxth	r2, r3
 8017352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017354:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8017358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801735a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801735e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8017362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017364:	2200      	movs	r2, #0
 8017366:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801736a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801736c:	f004 fd3e 	bl	801bdec <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8017370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017372:	7d1b      	ldrb	r3, [r3, #20]
 8017374:	2b06      	cmp	r3, #6
 8017376:	d111      	bne.n	801739c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8017378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801737a:	8b5b      	ldrh	r3, [r3, #26]
 801737c:	f003 0310 	and.w	r3, r3, #16
 8017380:	2b00      	cmp	r3, #0
 8017382:	d00b      	beq.n	801739c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017384:	4b9c      	ldr	r3, [pc, #624]	; (80175f8 <tcp_slowtmr+0x580>)
 8017386:	681a      	ldr	r2, [r3, #0]
 8017388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801738a:	6a1b      	ldr	r3, [r3, #32]
 801738c:	1ad3      	subs	r3, r2, r3
 801738e:	2b28      	cmp	r3, #40	; 0x28
 8017390:	d904      	bls.n	801739c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8017392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017396:	3301      	adds	r3, #1
 8017398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801739e:	7a5b      	ldrb	r3, [r3, #9]
 80173a0:	f003 0308 	and.w	r3, r3, #8
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d04a      	beq.n	801743e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80173a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173aa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80173ac:	2b04      	cmp	r3, #4
 80173ae:	d003      	beq.n	80173b8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80173b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173b2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80173b4:	2b07      	cmp	r3, #7
 80173b6:	d142      	bne.n	801743e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80173b8:	4b8f      	ldr	r3, [pc, #572]	; (80175f8 <tcp_slowtmr+0x580>)
 80173ba:	681a      	ldr	r2, [r3, #0]
 80173bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173be:	6a1b      	ldr	r3, [r3, #32]
 80173c0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80173c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173c4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80173c8:	4b8c      	ldr	r3, [pc, #560]	; (80175fc <tcp_slowtmr+0x584>)
 80173ca:	440b      	add	r3, r1
 80173cc:	498c      	ldr	r1, [pc, #560]	; (8017600 <tcp_slowtmr+0x588>)
 80173ce:	fba1 1303 	umull	r1, r3, r1, r3
 80173d2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80173d4:	429a      	cmp	r2, r3
 80173d6:	d90a      	bls.n	80173ee <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80173d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173dc:	3301      	adds	r3, #1
 80173de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80173e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80173e6:	3301      	adds	r3, #1
 80173e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80173ec:	e027      	b.n	801743e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80173ee:	4b82      	ldr	r3, [pc, #520]	; (80175f8 <tcp_slowtmr+0x580>)
 80173f0:	681a      	ldr	r2, [r3, #0]
 80173f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173f4:	6a1b      	ldr	r3, [r3, #32]
 80173f6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80173f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173fa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80173fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017400:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017404:	4618      	mov	r0, r3
 8017406:	4b7f      	ldr	r3, [pc, #508]	; (8017604 <tcp_slowtmr+0x58c>)
 8017408:	fb03 f300 	mul.w	r3, r3, r0
 801740c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801740e:	497c      	ldr	r1, [pc, #496]	; (8017600 <tcp_slowtmr+0x588>)
 8017410:	fba1 1303 	umull	r1, r3, r1, r3
 8017414:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017416:	429a      	cmp	r2, r3
 8017418:	d911      	bls.n	801743e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801741a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801741c:	f004 ffec 	bl	801c3f8 <tcp_keepalive>
 8017420:	4603      	mov	r3, r0
 8017422:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8017426:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801742a:	2b00      	cmp	r3, #0
 801742c:	d107      	bne.n	801743e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801742e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017430:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017434:	3301      	adds	r3, #1
 8017436:	b2da      	uxtb	r2, r3
 8017438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801743a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017442:	2b00      	cmp	r3, #0
 8017444:	d011      	beq.n	801746a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8017446:	4b6c      	ldr	r3, [pc, #432]	; (80175f8 <tcp_slowtmr+0x580>)
 8017448:	681a      	ldr	r2, [r3, #0]
 801744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801744c:	6a1b      	ldr	r3, [r3, #32]
 801744e:	1ad2      	subs	r2, r2, r3
 8017450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017452:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017456:	4619      	mov	r1, r3
 8017458:	460b      	mov	r3, r1
 801745a:	005b      	lsls	r3, r3, #1
 801745c:	440b      	add	r3, r1
 801745e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8017460:	429a      	cmp	r2, r3
 8017462:	d302      	bcc.n	801746a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8017464:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017466:	f000 feab 	bl	80181c0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801746c:	7d1b      	ldrb	r3, [r3, #20]
 801746e:	2b03      	cmp	r3, #3
 8017470:	d10b      	bne.n	801748a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017472:	4b61      	ldr	r3, [pc, #388]	; (80175f8 <tcp_slowtmr+0x580>)
 8017474:	681a      	ldr	r2, [r3, #0]
 8017476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017478:	6a1b      	ldr	r3, [r3, #32]
 801747a:	1ad3      	subs	r3, r2, r3
 801747c:	2b28      	cmp	r3, #40	; 0x28
 801747e:	d904      	bls.n	801748a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8017480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017484:	3301      	adds	r3, #1
 8017486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801748c:	7d1b      	ldrb	r3, [r3, #20]
 801748e:	2b09      	cmp	r3, #9
 8017490:	d10b      	bne.n	80174aa <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017492:	4b59      	ldr	r3, [pc, #356]	; (80175f8 <tcp_slowtmr+0x580>)
 8017494:	681a      	ldr	r2, [r3, #0]
 8017496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017498:	6a1b      	ldr	r3, [r3, #32]
 801749a:	1ad3      	subs	r3, r2, r3
 801749c:	2bf0      	cmp	r3, #240	; 0xf0
 801749e:	d904      	bls.n	80174aa <tcp_slowtmr+0x432>
        ++pcb_remove;
 80174a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174a4:	3301      	adds	r3, #1
 80174a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80174aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d060      	beq.n	8017574 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80174b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80174b8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80174ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80174bc:	f000 fccc 	bl	8017e58 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80174c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d010      	beq.n	80174e8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80174c6:	4b50      	ldr	r3, [pc, #320]	; (8017608 <tcp_slowtmr+0x590>)
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174cc:	429a      	cmp	r2, r3
 80174ce:	d106      	bne.n	80174de <tcp_slowtmr+0x466>
 80174d0:	4b4e      	ldr	r3, [pc, #312]	; (801760c <tcp_slowtmr+0x594>)
 80174d2:	f240 526d 	movw	r2, #1389	; 0x56d
 80174d6:	494e      	ldr	r1, [pc, #312]	; (8017610 <tcp_slowtmr+0x598>)
 80174d8:	484e      	ldr	r0, [pc, #312]	; (8017614 <tcp_slowtmr+0x59c>)
 80174da:	f009 fc17 	bl	8020d0c <iprintf>
        prev->next = pcb->next;
 80174de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e0:	68da      	ldr	r2, [r3, #12]
 80174e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174e4:	60da      	str	r2, [r3, #12]
 80174e6:	e00f      	b.n	8017508 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80174e8:	4b47      	ldr	r3, [pc, #284]	; (8017608 <tcp_slowtmr+0x590>)
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174ee:	429a      	cmp	r2, r3
 80174f0:	d006      	beq.n	8017500 <tcp_slowtmr+0x488>
 80174f2:	4b46      	ldr	r3, [pc, #280]	; (801760c <tcp_slowtmr+0x594>)
 80174f4:	f240 5271 	movw	r2, #1393	; 0x571
 80174f8:	4947      	ldr	r1, [pc, #284]	; (8017618 <tcp_slowtmr+0x5a0>)
 80174fa:	4846      	ldr	r0, [pc, #280]	; (8017614 <tcp_slowtmr+0x59c>)
 80174fc:	f009 fc06 	bl	8020d0c <iprintf>
        tcp_active_pcbs = pcb->next;
 8017500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017502:	68db      	ldr	r3, [r3, #12]
 8017504:	4a40      	ldr	r2, [pc, #256]	; (8017608 <tcp_slowtmr+0x590>)
 8017506:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8017508:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801750c:	2b00      	cmp	r3, #0
 801750e:	d013      	beq.n	8017538 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017512:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8017514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017516:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017518:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751c:	3304      	adds	r3, #4
 801751e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017520:	8ad2      	ldrh	r2, [r2, #22]
 8017522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017524:	8b09      	ldrh	r1, [r1, #24]
 8017526:	9102      	str	r1, [sp, #8]
 8017528:	9201      	str	r2, [sp, #4]
 801752a:	9300      	str	r3, [sp, #0]
 801752c:	462b      	mov	r3, r5
 801752e:	4622      	mov	r2, r4
 8017530:	4601      	mov	r1, r0
 8017532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017534:	f004 feac 	bl	801c290 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8017538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801753a:	691b      	ldr	r3, [r3, #16]
 801753c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017540:	7d1b      	ldrb	r3, [r3, #20]
 8017542:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8017544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017546:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8017548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801754a:	68db      	ldr	r3, [r3, #12]
 801754c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801754e:	6838      	ldr	r0, [r7, #0]
 8017550:	f7fe ff22 	bl	8016398 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8017554:	4b31      	ldr	r3, [pc, #196]	; (801761c <tcp_slowtmr+0x5a4>)
 8017556:	2200      	movs	r2, #0
 8017558:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d004      	beq.n	801756a <tcp_slowtmr+0x4f2>
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	f06f 010c 	mvn.w	r1, #12
 8017566:	68b8      	ldr	r0, [r7, #8]
 8017568:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801756a:	4b2c      	ldr	r3, [pc, #176]	; (801761c <tcp_slowtmr+0x5a4>)
 801756c:	781b      	ldrb	r3, [r3, #0]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d037      	beq.n	80175e2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8017572:	e592      	b.n	801709a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8017574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017576:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801757a:	68db      	ldr	r3, [r3, #12]
 801757c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017580:	7f1b      	ldrb	r3, [r3, #28]
 8017582:	3301      	adds	r3, #1
 8017584:	b2da      	uxtb	r2, r3
 8017586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017588:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801758c:	7f1a      	ldrb	r2, [r3, #28]
 801758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017590:	7f5b      	ldrb	r3, [r3, #29]
 8017592:	429a      	cmp	r2, r3
 8017594:	d325      	bcc.n	80175e2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8017596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017598:	2200      	movs	r2, #0
 801759a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801759c:	4b1f      	ldr	r3, [pc, #124]	; (801761c <tcp_slowtmr+0x5a4>)
 801759e:	2200      	movs	r2, #0
 80175a0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80175a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d00b      	beq.n	80175c4 <tcp_slowtmr+0x54c>
 80175ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80175b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175b4:	6912      	ldr	r2, [r2, #16]
 80175b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80175b8:	4610      	mov	r0, r2
 80175ba:	4798      	blx	r3
 80175bc:	4603      	mov	r3, r0
 80175be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80175c2:	e002      	b.n	80175ca <tcp_slowtmr+0x552>
 80175c4:	2300      	movs	r3, #0
 80175c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80175ca:	4b14      	ldr	r3, [pc, #80]	; (801761c <tcp_slowtmr+0x5a4>)
 80175cc:	781b      	ldrb	r3, [r3, #0]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d000      	beq.n	80175d4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80175d2:	e562      	b.n	801709a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80175d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d102      	bne.n	80175e2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80175dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80175de:	f004 f8a3 	bl	801b728 <tcp_output>
  while (pcb != NULL) {
 80175e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	f47f ad5e 	bne.w	80170a6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80175ea:	2300      	movs	r3, #0
 80175ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80175ee:	4b0c      	ldr	r3, [pc, #48]	; (8017620 <tcp_slowtmr+0x5a8>)
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80175f4:	e069      	b.n	80176ca <tcp_slowtmr+0x652>
 80175f6:	bf00      	nop
 80175f8:	2400ae5c 	.word	0x2400ae5c
 80175fc:	000a4cb8 	.word	0x000a4cb8
 8017600:	10624dd3 	.word	0x10624dd3
 8017604:	000124f8 	.word	0x000124f8
 8017608:	2400ae58 	.word	0x2400ae58
 801760c:	08027318 	.word	0x08027318
 8017610:	0802777c 	.word	0x0802777c
 8017614:	08027388 	.word	0x08027388
 8017618:	080277a8 	.word	0x080277a8
 801761c:	2400ae54 	.word	0x2400ae54
 8017620:	2400ae68 	.word	0x2400ae68
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017626:	7d1b      	ldrb	r3, [r3, #20]
 8017628:	2b0a      	cmp	r3, #10
 801762a:	d006      	beq.n	801763a <tcp_slowtmr+0x5c2>
 801762c:	4b2b      	ldr	r3, [pc, #172]	; (80176dc <tcp_slowtmr+0x664>)
 801762e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8017632:	492b      	ldr	r1, [pc, #172]	; (80176e0 <tcp_slowtmr+0x668>)
 8017634:	482b      	ldr	r0, [pc, #172]	; (80176e4 <tcp_slowtmr+0x66c>)
 8017636:	f009 fb69 	bl	8020d0c <iprintf>
    pcb_remove = 0;
 801763a:	2300      	movs	r3, #0
 801763c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017640:	4b29      	ldr	r3, [pc, #164]	; (80176e8 <tcp_slowtmr+0x670>)
 8017642:	681a      	ldr	r2, [r3, #0]
 8017644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017646:	6a1b      	ldr	r3, [r3, #32]
 8017648:	1ad3      	subs	r3, r2, r3
 801764a:	2bf0      	cmp	r3, #240	; 0xf0
 801764c:	d904      	bls.n	8017658 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801764e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017652:	3301      	adds	r3, #1
 8017654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801765c:	2b00      	cmp	r3, #0
 801765e:	d02f      	beq.n	80176c0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8017660:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017662:	f000 fbf9 	bl	8017e58 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8017666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017668:	2b00      	cmp	r3, #0
 801766a:	d010      	beq.n	801768e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801766c:	4b1f      	ldr	r3, [pc, #124]	; (80176ec <tcp_slowtmr+0x674>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017672:	429a      	cmp	r2, r3
 8017674:	d106      	bne.n	8017684 <tcp_slowtmr+0x60c>
 8017676:	4b19      	ldr	r3, [pc, #100]	; (80176dc <tcp_slowtmr+0x664>)
 8017678:	f240 52af 	movw	r2, #1455	; 0x5af
 801767c:	491c      	ldr	r1, [pc, #112]	; (80176f0 <tcp_slowtmr+0x678>)
 801767e:	4819      	ldr	r0, [pc, #100]	; (80176e4 <tcp_slowtmr+0x66c>)
 8017680:	f009 fb44 	bl	8020d0c <iprintf>
        prev->next = pcb->next;
 8017684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017686:	68da      	ldr	r2, [r3, #12]
 8017688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801768a:	60da      	str	r2, [r3, #12]
 801768c:	e00f      	b.n	80176ae <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801768e:	4b17      	ldr	r3, [pc, #92]	; (80176ec <tcp_slowtmr+0x674>)
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017694:	429a      	cmp	r2, r3
 8017696:	d006      	beq.n	80176a6 <tcp_slowtmr+0x62e>
 8017698:	4b10      	ldr	r3, [pc, #64]	; (80176dc <tcp_slowtmr+0x664>)
 801769a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801769e:	4915      	ldr	r1, [pc, #84]	; (80176f4 <tcp_slowtmr+0x67c>)
 80176a0:	4810      	ldr	r0, [pc, #64]	; (80176e4 <tcp_slowtmr+0x66c>)
 80176a2:	f009 fb33 	bl	8020d0c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80176a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176a8:	68db      	ldr	r3, [r3, #12]
 80176aa:	4a10      	ldr	r2, [pc, #64]	; (80176ec <tcp_slowtmr+0x674>)
 80176ac:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80176ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176b0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80176b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176b4:	68db      	ldr	r3, [r3, #12]
 80176b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80176b8:	69f8      	ldr	r0, [r7, #28]
 80176ba:	f7fe fe6d 	bl	8016398 <tcp_free>
 80176be:	e004      	b.n	80176ca <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80176c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80176c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176c6:	68db      	ldr	r3, [r3, #12]
 80176c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80176ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d1a9      	bne.n	8017624 <tcp_slowtmr+0x5ac>
    }
  }
}
 80176d0:	bf00      	nop
 80176d2:	bf00      	nop
 80176d4:	3730      	adds	r7, #48	; 0x30
 80176d6:	46bd      	mov	sp, r7
 80176d8:	bdb0      	pop	{r4, r5, r7, pc}
 80176da:	bf00      	nop
 80176dc:	08027318 	.word	0x08027318
 80176e0:	080277d4 	.word	0x080277d4
 80176e4:	08027388 	.word	0x08027388
 80176e8:	2400ae5c 	.word	0x2400ae5c
 80176ec:	2400ae68 	.word	0x2400ae68
 80176f0:	08027804 	.word	0x08027804
 80176f4:	0802782c 	.word	0x0802782c

080176f8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b082      	sub	sp, #8
 80176fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80176fe:	4b2d      	ldr	r3, [pc, #180]	; (80177b4 <tcp_fasttmr+0xbc>)
 8017700:	781b      	ldrb	r3, [r3, #0]
 8017702:	3301      	adds	r3, #1
 8017704:	b2da      	uxtb	r2, r3
 8017706:	4b2b      	ldr	r3, [pc, #172]	; (80177b4 <tcp_fasttmr+0xbc>)
 8017708:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801770a:	4b2b      	ldr	r3, [pc, #172]	; (80177b8 <tcp_fasttmr+0xc0>)
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017710:	e048      	b.n	80177a4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	7f9a      	ldrb	r2, [r3, #30]
 8017716:	4b27      	ldr	r3, [pc, #156]	; (80177b4 <tcp_fasttmr+0xbc>)
 8017718:	781b      	ldrb	r3, [r3, #0]
 801771a:	429a      	cmp	r2, r3
 801771c:	d03f      	beq.n	801779e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801771e:	4b25      	ldr	r3, [pc, #148]	; (80177b4 <tcp_fasttmr+0xbc>)
 8017720:	781a      	ldrb	r2, [r3, #0]
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	8b5b      	ldrh	r3, [r3, #26]
 801772a:	f003 0301 	and.w	r3, r3, #1
 801772e:	2b00      	cmp	r3, #0
 8017730:	d010      	beq.n	8017754 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	8b5b      	ldrh	r3, [r3, #26]
 8017736:	f043 0302 	orr.w	r3, r3, #2
 801773a:	b29a      	uxth	r2, r3
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8017740:	6878      	ldr	r0, [r7, #4]
 8017742:	f003 fff1 	bl	801b728 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	8b5b      	ldrh	r3, [r3, #26]
 801774a:	f023 0303 	bic.w	r3, r3, #3
 801774e:	b29a      	uxth	r2, r3
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	8b5b      	ldrh	r3, [r3, #26]
 8017758:	f003 0308 	and.w	r3, r3, #8
 801775c:	2b00      	cmp	r3, #0
 801775e:	d009      	beq.n	8017774 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	8b5b      	ldrh	r3, [r3, #26]
 8017764:	f023 0308 	bic.w	r3, r3, #8
 8017768:	b29a      	uxth	r2, r3
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801776e:	6878      	ldr	r0, [r7, #4]
 8017770:	f7fe ffa6 	bl	80166c0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	68db      	ldr	r3, [r3, #12]
 8017778:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801777e:	2b00      	cmp	r3, #0
 8017780:	d00a      	beq.n	8017798 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8017782:	4b0e      	ldr	r3, [pc, #56]	; (80177bc <tcp_fasttmr+0xc4>)
 8017784:	2200      	movs	r2, #0
 8017786:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8017788:	6878      	ldr	r0, [r7, #4]
 801778a:	f000 f819 	bl	80177c0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801778e:	4b0b      	ldr	r3, [pc, #44]	; (80177bc <tcp_fasttmr+0xc4>)
 8017790:	781b      	ldrb	r3, [r3, #0]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d000      	beq.n	8017798 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8017796:	e7b8      	b.n	801770a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8017798:	683b      	ldr	r3, [r7, #0]
 801779a:	607b      	str	r3, [r7, #4]
 801779c:	e002      	b.n	80177a4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	68db      	ldr	r3, [r3, #12]
 80177a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d1b3      	bne.n	8017712 <tcp_fasttmr+0x1a>
    }
  }
}
 80177aa:	bf00      	nop
 80177ac:	bf00      	nop
 80177ae:	3708      	adds	r7, #8
 80177b0:	46bd      	mov	sp, r7
 80177b2:	bd80      	pop	{r7, pc}
 80177b4:	240077c6 	.word	0x240077c6
 80177b8:	2400ae58 	.word	0x2400ae58
 80177bc:	2400ae54 	.word	0x2400ae54

080177c0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80177c0:	b590      	push	{r4, r7, lr}
 80177c2:	b085      	sub	sp, #20
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d109      	bne.n	80177e2 <tcp_process_refused_data+0x22>
 80177ce:	4b37      	ldr	r3, [pc, #220]	; (80178ac <tcp_process_refused_data+0xec>)
 80177d0:	f240 6209 	movw	r2, #1545	; 0x609
 80177d4:	4936      	ldr	r1, [pc, #216]	; (80178b0 <tcp_process_refused_data+0xf0>)
 80177d6:	4837      	ldr	r0, [pc, #220]	; (80178b4 <tcp_process_refused_data+0xf4>)
 80177d8:	f009 fa98 	bl	8020d0c <iprintf>
 80177dc:	f06f 030f 	mvn.w	r3, #15
 80177e0:	e060      	b.n	80178a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80177e6:	7b5b      	ldrb	r3, [r3, #13]
 80177e8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80177ee:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	2200      	movs	r2, #0
 80177f4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d00b      	beq.n	8017818 <tcp_process_refused_data+0x58>
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	6918      	ldr	r0, [r3, #16]
 801780a:	2300      	movs	r3, #0
 801780c:	68ba      	ldr	r2, [r7, #8]
 801780e:	6879      	ldr	r1, [r7, #4]
 8017810:	47a0      	blx	r4
 8017812:	4603      	mov	r3, r0
 8017814:	73fb      	strb	r3, [r7, #15]
 8017816:	e007      	b.n	8017828 <tcp_process_refused_data+0x68>
 8017818:	2300      	movs	r3, #0
 801781a:	68ba      	ldr	r2, [r7, #8]
 801781c:	6879      	ldr	r1, [r7, #4]
 801781e:	2000      	movs	r0, #0
 8017820:	f000 f8a4 	bl	801796c <tcp_recv_null>
 8017824:	4603      	mov	r3, r0
 8017826:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8017828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d12a      	bne.n	8017886 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8017830:	7bbb      	ldrb	r3, [r7, #14]
 8017832:	f003 0320 	and.w	r3, r3, #32
 8017836:	2b00      	cmp	r3, #0
 8017838:	d033      	beq.n	80178a2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801783e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017842:	d005      	beq.n	8017850 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017848:	3301      	adds	r3, #1
 801784a:	b29a      	uxth	r2, r3
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017856:	2b00      	cmp	r3, #0
 8017858:	d00b      	beq.n	8017872 <tcp_process_refused_data+0xb2>
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	6918      	ldr	r0, [r3, #16]
 8017864:	2300      	movs	r3, #0
 8017866:	2200      	movs	r2, #0
 8017868:	6879      	ldr	r1, [r7, #4]
 801786a:	47a0      	blx	r4
 801786c:	4603      	mov	r3, r0
 801786e:	73fb      	strb	r3, [r7, #15]
 8017870:	e001      	b.n	8017876 <tcp_process_refused_data+0xb6>
 8017872:	2300      	movs	r3, #0
 8017874:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8017876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801787a:	f113 0f0d 	cmn.w	r3, #13
 801787e:	d110      	bne.n	80178a2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8017880:	f06f 030c 	mvn.w	r3, #12
 8017884:	e00e      	b.n	80178a4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8017886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801788a:	f113 0f0d 	cmn.w	r3, #13
 801788e:	d102      	bne.n	8017896 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8017890:	f06f 030c 	mvn.w	r3, #12
 8017894:	e006      	b.n	80178a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	68ba      	ldr	r2, [r7, #8]
 801789a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801789c:	f06f 0304 	mvn.w	r3, #4
 80178a0:	e000      	b.n	80178a4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80178a2:	2300      	movs	r3, #0
}
 80178a4:	4618      	mov	r0, r3
 80178a6:	3714      	adds	r7, #20
 80178a8:	46bd      	mov	sp, r7
 80178aa:	bd90      	pop	{r4, r7, pc}
 80178ac:	08027318 	.word	0x08027318
 80178b0:	08027854 	.word	0x08027854
 80178b4:	08027388 	.word	0x08027388

080178b8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80178b8:	b580      	push	{r7, lr}
 80178ba:	b084      	sub	sp, #16
 80178bc:	af00      	add	r7, sp, #0
 80178be:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80178c0:	e007      	b.n	80178d2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80178c8:	6878      	ldr	r0, [r7, #4]
 80178ca:	f000 f80a 	bl	80178e2 <tcp_seg_free>
    seg = next;
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d1f4      	bne.n	80178c2 <tcp_segs_free+0xa>
  }
}
 80178d8:	bf00      	nop
 80178da:	bf00      	nop
 80178dc:	3710      	adds	r7, #16
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}

080178e2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80178e2:	b580      	push	{r7, lr}
 80178e4:	b082      	sub	sp, #8
 80178e6:	af00      	add	r7, sp, #0
 80178e8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d00c      	beq.n	801790a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	685b      	ldr	r3, [r3, #4]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d004      	beq.n	8017902 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	685b      	ldr	r3, [r3, #4]
 80178fc:	4618      	mov	r0, r3
 80178fe:	f7fe f9f3 	bl	8015ce8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8017902:	6879      	ldr	r1, [r7, #4]
 8017904:	2003      	movs	r0, #3
 8017906:	f7fd fb79 	bl	8014ffc <memp_free>
  }
}
 801790a:	bf00      	nop
 801790c:	3708      	adds	r7, #8
 801790e:	46bd      	mov	sp, r7
 8017910:	bd80      	pop	{r7, pc}
	...

08017914 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017914:	b580      	push	{r7, lr}
 8017916:	b084      	sub	sp, #16
 8017918:	af00      	add	r7, sp, #0
 801791a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d106      	bne.n	8017930 <tcp_seg_copy+0x1c>
 8017922:	4b0f      	ldr	r3, [pc, #60]	; (8017960 <tcp_seg_copy+0x4c>)
 8017924:	f240 6282 	movw	r2, #1666	; 0x682
 8017928:	490e      	ldr	r1, [pc, #56]	; (8017964 <tcp_seg_copy+0x50>)
 801792a:	480f      	ldr	r0, [pc, #60]	; (8017968 <tcp_seg_copy+0x54>)
 801792c:	f009 f9ee 	bl	8020d0c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8017930:	2003      	movs	r0, #3
 8017932:	f7fd faf3 	bl	8014f1c <memp_malloc>
 8017936:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d101      	bne.n	8017942 <tcp_seg_copy+0x2e>
    return NULL;
 801793e:	2300      	movs	r3, #0
 8017940:	e00a      	b.n	8017958 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8017942:	2210      	movs	r2, #16
 8017944:	6879      	ldr	r1, [r7, #4]
 8017946:	68f8      	ldr	r0, [r7, #12]
 8017948:	f008 fabe 	bl	801fec8 <memcpy>
  pbuf_ref(cseg->p);
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	685b      	ldr	r3, [r3, #4]
 8017950:	4618      	mov	r0, r3
 8017952:	f7fe fa69 	bl	8015e28 <pbuf_ref>
  return cseg;
 8017956:	68fb      	ldr	r3, [r7, #12]
}
 8017958:	4618      	mov	r0, r3
 801795a:	3710      	adds	r7, #16
 801795c:	46bd      	mov	sp, r7
 801795e:	bd80      	pop	{r7, pc}
 8017960:	08027318 	.word	0x08027318
 8017964:	08027898 	.word	0x08027898
 8017968:	08027388 	.word	0x08027388

0801796c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b084      	sub	sp, #16
 8017970:	af00      	add	r7, sp, #0
 8017972:	60f8      	str	r0, [r7, #12]
 8017974:	60b9      	str	r1, [r7, #8]
 8017976:	607a      	str	r2, [r7, #4]
 8017978:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801797a:	68bb      	ldr	r3, [r7, #8]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d109      	bne.n	8017994 <tcp_recv_null+0x28>
 8017980:	4b12      	ldr	r3, [pc, #72]	; (80179cc <tcp_recv_null+0x60>)
 8017982:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017986:	4912      	ldr	r1, [pc, #72]	; (80179d0 <tcp_recv_null+0x64>)
 8017988:	4812      	ldr	r0, [pc, #72]	; (80179d4 <tcp_recv_null+0x68>)
 801798a:	f009 f9bf 	bl	8020d0c <iprintf>
 801798e:	f06f 030f 	mvn.w	r3, #15
 8017992:	e016      	b.n	80179c2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d009      	beq.n	80179ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	891b      	ldrh	r3, [r3, #8]
 801799e:	4619      	mov	r1, r3
 80179a0:	68b8      	ldr	r0, [r7, #8]
 80179a2:	f7ff f9bb 	bl	8016d1c <tcp_recved>
    pbuf_free(p);
 80179a6:	6878      	ldr	r0, [r7, #4]
 80179a8:	f7fe f99e 	bl	8015ce8 <pbuf_free>
 80179ac:	e008      	b.n	80179c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80179ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d104      	bne.n	80179c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80179b6:	68b8      	ldr	r0, [r7, #8]
 80179b8:	f7fe feec 	bl	8016794 <tcp_close>
 80179bc:	4603      	mov	r3, r0
 80179be:	e000      	b.n	80179c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80179c0:	2300      	movs	r3, #0
}
 80179c2:	4618      	mov	r0, r3
 80179c4:	3710      	adds	r7, #16
 80179c6:	46bd      	mov	sp, r7
 80179c8:	bd80      	pop	{r7, pc}
 80179ca:	bf00      	nop
 80179cc:	08027318 	.word	0x08027318
 80179d0:	080278b4 	.word	0x080278b4
 80179d4:	08027388 	.word	0x08027388

080179d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b086      	sub	sp, #24
 80179dc:	af00      	add	r7, sp, #0
 80179de:	4603      	mov	r3, r0
 80179e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80179e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	db01      	blt.n	80179ee <tcp_kill_prio+0x16>
 80179ea:	79fb      	ldrb	r3, [r7, #7]
 80179ec:	e000      	b.n	80179f0 <tcp_kill_prio+0x18>
 80179ee:	237f      	movs	r3, #127	; 0x7f
 80179f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80179f2:	7afb      	ldrb	r3, [r7, #11]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d034      	beq.n	8017a62 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80179f8:	7afb      	ldrb	r3, [r7, #11]
 80179fa:	3b01      	subs	r3, #1
 80179fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80179fe:	2300      	movs	r3, #0
 8017a00:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017a02:	2300      	movs	r3, #0
 8017a04:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a06:	4b19      	ldr	r3, [pc, #100]	; (8017a6c <tcp_kill_prio+0x94>)
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	617b      	str	r3, [r7, #20]
 8017a0c:	e01f      	b.n	8017a4e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8017a0e:	697b      	ldr	r3, [r7, #20]
 8017a10:	7d5b      	ldrb	r3, [r3, #21]
 8017a12:	7afa      	ldrb	r2, [r7, #11]
 8017a14:	429a      	cmp	r2, r3
 8017a16:	d80c      	bhi.n	8017a32 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017a18:	697b      	ldr	r3, [r7, #20]
 8017a1a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8017a1c:	7afa      	ldrb	r2, [r7, #11]
 8017a1e:	429a      	cmp	r2, r3
 8017a20:	d112      	bne.n	8017a48 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017a22:	4b13      	ldr	r3, [pc, #76]	; (8017a70 <tcp_kill_prio+0x98>)
 8017a24:	681a      	ldr	r2, [r3, #0]
 8017a26:	697b      	ldr	r3, [r7, #20]
 8017a28:	6a1b      	ldr	r3, [r3, #32]
 8017a2a:	1ad3      	subs	r3, r2, r3
 8017a2c:	68fa      	ldr	r2, [r7, #12]
 8017a2e:	429a      	cmp	r2, r3
 8017a30:	d80a      	bhi.n	8017a48 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8017a32:	4b0f      	ldr	r3, [pc, #60]	; (8017a70 <tcp_kill_prio+0x98>)
 8017a34:	681a      	ldr	r2, [r3, #0]
 8017a36:	697b      	ldr	r3, [r7, #20]
 8017a38:	6a1b      	ldr	r3, [r3, #32]
 8017a3a:	1ad3      	subs	r3, r2, r3
 8017a3c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8017a3e:	697b      	ldr	r3, [r7, #20]
 8017a40:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8017a42:	697b      	ldr	r3, [r7, #20]
 8017a44:	7d5b      	ldrb	r3, [r3, #21]
 8017a46:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a48:	697b      	ldr	r3, [r7, #20]
 8017a4a:	68db      	ldr	r3, [r3, #12]
 8017a4c:	617b      	str	r3, [r7, #20]
 8017a4e:	697b      	ldr	r3, [r7, #20]
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d1dc      	bne.n	8017a0e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8017a54:	693b      	ldr	r3, [r7, #16]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d004      	beq.n	8017a64 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017a5a:	6938      	ldr	r0, [r7, #16]
 8017a5c:	f7fe ff84 	bl	8016968 <tcp_abort>
 8017a60:	e000      	b.n	8017a64 <tcp_kill_prio+0x8c>
    return;
 8017a62:	bf00      	nop
  }
}
 8017a64:	3718      	adds	r7, #24
 8017a66:	46bd      	mov	sp, r7
 8017a68:	bd80      	pop	{r7, pc}
 8017a6a:	bf00      	nop
 8017a6c:	2400ae58 	.word	0x2400ae58
 8017a70:	2400ae5c 	.word	0x2400ae5c

08017a74 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b086      	sub	sp, #24
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8017a7e:	79fb      	ldrb	r3, [r7, #7]
 8017a80:	2b08      	cmp	r3, #8
 8017a82:	d009      	beq.n	8017a98 <tcp_kill_state+0x24>
 8017a84:	79fb      	ldrb	r3, [r7, #7]
 8017a86:	2b09      	cmp	r3, #9
 8017a88:	d006      	beq.n	8017a98 <tcp_kill_state+0x24>
 8017a8a:	4b1a      	ldr	r3, [pc, #104]	; (8017af4 <tcp_kill_state+0x80>)
 8017a8c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8017a90:	4919      	ldr	r1, [pc, #100]	; (8017af8 <tcp_kill_state+0x84>)
 8017a92:	481a      	ldr	r0, [pc, #104]	; (8017afc <tcp_kill_state+0x88>)
 8017a94:	f009 f93a 	bl	8020d0c <iprintf>

  inactivity = 0;
 8017a98:	2300      	movs	r3, #0
 8017a9a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017aa0:	4b17      	ldr	r3, [pc, #92]	; (8017b00 <tcp_kill_state+0x8c>)
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	617b      	str	r3, [r7, #20]
 8017aa6:	e017      	b.n	8017ad8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017aa8:	697b      	ldr	r3, [r7, #20]
 8017aaa:	7d1b      	ldrb	r3, [r3, #20]
 8017aac:	79fa      	ldrb	r2, [r7, #7]
 8017aae:	429a      	cmp	r2, r3
 8017ab0:	d10f      	bne.n	8017ad2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017ab2:	4b14      	ldr	r3, [pc, #80]	; (8017b04 <tcp_kill_state+0x90>)
 8017ab4:	681a      	ldr	r2, [r3, #0]
 8017ab6:	697b      	ldr	r3, [r7, #20]
 8017ab8:	6a1b      	ldr	r3, [r3, #32]
 8017aba:	1ad3      	subs	r3, r2, r3
 8017abc:	68fa      	ldr	r2, [r7, #12]
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	d807      	bhi.n	8017ad2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017ac2:	4b10      	ldr	r3, [pc, #64]	; (8017b04 <tcp_kill_state+0x90>)
 8017ac4:	681a      	ldr	r2, [r3, #0]
 8017ac6:	697b      	ldr	r3, [r7, #20]
 8017ac8:	6a1b      	ldr	r3, [r3, #32]
 8017aca:	1ad3      	subs	r3, r2, r3
 8017acc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8017ace:	697b      	ldr	r3, [r7, #20]
 8017ad0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ad2:	697b      	ldr	r3, [r7, #20]
 8017ad4:	68db      	ldr	r3, [r3, #12]
 8017ad6:	617b      	str	r3, [r7, #20]
 8017ad8:	697b      	ldr	r3, [r7, #20]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d1e4      	bne.n	8017aa8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8017ade:	693b      	ldr	r3, [r7, #16]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d003      	beq.n	8017aec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017ae4:	2100      	movs	r1, #0
 8017ae6:	6938      	ldr	r0, [r7, #16]
 8017ae8:	f7fe fe80 	bl	80167ec <tcp_abandon>
  }
}
 8017aec:	bf00      	nop
 8017aee:	3718      	adds	r7, #24
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bd80      	pop	{r7, pc}
 8017af4:	08027318 	.word	0x08027318
 8017af8:	080278d0 	.word	0x080278d0
 8017afc:	08027388 	.word	0x08027388
 8017b00:	2400ae58 	.word	0x2400ae58
 8017b04:	2400ae5c 	.word	0x2400ae5c

08017b08 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b084      	sub	sp, #16
 8017b0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8017b0e:	2300      	movs	r3, #0
 8017b10:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8017b12:	2300      	movs	r3, #0
 8017b14:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b16:	4b12      	ldr	r3, [pc, #72]	; (8017b60 <tcp_kill_timewait+0x58>)
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	60fb      	str	r3, [r7, #12]
 8017b1c:	e012      	b.n	8017b44 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017b1e:	4b11      	ldr	r3, [pc, #68]	; (8017b64 <tcp_kill_timewait+0x5c>)
 8017b20:	681a      	ldr	r2, [r3, #0]
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	6a1b      	ldr	r3, [r3, #32]
 8017b26:	1ad3      	subs	r3, r2, r3
 8017b28:	687a      	ldr	r2, [r7, #4]
 8017b2a:	429a      	cmp	r2, r3
 8017b2c:	d807      	bhi.n	8017b3e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8017b2e:	4b0d      	ldr	r3, [pc, #52]	; (8017b64 <tcp_kill_timewait+0x5c>)
 8017b30:	681a      	ldr	r2, [r3, #0]
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	6a1b      	ldr	r3, [r3, #32]
 8017b36:	1ad3      	subs	r3, r2, r3
 8017b38:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	68db      	ldr	r3, [r3, #12]
 8017b42:	60fb      	str	r3, [r7, #12]
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d1e9      	bne.n	8017b1e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8017b4a:	68bb      	ldr	r3, [r7, #8]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d002      	beq.n	8017b56 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017b50:	68b8      	ldr	r0, [r7, #8]
 8017b52:	f7fe ff09 	bl	8016968 <tcp_abort>
  }
}
 8017b56:	bf00      	nop
 8017b58:	3710      	adds	r7, #16
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	bd80      	pop	{r7, pc}
 8017b5e:	bf00      	nop
 8017b60:	2400ae68 	.word	0x2400ae68
 8017b64:	2400ae5c 	.word	0x2400ae5c

08017b68 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b082      	sub	sp, #8
 8017b6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8017b6e:	4b10      	ldr	r3, [pc, #64]	; (8017bb0 <tcp_handle_closepend+0x48>)
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017b74:	e014      	b.n	8017ba0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	68db      	ldr	r3, [r3, #12]
 8017b7a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	8b5b      	ldrh	r3, [r3, #26]
 8017b80:	f003 0308 	and.w	r3, r3, #8
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d009      	beq.n	8017b9c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	8b5b      	ldrh	r3, [r3, #26]
 8017b8c:	f023 0308 	bic.w	r3, r3, #8
 8017b90:	b29a      	uxth	r2, r3
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8017b96:	6878      	ldr	r0, [r7, #4]
 8017b98:	f7fe fd92 	bl	80166c0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8017b9c:	683b      	ldr	r3, [r7, #0]
 8017b9e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d1e7      	bne.n	8017b76 <tcp_handle_closepend+0xe>
  }
}
 8017ba6:	bf00      	nop
 8017ba8:	bf00      	nop
 8017baa:	3708      	adds	r7, #8
 8017bac:	46bd      	mov	sp, r7
 8017bae:	bd80      	pop	{r7, pc}
 8017bb0:	2400ae58 	.word	0x2400ae58

08017bb4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b084      	sub	sp, #16
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	4603      	mov	r3, r0
 8017bbc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017bbe:	2001      	movs	r0, #1
 8017bc0:	f7fd f9ac 	bl	8014f1c <memp_malloc>
 8017bc4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d126      	bne.n	8017c1a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017bcc:	f7ff ffcc 	bl	8017b68 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017bd0:	f7ff ff9a 	bl	8017b08 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017bd4:	2001      	movs	r0, #1
 8017bd6:	f7fd f9a1 	bl	8014f1c <memp_malloc>
 8017bda:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d11b      	bne.n	8017c1a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017be2:	2009      	movs	r0, #9
 8017be4:	f7ff ff46 	bl	8017a74 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017be8:	2001      	movs	r0, #1
 8017bea:	f7fd f997 	bl	8014f1c <memp_malloc>
 8017bee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d111      	bne.n	8017c1a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8017bf6:	2008      	movs	r0, #8
 8017bf8:	f7ff ff3c 	bl	8017a74 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017bfc:	2001      	movs	r0, #1
 8017bfe:	f7fd f98d 	bl	8014f1c <memp_malloc>
 8017c02:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d107      	bne.n	8017c1a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8017c0a:	79fb      	ldrb	r3, [r7, #7]
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	f7ff fee3 	bl	80179d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017c12:	2001      	movs	r0, #1
 8017c14:	f7fd f982 	bl	8014f1c <memp_malloc>
 8017c18:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d03f      	beq.n	8017ca0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017c20:	229c      	movs	r2, #156	; 0x9c
 8017c22:	2100      	movs	r1, #0
 8017c24:	68f8      	ldr	r0, [r7, #12]
 8017c26:	f008 f977 	bl	801ff18 <memset>
    pcb->prio = prio;
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	79fa      	ldrb	r2, [r7, #7]
 8017c2e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017c36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017c40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	22ff      	movs	r2, #255	; 0xff
 8017c4e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017c56:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	2206      	movs	r2, #6
 8017c5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	2206      	movs	r2, #6
 8017c64:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c6c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	2201      	movs	r2, #1
 8017c72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8017c76:	4b0d      	ldr	r3, [pc, #52]	; (8017cac <tcp_alloc+0xf8>)
 8017c78:	681a      	ldr	r2, [r3, #0]
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8017c7e:	4b0c      	ldr	r3, [pc, #48]	; (8017cb0 <tcp_alloc+0xfc>)
 8017c80:	781a      	ldrb	r2, [r3, #0]
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017c8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	4a08      	ldr	r2, [pc, #32]	; (8017cb4 <tcp_alloc+0x100>)
 8017c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	4a07      	ldr	r2, [pc, #28]	; (8017cb8 <tcp_alloc+0x104>)
 8017c9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017ca0:	68fb      	ldr	r3, [r7, #12]
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	3710      	adds	r7, #16
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}
 8017caa:	bf00      	nop
 8017cac:	2400ae5c 	.word	0x2400ae5c
 8017cb0:	240077c6 	.word	0x240077c6
 8017cb4:	0801796d 	.word	0x0801796d
 8017cb8:	006ddd00 	.word	0x006ddd00

08017cbc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b084      	sub	sp, #16
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8017cc6:	2040      	movs	r0, #64	; 0x40
 8017cc8:	f7ff ff74 	bl	8017bb4 <tcp_alloc>
 8017ccc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017cce:	68fb      	ldr	r3, [r7, #12]
}
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	3710      	adds	r7, #16
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	bd80      	pop	{r7, pc}

08017cd8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8017cd8:	b480      	push	{r7}
 8017cda:	b083      	sub	sp, #12
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
 8017ce0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d002      	beq.n	8017cee <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	683a      	ldr	r2, [r7, #0]
 8017cec:	611a      	str	r2, [r3, #16]
  }
}
 8017cee:	bf00      	nop
 8017cf0:	370c      	adds	r7, #12
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf8:	4770      	bx	lr
	...

08017cfc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b082      	sub	sp, #8
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
 8017d04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d00e      	beq.n	8017d2a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	7d1b      	ldrb	r3, [r3, #20]
 8017d10:	2b01      	cmp	r3, #1
 8017d12:	d106      	bne.n	8017d22 <tcp_recv+0x26>
 8017d14:	4b07      	ldr	r3, [pc, #28]	; (8017d34 <tcp_recv+0x38>)
 8017d16:	f240 72df 	movw	r2, #2015	; 0x7df
 8017d1a:	4907      	ldr	r1, [pc, #28]	; (8017d38 <tcp_recv+0x3c>)
 8017d1c:	4807      	ldr	r0, [pc, #28]	; (8017d3c <tcp_recv+0x40>)
 8017d1e:	f008 fff5 	bl	8020d0c <iprintf>
    pcb->recv = recv;
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	683a      	ldr	r2, [r7, #0]
 8017d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8017d2a:	bf00      	nop
 8017d2c:	3708      	adds	r7, #8
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	bd80      	pop	{r7, pc}
 8017d32:	bf00      	nop
 8017d34:	08027318 	.word	0x08027318
 8017d38:	080278e0 	.word	0x080278e0
 8017d3c:	08027388 	.word	0x08027388

08017d40 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b082      	sub	sp, #8
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	6078      	str	r0, [r7, #4]
 8017d48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d00e      	beq.n	8017d6e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	7d1b      	ldrb	r3, [r3, #20]
 8017d54:	2b01      	cmp	r3, #1
 8017d56:	d106      	bne.n	8017d66 <tcp_sent+0x26>
 8017d58:	4b07      	ldr	r3, [pc, #28]	; (8017d78 <tcp_sent+0x38>)
 8017d5a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8017d5e:	4907      	ldr	r1, [pc, #28]	; (8017d7c <tcp_sent+0x3c>)
 8017d60:	4807      	ldr	r0, [pc, #28]	; (8017d80 <tcp_sent+0x40>)
 8017d62:	f008 ffd3 	bl	8020d0c <iprintf>
    pcb->sent = sent;
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	683a      	ldr	r2, [r7, #0]
 8017d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8017d6e:	bf00      	nop
 8017d70:	3708      	adds	r7, #8
 8017d72:	46bd      	mov	sp, r7
 8017d74:	bd80      	pop	{r7, pc}
 8017d76:	bf00      	nop
 8017d78:	08027318 	.word	0x08027318
 8017d7c:	08027908 	.word	0x08027908
 8017d80:	08027388 	.word	0x08027388

08017d84 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8017d84:	b580      	push	{r7, lr}
 8017d86:	b082      	sub	sp, #8
 8017d88:	af00      	add	r7, sp, #0
 8017d8a:	6078      	str	r0, [r7, #4]
 8017d8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d00e      	beq.n	8017db2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	7d1b      	ldrb	r3, [r3, #20]
 8017d98:	2b01      	cmp	r3, #1
 8017d9a:	d106      	bne.n	8017daa <tcp_err+0x26>
 8017d9c:	4b07      	ldr	r3, [pc, #28]	; (8017dbc <tcp_err+0x38>)
 8017d9e:	f640 020d 	movw	r2, #2061	; 0x80d
 8017da2:	4907      	ldr	r1, [pc, #28]	; (8017dc0 <tcp_err+0x3c>)
 8017da4:	4807      	ldr	r0, [pc, #28]	; (8017dc4 <tcp_err+0x40>)
 8017da6:	f008 ffb1 	bl	8020d0c <iprintf>
    pcb->errf = err;
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	683a      	ldr	r2, [r7, #0]
 8017dae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8017db2:	bf00      	nop
 8017db4:	3708      	adds	r7, #8
 8017db6:	46bd      	mov	sp, r7
 8017db8:	bd80      	pop	{r7, pc}
 8017dba:	bf00      	nop
 8017dbc:	08027318 	.word	0x08027318
 8017dc0:	08027930 	.word	0x08027930
 8017dc4:	08027388 	.word	0x08027388

08017dc8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8017dc8:	b480      	push	{r7}
 8017dca:	b085      	sub	sp, #20
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
 8017dd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d008      	beq.n	8017dea <tcp_accept+0x22>
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	7d1b      	ldrb	r3, [r3, #20]
 8017ddc:	2b01      	cmp	r3, #1
 8017dde:	d104      	bne.n	8017dea <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	683a      	ldr	r2, [r7, #0]
 8017de8:	619a      	str	r2, [r3, #24]
  }
}
 8017dea:	bf00      	nop
 8017dec:	3714      	adds	r7, #20
 8017dee:	46bd      	mov	sp, r7
 8017df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df4:	4770      	bx	lr
	...

08017df8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8017df8:	b580      	push	{r7, lr}
 8017dfa:	b084      	sub	sp, #16
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	60f8      	str	r0, [r7, #12]
 8017e00:	60b9      	str	r1, [r7, #8]
 8017e02:	4613      	mov	r3, r2
 8017e04:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d107      	bne.n	8017e1c <tcp_poll+0x24>
 8017e0c:	4b0e      	ldr	r3, [pc, #56]	; (8017e48 <tcp_poll+0x50>)
 8017e0e:	f640 023d 	movw	r2, #2109	; 0x83d
 8017e12:	490e      	ldr	r1, [pc, #56]	; (8017e4c <tcp_poll+0x54>)
 8017e14:	480e      	ldr	r0, [pc, #56]	; (8017e50 <tcp_poll+0x58>)
 8017e16:	f008 ff79 	bl	8020d0c <iprintf>
 8017e1a:	e011      	b.n	8017e40 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	7d1b      	ldrb	r3, [r3, #20]
 8017e20:	2b01      	cmp	r3, #1
 8017e22:	d106      	bne.n	8017e32 <tcp_poll+0x3a>
 8017e24:	4b08      	ldr	r3, [pc, #32]	; (8017e48 <tcp_poll+0x50>)
 8017e26:	f640 023e 	movw	r2, #2110	; 0x83e
 8017e2a:	490a      	ldr	r1, [pc, #40]	; (8017e54 <tcp_poll+0x5c>)
 8017e2c:	4808      	ldr	r0, [pc, #32]	; (8017e50 <tcp_poll+0x58>)
 8017e2e:	f008 ff6d 	bl	8020d0c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	68ba      	ldr	r2, [r7, #8]
 8017e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	79fa      	ldrb	r2, [r7, #7]
 8017e3e:	775a      	strb	r2, [r3, #29]
}
 8017e40:	3710      	adds	r7, #16
 8017e42:	46bd      	mov	sp, r7
 8017e44:	bd80      	pop	{r7, pc}
 8017e46:	bf00      	nop
 8017e48:	08027318 	.word	0x08027318
 8017e4c:	08027958 	.word	0x08027958
 8017e50:	08027388 	.word	0x08027388
 8017e54:	08027970 	.word	0x08027970

08017e58 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017e58:	b580      	push	{r7, lr}
 8017e5a:	b082      	sub	sp, #8
 8017e5c:	af00      	add	r7, sp, #0
 8017e5e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d107      	bne.n	8017e76 <tcp_pcb_purge+0x1e>
 8017e66:	4b21      	ldr	r3, [pc, #132]	; (8017eec <tcp_pcb_purge+0x94>)
 8017e68:	f640 0251 	movw	r2, #2129	; 0x851
 8017e6c:	4920      	ldr	r1, [pc, #128]	; (8017ef0 <tcp_pcb_purge+0x98>)
 8017e6e:	4821      	ldr	r0, [pc, #132]	; (8017ef4 <tcp_pcb_purge+0x9c>)
 8017e70:	f008 ff4c 	bl	8020d0c <iprintf>
 8017e74:	e037      	b.n	8017ee6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	7d1b      	ldrb	r3, [r3, #20]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d033      	beq.n	8017ee6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017e82:	2b0a      	cmp	r3, #10
 8017e84:	d02f      	beq.n	8017ee6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8017e8a:	2b01      	cmp	r3, #1
 8017e8c:	d02b      	beq.n	8017ee6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d007      	beq.n	8017ea6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	f7fd ff24 	bl	8015ce8 <pbuf_free>
      pcb->refused_data = NULL;
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	2200      	movs	r2, #0
 8017ea4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d002      	beq.n	8017eb4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017eae:	6878      	ldr	r0, [r7, #4]
 8017eb0:	f000 f986 	bl	80181c0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017eba:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f7ff fcf9 	bl	80178b8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017eca:	4618      	mov	r0, r3
 8017ecc:	f7ff fcf4 	bl	80178b8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	66da      	str	r2, [r3, #108]	; 0x6c
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8017ee6:	3708      	adds	r7, #8
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	bd80      	pop	{r7, pc}
 8017eec:	08027318 	.word	0x08027318
 8017ef0:	08027990 	.word	0x08027990
 8017ef4:	08027388 	.word	0x08027388

08017ef8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b084      	sub	sp, #16
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6078      	str	r0, [r7, #4]
 8017f00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017f02:	683b      	ldr	r3, [r7, #0]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d106      	bne.n	8017f16 <tcp_pcb_remove+0x1e>
 8017f08:	4b3e      	ldr	r3, [pc, #248]	; (8018004 <tcp_pcb_remove+0x10c>)
 8017f0a:	f640 0283 	movw	r2, #2179	; 0x883
 8017f0e:	493e      	ldr	r1, [pc, #248]	; (8018008 <tcp_pcb_remove+0x110>)
 8017f10:	483e      	ldr	r0, [pc, #248]	; (801800c <tcp_pcb_remove+0x114>)
 8017f12:	f008 fefb 	bl	8020d0c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d106      	bne.n	8017f2a <tcp_pcb_remove+0x32>
 8017f1c:	4b39      	ldr	r3, [pc, #228]	; (8018004 <tcp_pcb_remove+0x10c>)
 8017f1e:	f640 0284 	movw	r2, #2180	; 0x884
 8017f22:	493b      	ldr	r1, [pc, #236]	; (8018010 <tcp_pcb_remove+0x118>)
 8017f24:	4839      	ldr	r0, [pc, #228]	; (801800c <tcp_pcb_remove+0x114>)
 8017f26:	f008 fef1 	bl	8020d0c <iprintf>

  TCP_RMV(pcblist, pcb);
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	683a      	ldr	r2, [r7, #0]
 8017f30:	429a      	cmp	r2, r3
 8017f32:	d105      	bne.n	8017f40 <tcp_pcb_remove+0x48>
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	68da      	ldr	r2, [r3, #12]
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	601a      	str	r2, [r3, #0]
 8017f3e:	e013      	b.n	8017f68 <tcp_pcb_remove+0x70>
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	60fb      	str	r3, [r7, #12]
 8017f46:	e00c      	b.n	8017f62 <tcp_pcb_remove+0x6a>
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	68db      	ldr	r3, [r3, #12]
 8017f4c:	683a      	ldr	r2, [r7, #0]
 8017f4e:	429a      	cmp	r2, r3
 8017f50:	d104      	bne.n	8017f5c <tcp_pcb_remove+0x64>
 8017f52:	683b      	ldr	r3, [r7, #0]
 8017f54:	68da      	ldr	r2, [r3, #12]
 8017f56:	68fb      	ldr	r3, [r7, #12]
 8017f58:	60da      	str	r2, [r3, #12]
 8017f5a:	e005      	b.n	8017f68 <tcp_pcb_remove+0x70>
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	68db      	ldr	r3, [r3, #12]
 8017f60:	60fb      	str	r3, [r7, #12]
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d1ef      	bne.n	8017f48 <tcp_pcb_remove+0x50>
 8017f68:	683b      	ldr	r3, [r7, #0]
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017f6e:	6838      	ldr	r0, [r7, #0]
 8017f70:	f7ff ff72 	bl	8017e58 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017f74:	683b      	ldr	r3, [r7, #0]
 8017f76:	7d1b      	ldrb	r3, [r3, #20]
 8017f78:	2b0a      	cmp	r3, #10
 8017f7a:	d013      	beq.n	8017fa4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8017f7c:	683b      	ldr	r3, [r7, #0]
 8017f7e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017f80:	2b01      	cmp	r3, #1
 8017f82:	d00f      	beq.n	8017fa4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017f84:	683b      	ldr	r3, [r7, #0]
 8017f86:	8b5b      	ldrh	r3, [r3, #26]
 8017f88:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d009      	beq.n	8017fa4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017f90:	683b      	ldr	r3, [r7, #0]
 8017f92:	8b5b      	ldrh	r3, [r3, #26]
 8017f94:	f043 0302 	orr.w	r3, r3, #2
 8017f98:	b29a      	uxth	r2, r3
 8017f9a:	683b      	ldr	r3, [r7, #0]
 8017f9c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017f9e:	6838      	ldr	r0, [r7, #0]
 8017fa0:	f003 fbc2 	bl	801b728 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017fa4:	683b      	ldr	r3, [r7, #0]
 8017fa6:	7d1b      	ldrb	r3, [r3, #20]
 8017fa8:	2b01      	cmp	r3, #1
 8017faa:	d020      	beq.n	8017fee <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017fac:	683b      	ldr	r3, [r7, #0]
 8017fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d006      	beq.n	8017fc2 <tcp_pcb_remove+0xca>
 8017fb4:	4b13      	ldr	r3, [pc, #76]	; (8018004 <tcp_pcb_remove+0x10c>)
 8017fb6:	f640 0293 	movw	r2, #2195	; 0x893
 8017fba:	4916      	ldr	r1, [pc, #88]	; (8018014 <tcp_pcb_remove+0x11c>)
 8017fbc:	4813      	ldr	r0, [pc, #76]	; (801800c <tcp_pcb_remove+0x114>)
 8017fbe:	f008 fea5 	bl	8020d0c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017fc2:	683b      	ldr	r3, [r7, #0]
 8017fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d006      	beq.n	8017fd8 <tcp_pcb_remove+0xe0>
 8017fca:	4b0e      	ldr	r3, [pc, #56]	; (8018004 <tcp_pcb_remove+0x10c>)
 8017fcc:	f640 0294 	movw	r2, #2196	; 0x894
 8017fd0:	4911      	ldr	r1, [pc, #68]	; (8018018 <tcp_pcb_remove+0x120>)
 8017fd2:	480e      	ldr	r0, [pc, #56]	; (801800c <tcp_pcb_remove+0x114>)
 8017fd4:	f008 fe9a 	bl	8020d0c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017fd8:	683b      	ldr	r3, [r7, #0]
 8017fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d006      	beq.n	8017fee <tcp_pcb_remove+0xf6>
 8017fe0:	4b08      	ldr	r3, [pc, #32]	; (8018004 <tcp_pcb_remove+0x10c>)
 8017fe2:	f640 0296 	movw	r2, #2198	; 0x896
 8017fe6:	490d      	ldr	r1, [pc, #52]	; (801801c <tcp_pcb_remove+0x124>)
 8017fe8:	4808      	ldr	r0, [pc, #32]	; (801800c <tcp_pcb_remove+0x114>)
 8017fea:	f008 fe8f 	bl	8020d0c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017fee:	683b      	ldr	r3, [r7, #0]
 8017ff0:	2200      	movs	r2, #0
 8017ff2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017ff4:	683b      	ldr	r3, [r7, #0]
 8017ff6:	2200      	movs	r2, #0
 8017ff8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8017ffa:	bf00      	nop
 8017ffc:	3710      	adds	r7, #16
 8017ffe:	46bd      	mov	sp, r7
 8018000:	bd80      	pop	{r7, pc}
 8018002:	bf00      	nop
 8018004:	08027318 	.word	0x08027318
 8018008:	080279ac 	.word	0x080279ac
 801800c:	08027388 	.word	0x08027388
 8018010:	080279c8 	.word	0x080279c8
 8018014:	080279e8 	.word	0x080279e8
 8018018:	08027a00 	.word	0x08027a00
 801801c:	08027a1c 	.word	0x08027a1c

08018020 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b082      	sub	sp, #8
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	2b00      	cmp	r3, #0
 801802c:	d106      	bne.n	801803c <tcp_next_iss+0x1c>
 801802e:	4b0a      	ldr	r3, [pc, #40]	; (8018058 <tcp_next_iss+0x38>)
 8018030:	f640 02af 	movw	r2, #2223	; 0x8af
 8018034:	4909      	ldr	r1, [pc, #36]	; (801805c <tcp_next_iss+0x3c>)
 8018036:	480a      	ldr	r0, [pc, #40]	; (8018060 <tcp_next_iss+0x40>)
 8018038:	f008 fe68 	bl	8020d0c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801803c:	4b09      	ldr	r3, [pc, #36]	; (8018064 <tcp_next_iss+0x44>)
 801803e:	681a      	ldr	r2, [r3, #0]
 8018040:	4b09      	ldr	r3, [pc, #36]	; (8018068 <tcp_next_iss+0x48>)
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	4413      	add	r3, r2
 8018046:	4a07      	ldr	r2, [pc, #28]	; (8018064 <tcp_next_iss+0x44>)
 8018048:	6013      	str	r3, [r2, #0]
  return iss;
 801804a:	4b06      	ldr	r3, [pc, #24]	; (8018064 <tcp_next_iss+0x44>)
 801804c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801804e:	4618      	mov	r0, r3
 8018050:	3708      	adds	r7, #8
 8018052:	46bd      	mov	sp, r7
 8018054:	bd80      	pop	{r7, pc}
 8018056:	bf00      	nop
 8018058:	08027318 	.word	0x08027318
 801805c:	08027a34 	.word	0x08027a34
 8018060:	08027388 	.word	0x08027388
 8018064:	24000428 	.word	0x24000428
 8018068:	2400ae5c 	.word	0x2400ae5c

0801806c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801806c:	b580      	push	{r7, lr}
 801806e:	b086      	sub	sp, #24
 8018070:	af00      	add	r7, sp, #0
 8018072:	4603      	mov	r3, r0
 8018074:	60b9      	str	r1, [r7, #8]
 8018076:	607a      	str	r2, [r7, #4]
 8018078:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	2b00      	cmp	r3, #0
 801807e:	d106      	bne.n	801808e <tcp_eff_send_mss_netif+0x22>
 8018080:	4b14      	ldr	r3, [pc, #80]	; (80180d4 <tcp_eff_send_mss_netif+0x68>)
 8018082:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8018086:	4914      	ldr	r1, [pc, #80]	; (80180d8 <tcp_eff_send_mss_netif+0x6c>)
 8018088:	4814      	ldr	r0, [pc, #80]	; (80180dc <tcp_eff_send_mss_netif+0x70>)
 801808a:	f008 fe3f 	bl	8020d0c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801808e:	68bb      	ldr	r3, [r7, #8]
 8018090:	2b00      	cmp	r3, #0
 8018092:	d101      	bne.n	8018098 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8018094:	89fb      	ldrh	r3, [r7, #14]
 8018096:	e019      	b.n	80180cc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8018098:	68bb      	ldr	r3, [r7, #8]
 801809a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801809c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801809e:	8afb      	ldrh	r3, [r7, #22]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d012      	beq.n	80180ca <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80180a4:	2328      	movs	r3, #40	; 0x28
 80180a6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80180a8:	8afa      	ldrh	r2, [r7, #22]
 80180aa:	8abb      	ldrh	r3, [r7, #20]
 80180ac:	429a      	cmp	r2, r3
 80180ae:	d904      	bls.n	80180ba <tcp_eff_send_mss_netif+0x4e>
 80180b0:	8afa      	ldrh	r2, [r7, #22]
 80180b2:	8abb      	ldrh	r3, [r7, #20]
 80180b4:	1ad3      	subs	r3, r2, r3
 80180b6:	b29b      	uxth	r3, r3
 80180b8:	e000      	b.n	80180bc <tcp_eff_send_mss_netif+0x50>
 80180ba:	2300      	movs	r3, #0
 80180bc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80180be:	8a7a      	ldrh	r2, [r7, #18]
 80180c0:	89fb      	ldrh	r3, [r7, #14]
 80180c2:	4293      	cmp	r3, r2
 80180c4:	bf28      	it	cs
 80180c6:	4613      	movcs	r3, r2
 80180c8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80180ca:	89fb      	ldrh	r3, [r7, #14]
}
 80180cc:	4618      	mov	r0, r3
 80180ce:	3718      	adds	r7, #24
 80180d0:	46bd      	mov	sp, r7
 80180d2:	bd80      	pop	{r7, pc}
 80180d4:	08027318 	.word	0x08027318
 80180d8:	08027a50 	.word	0x08027a50
 80180dc:	08027388 	.word	0x08027388

080180e0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80180e0:	b580      	push	{r7, lr}
 80180e2:	b084      	sub	sp, #16
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
 80180e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80180ea:	683b      	ldr	r3, [r7, #0]
 80180ec:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d119      	bne.n	8018128 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80180f4:	4b10      	ldr	r3, [pc, #64]	; (8018138 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80180f6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80180fa:	4910      	ldr	r1, [pc, #64]	; (801813c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80180fc:	4810      	ldr	r0, [pc, #64]	; (8018140 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80180fe:	f008 fe05 	bl	8020d0c <iprintf>

  while (pcb != NULL) {
 8018102:	e011      	b.n	8018128 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	681a      	ldr	r2, [r3, #0]
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	429a      	cmp	r2, r3
 801810e:	d108      	bne.n	8018122 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	68db      	ldr	r3, [r3, #12]
 8018114:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8018116:	68f8      	ldr	r0, [r7, #12]
 8018118:	f7fe fc26 	bl	8016968 <tcp_abort>
      pcb = next;
 801811c:	68bb      	ldr	r3, [r7, #8]
 801811e:	60fb      	str	r3, [r7, #12]
 8018120:	e002      	b.n	8018128 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	68db      	ldr	r3, [r3, #12]
 8018126:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	2b00      	cmp	r3, #0
 801812c:	d1ea      	bne.n	8018104 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801812e:	bf00      	nop
 8018130:	bf00      	nop
 8018132:	3710      	adds	r7, #16
 8018134:	46bd      	mov	sp, r7
 8018136:	bd80      	pop	{r7, pc}
 8018138:	08027318 	.word	0x08027318
 801813c:	08027a78 	.word	0x08027a78
 8018140:	08027388 	.word	0x08027388

08018144 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018144:	b580      	push	{r7, lr}
 8018146:	b084      	sub	sp, #16
 8018148:	af00      	add	r7, sp, #0
 801814a:	6078      	str	r0, [r7, #4]
 801814c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	2b00      	cmp	r3, #0
 8018152:	d02a      	beq.n	80181aa <tcp_netif_ip_addr_changed+0x66>
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d026      	beq.n	80181aa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801815c:	4b15      	ldr	r3, [pc, #84]	; (80181b4 <tcp_netif_ip_addr_changed+0x70>)
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	4619      	mov	r1, r3
 8018162:	6878      	ldr	r0, [r7, #4]
 8018164:	f7ff ffbc 	bl	80180e0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8018168:	4b13      	ldr	r3, [pc, #76]	; (80181b8 <tcp_netif_ip_addr_changed+0x74>)
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	4619      	mov	r1, r3
 801816e:	6878      	ldr	r0, [r7, #4]
 8018170:	f7ff ffb6 	bl	80180e0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8018174:	683b      	ldr	r3, [r7, #0]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d017      	beq.n	80181aa <tcp_netif_ip_addr_changed+0x66>
 801817a:	683b      	ldr	r3, [r7, #0]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d013      	beq.n	80181aa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018182:	4b0e      	ldr	r3, [pc, #56]	; (80181bc <tcp_netif_ip_addr_changed+0x78>)
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	60fb      	str	r3, [r7, #12]
 8018188:	e00c      	b.n	80181a4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	681a      	ldr	r2, [r3, #0]
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	429a      	cmp	r2, r3
 8018194:	d103      	bne.n	801819e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8018196:	683b      	ldr	r3, [r7, #0]
 8018198:	681a      	ldr	r2, [r3, #0]
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	68db      	ldr	r3, [r3, #12]
 80181a2:	60fb      	str	r3, [r7, #12]
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d1ef      	bne.n	801818a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80181aa:	bf00      	nop
 80181ac:	3710      	adds	r7, #16
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bd80      	pop	{r7, pc}
 80181b2:	bf00      	nop
 80181b4:	2400ae58 	.word	0x2400ae58
 80181b8:	2400ae64 	.word	0x2400ae64
 80181bc:	2400ae60 	.word	0x2400ae60

080181c0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80181c0:	b580      	push	{r7, lr}
 80181c2:	b082      	sub	sp, #8
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d007      	beq.n	80181e0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80181d4:	4618      	mov	r0, r3
 80181d6:	f7ff fb6f 	bl	80178b8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	2200      	movs	r2, #0
 80181de:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80181e0:	bf00      	nop
 80181e2:	3708      	adds	r7, #8
 80181e4:	46bd      	mov	sp, r7
 80181e6:	bd80      	pop	{r7, pc}

080181e8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80181e8:	b590      	push	{r4, r7, lr}
 80181ea:	b08d      	sub	sp, #52	; 0x34
 80181ec:	af04      	add	r7, sp, #16
 80181ee:	6078      	str	r0, [r7, #4]
 80181f0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d105      	bne.n	8018204 <tcp_input+0x1c>
 80181f8:	4b9b      	ldr	r3, [pc, #620]	; (8018468 <tcp_input+0x280>)
 80181fa:	2283      	movs	r2, #131	; 0x83
 80181fc:	499b      	ldr	r1, [pc, #620]	; (801846c <tcp_input+0x284>)
 80181fe:	489c      	ldr	r0, [pc, #624]	; (8018470 <tcp_input+0x288>)
 8018200:	f008 fd84 	bl	8020d0c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	685b      	ldr	r3, [r3, #4]
 8018208:	4a9a      	ldr	r2, [pc, #616]	; (8018474 <tcp_input+0x28c>)
 801820a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	895b      	ldrh	r3, [r3, #10]
 8018210:	2b13      	cmp	r3, #19
 8018212:	f240 83c4 	bls.w	801899e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018216:	4b98      	ldr	r3, [pc, #608]	; (8018478 <tcp_input+0x290>)
 8018218:	695b      	ldr	r3, [r3, #20]
 801821a:	4a97      	ldr	r2, [pc, #604]	; (8018478 <tcp_input+0x290>)
 801821c:	6812      	ldr	r2, [r2, #0]
 801821e:	4611      	mov	r1, r2
 8018220:	4618      	mov	r0, r3
 8018222:	f7fb fbd1 	bl	80139c8 <ip4_addr_isbroadcast_u32>
 8018226:	4603      	mov	r3, r0
 8018228:	2b00      	cmp	r3, #0
 801822a:	f040 83ba 	bne.w	80189a2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801822e:	4b92      	ldr	r3, [pc, #584]	; (8018478 <tcp_input+0x290>)
 8018230:	695b      	ldr	r3, [r3, #20]
 8018232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018236:	2be0      	cmp	r3, #224	; 0xe0
 8018238:	f000 83b3 	beq.w	80189a2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801823c:	4b8d      	ldr	r3, [pc, #564]	; (8018474 <tcp_input+0x28c>)
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	899b      	ldrh	r3, [r3, #12]
 8018242:	b29b      	uxth	r3, r3
 8018244:	4618      	mov	r0, r3
 8018246:	f7f9 fe53 	bl	8011ef0 <lwip_htons>
 801824a:	4603      	mov	r3, r0
 801824c:	0b1b      	lsrs	r3, r3, #12
 801824e:	b29b      	uxth	r3, r3
 8018250:	b2db      	uxtb	r3, r3
 8018252:	009b      	lsls	r3, r3, #2
 8018254:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8018256:	7cbb      	ldrb	r3, [r7, #18]
 8018258:	2b13      	cmp	r3, #19
 801825a:	f240 83a4 	bls.w	80189a6 <tcp_input+0x7be>
 801825e:	7cbb      	ldrb	r3, [r7, #18]
 8018260:	b29a      	uxth	r2, r3
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	891b      	ldrh	r3, [r3, #8]
 8018266:	429a      	cmp	r2, r3
 8018268:	f200 839d 	bhi.w	80189a6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801826c:	7cbb      	ldrb	r3, [r7, #18]
 801826e:	b29b      	uxth	r3, r3
 8018270:	3b14      	subs	r3, #20
 8018272:	b29a      	uxth	r2, r3
 8018274:	4b81      	ldr	r3, [pc, #516]	; (801847c <tcp_input+0x294>)
 8018276:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8018278:	4b81      	ldr	r3, [pc, #516]	; (8018480 <tcp_input+0x298>)
 801827a:	2200      	movs	r2, #0
 801827c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	895a      	ldrh	r2, [r3, #10]
 8018282:	7cbb      	ldrb	r3, [r7, #18]
 8018284:	b29b      	uxth	r3, r3
 8018286:	429a      	cmp	r2, r3
 8018288:	d309      	bcc.n	801829e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801828a:	4b7c      	ldr	r3, [pc, #496]	; (801847c <tcp_input+0x294>)
 801828c:	881a      	ldrh	r2, [r3, #0]
 801828e:	4b7d      	ldr	r3, [pc, #500]	; (8018484 <tcp_input+0x29c>)
 8018290:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8018292:	7cbb      	ldrb	r3, [r7, #18]
 8018294:	4619      	mov	r1, r3
 8018296:	6878      	ldr	r0, [r7, #4]
 8018298:	f7fd fca0 	bl	8015bdc <pbuf_remove_header>
 801829c:	e04e      	b.n	801833c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d105      	bne.n	80182b2 <tcp_input+0xca>
 80182a6:	4b70      	ldr	r3, [pc, #448]	; (8018468 <tcp_input+0x280>)
 80182a8:	22c2      	movs	r2, #194	; 0xc2
 80182aa:	4977      	ldr	r1, [pc, #476]	; (8018488 <tcp_input+0x2a0>)
 80182ac:	4870      	ldr	r0, [pc, #448]	; (8018470 <tcp_input+0x288>)
 80182ae:	f008 fd2d 	bl	8020d0c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80182b2:	2114      	movs	r1, #20
 80182b4:	6878      	ldr	r0, [r7, #4]
 80182b6:	f7fd fc91 	bl	8015bdc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	895a      	ldrh	r2, [r3, #10]
 80182be:	4b71      	ldr	r3, [pc, #452]	; (8018484 <tcp_input+0x29c>)
 80182c0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80182c2:	4b6e      	ldr	r3, [pc, #440]	; (801847c <tcp_input+0x294>)
 80182c4:	881a      	ldrh	r2, [r3, #0]
 80182c6:	4b6f      	ldr	r3, [pc, #444]	; (8018484 <tcp_input+0x29c>)
 80182c8:	881b      	ldrh	r3, [r3, #0]
 80182ca:	1ad3      	subs	r3, r2, r3
 80182cc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80182ce:	4b6d      	ldr	r3, [pc, #436]	; (8018484 <tcp_input+0x29c>)
 80182d0:	881b      	ldrh	r3, [r3, #0]
 80182d2:	4619      	mov	r1, r3
 80182d4:	6878      	ldr	r0, [r7, #4]
 80182d6:	f7fd fc81 	bl	8015bdc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	895b      	ldrh	r3, [r3, #10]
 80182e0:	8a3a      	ldrh	r2, [r7, #16]
 80182e2:	429a      	cmp	r2, r3
 80182e4:	f200 8361 	bhi.w	80189aa <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	685b      	ldr	r3, [r3, #4]
 80182ee:	4a64      	ldr	r2, [pc, #400]	; (8018480 <tcp_input+0x298>)
 80182f0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	8a3a      	ldrh	r2, [r7, #16]
 80182f8:	4611      	mov	r1, r2
 80182fa:	4618      	mov	r0, r3
 80182fc:	f7fd fc6e 	bl	8015bdc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	891a      	ldrh	r2, [r3, #8]
 8018304:	8a3b      	ldrh	r3, [r7, #16]
 8018306:	1ad3      	subs	r3, r2, r3
 8018308:	b29a      	uxth	r2, r3
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	895b      	ldrh	r3, [r3, #10]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d005      	beq.n	8018322 <tcp_input+0x13a>
 8018316:	4b54      	ldr	r3, [pc, #336]	; (8018468 <tcp_input+0x280>)
 8018318:	22df      	movs	r2, #223	; 0xdf
 801831a:	495c      	ldr	r1, [pc, #368]	; (801848c <tcp_input+0x2a4>)
 801831c:	4854      	ldr	r0, [pc, #336]	; (8018470 <tcp_input+0x288>)
 801831e:	f008 fcf5 	bl	8020d0c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	891a      	ldrh	r2, [r3, #8]
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	891b      	ldrh	r3, [r3, #8]
 801832c:	429a      	cmp	r2, r3
 801832e:	d005      	beq.n	801833c <tcp_input+0x154>
 8018330:	4b4d      	ldr	r3, [pc, #308]	; (8018468 <tcp_input+0x280>)
 8018332:	22e0      	movs	r2, #224	; 0xe0
 8018334:	4956      	ldr	r1, [pc, #344]	; (8018490 <tcp_input+0x2a8>)
 8018336:	484e      	ldr	r0, [pc, #312]	; (8018470 <tcp_input+0x288>)
 8018338:	f008 fce8 	bl	8020d0c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801833c:	4b4d      	ldr	r3, [pc, #308]	; (8018474 <tcp_input+0x28c>)
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	881b      	ldrh	r3, [r3, #0]
 8018342:	b29b      	uxth	r3, r3
 8018344:	4a4b      	ldr	r2, [pc, #300]	; (8018474 <tcp_input+0x28c>)
 8018346:	6814      	ldr	r4, [r2, #0]
 8018348:	4618      	mov	r0, r3
 801834a:	f7f9 fdd1 	bl	8011ef0 <lwip_htons>
 801834e:	4603      	mov	r3, r0
 8018350:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8018352:	4b48      	ldr	r3, [pc, #288]	; (8018474 <tcp_input+0x28c>)
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	885b      	ldrh	r3, [r3, #2]
 8018358:	b29b      	uxth	r3, r3
 801835a:	4a46      	ldr	r2, [pc, #280]	; (8018474 <tcp_input+0x28c>)
 801835c:	6814      	ldr	r4, [r2, #0]
 801835e:	4618      	mov	r0, r3
 8018360:	f7f9 fdc6 	bl	8011ef0 <lwip_htons>
 8018364:	4603      	mov	r3, r0
 8018366:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8018368:	4b42      	ldr	r3, [pc, #264]	; (8018474 <tcp_input+0x28c>)
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	685b      	ldr	r3, [r3, #4]
 801836e:	4a41      	ldr	r2, [pc, #260]	; (8018474 <tcp_input+0x28c>)
 8018370:	6814      	ldr	r4, [r2, #0]
 8018372:	4618      	mov	r0, r3
 8018374:	f7f9 fdd1 	bl	8011f1a <lwip_htonl>
 8018378:	4603      	mov	r3, r0
 801837a:	6063      	str	r3, [r4, #4]
 801837c:	6863      	ldr	r3, [r4, #4]
 801837e:	4a45      	ldr	r2, [pc, #276]	; (8018494 <tcp_input+0x2ac>)
 8018380:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018382:	4b3c      	ldr	r3, [pc, #240]	; (8018474 <tcp_input+0x28c>)
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	689b      	ldr	r3, [r3, #8]
 8018388:	4a3a      	ldr	r2, [pc, #232]	; (8018474 <tcp_input+0x28c>)
 801838a:	6814      	ldr	r4, [r2, #0]
 801838c:	4618      	mov	r0, r3
 801838e:	f7f9 fdc4 	bl	8011f1a <lwip_htonl>
 8018392:	4603      	mov	r3, r0
 8018394:	60a3      	str	r3, [r4, #8]
 8018396:	68a3      	ldr	r3, [r4, #8]
 8018398:	4a3f      	ldr	r2, [pc, #252]	; (8018498 <tcp_input+0x2b0>)
 801839a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801839c:	4b35      	ldr	r3, [pc, #212]	; (8018474 <tcp_input+0x28c>)
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	89db      	ldrh	r3, [r3, #14]
 80183a2:	b29b      	uxth	r3, r3
 80183a4:	4a33      	ldr	r2, [pc, #204]	; (8018474 <tcp_input+0x28c>)
 80183a6:	6814      	ldr	r4, [r2, #0]
 80183a8:	4618      	mov	r0, r3
 80183aa:	f7f9 fda1 	bl	8011ef0 <lwip_htons>
 80183ae:	4603      	mov	r3, r0
 80183b0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80183b2:	4b30      	ldr	r3, [pc, #192]	; (8018474 <tcp_input+0x28c>)
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	899b      	ldrh	r3, [r3, #12]
 80183b8:	b29b      	uxth	r3, r3
 80183ba:	4618      	mov	r0, r3
 80183bc:	f7f9 fd98 	bl	8011ef0 <lwip_htons>
 80183c0:	4603      	mov	r3, r0
 80183c2:	b2db      	uxtb	r3, r3
 80183c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80183c8:	b2da      	uxtb	r2, r3
 80183ca:	4b34      	ldr	r3, [pc, #208]	; (801849c <tcp_input+0x2b4>)
 80183cc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	891a      	ldrh	r2, [r3, #8]
 80183d2:	4b33      	ldr	r3, [pc, #204]	; (80184a0 <tcp_input+0x2b8>)
 80183d4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80183d6:	4b31      	ldr	r3, [pc, #196]	; (801849c <tcp_input+0x2b4>)
 80183d8:	781b      	ldrb	r3, [r3, #0]
 80183da:	f003 0303 	and.w	r3, r3, #3
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d00c      	beq.n	80183fc <tcp_input+0x214>
    tcplen++;
 80183e2:	4b2f      	ldr	r3, [pc, #188]	; (80184a0 <tcp_input+0x2b8>)
 80183e4:	881b      	ldrh	r3, [r3, #0]
 80183e6:	3301      	adds	r3, #1
 80183e8:	b29a      	uxth	r2, r3
 80183ea:	4b2d      	ldr	r3, [pc, #180]	; (80184a0 <tcp_input+0x2b8>)
 80183ec:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	891a      	ldrh	r2, [r3, #8]
 80183f2:	4b2b      	ldr	r3, [pc, #172]	; (80184a0 <tcp_input+0x2b8>)
 80183f4:	881b      	ldrh	r3, [r3, #0]
 80183f6:	429a      	cmp	r2, r3
 80183f8:	f200 82d9 	bhi.w	80189ae <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80183fc:	2300      	movs	r3, #0
 80183fe:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018400:	4b28      	ldr	r3, [pc, #160]	; (80184a4 <tcp_input+0x2bc>)
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	61fb      	str	r3, [r7, #28]
 8018406:	e09d      	b.n	8018544 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8018408:	69fb      	ldr	r3, [r7, #28]
 801840a:	7d1b      	ldrb	r3, [r3, #20]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d105      	bne.n	801841c <tcp_input+0x234>
 8018410:	4b15      	ldr	r3, [pc, #84]	; (8018468 <tcp_input+0x280>)
 8018412:	22fb      	movs	r2, #251	; 0xfb
 8018414:	4924      	ldr	r1, [pc, #144]	; (80184a8 <tcp_input+0x2c0>)
 8018416:	4816      	ldr	r0, [pc, #88]	; (8018470 <tcp_input+0x288>)
 8018418:	f008 fc78 	bl	8020d0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801841c:	69fb      	ldr	r3, [r7, #28]
 801841e:	7d1b      	ldrb	r3, [r3, #20]
 8018420:	2b0a      	cmp	r3, #10
 8018422:	d105      	bne.n	8018430 <tcp_input+0x248>
 8018424:	4b10      	ldr	r3, [pc, #64]	; (8018468 <tcp_input+0x280>)
 8018426:	22fc      	movs	r2, #252	; 0xfc
 8018428:	4920      	ldr	r1, [pc, #128]	; (80184ac <tcp_input+0x2c4>)
 801842a:	4811      	ldr	r0, [pc, #68]	; (8018470 <tcp_input+0x288>)
 801842c:	f008 fc6e 	bl	8020d0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018430:	69fb      	ldr	r3, [r7, #28]
 8018432:	7d1b      	ldrb	r3, [r3, #20]
 8018434:	2b01      	cmp	r3, #1
 8018436:	d105      	bne.n	8018444 <tcp_input+0x25c>
 8018438:	4b0b      	ldr	r3, [pc, #44]	; (8018468 <tcp_input+0x280>)
 801843a:	22fd      	movs	r2, #253	; 0xfd
 801843c:	491c      	ldr	r1, [pc, #112]	; (80184b0 <tcp_input+0x2c8>)
 801843e:	480c      	ldr	r0, [pc, #48]	; (8018470 <tcp_input+0x288>)
 8018440:	f008 fc64 	bl	8020d0c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018444:	69fb      	ldr	r3, [r7, #28]
 8018446:	7a1b      	ldrb	r3, [r3, #8]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d033      	beq.n	80184b4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801844c:	69fb      	ldr	r3, [r7, #28]
 801844e:	7a1a      	ldrb	r2, [r3, #8]
 8018450:	4b09      	ldr	r3, [pc, #36]	; (8018478 <tcp_input+0x290>)
 8018452:	685b      	ldr	r3, [r3, #4]
 8018454:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018458:	3301      	adds	r3, #1
 801845a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801845c:	429a      	cmp	r2, r3
 801845e:	d029      	beq.n	80184b4 <tcp_input+0x2cc>
      prev = pcb;
 8018460:	69fb      	ldr	r3, [r7, #28]
 8018462:	61bb      	str	r3, [r7, #24]
      continue;
 8018464:	e06b      	b.n	801853e <tcp_input+0x356>
 8018466:	bf00      	nop
 8018468:	08027aac 	.word	0x08027aac
 801846c:	08027b0c 	.word	0x08027b0c
 8018470:	08027b24 	.word	0x08027b24
 8018474:	240077d8 	.word	0x240077d8
 8018478:	24007f68 	.word	0x24007f68
 801847c:	240077dc 	.word	0x240077dc
 8018480:	240077e0 	.word	0x240077e0
 8018484:	240077de 	.word	0x240077de
 8018488:	08027b4c 	.word	0x08027b4c
 801848c:	08027b5c 	.word	0x08027b5c
 8018490:	08027b68 	.word	0x08027b68
 8018494:	240077e8 	.word	0x240077e8
 8018498:	240077ec 	.word	0x240077ec
 801849c:	240077f4 	.word	0x240077f4
 80184a0:	240077f2 	.word	0x240077f2
 80184a4:	2400ae58 	.word	0x2400ae58
 80184a8:	08027b88 	.word	0x08027b88
 80184ac:	08027bb0 	.word	0x08027bb0
 80184b0:	08027bdc 	.word	0x08027bdc
    }

    if (pcb->remote_port == tcphdr->src &&
 80184b4:	69fb      	ldr	r3, [r7, #28]
 80184b6:	8b1a      	ldrh	r2, [r3, #24]
 80184b8:	4b94      	ldr	r3, [pc, #592]	; (801870c <tcp_input+0x524>)
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	881b      	ldrh	r3, [r3, #0]
 80184be:	b29b      	uxth	r3, r3
 80184c0:	429a      	cmp	r2, r3
 80184c2:	d13a      	bne.n	801853a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80184c4:	69fb      	ldr	r3, [r7, #28]
 80184c6:	8ada      	ldrh	r2, [r3, #22]
 80184c8:	4b90      	ldr	r3, [pc, #576]	; (801870c <tcp_input+0x524>)
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	885b      	ldrh	r3, [r3, #2]
 80184ce:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80184d0:	429a      	cmp	r2, r3
 80184d2:	d132      	bne.n	801853a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80184d4:	69fb      	ldr	r3, [r7, #28]
 80184d6:	685a      	ldr	r2, [r3, #4]
 80184d8:	4b8d      	ldr	r3, [pc, #564]	; (8018710 <tcp_input+0x528>)
 80184da:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80184dc:	429a      	cmp	r2, r3
 80184de:	d12c      	bne.n	801853a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80184e0:	69fb      	ldr	r3, [r7, #28]
 80184e2:	681a      	ldr	r2, [r3, #0]
 80184e4:	4b8a      	ldr	r3, [pc, #552]	; (8018710 <tcp_input+0x528>)
 80184e6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80184e8:	429a      	cmp	r2, r3
 80184ea:	d126      	bne.n	801853a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80184ec:	69fb      	ldr	r3, [r7, #28]
 80184ee:	68db      	ldr	r3, [r3, #12]
 80184f0:	69fa      	ldr	r2, [r7, #28]
 80184f2:	429a      	cmp	r2, r3
 80184f4:	d106      	bne.n	8018504 <tcp_input+0x31c>
 80184f6:	4b87      	ldr	r3, [pc, #540]	; (8018714 <tcp_input+0x52c>)
 80184f8:	f240 120d 	movw	r2, #269	; 0x10d
 80184fc:	4986      	ldr	r1, [pc, #536]	; (8018718 <tcp_input+0x530>)
 80184fe:	4887      	ldr	r0, [pc, #540]	; (801871c <tcp_input+0x534>)
 8018500:	f008 fc04 	bl	8020d0c <iprintf>
      if (prev != NULL) {
 8018504:	69bb      	ldr	r3, [r7, #24]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d00a      	beq.n	8018520 <tcp_input+0x338>
        prev->next = pcb->next;
 801850a:	69fb      	ldr	r3, [r7, #28]
 801850c:	68da      	ldr	r2, [r3, #12]
 801850e:	69bb      	ldr	r3, [r7, #24]
 8018510:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8018512:	4b83      	ldr	r3, [pc, #524]	; (8018720 <tcp_input+0x538>)
 8018514:	681a      	ldr	r2, [r3, #0]
 8018516:	69fb      	ldr	r3, [r7, #28]
 8018518:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801851a:	4a81      	ldr	r2, [pc, #516]	; (8018720 <tcp_input+0x538>)
 801851c:	69fb      	ldr	r3, [r7, #28]
 801851e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018520:	69fb      	ldr	r3, [r7, #28]
 8018522:	68db      	ldr	r3, [r3, #12]
 8018524:	69fa      	ldr	r2, [r7, #28]
 8018526:	429a      	cmp	r2, r3
 8018528:	d111      	bne.n	801854e <tcp_input+0x366>
 801852a:	4b7a      	ldr	r3, [pc, #488]	; (8018714 <tcp_input+0x52c>)
 801852c:	f240 1215 	movw	r2, #277	; 0x115
 8018530:	497c      	ldr	r1, [pc, #496]	; (8018724 <tcp_input+0x53c>)
 8018532:	487a      	ldr	r0, [pc, #488]	; (801871c <tcp_input+0x534>)
 8018534:	f008 fbea 	bl	8020d0c <iprintf>
      break;
 8018538:	e009      	b.n	801854e <tcp_input+0x366>
    }
    prev = pcb;
 801853a:	69fb      	ldr	r3, [r7, #28]
 801853c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801853e:	69fb      	ldr	r3, [r7, #28]
 8018540:	68db      	ldr	r3, [r3, #12]
 8018542:	61fb      	str	r3, [r7, #28]
 8018544:	69fb      	ldr	r3, [r7, #28]
 8018546:	2b00      	cmp	r3, #0
 8018548:	f47f af5e 	bne.w	8018408 <tcp_input+0x220>
 801854c:	e000      	b.n	8018550 <tcp_input+0x368>
      break;
 801854e:	bf00      	nop
  }

  if (pcb == NULL) {
 8018550:	69fb      	ldr	r3, [r7, #28]
 8018552:	2b00      	cmp	r3, #0
 8018554:	f040 8095 	bne.w	8018682 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018558:	4b73      	ldr	r3, [pc, #460]	; (8018728 <tcp_input+0x540>)
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	61fb      	str	r3, [r7, #28]
 801855e:	e03f      	b.n	80185e0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018560:	69fb      	ldr	r3, [r7, #28]
 8018562:	7d1b      	ldrb	r3, [r3, #20]
 8018564:	2b0a      	cmp	r3, #10
 8018566:	d006      	beq.n	8018576 <tcp_input+0x38e>
 8018568:	4b6a      	ldr	r3, [pc, #424]	; (8018714 <tcp_input+0x52c>)
 801856a:	f240 121f 	movw	r2, #287	; 0x11f
 801856e:	496f      	ldr	r1, [pc, #444]	; (801872c <tcp_input+0x544>)
 8018570:	486a      	ldr	r0, [pc, #424]	; (801871c <tcp_input+0x534>)
 8018572:	f008 fbcb 	bl	8020d0c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018576:	69fb      	ldr	r3, [r7, #28]
 8018578:	7a1b      	ldrb	r3, [r3, #8]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d009      	beq.n	8018592 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801857e:	69fb      	ldr	r3, [r7, #28]
 8018580:	7a1a      	ldrb	r2, [r3, #8]
 8018582:	4b63      	ldr	r3, [pc, #396]	; (8018710 <tcp_input+0x528>)
 8018584:	685b      	ldr	r3, [r3, #4]
 8018586:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801858a:	3301      	adds	r3, #1
 801858c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801858e:	429a      	cmp	r2, r3
 8018590:	d122      	bne.n	80185d8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8018592:	69fb      	ldr	r3, [r7, #28]
 8018594:	8b1a      	ldrh	r2, [r3, #24]
 8018596:	4b5d      	ldr	r3, [pc, #372]	; (801870c <tcp_input+0x524>)
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	881b      	ldrh	r3, [r3, #0]
 801859c:	b29b      	uxth	r3, r3
 801859e:	429a      	cmp	r2, r3
 80185a0:	d11b      	bne.n	80185da <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80185a2:	69fb      	ldr	r3, [r7, #28]
 80185a4:	8ada      	ldrh	r2, [r3, #22]
 80185a6:	4b59      	ldr	r3, [pc, #356]	; (801870c <tcp_input+0x524>)
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	885b      	ldrh	r3, [r3, #2]
 80185ac:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80185ae:	429a      	cmp	r2, r3
 80185b0:	d113      	bne.n	80185da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80185b2:	69fb      	ldr	r3, [r7, #28]
 80185b4:	685a      	ldr	r2, [r3, #4]
 80185b6:	4b56      	ldr	r3, [pc, #344]	; (8018710 <tcp_input+0x528>)
 80185b8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80185ba:	429a      	cmp	r2, r3
 80185bc:	d10d      	bne.n	80185da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80185be:	69fb      	ldr	r3, [r7, #28]
 80185c0:	681a      	ldr	r2, [r3, #0]
 80185c2:	4b53      	ldr	r3, [pc, #332]	; (8018710 <tcp_input+0x528>)
 80185c4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80185c6:	429a      	cmp	r2, r3
 80185c8:	d107      	bne.n	80185da <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80185ca:	69f8      	ldr	r0, [r7, #28]
 80185cc:	f000 fb54 	bl	8018c78 <tcp_timewait_input>
        }
        pbuf_free(p);
 80185d0:	6878      	ldr	r0, [r7, #4]
 80185d2:	f7fd fb89 	bl	8015ce8 <pbuf_free>
        return;
 80185d6:	e1f0      	b.n	80189ba <tcp_input+0x7d2>
        continue;
 80185d8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80185da:	69fb      	ldr	r3, [r7, #28]
 80185dc:	68db      	ldr	r3, [r3, #12]
 80185de:	61fb      	str	r3, [r7, #28]
 80185e0:	69fb      	ldr	r3, [r7, #28]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d1bc      	bne.n	8018560 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80185e6:	2300      	movs	r3, #0
 80185e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80185ea:	4b51      	ldr	r3, [pc, #324]	; (8018730 <tcp_input+0x548>)
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	617b      	str	r3, [r7, #20]
 80185f0:	e02a      	b.n	8018648 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80185f2:	697b      	ldr	r3, [r7, #20]
 80185f4:	7a1b      	ldrb	r3, [r3, #8]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d00c      	beq.n	8018614 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80185fa:	697b      	ldr	r3, [r7, #20]
 80185fc:	7a1a      	ldrb	r2, [r3, #8]
 80185fe:	4b44      	ldr	r3, [pc, #272]	; (8018710 <tcp_input+0x528>)
 8018600:	685b      	ldr	r3, [r3, #4]
 8018602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018606:	3301      	adds	r3, #1
 8018608:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801860a:	429a      	cmp	r2, r3
 801860c:	d002      	beq.n	8018614 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801860e:	697b      	ldr	r3, [r7, #20]
 8018610:	61bb      	str	r3, [r7, #24]
        continue;
 8018612:	e016      	b.n	8018642 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8018614:	697b      	ldr	r3, [r7, #20]
 8018616:	8ada      	ldrh	r2, [r3, #22]
 8018618:	4b3c      	ldr	r3, [pc, #240]	; (801870c <tcp_input+0x524>)
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	885b      	ldrh	r3, [r3, #2]
 801861e:	b29b      	uxth	r3, r3
 8018620:	429a      	cmp	r2, r3
 8018622:	d10c      	bne.n	801863e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8018624:	697b      	ldr	r3, [r7, #20]
 8018626:	681a      	ldr	r2, [r3, #0]
 8018628:	4b39      	ldr	r3, [pc, #228]	; (8018710 <tcp_input+0x528>)
 801862a:	695b      	ldr	r3, [r3, #20]
 801862c:	429a      	cmp	r2, r3
 801862e:	d00f      	beq.n	8018650 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018630:	697b      	ldr	r3, [r7, #20]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d00d      	beq.n	8018652 <tcp_input+0x46a>
 8018636:	697b      	ldr	r3, [r7, #20]
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	2b00      	cmp	r3, #0
 801863c:	d009      	beq.n	8018652 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801863e:	697b      	ldr	r3, [r7, #20]
 8018640:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018642:	697b      	ldr	r3, [r7, #20]
 8018644:	68db      	ldr	r3, [r3, #12]
 8018646:	617b      	str	r3, [r7, #20]
 8018648:	697b      	ldr	r3, [r7, #20]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d1d1      	bne.n	80185f2 <tcp_input+0x40a>
 801864e:	e000      	b.n	8018652 <tcp_input+0x46a>
            break;
 8018650:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018652:	697b      	ldr	r3, [r7, #20]
 8018654:	2b00      	cmp	r3, #0
 8018656:	d014      	beq.n	8018682 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8018658:	69bb      	ldr	r3, [r7, #24]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d00a      	beq.n	8018674 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801865e:	697b      	ldr	r3, [r7, #20]
 8018660:	68da      	ldr	r2, [r3, #12]
 8018662:	69bb      	ldr	r3, [r7, #24]
 8018664:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8018666:	4b32      	ldr	r3, [pc, #200]	; (8018730 <tcp_input+0x548>)
 8018668:	681a      	ldr	r2, [r3, #0]
 801866a:	697b      	ldr	r3, [r7, #20]
 801866c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801866e:	4a30      	ldr	r2, [pc, #192]	; (8018730 <tcp_input+0x548>)
 8018670:	697b      	ldr	r3, [r7, #20]
 8018672:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8018674:	6978      	ldr	r0, [r7, #20]
 8018676:	f000 fa01 	bl	8018a7c <tcp_listen_input>
      }
      pbuf_free(p);
 801867a:	6878      	ldr	r0, [r7, #4]
 801867c:	f7fd fb34 	bl	8015ce8 <pbuf_free>
      return;
 8018680:	e19b      	b.n	80189ba <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8018682:	69fb      	ldr	r3, [r7, #28]
 8018684:	2b00      	cmp	r3, #0
 8018686:	f000 8160 	beq.w	801894a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801868a:	4b2a      	ldr	r3, [pc, #168]	; (8018734 <tcp_input+0x54c>)
 801868c:	2200      	movs	r2, #0
 801868e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	891a      	ldrh	r2, [r3, #8]
 8018694:	4b27      	ldr	r3, [pc, #156]	; (8018734 <tcp_input+0x54c>)
 8018696:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8018698:	4a26      	ldr	r2, [pc, #152]	; (8018734 <tcp_input+0x54c>)
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801869e:	4b1b      	ldr	r3, [pc, #108]	; (801870c <tcp_input+0x524>)
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	4a24      	ldr	r2, [pc, #144]	; (8018734 <tcp_input+0x54c>)
 80186a4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80186a6:	4b24      	ldr	r3, [pc, #144]	; (8018738 <tcp_input+0x550>)
 80186a8:	2200      	movs	r2, #0
 80186aa:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80186ac:	4b23      	ldr	r3, [pc, #140]	; (801873c <tcp_input+0x554>)
 80186ae:	2200      	movs	r2, #0
 80186b0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80186b2:	4b23      	ldr	r3, [pc, #140]	; (8018740 <tcp_input+0x558>)
 80186b4:	2200      	movs	r2, #0
 80186b6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80186b8:	4b22      	ldr	r3, [pc, #136]	; (8018744 <tcp_input+0x55c>)
 80186ba:	781b      	ldrb	r3, [r3, #0]
 80186bc:	f003 0308 	and.w	r3, r3, #8
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d006      	beq.n	80186d2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	7b5b      	ldrb	r3, [r3, #13]
 80186c8:	f043 0301 	orr.w	r3, r3, #1
 80186cc:	b2da      	uxtb	r2, r3
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80186d2:	69fb      	ldr	r3, [r7, #28]
 80186d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d038      	beq.n	801874c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80186da:	69f8      	ldr	r0, [r7, #28]
 80186dc:	f7ff f870 	bl	80177c0 <tcp_process_refused_data>
 80186e0:	4603      	mov	r3, r0
 80186e2:	f113 0f0d 	cmn.w	r3, #13
 80186e6:	d007      	beq.n	80186f8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80186e8:	69fb      	ldr	r3, [r7, #28]
 80186ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d02d      	beq.n	801874c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80186f0:	4b15      	ldr	r3, [pc, #84]	; (8018748 <tcp_input+0x560>)
 80186f2:	881b      	ldrh	r3, [r3, #0]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d029      	beq.n	801874c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80186f8:	69fb      	ldr	r3, [r7, #28]
 80186fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	f040 8104 	bne.w	801890a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8018702:	69f8      	ldr	r0, [r7, #28]
 8018704:	f003 fe16 	bl	801c334 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8018708:	e0ff      	b.n	801890a <tcp_input+0x722>
 801870a:	bf00      	nop
 801870c:	240077d8 	.word	0x240077d8
 8018710:	24007f68 	.word	0x24007f68
 8018714:	08027aac 	.word	0x08027aac
 8018718:	08027c04 	.word	0x08027c04
 801871c:	08027b24 	.word	0x08027b24
 8018720:	2400ae58 	.word	0x2400ae58
 8018724:	08027c30 	.word	0x08027c30
 8018728:	2400ae68 	.word	0x2400ae68
 801872c:	08027c5c 	.word	0x08027c5c
 8018730:	2400ae60 	.word	0x2400ae60
 8018734:	240077c8 	.word	0x240077c8
 8018738:	240077f8 	.word	0x240077f8
 801873c:	240077f5 	.word	0x240077f5
 8018740:	240077f0 	.word	0x240077f0
 8018744:	240077f4 	.word	0x240077f4
 8018748:	240077f2 	.word	0x240077f2
      }
    }
    tcp_input_pcb = pcb;
 801874c:	4a9c      	ldr	r2, [pc, #624]	; (80189c0 <tcp_input+0x7d8>)
 801874e:	69fb      	ldr	r3, [r7, #28]
 8018750:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8018752:	69f8      	ldr	r0, [r7, #28]
 8018754:	f000 fb0a 	bl	8018d6c <tcp_process>
 8018758:	4603      	mov	r3, r0
 801875a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801875c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018760:	f113 0f0d 	cmn.w	r3, #13
 8018764:	f000 80d3 	beq.w	801890e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8018768:	4b96      	ldr	r3, [pc, #600]	; (80189c4 <tcp_input+0x7dc>)
 801876a:	781b      	ldrb	r3, [r3, #0]
 801876c:	f003 0308 	and.w	r3, r3, #8
 8018770:	2b00      	cmp	r3, #0
 8018772:	d015      	beq.n	80187a0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8018774:	69fb      	ldr	r3, [r7, #28]
 8018776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801877a:	2b00      	cmp	r3, #0
 801877c:	d008      	beq.n	8018790 <tcp_input+0x5a8>
 801877e:	69fb      	ldr	r3, [r7, #28]
 8018780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018784:	69fa      	ldr	r2, [r7, #28]
 8018786:	6912      	ldr	r2, [r2, #16]
 8018788:	f06f 010d 	mvn.w	r1, #13
 801878c:	4610      	mov	r0, r2
 801878e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018790:	69f9      	ldr	r1, [r7, #28]
 8018792:	488d      	ldr	r0, [pc, #564]	; (80189c8 <tcp_input+0x7e0>)
 8018794:	f7ff fbb0 	bl	8017ef8 <tcp_pcb_remove>
        tcp_free(pcb);
 8018798:	69f8      	ldr	r0, [r7, #28]
 801879a:	f7fd fdfd 	bl	8016398 <tcp_free>
 801879e:	e0c1      	b.n	8018924 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80187a0:	2300      	movs	r3, #0
 80187a2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80187a4:	4b89      	ldr	r3, [pc, #548]	; (80189cc <tcp_input+0x7e4>)
 80187a6:	881b      	ldrh	r3, [r3, #0]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d01d      	beq.n	80187e8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80187ac:	4b87      	ldr	r3, [pc, #540]	; (80189cc <tcp_input+0x7e4>)
 80187ae:	881b      	ldrh	r3, [r3, #0]
 80187b0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80187b2:	69fb      	ldr	r3, [r7, #28]
 80187b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d00a      	beq.n	80187d2 <tcp_input+0x5ea>
 80187bc:	69fb      	ldr	r3, [r7, #28]
 80187be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80187c2:	69fa      	ldr	r2, [r7, #28]
 80187c4:	6910      	ldr	r0, [r2, #16]
 80187c6:	89fa      	ldrh	r2, [r7, #14]
 80187c8:	69f9      	ldr	r1, [r7, #28]
 80187ca:	4798      	blx	r3
 80187cc:	4603      	mov	r3, r0
 80187ce:	74fb      	strb	r3, [r7, #19]
 80187d0:	e001      	b.n	80187d6 <tcp_input+0x5ee>
 80187d2:	2300      	movs	r3, #0
 80187d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80187d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80187da:	f113 0f0d 	cmn.w	r3, #13
 80187de:	f000 8098 	beq.w	8018912 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80187e2:	4b7a      	ldr	r3, [pc, #488]	; (80189cc <tcp_input+0x7e4>)
 80187e4:	2200      	movs	r2, #0
 80187e6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80187e8:	69f8      	ldr	r0, [r7, #28]
 80187ea:	f000 f907 	bl	80189fc <tcp_input_delayed_close>
 80187ee:	4603      	mov	r3, r0
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	f040 8090 	bne.w	8018916 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80187f6:	4b76      	ldr	r3, [pc, #472]	; (80189d0 <tcp_input+0x7e8>)
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d041      	beq.n	8018882 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80187fe:	69fb      	ldr	r3, [r7, #28]
 8018800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018802:	2b00      	cmp	r3, #0
 8018804:	d006      	beq.n	8018814 <tcp_input+0x62c>
 8018806:	4b73      	ldr	r3, [pc, #460]	; (80189d4 <tcp_input+0x7ec>)
 8018808:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801880c:	4972      	ldr	r1, [pc, #456]	; (80189d8 <tcp_input+0x7f0>)
 801880e:	4873      	ldr	r0, [pc, #460]	; (80189dc <tcp_input+0x7f4>)
 8018810:	f008 fa7c 	bl	8020d0c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8018814:	69fb      	ldr	r3, [r7, #28]
 8018816:	8b5b      	ldrh	r3, [r3, #26]
 8018818:	f003 0310 	and.w	r3, r3, #16
 801881c:	2b00      	cmp	r3, #0
 801881e:	d008      	beq.n	8018832 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018820:	4b6b      	ldr	r3, [pc, #428]	; (80189d0 <tcp_input+0x7e8>)
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	4618      	mov	r0, r3
 8018826:	f7fd fa5f 	bl	8015ce8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801882a:	69f8      	ldr	r0, [r7, #28]
 801882c:	f7fe f89c 	bl	8016968 <tcp_abort>
            goto aborted;
 8018830:	e078      	b.n	8018924 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8018832:	69fb      	ldr	r3, [r7, #28]
 8018834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018838:	2b00      	cmp	r3, #0
 801883a:	d00c      	beq.n	8018856 <tcp_input+0x66e>
 801883c:	69fb      	ldr	r3, [r7, #28]
 801883e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018842:	69fb      	ldr	r3, [r7, #28]
 8018844:	6918      	ldr	r0, [r3, #16]
 8018846:	4b62      	ldr	r3, [pc, #392]	; (80189d0 <tcp_input+0x7e8>)
 8018848:	681a      	ldr	r2, [r3, #0]
 801884a:	2300      	movs	r3, #0
 801884c:	69f9      	ldr	r1, [r7, #28]
 801884e:	47a0      	blx	r4
 8018850:	4603      	mov	r3, r0
 8018852:	74fb      	strb	r3, [r7, #19]
 8018854:	e008      	b.n	8018868 <tcp_input+0x680>
 8018856:	4b5e      	ldr	r3, [pc, #376]	; (80189d0 <tcp_input+0x7e8>)
 8018858:	681a      	ldr	r2, [r3, #0]
 801885a:	2300      	movs	r3, #0
 801885c:	69f9      	ldr	r1, [r7, #28]
 801885e:	2000      	movs	r0, #0
 8018860:	f7ff f884 	bl	801796c <tcp_recv_null>
 8018864:	4603      	mov	r3, r0
 8018866:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8018868:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801886c:	f113 0f0d 	cmn.w	r3, #13
 8018870:	d053      	beq.n	801891a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8018872:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018876:	2b00      	cmp	r3, #0
 8018878:	d003      	beq.n	8018882 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801887a:	4b55      	ldr	r3, [pc, #340]	; (80189d0 <tcp_input+0x7e8>)
 801887c:	681a      	ldr	r2, [r3, #0]
 801887e:	69fb      	ldr	r3, [r7, #28]
 8018880:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8018882:	4b50      	ldr	r3, [pc, #320]	; (80189c4 <tcp_input+0x7dc>)
 8018884:	781b      	ldrb	r3, [r3, #0]
 8018886:	f003 0320 	and.w	r3, r3, #32
 801888a:	2b00      	cmp	r3, #0
 801888c:	d030      	beq.n	80188f0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801888e:	69fb      	ldr	r3, [r7, #28]
 8018890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018892:	2b00      	cmp	r3, #0
 8018894:	d009      	beq.n	80188aa <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8018896:	69fb      	ldr	r3, [r7, #28]
 8018898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801889a:	7b5a      	ldrb	r2, [r3, #13]
 801889c:	69fb      	ldr	r3, [r7, #28]
 801889e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80188a0:	f042 0220 	orr.w	r2, r2, #32
 80188a4:	b2d2      	uxtb	r2, r2
 80188a6:	735a      	strb	r2, [r3, #13]
 80188a8:	e022      	b.n	80188f0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80188aa:	69fb      	ldr	r3, [r7, #28]
 80188ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80188ae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80188b2:	d005      	beq.n	80188c0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80188b4:	69fb      	ldr	r3, [r7, #28]
 80188b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80188b8:	3301      	adds	r3, #1
 80188ba:	b29a      	uxth	r2, r3
 80188bc:	69fb      	ldr	r3, [r7, #28]
 80188be:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80188c0:	69fb      	ldr	r3, [r7, #28]
 80188c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d00b      	beq.n	80188e2 <tcp_input+0x6fa>
 80188ca:	69fb      	ldr	r3, [r7, #28]
 80188cc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80188d0:	69fb      	ldr	r3, [r7, #28]
 80188d2:	6918      	ldr	r0, [r3, #16]
 80188d4:	2300      	movs	r3, #0
 80188d6:	2200      	movs	r2, #0
 80188d8:	69f9      	ldr	r1, [r7, #28]
 80188da:	47a0      	blx	r4
 80188dc:	4603      	mov	r3, r0
 80188de:	74fb      	strb	r3, [r7, #19]
 80188e0:	e001      	b.n	80188e6 <tcp_input+0x6fe>
 80188e2:	2300      	movs	r3, #0
 80188e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80188e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80188ea:	f113 0f0d 	cmn.w	r3, #13
 80188ee:	d016      	beq.n	801891e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80188f0:	4b33      	ldr	r3, [pc, #204]	; (80189c0 <tcp_input+0x7d8>)
 80188f2:	2200      	movs	r2, #0
 80188f4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80188f6:	69f8      	ldr	r0, [r7, #28]
 80188f8:	f000 f880 	bl	80189fc <tcp_input_delayed_close>
 80188fc:	4603      	mov	r3, r0
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d10f      	bne.n	8018922 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8018902:	69f8      	ldr	r0, [r7, #28]
 8018904:	f002 ff10 	bl	801b728 <tcp_output>
 8018908:	e00c      	b.n	8018924 <tcp_input+0x73c>
        goto aborted;
 801890a:	bf00      	nop
 801890c:	e00a      	b.n	8018924 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801890e:	bf00      	nop
 8018910:	e008      	b.n	8018924 <tcp_input+0x73c>
              goto aborted;
 8018912:	bf00      	nop
 8018914:	e006      	b.n	8018924 <tcp_input+0x73c>
          goto aborted;
 8018916:	bf00      	nop
 8018918:	e004      	b.n	8018924 <tcp_input+0x73c>
            goto aborted;
 801891a:	bf00      	nop
 801891c:	e002      	b.n	8018924 <tcp_input+0x73c>
              goto aborted;
 801891e:	bf00      	nop
 8018920:	e000      	b.n	8018924 <tcp_input+0x73c>
          goto aborted;
 8018922:	bf00      	nop
    tcp_input_pcb = NULL;
 8018924:	4b26      	ldr	r3, [pc, #152]	; (80189c0 <tcp_input+0x7d8>)
 8018926:	2200      	movs	r2, #0
 8018928:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801892a:	4b29      	ldr	r3, [pc, #164]	; (80189d0 <tcp_input+0x7e8>)
 801892c:	2200      	movs	r2, #0
 801892e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8018930:	4b2b      	ldr	r3, [pc, #172]	; (80189e0 <tcp_input+0x7f8>)
 8018932:	685b      	ldr	r3, [r3, #4]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d03f      	beq.n	80189b8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8018938:	4b29      	ldr	r3, [pc, #164]	; (80189e0 <tcp_input+0x7f8>)
 801893a:	685b      	ldr	r3, [r3, #4]
 801893c:	4618      	mov	r0, r3
 801893e:	f7fd f9d3 	bl	8015ce8 <pbuf_free>
      inseg.p = NULL;
 8018942:	4b27      	ldr	r3, [pc, #156]	; (80189e0 <tcp_input+0x7f8>)
 8018944:	2200      	movs	r2, #0
 8018946:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8018948:	e036      	b.n	80189b8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801894a:	4b26      	ldr	r3, [pc, #152]	; (80189e4 <tcp_input+0x7fc>)
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	899b      	ldrh	r3, [r3, #12]
 8018950:	b29b      	uxth	r3, r3
 8018952:	4618      	mov	r0, r3
 8018954:	f7f9 facc 	bl	8011ef0 <lwip_htons>
 8018958:	4603      	mov	r3, r0
 801895a:	b2db      	uxtb	r3, r3
 801895c:	f003 0304 	and.w	r3, r3, #4
 8018960:	2b00      	cmp	r3, #0
 8018962:	d118      	bne.n	8018996 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018964:	4b20      	ldr	r3, [pc, #128]	; (80189e8 <tcp_input+0x800>)
 8018966:	6819      	ldr	r1, [r3, #0]
 8018968:	4b20      	ldr	r3, [pc, #128]	; (80189ec <tcp_input+0x804>)
 801896a:	881b      	ldrh	r3, [r3, #0]
 801896c:	461a      	mov	r2, r3
 801896e:	4b20      	ldr	r3, [pc, #128]	; (80189f0 <tcp_input+0x808>)
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018974:	4b1b      	ldr	r3, [pc, #108]	; (80189e4 <tcp_input+0x7fc>)
 8018976:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018978:	885b      	ldrh	r3, [r3, #2]
 801897a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801897c:	4a19      	ldr	r2, [pc, #100]	; (80189e4 <tcp_input+0x7fc>)
 801897e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018980:	8812      	ldrh	r2, [r2, #0]
 8018982:	b292      	uxth	r2, r2
 8018984:	9202      	str	r2, [sp, #8]
 8018986:	9301      	str	r3, [sp, #4]
 8018988:	4b1a      	ldr	r3, [pc, #104]	; (80189f4 <tcp_input+0x80c>)
 801898a:	9300      	str	r3, [sp, #0]
 801898c:	4b1a      	ldr	r3, [pc, #104]	; (80189f8 <tcp_input+0x810>)
 801898e:	4602      	mov	r2, r0
 8018990:	2000      	movs	r0, #0
 8018992:	f003 fc7d 	bl	801c290 <tcp_rst>
    pbuf_free(p);
 8018996:	6878      	ldr	r0, [r7, #4]
 8018998:	f7fd f9a6 	bl	8015ce8 <pbuf_free>
  return;
 801899c:	e00c      	b.n	80189b8 <tcp_input+0x7d0>
    goto dropped;
 801899e:	bf00      	nop
 80189a0:	e006      	b.n	80189b0 <tcp_input+0x7c8>
    goto dropped;
 80189a2:	bf00      	nop
 80189a4:	e004      	b.n	80189b0 <tcp_input+0x7c8>
    goto dropped;
 80189a6:	bf00      	nop
 80189a8:	e002      	b.n	80189b0 <tcp_input+0x7c8>
      goto dropped;
 80189aa:	bf00      	nop
 80189ac:	e000      	b.n	80189b0 <tcp_input+0x7c8>
      goto dropped;
 80189ae:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80189b0:	6878      	ldr	r0, [r7, #4]
 80189b2:	f7fd f999 	bl	8015ce8 <pbuf_free>
 80189b6:	e000      	b.n	80189ba <tcp_input+0x7d2>
  return;
 80189b8:	bf00      	nop
}
 80189ba:	3724      	adds	r7, #36	; 0x24
 80189bc:	46bd      	mov	sp, r7
 80189be:	bd90      	pop	{r4, r7, pc}
 80189c0:	2400ae6c 	.word	0x2400ae6c
 80189c4:	240077f5 	.word	0x240077f5
 80189c8:	2400ae58 	.word	0x2400ae58
 80189cc:	240077f0 	.word	0x240077f0
 80189d0:	240077f8 	.word	0x240077f8
 80189d4:	08027aac 	.word	0x08027aac
 80189d8:	08027c8c 	.word	0x08027c8c
 80189dc:	08027b24 	.word	0x08027b24
 80189e0:	240077c8 	.word	0x240077c8
 80189e4:	240077d8 	.word	0x240077d8
 80189e8:	240077ec 	.word	0x240077ec
 80189ec:	240077f2 	.word	0x240077f2
 80189f0:	240077e8 	.word	0x240077e8
 80189f4:	24007f78 	.word	0x24007f78
 80189f8:	24007f7c 	.word	0x24007f7c

080189fc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b082      	sub	sp, #8
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d106      	bne.n	8018a18 <tcp_input_delayed_close+0x1c>
 8018a0a:	4b17      	ldr	r3, [pc, #92]	; (8018a68 <tcp_input_delayed_close+0x6c>)
 8018a0c:	f240 225a 	movw	r2, #602	; 0x25a
 8018a10:	4916      	ldr	r1, [pc, #88]	; (8018a6c <tcp_input_delayed_close+0x70>)
 8018a12:	4817      	ldr	r0, [pc, #92]	; (8018a70 <tcp_input_delayed_close+0x74>)
 8018a14:	f008 f97a 	bl	8020d0c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8018a18:	4b16      	ldr	r3, [pc, #88]	; (8018a74 <tcp_input_delayed_close+0x78>)
 8018a1a:	781b      	ldrb	r3, [r3, #0]
 8018a1c:	f003 0310 	and.w	r3, r3, #16
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d01c      	beq.n	8018a5e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	8b5b      	ldrh	r3, [r3, #26]
 8018a28:	f003 0310 	and.w	r3, r3, #16
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d10d      	bne.n	8018a4c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d008      	beq.n	8018a4c <tcp_input_delayed_close+0x50>
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018a40:	687a      	ldr	r2, [r7, #4]
 8018a42:	6912      	ldr	r2, [r2, #16]
 8018a44:	f06f 010e 	mvn.w	r1, #14
 8018a48:	4610      	mov	r0, r2
 8018a4a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018a4c:	6879      	ldr	r1, [r7, #4]
 8018a4e:	480a      	ldr	r0, [pc, #40]	; (8018a78 <tcp_input_delayed_close+0x7c>)
 8018a50:	f7ff fa52 	bl	8017ef8 <tcp_pcb_remove>
    tcp_free(pcb);
 8018a54:	6878      	ldr	r0, [r7, #4]
 8018a56:	f7fd fc9f 	bl	8016398 <tcp_free>
    return 1;
 8018a5a:	2301      	movs	r3, #1
 8018a5c:	e000      	b.n	8018a60 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8018a5e:	2300      	movs	r3, #0
}
 8018a60:	4618      	mov	r0, r3
 8018a62:	3708      	adds	r7, #8
 8018a64:	46bd      	mov	sp, r7
 8018a66:	bd80      	pop	{r7, pc}
 8018a68:	08027aac 	.word	0x08027aac
 8018a6c:	08027ca8 	.word	0x08027ca8
 8018a70:	08027b24 	.word	0x08027b24
 8018a74:	240077f5 	.word	0x240077f5
 8018a78:	2400ae58 	.word	0x2400ae58

08018a7c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8018a7c:	b590      	push	{r4, r7, lr}
 8018a7e:	b08b      	sub	sp, #44	; 0x2c
 8018a80:	af04      	add	r7, sp, #16
 8018a82:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8018a84:	4b6f      	ldr	r3, [pc, #444]	; (8018c44 <tcp_listen_input+0x1c8>)
 8018a86:	781b      	ldrb	r3, [r3, #0]
 8018a88:	f003 0304 	and.w	r3, r3, #4
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	f040 80d2 	bne.w	8018c36 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d106      	bne.n	8018aa6 <tcp_listen_input+0x2a>
 8018a98:	4b6b      	ldr	r3, [pc, #428]	; (8018c48 <tcp_listen_input+0x1cc>)
 8018a9a:	f240 2281 	movw	r2, #641	; 0x281
 8018a9e:	496b      	ldr	r1, [pc, #428]	; (8018c4c <tcp_listen_input+0x1d0>)
 8018aa0:	486b      	ldr	r0, [pc, #428]	; (8018c50 <tcp_listen_input+0x1d4>)
 8018aa2:	f008 f933 	bl	8020d0c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8018aa6:	4b67      	ldr	r3, [pc, #412]	; (8018c44 <tcp_listen_input+0x1c8>)
 8018aa8:	781b      	ldrb	r3, [r3, #0]
 8018aaa:	f003 0310 	and.w	r3, r3, #16
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d019      	beq.n	8018ae6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ab2:	4b68      	ldr	r3, [pc, #416]	; (8018c54 <tcp_listen_input+0x1d8>)
 8018ab4:	6819      	ldr	r1, [r3, #0]
 8018ab6:	4b68      	ldr	r3, [pc, #416]	; (8018c58 <tcp_listen_input+0x1dc>)
 8018ab8:	881b      	ldrh	r3, [r3, #0]
 8018aba:	461a      	mov	r2, r3
 8018abc:	4b67      	ldr	r3, [pc, #412]	; (8018c5c <tcp_listen_input+0x1e0>)
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018ac2:	4b67      	ldr	r3, [pc, #412]	; (8018c60 <tcp_listen_input+0x1e4>)
 8018ac4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ac6:	885b      	ldrh	r3, [r3, #2]
 8018ac8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018aca:	4a65      	ldr	r2, [pc, #404]	; (8018c60 <tcp_listen_input+0x1e4>)
 8018acc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ace:	8812      	ldrh	r2, [r2, #0]
 8018ad0:	b292      	uxth	r2, r2
 8018ad2:	9202      	str	r2, [sp, #8]
 8018ad4:	9301      	str	r3, [sp, #4]
 8018ad6:	4b63      	ldr	r3, [pc, #396]	; (8018c64 <tcp_listen_input+0x1e8>)
 8018ad8:	9300      	str	r3, [sp, #0]
 8018ada:	4b63      	ldr	r3, [pc, #396]	; (8018c68 <tcp_listen_input+0x1ec>)
 8018adc:	4602      	mov	r2, r0
 8018ade:	6878      	ldr	r0, [r7, #4]
 8018ae0:	f003 fbd6 	bl	801c290 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8018ae4:	e0a9      	b.n	8018c3a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8018ae6:	4b57      	ldr	r3, [pc, #348]	; (8018c44 <tcp_listen_input+0x1c8>)
 8018ae8:	781b      	ldrb	r3, [r3, #0]
 8018aea:	f003 0302 	and.w	r3, r3, #2
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	f000 80a3 	beq.w	8018c3a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	7d5b      	ldrb	r3, [r3, #21]
 8018af8:	4618      	mov	r0, r3
 8018afa:	f7ff f85b 	bl	8017bb4 <tcp_alloc>
 8018afe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018b00:	697b      	ldr	r3, [r7, #20]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d111      	bne.n	8018b2a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	699b      	ldr	r3, [r3, #24]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d00a      	beq.n	8018b24 <tcp_listen_input+0xa8>
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	699b      	ldr	r3, [r3, #24]
 8018b12:	687a      	ldr	r2, [r7, #4]
 8018b14:	6910      	ldr	r0, [r2, #16]
 8018b16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018b1a:	2100      	movs	r1, #0
 8018b1c:	4798      	blx	r3
 8018b1e:	4603      	mov	r3, r0
 8018b20:	73bb      	strb	r3, [r7, #14]
      return;
 8018b22:	e08b      	b.n	8018c3c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018b24:	23f0      	movs	r3, #240	; 0xf0
 8018b26:	73bb      	strb	r3, [r7, #14]
      return;
 8018b28:	e088      	b.n	8018c3c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8018b2a:	4b50      	ldr	r3, [pc, #320]	; (8018c6c <tcp_listen_input+0x1f0>)
 8018b2c:	695a      	ldr	r2, [r3, #20]
 8018b2e:	697b      	ldr	r3, [r7, #20]
 8018b30:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018b32:	4b4e      	ldr	r3, [pc, #312]	; (8018c6c <tcp_listen_input+0x1f0>)
 8018b34:	691a      	ldr	r2, [r3, #16]
 8018b36:	697b      	ldr	r3, [r7, #20]
 8018b38:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	8ada      	ldrh	r2, [r3, #22]
 8018b3e:	697b      	ldr	r3, [r7, #20]
 8018b40:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8018b42:	4b47      	ldr	r3, [pc, #284]	; (8018c60 <tcp_listen_input+0x1e4>)
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	881b      	ldrh	r3, [r3, #0]
 8018b48:	b29a      	uxth	r2, r3
 8018b4a:	697b      	ldr	r3, [r7, #20]
 8018b4c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8018b4e:	697b      	ldr	r3, [r7, #20]
 8018b50:	2203      	movs	r2, #3
 8018b52:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8018b54:	4b41      	ldr	r3, [pc, #260]	; (8018c5c <tcp_listen_input+0x1e0>)
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	1c5a      	adds	r2, r3, #1
 8018b5a:	697b      	ldr	r3, [r7, #20]
 8018b5c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8018b5e:	697b      	ldr	r3, [r7, #20]
 8018b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018b62:	697b      	ldr	r3, [r7, #20]
 8018b64:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8018b66:	6978      	ldr	r0, [r7, #20]
 8018b68:	f7ff fa5a 	bl	8018020 <tcp_next_iss>
 8018b6c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8018b6e:	697b      	ldr	r3, [r7, #20]
 8018b70:	693a      	ldr	r2, [r7, #16]
 8018b72:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8018b74:	697b      	ldr	r3, [r7, #20]
 8018b76:	693a      	ldr	r2, [r7, #16]
 8018b78:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8018b7a:	697b      	ldr	r3, [r7, #20]
 8018b7c:	693a      	ldr	r2, [r7, #16]
 8018b7e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8018b80:	697b      	ldr	r3, [r7, #20]
 8018b82:	693a      	ldr	r2, [r7, #16]
 8018b84:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8018b86:	4b35      	ldr	r3, [pc, #212]	; (8018c5c <tcp_listen_input+0x1e0>)
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	1e5a      	subs	r2, r3, #1
 8018b8c:	697b      	ldr	r3, [r7, #20]
 8018b8e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	691a      	ldr	r2, [r3, #16]
 8018b94:	697b      	ldr	r3, [r7, #20]
 8018b96:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8018b98:	697b      	ldr	r3, [r7, #20]
 8018b9a:	687a      	ldr	r2, [r7, #4]
 8018b9c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	7a5b      	ldrb	r3, [r3, #9]
 8018ba2:	f003 030c 	and.w	r3, r3, #12
 8018ba6:	b2da      	uxtb	r2, r3
 8018ba8:	697b      	ldr	r3, [r7, #20]
 8018baa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	7a1a      	ldrb	r2, [r3, #8]
 8018bb0:	697b      	ldr	r3, [r7, #20]
 8018bb2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018bb4:	4b2e      	ldr	r3, [pc, #184]	; (8018c70 <tcp_listen_input+0x1f4>)
 8018bb6:	681a      	ldr	r2, [r3, #0]
 8018bb8:	697b      	ldr	r3, [r7, #20]
 8018bba:	60da      	str	r2, [r3, #12]
 8018bbc:	4a2c      	ldr	r2, [pc, #176]	; (8018c70 <tcp_listen_input+0x1f4>)
 8018bbe:	697b      	ldr	r3, [r7, #20]
 8018bc0:	6013      	str	r3, [r2, #0]
 8018bc2:	f003 fd27 	bl	801c614 <tcp_timer_needed>
 8018bc6:	4b2b      	ldr	r3, [pc, #172]	; (8018c74 <tcp_listen_input+0x1f8>)
 8018bc8:	2201      	movs	r2, #1
 8018bca:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018bcc:	6978      	ldr	r0, [r7, #20]
 8018bce:	f001 fd8d 	bl	801a6ec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8018bd2:	4b23      	ldr	r3, [pc, #140]	; (8018c60 <tcp_listen_input+0x1e4>)
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	89db      	ldrh	r3, [r3, #14]
 8018bd8:	b29a      	uxth	r2, r3
 8018bda:	697b      	ldr	r3, [r7, #20]
 8018bdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018be0:	697b      	ldr	r3, [r7, #20]
 8018be2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018be6:	697b      	ldr	r3, [r7, #20]
 8018be8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018bec:	697b      	ldr	r3, [r7, #20]
 8018bee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018bf0:	697b      	ldr	r3, [r7, #20]
 8018bf2:	3304      	adds	r3, #4
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	f7fa fc51 	bl	801349c <ip4_route>
 8018bfa:	4601      	mov	r1, r0
 8018bfc:	697b      	ldr	r3, [r7, #20]
 8018bfe:	3304      	adds	r3, #4
 8018c00:	461a      	mov	r2, r3
 8018c02:	4620      	mov	r0, r4
 8018c04:	f7ff fa32 	bl	801806c <tcp_eff_send_mss_netif>
 8018c08:	4603      	mov	r3, r0
 8018c0a:	461a      	mov	r2, r3
 8018c0c:	697b      	ldr	r3, [r7, #20]
 8018c0e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018c10:	2112      	movs	r1, #18
 8018c12:	6978      	ldr	r0, [r7, #20]
 8018c14:	f002 fc9a 	bl	801b54c <tcp_enqueue_flags>
 8018c18:	4603      	mov	r3, r0
 8018c1a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d004      	beq.n	8018c2e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8018c24:	2100      	movs	r1, #0
 8018c26:	6978      	ldr	r0, [r7, #20]
 8018c28:	f7fd fde0 	bl	80167ec <tcp_abandon>
      return;
 8018c2c:	e006      	b.n	8018c3c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8018c2e:	6978      	ldr	r0, [r7, #20]
 8018c30:	f002 fd7a 	bl	801b728 <tcp_output>
  return;
 8018c34:	e001      	b.n	8018c3a <tcp_listen_input+0x1be>
    return;
 8018c36:	bf00      	nop
 8018c38:	e000      	b.n	8018c3c <tcp_listen_input+0x1c0>
  return;
 8018c3a:	bf00      	nop
}
 8018c3c:	371c      	adds	r7, #28
 8018c3e:	46bd      	mov	sp, r7
 8018c40:	bd90      	pop	{r4, r7, pc}
 8018c42:	bf00      	nop
 8018c44:	240077f4 	.word	0x240077f4
 8018c48:	08027aac 	.word	0x08027aac
 8018c4c:	08027cd0 	.word	0x08027cd0
 8018c50:	08027b24 	.word	0x08027b24
 8018c54:	240077ec 	.word	0x240077ec
 8018c58:	240077f2 	.word	0x240077f2
 8018c5c:	240077e8 	.word	0x240077e8
 8018c60:	240077d8 	.word	0x240077d8
 8018c64:	24007f78 	.word	0x24007f78
 8018c68:	24007f7c 	.word	0x24007f7c
 8018c6c:	24007f68 	.word	0x24007f68
 8018c70:	2400ae58 	.word	0x2400ae58
 8018c74:	2400ae54 	.word	0x2400ae54

08018c78 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018c78:	b580      	push	{r7, lr}
 8018c7a:	b086      	sub	sp, #24
 8018c7c:	af04      	add	r7, sp, #16
 8018c7e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018c80:	4b2f      	ldr	r3, [pc, #188]	; (8018d40 <tcp_timewait_input+0xc8>)
 8018c82:	781b      	ldrb	r3, [r3, #0]
 8018c84:	f003 0304 	and.w	r3, r3, #4
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d153      	bne.n	8018d34 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d106      	bne.n	8018ca0 <tcp_timewait_input+0x28>
 8018c92:	4b2c      	ldr	r3, [pc, #176]	; (8018d44 <tcp_timewait_input+0xcc>)
 8018c94:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018c98:	492b      	ldr	r1, [pc, #172]	; (8018d48 <tcp_timewait_input+0xd0>)
 8018c9a:	482c      	ldr	r0, [pc, #176]	; (8018d4c <tcp_timewait_input+0xd4>)
 8018c9c:	f008 f836 	bl	8020d0c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018ca0:	4b27      	ldr	r3, [pc, #156]	; (8018d40 <tcp_timewait_input+0xc8>)
 8018ca2:	781b      	ldrb	r3, [r3, #0]
 8018ca4:	f003 0302 	and.w	r3, r3, #2
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d02a      	beq.n	8018d02 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018cac:	4b28      	ldr	r3, [pc, #160]	; (8018d50 <tcp_timewait_input+0xd8>)
 8018cae:	681a      	ldr	r2, [r3, #0]
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cb4:	1ad3      	subs	r3, r2, r3
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	db2d      	blt.n	8018d16 <tcp_timewait_input+0x9e>
 8018cba:	4b25      	ldr	r3, [pc, #148]	; (8018d50 <tcp_timewait_input+0xd8>)
 8018cbc:	681a      	ldr	r2, [r3, #0]
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cc2:	6879      	ldr	r1, [r7, #4]
 8018cc4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018cc6:	440b      	add	r3, r1
 8018cc8:	1ad3      	subs	r3, r2, r3
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	dc23      	bgt.n	8018d16 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018cce:	4b21      	ldr	r3, [pc, #132]	; (8018d54 <tcp_timewait_input+0xdc>)
 8018cd0:	6819      	ldr	r1, [r3, #0]
 8018cd2:	4b21      	ldr	r3, [pc, #132]	; (8018d58 <tcp_timewait_input+0xe0>)
 8018cd4:	881b      	ldrh	r3, [r3, #0]
 8018cd6:	461a      	mov	r2, r3
 8018cd8:	4b1d      	ldr	r3, [pc, #116]	; (8018d50 <tcp_timewait_input+0xd8>)
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018cde:	4b1f      	ldr	r3, [pc, #124]	; (8018d5c <tcp_timewait_input+0xe4>)
 8018ce0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ce2:	885b      	ldrh	r3, [r3, #2]
 8018ce4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018ce6:	4a1d      	ldr	r2, [pc, #116]	; (8018d5c <tcp_timewait_input+0xe4>)
 8018ce8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018cea:	8812      	ldrh	r2, [r2, #0]
 8018cec:	b292      	uxth	r2, r2
 8018cee:	9202      	str	r2, [sp, #8]
 8018cf0:	9301      	str	r3, [sp, #4]
 8018cf2:	4b1b      	ldr	r3, [pc, #108]	; (8018d60 <tcp_timewait_input+0xe8>)
 8018cf4:	9300      	str	r3, [sp, #0]
 8018cf6:	4b1b      	ldr	r3, [pc, #108]	; (8018d64 <tcp_timewait_input+0xec>)
 8018cf8:	4602      	mov	r2, r0
 8018cfa:	6878      	ldr	r0, [r7, #4]
 8018cfc:	f003 fac8 	bl	801c290 <tcp_rst>
      return;
 8018d00:	e01b      	b.n	8018d3a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8018d02:	4b0f      	ldr	r3, [pc, #60]	; (8018d40 <tcp_timewait_input+0xc8>)
 8018d04:	781b      	ldrb	r3, [r3, #0]
 8018d06:	f003 0301 	and.w	r3, r3, #1
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d003      	beq.n	8018d16 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018d0e:	4b16      	ldr	r3, [pc, #88]	; (8018d68 <tcp_timewait_input+0xf0>)
 8018d10:	681a      	ldr	r2, [r3, #0]
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8018d16:	4b10      	ldr	r3, [pc, #64]	; (8018d58 <tcp_timewait_input+0xe0>)
 8018d18:	881b      	ldrh	r3, [r3, #0]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d00c      	beq.n	8018d38 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	8b5b      	ldrh	r3, [r3, #26]
 8018d22:	f043 0302 	orr.w	r3, r3, #2
 8018d26:	b29a      	uxth	r2, r3
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018d2c:	6878      	ldr	r0, [r7, #4]
 8018d2e:	f002 fcfb 	bl	801b728 <tcp_output>
  }
  return;
 8018d32:	e001      	b.n	8018d38 <tcp_timewait_input+0xc0>
    return;
 8018d34:	bf00      	nop
 8018d36:	e000      	b.n	8018d3a <tcp_timewait_input+0xc2>
  return;
 8018d38:	bf00      	nop
}
 8018d3a:	3708      	adds	r7, #8
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	bd80      	pop	{r7, pc}
 8018d40:	240077f4 	.word	0x240077f4
 8018d44:	08027aac 	.word	0x08027aac
 8018d48:	08027cf0 	.word	0x08027cf0
 8018d4c:	08027b24 	.word	0x08027b24
 8018d50:	240077e8 	.word	0x240077e8
 8018d54:	240077ec 	.word	0x240077ec
 8018d58:	240077f2 	.word	0x240077f2
 8018d5c:	240077d8 	.word	0x240077d8
 8018d60:	24007f78 	.word	0x24007f78
 8018d64:	24007f7c 	.word	0x24007f7c
 8018d68:	2400ae5c 	.word	0x2400ae5c

08018d6c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018d6c:	b590      	push	{r4, r7, lr}
 8018d6e:	b08d      	sub	sp, #52	; 0x34
 8018d70:	af04      	add	r7, sp, #16
 8018d72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018d74:	2300      	movs	r3, #0
 8018d76:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8018d78:	2300      	movs	r3, #0
 8018d7a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d106      	bne.n	8018d90 <tcp_process+0x24>
 8018d82:	4ba5      	ldr	r3, [pc, #660]	; (8019018 <tcp_process+0x2ac>)
 8018d84:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8018d88:	49a4      	ldr	r1, [pc, #656]	; (801901c <tcp_process+0x2b0>)
 8018d8a:	48a5      	ldr	r0, [pc, #660]	; (8019020 <tcp_process+0x2b4>)
 8018d8c:	f007 ffbe 	bl	8020d0c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018d90:	4ba4      	ldr	r3, [pc, #656]	; (8019024 <tcp_process+0x2b8>)
 8018d92:	781b      	ldrb	r3, [r3, #0]
 8018d94:	f003 0304 	and.w	r3, r3, #4
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d04e      	beq.n	8018e3a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	7d1b      	ldrb	r3, [r3, #20]
 8018da0:	2b02      	cmp	r3, #2
 8018da2:	d108      	bne.n	8018db6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018da8:	4b9f      	ldr	r3, [pc, #636]	; (8019028 <tcp_process+0x2bc>)
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	429a      	cmp	r2, r3
 8018dae:	d123      	bne.n	8018df8 <tcp_process+0x8c>
        acceptable = 1;
 8018db0:	2301      	movs	r3, #1
 8018db2:	76fb      	strb	r3, [r7, #27]
 8018db4:	e020      	b.n	8018df8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018dba:	4b9c      	ldr	r3, [pc, #624]	; (801902c <tcp_process+0x2c0>)
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	429a      	cmp	r2, r3
 8018dc0:	d102      	bne.n	8018dc8 <tcp_process+0x5c>
        acceptable = 1;
 8018dc2:	2301      	movs	r3, #1
 8018dc4:	76fb      	strb	r3, [r7, #27]
 8018dc6:	e017      	b.n	8018df8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018dc8:	4b98      	ldr	r3, [pc, #608]	; (801902c <tcp_process+0x2c0>)
 8018dca:	681a      	ldr	r2, [r3, #0]
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dd0:	1ad3      	subs	r3, r2, r3
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	db10      	blt.n	8018df8 <tcp_process+0x8c>
 8018dd6:	4b95      	ldr	r3, [pc, #596]	; (801902c <tcp_process+0x2c0>)
 8018dd8:	681a      	ldr	r2, [r3, #0]
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dde:	6879      	ldr	r1, [r7, #4]
 8018de0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018de2:	440b      	add	r3, r1
 8018de4:	1ad3      	subs	r3, r2, r3
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	dc06      	bgt.n	8018df8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	8b5b      	ldrh	r3, [r3, #26]
 8018dee:	f043 0302 	orr.w	r3, r3, #2
 8018df2:	b29a      	uxth	r2, r3
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018df8:	7efb      	ldrb	r3, [r7, #27]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d01b      	beq.n	8018e36 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	7d1b      	ldrb	r3, [r3, #20]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d106      	bne.n	8018e14 <tcp_process+0xa8>
 8018e06:	4b84      	ldr	r3, [pc, #528]	; (8019018 <tcp_process+0x2ac>)
 8018e08:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018e0c:	4988      	ldr	r1, [pc, #544]	; (8019030 <tcp_process+0x2c4>)
 8018e0e:	4884      	ldr	r0, [pc, #528]	; (8019020 <tcp_process+0x2b4>)
 8018e10:	f007 ff7c 	bl	8020d0c <iprintf>
      recv_flags |= TF_RESET;
 8018e14:	4b87      	ldr	r3, [pc, #540]	; (8019034 <tcp_process+0x2c8>)
 8018e16:	781b      	ldrb	r3, [r3, #0]
 8018e18:	f043 0308 	orr.w	r3, r3, #8
 8018e1c:	b2da      	uxtb	r2, r3
 8018e1e:	4b85      	ldr	r3, [pc, #532]	; (8019034 <tcp_process+0x2c8>)
 8018e20:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	8b5b      	ldrh	r3, [r3, #26]
 8018e26:	f023 0301 	bic.w	r3, r3, #1
 8018e2a:	b29a      	uxth	r2, r3
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018e30:	f06f 030d 	mvn.w	r3, #13
 8018e34:	e37a      	b.n	801952c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018e36:	2300      	movs	r3, #0
 8018e38:	e378      	b.n	801952c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018e3a:	4b7a      	ldr	r3, [pc, #488]	; (8019024 <tcp_process+0x2b8>)
 8018e3c:	781b      	ldrb	r3, [r3, #0]
 8018e3e:	f003 0302 	and.w	r3, r3, #2
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d010      	beq.n	8018e68 <tcp_process+0xfc>
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	7d1b      	ldrb	r3, [r3, #20]
 8018e4a:	2b02      	cmp	r3, #2
 8018e4c:	d00c      	beq.n	8018e68 <tcp_process+0xfc>
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	7d1b      	ldrb	r3, [r3, #20]
 8018e52:	2b03      	cmp	r3, #3
 8018e54:	d008      	beq.n	8018e68 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	8b5b      	ldrh	r3, [r3, #26]
 8018e5a:	f043 0302 	orr.w	r3, r3, #2
 8018e5e:	b29a      	uxth	r2, r3
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018e64:	2300      	movs	r3, #0
 8018e66:	e361      	b.n	801952c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	8b5b      	ldrh	r3, [r3, #26]
 8018e6c:	f003 0310 	and.w	r3, r3, #16
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d103      	bne.n	8018e7c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018e74:	4b70      	ldr	r3, [pc, #448]	; (8019038 <tcp_process+0x2cc>)
 8018e76:	681a      	ldr	r2, [r3, #0]
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	2200      	movs	r2, #0
 8018e80:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	2200      	movs	r2, #0
 8018e88:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8018e8c:	6878      	ldr	r0, [r7, #4]
 8018e8e:	f001 fc2d 	bl	801a6ec <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	7d1b      	ldrb	r3, [r3, #20]
 8018e96:	3b02      	subs	r3, #2
 8018e98:	2b07      	cmp	r3, #7
 8018e9a:	f200 8337 	bhi.w	801950c <tcp_process+0x7a0>
 8018e9e:	a201      	add	r2, pc, #4	; (adr r2, 8018ea4 <tcp_process+0x138>)
 8018ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ea4:	08018ec5 	.word	0x08018ec5
 8018ea8:	080190f5 	.word	0x080190f5
 8018eac:	0801926d 	.word	0x0801926d
 8018eb0:	08019297 	.word	0x08019297
 8018eb4:	080193bb 	.word	0x080193bb
 8018eb8:	0801926d 	.word	0x0801926d
 8018ebc:	08019447 	.word	0x08019447
 8018ec0:	080194d7 	.word	0x080194d7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018ec4:	4b57      	ldr	r3, [pc, #348]	; (8019024 <tcp_process+0x2b8>)
 8018ec6:	781b      	ldrb	r3, [r3, #0]
 8018ec8:	f003 0310 	and.w	r3, r3, #16
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	f000 80e4 	beq.w	801909a <tcp_process+0x32e>
 8018ed2:	4b54      	ldr	r3, [pc, #336]	; (8019024 <tcp_process+0x2b8>)
 8018ed4:	781b      	ldrb	r3, [r3, #0]
 8018ed6:	f003 0302 	and.w	r3, r3, #2
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	f000 80dd 	beq.w	801909a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ee4:	1c5a      	adds	r2, r3, #1
 8018ee6:	4b50      	ldr	r3, [pc, #320]	; (8019028 <tcp_process+0x2bc>)
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	429a      	cmp	r2, r3
 8018eec:	f040 80d5 	bne.w	801909a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018ef0:	4b4e      	ldr	r3, [pc, #312]	; (801902c <tcp_process+0x2c0>)
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	1c5a      	adds	r2, r3, #1
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8018f02:	4b49      	ldr	r3, [pc, #292]	; (8019028 <tcp_process+0x2bc>)
 8018f04:	681a      	ldr	r2, [r3, #0]
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8018f0a:	4b4c      	ldr	r3, [pc, #304]	; (801903c <tcp_process+0x2d0>)
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	89db      	ldrh	r3, [r3, #14]
 8018f10:	b29a      	uxth	r2, r3
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018f24:	4b41      	ldr	r3, [pc, #260]	; (801902c <tcp_process+0x2c0>)
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	1e5a      	subs	r2, r3, #1
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	2204      	movs	r2, #4
 8018f32:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	3304      	adds	r3, #4
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	f7fa faad 	bl	801349c <ip4_route>
 8018f42:	4601      	mov	r1, r0
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	3304      	adds	r3, #4
 8018f48:	461a      	mov	r2, r3
 8018f4a:	4620      	mov	r0, r4
 8018f4c:	f7ff f88e 	bl	801806c <tcp_eff_send_mss_netif>
 8018f50:	4603      	mov	r3, r0
 8018f52:	461a      	mov	r2, r3
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f5c:	009a      	lsls	r2, r3, #2
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f62:	005b      	lsls	r3, r3, #1
 8018f64:	f241 111c 	movw	r1, #4380	; 0x111c
 8018f68:	428b      	cmp	r3, r1
 8018f6a:	bf38      	it	cc
 8018f6c:	460b      	movcc	r3, r1
 8018f6e:	429a      	cmp	r2, r3
 8018f70:	d204      	bcs.n	8018f7c <tcp_process+0x210>
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f76:	009b      	lsls	r3, r3, #2
 8018f78:	b29b      	uxth	r3, r3
 8018f7a:	e00d      	b.n	8018f98 <tcp_process+0x22c>
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f80:	005b      	lsls	r3, r3, #1
 8018f82:	f241 121c 	movw	r2, #4380	; 0x111c
 8018f86:	4293      	cmp	r3, r2
 8018f88:	d904      	bls.n	8018f94 <tcp_process+0x228>
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f8e:	005b      	lsls	r3, r3, #1
 8018f90:	b29b      	uxth	r3, r3
 8018f92:	e001      	b.n	8018f98 <tcp_process+0x22c>
 8018f94:	f241 131c 	movw	r3, #4380	; 0x111c
 8018f98:	687a      	ldr	r2, [r7, #4]
 8018f9a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d106      	bne.n	8018fb6 <tcp_process+0x24a>
 8018fa8:	4b1b      	ldr	r3, [pc, #108]	; (8019018 <tcp_process+0x2ac>)
 8018faa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018fae:	4924      	ldr	r1, [pc, #144]	; (8019040 <tcp_process+0x2d4>)
 8018fb0:	481b      	ldr	r0, [pc, #108]	; (8019020 <tcp_process+0x2b4>)
 8018fb2:	f007 feab 	bl	8020d0c <iprintf>
        --pcb->snd_queuelen;
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018fbc:	3b01      	subs	r3, #1
 8018fbe:	b29a      	uxth	r2, r3
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fca:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018fcc:	69fb      	ldr	r3, [r7, #28]
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d111      	bne.n	8018ff6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018fd6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018fd8:	69fb      	ldr	r3, [r7, #28]
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d106      	bne.n	8018fec <tcp_process+0x280>
 8018fde:	4b0e      	ldr	r3, [pc, #56]	; (8019018 <tcp_process+0x2ac>)
 8018fe0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8018fe4:	4917      	ldr	r1, [pc, #92]	; (8019044 <tcp_process+0x2d8>)
 8018fe6:	480e      	ldr	r0, [pc, #56]	; (8019020 <tcp_process+0x2b4>)
 8018fe8:	f007 fe90 	bl	8020d0c <iprintf>
          pcb->unsent = rseg->next;
 8018fec:	69fb      	ldr	r3, [r7, #28]
 8018fee:	681a      	ldr	r2, [r3, #0]
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	66da      	str	r2, [r3, #108]	; 0x6c
 8018ff4:	e003      	b.n	8018ffe <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8018ff6:	69fb      	ldr	r3, [r7, #28]
 8018ff8:	681a      	ldr	r2, [r3, #0]
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8018ffe:	69f8      	ldr	r0, [r7, #28]
 8019000:	f7fe fc6f 	bl	80178e2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019008:	2b00      	cmp	r3, #0
 801900a:	d11d      	bne.n	8019048 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019012:	861a      	strh	r2, [r3, #48]	; 0x30
 8019014:	e01f      	b.n	8019056 <tcp_process+0x2ea>
 8019016:	bf00      	nop
 8019018:	08027aac 	.word	0x08027aac
 801901c:	08027d10 	.word	0x08027d10
 8019020:	08027b24 	.word	0x08027b24
 8019024:	240077f4 	.word	0x240077f4
 8019028:	240077ec 	.word	0x240077ec
 801902c:	240077e8 	.word	0x240077e8
 8019030:	08027d2c 	.word	0x08027d2c
 8019034:	240077f5 	.word	0x240077f5
 8019038:	2400ae5c 	.word	0x2400ae5c
 801903c:	240077d8 	.word	0x240077d8
 8019040:	08027d4c 	.word	0x08027d4c
 8019044:	08027d64 	.word	0x08027d64
        } else {
          pcb->rtime = 0;
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	2200      	movs	r2, #0
 801904c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	2200      	movs	r2, #0
 8019052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801905c:	2b00      	cmp	r3, #0
 801905e:	d00a      	beq.n	8019076 <tcp_process+0x30a>
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019066:	687a      	ldr	r2, [r7, #4]
 8019068:	6910      	ldr	r0, [r2, #16]
 801906a:	2200      	movs	r2, #0
 801906c:	6879      	ldr	r1, [r7, #4]
 801906e:	4798      	blx	r3
 8019070:	4603      	mov	r3, r0
 8019072:	76bb      	strb	r3, [r7, #26]
 8019074:	e001      	b.n	801907a <tcp_process+0x30e>
 8019076:	2300      	movs	r3, #0
 8019078:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801907a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801907e:	f113 0f0d 	cmn.w	r3, #13
 8019082:	d102      	bne.n	801908a <tcp_process+0x31e>
          return ERR_ABRT;
 8019084:	f06f 030c 	mvn.w	r3, #12
 8019088:	e250      	b.n	801952c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	8b5b      	ldrh	r3, [r3, #26]
 801908e:	f043 0302 	orr.w	r3, r3, #2
 8019092:	b29a      	uxth	r2, r3
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8019098:	e23a      	b.n	8019510 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801909a:	4b9d      	ldr	r3, [pc, #628]	; (8019310 <tcp_process+0x5a4>)
 801909c:	781b      	ldrb	r3, [r3, #0]
 801909e:	f003 0310 	and.w	r3, r3, #16
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	f000 8234 	beq.w	8019510 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80190a8:	4b9a      	ldr	r3, [pc, #616]	; (8019314 <tcp_process+0x5a8>)
 80190aa:	6819      	ldr	r1, [r3, #0]
 80190ac:	4b9a      	ldr	r3, [pc, #616]	; (8019318 <tcp_process+0x5ac>)
 80190ae:	881b      	ldrh	r3, [r3, #0]
 80190b0:	461a      	mov	r2, r3
 80190b2:	4b9a      	ldr	r3, [pc, #616]	; (801931c <tcp_process+0x5b0>)
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80190b8:	4b99      	ldr	r3, [pc, #612]	; (8019320 <tcp_process+0x5b4>)
 80190ba:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80190bc:	885b      	ldrh	r3, [r3, #2]
 80190be:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80190c0:	4a97      	ldr	r2, [pc, #604]	; (8019320 <tcp_process+0x5b4>)
 80190c2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80190c4:	8812      	ldrh	r2, [r2, #0]
 80190c6:	b292      	uxth	r2, r2
 80190c8:	9202      	str	r2, [sp, #8]
 80190ca:	9301      	str	r3, [sp, #4]
 80190cc:	4b95      	ldr	r3, [pc, #596]	; (8019324 <tcp_process+0x5b8>)
 80190ce:	9300      	str	r3, [sp, #0]
 80190d0:	4b95      	ldr	r3, [pc, #596]	; (8019328 <tcp_process+0x5bc>)
 80190d2:	4602      	mov	r2, r0
 80190d4:	6878      	ldr	r0, [r7, #4]
 80190d6:	f003 f8db 	bl	801c290 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80190e0:	2b05      	cmp	r3, #5
 80190e2:	f200 8215 	bhi.w	8019510 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	2200      	movs	r2, #0
 80190ea:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80190ec:	6878      	ldr	r0, [r7, #4]
 80190ee:	f002 fea5 	bl	801be3c <tcp_rexmit_rto>
      break;
 80190f2:	e20d      	b.n	8019510 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80190f4:	4b86      	ldr	r3, [pc, #536]	; (8019310 <tcp_process+0x5a4>)
 80190f6:	781b      	ldrb	r3, [r3, #0]
 80190f8:	f003 0310 	and.w	r3, r3, #16
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	f000 80a1 	beq.w	8019244 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019102:	4b84      	ldr	r3, [pc, #528]	; (8019314 <tcp_process+0x5a8>)
 8019104:	681a      	ldr	r2, [r3, #0]
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801910a:	1ad3      	subs	r3, r2, r3
 801910c:	3b01      	subs	r3, #1
 801910e:	2b00      	cmp	r3, #0
 8019110:	db7e      	blt.n	8019210 <tcp_process+0x4a4>
 8019112:	4b80      	ldr	r3, [pc, #512]	; (8019314 <tcp_process+0x5a8>)
 8019114:	681a      	ldr	r2, [r3, #0]
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801911a:	1ad3      	subs	r3, r2, r3
 801911c:	2b00      	cmp	r3, #0
 801911e:	dc77      	bgt.n	8019210 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	2204      	movs	r2, #4
 8019124:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801912a:	2b00      	cmp	r3, #0
 801912c:	d102      	bne.n	8019134 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801912e:	23fa      	movs	r3, #250	; 0xfa
 8019130:	76bb      	strb	r3, [r7, #26]
 8019132:	e01d      	b.n	8019170 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019138:	699b      	ldr	r3, [r3, #24]
 801913a:	2b00      	cmp	r3, #0
 801913c:	d106      	bne.n	801914c <tcp_process+0x3e0>
 801913e:	4b7b      	ldr	r3, [pc, #492]	; (801932c <tcp_process+0x5c0>)
 8019140:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8019144:	497a      	ldr	r1, [pc, #488]	; (8019330 <tcp_process+0x5c4>)
 8019146:	487b      	ldr	r0, [pc, #492]	; (8019334 <tcp_process+0x5c8>)
 8019148:	f007 fde0 	bl	8020d0c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019150:	699b      	ldr	r3, [r3, #24]
 8019152:	2b00      	cmp	r3, #0
 8019154:	d00a      	beq.n	801916c <tcp_process+0x400>
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801915a:	699b      	ldr	r3, [r3, #24]
 801915c:	687a      	ldr	r2, [r7, #4]
 801915e:	6910      	ldr	r0, [r2, #16]
 8019160:	2200      	movs	r2, #0
 8019162:	6879      	ldr	r1, [r7, #4]
 8019164:	4798      	blx	r3
 8019166:	4603      	mov	r3, r0
 8019168:	76bb      	strb	r3, [r7, #26]
 801916a:	e001      	b.n	8019170 <tcp_process+0x404>
 801916c:	23f0      	movs	r3, #240	; 0xf0
 801916e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8019170:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019174:	2b00      	cmp	r3, #0
 8019176:	d00a      	beq.n	801918e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8019178:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801917c:	f113 0f0d 	cmn.w	r3, #13
 8019180:	d002      	beq.n	8019188 <tcp_process+0x41c>
              tcp_abort(pcb);
 8019182:	6878      	ldr	r0, [r7, #4]
 8019184:	f7fd fbf0 	bl	8016968 <tcp_abort>
            }
            return ERR_ABRT;
 8019188:	f06f 030c 	mvn.w	r3, #12
 801918c:	e1ce      	b.n	801952c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801918e:	6878      	ldr	r0, [r7, #4]
 8019190:	f000 fae0 	bl	8019754 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8019194:	4b68      	ldr	r3, [pc, #416]	; (8019338 <tcp_process+0x5cc>)
 8019196:	881b      	ldrh	r3, [r3, #0]
 8019198:	2b00      	cmp	r3, #0
 801919a:	d005      	beq.n	80191a8 <tcp_process+0x43c>
            recv_acked--;
 801919c:	4b66      	ldr	r3, [pc, #408]	; (8019338 <tcp_process+0x5cc>)
 801919e:	881b      	ldrh	r3, [r3, #0]
 80191a0:	3b01      	subs	r3, #1
 80191a2:	b29a      	uxth	r2, r3
 80191a4:	4b64      	ldr	r3, [pc, #400]	; (8019338 <tcp_process+0x5cc>)
 80191a6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191ac:	009a      	lsls	r2, r3, #2
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191b2:	005b      	lsls	r3, r3, #1
 80191b4:	f241 111c 	movw	r1, #4380	; 0x111c
 80191b8:	428b      	cmp	r3, r1
 80191ba:	bf38      	it	cc
 80191bc:	460b      	movcc	r3, r1
 80191be:	429a      	cmp	r2, r3
 80191c0:	d204      	bcs.n	80191cc <tcp_process+0x460>
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191c6:	009b      	lsls	r3, r3, #2
 80191c8:	b29b      	uxth	r3, r3
 80191ca:	e00d      	b.n	80191e8 <tcp_process+0x47c>
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191d0:	005b      	lsls	r3, r3, #1
 80191d2:	f241 121c 	movw	r2, #4380	; 0x111c
 80191d6:	4293      	cmp	r3, r2
 80191d8:	d904      	bls.n	80191e4 <tcp_process+0x478>
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191de:	005b      	lsls	r3, r3, #1
 80191e0:	b29b      	uxth	r3, r3
 80191e2:	e001      	b.n	80191e8 <tcp_process+0x47c>
 80191e4:	f241 131c 	movw	r3, #4380	; 0x111c
 80191e8:	687a      	ldr	r2, [r7, #4]
 80191ea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80191ee:	4b53      	ldr	r3, [pc, #332]	; (801933c <tcp_process+0x5d0>)
 80191f0:	781b      	ldrb	r3, [r3, #0]
 80191f2:	f003 0320 	and.w	r3, r3, #32
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d037      	beq.n	801926a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	8b5b      	ldrh	r3, [r3, #26]
 80191fe:	f043 0302 	orr.w	r3, r3, #2
 8019202:	b29a      	uxth	r2, r3
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	2207      	movs	r2, #7
 801920c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801920e:	e02c      	b.n	801926a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019210:	4b40      	ldr	r3, [pc, #256]	; (8019314 <tcp_process+0x5a8>)
 8019212:	6819      	ldr	r1, [r3, #0]
 8019214:	4b40      	ldr	r3, [pc, #256]	; (8019318 <tcp_process+0x5ac>)
 8019216:	881b      	ldrh	r3, [r3, #0]
 8019218:	461a      	mov	r2, r3
 801921a:	4b40      	ldr	r3, [pc, #256]	; (801931c <tcp_process+0x5b0>)
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019220:	4b3f      	ldr	r3, [pc, #252]	; (8019320 <tcp_process+0x5b4>)
 8019222:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019224:	885b      	ldrh	r3, [r3, #2]
 8019226:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019228:	4a3d      	ldr	r2, [pc, #244]	; (8019320 <tcp_process+0x5b4>)
 801922a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801922c:	8812      	ldrh	r2, [r2, #0]
 801922e:	b292      	uxth	r2, r2
 8019230:	9202      	str	r2, [sp, #8]
 8019232:	9301      	str	r3, [sp, #4]
 8019234:	4b3b      	ldr	r3, [pc, #236]	; (8019324 <tcp_process+0x5b8>)
 8019236:	9300      	str	r3, [sp, #0]
 8019238:	4b3b      	ldr	r3, [pc, #236]	; (8019328 <tcp_process+0x5bc>)
 801923a:	4602      	mov	r2, r0
 801923c:	6878      	ldr	r0, [r7, #4]
 801923e:	f003 f827 	bl	801c290 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8019242:	e167      	b.n	8019514 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8019244:	4b32      	ldr	r3, [pc, #200]	; (8019310 <tcp_process+0x5a4>)
 8019246:	781b      	ldrb	r3, [r3, #0]
 8019248:	f003 0302 	and.w	r3, r3, #2
 801924c:	2b00      	cmp	r3, #0
 801924e:	f000 8161 	beq.w	8019514 <tcp_process+0x7a8>
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019256:	1e5a      	subs	r2, r3, #1
 8019258:	4b30      	ldr	r3, [pc, #192]	; (801931c <tcp_process+0x5b0>)
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	429a      	cmp	r2, r3
 801925e:	f040 8159 	bne.w	8019514 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8019262:	6878      	ldr	r0, [r7, #4]
 8019264:	f002 fe0c 	bl	801be80 <tcp_rexmit>
      break;
 8019268:	e154      	b.n	8019514 <tcp_process+0x7a8>
 801926a:	e153      	b.n	8019514 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801926c:	6878      	ldr	r0, [r7, #4]
 801926e:	f000 fa71 	bl	8019754 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8019272:	4b32      	ldr	r3, [pc, #200]	; (801933c <tcp_process+0x5d0>)
 8019274:	781b      	ldrb	r3, [r3, #0]
 8019276:	f003 0320 	and.w	r3, r3, #32
 801927a:	2b00      	cmp	r3, #0
 801927c:	f000 814c 	beq.w	8019518 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	8b5b      	ldrh	r3, [r3, #26]
 8019284:	f043 0302 	orr.w	r3, r3, #2
 8019288:	b29a      	uxth	r2, r3
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	2207      	movs	r2, #7
 8019292:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019294:	e140      	b.n	8019518 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8019296:	6878      	ldr	r0, [r7, #4]
 8019298:	f000 fa5c 	bl	8019754 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801929c:	4b27      	ldr	r3, [pc, #156]	; (801933c <tcp_process+0x5d0>)
 801929e:	781b      	ldrb	r3, [r3, #0]
 80192a0:	f003 0320 	and.w	r3, r3, #32
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d071      	beq.n	801938c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80192a8:	4b19      	ldr	r3, [pc, #100]	; (8019310 <tcp_process+0x5a4>)
 80192aa:	781b      	ldrb	r3, [r3, #0]
 80192ac:	f003 0310 	and.w	r3, r3, #16
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d060      	beq.n	8019376 <tcp_process+0x60a>
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80192b8:	4b16      	ldr	r3, [pc, #88]	; (8019314 <tcp_process+0x5a8>)
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	429a      	cmp	r2, r3
 80192be:	d15a      	bne.n	8019376 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d156      	bne.n	8019376 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	8b5b      	ldrh	r3, [r3, #26]
 80192cc:	f043 0302 	orr.w	r3, r3, #2
 80192d0:	b29a      	uxth	r2, r3
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80192d6:	6878      	ldr	r0, [r7, #4]
 80192d8:	f7fe fdbe 	bl	8017e58 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80192dc:	4b18      	ldr	r3, [pc, #96]	; (8019340 <tcp_process+0x5d4>)
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	687a      	ldr	r2, [r7, #4]
 80192e2:	429a      	cmp	r2, r3
 80192e4:	d105      	bne.n	80192f2 <tcp_process+0x586>
 80192e6:	4b16      	ldr	r3, [pc, #88]	; (8019340 <tcp_process+0x5d4>)
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	68db      	ldr	r3, [r3, #12]
 80192ec:	4a14      	ldr	r2, [pc, #80]	; (8019340 <tcp_process+0x5d4>)
 80192ee:	6013      	str	r3, [r2, #0]
 80192f0:	e02e      	b.n	8019350 <tcp_process+0x5e4>
 80192f2:	4b13      	ldr	r3, [pc, #76]	; (8019340 <tcp_process+0x5d4>)
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	617b      	str	r3, [r7, #20]
 80192f8:	e027      	b.n	801934a <tcp_process+0x5de>
 80192fa:	697b      	ldr	r3, [r7, #20]
 80192fc:	68db      	ldr	r3, [r3, #12]
 80192fe:	687a      	ldr	r2, [r7, #4]
 8019300:	429a      	cmp	r2, r3
 8019302:	d11f      	bne.n	8019344 <tcp_process+0x5d8>
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	68da      	ldr	r2, [r3, #12]
 8019308:	697b      	ldr	r3, [r7, #20]
 801930a:	60da      	str	r2, [r3, #12]
 801930c:	e020      	b.n	8019350 <tcp_process+0x5e4>
 801930e:	bf00      	nop
 8019310:	240077f4 	.word	0x240077f4
 8019314:	240077ec 	.word	0x240077ec
 8019318:	240077f2 	.word	0x240077f2
 801931c:	240077e8 	.word	0x240077e8
 8019320:	240077d8 	.word	0x240077d8
 8019324:	24007f78 	.word	0x24007f78
 8019328:	24007f7c 	.word	0x24007f7c
 801932c:	08027aac 	.word	0x08027aac
 8019330:	08027d78 	.word	0x08027d78
 8019334:	08027b24 	.word	0x08027b24
 8019338:	240077f0 	.word	0x240077f0
 801933c:	240077f5 	.word	0x240077f5
 8019340:	2400ae58 	.word	0x2400ae58
 8019344:	697b      	ldr	r3, [r7, #20]
 8019346:	68db      	ldr	r3, [r3, #12]
 8019348:	617b      	str	r3, [r7, #20]
 801934a:	697b      	ldr	r3, [r7, #20]
 801934c:	2b00      	cmp	r3, #0
 801934e:	d1d4      	bne.n	80192fa <tcp_process+0x58e>
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	2200      	movs	r2, #0
 8019354:	60da      	str	r2, [r3, #12]
 8019356:	4b77      	ldr	r3, [pc, #476]	; (8019534 <tcp_process+0x7c8>)
 8019358:	2201      	movs	r2, #1
 801935a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	220a      	movs	r2, #10
 8019360:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8019362:	4b75      	ldr	r3, [pc, #468]	; (8019538 <tcp_process+0x7cc>)
 8019364:	681a      	ldr	r2, [r3, #0]
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	60da      	str	r2, [r3, #12]
 801936a:	4a73      	ldr	r2, [pc, #460]	; (8019538 <tcp_process+0x7cc>)
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	6013      	str	r3, [r2, #0]
 8019370:	f003 f950 	bl	801c614 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8019374:	e0d2      	b.n	801951c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	8b5b      	ldrh	r3, [r3, #26]
 801937a:	f043 0302 	orr.w	r3, r3, #2
 801937e:	b29a      	uxth	r2, r3
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	2208      	movs	r2, #8
 8019388:	751a      	strb	r2, [r3, #20]
      break;
 801938a:	e0c7      	b.n	801951c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801938c:	4b6b      	ldr	r3, [pc, #428]	; (801953c <tcp_process+0x7d0>)
 801938e:	781b      	ldrb	r3, [r3, #0]
 8019390:	f003 0310 	and.w	r3, r3, #16
 8019394:	2b00      	cmp	r3, #0
 8019396:	f000 80c1 	beq.w	801951c <tcp_process+0x7b0>
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801939e:	4b68      	ldr	r3, [pc, #416]	; (8019540 <tcp_process+0x7d4>)
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	429a      	cmp	r2, r3
 80193a4:	f040 80ba 	bne.w	801951c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	f040 80b5 	bne.w	801951c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	2206      	movs	r2, #6
 80193b6:	751a      	strb	r2, [r3, #20]
      break;
 80193b8:	e0b0      	b.n	801951c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80193ba:	6878      	ldr	r0, [r7, #4]
 80193bc:	f000 f9ca 	bl	8019754 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80193c0:	4b60      	ldr	r3, [pc, #384]	; (8019544 <tcp_process+0x7d8>)
 80193c2:	781b      	ldrb	r3, [r3, #0]
 80193c4:	f003 0320 	and.w	r3, r3, #32
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	f000 80a9 	beq.w	8019520 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	8b5b      	ldrh	r3, [r3, #26]
 80193d2:	f043 0302 	orr.w	r3, r3, #2
 80193d6:	b29a      	uxth	r2, r3
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80193dc:	6878      	ldr	r0, [r7, #4]
 80193de:	f7fe fd3b 	bl	8017e58 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80193e2:	4b59      	ldr	r3, [pc, #356]	; (8019548 <tcp_process+0x7dc>)
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	687a      	ldr	r2, [r7, #4]
 80193e8:	429a      	cmp	r2, r3
 80193ea:	d105      	bne.n	80193f8 <tcp_process+0x68c>
 80193ec:	4b56      	ldr	r3, [pc, #344]	; (8019548 <tcp_process+0x7dc>)
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	68db      	ldr	r3, [r3, #12]
 80193f2:	4a55      	ldr	r2, [pc, #340]	; (8019548 <tcp_process+0x7dc>)
 80193f4:	6013      	str	r3, [r2, #0]
 80193f6:	e013      	b.n	8019420 <tcp_process+0x6b4>
 80193f8:	4b53      	ldr	r3, [pc, #332]	; (8019548 <tcp_process+0x7dc>)
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	613b      	str	r3, [r7, #16]
 80193fe:	e00c      	b.n	801941a <tcp_process+0x6ae>
 8019400:	693b      	ldr	r3, [r7, #16]
 8019402:	68db      	ldr	r3, [r3, #12]
 8019404:	687a      	ldr	r2, [r7, #4]
 8019406:	429a      	cmp	r2, r3
 8019408:	d104      	bne.n	8019414 <tcp_process+0x6a8>
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	68da      	ldr	r2, [r3, #12]
 801940e:	693b      	ldr	r3, [r7, #16]
 8019410:	60da      	str	r2, [r3, #12]
 8019412:	e005      	b.n	8019420 <tcp_process+0x6b4>
 8019414:	693b      	ldr	r3, [r7, #16]
 8019416:	68db      	ldr	r3, [r3, #12]
 8019418:	613b      	str	r3, [r7, #16]
 801941a:	693b      	ldr	r3, [r7, #16]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d1ef      	bne.n	8019400 <tcp_process+0x694>
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	2200      	movs	r2, #0
 8019424:	60da      	str	r2, [r3, #12]
 8019426:	4b43      	ldr	r3, [pc, #268]	; (8019534 <tcp_process+0x7c8>)
 8019428:	2201      	movs	r2, #1
 801942a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	220a      	movs	r2, #10
 8019430:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019432:	4b41      	ldr	r3, [pc, #260]	; (8019538 <tcp_process+0x7cc>)
 8019434:	681a      	ldr	r2, [r3, #0]
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	60da      	str	r2, [r3, #12]
 801943a:	4a3f      	ldr	r2, [pc, #252]	; (8019538 <tcp_process+0x7cc>)
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	6013      	str	r3, [r2, #0]
 8019440:	f003 f8e8 	bl	801c614 <tcp_timer_needed>
      }
      break;
 8019444:	e06c      	b.n	8019520 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8019446:	6878      	ldr	r0, [r7, #4]
 8019448:	f000 f984 	bl	8019754 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801944c:	4b3b      	ldr	r3, [pc, #236]	; (801953c <tcp_process+0x7d0>)
 801944e:	781b      	ldrb	r3, [r3, #0]
 8019450:	f003 0310 	and.w	r3, r3, #16
 8019454:	2b00      	cmp	r3, #0
 8019456:	d065      	beq.n	8019524 <tcp_process+0x7b8>
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801945c:	4b38      	ldr	r3, [pc, #224]	; (8019540 <tcp_process+0x7d4>)
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	429a      	cmp	r2, r3
 8019462:	d15f      	bne.n	8019524 <tcp_process+0x7b8>
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019468:	2b00      	cmp	r3, #0
 801946a:	d15b      	bne.n	8019524 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801946c:	6878      	ldr	r0, [r7, #4]
 801946e:	f7fe fcf3 	bl	8017e58 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019472:	4b35      	ldr	r3, [pc, #212]	; (8019548 <tcp_process+0x7dc>)
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	687a      	ldr	r2, [r7, #4]
 8019478:	429a      	cmp	r2, r3
 801947a:	d105      	bne.n	8019488 <tcp_process+0x71c>
 801947c:	4b32      	ldr	r3, [pc, #200]	; (8019548 <tcp_process+0x7dc>)
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	68db      	ldr	r3, [r3, #12]
 8019482:	4a31      	ldr	r2, [pc, #196]	; (8019548 <tcp_process+0x7dc>)
 8019484:	6013      	str	r3, [r2, #0]
 8019486:	e013      	b.n	80194b0 <tcp_process+0x744>
 8019488:	4b2f      	ldr	r3, [pc, #188]	; (8019548 <tcp_process+0x7dc>)
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	60fb      	str	r3, [r7, #12]
 801948e:	e00c      	b.n	80194aa <tcp_process+0x73e>
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	68db      	ldr	r3, [r3, #12]
 8019494:	687a      	ldr	r2, [r7, #4]
 8019496:	429a      	cmp	r2, r3
 8019498:	d104      	bne.n	80194a4 <tcp_process+0x738>
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	68da      	ldr	r2, [r3, #12]
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	60da      	str	r2, [r3, #12]
 80194a2:	e005      	b.n	80194b0 <tcp_process+0x744>
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	68db      	ldr	r3, [r3, #12]
 80194a8:	60fb      	str	r3, [r7, #12]
 80194aa:	68fb      	ldr	r3, [r7, #12]
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d1ef      	bne.n	8019490 <tcp_process+0x724>
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	2200      	movs	r2, #0
 80194b4:	60da      	str	r2, [r3, #12]
 80194b6:	4b1f      	ldr	r3, [pc, #124]	; (8019534 <tcp_process+0x7c8>)
 80194b8:	2201      	movs	r2, #1
 80194ba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	220a      	movs	r2, #10
 80194c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80194c2:	4b1d      	ldr	r3, [pc, #116]	; (8019538 <tcp_process+0x7cc>)
 80194c4:	681a      	ldr	r2, [r3, #0]
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	60da      	str	r2, [r3, #12]
 80194ca:	4a1b      	ldr	r2, [pc, #108]	; (8019538 <tcp_process+0x7cc>)
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	6013      	str	r3, [r2, #0]
 80194d0:	f003 f8a0 	bl	801c614 <tcp_timer_needed>
      }
      break;
 80194d4:	e026      	b.n	8019524 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80194d6:	6878      	ldr	r0, [r7, #4]
 80194d8:	f000 f93c 	bl	8019754 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80194dc:	4b17      	ldr	r3, [pc, #92]	; (801953c <tcp_process+0x7d0>)
 80194de:	781b      	ldrb	r3, [r3, #0]
 80194e0:	f003 0310 	and.w	r3, r3, #16
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d01f      	beq.n	8019528 <tcp_process+0x7bc>
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80194ec:	4b14      	ldr	r3, [pc, #80]	; (8019540 <tcp_process+0x7d4>)
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	429a      	cmp	r2, r3
 80194f2:	d119      	bne.n	8019528 <tcp_process+0x7bc>
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d115      	bne.n	8019528 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80194fc:	4b11      	ldr	r3, [pc, #68]	; (8019544 <tcp_process+0x7d8>)
 80194fe:	781b      	ldrb	r3, [r3, #0]
 8019500:	f043 0310 	orr.w	r3, r3, #16
 8019504:	b2da      	uxtb	r2, r3
 8019506:	4b0f      	ldr	r3, [pc, #60]	; (8019544 <tcp_process+0x7d8>)
 8019508:	701a      	strb	r2, [r3, #0]
      }
      break;
 801950a:	e00d      	b.n	8019528 <tcp_process+0x7bc>
    default:
      break;
 801950c:	bf00      	nop
 801950e:	e00c      	b.n	801952a <tcp_process+0x7be>
      break;
 8019510:	bf00      	nop
 8019512:	e00a      	b.n	801952a <tcp_process+0x7be>
      break;
 8019514:	bf00      	nop
 8019516:	e008      	b.n	801952a <tcp_process+0x7be>
      break;
 8019518:	bf00      	nop
 801951a:	e006      	b.n	801952a <tcp_process+0x7be>
      break;
 801951c:	bf00      	nop
 801951e:	e004      	b.n	801952a <tcp_process+0x7be>
      break;
 8019520:	bf00      	nop
 8019522:	e002      	b.n	801952a <tcp_process+0x7be>
      break;
 8019524:	bf00      	nop
 8019526:	e000      	b.n	801952a <tcp_process+0x7be>
      break;
 8019528:	bf00      	nop
  }
  return ERR_OK;
 801952a:	2300      	movs	r3, #0
}
 801952c:	4618      	mov	r0, r3
 801952e:	3724      	adds	r7, #36	; 0x24
 8019530:	46bd      	mov	sp, r7
 8019532:	bd90      	pop	{r4, r7, pc}
 8019534:	2400ae54 	.word	0x2400ae54
 8019538:	2400ae68 	.word	0x2400ae68
 801953c:	240077f4 	.word	0x240077f4
 8019540:	240077ec 	.word	0x240077ec
 8019544:	240077f5 	.word	0x240077f5
 8019548:	2400ae58 	.word	0x2400ae58

0801954c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801954c:	b590      	push	{r4, r7, lr}
 801954e:	b085      	sub	sp, #20
 8019550:	af00      	add	r7, sp, #0
 8019552:	6078      	str	r0, [r7, #4]
 8019554:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d106      	bne.n	801956a <tcp_oos_insert_segment+0x1e>
 801955c:	4b3b      	ldr	r3, [pc, #236]	; (801964c <tcp_oos_insert_segment+0x100>)
 801955e:	f240 421f 	movw	r2, #1055	; 0x41f
 8019562:	493b      	ldr	r1, [pc, #236]	; (8019650 <tcp_oos_insert_segment+0x104>)
 8019564:	483b      	ldr	r0, [pc, #236]	; (8019654 <tcp_oos_insert_segment+0x108>)
 8019566:	f007 fbd1 	bl	8020d0c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	68db      	ldr	r3, [r3, #12]
 801956e:	899b      	ldrh	r3, [r3, #12]
 8019570:	b29b      	uxth	r3, r3
 8019572:	4618      	mov	r0, r3
 8019574:	f7f8 fcbc 	bl	8011ef0 <lwip_htons>
 8019578:	4603      	mov	r3, r0
 801957a:	b2db      	uxtb	r3, r3
 801957c:	f003 0301 	and.w	r3, r3, #1
 8019580:	2b00      	cmp	r3, #0
 8019582:	d028      	beq.n	80195d6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8019584:	6838      	ldr	r0, [r7, #0]
 8019586:	f7fe f997 	bl	80178b8 <tcp_segs_free>
    next = NULL;
 801958a:	2300      	movs	r3, #0
 801958c:	603b      	str	r3, [r7, #0]
 801958e:	e056      	b.n	801963e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019590:	683b      	ldr	r3, [r7, #0]
 8019592:	68db      	ldr	r3, [r3, #12]
 8019594:	899b      	ldrh	r3, [r3, #12]
 8019596:	b29b      	uxth	r3, r3
 8019598:	4618      	mov	r0, r3
 801959a:	f7f8 fca9 	bl	8011ef0 <lwip_htons>
 801959e:	4603      	mov	r3, r0
 80195a0:	b2db      	uxtb	r3, r3
 80195a2:	f003 0301 	and.w	r3, r3, #1
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d00d      	beq.n	80195c6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	68db      	ldr	r3, [r3, #12]
 80195ae:	899b      	ldrh	r3, [r3, #12]
 80195b0:	b29c      	uxth	r4, r3
 80195b2:	2001      	movs	r0, #1
 80195b4:	f7f8 fc9c 	bl	8011ef0 <lwip_htons>
 80195b8:	4603      	mov	r3, r0
 80195ba:	461a      	mov	r2, r3
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	68db      	ldr	r3, [r3, #12]
 80195c0:	4322      	orrs	r2, r4
 80195c2:	b292      	uxth	r2, r2
 80195c4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80195c6:	683b      	ldr	r3, [r7, #0]
 80195c8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80195ca:	683b      	ldr	r3, [r7, #0]
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80195d0:	68f8      	ldr	r0, [r7, #12]
 80195d2:	f7fe f986 	bl	80178e2 <tcp_seg_free>
    while (next &&
 80195d6:	683b      	ldr	r3, [r7, #0]
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d00e      	beq.n	80195fa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	891b      	ldrh	r3, [r3, #8]
 80195e0:	461a      	mov	r2, r3
 80195e2:	4b1d      	ldr	r3, [pc, #116]	; (8019658 <tcp_oos_insert_segment+0x10c>)
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	441a      	add	r2, r3
 80195e8:	683b      	ldr	r3, [r7, #0]
 80195ea:	68db      	ldr	r3, [r3, #12]
 80195ec:	685b      	ldr	r3, [r3, #4]
 80195ee:	6839      	ldr	r1, [r7, #0]
 80195f0:	8909      	ldrh	r1, [r1, #8]
 80195f2:	440b      	add	r3, r1
 80195f4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	daca      	bge.n	8019590 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80195fa:	683b      	ldr	r3, [r7, #0]
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d01e      	beq.n	801963e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	891b      	ldrh	r3, [r3, #8]
 8019604:	461a      	mov	r2, r3
 8019606:	4b14      	ldr	r3, [pc, #80]	; (8019658 <tcp_oos_insert_segment+0x10c>)
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	441a      	add	r2, r3
 801960c:	683b      	ldr	r3, [r7, #0]
 801960e:	68db      	ldr	r3, [r3, #12]
 8019610:	685b      	ldr	r3, [r3, #4]
 8019612:	1ad3      	subs	r3, r2, r3
    if (next &&
 8019614:	2b00      	cmp	r3, #0
 8019616:	dd12      	ble.n	801963e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019618:	683b      	ldr	r3, [r7, #0]
 801961a:	68db      	ldr	r3, [r3, #12]
 801961c:	685b      	ldr	r3, [r3, #4]
 801961e:	b29a      	uxth	r2, r3
 8019620:	4b0d      	ldr	r3, [pc, #52]	; (8019658 <tcp_oos_insert_segment+0x10c>)
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	b29b      	uxth	r3, r3
 8019626:	1ad3      	subs	r3, r2, r3
 8019628:	b29a      	uxth	r2, r3
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	685a      	ldr	r2, [r3, #4]
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	891b      	ldrh	r3, [r3, #8]
 8019636:	4619      	mov	r1, r3
 8019638:	4610      	mov	r0, r2
 801963a:	f7fc f9cf 	bl	80159dc <pbuf_realloc>
    }
  }
  cseg->next = next;
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	683a      	ldr	r2, [r7, #0]
 8019642:	601a      	str	r2, [r3, #0]
}
 8019644:	bf00      	nop
 8019646:	3714      	adds	r7, #20
 8019648:	46bd      	mov	sp, r7
 801964a:	bd90      	pop	{r4, r7, pc}
 801964c:	08027aac 	.word	0x08027aac
 8019650:	08027d98 	.word	0x08027d98
 8019654:	08027b24 	.word	0x08027b24
 8019658:	240077e8 	.word	0x240077e8

0801965c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801965c:	b5b0      	push	{r4, r5, r7, lr}
 801965e:	b086      	sub	sp, #24
 8019660:	af00      	add	r7, sp, #0
 8019662:	60f8      	str	r0, [r7, #12]
 8019664:	60b9      	str	r1, [r7, #8]
 8019666:	607a      	str	r2, [r7, #4]
 8019668:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801966a:	e03e      	b.n	80196ea <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801966c:	68bb      	ldr	r3, [r7, #8]
 801966e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8019670:	68bb      	ldr	r3, [r7, #8]
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8019676:	697b      	ldr	r3, [r7, #20]
 8019678:	685b      	ldr	r3, [r3, #4]
 801967a:	4618      	mov	r0, r3
 801967c:	f7fc fbbc 	bl	8015df8 <pbuf_clen>
 8019680:	4603      	mov	r3, r0
 8019682:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801968a:	8a7a      	ldrh	r2, [r7, #18]
 801968c:	429a      	cmp	r2, r3
 801968e:	d906      	bls.n	801969e <tcp_free_acked_segments+0x42>
 8019690:	4b2a      	ldr	r3, [pc, #168]	; (801973c <tcp_free_acked_segments+0xe0>)
 8019692:	f240 4257 	movw	r2, #1111	; 0x457
 8019696:	492a      	ldr	r1, [pc, #168]	; (8019740 <tcp_free_acked_segments+0xe4>)
 8019698:	482a      	ldr	r0, [pc, #168]	; (8019744 <tcp_free_acked_segments+0xe8>)
 801969a:	f007 fb37 	bl	8020d0c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80196a4:	8a7b      	ldrh	r3, [r7, #18]
 80196a6:	1ad3      	subs	r3, r2, r3
 80196a8:	b29a      	uxth	r2, r3
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80196b0:	697b      	ldr	r3, [r7, #20]
 80196b2:	891a      	ldrh	r2, [r3, #8]
 80196b4:	4b24      	ldr	r3, [pc, #144]	; (8019748 <tcp_free_acked_segments+0xec>)
 80196b6:	881b      	ldrh	r3, [r3, #0]
 80196b8:	4413      	add	r3, r2
 80196ba:	b29a      	uxth	r2, r3
 80196bc:	4b22      	ldr	r3, [pc, #136]	; (8019748 <tcp_free_acked_segments+0xec>)
 80196be:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80196c0:	6978      	ldr	r0, [r7, #20]
 80196c2:	f7fe f90e 	bl	80178e2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d00c      	beq.n	80196ea <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80196d0:	68bb      	ldr	r3, [r7, #8]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d109      	bne.n	80196ea <tcp_free_acked_segments+0x8e>
 80196d6:	683b      	ldr	r3, [r7, #0]
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d106      	bne.n	80196ea <tcp_free_acked_segments+0x8e>
 80196dc:	4b17      	ldr	r3, [pc, #92]	; (801973c <tcp_free_acked_segments+0xe0>)
 80196de:	f240 4261 	movw	r2, #1121	; 0x461
 80196e2:	491a      	ldr	r1, [pc, #104]	; (801974c <tcp_free_acked_segments+0xf0>)
 80196e4:	4817      	ldr	r0, [pc, #92]	; (8019744 <tcp_free_acked_segments+0xe8>)
 80196e6:	f007 fb11 	bl	8020d0c <iprintf>
  while (seg_list != NULL &&
 80196ea:	68bb      	ldr	r3, [r7, #8]
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d020      	beq.n	8019732 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80196f0:	68bb      	ldr	r3, [r7, #8]
 80196f2:	68db      	ldr	r3, [r3, #12]
 80196f4:	685b      	ldr	r3, [r3, #4]
 80196f6:	4618      	mov	r0, r3
 80196f8:	f7f8 fc0f 	bl	8011f1a <lwip_htonl>
 80196fc:	4604      	mov	r4, r0
 80196fe:	68bb      	ldr	r3, [r7, #8]
 8019700:	891b      	ldrh	r3, [r3, #8]
 8019702:	461d      	mov	r5, r3
 8019704:	68bb      	ldr	r3, [r7, #8]
 8019706:	68db      	ldr	r3, [r3, #12]
 8019708:	899b      	ldrh	r3, [r3, #12]
 801970a:	b29b      	uxth	r3, r3
 801970c:	4618      	mov	r0, r3
 801970e:	f7f8 fbef 	bl	8011ef0 <lwip_htons>
 8019712:	4603      	mov	r3, r0
 8019714:	b2db      	uxtb	r3, r3
 8019716:	f003 0303 	and.w	r3, r3, #3
 801971a:	2b00      	cmp	r3, #0
 801971c:	d001      	beq.n	8019722 <tcp_free_acked_segments+0xc6>
 801971e:	2301      	movs	r3, #1
 8019720:	e000      	b.n	8019724 <tcp_free_acked_segments+0xc8>
 8019722:	2300      	movs	r3, #0
 8019724:	442b      	add	r3, r5
 8019726:	18e2      	adds	r2, r4, r3
 8019728:	4b09      	ldr	r3, [pc, #36]	; (8019750 <tcp_free_acked_segments+0xf4>)
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801972e:	2b00      	cmp	r3, #0
 8019730:	dd9c      	ble.n	801966c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8019732:	68bb      	ldr	r3, [r7, #8]
}
 8019734:	4618      	mov	r0, r3
 8019736:	3718      	adds	r7, #24
 8019738:	46bd      	mov	sp, r7
 801973a:	bdb0      	pop	{r4, r5, r7, pc}
 801973c:	08027aac 	.word	0x08027aac
 8019740:	08027dc0 	.word	0x08027dc0
 8019744:	08027b24 	.word	0x08027b24
 8019748:	240077f0 	.word	0x240077f0
 801974c:	08027de8 	.word	0x08027de8
 8019750:	240077ec 	.word	0x240077ec

08019754 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8019754:	b5b0      	push	{r4, r5, r7, lr}
 8019756:	b094      	sub	sp, #80	; 0x50
 8019758:	af00      	add	r7, sp, #0
 801975a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801975c:	2300      	movs	r3, #0
 801975e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	2b00      	cmp	r3, #0
 8019764:	d106      	bne.n	8019774 <tcp_receive+0x20>
 8019766:	4ba6      	ldr	r3, [pc, #664]	; (8019a00 <tcp_receive+0x2ac>)
 8019768:	f240 427b 	movw	r2, #1147	; 0x47b
 801976c:	49a5      	ldr	r1, [pc, #660]	; (8019a04 <tcp_receive+0x2b0>)
 801976e:	48a6      	ldr	r0, [pc, #664]	; (8019a08 <tcp_receive+0x2b4>)
 8019770:	f007 facc 	bl	8020d0c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	7d1b      	ldrb	r3, [r3, #20]
 8019778:	2b03      	cmp	r3, #3
 801977a:	d806      	bhi.n	801978a <tcp_receive+0x36>
 801977c:	4ba0      	ldr	r3, [pc, #640]	; (8019a00 <tcp_receive+0x2ac>)
 801977e:	f240 427c 	movw	r2, #1148	; 0x47c
 8019782:	49a2      	ldr	r1, [pc, #648]	; (8019a0c <tcp_receive+0x2b8>)
 8019784:	48a0      	ldr	r0, [pc, #640]	; (8019a08 <tcp_receive+0x2b4>)
 8019786:	f007 fac1 	bl	8020d0c <iprintf>

  if (flags & TCP_ACK) {
 801978a:	4ba1      	ldr	r3, [pc, #644]	; (8019a10 <tcp_receive+0x2bc>)
 801978c:	781b      	ldrb	r3, [r3, #0]
 801978e:	f003 0310 	and.w	r3, r3, #16
 8019792:	2b00      	cmp	r3, #0
 8019794:	f000 8263 	beq.w	8019c5e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801979e:	461a      	mov	r2, r3
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80197a4:	4413      	add	r3, r2
 80197a6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80197ac:	4b99      	ldr	r3, [pc, #612]	; (8019a14 <tcp_receive+0x2c0>)
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	1ad3      	subs	r3, r2, r3
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	db1b      	blt.n	80197ee <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80197ba:	4b96      	ldr	r3, [pc, #600]	; (8019a14 <tcp_receive+0x2c0>)
 80197bc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80197be:	429a      	cmp	r2, r3
 80197c0:	d106      	bne.n	80197d0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80197c6:	4b94      	ldr	r3, [pc, #592]	; (8019a18 <tcp_receive+0x2c4>)
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	1ad3      	subs	r3, r2, r3
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	db0e      	blt.n	80197ee <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80197d4:	4b90      	ldr	r3, [pc, #576]	; (8019a18 <tcp_receive+0x2c4>)
 80197d6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197d8:	429a      	cmp	r2, r3
 80197da:	d125      	bne.n	8019828 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80197dc:	4b8f      	ldr	r3, [pc, #572]	; (8019a1c <tcp_receive+0x2c8>)
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	89db      	ldrh	r3, [r3, #14]
 80197e2:	b29a      	uxth	r2, r3
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80197ea:	429a      	cmp	r2, r3
 80197ec:	d91c      	bls.n	8019828 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80197ee:	4b8b      	ldr	r3, [pc, #556]	; (8019a1c <tcp_receive+0x2c8>)
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	89db      	ldrh	r3, [r3, #14]
 80197f4:	b29a      	uxth	r2, r3
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019808:	429a      	cmp	r2, r3
 801980a:	d205      	bcs.n	8019818 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8019818:	4b7e      	ldr	r3, [pc, #504]	; (8019a14 <tcp_receive+0x2c0>)
 801981a:	681a      	ldr	r2, [r3, #0]
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8019820:	4b7d      	ldr	r3, [pc, #500]	; (8019a18 <tcp_receive+0x2c4>)
 8019822:	681a      	ldr	r2, [r3, #0]
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8019828:	4b7b      	ldr	r3, [pc, #492]	; (8019a18 <tcp_receive+0x2c4>)
 801982a:	681a      	ldr	r2, [r3, #0]
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019830:	1ad3      	subs	r3, r2, r3
 8019832:	2b00      	cmp	r3, #0
 8019834:	dc58      	bgt.n	80198e8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8019836:	4b7a      	ldr	r3, [pc, #488]	; (8019a20 <tcp_receive+0x2cc>)
 8019838:	881b      	ldrh	r3, [r3, #0]
 801983a:	2b00      	cmp	r3, #0
 801983c:	d14b      	bne.n	80198d6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019842:	687a      	ldr	r2, [r7, #4]
 8019844:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8019848:	4413      	add	r3, r2
 801984a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801984c:	429a      	cmp	r2, r3
 801984e:	d142      	bne.n	80198d6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019856:	2b00      	cmp	r3, #0
 8019858:	db3d      	blt.n	80198d6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801985e:	4b6e      	ldr	r3, [pc, #440]	; (8019a18 <tcp_receive+0x2c4>)
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	429a      	cmp	r2, r3
 8019864:	d137      	bne.n	80198d6 <tcp_receive+0x182>
              found_dupack = 1;
 8019866:	2301      	movs	r3, #1
 8019868:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019870:	2bff      	cmp	r3, #255	; 0xff
 8019872:	d007      	beq.n	8019884 <tcp_receive+0x130>
                ++pcb->dupacks;
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801987a:	3301      	adds	r3, #1
 801987c:	b2da      	uxtb	r2, r3
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801988a:	2b03      	cmp	r3, #3
 801988c:	d91b      	bls.n	80198c6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019898:	4413      	add	r3, r2
 801989a:	b29a      	uxth	r2, r3
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80198a2:	429a      	cmp	r2, r3
 80198a4:	d30a      	bcc.n	80198bc <tcp_receive+0x168>
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80198b0:	4413      	add	r3, r2
 80198b2:	b29a      	uxth	r2, r3
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80198ba:	e004      	b.n	80198c6 <tcp_receive+0x172>
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80198c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80198cc:	2b02      	cmp	r3, #2
 80198ce:	d902      	bls.n	80198d6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80198d0:	6878      	ldr	r0, [r7, #4]
 80198d2:	f002 fb41 	bl	801bf58 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80198d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80198d8:	2b00      	cmp	r3, #0
 80198da:	f040 8160 	bne.w	8019b9e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	2200      	movs	r2, #0
 80198e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80198e6:	e15a      	b.n	8019b9e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80198e8:	4b4b      	ldr	r3, [pc, #300]	; (8019a18 <tcp_receive+0x2c4>)
 80198ea:	681a      	ldr	r2, [r3, #0]
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198f0:	1ad3      	subs	r3, r2, r3
 80198f2:	3b01      	subs	r3, #1
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	f2c0 814d 	blt.w	8019b94 <tcp_receive+0x440>
 80198fa:	4b47      	ldr	r3, [pc, #284]	; (8019a18 <tcp_receive+0x2c4>)
 80198fc:	681a      	ldr	r2, [r3, #0]
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019902:	1ad3      	subs	r3, r2, r3
 8019904:	2b00      	cmp	r3, #0
 8019906:	f300 8145 	bgt.w	8019b94 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	8b5b      	ldrh	r3, [r3, #26]
 801990e:	f003 0304 	and.w	r3, r3, #4
 8019912:	2b00      	cmp	r3, #0
 8019914:	d010      	beq.n	8019938 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	8b5b      	ldrh	r3, [r3, #26]
 801991a:	f023 0304 	bic.w	r3, r3, #4
 801991e:	b29a      	uxth	r2, r3
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	2200      	movs	r2, #0
 8019934:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	2200      	movs	r2, #0
 801993c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019946:	10db      	asrs	r3, r3, #3
 8019948:	b21b      	sxth	r3, r3
 801994a:	b29a      	uxth	r2, r3
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019952:	b29b      	uxth	r3, r3
 8019954:	4413      	add	r3, r2
 8019956:	b29b      	uxth	r3, r3
 8019958:	b21a      	sxth	r2, r3
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8019960:	4b2d      	ldr	r3, [pc, #180]	; (8019a18 <tcp_receive+0x2c4>)
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	b29a      	uxth	r2, r3
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801996a:	b29b      	uxth	r3, r3
 801996c:	1ad3      	subs	r3, r2, r3
 801996e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	2200      	movs	r2, #0
 8019974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8019978:	4b27      	ldr	r3, [pc, #156]	; (8019a18 <tcp_receive+0x2c4>)
 801997a:	681a      	ldr	r2, [r3, #0]
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	7d1b      	ldrb	r3, [r3, #20]
 8019984:	2b03      	cmp	r3, #3
 8019986:	f240 8096 	bls.w	8019ab6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8019996:	429a      	cmp	r2, r3
 8019998:	d244      	bcs.n	8019a24 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	8b5b      	ldrh	r3, [r3, #26]
 801999e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d001      	beq.n	80199aa <tcp_receive+0x256>
 80199a6:	2301      	movs	r3, #1
 80199a8:	e000      	b.n	80199ac <tcp_receive+0x258>
 80199aa:	2302      	movs	r3, #2
 80199ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80199b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80199b4:	b29a      	uxth	r2, r3
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80199ba:	fb12 f303 	smulbb	r3, r2, r3
 80199be:	b29b      	uxth	r3, r3
 80199c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80199c2:	4293      	cmp	r3, r2
 80199c4:	bf28      	it	cs
 80199c6:	4613      	movcs	r3, r2
 80199c8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80199d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80199d2:	4413      	add	r3, r2
 80199d4:	b29a      	uxth	r2, r3
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80199dc:	429a      	cmp	r2, r3
 80199de:	d309      	bcc.n	80199f4 <tcp_receive+0x2a0>
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80199e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80199e8:	4413      	add	r3, r2
 80199ea:	b29a      	uxth	r2, r3
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80199f2:	e060      	b.n	8019ab6 <tcp_receive+0x362>
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80199fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80199fe:	e05a      	b.n	8019ab6 <tcp_receive+0x362>
 8019a00:	08027aac 	.word	0x08027aac
 8019a04:	08027e08 	.word	0x08027e08
 8019a08:	08027b24 	.word	0x08027b24
 8019a0c:	08027e24 	.word	0x08027e24
 8019a10:	240077f4 	.word	0x240077f4
 8019a14:	240077e8 	.word	0x240077e8
 8019a18:	240077ec 	.word	0x240077ec
 8019a1c:	240077d8 	.word	0x240077d8
 8019a20:	240077f2 	.word	0x240077f2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019a2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019a2c:	4413      	add	r3, r2
 8019a2e:	b29a      	uxth	r2, r3
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8019a36:	429a      	cmp	r2, r3
 8019a38:	d309      	bcc.n	8019a4e <tcp_receive+0x2fa>
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019a40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019a42:	4413      	add	r3, r2
 8019a44:	b29a      	uxth	r2, r3
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8019a4c:	e004      	b.n	8019a58 <tcp_receive+0x304>
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019a54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019a64:	429a      	cmp	r2, r3
 8019a66:	d326      	bcc.n	8019ab6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019a74:	1ad3      	subs	r3, r2, r3
 8019a76:	b29a      	uxth	r2, r3
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019a88:	4413      	add	r3, r2
 8019a8a:	b29a      	uxth	r2, r3
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019a92:	429a      	cmp	r2, r3
 8019a94:	d30a      	bcc.n	8019aac <tcp_receive+0x358>
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019aa0:	4413      	add	r3, r2
 8019aa2:	b29a      	uxth	r2, r3
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019aaa:	e004      	b.n	8019ab6 <tcp_receive+0x362>
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ab2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019abe:	4a98      	ldr	r2, [pc, #608]	; (8019d20 <tcp_receive+0x5cc>)
 8019ac0:	6878      	ldr	r0, [r7, #4]
 8019ac2:	f7ff fdcb 	bl	801965c <tcp_free_acked_segments>
 8019ac6:	4602      	mov	r2, r0
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ad4:	4a93      	ldr	r2, [pc, #588]	; (8019d24 <tcp_receive+0x5d0>)
 8019ad6:	6878      	ldr	r0, [r7, #4]
 8019ad8:	f7ff fdc0 	bl	801965c <tcp_free_acked_segments>
 8019adc:	4602      	mov	r2, r0
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d104      	bne.n	8019af4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019af0:	861a      	strh	r2, [r3, #48]	; 0x30
 8019af2:	e002      	b.n	8019afa <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	2200      	movs	r2, #0
 8019af8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	2200      	movs	r2, #0
 8019afe:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d103      	bne.n	8019b10 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	2200      	movs	r2, #0
 8019b0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8019b16:	4b84      	ldr	r3, [pc, #528]	; (8019d28 <tcp_receive+0x5d4>)
 8019b18:	881b      	ldrh	r3, [r3, #0]
 8019b1a:	4413      	add	r3, r2
 8019b1c:	b29a      	uxth	r2, r3
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	8b5b      	ldrh	r3, [r3, #26]
 8019b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d035      	beq.n	8019b9c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d118      	bne.n	8019b6a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d00c      	beq.n	8019b5a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b48:	68db      	ldr	r3, [r3, #12]
 8019b4a:	685b      	ldr	r3, [r3, #4]
 8019b4c:	4618      	mov	r0, r3
 8019b4e:	f7f8 f9e4 	bl	8011f1a <lwip_htonl>
 8019b52:	4603      	mov	r3, r0
 8019b54:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	dc20      	bgt.n	8019b9c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	8b5b      	ldrh	r3, [r3, #26]
 8019b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019b62:	b29a      	uxth	r2, r3
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019b68:	e018      	b.n	8019b9c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b72:	68db      	ldr	r3, [r3, #12]
 8019b74:	685b      	ldr	r3, [r3, #4]
 8019b76:	4618      	mov	r0, r3
 8019b78:	f7f8 f9cf 	bl	8011f1a <lwip_htonl>
 8019b7c:	4603      	mov	r3, r0
 8019b7e:	1ae3      	subs	r3, r4, r3
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	dc0b      	bgt.n	8019b9c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	8b5b      	ldrh	r3, [r3, #26]
 8019b88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019b8c:	b29a      	uxth	r2, r3
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019b92:	e003      	b.n	8019b9c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8019b94:	6878      	ldr	r0, [r7, #4]
 8019b96:	f002 fbcd 	bl	801c334 <tcp_send_empty_ack>
 8019b9a:	e000      	b.n	8019b9e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019b9c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d05b      	beq.n	8019c5e <tcp_receive+0x50a>
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019baa:	4b60      	ldr	r3, [pc, #384]	; (8019d2c <tcp_receive+0x5d8>)
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	1ad3      	subs	r3, r2, r3
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	da54      	bge.n	8019c5e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019bb4:	4b5e      	ldr	r3, [pc, #376]	; (8019d30 <tcp_receive+0x5dc>)
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	b29a      	uxth	r2, r3
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019bbe:	b29b      	uxth	r3, r3
 8019bc0:	1ad3      	subs	r3, r2, r3
 8019bc2:	b29b      	uxth	r3, r3
 8019bc4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8019bc8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019bd2:	10db      	asrs	r3, r3, #3
 8019bd4:	b21b      	sxth	r3, r3
 8019bd6:	b29b      	uxth	r3, r3
 8019bd8:	1ad3      	subs	r3, r2, r3
 8019bda:	b29b      	uxth	r3, r3
 8019bdc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019be6:	b29a      	uxth	r2, r3
 8019be8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019bec:	4413      	add	r3, r2
 8019bee:	b29b      	uxth	r3, r3
 8019bf0:	b21a      	sxth	r2, r3
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8019bf6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	da05      	bge.n	8019c0a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8019bfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019c02:	425b      	negs	r3, r3
 8019c04:	b29b      	uxth	r3, r3
 8019c06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8019c0a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019c14:	109b      	asrs	r3, r3, #2
 8019c16:	b21b      	sxth	r3, r3
 8019c18:	b29b      	uxth	r3, r3
 8019c1a:	1ad3      	subs	r3, r2, r3
 8019c1c:	b29b      	uxth	r3, r3
 8019c1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019c28:	b29a      	uxth	r2, r3
 8019c2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019c2e:	4413      	add	r3, r2
 8019c30:	b29b      	uxth	r3, r3
 8019c32:	b21a      	sxth	r2, r3
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019c3e:	10db      	asrs	r3, r3, #3
 8019c40:	b21b      	sxth	r3, r3
 8019c42:	b29a      	uxth	r2, r3
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019c4a:	b29b      	uxth	r3, r3
 8019c4c:	4413      	add	r3, r2
 8019c4e:	b29b      	uxth	r3, r3
 8019c50:	b21a      	sxth	r2, r3
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	2200      	movs	r2, #0
 8019c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019c5e:	4b35      	ldr	r3, [pc, #212]	; (8019d34 <tcp_receive+0x5e0>)
 8019c60:	881b      	ldrh	r3, [r3, #0]
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	f000 84e1 	beq.w	801a62a <tcp_receive+0xed6>
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	7d1b      	ldrb	r3, [r3, #20]
 8019c6c:	2b06      	cmp	r3, #6
 8019c6e:	f200 84dc 	bhi.w	801a62a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019c76:	4b30      	ldr	r3, [pc, #192]	; (8019d38 <tcp_receive+0x5e4>)
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	1ad3      	subs	r3, r2, r3
 8019c7c:	3b01      	subs	r3, #1
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	f2c0 808e 	blt.w	8019da0 <tcp_receive+0x64c>
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019c88:	4b2a      	ldr	r3, [pc, #168]	; (8019d34 <tcp_receive+0x5e0>)
 8019c8a:	881b      	ldrh	r3, [r3, #0]
 8019c8c:	4619      	mov	r1, r3
 8019c8e:	4b2a      	ldr	r3, [pc, #168]	; (8019d38 <tcp_receive+0x5e4>)
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	440b      	add	r3, r1
 8019c94:	1ad3      	subs	r3, r2, r3
 8019c96:	3301      	adds	r3, #1
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	f300 8081 	bgt.w	8019da0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019c9e:	4b27      	ldr	r3, [pc, #156]	; (8019d3c <tcp_receive+0x5e8>)
 8019ca0:	685b      	ldr	r3, [r3, #4]
 8019ca2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019ca8:	4b23      	ldr	r3, [pc, #140]	; (8019d38 <tcp_receive+0x5e4>)
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	1ad3      	subs	r3, r2, r3
 8019cae:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019cb0:	4b22      	ldr	r3, [pc, #136]	; (8019d3c <tcp_receive+0x5e8>)
 8019cb2:	685b      	ldr	r3, [r3, #4]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d106      	bne.n	8019cc6 <tcp_receive+0x572>
 8019cb8:	4b21      	ldr	r3, [pc, #132]	; (8019d40 <tcp_receive+0x5ec>)
 8019cba:	f240 5294 	movw	r2, #1428	; 0x594
 8019cbe:	4921      	ldr	r1, [pc, #132]	; (8019d44 <tcp_receive+0x5f0>)
 8019cc0:	4821      	ldr	r0, [pc, #132]	; (8019d48 <tcp_receive+0x5f4>)
 8019cc2:	f007 f823 	bl	8020d0c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8019cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019ccc:	4293      	cmp	r3, r2
 8019cce:	d906      	bls.n	8019cde <tcp_receive+0x58a>
 8019cd0:	4b1b      	ldr	r3, [pc, #108]	; (8019d40 <tcp_receive+0x5ec>)
 8019cd2:	f240 5295 	movw	r2, #1429	; 0x595
 8019cd6:	491d      	ldr	r1, [pc, #116]	; (8019d4c <tcp_receive+0x5f8>)
 8019cd8:	481b      	ldr	r0, [pc, #108]	; (8019d48 <tcp_receive+0x5f4>)
 8019cda:	f007 f817 	bl	8020d0c <iprintf>
      off = (u16_t)off32;
 8019cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ce0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019ce4:	4b15      	ldr	r3, [pc, #84]	; (8019d3c <tcp_receive+0x5e8>)
 8019ce6:	685b      	ldr	r3, [r3, #4]
 8019ce8:	891b      	ldrh	r3, [r3, #8]
 8019cea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019cee:	429a      	cmp	r2, r3
 8019cf0:	d906      	bls.n	8019d00 <tcp_receive+0x5ac>
 8019cf2:	4b13      	ldr	r3, [pc, #76]	; (8019d40 <tcp_receive+0x5ec>)
 8019cf4:	f240 5297 	movw	r2, #1431	; 0x597
 8019cf8:	4915      	ldr	r1, [pc, #84]	; (8019d50 <tcp_receive+0x5fc>)
 8019cfa:	4813      	ldr	r0, [pc, #76]	; (8019d48 <tcp_receive+0x5f4>)
 8019cfc:	f007 f806 	bl	8020d0c <iprintf>
      inseg.len -= off;
 8019d00:	4b0e      	ldr	r3, [pc, #56]	; (8019d3c <tcp_receive+0x5e8>)
 8019d02:	891a      	ldrh	r2, [r3, #8]
 8019d04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019d08:	1ad3      	subs	r3, r2, r3
 8019d0a:	b29a      	uxth	r2, r3
 8019d0c:	4b0b      	ldr	r3, [pc, #44]	; (8019d3c <tcp_receive+0x5e8>)
 8019d0e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019d10:	4b0a      	ldr	r3, [pc, #40]	; (8019d3c <tcp_receive+0x5e8>)
 8019d12:	685b      	ldr	r3, [r3, #4]
 8019d14:	891a      	ldrh	r2, [r3, #8]
 8019d16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019d1a:	1ad3      	subs	r3, r2, r3
 8019d1c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8019d1e:	e029      	b.n	8019d74 <tcp_receive+0x620>
 8019d20:	08027e40 	.word	0x08027e40
 8019d24:	08027e48 	.word	0x08027e48
 8019d28:	240077f0 	.word	0x240077f0
 8019d2c:	240077ec 	.word	0x240077ec
 8019d30:	2400ae5c 	.word	0x2400ae5c
 8019d34:	240077f2 	.word	0x240077f2
 8019d38:	240077e8 	.word	0x240077e8
 8019d3c:	240077c8 	.word	0x240077c8
 8019d40:	08027aac 	.word	0x08027aac
 8019d44:	08027e50 	.word	0x08027e50
 8019d48:	08027b24 	.word	0x08027b24
 8019d4c:	08027e60 	.word	0x08027e60
 8019d50:	08027e70 	.word	0x08027e70
        off -= p->len;
 8019d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d56:	895b      	ldrh	r3, [r3, #10]
 8019d58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019d5c:	1ad3      	subs	r3, r2, r3
 8019d5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8019d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019d66:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8019d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d6a:	2200      	movs	r2, #0
 8019d6c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8019d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8019d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d76:	895b      	ldrh	r3, [r3, #10]
 8019d78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019d7c:	429a      	cmp	r2, r3
 8019d7e:	d8e9      	bhi.n	8019d54 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8019d80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019d84:	4619      	mov	r1, r3
 8019d86:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019d88:	f7fb ff28 	bl	8015bdc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d90:	4a91      	ldr	r2, [pc, #580]	; (8019fd8 <tcp_receive+0x884>)
 8019d92:	6013      	str	r3, [r2, #0]
 8019d94:	4b91      	ldr	r3, [pc, #580]	; (8019fdc <tcp_receive+0x888>)
 8019d96:	68db      	ldr	r3, [r3, #12]
 8019d98:	4a8f      	ldr	r2, [pc, #572]	; (8019fd8 <tcp_receive+0x884>)
 8019d9a:	6812      	ldr	r2, [r2, #0]
 8019d9c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019d9e:	e00d      	b.n	8019dbc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019da0:	4b8d      	ldr	r3, [pc, #564]	; (8019fd8 <tcp_receive+0x884>)
 8019da2:	681a      	ldr	r2, [r3, #0]
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019da8:	1ad3      	subs	r3, r2, r3
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	da06      	bge.n	8019dbc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	8b5b      	ldrh	r3, [r3, #26]
 8019db2:	f043 0302 	orr.w	r3, r3, #2
 8019db6:	b29a      	uxth	r2, r3
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019dbc:	4b86      	ldr	r3, [pc, #536]	; (8019fd8 <tcp_receive+0x884>)
 8019dbe:	681a      	ldr	r2, [r3, #0]
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dc4:	1ad3      	subs	r3, r2, r3
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	f2c0 842a 	blt.w	801a620 <tcp_receive+0xecc>
 8019dcc:	4b82      	ldr	r3, [pc, #520]	; (8019fd8 <tcp_receive+0x884>)
 8019dce:	681a      	ldr	r2, [r3, #0]
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dd4:	6879      	ldr	r1, [r7, #4]
 8019dd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019dd8:	440b      	add	r3, r1
 8019dda:	1ad3      	subs	r3, r2, r3
 8019ddc:	3301      	adds	r3, #1
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	f300 841e 	bgt.w	801a620 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019de8:	4b7b      	ldr	r3, [pc, #492]	; (8019fd8 <tcp_receive+0x884>)
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	429a      	cmp	r2, r3
 8019dee:	f040 829a 	bne.w	801a326 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8019df2:	4b7a      	ldr	r3, [pc, #488]	; (8019fdc <tcp_receive+0x888>)
 8019df4:	891c      	ldrh	r4, [r3, #8]
 8019df6:	4b79      	ldr	r3, [pc, #484]	; (8019fdc <tcp_receive+0x888>)
 8019df8:	68db      	ldr	r3, [r3, #12]
 8019dfa:	899b      	ldrh	r3, [r3, #12]
 8019dfc:	b29b      	uxth	r3, r3
 8019dfe:	4618      	mov	r0, r3
 8019e00:	f7f8 f876 	bl	8011ef0 <lwip_htons>
 8019e04:	4603      	mov	r3, r0
 8019e06:	b2db      	uxtb	r3, r3
 8019e08:	f003 0303 	and.w	r3, r3, #3
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d001      	beq.n	8019e14 <tcp_receive+0x6c0>
 8019e10:	2301      	movs	r3, #1
 8019e12:	e000      	b.n	8019e16 <tcp_receive+0x6c2>
 8019e14:	2300      	movs	r3, #0
 8019e16:	4423      	add	r3, r4
 8019e18:	b29a      	uxth	r2, r3
 8019e1a:	4b71      	ldr	r3, [pc, #452]	; (8019fe0 <tcp_receive+0x88c>)
 8019e1c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019e22:	4b6f      	ldr	r3, [pc, #444]	; (8019fe0 <tcp_receive+0x88c>)
 8019e24:	881b      	ldrh	r3, [r3, #0]
 8019e26:	429a      	cmp	r2, r3
 8019e28:	d275      	bcs.n	8019f16 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019e2a:	4b6c      	ldr	r3, [pc, #432]	; (8019fdc <tcp_receive+0x888>)
 8019e2c:	68db      	ldr	r3, [r3, #12]
 8019e2e:	899b      	ldrh	r3, [r3, #12]
 8019e30:	b29b      	uxth	r3, r3
 8019e32:	4618      	mov	r0, r3
 8019e34:	f7f8 f85c 	bl	8011ef0 <lwip_htons>
 8019e38:	4603      	mov	r3, r0
 8019e3a:	b2db      	uxtb	r3, r3
 8019e3c:	f003 0301 	and.w	r3, r3, #1
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d01f      	beq.n	8019e84 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019e44:	4b65      	ldr	r3, [pc, #404]	; (8019fdc <tcp_receive+0x888>)
 8019e46:	68db      	ldr	r3, [r3, #12]
 8019e48:	899b      	ldrh	r3, [r3, #12]
 8019e4a:	b29b      	uxth	r3, r3
 8019e4c:	b21b      	sxth	r3, r3
 8019e4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019e52:	b21c      	sxth	r4, r3
 8019e54:	4b61      	ldr	r3, [pc, #388]	; (8019fdc <tcp_receive+0x888>)
 8019e56:	68db      	ldr	r3, [r3, #12]
 8019e58:	899b      	ldrh	r3, [r3, #12]
 8019e5a:	b29b      	uxth	r3, r3
 8019e5c:	4618      	mov	r0, r3
 8019e5e:	f7f8 f847 	bl	8011ef0 <lwip_htons>
 8019e62:	4603      	mov	r3, r0
 8019e64:	b2db      	uxtb	r3, r3
 8019e66:	b29b      	uxth	r3, r3
 8019e68:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019e6c:	b29b      	uxth	r3, r3
 8019e6e:	4618      	mov	r0, r3
 8019e70:	f7f8 f83e 	bl	8011ef0 <lwip_htons>
 8019e74:	4603      	mov	r3, r0
 8019e76:	b21b      	sxth	r3, r3
 8019e78:	4323      	orrs	r3, r4
 8019e7a:	b21a      	sxth	r2, r3
 8019e7c:	4b57      	ldr	r3, [pc, #348]	; (8019fdc <tcp_receive+0x888>)
 8019e7e:	68db      	ldr	r3, [r3, #12]
 8019e80:	b292      	uxth	r2, r2
 8019e82:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019e88:	4b54      	ldr	r3, [pc, #336]	; (8019fdc <tcp_receive+0x888>)
 8019e8a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019e8c:	4b53      	ldr	r3, [pc, #332]	; (8019fdc <tcp_receive+0x888>)
 8019e8e:	68db      	ldr	r3, [r3, #12]
 8019e90:	899b      	ldrh	r3, [r3, #12]
 8019e92:	b29b      	uxth	r3, r3
 8019e94:	4618      	mov	r0, r3
 8019e96:	f7f8 f82b 	bl	8011ef0 <lwip_htons>
 8019e9a:	4603      	mov	r3, r0
 8019e9c:	b2db      	uxtb	r3, r3
 8019e9e:	f003 0302 	and.w	r3, r3, #2
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d005      	beq.n	8019eb2 <tcp_receive+0x75e>
            inseg.len -= 1;
 8019ea6:	4b4d      	ldr	r3, [pc, #308]	; (8019fdc <tcp_receive+0x888>)
 8019ea8:	891b      	ldrh	r3, [r3, #8]
 8019eaa:	3b01      	subs	r3, #1
 8019eac:	b29a      	uxth	r2, r3
 8019eae:	4b4b      	ldr	r3, [pc, #300]	; (8019fdc <tcp_receive+0x888>)
 8019eb0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019eb2:	4b4a      	ldr	r3, [pc, #296]	; (8019fdc <tcp_receive+0x888>)
 8019eb4:	685b      	ldr	r3, [r3, #4]
 8019eb6:	4a49      	ldr	r2, [pc, #292]	; (8019fdc <tcp_receive+0x888>)
 8019eb8:	8912      	ldrh	r2, [r2, #8]
 8019eba:	4611      	mov	r1, r2
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f7fb fd8d 	bl	80159dc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019ec2:	4b46      	ldr	r3, [pc, #280]	; (8019fdc <tcp_receive+0x888>)
 8019ec4:	891c      	ldrh	r4, [r3, #8]
 8019ec6:	4b45      	ldr	r3, [pc, #276]	; (8019fdc <tcp_receive+0x888>)
 8019ec8:	68db      	ldr	r3, [r3, #12]
 8019eca:	899b      	ldrh	r3, [r3, #12]
 8019ecc:	b29b      	uxth	r3, r3
 8019ece:	4618      	mov	r0, r3
 8019ed0:	f7f8 f80e 	bl	8011ef0 <lwip_htons>
 8019ed4:	4603      	mov	r3, r0
 8019ed6:	b2db      	uxtb	r3, r3
 8019ed8:	f003 0303 	and.w	r3, r3, #3
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d001      	beq.n	8019ee4 <tcp_receive+0x790>
 8019ee0:	2301      	movs	r3, #1
 8019ee2:	e000      	b.n	8019ee6 <tcp_receive+0x792>
 8019ee4:	2300      	movs	r3, #0
 8019ee6:	4423      	add	r3, r4
 8019ee8:	b29a      	uxth	r2, r3
 8019eea:	4b3d      	ldr	r3, [pc, #244]	; (8019fe0 <tcp_receive+0x88c>)
 8019eec:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019eee:	4b3c      	ldr	r3, [pc, #240]	; (8019fe0 <tcp_receive+0x88c>)
 8019ef0:	881b      	ldrh	r3, [r3, #0]
 8019ef2:	461a      	mov	r2, r3
 8019ef4:	4b38      	ldr	r3, [pc, #224]	; (8019fd8 <tcp_receive+0x884>)
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	441a      	add	r2, r3
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019efe:	6879      	ldr	r1, [r7, #4]
 8019f00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019f02:	440b      	add	r3, r1
 8019f04:	429a      	cmp	r2, r3
 8019f06:	d006      	beq.n	8019f16 <tcp_receive+0x7c2>
 8019f08:	4b36      	ldr	r3, [pc, #216]	; (8019fe4 <tcp_receive+0x890>)
 8019f0a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8019f0e:	4936      	ldr	r1, [pc, #216]	; (8019fe8 <tcp_receive+0x894>)
 8019f10:	4836      	ldr	r0, [pc, #216]	; (8019fec <tcp_receive+0x898>)
 8019f12:	f006 fefb 	bl	8020d0c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	f000 80e7 	beq.w	801a0ee <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019f20:	4b2e      	ldr	r3, [pc, #184]	; (8019fdc <tcp_receive+0x888>)
 8019f22:	68db      	ldr	r3, [r3, #12]
 8019f24:	899b      	ldrh	r3, [r3, #12]
 8019f26:	b29b      	uxth	r3, r3
 8019f28:	4618      	mov	r0, r3
 8019f2a:	f7f7 ffe1 	bl	8011ef0 <lwip_htons>
 8019f2e:	4603      	mov	r3, r0
 8019f30:	b2db      	uxtb	r3, r3
 8019f32:	f003 0301 	and.w	r3, r3, #1
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d010      	beq.n	8019f5c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019f3a:	e00a      	b.n	8019f52 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f40:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f46:	681a      	ldr	r2, [r3, #0]
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8019f4c:	68f8      	ldr	r0, [r7, #12]
 8019f4e:	f7fd fcc8 	bl	80178e2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d1f0      	bne.n	8019f3c <tcp_receive+0x7e8>
 8019f5a:	e0c8      	b.n	801a0ee <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f60:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019f62:	e052      	b.n	801a00a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f66:	68db      	ldr	r3, [r3, #12]
 8019f68:	899b      	ldrh	r3, [r3, #12]
 8019f6a:	b29b      	uxth	r3, r3
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	f7f7 ffbf 	bl	8011ef0 <lwip_htons>
 8019f72:	4603      	mov	r3, r0
 8019f74:	b2db      	uxtb	r3, r3
 8019f76:	f003 0301 	and.w	r3, r3, #1
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d03d      	beq.n	8019ffa <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019f7e:	4b17      	ldr	r3, [pc, #92]	; (8019fdc <tcp_receive+0x888>)
 8019f80:	68db      	ldr	r3, [r3, #12]
 8019f82:	899b      	ldrh	r3, [r3, #12]
 8019f84:	b29b      	uxth	r3, r3
 8019f86:	4618      	mov	r0, r3
 8019f88:	f7f7 ffb2 	bl	8011ef0 <lwip_htons>
 8019f8c:	4603      	mov	r3, r0
 8019f8e:	b2db      	uxtb	r3, r3
 8019f90:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d130      	bne.n	8019ffa <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019f98:	4b10      	ldr	r3, [pc, #64]	; (8019fdc <tcp_receive+0x888>)
 8019f9a:	68db      	ldr	r3, [r3, #12]
 8019f9c:	899b      	ldrh	r3, [r3, #12]
 8019f9e:	b29c      	uxth	r4, r3
 8019fa0:	2001      	movs	r0, #1
 8019fa2:	f7f7 ffa5 	bl	8011ef0 <lwip_htons>
 8019fa6:	4603      	mov	r3, r0
 8019fa8:	461a      	mov	r2, r3
 8019faa:	4b0c      	ldr	r3, [pc, #48]	; (8019fdc <tcp_receive+0x888>)
 8019fac:	68db      	ldr	r3, [r3, #12]
 8019fae:	4322      	orrs	r2, r4
 8019fb0:	b292      	uxth	r2, r2
 8019fb2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019fb4:	4b09      	ldr	r3, [pc, #36]	; (8019fdc <tcp_receive+0x888>)
 8019fb6:	891c      	ldrh	r4, [r3, #8]
 8019fb8:	4b08      	ldr	r3, [pc, #32]	; (8019fdc <tcp_receive+0x888>)
 8019fba:	68db      	ldr	r3, [r3, #12]
 8019fbc:	899b      	ldrh	r3, [r3, #12]
 8019fbe:	b29b      	uxth	r3, r3
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	f7f7 ff95 	bl	8011ef0 <lwip_htons>
 8019fc6:	4603      	mov	r3, r0
 8019fc8:	b2db      	uxtb	r3, r3
 8019fca:	f003 0303 	and.w	r3, r3, #3
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d00e      	beq.n	8019ff0 <tcp_receive+0x89c>
 8019fd2:	2301      	movs	r3, #1
 8019fd4:	e00d      	b.n	8019ff2 <tcp_receive+0x89e>
 8019fd6:	bf00      	nop
 8019fd8:	240077e8 	.word	0x240077e8
 8019fdc:	240077c8 	.word	0x240077c8
 8019fe0:	240077f2 	.word	0x240077f2
 8019fe4:	08027aac 	.word	0x08027aac
 8019fe8:	08027e80 	.word	0x08027e80
 8019fec:	08027b24 	.word	0x08027b24
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	4423      	add	r3, r4
 8019ff4:	b29a      	uxth	r2, r3
 8019ff6:	4b98      	ldr	r3, [pc, #608]	; (801a258 <tcp_receive+0xb04>)
 8019ff8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8019ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ffc:	613b      	str	r3, [r7, #16]
              next = next->next;
 8019ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801a004:	6938      	ldr	r0, [r7, #16]
 801a006:	f7fd fc6c 	bl	80178e2 <tcp_seg_free>
            while (next &&
 801a00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d00e      	beq.n	801a02e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801a010:	4b91      	ldr	r3, [pc, #580]	; (801a258 <tcp_receive+0xb04>)
 801a012:	881b      	ldrh	r3, [r3, #0]
 801a014:	461a      	mov	r2, r3
 801a016:	4b91      	ldr	r3, [pc, #580]	; (801a25c <tcp_receive+0xb08>)
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	441a      	add	r2, r3
 801a01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a01e:	68db      	ldr	r3, [r3, #12]
 801a020:	685b      	ldr	r3, [r3, #4]
 801a022:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a024:	8909      	ldrh	r1, [r1, #8]
 801a026:	440b      	add	r3, r1
 801a028:	1ad3      	subs	r3, r2, r3
            while (next &&
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	da9a      	bge.n	8019f64 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801a02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a030:	2b00      	cmp	r3, #0
 801a032:	d059      	beq.n	801a0e8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801a034:	4b88      	ldr	r3, [pc, #544]	; (801a258 <tcp_receive+0xb04>)
 801a036:	881b      	ldrh	r3, [r3, #0]
 801a038:	461a      	mov	r2, r3
 801a03a:	4b88      	ldr	r3, [pc, #544]	; (801a25c <tcp_receive+0xb08>)
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	441a      	add	r2, r3
 801a040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a042:	68db      	ldr	r3, [r3, #12]
 801a044:	685b      	ldr	r3, [r3, #4]
 801a046:	1ad3      	subs	r3, r2, r3
            if (next &&
 801a048:	2b00      	cmp	r3, #0
 801a04a:	dd4d      	ble.n	801a0e8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801a04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a04e:	68db      	ldr	r3, [r3, #12]
 801a050:	685b      	ldr	r3, [r3, #4]
 801a052:	b29a      	uxth	r2, r3
 801a054:	4b81      	ldr	r3, [pc, #516]	; (801a25c <tcp_receive+0xb08>)
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	b29b      	uxth	r3, r3
 801a05a:	1ad3      	subs	r3, r2, r3
 801a05c:	b29a      	uxth	r2, r3
 801a05e:	4b80      	ldr	r3, [pc, #512]	; (801a260 <tcp_receive+0xb0c>)
 801a060:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a062:	4b7f      	ldr	r3, [pc, #508]	; (801a260 <tcp_receive+0xb0c>)
 801a064:	68db      	ldr	r3, [r3, #12]
 801a066:	899b      	ldrh	r3, [r3, #12]
 801a068:	b29b      	uxth	r3, r3
 801a06a:	4618      	mov	r0, r3
 801a06c:	f7f7 ff40 	bl	8011ef0 <lwip_htons>
 801a070:	4603      	mov	r3, r0
 801a072:	b2db      	uxtb	r3, r3
 801a074:	f003 0302 	and.w	r3, r3, #2
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d005      	beq.n	801a088 <tcp_receive+0x934>
                inseg.len -= 1;
 801a07c:	4b78      	ldr	r3, [pc, #480]	; (801a260 <tcp_receive+0xb0c>)
 801a07e:	891b      	ldrh	r3, [r3, #8]
 801a080:	3b01      	subs	r3, #1
 801a082:	b29a      	uxth	r2, r3
 801a084:	4b76      	ldr	r3, [pc, #472]	; (801a260 <tcp_receive+0xb0c>)
 801a086:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801a088:	4b75      	ldr	r3, [pc, #468]	; (801a260 <tcp_receive+0xb0c>)
 801a08a:	685b      	ldr	r3, [r3, #4]
 801a08c:	4a74      	ldr	r2, [pc, #464]	; (801a260 <tcp_receive+0xb0c>)
 801a08e:	8912      	ldrh	r2, [r2, #8]
 801a090:	4611      	mov	r1, r2
 801a092:	4618      	mov	r0, r3
 801a094:	f7fb fca2 	bl	80159dc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801a098:	4b71      	ldr	r3, [pc, #452]	; (801a260 <tcp_receive+0xb0c>)
 801a09a:	891c      	ldrh	r4, [r3, #8]
 801a09c:	4b70      	ldr	r3, [pc, #448]	; (801a260 <tcp_receive+0xb0c>)
 801a09e:	68db      	ldr	r3, [r3, #12]
 801a0a0:	899b      	ldrh	r3, [r3, #12]
 801a0a2:	b29b      	uxth	r3, r3
 801a0a4:	4618      	mov	r0, r3
 801a0a6:	f7f7 ff23 	bl	8011ef0 <lwip_htons>
 801a0aa:	4603      	mov	r3, r0
 801a0ac:	b2db      	uxtb	r3, r3
 801a0ae:	f003 0303 	and.w	r3, r3, #3
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d001      	beq.n	801a0ba <tcp_receive+0x966>
 801a0b6:	2301      	movs	r3, #1
 801a0b8:	e000      	b.n	801a0bc <tcp_receive+0x968>
 801a0ba:	2300      	movs	r3, #0
 801a0bc:	4423      	add	r3, r4
 801a0be:	b29a      	uxth	r2, r3
 801a0c0:	4b65      	ldr	r3, [pc, #404]	; (801a258 <tcp_receive+0xb04>)
 801a0c2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801a0c4:	4b64      	ldr	r3, [pc, #400]	; (801a258 <tcp_receive+0xb04>)
 801a0c6:	881b      	ldrh	r3, [r3, #0]
 801a0c8:	461a      	mov	r2, r3
 801a0ca:	4b64      	ldr	r3, [pc, #400]	; (801a25c <tcp_receive+0xb08>)
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	441a      	add	r2, r3
 801a0d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0d2:	68db      	ldr	r3, [r3, #12]
 801a0d4:	685b      	ldr	r3, [r3, #4]
 801a0d6:	429a      	cmp	r2, r3
 801a0d8:	d006      	beq.n	801a0e8 <tcp_receive+0x994>
 801a0da:	4b62      	ldr	r3, [pc, #392]	; (801a264 <tcp_receive+0xb10>)
 801a0dc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801a0e0:	4961      	ldr	r1, [pc, #388]	; (801a268 <tcp_receive+0xb14>)
 801a0e2:	4862      	ldr	r0, [pc, #392]	; (801a26c <tcp_receive+0xb18>)
 801a0e4:	f006 fe12 	bl	8020d0c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a0ec:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801a0ee:	4b5a      	ldr	r3, [pc, #360]	; (801a258 <tcp_receive+0xb04>)
 801a0f0:	881b      	ldrh	r3, [r3, #0]
 801a0f2:	461a      	mov	r2, r3
 801a0f4:	4b59      	ldr	r3, [pc, #356]	; (801a25c <tcp_receive+0xb08>)
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	441a      	add	r2, r3
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a102:	4b55      	ldr	r3, [pc, #340]	; (801a258 <tcp_receive+0xb04>)
 801a104:	881b      	ldrh	r3, [r3, #0]
 801a106:	429a      	cmp	r2, r3
 801a108:	d206      	bcs.n	801a118 <tcp_receive+0x9c4>
 801a10a:	4b56      	ldr	r3, [pc, #344]	; (801a264 <tcp_receive+0xb10>)
 801a10c:	f240 6207 	movw	r2, #1543	; 0x607
 801a110:	4957      	ldr	r1, [pc, #348]	; (801a270 <tcp_receive+0xb1c>)
 801a112:	4856      	ldr	r0, [pc, #344]	; (801a26c <tcp_receive+0xb18>)
 801a114:	f006 fdfa 	bl	8020d0c <iprintf>
        pcb->rcv_wnd -= tcplen;
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a11c:	4b4e      	ldr	r3, [pc, #312]	; (801a258 <tcp_receive+0xb04>)
 801a11e:	881b      	ldrh	r3, [r3, #0]
 801a120:	1ad3      	subs	r3, r2, r3
 801a122:	b29a      	uxth	r2, r3
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801a128:	6878      	ldr	r0, [r7, #4]
 801a12a:	f7fc fd9d 	bl	8016c68 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801a12e:	4b4c      	ldr	r3, [pc, #304]	; (801a260 <tcp_receive+0xb0c>)
 801a130:	685b      	ldr	r3, [r3, #4]
 801a132:	891b      	ldrh	r3, [r3, #8]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d006      	beq.n	801a146 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801a138:	4b49      	ldr	r3, [pc, #292]	; (801a260 <tcp_receive+0xb0c>)
 801a13a:	685b      	ldr	r3, [r3, #4]
 801a13c:	4a4d      	ldr	r2, [pc, #308]	; (801a274 <tcp_receive+0xb20>)
 801a13e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801a140:	4b47      	ldr	r3, [pc, #284]	; (801a260 <tcp_receive+0xb0c>)
 801a142:	2200      	movs	r2, #0
 801a144:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a146:	4b46      	ldr	r3, [pc, #280]	; (801a260 <tcp_receive+0xb0c>)
 801a148:	68db      	ldr	r3, [r3, #12]
 801a14a:	899b      	ldrh	r3, [r3, #12]
 801a14c:	b29b      	uxth	r3, r3
 801a14e:	4618      	mov	r0, r3
 801a150:	f7f7 fece 	bl	8011ef0 <lwip_htons>
 801a154:	4603      	mov	r3, r0
 801a156:	b2db      	uxtb	r3, r3
 801a158:	f003 0301 	and.w	r3, r3, #1
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	f000 80b8 	beq.w	801a2d2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801a162:	4b45      	ldr	r3, [pc, #276]	; (801a278 <tcp_receive+0xb24>)
 801a164:	781b      	ldrb	r3, [r3, #0]
 801a166:	f043 0320 	orr.w	r3, r3, #32
 801a16a:	b2da      	uxtb	r2, r3
 801a16c:	4b42      	ldr	r3, [pc, #264]	; (801a278 <tcp_receive+0xb24>)
 801a16e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801a170:	e0af      	b.n	801a2d2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a176:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a17c:	68db      	ldr	r3, [r3, #12]
 801a17e:	685b      	ldr	r3, [r3, #4]
 801a180:	4a36      	ldr	r2, [pc, #216]	; (801a25c <tcp_receive+0xb08>)
 801a182:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a184:	68bb      	ldr	r3, [r7, #8]
 801a186:	891b      	ldrh	r3, [r3, #8]
 801a188:	461c      	mov	r4, r3
 801a18a:	68bb      	ldr	r3, [r7, #8]
 801a18c:	68db      	ldr	r3, [r3, #12]
 801a18e:	899b      	ldrh	r3, [r3, #12]
 801a190:	b29b      	uxth	r3, r3
 801a192:	4618      	mov	r0, r3
 801a194:	f7f7 feac 	bl	8011ef0 <lwip_htons>
 801a198:	4603      	mov	r3, r0
 801a19a:	b2db      	uxtb	r3, r3
 801a19c:	f003 0303 	and.w	r3, r3, #3
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d001      	beq.n	801a1a8 <tcp_receive+0xa54>
 801a1a4:	2301      	movs	r3, #1
 801a1a6:	e000      	b.n	801a1aa <tcp_receive+0xa56>
 801a1a8:	2300      	movs	r3, #0
 801a1aa:	191a      	adds	r2, r3, r4
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1b0:	441a      	add	r2, r3
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a1ba:	461c      	mov	r4, r3
 801a1bc:	68bb      	ldr	r3, [r7, #8]
 801a1be:	891b      	ldrh	r3, [r3, #8]
 801a1c0:	461d      	mov	r5, r3
 801a1c2:	68bb      	ldr	r3, [r7, #8]
 801a1c4:	68db      	ldr	r3, [r3, #12]
 801a1c6:	899b      	ldrh	r3, [r3, #12]
 801a1c8:	b29b      	uxth	r3, r3
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	f7f7 fe90 	bl	8011ef0 <lwip_htons>
 801a1d0:	4603      	mov	r3, r0
 801a1d2:	b2db      	uxtb	r3, r3
 801a1d4:	f003 0303 	and.w	r3, r3, #3
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d001      	beq.n	801a1e0 <tcp_receive+0xa8c>
 801a1dc:	2301      	movs	r3, #1
 801a1de:	e000      	b.n	801a1e2 <tcp_receive+0xa8e>
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	442b      	add	r3, r5
 801a1e4:	429c      	cmp	r4, r3
 801a1e6:	d206      	bcs.n	801a1f6 <tcp_receive+0xaa2>
 801a1e8:	4b1e      	ldr	r3, [pc, #120]	; (801a264 <tcp_receive+0xb10>)
 801a1ea:	f240 622b 	movw	r2, #1579	; 0x62b
 801a1ee:	4923      	ldr	r1, [pc, #140]	; (801a27c <tcp_receive+0xb28>)
 801a1f0:	481e      	ldr	r0, [pc, #120]	; (801a26c <tcp_receive+0xb18>)
 801a1f2:	f006 fd8b 	bl	8020d0c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a1f6:	68bb      	ldr	r3, [r7, #8]
 801a1f8:	891b      	ldrh	r3, [r3, #8]
 801a1fa:	461c      	mov	r4, r3
 801a1fc:	68bb      	ldr	r3, [r7, #8]
 801a1fe:	68db      	ldr	r3, [r3, #12]
 801a200:	899b      	ldrh	r3, [r3, #12]
 801a202:	b29b      	uxth	r3, r3
 801a204:	4618      	mov	r0, r3
 801a206:	f7f7 fe73 	bl	8011ef0 <lwip_htons>
 801a20a:	4603      	mov	r3, r0
 801a20c:	b2db      	uxtb	r3, r3
 801a20e:	f003 0303 	and.w	r3, r3, #3
 801a212:	2b00      	cmp	r3, #0
 801a214:	d001      	beq.n	801a21a <tcp_receive+0xac6>
 801a216:	2301      	movs	r3, #1
 801a218:	e000      	b.n	801a21c <tcp_receive+0xac8>
 801a21a:	2300      	movs	r3, #0
 801a21c:	1919      	adds	r1, r3, r4
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a222:	b28b      	uxth	r3, r1
 801a224:	1ad3      	subs	r3, r2, r3
 801a226:	b29a      	uxth	r2, r3
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801a22c:	6878      	ldr	r0, [r7, #4]
 801a22e:	f7fc fd1b 	bl	8016c68 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801a232:	68bb      	ldr	r3, [r7, #8]
 801a234:	685b      	ldr	r3, [r3, #4]
 801a236:	891b      	ldrh	r3, [r3, #8]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d028      	beq.n	801a28e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801a23c:	4b0d      	ldr	r3, [pc, #52]	; (801a274 <tcp_receive+0xb20>)
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	2b00      	cmp	r3, #0
 801a242:	d01d      	beq.n	801a280 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801a244:	4b0b      	ldr	r3, [pc, #44]	; (801a274 <tcp_receive+0xb20>)
 801a246:	681a      	ldr	r2, [r3, #0]
 801a248:	68bb      	ldr	r3, [r7, #8]
 801a24a:	685b      	ldr	r3, [r3, #4]
 801a24c:	4619      	mov	r1, r3
 801a24e:	4610      	mov	r0, r2
 801a250:	f7fb fe0c 	bl	8015e6c <pbuf_cat>
 801a254:	e018      	b.n	801a288 <tcp_receive+0xb34>
 801a256:	bf00      	nop
 801a258:	240077f2 	.word	0x240077f2
 801a25c:	240077e8 	.word	0x240077e8
 801a260:	240077c8 	.word	0x240077c8
 801a264:	08027aac 	.word	0x08027aac
 801a268:	08027eb8 	.word	0x08027eb8
 801a26c:	08027b24 	.word	0x08027b24
 801a270:	08027ef4 	.word	0x08027ef4
 801a274:	240077f8 	.word	0x240077f8
 801a278:	240077f5 	.word	0x240077f5
 801a27c:	08027f14 	.word	0x08027f14
            } else {
              recv_data = cseg->p;
 801a280:	68bb      	ldr	r3, [r7, #8]
 801a282:	685b      	ldr	r3, [r3, #4]
 801a284:	4a70      	ldr	r2, [pc, #448]	; (801a448 <tcp_receive+0xcf4>)
 801a286:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801a288:	68bb      	ldr	r3, [r7, #8]
 801a28a:	2200      	movs	r2, #0
 801a28c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a28e:	68bb      	ldr	r3, [r7, #8]
 801a290:	68db      	ldr	r3, [r3, #12]
 801a292:	899b      	ldrh	r3, [r3, #12]
 801a294:	b29b      	uxth	r3, r3
 801a296:	4618      	mov	r0, r3
 801a298:	f7f7 fe2a 	bl	8011ef0 <lwip_htons>
 801a29c:	4603      	mov	r3, r0
 801a29e:	b2db      	uxtb	r3, r3
 801a2a0:	f003 0301 	and.w	r3, r3, #1
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	d00d      	beq.n	801a2c4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801a2a8:	4b68      	ldr	r3, [pc, #416]	; (801a44c <tcp_receive+0xcf8>)
 801a2aa:	781b      	ldrb	r3, [r3, #0]
 801a2ac:	f043 0320 	orr.w	r3, r3, #32
 801a2b0:	b2da      	uxtb	r2, r3
 801a2b2:	4b66      	ldr	r3, [pc, #408]	; (801a44c <tcp_receive+0xcf8>)
 801a2b4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	7d1b      	ldrb	r3, [r3, #20]
 801a2ba:	2b04      	cmp	r3, #4
 801a2bc:	d102      	bne.n	801a2c4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	2207      	movs	r2, #7
 801a2c2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801a2c4:	68bb      	ldr	r3, [r7, #8]
 801a2c6:	681a      	ldr	r2, [r3, #0]
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801a2cc:	68b8      	ldr	r0, [r7, #8]
 801a2ce:	f7fd fb08 	bl	80178e2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d008      	beq.n	801a2ec <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a2de:	68db      	ldr	r3, [r3, #12]
 801a2e0:	685a      	ldr	r2, [r3, #4]
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801a2e6:	429a      	cmp	r2, r3
 801a2e8:	f43f af43 	beq.w	801a172 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	8b5b      	ldrh	r3, [r3, #26]
 801a2f0:	f003 0301 	and.w	r3, r3, #1
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d00e      	beq.n	801a316 <tcp_receive+0xbc2>
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	8b5b      	ldrh	r3, [r3, #26]
 801a2fc:	f023 0301 	bic.w	r3, r3, #1
 801a300:	b29a      	uxth	r2, r3
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	835a      	strh	r2, [r3, #26]
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	8b5b      	ldrh	r3, [r3, #26]
 801a30a:	f043 0302 	orr.w	r3, r3, #2
 801a30e:	b29a      	uxth	r2, r3
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a314:	e188      	b.n	801a628 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	8b5b      	ldrh	r3, [r3, #26]
 801a31a:	f043 0301 	orr.w	r3, r3, #1
 801a31e:	b29a      	uxth	r2, r3
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a324:	e180      	b.n	801a628 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d106      	bne.n	801a33c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a32e:	4848      	ldr	r0, [pc, #288]	; (801a450 <tcp_receive+0xcfc>)
 801a330:	f7fd faf0 	bl	8017914 <tcp_seg_copy>
 801a334:	4602      	mov	r2, r0
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	675a      	str	r2, [r3, #116]	; 0x74
 801a33a:	e16d      	b.n	801a618 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801a33c:	2300      	movs	r3, #0
 801a33e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a344:	63bb      	str	r3, [r7, #56]	; 0x38
 801a346:	e157      	b.n	801a5f8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801a348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a34a:	68db      	ldr	r3, [r3, #12]
 801a34c:	685a      	ldr	r2, [r3, #4]
 801a34e:	4b41      	ldr	r3, [pc, #260]	; (801a454 <tcp_receive+0xd00>)
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	429a      	cmp	r2, r3
 801a354:	d11d      	bne.n	801a392 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801a356:	4b3e      	ldr	r3, [pc, #248]	; (801a450 <tcp_receive+0xcfc>)
 801a358:	891a      	ldrh	r2, [r3, #8]
 801a35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a35c:	891b      	ldrh	r3, [r3, #8]
 801a35e:	429a      	cmp	r2, r3
 801a360:	f240 814f 	bls.w	801a602 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a364:	483a      	ldr	r0, [pc, #232]	; (801a450 <tcp_receive+0xcfc>)
 801a366:	f7fd fad5 	bl	8017914 <tcp_seg_copy>
 801a36a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801a36c:	697b      	ldr	r3, [r7, #20]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	f000 8149 	beq.w	801a606 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801a374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a376:	2b00      	cmp	r3, #0
 801a378:	d003      	beq.n	801a382 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801a37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a37c:	697a      	ldr	r2, [r7, #20]
 801a37e:	601a      	str	r2, [r3, #0]
 801a380:	e002      	b.n	801a388 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	697a      	ldr	r2, [r7, #20]
 801a386:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801a388:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a38a:	6978      	ldr	r0, [r7, #20]
 801a38c:	f7ff f8de 	bl	801954c <tcp_oos_insert_segment>
                }
                break;
 801a390:	e139      	b.n	801a606 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801a392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a394:	2b00      	cmp	r3, #0
 801a396:	d117      	bne.n	801a3c8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a398:	4b2e      	ldr	r3, [pc, #184]	; (801a454 <tcp_receive+0xd00>)
 801a39a:	681a      	ldr	r2, [r3, #0]
 801a39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a39e:	68db      	ldr	r3, [r3, #12]
 801a3a0:	685b      	ldr	r3, [r3, #4]
 801a3a2:	1ad3      	subs	r3, r2, r3
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	da57      	bge.n	801a458 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a3a8:	4829      	ldr	r0, [pc, #164]	; (801a450 <tcp_receive+0xcfc>)
 801a3aa:	f7fd fab3 	bl	8017914 <tcp_seg_copy>
 801a3ae:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801a3b0:	69bb      	ldr	r3, [r7, #24]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	f000 8129 	beq.w	801a60a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	69ba      	ldr	r2, [r7, #24]
 801a3bc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801a3be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a3c0:	69b8      	ldr	r0, [r7, #24]
 801a3c2:	f7ff f8c3 	bl	801954c <tcp_oos_insert_segment>
                  }
                  break;
 801a3c6:	e120      	b.n	801a60a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801a3c8:	4b22      	ldr	r3, [pc, #136]	; (801a454 <tcp_receive+0xd00>)
 801a3ca:	681a      	ldr	r2, [r3, #0]
 801a3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3ce:	68db      	ldr	r3, [r3, #12]
 801a3d0:	685b      	ldr	r3, [r3, #4]
 801a3d2:	1ad3      	subs	r3, r2, r3
 801a3d4:	3b01      	subs	r3, #1
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	db3e      	blt.n	801a458 <tcp_receive+0xd04>
 801a3da:	4b1e      	ldr	r3, [pc, #120]	; (801a454 <tcp_receive+0xd00>)
 801a3dc:	681a      	ldr	r2, [r3, #0]
 801a3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3e0:	68db      	ldr	r3, [r3, #12]
 801a3e2:	685b      	ldr	r3, [r3, #4]
 801a3e4:	1ad3      	subs	r3, r2, r3
 801a3e6:	3301      	adds	r3, #1
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	dc35      	bgt.n	801a458 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a3ec:	4818      	ldr	r0, [pc, #96]	; (801a450 <tcp_receive+0xcfc>)
 801a3ee:	f7fd fa91 	bl	8017914 <tcp_seg_copy>
 801a3f2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801a3f4:	69fb      	ldr	r3, [r7, #28]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	f000 8109 	beq.w	801a60e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3fe:	68db      	ldr	r3, [r3, #12]
 801a400:	685b      	ldr	r3, [r3, #4]
 801a402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a404:	8912      	ldrh	r2, [r2, #8]
 801a406:	441a      	add	r2, r3
 801a408:	4b12      	ldr	r3, [pc, #72]	; (801a454 <tcp_receive+0xd00>)
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	1ad3      	subs	r3, r2, r3
 801a40e:	2b00      	cmp	r3, #0
 801a410:	dd12      	ble.n	801a438 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a412:	4b10      	ldr	r3, [pc, #64]	; (801a454 <tcp_receive+0xd00>)
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	b29a      	uxth	r2, r3
 801a418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a41a:	68db      	ldr	r3, [r3, #12]
 801a41c:	685b      	ldr	r3, [r3, #4]
 801a41e:	b29b      	uxth	r3, r3
 801a420:	1ad3      	subs	r3, r2, r3
 801a422:	b29a      	uxth	r2, r3
 801a424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a426:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a42a:	685a      	ldr	r2, [r3, #4]
 801a42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a42e:	891b      	ldrh	r3, [r3, #8]
 801a430:	4619      	mov	r1, r3
 801a432:	4610      	mov	r0, r2
 801a434:	f7fb fad2 	bl	80159dc <pbuf_realloc>
                    }
                    prev->next = cseg;
 801a438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a43a:	69fa      	ldr	r2, [r7, #28]
 801a43c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a43e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a440:	69f8      	ldr	r0, [r7, #28]
 801a442:	f7ff f883 	bl	801954c <tcp_oos_insert_segment>
                  }
                  break;
 801a446:	e0e2      	b.n	801a60e <tcp_receive+0xeba>
 801a448:	240077f8 	.word	0x240077f8
 801a44c:	240077f5 	.word	0x240077f5
 801a450:	240077c8 	.word	0x240077c8
 801a454:	240077e8 	.word	0x240077e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a45a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801a45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	2b00      	cmp	r3, #0
 801a462:	f040 80c6 	bne.w	801a5f2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a466:	4b80      	ldr	r3, [pc, #512]	; (801a668 <tcp_receive+0xf14>)
 801a468:	681a      	ldr	r2, [r3, #0]
 801a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a46c:	68db      	ldr	r3, [r3, #12]
 801a46e:	685b      	ldr	r3, [r3, #4]
 801a470:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801a472:	2b00      	cmp	r3, #0
 801a474:	f340 80bd 	ble.w	801a5f2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a47a:	68db      	ldr	r3, [r3, #12]
 801a47c:	899b      	ldrh	r3, [r3, #12]
 801a47e:	b29b      	uxth	r3, r3
 801a480:	4618      	mov	r0, r3
 801a482:	f7f7 fd35 	bl	8011ef0 <lwip_htons>
 801a486:	4603      	mov	r3, r0
 801a488:	b2db      	uxtb	r3, r3
 801a48a:	f003 0301 	and.w	r3, r3, #1
 801a48e:	2b00      	cmp	r3, #0
 801a490:	f040 80bf 	bne.w	801a612 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801a494:	4875      	ldr	r0, [pc, #468]	; (801a66c <tcp_receive+0xf18>)
 801a496:	f7fd fa3d 	bl	8017914 <tcp_seg_copy>
 801a49a:	4602      	mov	r2, r0
 801a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a49e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	f000 80b6 	beq.w	801a616 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4ac:	68db      	ldr	r3, [r3, #12]
 801a4ae:	685b      	ldr	r3, [r3, #4]
 801a4b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a4b2:	8912      	ldrh	r2, [r2, #8]
 801a4b4:	441a      	add	r2, r3
 801a4b6:	4b6c      	ldr	r3, [pc, #432]	; (801a668 <tcp_receive+0xf14>)
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	1ad3      	subs	r3, r2, r3
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	dd12      	ble.n	801a4e6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a4c0:	4b69      	ldr	r3, [pc, #420]	; (801a668 <tcp_receive+0xf14>)
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	b29a      	uxth	r2, r3
 801a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4c8:	68db      	ldr	r3, [r3, #12]
 801a4ca:	685b      	ldr	r3, [r3, #4]
 801a4cc:	b29b      	uxth	r3, r3
 801a4ce:	1ad3      	subs	r3, r2, r3
 801a4d0:	b29a      	uxth	r2, r3
 801a4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4d4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4d8:	685a      	ldr	r2, [r3, #4]
 801a4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4dc:	891b      	ldrh	r3, [r3, #8]
 801a4de:	4619      	mov	r1, r3
 801a4e0:	4610      	mov	r0, r2
 801a4e2:	f7fb fa7b 	bl	80159dc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a4e6:	4b62      	ldr	r3, [pc, #392]	; (801a670 <tcp_receive+0xf1c>)
 801a4e8:	881b      	ldrh	r3, [r3, #0]
 801a4ea:	461a      	mov	r2, r3
 801a4ec:	4b5e      	ldr	r3, [pc, #376]	; (801a668 <tcp_receive+0xf14>)
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	441a      	add	r2, r3
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4f6:	6879      	ldr	r1, [r7, #4]
 801a4f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a4fa:	440b      	add	r3, r1
 801a4fc:	1ad3      	subs	r3, r2, r3
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	f340 8089 	ble.w	801a616 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a506:	681b      	ldr	r3, [r3, #0]
 801a508:	68db      	ldr	r3, [r3, #12]
 801a50a:	899b      	ldrh	r3, [r3, #12]
 801a50c:	b29b      	uxth	r3, r3
 801a50e:	4618      	mov	r0, r3
 801a510:	f7f7 fcee 	bl	8011ef0 <lwip_htons>
 801a514:	4603      	mov	r3, r0
 801a516:	b2db      	uxtb	r3, r3
 801a518:	f003 0301 	and.w	r3, r3, #1
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d022      	beq.n	801a566 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	68db      	ldr	r3, [r3, #12]
 801a526:	899b      	ldrh	r3, [r3, #12]
 801a528:	b29b      	uxth	r3, r3
 801a52a:	b21b      	sxth	r3, r3
 801a52c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a530:	b21c      	sxth	r4, r3
 801a532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	68db      	ldr	r3, [r3, #12]
 801a538:	899b      	ldrh	r3, [r3, #12]
 801a53a:	b29b      	uxth	r3, r3
 801a53c:	4618      	mov	r0, r3
 801a53e:	f7f7 fcd7 	bl	8011ef0 <lwip_htons>
 801a542:	4603      	mov	r3, r0
 801a544:	b2db      	uxtb	r3, r3
 801a546:	b29b      	uxth	r3, r3
 801a548:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a54c:	b29b      	uxth	r3, r3
 801a54e:	4618      	mov	r0, r3
 801a550:	f7f7 fcce 	bl	8011ef0 <lwip_htons>
 801a554:	4603      	mov	r3, r0
 801a556:	b21b      	sxth	r3, r3
 801a558:	4323      	orrs	r3, r4
 801a55a:	b21a      	sxth	r2, r3
 801a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	68db      	ldr	r3, [r3, #12]
 801a562:	b292      	uxth	r2, r2
 801a564:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a56a:	b29a      	uxth	r2, r3
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a570:	4413      	add	r3, r2
 801a572:	b299      	uxth	r1, r3
 801a574:	4b3c      	ldr	r3, [pc, #240]	; (801a668 <tcp_receive+0xf14>)
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	b29a      	uxth	r2, r3
 801a57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	1a8a      	subs	r2, r1, r2
 801a580:	b292      	uxth	r2, r2
 801a582:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	685a      	ldr	r2, [r3, #4]
 801a58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	891b      	ldrh	r3, [r3, #8]
 801a590:	4619      	mov	r1, r3
 801a592:	4610      	mov	r0, r2
 801a594:	f7fb fa22 	bl	80159dc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	891c      	ldrh	r4, [r3, #8]
 801a59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	68db      	ldr	r3, [r3, #12]
 801a5a4:	899b      	ldrh	r3, [r3, #12]
 801a5a6:	b29b      	uxth	r3, r3
 801a5a8:	4618      	mov	r0, r3
 801a5aa:	f7f7 fca1 	bl	8011ef0 <lwip_htons>
 801a5ae:	4603      	mov	r3, r0
 801a5b0:	b2db      	uxtb	r3, r3
 801a5b2:	f003 0303 	and.w	r3, r3, #3
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d001      	beq.n	801a5be <tcp_receive+0xe6a>
 801a5ba:	2301      	movs	r3, #1
 801a5bc:	e000      	b.n	801a5c0 <tcp_receive+0xe6c>
 801a5be:	2300      	movs	r3, #0
 801a5c0:	4423      	add	r3, r4
 801a5c2:	b29a      	uxth	r2, r3
 801a5c4:	4b2a      	ldr	r3, [pc, #168]	; (801a670 <tcp_receive+0xf1c>)
 801a5c6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a5c8:	4b29      	ldr	r3, [pc, #164]	; (801a670 <tcp_receive+0xf1c>)
 801a5ca:	881b      	ldrh	r3, [r3, #0]
 801a5cc:	461a      	mov	r2, r3
 801a5ce:	4b26      	ldr	r3, [pc, #152]	; (801a668 <tcp_receive+0xf14>)
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	441a      	add	r2, r3
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5d8:	6879      	ldr	r1, [r7, #4]
 801a5da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a5dc:	440b      	add	r3, r1
 801a5de:	429a      	cmp	r2, r3
 801a5e0:	d019      	beq.n	801a616 <tcp_receive+0xec2>
 801a5e2:	4b24      	ldr	r3, [pc, #144]	; (801a674 <tcp_receive+0xf20>)
 801a5e4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801a5e8:	4923      	ldr	r1, [pc, #140]	; (801a678 <tcp_receive+0xf24>)
 801a5ea:	4824      	ldr	r0, [pc, #144]	; (801a67c <tcp_receive+0xf28>)
 801a5ec:	f006 fb8e 	bl	8020d0c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a5f0:	e011      	b.n	801a616 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	63bb      	str	r3, [r7, #56]	; 0x38
 801a5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	f47f aea4 	bne.w	801a348 <tcp_receive+0xbf4>
 801a600:	e00a      	b.n	801a618 <tcp_receive+0xec4>
                break;
 801a602:	bf00      	nop
 801a604:	e008      	b.n	801a618 <tcp_receive+0xec4>
                break;
 801a606:	bf00      	nop
 801a608:	e006      	b.n	801a618 <tcp_receive+0xec4>
                  break;
 801a60a:	bf00      	nop
 801a60c:	e004      	b.n	801a618 <tcp_receive+0xec4>
                  break;
 801a60e:	bf00      	nop
 801a610:	e002      	b.n	801a618 <tcp_receive+0xec4>
                  break;
 801a612:	bf00      	nop
 801a614:	e000      	b.n	801a618 <tcp_receive+0xec4>
                break;
 801a616:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801a618:	6878      	ldr	r0, [r7, #4]
 801a61a:	f001 fe8b 	bl	801c334 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801a61e:	e003      	b.n	801a628 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a620:	6878      	ldr	r0, [r7, #4]
 801a622:	f001 fe87 	bl	801c334 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a626:	e01a      	b.n	801a65e <tcp_receive+0xf0a>
 801a628:	e019      	b.n	801a65e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a62a:	4b0f      	ldr	r3, [pc, #60]	; (801a668 <tcp_receive+0xf14>)
 801a62c:	681a      	ldr	r2, [r3, #0]
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a632:	1ad3      	subs	r3, r2, r3
 801a634:	2b00      	cmp	r3, #0
 801a636:	db0a      	blt.n	801a64e <tcp_receive+0xefa>
 801a638:	4b0b      	ldr	r3, [pc, #44]	; (801a668 <tcp_receive+0xf14>)
 801a63a:	681a      	ldr	r2, [r3, #0]
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a640:	6879      	ldr	r1, [r7, #4]
 801a642:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a644:	440b      	add	r3, r1
 801a646:	1ad3      	subs	r3, r2, r3
 801a648:	3301      	adds	r3, #1
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	dd07      	ble.n	801a65e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	8b5b      	ldrh	r3, [r3, #26]
 801a652:	f043 0302 	orr.w	r3, r3, #2
 801a656:	b29a      	uxth	r2, r3
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a65c:	e7ff      	b.n	801a65e <tcp_receive+0xf0a>
 801a65e:	bf00      	nop
 801a660:	3750      	adds	r7, #80	; 0x50
 801a662:	46bd      	mov	sp, r7
 801a664:	bdb0      	pop	{r4, r5, r7, pc}
 801a666:	bf00      	nop
 801a668:	240077e8 	.word	0x240077e8
 801a66c:	240077c8 	.word	0x240077c8
 801a670:	240077f2 	.word	0x240077f2
 801a674:	08027aac 	.word	0x08027aac
 801a678:	08027e80 	.word	0x08027e80
 801a67c:	08027b24 	.word	0x08027b24

0801a680 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a680:	b480      	push	{r7}
 801a682:	b083      	sub	sp, #12
 801a684:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a686:	4b15      	ldr	r3, [pc, #84]	; (801a6dc <tcp_get_next_optbyte+0x5c>)
 801a688:	881b      	ldrh	r3, [r3, #0]
 801a68a:	1c5a      	adds	r2, r3, #1
 801a68c:	b291      	uxth	r1, r2
 801a68e:	4a13      	ldr	r2, [pc, #76]	; (801a6dc <tcp_get_next_optbyte+0x5c>)
 801a690:	8011      	strh	r1, [r2, #0]
 801a692:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a694:	4b12      	ldr	r3, [pc, #72]	; (801a6e0 <tcp_get_next_optbyte+0x60>)
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d004      	beq.n	801a6a6 <tcp_get_next_optbyte+0x26>
 801a69c:	4b11      	ldr	r3, [pc, #68]	; (801a6e4 <tcp_get_next_optbyte+0x64>)
 801a69e:	881b      	ldrh	r3, [r3, #0]
 801a6a0:	88fa      	ldrh	r2, [r7, #6]
 801a6a2:	429a      	cmp	r2, r3
 801a6a4:	d208      	bcs.n	801a6b8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a6a6:	4b10      	ldr	r3, [pc, #64]	; (801a6e8 <tcp_get_next_optbyte+0x68>)
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	3314      	adds	r3, #20
 801a6ac:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a6ae:	88fb      	ldrh	r3, [r7, #6]
 801a6b0:	683a      	ldr	r2, [r7, #0]
 801a6b2:	4413      	add	r3, r2
 801a6b4:	781b      	ldrb	r3, [r3, #0]
 801a6b6:	e00b      	b.n	801a6d0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a6b8:	88fb      	ldrh	r3, [r7, #6]
 801a6ba:	b2da      	uxtb	r2, r3
 801a6bc:	4b09      	ldr	r3, [pc, #36]	; (801a6e4 <tcp_get_next_optbyte+0x64>)
 801a6be:	881b      	ldrh	r3, [r3, #0]
 801a6c0:	b2db      	uxtb	r3, r3
 801a6c2:	1ad3      	subs	r3, r2, r3
 801a6c4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a6c6:	4b06      	ldr	r3, [pc, #24]	; (801a6e0 <tcp_get_next_optbyte+0x60>)
 801a6c8:	681a      	ldr	r2, [r3, #0]
 801a6ca:	797b      	ldrb	r3, [r7, #5]
 801a6cc:	4413      	add	r3, r2
 801a6ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a6d0:	4618      	mov	r0, r3
 801a6d2:	370c      	adds	r7, #12
 801a6d4:	46bd      	mov	sp, r7
 801a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6da:	4770      	bx	lr
 801a6dc:	240077e4 	.word	0x240077e4
 801a6e0:	240077e0 	.word	0x240077e0
 801a6e4:	240077de 	.word	0x240077de
 801a6e8:	240077d8 	.word	0x240077d8

0801a6ec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b084      	sub	sp, #16
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d106      	bne.n	801a708 <tcp_parseopt+0x1c>
 801a6fa:	4b32      	ldr	r3, [pc, #200]	; (801a7c4 <tcp_parseopt+0xd8>)
 801a6fc:	f240 727d 	movw	r2, #1917	; 0x77d
 801a700:	4931      	ldr	r1, [pc, #196]	; (801a7c8 <tcp_parseopt+0xdc>)
 801a702:	4832      	ldr	r0, [pc, #200]	; (801a7cc <tcp_parseopt+0xe0>)
 801a704:	f006 fb02 	bl	8020d0c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a708:	4b31      	ldr	r3, [pc, #196]	; (801a7d0 <tcp_parseopt+0xe4>)
 801a70a:	881b      	ldrh	r3, [r3, #0]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d055      	beq.n	801a7bc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a710:	4b30      	ldr	r3, [pc, #192]	; (801a7d4 <tcp_parseopt+0xe8>)
 801a712:	2200      	movs	r2, #0
 801a714:	801a      	strh	r2, [r3, #0]
 801a716:	e045      	b.n	801a7a4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801a718:	f7ff ffb2 	bl	801a680 <tcp_get_next_optbyte>
 801a71c:	4603      	mov	r3, r0
 801a71e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a720:	7bfb      	ldrb	r3, [r7, #15]
 801a722:	2b02      	cmp	r3, #2
 801a724:	d006      	beq.n	801a734 <tcp_parseopt+0x48>
 801a726:	2b02      	cmp	r3, #2
 801a728:	dc2b      	bgt.n	801a782 <tcp_parseopt+0x96>
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	d041      	beq.n	801a7b2 <tcp_parseopt+0xc6>
 801a72e:	2b01      	cmp	r3, #1
 801a730:	d127      	bne.n	801a782 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801a732:	e037      	b.n	801a7a4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a734:	f7ff ffa4 	bl	801a680 <tcp_get_next_optbyte>
 801a738:	4603      	mov	r3, r0
 801a73a:	2b04      	cmp	r3, #4
 801a73c:	d13b      	bne.n	801a7b6 <tcp_parseopt+0xca>
 801a73e:	4b25      	ldr	r3, [pc, #148]	; (801a7d4 <tcp_parseopt+0xe8>)
 801a740:	881b      	ldrh	r3, [r3, #0]
 801a742:	3301      	adds	r3, #1
 801a744:	4a22      	ldr	r2, [pc, #136]	; (801a7d0 <tcp_parseopt+0xe4>)
 801a746:	8812      	ldrh	r2, [r2, #0]
 801a748:	4293      	cmp	r3, r2
 801a74a:	da34      	bge.n	801a7b6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a74c:	f7ff ff98 	bl	801a680 <tcp_get_next_optbyte>
 801a750:	4603      	mov	r3, r0
 801a752:	b29b      	uxth	r3, r3
 801a754:	021b      	lsls	r3, r3, #8
 801a756:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a758:	f7ff ff92 	bl	801a680 <tcp_get_next_optbyte>
 801a75c:	4603      	mov	r3, r0
 801a75e:	b29a      	uxth	r2, r3
 801a760:	89bb      	ldrh	r3, [r7, #12]
 801a762:	4313      	orrs	r3, r2
 801a764:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a766:	89bb      	ldrh	r3, [r7, #12]
 801a768:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a76c:	d804      	bhi.n	801a778 <tcp_parseopt+0x8c>
 801a76e:	89bb      	ldrh	r3, [r7, #12]
 801a770:	2b00      	cmp	r3, #0
 801a772:	d001      	beq.n	801a778 <tcp_parseopt+0x8c>
 801a774:	89ba      	ldrh	r2, [r7, #12]
 801a776:	e001      	b.n	801a77c <tcp_parseopt+0x90>
 801a778:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801a780:	e010      	b.n	801a7a4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a782:	f7ff ff7d 	bl	801a680 <tcp_get_next_optbyte>
 801a786:	4603      	mov	r3, r0
 801a788:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a78a:	7afb      	ldrb	r3, [r7, #11]
 801a78c:	2b01      	cmp	r3, #1
 801a78e:	d914      	bls.n	801a7ba <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a790:	7afb      	ldrb	r3, [r7, #11]
 801a792:	b29a      	uxth	r2, r3
 801a794:	4b0f      	ldr	r3, [pc, #60]	; (801a7d4 <tcp_parseopt+0xe8>)
 801a796:	881b      	ldrh	r3, [r3, #0]
 801a798:	4413      	add	r3, r2
 801a79a:	b29b      	uxth	r3, r3
 801a79c:	3b02      	subs	r3, #2
 801a79e:	b29a      	uxth	r2, r3
 801a7a0:	4b0c      	ldr	r3, [pc, #48]	; (801a7d4 <tcp_parseopt+0xe8>)
 801a7a2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a7a4:	4b0b      	ldr	r3, [pc, #44]	; (801a7d4 <tcp_parseopt+0xe8>)
 801a7a6:	881a      	ldrh	r2, [r3, #0]
 801a7a8:	4b09      	ldr	r3, [pc, #36]	; (801a7d0 <tcp_parseopt+0xe4>)
 801a7aa:	881b      	ldrh	r3, [r3, #0]
 801a7ac:	429a      	cmp	r2, r3
 801a7ae:	d3b3      	bcc.n	801a718 <tcp_parseopt+0x2c>
 801a7b0:	e004      	b.n	801a7bc <tcp_parseopt+0xd0>
          return;
 801a7b2:	bf00      	nop
 801a7b4:	e002      	b.n	801a7bc <tcp_parseopt+0xd0>
            return;
 801a7b6:	bf00      	nop
 801a7b8:	e000      	b.n	801a7bc <tcp_parseopt+0xd0>
            return;
 801a7ba:	bf00      	nop
      }
    }
  }
}
 801a7bc:	3710      	adds	r7, #16
 801a7be:	46bd      	mov	sp, r7
 801a7c0:	bd80      	pop	{r7, pc}
 801a7c2:	bf00      	nop
 801a7c4:	08027aac 	.word	0x08027aac
 801a7c8:	08027f3c 	.word	0x08027f3c
 801a7cc:	08027b24 	.word	0x08027b24
 801a7d0:	240077dc 	.word	0x240077dc
 801a7d4:	240077e4 	.word	0x240077e4

0801a7d8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a7d8:	b480      	push	{r7}
 801a7da:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a7dc:	4b05      	ldr	r3, [pc, #20]	; (801a7f4 <tcp_trigger_input_pcb_close+0x1c>)
 801a7de:	781b      	ldrb	r3, [r3, #0]
 801a7e0:	f043 0310 	orr.w	r3, r3, #16
 801a7e4:	b2da      	uxtb	r2, r3
 801a7e6:	4b03      	ldr	r3, [pc, #12]	; (801a7f4 <tcp_trigger_input_pcb_close+0x1c>)
 801a7e8:	701a      	strb	r2, [r3, #0]
}
 801a7ea:	bf00      	nop
 801a7ec:	46bd      	mov	sp, r7
 801a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7f2:	4770      	bx	lr
 801a7f4:	240077f5 	.word	0x240077f5

0801a7f8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a7f8:	b580      	push	{r7, lr}
 801a7fa:	b084      	sub	sp, #16
 801a7fc:	af00      	add	r7, sp, #0
 801a7fe:	60f8      	str	r0, [r7, #12]
 801a800:	60b9      	str	r1, [r7, #8]
 801a802:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a804:	68fb      	ldr	r3, [r7, #12]
 801a806:	2b00      	cmp	r3, #0
 801a808:	d00a      	beq.n	801a820 <tcp_route+0x28>
 801a80a:	68fb      	ldr	r3, [r7, #12]
 801a80c:	7a1b      	ldrb	r3, [r3, #8]
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d006      	beq.n	801a820 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a812:	68fb      	ldr	r3, [r7, #12]
 801a814:	7a1b      	ldrb	r3, [r3, #8]
 801a816:	4618      	mov	r0, r3
 801a818:	f7fa ff06 	bl	8015628 <netif_get_by_index>
 801a81c:	4603      	mov	r3, r0
 801a81e:	e003      	b.n	801a828 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a820:	6878      	ldr	r0, [r7, #4]
 801a822:	f7f8 fe3b 	bl	801349c <ip4_route>
 801a826:	4603      	mov	r3, r0
  }
}
 801a828:	4618      	mov	r0, r3
 801a82a:	3710      	adds	r7, #16
 801a82c:	46bd      	mov	sp, r7
 801a82e:	bd80      	pop	{r7, pc}

0801a830 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a830:	b590      	push	{r4, r7, lr}
 801a832:	b087      	sub	sp, #28
 801a834:	af00      	add	r7, sp, #0
 801a836:	60f8      	str	r0, [r7, #12]
 801a838:	60b9      	str	r1, [r7, #8]
 801a83a:	603b      	str	r3, [r7, #0]
 801a83c:	4613      	mov	r3, r2
 801a83e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	2b00      	cmp	r3, #0
 801a844:	d105      	bne.n	801a852 <tcp_create_segment+0x22>
 801a846:	4b44      	ldr	r3, [pc, #272]	; (801a958 <tcp_create_segment+0x128>)
 801a848:	22a3      	movs	r2, #163	; 0xa3
 801a84a:	4944      	ldr	r1, [pc, #272]	; (801a95c <tcp_create_segment+0x12c>)
 801a84c:	4844      	ldr	r0, [pc, #272]	; (801a960 <tcp_create_segment+0x130>)
 801a84e:	f006 fa5d 	bl	8020d0c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a852:	68bb      	ldr	r3, [r7, #8]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d105      	bne.n	801a864 <tcp_create_segment+0x34>
 801a858:	4b3f      	ldr	r3, [pc, #252]	; (801a958 <tcp_create_segment+0x128>)
 801a85a:	22a4      	movs	r2, #164	; 0xa4
 801a85c:	4941      	ldr	r1, [pc, #260]	; (801a964 <tcp_create_segment+0x134>)
 801a85e:	4840      	ldr	r0, [pc, #256]	; (801a960 <tcp_create_segment+0x130>)
 801a860:	f006 fa54 	bl	8020d0c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a864:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a868:	009b      	lsls	r3, r3, #2
 801a86a:	b2db      	uxtb	r3, r3
 801a86c:	f003 0304 	and.w	r3, r3, #4
 801a870:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a872:	2003      	movs	r0, #3
 801a874:	f7fa fb52 	bl	8014f1c <memp_malloc>
 801a878:	6138      	str	r0, [r7, #16]
 801a87a:	693b      	ldr	r3, [r7, #16]
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d104      	bne.n	801a88a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a880:	68b8      	ldr	r0, [r7, #8]
 801a882:	f7fb fa31 	bl	8015ce8 <pbuf_free>
    return NULL;
 801a886:	2300      	movs	r3, #0
 801a888:	e061      	b.n	801a94e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801a88a:	693b      	ldr	r3, [r7, #16]
 801a88c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a890:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a892:	693b      	ldr	r3, [r7, #16]
 801a894:	2200      	movs	r2, #0
 801a896:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a898:	693b      	ldr	r3, [r7, #16]
 801a89a:	68ba      	ldr	r2, [r7, #8]
 801a89c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a89e:	68bb      	ldr	r3, [r7, #8]
 801a8a0:	891a      	ldrh	r2, [r3, #8]
 801a8a2:	7dfb      	ldrb	r3, [r7, #23]
 801a8a4:	b29b      	uxth	r3, r3
 801a8a6:	429a      	cmp	r2, r3
 801a8a8:	d205      	bcs.n	801a8b6 <tcp_create_segment+0x86>
 801a8aa:	4b2b      	ldr	r3, [pc, #172]	; (801a958 <tcp_create_segment+0x128>)
 801a8ac:	22b0      	movs	r2, #176	; 0xb0
 801a8ae:	492e      	ldr	r1, [pc, #184]	; (801a968 <tcp_create_segment+0x138>)
 801a8b0:	482b      	ldr	r0, [pc, #172]	; (801a960 <tcp_create_segment+0x130>)
 801a8b2:	f006 fa2b 	bl	8020d0c <iprintf>
  seg->len = p->tot_len - optlen;
 801a8b6:	68bb      	ldr	r3, [r7, #8]
 801a8b8:	891a      	ldrh	r2, [r3, #8]
 801a8ba:	7dfb      	ldrb	r3, [r7, #23]
 801a8bc:	b29b      	uxth	r3, r3
 801a8be:	1ad3      	subs	r3, r2, r3
 801a8c0:	b29a      	uxth	r2, r3
 801a8c2:	693b      	ldr	r3, [r7, #16]
 801a8c4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a8c6:	2114      	movs	r1, #20
 801a8c8:	68b8      	ldr	r0, [r7, #8]
 801a8ca:	f7fb f977 	bl	8015bbc <pbuf_add_header>
 801a8ce:	4603      	mov	r3, r0
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d004      	beq.n	801a8de <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a8d4:	6938      	ldr	r0, [r7, #16]
 801a8d6:	f7fd f804 	bl	80178e2 <tcp_seg_free>
    return NULL;
 801a8da:	2300      	movs	r3, #0
 801a8dc:	e037      	b.n	801a94e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a8de:	693b      	ldr	r3, [r7, #16]
 801a8e0:	685b      	ldr	r3, [r3, #4]
 801a8e2:	685a      	ldr	r2, [r3, #4]
 801a8e4:	693b      	ldr	r3, [r7, #16]
 801a8e6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a8e8:	68fb      	ldr	r3, [r7, #12]
 801a8ea:	8ada      	ldrh	r2, [r3, #22]
 801a8ec:	693b      	ldr	r3, [r7, #16]
 801a8ee:	68dc      	ldr	r4, [r3, #12]
 801a8f0:	4610      	mov	r0, r2
 801a8f2:	f7f7 fafd 	bl	8011ef0 <lwip_htons>
 801a8f6:	4603      	mov	r3, r0
 801a8f8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a8fa:	68fb      	ldr	r3, [r7, #12]
 801a8fc:	8b1a      	ldrh	r2, [r3, #24]
 801a8fe:	693b      	ldr	r3, [r7, #16]
 801a900:	68dc      	ldr	r4, [r3, #12]
 801a902:	4610      	mov	r0, r2
 801a904:	f7f7 faf4 	bl	8011ef0 <lwip_htons>
 801a908:	4603      	mov	r3, r0
 801a90a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a90c:	693b      	ldr	r3, [r7, #16]
 801a90e:	68dc      	ldr	r4, [r3, #12]
 801a910:	6838      	ldr	r0, [r7, #0]
 801a912:	f7f7 fb02 	bl	8011f1a <lwip_htonl>
 801a916:	4603      	mov	r3, r0
 801a918:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a91a:	7dfb      	ldrb	r3, [r7, #23]
 801a91c:	089b      	lsrs	r3, r3, #2
 801a91e:	b2db      	uxtb	r3, r3
 801a920:	b29b      	uxth	r3, r3
 801a922:	3305      	adds	r3, #5
 801a924:	b29b      	uxth	r3, r3
 801a926:	031b      	lsls	r3, r3, #12
 801a928:	b29a      	uxth	r2, r3
 801a92a:	79fb      	ldrb	r3, [r7, #7]
 801a92c:	b29b      	uxth	r3, r3
 801a92e:	4313      	orrs	r3, r2
 801a930:	b29a      	uxth	r2, r3
 801a932:	693b      	ldr	r3, [r7, #16]
 801a934:	68dc      	ldr	r4, [r3, #12]
 801a936:	4610      	mov	r0, r2
 801a938:	f7f7 fada 	bl	8011ef0 <lwip_htons>
 801a93c:	4603      	mov	r3, r0
 801a93e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a940:	693b      	ldr	r3, [r7, #16]
 801a942:	68db      	ldr	r3, [r3, #12]
 801a944:	2200      	movs	r2, #0
 801a946:	749a      	strb	r2, [r3, #18]
 801a948:	2200      	movs	r2, #0
 801a94a:	74da      	strb	r2, [r3, #19]
  return seg;
 801a94c:	693b      	ldr	r3, [r7, #16]
}
 801a94e:	4618      	mov	r0, r3
 801a950:	371c      	adds	r7, #28
 801a952:	46bd      	mov	sp, r7
 801a954:	bd90      	pop	{r4, r7, pc}
 801a956:	bf00      	nop
 801a958:	08027f58 	.word	0x08027f58
 801a95c:	08027fb8 	.word	0x08027fb8
 801a960:	08027fd8 	.word	0x08027fd8
 801a964:	08028000 	.word	0x08028000
 801a968:	08028024 	.word	0x08028024

0801a96c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a96c:	b580      	push	{r7, lr}
 801a96e:	b086      	sub	sp, #24
 801a970:	af00      	add	r7, sp, #0
 801a972:	607b      	str	r3, [r7, #4]
 801a974:	4603      	mov	r3, r0
 801a976:	73fb      	strb	r3, [r7, #15]
 801a978:	460b      	mov	r3, r1
 801a97a:	81bb      	strh	r3, [r7, #12]
 801a97c:	4613      	mov	r3, r2
 801a97e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801a980:	89bb      	ldrh	r3, [r7, #12]
 801a982:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	2b00      	cmp	r3, #0
 801a988:	d105      	bne.n	801a996 <tcp_pbuf_prealloc+0x2a>
 801a98a:	4b30      	ldr	r3, [pc, #192]	; (801aa4c <tcp_pbuf_prealloc+0xe0>)
 801a98c:	22e8      	movs	r2, #232	; 0xe8
 801a98e:	4930      	ldr	r1, [pc, #192]	; (801aa50 <tcp_pbuf_prealloc+0xe4>)
 801a990:	4830      	ldr	r0, [pc, #192]	; (801aa54 <tcp_pbuf_prealloc+0xe8>)
 801a992:	f006 f9bb 	bl	8020d0c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801a996:	6a3b      	ldr	r3, [r7, #32]
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d105      	bne.n	801a9a8 <tcp_pbuf_prealloc+0x3c>
 801a99c:	4b2b      	ldr	r3, [pc, #172]	; (801aa4c <tcp_pbuf_prealloc+0xe0>)
 801a99e:	22e9      	movs	r2, #233	; 0xe9
 801a9a0:	492d      	ldr	r1, [pc, #180]	; (801aa58 <tcp_pbuf_prealloc+0xec>)
 801a9a2:	482c      	ldr	r0, [pc, #176]	; (801aa54 <tcp_pbuf_prealloc+0xe8>)
 801a9a4:	f006 f9b2 	bl	8020d0c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801a9a8:	89ba      	ldrh	r2, [r7, #12]
 801a9aa:	897b      	ldrh	r3, [r7, #10]
 801a9ac:	429a      	cmp	r2, r3
 801a9ae:	d221      	bcs.n	801a9f4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a9b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a9b4:	f003 0302 	and.w	r3, r3, #2
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d111      	bne.n	801a9e0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801a9bc:	6a3b      	ldr	r3, [r7, #32]
 801a9be:	8b5b      	ldrh	r3, [r3, #26]
 801a9c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d115      	bne.n	801a9f4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801a9c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d007      	beq.n	801a9e0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801a9d0:	6a3b      	ldr	r3, [r7, #32]
 801a9d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d103      	bne.n	801a9e0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801a9d8:	6a3b      	ldr	r3, [r7, #32]
 801a9da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d009      	beq.n	801a9f4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a9e0:	89bb      	ldrh	r3, [r7, #12]
 801a9e2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801a9e6:	f023 0203 	bic.w	r2, r3, #3
 801a9ea:	897b      	ldrh	r3, [r7, #10]
 801a9ec:	4293      	cmp	r3, r2
 801a9ee:	bf28      	it	cs
 801a9f0:	4613      	movcs	r3, r2
 801a9f2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801a9f4:	8af9      	ldrh	r1, [r7, #22]
 801a9f6:	7bfb      	ldrb	r3, [r7, #15]
 801a9f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a9fc:	4618      	mov	r0, r3
 801a9fe:	f7fa fe8f 	bl	8015720 <pbuf_alloc>
 801aa02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801aa04:	693b      	ldr	r3, [r7, #16]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d101      	bne.n	801aa0e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801aa0a:	2300      	movs	r3, #0
 801aa0c:	e019      	b.n	801aa42 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801aa0e:	693b      	ldr	r3, [r7, #16]
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	d006      	beq.n	801aa24 <tcp_pbuf_prealloc+0xb8>
 801aa16:	4b0d      	ldr	r3, [pc, #52]	; (801aa4c <tcp_pbuf_prealloc+0xe0>)
 801aa18:	f240 120b 	movw	r2, #267	; 0x10b
 801aa1c:	490f      	ldr	r1, [pc, #60]	; (801aa5c <tcp_pbuf_prealloc+0xf0>)
 801aa1e:	480d      	ldr	r0, [pc, #52]	; (801aa54 <tcp_pbuf_prealloc+0xe8>)
 801aa20:	f006 f974 	bl	8020d0c <iprintf>
  *oversize = p->len - length;
 801aa24:	693b      	ldr	r3, [r7, #16]
 801aa26:	895a      	ldrh	r2, [r3, #10]
 801aa28:	89bb      	ldrh	r3, [r7, #12]
 801aa2a:	1ad3      	subs	r3, r2, r3
 801aa2c:	b29a      	uxth	r2, r3
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801aa32:	693b      	ldr	r3, [r7, #16]
 801aa34:	89ba      	ldrh	r2, [r7, #12]
 801aa36:	811a      	strh	r2, [r3, #8]
 801aa38:	693b      	ldr	r3, [r7, #16]
 801aa3a:	891a      	ldrh	r2, [r3, #8]
 801aa3c:	693b      	ldr	r3, [r7, #16]
 801aa3e:	815a      	strh	r2, [r3, #10]
  return p;
 801aa40:	693b      	ldr	r3, [r7, #16]
}
 801aa42:	4618      	mov	r0, r3
 801aa44:	3718      	adds	r7, #24
 801aa46:	46bd      	mov	sp, r7
 801aa48:	bd80      	pop	{r7, pc}
 801aa4a:	bf00      	nop
 801aa4c:	08027f58 	.word	0x08027f58
 801aa50:	0802803c 	.word	0x0802803c
 801aa54:	08027fd8 	.word	0x08027fd8
 801aa58:	08028060 	.word	0x08028060
 801aa5c:	08028080 	.word	0x08028080

0801aa60 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801aa60:	b580      	push	{r7, lr}
 801aa62:	b082      	sub	sp, #8
 801aa64:	af00      	add	r7, sp, #0
 801aa66:	6078      	str	r0, [r7, #4]
 801aa68:	460b      	mov	r3, r1
 801aa6a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d106      	bne.n	801aa80 <tcp_write_checks+0x20>
 801aa72:	4b33      	ldr	r3, [pc, #204]	; (801ab40 <tcp_write_checks+0xe0>)
 801aa74:	f240 1233 	movw	r2, #307	; 0x133
 801aa78:	4932      	ldr	r1, [pc, #200]	; (801ab44 <tcp_write_checks+0xe4>)
 801aa7a:	4833      	ldr	r0, [pc, #204]	; (801ab48 <tcp_write_checks+0xe8>)
 801aa7c:	f006 f946 	bl	8020d0c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	7d1b      	ldrb	r3, [r3, #20]
 801aa84:	2b04      	cmp	r3, #4
 801aa86:	d00e      	beq.n	801aaa6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801aa8c:	2b07      	cmp	r3, #7
 801aa8e:	d00a      	beq.n	801aaa6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801aa94:	2b02      	cmp	r3, #2
 801aa96:	d006      	beq.n	801aaa6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801aa9c:	2b03      	cmp	r3, #3
 801aa9e:	d002      	beq.n	801aaa6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801aaa0:	f06f 030a 	mvn.w	r3, #10
 801aaa4:	e048      	b.n	801ab38 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801aaa6:	887b      	ldrh	r3, [r7, #2]
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d101      	bne.n	801aab0 <tcp_write_checks+0x50>
    return ERR_OK;
 801aaac:	2300      	movs	r3, #0
 801aaae:	e043      	b.n	801ab38 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801aab6:	887a      	ldrh	r2, [r7, #2]
 801aab8:	429a      	cmp	r2, r3
 801aaba:	d909      	bls.n	801aad0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	8b5b      	ldrh	r3, [r3, #26]
 801aac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aac4:	b29a      	uxth	r2, r3
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801aaca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aace:	e033      	b.n	801ab38 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aad6:	2b08      	cmp	r3, #8
 801aad8:	d909      	bls.n	801aaee <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	8b5b      	ldrh	r3, [r3, #26]
 801aade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aae2:	b29a      	uxth	r2, r3
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801aae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aaec:	e024      	b.n	801ab38 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d00f      	beq.n	801ab18 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d11a      	bne.n	801ab36 <tcp_write_checks+0xd6>
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d116      	bne.n	801ab36 <tcp_write_checks+0xd6>
 801ab08:	4b0d      	ldr	r3, [pc, #52]	; (801ab40 <tcp_write_checks+0xe0>)
 801ab0a:	f240 1255 	movw	r2, #341	; 0x155
 801ab0e:	490f      	ldr	r1, [pc, #60]	; (801ab4c <tcp_write_checks+0xec>)
 801ab10:	480d      	ldr	r0, [pc, #52]	; (801ab48 <tcp_write_checks+0xe8>)
 801ab12:	f006 f8fb 	bl	8020d0c <iprintf>
 801ab16:	e00e      	b.n	801ab36 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d103      	bne.n	801ab28 <tcp_write_checks+0xc8>
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d006      	beq.n	801ab36 <tcp_write_checks+0xd6>
 801ab28:	4b05      	ldr	r3, [pc, #20]	; (801ab40 <tcp_write_checks+0xe0>)
 801ab2a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801ab2e:	4908      	ldr	r1, [pc, #32]	; (801ab50 <tcp_write_checks+0xf0>)
 801ab30:	4805      	ldr	r0, [pc, #20]	; (801ab48 <tcp_write_checks+0xe8>)
 801ab32:	f006 f8eb 	bl	8020d0c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801ab36:	2300      	movs	r3, #0
}
 801ab38:	4618      	mov	r0, r3
 801ab3a:	3708      	adds	r7, #8
 801ab3c:	46bd      	mov	sp, r7
 801ab3e:	bd80      	pop	{r7, pc}
 801ab40:	08027f58 	.word	0x08027f58
 801ab44:	08028094 	.word	0x08028094
 801ab48:	08027fd8 	.word	0x08027fd8
 801ab4c:	080280b4 	.word	0x080280b4
 801ab50:	080280f0 	.word	0x080280f0

0801ab54 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801ab54:	b590      	push	{r4, r7, lr}
 801ab56:	b09b      	sub	sp, #108	; 0x6c
 801ab58:	af04      	add	r7, sp, #16
 801ab5a:	60f8      	str	r0, [r7, #12]
 801ab5c:	60b9      	str	r1, [r7, #8]
 801ab5e:	4611      	mov	r1, r2
 801ab60:	461a      	mov	r2, r3
 801ab62:	460b      	mov	r3, r1
 801ab64:	80fb      	strh	r3, [r7, #6]
 801ab66:	4613      	mov	r3, r2
 801ab68:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801ab6a:	2300      	movs	r3, #0
 801ab6c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801ab6e:	2300      	movs	r3, #0
 801ab70:	653b      	str	r3, [r7, #80]	; 0x50
 801ab72:	2300      	movs	r3, #0
 801ab74:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ab76:	2300      	movs	r3, #0
 801ab78:	64bb      	str	r3, [r7, #72]	; 0x48
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801ab7e:	2300      	movs	r3, #0
 801ab80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801ab84:	2300      	movs	r3, #0
 801ab86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801ab8a:	2300      	movs	r3, #0
 801ab8c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801ab8e:	2300      	movs	r3, #0
 801ab90:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801ab92:	2300      	movs	r3, #0
 801ab94:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801ab96:	68fb      	ldr	r3, [r7, #12]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d109      	bne.n	801abb0 <tcp_write+0x5c>
 801ab9c:	4ba4      	ldr	r3, [pc, #656]	; (801ae30 <tcp_write+0x2dc>)
 801ab9e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801aba2:	49a4      	ldr	r1, [pc, #656]	; (801ae34 <tcp_write+0x2e0>)
 801aba4:	48a4      	ldr	r0, [pc, #656]	; (801ae38 <tcp_write+0x2e4>)
 801aba6:	f006 f8b1 	bl	8020d0c <iprintf>
 801abaa:	f06f 030f 	mvn.w	r3, #15
 801abae:	e32a      	b.n	801b206 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801abb6:	085b      	lsrs	r3, r3, #1
 801abb8:	b29a      	uxth	r2, r3
 801abba:	68fb      	ldr	r3, [r7, #12]
 801abbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801abbe:	4293      	cmp	r3, r2
 801abc0:	bf28      	it	cs
 801abc2:	4613      	movcs	r3, r2
 801abc4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801abc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d102      	bne.n	801abd2 <tcp_write+0x7e>
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801abd0:	e000      	b.n	801abd4 <tcp_write+0x80>
 801abd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801abd4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801abd6:	68bb      	ldr	r3, [r7, #8]
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d109      	bne.n	801abf0 <tcp_write+0x9c>
 801abdc:	4b94      	ldr	r3, [pc, #592]	; (801ae30 <tcp_write+0x2dc>)
 801abde:	f240 12ad 	movw	r2, #429	; 0x1ad
 801abe2:	4996      	ldr	r1, [pc, #600]	; (801ae3c <tcp_write+0x2e8>)
 801abe4:	4894      	ldr	r0, [pc, #592]	; (801ae38 <tcp_write+0x2e4>)
 801abe6:	f006 f891 	bl	8020d0c <iprintf>
 801abea:	f06f 030f 	mvn.w	r3, #15
 801abee:	e30a      	b.n	801b206 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801abf0:	88fb      	ldrh	r3, [r7, #6]
 801abf2:	4619      	mov	r1, r3
 801abf4:	68f8      	ldr	r0, [r7, #12]
 801abf6:	f7ff ff33 	bl	801aa60 <tcp_write_checks>
 801abfa:	4603      	mov	r3, r0
 801abfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801ac00:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d002      	beq.n	801ac0e <tcp_write+0xba>
    return err;
 801ac08:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801ac0c:	e2fb      	b.n	801b206 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801ac0e:	68fb      	ldr	r3, [r7, #12]
 801ac10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ac14:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ac18:	2300      	movs	r3, #0
 801ac1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	f000 80f6 	beq.w	801ae14 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac2c:	653b      	str	r3, [r7, #80]	; 0x50
 801ac2e:	e002      	b.n	801ac36 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801ac30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ac36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d1f8      	bne.n	801ac30 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801ac3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac40:	7a9b      	ldrb	r3, [r3, #10]
 801ac42:	009b      	lsls	r3, r3, #2
 801ac44:	b29b      	uxth	r3, r3
 801ac46:	f003 0304 	and.w	r3, r3, #4
 801ac4a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801ac4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ac4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac50:	891b      	ldrh	r3, [r3, #8]
 801ac52:	4619      	mov	r1, r3
 801ac54:	8c3b      	ldrh	r3, [r7, #32]
 801ac56:	440b      	add	r3, r1
 801ac58:	429a      	cmp	r2, r3
 801ac5a:	da06      	bge.n	801ac6a <tcp_write+0x116>
 801ac5c:	4b74      	ldr	r3, [pc, #464]	; (801ae30 <tcp_write+0x2dc>)
 801ac5e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801ac62:	4977      	ldr	r1, [pc, #476]	; (801ae40 <tcp_write+0x2ec>)
 801ac64:	4874      	ldr	r0, [pc, #464]	; (801ae38 <tcp_write+0x2e4>)
 801ac66:	f006 f851 	bl	8020d0c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801ac6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac6c:	891a      	ldrh	r2, [r3, #8]
 801ac6e:	8c3b      	ldrh	r3, [r7, #32]
 801ac70:	4413      	add	r3, r2
 801ac72:	b29b      	uxth	r3, r3
 801ac74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ac76:	1ad3      	subs	r3, r2, r3
 801ac78:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801ac80:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801ac82:	8a7b      	ldrh	r3, [r7, #18]
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d026      	beq.n	801acd6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801ac88:	8a7b      	ldrh	r3, [r7, #18]
 801ac8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ac8c:	429a      	cmp	r2, r3
 801ac8e:	d206      	bcs.n	801ac9e <tcp_write+0x14a>
 801ac90:	4b67      	ldr	r3, [pc, #412]	; (801ae30 <tcp_write+0x2dc>)
 801ac92:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801ac96:	496b      	ldr	r1, [pc, #428]	; (801ae44 <tcp_write+0x2f0>)
 801ac98:	4867      	ldr	r0, [pc, #412]	; (801ae38 <tcp_write+0x2e4>)
 801ac9a:	f006 f837 	bl	8020d0c <iprintf>
      seg = last_unsent;
 801ac9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aca0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801aca2:	8a7b      	ldrh	r3, [r7, #18]
 801aca4:	88fa      	ldrh	r2, [r7, #6]
 801aca6:	4293      	cmp	r3, r2
 801aca8:	bf28      	it	cs
 801acaa:	4613      	movcs	r3, r2
 801acac:	b29b      	uxth	r3, r3
 801acae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801acb0:	4293      	cmp	r3, r2
 801acb2:	bf28      	it	cs
 801acb4:	4613      	movcs	r3, r2
 801acb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801acb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801acbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801acbe:	4413      	add	r3, r2
 801acc0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801acc4:	8a7a      	ldrh	r2, [r7, #18]
 801acc6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801acc8:	1ad3      	subs	r3, r2, r3
 801acca:	b29b      	uxth	r3, r3
 801accc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801acce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801acd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801acd2:	1ad3      	subs	r3, r2, r3
 801acd4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801acd6:	8a7b      	ldrh	r3, [r7, #18]
 801acd8:	2b00      	cmp	r3, #0
 801acda:	d00b      	beq.n	801acf4 <tcp_write+0x1a0>
 801acdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ace0:	88fb      	ldrh	r3, [r7, #6]
 801ace2:	429a      	cmp	r2, r3
 801ace4:	d006      	beq.n	801acf4 <tcp_write+0x1a0>
 801ace6:	4b52      	ldr	r3, [pc, #328]	; (801ae30 <tcp_write+0x2dc>)
 801ace8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801acec:	4956      	ldr	r1, [pc, #344]	; (801ae48 <tcp_write+0x2f4>)
 801acee:	4852      	ldr	r0, [pc, #328]	; (801ae38 <tcp_write+0x2e4>)
 801acf0:	f006 f80c 	bl	8020d0c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801acf4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801acf8:	88fb      	ldrh	r3, [r7, #6]
 801acfa:	429a      	cmp	r2, r3
 801acfc:	f080 8167 	bcs.w	801afce <tcp_write+0x47a>
 801ad00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	f000 8163 	beq.w	801afce <tcp_write+0x47a>
 801ad08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ad0a:	891b      	ldrh	r3, [r3, #8]
 801ad0c:	2b00      	cmp	r3, #0
 801ad0e:	f000 815e 	beq.w	801afce <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ad12:	88fa      	ldrh	r2, [r7, #6]
 801ad14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ad18:	1ad2      	subs	r2, r2, r3
 801ad1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ad1c:	4293      	cmp	r3, r2
 801ad1e:	bfa8      	it	ge
 801ad20:	4613      	movge	r3, r2
 801ad22:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801ad24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ad26:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ad28:	797b      	ldrb	r3, [r7, #5]
 801ad2a:	f003 0301 	and.w	r3, r3, #1
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d027      	beq.n	801ad82 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801ad32:	f107 0012 	add.w	r0, r7, #18
 801ad36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ad38:	8bf9      	ldrh	r1, [r7, #30]
 801ad3a:	2301      	movs	r3, #1
 801ad3c:	9302      	str	r3, [sp, #8]
 801ad3e:	797b      	ldrb	r3, [r7, #5]
 801ad40:	9301      	str	r3, [sp, #4]
 801ad42:	68fb      	ldr	r3, [r7, #12]
 801ad44:	9300      	str	r3, [sp, #0]
 801ad46:	4603      	mov	r3, r0
 801ad48:	2000      	movs	r0, #0
 801ad4a:	f7ff fe0f 	bl	801a96c <tcp_pbuf_prealloc>
 801ad4e:	6578      	str	r0, [r7, #84]	; 0x54
 801ad50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	f000 8225 	beq.w	801b1a2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801ad58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ad5a:	6858      	ldr	r0, [r3, #4]
 801ad5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ad60:	68ba      	ldr	r2, [r7, #8]
 801ad62:	4413      	add	r3, r2
 801ad64:	8bfa      	ldrh	r2, [r7, #30]
 801ad66:	4619      	mov	r1, r3
 801ad68:	f005 f8ae 	bl	801fec8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801ad6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ad6e:	f7fb f843 	bl	8015df8 <pbuf_clen>
 801ad72:	4603      	mov	r3, r0
 801ad74:	461a      	mov	r2, r3
 801ad76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ad7a:	4413      	add	r3, r2
 801ad7c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801ad80:	e041      	b.n	801ae06 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801ad82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ad84:	685b      	ldr	r3, [r3, #4]
 801ad86:	637b      	str	r3, [r7, #52]	; 0x34
 801ad88:	e002      	b.n	801ad90 <tcp_write+0x23c>
 801ad8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	637b      	str	r3, [r7, #52]	; 0x34
 801ad90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	d1f8      	bne.n	801ad8a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ad98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad9a:	7b1b      	ldrb	r3, [r3, #12]
 801ad9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d115      	bne.n	801add0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801ada4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ada6:	685b      	ldr	r3, [r3, #4]
 801ada8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801adaa:	8952      	ldrh	r2, [r2, #10]
 801adac:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801adae:	68ba      	ldr	r2, [r7, #8]
 801adb0:	429a      	cmp	r2, r3
 801adb2:	d10d      	bne.n	801add0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801adb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d006      	beq.n	801adca <tcp_write+0x276>
 801adbc:	4b1c      	ldr	r3, [pc, #112]	; (801ae30 <tcp_write+0x2dc>)
 801adbe:	f240 2231 	movw	r2, #561	; 0x231
 801adc2:	4922      	ldr	r1, [pc, #136]	; (801ae4c <tcp_write+0x2f8>)
 801adc4:	481c      	ldr	r0, [pc, #112]	; (801ae38 <tcp_write+0x2e4>)
 801adc6:	f005 ffa1 	bl	8020d0c <iprintf>
          extendlen = seglen;
 801adca:	8bfb      	ldrh	r3, [r7, #30]
 801adcc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801adce:	e01a      	b.n	801ae06 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801add0:	8bfb      	ldrh	r3, [r7, #30]
 801add2:	2201      	movs	r2, #1
 801add4:	4619      	mov	r1, r3
 801add6:	2000      	movs	r0, #0
 801add8:	f7fa fca2 	bl	8015720 <pbuf_alloc>
 801addc:	6578      	str	r0, [r7, #84]	; 0x54
 801adde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	f000 81e0 	beq.w	801b1a6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801ade6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801adea:	68ba      	ldr	r2, [r7, #8]
 801adec:	441a      	add	r2, r3
 801adee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801adf0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801adf2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801adf4:	f7fb f800 	bl	8015df8 <pbuf_clen>
 801adf8:	4603      	mov	r3, r0
 801adfa:	461a      	mov	r2, r3
 801adfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ae00:	4413      	add	r3, r2
 801ae02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801ae06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ae0a:	8bfb      	ldrh	r3, [r7, #30]
 801ae0c:	4413      	add	r3, r2
 801ae0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801ae12:	e0dc      	b.n	801afce <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801ae14:	68fb      	ldr	r3, [r7, #12]
 801ae16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	f000 80d7 	beq.w	801afce <tcp_write+0x47a>
 801ae20:	4b03      	ldr	r3, [pc, #12]	; (801ae30 <tcp_write+0x2dc>)
 801ae22:	f240 224a 	movw	r2, #586	; 0x24a
 801ae26:	490a      	ldr	r1, [pc, #40]	; (801ae50 <tcp_write+0x2fc>)
 801ae28:	4803      	ldr	r0, [pc, #12]	; (801ae38 <tcp_write+0x2e4>)
 801ae2a:	f005 ff6f 	bl	8020d0c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801ae2e:	e0ce      	b.n	801afce <tcp_write+0x47a>
 801ae30:	08027f58 	.word	0x08027f58
 801ae34:	08028124 	.word	0x08028124
 801ae38:	08027fd8 	.word	0x08027fd8
 801ae3c:	0802813c 	.word	0x0802813c
 801ae40:	08028170 	.word	0x08028170
 801ae44:	08028188 	.word	0x08028188
 801ae48:	080281a8 	.word	0x080281a8
 801ae4c:	080281c8 	.word	0x080281c8
 801ae50:	080281f4 	.word	0x080281f4
    struct pbuf *p;
    u16_t left = len - pos;
 801ae54:	88fa      	ldrh	r2, [r7, #6]
 801ae56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ae5a:	1ad3      	subs	r3, r2, r3
 801ae5c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801ae5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ae62:	b29b      	uxth	r3, r3
 801ae64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ae66:	1ad3      	subs	r3, r2, r3
 801ae68:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801ae6a:	8b7a      	ldrh	r2, [r7, #26]
 801ae6c:	8bbb      	ldrh	r3, [r7, #28]
 801ae6e:	4293      	cmp	r3, r2
 801ae70:	bf28      	it	cs
 801ae72:	4613      	movcs	r3, r2
 801ae74:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ae76:	797b      	ldrb	r3, [r7, #5]
 801ae78:	f003 0301 	and.w	r3, r3, #1
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d036      	beq.n	801aeee <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801ae80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ae84:	b29a      	uxth	r2, r3
 801ae86:	8b3b      	ldrh	r3, [r7, #24]
 801ae88:	4413      	add	r3, r2
 801ae8a:	b299      	uxth	r1, r3
 801ae8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	bf0c      	ite	eq
 801ae92:	2301      	moveq	r3, #1
 801ae94:	2300      	movne	r3, #0
 801ae96:	b2db      	uxtb	r3, r3
 801ae98:	f107 0012 	add.w	r0, r7, #18
 801ae9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ae9e:	9302      	str	r3, [sp, #8]
 801aea0:	797b      	ldrb	r3, [r7, #5]
 801aea2:	9301      	str	r3, [sp, #4]
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	9300      	str	r3, [sp, #0]
 801aea8:	4603      	mov	r3, r0
 801aeaa:	2036      	movs	r0, #54	; 0x36
 801aeac:	f7ff fd5e 	bl	801a96c <tcp_pbuf_prealloc>
 801aeb0:	6338      	str	r0, [r7, #48]	; 0x30
 801aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	f000 8178 	beq.w	801b1aa <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801aeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aebc:	895b      	ldrh	r3, [r3, #10]
 801aebe:	8b3a      	ldrh	r2, [r7, #24]
 801aec0:	429a      	cmp	r2, r3
 801aec2:	d906      	bls.n	801aed2 <tcp_write+0x37e>
 801aec4:	4b8c      	ldr	r3, [pc, #560]	; (801b0f8 <tcp_write+0x5a4>)
 801aec6:	f240 2266 	movw	r2, #614	; 0x266
 801aeca:	498c      	ldr	r1, [pc, #560]	; (801b0fc <tcp_write+0x5a8>)
 801aecc:	488c      	ldr	r0, [pc, #560]	; (801b100 <tcp_write+0x5ac>)
 801aece:	f005 ff1d 	bl	8020d0c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801aed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aed4:	685a      	ldr	r2, [r3, #4]
 801aed6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aeda:	18d0      	adds	r0, r2, r3
 801aedc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801aee0:	68ba      	ldr	r2, [r7, #8]
 801aee2:	4413      	add	r3, r2
 801aee4:	8b3a      	ldrh	r2, [r7, #24]
 801aee6:	4619      	mov	r1, r3
 801aee8:	f004 ffee 	bl	801fec8 <memcpy>
 801aeec:	e02f      	b.n	801af4e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801aeee:	8a7b      	ldrh	r3, [r7, #18]
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d006      	beq.n	801af02 <tcp_write+0x3ae>
 801aef4:	4b80      	ldr	r3, [pc, #512]	; (801b0f8 <tcp_write+0x5a4>)
 801aef6:	f240 2271 	movw	r2, #625	; 0x271
 801aefa:	4982      	ldr	r1, [pc, #520]	; (801b104 <tcp_write+0x5b0>)
 801aefc:	4880      	ldr	r0, [pc, #512]	; (801b100 <tcp_write+0x5ac>)
 801aefe:	f005 ff05 	bl	8020d0c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801af02:	8b3b      	ldrh	r3, [r7, #24]
 801af04:	2201      	movs	r2, #1
 801af06:	4619      	mov	r1, r3
 801af08:	2036      	movs	r0, #54	; 0x36
 801af0a:	f7fa fc09 	bl	8015720 <pbuf_alloc>
 801af0e:	6178      	str	r0, [r7, #20]
 801af10:	697b      	ldr	r3, [r7, #20]
 801af12:	2b00      	cmp	r3, #0
 801af14:	f000 814b 	beq.w	801b1ae <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801af18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801af1c:	68ba      	ldr	r2, [r7, #8]
 801af1e:	441a      	add	r2, r3
 801af20:	697b      	ldr	r3, [r7, #20]
 801af22:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801af24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801af28:	b29b      	uxth	r3, r3
 801af2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801af2e:	4619      	mov	r1, r3
 801af30:	2036      	movs	r0, #54	; 0x36
 801af32:	f7fa fbf5 	bl	8015720 <pbuf_alloc>
 801af36:	6338      	str	r0, [r7, #48]	; 0x30
 801af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d103      	bne.n	801af46 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801af3e:	6978      	ldr	r0, [r7, #20]
 801af40:	f7fa fed2 	bl	8015ce8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801af44:	e136      	b.n	801b1b4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801af46:	6979      	ldr	r1, [r7, #20]
 801af48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af4a:	f7fa ff8f 	bl	8015e6c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801af4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af50:	f7fa ff52 	bl	8015df8 <pbuf_clen>
 801af54:	4603      	mov	r3, r0
 801af56:	461a      	mov	r2, r3
 801af58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801af5c:	4413      	add	r3, r2
 801af5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801af62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801af66:	2b09      	cmp	r3, #9
 801af68:	d903      	bls.n	801af72 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801af6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af6c:	f7fa febc 	bl	8015ce8 <pbuf_free>
      goto memerr;
 801af70:	e120      	b.n	801b1b4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801af76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801af7a:	441a      	add	r2, r3
 801af7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801af80:	9300      	str	r3, [sp, #0]
 801af82:	4613      	mov	r3, r2
 801af84:	2200      	movs	r2, #0
 801af86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801af88:	68f8      	ldr	r0, [r7, #12]
 801af8a:	f7ff fc51 	bl	801a830 <tcp_create_segment>
 801af8e:	64f8      	str	r0, [r7, #76]	; 0x4c
 801af90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801af92:	2b00      	cmp	r3, #0
 801af94:	f000 810d 	beq.w	801b1b2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801af98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	d102      	bne.n	801afa4 <tcp_write+0x450>
      queue = seg;
 801af9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afa0:	647b      	str	r3, [r7, #68]	; 0x44
 801afa2:	e00c      	b.n	801afbe <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801afa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	d106      	bne.n	801afb8 <tcp_write+0x464>
 801afaa:	4b53      	ldr	r3, [pc, #332]	; (801b0f8 <tcp_write+0x5a4>)
 801afac:	f240 22ab 	movw	r2, #683	; 0x2ab
 801afb0:	4955      	ldr	r1, [pc, #340]	; (801b108 <tcp_write+0x5b4>)
 801afb2:	4853      	ldr	r0, [pc, #332]	; (801b100 <tcp_write+0x5ac>)
 801afb4:	f005 feaa 	bl	8020d0c <iprintf>
      prev_seg->next = seg;
 801afb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801afba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801afbc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801afbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afc0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801afc2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801afc6:	8b3b      	ldrh	r3, [r7, #24]
 801afc8:	4413      	add	r3, r2
 801afca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801afce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801afd2:	88fb      	ldrh	r3, [r7, #6]
 801afd4:	429a      	cmp	r2, r3
 801afd6:	f4ff af3d 	bcc.w	801ae54 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801afda:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d02c      	beq.n	801b03a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801afe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801afe2:	685b      	ldr	r3, [r3, #4]
 801afe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801afe6:	e01e      	b.n	801b026 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801afe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afea:	891a      	ldrh	r2, [r3, #8]
 801afec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801afee:	4413      	add	r3, r2
 801aff0:	b29a      	uxth	r2, r3
 801aff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aff4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801aff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	2b00      	cmp	r3, #0
 801affc:	d110      	bne.n	801b020 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801affe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b000:	685b      	ldr	r3, [r3, #4]
 801b002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b004:	8952      	ldrh	r2, [r2, #10]
 801b006:	4413      	add	r3, r2
 801b008:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b00a:	68b9      	ldr	r1, [r7, #8]
 801b00c:	4618      	mov	r0, r3
 801b00e:	f004 ff5b 	bl	801fec8 <memcpy>
        p->len += oversize_used;
 801b012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b014:	895a      	ldrh	r2, [r3, #10]
 801b016:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b018:	4413      	add	r3, r2
 801b01a:	b29a      	uxth	r2, r3
 801b01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b01e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801b020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b022:	681b      	ldr	r3, [r3, #0]
 801b024:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b028:	2b00      	cmp	r3, #0
 801b02a:	d1dd      	bne.n	801afe8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801b02c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b02e:	891a      	ldrh	r2, [r3, #8]
 801b030:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b032:	4413      	add	r3, r2
 801b034:	b29a      	uxth	r2, r3
 801b036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b038:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801b03a:	8a7a      	ldrh	r2, [r7, #18]
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801b042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b044:	2b00      	cmp	r3, #0
 801b046:	d018      	beq.n	801b07a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801b048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d106      	bne.n	801b05c <tcp_write+0x508>
 801b04e:	4b2a      	ldr	r3, [pc, #168]	; (801b0f8 <tcp_write+0x5a4>)
 801b050:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801b054:	492d      	ldr	r1, [pc, #180]	; (801b10c <tcp_write+0x5b8>)
 801b056:	482a      	ldr	r0, [pc, #168]	; (801b100 <tcp_write+0x5ac>)
 801b058:	f005 fe58 	bl	8020d0c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801b05c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b05e:	685b      	ldr	r3, [r3, #4]
 801b060:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b062:	4618      	mov	r0, r3
 801b064:	f7fa ff02 	bl	8015e6c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801b068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b06a:	891a      	ldrh	r2, [r3, #8]
 801b06c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b06e:	891b      	ldrh	r3, [r3, #8]
 801b070:	4413      	add	r3, r2
 801b072:	b29a      	uxth	r2, r3
 801b074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b076:	811a      	strh	r2, [r3, #8]
 801b078:	e037      	b.n	801b0ea <tcp_write+0x596>
  } else if (extendlen > 0) {
 801b07a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d034      	beq.n	801b0ea <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801b080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b082:	2b00      	cmp	r3, #0
 801b084:	d003      	beq.n	801b08e <tcp_write+0x53a>
 801b086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b088:	685b      	ldr	r3, [r3, #4]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d106      	bne.n	801b09c <tcp_write+0x548>
 801b08e:	4b1a      	ldr	r3, [pc, #104]	; (801b0f8 <tcp_write+0x5a4>)
 801b090:	f240 22e6 	movw	r2, #742	; 0x2e6
 801b094:	491e      	ldr	r1, [pc, #120]	; (801b110 <tcp_write+0x5bc>)
 801b096:	481a      	ldr	r0, [pc, #104]	; (801b100 <tcp_write+0x5ac>)
 801b098:	f005 fe38 	bl	8020d0c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b09c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b09e:	685b      	ldr	r3, [r3, #4]
 801b0a0:	62bb      	str	r3, [r7, #40]	; 0x28
 801b0a2:	e009      	b.n	801b0b8 <tcp_write+0x564>
      p->tot_len += extendlen;
 801b0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0a6:	891a      	ldrh	r2, [r3, #8]
 801b0a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b0aa:	4413      	add	r3, r2
 801b0ac:	b29a      	uxth	r2, r3
 801b0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0b0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	62bb      	str	r3, [r7, #40]	; 0x28
 801b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0ba:	681b      	ldr	r3, [r3, #0]
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d1f1      	bne.n	801b0a4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801b0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0c2:	891a      	ldrh	r2, [r3, #8]
 801b0c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b0c6:	4413      	add	r3, r2
 801b0c8:	b29a      	uxth	r2, r3
 801b0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0cc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801b0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0d0:	895a      	ldrh	r2, [r3, #10]
 801b0d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b0d4:	4413      	add	r3, r2
 801b0d6:	b29a      	uxth	r2, r3
 801b0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0da:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801b0dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b0de:	891a      	ldrh	r2, [r3, #8]
 801b0e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b0e2:	4413      	add	r3, r2
 801b0e4:	b29a      	uxth	r2, r3
 801b0e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b0e8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801b0ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d111      	bne.n	801b114 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b0f4:	66da      	str	r2, [r3, #108]	; 0x6c
 801b0f6:	e010      	b.n	801b11a <tcp_write+0x5c6>
 801b0f8:	08027f58 	.word	0x08027f58
 801b0fc:	08028224 	.word	0x08028224
 801b100:	08027fd8 	.word	0x08027fd8
 801b104:	08028264 	.word	0x08028264
 801b108:	08028274 	.word	0x08028274
 801b10c:	08028288 	.word	0x08028288
 801b110:	080282c0 	.word	0x080282c0
  } else {
    last_unsent->next = queue;
 801b114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b116:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b118:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801b11a:	68fb      	ldr	r3, [r7, #12]
 801b11c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801b11e:	88fb      	ldrh	r3, [r7, #6]
 801b120:	441a      	add	r2, r3
 801b122:	68fb      	ldr	r3, [r7, #12]
 801b124:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801b126:	68fb      	ldr	r3, [r7, #12]
 801b128:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801b12c:	88fb      	ldrh	r3, [r7, #6]
 801b12e:	1ad3      	subs	r3, r2, r3
 801b130:	b29a      	uxth	r2, r3
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801b138:	68fb      	ldr	r3, [r7, #12]
 801b13a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b13e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d00e      	beq.n	801b16a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801b14c:	68fb      	ldr	r3, [r7, #12]
 801b14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b150:	2b00      	cmp	r3, #0
 801b152:	d10a      	bne.n	801b16a <tcp_write+0x616>
 801b154:	68fb      	ldr	r3, [r7, #12]
 801b156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d106      	bne.n	801b16a <tcp_write+0x616>
 801b15c:	4b2c      	ldr	r3, [pc, #176]	; (801b210 <tcp_write+0x6bc>)
 801b15e:	f240 3212 	movw	r2, #786	; 0x312
 801b162:	492c      	ldr	r1, [pc, #176]	; (801b214 <tcp_write+0x6c0>)
 801b164:	482c      	ldr	r0, [pc, #176]	; (801b218 <tcp_write+0x6c4>)
 801b166:	f005 fdd1 	bl	8020d0c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801b16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d016      	beq.n	801b19e <tcp_write+0x64a>
 801b170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b172:	68db      	ldr	r3, [r3, #12]
 801b174:	2b00      	cmp	r3, #0
 801b176:	d012      	beq.n	801b19e <tcp_write+0x64a>
 801b178:	797b      	ldrb	r3, [r7, #5]
 801b17a:	f003 0302 	and.w	r3, r3, #2
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d10d      	bne.n	801b19e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801b182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b184:	68db      	ldr	r3, [r3, #12]
 801b186:	899b      	ldrh	r3, [r3, #12]
 801b188:	b29c      	uxth	r4, r3
 801b18a:	2008      	movs	r0, #8
 801b18c:	f7f6 feb0 	bl	8011ef0 <lwip_htons>
 801b190:	4603      	mov	r3, r0
 801b192:	461a      	mov	r2, r3
 801b194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b196:	68db      	ldr	r3, [r3, #12]
 801b198:	4322      	orrs	r2, r4
 801b19a:	b292      	uxth	r2, r2
 801b19c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801b19e:	2300      	movs	r3, #0
 801b1a0:	e031      	b.n	801b206 <tcp_write+0x6b2>
          goto memerr;
 801b1a2:	bf00      	nop
 801b1a4:	e006      	b.n	801b1b4 <tcp_write+0x660>
            goto memerr;
 801b1a6:	bf00      	nop
 801b1a8:	e004      	b.n	801b1b4 <tcp_write+0x660>
        goto memerr;
 801b1aa:	bf00      	nop
 801b1ac:	e002      	b.n	801b1b4 <tcp_write+0x660>
        goto memerr;
 801b1ae:	bf00      	nop
 801b1b0:	e000      	b.n	801b1b4 <tcp_write+0x660>
      goto memerr;
 801b1b2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b1b4:	68fb      	ldr	r3, [r7, #12]
 801b1b6:	8b5b      	ldrh	r3, [r3, #26]
 801b1b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b1bc:	b29a      	uxth	r2, r3
 801b1be:	68fb      	ldr	r3, [r7, #12]
 801b1c0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801b1c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d002      	beq.n	801b1ce <tcp_write+0x67a>
    pbuf_free(concat_p);
 801b1c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b1ca:	f7fa fd8d 	bl	8015ce8 <pbuf_free>
  }
  if (queue != NULL) {
 801b1ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	d002      	beq.n	801b1da <tcp_write+0x686>
    tcp_segs_free(queue);
 801b1d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801b1d6:	f7fc fb6f 	bl	80178b8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801b1da:	68fb      	ldr	r3, [r7, #12]
 801b1dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d00e      	beq.n	801b202 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b1e4:	68fb      	ldr	r3, [r7, #12]
 801b1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d10a      	bne.n	801b202 <tcp_write+0x6ae>
 801b1ec:	68fb      	ldr	r3, [r7, #12]
 801b1ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d106      	bne.n	801b202 <tcp_write+0x6ae>
 801b1f4:	4b06      	ldr	r3, [pc, #24]	; (801b210 <tcp_write+0x6bc>)
 801b1f6:	f240 3227 	movw	r2, #807	; 0x327
 801b1fa:	4906      	ldr	r1, [pc, #24]	; (801b214 <tcp_write+0x6c0>)
 801b1fc:	4806      	ldr	r0, [pc, #24]	; (801b218 <tcp_write+0x6c4>)
 801b1fe:	f005 fd85 	bl	8020d0c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801b202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b206:	4618      	mov	r0, r3
 801b208:	375c      	adds	r7, #92	; 0x5c
 801b20a:	46bd      	mov	sp, r7
 801b20c:	bd90      	pop	{r4, r7, pc}
 801b20e:	bf00      	nop
 801b210:	08027f58 	.word	0x08027f58
 801b214:	080282f8 	.word	0x080282f8
 801b218:	08027fd8 	.word	0x08027fd8

0801b21c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801b21c:	b590      	push	{r4, r7, lr}
 801b21e:	b08b      	sub	sp, #44	; 0x2c
 801b220:	af02      	add	r7, sp, #8
 801b222:	6078      	str	r0, [r7, #4]
 801b224:	460b      	mov	r3, r1
 801b226:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801b228:	2300      	movs	r3, #0
 801b22a:	61fb      	str	r3, [r7, #28]
 801b22c:	2300      	movs	r3, #0
 801b22e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801b230:	2300      	movs	r3, #0
 801b232:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d106      	bne.n	801b248 <tcp_split_unsent_seg+0x2c>
 801b23a:	4b95      	ldr	r3, [pc, #596]	; (801b490 <tcp_split_unsent_seg+0x274>)
 801b23c:	f240 324b 	movw	r2, #843	; 0x34b
 801b240:	4994      	ldr	r1, [pc, #592]	; (801b494 <tcp_split_unsent_seg+0x278>)
 801b242:	4895      	ldr	r0, [pc, #596]	; (801b498 <tcp_split_unsent_seg+0x27c>)
 801b244:	f005 fd62 	bl	8020d0c <iprintf>

  useg = pcb->unsent;
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b24c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801b24e:	697b      	ldr	r3, [r7, #20]
 801b250:	2b00      	cmp	r3, #0
 801b252:	d102      	bne.n	801b25a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801b254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b258:	e116      	b.n	801b488 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801b25a:	887b      	ldrh	r3, [r7, #2]
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d109      	bne.n	801b274 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801b260:	4b8b      	ldr	r3, [pc, #556]	; (801b490 <tcp_split_unsent_seg+0x274>)
 801b262:	f240 3253 	movw	r2, #851	; 0x353
 801b266:	498d      	ldr	r1, [pc, #564]	; (801b49c <tcp_split_unsent_seg+0x280>)
 801b268:	488b      	ldr	r0, [pc, #556]	; (801b498 <tcp_split_unsent_seg+0x27c>)
 801b26a:	f005 fd4f 	bl	8020d0c <iprintf>
    return ERR_VAL;
 801b26e:	f06f 0305 	mvn.w	r3, #5
 801b272:	e109      	b.n	801b488 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801b274:	697b      	ldr	r3, [r7, #20]
 801b276:	891b      	ldrh	r3, [r3, #8]
 801b278:	887a      	ldrh	r2, [r7, #2]
 801b27a:	429a      	cmp	r2, r3
 801b27c:	d301      	bcc.n	801b282 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801b27e:	2300      	movs	r3, #0
 801b280:	e102      	b.n	801b488 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b286:	887a      	ldrh	r2, [r7, #2]
 801b288:	429a      	cmp	r2, r3
 801b28a:	d906      	bls.n	801b29a <tcp_split_unsent_seg+0x7e>
 801b28c:	4b80      	ldr	r3, [pc, #512]	; (801b490 <tcp_split_unsent_seg+0x274>)
 801b28e:	f240 325b 	movw	r2, #859	; 0x35b
 801b292:	4983      	ldr	r1, [pc, #524]	; (801b4a0 <tcp_split_unsent_seg+0x284>)
 801b294:	4880      	ldr	r0, [pc, #512]	; (801b498 <tcp_split_unsent_seg+0x27c>)
 801b296:	f005 fd39 	bl	8020d0c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801b29a:	697b      	ldr	r3, [r7, #20]
 801b29c:	891b      	ldrh	r3, [r3, #8]
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d106      	bne.n	801b2b0 <tcp_split_unsent_seg+0x94>
 801b2a2:	4b7b      	ldr	r3, [pc, #492]	; (801b490 <tcp_split_unsent_seg+0x274>)
 801b2a4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801b2a8:	497e      	ldr	r1, [pc, #504]	; (801b4a4 <tcp_split_unsent_seg+0x288>)
 801b2aa:	487b      	ldr	r0, [pc, #492]	; (801b498 <tcp_split_unsent_seg+0x27c>)
 801b2ac:	f005 fd2e 	bl	8020d0c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801b2b0:	697b      	ldr	r3, [r7, #20]
 801b2b2:	7a9b      	ldrb	r3, [r3, #10]
 801b2b4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b2b6:	7bfb      	ldrb	r3, [r7, #15]
 801b2b8:	009b      	lsls	r3, r3, #2
 801b2ba:	b2db      	uxtb	r3, r3
 801b2bc:	f003 0304 	and.w	r3, r3, #4
 801b2c0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801b2c2:	697b      	ldr	r3, [r7, #20]
 801b2c4:	891a      	ldrh	r2, [r3, #8]
 801b2c6:	887b      	ldrh	r3, [r7, #2]
 801b2c8:	1ad3      	subs	r3, r2, r3
 801b2ca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801b2cc:	7bbb      	ldrb	r3, [r7, #14]
 801b2ce:	b29a      	uxth	r2, r3
 801b2d0:	89bb      	ldrh	r3, [r7, #12]
 801b2d2:	4413      	add	r3, r2
 801b2d4:	b29b      	uxth	r3, r3
 801b2d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b2da:	4619      	mov	r1, r3
 801b2dc:	2036      	movs	r0, #54	; 0x36
 801b2de:	f7fa fa1f 	bl	8015720 <pbuf_alloc>
 801b2e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b2e4:	693b      	ldr	r3, [r7, #16]
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	f000 80b7 	beq.w	801b45a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801b2ec:	697b      	ldr	r3, [r7, #20]
 801b2ee:	685b      	ldr	r3, [r3, #4]
 801b2f0:	891a      	ldrh	r2, [r3, #8]
 801b2f2:	697b      	ldr	r3, [r7, #20]
 801b2f4:	891b      	ldrh	r3, [r3, #8]
 801b2f6:	1ad3      	subs	r3, r2, r3
 801b2f8:	b29a      	uxth	r2, r3
 801b2fa:	887b      	ldrh	r3, [r7, #2]
 801b2fc:	4413      	add	r3, r2
 801b2fe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801b300:	697b      	ldr	r3, [r7, #20]
 801b302:	6858      	ldr	r0, [r3, #4]
 801b304:	693b      	ldr	r3, [r7, #16]
 801b306:	685a      	ldr	r2, [r3, #4]
 801b308:	7bbb      	ldrb	r3, [r7, #14]
 801b30a:	18d1      	adds	r1, r2, r3
 801b30c:	897b      	ldrh	r3, [r7, #10]
 801b30e:	89ba      	ldrh	r2, [r7, #12]
 801b310:	f7fa fed4 	bl	80160bc <pbuf_copy_partial>
 801b314:	4603      	mov	r3, r0
 801b316:	461a      	mov	r2, r3
 801b318:	89bb      	ldrh	r3, [r7, #12]
 801b31a:	4293      	cmp	r3, r2
 801b31c:	f040 809f 	bne.w	801b45e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801b320:	697b      	ldr	r3, [r7, #20]
 801b322:	68db      	ldr	r3, [r3, #12]
 801b324:	899b      	ldrh	r3, [r3, #12]
 801b326:	b29b      	uxth	r3, r3
 801b328:	4618      	mov	r0, r3
 801b32a:	f7f6 fde1 	bl	8011ef0 <lwip_htons>
 801b32e:	4603      	mov	r3, r0
 801b330:	b2db      	uxtb	r3, r3
 801b332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b336:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801b338:	2300      	movs	r3, #0
 801b33a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801b33c:	7efb      	ldrb	r3, [r7, #27]
 801b33e:	f003 0308 	and.w	r3, r3, #8
 801b342:	2b00      	cmp	r3, #0
 801b344:	d007      	beq.n	801b356 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801b346:	7efb      	ldrb	r3, [r7, #27]
 801b348:	f023 0308 	bic.w	r3, r3, #8
 801b34c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801b34e:	7ebb      	ldrb	r3, [r7, #26]
 801b350:	f043 0308 	orr.w	r3, r3, #8
 801b354:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801b356:	7efb      	ldrb	r3, [r7, #27]
 801b358:	f003 0301 	and.w	r3, r3, #1
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d007      	beq.n	801b370 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801b360:	7efb      	ldrb	r3, [r7, #27]
 801b362:	f023 0301 	bic.w	r3, r3, #1
 801b366:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801b368:	7ebb      	ldrb	r3, [r7, #26]
 801b36a:	f043 0301 	orr.w	r3, r3, #1
 801b36e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801b370:	697b      	ldr	r3, [r7, #20]
 801b372:	68db      	ldr	r3, [r3, #12]
 801b374:	685b      	ldr	r3, [r3, #4]
 801b376:	4618      	mov	r0, r3
 801b378:	f7f6 fdcf 	bl	8011f1a <lwip_htonl>
 801b37c:	4602      	mov	r2, r0
 801b37e:	887b      	ldrh	r3, [r7, #2]
 801b380:	18d1      	adds	r1, r2, r3
 801b382:	7eba      	ldrb	r2, [r7, #26]
 801b384:	7bfb      	ldrb	r3, [r7, #15]
 801b386:	9300      	str	r3, [sp, #0]
 801b388:	460b      	mov	r3, r1
 801b38a:	6939      	ldr	r1, [r7, #16]
 801b38c:	6878      	ldr	r0, [r7, #4]
 801b38e:	f7ff fa4f 	bl	801a830 <tcp_create_segment>
 801b392:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801b394:	69fb      	ldr	r3, [r7, #28]
 801b396:	2b00      	cmp	r3, #0
 801b398:	d063      	beq.n	801b462 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801b39a:	697b      	ldr	r3, [r7, #20]
 801b39c:	685b      	ldr	r3, [r3, #4]
 801b39e:	4618      	mov	r0, r3
 801b3a0:	f7fa fd2a 	bl	8015df8 <pbuf_clen>
 801b3a4:	4603      	mov	r3, r0
 801b3a6:	461a      	mov	r2, r3
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b3ae:	1a9b      	subs	r3, r3, r2
 801b3b0:	b29a      	uxth	r2, r3
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801b3b8:	697b      	ldr	r3, [r7, #20]
 801b3ba:	6858      	ldr	r0, [r3, #4]
 801b3bc:	697b      	ldr	r3, [r7, #20]
 801b3be:	685b      	ldr	r3, [r3, #4]
 801b3c0:	891a      	ldrh	r2, [r3, #8]
 801b3c2:	89bb      	ldrh	r3, [r7, #12]
 801b3c4:	1ad3      	subs	r3, r2, r3
 801b3c6:	b29b      	uxth	r3, r3
 801b3c8:	4619      	mov	r1, r3
 801b3ca:	f7fa fb07 	bl	80159dc <pbuf_realloc>
  useg->len -= remainder;
 801b3ce:	697b      	ldr	r3, [r7, #20]
 801b3d0:	891a      	ldrh	r2, [r3, #8]
 801b3d2:	89bb      	ldrh	r3, [r7, #12]
 801b3d4:	1ad3      	subs	r3, r2, r3
 801b3d6:	b29a      	uxth	r2, r3
 801b3d8:	697b      	ldr	r3, [r7, #20]
 801b3da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801b3dc:	697b      	ldr	r3, [r7, #20]
 801b3de:	68db      	ldr	r3, [r3, #12]
 801b3e0:	899b      	ldrh	r3, [r3, #12]
 801b3e2:	b29c      	uxth	r4, r3
 801b3e4:	7efb      	ldrb	r3, [r7, #27]
 801b3e6:	b29b      	uxth	r3, r3
 801b3e8:	4618      	mov	r0, r3
 801b3ea:	f7f6 fd81 	bl	8011ef0 <lwip_htons>
 801b3ee:	4603      	mov	r3, r0
 801b3f0:	461a      	mov	r2, r3
 801b3f2:	697b      	ldr	r3, [r7, #20]
 801b3f4:	68db      	ldr	r3, [r3, #12]
 801b3f6:	4322      	orrs	r2, r4
 801b3f8:	b292      	uxth	r2, r2
 801b3fa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801b3fc:	697b      	ldr	r3, [r7, #20]
 801b3fe:	685b      	ldr	r3, [r3, #4]
 801b400:	4618      	mov	r0, r3
 801b402:	f7fa fcf9 	bl	8015df8 <pbuf_clen>
 801b406:	4603      	mov	r3, r0
 801b408:	461a      	mov	r2, r3
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b410:	4413      	add	r3, r2
 801b412:	b29a      	uxth	r2, r3
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b41a:	69fb      	ldr	r3, [r7, #28]
 801b41c:	685b      	ldr	r3, [r3, #4]
 801b41e:	4618      	mov	r0, r3
 801b420:	f7fa fcea 	bl	8015df8 <pbuf_clen>
 801b424:	4603      	mov	r3, r0
 801b426:	461a      	mov	r2, r3
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b42e:	4413      	add	r3, r2
 801b430:	b29a      	uxth	r2, r3
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801b438:	697b      	ldr	r3, [r7, #20]
 801b43a:	681a      	ldr	r2, [r3, #0]
 801b43c:	69fb      	ldr	r3, [r7, #28]
 801b43e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801b440:	697b      	ldr	r3, [r7, #20]
 801b442:	69fa      	ldr	r2, [r7, #28]
 801b444:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801b446:	69fb      	ldr	r3, [r7, #28]
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d103      	bne.n	801b456 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	2200      	movs	r2, #0
 801b452:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801b456:	2300      	movs	r3, #0
 801b458:	e016      	b.n	801b488 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801b45a:	bf00      	nop
 801b45c:	e002      	b.n	801b464 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b45e:	bf00      	nop
 801b460:	e000      	b.n	801b464 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b462:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801b464:	69fb      	ldr	r3, [r7, #28]
 801b466:	2b00      	cmp	r3, #0
 801b468:	d006      	beq.n	801b478 <tcp_split_unsent_seg+0x25c>
 801b46a:	4b09      	ldr	r3, [pc, #36]	; (801b490 <tcp_split_unsent_seg+0x274>)
 801b46c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801b470:	490d      	ldr	r1, [pc, #52]	; (801b4a8 <tcp_split_unsent_seg+0x28c>)
 801b472:	4809      	ldr	r0, [pc, #36]	; (801b498 <tcp_split_unsent_seg+0x27c>)
 801b474:	f005 fc4a 	bl	8020d0c <iprintf>
  if (p != NULL) {
 801b478:	693b      	ldr	r3, [r7, #16]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d002      	beq.n	801b484 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801b47e:	6938      	ldr	r0, [r7, #16]
 801b480:	f7fa fc32 	bl	8015ce8 <pbuf_free>
  }

  return ERR_MEM;
 801b484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b488:	4618      	mov	r0, r3
 801b48a:	3724      	adds	r7, #36	; 0x24
 801b48c:	46bd      	mov	sp, r7
 801b48e:	bd90      	pop	{r4, r7, pc}
 801b490:	08027f58 	.word	0x08027f58
 801b494:	08028318 	.word	0x08028318
 801b498:	08027fd8 	.word	0x08027fd8
 801b49c:	0802833c 	.word	0x0802833c
 801b4a0:	08028360 	.word	0x08028360
 801b4a4:	08028370 	.word	0x08028370
 801b4a8:	08028380 	.word	0x08028380

0801b4ac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801b4ac:	b590      	push	{r4, r7, lr}
 801b4ae:	b085      	sub	sp, #20
 801b4b0:	af00      	add	r7, sp, #0
 801b4b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d106      	bne.n	801b4c8 <tcp_send_fin+0x1c>
 801b4ba:	4b21      	ldr	r3, [pc, #132]	; (801b540 <tcp_send_fin+0x94>)
 801b4bc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801b4c0:	4920      	ldr	r1, [pc, #128]	; (801b544 <tcp_send_fin+0x98>)
 801b4c2:	4821      	ldr	r0, [pc, #132]	; (801b548 <tcp_send_fin+0x9c>)
 801b4c4:	f005 fc22 	bl	8020d0c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	d02e      	beq.n	801b52e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4d4:	60fb      	str	r3, [r7, #12]
 801b4d6:	e002      	b.n	801b4de <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801b4d8:	68fb      	ldr	r3, [r7, #12]
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b4de:	68fb      	ldr	r3, [r7, #12]
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	d1f8      	bne.n	801b4d8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801b4e6:	68fb      	ldr	r3, [r7, #12]
 801b4e8:	68db      	ldr	r3, [r3, #12]
 801b4ea:	899b      	ldrh	r3, [r3, #12]
 801b4ec:	b29b      	uxth	r3, r3
 801b4ee:	4618      	mov	r0, r3
 801b4f0:	f7f6 fcfe 	bl	8011ef0 <lwip_htons>
 801b4f4:	4603      	mov	r3, r0
 801b4f6:	b2db      	uxtb	r3, r3
 801b4f8:	f003 0307 	and.w	r3, r3, #7
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d116      	bne.n	801b52e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	68db      	ldr	r3, [r3, #12]
 801b504:	899b      	ldrh	r3, [r3, #12]
 801b506:	b29c      	uxth	r4, r3
 801b508:	2001      	movs	r0, #1
 801b50a:	f7f6 fcf1 	bl	8011ef0 <lwip_htons>
 801b50e:	4603      	mov	r3, r0
 801b510:	461a      	mov	r2, r3
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	68db      	ldr	r3, [r3, #12]
 801b516:	4322      	orrs	r2, r4
 801b518:	b292      	uxth	r2, r2
 801b51a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	8b5b      	ldrh	r3, [r3, #26]
 801b520:	f043 0320 	orr.w	r3, r3, #32
 801b524:	b29a      	uxth	r2, r3
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801b52a:	2300      	movs	r3, #0
 801b52c:	e004      	b.n	801b538 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801b52e:	2101      	movs	r1, #1
 801b530:	6878      	ldr	r0, [r7, #4]
 801b532:	f000 f80b 	bl	801b54c <tcp_enqueue_flags>
 801b536:	4603      	mov	r3, r0
}
 801b538:	4618      	mov	r0, r3
 801b53a:	3714      	adds	r7, #20
 801b53c:	46bd      	mov	sp, r7
 801b53e:	bd90      	pop	{r4, r7, pc}
 801b540:	08027f58 	.word	0x08027f58
 801b544:	0802838c 	.word	0x0802838c
 801b548:	08027fd8 	.word	0x08027fd8

0801b54c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801b54c:	b580      	push	{r7, lr}
 801b54e:	b08a      	sub	sp, #40	; 0x28
 801b550:	af02      	add	r7, sp, #8
 801b552:	6078      	str	r0, [r7, #4]
 801b554:	460b      	mov	r3, r1
 801b556:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801b558:	2300      	movs	r3, #0
 801b55a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801b55c:	2300      	movs	r3, #0
 801b55e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b560:	78fb      	ldrb	r3, [r7, #3]
 801b562:	f003 0303 	and.w	r3, r3, #3
 801b566:	2b00      	cmp	r3, #0
 801b568:	d106      	bne.n	801b578 <tcp_enqueue_flags+0x2c>
 801b56a:	4b67      	ldr	r3, [pc, #412]	; (801b708 <tcp_enqueue_flags+0x1bc>)
 801b56c:	f240 4211 	movw	r2, #1041	; 0x411
 801b570:	4966      	ldr	r1, [pc, #408]	; (801b70c <tcp_enqueue_flags+0x1c0>)
 801b572:	4867      	ldr	r0, [pc, #412]	; (801b710 <tcp_enqueue_flags+0x1c4>)
 801b574:	f005 fbca 	bl	8020d0c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	d106      	bne.n	801b58c <tcp_enqueue_flags+0x40>
 801b57e:	4b62      	ldr	r3, [pc, #392]	; (801b708 <tcp_enqueue_flags+0x1bc>)
 801b580:	f240 4213 	movw	r2, #1043	; 0x413
 801b584:	4963      	ldr	r1, [pc, #396]	; (801b714 <tcp_enqueue_flags+0x1c8>)
 801b586:	4862      	ldr	r0, [pc, #392]	; (801b710 <tcp_enqueue_flags+0x1c4>)
 801b588:	f005 fbc0 	bl	8020d0c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801b58c:	78fb      	ldrb	r3, [r7, #3]
 801b58e:	f003 0302 	and.w	r3, r3, #2
 801b592:	2b00      	cmp	r3, #0
 801b594:	d001      	beq.n	801b59a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801b596:	2301      	movs	r3, #1
 801b598:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b59a:	7ffb      	ldrb	r3, [r7, #31]
 801b59c:	009b      	lsls	r3, r3, #2
 801b59e:	b2db      	uxtb	r3, r3
 801b5a0:	f003 0304 	and.w	r3, r3, #4
 801b5a4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b5a6:	7dfb      	ldrb	r3, [r7, #23]
 801b5a8:	b29b      	uxth	r3, r3
 801b5aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b5ae:	4619      	mov	r1, r3
 801b5b0:	2036      	movs	r0, #54	; 0x36
 801b5b2:	f7fa f8b5 	bl	8015720 <pbuf_alloc>
 801b5b6:	6138      	str	r0, [r7, #16]
 801b5b8:	693b      	ldr	r3, [r7, #16]
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d109      	bne.n	801b5d2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	8b5b      	ldrh	r3, [r3, #26]
 801b5c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b5c6:	b29a      	uxth	r2, r3
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b5cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b5d0:	e095      	b.n	801b6fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b5d2:	693b      	ldr	r3, [r7, #16]
 801b5d4:	895a      	ldrh	r2, [r3, #10]
 801b5d6:	7dfb      	ldrb	r3, [r7, #23]
 801b5d8:	b29b      	uxth	r3, r3
 801b5da:	429a      	cmp	r2, r3
 801b5dc:	d206      	bcs.n	801b5ec <tcp_enqueue_flags+0xa0>
 801b5de:	4b4a      	ldr	r3, [pc, #296]	; (801b708 <tcp_enqueue_flags+0x1bc>)
 801b5e0:	f240 4239 	movw	r2, #1081	; 0x439
 801b5e4:	494c      	ldr	r1, [pc, #304]	; (801b718 <tcp_enqueue_flags+0x1cc>)
 801b5e6:	484a      	ldr	r0, [pc, #296]	; (801b710 <tcp_enqueue_flags+0x1c4>)
 801b5e8:	f005 fb90 	bl	8020d0c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801b5f0:	78fa      	ldrb	r2, [r7, #3]
 801b5f2:	7ffb      	ldrb	r3, [r7, #31]
 801b5f4:	9300      	str	r3, [sp, #0]
 801b5f6:	460b      	mov	r3, r1
 801b5f8:	6939      	ldr	r1, [r7, #16]
 801b5fa:	6878      	ldr	r0, [r7, #4]
 801b5fc:	f7ff f918 	bl	801a830 <tcp_create_segment>
 801b600:	60f8      	str	r0, [r7, #12]
 801b602:	68fb      	ldr	r3, [r7, #12]
 801b604:	2b00      	cmp	r3, #0
 801b606:	d109      	bne.n	801b61c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	8b5b      	ldrh	r3, [r3, #26]
 801b60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b610:	b29a      	uxth	r2, r3
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b61a:	e070      	b.n	801b6fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	68db      	ldr	r3, [r3, #12]
 801b620:	f003 0303 	and.w	r3, r3, #3
 801b624:	2b00      	cmp	r3, #0
 801b626:	d006      	beq.n	801b636 <tcp_enqueue_flags+0xea>
 801b628:	4b37      	ldr	r3, [pc, #220]	; (801b708 <tcp_enqueue_flags+0x1bc>)
 801b62a:	f240 4242 	movw	r2, #1090	; 0x442
 801b62e:	493b      	ldr	r1, [pc, #236]	; (801b71c <tcp_enqueue_flags+0x1d0>)
 801b630:	4837      	ldr	r0, [pc, #220]	; (801b710 <tcp_enqueue_flags+0x1c4>)
 801b632:	f005 fb6b 	bl	8020d0c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b636:	68fb      	ldr	r3, [r7, #12]
 801b638:	891b      	ldrh	r3, [r3, #8]
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d006      	beq.n	801b64c <tcp_enqueue_flags+0x100>
 801b63e:	4b32      	ldr	r3, [pc, #200]	; (801b708 <tcp_enqueue_flags+0x1bc>)
 801b640:	f240 4243 	movw	r2, #1091	; 0x443
 801b644:	4936      	ldr	r1, [pc, #216]	; (801b720 <tcp_enqueue_flags+0x1d4>)
 801b646:	4832      	ldr	r0, [pc, #200]	; (801b710 <tcp_enqueue_flags+0x1c4>)
 801b648:	f005 fb60 	bl	8020d0c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b650:	2b00      	cmp	r3, #0
 801b652:	d103      	bne.n	801b65c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	68fa      	ldr	r2, [r7, #12]
 801b658:	66da      	str	r2, [r3, #108]	; 0x6c
 801b65a:	e00d      	b.n	801b678 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b660:	61bb      	str	r3, [r7, #24]
 801b662:	e002      	b.n	801b66a <tcp_enqueue_flags+0x11e>
 801b664:	69bb      	ldr	r3, [r7, #24]
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	61bb      	str	r3, [r7, #24]
 801b66a:	69bb      	ldr	r3, [r7, #24]
 801b66c:	681b      	ldr	r3, [r3, #0]
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d1f8      	bne.n	801b664 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801b672:	69bb      	ldr	r3, [r7, #24]
 801b674:	68fa      	ldr	r2, [r7, #12]
 801b676:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	2200      	movs	r2, #0
 801b67c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b680:	78fb      	ldrb	r3, [r7, #3]
 801b682:	f003 0302 	and.w	r3, r3, #2
 801b686:	2b00      	cmp	r3, #0
 801b688:	d104      	bne.n	801b694 <tcp_enqueue_flags+0x148>
 801b68a:	78fb      	ldrb	r3, [r7, #3]
 801b68c:	f003 0301 	and.w	r3, r3, #1
 801b690:	2b00      	cmp	r3, #0
 801b692:	d004      	beq.n	801b69e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b698:	1c5a      	adds	r2, r3, #1
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801b69e:	78fb      	ldrb	r3, [r7, #3]
 801b6a0:	f003 0301 	and.w	r3, r3, #1
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d006      	beq.n	801b6b6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	8b5b      	ldrh	r3, [r3, #26]
 801b6ac:	f043 0320 	orr.w	r3, r3, #32
 801b6b0:	b29a      	uxth	r2, r3
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b6b6:	68fb      	ldr	r3, [r7, #12]
 801b6b8:	685b      	ldr	r3, [r3, #4]
 801b6ba:	4618      	mov	r0, r3
 801b6bc:	f7fa fb9c 	bl	8015df8 <pbuf_clen>
 801b6c0:	4603      	mov	r3, r0
 801b6c2:	461a      	mov	r2, r3
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b6ca:	4413      	add	r3, r2
 801b6cc:	b29a      	uxth	r2, r3
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	d00e      	beq.n	801b6fc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	d10a      	bne.n	801b6fc <tcp_enqueue_flags+0x1b0>
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d106      	bne.n	801b6fc <tcp_enqueue_flags+0x1b0>
 801b6ee:	4b06      	ldr	r3, [pc, #24]	; (801b708 <tcp_enqueue_flags+0x1bc>)
 801b6f0:	f240 4265 	movw	r2, #1125	; 0x465
 801b6f4:	490b      	ldr	r1, [pc, #44]	; (801b724 <tcp_enqueue_flags+0x1d8>)
 801b6f6:	4806      	ldr	r0, [pc, #24]	; (801b710 <tcp_enqueue_flags+0x1c4>)
 801b6f8:	f005 fb08 	bl	8020d0c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801b6fc:	2300      	movs	r3, #0
}
 801b6fe:	4618      	mov	r0, r3
 801b700:	3720      	adds	r7, #32
 801b702:	46bd      	mov	sp, r7
 801b704:	bd80      	pop	{r7, pc}
 801b706:	bf00      	nop
 801b708:	08027f58 	.word	0x08027f58
 801b70c:	080283a8 	.word	0x080283a8
 801b710:	08027fd8 	.word	0x08027fd8
 801b714:	08028400 	.word	0x08028400
 801b718:	08028420 	.word	0x08028420
 801b71c:	0802845c 	.word	0x0802845c
 801b720:	08028474 	.word	0x08028474
 801b724:	080284a0 	.word	0x080284a0

0801b728 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801b728:	b5b0      	push	{r4, r5, r7, lr}
 801b72a:	b08a      	sub	sp, #40	; 0x28
 801b72c:	af00      	add	r7, sp, #0
 801b72e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	2b00      	cmp	r3, #0
 801b734:	d106      	bne.n	801b744 <tcp_output+0x1c>
 801b736:	4b9e      	ldr	r3, [pc, #632]	; (801b9b0 <tcp_output+0x288>)
 801b738:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801b73c:	499d      	ldr	r1, [pc, #628]	; (801b9b4 <tcp_output+0x28c>)
 801b73e:	489e      	ldr	r0, [pc, #632]	; (801b9b8 <tcp_output+0x290>)
 801b740:	f005 fae4 	bl	8020d0c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	7d1b      	ldrb	r3, [r3, #20]
 801b748:	2b01      	cmp	r3, #1
 801b74a:	d106      	bne.n	801b75a <tcp_output+0x32>
 801b74c:	4b98      	ldr	r3, [pc, #608]	; (801b9b0 <tcp_output+0x288>)
 801b74e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801b752:	499a      	ldr	r1, [pc, #616]	; (801b9bc <tcp_output+0x294>)
 801b754:	4898      	ldr	r0, [pc, #608]	; (801b9b8 <tcp_output+0x290>)
 801b756:	f005 fad9 	bl	8020d0c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801b75a:	4b99      	ldr	r3, [pc, #612]	; (801b9c0 <tcp_output+0x298>)
 801b75c:	681b      	ldr	r3, [r3, #0]
 801b75e:	687a      	ldr	r2, [r7, #4]
 801b760:	429a      	cmp	r2, r3
 801b762:	d101      	bne.n	801b768 <tcp_output+0x40>
    return ERR_OK;
 801b764:	2300      	movs	r3, #0
 801b766:	e1ce      	b.n	801bb06 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b774:	4293      	cmp	r3, r2
 801b776:	bf28      	it	cs
 801b778:	4613      	movcs	r3, r2
 801b77a:	b29b      	uxth	r3, r3
 801b77c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b782:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801b784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b786:	2b00      	cmp	r3, #0
 801b788:	d10b      	bne.n	801b7a2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	8b5b      	ldrh	r3, [r3, #26]
 801b78e:	f003 0302 	and.w	r3, r3, #2
 801b792:	2b00      	cmp	r3, #0
 801b794:	f000 81aa 	beq.w	801baec <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801b798:	6878      	ldr	r0, [r7, #4]
 801b79a:	f000 fdcb 	bl	801c334 <tcp_send_empty_ack>
 801b79e:	4603      	mov	r3, r0
 801b7a0:	e1b1      	b.n	801bb06 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801b7a2:	6879      	ldr	r1, [r7, #4]
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	3304      	adds	r3, #4
 801b7a8:	461a      	mov	r2, r3
 801b7aa:	6878      	ldr	r0, [r7, #4]
 801b7ac:	f7ff f824 	bl	801a7f8 <tcp_route>
 801b7b0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801b7b2:	697b      	ldr	r3, [r7, #20]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d102      	bne.n	801b7be <tcp_output+0x96>
    return ERR_RTE;
 801b7b8:	f06f 0303 	mvn.w	r3, #3
 801b7bc:	e1a3      	b.n	801bb06 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d003      	beq.n	801b7cc <tcp_output+0xa4>
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	681b      	ldr	r3, [r3, #0]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d111      	bne.n	801b7f0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801b7cc:	697b      	ldr	r3, [r7, #20]
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d002      	beq.n	801b7d8 <tcp_output+0xb0>
 801b7d2:	697b      	ldr	r3, [r7, #20]
 801b7d4:	3304      	adds	r3, #4
 801b7d6:	e000      	b.n	801b7da <tcp_output+0xb2>
 801b7d8:	2300      	movs	r3, #0
 801b7da:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801b7dc:	693b      	ldr	r3, [r7, #16]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d102      	bne.n	801b7e8 <tcp_output+0xc0>
      return ERR_RTE;
 801b7e2:	f06f 0303 	mvn.w	r3, #3
 801b7e6:	e18e      	b.n	801bb06 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b7e8:	693b      	ldr	r3, [r7, #16]
 801b7ea:	681a      	ldr	r2, [r3, #0]
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7f2:	68db      	ldr	r3, [r3, #12]
 801b7f4:	685b      	ldr	r3, [r3, #4]
 801b7f6:	4618      	mov	r0, r3
 801b7f8:	f7f6 fb8f 	bl	8011f1a <lwip_htonl>
 801b7fc:	4602      	mov	r2, r0
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b802:	1ad3      	subs	r3, r2, r3
 801b804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b806:	8912      	ldrh	r2, [r2, #8]
 801b808:	4413      	add	r3, r2
 801b80a:	69ba      	ldr	r2, [r7, #24]
 801b80c:	429a      	cmp	r2, r3
 801b80e:	d227      	bcs.n	801b860 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b816:	461a      	mov	r2, r3
 801b818:	69bb      	ldr	r3, [r7, #24]
 801b81a:	4293      	cmp	r3, r2
 801b81c:	d114      	bne.n	801b848 <tcp_output+0x120>
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b822:	2b00      	cmp	r3, #0
 801b824:	d110      	bne.n	801b848 <tcp_output+0x120>
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d10b      	bne.n	801b848 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	2200      	movs	r2, #0
 801b834:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	2201      	movs	r2, #1
 801b83c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	2200      	movs	r2, #0
 801b844:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	8b5b      	ldrh	r3, [r3, #26]
 801b84c:	f003 0302 	and.w	r3, r3, #2
 801b850:	2b00      	cmp	r3, #0
 801b852:	f000 814d 	beq.w	801baf0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801b856:	6878      	ldr	r0, [r7, #4]
 801b858:	f000 fd6c 	bl	801c334 <tcp_send_empty_ack>
 801b85c:	4603      	mov	r3, r0
 801b85e:	e152      	b.n	801bb06 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	2200      	movs	r2, #0
 801b864:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b86c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b86e:	6a3b      	ldr	r3, [r7, #32]
 801b870:	2b00      	cmp	r3, #0
 801b872:	f000 811c 	beq.w	801baae <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801b876:	e002      	b.n	801b87e <tcp_output+0x156>
 801b878:	6a3b      	ldr	r3, [r7, #32]
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	623b      	str	r3, [r7, #32]
 801b87e:	6a3b      	ldr	r3, [r7, #32]
 801b880:	681b      	ldr	r3, [r3, #0]
 801b882:	2b00      	cmp	r3, #0
 801b884:	d1f8      	bne.n	801b878 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801b886:	e112      	b.n	801baae <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b88a:	68db      	ldr	r3, [r3, #12]
 801b88c:	899b      	ldrh	r3, [r3, #12]
 801b88e:	b29b      	uxth	r3, r3
 801b890:	4618      	mov	r0, r3
 801b892:	f7f6 fb2d 	bl	8011ef0 <lwip_htons>
 801b896:	4603      	mov	r3, r0
 801b898:	b2db      	uxtb	r3, r3
 801b89a:	f003 0304 	and.w	r3, r3, #4
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d006      	beq.n	801b8b0 <tcp_output+0x188>
 801b8a2:	4b43      	ldr	r3, [pc, #268]	; (801b9b0 <tcp_output+0x288>)
 801b8a4:	f240 5236 	movw	r2, #1334	; 0x536
 801b8a8:	4946      	ldr	r1, [pc, #280]	; (801b9c4 <tcp_output+0x29c>)
 801b8aa:	4843      	ldr	r0, [pc, #268]	; (801b9b8 <tcp_output+0x290>)
 801b8ac:	f005 fa2e 	bl	8020d0c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	d01f      	beq.n	801b8f8 <tcp_output+0x1d0>
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	8b5b      	ldrh	r3, [r3, #26]
 801b8bc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d119      	bne.n	801b8f8 <tcp_output+0x1d0>
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d00b      	beq.n	801b8e4 <tcp_output+0x1bc>
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d110      	bne.n	801b8f8 <tcp_output+0x1d0>
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8da:	891a      	ldrh	r2, [r3, #8]
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b8e0:	429a      	cmp	r2, r3
 801b8e2:	d209      	bcs.n	801b8f8 <tcp_output+0x1d0>
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b8ea:	2b00      	cmp	r3, #0
 801b8ec:	d004      	beq.n	801b8f8 <tcp_output+0x1d0>
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b8f4:	2b08      	cmp	r3, #8
 801b8f6:	d901      	bls.n	801b8fc <tcp_output+0x1d4>
 801b8f8:	2301      	movs	r3, #1
 801b8fa:	e000      	b.n	801b8fe <tcp_output+0x1d6>
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d106      	bne.n	801b910 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	8b5b      	ldrh	r3, [r3, #26]
 801b906:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	f000 80e4 	beq.w	801bad8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	7d1b      	ldrb	r3, [r3, #20]
 801b914:	2b02      	cmp	r3, #2
 801b916:	d00d      	beq.n	801b934 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b91a:	68db      	ldr	r3, [r3, #12]
 801b91c:	899b      	ldrh	r3, [r3, #12]
 801b91e:	b29c      	uxth	r4, r3
 801b920:	2010      	movs	r0, #16
 801b922:	f7f6 fae5 	bl	8011ef0 <lwip_htons>
 801b926:	4603      	mov	r3, r0
 801b928:	461a      	mov	r2, r3
 801b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b92c:	68db      	ldr	r3, [r3, #12]
 801b92e:	4322      	orrs	r2, r4
 801b930:	b292      	uxth	r2, r2
 801b932:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801b934:	697a      	ldr	r2, [r7, #20]
 801b936:	6879      	ldr	r1, [r7, #4]
 801b938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b93a:	f000 f909 	bl	801bb50 <tcp_output_segment>
 801b93e:	4603      	mov	r3, r0
 801b940:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b946:	2b00      	cmp	r3, #0
 801b948:	d009      	beq.n	801b95e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	8b5b      	ldrh	r3, [r3, #26]
 801b94e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b952:	b29a      	uxth	r2, r3
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	835a      	strh	r2, [r3, #26]
      return err;
 801b958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b95c:	e0d3      	b.n	801bb06 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801b95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b960:	681a      	ldr	r2, [r3, #0]
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	7d1b      	ldrb	r3, [r3, #20]
 801b96a:	2b02      	cmp	r3, #2
 801b96c:	d006      	beq.n	801b97c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	8b5b      	ldrh	r3, [r3, #26]
 801b972:	f023 0303 	bic.w	r3, r3, #3
 801b976:	b29a      	uxth	r2, r3
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b97e:	68db      	ldr	r3, [r3, #12]
 801b980:	685b      	ldr	r3, [r3, #4]
 801b982:	4618      	mov	r0, r3
 801b984:	f7f6 fac9 	bl	8011f1a <lwip_htonl>
 801b988:	4604      	mov	r4, r0
 801b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b98c:	891b      	ldrh	r3, [r3, #8]
 801b98e:	461d      	mov	r5, r3
 801b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b992:	68db      	ldr	r3, [r3, #12]
 801b994:	899b      	ldrh	r3, [r3, #12]
 801b996:	b29b      	uxth	r3, r3
 801b998:	4618      	mov	r0, r3
 801b99a:	f7f6 faa9 	bl	8011ef0 <lwip_htons>
 801b99e:	4603      	mov	r3, r0
 801b9a0:	b2db      	uxtb	r3, r3
 801b9a2:	f003 0303 	and.w	r3, r3, #3
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d00e      	beq.n	801b9c8 <tcp_output+0x2a0>
 801b9aa:	2301      	movs	r3, #1
 801b9ac:	e00d      	b.n	801b9ca <tcp_output+0x2a2>
 801b9ae:	bf00      	nop
 801b9b0:	08027f58 	.word	0x08027f58
 801b9b4:	080284c8 	.word	0x080284c8
 801b9b8:	08027fd8 	.word	0x08027fd8
 801b9bc:	080284e0 	.word	0x080284e0
 801b9c0:	2400ae6c 	.word	0x2400ae6c
 801b9c4:	08028508 	.word	0x08028508
 801b9c8:	2300      	movs	r3, #0
 801b9ca:	442b      	add	r3, r5
 801b9cc:	4423      	add	r3, r4
 801b9ce:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b9d4:	68bb      	ldr	r3, [r7, #8]
 801b9d6:	1ad3      	subs	r3, r2, r3
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	da02      	bge.n	801b9e2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	68ba      	ldr	r2, [r7, #8]
 801b9e0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9e4:	891b      	ldrh	r3, [r3, #8]
 801b9e6:	461c      	mov	r4, r3
 801b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9ea:	68db      	ldr	r3, [r3, #12]
 801b9ec:	899b      	ldrh	r3, [r3, #12]
 801b9ee:	b29b      	uxth	r3, r3
 801b9f0:	4618      	mov	r0, r3
 801b9f2:	f7f6 fa7d 	bl	8011ef0 <lwip_htons>
 801b9f6:	4603      	mov	r3, r0
 801b9f8:	b2db      	uxtb	r3, r3
 801b9fa:	f003 0303 	and.w	r3, r3, #3
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d001      	beq.n	801ba06 <tcp_output+0x2de>
 801ba02:	2301      	movs	r3, #1
 801ba04:	e000      	b.n	801ba08 <tcp_output+0x2e0>
 801ba06:	2300      	movs	r3, #0
 801ba08:	4423      	add	r3, r4
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d049      	beq.n	801baa2 <tcp_output+0x37a>
      seg->next = NULL;
 801ba0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba10:	2200      	movs	r2, #0
 801ba12:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d105      	bne.n	801ba28 <tcp_output+0x300>
        pcb->unacked = seg;
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ba20:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801ba22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba24:	623b      	str	r3, [r7, #32]
 801ba26:	e03f      	b.n	801baa8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ba28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba2a:	68db      	ldr	r3, [r3, #12]
 801ba2c:	685b      	ldr	r3, [r3, #4]
 801ba2e:	4618      	mov	r0, r3
 801ba30:	f7f6 fa73 	bl	8011f1a <lwip_htonl>
 801ba34:	4604      	mov	r4, r0
 801ba36:	6a3b      	ldr	r3, [r7, #32]
 801ba38:	68db      	ldr	r3, [r3, #12]
 801ba3a:	685b      	ldr	r3, [r3, #4]
 801ba3c:	4618      	mov	r0, r3
 801ba3e:	f7f6 fa6c 	bl	8011f1a <lwip_htonl>
 801ba42:	4603      	mov	r3, r0
 801ba44:	1ae3      	subs	r3, r4, r3
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	da24      	bge.n	801ba94 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	3370      	adds	r3, #112	; 0x70
 801ba4e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ba50:	e002      	b.n	801ba58 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801ba52:	69fb      	ldr	r3, [r7, #28]
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ba58:	69fb      	ldr	r3, [r7, #28]
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d011      	beq.n	801ba84 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ba60:	69fb      	ldr	r3, [r7, #28]
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	68db      	ldr	r3, [r3, #12]
 801ba66:	685b      	ldr	r3, [r3, #4]
 801ba68:	4618      	mov	r0, r3
 801ba6a:	f7f6 fa56 	bl	8011f1a <lwip_htonl>
 801ba6e:	4604      	mov	r4, r0
 801ba70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba72:	68db      	ldr	r3, [r3, #12]
 801ba74:	685b      	ldr	r3, [r3, #4]
 801ba76:	4618      	mov	r0, r3
 801ba78:	f7f6 fa4f 	bl	8011f1a <lwip_htonl>
 801ba7c:	4603      	mov	r3, r0
 801ba7e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	dbe6      	blt.n	801ba52 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801ba84:	69fb      	ldr	r3, [r7, #28]
 801ba86:	681a      	ldr	r2, [r3, #0]
 801ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba8a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801ba8c:	69fb      	ldr	r3, [r7, #28]
 801ba8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ba90:	601a      	str	r2, [r3, #0]
 801ba92:	e009      	b.n	801baa8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801ba94:	6a3b      	ldr	r3, [r7, #32]
 801ba96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ba98:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801ba9a:	6a3b      	ldr	r3, [r7, #32]
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	623b      	str	r3, [r7, #32]
 801baa0:	e002      	b.n	801baa8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801baa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801baa4:	f7fb ff1d 	bl	80178e2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801baac:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801baae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	d012      	beq.n	801bada <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801bab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bab6:	68db      	ldr	r3, [r3, #12]
 801bab8:	685b      	ldr	r3, [r3, #4]
 801baba:	4618      	mov	r0, r3
 801babc:	f7f6 fa2d 	bl	8011f1a <lwip_htonl>
 801bac0:	4602      	mov	r2, r0
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bac6:	1ad3      	subs	r3, r2, r3
 801bac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801baca:	8912      	ldrh	r2, [r2, #8]
 801bacc:	4413      	add	r3, r2
  while (seg != NULL &&
 801bace:	69ba      	ldr	r2, [r7, #24]
 801bad0:	429a      	cmp	r2, r3
 801bad2:	f4bf aed9 	bcs.w	801b888 <tcp_output+0x160>
 801bad6:	e000      	b.n	801bada <tcp_output+0x3b2>
      break;
 801bad8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d108      	bne.n	801baf4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	2200      	movs	r2, #0
 801bae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801baea:	e004      	b.n	801baf6 <tcp_output+0x3ce>
    goto output_done;
 801baec:	bf00      	nop
 801baee:	e002      	b.n	801baf6 <tcp_output+0x3ce>
    goto output_done;
 801baf0:	bf00      	nop
 801baf2:	e000      	b.n	801baf6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801baf4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	8b5b      	ldrh	r3, [r3, #26]
 801bafa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801bafe:	b29a      	uxth	r2, r3
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801bb04:	2300      	movs	r3, #0
}
 801bb06:	4618      	mov	r0, r3
 801bb08:	3728      	adds	r7, #40	; 0x28
 801bb0a:	46bd      	mov	sp, r7
 801bb0c:	bdb0      	pop	{r4, r5, r7, pc}
 801bb0e:	bf00      	nop

0801bb10 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801bb10:	b580      	push	{r7, lr}
 801bb12:	b082      	sub	sp, #8
 801bb14:	af00      	add	r7, sp, #0
 801bb16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d106      	bne.n	801bb2c <tcp_output_segment_busy+0x1c>
 801bb1e:	4b09      	ldr	r3, [pc, #36]	; (801bb44 <tcp_output_segment_busy+0x34>)
 801bb20:	f240 529a 	movw	r2, #1434	; 0x59a
 801bb24:	4908      	ldr	r1, [pc, #32]	; (801bb48 <tcp_output_segment_busy+0x38>)
 801bb26:	4809      	ldr	r0, [pc, #36]	; (801bb4c <tcp_output_segment_busy+0x3c>)
 801bb28:	f005 f8f0 	bl	8020d0c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	685b      	ldr	r3, [r3, #4]
 801bb30:	7b9b      	ldrb	r3, [r3, #14]
 801bb32:	2b01      	cmp	r3, #1
 801bb34:	d001      	beq.n	801bb3a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801bb36:	2301      	movs	r3, #1
 801bb38:	e000      	b.n	801bb3c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801bb3a:	2300      	movs	r3, #0
}
 801bb3c:	4618      	mov	r0, r3
 801bb3e:	3708      	adds	r7, #8
 801bb40:	46bd      	mov	sp, r7
 801bb42:	bd80      	pop	{r7, pc}
 801bb44:	08027f58 	.word	0x08027f58
 801bb48:	08028520 	.word	0x08028520
 801bb4c:	08027fd8 	.word	0x08027fd8

0801bb50 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801bb50:	b5b0      	push	{r4, r5, r7, lr}
 801bb52:	b08c      	sub	sp, #48	; 0x30
 801bb54:	af04      	add	r7, sp, #16
 801bb56:	60f8      	str	r0, [r7, #12]
 801bb58:	60b9      	str	r1, [r7, #8]
 801bb5a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d106      	bne.n	801bb70 <tcp_output_segment+0x20>
 801bb62:	4b63      	ldr	r3, [pc, #396]	; (801bcf0 <tcp_output_segment+0x1a0>)
 801bb64:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801bb68:	4962      	ldr	r1, [pc, #392]	; (801bcf4 <tcp_output_segment+0x1a4>)
 801bb6a:	4863      	ldr	r0, [pc, #396]	; (801bcf8 <tcp_output_segment+0x1a8>)
 801bb6c:	f005 f8ce 	bl	8020d0c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801bb70:	68bb      	ldr	r3, [r7, #8]
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d106      	bne.n	801bb84 <tcp_output_segment+0x34>
 801bb76:	4b5e      	ldr	r3, [pc, #376]	; (801bcf0 <tcp_output_segment+0x1a0>)
 801bb78:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801bb7c:	495f      	ldr	r1, [pc, #380]	; (801bcfc <tcp_output_segment+0x1ac>)
 801bb7e:	485e      	ldr	r0, [pc, #376]	; (801bcf8 <tcp_output_segment+0x1a8>)
 801bb80:	f005 f8c4 	bl	8020d0c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d106      	bne.n	801bb98 <tcp_output_segment+0x48>
 801bb8a:	4b59      	ldr	r3, [pc, #356]	; (801bcf0 <tcp_output_segment+0x1a0>)
 801bb8c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801bb90:	495b      	ldr	r1, [pc, #364]	; (801bd00 <tcp_output_segment+0x1b0>)
 801bb92:	4859      	ldr	r0, [pc, #356]	; (801bcf8 <tcp_output_segment+0x1a8>)
 801bb94:	f005 f8ba 	bl	8020d0c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801bb98:	68f8      	ldr	r0, [r7, #12]
 801bb9a:	f7ff ffb9 	bl	801bb10 <tcp_output_segment_busy>
 801bb9e:	4603      	mov	r3, r0
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	d001      	beq.n	801bba8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801bba4:	2300      	movs	r3, #0
 801bba6:	e09f      	b.n	801bce8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801bba8:	68bb      	ldr	r3, [r7, #8]
 801bbaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bbac:	68fb      	ldr	r3, [r7, #12]
 801bbae:	68dc      	ldr	r4, [r3, #12]
 801bbb0:	4610      	mov	r0, r2
 801bbb2:	f7f6 f9b2 	bl	8011f1a <lwip_htonl>
 801bbb6:	4603      	mov	r3, r0
 801bbb8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801bbba:	68bb      	ldr	r3, [r7, #8]
 801bbbc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	68dc      	ldr	r4, [r3, #12]
 801bbc2:	4610      	mov	r0, r2
 801bbc4:	f7f6 f994 	bl	8011ef0 <lwip_htons>
 801bbc8:	4603      	mov	r3, r0
 801bbca:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bbcc:	68bb      	ldr	r3, [r7, #8]
 801bbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbd0:	68ba      	ldr	r2, [r7, #8]
 801bbd2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801bbd4:	441a      	add	r2, r3
 801bbd6:	68bb      	ldr	r3, [r7, #8]
 801bbd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801bbda:	68fb      	ldr	r3, [r7, #12]
 801bbdc:	68db      	ldr	r3, [r3, #12]
 801bbde:	3314      	adds	r3, #20
 801bbe0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	7a9b      	ldrb	r3, [r3, #10]
 801bbe6:	f003 0301 	and.w	r3, r3, #1
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d015      	beq.n	801bc1a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801bbee:	68bb      	ldr	r3, [r7, #8]
 801bbf0:	3304      	adds	r3, #4
 801bbf2:	461a      	mov	r2, r3
 801bbf4:	6879      	ldr	r1, [r7, #4]
 801bbf6:	f44f 7006 	mov.w	r0, #536	; 0x218
 801bbfa:	f7fc fa37 	bl	801806c <tcp_eff_send_mss_netif>
 801bbfe:	4603      	mov	r3, r0
 801bc00:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801bc02:	8b7b      	ldrh	r3, [r7, #26]
 801bc04:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801bc08:	4618      	mov	r0, r3
 801bc0a:	f7f6 f986 	bl	8011f1a <lwip_htonl>
 801bc0e:	4602      	mov	r2, r0
 801bc10:	69fb      	ldr	r3, [r7, #28]
 801bc12:	601a      	str	r2, [r3, #0]
    opts += 1;
 801bc14:	69fb      	ldr	r3, [r7, #28]
 801bc16:	3304      	adds	r3, #4
 801bc18:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801bc1a:	68bb      	ldr	r3, [r7, #8]
 801bc1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	da02      	bge.n	801bc2a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801bc24:	68bb      	ldr	r3, [r7, #8]
 801bc26:	2200      	movs	r2, #0
 801bc28:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801bc2a:	68bb      	ldr	r3, [r7, #8]
 801bc2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d10c      	bne.n	801bc4c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801bc32:	4b34      	ldr	r3, [pc, #208]	; (801bd04 <tcp_output_segment+0x1b4>)
 801bc34:	681a      	ldr	r2, [r3, #0]
 801bc36:	68bb      	ldr	r3, [r7, #8]
 801bc38:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801bc3a:	68fb      	ldr	r3, [r7, #12]
 801bc3c:	68db      	ldr	r3, [r3, #12]
 801bc3e:	685b      	ldr	r3, [r3, #4]
 801bc40:	4618      	mov	r0, r3
 801bc42:	f7f6 f96a 	bl	8011f1a <lwip_htonl>
 801bc46:	4602      	mov	r2, r0
 801bc48:	68bb      	ldr	r3, [r7, #8]
 801bc4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801bc4c:	68fb      	ldr	r3, [r7, #12]
 801bc4e:	68da      	ldr	r2, [r3, #12]
 801bc50:	68fb      	ldr	r3, [r7, #12]
 801bc52:	685b      	ldr	r3, [r3, #4]
 801bc54:	685b      	ldr	r3, [r3, #4]
 801bc56:	1ad3      	subs	r3, r2, r3
 801bc58:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801bc5a:	68fb      	ldr	r3, [r7, #12]
 801bc5c:	685b      	ldr	r3, [r3, #4]
 801bc5e:	8959      	ldrh	r1, [r3, #10]
 801bc60:	68fb      	ldr	r3, [r7, #12]
 801bc62:	685b      	ldr	r3, [r3, #4]
 801bc64:	8b3a      	ldrh	r2, [r7, #24]
 801bc66:	1a8a      	subs	r2, r1, r2
 801bc68:	b292      	uxth	r2, r2
 801bc6a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	685b      	ldr	r3, [r3, #4]
 801bc70:	8919      	ldrh	r1, [r3, #8]
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	685b      	ldr	r3, [r3, #4]
 801bc76:	8b3a      	ldrh	r2, [r7, #24]
 801bc78:	1a8a      	subs	r2, r1, r2
 801bc7a:	b292      	uxth	r2, r2
 801bc7c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801bc7e:	68fb      	ldr	r3, [r7, #12]
 801bc80:	685b      	ldr	r3, [r3, #4]
 801bc82:	68fa      	ldr	r2, [r7, #12]
 801bc84:	68d2      	ldr	r2, [r2, #12]
 801bc86:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801bc88:	68fb      	ldr	r3, [r7, #12]
 801bc8a:	68db      	ldr	r3, [r3, #12]
 801bc8c:	2200      	movs	r2, #0
 801bc8e:	741a      	strb	r2, [r3, #16]
 801bc90:	2200      	movs	r2, #0
 801bc92:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	68db      	ldr	r3, [r3, #12]
 801bc98:	f103 0214 	add.w	r2, r3, #20
 801bc9c:	68fb      	ldr	r3, [r7, #12]
 801bc9e:	7a9b      	ldrb	r3, [r3, #10]
 801bca0:	009b      	lsls	r3, r3, #2
 801bca2:	f003 0304 	and.w	r3, r3, #4
 801bca6:	4413      	add	r3, r2
 801bca8:	69fa      	ldr	r2, [r7, #28]
 801bcaa:	429a      	cmp	r2, r3
 801bcac:	d006      	beq.n	801bcbc <tcp_output_segment+0x16c>
 801bcae:	4b10      	ldr	r3, [pc, #64]	; (801bcf0 <tcp_output_segment+0x1a0>)
 801bcb0:	f240 621c 	movw	r2, #1564	; 0x61c
 801bcb4:	4914      	ldr	r1, [pc, #80]	; (801bd08 <tcp_output_segment+0x1b8>)
 801bcb6:	4810      	ldr	r0, [pc, #64]	; (801bcf8 <tcp_output_segment+0x1a8>)
 801bcb8:	f005 f828 	bl	8020d0c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801bcbc:	68fb      	ldr	r3, [r7, #12]
 801bcbe:	6858      	ldr	r0, [r3, #4]
 801bcc0:	68b9      	ldr	r1, [r7, #8]
 801bcc2:	68bb      	ldr	r3, [r7, #8]
 801bcc4:	1d1c      	adds	r4, r3, #4
 801bcc6:	68bb      	ldr	r3, [r7, #8]
 801bcc8:	7add      	ldrb	r5, [r3, #11]
 801bcca:	68bb      	ldr	r3, [r7, #8]
 801bccc:	7a9b      	ldrb	r3, [r3, #10]
 801bcce:	687a      	ldr	r2, [r7, #4]
 801bcd0:	9202      	str	r2, [sp, #8]
 801bcd2:	2206      	movs	r2, #6
 801bcd4:	9201      	str	r2, [sp, #4]
 801bcd6:	9300      	str	r3, [sp, #0]
 801bcd8:	462b      	mov	r3, r5
 801bcda:	4622      	mov	r2, r4
 801bcdc:	f7f7 fd9c 	bl	8013818 <ip4_output_if>
 801bce0:	4603      	mov	r3, r0
 801bce2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801bce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bce8:	4618      	mov	r0, r3
 801bcea:	3720      	adds	r7, #32
 801bcec:	46bd      	mov	sp, r7
 801bcee:	bdb0      	pop	{r4, r5, r7, pc}
 801bcf0:	08027f58 	.word	0x08027f58
 801bcf4:	08028548 	.word	0x08028548
 801bcf8:	08027fd8 	.word	0x08027fd8
 801bcfc:	08028568 	.word	0x08028568
 801bd00:	08028588 	.word	0x08028588
 801bd04:	2400ae5c 	.word	0x2400ae5c
 801bd08:	080285ac 	.word	0x080285ac

0801bd0c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801bd0c:	b5b0      	push	{r4, r5, r7, lr}
 801bd0e:	b084      	sub	sp, #16
 801bd10:	af00      	add	r7, sp, #0
 801bd12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d106      	bne.n	801bd28 <tcp_rexmit_rto_prepare+0x1c>
 801bd1a:	4b31      	ldr	r3, [pc, #196]	; (801bde0 <tcp_rexmit_rto_prepare+0xd4>)
 801bd1c:	f240 6263 	movw	r2, #1635	; 0x663
 801bd20:	4930      	ldr	r1, [pc, #192]	; (801bde4 <tcp_rexmit_rto_prepare+0xd8>)
 801bd22:	4831      	ldr	r0, [pc, #196]	; (801bde8 <tcp_rexmit_rto_prepare+0xdc>)
 801bd24:	f004 fff2 	bl	8020d0c <iprintf>

  if (pcb->unacked == NULL) {
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d102      	bne.n	801bd36 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801bd30:	f06f 0305 	mvn.w	r3, #5
 801bd34:	e050      	b.n	801bdd8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd3a:	60fb      	str	r3, [r7, #12]
 801bd3c:	e00b      	b.n	801bd56 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801bd3e:	68f8      	ldr	r0, [r7, #12]
 801bd40:	f7ff fee6 	bl	801bb10 <tcp_output_segment_busy>
 801bd44:	4603      	mov	r3, r0
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d002      	beq.n	801bd50 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801bd4a:	f06f 0305 	mvn.w	r3, #5
 801bd4e:	e043      	b.n	801bdd8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801bd50:	68fb      	ldr	r3, [r7, #12]
 801bd52:	681b      	ldr	r3, [r3, #0]
 801bd54:	60fb      	str	r3, [r7, #12]
 801bd56:	68fb      	ldr	r3, [r7, #12]
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d1ef      	bne.n	801bd3e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801bd5e:	68f8      	ldr	r0, [r7, #12]
 801bd60:	f7ff fed6 	bl	801bb10 <tcp_output_segment_busy>
 801bd64:	4603      	mov	r3, r0
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	d002      	beq.n	801bd70 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801bd6a:	f06f 0305 	mvn.w	r3, #5
 801bd6e:	e033      	b.n	801bdd8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801bd74:	68fb      	ldr	r3, [r7, #12]
 801bd76:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	2200      	movs	r2, #0
 801bd84:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	8b5b      	ldrh	r3, [r3, #26]
 801bd8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bd8e:	b29a      	uxth	r2, r3
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	68db      	ldr	r3, [r3, #12]
 801bd98:	685b      	ldr	r3, [r3, #4]
 801bd9a:	4618      	mov	r0, r3
 801bd9c:	f7f6 f8bd 	bl	8011f1a <lwip_htonl>
 801bda0:	4604      	mov	r4, r0
 801bda2:	68fb      	ldr	r3, [r7, #12]
 801bda4:	891b      	ldrh	r3, [r3, #8]
 801bda6:	461d      	mov	r5, r3
 801bda8:	68fb      	ldr	r3, [r7, #12]
 801bdaa:	68db      	ldr	r3, [r3, #12]
 801bdac:	899b      	ldrh	r3, [r3, #12]
 801bdae:	b29b      	uxth	r3, r3
 801bdb0:	4618      	mov	r0, r3
 801bdb2:	f7f6 f89d 	bl	8011ef0 <lwip_htons>
 801bdb6:	4603      	mov	r3, r0
 801bdb8:	b2db      	uxtb	r3, r3
 801bdba:	f003 0303 	and.w	r3, r3, #3
 801bdbe:	2b00      	cmp	r3, #0
 801bdc0:	d001      	beq.n	801bdc6 <tcp_rexmit_rto_prepare+0xba>
 801bdc2:	2301      	movs	r3, #1
 801bdc4:	e000      	b.n	801bdc8 <tcp_rexmit_rto_prepare+0xbc>
 801bdc6:	2300      	movs	r3, #0
 801bdc8:	442b      	add	r3, r5
 801bdca:	18e2      	adds	r2, r4, r3
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	2200      	movs	r2, #0
 801bdd4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801bdd6:	2300      	movs	r3, #0
}
 801bdd8:	4618      	mov	r0, r3
 801bdda:	3710      	adds	r7, #16
 801bddc:	46bd      	mov	sp, r7
 801bdde:	bdb0      	pop	{r4, r5, r7, pc}
 801bde0:	08027f58 	.word	0x08027f58
 801bde4:	080285c0 	.word	0x080285c0
 801bde8:	08027fd8 	.word	0x08027fd8

0801bdec <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801bdec:	b580      	push	{r7, lr}
 801bdee:	b082      	sub	sp, #8
 801bdf0:	af00      	add	r7, sp, #0
 801bdf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	d106      	bne.n	801be08 <tcp_rexmit_rto_commit+0x1c>
 801bdfa:	4b0d      	ldr	r3, [pc, #52]	; (801be30 <tcp_rexmit_rto_commit+0x44>)
 801bdfc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801be00:	490c      	ldr	r1, [pc, #48]	; (801be34 <tcp_rexmit_rto_commit+0x48>)
 801be02:	480d      	ldr	r0, [pc, #52]	; (801be38 <tcp_rexmit_rto_commit+0x4c>)
 801be04:	f004 ff82 	bl	8020d0c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801be0e:	2bff      	cmp	r3, #255	; 0xff
 801be10:	d007      	beq.n	801be22 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801be18:	3301      	adds	r3, #1
 801be1a:	b2da      	uxtb	r2, r3
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801be22:	6878      	ldr	r0, [r7, #4]
 801be24:	f7ff fc80 	bl	801b728 <tcp_output>
}
 801be28:	bf00      	nop
 801be2a:	3708      	adds	r7, #8
 801be2c:	46bd      	mov	sp, r7
 801be2e:	bd80      	pop	{r7, pc}
 801be30:	08027f58 	.word	0x08027f58
 801be34:	080285e4 	.word	0x080285e4
 801be38:	08027fd8 	.word	0x08027fd8

0801be3c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801be3c:	b580      	push	{r7, lr}
 801be3e:	b082      	sub	sp, #8
 801be40:	af00      	add	r7, sp, #0
 801be42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	2b00      	cmp	r3, #0
 801be48:	d106      	bne.n	801be58 <tcp_rexmit_rto+0x1c>
 801be4a:	4b0a      	ldr	r3, [pc, #40]	; (801be74 <tcp_rexmit_rto+0x38>)
 801be4c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801be50:	4909      	ldr	r1, [pc, #36]	; (801be78 <tcp_rexmit_rto+0x3c>)
 801be52:	480a      	ldr	r0, [pc, #40]	; (801be7c <tcp_rexmit_rto+0x40>)
 801be54:	f004 ff5a 	bl	8020d0c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801be58:	6878      	ldr	r0, [r7, #4]
 801be5a:	f7ff ff57 	bl	801bd0c <tcp_rexmit_rto_prepare>
 801be5e:	4603      	mov	r3, r0
 801be60:	2b00      	cmp	r3, #0
 801be62:	d102      	bne.n	801be6a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801be64:	6878      	ldr	r0, [r7, #4]
 801be66:	f7ff ffc1 	bl	801bdec <tcp_rexmit_rto_commit>
  }
}
 801be6a:	bf00      	nop
 801be6c:	3708      	adds	r7, #8
 801be6e:	46bd      	mov	sp, r7
 801be70:	bd80      	pop	{r7, pc}
 801be72:	bf00      	nop
 801be74:	08027f58 	.word	0x08027f58
 801be78:	08028608 	.word	0x08028608
 801be7c:	08027fd8 	.word	0x08027fd8

0801be80 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801be80:	b590      	push	{r4, r7, lr}
 801be82:	b085      	sub	sp, #20
 801be84:	af00      	add	r7, sp, #0
 801be86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d106      	bne.n	801be9c <tcp_rexmit+0x1c>
 801be8e:	4b2f      	ldr	r3, [pc, #188]	; (801bf4c <tcp_rexmit+0xcc>)
 801be90:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801be94:	492e      	ldr	r1, [pc, #184]	; (801bf50 <tcp_rexmit+0xd0>)
 801be96:	482f      	ldr	r0, [pc, #188]	; (801bf54 <tcp_rexmit+0xd4>)
 801be98:	f004 ff38 	bl	8020d0c <iprintf>

  if (pcb->unacked == NULL) {
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	d102      	bne.n	801beaa <tcp_rexmit+0x2a>
    return ERR_VAL;
 801bea4:	f06f 0305 	mvn.w	r3, #5
 801bea8:	e04c      	b.n	801bf44 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801beae:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801beb0:	68b8      	ldr	r0, [r7, #8]
 801beb2:	f7ff fe2d 	bl	801bb10 <tcp_output_segment_busy>
 801beb6:	4603      	mov	r3, r0
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d002      	beq.n	801bec2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801bebc:	f06f 0305 	mvn.w	r3, #5
 801bec0:	e040      	b.n	801bf44 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801bec2:	68bb      	ldr	r3, [r7, #8]
 801bec4:	681a      	ldr	r2, [r3, #0]
 801bec6:	687b      	ldr	r3, [r7, #4]
 801bec8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	336c      	adds	r3, #108	; 0x6c
 801bece:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bed0:	e002      	b.n	801bed8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801bed2:	68fb      	ldr	r3, [r7, #12]
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bed8:	68fb      	ldr	r3, [r7, #12]
 801beda:	681b      	ldr	r3, [r3, #0]
 801bedc:	2b00      	cmp	r3, #0
 801bede:	d011      	beq.n	801bf04 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801bee0:	68fb      	ldr	r3, [r7, #12]
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	68db      	ldr	r3, [r3, #12]
 801bee6:	685b      	ldr	r3, [r3, #4]
 801bee8:	4618      	mov	r0, r3
 801beea:	f7f6 f816 	bl	8011f1a <lwip_htonl>
 801beee:	4604      	mov	r4, r0
 801bef0:	68bb      	ldr	r3, [r7, #8]
 801bef2:	68db      	ldr	r3, [r3, #12]
 801bef4:	685b      	ldr	r3, [r3, #4]
 801bef6:	4618      	mov	r0, r3
 801bef8:	f7f6 f80f 	bl	8011f1a <lwip_htonl>
 801befc:	4603      	mov	r3, r0
 801befe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	dbe6      	blt.n	801bed2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801bf04:	68fb      	ldr	r3, [r7, #12]
 801bf06:	681a      	ldr	r2, [r3, #0]
 801bf08:	68bb      	ldr	r3, [r7, #8]
 801bf0a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801bf0c:	68fb      	ldr	r3, [r7, #12]
 801bf0e:	68ba      	ldr	r2, [r7, #8]
 801bf10:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801bf12:	68bb      	ldr	r3, [r7, #8]
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	d103      	bne.n	801bf22 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	2200      	movs	r2, #0
 801bf1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bf28:	2bff      	cmp	r3, #255	; 0xff
 801bf2a:	d007      	beq.n	801bf3c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bf32:	3301      	adds	r3, #1
 801bf34:	b2da      	uxtb	r2, r3
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	2200      	movs	r2, #0
 801bf40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801bf42:	2300      	movs	r3, #0
}
 801bf44:	4618      	mov	r0, r3
 801bf46:	3714      	adds	r7, #20
 801bf48:	46bd      	mov	sp, r7
 801bf4a:	bd90      	pop	{r4, r7, pc}
 801bf4c:	08027f58 	.word	0x08027f58
 801bf50:	08028624 	.word	0x08028624
 801bf54:	08027fd8 	.word	0x08027fd8

0801bf58 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801bf58:	b580      	push	{r7, lr}
 801bf5a:	b082      	sub	sp, #8
 801bf5c:	af00      	add	r7, sp, #0
 801bf5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801bf60:	687b      	ldr	r3, [r7, #4]
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d106      	bne.n	801bf74 <tcp_rexmit_fast+0x1c>
 801bf66:	4b2a      	ldr	r3, [pc, #168]	; (801c010 <tcp_rexmit_fast+0xb8>)
 801bf68:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801bf6c:	4929      	ldr	r1, [pc, #164]	; (801c014 <tcp_rexmit_fast+0xbc>)
 801bf6e:	482a      	ldr	r0, [pc, #168]	; (801c018 <tcp_rexmit_fast+0xc0>)
 801bf70:	f004 fecc 	bl	8020d0c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	d045      	beq.n	801c008 <tcp_rexmit_fast+0xb0>
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	8b5b      	ldrh	r3, [r3, #26]
 801bf80:	f003 0304 	and.w	r3, r3, #4
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	d13f      	bne.n	801c008 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801bf88:	6878      	ldr	r0, [r7, #4]
 801bf8a:	f7ff ff79 	bl	801be80 <tcp_rexmit>
 801bf8e:	4603      	mov	r3, r0
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d139      	bne.n	801c008 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801bfa0:	4293      	cmp	r3, r2
 801bfa2:	bf28      	it	cs
 801bfa4:	4613      	movcs	r3, r2
 801bfa6:	b29b      	uxth	r3, r3
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	da00      	bge.n	801bfae <tcp_rexmit_fast+0x56>
 801bfac:	3301      	adds	r3, #1
 801bfae:	105b      	asrs	r3, r3, #1
 801bfb0:	b29a      	uxth	r2, r3
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801bfbe:	461a      	mov	r2, r3
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bfc4:	005b      	lsls	r3, r3, #1
 801bfc6:	429a      	cmp	r2, r3
 801bfc8:	d206      	bcs.n	801bfd8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bfce:	005b      	lsls	r3, r3, #1
 801bfd0:	b29a      	uxth	r2, r3
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bfe2:	4619      	mov	r1, r3
 801bfe4:	0049      	lsls	r1, r1, #1
 801bfe6:	440b      	add	r3, r1
 801bfe8:	b29b      	uxth	r3, r3
 801bfea:	4413      	add	r3, r2
 801bfec:	b29a      	uxth	r2, r3
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	8b5b      	ldrh	r3, [r3, #26]
 801bff8:	f043 0304 	orr.w	r3, r3, #4
 801bffc:	b29a      	uxth	r2, r3
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	2200      	movs	r2, #0
 801c006:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801c008:	bf00      	nop
 801c00a:	3708      	adds	r7, #8
 801c00c:	46bd      	mov	sp, r7
 801c00e:	bd80      	pop	{r7, pc}
 801c010:	08027f58 	.word	0x08027f58
 801c014:	0802863c 	.word	0x0802863c
 801c018:	08027fd8 	.word	0x08027fd8

0801c01c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801c01c:	b580      	push	{r7, lr}
 801c01e:	b086      	sub	sp, #24
 801c020:	af00      	add	r7, sp, #0
 801c022:	60f8      	str	r0, [r7, #12]
 801c024:	607b      	str	r3, [r7, #4]
 801c026:	460b      	mov	r3, r1
 801c028:	817b      	strh	r3, [r7, #10]
 801c02a:	4613      	mov	r3, r2
 801c02c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801c02e:	897a      	ldrh	r2, [r7, #10]
 801c030:	893b      	ldrh	r3, [r7, #8]
 801c032:	4413      	add	r3, r2
 801c034:	b29b      	uxth	r3, r3
 801c036:	3314      	adds	r3, #20
 801c038:	b29b      	uxth	r3, r3
 801c03a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c03e:	4619      	mov	r1, r3
 801c040:	2022      	movs	r0, #34	; 0x22
 801c042:	f7f9 fb6d 	bl	8015720 <pbuf_alloc>
 801c046:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801c048:	697b      	ldr	r3, [r7, #20]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d04d      	beq.n	801c0ea <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801c04e:	897b      	ldrh	r3, [r7, #10]
 801c050:	3313      	adds	r3, #19
 801c052:	697a      	ldr	r2, [r7, #20]
 801c054:	8952      	ldrh	r2, [r2, #10]
 801c056:	4293      	cmp	r3, r2
 801c058:	db06      	blt.n	801c068 <tcp_output_alloc_header_common+0x4c>
 801c05a:	4b26      	ldr	r3, [pc, #152]	; (801c0f4 <tcp_output_alloc_header_common+0xd8>)
 801c05c:	f240 7223 	movw	r2, #1827	; 0x723
 801c060:	4925      	ldr	r1, [pc, #148]	; (801c0f8 <tcp_output_alloc_header_common+0xdc>)
 801c062:	4826      	ldr	r0, [pc, #152]	; (801c0fc <tcp_output_alloc_header_common+0xe0>)
 801c064:	f004 fe52 	bl	8020d0c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801c068:	697b      	ldr	r3, [r7, #20]
 801c06a:	685b      	ldr	r3, [r3, #4]
 801c06c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801c06e:	8c3b      	ldrh	r3, [r7, #32]
 801c070:	4618      	mov	r0, r3
 801c072:	f7f5 ff3d 	bl	8011ef0 <lwip_htons>
 801c076:	4603      	mov	r3, r0
 801c078:	461a      	mov	r2, r3
 801c07a:	693b      	ldr	r3, [r7, #16]
 801c07c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801c07e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c080:	4618      	mov	r0, r3
 801c082:	f7f5 ff35 	bl	8011ef0 <lwip_htons>
 801c086:	4603      	mov	r3, r0
 801c088:	461a      	mov	r2, r3
 801c08a:	693b      	ldr	r3, [r7, #16]
 801c08c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801c08e:	693b      	ldr	r3, [r7, #16]
 801c090:	687a      	ldr	r2, [r7, #4]
 801c092:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801c094:	68f8      	ldr	r0, [r7, #12]
 801c096:	f7f5 ff40 	bl	8011f1a <lwip_htonl>
 801c09a:	4602      	mov	r2, r0
 801c09c:	693b      	ldr	r3, [r7, #16]
 801c09e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801c0a0:	897b      	ldrh	r3, [r7, #10]
 801c0a2:	089b      	lsrs	r3, r3, #2
 801c0a4:	b29b      	uxth	r3, r3
 801c0a6:	3305      	adds	r3, #5
 801c0a8:	b29b      	uxth	r3, r3
 801c0aa:	031b      	lsls	r3, r3, #12
 801c0ac:	b29a      	uxth	r2, r3
 801c0ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c0b2:	b29b      	uxth	r3, r3
 801c0b4:	4313      	orrs	r3, r2
 801c0b6:	b29b      	uxth	r3, r3
 801c0b8:	4618      	mov	r0, r3
 801c0ba:	f7f5 ff19 	bl	8011ef0 <lwip_htons>
 801c0be:	4603      	mov	r3, r0
 801c0c0:	461a      	mov	r2, r3
 801c0c2:	693b      	ldr	r3, [r7, #16]
 801c0c4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801c0c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c0c8:	4618      	mov	r0, r3
 801c0ca:	f7f5 ff11 	bl	8011ef0 <lwip_htons>
 801c0ce:	4603      	mov	r3, r0
 801c0d0:	461a      	mov	r2, r3
 801c0d2:	693b      	ldr	r3, [r7, #16]
 801c0d4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801c0d6:	693b      	ldr	r3, [r7, #16]
 801c0d8:	2200      	movs	r2, #0
 801c0da:	741a      	strb	r2, [r3, #16]
 801c0dc:	2200      	movs	r2, #0
 801c0de:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801c0e0:	693b      	ldr	r3, [r7, #16]
 801c0e2:	2200      	movs	r2, #0
 801c0e4:	749a      	strb	r2, [r3, #18]
 801c0e6:	2200      	movs	r2, #0
 801c0e8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801c0ea:	697b      	ldr	r3, [r7, #20]
}
 801c0ec:	4618      	mov	r0, r3
 801c0ee:	3718      	adds	r7, #24
 801c0f0:	46bd      	mov	sp, r7
 801c0f2:	bd80      	pop	{r7, pc}
 801c0f4:	08027f58 	.word	0x08027f58
 801c0f8:	0802865c 	.word	0x0802865c
 801c0fc:	08027fd8 	.word	0x08027fd8

0801c100 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801c100:	b5b0      	push	{r4, r5, r7, lr}
 801c102:	b08a      	sub	sp, #40	; 0x28
 801c104:	af04      	add	r7, sp, #16
 801c106:	60f8      	str	r0, [r7, #12]
 801c108:	607b      	str	r3, [r7, #4]
 801c10a:	460b      	mov	r3, r1
 801c10c:	817b      	strh	r3, [r7, #10]
 801c10e:	4613      	mov	r3, r2
 801c110:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	2b00      	cmp	r3, #0
 801c116:	d106      	bne.n	801c126 <tcp_output_alloc_header+0x26>
 801c118:	4b15      	ldr	r3, [pc, #84]	; (801c170 <tcp_output_alloc_header+0x70>)
 801c11a:	f240 7242 	movw	r2, #1858	; 0x742
 801c11e:	4915      	ldr	r1, [pc, #84]	; (801c174 <tcp_output_alloc_header+0x74>)
 801c120:	4815      	ldr	r0, [pc, #84]	; (801c178 <tcp_output_alloc_header+0x78>)
 801c122:	f004 fdf3 	bl	8020d0c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801c126:	68fb      	ldr	r3, [r7, #12]
 801c128:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	8adb      	ldrh	r3, [r3, #22]
 801c12e:	68fa      	ldr	r2, [r7, #12]
 801c130:	8b12      	ldrh	r2, [r2, #24]
 801c132:	68f9      	ldr	r1, [r7, #12]
 801c134:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801c136:	893d      	ldrh	r5, [r7, #8]
 801c138:	897c      	ldrh	r4, [r7, #10]
 801c13a:	9103      	str	r1, [sp, #12]
 801c13c:	2110      	movs	r1, #16
 801c13e:	9102      	str	r1, [sp, #8]
 801c140:	9201      	str	r2, [sp, #4]
 801c142:	9300      	str	r3, [sp, #0]
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	462a      	mov	r2, r5
 801c148:	4621      	mov	r1, r4
 801c14a:	f7ff ff67 	bl	801c01c <tcp_output_alloc_header_common>
 801c14e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801c150:	697b      	ldr	r3, [r7, #20]
 801c152:	2b00      	cmp	r3, #0
 801c154:	d006      	beq.n	801c164 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801c156:	68fb      	ldr	r3, [r7, #12]
 801c158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c15a:	68fa      	ldr	r2, [r7, #12]
 801c15c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801c15e:	441a      	add	r2, r3
 801c160:	68fb      	ldr	r3, [r7, #12]
 801c162:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801c164:	697b      	ldr	r3, [r7, #20]
}
 801c166:	4618      	mov	r0, r3
 801c168:	3718      	adds	r7, #24
 801c16a:	46bd      	mov	sp, r7
 801c16c:	bdb0      	pop	{r4, r5, r7, pc}
 801c16e:	bf00      	nop
 801c170:	08027f58 	.word	0x08027f58
 801c174:	0802868c 	.word	0x0802868c
 801c178:	08027fd8 	.word	0x08027fd8

0801c17c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801c17c:	b580      	push	{r7, lr}
 801c17e:	b088      	sub	sp, #32
 801c180:	af00      	add	r7, sp, #0
 801c182:	60f8      	str	r0, [r7, #12]
 801c184:	60b9      	str	r1, [r7, #8]
 801c186:	4611      	mov	r1, r2
 801c188:	461a      	mov	r2, r3
 801c18a:	460b      	mov	r3, r1
 801c18c:	71fb      	strb	r3, [r7, #7]
 801c18e:	4613      	mov	r3, r2
 801c190:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801c192:	2300      	movs	r3, #0
 801c194:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801c196:	68bb      	ldr	r3, [r7, #8]
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d106      	bne.n	801c1aa <tcp_output_fill_options+0x2e>
 801c19c:	4b13      	ldr	r3, [pc, #76]	; (801c1ec <tcp_output_fill_options+0x70>)
 801c19e:	f240 7256 	movw	r2, #1878	; 0x756
 801c1a2:	4913      	ldr	r1, [pc, #76]	; (801c1f0 <tcp_output_fill_options+0x74>)
 801c1a4:	4813      	ldr	r0, [pc, #76]	; (801c1f4 <tcp_output_fill_options+0x78>)
 801c1a6:	f004 fdb1 	bl	8020d0c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801c1aa:	68bb      	ldr	r3, [r7, #8]
 801c1ac:	685b      	ldr	r3, [r3, #4]
 801c1ae:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801c1b0:	69bb      	ldr	r3, [r7, #24]
 801c1b2:	3314      	adds	r3, #20
 801c1b4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801c1b6:	69bb      	ldr	r3, [r7, #24]
 801c1b8:	f103 0214 	add.w	r2, r3, #20
 801c1bc:	8bfb      	ldrh	r3, [r7, #30]
 801c1be:	009b      	lsls	r3, r3, #2
 801c1c0:	4619      	mov	r1, r3
 801c1c2:	79fb      	ldrb	r3, [r7, #7]
 801c1c4:	009b      	lsls	r3, r3, #2
 801c1c6:	f003 0304 	and.w	r3, r3, #4
 801c1ca:	440b      	add	r3, r1
 801c1cc:	4413      	add	r3, r2
 801c1ce:	697a      	ldr	r2, [r7, #20]
 801c1d0:	429a      	cmp	r2, r3
 801c1d2:	d006      	beq.n	801c1e2 <tcp_output_fill_options+0x66>
 801c1d4:	4b05      	ldr	r3, [pc, #20]	; (801c1ec <tcp_output_fill_options+0x70>)
 801c1d6:	f240 7275 	movw	r2, #1909	; 0x775
 801c1da:	4907      	ldr	r1, [pc, #28]	; (801c1f8 <tcp_output_fill_options+0x7c>)
 801c1dc:	4805      	ldr	r0, [pc, #20]	; (801c1f4 <tcp_output_fill_options+0x78>)
 801c1de:	f004 fd95 	bl	8020d0c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801c1e2:	bf00      	nop
 801c1e4:	3720      	adds	r7, #32
 801c1e6:	46bd      	mov	sp, r7
 801c1e8:	bd80      	pop	{r7, pc}
 801c1ea:	bf00      	nop
 801c1ec:	08027f58 	.word	0x08027f58
 801c1f0:	080286b4 	.word	0x080286b4
 801c1f4:	08027fd8 	.word	0x08027fd8
 801c1f8:	080285ac 	.word	0x080285ac

0801c1fc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b08a      	sub	sp, #40	; 0x28
 801c200:	af04      	add	r7, sp, #16
 801c202:	60f8      	str	r0, [r7, #12]
 801c204:	60b9      	str	r1, [r7, #8]
 801c206:	607a      	str	r2, [r7, #4]
 801c208:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801c20a:	68bb      	ldr	r3, [r7, #8]
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d106      	bne.n	801c21e <tcp_output_control_segment+0x22>
 801c210:	4b1c      	ldr	r3, [pc, #112]	; (801c284 <tcp_output_control_segment+0x88>)
 801c212:	f240 7287 	movw	r2, #1927	; 0x787
 801c216:	491c      	ldr	r1, [pc, #112]	; (801c288 <tcp_output_control_segment+0x8c>)
 801c218:	481c      	ldr	r0, [pc, #112]	; (801c28c <tcp_output_control_segment+0x90>)
 801c21a:	f004 fd77 	bl	8020d0c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801c21e:	683a      	ldr	r2, [r7, #0]
 801c220:	6879      	ldr	r1, [r7, #4]
 801c222:	68f8      	ldr	r0, [r7, #12]
 801c224:	f7fe fae8 	bl	801a7f8 <tcp_route>
 801c228:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801c22a:	693b      	ldr	r3, [r7, #16]
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d102      	bne.n	801c236 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801c230:	23fc      	movs	r3, #252	; 0xfc
 801c232:	75fb      	strb	r3, [r7, #23]
 801c234:	e01c      	b.n	801c270 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801c236:	68fb      	ldr	r3, [r7, #12]
 801c238:	2b00      	cmp	r3, #0
 801c23a:	d006      	beq.n	801c24a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801c23c:	68fb      	ldr	r3, [r7, #12]
 801c23e:	7adb      	ldrb	r3, [r3, #11]
 801c240:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	7a9b      	ldrb	r3, [r3, #10]
 801c246:	757b      	strb	r3, [r7, #21]
 801c248:	e003      	b.n	801c252 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801c24a:	23ff      	movs	r3, #255	; 0xff
 801c24c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801c24e:	2300      	movs	r3, #0
 801c250:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801c252:	7dba      	ldrb	r2, [r7, #22]
 801c254:	693b      	ldr	r3, [r7, #16]
 801c256:	9302      	str	r3, [sp, #8]
 801c258:	2306      	movs	r3, #6
 801c25a:	9301      	str	r3, [sp, #4]
 801c25c:	7d7b      	ldrb	r3, [r7, #21]
 801c25e:	9300      	str	r3, [sp, #0]
 801c260:	4613      	mov	r3, r2
 801c262:	683a      	ldr	r2, [r7, #0]
 801c264:	6879      	ldr	r1, [r7, #4]
 801c266:	68b8      	ldr	r0, [r7, #8]
 801c268:	f7f7 fad6 	bl	8013818 <ip4_output_if>
 801c26c:	4603      	mov	r3, r0
 801c26e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801c270:	68b8      	ldr	r0, [r7, #8]
 801c272:	f7f9 fd39 	bl	8015ce8 <pbuf_free>
  return err;
 801c276:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c27a:	4618      	mov	r0, r3
 801c27c:	3718      	adds	r7, #24
 801c27e:	46bd      	mov	sp, r7
 801c280:	bd80      	pop	{r7, pc}
 801c282:	bf00      	nop
 801c284:	08027f58 	.word	0x08027f58
 801c288:	080286dc 	.word	0x080286dc
 801c28c:	08027fd8 	.word	0x08027fd8

0801c290 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801c290:	b590      	push	{r4, r7, lr}
 801c292:	b08b      	sub	sp, #44	; 0x2c
 801c294:	af04      	add	r7, sp, #16
 801c296:	60f8      	str	r0, [r7, #12]
 801c298:	60b9      	str	r1, [r7, #8]
 801c29a:	607a      	str	r2, [r7, #4]
 801c29c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801c29e:	683b      	ldr	r3, [r7, #0]
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	d106      	bne.n	801c2b2 <tcp_rst+0x22>
 801c2a4:	4b1f      	ldr	r3, [pc, #124]	; (801c324 <tcp_rst+0x94>)
 801c2a6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801c2aa:	491f      	ldr	r1, [pc, #124]	; (801c328 <tcp_rst+0x98>)
 801c2ac:	481f      	ldr	r0, [pc, #124]	; (801c32c <tcp_rst+0x9c>)
 801c2ae:	f004 fd2d 	bl	8020d0c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801c2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d106      	bne.n	801c2c6 <tcp_rst+0x36>
 801c2b8:	4b1a      	ldr	r3, [pc, #104]	; (801c324 <tcp_rst+0x94>)
 801c2ba:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801c2be:	491c      	ldr	r1, [pc, #112]	; (801c330 <tcp_rst+0xa0>)
 801c2c0:	481a      	ldr	r0, [pc, #104]	; (801c32c <tcp_rst+0x9c>)
 801c2c2:	f004 fd23 	bl	8020d0c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c2c6:	2300      	movs	r3, #0
 801c2c8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801c2ca:	f246 0308 	movw	r3, #24584	; 0x6008
 801c2ce:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801c2d0:	7dfb      	ldrb	r3, [r7, #23]
 801c2d2:	b29c      	uxth	r4, r3
 801c2d4:	68b8      	ldr	r0, [r7, #8]
 801c2d6:	f7f5 fe20 	bl	8011f1a <lwip_htonl>
 801c2da:	4602      	mov	r2, r0
 801c2dc:	8abb      	ldrh	r3, [r7, #20]
 801c2de:	9303      	str	r3, [sp, #12]
 801c2e0:	2314      	movs	r3, #20
 801c2e2:	9302      	str	r3, [sp, #8]
 801c2e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c2e6:	9301      	str	r3, [sp, #4]
 801c2e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c2ea:	9300      	str	r3, [sp, #0]
 801c2ec:	4613      	mov	r3, r2
 801c2ee:	2200      	movs	r2, #0
 801c2f0:	4621      	mov	r1, r4
 801c2f2:	6878      	ldr	r0, [r7, #4]
 801c2f4:	f7ff fe92 	bl	801c01c <tcp_output_alloc_header_common>
 801c2f8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801c2fa:	693b      	ldr	r3, [r7, #16]
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d00c      	beq.n	801c31a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c300:	7dfb      	ldrb	r3, [r7, #23]
 801c302:	2200      	movs	r2, #0
 801c304:	6939      	ldr	r1, [r7, #16]
 801c306:	68f8      	ldr	r0, [r7, #12]
 801c308:	f7ff ff38 	bl	801c17c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801c30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c30e:	683a      	ldr	r2, [r7, #0]
 801c310:	6939      	ldr	r1, [r7, #16]
 801c312:	68f8      	ldr	r0, [r7, #12]
 801c314:	f7ff ff72 	bl	801c1fc <tcp_output_control_segment>
 801c318:	e000      	b.n	801c31c <tcp_rst+0x8c>
    return;
 801c31a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801c31c:	371c      	adds	r7, #28
 801c31e:	46bd      	mov	sp, r7
 801c320:	bd90      	pop	{r4, r7, pc}
 801c322:	bf00      	nop
 801c324:	08027f58 	.word	0x08027f58
 801c328:	08028708 	.word	0x08028708
 801c32c:	08027fd8 	.word	0x08027fd8
 801c330:	08028724 	.word	0x08028724

0801c334 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801c334:	b590      	push	{r4, r7, lr}
 801c336:	b087      	sub	sp, #28
 801c338:	af00      	add	r7, sp, #0
 801c33a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801c33c:	2300      	movs	r3, #0
 801c33e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801c340:	2300      	movs	r3, #0
 801c342:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	2b00      	cmp	r3, #0
 801c348:	d106      	bne.n	801c358 <tcp_send_empty_ack+0x24>
 801c34a:	4b28      	ldr	r3, [pc, #160]	; (801c3ec <tcp_send_empty_ack+0xb8>)
 801c34c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801c350:	4927      	ldr	r1, [pc, #156]	; (801c3f0 <tcp_send_empty_ack+0xbc>)
 801c352:	4828      	ldr	r0, [pc, #160]	; (801c3f4 <tcp_send_empty_ack+0xc0>)
 801c354:	f004 fcda 	bl	8020d0c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c358:	7dfb      	ldrb	r3, [r7, #23]
 801c35a:	009b      	lsls	r3, r3, #2
 801c35c:	b2db      	uxtb	r3, r3
 801c35e:	f003 0304 	and.w	r3, r3, #4
 801c362:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801c364:	7d7b      	ldrb	r3, [r7, #21]
 801c366:	b29c      	uxth	r4, r3
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c36c:	4618      	mov	r0, r3
 801c36e:	f7f5 fdd4 	bl	8011f1a <lwip_htonl>
 801c372:	4603      	mov	r3, r0
 801c374:	2200      	movs	r2, #0
 801c376:	4621      	mov	r1, r4
 801c378:	6878      	ldr	r0, [r7, #4]
 801c37a:	f7ff fec1 	bl	801c100 <tcp_output_alloc_header>
 801c37e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c380:	693b      	ldr	r3, [r7, #16]
 801c382:	2b00      	cmp	r3, #0
 801c384:	d109      	bne.n	801c39a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	8b5b      	ldrh	r3, [r3, #26]
 801c38a:	f043 0303 	orr.w	r3, r3, #3
 801c38e:	b29a      	uxth	r2, r3
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801c394:	f06f 0301 	mvn.w	r3, #1
 801c398:	e023      	b.n	801c3e2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801c39a:	7dbb      	ldrb	r3, [r7, #22]
 801c39c:	7dfa      	ldrb	r2, [r7, #23]
 801c39e:	6939      	ldr	r1, [r7, #16]
 801c3a0:	6878      	ldr	r0, [r7, #4]
 801c3a2:	f7ff feeb 	bl	801c17c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c3a6:	687a      	ldr	r2, [r7, #4]
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	3304      	adds	r3, #4
 801c3ac:	6939      	ldr	r1, [r7, #16]
 801c3ae:	6878      	ldr	r0, [r7, #4]
 801c3b0:	f7ff ff24 	bl	801c1fc <tcp_output_control_segment>
 801c3b4:	4603      	mov	r3, r0
 801c3b6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801c3b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d007      	beq.n	801c3d0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	8b5b      	ldrh	r3, [r3, #26]
 801c3c4:	f043 0303 	orr.w	r3, r3, #3
 801c3c8:	b29a      	uxth	r2, r3
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	835a      	strh	r2, [r3, #26]
 801c3ce:	e006      	b.n	801c3de <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	8b5b      	ldrh	r3, [r3, #26]
 801c3d4:	f023 0303 	bic.w	r3, r3, #3
 801c3d8:	b29a      	uxth	r2, r3
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801c3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c3e2:	4618      	mov	r0, r3
 801c3e4:	371c      	adds	r7, #28
 801c3e6:	46bd      	mov	sp, r7
 801c3e8:	bd90      	pop	{r4, r7, pc}
 801c3ea:	bf00      	nop
 801c3ec:	08027f58 	.word	0x08027f58
 801c3f0:	08028740 	.word	0x08028740
 801c3f4:	08027fd8 	.word	0x08027fd8

0801c3f8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801c3f8:	b590      	push	{r4, r7, lr}
 801c3fa:	b087      	sub	sp, #28
 801c3fc:	af00      	add	r7, sp, #0
 801c3fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c400:	2300      	movs	r3, #0
 801c402:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	2b00      	cmp	r3, #0
 801c408:	d106      	bne.n	801c418 <tcp_keepalive+0x20>
 801c40a:	4b18      	ldr	r3, [pc, #96]	; (801c46c <tcp_keepalive+0x74>)
 801c40c:	f640 0224 	movw	r2, #2084	; 0x824
 801c410:	4917      	ldr	r1, [pc, #92]	; (801c470 <tcp_keepalive+0x78>)
 801c412:	4818      	ldr	r0, [pc, #96]	; (801c474 <tcp_keepalive+0x7c>)
 801c414:	f004 fc7a 	bl	8020d0c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801c418:	7dfb      	ldrb	r3, [r7, #23]
 801c41a:	b29c      	uxth	r4, r3
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c420:	3b01      	subs	r3, #1
 801c422:	4618      	mov	r0, r3
 801c424:	f7f5 fd79 	bl	8011f1a <lwip_htonl>
 801c428:	4603      	mov	r3, r0
 801c42a:	2200      	movs	r2, #0
 801c42c:	4621      	mov	r1, r4
 801c42e:	6878      	ldr	r0, [r7, #4]
 801c430:	f7ff fe66 	bl	801c100 <tcp_output_alloc_header>
 801c434:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c436:	693b      	ldr	r3, [r7, #16]
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d102      	bne.n	801c442 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801c43c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c440:	e010      	b.n	801c464 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c442:	7dfb      	ldrb	r3, [r7, #23]
 801c444:	2200      	movs	r2, #0
 801c446:	6939      	ldr	r1, [r7, #16]
 801c448:	6878      	ldr	r0, [r7, #4]
 801c44a:	f7ff fe97 	bl	801c17c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c44e:	687a      	ldr	r2, [r7, #4]
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	3304      	adds	r3, #4
 801c454:	6939      	ldr	r1, [r7, #16]
 801c456:	6878      	ldr	r0, [r7, #4]
 801c458:	f7ff fed0 	bl	801c1fc <tcp_output_control_segment>
 801c45c:	4603      	mov	r3, r0
 801c45e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c460:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c464:	4618      	mov	r0, r3
 801c466:	371c      	adds	r7, #28
 801c468:	46bd      	mov	sp, r7
 801c46a:	bd90      	pop	{r4, r7, pc}
 801c46c:	08027f58 	.word	0x08027f58
 801c470:	08028760 	.word	0x08028760
 801c474:	08027fd8 	.word	0x08027fd8

0801c478 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801c478:	b590      	push	{r4, r7, lr}
 801c47a:	b08b      	sub	sp, #44	; 0x2c
 801c47c:	af00      	add	r7, sp, #0
 801c47e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c480:	2300      	movs	r3, #0
 801c482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	2b00      	cmp	r3, #0
 801c48a:	d106      	bne.n	801c49a <tcp_zero_window_probe+0x22>
 801c48c:	4b4c      	ldr	r3, [pc, #304]	; (801c5c0 <tcp_zero_window_probe+0x148>)
 801c48e:	f640 024f 	movw	r2, #2127	; 0x84f
 801c492:	494c      	ldr	r1, [pc, #304]	; (801c5c4 <tcp_zero_window_probe+0x14c>)
 801c494:	484c      	ldr	r0, [pc, #304]	; (801c5c8 <tcp_zero_window_probe+0x150>)
 801c496:	f004 fc39 	bl	8020d0c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c49e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801c4a0:	6a3b      	ldr	r3, [r7, #32]
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d101      	bne.n	801c4aa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801c4a6:	2300      	movs	r3, #0
 801c4a8:	e086      	b.n	801c5b8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c4b0:	2bff      	cmp	r3, #255	; 0xff
 801c4b2:	d007      	beq.n	801c4c4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c4ba:	3301      	adds	r3, #1
 801c4bc:	b2da      	uxtb	r2, r3
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c4c4:	6a3b      	ldr	r3, [r7, #32]
 801c4c6:	68db      	ldr	r3, [r3, #12]
 801c4c8:	899b      	ldrh	r3, [r3, #12]
 801c4ca:	b29b      	uxth	r3, r3
 801c4cc:	4618      	mov	r0, r3
 801c4ce:	f7f5 fd0f 	bl	8011ef0 <lwip_htons>
 801c4d2:	4603      	mov	r3, r0
 801c4d4:	b2db      	uxtb	r3, r3
 801c4d6:	f003 0301 	and.w	r3, r3, #1
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d005      	beq.n	801c4ea <tcp_zero_window_probe+0x72>
 801c4de:	6a3b      	ldr	r3, [r7, #32]
 801c4e0:	891b      	ldrh	r3, [r3, #8]
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d101      	bne.n	801c4ea <tcp_zero_window_probe+0x72>
 801c4e6:	2301      	movs	r3, #1
 801c4e8:	e000      	b.n	801c4ec <tcp_zero_window_probe+0x74>
 801c4ea:	2300      	movs	r3, #0
 801c4ec:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801c4ee:	7ffb      	ldrb	r3, [r7, #31]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	bf0c      	ite	eq
 801c4f4:	2301      	moveq	r3, #1
 801c4f6:	2300      	movne	r3, #0
 801c4f8:	b2db      	uxtb	r3, r3
 801c4fa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801c4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c500:	b299      	uxth	r1, r3
 801c502:	6a3b      	ldr	r3, [r7, #32]
 801c504:	68db      	ldr	r3, [r3, #12]
 801c506:	685b      	ldr	r3, [r3, #4]
 801c508:	8bba      	ldrh	r2, [r7, #28]
 801c50a:	6878      	ldr	r0, [r7, #4]
 801c50c:	f7ff fdf8 	bl	801c100 <tcp_output_alloc_header>
 801c510:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801c512:	69bb      	ldr	r3, [r7, #24]
 801c514:	2b00      	cmp	r3, #0
 801c516:	d102      	bne.n	801c51e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801c518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c51c:	e04c      	b.n	801c5b8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801c51e:	69bb      	ldr	r3, [r7, #24]
 801c520:	685b      	ldr	r3, [r3, #4]
 801c522:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801c524:	7ffb      	ldrb	r3, [r7, #31]
 801c526:	2b00      	cmp	r3, #0
 801c528:	d011      	beq.n	801c54e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801c52a:	697b      	ldr	r3, [r7, #20]
 801c52c:	899b      	ldrh	r3, [r3, #12]
 801c52e:	b29b      	uxth	r3, r3
 801c530:	b21b      	sxth	r3, r3
 801c532:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c536:	b21c      	sxth	r4, r3
 801c538:	2011      	movs	r0, #17
 801c53a:	f7f5 fcd9 	bl	8011ef0 <lwip_htons>
 801c53e:	4603      	mov	r3, r0
 801c540:	b21b      	sxth	r3, r3
 801c542:	4323      	orrs	r3, r4
 801c544:	b21b      	sxth	r3, r3
 801c546:	b29a      	uxth	r2, r3
 801c548:	697b      	ldr	r3, [r7, #20]
 801c54a:	819a      	strh	r2, [r3, #12]
 801c54c:	e010      	b.n	801c570 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801c54e:	69bb      	ldr	r3, [r7, #24]
 801c550:	685b      	ldr	r3, [r3, #4]
 801c552:	3314      	adds	r3, #20
 801c554:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c556:	6a3b      	ldr	r3, [r7, #32]
 801c558:	6858      	ldr	r0, [r3, #4]
 801c55a:	6a3b      	ldr	r3, [r7, #32]
 801c55c:	685b      	ldr	r3, [r3, #4]
 801c55e:	891a      	ldrh	r2, [r3, #8]
 801c560:	6a3b      	ldr	r3, [r7, #32]
 801c562:	891b      	ldrh	r3, [r3, #8]
 801c564:	1ad3      	subs	r3, r2, r3
 801c566:	b29b      	uxth	r3, r3
 801c568:	2201      	movs	r2, #1
 801c56a:	6939      	ldr	r1, [r7, #16]
 801c56c:	f7f9 fda6 	bl	80160bc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c570:	6a3b      	ldr	r3, [r7, #32]
 801c572:	68db      	ldr	r3, [r3, #12]
 801c574:	685b      	ldr	r3, [r3, #4]
 801c576:	4618      	mov	r0, r3
 801c578:	f7f5 fccf 	bl	8011f1a <lwip_htonl>
 801c57c:	4603      	mov	r3, r0
 801c57e:	3301      	adds	r3, #1
 801c580:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c582:	687b      	ldr	r3, [r7, #4]
 801c584:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c586:	68fb      	ldr	r3, [r7, #12]
 801c588:	1ad3      	subs	r3, r2, r3
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	da02      	bge.n	801c594 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	68fa      	ldr	r2, [r7, #12]
 801c592:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c598:	2200      	movs	r2, #0
 801c59a:	69b9      	ldr	r1, [r7, #24]
 801c59c:	6878      	ldr	r0, [r7, #4]
 801c59e:	f7ff fded 	bl	801c17c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c5a2:	687a      	ldr	r2, [r7, #4]
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	3304      	adds	r3, #4
 801c5a8:	69b9      	ldr	r1, [r7, #24]
 801c5aa:	6878      	ldr	r0, [r7, #4]
 801c5ac:	f7ff fe26 	bl	801c1fc <tcp_output_control_segment>
 801c5b0:	4603      	mov	r3, r0
 801c5b2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c5b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c5b8:	4618      	mov	r0, r3
 801c5ba:	372c      	adds	r7, #44	; 0x2c
 801c5bc:	46bd      	mov	sp, r7
 801c5be:	bd90      	pop	{r4, r7, pc}
 801c5c0:	08027f58 	.word	0x08027f58
 801c5c4:	0802877c 	.word	0x0802877c
 801c5c8:	08027fd8 	.word	0x08027fd8

0801c5cc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801c5cc:	b580      	push	{r7, lr}
 801c5ce:	b082      	sub	sp, #8
 801c5d0:	af00      	add	r7, sp, #0
 801c5d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801c5d4:	f7f9 ff18 	bl	8016408 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c5d8:	4b0a      	ldr	r3, [pc, #40]	; (801c604 <tcpip_tcp_timer+0x38>)
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d103      	bne.n	801c5e8 <tcpip_tcp_timer+0x1c>
 801c5e0:	4b09      	ldr	r3, [pc, #36]	; (801c608 <tcpip_tcp_timer+0x3c>)
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d005      	beq.n	801c5f4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c5e8:	2200      	movs	r2, #0
 801c5ea:	4908      	ldr	r1, [pc, #32]	; (801c60c <tcpip_tcp_timer+0x40>)
 801c5ec:	20fa      	movs	r0, #250	; 0xfa
 801c5ee:	f000 f8f3 	bl	801c7d8 <sys_timeout>
 801c5f2:	e003      	b.n	801c5fc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801c5f4:	4b06      	ldr	r3, [pc, #24]	; (801c610 <tcpip_tcp_timer+0x44>)
 801c5f6:	2200      	movs	r2, #0
 801c5f8:	601a      	str	r2, [r3, #0]
  }
}
 801c5fa:	bf00      	nop
 801c5fc:	bf00      	nop
 801c5fe:	3708      	adds	r7, #8
 801c600:	46bd      	mov	sp, r7
 801c602:	bd80      	pop	{r7, pc}
 801c604:	2400ae58 	.word	0x2400ae58
 801c608:	2400ae68 	.word	0x2400ae68
 801c60c:	0801c5cd 	.word	0x0801c5cd
 801c610:	24007804 	.word	0x24007804

0801c614 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801c614:	b580      	push	{r7, lr}
 801c616:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c618:	4b0a      	ldr	r3, [pc, #40]	; (801c644 <tcp_timer_needed+0x30>)
 801c61a:	681b      	ldr	r3, [r3, #0]
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d10f      	bne.n	801c640 <tcp_timer_needed+0x2c>
 801c620:	4b09      	ldr	r3, [pc, #36]	; (801c648 <tcp_timer_needed+0x34>)
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	2b00      	cmp	r3, #0
 801c626:	d103      	bne.n	801c630 <tcp_timer_needed+0x1c>
 801c628:	4b08      	ldr	r3, [pc, #32]	; (801c64c <tcp_timer_needed+0x38>)
 801c62a:	681b      	ldr	r3, [r3, #0]
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d007      	beq.n	801c640 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801c630:	4b04      	ldr	r3, [pc, #16]	; (801c644 <tcp_timer_needed+0x30>)
 801c632:	2201      	movs	r2, #1
 801c634:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c636:	2200      	movs	r2, #0
 801c638:	4905      	ldr	r1, [pc, #20]	; (801c650 <tcp_timer_needed+0x3c>)
 801c63a:	20fa      	movs	r0, #250	; 0xfa
 801c63c:	f000 f8cc 	bl	801c7d8 <sys_timeout>
  }
}
 801c640:	bf00      	nop
 801c642:	bd80      	pop	{r7, pc}
 801c644:	24007804 	.word	0x24007804
 801c648:	2400ae58 	.word	0x2400ae58
 801c64c:	2400ae68 	.word	0x2400ae68
 801c650:	0801c5cd 	.word	0x0801c5cd

0801c654 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801c654:	b580      	push	{r7, lr}
 801c656:	b086      	sub	sp, #24
 801c658:	af00      	add	r7, sp, #0
 801c65a:	60f8      	str	r0, [r7, #12]
 801c65c:	60b9      	str	r1, [r7, #8]
 801c65e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c660:	2006      	movs	r0, #6
 801c662:	f7f8 fc5b 	bl	8014f1c <memp_malloc>
 801c666:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801c668:	693b      	ldr	r3, [r7, #16]
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	d109      	bne.n	801c682 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c66e:	693b      	ldr	r3, [r7, #16]
 801c670:	2b00      	cmp	r3, #0
 801c672:	d151      	bne.n	801c718 <sys_timeout_abs+0xc4>
 801c674:	4b2a      	ldr	r3, [pc, #168]	; (801c720 <sys_timeout_abs+0xcc>)
 801c676:	22be      	movs	r2, #190	; 0xbe
 801c678:	492a      	ldr	r1, [pc, #168]	; (801c724 <sys_timeout_abs+0xd0>)
 801c67a:	482b      	ldr	r0, [pc, #172]	; (801c728 <sys_timeout_abs+0xd4>)
 801c67c:	f004 fb46 	bl	8020d0c <iprintf>
    return;
 801c680:	e04a      	b.n	801c718 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801c682:	693b      	ldr	r3, [r7, #16]
 801c684:	2200      	movs	r2, #0
 801c686:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801c688:	693b      	ldr	r3, [r7, #16]
 801c68a:	68ba      	ldr	r2, [r7, #8]
 801c68c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801c68e:	693b      	ldr	r3, [r7, #16]
 801c690:	687a      	ldr	r2, [r7, #4]
 801c692:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801c694:	693b      	ldr	r3, [r7, #16]
 801c696:	68fa      	ldr	r2, [r7, #12]
 801c698:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c69a:	4b24      	ldr	r3, [pc, #144]	; (801c72c <sys_timeout_abs+0xd8>)
 801c69c:	681b      	ldr	r3, [r3, #0]
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d103      	bne.n	801c6aa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801c6a2:	4a22      	ldr	r2, [pc, #136]	; (801c72c <sys_timeout_abs+0xd8>)
 801c6a4:	693b      	ldr	r3, [r7, #16]
 801c6a6:	6013      	str	r3, [r2, #0]
    return;
 801c6a8:	e037      	b.n	801c71a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801c6aa:	693b      	ldr	r3, [r7, #16]
 801c6ac:	685a      	ldr	r2, [r3, #4]
 801c6ae:	4b1f      	ldr	r3, [pc, #124]	; (801c72c <sys_timeout_abs+0xd8>)
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	685b      	ldr	r3, [r3, #4]
 801c6b4:	1ad3      	subs	r3, r2, r3
 801c6b6:	0fdb      	lsrs	r3, r3, #31
 801c6b8:	f003 0301 	and.w	r3, r3, #1
 801c6bc:	b2db      	uxtb	r3, r3
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d007      	beq.n	801c6d2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801c6c2:	4b1a      	ldr	r3, [pc, #104]	; (801c72c <sys_timeout_abs+0xd8>)
 801c6c4:	681a      	ldr	r2, [r3, #0]
 801c6c6:	693b      	ldr	r3, [r7, #16]
 801c6c8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801c6ca:	4a18      	ldr	r2, [pc, #96]	; (801c72c <sys_timeout_abs+0xd8>)
 801c6cc:	693b      	ldr	r3, [r7, #16]
 801c6ce:	6013      	str	r3, [r2, #0]
 801c6d0:	e023      	b.n	801c71a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801c6d2:	4b16      	ldr	r3, [pc, #88]	; (801c72c <sys_timeout_abs+0xd8>)
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	617b      	str	r3, [r7, #20]
 801c6d8:	e01a      	b.n	801c710 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801c6da:	697b      	ldr	r3, [r7, #20]
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d00b      	beq.n	801c6fa <sys_timeout_abs+0xa6>
 801c6e2:	693b      	ldr	r3, [r7, #16]
 801c6e4:	685a      	ldr	r2, [r3, #4]
 801c6e6:	697b      	ldr	r3, [r7, #20]
 801c6e8:	681b      	ldr	r3, [r3, #0]
 801c6ea:	685b      	ldr	r3, [r3, #4]
 801c6ec:	1ad3      	subs	r3, r2, r3
 801c6ee:	0fdb      	lsrs	r3, r3, #31
 801c6f0:	f003 0301 	and.w	r3, r3, #1
 801c6f4:	b2db      	uxtb	r3, r3
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d007      	beq.n	801c70a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801c6fa:	697b      	ldr	r3, [r7, #20]
 801c6fc:	681a      	ldr	r2, [r3, #0]
 801c6fe:	693b      	ldr	r3, [r7, #16]
 801c700:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801c702:	697b      	ldr	r3, [r7, #20]
 801c704:	693a      	ldr	r2, [r7, #16]
 801c706:	601a      	str	r2, [r3, #0]
        break;
 801c708:	e007      	b.n	801c71a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c70a:	697b      	ldr	r3, [r7, #20]
 801c70c:	681b      	ldr	r3, [r3, #0]
 801c70e:	617b      	str	r3, [r7, #20]
 801c710:	697b      	ldr	r3, [r7, #20]
 801c712:	2b00      	cmp	r3, #0
 801c714:	d1e1      	bne.n	801c6da <sys_timeout_abs+0x86>
 801c716:	e000      	b.n	801c71a <sys_timeout_abs+0xc6>
    return;
 801c718:	bf00      	nop
      }
    }
  }
}
 801c71a:	3718      	adds	r7, #24
 801c71c:	46bd      	mov	sp, r7
 801c71e:	bd80      	pop	{r7, pc}
 801c720:	080287a0 	.word	0x080287a0
 801c724:	08028800 	.word	0x08028800
 801c728:	08028840 	.word	0x08028840
 801c72c:	240077fc 	.word	0x240077fc

0801c730 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801c730:	b580      	push	{r7, lr}
 801c732:	b086      	sub	sp, #24
 801c734:	af00      	add	r7, sp, #0
 801c736:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801c73c:	697b      	ldr	r3, [r7, #20]
 801c73e:	685b      	ldr	r3, [r3, #4]
 801c740:	4798      	blx	r3

  now = sys_now();
 801c742:	f7f4 fce9 	bl	8011118 <sys_now>
 801c746:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801c748:	697b      	ldr	r3, [r7, #20]
 801c74a:	681a      	ldr	r2, [r3, #0]
 801c74c:	4b0f      	ldr	r3, [pc, #60]	; (801c78c <lwip_cyclic_timer+0x5c>)
 801c74e:	681b      	ldr	r3, [r3, #0]
 801c750:	4413      	add	r3, r2
 801c752:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c754:	68fa      	ldr	r2, [r7, #12]
 801c756:	693b      	ldr	r3, [r7, #16]
 801c758:	1ad3      	subs	r3, r2, r3
 801c75a:	0fdb      	lsrs	r3, r3, #31
 801c75c:	f003 0301 	and.w	r3, r3, #1
 801c760:	b2db      	uxtb	r3, r3
 801c762:	2b00      	cmp	r3, #0
 801c764:	d009      	beq.n	801c77a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c766:	697b      	ldr	r3, [r7, #20]
 801c768:	681a      	ldr	r2, [r3, #0]
 801c76a:	693b      	ldr	r3, [r7, #16]
 801c76c:	4413      	add	r3, r2
 801c76e:	687a      	ldr	r2, [r7, #4]
 801c770:	4907      	ldr	r1, [pc, #28]	; (801c790 <lwip_cyclic_timer+0x60>)
 801c772:	4618      	mov	r0, r3
 801c774:	f7ff ff6e 	bl	801c654 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801c778:	e004      	b.n	801c784 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c77a:	687a      	ldr	r2, [r7, #4]
 801c77c:	4904      	ldr	r1, [pc, #16]	; (801c790 <lwip_cyclic_timer+0x60>)
 801c77e:	68f8      	ldr	r0, [r7, #12]
 801c780:	f7ff ff68 	bl	801c654 <sys_timeout_abs>
}
 801c784:	bf00      	nop
 801c786:	3718      	adds	r7, #24
 801c788:	46bd      	mov	sp, r7
 801c78a:	bd80      	pop	{r7, pc}
 801c78c:	24007800 	.word	0x24007800
 801c790:	0801c731 	.word	0x0801c731

0801c794 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801c794:	b580      	push	{r7, lr}
 801c796:	b082      	sub	sp, #8
 801c798:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c79a:	2301      	movs	r3, #1
 801c79c:	607b      	str	r3, [r7, #4]
 801c79e:	e00e      	b.n	801c7be <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c7a0:	4a0b      	ldr	r2, [pc, #44]	; (801c7d0 <sys_timeouts_init+0x3c>)
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	00db      	lsls	r3, r3, #3
 801c7ac:	4a08      	ldr	r2, [pc, #32]	; (801c7d0 <sys_timeouts_init+0x3c>)
 801c7ae:	4413      	add	r3, r2
 801c7b0:	461a      	mov	r2, r3
 801c7b2:	4908      	ldr	r1, [pc, #32]	; (801c7d4 <sys_timeouts_init+0x40>)
 801c7b4:	f000 f810 	bl	801c7d8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c7b8:	687b      	ldr	r3, [r7, #4]
 801c7ba:	3301      	adds	r3, #1
 801c7bc:	607b      	str	r3, [r7, #4]
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	2b02      	cmp	r3, #2
 801c7c2:	d9ed      	bls.n	801c7a0 <sys_timeouts_init+0xc>
  }
}
 801c7c4:	bf00      	nop
 801c7c6:	bf00      	nop
 801c7c8:	3708      	adds	r7, #8
 801c7ca:	46bd      	mov	sp, r7
 801c7cc:	bd80      	pop	{r7, pc}
 801c7ce:	bf00      	nop
 801c7d0:	080293d4 	.word	0x080293d4
 801c7d4:	0801c731 	.word	0x0801c731

0801c7d8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c7d8:	b580      	push	{r7, lr}
 801c7da:	b086      	sub	sp, #24
 801c7dc:	af00      	add	r7, sp, #0
 801c7de:	60f8      	str	r0, [r7, #12]
 801c7e0:	60b9      	str	r1, [r7, #8]
 801c7e2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c7ea:	d306      	bcc.n	801c7fa <sys_timeout+0x22>
 801c7ec:	4b0a      	ldr	r3, [pc, #40]	; (801c818 <sys_timeout+0x40>)
 801c7ee:	f240 1229 	movw	r2, #297	; 0x129
 801c7f2:	490a      	ldr	r1, [pc, #40]	; (801c81c <sys_timeout+0x44>)
 801c7f4:	480a      	ldr	r0, [pc, #40]	; (801c820 <sys_timeout+0x48>)
 801c7f6:	f004 fa89 	bl	8020d0c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c7fa:	f7f4 fc8d 	bl	8011118 <sys_now>
 801c7fe:	4602      	mov	r2, r0
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	4413      	add	r3, r2
 801c804:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c806:	687a      	ldr	r2, [r7, #4]
 801c808:	68b9      	ldr	r1, [r7, #8]
 801c80a:	6978      	ldr	r0, [r7, #20]
 801c80c:	f7ff ff22 	bl	801c654 <sys_timeout_abs>
#endif
}
 801c810:	bf00      	nop
 801c812:	3718      	adds	r7, #24
 801c814:	46bd      	mov	sp, r7
 801c816:	bd80      	pop	{r7, pc}
 801c818:	080287a0 	.word	0x080287a0
 801c81c:	08028868 	.word	0x08028868
 801c820:	08028840 	.word	0x08028840

0801c824 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c824:	b580      	push	{r7, lr}
 801c826:	b084      	sub	sp, #16
 801c828:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c82a:	f7f4 fc75 	bl	8011118 <sys_now>
 801c82e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 801c830:	4b1a      	ldr	r3, [pc, #104]	; (801c89c <sys_check_timeouts+0x78>)
 801c832:	781b      	ldrb	r3, [r3, #0]
 801c834:	b2db      	uxtb	r3, r3
 801c836:	2b00      	cmp	r3, #0
 801c838:	d001      	beq.n	801c83e <sys_check_timeouts+0x1a>
 801c83a:	f7f8 ff1b 	bl	8015674 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801c83e:	4b18      	ldr	r3, [pc, #96]	; (801c8a0 <sys_check_timeouts+0x7c>)
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801c844:	68bb      	ldr	r3, [r7, #8]
 801c846:	2b00      	cmp	r3, #0
 801c848:	d022      	beq.n	801c890 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c84a:	68bb      	ldr	r3, [r7, #8]
 801c84c:	685b      	ldr	r3, [r3, #4]
 801c84e:	68fa      	ldr	r2, [r7, #12]
 801c850:	1ad3      	subs	r3, r2, r3
 801c852:	0fdb      	lsrs	r3, r3, #31
 801c854:	f003 0301 	and.w	r3, r3, #1
 801c858:	b2db      	uxtb	r3, r3
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	d11a      	bne.n	801c894 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801c85e:	68bb      	ldr	r3, [r7, #8]
 801c860:	681b      	ldr	r3, [r3, #0]
 801c862:	4a0f      	ldr	r2, [pc, #60]	; (801c8a0 <sys_check_timeouts+0x7c>)
 801c864:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801c866:	68bb      	ldr	r3, [r7, #8]
 801c868:	689b      	ldr	r3, [r3, #8]
 801c86a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801c86c:	68bb      	ldr	r3, [r7, #8]
 801c86e:	68db      	ldr	r3, [r3, #12]
 801c870:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801c872:	68bb      	ldr	r3, [r7, #8]
 801c874:	685b      	ldr	r3, [r3, #4]
 801c876:	4a0b      	ldr	r2, [pc, #44]	; (801c8a4 <sys_check_timeouts+0x80>)
 801c878:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c87a:	68b9      	ldr	r1, [r7, #8]
 801c87c:	2006      	movs	r0, #6
 801c87e:	f7f8 fbbd 	bl	8014ffc <memp_free>
    if (handler != NULL) {
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	2b00      	cmp	r3, #0
 801c886:	d0d3      	beq.n	801c830 <sys_check_timeouts+0xc>
      handler(arg);
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	6838      	ldr	r0, [r7, #0]
 801c88c:	4798      	blx	r3
  do {
 801c88e:	e7cf      	b.n	801c830 <sys_check_timeouts+0xc>
      return;
 801c890:	bf00      	nop
 801c892:	e000      	b.n	801c896 <sys_check_timeouts+0x72>
      return;
 801c894:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c896:	3710      	adds	r7, #16
 801c898:	46bd      	mov	sp, r7
 801c89a:	bd80      	pop	{r7, pc}
 801c89c:	2400ae50 	.word	0x2400ae50
 801c8a0:	240077fc 	.word	0x240077fc
 801c8a4:	24007800 	.word	0x24007800

0801c8a8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c8a8:	b580      	push	{r7, lr}
 801c8aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c8ac:	f004 fabc 	bl	8020e28 <rand>
 801c8b0:	4603      	mov	r3, r0
 801c8b2:	b29b      	uxth	r3, r3
 801c8b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c8b8:	b29b      	uxth	r3, r3
 801c8ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801c8be:	b29a      	uxth	r2, r3
 801c8c0:	4b01      	ldr	r3, [pc, #4]	; (801c8c8 <udp_init+0x20>)
 801c8c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c8c4:	bf00      	nop
 801c8c6:	bd80      	pop	{r7, pc}
 801c8c8:	2400042c 	.word	0x2400042c

0801c8cc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801c8cc:	b480      	push	{r7}
 801c8ce:	b083      	sub	sp, #12
 801c8d0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801c8d2:	2300      	movs	r3, #0
 801c8d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801c8d6:	4b17      	ldr	r3, [pc, #92]	; (801c934 <udp_new_port+0x68>)
 801c8d8:	881b      	ldrh	r3, [r3, #0]
 801c8da:	1c5a      	adds	r2, r3, #1
 801c8dc:	b291      	uxth	r1, r2
 801c8de:	4a15      	ldr	r2, [pc, #84]	; (801c934 <udp_new_port+0x68>)
 801c8e0:	8011      	strh	r1, [r2, #0]
 801c8e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c8e6:	4293      	cmp	r3, r2
 801c8e8:	d103      	bne.n	801c8f2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801c8ea:	4b12      	ldr	r3, [pc, #72]	; (801c934 <udp_new_port+0x68>)
 801c8ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801c8f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c8f2:	4b11      	ldr	r3, [pc, #68]	; (801c938 <udp_new_port+0x6c>)
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	603b      	str	r3, [r7, #0]
 801c8f8:	e011      	b.n	801c91e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801c8fa:	683b      	ldr	r3, [r7, #0]
 801c8fc:	8a5a      	ldrh	r2, [r3, #18]
 801c8fe:	4b0d      	ldr	r3, [pc, #52]	; (801c934 <udp_new_port+0x68>)
 801c900:	881b      	ldrh	r3, [r3, #0]
 801c902:	429a      	cmp	r2, r3
 801c904:	d108      	bne.n	801c918 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c906:	88fb      	ldrh	r3, [r7, #6]
 801c908:	3301      	adds	r3, #1
 801c90a:	80fb      	strh	r3, [r7, #6]
 801c90c:	88fb      	ldrh	r3, [r7, #6]
 801c90e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c912:	d3e0      	bcc.n	801c8d6 <udp_new_port+0xa>
        return 0;
 801c914:	2300      	movs	r3, #0
 801c916:	e007      	b.n	801c928 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c918:	683b      	ldr	r3, [r7, #0]
 801c91a:	68db      	ldr	r3, [r3, #12]
 801c91c:	603b      	str	r3, [r7, #0]
 801c91e:	683b      	ldr	r3, [r7, #0]
 801c920:	2b00      	cmp	r3, #0
 801c922:	d1ea      	bne.n	801c8fa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801c924:	4b03      	ldr	r3, [pc, #12]	; (801c934 <udp_new_port+0x68>)
 801c926:	881b      	ldrh	r3, [r3, #0]
}
 801c928:	4618      	mov	r0, r3
 801c92a:	370c      	adds	r7, #12
 801c92c:	46bd      	mov	sp, r7
 801c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c932:	4770      	bx	lr
 801c934:	2400042c 	.word	0x2400042c
 801c938:	2400ae70 	.word	0x2400ae70

0801c93c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c93c:	b580      	push	{r7, lr}
 801c93e:	b084      	sub	sp, #16
 801c940:	af00      	add	r7, sp, #0
 801c942:	60f8      	str	r0, [r7, #12]
 801c944:	60b9      	str	r1, [r7, #8]
 801c946:	4613      	mov	r3, r2
 801c948:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c94a:	68fb      	ldr	r3, [r7, #12]
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	d105      	bne.n	801c95c <udp_input_local_match+0x20>
 801c950:	4b27      	ldr	r3, [pc, #156]	; (801c9f0 <udp_input_local_match+0xb4>)
 801c952:	2287      	movs	r2, #135	; 0x87
 801c954:	4927      	ldr	r1, [pc, #156]	; (801c9f4 <udp_input_local_match+0xb8>)
 801c956:	4828      	ldr	r0, [pc, #160]	; (801c9f8 <udp_input_local_match+0xbc>)
 801c958:	f004 f9d8 	bl	8020d0c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c95c:	68bb      	ldr	r3, [r7, #8]
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d105      	bne.n	801c96e <udp_input_local_match+0x32>
 801c962:	4b23      	ldr	r3, [pc, #140]	; (801c9f0 <udp_input_local_match+0xb4>)
 801c964:	2288      	movs	r2, #136	; 0x88
 801c966:	4925      	ldr	r1, [pc, #148]	; (801c9fc <udp_input_local_match+0xc0>)
 801c968:	4823      	ldr	r0, [pc, #140]	; (801c9f8 <udp_input_local_match+0xbc>)
 801c96a:	f004 f9cf 	bl	8020d0c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c96e:	68fb      	ldr	r3, [r7, #12]
 801c970:	7a1b      	ldrb	r3, [r3, #8]
 801c972:	2b00      	cmp	r3, #0
 801c974:	d00b      	beq.n	801c98e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c976:	68fb      	ldr	r3, [r7, #12]
 801c978:	7a1a      	ldrb	r2, [r3, #8]
 801c97a:	4b21      	ldr	r3, [pc, #132]	; (801ca00 <udp_input_local_match+0xc4>)
 801c97c:	685b      	ldr	r3, [r3, #4]
 801c97e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c982:	3301      	adds	r3, #1
 801c984:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c986:	429a      	cmp	r2, r3
 801c988:	d001      	beq.n	801c98e <udp_input_local_match+0x52>
    return 0;
 801c98a:	2300      	movs	r3, #0
 801c98c:	e02b      	b.n	801c9e6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c98e:	79fb      	ldrb	r3, [r7, #7]
 801c990:	2b00      	cmp	r3, #0
 801c992:	d018      	beq.n	801c9c6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c994:	68fb      	ldr	r3, [r7, #12]
 801c996:	2b00      	cmp	r3, #0
 801c998:	d013      	beq.n	801c9c2 <udp_input_local_match+0x86>
 801c99a:	68fb      	ldr	r3, [r7, #12]
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d00f      	beq.n	801c9c2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c9a2:	4b17      	ldr	r3, [pc, #92]	; (801ca00 <udp_input_local_match+0xc4>)
 801c9a4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c9a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c9aa:	d00a      	beq.n	801c9c2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c9ac:	68fb      	ldr	r3, [r7, #12]
 801c9ae:	681a      	ldr	r2, [r3, #0]
 801c9b0:	4b13      	ldr	r3, [pc, #76]	; (801ca00 <udp_input_local_match+0xc4>)
 801c9b2:	695b      	ldr	r3, [r3, #20]
 801c9b4:	405a      	eors	r2, r3
 801c9b6:	68bb      	ldr	r3, [r7, #8]
 801c9b8:	3308      	adds	r3, #8
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d110      	bne.n	801c9e4 <udp_input_local_match+0xa8>
          return 1;
 801c9c2:	2301      	movs	r3, #1
 801c9c4:	e00f      	b.n	801c9e6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	d009      	beq.n	801c9e0 <udp_input_local_match+0xa4>
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	681b      	ldr	r3, [r3, #0]
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d005      	beq.n	801c9e0 <udp_input_local_match+0xa4>
 801c9d4:	68fb      	ldr	r3, [r7, #12]
 801c9d6:	681a      	ldr	r2, [r3, #0]
 801c9d8:	4b09      	ldr	r3, [pc, #36]	; (801ca00 <udp_input_local_match+0xc4>)
 801c9da:	695b      	ldr	r3, [r3, #20]
 801c9dc:	429a      	cmp	r2, r3
 801c9de:	d101      	bne.n	801c9e4 <udp_input_local_match+0xa8>
        return 1;
 801c9e0:	2301      	movs	r3, #1
 801c9e2:	e000      	b.n	801c9e6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c9e4:	2300      	movs	r3, #0
}
 801c9e6:	4618      	mov	r0, r3
 801c9e8:	3710      	adds	r7, #16
 801c9ea:	46bd      	mov	sp, r7
 801c9ec:	bd80      	pop	{r7, pc}
 801c9ee:	bf00      	nop
 801c9f0:	080288b4 	.word	0x080288b4
 801c9f4:	08028910 	.word	0x08028910
 801c9f8:	08028934 	.word	0x08028934
 801c9fc:	0802895c 	.word	0x0802895c
 801ca00:	24007f68 	.word	0x24007f68

0801ca04 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801ca04:	b590      	push	{r4, r7, lr}
 801ca06:	b08d      	sub	sp, #52	; 0x34
 801ca08:	af02      	add	r7, sp, #8
 801ca0a:	6078      	str	r0, [r7, #4]
 801ca0c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801ca0e:	2300      	movs	r3, #0
 801ca10:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d105      	bne.n	801ca24 <udp_input+0x20>
 801ca18:	4b7c      	ldr	r3, [pc, #496]	; (801cc0c <udp_input+0x208>)
 801ca1a:	22cf      	movs	r2, #207	; 0xcf
 801ca1c:	497c      	ldr	r1, [pc, #496]	; (801cc10 <udp_input+0x20c>)
 801ca1e:	487d      	ldr	r0, [pc, #500]	; (801cc14 <udp_input+0x210>)
 801ca20:	f004 f974 	bl	8020d0c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801ca24:	683b      	ldr	r3, [r7, #0]
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d105      	bne.n	801ca36 <udp_input+0x32>
 801ca2a:	4b78      	ldr	r3, [pc, #480]	; (801cc0c <udp_input+0x208>)
 801ca2c:	22d0      	movs	r2, #208	; 0xd0
 801ca2e:	497a      	ldr	r1, [pc, #488]	; (801cc18 <udp_input+0x214>)
 801ca30:	4878      	ldr	r0, [pc, #480]	; (801cc14 <udp_input+0x210>)
 801ca32:	f004 f96b 	bl	8020d0c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	895b      	ldrh	r3, [r3, #10]
 801ca3a:	2b07      	cmp	r3, #7
 801ca3c:	d803      	bhi.n	801ca46 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801ca3e:	6878      	ldr	r0, [r7, #4]
 801ca40:	f7f9 f952 	bl	8015ce8 <pbuf_free>
    goto end;
 801ca44:	e0de      	b.n	801cc04 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	685b      	ldr	r3, [r3, #4]
 801ca4a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ca4c:	4b73      	ldr	r3, [pc, #460]	; (801cc1c <udp_input+0x218>)
 801ca4e:	695b      	ldr	r3, [r3, #20]
 801ca50:	4a72      	ldr	r2, [pc, #456]	; (801cc1c <udp_input+0x218>)
 801ca52:	6812      	ldr	r2, [r2, #0]
 801ca54:	4611      	mov	r1, r2
 801ca56:	4618      	mov	r0, r3
 801ca58:	f7f6 ffb6 	bl	80139c8 <ip4_addr_isbroadcast_u32>
 801ca5c:	4603      	mov	r3, r0
 801ca5e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801ca60:	697b      	ldr	r3, [r7, #20]
 801ca62:	881b      	ldrh	r3, [r3, #0]
 801ca64:	b29b      	uxth	r3, r3
 801ca66:	4618      	mov	r0, r3
 801ca68:	f7f5 fa42 	bl	8011ef0 <lwip_htons>
 801ca6c:	4603      	mov	r3, r0
 801ca6e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801ca70:	697b      	ldr	r3, [r7, #20]
 801ca72:	885b      	ldrh	r3, [r3, #2]
 801ca74:	b29b      	uxth	r3, r3
 801ca76:	4618      	mov	r0, r3
 801ca78:	f7f5 fa3a 	bl	8011ef0 <lwip_htons>
 801ca7c:	4603      	mov	r3, r0
 801ca7e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801ca80:	2300      	movs	r3, #0
 801ca82:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801ca84:	2300      	movs	r3, #0
 801ca86:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801ca88:	2300      	movs	r3, #0
 801ca8a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ca8c:	4b64      	ldr	r3, [pc, #400]	; (801cc20 <udp_input+0x21c>)
 801ca8e:	681b      	ldr	r3, [r3, #0]
 801ca90:	627b      	str	r3, [r7, #36]	; 0x24
 801ca92:	e054      	b.n	801cb3e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801ca94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca96:	8a5b      	ldrh	r3, [r3, #18]
 801ca98:	89fa      	ldrh	r2, [r7, #14]
 801ca9a:	429a      	cmp	r2, r3
 801ca9c:	d14a      	bne.n	801cb34 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801ca9e:	7cfb      	ldrb	r3, [r7, #19]
 801caa0:	461a      	mov	r2, r3
 801caa2:	6839      	ldr	r1, [r7, #0]
 801caa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801caa6:	f7ff ff49 	bl	801c93c <udp_input_local_match>
 801caaa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801caac:	2b00      	cmp	r3, #0
 801caae:	d041      	beq.n	801cb34 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801cab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cab2:	7c1b      	ldrb	r3, [r3, #16]
 801cab4:	f003 0304 	and.w	r3, r3, #4
 801cab8:	2b00      	cmp	r3, #0
 801caba:	d11d      	bne.n	801caf8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801cabc:	69fb      	ldr	r3, [r7, #28]
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d102      	bne.n	801cac8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801cac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cac4:	61fb      	str	r3, [r7, #28]
 801cac6:	e017      	b.n	801caf8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801cac8:	7cfb      	ldrb	r3, [r7, #19]
 801caca:	2b00      	cmp	r3, #0
 801cacc:	d014      	beq.n	801caf8 <udp_input+0xf4>
 801cace:	4b53      	ldr	r3, [pc, #332]	; (801cc1c <udp_input+0x218>)
 801cad0:	695b      	ldr	r3, [r3, #20]
 801cad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cad6:	d10f      	bne.n	801caf8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801cad8:	69fb      	ldr	r3, [r7, #28]
 801cada:	681a      	ldr	r2, [r3, #0]
 801cadc:	683b      	ldr	r3, [r7, #0]
 801cade:	3304      	adds	r3, #4
 801cae0:	681b      	ldr	r3, [r3, #0]
 801cae2:	429a      	cmp	r2, r3
 801cae4:	d008      	beq.n	801caf8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801cae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cae8:	681a      	ldr	r2, [r3, #0]
 801caea:	683b      	ldr	r3, [r7, #0]
 801caec:	3304      	adds	r3, #4
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	429a      	cmp	r2, r3
 801caf2:	d101      	bne.n	801caf8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801caf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caf6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801caf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cafa:	8a9b      	ldrh	r3, [r3, #20]
 801cafc:	8a3a      	ldrh	r2, [r7, #16]
 801cafe:	429a      	cmp	r2, r3
 801cb00:	d118      	bne.n	801cb34 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801cb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb04:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d005      	beq.n	801cb16 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801cb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb0c:	685a      	ldr	r2, [r3, #4]
 801cb0e:	4b43      	ldr	r3, [pc, #268]	; (801cc1c <udp_input+0x218>)
 801cb10:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801cb12:	429a      	cmp	r2, r3
 801cb14:	d10e      	bne.n	801cb34 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801cb16:	6a3b      	ldr	r3, [r7, #32]
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	d014      	beq.n	801cb46 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801cb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb1e:	68da      	ldr	r2, [r3, #12]
 801cb20:	6a3b      	ldr	r3, [r7, #32]
 801cb22:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801cb24:	4b3e      	ldr	r3, [pc, #248]	; (801cc20 <udp_input+0x21c>)
 801cb26:	681a      	ldr	r2, [r3, #0]
 801cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb2a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801cb2c:	4a3c      	ldr	r2, [pc, #240]	; (801cc20 <udp_input+0x21c>)
 801cb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb30:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801cb32:	e008      	b.n	801cb46 <udp_input+0x142>
      }
    }

    prev = pcb;
 801cb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb36:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb3a:	68db      	ldr	r3, [r3, #12]
 801cb3c:	627b      	str	r3, [r7, #36]	; 0x24
 801cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d1a7      	bne.n	801ca94 <udp_input+0x90>
 801cb44:	e000      	b.n	801cb48 <udp_input+0x144>
        break;
 801cb46:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801cb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d101      	bne.n	801cb52 <udp_input+0x14e>
    pcb = uncon_pcb;
 801cb4e:	69fb      	ldr	r3, [r7, #28]
 801cb50:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801cb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d002      	beq.n	801cb5e <udp_input+0x15a>
    for_us = 1;
 801cb58:	2301      	movs	r3, #1
 801cb5a:	76fb      	strb	r3, [r7, #27]
 801cb5c:	e00a      	b.n	801cb74 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801cb5e:	683b      	ldr	r3, [r7, #0]
 801cb60:	3304      	adds	r3, #4
 801cb62:	681a      	ldr	r2, [r3, #0]
 801cb64:	4b2d      	ldr	r3, [pc, #180]	; (801cc1c <udp_input+0x218>)
 801cb66:	695b      	ldr	r3, [r3, #20]
 801cb68:	429a      	cmp	r2, r3
 801cb6a:	bf0c      	ite	eq
 801cb6c:	2301      	moveq	r3, #1
 801cb6e:	2300      	movne	r3, #0
 801cb70:	b2db      	uxtb	r3, r3
 801cb72:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801cb74:	7efb      	ldrb	r3, [r7, #27]
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d041      	beq.n	801cbfe <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801cb7a:	2108      	movs	r1, #8
 801cb7c:	6878      	ldr	r0, [r7, #4]
 801cb7e:	f7f9 f82d 	bl	8015bdc <pbuf_remove_header>
 801cb82:	4603      	mov	r3, r0
 801cb84:	2b00      	cmp	r3, #0
 801cb86:	d00a      	beq.n	801cb9e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801cb88:	4b20      	ldr	r3, [pc, #128]	; (801cc0c <udp_input+0x208>)
 801cb8a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801cb8e:	4925      	ldr	r1, [pc, #148]	; (801cc24 <udp_input+0x220>)
 801cb90:	4820      	ldr	r0, [pc, #128]	; (801cc14 <udp_input+0x210>)
 801cb92:	f004 f8bb 	bl	8020d0c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801cb96:	6878      	ldr	r0, [r7, #4]
 801cb98:	f7f9 f8a6 	bl	8015ce8 <pbuf_free>
      goto end;
 801cb9c:	e032      	b.n	801cc04 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801cb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d012      	beq.n	801cbca <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cba6:	699b      	ldr	r3, [r3, #24]
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	d00a      	beq.n	801cbc2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801cbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbae:	699c      	ldr	r4, [r3, #24]
 801cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbb2:	69d8      	ldr	r0, [r3, #28]
 801cbb4:	8a3b      	ldrh	r3, [r7, #16]
 801cbb6:	9300      	str	r3, [sp, #0]
 801cbb8:	4b1b      	ldr	r3, [pc, #108]	; (801cc28 <udp_input+0x224>)
 801cbba:	687a      	ldr	r2, [r7, #4]
 801cbbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cbbe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801cbc0:	e021      	b.n	801cc06 <udp_input+0x202>
        pbuf_free(p);
 801cbc2:	6878      	ldr	r0, [r7, #4]
 801cbc4:	f7f9 f890 	bl	8015ce8 <pbuf_free>
        goto end;
 801cbc8:	e01c      	b.n	801cc04 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801cbca:	7cfb      	ldrb	r3, [r7, #19]
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d112      	bne.n	801cbf6 <udp_input+0x1f2>
 801cbd0:	4b12      	ldr	r3, [pc, #72]	; (801cc1c <udp_input+0x218>)
 801cbd2:	695b      	ldr	r3, [r3, #20]
 801cbd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cbd8:	2be0      	cmp	r3, #224	; 0xe0
 801cbda:	d00c      	beq.n	801cbf6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801cbdc:	4b0f      	ldr	r3, [pc, #60]	; (801cc1c <udp_input+0x218>)
 801cbde:	899b      	ldrh	r3, [r3, #12]
 801cbe0:	3308      	adds	r3, #8
 801cbe2:	b29b      	uxth	r3, r3
 801cbe4:	b21b      	sxth	r3, r3
 801cbe6:	4619      	mov	r1, r3
 801cbe8:	6878      	ldr	r0, [r7, #4]
 801cbea:	f7f9 f86a 	bl	8015cc2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801cbee:	2103      	movs	r1, #3
 801cbf0:	6878      	ldr	r0, [r7, #4]
 801cbf2:	f7f6 faed 	bl	80131d0 <icmp_dest_unreach>
      pbuf_free(p);
 801cbf6:	6878      	ldr	r0, [r7, #4]
 801cbf8:	f7f9 f876 	bl	8015ce8 <pbuf_free>
  return;
 801cbfc:	e003      	b.n	801cc06 <udp_input+0x202>
    pbuf_free(p);
 801cbfe:	6878      	ldr	r0, [r7, #4]
 801cc00:	f7f9 f872 	bl	8015ce8 <pbuf_free>
  return;
 801cc04:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801cc06:	372c      	adds	r7, #44	; 0x2c
 801cc08:	46bd      	mov	sp, r7
 801cc0a:	bd90      	pop	{r4, r7, pc}
 801cc0c:	080288b4 	.word	0x080288b4
 801cc10:	08028984 	.word	0x08028984
 801cc14:	08028934 	.word	0x08028934
 801cc18:	0802899c 	.word	0x0802899c
 801cc1c:	24007f68 	.word	0x24007f68
 801cc20:	2400ae70 	.word	0x2400ae70
 801cc24:	080289b8 	.word	0x080289b8
 801cc28:	24007f78 	.word	0x24007f78

0801cc2c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801cc2c:	b580      	push	{r7, lr}
 801cc2e:	b086      	sub	sp, #24
 801cc30:	af00      	add	r7, sp, #0
 801cc32:	60f8      	str	r0, [r7, #12]
 801cc34:	60b9      	str	r1, [r7, #8]
 801cc36:	4613      	mov	r3, r2
 801cc38:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801cc3a:	68bb      	ldr	r3, [r7, #8]
 801cc3c:	2b00      	cmp	r3, #0
 801cc3e:	d101      	bne.n	801cc44 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801cc40:	4b39      	ldr	r3, [pc, #228]	; (801cd28 <udp_bind+0xfc>)
 801cc42:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d109      	bne.n	801cc5e <udp_bind+0x32>
 801cc4a:	4b38      	ldr	r3, [pc, #224]	; (801cd2c <udp_bind+0x100>)
 801cc4c:	f240 32b7 	movw	r2, #951	; 0x3b7
 801cc50:	4937      	ldr	r1, [pc, #220]	; (801cd30 <udp_bind+0x104>)
 801cc52:	4838      	ldr	r0, [pc, #224]	; (801cd34 <udp_bind+0x108>)
 801cc54:	f004 f85a 	bl	8020d0c <iprintf>
 801cc58:	f06f 030f 	mvn.w	r3, #15
 801cc5c:	e060      	b.n	801cd20 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801cc5e:	2300      	movs	r3, #0
 801cc60:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cc62:	4b35      	ldr	r3, [pc, #212]	; (801cd38 <udp_bind+0x10c>)
 801cc64:	681b      	ldr	r3, [r3, #0]
 801cc66:	617b      	str	r3, [r7, #20]
 801cc68:	e009      	b.n	801cc7e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801cc6a:	68fa      	ldr	r2, [r7, #12]
 801cc6c:	697b      	ldr	r3, [r7, #20]
 801cc6e:	429a      	cmp	r2, r3
 801cc70:	d102      	bne.n	801cc78 <udp_bind+0x4c>
      rebind = 1;
 801cc72:	2301      	movs	r3, #1
 801cc74:	74fb      	strb	r3, [r7, #19]
      break;
 801cc76:	e005      	b.n	801cc84 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cc78:	697b      	ldr	r3, [r7, #20]
 801cc7a:	68db      	ldr	r3, [r3, #12]
 801cc7c:	617b      	str	r3, [r7, #20]
 801cc7e:	697b      	ldr	r3, [r7, #20]
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d1f2      	bne.n	801cc6a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801cc84:	88fb      	ldrh	r3, [r7, #6]
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d109      	bne.n	801cc9e <udp_bind+0x72>
    port = udp_new_port();
 801cc8a:	f7ff fe1f 	bl	801c8cc <udp_new_port>
 801cc8e:	4603      	mov	r3, r0
 801cc90:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801cc92:	88fb      	ldrh	r3, [r7, #6]
 801cc94:	2b00      	cmp	r3, #0
 801cc96:	d12c      	bne.n	801ccf2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801cc98:	f06f 0307 	mvn.w	r3, #7
 801cc9c:	e040      	b.n	801cd20 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cc9e:	4b26      	ldr	r3, [pc, #152]	; (801cd38 <udp_bind+0x10c>)
 801cca0:	681b      	ldr	r3, [r3, #0]
 801cca2:	617b      	str	r3, [r7, #20]
 801cca4:	e022      	b.n	801ccec <udp_bind+0xc0>
      if (pcb != ipcb) {
 801cca6:	68fa      	ldr	r2, [r7, #12]
 801cca8:	697b      	ldr	r3, [r7, #20]
 801ccaa:	429a      	cmp	r2, r3
 801ccac:	d01b      	beq.n	801cce6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801ccae:	697b      	ldr	r3, [r7, #20]
 801ccb0:	8a5b      	ldrh	r3, [r3, #18]
 801ccb2:	88fa      	ldrh	r2, [r7, #6]
 801ccb4:	429a      	cmp	r2, r3
 801ccb6:	d116      	bne.n	801cce6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ccb8:	697b      	ldr	r3, [r7, #20]
 801ccba:	681a      	ldr	r2, [r3, #0]
 801ccbc:	68bb      	ldr	r3, [r7, #8]
 801ccbe:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801ccc0:	429a      	cmp	r2, r3
 801ccc2:	d00d      	beq.n	801cce0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ccc4:	68bb      	ldr	r3, [r7, #8]
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d00a      	beq.n	801cce0 <udp_bind+0xb4>
 801ccca:	68bb      	ldr	r3, [r7, #8]
 801cccc:	681b      	ldr	r3, [r3, #0]
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	d006      	beq.n	801cce0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ccd2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d003      	beq.n	801cce0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ccd8:	697b      	ldr	r3, [r7, #20]
 801ccda:	681b      	ldr	r3, [r3, #0]
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d102      	bne.n	801cce6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801cce0:	f06f 0307 	mvn.w	r3, #7
 801cce4:	e01c      	b.n	801cd20 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cce6:	697b      	ldr	r3, [r7, #20]
 801cce8:	68db      	ldr	r3, [r3, #12]
 801ccea:	617b      	str	r3, [r7, #20]
 801ccec:	697b      	ldr	r3, [r7, #20]
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d1d9      	bne.n	801cca6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ccf2:	68bb      	ldr	r3, [r7, #8]
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	d002      	beq.n	801ccfe <udp_bind+0xd2>
 801ccf8:	68bb      	ldr	r3, [r7, #8]
 801ccfa:	681b      	ldr	r3, [r3, #0]
 801ccfc:	e000      	b.n	801cd00 <udp_bind+0xd4>
 801ccfe:	2300      	movs	r3, #0
 801cd00:	68fa      	ldr	r2, [r7, #12]
 801cd02:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	88fa      	ldrh	r2, [r7, #6]
 801cd08:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801cd0a:	7cfb      	ldrb	r3, [r7, #19]
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d106      	bne.n	801cd1e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801cd10:	4b09      	ldr	r3, [pc, #36]	; (801cd38 <udp_bind+0x10c>)
 801cd12:	681a      	ldr	r2, [r3, #0]
 801cd14:	68fb      	ldr	r3, [r7, #12]
 801cd16:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801cd18:	4a07      	ldr	r2, [pc, #28]	; (801cd38 <udp_bind+0x10c>)
 801cd1a:	68fb      	ldr	r3, [r7, #12]
 801cd1c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801cd1e:	2300      	movs	r3, #0
}
 801cd20:	4618      	mov	r0, r3
 801cd22:	3718      	adds	r7, #24
 801cd24:	46bd      	mov	sp, r7
 801cd26:	bd80      	pop	{r7, pc}
 801cd28:	08029318 	.word	0x08029318
 801cd2c:	080288b4 	.word	0x080288b4
 801cd30:	08028ba8 	.word	0x08028ba8
 801cd34:	08028934 	.word	0x08028934
 801cd38:	2400ae70 	.word	0x2400ae70

0801cd3c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801cd3c:	b580      	push	{r7, lr}
 801cd3e:	b086      	sub	sp, #24
 801cd40:	af00      	add	r7, sp, #0
 801cd42:	60f8      	str	r0, [r7, #12]
 801cd44:	60b9      	str	r1, [r7, #8]
 801cd46:	4613      	mov	r3, r2
 801cd48:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801cd4a:	68fb      	ldr	r3, [r7, #12]
 801cd4c:	2b00      	cmp	r3, #0
 801cd4e:	d109      	bne.n	801cd64 <udp_connect+0x28>
 801cd50:	4b2c      	ldr	r3, [pc, #176]	; (801ce04 <udp_connect+0xc8>)
 801cd52:	f240 4235 	movw	r2, #1077	; 0x435
 801cd56:	492c      	ldr	r1, [pc, #176]	; (801ce08 <udp_connect+0xcc>)
 801cd58:	482c      	ldr	r0, [pc, #176]	; (801ce0c <udp_connect+0xd0>)
 801cd5a:	f003 ffd7 	bl	8020d0c <iprintf>
 801cd5e:	f06f 030f 	mvn.w	r3, #15
 801cd62:	e04b      	b.n	801cdfc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801cd64:	68bb      	ldr	r3, [r7, #8]
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	d109      	bne.n	801cd7e <udp_connect+0x42>
 801cd6a:	4b26      	ldr	r3, [pc, #152]	; (801ce04 <udp_connect+0xc8>)
 801cd6c:	f240 4236 	movw	r2, #1078	; 0x436
 801cd70:	4927      	ldr	r1, [pc, #156]	; (801ce10 <udp_connect+0xd4>)
 801cd72:	4826      	ldr	r0, [pc, #152]	; (801ce0c <udp_connect+0xd0>)
 801cd74:	f003 ffca 	bl	8020d0c <iprintf>
 801cd78:	f06f 030f 	mvn.w	r3, #15
 801cd7c:	e03e      	b.n	801cdfc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801cd7e:	68fb      	ldr	r3, [r7, #12]
 801cd80:	8a5b      	ldrh	r3, [r3, #18]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d10f      	bne.n	801cda6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801cd86:	68f9      	ldr	r1, [r7, #12]
 801cd88:	68fb      	ldr	r3, [r7, #12]
 801cd8a:	8a5b      	ldrh	r3, [r3, #18]
 801cd8c:	461a      	mov	r2, r3
 801cd8e:	68f8      	ldr	r0, [r7, #12]
 801cd90:	f7ff ff4c 	bl	801cc2c <udp_bind>
 801cd94:	4603      	mov	r3, r0
 801cd96:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801cd98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d002      	beq.n	801cda6 <udp_connect+0x6a>
      return err;
 801cda0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cda4:	e02a      	b.n	801cdfc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801cda6:	68bb      	ldr	r3, [r7, #8]
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d002      	beq.n	801cdb2 <udp_connect+0x76>
 801cdac:	68bb      	ldr	r3, [r7, #8]
 801cdae:	681b      	ldr	r3, [r3, #0]
 801cdb0:	e000      	b.n	801cdb4 <udp_connect+0x78>
 801cdb2:	2300      	movs	r3, #0
 801cdb4:	68fa      	ldr	r2, [r7, #12]
 801cdb6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801cdb8:	68fb      	ldr	r3, [r7, #12]
 801cdba:	88fa      	ldrh	r2, [r7, #6]
 801cdbc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801cdbe:	68fb      	ldr	r3, [r7, #12]
 801cdc0:	7c1b      	ldrb	r3, [r3, #16]
 801cdc2:	f043 0304 	orr.w	r3, r3, #4
 801cdc6:	b2da      	uxtb	r2, r3
 801cdc8:	68fb      	ldr	r3, [r7, #12]
 801cdca:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cdcc:	4b11      	ldr	r3, [pc, #68]	; (801ce14 <udp_connect+0xd8>)
 801cdce:	681b      	ldr	r3, [r3, #0]
 801cdd0:	617b      	str	r3, [r7, #20]
 801cdd2:	e008      	b.n	801cde6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801cdd4:	68fa      	ldr	r2, [r7, #12]
 801cdd6:	697b      	ldr	r3, [r7, #20]
 801cdd8:	429a      	cmp	r2, r3
 801cdda:	d101      	bne.n	801cde0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801cddc:	2300      	movs	r3, #0
 801cdde:	e00d      	b.n	801cdfc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cde0:	697b      	ldr	r3, [r7, #20]
 801cde2:	68db      	ldr	r3, [r3, #12]
 801cde4:	617b      	str	r3, [r7, #20]
 801cde6:	697b      	ldr	r3, [r7, #20]
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	d1f3      	bne.n	801cdd4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801cdec:	4b09      	ldr	r3, [pc, #36]	; (801ce14 <udp_connect+0xd8>)
 801cdee:	681a      	ldr	r2, [r3, #0]
 801cdf0:	68fb      	ldr	r3, [r7, #12]
 801cdf2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801cdf4:	4a07      	ldr	r2, [pc, #28]	; (801ce14 <udp_connect+0xd8>)
 801cdf6:	68fb      	ldr	r3, [r7, #12]
 801cdf8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801cdfa:	2300      	movs	r3, #0
}
 801cdfc:	4618      	mov	r0, r3
 801cdfe:	3718      	adds	r7, #24
 801ce00:	46bd      	mov	sp, r7
 801ce02:	bd80      	pop	{r7, pc}
 801ce04:	080288b4 	.word	0x080288b4
 801ce08:	08028bc0 	.word	0x08028bc0
 801ce0c:	08028934 	.word	0x08028934
 801ce10:	08028bdc 	.word	0x08028bdc
 801ce14:	2400ae70 	.word	0x2400ae70

0801ce18 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801ce18:	b580      	push	{r7, lr}
 801ce1a:	b082      	sub	sp, #8
 801ce1c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801ce1e:	2000      	movs	r0, #0
 801ce20:	f7f8 f87c 	bl	8014f1c <memp_malloc>
 801ce24:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d007      	beq.n	801ce3c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801ce2c:	2220      	movs	r2, #32
 801ce2e:	2100      	movs	r1, #0
 801ce30:	6878      	ldr	r0, [r7, #4]
 801ce32:	f003 f871 	bl	801ff18 <memset>
    pcb->ttl = UDP_TTL;
 801ce36:	687b      	ldr	r3, [r7, #4]
 801ce38:	22ff      	movs	r2, #255	; 0xff
 801ce3a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801ce3c:	687b      	ldr	r3, [r7, #4]
}
 801ce3e:	4618      	mov	r0, r3
 801ce40:	3708      	adds	r7, #8
 801ce42:	46bd      	mov	sp, r7
 801ce44:	bd80      	pop	{r7, pc}
	...

0801ce48 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ce48:	b480      	push	{r7}
 801ce4a:	b085      	sub	sp, #20
 801ce4c:	af00      	add	r7, sp, #0
 801ce4e:	6078      	str	r0, [r7, #4]
 801ce50:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	d01e      	beq.n	801ce96 <udp_netif_ip_addr_changed+0x4e>
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	d01a      	beq.n	801ce96 <udp_netif_ip_addr_changed+0x4e>
 801ce60:	683b      	ldr	r3, [r7, #0]
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d017      	beq.n	801ce96 <udp_netif_ip_addr_changed+0x4e>
 801ce66:	683b      	ldr	r3, [r7, #0]
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d013      	beq.n	801ce96 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ce6e:	4b0d      	ldr	r3, [pc, #52]	; (801cea4 <udp_netif_ip_addr_changed+0x5c>)
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	60fb      	str	r3, [r7, #12]
 801ce74:	e00c      	b.n	801ce90 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801ce76:	68fb      	ldr	r3, [r7, #12]
 801ce78:	681a      	ldr	r2, [r3, #0]
 801ce7a:	687b      	ldr	r3, [r7, #4]
 801ce7c:	681b      	ldr	r3, [r3, #0]
 801ce7e:	429a      	cmp	r2, r3
 801ce80:	d103      	bne.n	801ce8a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801ce82:	683b      	ldr	r3, [r7, #0]
 801ce84:	681a      	ldr	r2, [r3, #0]
 801ce86:	68fb      	ldr	r3, [r7, #12]
 801ce88:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ce8a:	68fb      	ldr	r3, [r7, #12]
 801ce8c:	68db      	ldr	r3, [r3, #12]
 801ce8e:	60fb      	str	r3, [r7, #12]
 801ce90:	68fb      	ldr	r3, [r7, #12]
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d1ef      	bne.n	801ce76 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801ce96:	bf00      	nop
 801ce98:	3714      	adds	r7, #20
 801ce9a:	46bd      	mov	sp, r7
 801ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cea0:	4770      	bx	lr
 801cea2:	bf00      	nop
 801cea4:	2400ae70 	.word	0x2400ae70

0801cea8 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 801cea8:	b580      	push	{r7, lr}
 801ceaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 801ceac:	4b10      	ldr	r3, [pc, #64]	; (801cef0 <MX_PDM2PCM_Init+0x48>)
 801ceae:	2200      	movs	r2, #0
 801ceb0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 801ceb2:	4b0f      	ldr	r3, [pc, #60]	; (801cef0 <MX_PDM2PCM_Init+0x48>)
 801ceb4:	2201      	movs	r2, #1
 801ceb6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 801ceb8:	4b0d      	ldr	r3, [pc, #52]	; (801cef0 <MX_PDM2PCM_Init+0x48>)
 801ceba:	4a0e      	ldr	r2, [pc, #56]	; (801cef4 <MX_PDM2PCM_Init+0x4c>)
 801cebc:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 801cebe:	4b0c      	ldr	r3, [pc, #48]	; (801cef0 <MX_PDM2PCM_Init+0x48>)
 801cec0:	2202      	movs	r2, #2
 801cec2:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 801cec4:	4b0a      	ldr	r3, [pc, #40]	; (801cef0 <MX_PDM2PCM_Init+0x48>)
 801cec6:	2202      	movs	r2, #2
 801cec8:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 801ceca:	4809      	ldr	r0, [pc, #36]	; (801cef0 <MX_PDM2PCM_Init+0x48>)
 801cecc:	f002 fdf8 	bl	801fac0 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 801ced0:	4b09      	ldr	r3, [pc, #36]	; (801cef8 <MX_PDM2PCM_Init+0x50>)
 801ced2:	2202      	movs	r2, #2
 801ced4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 801ced6:	4b08      	ldr	r3, [pc, #32]	; (801cef8 <MX_PDM2PCM_Init+0x50>)
 801ced8:	2210      	movs	r2, #16
 801ceda:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 801cedc:	4b06      	ldr	r3, [pc, #24]	; (801cef8 <MX_PDM2PCM_Init+0x50>)
 801cede:	2200      	movs	r2, #0
 801cee0:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 801cee2:	4905      	ldr	r1, [pc, #20]	; (801cef8 <MX_PDM2PCM_Init+0x50>)
 801cee4:	4802      	ldr	r0, [pc, #8]	; (801cef0 <MX_PDM2PCM_Init+0x48>)
 801cee6:	f002 febb 	bl	801fc60 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 801ceea:	bf00      	nop
 801ceec:	bd80      	pop	{r7, pc}
 801ceee:	bf00      	nop
 801cef0:	2400ae7c 	.word	0x2400ae7c
 801cef4:	7d70a3d6 	.word	0x7d70a3d6
 801cef8:	2400ae74 	.word	0x2400ae74

0801cefc <cis_Init>:
 * @brief  CIS init
 * @param  Void
 * @retval None
 */
void cis_Init(synthModeTypeDef mode)
{
 801cefc:	b580      	push	{r7, lr}
 801cefe:	b082      	sub	sp, #8
 801cf00:	af00      	add	r7, sp, #0
 801cf02:	4603      	mov	r3, r0
 801cf04:	71fb      	strb	r3, [r7, #7]
	if (mode == IFFT_MODE)
 801cf06:	79fb      	ldrb	r3, [r7, #7]
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d10c      	bne.n	801cf26 <cis_Init+0x2a>
	{
		CIS_EFFECTIVE_PIXELS_NB			=	(CIS_PIXEX_AERA_STOP - CIS_PIXEX_AERA_START) / CIS_IFFT_OVERSAMPLING_RATIO;	//5530 / CIS_OVERSAMPLING_RATIO active pixels
 801cf0c:	4b25      	ldr	r3, [pc, #148]	; (801cfa4 <cis_Init+0xa8>)
 801cf0e:	2299      	movs	r2, #153	; 0x99
 801cf10:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_PIXEL_AERA_START	=	CIS_PIXEX_AERA_START / (CIS_IFFT_OVERSAMPLING_RATIO);
 801cf12:	4b25      	ldr	r3, [pc, #148]	; (801cfa8 <cis_Init+0xac>)
 801cf14:	2207      	movs	r2, #7
 801cf16:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_PIXEL_AERA_STOP	=	CIS_PIXEX_AERA_STOP / (CIS_IFFT_OVERSAMPLING_RATIO);
 801cf18:	4b24      	ldr	r3, [pc, #144]	; (801cfac <cis_Init+0xb0>)
 801cf1a:	22a0      	movs	r2, #160	; 0xa0
 801cf1c:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_END_CAPTURE 		=	CIS_END_CAPTURE / (CIS_IFFT_OVERSAMPLING_RATIO);
 801cf1e:	4b24      	ldr	r3, [pc, #144]	; (801cfb0 <cis_Init+0xb4>)
 801cf20:	22b0      	movs	r2, #176	; 0xb0
 801cf22:	801a      	strh	r2, [r3, #0]
 801cf24:	e00b      	b.n	801cf3e <cis_Init+0x42>
	}
	else
	{
		CIS_EFFECTIVE_PIXELS_NB			=	(CIS_PIXEX_AERA_STOP - CIS_PIXEX_AERA_START) / CIS_IMGPLY_OVERSAMPLING_RATIO;	//5530 / CIS_OVERSAMPLING_RATIO active pixels
 801cf26:	4b1f      	ldr	r3, [pc, #124]	; (801cfa4 <cis_Init+0xa8>)
 801cf28:	2299      	movs	r2, #153	; 0x99
 801cf2a:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_PIXEL_AERA_START	=	CIS_PIXEX_AERA_START / CIS_IMGPLY_OVERSAMPLING_RATIO;
 801cf2c:	4b1e      	ldr	r3, [pc, #120]	; (801cfa8 <cis_Init+0xac>)
 801cf2e:	2207      	movs	r2, #7
 801cf30:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_PIXEL_AERA_STOP	=	CIS_PIXEX_AERA_STOP / CIS_IMGPLY_OVERSAMPLING_RATIO;
 801cf32:	4b1e      	ldr	r3, [pc, #120]	; (801cfac <cis_Init+0xb0>)
 801cf34:	22a0      	movs	r2, #160	; 0xa0
 801cf36:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_END_CAPTURE 		=	CIS_END_CAPTURE / CIS_IMGPLY_OVERSAMPLING_RATIO;
 801cf38:	4b1d      	ldr	r3, [pc, #116]	; (801cfb0 <cis_Init+0xb4>)
 801cf3a:	22b0      	movs	r2, #176	; 0xb0
 801cf3c:	801a      	strh	r2, [r3, #0]
	}

	ADC_CONVERTED_DATA_BUFFER_SIZE 	=	CIS_ADC_BUFF_END_CAPTURE * 2;
 801cf3e:	4b1c      	ldr	r3, [pc, #112]	; (801cfb0 <cis_Init+0xb4>)
 801cf40:	881b      	ldrh	r3, [r3, #0]
 801cf42:	005b      	lsls	r3, r3, #1
 801cf44:	b29a      	uxth	r2, r3
 801cf46:	4b1b      	ldr	r3, [pc, #108]	; (801cfb4 <cis_Init+0xb8>)
 801cf48:	801a      	strh	r2, [r3, #0]

	//allocate the contiguous memory area for storage cis data
	cisData = malloc(CIS_ADC_BUFF_END_CAPTURE * 2 * sizeof(uint16_t*));
 801cf4a:	4b19      	ldr	r3, [pc, #100]	; (801cfb0 <cis_Init+0xb4>)
 801cf4c:	881b      	ldrh	r3, [r3, #0]
 801cf4e:	00db      	lsls	r3, r3, #3
 801cf50:	4618      	mov	r0, r3
 801cf52:	f002 ffa3 	bl	801fe9c <malloc>
 801cf56:	4603      	mov	r3, r0
 801cf58:	461a      	mov	r2, r3
 801cf5a:	4b17      	ldr	r3, [pc, #92]	; (801cfb8 <cis_Init+0xbc>)
 801cf5c:	601a      	str	r2, [r3, #0]
	if (cisData == NULL)
 801cf5e:	4b16      	ldr	r3, [pc, #88]	; (801cfb8 <cis_Init+0xbc>)
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d101      	bne.n	801cf6a <cis_Init+0x6e>
	{
		Error_Handler();
 801cf66:	f7e5 fe39 	bl	8002bdc <Error_Handler>
	}

	memset(cisData, 0, CIS_ADC_BUFF_END_CAPTURE * 2 * sizeof(uint16_t*)); //clear image
 801cf6a:	4b13      	ldr	r3, [pc, #76]	; (801cfb8 <cis_Init+0xbc>)
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	4a10      	ldr	r2, [pc, #64]	; (801cfb0 <cis_Init+0xb4>)
 801cf70:	8812      	ldrh	r2, [r2, #0]
 801cf72:	00d2      	lsls	r2, r2, #3
 801cf74:	2100      	movs	r1, #0
 801cf76:	4618      	mov	r0, r3
 801cf78:	f002 ffce 	bl	801ff18 <memset>
	// Reset SP counter
//	__HAL_TIM_SET_COUNTER(&htim15, 0);

#ifdef CIS_BW
	//Set BW phase shift
	__HAL_TIM_SET_COUNTER(&htim8, (CIS_END_CAPTURE) - CIS_LED_ON);			//B
 801cf7c:	4b0f      	ldr	r3, [pc, #60]	; (801cfbc <cis_Init+0xc0>)
 801cf7e:	681b      	ldr	r3, [r3, #0]
 801cf80:	f241 52b1 	movw	r2, #5553	; 0x15b1
 801cf84:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4, (CIS_END_CAPTURE) - CIS_LED_ON);			//G
 801cf86:	4b0e      	ldr	r3, [pc, #56]	; (801cfc0 <cis_Init+0xc4>)
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	f241 52b1 	movw	r2, #5553	; 0x15b1
 801cf8e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, (CIS_END_CAPTURE) - CIS_LED_ON);			//R
 801cf90:	4b0c      	ldr	r3, [pc, #48]	; (801cfc4 <cis_Init+0xc8>)
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	f241 52b1 	movw	r2, #5553	; 0x15b1
 801cf98:	625a      	str	r2, [r3, #36]	; 0x24
	//Set RGB phase shift
	__HAL_TIM_SET_COUNTER(&htim8, (CIS_END_CAPTURE * 2) - CIS_LED_ON);		//B
	__HAL_TIM_SET_COUNTER(&htim4, (CIS_END_CAPTURE * 3) - CIS_LED_ON);		//G
	__HAL_TIM_SET_COUNTER(&htim3, (CIS_END_CAPTURE) - CIS_LED_ON);			//R
#endif
}
 801cf9a:	bf00      	nop
 801cf9c:	3708      	adds	r7, #8
 801cf9e:	46bd      	mov	sp, r7
 801cfa0:	bd80      	pop	{r7, pc}
 801cfa2:	bf00      	nop
 801cfa4:	2400042e 	.word	0x2400042e
 801cfa8:	24000430 	.word	0x24000430
 801cfac:	24000432 	.word	0x24000432
 801cfb0:	24000434 	.word	0x24000434
 801cfb4:	24000436 	.word	0x24000436
 801cfb8:	24007808 	.word	0x24007808
 801cfbc:	24007b60 	.word	0x24007b60
 801cfc0:	24007bac 	.word	0x24007bac
 801cfc4:	24007c44 	.word	0x24007c44

0801cfc8 <cis_GetEffectivePixelNb>:
 * @brief  GetEffectivePixelNb
 * @param  Void
 * @retval Nuber of effective pixels
 */
__inline uint16_t cis_GetEffectivePixelNb(void)
{
 801cfc8:	b480      	push	{r7}
 801cfca:	af00      	add	r7, sp, #0
	return CIS_EFFECTIVE_PIXELS_NB;
 801cfcc:	4b03      	ldr	r3, [pc, #12]	; (801cfdc <cis_GetEffectivePixelNb+0x14>)
 801cfce:	881b      	ldrh	r3, [r3, #0]
}
 801cfd0:	4618      	mov	r0, r3
 801cfd2:	46bd      	mov	sp, r7
 801cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfd8:	4770      	bx	lr
 801cfda:	bf00      	nop
 801cfdc:	2400042e 	.word	0x2400042e

0801cfe0 <cis_GetBuffData>:
 * @brief  Return buffer data
 * @param  index
 * @retval value
 */
uint16_t cis_GetBuffData(uint32_t index)
{
 801cfe0:	b480      	push	{r7}
 801cfe2:	b083      	sub	sp, #12
 801cfe4:	af00      	add	r7, sp, #0
 801cfe6:	6078      	str	r0, [r7, #4]
	//	if (index >= ADC_CONVERTED_DATA_BUFFER_SIZE)
	//		Error_Handler();
	return cisData[index + CIS_ADC_BUFF_PIXEL_AERA_START];
 801cfe8:	4b07      	ldr	r3, [pc, #28]	; (801d008 <cis_GetBuffData+0x28>)
 801cfea:	681a      	ldr	r2, [r3, #0]
 801cfec:	4b07      	ldr	r3, [pc, #28]	; (801d00c <cis_GetBuffData+0x2c>)
 801cfee:	881b      	ldrh	r3, [r3, #0]
 801cff0:	4619      	mov	r1, r3
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	440b      	add	r3, r1
 801cff6:	005b      	lsls	r3, r3, #1
 801cff8:	4413      	add	r3, r2
 801cffa:	881b      	ldrh	r3, [r3, #0]
}
 801cffc:	4618      	mov	r0, r3
 801cffe:	370c      	adds	r7, #12
 801d000:	46bd      	mov	sp, r7
 801d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d006:	4770      	bx	lr
 801d008:	24007808 	.word	0x24007808
 801d00c:	24000430 	.word	0x24000430

0801d010 <cis_ImageProcessBW>:
 * @brief  Manages Image process.
 * @param  None
 * @retval Image error
 */
void cis_ImageProcessBW(uint16_t *cis_buff)
{
 801d010:	b580      	push	{r7, lr}
 801d012:	b08a      	sub	sp, #40	; 0x28
 801d014:	af00      	add	r7, sp, #0
 801d016:	6078      	str	r0, [r7, #4]
	/* 1st half buffer played; so fill it and continue playing from bottom*/
	if(cisBufferState == CIS_BUFFER_OFFSET_HALF)
 801d018:	4b42      	ldr	r3, [pc, #264]	; (801d124 <cis_ImageProcessBW+0x114>)
 801d01a:	781b      	ldrb	r3, [r3, #0]
 801d01c:	2b01      	cmp	r3, #1
 801d01e:	d139      	bne.n	801d094 <cis_ImageProcessBW+0x84>
	{
		cisBufferState = CIS_BUFFER_OFFSET_NONE;
 801d020:	4b40      	ldr	r3, [pc, #256]	; (801d124 <cis_ImageProcessBW+0x114>)
 801d022:	2200      	movs	r2, #0
 801d024:	701a      	strb	r2, [r3, #0]
		/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer */
		SCB_InvalidateDCache_by_Addr((uint32_t *) &cisData[0], CIS_END_CAPTURE / 2);
 801d026:	4b40      	ldr	r3, [pc, #256]	; (801d128 <cis_ImageProcessBW+0x118>)
 801d028:	681b      	ldr	r3, [r3, #0]
 801d02a:	627b      	str	r3, [r7, #36]	; 0x24
 801d02c:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 801d030:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 801d032:	6a3b      	ldr	r3, [r7, #32]
 801d034:	2b00      	cmp	r3, #0
 801d036:	dd1d      	ble.n	801d074 <cis_ImageProcessBW+0x64>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801d038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d03a:	f003 021f 	and.w	r2, r3, #31
 801d03e:	6a3b      	ldr	r3, [r7, #32]
 801d040:	4413      	add	r3, r2
 801d042:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801d044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d046:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 801d048:	f3bf 8f4f 	dsb	sy
}
 801d04c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801d04e:	4a37      	ldr	r2, [pc, #220]	; (801d12c <cis_ImageProcessBW+0x11c>)
 801d050:	69bb      	ldr	r3, [r7, #24]
 801d052:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801d056:	69bb      	ldr	r3, [r7, #24]
 801d058:	3320      	adds	r3, #32
 801d05a:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801d05c:	69fb      	ldr	r3, [r7, #28]
 801d05e:	3b20      	subs	r3, #32
 801d060:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 801d062:	69fb      	ldr	r3, [r7, #28]
 801d064:	2b00      	cmp	r3, #0
 801d066:	dcf2      	bgt.n	801d04e <cis_ImageProcessBW+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 801d068:	f3bf 8f4f 	dsb	sy
}
 801d06c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801d06e:	f3bf 8f6f 	isb	sy
}
 801d072:	bf00      	nop
}
 801d074:	bf00      	nop
		arm_copy_q15((int16_t*)&cisData[CIS_ADC_BUFF_PIXEL_AERA_START], (int16_t*)cis_buff, CIS_EFFECTIVE_PIXELS_NB);
 801d076:	4b2c      	ldr	r3, [pc, #176]	; (801d128 <cis_ImageProcessBW+0x118>)
 801d078:	681a      	ldr	r2, [r3, #0]
 801d07a:	4b2d      	ldr	r3, [pc, #180]	; (801d130 <cis_ImageProcessBW+0x120>)
 801d07c:	881b      	ldrh	r3, [r3, #0]
 801d07e:	005b      	lsls	r3, r3, #1
 801d080:	4413      	add	r3, r2
 801d082:	4a2c      	ldr	r2, [pc, #176]	; (801d134 <cis_ImageProcessBW+0x124>)
 801d084:	8812      	ldrh	r2, [r2, #0]
 801d086:	6879      	ldr	r1, [r7, #4]
 801d088:	4618      	mov	r0, r3
 801d08a:	f7e6 fd30 	bl	8003aee <arm_copy_q15>

		cis_ImageFilterBW(cis_buff);
 801d08e:	6878      	ldr	r0, [r7, #4]
 801d090:	f000 f856 	bl	801d140 <cis_ImageFilterBW>
	}

	/* 2nd half buffer played; so fill it and continue playing from top */
	if(cisBufferState == CIS_BUFFER_OFFSET_FULL)
 801d094:	4b23      	ldr	r3, [pc, #140]	; (801d124 <cis_ImageProcessBW+0x114>)
 801d096:	781b      	ldrb	r3, [r3, #0]
 801d098:	2b02      	cmp	r3, #2
 801d09a:	d13f      	bne.n	801d11c <cis_ImageProcessBW+0x10c>
	{
		cisBufferState = CIS_BUFFER_OFFSET_NONE;
 801d09c:	4b21      	ldr	r3, [pc, #132]	; (801d124 <cis_ImageProcessBW+0x114>)
 801d09e:	2200      	movs	r2, #0
 801d0a0:	701a      	strb	r2, [r3, #0]
		/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer */
		SCB_InvalidateDCache_by_Addr((uint32_t *) &cisData[CIS_END_CAPTURE / 4], CIS_END_CAPTURE / 2);
 801d0a2:	4b21      	ldr	r3, [pc, #132]	; (801d128 <cis_ImageProcessBW+0x118>)
 801d0a4:	681b      	ldr	r3, [r3, #0]
 801d0a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d0aa:	617b      	str	r3, [r7, #20]
 801d0ac:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 801d0b0:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 801d0b2:	693b      	ldr	r3, [r7, #16]
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	dd1d      	ble.n	801d0f4 <cis_ImageProcessBW+0xe4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801d0b8:	697b      	ldr	r3, [r7, #20]
 801d0ba:	f003 021f 	and.w	r2, r3, #31
 801d0be:	693b      	ldr	r3, [r7, #16]
 801d0c0:	4413      	add	r3, r2
 801d0c2:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801d0c4:	697b      	ldr	r3, [r7, #20]
 801d0c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 801d0c8:	f3bf 8f4f 	dsb	sy
}
 801d0cc:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801d0ce:	4a17      	ldr	r2, [pc, #92]	; (801d12c <cis_ImageProcessBW+0x11c>)
 801d0d0:	68bb      	ldr	r3, [r7, #8]
 801d0d2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801d0d6:	68bb      	ldr	r3, [r7, #8]
 801d0d8:	3320      	adds	r3, #32
 801d0da:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801d0dc:	68fb      	ldr	r3, [r7, #12]
 801d0de:	3b20      	subs	r3, #32
 801d0e0:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 801d0e2:	68fb      	ldr	r3, [r7, #12]
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	dcf2      	bgt.n	801d0ce <cis_ImageProcessBW+0xbe>
  __ASM volatile ("dsb 0xF":::"memory");
 801d0e8:	f3bf 8f4f 	dsb	sy
}
 801d0ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801d0ee:	f3bf 8f6f 	isb	sy
}
 801d0f2:	bf00      	nop
}
 801d0f4:	bf00      	nop
		arm_copy_q15((int16_t*)&cisData[CIS_ADC_BUFF_END_CAPTURE + CIS_ADC_BUFF_PIXEL_AERA_START], (int16_t*)cis_buff, CIS_EFFECTIVE_PIXELS_NB);
 801d0f6:	4b0c      	ldr	r3, [pc, #48]	; (801d128 <cis_ImageProcessBW+0x118>)
 801d0f8:	681a      	ldr	r2, [r3, #0]
 801d0fa:	4b0f      	ldr	r3, [pc, #60]	; (801d138 <cis_ImageProcessBW+0x128>)
 801d0fc:	881b      	ldrh	r3, [r3, #0]
 801d0fe:	4619      	mov	r1, r3
 801d100:	4b0b      	ldr	r3, [pc, #44]	; (801d130 <cis_ImageProcessBW+0x120>)
 801d102:	881b      	ldrh	r3, [r3, #0]
 801d104:	440b      	add	r3, r1
 801d106:	005b      	lsls	r3, r3, #1
 801d108:	4413      	add	r3, r2
 801d10a:	4a0a      	ldr	r2, [pc, #40]	; (801d134 <cis_ImageProcessBW+0x124>)
 801d10c:	8812      	ldrh	r2, [r2, #0]
 801d10e:	6879      	ldr	r1, [r7, #4]
 801d110:	4618      	mov	r0, r3
 801d112:	f7e6 fcec 	bl	8003aee <arm_copy_q15>

		cis_ImageFilterBW(cis_buff);
 801d116:	6878      	ldr	r0, [r7, #4]
 801d118:	f000 f812 	bl	801d140 <cis_ImageFilterBW>
	}
}
 801d11c:	bf00      	nop
 801d11e:	3728      	adds	r7, #40	; 0x28
 801d120:	46bd      	mov	sp, r7
 801d122:	bd80      	pop	{r7, pc}
 801d124:	2400780c 	.word	0x2400780c
 801d128:	24007808 	.word	0x24007808
 801d12c:	e000ed00 	.word	0xe000ed00
 801d130:	24000430 	.word	0x24000430
 801d134:	2400042e 	.word	0x2400042e
 801d138:	24000434 	.word	0x24000434
 801d13c:	00000000 	.word	0x00000000

0801d140 <cis_ImageFilterBW>:
 * @brief  Image filtering
 * @param  Audio buffer
 * @retval None
 */
void cis_ImageFilterBW(uint16_t *cis_buff)
{
 801d140:	b580      	push	{r7, lr}
 801d142:	ed2d 8b02 	vpush	{d8}
 801d146:	b084      	sub	sp, #16
 801d148:	af00      	add	r7, sp, #0
 801d14a:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < CIS_EFFECTIVE_PIXELS_NB; i++)
 801d14c:	2300      	movs	r3, #0
 801d14e:	60fb      	str	r3, [r7, #12]
 801d150:	e038      	b.n	801d1c4 <cis_ImageFilterBW+0x84>
	{
#ifdef CIS_INVERT_COLOR
		cis_buff[i] = (double)(65535 - cis_buff[i]) * (pow(10.00, ((double)(65535 - cis_buff[i]) / 65535.00)) / 10.00); //sensibility filer generate some glitchs
 801d152:	68fb      	ldr	r3, [r7, #12]
 801d154:	005b      	lsls	r3, r3, #1
 801d156:	687a      	ldr	r2, [r7, #4]
 801d158:	4413      	add	r3, r2
 801d15a:	881b      	ldrh	r3, [r3, #0]
 801d15c:	461a      	mov	r2, r3
 801d15e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d162:	1a9b      	subs	r3, r3, r2
 801d164:	ee07 3a90 	vmov	s15, r3
 801d168:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 801d16c:	68fb      	ldr	r3, [r7, #12]
 801d16e:	005b      	lsls	r3, r3, #1
 801d170:	687a      	ldr	r2, [r7, #4]
 801d172:	4413      	add	r3, r2
 801d174:	881b      	ldrh	r3, [r3, #0]
 801d176:	461a      	mov	r2, r3
 801d178:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d17c:	1a9b      	subs	r3, r3, r2
 801d17e:	ee07 3a90 	vmov	s15, r3
 801d182:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d186:	ed9f 5b16 	vldr	d5, [pc, #88]	; 801d1e0 <cis_ImageFilterBW+0xa0>
 801d18a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801d18e:	eeb0 1b46 	vmov.f64	d1, d6
 801d192:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 801d196:	f007 faf3 	bl	8024780 <pow>
 801d19a:	eeb0 6b40 	vmov.f64	d6, d0
 801d19e:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 801d1a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801d1a6:	ee28 7b07 	vmul.f64	d7, d8, d7
 801d1aa:	68fb      	ldr	r3, [r7, #12]
 801d1ac:	005b      	lsls	r3, r3, #1
 801d1ae:	687a      	ldr	r2, [r7, #4]
 801d1b0:	4413      	add	r3, r2
 801d1b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801d1b6:	ee17 2a90 	vmov	r2, s15
 801d1ba:	b292      	uxth	r2, r2
 801d1bc:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < CIS_EFFECTIVE_PIXELS_NB; i++)
 801d1be:	68fb      	ldr	r3, [r7, #12]
 801d1c0:	3301      	adds	r3, #1
 801d1c2:	60fb      	str	r3, [r7, #12]
 801d1c4:	4b08      	ldr	r3, [pc, #32]	; (801d1e8 <cis_ImageFilterBW+0xa8>)
 801d1c6:	881b      	ldrh	r3, [r3, #0]
 801d1c8:	461a      	mov	r2, r3
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	4293      	cmp	r3, r2
 801d1ce:	d3c0      	bcc.n	801d152 <cis_ImageFilterBW+0x12>

#else
		cis_buff[i] = (double)(cis_buff[i]) * (pow(10.00, ((double)(cis_buff[i]) / 65535.00)) / 10.00);
#endif
	}
}
 801d1d0:	bf00      	nop
 801d1d2:	bf00      	nop
 801d1d4:	3710      	adds	r7, #16
 801d1d6:	46bd      	mov	sp, r7
 801d1d8:	ecbd 8b02 	vpop	{d8}
 801d1dc:	bd80      	pop	{r7, pc}
 801d1de:	bf00      	nop
 801d1e0:	00000000 	.word	0x00000000
 801d1e4:	40efffe0 	.word	0x40efffe0
 801d1e8:	2400042e 	.word	0x2400042e

0801d1ec <icm20602_write>:

/* Private user code ---------------------------------------------------------*/

//Writes a register byte to the driver
uint8_t icm20602_write(uint8_t reg, uint8_t *data, uint16_t len)
{
 801d1ec:	b580      	push	{r7, lr}
 801d1ee:	b084      	sub	sp, #16
 801d1f0:	af00      	add	r7, sp, #0
 801d1f2:	4603      	mov	r3, r0
 801d1f4:	6039      	str	r1, [r7, #0]
 801d1f6:	71fb      	strb	r3, [r7, #7]
 801d1f8:	4613      	mov	r3, r2
 801d1fa:	80bb      	strh	r3, [r7, #4]
	int rv = 0;
 801d1fc:	2300      	movs	r3, #0
 801d1fe:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 801d200:	2200      	movs	r2, #0
 801d202:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d206:	4819      	ldr	r0, [pc, #100]	; (801d26c <icm20602_write+0x80>)
 801d208:	f7ec fb36 	bl	8009878 <HAL_GPIO_WritePin>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801d20c:	bf00      	nop
 801d20e:	4818      	ldr	r0, [pc, #96]	; (801d270 <icm20602_write+0x84>)
 801d210:	f7f1 fb56 	bl	800e8c0 <HAL_SPI_GetState>
 801d214:	4603      	mov	r3, r0
 801d216:	2b01      	cmp	r3, #1
 801d218:	d1f9      	bne.n	801d20e <icm20602_write+0x22>
	rv = HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
 801d21a:	1df9      	adds	r1, r7, #7
 801d21c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d220:	2201      	movs	r2, #1
 801d222:	4813      	ldr	r0, [pc, #76]	; (801d270 <icm20602_write+0x84>)
 801d224:	f7f0 fc7c 	bl	800db20 <HAL_SPI_Transmit>
 801d228:	4603      	mov	r3, r0
 801d22a:	60fb      	str	r3, [r7, #12]
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801d22c:	bf00      	nop
 801d22e:	4810      	ldr	r0, [pc, #64]	; (801d270 <icm20602_write+0x84>)
 801d230:	f7f1 fb46 	bl	800e8c0 <HAL_SPI_GetState>
 801d234:	4603      	mov	r3, r0
 801d236:	2b01      	cmp	r3, #1
 801d238:	d1f9      	bne.n	801d22e <icm20602_write+0x42>
	rv += HAL_SPI_Transmit(&hspi2, data, len, 1000);
 801d23a:	88ba      	ldrh	r2, [r7, #4]
 801d23c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d240:	6839      	ldr	r1, [r7, #0]
 801d242:	480b      	ldr	r0, [pc, #44]	; (801d270 <icm20602_write+0x84>)
 801d244:	f7f0 fc6c 	bl	800db20 <HAL_SPI_Transmit>
 801d248:	4603      	mov	r3, r0
 801d24a:	461a      	mov	r2, r3
 801d24c:	68fb      	ldr	r3, [r7, #12]
 801d24e:	4413      	add	r3, r2
 801d250:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_SET);
 801d252:	2201      	movs	r2, #1
 801d254:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d258:	4804      	ldr	r0, [pc, #16]	; (801d26c <icm20602_write+0x80>)
 801d25a:	f7ec fb0d 	bl	8009878 <HAL_GPIO_WritePin>
	return rv;
 801d25e:	68fb      	ldr	r3, [r7, #12]
 801d260:	b2db      	uxtb	r3, r3
}
 801d262:	4618      	mov	r0, r3
 801d264:	3710      	adds	r7, #16
 801d266:	46bd      	mov	sp, r7
 801d268:	bd80      	pop	{r7, pc}
 801d26a:	bf00      	nop
 801d26c:	58020400 	.word	0x58020400
 801d270:	24007ad8 	.word	0x24007ad8

0801d274 <icm20602_read>:

//Read a register byte to the driver
uint8_t icm20602_read(uint8_t reg, uint8_t *data, uint16_t len)
{
 801d274:	b580      	push	{r7, lr}
 801d276:	b084      	sub	sp, #16
 801d278:	af00      	add	r7, sp, #0
 801d27a:	4603      	mov	r3, r0
 801d27c:	6039      	str	r1, [r7, #0]
 801d27e:	71fb      	strb	r3, [r7, #7]
 801d280:	4613      	mov	r3, r2
 801d282:	80bb      	strh	r3, [r7, #4]
	int rv = 0;
 801d284:	2300      	movs	r3, #0
 801d286:	60fb      	str	r3, [r7, #12]
	reg |= 0b10000000;
 801d288:	79fb      	ldrb	r3, [r7, #7]
 801d28a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801d28e:	b2db      	uxtb	r3, r3
 801d290:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 801d292:	2200      	movs	r2, #0
 801d294:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d298:	4818      	ldr	r0, [pc, #96]	; (801d2fc <icm20602_read+0x88>)
 801d29a:	f7ec faed 	bl	8009878 <HAL_GPIO_WritePin>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801d29e:	bf00      	nop
 801d2a0:	4817      	ldr	r0, [pc, #92]	; (801d300 <icm20602_read+0x8c>)
 801d2a2:	f7f1 fb0d 	bl	800e8c0 <HAL_SPI_GetState>
 801d2a6:	4603      	mov	r3, r0
 801d2a8:	2b01      	cmp	r3, #1
 801d2aa:	d1f9      	bne.n	801d2a0 <icm20602_read+0x2c>
	rv = HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
 801d2ac:	1df9      	adds	r1, r7, #7
 801d2ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d2b2:	2201      	movs	r2, #1
 801d2b4:	4812      	ldr	r0, [pc, #72]	; (801d300 <icm20602_read+0x8c>)
 801d2b6:	f7f0 fc33 	bl	800db20 <HAL_SPI_Transmit>
 801d2ba:	4603      	mov	r3, r0
 801d2bc:	60fb      	str	r3, [r7, #12]
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801d2be:	bf00      	nop
 801d2c0:	480f      	ldr	r0, [pc, #60]	; (801d300 <icm20602_read+0x8c>)
 801d2c2:	f7f1 fafd 	bl	800e8c0 <HAL_SPI_GetState>
 801d2c6:	4603      	mov	r3, r0
 801d2c8:	2b01      	cmp	r3, #1
 801d2ca:	d1f9      	bne.n	801d2c0 <icm20602_read+0x4c>
	rv += HAL_SPI_Receive(&hspi2, data, len, 1000);
 801d2cc:	88ba      	ldrh	r2, [r7, #4]
 801d2ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d2d2:	6839      	ldr	r1, [r7, #0]
 801d2d4:	480a      	ldr	r0, [pc, #40]	; (801d300 <icm20602_read+0x8c>)
 801d2d6:	f7f0 fe15 	bl	800df04 <HAL_SPI_Receive>
 801d2da:	4603      	mov	r3, r0
 801d2dc:	461a      	mov	r2, r3
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	4413      	add	r3, r2
 801d2e2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_SET);
 801d2e4:	2201      	movs	r2, #1
 801d2e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d2ea:	4804      	ldr	r0, [pc, #16]	; (801d2fc <icm20602_read+0x88>)
 801d2ec:	f7ec fac4 	bl	8009878 <HAL_GPIO_WritePin>
	return rv;
 801d2f0:	68fb      	ldr	r3, [r7, #12]
 801d2f2:	b2db      	uxtb	r3, r3
}
 801d2f4:	4618      	mov	r0, r3
 801d2f6:	3710      	adds	r7, #16
 801d2f8:	46bd      	mov	sp, r7
 801d2fa:	bd80      	pop	{r7, pc}
 801d2fc:	58020400 	.word	0x58020400
 801d300:	24007ad8 	.word	0x24007ad8

0801d304 <icm20602_init>:
}

/***** Global Functions *****/

int8_t icm20602_init(void)
{
 801d304:	b580      	push	{r7, lr}
 801d306:	b082      	sub	sp, #8
 801d308:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 801d30a:	2300      	movs	r3, #0
 801d30c:	71bb      	strb	r3, [r7, #6]
	int8_t r = 0;
 801d30e:	2300      	movs	r3, #0
 801d310:	71fb      	strb	r3, [r7, #7]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = 0x80;
 801d312:	2380      	movs	r3, #128	; 0x80
 801d314:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_1, &tmp, 1);
 801d316:	1dbb      	adds	r3, r7, #6
 801d318:	2201      	movs	r2, #1
 801d31a:	4619      	mov	r1, r3
 801d31c:	206b      	movs	r0, #107	; 0x6b
 801d31e:	f7ff ff65 	bl	801d1ec <icm20602_write>
 801d322:	4603      	mov	r3, r0
 801d324:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	f040 818e 	bne.w	801d64c <icm20602_init+0x348>

	HAL_Delay(1000);
 801d330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d334:	f7e6 fe12 	bl	8003f5c <HAL_Delay>

	// verify we are able to read from the chip
	r = icm20602_read(REG_WHO_AM_I, &tmp, 1);
 801d338:	1dbb      	adds	r3, r7, #6
 801d33a:	2201      	movs	r2, #1
 801d33c:	4619      	mov	r1, r3
 801d33e:	2075      	movs	r0, #117	; 0x75
 801d340:	f7ff ff98 	bl	801d274 <icm20602_read>
 801d344:	4603      	mov	r3, r0
 801d346:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	f040 817f 	bne.w	801d650 <icm20602_init+0x34c>
	if (REG_WHO_AM_I_CONST != tmp) {
 801d352:	79bb      	ldrb	r3, [r7, #6]
 801d354:	2b12      	cmp	r3, #18
 801d356:	d006      	beq.n	801d366 <icm20602_init+0x62>
		r = -1;
 801d358:	23ff      	movs	r3, #255	; 0xff
 801d35a:	71fb      	strb	r3, [r7, #7]
		ON_ERROR_GOTO((0 == r), return_err);
 801d35c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d360:	2b00      	cmp	r3, #0
 801d362:	f040 8177 	bne.w	801d654 <icm20602_init+0x350>
	}

	/*Reset path*/
	tmp = 0x03;
 801d366:	2303      	movs	r3, #3
 801d368:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_SIGNAL_PATH_RESET, &tmp, 1);
 801d36a:	1dbb      	adds	r3, r7, #6
 801d36c:	2201      	movs	r2, #1
 801d36e:	4619      	mov	r1, r3
 801d370:	2068      	movs	r0, #104	; 0x68
 801d372:	f7ff ff3b 	bl	801d1ec <icm20602_write>
 801d376:	4603      	mov	r3, r0
 801d378:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d37a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d37e:	2b00      	cmp	r3, #0
 801d380:	f040 816a 	bne.w	801d658 <icm20602_init+0x354>

	// set clock to internal PLL
	tmp = 0x01;
 801d384:	2301      	movs	r3, #1
 801d386:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_1, &tmp, 1);
 801d388:	1dbb      	adds	r3, r7, #6
 801d38a:	2201      	movs	r2, #1
 801d38c:	4619      	mov	r1, r3
 801d38e:	206b      	movs	r0, #107	; 0x6b
 801d390:	f7ff ff2c 	bl	801d1ec <icm20602_write>
 801d394:	4603      	mov	r3, r0
 801d396:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	f040 815d 	bne.w	801d65c <icm20602_init+0x358>

	// place accel and gyro on standby
	tmp = 0x3F;
 801d3a2:	233f      	movs	r3, #63	; 0x3f
 801d3a4:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_2, &tmp, 1);
 801d3a6:	1dbb      	adds	r3, r7, #6
 801d3a8:	2201      	movs	r2, #1
 801d3aa:	4619      	mov	r1, r3
 801d3ac:	206c      	movs	r0, #108	; 0x6c
 801d3ae:	f7ff ff1d 	bl	801d1ec <icm20602_write>
 801d3b2:	4603      	mov	r3, r0
 801d3b4:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d3b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	f040 8150 	bne.w	801d660 <icm20602_init+0x35c>

	// disable fifo
	tmp = 0x01;
 801d3c0:	2301      	movs	r3, #1
 801d3c2:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_USER_CTRL, &tmp, 1);
 801d3c4:	1dbb      	adds	r3, r7, #6
 801d3c6:	2201      	movs	r2, #1
 801d3c8:	4619      	mov	r1, r3
 801d3ca:	206a      	movs	r0, #106	; 0x6a
 801d3cc:	f7ff ff0e 	bl	801d1ec <icm20602_write>
 801d3d0:	4603      	mov	r3, r0
 801d3d2:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d3d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	f040 8143 	bne.w	801d664 <icm20602_init+0x360>

	// disable chip I2C communications
	tmp = 0x40;
 801d3de:	2340      	movs	r3, #64	; 0x40
 801d3e0:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_I2C_IF, &tmp, 1);
 801d3e2:	1dbb      	adds	r3, r7, #6
 801d3e4:	2201      	movs	r2, #1
 801d3e6:	4619      	mov	r1, r3
 801d3e8:	2070      	movs	r0, #112	; 0x70
 801d3ea:	f7ff feff 	bl	801d1ec <icm20602_write>
 801d3ee:	4603      	mov	r3, r0
 801d3f0:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d3f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	f040 8136 	bne.w	801d668 <icm20602_init+0x364>

	if (dev.use_accel) {
 801d3fc:	4ba7      	ldr	r3, [pc, #668]	; (801d69c <icm20602_init+0x398>)
 801d3fe:	781b      	ldrb	r3, [r3, #0]
 801d400:	2b00      	cmp	r3, #0
 801d402:	d034      	beq.n	801d46e <icm20602_init+0x16a>
		if (ICM20602_ACCEL_DLPF_BYPASS_1046_HZ == dev.accel_dlpf) {
 801d404:	4ba5      	ldr	r3, [pc, #660]	; (801d69c <icm20602_init+0x398>)
 801d406:	789b      	ldrb	r3, [r3, #2]
 801d408:	2b08      	cmp	r3, #8
 801d40a:	d10e      	bne.n	801d42a <icm20602_init+0x126>
			tmp = (1 << 3);
 801d40c:	2308      	movs	r3, #8
 801d40e:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_ACCEL_CONFIG_2, &tmp, 1);
 801d410:	1dbb      	adds	r3, r7, #6
 801d412:	2201      	movs	r2, #1
 801d414:	4619      	mov	r1, r3
 801d416:	201d      	movs	r0, #29
 801d418:	f7ff fee8 	bl	801d1ec <icm20602_write>
 801d41c:	4603      	mov	r3, r0
 801d41e:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d424:	2b00      	cmp	r3, #0
 801d426:	d010      	beq.n	801d44a <icm20602_init+0x146>
 801d428:	e131      	b.n	801d68e <icm20602_init+0x38a>
		}
		else {
			tmp = dev.accel_dlpf;
 801d42a:	4b9c      	ldr	r3, [pc, #624]	; (801d69c <icm20602_init+0x398>)
 801d42c:	789b      	ldrb	r3, [r3, #2]
 801d42e:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_ACCEL_CONFIG_2, &tmp, 1);
 801d430:	1dbb      	adds	r3, r7, #6
 801d432:	2201      	movs	r2, #1
 801d434:	4619      	mov	r1, r3
 801d436:	201d      	movs	r0, #29
 801d438:	f7ff fed8 	bl	801d1ec <icm20602_write>
 801d43c:	4603      	mov	r3, r0
 801d43e:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d444:	2b00      	cmp	r3, #0
 801d446:	f040 8111 	bne.w	801d66c <icm20602_init+0x368>
		}

		tmp = (dev.accel_g) << 2;
 801d44a:	4b94      	ldr	r3, [pc, #592]	; (801d69c <icm20602_init+0x398>)
 801d44c:	78db      	ldrb	r3, [r3, #3]
 801d44e:	009b      	lsls	r3, r3, #2
 801d450:	b2db      	uxtb	r3, r3
 801d452:	71bb      	strb	r3, [r7, #6]
		r =  icm20602_write(REG_ACCEL_CONFIG, &tmp, 1);
 801d454:	1dbb      	adds	r3, r7, #6
 801d456:	2201      	movs	r2, #1
 801d458:	4619      	mov	r1, r3
 801d45a:	201c      	movs	r0, #28
 801d45c:	f7ff fec6 	bl	801d1ec <icm20602_write>
 801d460:	4603      	mov	r3, r0
 801d462:	71fb      	strb	r3, [r7, #7]
		ON_ERROR_GOTO((0 == r), return_err);
 801d464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d468:	2b00      	cmp	r3, #0
 801d46a:	f040 8101 	bne.w	801d670 <icm20602_init+0x36c>
	}

	if (dev.use_gyro) {
 801d46e:	4b8b      	ldr	r3, [pc, #556]	; (801d69c <icm20602_init+0x398>)
 801d470:	791b      	ldrb	r3, [r3, #4]
 801d472:	2b00      	cmp	r3, #0
 801d474:	d073      	beq.n	801d55e <icm20602_init+0x25a>
		if (ICM20602_GYRO_DLPF_BYPASS_3281_HZ == dev.gyro_dlpf) {
 801d476:	4b89      	ldr	r3, [pc, #548]	; (801d69c <icm20602_init+0x398>)
 801d478:	799b      	ldrb	r3, [r3, #6]
 801d47a:	2b08      	cmp	r3, #8
 801d47c:	d124      	bne.n	801d4c8 <icm20602_init+0x1c4>
			// bypass dpf and set dps
			tmp = 0x00;
 801d47e:	2300      	movs	r3, #0
 801d480:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801d482:	1dbb      	adds	r3, r7, #6
 801d484:	2201      	movs	r2, #1
 801d486:	4619      	mov	r1, r3
 801d488:	201a      	movs	r0, #26
 801d48a:	f7ff feaf 	bl	801d1ec <icm20602_write>
 801d48e:	4603      	mov	r3, r0
 801d490:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d496:	2b00      	cmp	r3, #0
 801d498:	f040 80ec 	bne.w	801d674 <icm20602_init+0x370>

			tmp = (dev.gyro_dps << 3) | 0x02; // see table page 37 of datasheet
 801d49c:	4b7f      	ldr	r3, [pc, #508]	; (801d69c <icm20602_init+0x398>)
 801d49e:	79db      	ldrb	r3, [r3, #7]
 801d4a0:	00db      	lsls	r3, r3, #3
 801d4a2:	b25b      	sxtb	r3, r3
 801d4a4:	f043 0302 	orr.w	r3, r3, #2
 801d4a8:	b25b      	sxtb	r3, r3
 801d4aa:	b2db      	uxtb	r3, r3
 801d4ac:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801d4ae:	1dbb      	adds	r3, r7, #6
 801d4b0:	2201      	movs	r2, #1
 801d4b2:	4619      	mov	r1, r3
 801d4b4:	201b      	movs	r0, #27
 801d4b6:	f7ff fe99 	bl	801d1ec <icm20602_write>
 801d4ba:	4603      	mov	r3, r0
 801d4bc:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d4be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	d04b      	beq.n	801d55e <icm20602_init+0x25a>
 801d4c6:	e0e2      	b.n	801d68e <icm20602_init+0x38a>
		}
		else if (ICM20602_GYRO_DLPF_BYPASS_8173_HZ == dev.gyro_dlpf) {
 801d4c8:	4b74      	ldr	r3, [pc, #464]	; (801d69c <icm20602_init+0x398>)
 801d4ca:	799b      	ldrb	r3, [r3, #6]
 801d4cc:	2b09      	cmp	r3, #9
 801d4ce:	d124      	bne.n	801d51a <icm20602_init+0x216>
			// bypass dpf and set dps
			tmp = 0x00;
 801d4d0:	2300      	movs	r3, #0
 801d4d2:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801d4d4:	1dbb      	adds	r3, r7, #6
 801d4d6:	2201      	movs	r2, #1
 801d4d8:	4619      	mov	r1, r3
 801d4da:	201a      	movs	r0, #26
 801d4dc:	f7ff fe86 	bl	801d1ec <icm20602_write>
 801d4e0:	4603      	mov	r3, r0
 801d4e2:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d4e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d4e8:	2b00      	cmp	r3, #0
 801d4ea:	f040 80c5 	bne.w	801d678 <icm20602_init+0x374>

			tmp = (dev.gyro_dps << 3) | 0x01; // see table page 37 of datasheet
 801d4ee:	4b6b      	ldr	r3, [pc, #428]	; (801d69c <icm20602_init+0x398>)
 801d4f0:	79db      	ldrb	r3, [r3, #7]
 801d4f2:	00db      	lsls	r3, r3, #3
 801d4f4:	b25b      	sxtb	r3, r3
 801d4f6:	f043 0301 	orr.w	r3, r3, #1
 801d4fa:	b25b      	sxtb	r3, r3
 801d4fc:	b2db      	uxtb	r3, r3
 801d4fe:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801d500:	1dbb      	adds	r3, r7, #6
 801d502:	2201      	movs	r2, #1
 801d504:	4619      	mov	r1, r3
 801d506:	201b      	movs	r0, #27
 801d508:	f7ff fe70 	bl	801d1ec <icm20602_write>
 801d50c:	4603      	mov	r3, r0
 801d50e:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d514:	2b00      	cmp	r3, #0
 801d516:	d022      	beq.n	801d55e <icm20602_init+0x25a>
 801d518:	e0b9      	b.n	801d68e <icm20602_init+0x38a>
		}
		else {
			// configure dpf and set dps
			tmp = dev.gyro_dlpf;
 801d51a:	4b60      	ldr	r3, [pc, #384]	; (801d69c <icm20602_init+0x398>)
 801d51c:	799b      	ldrb	r3, [r3, #6]
 801d51e:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801d520:	1dbb      	adds	r3, r7, #6
 801d522:	2201      	movs	r2, #1
 801d524:	4619      	mov	r1, r3
 801d526:	201a      	movs	r0, #26
 801d528:	f7ff fe60 	bl	801d1ec <icm20602_write>
 801d52c:	4603      	mov	r3, r0
 801d52e:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d534:	2b00      	cmp	r3, #0
 801d536:	f040 80a1 	bne.w	801d67c <icm20602_init+0x378>

			tmp = dev.gyro_dps << 3;
 801d53a:	4b58      	ldr	r3, [pc, #352]	; (801d69c <icm20602_init+0x398>)
 801d53c:	79db      	ldrb	r3, [r3, #7]
 801d53e:	00db      	lsls	r3, r3, #3
 801d540:	b2db      	uxtb	r3, r3
 801d542:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801d544:	1dbb      	adds	r3, r7, #6
 801d546:	2201      	movs	r2, #1
 801d548:	4619      	mov	r1, r3
 801d54a:	201b      	movs	r0, #27
 801d54c:	f7ff fe4e 	bl	801d1ec <icm20602_write>
 801d550:	4603      	mov	r3, r0
 801d552:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d558:	2b00      	cmp	r3, #0
 801d55a:	f040 8091 	bne.w	801d680 <icm20602_init+0x37c>
		}
	}

	/*Disale low power mode*/
	tmp = 0x00;
 801d55e:	2300      	movs	r3, #0
 801d560:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_LP_MODE_CFG, &tmp, 1);
 801d562:	1dbb      	adds	r3, r7, #6
 801d564:	2201      	movs	r2, #1
 801d566:	4619      	mov	r1, r3
 801d568:	201e      	movs	r0, #30
 801d56a:	f7ff fe3f 	bl	801d1ec <icm20602_write>
 801d56e:	4603      	mov	r3, r0
 801d570:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d576:	2b00      	cmp	r3, #0
 801d578:	f040 8084 	bne.w	801d684 <icm20602_init+0x380>

	// enable FIFO if requested
	tmp = ((dev.use_accel) && (dev.accel_fifo)) ? 0x08 : 0x00;
 801d57c:	4b47      	ldr	r3, [pc, #284]	; (801d69c <icm20602_init+0x398>)
 801d57e:	781b      	ldrb	r3, [r3, #0]
 801d580:	2b00      	cmp	r3, #0
 801d582:	d005      	beq.n	801d590 <icm20602_init+0x28c>
 801d584:	4b45      	ldr	r3, [pc, #276]	; (801d69c <icm20602_init+0x398>)
 801d586:	785b      	ldrb	r3, [r3, #1]
 801d588:	2b00      	cmp	r3, #0
 801d58a:	d001      	beq.n	801d590 <icm20602_init+0x28c>
 801d58c:	2308      	movs	r3, #8
 801d58e:	e000      	b.n	801d592 <icm20602_init+0x28e>
 801d590:	2300      	movs	r3, #0
 801d592:	71bb      	strb	r3, [r7, #6]
	tmp |= ((dev.use_gyro) && (dev.gyro_fifo)) ? 0x10 : 0x00;
 801d594:	4b41      	ldr	r3, [pc, #260]	; (801d69c <icm20602_init+0x398>)
 801d596:	791b      	ldrb	r3, [r3, #4]
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d005      	beq.n	801d5a8 <icm20602_init+0x2a4>
 801d59c:	4b3f      	ldr	r3, [pc, #252]	; (801d69c <icm20602_init+0x398>)
 801d59e:	795b      	ldrb	r3, [r3, #5]
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	d001      	beq.n	801d5a8 <icm20602_init+0x2a4>
 801d5a4:	2210      	movs	r2, #16
 801d5a6:	e000      	b.n	801d5aa <icm20602_init+0x2a6>
 801d5a8:	2200      	movs	r2, #0
 801d5aa:	79bb      	ldrb	r3, [r7, #6]
 801d5ac:	b25b      	sxtb	r3, r3
 801d5ae:	4313      	orrs	r3, r2
 801d5b0:	b25b      	sxtb	r3, r3
 801d5b2:	b2db      	uxtb	r3, r3
 801d5b4:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_FIFO_EN, &tmp, 1);
 801d5b6:	1dbb      	adds	r3, r7, #6
 801d5b8:	2201      	movs	r2, #1
 801d5ba:	4619      	mov	r1, r3
 801d5bc:	2023      	movs	r0, #35	; 0x23
 801d5be:	f7ff fe15 	bl	801d1ec <icm20602_write>
 801d5c2:	4603      	mov	r3, r0
 801d5c4:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d5c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d5ca:	2b00      	cmp	r3, #0
 801d5cc:	d15c      	bne.n	801d688 <icm20602_init+0x384>

	// configure sample rate divider (TODO: is this gyro only?)
	// note: SAMPLE_RATE = INTERNAL_SAMPLE_RATE / (1 + SMPLRT_DIV)
	tmp = (0 != dev.sample_rate_div) ? dev.sample_rate_div - 1 : 1;
 801d5ce:	4b33      	ldr	r3, [pc, #204]	; (801d69c <icm20602_init+0x398>)
 801d5d0:	7a1b      	ldrb	r3, [r3, #8]
 801d5d2:	2b00      	cmp	r3, #0
 801d5d4:	d004      	beq.n	801d5e0 <icm20602_init+0x2dc>
 801d5d6:	4b31      	ldr	r3, [pc, #196]	; (801d69c <icm20602_init+0x398>)
 801d5d8:	7a1b      	ldrb	r3, [r3, #8]
 801d5da:	3b01      	subs	r3, #1
 801d5dc:	b2db      	uxtb	r3, r3
 801d5de:	e000      	b.n	801d5e2 <icm20602_init+0x2de>
 801d5e0:	2301      	movs	r3, #1
 801d5e2:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_SMPLRT_DIV, &tmp, 1);
 801d5e4:	1dbb      	adds	r3, r7, #6
 801d5e6:	2201      	movs	r2, #1
 801d5e8:	4619      	mov	r1, r3
 801d5ea:	2019      	movs	r0, #25
 801d5ec:	f7ff fdfe 	bl	801d1ec <icm20602_write>
 801d5f0:	4603      	mov	r3, r0
 801d5f2:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d5f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d5f8:	2b00      	cmp	r3, #0
 801d5fa:	d147      	bne.n	801d68c <icm20602_init+0x388>

	tmp = 0;
 801d5fc:	2300      	movs	r3, #0
 801d5fe:	71bb      	strb	r3, [r7, #6]
	tmp |= (dev.use_gyro) ? 0 : 0x07; // 0 - on, 1 - disabled
 801d600:	4b26      	ldr	r3, [pc, #152]	; (801d69c <icm20602_init+0x398>)
 801d602:	791b      	ldrb	r3, [r3, #4]
 801d604:	2b00      	cmp	r3, #0
 801d606:	d001      	beq.n	801d60c <icm20602_init+0x308>
 801d608:	2200      	movs	r2, #0
 801d60a:	e000      	b.n	801d60e <icm20602_init+0x30a>
 801d60c:	2207      	movs	r2, #7
 801d60e:	79bb      	ldrb	r3, [r7, #6]
 801d610:	b25b      	sxtb	r3, r3
 801d612:	4313      	orrs	r3, r2
 801d614:	b25b      	sxtb	r3, r3
 801d616:	b2db      	uxtb	r3, r3
 801d618:	71bb      	strb	r3, [r7, #6]
	tmp |= (dev.use_accel) ? 0 : 0x38; // 0 - on, 1 - disabled
 801d61a:	4b20      	ldr	r3, [pc, #128]	; (801d69c <icm20602_init+0x398>)
 801d61c:	781b      	ldrb	r3, [r3, #0]
 801d61e:	2b00      	cmp	r3, #0
 801d620:	d001      	beq.n	801d626 <icm20602_init+0x322>
 801d622:	2200      	movs	r2, #0
 801d624:	e000      	b.n	801d628 <icm20602_init+0x324>
 801d626:	2238      	movs	r2, #56	; 0x38
 801d628:	79bb      	ldrb	r3, [r7, #6]
 801d62a:	b25b      	sxtb	r3, r3
 801d62c:	4313      	orrs	r3, r2
 801d62e:	b25b      	sxtb	r3, r3
 801d630:	b2db      	uxtb	r3, r3
 801d632:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_PWR_MGMT_2, &tmp, 1);
 801d634:	1dbb      	adds	r3, r7, #6
 801d636:	2201      	movs	r2, #1
 801d638:	4619      	mov	r1, r3
 801d63a:	206c      	movs	r0, #108	; 0x6c
 801d63c:	f7ff fdd6 	bl	801d1ec <icm20602_write>
 801d640:	4603      	mov	r3, r0
 801d642:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d648:	2b00      	cmp	r3, #0

	return_err:
 801d64a:	e020      	b.n	801d68e <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d64c:	bf00      	nop
 801d64e:	e01e      	b.n	801d68e <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d650:	bf00      	nop
 801d652:	e01c      	b.n	801d68e <icm20602_init+0x38a>
		ON_ERROR_GOTO((0 == r), return_err);
 801d654:	bf00      	nop
 801d656:	e01a      	b.n	801d68e <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d658:	bf00      	nop
 801d65a:	e018      	b.n	801d68e <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d65c:	bf00      	nop
 801d65e:	e016      	b.n	801d68e <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d660:	bf00      	nop
 801d662:	e014      	b.n	801d68e <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d664:	bf00      	nop
 801d666:	e012      	b.n	801d68e <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d668:	bf00      	nop
 801d66a:	e010      	b.n	801d68e <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801d66c:	bf00      	nop
 801d66e:	e00e      	b.n	801d68e <icm20602_init+0x38a>
		ON_ERROR_GOTO((0 == r), return_err);
 801d670:	bf00      	nop
 801d672:	e00c      	b.n	801d68e <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801d674:	bf00      	nop
 801d676:	e00a      	b.n	801d68e <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801d678:	bf00      	nop
 801d67a:	e008      	b.n	801d68e <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801d67c:	bf00      	nop
 801d67e:	e006      	b.n	801d68e <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801d680:	bf00      	nop
 801d682:	e004      	b.n	801d68e <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d684:	bf00      	nop
 801d686:	e002      	b.n	801d68e <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d688:	bf00      	nop
 801d68a:	e000      	b.n	801d68e <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d68c:	bf00      	nop

	return r;
 801d68e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801d692:	4618      	mov	r0, r3
 801d694:	3708      	adds	r7, #8
 801d696:	46bd      	mov	sp, r7
 801d698:	bd80      	pop	{r7, pc}
 801d69a:	bf00      	nop
 801d69c:	24000438 	.word	0x24000438

0801d6a0 <icm20602_read_data_raw>:
}

int8_t icm20602_read_data_raw(int16_t * p_ax,
		int16_t * p_ay, int16_t * p_az, int16_t * p_gx, int16_t * p_gy,
		int16_t * p_gz, int16_t * p_t)
{
 801d6a0:	b580      	push	{r7, lr}
 801d6a2:	b088      	sub	sp, #32
 801d6a4:	af00      	add	r7, sp, #0
 801d6a6:	60f8      	str	r0, [r7, #12]
 801d6a8:	60b9      	str	r1, [r7, #8]
 801d6aa:	607a      	str	r2, [r7, #4]
 801d6ac:	603b      	str	r3, [r7, #0]
	uint8_t buf[14] = {0};
 801d6ae:	2300      	movs	r3, #0
 801d6b0:	613b      	str	r3, [r7, #16]
 801d6b2:	f107 0314 	add.w	r3, r7, #20
 801d6b6:	2200      	movs	r2, #0
 801d6b8:	601a      	str	r2, [r3, #0]
 801d6ba:	605a      	str	r2, [r3, #4]
 801d6bc:	811a      	strh	r2, [r3, #8]
	int8_t r = 0;
 801d6be:	2300      	movs	r3, #0
 801d6c0:	77fb      	strb	r3, [r7, #31]

	r = icm20602_read(REG_ACCEL_XOUT_H, buf, 14);
 801d6c2:	f107 0310 	add.w	r3, r7, #16
 801d6c6:	220e      	movs	r2, #14
 801d6c8:	4619      	mov	r1, r3
 801d6ca:	203b      	movs	r0, #59	; 0x3b
 801d6cc:	f7ff fdd2 	bl	801d274 <icm20602_read>
 801d6d0:	4603      	mov	r3, r0
 801d6d2:	77fb      	strb	r3, [r7, #31]
	if (0 == r) {
 801d6d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	f040 808c 	bne.w	801d7f6 <icm20602_read_data_raw+0x156>
		UINT8_TO_INT16(*p_ax, buf[0], buf[1]);
 801d6de:	7c3b      	ldrb	r3, [r7, #16]
 801d6e0:	b21a      	sxth	r2, r3
 801d6e2:	68fb      	ldr	r3, [r7, #12]
 801d6e4:	801a      	strh	r2, [r3, #0]
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d6ec:	021b      	lsls	r3, r3, #8
 801d6ee:	b21a      	sxth	r2, r3
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	801a      	strh	r2, [r3, #0]
 801d6f4:	68fb      	ldr	r3, [r7, #12]
 801d6f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d6fa:	7c7b      	ldrb	r3, [r7, #17]
 801d6fc:	b21b      	sxth	r3, r3
 801d6fe:	4313      	orrs	r3, r2
 801d700:	b21a      	sxth	r2, r3
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_ay, buf[2], buf[3]);
 801d706:	7cbb      	ldrb	r3, [r7, #18]
 801d708:	b21a      	sxth	r2, r3
 801d70a:	68bb      	ldr	r3, [r7, #8]
 801d70c:	801a      	strh	r2, [r3, #0]
 801d70e:	68bb      	ldr	r3, [r7, #8]
 801d710:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d714:	021b      	lsls	r3, r3, #8
 801d716:	b21a      	sxth	r2, r3
 801d718:	68bb      	ldr	r3, [r7, #8]
 801d71a:	801a      	strh	r2, [r3, #0]
 801d71c:	68bb      	ldr	r3, [r7, #8]
 801d71e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d722:	7cfb      	ldrb	r3, [r7, #19]
 801d724:	b21b      	sxth	r3, r3
 801d726:	4313      	orrs	r3, r2
 801d728:	b21a      	sxth	r2, r3
 801d72a:	68bb      	ldr	r3, [r7, #8]
 801d72c:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_az, buf[4], buf[5]);
 801d72e:	7d3b      	ldrb	r3, [r7, #20]
 801d730:	b21a      	sxth	r2, r3
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	801a      	strh	r2, [r3, #0]
 801d736:	687b      	ldr	r3, [r7, #4]
 801d738:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d73c:	021b      	lsls	r3, r3, #8
 801d73e:	b21a      	sxth	r2, r3
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	801a      	strh	r2, [r3, #0]
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d74a:	7d7b      	ldrb	r3, [r7, #21]
 801d74c:	b21b      	sxth	r3, r3
 801d74e:	4313      	orrs	r3, r2
 801d750:	b21a      	sxth	r2, r3
 801d752:	687b      	ldr	r3, [r7, #4]
 801d754:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_t, buf[6], buf[7]);
 801d756:	7dbb      	ldrb	r3, [r7, #22]
 801d758:	b21a      	sxth	r2, r3
 801d75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d75c:	801a      	strh	r2, [r3, #0]
 801d75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d760:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d764:	021b      	lsls	r3, r3, #8
 801d766:	b21a      	sxth	r2, r3
 801d768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d76a:	801a      	strh	r2, [r3, #0]
 801d76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d76e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d772:	7dfb      	ldrb	r3, [r7, #23]
 801d774:	b21b      	sxth	r3, r3
 801d776:	4313      	orrs	r3, r2
 801d778:	b21a      	sxth	r2, r3
 801d77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d77c:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gx, buf[8], buf[9]);
 801d77e:	7e3b      	ldrb	r3, [r7, #24]
 801d780:	b21a      	sxth	r2, r3
 801d782:	683b      	ldr	r3, [r7, #0]
 801d784:	801a      	strh	r2, [r3, #0]
 801d786:	683b      	ldr	r3, [r7, #0]
 801d788:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d78c:	021b      	lsls	r3, r3, #8
 801d78e:	b21a      	sxth	r2, r3
 801d790:	683b      	ldr	r3, [r7, #0]
 801d792:	801a      	strh	r2, [r3, #0]
 801d794:	683b      	ldr	r3, [r7, #0]
 801d796:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d79a:	7e7b      	ldrb	r3, [r7, #25]
 801d79c:	b21b      	sxth	r3, r3
 801d79e:	4313      	orrs	r3, r2
 801d7a0:	b21a      	sxth	r2, r3
 801d7a2:	683b      	ldr	r3, [r7, #0]
 801d7a4:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gy, buf[10], buf[11]);
 801d7a6:	7ebb      	ldrb	r3, [r7, #26]
 801d7a8:	b21a      	sxth	r2, r3
 801d7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7ac:	801a      	strh	r2, [r3, #0]
 801d7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d7b4:	021b      	lsls	r3, r3, #8
 801d7b6:	b21a      	sxth	r2, r3
 801d7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7ba:	801a      	strh	r2, [r3, #0]
 801d7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7be:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d7c2:	7efb      	ldrb	r3, [r7, #27]
 801d7c4:	b21b      	sxth	r3, r3
 801d7c6:	4313      	orrs	r3, r2
 801d7c8:	b21a      	sxth	r2, r3
 801d7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7cc:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gz, buf[12], buf[13]);
 801d7ce:	7f3b      	ldrb	r3, [r7, #28]
 801d7d0:	b21a      	sxth	r2, r3
 801d7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7d4:	801a      	strh	r2, [r3, #0]
 801d7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d7dc:	021b      	lsls	r3, r3, #8
 801d7de:	b21a      	sxth	r2, r3
 801d7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7e2:	801a      	strh	r2, [r3, #0]
 801d7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d7ea:	7f7b      	ldrb	r3, [r7, #29]
 801d7ec:	b21b      	sxth	r3, r3
 801d7ee:	4313      	orrs	r3, r2
 801d7f0:	b21a      	sxth	r2, r3
 801d7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7f4:	801a      	strh	r2, [r3, #0]
	}

	return r;
 801d7f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d7fa:	4618      	mov	r0, r3
 801d7fc:	3720      	adds	r7, #32
 801d7fe:	46bd      	mov	sp, r7
 801d800:	bd80      	pop	{r7, pc}
	...

0801d804 <pcm5102_Init>:
/* Private function prototypes -----------------------------------------------*/

/* Private user code ---------------------------------------------------------*/

void pcm5102_Init(void)
{
 801d804:	b580      	push	{r7, lr}
 801d806:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_FLT_GPIO_Port, DAC_FLT_Pin, GPIO_PIN_RESET); //Filterselect: Normallatency(Low) / Lowlatency(High)
 801d808:	2200      	movs	r2, #0
 801d80a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d80e:	480a      	ldr	r0, [pc, #40]	; (801d838 <pcm5102_Init+0x34>)
 801d810:	f7ec f832 	bl	8009878 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, GPIO_PIN_RESET); //De-emphasiscontrol for 44.1kHz sampling rate: Off(Low) / On(High)
 801d814:	2200      	movs	r2, #0
 801d816:	2108      	movs	r1, #8
 801d818:	4808      	ldr	r0, [pc, #32]	; (801d83c <pcm5102_Init+0x38>)
 801d81a:	f7ec f82d 	bl	8009878 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, GPIO_PIN_SET); //Soft mute control: Softmute(Low) / soft un-mute(High)
 801d81e:	2201      	movs	r2, #1
 801d820:	2104      	movs	r1, #4
 801d822:	4805      	ldr	r0, [pc, #20]	; (801d838 <pcm5102_Init+0x34>)
 801d824:	f7ec f828 	bl	8009878 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET); //Audio format selection: I2S(Low)/ Left justified(High)
 801d828:	2200      	movs	r2, #0
 801d82a:	2140      	movs	r1, #64	; 0x40
 801d82c:	4804      	ldr	r0, [pc, #16]	; (801d840 <pcm5102_Init+0x3c>)
 801d82e:	f7ec f823 	bl	8009878 <HAL_GPIO_WritePin>
}
 801d832:	bf00      	nop
 801d834:	bd80      	pop	{r7, pc}
 801d836:	bf00      	nop
 801d838:	58020800 	.word	0x58020800
 801d83c:	58021c00 	.word	0x58021c00
 801d840:	58021400 	.word	0x58021400

0801d844 <Audio_Player_Play>:

void Audio_Player_Play(uint8_t* pBuffer, uint32_t Size)
{
 801d844:	b580      	push	{r7, lr}
 801d846:	b082      	sub	sp, #8
 801d848:	af00      	add	r7, sp, #0
 801d84a:	6078      	str	r0, [r7, #4]
 801d84c:	6039      	str	r1, [r7, #0]
	if(Size > 0xFFFF) {
 801d84e:	683b      	ldr	r3, [r7, #0]
 801d850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d854:	d306      	bcc.n	801d864 <Audio_Player_Play+0x20>
		Size = 0xFFFF;
 801d856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d85a:	603b      	str	r3, [r7, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 801d85c:	2140      	movs	r1, #64	; 0x40
 801d85e:	4807      	ldr	r0, [pc, #28]	; (801d87c <Audio_Player_Play+0x38>)
 801d860:	f7ec f823 	bl	80098aa <HAL_GPIO_TogglePin>
	}
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, Size);
 801d864:	683b      	ldr	r3, [r7, #0]
 801d866:	b29b      	uxth	r3, r3
 801d868:	461a      	mov	r2, r3
 801d86a:	6879      	ldr	r1, [r7, #4]
 801d86c:	4804      	ldr	r0, [pc, #16]	; (801d880 <Audio_Player_Play+0x3c>)
 801d86e:	f7ef fd81 	bl	800d374 <HAL_SAI_Transmit_DMA>

//	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
}
 801d872:	bf00      	nop
 801d874:	3708      	adds	r7, #8
 801d876:	46bd      	mov	sp, r7
 801d878:	bd80      	pop	{r7, pc}
 801d87a:	bf00      	nop
 801d87c:	58021c00 	.word	0x58021c00
 801d880:	24007a40 	.word	0x24007a40

0801d884 <ssd1362_Reset>:
void ssd1362_writeCmd(uint8_t reg);
void ssd1362_writeData(uint8_t data);

/* Private user code ---------------------------------------------------------*/

void ssd1362_Reset(void) {
 801d884:	b580      	push	{r7, lr}
 801d886:	af00      	add	r7, sp, #0
    // Reset the OLED
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_RESET);
 801d888:	2200      	movs	r2, #0
 801d88a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d88e:	4808      	ldr	r0, [pc, #32]	; (801d8b0 <ssd1362_Reset+0x2c>)
 801d890:	f7eb fff2 	bl	8009878 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 801d894:	200a      	movs	r0, #10
 801d896:	f7e6 fb61 	bl	8003f5c <HAL_Delay>
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_SET);
 801d89a:	2201      	movs	r2, #1
 801d89c:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d8a0:	4803      	ldr	r0, [pc, #12]	; (801d8b0 <ssd1362_Reset+0x2c>)
 801d8a2:	f7eb ffe9 	bl	8009878 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 801d8a6:	200a      	movs	r0, #10
 801d8a8:	f7e6 fb58 	bl	8003f5c <HAL_Delay>
}
 801d8ac:	bf00      	nop
 801d8ae:	bd80      	pop	{r7, pc}
 801d8b0:	58020400 	.word	0x58020400

0801d8b4 <ssd1362_writeCmd>:

//Writes a command byte to the driver
void ssd1362_writeCmd(uint8_t reg)
{
 801d8b4:	b580      	push	{r7, lr}
 801d8b6:	b082      	sub	sp, #8
 801d8b8:	af00      	add	r7, sp, #0
 801d8ba:	4603      	mov	r3, r0
 801d8bc:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_REG, (uint8_t *)&reg, 1);
 801d8be:	1dfa      	adds	r2, r7, #7
 801d8c0:	2301      	movs	r3, #1
 801d8c2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 801d8c6:	4803      	ldr	r0, [pc, #12]	; (801d8d4 <ssd1362_writeCmd+0x20>)
 801d8c8:	f7f1 f942 	bl	800eb50 <HAL_SRAM_Write_8b>
}
 801d8cc:	bf00      	nop
 801d8ce:	3708      	adds	r7, #8
 801d8d0:	46bd      	mov	sp, r7
 801d8d2:	bd80      	pop	{r7, pc}
 801d8d4:	24007968 	.word	0x24007968

0801d8d8 <ssd1362_writeData>:

//Writes 1 byte to the display's memory
void ssd1362_writeData(uint8_t data)
{
 801d8d8:	b580      	push	{r7, lr}
 801d8da:	b082      	sub	sp, #8
 801d8dc:	af00      	add	r7, sp, #0
 801d8de:	4603      	mov	r3, r0
 801d8e0:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_RAM, (uint8_t *)&data, 1);
 801d8e2:	1dfa      	adds	r2, r7, #7
 801d8e4:	2301      	movs	r3, #1
 801d8e6:	4904      	ldr	r1, [pc, #16]	; (801d8f8 <ssd1362_writeData+0x20>)
 801d8e8:	4804      	ldr	r0, [pc, #16]	; (801d8fc <ssd1362_writeData+0x24>)
 801d8ea:	f7f1 f931 	bl	800eb50 <HAL_SRAM_Write_8b>
}
 801d8ee:	bf00      	nop
 801d8f0:	3708      	adds	r7, #8
 801d8f2:	46bd      	mov	sp, r7
 801d8f4:	bd80      	pop	{r7, pc}
 801d8f6:	bf00      	nop
 801d8f8:	c0000001 	.word	0xc0000001
 801d8fc:	24007968 	.word	0x24007968

0801d900 <bitWrite>:

void bitWrite(uint8_t *x, uint8_t n, uint8_t value) {
 801d900:	b480      	push	{r7}
 801d902:	b083      	sub	sp, #12
 801d904:	af00      	add	r7, sp, #0
 801d906:	6078      	str	r0, [r7, #4]
 801d908:	460b      	mov	r3, r1
 801d90a:	70fb      	strb	r3, [r7, #3]
 801d90c:	4613      	mov	r3, r2
 801d90e:	70bb      	strb	r3, [r7, #2]
   if (value)
 801d910:	78bb      	ldrb	r3, [r7, #2]
 801d912:	2b00      	cmp	r3, #0
 801d914:	d00d      	beq.n	801d932 <bitWrite+0x32>
      *x |= (1 << n);
 801d916:	687b      	ldr	r3, [r7, #4]
 801d918:	781b      	ldrb	r3, [r3, #0]
 801d91a:	b25a      	sxtb	r2, r3
 801d91c:	78fb      	ldrb	r3, [r7, #3]
 801d91e:	2101      	movs	r1, #1
 801d920:	fa01 f303 	lsl.w	r3, r1, r3
 801d924:	b25b      	sxtb	r3, r3
 801d926:	4313      	orrs	r3, r2
 801d928:	b25b      	sxtb	r3, r3
 801d92a:	b2da      	uxtb	r2, r3
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	701a      	strb	r2, [r3, #0]
   else
      *x &= ~(1 << n);
}
 801d930:	e00e      	b.n	801d950 <bitWrite+0x50>
      *x &= ~(1 << n);
 801d932:	687b      	ldr	r3, [r7, #4]
 801d934:	781b      	ldrb	r3, [r3, #0]
 801d936:	b25a      	sxtb	r2, r3
 801d938:	78fb      	ldrb	r3, [r7, #3]
 801d93a:	2101      	movs	r1, #1
 801d93c:	fa01 f303 	lsl.w	r3, r1, r3
 801d940:	b25b      	sxtb	r3, r3
 801d942:	43db      	mvns	r3, r3
 801d944:	b25b      	sxtb	r3, r3
 801d946:	4013      	ands	r3, r2
 801d948:	b25b      	sxtb	r3, r3
 801d94a:	b2da      	uxtb	r2, r3
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	701a      	strb	r2, [r3, #0]
}
 801d950:	bf00      	nop
 801d952:	370c      	adds	r7, #12
 801d954:	46bd      	mov	sp, r7
 801d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d95a:	4770      	bx	lr

0801d95c <bitRead>:

char bitRead(uint8_t *x, uint8_t n) {
 801d95c:	b480      	push	{r7}
 801d95e:	b083      	sub	sp, #12
 801d960:	af00      	add	r7, sp, #0
 801d962:	6078      	str	r0, [r7, #4]
 801d964:	460b      	mov	r3, r1
 801d966:	70fb      	strb	r3, [r7, #3]
   return (*x & (1 << n)) ? 1 : 0;
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	781b      	ldrb	r3, [r3, #0]
 801d96c:	461a      	mov	r2, r3
 801d96e:	78fb      	ldrb	r3, [r7, #3]
 801d970:	fa42 f303 	asr.w	r3, r2, r3
 801d974:	b2db      	uxtb	r3, r3
 801d976:	f003 0301 	and.w	r3, r3, #1
 801d97a:	b2db      	uxtb	r3, r3
}
 801d97c:	4618      	mov	r0, r3
 801d97e:	370c      	adds	r7, #12
 801d980:	46bd      	mov	sp, r7
 801d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d986:	4770      	bx	lr

0801d988 <ssd1362_setWriteZone>:

//defines a rectangular area of memory which the driver will itterate through. This function takes memory locations, meaning a 64x256 space
void ssd1362_setWriteZone(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 801d988:	b590      	push	{r4, r7, lr}
 801d98a:	b083      	sub	sp, #12
 801d98c:	af00      	add	r7, sp, #0
 801d98e:	4604      	mov	r4, r0
 801d990:	4608      	mov	r0, r1
 801d992:	4611      	mov	r1, r2
 801d994:	461a      	mov	r2, r3
 801d996:	4623      	mov	r3, r4
 801d998:	80fb      	strh	r3, [r7, #6]
 801d99a:	4603      	mov	r3, r0
 801d99c:	80bb      	strh	r3, [r7, #4]
 801d99e:	460b      	mov	r3, r1
 801d9a0:	807b      	strh	r3, [r7, #2]
 801d9a2:	4613      	mov	r3, r2
 801d9a4:	803b      	strh	r3, [r7, #0]
	ssd1362_writeCmd(0x15); //Set Column Address
 801d9a6:	2015      	movs	r0, #21
 801d9a8:	f7ff ff84 	bl	801d8b4 <ssd1362_writeCmd>
	ssd1362_writeCmd(x1); //Beginning. Note that you must divide the column by 2, since 1 byte in memory is 2 pixels
 801d9ac:	88fb      	ldrh	r3, [r7, #6]
 801d9ae:	b2db      	uxtb	r3, r3
 801d9b0:	4618      	mov	r0, r3
 801d9b2:	f7ff ff7f 	bl	801d8b4 <ssd1362_writeCmd>
	ssd1362_writeCmd(x2); //End
 801d9b6:	887b      	ldrh	r3, [r7, #2]
 801d9b8:	b2db      	uxtb	r3, r3
 801d9ba:	4618      	mov	r0, r3
 801d9bc:	f7ff ff7a 	bl	801d8b4 <ssd1362_writeCmd>

	ssd1362_writeCmd(0x75); //Set Row Address
 801d9c0:	2075      	movs	r0, #117	; 0x75
 801d9c2:	f7ff ff77 	bl	801d8b4 <ssd1362_writeCmd>
	ssd1362_writeCmd(y1); //Beginning
 801d9c6:	88bb      	ldrh	r3, [r7, #4]
 801d9c8:	b2db      	uxtb	r3, r3
 801d9ca:	4618      	mov	r0, r3
 801d9cc:	f7ff ff72 	bl	801d8b4 <ssd1362_writeCmd>
	ssd1362_writeCmd(y2); //End
 801d9d0:	883b      	ldrh	r3, [r7, #0]
 801d9d2:	b2db      	uxtb	r3, r3
 801d9d4:	4618      	mov	r0, r3
 801d9d6:	f7ff ff6d 	bl	801d8b4 <ssd1362_writeCmd>
}
 801d9da:	bf00      	nop
 801d9dc:	370c      	adds	r7, #12
 801d9de:	46bd      	mov	sp, r7
 801d9e0:	bd90      	pop	{r4, r7, pc}

0801d9e2 <ssd1362_coordsToAddress>:

//Converts a pixel location to a linear memory address
uint16_t ssd1362_coordsToAddress(uint16_t x, uint16_t y)
{
 801d9e2:	b480      	push	{r7}
 801d9e4:	b083      	sub	sp, #12
 801d9e6:	af00      	add	r7, sp, #0
 801d9e8:	4603      	mov	r3, r0
 801d9ea:	460a      	mov	r2, r1
 801d9ec:	80fb      	strh	r3, [r7, #6]
 801d9ee:	4613      	mov	r3, r2
 801d9f0:	80bb      	strh	r3, [r7, #4]
	return (x/2)+(y*128);
 801d9f2:	88fb      	ldrh	r3, [r7, #6]
 801d9f4:	085b      	lsrs	r3, r3, #1
 801d9f6:	b29a      	uxth	r2, r3
 801d9f8:	88bb      	ldrh	r3, [r7, #4]
 801d9fa:	01db      	lsls	r3, r3, #7
 801d9fc:	b29b      	uxth	r3, r3
 801d9fe:	4413      	add	r3, r2
 801da00:	b29b      	uxth	r3, r3
}
 801da02:	4618      	mov	r0, r3
 801da04:	370c      	adds	r7, #12
 801da06:	46bd      	mov	sp, r7
 801da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da0c:	4770      	bx	lr
	...

0801da10 <ssd1362_setPixelChanged>:

void ssd1362_setPixelChanged(uint16_t x, uint16_t y, bool changed)
{
 801da10:	b590      	push	{r4, r7, lr}
 801da12:	b085      	sub	sp, #20
 801da14:	af00      	add	r7, sp, #0
 801da16:	4603      	mov	r3, r0
 801da18:	80fb      	strh	r3, [r7, #6]
 801da1a:	460b      	mov	r3, r1
 801da1c:	80bb      	strh	r3, [r7, #4]
 801da1e:	4613      	mov	r3, r2
 801da20:	70fb      	strb	r3, [r7, #3]
	uint16_t targetByte = ssd1362_coordsToAddress(x, y)/8;
 801da22:	88ba      	ldrh	r2, [r7, #4]
 801da24:	88fb      	ldrh	r3, [r7, #6]
 801da26:	4611      	mov	r1, r2
 801da28:	4618      	mov	r0, r3
 801da2a:	f7ff ffda 	bl	801d9e2 <ssd1362_coordsToAddress>
 801da2e:	4603      	mov	r3, r0
 801da30:	08db      	lsrs	r3, r3, #3
 801da32:	81fb      	strh	r3, [r7, #14]
	bitWrite(&changedPixels[targetByte], ssd1362_coordsToAddress(x, y) % 8, changed);
 801da34:	89fb      	ldrh	r3, [r7, #14]
 801da36:	4a0b      	ldr	r2, [pc, #44]	; (801da64 <ssd1362_setPixelChanged+0x54>)
 801da38:	189c      	adds	r4, r3, r2
 801da3a:	88ba      	ldrh	r2, [r7, #4]
 801da3c:	88fb      	ldrh	r3, [r7, #6]
 801da3e:	4611      	mov	r1, r2
 801da40:	4618      	mov	r0, r3
 801da42:	f7ff ffce 	bl	801d9e2 <ssd1362_coordsToAddress>
 801da46:	4603      	mov	r3, r0
 801da48:	b2db      	uxtb	r3, r3
 801da4a:	f003 0307 	and.w	r3, r3, #7
 801da4e:	b2db      	uxtb	r3, r3
 801da50:	78fa      	ldrb	r2, [r7, #3]
 801da52:	4619      	mov	r1, r3
 801da54:	4620      	mov	r0, r4
 801da56:	f7ff ff53 	bl	801d900 <bitWrite>
}
 801da5a:	bf00      	nop
 801da5c:	3714      	adds	r7, #20
 801da5e:	46bd      	mov	sp, r7
 801da60:	bd90      	pop	{r4, r7, pc}
 801da62:	bf00      	nop
 801da64:	2400aec8 	.word	0x2400aec8

0801da68 <ssd1362_drawPixel>:

//pixel xy coordinates 0-255, color 0-15, and whether to immediately output it to the display or buffer it
void ssd1362_drawPixel(uint16_t x, uint16_t y, uint8_t color, bool display)
{
 801da68:	b590      	push	{r4, r7, lr}
 801da6a:	b085      	sub	sp, #20
 801da6c:	af00      	add	r7, sp, #0
 801da6e:	4604      	mov	r4, r0
 801da70:	4608      	mov	r0, r1
 801da72:	4611      	mov	r1, r2
 801da74:	461a      	mov	r2, r3
 801da76:	4623      	mov	r3, r4
 801da78:	80fb      	strh	r3, [r7, #6]
 801da7a:	4603      	mov	r3, r0
 801da7c:	80bb      	strh	r3, [r7, #4]
 801da7e:	460b      	mov	r3, r1
 801da80:	70fb      	strb	r3, [r7, #3]
 801da82:	4613      	mov	r3, r2
 801da84:	70bb      	strb	r3, [r7, #2]
	uint32_t address = ssd1362_coordsToAddress(x,y);
 801da86:	88ba      	ldrh	r2, [r7, #4]
 801da88:	88fb      	ldrh	r3, [r7, #6]
 801da8a:	4611      	mov	r1, r2
 801da8c:	4618      	mov	r0, r3
 801da8e:	f7ff ffa8 	bl	801d9e2 <ssd1362_coordsToAddress>
 801da92:	4603      	mov	r3, r0
 801da94:	60fb      	str	r3, [r7, #12]
	if((x%2) == 0)
 801da96:	88fb      	ldrh	r3, [r7, #6]
 801da98:	f003 0301 	and.w	r3, r3, #1
 801da9c:	b29b      	uxth	r3, r3
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	d113      	bne.n	801daca <ssd1362_drawPixel+0x62>
	{//If this is an even pixel, and therefore needs shifting to the more significant nibble
		frameBuffer[address] = (frameBuffer[address] & 0x0f) | (color<<4);
 801daa2:	4a25      	ldr	r2, [pc, #148]	; (801db38 <ssd1362_drawPixel+0xd0>)
 801daa4:	68fb      	ldr	r3, [r7, #12]
 801daa6:	4413      	add	r3, r2
 801daa8:	781b      	ldrb	r3, [r3, #0]
 801daaa:	b25b      	sxtb	r3, r3
 801daac:	f003 030f 	and.w	r3, r3, #15
 801dab0:	b25a      	sxtb	r2, r3
 801dab2:	78fb      	ldrb	r3, [r7, #3]
 801dab4:	011b      	lsls	r3, r3, #4
 801dab6:	b25b      	sxtb	r3, r3
 801dab8:	4313      	orrs	r3, r2
 801daba:	b25b      	sxtb	r3, r3
 801dabc:	b2d9      	uxtb	r1, r3
 801dabe:	4a1e      	ldr	r2, [pc, #120]	; (801db38 <ssd1362_drawPixel+0xd0>)
 801dac0:	68fb      	ldr	r3, [r7, #12]
 801dac2:	4413      	add	r3, r2
 801dac4:	460a      	mov	r2, r1
 801dac6:	701a      	strb	r2, [r3, #0]
 801dac8:	e011      	b.n	801daee <ssd1362_drawPixel+0x86>
	} else {
		frameBuffer[address] = (frameBuffer[address] & 0xf0) | (color);
 801daca:	4a1b      	ldr	r2, [pc, #108]	; (801db38 <ssd1362_drawPixel+0xd0>)
 801dacc:	68fb      	ldr	r3, [r7, #12]
 801dace:	4413      	add	r3, r2
 801dad0:	781b      	ldrb	r3, [r3, #0]
 801dad2:	b25b      	sxtb	r3, r3
 801dad4:	f023 030f 	bic.w	r3, r3, #15
 801dad8:	b25a      	sxtb	r2, r3
 801dada:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801dade:	4313      	orrs	r3, r2
 801dae0:	b25b      	sxtb	r3, r3
 801dae2:	b2d9      	uxtb	r1, r3
 801dae4:	4a14      	ldr	r2, [pc, #80]	; (801db38 <ssd1362_drawPixel+0xd0>)
 801dae6:	68fb      	ldr	r3, [r7, #12]
 801dae8:	4413      	add	r3, r2
 801daea:	460a      	mov	r2, r1
 801daec:	701a      	strb	r2, [r3, #0]
	}

	if(display)
 801daee:	78bb      	ldrb	r3, [r7, #2]
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	d017      	beq.n	801db24 <ssd1362_drawPixel+0xbc>
	{
		ssd1362_setWriteZone(x/2,y,x/2,y);
 801daf4:	88fb      	ldrh	r3, [r7, #6]
 801daf6:	085b      	lsrs	r3, r3, #1
 801daf8:	b298      	uxth	r0, r3
 801dafa:	88fb      	ldrh	r3, [r7, #6]
 801dafc:	085b      	lsrs	r3, r3, #1
 801dafe:	b29a      	uxth	r2, r3
 801db00:	88bb      	ldrh	r3, [r7, #4]
 801db02:	88b9      	ldrh	r1, [r7, #4]
 801db04:	f7ff ff40 	bl	801d988 <ssd1362_setWriteZone>
		ssd1362_writeData(frameBuffer[address]);
 801db08:	4a0b      	ldr	r2, [pc, #44]	; (801db38 <ssd1362_drawPixel+0xd0>)
 801db0a:	68fb      	ldr	r3, [r7, #12]
 801db0c:	4413      	add	r3, r2
 801db0e:	781b      	ldrb	r3, [r3, #0]
 801db10:	4618      	mov	r0, r3
 801db12:	f7ff fee1 	bl	801d8d8 <ssd1362_writeData>
		ssd1362_setPixelChanged(x, y, false); // We've now synced the display with this byte of the buffer, no need to write it again
 801db16:	88b9      	ldrh	r1, [r7, #4]
 801db18:	88fb      	ldrh	r3, [r7, #6]
 801db1a:	2200      	movs	r2, #0
 801db1c:	4618      	mov	r0, r3
 801db1e:	f7ff ff77 	bl	801da10 <ssd1362_setPixelChanged>
	} else {
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
	}
}
 801db22:	e005      	b.n	801db30 <ssd1362_drawPixel+0xc8>
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
 801db24:	88b9      	ldrh	r1, [r7, #4]
 801db26:	88fb      	ldrh	r3, [r7, #6]
 801db28:	2201      	movs	r2, #1
 801db2a:	4618      	mov	r0, r3
 801db2c:	f7ff ff70 	bl	801da10 <ssd1362_setPixelChanged>
}
 801db30:	bf00      	nop
 801db32:	3714      	adds	r7, #20
 801db34:	46bd      	mov	sp, r7
 801db36:	bd90      	pop	{r4, r7, pc}
 801db38:	2400b6c8 	.word	0x2400b6c8

0801db3c <ssd1362_drawRect>:

//Draws a rectangle from x1,y1 to x2,y2.
void ssd1362_drawRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t color, bool display)
{
 801db3c:	b590      	push	{r4, r7, lr}
 801db3e:	b087      	sub	sp, #28
 801db40:	af00      	add	r7, sp, #0
 801db42:	4604      	mov	r4, r0
 801db44:	4608      	mov	r0, r1
 801db46:	4611      	mov	r1, r2
 801db48:	461a      	mov	r2, r3
 801db4a:	4623      	mov	r3, r4
 801db4c:	80fb      	strh	r3, [r7, #6]
 801db4e:	4603      	mov	r3, r0
 801db50:	80bb      	strh	r3, [r7, #4]
 801db52:	460b      	mov	r3, r1
 801db54:	807b      	strh	r3, [r7, #2]
 801db56:	4613      	mov	r3, r2
 801db58:	803b      	strh	r3, [r7, #0]
	uint16_t xMin = MIN(x1, x2); // TODO: double performance by writing whole bytes at a time
 801db5a:	887a      	ldrh	r2, [r7, #2]
 801db5c:	88fb      	ldrh	r3, [r7, #6]
 801db5e:	4293      	cmp	r3, r2
 801db60:	bf28      	it	cs
 801db62:	4613      	movcs	r3, r2
 801db64:	827b      	strh	r3, [r7, #18]
	uint16_t xMax = MAX(x1, x2);
 801db66:	887a      	ldrh	r2, [r7, #2]
 801db68:	88fb      	ldrh	r3, [r7, #6]
 801db6a:	4293      	cmp	r3, r2
 801db6c:	bf38      	it	cc
 801db6e:	4613      	movcc	r3, r2
 801db70:	823b      	strh	r3, [r7, #16]
	uint16_t yMin = MIN(y1, y2);
 801db72:	883a      	ldrh	r2, [r7, #0]
 801db74:	88bb      	ldrh	r3, [r7, #4]
 801db76:	4293      	cmp	r3, r2
 801db78:	bf28      	it	cs
 801db7a:	4613      	movcs	r3, r2
 801db7c:	81fb      	strh	r3, [r7, #14]
	uint16_t yMax = MAX(y1, y2);
 801db7e:	883a      	ldrh	r2, [r7, #0]
 801db80:	88bb      	ldrh	r3, [r7, #4]
 801db82:	4293      	cmp	r3, r2
 801db84:	bf38      	it	cc
 801db86:	4613      	movcc	r3, r2
 801db88:	81bb      	strh	r3, [r7, #12]
	for (uint16_t x = xMin; x < xMax; x++)
 801db8a:	8a7b      	ldrh	r3, [r7, #18]
 801db8c:	82fb      	strh	r3, [r7, #22]
 801db8e:	e014      	b.n	801dbba <ssd1362_drawRect+0x7e>
	{
		for (uint16_t y = yMin; y < yMax; y++)
 801db90:	89fb      	ldrh	r3, [r7, #14]
 801db92:	82bb      	strh	r3, [r7, #20]
 801db94:	e00a      	b.n	801dbac <ssd1362_drawRect+0x70>
		{
			ssd1362_drawPixel(x, y, color, display);
 801db96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801db9a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801db9e:	8ab9      	ldrh	r1, [r7, #20]
 801dba0:	8af8      	ldrh	r0, [r7, #22]
 801dba2:	f7ff ff61 	bl	801da68 <ssd1362_drawPixel>
		for (uint16_t y = yMin; y < yMax; y++)
 801dba6:	8abb      	ldrh	r3, [r7, #20]
 801dba8:	3301      	adds	r3, #1
 801dbaa:	82bb      	strh	r3, [r7, #20]
 801dbac:	8aba      	ldrh	r2, [r7, #20]
 801dbae:	89bb      	ldrh	r3, [r7, #12]
 801dbb0:	429a      	cmp	r2, r3
 801dbb2:	d3f0      	bcc.n	801db96 <ssd1362_drawRect+0x5a>
	for (uint16_t x = xMin; x < xMax; x++)
 801dbb4:	8afb      	ldrh	r3, [r7, #22]
 801dbb6:	3301      	adds	r3, #1
 801dbb8:	82fb      	strh	r3, [r7, #22]
 801dbba:	8afa      	ldrh	r2, [r7, #22]
 801dbbc:	8a3b      	ldrh	r3, [r7, #16]
 801dbbe:	429a      	cmp	r2, r3
 801dbc0:	d3e6      	bcc.n	801db90 <ssd1362_drawRect+0x54>
		}
	}
}
 801dbc2:	bf00      	nop
 801dbc4:	bf00      	nop
 801dbc6:	371c      	adds	r7, #28
 801dbc8:	46bd      	mov	sp, r7
 801dbca:	bd90      	pop	{r4, r7, pc}

0801dbcc <ssd1362_drawHLine>:

void ssd1362_drawHLine(uint16_t x, uint16_t y, uint16_t length, uint8_t color, bool display)
	{
 801dbcc:	b590      	push	{r4, r7, lr}
 801dbce:	b085      	sub	sp, #20
 801dbd0:	af00      	add	r7, sp, #0
 801dbd2:	4604      	mov	r4, r0
 801dbd4:	4608      	mov	r0, r1
 801dbd6:	4611      	mov	r1, r2
 801dbd8:	461a      	mov	r2, r3
 801dbda:	4623      	mov	r3, r4
 801dbdc:	80fb      	strh	r3, [r7, #6]
 801dbde:	4603      	mov	r3, r0
 801dbe0:	80bb      	strh	r3, [r7, #4]
 801dbe2:	460b      	mov	r3, r1
 801dbe4:	807b      	strh	r3, [r7, #2]
 801dbe6:	4613      	mov	r3, r2
 801dbe8:	707b      	strb	r3, [r7, #1]
	for (uint32_t i = x; i < x+length; i++)
 801dbea:	88fb      	ldrh	r3, [r7, #6]
 801dbec:	60fb      	str	r3, [r7, #12]
 801dbee:	e00a      	b.n	801dc06 <ssd1362_drawHLine+0x3a>
	{
		ssd1362_drawPixel(i, y, color, display);
 801dbf0:	68fb      	ldr	r3, [r7, #12]
 801dbf2:	b298      	uxth	r0, r3
 801dbf4:	f897 3020 	ldrb.w	r3, [r7, #32]
 801dbf8:	787a      	ldrb	r2, [r7, #1]
 801dbfa:	88b9      	ldrh	r1, [r7, #4]
 801dbfc:	f7ff ff34 	bl	801da68 <ssd1362_drawPixel>
	for (uint32_t i = x; i < x+length; i++)
 801dc00:	68fb      	ldr	r3, [r7, #12]
 801dc02:	3301      	adds	r3, #1
 801dc04:	60fb      	str	r3, [r7, #12]
 801dc06:	88fa      	ldrh	r2, [r7, #6]
 801dc08:	887b      	ldrh	r3, [r7, #2]
 801dc0a:	4413      	add	r3, r2
 801dc0c:	461a      	mov	r2, r3
 801dc0e:	68fb      	ldr	r3, [r7, #12]
 801dc10:	4293      	cmp	r3, r2
 801dc12:	d3ed      	bcc.n	801dbf0 <ssd1362_drawHLine+0x24>
	}
}
 801dc14:	bf00      	nop
 801dc16:	bf00      	nop
 801dc18:	3714      	adds	r7, #20
 801dc1a:	46bd      	mov	sp, r7
 801dc1c:	bd90      	pop	{r4, r7, pc}

0801dc1e <ssd1362_drawVLine>:

void ssd1362_drawVLine(uint16_t x, uint16_t y, uint16_t length, uint8_t color, bool display)
{
 801dc1e:	b590      	push	{r4, r7, lr}
 801dc20:	b085      	sub	sp, #20
 801dc22:	af00      	add	r7, sp, #0
 801dc24:	4604      	mov	r4, r0
 801dc26:	4608      	mov	r0, r1
 801dc28:	4611      	mov	r1, r2
 801dc2a:	461a      	mov	r2, r3
 801dc2c:	4623      	mov	r3, r4
 801dc2e:	80fb      	strh	r3, [r7, #6]
 801dc30:	4603      	mov	r3, r0
 801dc32:	80bb      	strh	r3, [r7, #4]
 801dc34:	460b      	mov	r3, r1
 801dc36:	807b      	strh	r3, [r7, #2]
 801dc38:	4613      	mov	r3, r2
 801dc3a:	707b      	strb	r3, [r7, #1]
	for (uint32_t i = y; i < y+length; i++)
 801dc3c:	88bb      	ldrh	r3, [r7, #4]
 801dc3e:	60fb      	str	r3, [r7, #12]
 801dc40:	e00a      	b.n	801dc58 <ssd1362_drawVLine+0x3a>
	{
		ssd1362_drawPixel(x, i, color, display);
 801dc42:	68fb      	ldr	r3, [r7, #12]
 801dc44:	b299      	uxth	r1, r3
 801dc46:	f897 3020 	ldrb.w	r3, [r7, #32]
 801dc4a:	787a      	ldrb	r2, [r7, #1]
 801dc4c:	88f8      	ldrh	r0, [r7, #6]
 801dc4e:	f7ff ff0b 	bl	801da68 <ssd1362_drawPixel>
	for (uint32_t i = y; i < y+length; i++)
 801dc52:	68fb      	ldr	r3, [r7, #12]
 801dc54:	3301      	adds	r3, #1
 801dc56:	60fb      	str	r3, [r7, #12]
 801dc58:	88ba      	ldrh	r2, [r7, #4]
 801dc5a:	887b      	ldrh	r3, [r7, #2]
 801dc5c:	4413      	add	r3, r2
 801dc5e:	461a      	mov	r2, r3
 801dc60:	68fb      	ldr	r3, [r7, #12]
 801dc62:	4293      	cmp	r3, r2
 801dc64:	d3ed      	bcc.n	801dc42 <ssd1362_drawVLine+0x24>
	}
}
 801dc66:	bf00      	nop
 801dc68:	bf00      	nop
 801dc6a:	3714      	adds	r7, #20
 801dc6c:	46bd      	mov	sp, r7
 801dc6e:	bd90      	pop	{r4, r7, pc}

0801dc70 <ssd1362_drawByteAsRow>:
	}
}

//Draws a byte as an 8 pixel row
void ssd1362_drawByteAsRow(uint16_t x, uint16_t y, uint8_t byte, uint8_t color)
{
 801dc70:	b590      	push	{r4, r7, lr}
 801dc72:	b085      	sub	sp, #20
 801dc74:	af00      	add	r7, sp, #0
 801dc76:	4604      	mov	r4, r0
 801dc78:	4608      	mov	r0, r1
 801dc7a:	4611      	mov	r1, r2
 801dc7c:	461a      	mov	r2, r3
 801dc7e:	4623      	mov	r3, r4
 801dc80:	80fb      	strh	r3, [r7, #6]
 801dc82:	4603      	mov	r3, r0
 801dc84:	80bb      	strh	r3, [r7, #4]
 801dc86:	460b      	mov	r3, r1
 801dc88:	70fb      	strb	r3, [r7, #3]
 801dc8a:	4613      	mov	r3, r2
 801dc8c:	70bb      	strb	r3, [r7, #2]
	for (uint32_t i = 0; i < 8; i++)
 801dc8e:	2300      	movs	r3, #0
 801dc90:	60fb      	str	r3, [r7, #12]
 801dc92:	e016      	b.n	801dcc2 <ssd1362_drawByteAsRow+0x52>
	{
		if(bitRead(&byte, i))
 801dc94:	68fb      	ldr	r3, [r7, #12]
 801dc96:	b2da      	uxtb	r2, r3
 801dc98:	1cfb      	adds	r3, r7, #3
 801dc9a:	4611      	mov	r1, r2
 801dc9c:	4618      	mov	r0, r3
 801dc9e:	f7ff fe5d 	bl	801d95c <bitRead>
 801dca2:	4603      	mov	r3, r0
 801dca4:	2b00      	cmp	r3, #0
 801dca6:	d009      	beq.n	801dcbc <ssd1362_drawByteAsRow+0x4c>
	{
			ssd1362_drawPixel(x+i, y, color, false);
 801dca8:	68fb      	ldr	r3, [r7, #12]
 801dcaa:	b29a      	uxth	r2, r3
 801dcac:	88fb      	ldrh	r3, [r7, #6]
 801dcae:	4413      	add	r3, r2
 801dcb0:	b298      	uxth	r0, r3
 801dcb2:	78ba      	ldrb	r2, [r7, #2]
 801dcb4:	88b9      	ldrh	r1, [r7, #4]
 801dcb6:	2300      	movs	r3, #0
 801dcb8:	f7ff fed6 	bl	801da68 <ssd1362_drawPixel>
	for (uint32_t i = 0; i < 8; i++)
 801dcbc:	68fb      	ldr	r3, [r7, #12]
 801dcbe:	3301      	adds	r3, #1
 801dcc0:	60fb      	str	r3, [r7, #12]
 801dcc2:	68fb      	ldr	r3, [r7, #12]
 801dcc4:	2b07      	cmp	r3, #7
 801dcc6:	d9e5      	bls.n	801dc94 <ssd1362_drawByteAsRow+0x24>
		}
	}
}
 801dcc8:	bf00      	nop
 801dcca:	bf00      	nop
 801dccc:	3714      	adds	r7, #20
 801dcce:	46bd      	mov	sp, r7
 801dcd0:	bd90      	pop	{r4, r7, pc}
	...

0801dcd4 <ssd1362_drawChar>:

void ssd1362_drawChar(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801dcd4:	b590      	push	{r4, r7, lr}
 801dcd6:	b085      	sub	sp, #20
 801dcd8:	af00      	add	r7, sp, #0
 801dcda:	4604      	mov	r4, r0
 801dcdc:	4608      	mov	r0, r1
 801dcde:	4611      	mov	r1, r2
 801dce0:	461a      	mov	r2, r3
 801dce2:	4623      	mov	r3, r4
 801dce4:	80fb      	strh	r3, [r7, #6]
 801dce6:	4603      	mov	r3, r0
 801dce8:	80bb      	strh	r3, [r7, #4]
 801dcea:	460b      	mov	r3, r1
 801dcec:	70fb      	strb	r3, [r7, #3]
 801dcee:	4613      	mov	r3, r2
 801dcf0:	70bb      	strb	r3, [r7, #2]
	for (size_t i = 0; i < 8; i++)
 801dcf2:	2300      	movs	r3, #0
 801dcf4:	60fb      	str	r3, [r7, #12]
 801dcf6:	e012      	b.n	801dd1e <ssd1362_drawChar+0x4a>
	{
		ssd1362_drawByteAsRow(x, y+i, font8x8_basic[(unsigned char)thisChar][i], color);
 801dcf8:	68fb      	ldr	r3, [r7, #12]
 801dcfa:	b29a      	uxth	r2, r3
 801dcfc:	88bb      	ldrh	r3, [r7, #4]
 801dcfe:	4413      	add	r3, r2
 801dd00:	b299      	uxth	r1, r3
 801dd02:	78fb      	ldrb	r3, [r7, #3]
 801dd04:	4a0a      	ldr	r2, [pc, #40]	; (801dd30 <ssd1362_drawChar+0x5c>)
 801dd06:	00db      	lsls	r3, r3, #3
 801dd08:	441a      	add	r2, r3
 801dd0a:	68fb      	ldr	r3, [r7, #12]
 801dd0c:	4413      	add	r3, r2
 801dd0e:	781a      	ldrb	r2, [r3, #0]
 801dd10:	78bb      	ldrb	r3, [r7, #2]
 801dd12:	88f8      	ldrh	r0, [r7, #6]
 801dd14:	f7ff ffac 	bl	801dc70 <ssd1362_drawByteAsRow>
	for (size_t i = 0; i < 8; i++)
 801dd18:	68fb      	ldr	r3, [r7, #12]
 801dd1a:	3301      	adds	r3, #1
 801dd1c:	60fb      	str	r3, [r7, #12]
 801dd1e:	68fb      	ldr	r3, [r7, #12]
 801dd20:	2b07      	cmp	r3, #7
 801dd22:	d9e9      	bls.n	801dcf8 <ssd1362_drawChar+0x24>
	}
}
 801dd24:	bf00      	nop
 801dd26:	bf00      	nop
 801dd28:	3714      	adds	r7, #20
 801dd2a:	46bd      	mov	sp, r7
 801dd2c:	bd90      	pop	{r4, r7, pc}
 801dd2e:	bf00      	nop
 801dd30:	24003444 	.word	0x24003444

0801dd34 <ssd1362_drawCharArray>:

void ssd1362_drawCharArray(uint16_t x, uint16_t y, int8_t text[], uint8_t color, uint32_t size)
{
 801dd34:	b580      	push	{r7, lr}
 801dd36:	b086      	sub	sp, #24
 801dd38:	af00      	add	r7, sp, #0
 801dd3a:	60ba      	str	r2, [r7, #8]
 801dd3c:	461a      	mov	r2, r3
 801dd3e:	4603      	mov	r3, r0
 801dd40:	81fb      	strh	r3, [r7, #14]
 801dd42:	460b      	mov	r3, r1
 801dd44:	81bb      	strh	r3, [r7, #12]
 801dd46:	4613      	mov	r3, r2
 801dd48:	71fb      	strb	r3, [r7, #7]
	const int8_t* thisChar;
	uint16_t xOffset = 0;
 801dd4a:	2300      	movs	r3, #0
 801dd4c:	827b      	strh	r3, [r7, #18]
	if(size==16)
 801dd4e:	6a3b      	ldr	r3, [r7, #32]
 801dd50:	2b10      	cmp	r3, #16
 801dd52:	d11a      	bne.n	801dd8a <ssd1362_drawCharArray+0x56>
	{
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801dd54:	68bb      	ldr	r3, [r7, #8]
 801dd56:	617b      	str	r3, [r7, #20]
 801dd58:	e011      	b.n	801dd7e <ssd1362_drawCharArray+0x4a>
		{
			ssd1362_drawChar16(x+xOffset, y, *thisChar, color);
 801dd5a:	89fa      	ldrh	r2, [r7, #14]
 801dd5c:	8a7b      	ldrh	r3, [r7, #18]
 801dd5e:	4413      	add	r3, r2
 801dd60:	b298      	uxth	r0, r3
 801dd62:	697b      	ldr	r3, [r7, #20]
 801dd64:	f993 3000 	ldrsb.w	r3, [r3]
 801dd68:	b2da      	uxtb	r2, r3
 801dd6a:	79fb      	ldrb	r3, [r7, #7]
 801dd6c:	89b9      	ldrh	r1, [r7, #12]
 801dd6e:	f000 f861 	bl	801de34 <ssd1362_drawChar16>
			xOffset += 8;
 801dd72:	8a7b      	ldrh	r3, [r7, #18]
 801dd74:	3308      	adds	r3, #8
 801dd76:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801dd78:	697b      	ldr	r3, [r7, #20]
 801dd7a:	3301      	adds	r3, #1
 801dd7c:	617b      	str	r3, [r7, #20]
 801dd7e:	697b      	ldr	r3, [r7, #20]
 801dd80:	f993 3000 	ldrsb.w	r3, [r3]
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	d1e8      	bne.n	801dd5a <ssd1362_drawCharArray+0x26>
		{
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
			xOffset += 8;
		}
	}
}
 801dd88:	e037      	b.n	801ddfa <ssd1362_drawCharArray+0xc6>
	} else if(size==32)
 801dd8a:	6a3b      	ldr	r3, [r7, #32]
 801dd8c:	2b20      	cmp	r3, #32
 801dd8e:	d11a      	bne.n	801ddc6 <ssd1362_drawCharArray+0x92>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801dd90:	68bb      	ldr	r3, [r7, #8]
 801dd92:	617b      	str	r3, [r7, #20]
 801dd94:	e011      	b.n	801ddba <ssd1362_drawCharArray+0x86>
			ssd1362_drawChar32(x+xOffset, y, *thisChar, color);
 801dd96:	89fa      	ldrh	r2, [r7, #14]
 801dd98:	8a7b      	ldrh	r3, [r7, #18]
 801dd9a:	4413      	add	r3, r2
 801dd9c:	b298      	uxth	r0, r3
 801dd9e:	697b      	ldr	r3, [r7, #20]
 801dda0:	f993 3000 	ldrsb.w	r3, [r3]
 801dda4:	b2da      	uxtb	r2, r3
 801dda6:	79fb      	ldrb	r3, [r7, #7]
 801dda8:	89b9      	ldrh	r1, [r7, #12]
 801ddaa:	f000 f887 	bl	801debc <ssd1362_drawChar32>
			xOffset += 16;
 801ddae:	8a7b      	ldrh	r3, [r7, #18]
 801ddb0:	3310      	adds	r3, #16
 801ddb2:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801ddb4:	697b      	ldr	r3, [r7, #20]
 801ddb6:	3301      	adds	r3, #1
 801ddb8:	617b      	str	r3, [r7, #20]
 801ddba:	697b      	ldr	r3, [r7, #20]
 801ddbc:	f993 3000 	ldrsb.w	r3, [r3]
 801ddc0:	2b00      	cmp	r3, #0
 801ddc2:	d1e8      	bne.n	801dd96 <ssd1362_drawCharArray+0x62>
}
 801ddc4:	e019      	b.n	801ddfa <ssd1362_drawCharArray+0xc6>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801ddc6:	68bb      	ldr	r3, [r7, #8]
 801ddc8:	617b      	str	r3, [r7, #20]
 801ddca:	e011      	b.n	801ddf0 <ssd1362_drawCharArray+0xbc>
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
 801ddcc:	89fa      	ldrh	r2, [r7, #14]
 801ddce:	8a7b      	ldrh	r3, [r7, #18]
 801ddd0:	4413      	add	r3, r2
 801ddd2:	b298      	uxth	r0, r3
 801ddd4:	697b      	ldr	r3, [r7, #20]
 801ddd6:	f993 3000 	ldrsb.w	r3, [r3]
 801ddda:	b2da      	uxtb	r2, r3
 801dddc:	79fb      	ldrb	r3, [r7, #7]
 801ddde:	89b9      	ldrh	r1, [r7, #12]
 801dde0:	f7ff ff78 	bl	801dcd4 <ssd1362_drawChar>
			xOffset += 8;
 801dde4:	8a7b      	ldrh	r3, [r7, #18]
 801dde6:	3308      	adds	r3, #8
 801dde8:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801ddea:	697b      	ldr	r3, [r7, #20]
 801ddec:	3301      	adds	r3, #1
 801ddee:	617b      	str	r3, [r7, #20]
 801ddf0:	697b      	ldr	r3, [r7, #20]
 801ddf2:	f993 3000 	ldrsb.w	r3, [r3]
 801ddf6:	2b00      	cmp	r3, #0
 801ddf8:	d1e8      	bne.n	801ddcc <ssd1362_drawCharArray+0x98>
}
 801ddfa:	bf00      	nop
 801ddfc:	3718      	adds	r7, #24
 801ddfe:	46bd      	mov	sp, r7
 801de00:	bd80      	pop	{r7, pc}

0801de02 <ssd1362_drawString>:

void ssd1362_drawString(uint16_t x, uint16_t y, int8_t textString[], uint8_t color, uint32_t size)
{
 801de02:	b580      	push	{r7, lr}
 801de04:	b086      	sub	sp, #24
 801de06:	af02      	add	r7, sp, #8
 801de08:	60ba      	str	r2, [r7, #8]
 801de0a:	461a      	mov	r2, r3
 801de0c:	4603      	mov	r3, r0
 801de0e:	81fb      	strh	r3, [r7, #14]
 801de10:	460b      	mov	r3, r1
 801de12:	81bb      	strh	r3, [r7, #12]
 801de14:	4613      	mov	r3, r2
 801de16:	71fb      	strb	r3, [r7, #7]
//	uint8_t text[64];
//	textString.toCharArray(text, 64);
	ssd1362_drawCharArray(x,y, textString, color, size);
 801de18:	79fa      	ldrb	r2, [r7, #7]
 801de1a:	89b9      	ldrh	r1, [r7, #12]
 801de1c:	89f8      	ldrh	r0, [r7, #14]
 801de1e:	69bb      	ldr	r3, [r7, #24]
 801de20:	9300      	str	r3, [sp, #0]
 801de22:	4613      	mov	r3, r2
 801de24:	68ba      	ldr	r2, [r7, #8]
 801de26:	f7ff ff85 	bl	801dd34 <ssd1362_drawCharArray>
}
 801de2a:	bf00      	nop
 801de2c:	3710      	adds	r7, #16
 801de2e:	46bd      	mov	sp, r7
 801de30:	bd80      	pop	{r7, pc}
	...

0801de34 <ssd1362_drawChar16>:

void ssd1362_drawChar16(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801de34:	b590      	push	{r4, r7, lr}
 801de36:	b085      	sub	sp, #20
 801de38:	af00      	add	r7, sp, #0
 801de3a:	4604      	mov	r4, r0
 801de3c:	4608      	mov	r0, r1
 801de3e:	4611      	mov	r1, r2
 801de40:	461a      	mov	r2, r3
 801de42:	4623      	mov	r3, r4
 801de44:	80fb      	strh	r3, [r7, #6]
 801de46:	4603      	mov	r3, r0
 801de48:	80bb      	strh	r3, [r7, #4]
 801de4a:	460b      	mov	r3, r1
 801de4c:	70fb      	strb	r3, [r7, #3]
 801de4e:	4613      	mov	r3, r2
 801de50:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 16; row++) {
 801de52:	2300      	movs	r3, #0
 801de54:	60fb      	str	r3, [r7, #12]
 801de56:	e027      	b.n	801dea8 <ssd1362_drawChar16+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x16[(unsigned char)thisChar][row*2], color);
 801de58:	68fb      	ldr	r3, [r7, #12]
 801de5a:	b29a      	uxth	r2, r3
 801de5c:	88bb      	ldrh	r3, [r7, #4]
 801de5e:	4413      	add	r3, r2
 801de60:	b299      	uxth	r1, r3
 801de62:	78fa      	ldrb	r2, [r7, #3]
 801de64:	68fb      	ldr	r3, [r7, #12]
 801de66:	005b      	lsls	r3, r3, #1
 801de68:	4813      	ldr	r0, [pc, #76]	; (801deb8 <ssd1362_drawChar16+0x84>)
 801de6a:	0152      	lsls	r2, r2, #5
 801de6c:	4402      	add	r2, r0
 801de6e:	4413      	add	r3, r2
 801de70:	781a      	ldrb	r2, [r3, #0]
 801de72:	78bb      	ldrb	r3, [r7, #2]
 801de74:	88f8      	ldrh	r0, [r7, #6]
 801de76:	f7ff fefb 	bl	801dc70 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x16[(unsigned char)thisChar][(row*2)+1], color);
 801de7a:	88fb      	ldrh	r3, [r7, #6]
 801de7c:	3308      	adds	r3, #8
 801de7e:	b298      	uxth	r0, r3
 801de80:	68fb      	ldr	r3, [r7, #12]
 801de82:	b29a      	uxth	r2, r3
 801de84:	88bb      	ldrh	r3, [r7, #4]
 801de86:	4413      	add	r3, r2
 801de88:	b299      	uxth	r1, r3
 801de8a:	78fa      	ldrb	r2, [r7, #3]
 801de8c:	68fb      	ldr	r3, [r7, #12]
 801de8e:	005b      	lsls	r3, r3, #1
 801de90:	3301      	adds	r3, #1
 801de92:	4c09      	ldr	r4, [pc, #36]	; (801deb8 <ssd1362_drawChar16+0x84>)
 801de94:	0152      	lsls	r2, r2, #5
 801de96:	4422      	add	r2, r4
 801de98:	4413      	add	r3, r2
 801de9a:	781a      	ldrb	r2, [r3, #0]
 801de9c:	78bb      	ldrb	r3, [r7, #2]
 801de9e:	f7ff fee7 	bl	801dc70 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 16; row++) {
 801dea2:	68fb      	ldr	r3, [r7, #12]
 801dea4:	3301      	adds	r3, #1
 801dea6:	60fb      	str	r3, [r7, #12]
 801dea8:	68fb      	ldr	r3, [r7, #12]
 801deaa:	2b0f      	cmp	r3, #15
 801deac:	d9d4      	bls.n	801de58 <ssd1362_drawChar16+0x24>
	}
}
 801deae:	bf00      	nop
 801deb0:	bf00      	nop
 801deb2:	3714      	adds	r7, #20
 801deb4:	46bd      	mov	sp, r7
 801deb6:	bd90      	pop	{r4, r7, pc}
 801deb8:	24000444 	.word	0x24000444

0801debc <ssd1362_drawChar32>:

void ssd1362_drawChar32(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801debc:	b590      	push	{r4, r7, lr}
 801debe:	b085      	sub	sp, #20
 801dec0:	af00      	add	r7, sp, #0
 801dec2:	4604      	mov	r4, r0
 801dec4:	4608      	mov	r0, r1
 801dec6:	4611      	mov	r1, r2
 801dec8:	461a      	mov	r2, r3
 801deca:	4623      	mov	r3, r4
 801decc:	80fb      	strh	r3, [r7, #6]
 801dece:	4603      	mov	r3, r0
 801ded0:	80bb      	strh	r3, [r7, #4]
 801ded2:	460b      	mov	r3, r1
 801ded4:	70fb      	strb	r3, [r7, #3]
 801ded6:	4613      	mov	r3, r2
 801ded8:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 32; row++) {
 801deda:	2300      	movs	r3, #0
 801dedc:	60fb      	str	r3, [r7, #12]
 801dede:	e027      	b.n	801df30 <ssd1362_drawChar32+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x32[(unsigned char)thisChar][row*2], color);
 801dee0:	68fb      	ldr	r3, [r7, #12]
 801dee2:	b29a      	uxth	r2, r3
 801dee4:	88bb      	ldrh	r3, [r7, #4]
 801dee6:	4413      	add	r3, r2
 801dee8:	b299      	uxth	r1, r3
 801deea:	78fa      	ldrb	r2, [r7, #3]
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	005b      	lsls	r3, r3, #1
 801def0:	4813      	ldr	r0, [pc, #76]	; (801df40 <ssd1362_drawChar32+0x84>)
 801def2:	0192      	lsls	r2, r2, #6
 801def4:	4402      	add	r2, r0
 801def6:	4413      	add	r3, r2
 801def8:	781a      	ldrb	r2, [r3, #0]
 801defa:	78bb      	ldrb	r3, [r7, #2]
 801defc:	88f8      	ldrh	r0, [r7, #6]
 801defe:	f7ff feb7 	bl	801dc70 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x32[(unsigned char)thisChar][(row*2)+1], color);
 801df02:	88fb      	ldrh	r3, [r7, #6]
 801df04:	3308      	adds	r3, #8
 801df06:	b298      	uxth	r0, r3
 801df08:	68fb      	ldr	r3, [r7, #12]
 801df0a:	b29a      	uxth	r2, r3
 801df0c:	88bb      	ldrh	r3, [r7, #4]
 801df0e:	4413      	add	r3, r2
 801df10:	b299      	uxth	r1, r3
 801df12:	78fa      	ldrb	r2, [r7, #3]
 801df14:	68fb      	ldr	r3, [r7, #12]
 801df16:	005b      	lsls	r3, r3, #1
 801df18:	3301      	adds	r3, #1
 801df1a:	4c09      	ldr	r4, [pc, #36]	; (801df40 <ssd1362_drawChar32+0x84>)
 801df1c:	0192      	lsls	r2, r2, #6
 801df1e:	4422      	add	r2, r4
 801df20:	4413      	add	r3, r2
 801df22:	781a      	ldrb	r2, [r3, #0]
 801df24:	78bb      	ldrb	r3, [r7, #2]
 801df26:	f7ff fea3 	bl	801dc70 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 32; row++) {
 801df2a:	68fb      	ldr	r3, [r7, #12]
 801df2c:	3301      	adds	r3, #1
 801df2e:	60fb      	str	r3, [r7, #12]
 801df30:	68fb      	ldr	r3, [r7, #12]
 801df32:	2b1f      	cmp	r3, #31
 801df34:	d9d4      	bls.n	801dee0 <ssd1362_drawChar32+0x24>
	}
}
 801df36:	bf00      	nop
 801df38:	bf00      	nop
 801df3a:	3714      	adds	r7, #20
 801df3c:	46bd      	mov	sp, r7
 801df3e:	bd90      	pop	{r4, r7, pc}
 801df40:	24001444 	.word	0x24001444

0801df44 <ssd1362_clearBuffer>:
	HAL_Delay(15);
	ssd1362_stopScrolling();
}

void ssd1362_clearBuffer()
{
 801df44:	b580      	push	{r7, lr}
 801df46:	b082      	sub	sp, #8
 801df48:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801df4a:	2300      	movs	r3, #0
 801df4c:	607b      	str	r3, [r7, #4]
 801df4e:	e01a      	b.n	801df86 <ssd1362_clearBuffer+0x42>
	{
		// If there is a non-zero (non-black) byte here, make sure it gets updated
		if (frameBuffer[i])
 801df50:	4a11      	ldr	r2, [pc, #68]	; (801df98 <ssd1362_clearBuffer+0x54>)
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	4413      	add	r3, r2
 801df56:	781b      	ldrb	r3, [r3, #0]
 801df58:	2b00      	cmp	r3, #0
 801df5a:	d011      	beq.n	801df80 <ssd1362_clearBuffer+0x3c>
		{
			frameBuffer[i] = 0;
 801df5c:	4a0e      	ldr	r2, [pc, #56]	; (801df98 <ssd1362_clearBuffer+0x54>)
 801df5e:	687b      	ldr	r3, [r7, #4]
 801df60:	4413      	add	r3, r2
 801df62:	2200      	movs	r2, #0
 801df64:	701a      	strb	r2, [r3, #0]
			bitWrite(&changedPixels[i/8], i%8, 1); // Mark this pixel as needing an update
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	08db      	lsrs	r3, r3, #3
 801df6a:	4a0c      	ldr	r2, [pc, #48]	; (801df9c <ssd1362_clearBuffer+0x58>)
 801df6c:	1898      	adds	r0, r3, r2
 801df6e:	687b      	ldr	r3, [r7, #4]
 801df70:	b2db      	uxtb	r3, r3
 801df72:	f003 0307 	and.w	r3, r3, #7
 801df76:	b2db      	uxtb	r3, r3
 801df78:	2201      	movs	r2, #1
 801df7a:	4619      	mov	r1, r3
 801df7c:	f7ff fcc0 	bl	801d900 <bitWrite>
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	3301      	adds	r3, #1
 801df84:	607b      	str	r3, [r7, #4]
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801df8c:	d3e0      	bcc.n	801df50 <ssd1362_clearBuffer+0xc>
		}
	}
}
 801df8e:	bf00      	nop
 801df90:	bf00      	nop
 801df92:	3708      	adds	r7, #8
 801df94:	46bd      	mov	sp, r7
 801df96:	bd80      	pop	{r7, pc}
 801df98:	2400b6c8 	.word	0x2400b6c8
 801df9c:	2400aec8 	.word	0x2400aec8

0801dfa0 <ssd1362_writeFullBuffer>:

//Outputs the full framebuffer to the display
void ssd1362_writeFullBuffer()
{
 801dfa0:	b580      	push	{r7, lr}
 801dfa2:	b082      	sub	sp, #8
 801dfa4:	af00      	add	r7, sp, #0
	ssd1362_setWriteZone(0, 0, (SSD1362_WIDTH / 2) - 1, SSD1362_HEIGHT - 1); //Full display
 801dfa6:	233f      	movs	r3, #63	; 0x3f
 801dfa8:	227f      	movs	r2, #127	; 0x7f
 801dfaa:	2100      	movs	r1, #0
 801dfac:	2000      	movs	r0, #0
 801dfae:	f7ff fceb 	bl	801d988 <ssd1362_setWriteZone>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801dfb2:	2300      	movs	r3, #0
 801dfb4:	607b      	str	r3, [r7, #4]
 801dfb6:	e009      	b.n	801dfcc <ssd1362_writeFullBuffer+0x2c>
	{
		ssd1362_writeData(frameBuffer[i]);
 801dfb8:	4a10      	ldr	r2, [pc, #64]	; (801dffc <ssd1362_writeFullBuffer+0x5c>)
 801dfba:	687b      	ldr	r3, [r7, #4]
 801dfbc:	4413      	add	r3, r2
 801dfbe:	781b      	ldrb	r3, [r3, #0]
 801dfc0:	4618      	mov	r0, r3
 801dfc2:	f7ff fc89 	bl	801d8d8 <ssd1362_writeData>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801dfc6:	687b      	ldr	r3, [r7, #4]
 801dfc8:	3301      	adds	r3, #1
 801dfca:	607b      	str	r3, [r7, #4]
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801dfd2:	d3f1      	bcc.n	801dfb8 <ssd1362_writeFullBuffer+0x18>
	}
	for (uint32_t i = 0; i < 1024; i++)
 801dfd4:	2300      	movs	r3, #0
 801dfd6:	603b      	str	r3, [r7, #0]
 801dfd8:	e007      	b.n	801dfea <ssd1362_writeFullBuffer+0x4a>
	{
		changedPixels[i] = 0; // Set all pixels as up to date.
 801dfda:	4a09      	ldr	r2, [pc, #36]	; (801e000 <ssd1362_writeFullBuffer+0x60>)
 801dfdc:	683b      	ldr	r3, [r7, #0]
 801dfde:	4413      	add	r3, r2
 801dfe0:	2200      	movs	r2, #0
 801dfe2:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 1024; i++)
 801dfe4:	683b      	ldr	r3, [r7, #0]
 801dfe6:	3301      	adds	r3, #1
 801dfe8:	603b      	str	r3, [r7, #0]
 801dfea:	683b      	ldr	r3, [r7, #0]
 801dfec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dff0:	d3f3      	bcc.n	801dfda <ssd1362_writeFullBuffer+0x3a>
	}
}
 801dff2:	bf00      	nop
 801dff4:	bf00      	nop
 801dff6:	3708      	adds	r7, #8
 801dff8:	46bd      	mov	sp, r7
 801dffa:	bd80      	pop	{r7, pc}
 801dffc:	2400b6c8 	.word	0x2400b6c8
 801e000:	2400aec8 	.word	0x2400aec8

0801e004 <ssd1362_init>:
	ssd1362_writeCmd(contrast);  //Contrast byte
}

//Sends all the boilerplate startup and config commands to the driver
void ssd1362_init()
{
 801e004:	b580      	push	{r7, lr}
 801e006:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1362_Reset();
 801e008:	f7ff fc3c 	bl	801d884 <ssd1362_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 801e00c:	2064      	movs	r0, #100	; 0x64
 801e00e:	f7e5 ffa5 	bl	8003f5c <HAL_Delay>

    // Init OLED
    ssd1362_writeCmd(0XFD); //Set Command Lock
 801e012:	20fd      	movs	r0, #253	; 0xfd
 801e014:	f7ff fc4e 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X12); //(12H=Unlock,16H=Lock)
 801e018:	2012      	movs	r0, #18
 801e01a:	f7ff fc4b 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAE); //Display OFF(Sleep Mode)
 801e01e:	20ae      	movs	r0, #174	; 0xae
 801e020:	f7ff fc48 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X15); //Set column Address
 801e024:	2015      	movs	r0, #21
 801e026:	f7ff fc45 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start column Address
 801e02a:	2000      	movs	r0, #0
 801e02c:	f7ff fc42 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X7F); //End column Address
 801e030:	207f      	movs	r0, #127	; 0x7f
 801e032:	f7ff fc3f 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X75); //Set Row Address
 801e036:	2075      	movs	r0, #117	; 0x75
 801e038:	f7ff fc3c 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start Row Address
 801e03c:	2000      	movs	r0, #0
 801e03e:	f7ff fc39 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F); //End Row Address
 801e042:	203f      	movs	r0, #63	; 0x3f
 801e044:	f7ff fc36 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X81); //Set contrast
 801e048:	2081      	movs	r0, #129	; 0x81
 801e04a:	f7ff fc33 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0x2f);
 801e04e:	202f      	movs	r0, #47	; 0x2f
 801e050:	f7ff fc30 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA0); //Set Remap
 801e054:	20a0      	movs	r0, #160	; 0xa0
 801e056:	f7ff fc2d 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XC3);
 801e05a:	20c3      	movs	r0, #195	; 0xc3
 801e05c:	f7ff fc2a 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA1); //Set Display Start Line
 801e060:	20a1      	movs	r0, #161	; 0xa1
 801e062:	f7ff fc27 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 801e066:	2000      	movs	r0, #0
 801e068:	f7ff fc24 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA2); //Set Display Offset
 801e06c:	20a2      	movs	r0, #162	; 0xa2
 801e06e:	f7ff fc21 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 801e072:	2000      	movs	r0, #0
 801e074:	f7ff fc1e 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA4); //Normal Display
 801e078:	20a4      	movs	r0, #164	; 0xa4
 801e07a:	f7ff fc1b 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA8); //Set Multiplex Ratio
 801e07e:	20a8      	movs	r0, #168	; 0xa8
 801e080:	f7ff fc18 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F);
 801e084:	203f      	movs	r0, #63	; 0x3f
 801e086:	f7ff fc15 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAB); //Set VDD regulator
 801e08a:	20ab      	movs	r0, #171	; 0xab
 801e08c:	f7ff fc12 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01); //Regulator Enable
 801e090:	2001      	movs	r0, #1
 801e092:	f7ff fc0f 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAD); //External /Internal IREF Selection
 801e096:	20ad      	movs	r0, #173	; 0xad
 801e098:	f7ff fc0c 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X8E);
 801e09c:	208e      	movs	r0, #142	; 0x8e
 801e09e:	f7ff fc09 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB1); //Set Phase Length
 801e0a2:	20b1      	movs	r0, #177	; 0xb1
 801e0a4:	f7ff fc06 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X22);
 801e0a8:	2022      	movs	r0, #34	; 0x22
 801e0aa:	f7ff fc03 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB3); //Display clock Divider
 801e0ae:	20b3      	movs	r0, #179	; 0xb3
 801e0b0:	f7ff fc00 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XA0);
 801e0b4:	20a0      	movs	r0, #160	; 0xa0
 801e0b6:	f7ff fbfd 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB6); //Set Second pre-charge Period
 801e0ba:	20b6      	movs	r0, #182	; 0xb6
 801e0bc:	f7ff fbfa 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X04);
 801e0c0:	2004      	movs	r0, #4
 801e0c2:	f7ff fbf7 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB9); //Set Linear LUT
 801e0c6:	20b9      	movs	r0, #185	; 0xb9
 801e0c8:	f7ff fbf4 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBc); //Set pre-charge voltage level
 801e0cc:	20bc      	movs	r0, #188	; 0xbc
 801e0ce:	f7ff fbf1 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X10); //0.5*Vcc
 801e0d2:	2010      	movs	r0, #16
 801e0d4:	f7ff fbee 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBD); //Pre-charge voltage capacitor Selection
 801e0d8:	20bd      	movs	r0, #189	; 0xbd
 801e0da:	f7ff fbeb 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01);
 801e0de:	2001      	movs	r0, #1
 801e0e0:	f7ff fbe8 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBE); //Set COM deselect voltage level
 801e0e4:	20be      	movs	r0, #190	; 0xbe
 801e0e6:	f7ff fbe5 	bl	801d8b4 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X07); //0.82*Vcc
 801e0ea:	2007      	movs	r0, #7
 801e0ec:	f7ff fbe2 	bl	801d8b4 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAF); //Display ON
 801e0f0:	20af      	movs	r0, #175	; 0xaf
 801e0f2:	f7ff fbdf 	bl	801d8b4 <ssd1362_writeCmd>
}
 801e0f6:	bf00      	nop
 801e0f8:	bd80      	pop	{r7, pc}
	...

0801e0fc <D16_GENERIC>:
 801e0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e100:	b089      	sub	sp, #36	; 0x24
 801e102:	6993      	ldr	r3, [r2, #24]
 801e104:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 801e106:	9103      	str	r1, [sp, #12]
 801e108:	9307      	str	r3, [sp, #28]
 801e10a:	69d3      	ldr	r3, [r2, #28]
 801e10c:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 801e110:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 801e114:	9106      	str	r1, [sp, #24]
 801e116:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 801e11a:	2d00      	cmp	r5, #0
 801e11c:	d063      	beq.n	801e1e6 <D16_GENERIC+0xea>
 801e11e:	f001 0520 	and.w	r5, r1, #32
 801e122:	f001 0110 	and.w	r1, r1, #16
 801e126:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 801e208 <D16_GENERIC+0x10c>
 801e12a:	46c1      	mov	r9, r8
 801e12c:	9104      	str	r1, [sp, #16]
 801e12e:	2100      	movs	r1, #0
 801e130:	9505      	str	r5, [sp, #20]
 801e132:	e04d      	b.n	801e1d0 <D16_GENERIC+0xd4>
 801e134:	5d87      	ldrb	r7, [r0, r6]
 801e136:	7805      	ldrb	r5, [r0, #0]
 801e138:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 801e13c:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 801e140:	b2fe      	uxtb	r6, r7
 801e142:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e146:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 801e14a:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 801e14e:	441d      	add	r5, r3
 801e150:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 801e154:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801e158:	f3c3 0609 	ubfx	r6, r3, #0, #10
 801e15c:	0a9b      	lsrs	r3, r3, #10
 801e15e:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 801e162:	4d27      	ldr	r5, [pc, #156]	; (801e200 <D16_GENERIC+0x104>)
 801e164:	fb26 c505 	smlad	r5, r6, r5, ip
 801e168:	4f26      	ldr	r7, [pc, #152]	; (801e204 <D16_GENERIC+0x108>)
 801e16a:	fb26 fc07 	smuad	ip, r6, r7
 801e16e:	9e04      	ldr	r6, [sp, #16]
 801e170:	f101 0801 	add.w	r8, r1, #1
 801e174:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 801e178:	b1ae      	cbz	r6, 801e1a6 <D16_GENERIC+0xaa>
 801e17a:	442c      	add	r4, r5
 801e17c:	f8d2 b020 	ldr.w	fp, [r2, #32]
 801e180:	eba4 040a 	sub.w	r4, r4, sl
 801e184:	46aa      	mov	sl, r5
 801e186:	17e7      	asrs	r7, r4, #31
 801e188:	fba4 450b 	umull	r4, r5, r4, fp
 801e18c:	e9cd 4500 	strd	r4, r5, [sp]
 801e190:	fb0b 5407 	mla	r4, fp, r7, r5
 801e194:	9401      	str	r4, [sp, #4]
 801e196:	e9dd 4500 	ldrd	r4, r5, [sp]
 801e19a:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 801e19e:	f145 0500 	adc.w	r5, r5, #0
 801e1a2:	006c      	lsls	r4, r5, #1
 801e1a4:	4625      	mov	r5, r4
 801e1a6:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 801e1aa:	042d      	lsls	r5, r5, #16
 801e1ac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801e1b0:	2700      	movs	r7, #0
 801e1b2:	fb01 fb0b 	mul.w	fp, r1, fp
 801e1b6:	fa1f f188 	uxth.w	r1, r8
 801e1ba:	fbc9 6705 	smlal	r6, r7, r9, r5
 801e1be:	9e03      	ldr	r6, [sp, #12]
 801e1c0:	10bd      	asrs	r5, r7, #2
 801e1c2:	f305 050f 	ssat	r5, #16, r5
 801e1c6:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 801e1ca:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 801e1cc:	428d      	cmp	r5, r1
 801e1ce:	d90a      	bls.n	801e1e6 <D16_GENERIC+0xea>
 801e1d0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 801e1d2:	2d01      	cmp	r5, #1
 801e1d4:	b2ee      	uxtb	r6, r5
 801e1d6:	d1ad      	bne.n	801e134 <D16_GENERIC+0x38>
 801e1d8:	9d05      	ldr	r5, [sp, #20]
 801e1da:	f850 7b02 	ldr.w	r7, [r0], #2
 801e1de:	2d00      	cmp	r5, #0
 801e1e0:	d0ae      	beq.n	801e140 <D16_GENERIC+0x44>
 801e1e2:	ba7f      	rev16	r7, r7
 801e1e4:	e7ac      	b.n	801e140 <D16_GENERIC+0x44>
 801e1e6:	2000      	movs	r0, #0
 801e1e8:	9906      	ldr	r1, [sp, #24]
 801e1ea:	61d3      	str	r3, [r2, #28]
 801e1ec:	9b07      	ldr	r3, [sp, #28]
 801e1ee:	f8c2 c008 	str.w	ip, [r2, #8]
 801e1f2:	60d1      	str	r1, [r2, #12]
 801e1f4:	6193      	str	r3, [r2, #24]
 801e1f6:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 801e1fa:	b009      	add	sp, #36	; 0x24
 801e1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e200:	00030001 	.word	0x00030001
 801e204:	00010003 	.word	0x00010003
 801e208:	24000000 	.word	0x24000000

0801e20c <D24_GENERIC>:
 801e20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e210:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 801e214:	b089      	sub	sp, #36	; 0x24
 801e216:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 801e218:	9303      	str	r3, [sp, #12]
 801e21a:	6993      	ldr	r3, [r2, #24]
 801e21c:	9104      	str	r1, [sp, #16]
 801e21e:	9307      	str	r3, [sp, #28]
 801e220:	69d1      	ldr	r1, [r2, #28]
 801e222:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 801e226:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 801e22a:	2e00      	cmp	r6, #0
 801e22c:	f000 8088 	beq.w	801e340 <D24_GENERIC+0x134>
 801e230:	f005 0620 	and.w	r6, r5, #32
 801e234:	f005 0510 	and.w	r5, r5, #16
 801e238:	f04f 0c00 	mov.w	ip, #0
 801e23c:	f8df e140 	ldr.w	lr, [pc, #320]	; 801e380 <D24_GENERIC+0x174>
 801e240:	9606      	str	r6, [sp, #24]
 801e242:	9505      	str	r5, [sp, #20]
 801e244:	e064      	b.n	801e310 <D24_GENERIC+0x104>
 801e246:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 801e24a:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801e24e:	f810 b007 	ldrb.w	fp, [r0, r7]
 801e252:	042d      	lsls	r5, r5, #16
 801e254:	19f0      	adds	r0, r6, r7
 801e256:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 801e25a:	44a9      	add	r9, r5
 801e25c:	fa5f f689 	uxtb.w	r6, r9
 801e260:	f3c9 2707 	ubfx	r7, r9, #8, #8
 801e264:	ea4f 4919 	mov.w	r9, r9, lsr #16
 801e268:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 801e26c:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 801e270:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 801e274:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 801e278:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 801e27c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801e280:	f3c7 0509 	ubfx	r5, r7, #0, #10
 801e284:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 801e288:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 801e28c:	4d3a      	ldr	r5, [pc, #232]	; (801e378 <D24_GENERIC+0x16c>)
 801e28e:	fb26 8705 	smlad	r7, r6, r5, r8
 801e292:	4d3a      	ldr	r5, [pc, #232]	; (801e37c <D24_GENERIC+0x170>)
 801e294:	fb26 3805 	smlad	r8, r6, r5, r3
 801e298:	f3c1 0309 	ubfx	r3, r1, #0, #10
 801e29c:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 801e2a0:	2301      	movs	r3, #1
 801e2a2:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 801e2a6:	fb26 f603 	smuad	r6, r6, r3
 801e2aa:	eb0c 0903 	add.w	r9, ip, r3
 801e2ae:	eb0b 0306 	add.w	r3, fp, r6
 801e2b2:	9e05      	ldr	r6, [sp, #20]
 801e2b4:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 801e2b8:	b1ae      	cbz	r6, 801e2e6 <D24_GENERIC+0xda>
 801e2ba:	442c      	add	r4, r5
 801e2bc:	9e03      	ldr	r6, [sp, #12]
 801e2be:	f8d2 b020 	ldr.w	fp, [r2, #32]
 801e2c2:	1ba4      	subs	r4, r4, r6
 801e2c4:	9503      	str	r5, [sp, #12]
 801e2c6:	17e7      	asrs	r7, r4, #31
 801e2c8:	fba4 450b 	umull	r4, r5, r4, fp
 801e2cc:	e9cd 4500 	strd	r4, r5, [sp]
 801e2d0:	fb0b 5407 	mla	r4, fp, r7, r5
 801e2d4:	9401      	str	r4, [sp, #4]
 801e2d6:	e9dd 4500 	ldrd	r4, r5, [sp]
 801e2da:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 801e2de:	f145 0500 	adc.w	r5, r5, #0
 801e2e2:	006c      	lsls	r4, r5, #1
 801e2e4:	4625      	mov	r5, r4
 801e2e6:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 801e2ea:	03ad      	lsls	r5, r5, #14
 801e2ec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801e2f0:	2700      	movs	r7, #0
 801e2f2:	fb0c fb0b 	mul.w	fp, ip, fp
 801e2f6:	fa1f fc89 	uxth.w	ip, r9
 801e2fa:	fbca 6705 	smlal	r6, r7, sl, r5
 801e2fe:	9e04      	ldr	r6, [sp, #16]
 801e300:	10bd      	asrs	r5, r7, #2
 801e302:	f305 050f 	ssat	r5, #16, r5
 801e306:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 801e30a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 801e30c:	4565      	cmp	r5, ip
 801e30e:	d917      	bls.n	801e340 <D24_GENERIC+0x134>
 801e310:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 801e312:	f890 9000 	ldrb.w	r9, [r0]
 801e316:	b2ef      	uxtb	r7, r5
 801e318:	2d01      	cmp	r5, #1
 801e31a:	b23e      	sxth	r6, r7
 801e31c:	d193      	bne.n	801e246 <D24_GENERIC+0x3a>
 801e31e:	9d06      	ldr	r5, [sp, #24]
 801e320:	b1dd      	cbz	r5, 801e35a <D24_GENERIC+0x14e>
 801e322:	78c7      	ldrb	r7, [r0, #3]
 801e324:	ea4f 2609 	mov.w	r6, r9, lsl #8
 801e328:	f01c 0f01 	tst.w	ip, #1
 801e32c:	ea4f 2507 	mov.w	r5, r7, lsl #8
 801e330:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 801e334:	d11a      	bne.n	801e36c <D24_GENERIC+0x160>
 801e336:	f890 9001 	ldrb.w	r9, [r0, #1]
 801e33a:	3002      	adds	r0, #2
 801e33c:	44b1      	add	r9, r6
 801e33e:	e78d      	b.n	801e25c <D24_GENERIC+0x50>
 801e340:	6093      	str	r3, [r2, #8]
 801e342:	2000      	movs	r0, #0
 801e344:	9b03      	ldr	r3, [sp, #12]
 801e346:	f8c2 800c 	str.w	r8, [r2, #12]
 801e34a:	6153      	str	r3, [r2, #20]
 801e34c:	9b07      	ldr	r3, [sp, #28]
 801e34e:	61d1      	str	r1, [r2, #28]
 801e350:	6114      	str	r4, [r2, #16]
 801e352:	6193      	str	r3, [r2, #24]
 801e354:	b009      	add	sp, #36	; 0x24
 801e356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e35a:	7845      	ldrb	r5, [r0, #1]
 801e35c:	3003      	adds	r0, #3
 801e35e:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 801e362:	022d      	lsls	r5, r5, #8
 801e364:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 801e368:	44a9      	add	r9, r5
 801e36a:	e777      	b.n	801e25c <D24_GENERIC+0x50>
 801e36c:	7886      	ldrb	r6, [r0, #2]
 801e36e:	3004      	adds	r0, #4
 801e370:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 801e374:	44a9      	add	r9, r5
 801e376:	e771      	b.n	801e25c <D24_GENERIC+0x50>
 801e378:	00030001 	.word	0x00030001
 801e37c:	00060007 	.word	0x00060007
 801e380:	24000000 	.word	0x24000000

0801e384 <D32_GENERIC>:
 801e384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e388:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 801e38c:	b089      	sub	sp, #36	; 0x24
 801e38e:	6b15      	ldr	r5, [r2, #48]	; 0x30
 801e390:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 801e392:	9302      	str	r3, [sp, #8]
 801e394:	6993      	ldr	r3, [r2, #24]
 801e396:	9104      	str	r1, [sp, #16]
 801e398:	9307      	str	r3, [sp, #28]
 801e39a:	9503      	str	r5, [sp, #12]
 801e39c:	69d1      	ldr	r1, [r2, #28]
 801e39e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 801e3a0:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 801e3a4:	2e00      	cmp	r6, #0
 801e3a6:	f000 8097 	beq.w	801e4d8 <D32_GENERIC+0x154>
 801e3aa:	f005 0620 	and.w	r6, r5, #32
 801e3ae:	f005 0510 	and.w	r5, r5, #16
 801e3b2:	f04f 0e00 	mov.w	lr, #0
 801e3b6:	f8df c150 	ldr.w	ip, [pc, #336]	; 801e508 <D32_GENERIC+0x184>
 801e3ba:	9606      	str	r6, [sp, #24]
 801e3bc:	9505      	str	r5, [sp, #20]
 801e3be:	e079      	b.n	801e4b4 <D32_GENERIC+0x130>
 801e3c0:	783d      	ldrb	r5, [r7, #0]
 801e3c2:	f810 b009 	ldrb.w	fp, [r0, r9]
 801e3c6:	042d      	lsls	r5, r5, #16
 801e3c8:	f810 a006 	ldrb.w	sl, [r0, r6]
 801e3cc:	f890 9000 	ldrb.w	r9, [r0]
 801e3d0:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 801e3d4:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 801e3d8:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 801e3dc:	44a9      	add	r9, r5
 801e3de:	fa5f f789 	uxtb.w	r7, r9
 801e3e2:	f3c9 2507 	ubfx	r5, r9, #8, #8
 801e3e6:	f3c9 4607 	ubfx	r6, r9, #16, #8
 801e3ea:	ea4f 6919 	mov.w	r9, r9, lsr #24
 801e3ee:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 801e3f2:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 801e3f6:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 801e3fa:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 801e3fe:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 801e402:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801e406:	f3c1 0909 	ubfx	r9, r1, #0, #10
 801e40a:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 801e40e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801e412:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 801e416:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801e41a:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 801e41e:	f3c1 0509 	ubfx	r5, r1, #0, #10
 801e422:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 801e426:	4d34      	ldr	r5, [pc, #208]	; (801e4f8 <D32_GENERIC+0x174>)
 801e428:	fb29 8805 	smlad	r8, r9, r5, r8
 801e42c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 801e430:	fb26 8705 	smlad	r7, r6, r5, r8
 801e434:	4d31      	ldr	r5, [pc, #196]	; (801e4fc <D32_GENERIC+0x178>)
 801e436:	fb29 3305 	smlad	r3, r9, r5, r3
 801e43a:	4d31      	ldr	r5, [pc, #196]	; (801e500 <D32_GENERIC+0x17c>)
 801e43c:	fb26 3805 	smlad	r8, r6, r5, r3
 801e440:	2301      	movs	r3, #1
 801e442:	fb29 f903 	smuad	r9, r9, r3
 801e446:	4b2f      	ldr	r3, [pc, #188]	; (801e504 <D32_GENERIC+0x180>)
 801e448:	fb26 9303 	smlad	r3, r6, r3, r9
 801e44c:	9e05      	ldr	r6, [sp, #20]
 801e44e:	f10e 0901 	add.w	r9, lr, #1
 801e452:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 801e456:	b1ae      	cbz	r6, 801e484 <D32_GENERIC+0x100>
 801e458:	442c      	add	r4, r5
 801e45a:	9e02      	ldr	r6, [sp, #8]
 801e45c:	f8d2 a020 	ldr.w	sl, [r2, #32]
 801e460:	1ba4      	subs	r4, r4, r6
 801e462:	9502      	str	r5, [sp, #8]
 801e464:	17e7      	asrs	r7, r4, #31
 801e466:	fba4 450a 	umull	r4, r5, r4, sl
 801e46a:	e9cd 4500 	strd	r4, r5, [sp]
 801e46e:	fb0a 5407 	mla	r4, sl, r7, r5
 801e472:	9401      	str	r4, [sp, #4]
 801e474:	e9dd 4500 	ldrd	r4, r5, [sp]
 801e478:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 801e47c:	f145 0500 	adc.w	r5, r5, #0
 801e480:	006c      	lsls	r4, r5, #1
 801e482:	4625      	mov	r5, r4
 801e484:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 801e488:	036d      	lsls	r5, r5, #13
 801e48a:	9f03      	ldr	r7, [sp, #12]
 801e48c:	fb0e fb0a 	mul.w	fp, lr, sl
 801e490:	fa1f fe89 	uxth.w	lr, r9
 801e494:	f04f 0a00 	mov.w	sl, #0
 801e498:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 801e49c:	9e04      	ldr	r6, [sp, #16]
 801e49e:	fbc7 9a05 	smlal	r9, sl, r7, r5
 801e4a2:	4657      	mov	r7, sl
 801e4a4:	10bd      	asrs	r5, r7, #2
 801e4a6:	f305 050f 	ssat	r5, #16, r5
 801e4aa:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 801e4ae:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 801e4b0:	4575      	cmp	r5, lr
 801e4b2:	d911      	bls.n	801e4d8 <D32_GENERIC+0x154>
 801e4b4:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 801e4b6:	b2ee      	uxtb	r6, r5
 801e4b8:	2d01      	cmp	r5, #1
 801e4ba:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 801e4be:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 801e4c2:	f47f af7d 	bne.w	801e3c0 <D32_GENERIC+0x3c>
 801e4c6:	1d05      	adds	r5, r0, #4
 801e4c8:	f8d0 9000 	ldr.w	r9, [r0]
 801e4cc:	9806      	ldr	r0, [sp, #24]
 801e4ce:	b180      	cbz	r0, 801e4f2 <D32_GENERIC+0x16e>
 801e4d0:	fa99 f999 	rev16.w	r9, r9
 801e4d4:	4628      	mov	r0, r5
 801e4d6:	e782      	b.n	801e3de <D32_GENERIC+0x5a>
 801e4d8:	6093      	str	r3, [r2, #8]
 801e4da:	2000      	movs	r0, #0
 801e4dc:	9b02      	ldr	r3, [sp, #8]
 801e4de:	f8c2 800c 	str.w	r8, [r2, #12]
 801e4e2:	6153      	str	r3, [r2, #20]
 801e4e4:	9b07      	ldr	r3, [sp, #28]
 801e4e6:	61d1      	str	r1, [r2, #28]
 801e4e8:	6114      	str	r4, [r2, #16]
 801e4ea:	6193      	str	r3, [r2, #24]
 801e4ec:	b009      	add	sp, #36	; 0x24
 801e4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4f2:	4628      	mov	r0, r5
 801e4f4:	e773      	b.n	801e3de <D32_GENERIC+0x5a>
 801e4f6:	bf00      	nop
 801e4f8:	00060003 	.word	0x00060003
 801e4fc:	000a000c 	.word	0x000a000c
 801e500:	000c000a 	.word	0x000c000a
 801e504:	00030006 	.word	0x00030006
 801e508:	24000000 	.word	0x24000000

0801e50c <D48_GENERIC>:
 801e50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e510:	6913      	ldr	r3, [r2, #16]
 801e512:	b089      	sub	sp, #36	; 0x24
 801e514:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 801e516:	9301      	str	r3, [sp, #4]
 801e518:	6953      	ldr	r3, [r2, #20]
 801e51a:	9104      	str	r1, [sp, #16]
 801e51c:	9302      	str	r3, [sp, #8]
 801e51e:	6993      	ldr	r3, [r2, #24]
 801e520:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 801e524:	9307      	str	r3, [sp, #28]
 801e526:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 801e52a:	9100      	str	r1, [sp, #0]
 801e52c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801e52e:	9103      	str	r1, [sp, #12]
 801e530:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801e532:	2c00      	cmp	r4, #0
 801e534:	f000 80be 	beq.w	801e6b4 <D48_GENERIC+0x1a8>
 801e538:	f001 0420 	and.w	r4, r1, #32
 801e53c:	f001 0110 	and.w	r1, r1, #16
 801e540:	f04f 0e00 	mov.w	lr, #0
 801e544:	9105      	str	r1, [sp, #20]
 801e546:	9406      	str	r4, [sp, #24]
 801e548:	4962      	ldr	r1, [pc, #392]	; (801e6d4 <D48_GENERIC+0x1c8>)
 801e54a:	e0a0      	b.n	801e68e <D48_GENERIC+0x182>
 801e54c:	eb00 0608 	add.w	r6, r0, r8
 801e550:	f810 a008 	ldrb.w	sl, [r0, r8]
 801e554:	f810 9005 	ldrb.w	r9, [r0, r5]
 801e558:	5df4      	ldrb	r4, [r6, r7]
 801e55a:	443e      	add	r6, r7
 801e55c:	f890 b000 	ldrb.w	fp, [r0]
 801e560:	0420      	lsls	r0, r4, #16
 801e562:	eb06 0408 	add.w	r4, r6, r8
 801e566:	f816 6008 	ldrb.w	r6, [r6, r8]
 801e56a:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 801e56e:	f814 8007 	ldrb.w	r8, [r4, r7]
 801e572:	4427      	add	r7, r4
 801e574:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 801e578:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 801e57c:	eb0a 040b 	add.w	r4, sl, fp
 801e580:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 801e584:	f3c6 2807 	ubfx	r8, r6, #8, #8
 801e588:	b2f7      	uxtb	r7, r6
 801e58a:	b2e6      	uxtb	r6, r4
 801e58c:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801e590:	f3c4 4907 	ubfx	r9, r4, #16, #8
 801e594:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 801e598:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801e59c:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801e5a0:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 801e5a4:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 801e5a8:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 801e5ac:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 801e5b0:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801e5b4:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 801e5b8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801e5bc:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 801e5c0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801e5c4:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 801e5c8:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801e5cc:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 801e5d0:	9d00      	ldr	r5, [sp, #0]
 801e5d2:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 801e5d6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801e5da:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 801e5de:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801e5e2:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 801e5e6:	f3cc 0409 	ubfx	r4, ip, #0, #10
 801e5ea:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 801e5ee:	4c3a      	ldr	r4, [pc, #232]	; (801e6d8 <D48_GENERIC+0x1cc>)
 801e5f0:	fb26 5a04 	smlad	sl, r6, r4, r5
 801e5f4:	4c39      	ldr	r4, [pc, #228]	; (801e6dc <D48_GENERIC+0x1d0>)
 801e5f6:	fb29 aa04 	smlad	sl, r9, r4, sl
 801e5fa:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801e5fe:	fb27 aa04 	smlad	sl, r7, r4, sl
 801e602:	4c37      	ldr	r4, [pc, #220]	; (801e6e0 <D48_GENERIC+0x1d4>)
 801e604:	fb26 3304 	smlad	r3, r6, r4, r3
 801e608:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 801e60c:	fb29 3304 	smlad	r3, r9, r4, r3
 801e610:	4c34      	ldr	r4, [pc, #208]	; (801e6e4 <D48_GENERIC+0x1d8>)
 801e612:	fb27 3304 	smlad	r3, r7, r4, r3
 801e616:	2501      	movs	r5, #1
 801e618:	9300      	str	r3, [sp, #0]
 801e61a:	fb26 f605 	smuad	r6, r6, r5
 801e61e:	4b32      	ldr	r3, [pc, #200]	; (801e6e8 <D48_GENERIC+0x1dc>)
 801e620:	fb29 6903 	smlad	r9, r9, r3, r6
 801e624:	4b31      	ldr	r3, [pc, #196]	; (801e6ec <D48_GENERIC+0x1e0>)
 801e626:	fb27 9303 	smlad	r3, r7, r3, r9
 801e62a:	9c05      	ldr	r4, [sp, #20]
 801e62c:	eb0e 0805 	add.w	r8, lr, r5
 801e630:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 801e634:	b19c      	cbz	r4, 801e65e <D48_GENERIC+0x152>
 801e636:	9c01      	ldr	r4, [sp, #4]
 801e638:	9d02      	ldr	r5, [sp, #8]
 801e63a:	4454      	add	r4, sl
 801e63c:	f8d2 9020 	ldr.w	r9, [r2, #32]
 801e640:	f8cd a008 	str.w	sl, [sp, #8]
 801e644:	1b64      	subs	r4, r4, r5
 801e646:	fba4 ab09 	umull	sl, fp, r4, r9
 801e64a:	17e7      	asrs	r7, r4, #31
 801e64c:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 801e650:	fb09 bb07 	mla	fp, r9, r7, fp
 801e654:	f14b 0500 	adc.w	r5, fp, #0
 801e658:	006c      	lsls	r4, r5, #1
 801e65a:	46a2      	mov	sl, r4
 801e65c:	9401      	str	r4, [sp, #4]
 801e65e:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 801e660:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 801e664:	9d03      	ldr	r5, [sp, #12]
 801e666:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 801e66a:	fb0e f606 	mul.w	r6, lr, r6
 801e66e:	fa1f fe88 	uxth.w	lr, r8
 801e672:	f04f 0800 	mov.w	r8, #0
 801e676:	fbc5 780a 	smlal	r7, r8, r5, sl
 801e67a:	4645      	mov	r5, r8
 801e67c:	10ac      	asrs	r4, r5, #2
 801e67e:	9d04      	ldr	r5, [sp, #16]
 801e680:	f304 040f 	ssat	r4, #16, r4
 801e684:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 801e688:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 801e68a:	4574      	cmp	r4, lr
 801e68c:	d912      	bls.n	801e6b4 <D48_GENERIC+0x1a8>
 801e68e:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 801e690:	b2e5      	uxtb	r5, r4
 801e692:	2c01      	cmp	r4, #1
 801e694:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801e698:	f1c5 0700 	rsb	r7, r5, #0
 801e69c:	f47f af56 	bne.w	801e54c <D48_GENERIC+0x40>
 801e6a0:	9d06      	ldr	r5, [sp, #24]
 801e6a2:	e9d0 4600 	ldrd	r4, r6, [r0]
 801e6a6:	3006      	adds	r0, #6
 801e6a8:	2d00      	cmp	r5, #0
 801e6aa:	f43f af6b 	beq.w	801e584 <D48_GENERIC+0x78>
 801e6ae:	ba64      	rev16	r4, r4
 801e6b0:	ba76      	rev16	r6, r6
 801e6b2:	e767      	b.n	801e584 <D48_GENERIC+0x78>
 801e6b4:	6093      	str	r3, [r2, #8]
 801e6b6:	2000      	movs	r0, #0
 801e6b8:	9b00      	ldr	r3, [sp, #0]
 801e6ba:	f8c2 c01c 	str.w	ip, [r2, #28]
 801e6be:	60d3      	str	r3, [r2, #12]
 801e6c0:	9b01      	ldr	r3, [sp, #4]
 801e6c2:	6113      	str	r3, [r2, #16]
 801e6c4:	9b02      	ldr	r3, [sp, #8]
 801e6c6:	6153      	str	r3, [r2, #20]
 801e6c8:	9b07      	ldr	r3, [sp, #28]
 801e6ca:	6193      	str	r3, [r2, #24]
 801e6cc:	b009      	add	sp, #36	; 0x24
 801e6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6d2:	bf00      	nop
 801e6d4:	24000000 	.word	0x24000000
 801e6d8:	000f000a 	.word	0x000f000a
 801e6dc:	00060003 	.word	0x00060003
 801e6e0:	00150019 	.word	0x00150019
 801e6e4:	00190015 	.word	0x00190015
 801e6e8:	00030006 	.word	0x00030006
 801e6ec:	000a000f 	.word	0x000a000f

0801e6f0 <D64_GENERIC>:
 801e6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6f4:	6913      	ldr	r3, [r2, #16]
 801e6f6:	b089      	sub	sp, #36	; 0x24
 801e6f8:	6b15      	ldr	r5, [r2, #48]	; 0x30
 801e6fa:	9300      	str	r3, [sp, #0]
 801e6fc:	6953      	ldr	r3, [r2, #20]
 801e6fe:	9105      	str	r1, [sp, #20]
 801e700:	9303      	str	r3, [sp, #12]
 801e702:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 801e704:	6993      	ldr	r3, [r2, #24]
 801e706:	69d4      	ldr	r4, [r2, #28]
 801e708:	9307      	str	r3, [sp, #28]
 801e70a:	9504      	str	r5, [sp, #16]
 801e70c:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 801e710:	2900      	cmp	r1, #0
 801e712:	f000 80e8 	beq.w	801e8e6 <D64_GENERIC+0x1f6>
 801e716:	6a11      	ldr	r1, [r2, #32]
 801e718:	2500      	movs	r5, #0
 801e71a:	46b3      	mov	fp, r6
 801e71c:	9302      	str	r3, [sp, #8]
 801e71e:	9106      	str	r1, [sp, #24]
 801e720:	4978      	ldr	r1, [pc, #480]	; (801e904 <D64_GENERIC+0x214>)
 801e722:	e0cc      	b.n	801e8be <D64_GENERIC+0x1ce>
 801e724:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 801e728:	f1ce 0c00 	rsb	ip, lr, #0
 801e72c:	f890 9000 	ldrb.w	r9, [r0]
 801e730:	eb00 0708 	add.w	r7, r0, r8
 801e734:	f810 6008 	ldrb.w	r6, [r0, r8]
 801e738:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 801e73c:	f817 000c 	ldrb.w	r0, [r7, ip]
 801e740:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 801e744:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 801e748:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 801e74c:	ea4f 4800 	mov.w	r8, r0, lsl #16
 801e750:	f817 000c 	ldrb.w	r0, [r7, ip]
 801e754:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 801e758:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 801e75c:	0400      	lsls	r0, r0, #16
 801e75e:	4467      	add	r7, ip
 801e760:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 801e764:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 801e768:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 801e76c:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 801e770:	444e      	add	r6, r9
 801e772:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 801e776:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 801e77a:	44c2      	add	sl, r8
 801e77c:	b2f7      	uxtb	r7, r6
 801e77e:	f3c6 2807 	ubfx	r8, r6, #8, #8
 801e782:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801e786:	0e36      	lsrs	r6, r6, #24
 801e788:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801e78c:	fa5f fc8a 	uxtb.w	ip, sl
 801e790:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 801e794:	f3ca 2907 	ubfx	r9, sl, #8, #8
 801e798:	443c      	add	r4, r7
 801e79a:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 801e79e:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801e7a2:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 801e7a6:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 801e7aa:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801e7ae:	4b56      	ldr	r3, [pc, #344]	; (801e908 <D64_GENERIC+0x218>)
 801e7b0:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 801e7b4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801e7b8:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 801e7bc:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 801e7c0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801e7c4:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 801e7c8:	f3ca 4407 	ubfx	r4, sl, #16, #8
 801e7cc:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 801e7d0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801e7d4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 801e7d8:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 801e7dc:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 801e7e0:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801e7e4:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 801e7e8:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 801e7ec:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 801e7f0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801e7f4:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 801e7f8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801e7fc:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 801e800:	f3c9 0709 	ubfx	r7, r9, #0, #10
 801e804:	ea4f 2499 	mov.w	r4, r9, lsr #10
 801e808:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 801e80c:	fb28 b903 	smlad	r9, r8, r3, fp
 801e810:	4b3e      	ldr	r3, [pc, #248]	; (801e90c <D64_GENERIC+0x21c>)
 801e812:	fb26 9903 	smlad	r9, r6, r3, r9
 801e816:	4b3e      	ldr	r3, [pc, #248]	; (801e910 <D64_GENERIC+0x220>)
 801e818:	fb2c 9703 	smlad	r7, ip, r3, r9
 801e81c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 801e820:	fb2a 7909 	smlad	r9, sl, r9, r7
 801e824:	4f3b      	ldr	r7, [pc, #236]	; (801e914 <D64_GENERIC+0x224>)
 801e826:	9b02      	ldr	r3, [sp, #8]
 801e828:	fb28 3307 	smlad	r3, r8, r7, r3
 801e82c:	fb2a 3317 	smladx	r3, sl, r7, r3
 801e830:	4f39      	ldr	r7, [pc, #228]	; (801e918 <D64_GENERIC+0x228>)
 801e832:	fb26 3307 	smlad	r3, r6, r7, r3
 801e836:	fb2c 3b17 	smladx	fp, ip, r7, r3
 801e83a:	f04f 0e01 	mov.w	lr, #1
 801e83e:	fb28 f80e 	smuad	r8, r8, lr
 801e842:	4b36      	ldr	r3, [pc, #216]	; (801e91c <D64_GENERIC+0x22c>)
 801e844:	fb26 8603 	smlad	r6, r6, r3, r8
 801e848:	4b35      	ldr	r3, [pc, #212]	; (801e920 <D64_GENERIC+0x230>)
 801e84a:	fb2c 6c03 	smlad	ip, ip, r3, r6
 801e84e:	4b35      	ldr	r3, [pc, #212]	; (801e924 <D64_GENERIC+0x234>)
 801e850:	fb2a c303 	smlad	r3, sl, r3, ip
 801e854:	9f06      	ldr	r7, [sp, #24]
 801e856:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 801e85a:	9302      	str	r3, [sp, #8]
 801e85c:	b1cf      	cbz	r7, 801e892 <D64_GENERIC+0x1a2>
 801e85e:	9b00      	ldr	r3, [sp, #0]
 801e860:	444b      	add	r3, r9
 801e862:	461e      	mov	r6, r3
 801e864:	9b03      	ldr	r3, [sp, #12]
 801e866:	f8cd 900c 	str.w	r9, [sp, #12]
 801e86a:	1af6      	subs	r6, r6, r3
 801e86c:	46b0      	mov	r8, r6
 801e86e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 801e872:	e9cd 8900 	strd	r8, r9, [sp]
 801e876:	fba6 8907 	umull	r8, r9, r6, r7
 801e87a:	9e01      	ldr	r6, [sp, #4]
 801e87c:	fb07 9306 	mla	r3, r7, r6, r9
 801e880:	4646      	mov	r6, r8
 801e882:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 801e886:	f143 0700 	adc.w	r7, r3, #0
 801e88a:	fa07 f30e 	lsl.w	r3, r7, lr
 801e88e:	4699      	mov	r9, r3
 801e890:	9300      	str	r3, [sp, #0]
 801e892:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 801e896:	ea4f 2989 	mov.w	r9, r9, lsl #10
 801e89a:	9b04      	ldr	r3, [sp, #16]
 801e89c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801e8a0:	2700      	movs	r7, #0
 801e8a2:	fb05 fc0c 	mul.w	ip, r5, ip
 801e8a6:	3501      	adds	r5, #1
 801e8a8:	fbc3 6709 	smlal	r6, r7, r3, r9
 801e8ac:	9b05      	ldr	r3, [sp, #20]
 801e8ae:	10be      	asrs	r6, r7, #2
 801e8b0:	f306 060f 	ssat	r6, #16, r6
 801e8b4:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 801e8b8:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 801e8ba:	42ae      	cmp	r6, r5
 801e8bc:	dd11      	ble.n	801e8e2 <D64_GENERIC+0x1f2>
 801e8be:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 801e8c2:	f1be 0f01 	cmp.w	lr, #1
 801e8c6:	f47f af2d 	bne.w	801e724 <D64_GENERIC+0x34>
 801e8ca:	6b57      	ldr	r7, [r2, #52]	; 0x34
 801e8cc:	f100 0c08 	add.w	ip, r0, #8
 801e8d0:	06bb      	lsls	r3, r7, #26
 801e8d2:	e9d0 6a00 	ldrd	r6, sl, [r0]
 801e8d6:	d513      	bpl.n	801e900 <D64_GENERIC+0x210>
 801e8d8:	ba76      	rev16	r6, r6
 801e8da:	fa9a fa9a 	rev16.w	sl, sl
 801e8de:	4660      	mov	r0, ip
 801e8e0:	e74c      	b.n	801e77c <D64_GENERIC+0x8c>
 801e8e2:	465e      	mov	r6, fp
 801e8e4:	9b02      	ldr	r3, [sp, #8]
 801e8e6:	6093      	str	r3, [r2, #8]
 801e8e8:	2000      	movs	r0, #0
 801e8ea:	9b00      	ldr	r3, [sp, #0]
 801e8ec:	60d6      	str	r6, [r2, #12]
 801e8ee:	6113      	str	r3, [r2, #16]
 801e8f0:	9b03      	ldr	r3, [sp, #12]
 801e8f2:	61d4      	str	r4, [r2, #28]
 801e8f4:	6153      	str	r3, [r2, #20]
 801e8f6:	9b07      	ldr	r3, [sp, #28]
 801e8f8:	6193      	str	r3, [r2, #24]
 801e8fa:	b009      	add	sp, #36	; 0x24
 801e8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e900:	4660      	mov	r0, ip
 801e902:	e73b      	b.n	801e77c <D64_GENERIC+0x8c>
 801e904:	24000000 	.word	0x24000000
 801e908:	001c0015 	.word	0x001c0015
 801e90c:	000f000a 	.word	0x000f000a
 801e910:	00060003 	.word	0x00060003
 801e914:	0024002a 	.word	0x0024002a
 801e918:	002e0030 	.word	0x002e0030
 801e91c:	00030006 	.word	0x00030006
 801e920:	000a000f 	.word	0x000a000f
 801e924:	0015001c 	.word	0x0015001c

0801e928 <D80_GENERIC>:
 801e928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e92c:	b08b      	sub	sp, #44	; 0x2c
 801e92e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 801e930:	9107      	str	r1, [sp, #28]
 801e932:	6911      	ldr	r1, [r2, #16]
 801e934:	9104      	str	r1, [sp, #16]
 801e936:	6951      	ldr	r1, [r2, #20]
 801e938:	9105      	str	r1, [sp, #20]
 801e93a:	6991      	ldr	r1, [r2, #24]
 801e93c:	9109      	str	r1, [sp, #36]	; 0x24
 801e93e:	69d1      	ldr	r1, [r2, #28]
 801e940:	9102      	str	r1, [sp, #8]
 801e942:	6891      	ldr	r1, [r2, #8]
 801e944:	9103      	str	r1, [sp, #12]
 801e946:	68d1      	ldr	r1, [r2, #12]
 801e948:	9101      	str	r1, [sp, #4]
 801e94a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801e94c:	9106      	str	r1, [sp, #24]
 801e94e:	2b00      	cmp	r3, #0
 801e950:	f000 810b 	beq.w	801eb6a <D80_GENERIC+0x242>
 801e954:	6a13      	ldr	r3, [r2, #32]
 801e956:	f04f 0800 	mov.w	r8, #0
 801e95a:	f8df c260 	ldr.w	ip, [pc, #608]	; 801ebbc <D80_GENERIC+0x294>
 801e95e:	9308      	str	r3, [sp, #32]
 801e960:	9200      	str	r2, [sp, #0]
 801e962:	e0ee      	b.n	801eb42 <D80_GENERIC+0x21a>
 801e964:	b2db      	uxtb	r3, r3
 801e966:	f890 e000 	ldrb.w	lr, [r0]
 801e96a:	b219      	sxth	r1, r3
 801e96c:	425c      	negs	r4, r3
 801e96e:	f810 9003 	ldrb.w	r9, [r0, r3]
 801e972:	004e      	lsls	r6, r1, #1
 801e974:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 801e978:	4431      	add	r1, r6
 801e97a:	1843      	adds	r3, r0, r1
 801e97c:	f810 b001 	ldrb.w	fp, [r0, r1]
 801e980:	1919      	adds	r1, r3, r4
 801e982:	5d1b      	ldrb	r3, [r3, r4]
 801e984:	1948      	adds	r0, r1, r5
 801e986:	f811 a005 	ldrb.w	sl, [r1, r5]
 801e98a:	041b      	lsls	r3, r3, #16
 801e98c:	1907      	adds	r7, r0, r4
 801e98e:	5d01      	ldrb	r1, [r0, r4]
 801e990:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 801e994:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 801e998:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 801e99c:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 801e9a0:	0409      	lsls	r1, r1, #16
 801e9a2:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 801e9a6:	eb0b 0905 	add.w	r9, fp, r5
 801e9aa:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 801e9ae:	f81b 5005 	ldrb.w	r5, [fp, r5]
 801e9b2:	eb09 0b04 	add.w	fp, r9, r4
 801e9b6:	f819 4004 	ldrb.w	r4, [r9, r4]
 801e9ba:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 801e9be:	4473      	add	r3, lr
 801e9c0:	eb0b 0006 	add.w	r0, fp, r6
 801e9c4:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 801e9c8:	4439      	add	r1, r7
 801e9ca:	f3c3 2407 	ubfx	r4, r3, #8, #8
 801e9ce:	b2df      	uxtb	r7, r3
 801e9d0:	f3c3 4607 	ubfx	r6, r3, #16, #8
 801e9d4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e9d8:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 801e9dc:	fa5f fa81 	uxtb.w	sl, r1
 801e9e0:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 801e9e4:	9c02      	ldr	r4, [sp, #8]
 801e9e6:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 801e9ea:	441c      	add	r4, r3
 801e9ec:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 801e9f0:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 801e9f4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e9f8:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 801e9fc:	f3c4 0309 	ubfx	r3, r4, #0, #10
 801ea00:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801ea04:	b2ed      	uxtb	r5, r5
 801ea06:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 801ea0a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801ea0e:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 801ea12:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 801ea16:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 801ea1a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 801ea1e:	f3c1 4707 	ubfx	r7, r1, #16, #8
 801ea22:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 801ea26:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 801ea2a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 801ea2e:	0e09      	lsrs	r1, r1, #24
 801ea30:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 801ea34:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801ea38:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 801ea3c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801ea40:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 801ea44:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801ea48:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801ea4c:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 801ea50:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801ea54:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 801ea58:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801ea5c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801ea60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 801ea64:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 801ea68:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801ea6c:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 801ea70:	ea4f 229a 	mov.w	r2, sl, lsr #10
 801ea74:	f3ca 0709 	ubfx	r7, sl, #0, #10
 801ea78:	9202      	str	r2, [sp, #8]
 801ea7a:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 801ea7e:	4a43      	ldr	r2, [pc, #268]	; (801eb8c <D80_GENERIC+0x264>)
 801ea80:	9f01      	ldr	r7, [sp, #4]
 801ea82:	fb23 7a02 	smlad	sl, r3, r2, r7
 801ea86:	4a42      	ldr	r2, [pc, #264]	; (801eb90 <D80_GENERIC+0x268>)
 801ea88:	fb26 aa02 	smlad	sl, r6, r2, sl
 801ea8c:	4a41      	ldr	r2, [pc, #260]	; (801eb94 <D80_GENERIC+0x26c>)
 801ea8e:	fb24 aa02 	smlad	sl, r4, r2, sl
 801ea92:	4a41      	ldr	r2, [pc, #260]	; (801eb98 <D80_GENERIC+0x270>)
 801ea94:	fb21 a702 	smlad	r7, r1, r2, sl
 801ea98:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 801ea9c:	fb25 7a0a 	smlad	sl, r5, sl, r7
 801eaa0:	4a3e      	ldr	r2, [pc, #248]	; (801eb9c <D80_GENERIC+0x274>)
 801eaa2:	9f03      	ldr	r7, [sp, #12]
 801eaa4:	fb23 7e02 	smlad	lr, r3, r2, r7
 801eaa8:	4a3d      	ldr	r2, [pc, #244]	; (801eba0 <D80_GENERIC+0x278>)
 801eaaa:	fb26 ee02 	smlad	lr, r6, r2, lr
 801eaae:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 801eab2:	fb24 e707 	smlad	r7, r4, r7, lr
 801eab6:	4a3b      	ldr	r2, [pc, #236]	; (801eba4 <D80_GENERIC+0x27c>)
 801eab8:	fb21 7702 	smlad	r7, r1, r2, r7
 801eabc:	4a3a      	ldr	r2, [pc, #232]	; (801eba8 <D80_GENERIC+0x280>)
 801eabe:	fb25 7202 	smlad	r2, r5, r2, r7
 801eac2:	f04f 0901 	mov.w	r9, #1
 801eac6:	9201      	str	r2, [sp, #4]
 801eac8:	fb23 f909 	smuad	r9, r3, r9
 801eacc:	4b37      	ldr	r3, [pc, #220]	; (801ebac <D80_GENERIC+0x284>)
 801eace:	fb26 9603 	smlad	r6, r6, r3, r9
 801ead2:	4f37      	ldr	r7, [pc, #220]	; (801ebb0 <D80_GENERIC+0x288>)
 801ead4:	fb24 6407 	smlad	r4, r4, r7, r6
 801ead8:	4f36      	ldr	r7, [pc, #216]	; (801ebb4 <D80_GENERIC+0x28c>)
 801eada:	fb21 4707 	smlad	r7, r1, r7, r4
 801eade:	4936      	ldr	r1, [pc, #216]	; (801ebb8 <D80_GENERIC+0x290>)
 801eae0:	fb25 7301 	smlad	r3, r5, r1, r7
 801eae4:	9303      	str	r3, [sp, #12]
 801eae6:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 801eaea:	9b08      	ldr	r3, [sp, #32]
 801eaec:	b193      	cbz	r3, 801eb14 <D80_GENERIC+0x1ec>
 801eaee:	9a04      	ldr	r2, [sp, #16]
 801eaf0:	4452      	add	r2, sl
 801eaf2:	4614      	mov	r4, r2
 801eaf4:	9a05      	ldr	r2, [sp, #20]
 801eaf6:	f8cd a014 	str.w	sl, [sp, #20]
 801eafa:	1aa4      	subs	r4, r4, r2
 801eafc:	fba4 1203 	umull	r1, r2, r4, r3
 801eb00:	17e7      	asrs	r7, r4, #31
 801eb02:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 801eb06:	fb03 2207 	mla	r2, r3, r7, r2
 801eb0a:	f142 0500 	adc.w	r5, r2, #0
 801eb0e:	006b      	lsls	r3, r5, #1
 801eb10:	469a      	mov	sl, r3
 801eb12:	9304      	str	r3, [sp, #16]
 801eb14:	9e00      	ldr	r6, [sp, #0]
 801eb16:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 801eb1a:	9a06      	ldr	r2, [sp, #24]
 801eb1c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801eb20:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 801eb22:	2500      	movs	r5, #0
 801eb24:	fb08 f303 	mul.w	r3, r8, r3
 801eb28:	fbc2 450a 	smlal	r4, r5, r2, sl
 801eb2c:	9a07      	ldr	r2, [sp, #28]
 801eb2e:	f108 0801 	add.w	r8, r8, #1
 801eb32:	10a9      	asrs	r1, r5, #2
 801eb34:	f301 010f 	ssat	r1, #16, r1
 801eb38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801eb3c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 801eb3e:	4543      	cmp	r3, r8
 801eb40:	dd12      	ble.n	801eb68 <D80_GENERIC+0x240>
 801eb42:	9b00      	ldr	r3, [sp, #0]
 801eb44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb46:	2b01      	cmp	r3, #1
 801eb48:	f47f af0c 	bne.w	801e964 <D80_GENERIC+0x3c>
 801eb4c:	9b00      	ldr	r3, [sp, #0]
 801eb4e:	6885      	ldr	r5, [r0, #8]
 801eb50:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801eb52:	06b2      	lsls	r2, r6, #26
 801eb54:	e9d0 3100 	ldrd	r3, r1, [r0]
 801eb58:	f100 000a 	add.w	r0, r0, #10
 801eb5c:	f57f af35 	bpl.w	801e9ca <D80_GENERIC+0xa2>
 801eb60:	ba5b      	rev16	r3, r3
 801eb62:	ba49      	rev16	r1, r1
 801eb64:	ba6d      	rev16	r5, r5
 801eb66:	e730      	b.n	801e9ca <D80_GENERIC+0xa2>
 801eb68:	4632      	mov	r2, r6
 801eb6a:	9b03      	ldr	r3, [sp, #12]
 801eb6c:	2000      	movs	r0, #0
 801eb6e:	6093      	str	r3, [r2, #8]
 801eb70:	9b01      	ldr	r3, [sp, #4]
 801eb72:	60d3      	str	r3, [r2, #12]
 801eb74:	9b02      	ldr	r3, [sp, #8]
 801eb76:	61d3      	str	r3, [r2, #28]
 801eb78:	9b04      	ldr	r3, [sp, #16]
 801eb7a:	6113      	str	r3, [r2, #16]
 801eb7c:	9b05      	ldr	r3, [sp, #20]
 801eb7e:	6153      	str	r3, [r2, #20]
 801eb80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb82:	6193      	str	r3, [r2, #24]
 801eb84:	b00b      	add	sp, #44	; 0x2c
 801eb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb8a:	bf00      	nop
 801eb8c:	002d0024 	.word	0x002d0024
 801eb90:	001c0015 	.word	0x001c0015
 801eb94:	000f000a 	.word	0x000f000a
 801eb98:	00060003 	.word	0x00060003
 801eb9c:	0037003f 	.word	0x0037003f
 801eba0:	00450049 	.word	0x00450049
 801eba4:	00490045 	.word	0x00490045
 801eba8:	003f0037 	.word	0x003f0037
 801ebac:	00030006 	.word	0x00030006
 801ebb0:	000a000f 	.word	0x000a000f
 801ebb4:	0015001c 	.word	0x0015001c
 801ebb8:	0024002d 	.word	0x0024002d
 801ebbc:	24000000 	.word	0x24000000

0801ebc0 <D128_GENERIC>:
 801ebc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebc4:	b08d      	sub	sp, #52	; 0x34
 801ebc6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 801ebc8:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 801ebcc:	9109      	str	r1, [sp, #36]	; 0x24
 801ebce:	6911      	ldr	r1, [r2, #16]
 801ebd0:	9201      	str	r2, [sp, #4]
 801ebd2:	9106      	str	r1, [sp, #24]
 801ebd4:	6951      	ldr	r1, [r2, #20]
 801ebd6:	9107      	str	r1, [sp, #28]
 801ebd8:	6991      	ldr	r1, [r2, #24]
 801ebda:	910b      	str	r1, [sp, #44]	; 0x2c
 801ebdc:	6891      	ldr	r1, [r2, #8]
 801ebde:	9103      	str	r1, [sp, #12]
 801ebe0:	68d1      	ldr	r1, [r2, #12]
 801ebe2:	9102      	str	r1, [sp, #8]
 801ebe4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801ebe6:	9108      	str	r1, [sp, #32]
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	f000 8183 	beq.w	801eef4 <D128_GENERIC+0x334>
 801ebee:	2300      	movs	r3, #0
 801ebf0:	6a12      	ldr	r2, [r2, #32]
 801ebf2:	4681      	mov	r9, r0
 801ebf4:	920a      	str	r2, [sp, #40]	; 0x28
 801ebf6:	e9cd a304 	strd	sl, r3, [sp, #16]
 801ebfa:	e165      	b.n	801eec8 <D128_GENERIC+0x308>
 801ebfc:	b2d2      	uxtb	r2, r2
 801ebfe:	f899 b000 	ldrb.w	fp, [r9]
 801ec02:	b213      	sxth	r3, r2
 801ec04:	4255      	negs	r5, r2
 801ec06:	f819 0002 	ldrb.w	r0, [r9, r2]
 801ec0a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801ec0e:	009f      	lsls	r7, r3, #2
 801ec10:	eb09 0402 	add.w	r4, r9, r2
 801ec14:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 801ec18:	f819 8002 	ldrb.w	r8, [r9, r2]
 801ec1c:	443b      	add	r3, r7
 801ec1e:	1962      	adds	r2, r4, r5
 801ec20:	5d64      	ldrb	r4, [r4, r5]
 801ec22:	eb02 0c03 	add.w	ip, r2, r3
 801ec26:	0424      	lsls	r4, r4, #16
 801ec28:	5cd3      	ldrb	r3, [r2, r3]
 801ec2a:	eb0c 0e05 	add.w	lr, ip, r5
 801ec2e:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 801ec32:	f81c 2005 	ldrb.w	r2, [ip, r5]
 801ec36:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 801ec3a:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 801ec3e:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 801ec42:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 801ec46:	eb0c 0e06 	add.w	lr, ip, r6
 801ec4a:	f81c a006 	ldrb.w	sl, [ip, r6]
 801ec4e:	0412      	lsls	r2, r2, #16
 801ec50:	445c      	add	r4, fp
 801ec52:	eb0e 0c05 	add.w	ip, lr, r5
 801ec56:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 801ec5a:	f81e 3005 	ldrb.w	r3, [lr, r5]
 801ec5e:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 801ec62:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 801ec66:	041b      	lsls	r3, r3, #16
 801ec68:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 801ec6c:	eb00 0b06 	add.w	fp, r0, r6
 801ec70:	5d80      	ldrb	r0, [r0, r6]
 801ec72:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 801ec76:	f81b 6005 	ldrb.w	r6, [fp, r5]
 801ec7a:	eb0b 0a05 	add.w	sl, fp, r5
 801ec7e:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 801ec82:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 801ec86:	0436      	lsls	r6, r6, #16
 801ec88:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 801ec8c:	4442      	add	r2, r8
 801ec8e:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 801ec92:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 801ec96:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 801ec9a:	44b9      	add	r9, r7
 801ec9c:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 801eca0:	4463      	add	r3, ip
 801eca2:	eb06 0508 	add.w	r5, r6, r8
 801eca6:	b2e7      	uxtb	r7, r4
 801eca8:	f3c4 2607 	ubfx	r6, r4, #8, #8
 801ecac:	499b      	ldr	r1, [pc, #620]	; (801ef1c <D128_GENERIC+0x35c>)
 801ecae:	f3c4 4007 	ubfx	r0, r4, #16, #8
 801ecb2:	0e24      	lsrs	r4, r4, #24
 801ecb4:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 801ecb8:	b2d7      	uxtb	r7, r2
 801ecba:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 801ecbe:	f3c2 2607 	ubfx	r6, r2, #8, #8
 801ecc2:	9904      	ldr	r1, [sp, #16]
 801ecc4:	4461      	add	r1, ip
 801ecc6:	468c      	mov	ip, r1
 801ecc8:	4994      	ldr	r1, [pc, #592]	; (801ef1c <D128_GENERIC+0x35c>)
 801ecca:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 801ecce:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801ecd2:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 801ecd6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801ecda:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 801ecde:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 801ece2:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 801ece6:	0e12      	lsrs	r2, r2, #24
 801ece8:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 801ecec:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 801ecf0:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801ecf4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801ecf8:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 801ecfc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801ed00:	b2da      	uxtb	r2, r3
 801ed02:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801ed06:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 801ed0a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 801ed0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801ed12:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 801ed16:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 801ed1a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801ed1e:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 801ed22:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801ed26:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 801ed2a:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 801ed2e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 801ed32:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801ed36:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 801ed3a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801ed3e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 801ed42:	0e1b      	lsrs	r3, r3, #24
 801ed44:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 801ed48:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801ed4c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801ed50:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 801ed54:	b2eb      	uxtb	r3, r5
 801ed56:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801ed5a:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 801ed5e:	f3cc 0409 	ubfx	r4, ip, #0, #10
 801ed62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801ed66:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 801ed6a:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 801ed6e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ed72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801ed76:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801ed7a:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 801ed7e:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 801ed82:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801ed86:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801ed8a:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 801ed8e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801ed92:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 801ed96:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801ed9a:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 801ed9e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 801eda2:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 801eda6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801edaa:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 801edae:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801edb2:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 801edb6:	ea4f 219e 	mov.w	r1, lr, lsr #10
 801edba:	f3ce 0209 	ubfx	r2, lr, #0, #10
 801edbe:	9104      	str	r1, [sp, #16]
 801edc0:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801edc4:	9902      	ldr	r1, [sp, #8]
 801edc6:	4a56      	ldr	r2, [pc, #344]	; (801ef20 <D128_GENERIC+0x360>)
 801edc8:	fb2b 1202 	smlad	r2, fp, r2, r1
 801edcc:	4955      	ldr	r1, [pc, #340]	; (801ef24 <D128_GENERIC+0x364>)
 801edce:	fb28 2201 	smlad	r2, r8, r1, r2
 801edd2:	4955      	ldr	r1, [pc, #340]	; (801ef28 <D128_GENERIC+0x368>)
 801edd4:	fb27 2201 	smlad	r2, r7, r1, r2
 801edd8:	4954      	ldr	r1, [pc, #336]	; (801ef2c <D128_GENERIC+0x36c>)
 801edda:	fb26 2201 	smlad	r2, r6, r1, r2
 801edde:	4954      	ldr	r1, [pc, #336]	; (801ef30 <D128_GENERIC+0x370>)
 801ede0:	fb24 2201 	smlad	r2, r4, r1, r2
 801ede4:	4953      	ldr	r1, [pc, #332]	; (801ef34 <D128_GENERIC+0x374>)
 801ede6:	fb20 2201 	smlad	r2, r0, r1, r2
 801edea:	4953      	ldr	r1, [pc, #332]	; (801ef38 <D128_GENERIC+0x378>)
 801edec:	fb23 2201 	smlad	r2, r3, r1, r2
 801edf0:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 801edf4:	fb25 2a0c 	smlad	sl, r5, ip, r2
 801edf8:	4950      	ldr	r1, [pc, #320]	; (801ef3c <D128_GENERIC+0x37c>)
 801edfa:	9a03      	ldr	r2, [sp, #12]
 801edfc:	fb2b 2c01 	smlad	ip, fp, r1, r2
 801ee00:	4a4f      	ldr	r2, [pc, #316]	; (801ef40 <D128_GENERIC+0x380>)
 801ee02:	fb28 ce02 	smlad	lr, r8, r2, ip
 801ee06:	f8df c150 	ldr.w	ip, [pc, #336]	; 801ef58 <D128_GENERIC+0x398>
 801ee0a:	fb27 ec0c 	smlad	ip, r7, ip, lr
 801ee0e:	f8df e14c 	ldr.w	lr, [pc, #332]	; 801ef5c <D128_GENERIC+0x39c>
 801ee12:	fb26 cc0e 	smlad	ip, r6, lr, ip
 801ee16:	f8df e148 	ldr.w	lr, [pc, #328]	; 801ef60 <D128_GENERIC+0x3a0>
 801ee1a:	fb24 ce0e 	smlad	lr, r4, lr, ip
 801ee1e:	f8df c144 	ldr.w	ip, [pc, #324]	; 801ef64 <D128_GENERIC+0x3a4>
 801ee22:	fb20 ee0c 	smlad	lr, r0, ip, lr
 801ee26:	f8df c140 	ldr.w	ip, [pc, #320]	; 801ef68 <D128_GENERIC+0x3a8>
 801ee2a:	fb23 ec0c 	smlad	ip, r3, ip, lr
 801ee2e:	f8df e13c 	ldr.w	lr, [pc, #316]	; 801ef6c <D128_GENERIC+0x3ac>
 801ee32:	fb25 c20e 	smlad	r2, r5, lr, ip
 801ee36:	f04f 0c01 	mov.w	ip, #1
 801ee3a:	9202      	str	r2, [sp, #8]
 801ee3c:	fb2b fb0c 	smuad	fp, fp, ip
 801ee40:	f8df c12c 	ldr.w	ip, [pc, #300]	; 801ef70 <D128_GENERIC+0x3b0>
 801ee44:	fb28 bb0c 	smlad	fp, r8, ip, fp
 801ee48:	f8df c128 	ldr.w	ip, [pc, #296]	; 801ef74 <D128_GENERIC+0x3b4>
 801ee4c:	fb27 bb0c 	smlad	fp, r7, ip, fp
 801ee50:	4f3c      	ldr	r7, [pc, #240]	; (801ef44 <D128_GENERIC+0x384>)
 801ee52:	fb26 bb07 	smlad	fp, r6, r7, fp
 801ee56:	4f3c      	ldr	r7, [pc, #240]	; (801ef48 <D128_GENERIC+0x388>)
 801ee58:	fb24 bb07 	smlad	fp, r4, r7, fp
 801ee5c:	4f3b      	ldr	r7, [pc, #236]	; (801ef4c <D128_GENERIC+0x38c>)
 801ee5e:	fb20 bb07 	smlad	fp, r0, r7, fp
 801ee62:	4f3b      	ldr	r7, [pc, #236]	; (801ef50 <D128_GENERIC+0x390>)
 801ee64:	fb23 bb07 	smlad	fp, r3, r7, fp
 801ee68:	4b3a      	ldr	r3, [pc, #232]	; (801ef54 <D128_GENERIC+0x394>)
 801ee6a:	fb25 b303 	smlad	r3, r5, r3, fp
 801ee6e:	9303      	str	r3, [sp, #12]
 801ee70:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 801ee74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee76:	b183      	cbz	r3, 801ee9a <D128_GENERIC+0x2da>
 801ee78:	9a06      	ldr	r2, [sp, #24]
 801ee7a:	9907      	ldr	r1, [sp, #28]
 801ee7c:	4422      	add	r2, r4
 801ee7e:	9407      	str	r4, [sp, #28]
 801ee80:	1a52      	subs	r2, r2, r1
 801ee82:	fba2 0103 	umull	r0, r1, r2, r3
 801ee86:	17d5      	asrs	r5, r2, #31
 801ee88:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 801ee8c:	fb03 1105 	mla	r1, r3, r5, r1
 801ee90:	f141 0300 	adc.w	r3, r1, #0
 801ee94:	005b      	lsls	r3, r3, #1
 801ee96:	461c      	mov	r4, r3
 801ee98:	9306      	str	r3, [sp, #24]
 801ee9a:	9d01      	ldr	r5, [sp, #4]
 801ee9c:	01e4      	lsls	r4, r4, #7
 801ee9e:	9e05      	ldr	r6, [sp, #20]
 801eea0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801eea4:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 801eea6:	2300      	movs	r3, #0
 801eea8:	9908      	ldr	r1, [sp, #32]
 801eeaa:	fb06 f000 	mul.w	r0, r6, r0
 801eeae:	3601      	adds	r6, #1
 801eeb0:	fbc1 2304 	smlal	r2, r3, r1, r4
 801eeb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eeb6:	109b      	asrs	r3, r3, #2
 801eeb8:	9605      	str	r6, [sp, #20]
 801eeba:	f303 030f 	ssat	r3, #16, r3
 801eebe:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 801eec2:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 801eec4:	42b3      	cmp	r3, r6
 801eec6:	dd13      	ble.n	801eef0 <D128_GENERIC+0x330>
 801eec8:	9b01      	ldr	r3, [sp, #4]
 801eeca:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801eecc:	2a01      	cmp	r2, #1
 801eece:	f47f ae95 	bne.w	801ebfc <D128_GENERIC+0x3c>
 801eed2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801eed4:	f109 0610 	add.w	r6, r9, #16
 801eed8:	0681      	lsls	r1, r0, #26
 801eeda:	e9d9 4200 	ldrd	r4, r2, [r9]
 801eede:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 801eee2:	d518      	bpl.n	801ef16 <D128_GENERIC+0x356>
 801eee4:	ba64      	rev16	r4, r4
 801eee6:	ba52      	rev16	r2, r2
 801eee8:	ba5b      	rev16	r3, r3
 801eeea:	ba6d      	rev16	r5, r5
 801eeec:	46b1      	mov	r9, r6
 801eeee:	e6da      	b.n	801eca6 <D128_GENERIC+0xe6>
 801eef0:	f8dd a010 	ldr.w	sl, [sp, #16]
 801eef4:	9b01      	ldr	r3, [sp, #4]
 801eef6:	2000      	movs	r0, #0
 801eef8:	9903      	ldr	r1, [sp, #12]
 801eefa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801eefc:	6099      	str	r1, [r3, #8]
 801eefe:	9902      	ldr	r1, [sp, #8]
 801ef00:	f8c3 a01c 	str.w	sl, [r3, #28]
 801ef04:	60d9      	str	r1, [r3, #12]
 801ef06:	9906      	ldr	r1, [sp, #24]
 801ef08:	619a      	str	r2, [r3, #24]
 801ef0a:	6119      	str	r1, [r3, #16]
 801ef0c:	9907      	ldr	r1, [sp, #28]
 801ef0e:	6159      	str	r1, [r3, #20]
 801ef10:	b00d      	add	sp, #52	; 0x34
 801ef12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef16:	46b1      	mov	r9, r6
 801ef18:	e6c5      	b.n	801eca6 <D128_GENERIC+0xe6>
 801ef1a:	bf00      	nop
 801ef1c:	24000000 	.word	0x24000000
 801ef20:	00780069 	.word	0x00780069
 801ef24:	005b004e 	.word	0x005b004e
 801ef28:	00420037 	.word	0x00420037
 801ef2c:	002d0024 	.word	0x002d0024
 801ef30:	001c0015 	.word	0x001c0015
 801ef34:	000f000a 	.word	0x000f000a
 801ef38:	00060003 	.word	0x00060003
 801ef3c:	00880096 	.word	0x00880096
 801ef40:	00a200ac 	.word	0x00a200ac
 801ef44:	0015001c 	.word	0x0015001c
 801ef48:	0024002d 	.word	0x0024002d
 801ef4c:	00370042 	.word	0x00370042
 801ef50:	004e005b 	.word	0x004e005b
 801ef54:	00690078 	.word	0x00690078
 801ef58:	00b400ba 	.word	0x00b400ba
 801ef5c:	00be00c0 	.word	0x00be00c0
 801ef60:	00c000be 	.word	0x00c000be
 801ef64:	00ba00b4 	.word	0x00ba00b4
 801ef68:	00ac00a2 	.word	0x00ac00a2
 801ef6c:	00960088 	.word	0x00960088
 801ef70:	00030006 	.word	0x00030006
 801ef74:	000a000f 	.word	0x000a000f

0801ef78 <D16_1CH_HTONS_VOL_HP>:
 801ef78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef7c:	6993      	ldr	r3, [r2, #24]
 801ef7e:	b087      	sub	sp, #28
 801ef80:	4682      	mov	sl, r0
 801ef82:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 801ef84:	9304      	str	r3, [sp, #16]
 801ef86:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 801ef8a:	69d3      	ldr	r3, [r2, #28]
 801ef8c:	f8d2 e020 	ldr.w	lr, [r2, #32]
 801ef90:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 801ef94:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 801ef98:	9403      	str	r4, [sp, #12]
 801ef9a:	2800      	cmp	r0, #0
 801ef9c:	d054      	beq.n	801f048 <D16_1CH_HTONS_VOL_HP+0xd0>
 801ef9e:	f1a1 0902 	sub.w	r9, r1, #2
 801efa2:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 801efa6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 801f054 <D16_1CH_HTONS_VOL_HP+0xdc>
 801efaa:	4650      	mov	r0, sl
 801efac:	9101      	str	r1, [sp, #4]
 801efae:	4619      	mov	r1, r3
 801efb0:	f8cd b008 	str.w	fp, [sp, #8]
 801efb4:	9205      	str	r2, [sp, #20]
 801efb6:	f850 3b02 	ldr.w	r3, [r0], #2
 801efba:	ba5b      	rev16	r3, r3
 801efbc:	b2dc      	uxtb	r4, r3
 801efbe:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801efc2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801efc6:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 801efca:	4419      	add	r1, r3
 801efcc:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 801efd0:	f3c1 0309 	ubfx	r3, r1, #0, #10
 801efd4:	f3c4 0209 	ubfx	r2, r4, #0, #10
 801efd8:	0aa1      	lsrs	r1, r4, #10
 801efda:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 801efde:	4a1b      	ldr	r2, [pc, #108]	; (801f04c <D16_1CH_HTONS_VOL_HP+0xd4>)
 801efe0:	fb23 5402 	smlad	r4, r3, r2, r5
 801efe4:	4a1a      	ldr	r2, [pc, #104]	; (801f050 <D16_1CH_HTONS_VOL_HP+0xd8>)
 801efe6:	fb23 f502 	smuad	r5, r3, r2
 801efea:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 801efee:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 801eff2:	f04f 0b00 	mov.w	fp, #0
 801eff6:	19a2      	adds	r2, r4, r6
 801eff8:	eba2 020c 	sub.w	r2, r2, ip
 801effc:	46a4      	mov	ip, r4
 801effe:	17d7      	asrs	r7, r2, #31
 801f000:	fba2 230e 	umull	r2, r3, r2, lr
 801f004:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 801f008:	fb0e 3307 	mla	r3, lr, r7, r3
 801f00c:	f143 0700 	adc.w	r7, r3, #0
 801f010:	9b02      	ldr	r3, [sp, #8]
 801f012:	047a      	lsls	r2, r7, #17
 801f014:	007e      	lsls	r6, r7, #1
 801f016:	fbc3 ab02 	smlal	sl, fp, r3, r2
 801f01a:	ea4f 03ab 	mov.w	r3, fp, asr #2
 801f01e:	f303 030f 	ssat	r3, #16, r3
 801f022:	f829 3f02 	strh.w	r3, [r9, #2]!
 801f026:	9b01      	ldr	r3, [sp, #4]
 801f028:	4298      	cmp	r0, r3
 801f02a:	d1c4      	bne.n	801efb6 <D16_1CH_HTONS_VOL_HP+0x3e>
 801f02c:	460b      	mov	r3, r1
 801f02e:	9a05      	ldr	r2, [sp, #20]
 801f030:	2000      	movs	r0, #0
 801f032:	9903      	ldr	r1, [sp, #12]
 801f034:	61d3      	str	r3, [r2, #28]
 801f036:	9b04      	ldr	r3, [sp, #16]
 801f038:	6095      	str	r5, [r2, #8]
 801f03a:	60d1      	str	r1, [r2, #12]
 801f03c:	6193      	str	r3, [r2, #24]
 801f03e:	e9c2 6404 	strd	r6, r4, [r2, #16]
 801f042:	b007      	add	sp, #28
 801f044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f048:	4664      	mov	r4, ip
 801f04a:	e7f1      	b.n	801f030 <D16_1CH_HTONS_VOL_HP+0xb8>
 801f04c:	00030001 	.word	0x00030001
 801f050:	00010003 	.word	0x00010003
 801f054:	24000000 	.word	0x24000000

0801f058 <D24_1CH_HTONS_VOL_HP>:
 801f058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f05c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 801f05e:	b089      	sub	sp, #36	; 0x24
 801f060:	6993      	ldr	r3, [r2, #24]
 801f062:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 801f064:	9604      	str	r6, [sp, #16]
 801f066:	6a16      	ldr	r6, [r2, #32]
 801f068:	9306      	str	r3, [sp, #24]
 801f06a:	9505      	str	r5, [sp, #20]
 801f06c:	69d3      	ldr	r3, [r2, #28]
 801f06e:	9600      	str	r6, [sp, #0]
 801f070:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 801f074:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 801f078:	2d00      	cmp	r5, #0
 801f07a:	f000 8083 	beq.w	801f184 <D24_1CH_HTONS_VOL_HP+0x12c>
 801f07e:	9207      	str	r2, [sp, #28]
 801f080:	2600      	movs	r6, #0
 801f082:	4622      	mov	r2, r4
 801f084:	f1a1 0b02 	sub.w	fp, r1, #2
 801f088:	4f3f      	ldr	r7, [pc, #252]	; (801f188 <D24_1CH_HTONS_VOL_HP+0x130>)
 801f08a:	461d      	mov	r5, r3
 801f08c:	f8cd a00c 	str.w	sl, [sp, #12]
 801f090:	9c00      	ldr	r4, [sp, #0]
 801f092:	e056      	b.n	801f142 <D24_1CH_HTONS_VOL_HP+0xea>
 801f094:	7841      	ldrb	r1, [r0, #1]
 801f096:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 801f09a:	3002      	adds	r0, #2
 801f09c:	4488      	add	r8, r1
 801f09e:	fa5f f388 	uxtb.w	r3, r8
 801f0a2:	f3c8 2907 	ubfx	r9, r8, #8, #8
 801f0a6:	ea4f 4818 	mov.w	r8, r8, lsr #16
 801f0aa:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 801f0ae:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 801f0b2:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 801f0b6:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 801f0ba:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 801f0be:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801f0c2:	f3c8 0309 	ubfx	r3, r8, #0, #10
 801f0c6:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 801f0ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801f0ce:	492f      	ldr	r1, [pc, #188]	; (801f18c <D24_1CH_HTONS_VOL_HP+0x134>)
 801f0d0:	fb23 e901 	smlad	r9, r3, r1, lr
 801f0d4:	492e      	ldr	r1, [pc, #184]	; (801f190 <D24_1CH_HTONS_VOL_HP+0x138>)
 801f0d6:	fb23 ce01 	smlad	lr, r3, r1, ip
 801f0da:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 801f0de:	2101      	movs	r1, #1
 801f0e0:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 801f0e4:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 801f0e8:	fb23 f301 	smuad	r3, r3, r1
 801f0ec:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 801f0f0:	eb08 0c03 	add.w	ip, r8, r3
 801f0f4:	9b03      	ldr	r3, [sp, #12]
 801f0f6:	f04f 0a00 	mov.w	sl, #0
 801f0fa:	440a      	add	r2, r1
 801f0fc:	3601      	adds	r6, #1
 801f0fe:	9103      	str	r1, [sp, #12]
 801f100:	1ad2      	subs	r2, r2, r3
 801f102:	ea4f 79e2 	mov.w	r9, r2, asr #31
 801f106:	fba2 2304 	umull	r2, r3, r2, r4
 801f10a:	e9cd 2300 	strd	r2, r3, [sp]
 801f10e:	fb04 3309 	mla	r3, r4, r9, r3
 801f112:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 801f116:	9301      	str	r3, [sp, #4]
 801f118:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f11c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 801f120:	f143 0300 	adc.w	r3, r3, #0
 801f124:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 801f128:	005a      	lsls	r2, r3, #1
 801f12a:	9b04      	ldr	r3, [sp, #16]
 801f12c:	fbc3 9a08 	smlal	r9, sl, r3, r8
 801f130:	ea4f 03aa 	mov.w	r3, sl, asr #2
 801f134:	f303 030f 	ssat	r3, #16, r3
 801f138:	f82b 3f02 	strh.w	r3, [fp, #2]!
 801f13c:	9b05      	ldr	r3, [sp, #20]
 801f13e:	429e      	cmp	r6, r3
 801f140:	d010      	beq.n	801f164 <D24_1CH_HTONS_VOL_HP+0x10c>
 801f142:	f890 9003 	ldrb.w	r9, [r0, #3]
 801f146:	f016 0f01 	tst.w	r6, #1
 801f14a:	7801      	ldrb	r1, [r0, #0]
 801f14c:	ea4f 2309 	mov.w	r3, r9, lsl #8
 801f150:	ea4f 2801 	mov.w	r8, r1, lsl #8
 801f154:	d09e      	beq.n	801f094 <D24_1CH_HTONS_VOL_HP+0x3c>
 801f156:	f890 8002 	ldrb.w	r8, [r0, #2]
 801f15a:	3004      	adds	r0, #4
 801f15c:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 801f160:	4488      	add	r8, r1
 801f162:	e79c      	b.n	801f09e <D24_1CH_HTONS_VOL_HP+0x46>
 801f164:	4614      	mov	r4, r2
 801f166:	462b      	mov	r3, r5
 801f168:	9a07      	ldr	r2, [sp, #28]
 801f16a:	2000      	movs	r0, #0
 801f16c:	61d3      	str	r3, [r2, #28]
 801f16e:	9b06      	ldr	r3, [sp, #24]
 801f170:	f8c2 c008 	str.w	ip, [r2, #8]
 801f174:	f8c2 e00c 	str.w	lr, [r2, #12]
 801f178:	6193      	str	r3, [r2, #24]
 801f17a:	e9c2 4104 	strd	r4, r1, [r2, #16]
 801f17e:	b009      	add	sp, #36	; 0x24
 801f180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f184:	4651      	mov	r1, sl
 801f186:	e7f0      	b.n	801f16a <D24_1CH_HTONS_VOL_HP+0x112>
 801f188:	24000000 	.word	0x24000000
 801f18c:	00030001 	.word	0x00030001
 801f190:	00060007 	.word	0x00060007

0801f194 <D32_1CH_HTONS_VOL_HP>:
 801f194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f198:	6993      	ldr	r3, [r2, #24]
 801f19a:	b087      	sub	sp, #28
 801f19c:	4683      	mov	fp, r0
 801f19e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 801f1a0:	9304      	str	r3, [sp, #16]
 801f1a2:	69d5      	ldr	r5, [r2, #28]
 801f1a4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 801f1a6:	f8d2 a020 	ldr.w	sl, [r2, #32]
 801f1aa:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 801f1ae:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 801f1b2:	2800      	cmp	r0, #0
 801f1b4:	d077      	beq.n	801f2a6 <D32_1CH_HTONS_VOL_HP+0x112>
 801f1b6:	460f      	mov	r7, r1
 801f1b8:	46f1      	mov	r9, lr
 801f1ba:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 801f1be:	f8cd 8000 	str.w	r8, [sp]
 801f1c2:	4e3a      	ldr	r6, [pc, #232]	; (801f2ac <D32_1CH_HTONS_VOL_HP+0x118>)
 801f1c4:	469e      	mov	lr, r3
 801f1c6:	46a0      	mov	r8, r4
 801f1c8:	9103      	str	r1, [sp, #12]
 801f1ca:	9205      	str	r2, [sp, #20]
 801f1cc:	f85b 4b04 	ldr.w	r4, [fp], #4
 801f1d0:	ba64      	rev16	r4, r4
 801f1d2:	b2e0      	uxtb	r0, r4
 801f1d4:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801f1d8:	f3c4 4107 	ubfx	r1, r4, #16, #8
 801f1dc:	0e24      	lsrs	r4, r4, #24
 801f1de:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f1e2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f1e6:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 801f1ea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f1ee:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 801f1f2:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 801f1f6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801f1fa:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 801f1fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801f202:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801f206:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801f20a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f20e:	f3c5 0009 	ubfx	r0, r5, #0, #10
 801f212:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 801f216:	4826      	ldr	r0, [pc, #152]	; (801f2b0 <D32_1CH_HTONS_VOL_HP+0x11c>)
 801f218:	fb23 c400 	smlad	r4, r3, r0, ip
 801f21c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801f220:	fb21 4402 	smlad	r4, r1, r2, r4
 801f224:	4823      	ldr	r0, [pc, #140]	; (801f2b4 <D32_1CH_HTONS_VOL_HP+0x120>)
 801f226:	fb23 ec00 	smlad	ip, r3, r0, lr
 801f22a:	4823      	ldr	r0, [pc, #140]	; (801f2b8 <D32_1CH_HTONS_VOL_HP+0x124>)
 801f22c:	fb21 cc00 	smlad	ip, r1, r0, ip
 801f230:	2201      	movs	r2, #1
 801f232:	fb23 f302 	smuad	r3, r3, r2
 801f236:	4821      	ldr	r0, [pc, #132]	; (801f2bc <D32_1CH_HTONS_VOL_HP+0x128>)
 801f238:	fb21 3e00 	smlad	lr, r1, r0, r3
 801f23c:	9b00      	ldr	r3, [sp, #0]
 801f23e:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 801f242:	4423      	add	r3, r4
 801f244:	eba3 0209 	sub.w	r2, r3, r9
 801f248:	46a1      	mov	r9, r4
 801f24a:	17d1      	asrs	r1, r2, #31
 801f24c:	fba2 230a 	umull	r2, r3, r2, sl
 801f250:	e9cd 2300 	strd	r2, r3, [sp]
 801f254:	fb0a 3301 	mla	r3, sl, r1, r3
 801f258:	9301      	str	r3, [sp, #4]
 801f25a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f25e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 801f262:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801f266:	f143 0300 	adc.w	r3, r3, #0
 801f26a:	0399      	lsls	r1, r3, #14
 801f26c:	005b      	lsls	r3, r3, #1
 801f26e:	9300      	str	r3, [sp, #0]
 801f270:	2300      	movs	r3, #0
 801f272:	fbc8 2301 	smlal	r2, r3, r8, r1
 801f276:	109b      	asrs	r3, r3, #2
 801f278:	f303 030f 	ssat	r3, #16, r3
 801f27c:	f827 3b02 	strh.w	r3, [r7], #2
 801f280:	9b03      	ldr	r3, [sp, #12]
 801f282:	429f      	cmp	r7, r3
 801f284:	d1a2      	bne.n	801f1cc <D32_1CH_HTONS_VOL_HP+0x38>
 801f286:	4673      	mov	r3, lr
 801f288:	f8dd 8000 	ldr.w	r8, [sp]
 801f28c:	9a05      	ldr	r2, [sp, #20]
 801f28e:	6093      	str	r3, [r2, #8]
 801f290:	2000      	movs	r0, #0
 801f292:	9b04      	ldr	r3, [sp, #16]
 801f294:	f8c2 c00c 	str.w	ip, [r2, #12]
 801f298:	61d5      	str	r5, [r2, #28]
 801f29a:	6193      	str	r3, [r2, #24]
 801f29c:	e9c2 8404 	strd	r8, r4, [r2, #16]
 801f2a0:	b007      	add	sp, #28
 801f2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2a6:	4674      	mov	r4, lr
 801f2a8:	e7f1      	b.n	801f28e <D32_1CH_HTONS_VOL_HP+0xfa>
 801f2aa:	bf00      	nop
 801f2ac:	24000000 	.word	0x24000000
 801f2b0:	00060003 	.word	0x00060003
 801f2b4:	000a000c 	.word	0x000a000c
 801f2b8:	000c000a 	.word	0x000c000a
 801f2bc:	00030006 	.word	0x00030006

0801f2c0 <D48_1CH_HTONS_VOL_HP>:
 801f2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2c4:	6b17      	ldr	r7, [r2, #48]	; 0x30
 801f2c6:	b087      	sub	sp, #28
 801f2c8:	6993      	ldr	r3, [r2, #24]
 801f2ca:	9701      	str	r7, [sp, #4]
 801f2cc:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 801f2ce:	6a17      	ldr	r7, [r2, #32]
 801f2d0:	9304      	str	r3, [sp, #16]
 801f2d2:	69d6      	ldr	r6, [r2, #28]
 801f2d4:	9702      	str	r7, [sp, #8]
 801f2d6:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 801f2da:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 801f2de:	2d00      	cmp	r5, #0
 801f2e0:	f000 8093 	beq.w	801f40a <D48_1CH_HTONS_VOL_HP+0x14a>
 801f2e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f2e8:	f1a1 0b02 	sub.w	fp, r1, #2
 801f2ec:	46f2      	mov	sl, lr
 801f2ee:	4f48      	ldr	r7, [pc, #288]	; (801f410 <D48_1CH_HTONS_VOL_HP+0x150>)
 801f2f0:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 801f2f4:	469e      	mov	lr, r3
 801f2f6:	9205      	str	r2, [sp, #20]
 801f2f8:	9103      	str	r1, [sp, #12]
 801f2fa:	e9d0 3200 	ldrd	r3, r2, [r0]
 801f2fe:	3006      	adds	r0, #6
 801f300:	ba5b      	rev16	r3, r3
 801f302:	fa92 f992 	rev16.w	r9, r2
 801f306:	b2dd      	uxtb	r5, r3
 801f308:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801f30c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801f310:	0e1b      	lsrs	r3, r3, #24
 801f312:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801f316:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 801f31a:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 801f31e:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 801f322:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801f326:	fa5f f289 	uxtb.w	r2, r9
 801f32a:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 801f32e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f332:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801f336:	f3c6 0809 	ubfx	r8, r6, #0, #10
 801f33a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801f33e:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 801f342:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801f346:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 801f34a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801f34e:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 801f352:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 801f356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801f35a:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 801f35e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801f362:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 801f366:	f3c6 0309 	ubfx	r3, r6, #0, #10
 801f36a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 801f36e:	4b29      	ldr	r3, [pc, #164]	; (801f414 <D48_1CH_HTONS_VOL_HP+0x154>)
 801f370:	fb28 c103 	smlad	r1, r8, r3, ip
 801f374:	4b28      	ldr	r3, [pc, #160]	; (801f418 <D48_1CH_HTONS_VOL_HP+0x158>)
 801f376:	fb25 1103 	smlad	r1, r5, r3, r1
 801f37a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801f37e:	fb22 1903 	smlad	r9, r2, r3, r1
 801f382:	4b26      	ldr	r3, [pc, #152]	; (801f41c <D48_1CH_HTONS_VOL_HP+0x15c>)
 801f384:	fb28 ec03 	smlad	ip, r8, r3, lr
 801f388:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 801f38c:	fb25 cc03 	smlad	ip, r5, r3, ip
 801f390:	4b23      	ldr	r3, [pc, #140]	; (801f420 <D48_1CH_HTONS_VOL_HP+0x160>)
 801f392:	fb22 cc03 	smlad	ip, r2, r3, ip
 801f396:	2101      	movs	r1, #1
 801f398:	fb28 f801 	smuad	r8, r8, r1
 801f39c:	4b21      	ldr	r3, [pc, #132]	; (801f424 <D48_1CH_HTONS_VOL_HP+0x164>)
 801f39e:	fb25 8503 	smlad	r5, r5, r3, r8
 801f3a2:	4b21      	ldr	r3, [pc, #132]	; (801f428 <D48_1CH_HTONS_VOL_HP+0x168>)
 801f3a4:	fb22 5e03 	smlad	lr, r2, r3, r5
 801f3a8:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 801f3ac:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 801f3b0:	190a      	adds	r2, r1, r4
 801f3b2:	9c02      	ldr	r4, [sp, #8]
 801f3b4:	eba2 020a 	sub.w	r2, r2, sl
 801f3b8:	468a      	mov	sl, r1
 801f3ba:	ea4f 79e2 	mov.w	r9, r2, asr #31
 801f3be:	fba2 2304 	umull	r2, r3, r2, r4
 801f3c2:	fb04 3309 	mla	r3, r4, r9, r3
 801f3c6:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 801f3ca:	f04f 0900 	mov.w	r9, #0
 801f3ce:	f143 0500 	adc.w	r5, r3, #0
 801f3d2:	9b01      	ldr	r3, [sp, #4]
 801f3d4:	032a      	lsls	r2, r5, #12
 801f3d6:	006c      	lsls	r4, r5, #1
 801f3d8:	fbc3 8902 	smlal	r8, r9, r3, r2
 801f3dc:	ea4f 03a9 	mov.w	r3, r9, asr #2
 801f3e0:	f303 030f 	ssat	r3, #16, r3
 801f3e4:	f82b 3f02 	strh.w	r3, [fp, #2]!
 801f3e8:	9b03      	ldr	r3, [sp, #12]
 801f3ea:	4283      	cmp	r3, r0
 801f3ec:	d185      	bne.n	801f2fa <D48_1CH_HTONS_VOL_HP+0x3a>
 801f3ee:	4673      	mov	r3, lr
 801f3f0:	9a05      	ldr	r2, [sp, #20]
 801f3f2:	6093      	str	r3, [r2, #8]
 801f3f4:	2000      	movs	r0, #0
 801f3f6:	9b04      	ldr	r3, [sp, #16]
 801f3f8:	f8c2 c00c 	str.w	ip, [r2, #12]
 801f3fc:	61d6      	str	r6, [r2, #28]
 801f3fe:	6193      	str	r3, [r2, #24]
 801f400:	e9c2 4104 	strd	r4, r1, [r2, #16]
 801f404:	b007      	add	sp, #28
 801f406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f40a:	4671      	mov	r1, lr
 801f40c:	e7f1      	b.n	801f3f2 <D48_1CH_HTONS_VOL_HP+0x132>
 801f40e:	bf00      	nop
 801f410:	24000000 	.word	0x24000000
 801f414:	000f000a 	.word	0x000f000a
 801f418:	00060003 	.word	0x00060003
 801f41c:	00150019 	.word	0x00150019
 801f420:	00190015 	.word	0x00190015
 801f424:	00030006 	.word	0x00030006
 801f428:	000a000f 	.word	0x000a000f

0801f42c <D64_1CH_HTONS_VOL_HP>:
 801f42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f430:	6b15      	ldr	r5, [r2, #48]	; 0x30
 801f432:	b089      	sub	sp, #36	; 0x24
 801f434:	6993      	ldr	r3, [r2, #24]
 801f436:	4686      	mov	lr, r0
 801f438:	9503      	str	r5, [sp, #12]
 801f43a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 801f43c:	6a15      	ldr	r5, [r2, #32]
 801f43e:	9306      	str	r3, [sp, #24]
 801f440:	69d6      	ldr	r6, [r2, #28]
 801f442:	9504      	str	r5, [sp, #16]
 801f444:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 801f448:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 801f44c:	2800      	cmp	r0, #0
 801f44e:	f000 80a4 	beq.w	801f59a <D64_1CH_HTONS_VOL_HP+0x16e>
 801f452:	460f      	mov	r7, r1
 801f454:	46f1      	mov	r9, lr
 801f456:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 801f45a:	4d56      	ldr	r5, [pc, #344]	; (801f5b4 <D64_1CH_HTONS_VOL_HP+0x188>)
 801f45c:	46a2      	mov	sl, r4
 801f45e:	469e      	mov	lr, r3
 801f460:	9105      	str	r1, [sp, #20]
 801f462:	9207      	str	r2, [sp, #28]
 801f464:	f859 1b08 	ldr.w	r1, [r9], #8
 801f468:	f859 3c04 	ldr.w	r3, [r9, #-4]
 801f46c:	ba49      	rev16	r1, r1
 801f46e:	fa93 fb93 	rev16.w	fp, r3
 801f472:	b2cb      	uxtb	r3, r1
 801f474:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801f478:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801f47c:	0e09      	lsrs	r1, r1, #24
 801f47e:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 801f482:	fa5f f38b 	uxtb.w	r3, fp
 801f486:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f48a:	4426      	add	r6, r4
 801f48c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 801f490:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801f494:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 801f498:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801f49c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801f4a0:	f3cb 2307 	ubfx	r3, fp, #8, #8
 801f4a4:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 801f4a8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801f4ac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f4b0:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 801f4b4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801f4b8:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 801f4bc:	f3cb 4607 	ubfx	r6, fp, #16, #8
 801f4c0:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 801f4c4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801f4c8:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801f4cc:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 801f4d0:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 801f4d4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801f4d8:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 801f4dc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801f4e0:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 801f4e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801f4e8:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 801f4ec:	f3c6 0409 	ubfx	r4, r6, #0, #10
 801f4f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f4f4:	f3cb 0009 	ubfx	r0, fp, #0, #10
 801f4f8:	ea4f 269b 	mov.w	r6, fp, lsr #10
 801f4fc:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 801f500:	482d      	ldr	r0, [pc, #180]	; (801f5b8 <D64_1CH_HTONS_VOL_HP+0x18c>)
 801f502:	fb22 cc00 	smlad	ip, r2, r0, ip
 801f506:	482d      	ldr	r0, [pc, #180]	; (801f5bc <D64_1CH_HTONS_VOL_HP+0x190>)
 801f508:	fb21 cc00 	smlad	ip, r1, r0, ip
 801f50c:	482c      	ldr	r0, [pc, #176]	; (801f5c0 <D64_1CH_HTONS_VOL_HP+0x194>)
 801f50e:	fb23 cc00 	smlad	ip, r3, r0, ip
 801f512:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801f516:	fb2b c404 	smlad	r4, fp, r4, ip
 801f51a:	482a      	ldr	r0, [pc, #168]	; (801f5c4 <D64_1CH_HTONS_VOL_HP+0x198>)
 801f51c:	fb22 ec00 	smlad	ip, r2, r0, lr
 801f520:	fb2b cc10 	smladx	ip, fp, r0, ip
 801f524:	4828      	ldr	r0, [pc, #160]	; (801f5c8 <D64_1CH_HTONS_VOL_HP+0x19c>)
 801f526:	fb21 cc00 	smlad	ip, r1, r0, ip
 801f52a:	fb23 cc10 	smladx	ip, r3, r0, ip
 801f52e:	f04f 0e01 	mov.w	lr, #1
 801f532:	fb22 f20e 	smuad	r2, r2, lr
 801f536:	4825      	ldr	r0, [pc, #148]	; (801f5cc <D64_1CH_HTONS_VOL_HP+0x1a0>)
 801f538:	fb21 2100 	smlad	r1, r1, r0, r2
 801f53c:	4a24      	ldr	r2, [pc, #144]	; (801f5d0 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 801f53e:	fb23 1302 	smlad	r3, r3, r2, r1
 801f542:	4a24      	ldr	r2, [pc, #144]	; (801f5d4 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 801f544:	fb2b 3e02 	smlad	lr, fp, r2, r3
 801f548:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 801f54c:	eb04 0208 	add.w	r2, r4, r8
 801f550:	eba2 020a 	sub.w	r2, r2, sl
 801f554:	46a2      	mov	sl, r4
 801f556:	4610      	mov	r0, r2
 801f558:	17d1      	asrs	r1, r2, #31
 801f55a:	e9cd 0100 	strd	r0, r1, [sp]
 801f55e:	9904      	ldr	r1, [sp, #16]
 801f560:	9801      	ldr	r0, [sp, #4]
 801f562:	fba2 2301 	umull	r2, r3, r2, r1
 801f566:	fb01 3300 	mla	r3, r1, r0, r3
 801f56a:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 801f56e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801f572:	f143 0100 	adc.w	r1, r3, #0
 801f576:	9b03      	ldr	r3, [sp, #12]
 801f578:	02ca      	lsls	r2, r1, #11
 801f57a:	ea4f 0841 	mov.w	r8, r1, lsl #1
 801f57e:	2100      	movs	r1, #0
 801f580:	fbc3 0102 	smlal	r0, r1, r3, r2
 801f584:	108b      	asrs	r3, r1, #2
 801f586:	f303 030f 	ssat	r3, #16, r3
 801f58a:	f827 3b02 	strh.w	r3, [r7], #2
 801f58e:	9b05      	ldr	r3, [sp, #20]
 801f590:	429f      	cmp	r7, r3
 801f592:	f47f af67 	bne.w	801f464 <D64_1CH_HTONS_VOL_HP+0x38>
 801f596:	4673      	mov	r3, lr
 801f598:	9a07      	ldr	r2, [sp, #28]
 801f59a:	6093      	str	r3, [r2, #8]
 801f59c:	2000      	movs	r0, #0
 801f59e:	9b06      	ldr	r3, [sp, #24]
 801f5a0:	f8c2 c00c 	str.w	ip, [r2, #12]
 801f5a4:	61d6      	str	r6, [r2, #28]
 801f5a6:	6193      	str	r3, [r2, #24]
 801f5a8:	e9c2 8404 	strd	r8, r4, [r2, #16]
 801f5ac:	b009      	add	sp, #36	; 0x24
 801f5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5b2:	bf00      	nop
 801f5b4:	24000000 	.word	0x24000000
 801f5b8:	001c0015 	.word	0x001c0015
 801f5bc:	000f000a 	.word	0x000f000a
 801f5c0:	00060003 	.word	0x00060003
 801f5c4:	0024002a 	.word	0x0024002a
 801f5c8:	002e0030 	.word	0x002e0030
 801f5cc:	00030006 	.word	0x00030006
 801f5d0:	000a000f 	.word	0x000a000f
 801f5d4:	0015001c 	.word	0x0015001c

0801f5d8 <D80_1CH_HTONS_VOL_HP>:
 801f5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5dc:	6913      	ldr	r3, [r2, #16]
 801f5de:	b089      	sub	sp, #36	; 0x24
 801f5e0:	6b16      	ldr	r6, [r2, #48]	; 0x30
 801f5e2:	9301      	str	r3, [sp, #4]
 801f5e4:	9603      	str	r6, [sp, #12]
 801f5e6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 801f5e8:	6a16      	ldr	r6, [r2, #32]
 801f5ea:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 801f5ee:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 801f5f2:	9306      	str	r3, [sp, #24]
 801f5f4:	9604      	str	r6, [sp, #16]
 801f5f6:	69d3      	ldr	r3, [r2, #28]
 801f5f8:	2c00      	cmp	r4, #0
 801f5fa:	f000 80ce 	beq.w	801f79a <D80_1CH_HTONS_VOL_HP+0x1c2>
 801f5fe:	3902      	subs	r1, #2
 801f600:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801f604:	4e66      	ldr	r6, [pc, #408]	; (801f7a0 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 801f606:	469e      	mov	lr, r3
 801f608:	9102      	str	r1, [sp, #8]
 801f60a:	46aa      	mov	sl, r5
 801f60c:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 801f610:	9207      	str	r2, [sp, #28]
 801f612:	9105      	str	r1, [sp, #20]
 801f614:	6883      	ldr	r3, [r0, #8]
 801f616:	e9d0 4200 	ldrd	r4, r2, [r0]
 801f61a:	300a      	adds	r0, #10
 801f61c:	ba64      	rev16	r4, r4
 801f61e:	ba52      	rev16	r2, r2
 801f620:	fa93 fb93 	rev16.w	fp, r3
 801f624:	b2e5      	uxtb	r5, r4
 801f626:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801f62a:	f3c4 4107 	ubfx	r1, r4, #16, #8
 801f62e:	0e24      	lsrs	r4, r4, #24
 801f630:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 801f634:	b2d5      	uxtb	r5, r2
 801f636:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f63a:	44c6      	add	lr, r8
 801f63c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f640:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 801f644:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 801f648:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 801f64c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801f650:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 801f654:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801f658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801f65c:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 801f660:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f664:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 801f668:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 801f66c:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 801f670:	f3c2 4507 	ubfx	r5, r2, #16, #8
 801f674:	0e12      	lsrs	r2, r2, #24
 801f676:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 801f67a:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 801f67e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 801f682:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801f686:	fa5f fb8b 	uxtb.w	fp, fp
 801f68a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801f68e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801f692:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 801f696:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801f69a:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 801f69e:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801f6a2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801f6a6:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 801f6aa:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 801f6ae:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801f6b2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801f6b6:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 801f6ba:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 801f6be:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 801f6c2:	f3ce 0109 	ubfx	r1, lr, #0, #10
 801f6c6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 801f6ca:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 801f6ce:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 801f6d2:	4934      	ldr	r1, [pc, #208]	; (801f7a4 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 801f6d4:	fb23 cc01 	smlad	ip, r3, r1, ip
 801f6d8:	4933      	ldr	r1, [pc, #204]	; (801f7a8 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 801f6da:	fb24 cc01 	smlad	ip, r4, r1, ip
 801f6de:	4933      	ldr	r1, [pc, #204]	; (801f7ac <D80_1CH_HTONS_VOL_HP+0x1d4>)
 801f6e0:	fb28 cc01 	smlad	ip, r8, r1, ip
 801f6e4:	4932      	ldr	r1, [pc, #200]	; (801f7b0 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 801f6e6:	fb22 cc01 	smlad	ip, r2, r1, ip
 801f6ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801f6ee:	fb2b c901 	smlad	r9, fp, r1, ip
 801f6f2:	4930      	ldr	r1, [pc, #192]	; (801f7b4 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 801f6f4:	fb23 7701 	smlad	r7, r3, r1, r7
 801f6f8:	492f      	ldr	r1, [pc, #188]	; (801f7b8 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 801f6fa:	fb24 7701 	smlad	r7, r4, r1, r7
 801f6fe:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 801f702:	fb28 7c0c 	smlad	ip, r8, ip, r7
 801f706:	492d      	ldr	r1, [pc, #180]	; (801f7bc <D80_1CH_HTONS_VOL_HP+0x1e4>)
 801f708:	fb22 cc01 	smlad	ip, r2, r1, ip
 801f70c:	492c      	ldr	r1, [pc, #176]	; (801f7c0 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 801f70e:	fb2b cc01 	smlad	ip, fp, r1, ip
 801f712:	2101      	movs	r1, #1
 801f714:	fb23 f301 	smuad	r3, r3, r1
 801f718:	492a      	ldr	r1, [pc, #168]	; (801f7c4 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 801f71a:	fb24 3401 	smlad	r4, r4, r1, r3
 801f71e:	492a      	ldr	r1, [pc, #168]	; (801f7c8 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 801f720:	fb28 4101 	smlad	r1, r8, r1, r4
 801f724:	4f29      	ldr	r7, [pc, #164]	; (801f7cc <D80_1CH_HTONS_VOL_HP+0x1f4>)
 801f726:	fb22 1207 	smlad	r2, r2, r7, r1
 801f72a:	4f29      	ldr	r7, [pc, #164]	; (801f7d0 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 801f72c:	fb2b 2707 	smlad	r7, fp, r7, r2
 801f730:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 801f734:	9b01      	ldr	r3, [sp, #4]
 801f736:	9c04      	ldr	r4, [sp, #16]
 801f738:	440b      	add	r3, r1
 801f73a:	eba3 020a 	sub.w	r2, r3, sl
 801f73e:	468a      	mov	sl, r1
 801f740:	ea4f 79e2 	mov.w	r9, r2, asr #31
 801f744:	fba2 2304 	umull	r2, r3, r2, r4
 801f748:	fb04 3309 	mla	r3, r4, r9, r3
 801f74c:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 801f750:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801f754:	f143 0500 	adc.w	r5, r3, #0
 801f758:	006b      	lsls	r3, r5, #1
 801f75a:	02aa      	lsls	r2, r5, #10
 801f75c:	2500      	movs	r5, #0
 801f75e:	9301      	str	r3, [sp, #4]
 801f760:	9b03      	ldr	r3, [sp, #12]
 801f762:	fbc3 4502 	smlal	r4, r5, r3, r2
 801f766:	9a02      	ldr	r2, [sp, #8]
 801f768:	10ab      	asrs	r3, r5, #2
 801f76a:	f303 030f 	ssat	r3, #16, r3
 801f76e:	f822 3f02 	strh.w	r3, [r2, #2]!
 801f772:	9b05      	ldr	r3, [sp, #20]
 801f774:	9202      	str	r2, [sp, #8]
 801f776:	4298      	cmp	r0, r3
 801f778:	f47f af4c 	bne.w	801f614 <D80_1CH_HTONS_VOL_HP+0x3c>
 801f77c:	4673      	mov	r3, lr
 801f77e:	9a07      	ldr	r2, [sp, #28]
 801f780:	61d3      	str	r3, [r2, #28]
 801f782:	2000      	movs	r0, #0
 801f784:	9b01      	ldr	r3, [sp, #4]
 801f786:	6097      	str	r7, [r2, #8]
 801f788:	f8c2 c00c 	str.w	ip, [r2, #12]
 801f78c:	e9c2 3104 	strd	r3, r1, [r2, #16]
 801f790:	9b06      	ldr	r3, [sp, #24]
 801f792:	6193      	str	r3, [r2, #24]
 801f794:	b009      	add	sp, #36	; 0x24
 801f796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f79a:	4629      	mov	r1, r5
 801f79c:	e7f0      	b.n	801f780 <D80_1CH_HTONS_VOL_HP+0x1a8>
 801f79e:	bf00      	nop
 801f7a0:	24000000 	.word	0x24000000
 801f7a4:	002d0024 	.word	0x002d0024
 801f7a8:	001c0015 	.word	0x001c0015
 801f7ac:	000f000a 	.word	0x000f000a
 801f7b0:	00060003 	.word	0x00060003
 801f7b4:	0037003f 	.word	0x0037003f
 801f7b8:	00450049 	.word	0x00450049
 801f7bc:	00490045 	.word	0x00490045
 801f7c0:	003f0037 	.word	0x003f0037
 801f7c4:	00030006 	.word	0x00030006
 801f7c8:	000a000f 	.word	0x000a000f
 801f7cc:	0015001c 	.word	0x0015001c
 801f7d0:	0024002d 	.word	0x0024002d

0801f7d4 <D128_1CH_HTONS_VOL_HP>:
 801f7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7d8:	6914      	ldr	r4, [r2, #16]
 801f7da:	b08d      	sub	sp, #52	; 0x34
 801f7dc:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 801f7de:	9404      	str	r4, [sp, #16]
 801f7e0:	6954      	ldr	r4, [r2, #20]
 801f7e2:	920b      	str	r2, [sp, #44]	; 0x2c
 801f7e4:	9405      	str	r4, [sp, #20]
 801f7e6:	6994      	ldr	r4, [r2, #24]
 801f7e8:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 801f7ec:	940a      	str	r4, [sp, #40]	; 0x28
 801f7ee:	6894      	ldr	r4, [r2, #8]
 801f7f0:	9403      	str	r4, [sp, #12]
 801f7f2:	68d4      	ldr	r4, [r2, #12]
 801f7f4:	9402      	str	r4, [sp, #8]
 801f7f6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 801f7f8:	6a12      	ldr	r2, [r2, #32]
 801f7fa:	9407      	str	r4, [sp, #28]
 801f7fc:	9208      	str	r2, [sp, #32]
 801f7fe:	2b00      	cmp	r3, #0
 801f800:	f000 812e 	beq.w	801fa60 <D128_1CH_HTONS_VOL_HP+0x28c>
 801f804:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801f808:	f100 0b10 	add.w	fp, r0, #16
 801f80c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 801faa0 <D128_1CH_HTONS_VOL_HP+0x2cc>
 801f810:	9106      	str	r1, [sp, #24]
 801f812:	9309      	str	r3, [sp, #36]	; 0x24
 801f814:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 801f818:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 801f81c:	ba40      	rev16	r0, r0
 801f81e:	ba52      	rev16	r2, r2
 801f820:	ba5b      	rev16	r3, r3
 801f822:	ba76      	rev16	r6, r6
 801f824:	b2c5      	uxtb	r5, r0
 801f826:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801f82a:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801f82e:	0e00      	lsrs	r0, r0, #24
 801f830:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 801f834:	b2d5      	uxtb	r5, r2
 801f836:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 801f83a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 801f83e:	44bc      	add	ip, r7
 801f840:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801f844:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 801f848:	f3c2 4007 	ubfx	r0, r2, #16, #8
 801f84c:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 801f850:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 801f854:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 801f858:	0e12      	lsrs	r2, r2, #24
 801f85a:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 801f85e:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 801f862:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801f866:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801f86a:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 801f86e:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 801f872:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801f876:	b2da      	uxtb	r2, r3
 801f878:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 801f87c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801f880:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 801f884:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 801f888:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 801f88c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801f890:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 801f894:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801f898:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 801f89c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801f8a0:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 801f8a4:	f3c3 4107 	ubfx	r1, r3, #16, #8
 801f8a8:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 801f8ac:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801f8b0:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 801f8b4:	0e1b      	lsrs	r3, r3, #24
 801f8b6:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 801f8ba:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801f8be:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 801f8c2:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801f8c6:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 801f8ca:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801f8ce:	b2f3      	uxtb	r3, r6
 801f8d0:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 801f8d4:	f3c8 0009 	ubfx	r0, r8, #0, #10
 801f8d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801f8dc:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801f8e0:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 801f8e4:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 801f8e8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801f8ec:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801f8f0:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 801f8f4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801f8f8:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801f8fc:	0e36      	lsrs	r6, r6, #24
 801f8fe:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 801f902:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801f906:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 801f90a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801f90e:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 801f912:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801f916:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 801f91a:	f3c2 0309 	ubfx	r3, r2, #0, #10
 801f91e:	9101      	str	r1, [sp, #4]
 801f920:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 801f924:	9b02      	ldr	r3, [sp, #8]
 801f926:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 801f92a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801f92e:	4611      	mov	r1, r2
 801f930:	f3cc 0209 	ubfx	r2, ip, #0, #10
 801f934:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 801f938:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 801f93c:	4a49      	ldr	r2, [pc, #292]	; (801fa64 <D128_1CH_HTONS_VOL_HP+0x290>)
 801f93e:	fb2e 3202 	smlad	r2, lr, r2, r3
 801f942:	4b49      	ldr	r3, [pc, #292]	; (801fa68 <D128_1CH_HTONS_VOL_HP+0x294>)
 801f944:	fb27 2203 	smlad	r2, r7, r3, r2
 801f948:	4b48      	ldr	r3, [pc, #288]	; (801fa6c <D128_1CH_HTONS_VOL_HP+0x298>)
 801f94a:	fb25 2203 	smlad	r2, r5, r3, r2
 801f94e:	4b48      	ldr	r3, [pc, #288]	; (801fa70 <D128_1CH_HTONS_VOL_HP+0x29c>)
 801f950:	fb24 2203 	smlad	r2, r4, r3, r2
 801f954:	4b47      	ldr	r3, [pc, #284]	; (801fa74 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 801f956:	fb20 2803 	smlad	r8, r0, r3, r2
 801f95a:	4b47      	ldr	r3, [pc, #284]	; (801fa78 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 801f95c:	9a01      	ldr	r2, [sp, #4]
 801f95e:	fb22 8203 	smlad	r2, r2, r3, r8
 801f962:	4b46      	ldr	r3, [pc, #280]	; (801fa7c <D128_1CH_HTONS_VOL_HP+0x2a8>)
 801f964:	9102      	str	r1, [sp, #8]
 801f966:	fb21 2203 	smlad	r2, r1, r3, r2
 801f96a:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 801f96e:	fb26 2308 	smlad	r3, r6, r8, r2
 801f972:	4619      	mov	r1, r3
 801f974:	9a03      	ldr	r2, [sp, #12]
 801f976:	4b42      	ldr	r3, [pc, #264]	; (801fa80 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 801f978:	fb2e 2803 	smlad	r8, lr, r3, r2
 801f97c:	4b41      	ldr	r3, [pc, #260]	; (801fa84 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 801f97e:	fb27 8a03 	smlad	sl, r7, r3, r8
 801f982:	f8df 8120 	ldr.w	r8, [pc, #288]	; 801faa4 <D128_1CH_HTONS_VOL_HP+0x2d0>
 801f986:	fb25 a808 	smlad	r8, r5, r8, sl
 801f98a:	f8df a11c 	ldr.w	sl, [pc, #284]	; 801faa8 <D128_1CH_HTONS_VOL_HP+0x2d4>
 801f98e:	fb24 880a 	smlad	r8, r4, sl, r8
 801f992:	f8df a118 	ldr.w	sl, [pc, #280]	; 801faac <D128_1CH_HTONS_VOL_HP+0x2d8>
 801f996:	fb20 8a0a 	smlad	sl, r0, sl, r8
 801f99a:	f8df 8114 	ldr.w	r8, [pc, #276]	; 801fab0 <D128_1CH_HTONS_VOL_HP+0x2dc>
 801f99e:	9b01      	ldr	r3, [sp, #4]
 801f9a0:	fb23 aa08 	smlad	sl, r3, r8, sl
 801f9a4:	f8df 810c 	ldr.w	r8, [pc, #268]	; 801fab4 <D128_1CH_HTONS_VOL_HP+0x2e0>
 801f9a8:	9a02      	ldr	r2, [sp, #8]
 801f9aa:	fb22 a808 	smlad	r8, r2, r8, sl
 801f9ae:	f8df a108 	ldr.w	sl, [pc, #264]	; 801fab8 <D128_1CH_HTONS_VOL_HP+0x2e4>
 801f9b2:	fb26 830a 	smlad	r3, r6, sl, r8
 801f9b6:	f04f 0801 	mov.w	r8, #1
 801f9ba:	9302      	str	r3, [sp, #8]
 801f9bc:	fb2e fe08 	smuad	lr, lr, r8
 801f9c0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801fabc <D128_1CH_HTONS_VOL_HP+0x2e8>
 801f9c4:	fb27 ee08 	smlad	lr, r7, r8, lr
 801f9c8:	4f2f      	ldr	r7, [pc, #188]	; (801fa88 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 801f9ca:	fb25 ee07 	smlad	lr, r5, r7, lr
 801f9ce:	4f2f      	ldr	r7, [pc, #188]	; (801fa8c <D128_1CH_HTONS_VOL_HP+0x2b8>)
 801f9d0:	fb24 ee07 	smlad	lr, r4, r7, lr
 801f9d4:	4f2e      	ldr	r7, [pc, #184]	; (801fa90 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 801f9d6:	fb20 ee07 	smlad	lr, r0, r7, lr
 801f9da:	4f2e      	ldr	r7, [pc, #184]	; (801fa94 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 801f9dc:	9b01      	ldr	r3, [sp, #4]
 801f9de:	fb23 ee07 	smlad	lr, r3, r7, lr
 801f9e2:	4f2d      	ldr	r7, [pc, #180]	; (801fa98 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 801f9e4:	fb22 e707 	smlad	r7, r2, r7, lr
 801f9e8:	4b2c      	ldr	r3, [pc, #176]	; (801fa9c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 801f9ea:	fb26 7303 	smlad	r3, r6, r3, r7
 801f9ee:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 801f9f2:	9303      	str	r3, [sp, #12]
 801f9f4:	9b04      	ldr	r3, [sp, #16]
 801f9f6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801f9fa:	9f08      	ldr	r7, [sp, #32]
 801f9fc:	2100      	movs	r1, #0
 801f9fe:	4433      	add	r3, r6
 801fa00:	f10b 0b10 	add.w	fp, fp, #16
 801fa04:	461a      	mov	r2, r3
 801fa06:	9b05      	ldr	r3, [sp, #20]
 801fa08:	9605      	str	r6, [sp, #20]
 801fa0a:	1ad2      	subs	r2, r2, r3
 801fa0c:	17d5      	asrs	r5, r2, #31
 801fa0e:	fba2 2307 	umull	r2, r3, r2, r7
 801fa12:	1814      	adds	r4, r2, r0
 801fa14:	fb07 3305 	mla	r3, r7, r5, r3
 801fa18:	eb43 0501 	adc.w	r5, r3, r1
 801fa1c:	006b      	lsls	r3, r5, #1
 801fa1e:	022a      	lsls	r2, r5, #8
 801fa20:	9304      	str	r3, [sp, #16]
 801fa22:	9b07      	ldr	r3, [sp, #28]
 801fa24:	fbc3 0102 	smlal	r0, r1, r3, r2
 801fa28:	9a06      	ldr	r2, [sp, #24]
 801fa2a:	108b      	asrs	r3, r1, #2
 801fa2c:	f303 030f 	ssat	r3, #16, r3
 801fa30:	f822 3b02 	strh.w	r3, [r2], #2
 801fa34:	4613      	mov	r3, r2
 801fa36:	9206      	str	r2, [sp, #24]
 801fa38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fa3a:	4293      	cmp	r3, r2
 801fa3c:	f47f aeea 	bne.w	801f814 <D128_1CH_HTONS_VOL_HP+0x40>
 801fa40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fa42:	2000      	movs	r0, #0
 801fa44:	9903      	ldr	r1, [sp, #12]
 801fa46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fa48:	6099      	str	r1, [r3, #8]
 801fa4a:	9902      	ldr	r1, [sp, #8]
 801fa4c:	f8c3 c01c 	str.w	ip, [r3, #28]
 801fa50:	60d9      	str	r1, [r3, #12]
 801fa52:	9904      	ldr	r1, [sp, #16]
 801fa54:	619a      	str	r2, [r3, #24]
 801fa56:	e9c3 1604 	strd	r1, r6, [r3, #16]
 801fa5a:	b00d      	add	sp, #52	; 0x34
 801fa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa60:	9e05      	ldr	r6, [sp, #20]
 801fa62:	e7ed      	b.n	801fa40 <D128_1CH_HTONS_VOL_HP+0x26c>
 801fa64:	00780069 	.word	0x00780069
 801fa68:	005b004e 	.word	0x005b004e
 801fa6c:	00420037 	.word	0x00420037
 801fa70:	002d0024 	.word	0x002d0024
 801fa74:	001c0015 	.word	0x001c0015
 801fa78:	000f000a 	.word	0x000f000a
 801fa7c:	00060003 	.word	0x00060003
 801fa80:	00880096 	.word	0x00880096
 801fa84:	00a200ac 	.word	0x00a200ac
 801fa88:	000a000f 	.word	0x000a000f
 801fa8c:	0015001c 	.word	0x0015001c
 801fa90:	0024002d 	.word	0x0024002d
 801fa94:	00370042 	.word	0x00370042
 801fa98:	004e005b 	.word	0x004e005b
 801fa9c:	00690078 	.word	0x00690078
 801faa0:	24000000 	.word	0x24000000
 801faa4:	00b400ba 	.word	0x00b400ba
 801faa8:	00be00c0 	.word	0x00be00c0
 801faac:	00c000be 	.word	0x00c000be
 801fab0:	00ba00b4 	.word	0x00ba00b4
 801fab4:	00ac00a2 	.word	0x00ac00a2
 801fab8:	00960088 	.word	0x00960088
 801fabc:	00030006 	.word	0x00030006

0801fac0 <PDM_Filter_Init>:
 801fac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fac2:	2240      	movs	r2, #64	; 0x40
 801fac4:	2100      	movs	r1, #0
 801fac6:	4604      	mov	r4, r0
 801fac8:	300c      	adds	r0, #12
 801faca:	f000 fa25 	bl	801ff18 <memset>
 801face:	4a56      	ldr	r2, [pc, #344]	; (801fc28 <PDM_Filter_Init+0x168>)
 801fad0:	4856      	ldr	r0, [pc, #344]	; (801fc2c <PDM_Filter_Init+0x16c>)
 801fad2:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 801fad6:	6813      	ldr	r3, [r2, #0]
 801fad8:	f24c 2540 	movw	r5, #49728	; 0xc240
 801fadc:	f023 0301 	bic.w	r3, r3, #1
 801fae0:	6013      	str	r3, [r2, #0]
 801fae2:	6803      	ldr	r3, [r0, #0]
 801fae4:	400b      	ands	r3, r1
 801fae6:	42ab      	cmp	r3, r5
 801fae8:	d040      	beq.n	801fb6c <PDM_Filter_Init+0xac>
 801faea:	6803      	ldr	r3, [r0, #0]
 801faec:	f24c 2270 	movw	r2, #49776	; 0xc270
 801faf0:	4019      	ands	r1, r3
 801faf2:	4291      	cmp	r1, r2
 801faf4:	d03a      	beq.n	801fb6c <PDM_Filter_Init+0xac>
 801faf6:	4b4e      	ldr	r3, [pc, #312]	; (801fc30 <PDM_Filter_Init+0x170>)
 801faf8:	2101      	movs	r1, #1
 801fafa:	461a      	mov	r2, r3
 801fafc:	6019      	str	r1, [r3, #0]
 801fafe:	6813      	ldr	r3, [r2, #0]
 801fb00:	2b00      	cmp	r3, #0
 801fb02:	d1fc      	bne.n	801fafe <PDM_Filter_Init+0x3e>
 801fb04:	4b4b      	ldr	r3, [pc, #300]	; (801fc34 <PDM_Filter_Init+0x174>)
 801fb06:	494c      	ldr	r1, [pc, #304]	; (801fc38 <PDM_Filter_Init+0x178>)
 801fb08:	4a4c      	ldr	r2, [pc, #304]	; (801fc3c <PDM_Filter_Init+0x17c>)
 801fb0a:	6019      	str	r1, [r3, #0]
 801fb0c:	681b      	ldr	r3, [r3, #0]
 801fb0e:	8820      	ldrh	r0, [r4, #0]
 801fb10:	4293      	cmp	r3, r2
 801fb12:	8961      	ldrh	r1, [r4, #10]
 801fb14:	f04f 0300 	mov.w	r3, #0
 801fb18:	8922      	ldrh	r2, [r4, #8]
 801fb1a:	bf14      	ite	ne
 801fb1c:	2500      	movne	r5, #0
 801fb1e:	4d47      	ldreq	r5, [pc, #284]	; (801fc3c <PDM_Filter_Init+0x17c>)
 801fb20:	2801      	cmp	r0, #1
 801fb22:	61a3      	str	r3, [r4, #24]
 801fb24:	6465      	str	r5, [r4, #68]	; 0x44
 801fb26:	60e3      	str	r3, [r4, #12]
 801fb28:	6263      	str	r3, [r4, #36]	; 0x24
 801fb2a:	6423      	str	r3, [r4, #64]	; 0x40
 801fb2c:	86a1      	strh	r1, [r4, #52]	; 0x34
 801fb2e:	86e2      	strh	r2, [r4, #54]	; 0x36
 801fb30:	e9c4 3304 	strd	r3, r3, [r4, #16]
 801fb34:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801fb38:	d936      	bls.n	801fba8 <PDM_Filter_Init+0xe8>
 801fb3a:	2003      	movs	r0, #3
 801fb3c:	2302      	movs	r3, #2
 801fb3e:	8862      	ldrh	r2, [r4, #2]
 801fb40:	2a01      	cmp	r2, #1
 801fb42:	d92e      	bls.n	801fba2 <PDM_Filter_Init+0xe2>
 801fb44:	2140      	movs	r1, #64	; 0x40
 801fb46:	2300      	movs	r3, #0
 801fb48:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801fb4a:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 801fb4e:	d101      	bne.n	801fb54 <PDM_Filter_Init+0x94>
 801fb50:	460b      	mov	r3, r1
 801fb52:	6421      	str	r1, [r4, #64]	; 0x40
 801fb54:	6862      	ldr	r2, [r4, #4]
 801fb56:	b11a      	cbz	r2, 801fb60 <PDM_Filter_Init+0xa0>
 801fb58:	f043 0310 	orr.w	r3, r3, #16
 801fb5c:	62e2      	str	r2, [r4, #44]	; 0x2c
 801fb5e:	6423      	str	r3, [r4, #64]	; 0x40
 801fb60:	2200      	movs	r2, #0
 801fb62:	8722      	strh	r2, [r4, #56]	; 0x38
 801fb64:	b908      	cbnz	r0, 801fb6a <PDM_Filter_Init+0xaa>
 801fb66:	3380      	adds	r3, #128	; 0x80
 801fb68:	6423      	str	r3, [r4, #64]	; 0x40
 801fb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb6c:	4b34      	ldr	r3, [pc, #208]	; (801fc40 <PDM_Filter_Init+0x180>)
 801fb6e:	681b      	ldr	r3, [r3, #0]
 801fb70:	2b00      	cmp	r3, #0
 801fb72:	d1c0      	bne.n	801faf6 <PDM_Filter_Init+0x36>
 801fb74:	4a33      	ldr	r2, [pc, #204]	; (801fc44 <PDM_Filter_Init+0x184>)
 801fb76:	6813      	ldr	r3, [r2, #0]
 801fb78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801fb7c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801fb80:	d006      	beq.n	801fb90 <PDM_Filter_Init+0xd0>
 801fb82:	6813      	ldr	r3, [r2, #0]
 801fb84:	f240 4283 	movw	r2, #1155	; 0x483
 801fb88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801fb8c:	4293      	cmp	r3, r2
 801fb8e:	d1b2      	bne.n	801faf6 <PDM_Filter_Init+0x36>
 801fb90:	4b2d      	ldr	r3, [pc, #180]	; (801fc48 <PDM_Filter_Init+0x188>)
 801fb92:	2101      	movs	r1, #1
 801fb94:	461a      	mov	r2, r3
 801fb96:	6019      	str	r1, [r3, #0]
 801fb98:	6813      	ldr	r3, [r2, #0]
 801fb9a:	2b00      	cmp	r3, #0
 801fb9c:	d1fc      	bne.n	801fb98 <PDM_Filter_Init+0xd8>
 801fb9e:	4b2b      	ldr	r3, [pc, #172]	; (801fc4c <PDM_Filter_Init+0x18c>)
 801fba0:	e7b1      	b.n	801fb06 <PDM_Filter_Init+0x46>
 801fba2:	d03a      	beq.n	801fc1a <PDM_Filter_Init+0x15a>
 801fba4:	4618      	mov	r0, r3
 801fba6:	e7cd      	b.n	801fb44 <PDM_Filter_Init+0x84>
 801fba8:	4d29      	ldr	r5, [pc, #164]	; (801fc50 <PDM_Filter_Init+0x190>)
 801fbaa:	782a      	ldrb	r2, [r5, #0]
 801fbac:	d01b      	beq.n	801fbe6 <PDM_Filter_Init+0x126>
 801fbae:	2a01      	cmp	r2, #1
 801fbb0:	d001      	beq.n	801fbb6 <PDM_Filter_Init+0xf6>
 801fbb2:	2001      	movs	r0, #1
 801fbb4:	e7c3      	b.n	801fb3e <PDM_Filter_Init+0x7e>
 801fbb6:	4927      	ldr	r1, [pc, #156]	; (801fc54 <PDM_Filter_Init+0x194>)
 801fbb8:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801fc5c <PDM_Filter_Init+0x19c>
 801fbbc:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 801fbc0:	4e25      	ldr	r6, [pc, #148]	; (801fc58 <PDM_Filter_Init+0x198>)
 801fbc2:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801fbc6:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 801fbca:	ea02 0006 	and.w	r0, r2, r6
 801fbce:	f3c2 5209 	ubfx	r2, r2, #20, #10
 801fbd2:	428f      	cmp	r7, r1
 801fbd4:	ea43 0300 	orr.w	r3, r3, r0
 801fbd8:	4413      	add	r3, r2
 801fbda:	600b      	str	r3, [r1, #0]
 801fbdc:	d1f1      	bne.n	801fbc2 <PDM_Filter_Init+0x102>
 801fbde:	2300      	movs	r3, #0
 801fbe0:	2001      	movs	r0, #1
 801fbe2:	702b      	strb	r3, [r5, #0]
 801fbe4:	e7ab      	b.n	801fb3e <PDM_Filter_Init+0x7e>
 801fbe6:	2a00      	cmp	r2, #0
 801fbe8:	d1a9      	bne.n	801fb3e <PDM_Filter_Init+0x7e>
 801fbea:	491a      	ldr	r1, [pc, #104]	; (801fc54 <PDM_Filter_Init+0x194>)
 801fbec:	f8df c06c 	ldr.w	ip, [pc, #108]	; 801fc5c <PDM_Filter_Init+0x19c>
 801fbf0:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 801fbf4:	4e18      	ldr	r6, [pc, #96]	; (801fc58 <PDM_Filter_Init+0x198>)
 801fbf6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801fbfa:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 801fbfe:	ea02 0006 	and.w	r0, r2, r6
 801fc02:	f3c2 5209 	ubfx	r2, r2, #20, #10
 801fc06:	428f      	cmp	r7, r1
 801fc08:	ea43 0300 	orr.w	r3, r3, r0
 801fc0c:	4413      	add	r3, r2
 801fc0e:	600b      	str	r3, [r1, #0]
 801fc10:	d1f1      	bne.n	801fbf6 <PDM_Filter_Init+0x136>
 801fc12:	2001      	movs	r0, #1
 801fc14:	2300      	movs	r3, #0
 801fc16:	7028      	strb	r0, [r5, #0]
 801fc18:	e791      	b.n	801fb3e <PDM_Filter_Init+0x7e>
 801fc1a:	2220      	movs	r2, #32
 801fc1c:	4618      	mov	r0, r3
 801fc1e:	2160      	movs	r1, #96	; 0x60
 801fc20:	6422      	str	r2, [r4, #64]	; 0x40
 801fc22:	4613      	mov	r3, r2
 801fc24:	e790      	b.n	801fb48 <PDM_Filter_Init+0x88>
 801fc26:	bf00      	nop
 801fc28:	e0002000 	.word	0xe0002000
 801fc2c:	e000ed00 	.word	0xe000ed00
 801fc30:	40023008 	.word	0x40023008
 801fc34:	40023000 	.word	0x40023000
 801fc38:	f407a5c2 	.word	0xf407a5c2
 801fc3c:	b5e8b5cd 	.word	0xb5e8b5cd
 801fc40:	e0042000 	.word	0xe0042000
 801fc44:	5c001000 	.word	0x5c001000
 801fc48:	58024c08 	.word	0x58024c08
 801fc4c:	58024c00 	.word	0x58024c00
 801fc50:	24003a3c 	.word	0x24003a3c
 801fc54:	23fffffc 	.word	0x23fffffc
 801fc58:	000ffc00 	.word	0x000ffc00
 801fc5c:	3ff00000 	.word	0x3ff00000

0801fc60 <PDM_Filter_setConfig>:
 801fc60:	4b67      	ldr	r3, [pc, #412]	; (801fe00 <PDM_Filter_setConfig+0x1a0>)
 801fc62:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801fc64:	429a      	cmp	r2, r3
 801fc66:	d128      	bne.n	801fcba <PDM_Filter_setConfig+0x5a>
 801fc68:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801fc6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc6c:	880e      	ldrh	r6, [r1, #0]
 801fc6e:	460d      	mov	r5, r1
 801fc70:	4604      	mov	r4, r0
 801fc72:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 801fc76:	1e73      	subs	r3, r6, #1
 801fc78:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 801fc7c:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 801fc80:	2b06      	cmp	r3, #6
 801fc82:	ed2d 8b02 	vpush	{d8}
 801fc86:	6421      	str	r1, [r4, #64]	; 0x40
 801fc88:	b083      	sub	sp, #12
 801fc8a:	d820      	bhi.n	801fcce <PDM_Filter_setConfig+0x6e>
 801fc8c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801fc8e:	42b3      	cmp	r3, r6
 801fc90:	d03d      	beq.n	801fd0e <PDM_Filter_setConfig+0xae>
 801fc92:	4b5c      	ldr	r3, [pc, #368]	; (801fe04 <PDM_Filter_setConfig+0x1a4>)
 801fc94:	4013      	ands	r3, r2
 801fc96:	4333      	orrs	r3, r6
 801fc98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801fc9c:	6423      	str	r3, [r4, #64]	; 0x40
 801fc9e:	f003 030f 	and.w	r3, r3, #15
 801fca2:	2a70      	cmp	r2, #112	; 0x70
 801fca4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801fca8:	d009      	beq.n	801fcbe <PDM_Filter_setConfig+0x5e>
 801fcaa:	2b06      	cmp	r3, #6
 801fcac:	d824      	bhi.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fcae:	e8df f003 	tbb	[pc, r3]
 801fcb2:	878a      	.short	0x878a
 801fcb4:	7b7e8184 	.word	0x7b7e8184
 801fcb8:	78          	.byte	0x78
 801fcb9:	00          	.byte	0x00
 801fcba:	2004      	movs	r0, #4
 801fcbc:	4770      	bx	lr
 801fcbe:	2b06      	cmp	r3, #6
 801fcc0:	d81a      	bhi.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fcc2:	e8df f003 	tbb	[pc, r3]
 801fcc6:	8f92      	.short	0x8f92
 801fcc8:	8617898c 	.word	0x8617898c
 801fccc:	83          	.byte	0x83
 801fccd:	00          	.byte	0x00
 801fcce:	4287      	cmp	r7, r0
 801fcd0:	f000 808e 	beq.w	801fdf0 <PDM_Filter_setConfig+0x190>
 801fcd4:	f117 0f0c 	cmn.w	r7, #12
 801fcd8:	f04f 0008 	mov.w	r0, #8
 801fcdc:	da11      	bge.n	801fd02 <PDM_Filter_setConfig+0xa2>
 801fcde:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 801fce2:	3040      	adds	r0, #64	; 0x40
 801fce4:	80ab      	strh	r3, [r5, #4]
 801fce6:	886b      	ldrh	r3, [r5, #2]
 801fce8:	8626      	strh	r6, [r4, #48]	; 0x30
 801fcea:	8663      	strh	r3, [r4, #50]	; 0x32
 801fcec:	b003      	add	sp, #12
 801fcee:	ecbd 8b02 	vpop	{d8}
 801fcf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fcf4:	4b44      	ldr	r3, [pc, #272]	; (801fe08 <PDM_Filter_setConfig+0x1a8>)
 801fcf6:	64a3      	str	r3, [r4, #72]	; 0x48
 801fcf8:	f117 0f0c 	cmn.w	r7, #12
 801fcfc:	f04f 0000 	mov.w	r0, #0
 801fd00:	dbed      	blt.n	801fcde <PDM_Filter_setConfig+0x7e>
 801fd02:	2f33      	cmp	r7, #51	; 0x33
 801fd04:	dd10      	ble.n	801fd28 <PDM_Filter_setConfig+0xc8>
 801fd06:	2333      	movs	r3, #51	; 0x33
 801fd08:	3040      	adds	r0, #64	; 0x40
 801fd0a:	80ab      	strh	r3, [r5, #4]
 801fd0c:	e7eb      	b.n	801fce6 <PDM_Filter_setConfig+0x86>
 801fd0e:	4287      	cmp	r7, r0
 801fd10:	d1f2      	bne.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fd12:	886b      	ldrh	r3, [r5, #2]
 801fd14:	8663      	strh	r3, [r4, #50]	; 0x32
 801fd16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fd18:	2000      	movs	r0, #0
 801fd1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801fd1e:	6423      	str	r3, [r4, #64]	; 0x40
 801fd20:	b003      	add	sp, #12
 801fd22:	ecbd 8b02 	vpop	{d8}
 801fd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fd28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fd2a:	f003 030f 	and.w	r3, r3, #15
 801fd2e:	3b01      	subs	r3, #1
 801fd30:	2b06      	cmp	r3, #6
 801fd32:	d831      	bhi.n	801fd98 <PDM_Filter_setConfig+0x138>
 801fd34:	4a35      	ldr	r2, [pc, #212]	; (801fe0c <PDM_Filter_setConfig+0x1ac>)
 801fd36:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801fd3a:	eddf 0a35 	vldr	s1, [pc, #212]	; 801fe10 <PDM_Filter_setConfig+0x1b0>
 801fd3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fd42:	9001      	str	r0, [sp, #4]
 801fd44:	edd3 7a07 	vldr	s15, [r3, #28]
 801fd48:	ed93 8a00 	vldr	s16, [r3]
 801fd4c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801fd50:	f005 f83a 	bl	8024dc8 <powf>
 801fd54:	eef0 8a40 	vmov.f32	s17, s0
 801fd58:	9801      	ldr	r0, [sp, #4]
 801fd5a:	ee07 7a90 	vmov	s15, r7
 801fd5e:	ee28 8a28 	vmul.f32	s16, s16, s17
 801fd62:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801fd66:	9001      	str	r0, [sp, #4]
 801fd68:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801fd6c:	eddf 7a29 	vldr	s15, [pc, #164]	; 801fe14 <PDM_Filter_setConfig+0x1b4>
 801fd70:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801fd74:	f005 f828 	bl	8024dc8 <powf>
 801fd78:	ee28 8a00 	vmul.f32	s16, s16, s0
 801fd7c:	886b      	ldrh	r3, [r5, #2]
 801fd7e:	9801      	ldr	r0, [sp, #4]
 801fd80:	feb8 8a48 	vrinta.f32	s16, s16
 801fd84:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 801fd88:	8727      	strh	r7, [r4, #56]	; 0x38
 801fd8a:	8663      	strh	r3, [r4, #50]	; 0x32
 801fd8c:	8626      	strh	r6, [r4, #48]	; 0x30
 801fd8e:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 801fd92:	2800      	cmp	r0, #0
 801fd94:	d0bf      	beq.n	801fd16 <PDM_Filter_setConfig+0xb6>
 801fd96:	e7a9      	b.n	801fcec <PDM_Filter_setConfig+0x8c>
 801fd98:	eddf 8a1f 	vldr	s17, [pc, #124]	; 801fe18 <PDM_Filter_setConfig+0x1b8>
 801fd9c:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 801fe1c <PDM_Filter_setConfig+0x1bc>
 801fda0:	e7db      	b.n	801fd5a <PDM_Filter_setConfig+0xfa>
 801fda2:	4b1f      	ldr	r3, [pc, #124]	; (801fe20 <PDM_Filter_setConfig+0x1c0>)
 801fda4:	64a3      	str	r3, [r4, #72]	; 0x48
 801fda6:	e7a7      	b.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fda8:	4b1e      	ldr	r3, [pc, #120]	; (801fe24 <PDM_Filter_setConfig+0x1c4>)
 801fdaa:	64a3      	str	r3, [r4, #72]	; 0x48
 801fdac:	e7a4      	b.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fdae:	4b1e      	ldr	r3, [pc, #120]	; (801fe28 <PDM_Filter_setConfig+0x1c8>)
 801fdb0:	64a3      	str	r3, [r4, #72]	; 0x48
 801fdb2:	e7a1      	b.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fdb4:	4b1d      	ldr	r3, [pc, #116]	; (801fe2c <PDM_Filter_setConfig+0x1cc>)
 801fdb6:	64a3      	str	r3, [r4, #72]	; 0x48
 801fdb8:	e79e      	b.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fdba:	4b1d      	ldr	r3, [pc, #116]	; (801fe30 <PDM_Filter_setConfig+0x1d0>)
 801fdbc:	64a3      	str	r3, [r4, #72]	; 0x48
 801fdbe:	e79b      	b.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fdc0:	4b1c      	ldr	r3, [pc, #112]	; (801fe34 <PDM_Filter_setConfig+0x1d4>)
 801fdc2:	64a3      	str	r3, [r4, #72]	; 0x48
 801fdc4:	e798      	b.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fdc6:	4b1c      	ldr	r3, [pc, #112]	; (801fe38 <PDM_Filter_setConfig+0x1d8>)
 801fdc8:	64a3      	str	r3, [r4, #72]	; 0x48
 801fdca:	e795      	b.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fdcc:	4b1b      	ldr	r3, [pc, #108]	; (801fe3c <PDM_Filter_setConfig+0x1dc>)
 801fdce:	64a3      	str	r3, [r4, #72]	; 0x48
 801fdd0:	e792      	b.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fdd2:	4b1b      	ldr	r3, [pc, #108]	; (801fe40 <PDM_Filter_setConfig+0x1e0>)
 801fdd4:	64a3      	str	r3, [r4, #72]	; 0x48
 801fdd6:	e78f      	b.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fdd8:	4b1a      	ldr	r3, [pc, #104]	; (801fe44 <PDM_Filter_setConfig+0x1e4>)
 801fdda:	64a3      	str	r3, [r4, #72]	; 0x48
 801fddc:	e78c      	b.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fdde:	4b1a      	ldr	r3, [pc, #104]	; (801fe48 <PDM_Filter_setConfig+0x1e8>)
 801fde0:	64a3      	str	r3, [r4, #72]	; 0x48
 801fde2:	e789      	b.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fde4:	4b19      	ldr	r3, [pc, #100]	; (801fe4c <PDM_Filter_setConfig+0x1ec>)
 801fde6:	64a3      	str	r3, [r4, #72]	; 0x48
 801fde8:	e786      	b.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fdea:	4b19      	ldr	r3, [pc, #100]	; (801fe50 <PDM_Filter_setConfig+0x1f0>)
 801fdec:	64a3      	str	r3, [r4, #72]	; 0x48
 801fdee:	e783      	b.n	801fcf8 <PDM_Filter_setConfig+0x98>
 801fdf0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801fdf2:	42b3      	cmp	r3, r6
 801fdf4:	f47f af6e 	bne.w	801fcd4 <PDM_Filter_setConfig+0x74>
 801fdf8:	886b      	ldrh	r3, [r5, #2]
 801fdfa:	2008      	movs	r0, #8
 801fdfc:	8663      	strh	r3, [r4, #50]	; 0x32
 801fdfe:	e775      	b.n	801fcec <PDM_Filter_setConfig+0x8c>
 801fe00:	b5e8b5cd 	.word	0xb5e8b5cd
 801fe04:	fffffef0 	.word	0xfffffef0
 801fe08:	0801ef79 	.word	0x0801ef79
 801fe0c:	08028c44 	.word	0x08028c44
 801fe10:	42000000 	.word	0x42000000
 801fe14:	3d4ccccd 	.word	0x3d4ccccd
 801fe18:	4f800000 	.word	0x4f800000
 801fe1c:	00000000 	.word	0x00000000
 801fe20:	0801e385 	.word	0x0801e385
 801fe24:	0801e20d 	.word	0x0801e20d
 801fe28:	0801e0fd 	.word	0x0801e0fd
 801fe2c:	0801ebc1 	.word	0x0801ebc1
 801fe30:	0801e929 	.word	0x0801e929
 801fe34:	0801e6f1 	.word	0x0801e6f1
 801fe38:	0801e50d 	.word	0x0801e50d
 801fe3c:	0801f195 	.word	0x0801f195
 801fe40:	0801f059 	.word	0x0801f059
 801fe44:	0801f7d5 	.word	0x0801f7d5
 801fe48:	0801f5d9 	.word	0x0801f5d9
 801fe4c:	0801f42d 	.word	0x0801f42d
 801fe50:	0801f2c1 	.word	0x0801f2c1

0801fe54 <__libc_init_array>:
 801fe54:	b570      	push	{r4, r5, r6, lr}
 801fe56:	4d0d      	ldr	r5, [pc, #52]	; (801fe8c <__libc_init_array+0x38>)
 801fe58:	4c0d      	ldr	r4, [pc, #52]	; (801fe90 <__libc_init_array+0x3c>)
 801fe5a:	1b64      	subs	r4, r4, r5
 801fe5c:	10a4      	asrs	r4, r4, #2
 801fe5e:	2600      	movs	r6, #0
 801fe60:	42a6      	cmp	r6, r4
 801fe62:	d109      	bne.n	801fe78 <__libc_init_array+0x24>
 801fe64:	4d0b      	ldr	r5, [pc, #44]	; (801fe94 <__libc_init_array+0x40>)
 801fe66:	4c0c      	ldr	r4, [pc, #48]	; (801fe98 <__libc_init_array+0x44>)
 801fe68:	f005 ff8c 	bl	8025d84 <_init>
 801fe6c:	1b64      	subs	r4, r4, r5
 801fe6e:	10a4      	asrs	r4, r4, #2
 801fe70:	2600      	movs	r6, #0
 801fe72:	42a6      	cmp	r6, r4
 801fe74:	d105      	bne.n	801fe82 <__libc_init_array+0x2e>
 801fe76:	bd70      	pop	{r4, r5, r6, pc}
 801fe78:	f855 3b04 	ldr.w	r3, [r5], #4
 801fe7c:	4798      	blx	r3
 801fe7e:	3601      	adds	r6, #1
 801fe80:	e7ee      	b.n	801fe60 <__libc_init_array+0xc>
 801fe82:	f855 3b04 	ldr.w	r3, [r5], #4
 801fe86:	4798      	blx	r3
 801fe88:	3601      	adds	r6, #1
 801fe8a:	e7f2      	b.n	801fe72 <__libc_init_array+0x1e>
 801fe8c:	0802b610 	.word	0x0802b610
 801fe90:	0802b610 	.word	0x0802b610
 801fe94:	0802b610 	.word	0x0802b610
 801fe98:	0802b614 	.word	0x0802b614

0801fe9c <malloc>:
 801fe9c:	4b02      	ldr	r3, [pc, #8]	; (801fea8 <malloc+0xc>)
 801fe9e:	4601      	mov	r1, r0
 801fea0:	6818      	ldr	r0, [r3, #0]
 801fea2:	f000 b891 	b.w	801ffc8 <_malloc_r>
 801fea6:	bf00      	nop
 801fea8:	24003844 	.word	0x24003844

0801feac <memcmp>:
 801feac:	b530      	push	{r4, r5, lr}
 801feae:	3901      	subs	r1, #1
 801feb0:	2400      	movs	r4, #0
 801feb2:	42a2      	cmp	r2, r4
 801feb4:	d101      	bne.n	801feba <memcmp+0xe>
 801feb6:	2000      	movs	r0, #0
 801feb8:	e005      	b.n	801fec6 <memcmp+0x1a>
 801feba:	5d03      	ldrb	r3, [r0, r4]
 801febc:	3401      	adds	r4, #1
 801febe:	5d0d      	ldrb	r5, [r1, r4]
 801fec0:	42ab      	cmp	r3, r5
 801fec2:	d0f6      	beq.n	801feb2 <memcmp+0x6>
 801fec4:	1b58      	subs	r0, r3, r5
 801fec6:	bd30      	pop	{r4, r5, pc}

0801fec8 <memcpy>:
 801fec8:	440a      	add	r2, r1
 801feca:	4291      	cmp	r1, r2
 801fecc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801fed0:	d100      	bne.n	801fed4 <memcpy+0xc>
 801fed2:	4770      	bx	lr
 801fed4:	b510      	push	{r4, lr}
 801fed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801feda:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fede:	4291      	cmp	r1, r2
 801fee0:	d1f9      	bne.n	801fed6 <memcpy+0xe>
 801fee2:	bd10      	pop	{r4, pc}

0801fee4 <memmove>:
 801fee4:	4288      	cmp	r0, r1
 801fee6:	b510      	push	{r4, lr}
 801fee8:	eb01 0402 	add.w	r4, r1, r2
 801feec:	d902      	bls.n	801fef4 <memmove+0x10>
 801feee:	4284      	cmp	r4, r0
 801fef0:	4623      	mov	r3, r4
 801fef2:	d807      	bhi.n	801ff04 <memmove+0x20>
 801fef4:	1e43      	subs	r3, r0, #1
 801fef6:	42a1      	cmp	r1, r4
 801fef8:	d008      	beq.n	801ff0c <memmove+0x28>
 801fefa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fefe:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ff02:	e7f8      	b.n	801fef6 <memmove+0x12>
 801ff04:	4402      	add	r2, r0
 801ff06:	4601      	mov	r1, r0
 801ff08:	428a      	cmp	r2, r1
 801ff0a:	d100      	bne.n	801ff0e <memmove+0x2a>
 801ff0c:	bd10      	pop	{r4, pc}
 801ff0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ff12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ff16:	e7f7      	b.n	801ff08 <memmove+0x24>

0801ff18 <memset>:
 801ff18:	4402      	add	r2, r0
 801ff1a:	4603      	mov	r3, r0
 801ff1c:	4293      	cmp	r3, r2
 801ff1e:	d100      	bne.n	801ff22 <memset+0xa>
 801ff20:	4770      	bx	lr
 801ff22:	f803 1b01 	strb.w	r1, [r3], #1
 801ff26:	e7f9      	b.n	801ff1c <memset+0x4>

0801ff28 <_free_r>:
 801ff28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ff2a:	2900      	cmp	r1, #0
 801ff2c:	d048      	beq.n	801ffc0 <_free_r+0x98>
 801ff2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ff32:	9001      	str	r0, [sp, #4]
 801ff34:	2b00      	cmp	r3, #0
 801ff36:	f1a1 0404 	sub.w	r4, r1, #4
 801ff3a:	bfb8      	it	lt
 801ff3c:	18e4      	addlt	r4, r4, r3
 801ff3e:	f003 fb21 	bl	8023584 <__malloc_lock>
 801ff42:	4a20      	ldr	r2, [pc, #128]	; (801ffc4 <_free_r+0x9c>)
 801ff44:	9801      	ldr	r0, [sp, #4]
 801ff46:	6813      	ldr	r3, [r2, #0]
 801ff48:	4615      	mov	r5, r2
 801ff4a:	b933      	cbnz	r3, 801ff5a <_free_r+0x32>
 801ff4c:	6063      	str	r3, [r4, #4]
 801ff4e:	6014      	str	r4, [r2, #0]
 801ff50:	b003      	add	sp, #12
 801ff52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ff56:	f003 bb1b 	b.w	8023590 <__malloc_unlock>
 801ff5a:	42a3      	cmp	r3, r4
 801ff5c:	d90b      	bls.n	801ff76 <_free_r+0x4e>
 801ff5e:	6821      	ldr	r1, [r4, #0]
 801ff60:	1862      	adds	r2, r4, r1
 801ff62:	4293      	cmp	r3, r2
 801ff64:	bf04      	itt	eq
 801ff66:	681a      	ldreq	r2, [r3, #0]
 801ff68:	685b      	ldreq	r3, [r3, #4]
 801ff6a:	6063      	str	r3, [r4, #4]
 801ff6c:	bf04      	itt	eq
 801ff6e:	1852      	addeq	r2, r2, r1
 801ff70:	6022      	streq	r2, [r4, #0]
 801ff72:	602c      	str	r4, [r5, #0]
 801ff74:	e7ec      	b.n	801ff50 <_free_r+0x28>
 801ff76:	461a      	mov	r2, r3
 801ff78:	685b      	ldr	r3, [r3, #4]
 801ff7a:	b10b      	cbz	r3, 801ff80 <_free_r+0x58>
 801ff7c:	42a3      	cmp	r3, r4
 801ff7e:	d9fa      	bls.n	801ff76 <_free_r+0x4e>
 801ff80:	6811      	ldr	r1, [r2, #0]
 801ff82:	1855      	adds	r5, r2, r1
 801ff84:	42a5      	cmp	r5, r4
 801ff86:	d10b      	bne.n	801ffa0 <_free_r+0x78>
 801ff88:	6824      	ldr	r4, [r4, #0]
 801ff8a:	4421      	add	r1, r4
 801ff8c:	1854      	adds	r4, r2, r1
 801ff8e:	42a3      	cmp	r3, r4
 801ff90:	6011      	str	r1, [r2, #0]
 801ff92:	d1dd      	bne.n	801ff50 <_free_r+0x28>
 801ff94:	681c      	ldr	r4, [r3, #0]
 801ff96:	685b      	ldr	r3, [r3, #4]
 801ff98:	6053      	str	r3, [r2, #4]
 801ff9a:	4421      	add	r1, r4
 801ff9c:	6011      	str	r1, [r2, #0]
 801ff9e:	e7d7      	b.n	801ff50 <_free_r+0x28>
 801ffa0:	d902      	bls.n	801ffa8 <_free_r+0x80>
 801ffa2:	230c      	movs	r3, #12
 801ffa4:	6003      	str	r3, [r0, #0]
 801ffa6:	e7d3      	b.n	801ff50 <_free_r+0x28>
 801ffa8:	6825      	ldr	r5, [r4, #0]
 801ffaa:	1961      	adds	r1, r4, r5
 801ffac:	428b      	cmp	r3, r1
 801ffae:	bf04      	itt	eq
 801ffb0:	6819      	ldreq	r1, [r3, #0]
 801ffb2:	685b      	ldreq	r3, [r3, #4]
 801ffb4:	6063      	str	r3, [r4, #4]
 801ffb6:	bf04      	itt	eq
 801ffb8:	1949      	addeq	r1, r1, r5
 801ffba:	6021      	streq	r1, [r4, #0]
 801ffbc:	6054      	str	r4, [r2, #4]
 801ffbe:	e7c7      	b.n	801ff50 <_free_r+0x28>
 801ffc0:	b003      	add	sp, #12
 801ffc2:	bd30      	pop	{r4, r5, pc}
 801ffc4:	24007810 	.word	0x24007810

0801ffc8 <_malloc_r>:
 801ffc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffca:	1ccd      	adds	r5, r1, #3
 801ffcc:	f025 0503 	bic.w	r5, r5, #3
 801ffd0:	3508      	adds	r5, #8
 801ffd2:	2d0c      	cmp	r5, #12
 801ffd4:	bf38      	it	cc
 801ffd6:	250c      	movcc	r5, #12
 801ffd8:	2d00      	cmp	r5, #0
 801ffda:	4606      	mov	r6, r0
 801ffdc:	db01      	blt.n	801ffe2 <_malloc_r+0x1a>
 801ffde:	42a9      	cmp	r1, r5
 801ffe0:	d903      	bls.n	801ffea <_malloc_r+0x22>
 801ffe2:	230c      	movs	r3, #12
 801ffe4:	6033      	str	r3, [r6, #0]
 801ffe6:	2000      	movs	r0, #0
 801ffe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ffea:	f003 facb 	bl	8023584 <__malloc_lock>
 801ffee:	4921      	ldr	r1, [pc, #132]	; (8020074 <_malloc_r+0xac>)
 801fff0:	680a      	ldr	r2, [r1, #0]
 801fff2:	4614      	mov	r4, r2
 801fff4:	b99c      	cbnz	r4, 802001e <_malloc_r+0x56>
 801fff6:	4f20      	ldr	r7, [pc, #128]	; (8020078 <_malloc_r+0xb0>)
 801fff8:	683b      	ldr	r3, [r7, #0]
 801fffa:	b923      	cbnz	r3, 8020006 <_malloc_r+0x3e>
 801fffc:	4621      	mov	r1, r4
 801fffe:	4630      	mov	r0, r6
 8020000:	f000 ff52 	bl	8020ea8 <_sbrk_r>
 8020004:	6038      	str	r0, [r7, #0]
 8020006:	4629      	mov	r1, r5
 8020008:	4630      	mov	r0, r6
 802000a:	f000 ff4d 	bl	8020ea8 <_sbrk_r>
 802000e:	1c43      	adds	r3, r0, #1
 8020010:	d123      	bne.n	802005a <_malloc_r+0x92>
 8020012:	230c      	movs	r3, #12
 8020014:	6033      	str	r3, [r6, #0]
 8020016:	4630      	mov	r0, r6
 8020018:	f003 faba 	bl	8023590 <__malloc_unlock>
 802001c:	e7e3      	b.n	801ffe6 <_malloc_r+0x1e>
 802001e:	6823      	ldr	r3, [r4, #0]
 8020020:	1b5b      	subs	r3, r3, r5
 8020022:	d417      	bmi.n	8020054 <_malloc_r+0x8c>
 8020024:	2b0b      	cmp	r3, #11
 8020026:	d903      	bls.n	8020030 <_malloc_r+0x68>
 8020028:	6023      	str	r3, [r4, #0]
 802002a:	441c      	add	r4, r3
 802002c:	6025      	str	r5, [r4, #0]
 802002e:	e004      	b.n	802003a <_malloc_r+0x72>
 8020030:	6863      	ldr	r3, [r4, #4]
 8020032:	42a2      	cmp	r2, r4
 8020034:	bf0c      	ite	eq
 8020036:	600b      	streq	r3, [r1, #0]
 8020038:	6053      	strne	r3, [r2, #4]
 802003a:	4630      	mov	r0, r6
 802003c:	f003 faa8 	bl	8023590 <__malloc_unlock>
 8020040:	f104 000b 	add.w	r0, r4, #11
 8020044:	1d23      	adds	r3, r4, #4
 8020046:	f020 0007 	bic.w	r0, r0, #7
 802004a:	1ac2      	subs	r2, r0, r3
 802004c:	d0cc      	beq.n	801ffe8 <_malloc_r+0x20>
 802004e:	1a1b      	subs	r3, r3, r0
 8020050:	50a3      	str	r3, [r4, r2]
 8020052:	e7c9      	b.n	801ffe8 <_malloc_r+0x20>
 8020054:	4622      	mov	r2, r4
 8020056:	6864      	ldr	r4, [r4, #4]
 8020058:	e7cc      	b.n	801fff4 <_malloc_r+0x2c>
 802005a:	1cc4      	adds	r4, r0, #3
 802005c:	f024 0403 	bic.w	r4, r4, #3
 8020060:	42a0      	cmp	r0, r4
 8020062:	d0e3      	beq.n	802002c <_malloc_r+0x64>
 8020064:	1a21      	subs	r1, r4, r0
 8020066:	4630      	mov	r0, r6
 8020068:	f000 ff1e 	bl	8020ea8 <_sbrk_r>
 802006c:	3001      	adds	r0, #1
 802006e:	d1dd      	bne.n	802002c <_malloc_r+0x64>
 8020070:	e7cf      	b.n	8020012 <_malloc_r+0x4a>
 8020072:	bf00      	nop
 8020074:	24007810 	.word	0x24007810
 8020078:	24007814 	.word	0x24007814

0802007c <__cvt>:
 802007c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802007e:	ed2d 8b02 	vpush	{d8}
 8020082:	eeb0 8b40 	vmov.f64	d8, d0
 8020086:	b085      	sub	sp, #20
 8020088:	4617      	mov	r7, r2
 802008a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802008c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802008e:	ee18 2a90 	vmov	r2, s17
 8020092:	f025 0520 	bic.w	r5, r5, #32
 8020096:	2a00      	cmp	r2, #0
 8020098:	bfb6      	itet	lt
 802009a:	222d      	movlt	r2, #45	; 0x2d
 802009c:	2200      	movge	r2, #0
 802009e:	eeb1 8b40 	vneglt.f64	d8, d0
 80200a2:	2d46      	cmp	r5, #70	; 0x46
 80200a4:	460c      	mov	r4, r1
 80200a6:	701a      	strb	r2, [r3, #0]
 80200a8:	d004      	beq.n	80200b4 <__cvt+0x38>
 80200aa:	2d45      	cmp	r5, #69	; 0x45
 80200ac:	d100      	bne.n	80200b0 <__cvt+0x34>
 80200ae:	3401      	adds	r4, #1
 80200b0:	2102      	movs	r1, #2
 80200b2:	e000      	b.n	80200b6 <__cvt+0x3a>
 80200b4:	2103      	movs	r1, #3
 80200b6:	ab03      	add	r3, sp, #12
 80200b8:	9301      	str	r3, [sp, #4]
 80200ba:	ab02      	add	r3, sp, #8
 80200bc:	9300      	str	r3, [sp, #0]
 80200be:	4622      	mov	r2, r4
 80200c0:	4633      	mov	r3, r6
 80200c2:	eeb0 0b48 	vmov.f64	d0, d8
 80200c6:	f001 ff1f 	bl	8021f08 <_dtoa_r>
 80200ca:	2d47      	cmp	r5, #71	; 0x47
 80200cc:	d109      	bne.n	80200e2 <__cvt+0x66>
 80200ce:	07fb      	lsls	r3, r7, #31
 80200d0:	d407      	bmi.n	80200e2 <__cvt+0x66>
 80200d2:	9b03      	ldr	r3, [sp, #12]
 80200d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80200d6:	1a1b      	subs	r3, r3, r0
 80200d8:	6013      	str	r3, [r2, #0]
 80200da:	b005      	add	sp, #20
 80200dc:	ecbd 8b02 	vpop	{d8}
 80200e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80200e2:	2d46      	cmp	r5, #70	; 0x46
 80200e4:	eb00 0204 	add.w	r2, r0, r4
 80200e8:	d10c      	bne.n	8020104 <__cvt+0x88>
 80200ea:	7803      	ldrb	r3, [r0, #0]
 80200ec:	2b30      	cmp	r3, #48	; 0x30
 80200ee:	d107      	bne.n	8020100 <__cvt+0x84>
 80200f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80200f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200f8:	bf1c      	itt	ne
 80200fa:	f1c4 0401 	rsbne	r4, r4, #1
 80200fe:	6034      	strne	r4, [r6, #0]
 8020100:	6833      	ldr	r3, [r6, #0]
 8020102:	441a      	add	r2, r3
 8020104:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802010c:	bf08      	it	eq
 802010e:	9203      	streq	r2, [sp, #12]
 8020110:	2130      	movs	r1, #48	; 0x30
 8020112:	9b03      	ldr	r3, [sp, #12]
 8020114:	4293      	cmp	r3, r2
 8020116:	d2dc      	bcs.n	80200d2 <__cvt+0x56>
 8020118:	1c5c      	adds	r4, r3, #1
 802011a:	9403      	str	r4, [sp, #12]
 802011c:	7019      	strb	r1, [r3, #0]
 802011e:	e7f8      	b.n	8020112 <__cvt+0x96>

08020120 <__exponent>:
 8020120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020122:	4603      	mov	r3, r0
 8020124:	2900      	cmp	r1, #0
 8020126:	bfb8      	it	lt
 8020128:	4249      	neglt	r1, r1
 802012a:	f803 2b02 	strb.w	r2, [r3], #2
 802012e:	bfb4      	ite	lt
 8020130:	222d      	movlt	r2, #45	; 0x2d
 8020132:	222b      	movge	r2, #43	; 0x2b
 8020134:	2909      	cmp	r1, #9
 8020136:	7042      	strb	r2, [r0, #1]
 8020138:	dd2a      	ble.n	8020190 <__exponent+0x70>
 802013a:	f10d 0407 	add.w	r4, sp, #7
 802013e:	46a4      	mov	ip, r4
 8020140:	270a      	movs	r7, #10
 8020142:	46a6      	mov	lr, r4
 8020144:	460a      	mov	r2, r1
 8020146:	fb91 f6f7 	sdiv	r6, r1, r7
 802014a:	fb07 1516 	mls	r5, r7, r6, r1
 802014e:	3530      	adds	r5, #48	; 0x30
 8020150:	2a63      	cmp	r2, #99	; 0x63
 8020152:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8020156:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802015a:	4631      	mov	r1, r6
 802015c:	dcf1      	bgt.n	8020142 <__exponent+0x22>
 802015e:	3130      	adds	r1, #48	; 0x30
 8020160:	f1ae 0502 	sub.w	r5, lr, #2
 8020164:	f804 1c01 	strb.w	r1, [r4, #-1]
 8020168:	1c44      	adds	r4, r0, #1
 802016a:	4629      	mov	r1, r5
 802016c:	4561      	cmp	r1, ip
 802016e:	d30a      	bcc.n	8020186 <__exponent+0x66>
 8020170:	f10d 0209 	add.w	r2, sp, #9
 8020174:	eba2 020e 	sub.w	r2, r2, lr
 8020178:	4565      	cmp	r5, ip
 802017a:	bf88      	it	hi
 802017c:	2200      	movhi	r2, #0
 802017e:	4413      	add	r3, r2
 8020180:	1a18      	subs	r0, r3, r0
 8020182:	b003      	add	sp, #12
 8020184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020186:	f811 2b01 	ldrb.w	r2, [r1], #1
 802018a:	f804 2f01 	strb.w	r2, [r4, #1]!
 802018e:	e7ed      	b.n	802016c <__exponent+0x4c>
 8020190:	2330      	movs	r3, #48	; 0x30
 8020192:	3130      	adds	r1, #48	; 0x30
 8020194:	7083      	strb	r3, [r0, #2]
 8020196:	70c1      	strb	r1, [r0, #3]
 8020198:	1d03      	adds	r3, r0, #4
 802019a:	e7f1      	b.n	8020180 <__exponent+0x60>
 802019c:	0000      	movs	r0, r0
	...

080201a0 <_printf_float>:
 80201a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201a4:	b08b      	sub	sp, #44	; 0x2c
 80201a6:	460c      	mov	r4, r1
 80201a8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80201ac:	4616      	mov	r6, r2
 80201ae:	461f      	mov	r7, r3
 80201b0:	4605      	mov	r5, r0
 80201b2:	f003 f969 	bl	8023488 <_localeconv_r>
 80201b6:	f8d0 b000 	ldr.w	fp, [r0]
 80201ba:	4658      	mov	r0, fp
 80201bc:	f7e0 f890 	bl	80002e0 <strlen>
 80201c0:	2300      	movs	r3, #0
 80201c2:	9308      	str	r3, [sp, #32]
 80201c4:	f8d8 3000 	ldr.w	r3, [r8]
 80201c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80201cc:	6822      	ldr	r2, [r4, #0]
 80201ce:	3307      	adds	r3, #7
 80201d0:	f023 0307 	bic.w	r3, r3, #7
 80201d4:	f103 0108 	add.w	r1, r3, #8
 80201d8:	f8c8 1000 	str.w	r1, [r8]
 80201dc:	4682      	mov	sl, r0
 80201de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80201e2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80201e6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8020448 <_printf_float+0x2a8>
 80201ea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80201ee:	eeb0 6bc0 	vabs.f64	d6, d0
 80201f2:	eeb4 6b47 	vcmp.f64	d6, d7
 80201f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201fa:	dd24      	ble.n	8020246 <_printf_float+0xa6>
 80201fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8020200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020204:	d502      	bpl.n	802020c <_printf_float+0x6c>
 8020206:	232d      	movs	r3, #45	; 0x2d
 8020208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802020c:	4b90      	ldr	r3, [pc, #576]	; (8020450 <_printf_float+0x2b0>)
 802020e:	4891      	ldr	r0, [pc, #580]	; (8020454 <_printf_float+0x2b4>)
 8020210:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8020214:	bf94      	ite	ls
 8020216:	4698      	movls	r8, r3
 8020218:	4680      	movhi	r8, r0
 802021a:	2303      	movs	r3, #3
 802021c:	6123      	str	r3, [r4, #16]
 802021e:	f022 0204 	bic.w	r2, r2, #4
 8020222:	2300      	movs	r3, #0
 8020224:	6022      	str	r2, [r4, #0]
 8020226:	9304      	str	r3, [sp, #16]
 8020228:	9700      	str	r7, [sp, #0]
 802022a:	4633      	mov	r3, r6
 802022c:	aa09      	add	r2, sp, #36	; 0x24
 802022e:	4621      	mov	r1, r4
 8020230:	4628      	mov	r0, r5
 8020232:	f000 f9d3 	bl	80205dc <_printf_common>
 8020236:	3001      	adds	r0, #1
 8020238:	f040 808a 	bne.w	8020350 <_printf_float+0x1b0>
 802023c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020240:	b00b      	add	sp, #44	; 0x2c
 8020242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020246:	eeb4 0b40 	vcmp.f64	d0, d0
 802024a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802024e:	d709      	bvc.n	8020264 <_printf_float+0xc4>
 8020250:	ee10 3a90 	vmov	r3, s1
 8020254:	2b00      	cmp	r3, #0
 8020256:	bfbc      	itt	lt
 8020258:	232d      	movlt	r3, #45	; 0x2d
 802025a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802025e:	487e      	ldr	r0, [pc, #504]	; (8020458 <_printf_float+0x2b8>)
 8020260:	4b7e      	ldr	r3, [pc, #504]	; (802045c <_printf_float+0x2bc>)
 8020262:	e7d5      	b.n	8020210 <_printf_float+0x70>
 8020264:	6863      	ldr	r3, [r4, #4]
 8020266:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 802026a:	9104      	str	r1, [sp, #16]
 802026c:	1c59      	adds	r1, r3, #1
 802026e:	d13c      	bne.n	80202ea <_printf_float+0x14a>
 8020270:	2306      	movs	r3, #6
 8020272:	6063      	str	r3, [r4, #4]
 8020274:	2300      	movs	r3, #0
 8020276:	9303      	str	r3, [sp, #12]
 8020278:	ab08      	add	r3, sp, #32
 802027a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802027e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8020282:	ab07      	add	r3, sp, #28
 8020284:	6861      	ldr	r1, [r4, #4]
 8020286:	9300      	str	r3, [sp, #0]
 8020288:	6022      	str	r2, [r4, #0]
 802028a:	f10d 031b 	add.w	r3, sp, #27
 802028e:	4628      	mov	r0, r5
 8020290:	f7ff fef4 	bl	802007c <__cvt>
 8020294:	9b04      	ldr	r3, [sp, #16]
 8020296:	9907      	ldr	r1, [sp, #28]
 8020298:	2b47      	cmp	r3, #71	; 0x47
 802029a:	4680      	mov	r8, r0
 802029c:	d108      	bne.n	80202b0 <_printf_float+0x110>
 802029e:	1cc8      	adds	r0, r1, #3
 80202a0:	db02      	blt.n	80202a8 <_printf_float+0x108>
 80202a2:	6863      	ldr	r3, [r4, #4]
 80202a4:	4299      	cmp	r1, r3
 80202a6:	dd41      	ble.n	802032c <_printf_float+0x18c>
 80202a8:	f1a9 0902 	sub.w	r9, r9, #2
 80202ac:	fa5f f989 	uxtb.w	r9, r9
 80202b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80202b4:	d820      	bhi.n	80202f8 <_printf_float+0x158>
 80202b6:	3901      	subs	r1, #1
 80202b8:	464a      	mov	r2, r9
 80202ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80202be:	9107      	str	r1, [sp, #28]
 80202c0:	f7ff ff2e 	bl	8020120 <__exponent>
 80202c4:	9a08      	ldr	r2, [sp, #32]
 80202c6:	9004      	str	r0, [sp, #16]
 80202c8:	1813      	adds	r3, r2, r0
 80202ca:	2a01      	cmp	r2, #1
 80202cc:	6123      	str	r3, [r4, #16]
 80202ce:	dc02      	bgt.n	80202d6 <_printf_float+0x136>
 80202d0:	6822      	ldr	r2, [r4, #0]
 80202d2:	07d2      	lsls	r2, r2, #31
 80202d4:	d501      	bpl.n	80202da <_printf_float+0x13a>
 80202d6:	3301      	adds	r3, #1
 80202d8:	6123      	str	r3, [r4, #16]
 80202da:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80202de:	2b00      	cmp	r3, #0
 80202e0:	d0a2      	beq.n	8020228 <_printf_float+0x88>
 80202e2:	232d      	movs	r3, #45	; 0x2d
 80202e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80202e8:	e79e      	b.n	8020228 <_printf_float+0x88>
 80202ea:	9904      	ldr	r1, [sp, #16]
 80202ec:	2947      	cmp	r1, #71	; 0x47
 80202ee:	d1c1      	bne.n	8020274 <_printf_float+0xd4>
 80202f0:	2b00      	cmp	r3, #0
 80202f2:	d1bf      	bne.n	8020274 <_printf_float+0xd4>
 80202f4:	2301      	movs	r3, #1
 80202f6:	e7bc      	b.n	8020272 <_printf_float+0xd2>
 80202f8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80202fc:	d118      	bne.n	8020330 <_printf_float+0x190>
 80202fe:	2900      	cmp	r1, #0
 8020300:	6863      	ldr	r3, [r4, #4]
 8020302:	dd0b      	ble.n	802031c <_printf_float+0x17c>
 8020304:	6121      	str	r1, [r4, #16]
 8020306:	b913      	cbnz	r3, 802030e <_printf_float+0x16e>
 8020308:	6822      	ldr	r2, [r4, #0]
 802030a:	07d0      	lsls	r0, r2, #31
 802030c:	d502      	bpl.n	8020314 <_printf_float+0x174>
 802030e:	3301      	adds	r3, #1
 8020310:	440b      	add	r3, r1
 8020312:	6123      	str	r3, [r4, #16]
 8020314:	2300      	movs	r3, #0
 8020316:	65a1      	str	r1, [r4, #88]	; 0x58
 8020318:	9304      	str	r3, [sp, #16]
 802031a:	e7de      	b.n	80202da <_printf_float+0x13a>
 802031c:	b913      	cbnz	r3, 8020324 <_printf_float+0x184>
 802031e:	6822      	ldr	r2, [r4, #0]
 8020320:	07d2      	lsls	r2, r2, #31
 8020322:	d501      	bpl.n	8020328 <_printf_float+0x188>
 8020324:	3302      	adds	r3, #2
 8020326:	e7f4      	b.n	8020312 <_printf_float+0x172>
 8020328:	2301      	movs	r3, #1
 802032a:	e7f2      	b.n	8020312 <_printf_float+0x172>
 802032c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8020330:	9b08      	ldr	r3, [sp, #32]
 8020332:	4299      	cmp	r1, r3
 8020334:	db05      	blt.n	8020342 <_printf_float+0x1a2>
 8020336:	6823      	ldr	r3, [r4, #0]
 8020338:	6121      	str	r1, [r4, #16]
 802033a:	07d8      	lsls	r0, r3, #31
 802033c:	d5ea      	bpl.n	8020314 <_printf_float+0x174>
 802033e:	1c4b      	adds	r3, r1, #1
 8020340:	e7e7      	b.n	8020312 <_printf_float+0x172>
 8020342:	2900      	cmp	r1, #0
 8020344:	bfd4      	ite	le
 8020346:	f1c1 0202 	rsble	r2, r1, #2
 802034a:	2201      	movgt	r2, #1
 802034c:	4413      	add	r3, r2
 802034e:	e7e0      	b.n	8020312 <_printf_float+0x172>
 8020350:	6823      	ldr	r3, [r4, #0]
 8020352:	055a      	lsls	r2, r3, #21
 8020354:	d407      	bmi.n	8020366 <_printf_float+0x1c6>
 8020356:	6923      	ldr	r3, [r4, #16]
 8020358:	4642      	mov	r2, r8
 802035a:	4631      	mov	r1, r6
 802035c:	4628      	mov	r0, r5
 802035e:	47b8      	blx	r7
 8020360:	3001      	adds	r0, #1
 8020362:	d12a      	bne.n	80203ba <_printf_float+0x21a>
 8020364:	e76a      	b.n	802023c <_printf_float+0x9c>
 8020366:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 802036a:	f240 80e2 	bls.w	8020532 <_printf_float+0x392>
 802036e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8020372:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802037a:	d133      	bne.n	80203e4 <_printf_float+0x244>
 802037c:	4a38      	ldr	r2, [pc, #224]	; (8020460 <_printf_float+0x2c0>)
 802037e:	2301      	movs	r3, #1
 8020380:	4631      	mov	r1, r6
 8020382:	4628      	mov	r0, r5
 8020384:	47b8      	blx	r7
 8020386:	3001      	adds	r0, #1
 8020388:	f43f af58 	beq.w	802023c <_printf_float+0x9c>
 802038c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8020390:	429a      	cmp	r2, r3
 8020392:	db02      	blt.n	802039a <_printf_float+0x1fa>
 8020394:	6823      	ldr	r3, [r4, #0]
 8020396:	07d8      	lsls	r0, r3, #31
 8020398:	d50f      	bpl.n	80203ba <_printf_float+0x21a>
 802039a:	4653      	mov	r3, sl
 802039c:	465a      	mov	r2, fp
 802039e:	4631      	mov	r1, r6
 80203a0:	4628      	mov	r0, r5
 80203a2:	47b8      	blx	r7
 80203a4:	3001      	adds	r0, #1
 80203a6:	f43f af49 	beq.w	802023c <_printf_float+0x9c>
 80203aa:	f04f 0800 	mov.w	r8, #0
 80203ae:	f104 091a 	add.w	r9, r4, #26
 80203b2:	9b08      	ldr	r3, [sp, #32]
 80203b4:	3b01      	subs	r3, #1
 80203b6:	4543      	cmp	r3, r8
 80203b8:	dc09      	bgt.n	80203ce <_printf_float+0x22e>
 80203ba:	6823      	ldr	r3, [r4, #0]
 80203bc:	079b      	lsls	r3, r3, #30
 80203be:	f100 8108 	bmi.w	80205d2 <_printf_float+0x432>
 80203c2:	68e0      	ldr	r0, [r4, #12]
 80203c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80203c6:	4298      	cmp	r0, r3
 80203c8:	bfb8      	it	lt
 80203ca:	4618      	movlt	r0, r3
 80203cc:	e738      	b.n	8020240 <_printf_float+0xa0>
 80203ce:	2301      	movs	r3, #1
 80203d0:	464a      	mov	r2, r9
 80203d2:	4631      	mov	r1, r6
 80203d4:	4628      	mov	r0, r5
 80203d6:	47b8      	blx	r7
 80203d8:	3001      	adds	r0, #1
 80203da:	f43f af2f 	beq.w	802023c <_printf_float+0x9c>
 80203de:	f108 0801 	add.w	r8, r8, #1
 80203e2:	e7e6      	b.n	80203b2 <_printf_float+0x212>
 80203e4:	9b07      	ldr	r3, [sp, #28]
 80203e6:	2b00      	cmp	r3, #0
 80203e8:	dc3c      	bgt.n	8020464 <_printf_float+0x2c4>
 80203ea:	4a1d      	ldr	r2, [pc, #116]	; (8020460 <_printf_float+0x2c0>)
 80203ec:	2301      	movs	r3, #1
 80203ee:	4631      	mov	r1, r6
 80203f0:	4628      	mov	r0, r5
 80203f2:	47b8      	blx	r7
 80203f4:	3001      	adds	r0, #1
 80203f6:	f43f af21 	beq.w	802023c <_printf_float+0x9c>
 80203fa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80203fe:	4313      	orrs	r3, r2
 8020400:	d102      	bne.n	8020408 <_printf_float+0x268>
 8020402:	6823      	ldr	r3, [r4, #0]
 8020404:	07d9      	lsls	r1, r3, #31
 8020406:	d5d8      	bpl.n	80203ba <_printf_float+0x21a>
 8020408:	4653      	mov	r3, sl
 802040a:	465a      	mov	r2, fp
 802040c:	4631      	mov	r1, r6
 802040e:	4628      	mov	r0, r5
 8020410:	47b8      	blx	r7
 8020412:	3001      	adds	r0, #1
 8020414:	f43f af12 	beq.w	802023c <_printf_float+0x9c>
 8020418:	f04f 0900 	mov.w	r9, #0
 802041c:	f104 0a1a 	add.w	sl, r4, #26
 8020420:	9b07      	ldr	r3, [sp, #28]
 8020422:	425b      	negs	r3, r3
 8020424:	454b      	cmp	r3, r9
 8020426:	dc01      	bgt.n	802042c <_printf_float+0x28c>
 8020428:	9b08      	ldr	r3, [sp, #32]
 802042a:	e795      	b.n	8020358 <_printf_float+0x1b8>
 802042c:	2301      	movs	r3, #1
 802042e:	4652      	mov	r2, sl
 8020430:	4631      	mov	r1, r6
 8020432:	4628      	mov	r0, r5
 8020434:	47b8      	blx	r7
 8020436:	3001      	adds	r0, #1
 8020438:	f43f af00 	beq.w	802023c <_printf_float+0x9c>
 802043c:	f109 0901 	add.w	r9, r9, #1
 8020440:	e7ee      	b.n	8020420 <_printf_float+0x280>
 8020442:	bf00      	nop
 8020444:	f3af 8000 	nop.w
 8020448:	ffffffff 	.word	0xffffffff
 802044c:	7fefffff 	.word	0x7fefffff
 8020450:	080294f4 	.word	0x080294f4
 8020454:	080294f8 	.word	0x080294f8
 8020458:	08029500 	.word	0x08029500
 802045c:	080294fc 	.word	0x080294fc
 8020460:	08029504 	.word	0x08029504
 8020464:	9a08      	ldr	r2, [sp, #32]
 8020466:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020468:	429a      	cmp	r2, r3
 802046a:	bfa8      	it	ge
 802046c:	461a      	movge	r2, r3
 802046e:	2a00      	cmp	r2, #0
 8020470:	4691      	mov	r9, r2
 8020472:	dc38      	bgt.n	80204e6 <_printf_float+0x346>
 8020474:	2300      	movs	r3, #0
 8020476:	9305      	str	r3, [sp, #20]
 8020478:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802047c:	f104 021a 	add.w	r2, r4, #26
 8020480:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020482:	9905      	ldr	r1, [sp, #20]
 8020484:	9304      	str	r3, [sp, #16]
 8020486:	eba3 0309 	sub.w	r3, r3, r9
 802048a:	428b      	cmp	r3, r1
 802048c:	dc33      	bgt.n	80204f6 <_printf_float+0x356>
 802048e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8020492:	429a      	cmp	r2, r3
 8020494:	db3c      	blt.n	8020510 <_printf_float+0x370>
 8020496:	6823      	ldr	r3, [r4, #0]
 8020498:	07da      	lsls	r2, r3, #31
 802049a:	d439      	bmi.n	8020510 <_printf_float+0x370>
 802049c:	9a08      	ldr	r2, [sp, #32]
 802049e:	9b04      	ldr	r3, [sp, #16]
 80204a0:	9907      	ldr	r1, [sp, #28]
 80204a2:	1ad3      	subs	r3, r2, r3
 80204a4:	eba2 0901 	sub.w	r9, r2, r1
 80204a8:	4599      	cmp	r9, r3
 80204aa:	bfa8      	it	ge
 80204ac:	4699      	movge	r9, r3
 80204ae:	f1b9 0f00 	cmp.w	r9, #0
 80204b2:	dc35      	bgt.n	8020520 <_printf_float+0x380>
 80204b4:	f04f 0800 	mov.w	r8, #0
 80204b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80204bc:	f104 0a1a 	add.w	sl, r4, #26
 80204c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80204c4:	1a9b      	subs	r3, r3, r2
 80204c6:	eba3 0309 	sub.w	r3, r3, r9
 80204ca:	4543      	cmp	r3, r8
 80204cc:	f77f af75 	ble.w	80203ba <_printf_float+0x21a>
 80204d0:	2301      	movs	r3, #1
 80204d2:	4652      	mov	r2, sl
 80204d4:	4631      	mov	r1, r6
 80204d6:	4628      	mov	r0, r5
 80204d8:	47b8      	blx	r7
 80204da:	3001      	adds	r0, #1
 80204dc:	f43f aeae 	beq.w	802023c <_printf_float+0x9c>
 80204e0:	f108 0801 	add.w	r8, r8, #1
 80204e4:	e7ec      	b.n	80204c0 <_printf_float+0x320>
 80204e6:	4613      	mov	r3, r2
 80204e8:	4631      	mov	r1, r6
 80204ea:	4642      	mov	r2, r8
 80204ec:	4628      	mov	r0, r5
 80204ee:	47b8      	blx	r7
 80204f0:	3001      	adds	r0, #1
 80204f2:	d1bf      	bne.n	8020474 <_printf_float+0x2d4>
 80204f4:	e6a2      	b.n	802023c <_printf_float+0x9c>
 80204f6:	2301      	movs	r3, #1
 80204f8:	4631      	mov	r1, r6
 80204fa:	4628      	mov	r0, r5
 80204fc:	9204      	str	r2, [sp, #16]
 80204fe:	47b8      	blx	r7
 8020500:	3001      	adds	r0, #1
 8020502:	f43f ae9b 	beq.w	802023c <_printf_float+0x9c>
 8020506:	9b05      	ldr	r3, [sp, #20]
 8020508:	9a04      	ldr	r2, [sp, #16]
 802050a:	3301      	adds	r3, #1
 802050c:	9305      	str	r3, [sp, #20]
 802050e:	e7b7      	b.n	8020480 <_printf_float+0x2e0>
 8020510:	4653      	mov	r3, sl
 8020512:	465a      	mov	r2, fp
 8020514:	4631      	mov	r1, r6
 8020516:	4628      	mov	r0, r5
 8020518:	47b8      	blx	r7
 802051a:	3001      	adds	r0, #1
 802051c:	d1be      	bne.n	802049c <_printf_float+0x2fc>
 802051e:	e68d      	b.n	802023c <_printf_float+0x9c>
 8020520:	9a04      	ldr	r2, [sp, #16]
 8020522:	464b      	mov	r3, r9
 8020524:	4442      	add	r2, r8
 8020526:	4631      	mov	r1, r6
 8020528:	4628      	mov	r0, r5
 802052a:	47b8      	blx	r7
 802052c:	3001      	adds	r0, #1
 802052e:	d1c1      	bne.n	80204b4 <_printf_float+0x314>
 8020530:	e684      	b.n	802023c <_printf_float+0x9c>
 8020532:	9a08      	ldr	r2, [sp, #32]
 8020534:	2a01      	cmp	r2, #1
 8020536:	dc01      	bgt.n	802053c <_printf_float+0x39c>
 8020538:	07db      	lsls	r3, r3, #31
 802053a:	d537      	bpl.n	80205ac <_printf_float+0x40c>
 802053c:	2301      	movs	r3, #1
 802053e:	4642      	mov	r2, r8
 8020540:	4631      	mov	r1, r6
 8020542:	4628      	mov	r0, r5
 8020544:	47b8      	blx	r7
 8020546:	3001      	adds	r0, #1
 8020548:	f43f ae78 	beq.w	802023c <_printf_float+0x9c>
 802054c:	4653      	mov	r3, sl
 802054e:	465a      	mov	r2, fp
 8020550:	4631      	mov	r1, r6
 8020552:	4628      	mov	r0, r5
 8020554:	47b8      	blx	r7
 8020556:	3001      	adds	r0, #1
 8020558:	f43f ae70 	beq.w	802023c <_printf_float+0x9c>
 802055c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8020560:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020568:	d01b      	beq.n	80205a2 <_printf_float+0x402>
 802056a:	9b08      	ldr	r3, [sp, #32]
 802056c:	f108 0201 	add.w	r2, r8, #1
 8020570:	3b01      	subs	r3, #1
 8020572:	4631      	mov	r1, r6
 8020574:	4628      	mov	r0, r5
 8020576:	47b8      	blx	r7
 8020578:	3001      	adds	r0, #1
 802057a:	d10e      	bne.n	802059a <_printf_float+0x3fa>
 802057c:	e65e      	b.n	802023c <_printf_float+0x9c>
 802057e:	2301      	movs	r3, #1
 8020580:	464a      	mov	r2, r9
 8020582:	4631      	mov	r1, r6
 8020584:	4628      	mov	r0, r5
 8020586:	47b8      	blx	r7
 8020588:	3001      	adds	r0, #1
 802058a:	f43f ae57 	beq.w	802023c <_printf_float+0x9c>
 802058e:	f108 0801 	add.w	r8, r8, #1
 8020592:	9b08      	ldr	r3, [sp, #32]
 8020594:	3b01      	subs	r3, #1
 8020596:	4543      	cmp	r3, r8
 8020598:	dcf1      	bgt.n	802057e <_printf_float+0x3de>
 802059a:	9b04      	ldr	r3, [sp, #16]
 802059c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80205a0:	e6db      	b.n	802035a <_printf_float+0x1ba>
 80205a2:	f04f 0800 	mov.w	r8, #0
 80205a6:	f104 091a 	add.w	r9, r4, #26
 80205aa:	e7f2      	b.n	8020592 <_printf_float+0x3f2>
 80205ac:	2301      	movs	r3, #1
 80205ae:	4642      	mov	r2, r8
 80205b0:	e7df      	b.n	8020572 <_printf_float+0x3d2>
 80205b2:	2301      	movs	r3, #1
 80205b4:	464a      	mov	r2, r9
 80205b6:	4631      	mov	r1, r6
 80205b8:	4628      	mov	r0, r5
 80205ba:	47b8      	blx	r7
 80205bc:	3001      	adds	r0, #1
 80205be:	f43f ae3d 	beq.w	802023c <_printf_float+0x9c>
 80205c2:	f108 0801 	add.w	r8, r8, #1
 80205c6:	68e3      	ldr	r3, [r4, #12]
 80205c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80205ca:	1a5b      	subs	r3, r3, r1
 80205cc:	4543      	cmp	r3, r8
 80205ce:	dcf0      	bgt.n	80205b2 <_printf_float+0x412>
 80205d0:	e6f7      	b.n	80203c2 <_printf_float+0x222>
 80205d2:	f04f 0800 	mov.w	r8, #0
 80205d6:	f104 0919 	add.w	r9, r4, #25
 80205da:	e7f4      	b.n	80205c6 <_printf_float+0x426>

080205dc <_printf_common>:
 80205dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80205e0:	4616      	mov	r6, r2
 80205e2:	4699      	mov	r9, r3
 80205e4:	688a      	ldr	r2, [r1, #8]
 80205e6:	690b      	ldr	r3, [r1, #16]
 80205e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80205ec:	4293      	cmp	r3, r2
 80205ee:	bfb8      	it	lt
 80205f0:	4613      	movlt	r3, r2
 80205f2:	6033      	str	r3, [r6, #0]
 80205f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80205f8:	4607      	mov	r7, r0
 80205fa:	460c      	mov	r4, r1
 80205fc:	b10a      	cbz	r2, 8020602 <_printf_common+0x26>
 80205fe:	3301      	adds	r3, #1
 8020600:	6033      	str	r3, [r6, #0]
 8020602:	6823      	ldr	r3, [r4, #0]
 8020604:	0699      	lsls	r1, r3, #26
 8020606:	bf42      	ittt	mi
 8020608:	6833      	ldrmi	r3, [r6, #0]
 802060a:	3302      	addmi	r3, #2
 802060c:	6033      	strmi	r3, [r6, #0]
 802060e:	6825      	ldr	r5, [r4, #0]
 8020610:	f015 0506 	ands.w	r5, r5, #6
 8020614:	d106      	bne.n	8020624 <_printf_common+0x48>
 8020616:	f104 0a19 	add.w	sl, r4, #25
 802061a:	68e3      	ldr	r3, [r4, #12]
 802061c:	6832      	ldr	r2, [r6, #0]
 802061e:	1a9b      	subs	r3, r3, r2
 8020620:	42ab      	cmp	r3, r5
 8020622:	dc26      	bgt.n	8020672 <_printf_common+0x96>
 8020624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020628:	1e13      	subs	r3, r2, #0
 802062a:	6822      	ldr	r2, [r4, #0]
 802062c:	bf18      	it	ne
 802062e:	2301      	movne	r3, #1
 8020630:	0692      	lsls	r2, r2, #26
 8020632:	d42b      	bmi.n	802068c <_printf_common+0xb0>
 8020634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020638:	4649      	mov	r1, r9
 802063a:	4638      	mov	r0, r7
 802063c:	47c0      	blx	r8
 802063e:	3001      	adds	r0, #1
 8020640:	d01e      	beq.n	8020680 <_printf_common+0xa4>
 8020642:	6823      	ldr	r3, [r4, #0]
 8020644:	68e5      	ldr	r5, [r4, #12]
 8020646:	6832      	ldr	r2, [r6, #0]
 8020648:	f003 0306 	and.w	r3, r3, #6
 802064c:	2b04      	cmp	r3, #4
 802064e:	bf08      	it	eq
 8020650:	1aad      	subeq	r5, r5, r2
 8020652:	68a3      	ldr	r3, [r4, #8]
 8020654:	6922      	ldr	r2, [r4, #16]
 8020656:	bf0c      	ite	eq
 8020658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802065c:	2500      	movne	r5, #0
 802065e:	4293      	cmp	r3, r2
 8020660:	bfc4      	itt	gt
 8020662:	1a9b      	subgt	r3, r3, r2
 8020664:	18ed      	addgt	r5, r5, r3
 8020666:	2600      	movs	r6, #0
 8020668:	341a      	adds	r4, #26
 802066a:	42b5      	cmp	r5, r6
 802066c:	d11a      	bne.n	80206a4 <_printf_common+0xc8>
 802066e:	2000      	movs	r0, #0
 8020670:	e008      	b.n	8020684 <_printf_common+0xa8>
 8020672:	2301      	movs	r3, #1
 8020674:	4652      	mov	r2, sl
 8020676:	4649      	mov	r1, r9
 8020678:	4638      	mov	r0, r7
 802067a:	47c0      	blx	r8
 802067c:	3001      	adds	r0, #1
 802067e:	d103      	bne.n	8020688 <_printf_common+0xac>
 8020680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020688:	3501      	adds	r5, #1
 802068a:	e7c6      	b.n	802061a <_printf_common+0x3e>
 802068c:	18e1      	adds	r1, r4, r3
 802068e:	1c5a      	adds	r2, r3, #1
 8020690:	2030      	movs	r0, #48	; 0x30
 8020692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020696:	4422      	add	r2, r4
 8020698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802069c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80206a0:	3302      	adds	r3, #2
 80206a2:	e7c7      	b.n	8020634 <_printf_common+0x58>
 80206a4:	2301      	movs	r3, #1
 80206a6:	4622      	mov	r2, r4
 80206a8:	4649      	mov	r1, r9
 80206aa:	4638      	mov	r0, r7
 80206ac:	47c0      	blx	r8
 80206ae:	3001      	adds	r0, #1
 80206b0:	d0e6      	beq.n	8020680 <_printf_common+0xa4>
 80206b2:	3601      	adds	r6, #1
 80206b4:	e7d9      	b.n	802066a <_printf_common+0x8e>
	...

080206b8 <_printf_i>:
 80206b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80206bc:	460c      	mov	r4, r1
 80206be:	4691      	mov	r9, r2
 80206c0:	7e27      	ldrb	r7, [r4, #24]
 80206c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80206c4:	2f78      	cmp	r7, #120	; 0x78
 80206c6:	4680      	mov	r8, r0
 80206c8:	469a      	mov	sl, r3
 80206ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80206ce:	d807      	bhi.n	80206e0 <_printf_i+0x28>
 80206d0:	2f62      	cmp	r7, #98	; 0x62
 80206d2:	d80a      	bhi.n	80206ea <_printf_i+0x32>
 80206d4:	2f00      	cmp	r7, #0
 80206d6:	f000 80d8 	beq.w	802088a <_printf_i+0x1d2>
 80206da:	2f58      	cmp	r7, #88	; 0x58
 80206dc:	f000 80a3 	beq.w	8020826 <_printf_i+0x16e>
 80206e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80206e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80206e8:	e03a      	b.n	8020760 <_printf_i+0xa8>
 80206ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80206ee:	2b15      	cmp	r3, #21
 80206f0:	d8f6      	bhi.n	80206e0 <_printf_i+0x28>
 80206f2:	a001      	add	r0, pc, #4	; (adr r0, 80206f8 <_printf_i+0x40>)
 80206f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80206f8:	08020751 	.word	0x08020751
 80206fc:	08020765 	.word	0x08020765
 8020700:	080206e1 	.word	0x080206e1
 8020704:	080206e1 	.word	0x080206e1
 8020708:	080206e1 	.word	0x080206e1
 802070c:	080206e1 	.word	0x080206e1
 8020710:	08020765 	.word	0x08020765
 8020714:	080206e1 	.word	0x080206e1
 8020718:	080206e1 	.word	0x080206e1
 802071c:	080206e1 	.word	0x080206e1
 8020720:	080206e1 	.word	0x080206e1
 8020724:	08020871 	.word	0x08020871
 8020728:	08020795 	.word	0x08020795
 802072c:	08020853 	.word	0x08020853
 8020730:	080206e1 	.word	0x080206e1
 8020734:	080206e1 	.word	0x080206e1
 8020738:	08020893 	.word	0x08020893
 802073c:	080206e1 	.word	0x080206e1
 8020740:	08020795 	.word	0x08020795
 8020744:	080206e1 	.word	0x080206e1
 8020748:	080206e1 	.word	0x080206e1
 802074c:	0802085b 	.word	0x0802085b
 8020750:	680b      	ldr	r3, [r1, #0]
 8020752:	1d1a      	adds	r2, r3, #4
 8020754:	681b      	ldr	r3, [r3, #0]
 8020756:	600a      	str	r2, [r1, #0]
 8020758:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802075c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020760:	2301      	movs	r3, #1
 8020762:	e0a3      	b.n	80208ac <_printf_i+0x1f4>
 8020764:	6825      	ldr	r5, [r4, #0]
 8020766:	6808      	ldr	r0, [r1, #0]
 8020768:	062e      	lsls	r6, r5, #24
 802076a:	f100 0304 	add.w	r3, r0, #4
 802076e:	d50a      	bpl.n	8020786 <_printf_i+0xce>
 8020770:	6805      	ldr	r5, [r0, #0]
 8020772:	600b      	str	r3, [r1, #0]
 8020774:	2d00      	cmp	r5, #0
 8020776:	da03      	bge.n	8020780 <_printf_i+0xc8>
 8020778:	232d      	movs	r3, #45	; 0x2d
 802077a:	426d      	negs	r5, r5
 802077c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020780:	485e      	ldr	r0, [pc, #376]	; (80208fc <_printf_i+0x244>)
 8020782:	230a      	movs	r3, #10
 8020784:	e019      	b.n	80207ba <_printf_i+0x102>
 8020786:	f015 0f40 	tst.w	r5, #64	; 0x40
 802078a:	6805      	ldr	r5, [r0, #0]
 802078c:	600b      	str	r3, [r1, #0]
 802078e:	bf18      	it	ne
 8020790:	b22d      	sxthne	r5, r5
 8020792:	e7ef      	b.n	8020774 <_printf_i+0xbc>
 8020794:	680b      	ldr	r3, [r1, #0]
 8020796:	6825      	ldr	r5, [r4, #0]
 8020798:	1d18      	adds	r0, r3, #4
 802079a:	6008      	str	r0, [r1, #0]
 802079c:	0628      	lsls	r0, r5, #24
 802079e:	d501      	bpl.n	80207a4 <_printf_i+0xec>
 80207a0:	681d      	ldr	r5, [r3, #0]
 80207a2:	e002      	b.n	80207aa <_printf_i+0xf2>
 80207a4:	0669      	lsls	r1, r5, #25
 80207a6:	d5fb      	bpl.n	80207a0 <_printf_i+0xe8>
 80207a8:	881d      	ldrh	r5, [r3, #0]
 80207aa:	4854      	ldr	r0, [pc, #336]	; (80208fc <_printf_i+0x244>)
 80207ac:	2f6f      	cmp	r7, #111	; 0x6f
 80207ae:	bf0c      	ite	eq
 80207b0:	2308      	moveq	r3, #8
 80207b2:	230a      	movne	r3, #10
 80207b4:	2100      	movs	r1, #0
 80207b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80207ba:	6866      	ldr	r6, [r4, #4]
 80207bc:	60a6      	str	r6, [r4, #8]
 80207be:	2e00      	cmp	r6, #0
 80207c0:	bfa2      	ittt	ge
 80207c2:	6821      	ldrge	r1, [r4, #0]
 80207c4:	f021 0104 	bicge.w	r1, r1, #4
 80207c8:	6021      	strge	r1, [r4, #0]
 80207ca:	b90d      	cbnz	r5, 80207d0 <_printf_i+0x118>
 80207cc:	2e00      	cmp	r6, #0
 80207ce:	d04d      	beq.n	802086c <_printf_i+0x1b4>
 80207d0:	4616      	mov	r6, r2
 80207d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80207d6:	fb03 5711 	mls	r7, r3, r1, r5
 80207da:	5dc7      	ldrb	r7, [r0, r7]
 80207dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80207e0:	462f      	mov	r7, r5
 80207e2:	42bb      	cmp	r3, r7
 80207e4:	460d      	mov	r5, r1
 80207e6:	d9f4      	bls.n	80207d2 <_printf_i+0x11a>
 80207e8:	2b08      	cmp	r3, #8
 80207ea:	d10b      	bne.n	8020804 <_printf_i+0x14c>
 80207ec:	6823      	ldr	r3, [r4, #0]
 80207ee:	07df      	lsls	r7, r3, #31
 80207f0:	d508      	bpl.n	8020804 <_printf_i+0x14c>
 80207f2:	6923      	ldr	r3, [r4, #16]
 80207f4:	6861      	ldr	r1, [r4, #4]
 80207f6:	4299      	cmp	r1, r3
 80207f8:	bfde      	ittt	le
 80207fa:	2330      	movle	r3, #48	; 0x30
 80207fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020800:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8020804:	1b92      	subs	r2, r2, r6
 8020806:	6122      	str	r2, [r4, #16]
 8020808:	f8cd a000 	str.w	sl, [sp]
 802080c:	464b      	mov	r3, r9
 802080e:	aa03      	add	r2, sp, #12
 8020810:	4621      	mov	r1, r4
 8020812:	4640      	mov	r0, r8
 8020814:	f7ff fee2 	bl	80205dc <_printf_common>
 8020818:	3001      	adds	r0, #1
 802081a:	d14c      	bne.n	80208b6 <_printf_i+0x1fe>
 802081c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020820:	b004      	add	sp, #16
 8020822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020826:	4835      	ldr	r0, [pc, #212]	; (80208fc <_printf_i+0x244>)
 8020828:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802082c:	6823      	ldr	r3, [r4, #0]
 802082e:	680e      	ldr	r6, [r1, #0]
 8020830:	061f      	lsls	r7, r3, #24
 8020832:	f856 5b04 	ldr.w	r5, [r6], #4
 8020836:	600e      	str	r6, [r1, #0]
 8020838:	d514      	bpl.n	8020864 <_printf_i+0x1ac>
 802083a:	07d9      	lsls	r1, r3, #31
 802083c:	bf44      	itt	mi
 802083e:	f043 0320 	orrmi.w	r3, r3, #32
 8020842:	6023      	strmi	r3, [r4, #0]
 8020844:	b91d      	cbnz	r5, 802084e <_printf_i+0x196>
 8020846:	6823      	ldr	r3, [r4, #0]
 8020848:	f023 0320 	bic.w	r3, r3, #32
 802084c:	6023      	str	r3, [r4, #0]
 802084e:	2310      	movs	r3, #16
 8020850:	e7b0      	b.n	80207b4 <_printf_i+0xfc>
 8020852:	6823      	ldr	r3, [r4, #0]
 8020854:	f043 0320 	orr.w	r3, r3, #32
 8020858:	6023      	str	r3, [r4, #0]
 802085a:	2378      	movs	r3, #120	; 0x78
 802085c:	4828      	ldr	r0, [pc, #160]	; (8020900 <_printf_i+0x248>)
 802085e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020862:	e7e3      	b.n	802082c <_printf_i+0x174>
 8020864:	065e      	lsls	r6, r3, #25
 8020866:	bf48      	it	mi
 8020868:	b2ad      	uxthmi	r5, r5
 802086a:	e7e6      	b.n	802083a <_printf_i+0x182>
 802086c:	4616      	mov	r6, r2
 802086e:	e7bb      	b.n	80207e8 <_printf_i+0x130>
 8020870:	680b      	ldr	r3, [r1, #0]
 8020872:	6826      	ldr	r6, [r4, #0]
 8020874:	6960      	ldr	r0, [r4, #20]
 8020876:	1d1d      	adds	r5, r3, #4
 8020878:	600d      	str	r5, [r1, #0]
 802087a:	0635      	lsls	r5, r6, #24
 802087c:	681b      	ldr	r3, [r3, #0]
 802087e:	d501      	bpl.n	8020884 <_printf_i+0x1cc>
 8020880:	6018      	str	r0, [r3, #0]
 8020882:	e002      	b.n	802088a <_printf_i+0x1d2>
 8020884:	0671      	lsls	r1, r6, #25
 8020886:	d5fb      	bpl.n	8020880 <_printf_i+0x1c8>
 8020888:	8018      	strh	r0, [r3, #0]
 802088a:	2300      	movs	r3, #0
 802088c:	6123      	str	r3, [r4, #16]
 802088e:	4616      	mov	r6, r2
 8020890:	e7ba      	b.n	8020808 <_printf_i+0x150>
 8020892:	680b      	ldr	r3, [r1, #0]
 8020894:	1d1a      	adds	r2, r3, #4
 8020896:	600a      	str	r2, [r1, #0]
 8020898:	681e      	ldr	r6, [r3, #0]
 802089a:	6862      	ldr	r2, [r4, #4]
 802089c:	2100      	movs	r1, #0
 802089e:	4630      	mov	r0, r6
 80208a0:	f7df fd26 	bl	80002f0 <memchr>
 80208a4:	b108      	cbz	r0, 80208aa <_printf_i+0x1f2>
 80208a6:	1b80      	subs	r0, r0, r6
 80208a8:	6060      	str	r0, [r4, #4]
 80208aa:	6863      	ldr	r3, [r4, #4]
 80208ac:	6123      	str	r3, [r4, #16]
 80208ae:	2300      	movs	r3, #0
 80208b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80208b4:	e7a8      	b.n	8020808 <_printf_i+0x150>
 80208b6:	6923      	ldr	r3, [r4, #16]
 80208b8:	4632      	mov	r2, r6
 80208ba:	4649      	mov	r1, r9
 80208bc:	4640      	mov	r0, r8
 80208be:	47d0      	blx	sl
 80208c0:	3001      	adds	r0, #1
 80208c2:	d0ab      	beq.n	802081c <_printf_i+0x164>
 80208c4:	6823      	ldr	r3, [r4, #0]
 80208c6:	079b      	lsls	r3, r3, #30
 80208c8:	d413      	bmi.n	80208f2 <_printf_i+0x23a>
 80208ca:	68e0      	ldr	r0, [r4, #12]
 80208cc:	9b03      	ldr	r3, [sp, #12]
 80208ce:	4298      	cmp	r0, r3
 80208d0:	bfb8      	it	lt
 80208d2:	4618      	movlt	r0, r3
 80208d4:	e7a4      	b.n	8020820 <_printf_i+0x168>
 80208d6:	2301      	movs	r3, #1
 80208d8:	4632      	mov	r2, r6
 80208da:	4649      	mov	r1, r9
 80208dc:	4640      	mov	r0, r8
 80208de:	47d0      	blx	sl
 80208e0:	3001      	adds	r0, #1
 80208e2:	d09b      	beq.n	802081c <_printf_i+0x164>
 80208e4:	3501      	adds	r5, #1
 80208e6:	68e3      	ldr	r3, [r4, #12]
 80208e8:	9903      	ldr	r1, [sp, #12]
 80208ea:	1a5b      	subs	r3, r3, r1
 80208ec:	42ab      	cmp	r3, r5
 80208ee:	dcf2      	bgt.n	80208d6 <_printf_i+0x21e>
 80208f0:	e7eb      	b.n	80208ca <_printf_i+0x212>
 80208f2:	2500      	movs	r5, #0
 80208f4:	f104 0619 	add.w	r6, r4, #25
 80208f8:	e7f5      	b.n	80208e6 <_printf_i+0x22e>
 80208fa:	bf00      	nop
 80208fc:	08029506 	.word	0x08029506
 8020900:	08029517 	.word	0x08029517

08020904 <_scanf_float>:
 8020904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020908:	b087      	sub	sp, #28
 802090a:	4617      	mov	r7, r2
 802090c:	9303      	str	r3, [sp, #12]
 802090e:	688b      	ldr	r3, [r1, #8]
 8020910:	1e5a      	subs	r2, r3, #1
 8020912:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020916:	bf83      	ittte	hi
 8020918:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802091c:	195b      	addhi	r3, r3, r5
 802091e:	9302      	strhi	r3, [sp, #8]
 8020920:	2300      	movls	r3, #0
 8020922:	bf86      	itte	hi
 8020924:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020928:	608b      	strhi	r3, [r1, #8]
 802092a:	9302      	strls	r3, [sp, #8]
 802092c:	680b      	ldr	r3, [r1, #0]
 802092e:	468b      	mov	fp, r1
 8020930:	2500      	movs	r5, #0
 8020932:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8020936:	f84b 3b1c 	str.w	r3, [fp], #28
 802093a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802093e:	4680      	mov	r8, r0
 8020940:	460c      	mov	r4, r1
 8020942:	465e      	mov	r6, fp
 8020944:	46aa      	mov	sl, r5
 8020946:	46a9      	mov	r9, r5
 8020948:	9501      	str	r5, [sp, #4]
 802094a:	68a2      	ldr	r2, [r4, #8]
 802094c:	b152      	cbz	r2, 8020964 <_scanf_float+0x60>
 802094e:	683b      	ldr	r3, [r7, #0]
 8020950:	781b      	ldrb	r3, [r3, #0]
 8020952:	2b4e      	cmp	r3, #78	; 0x4e
 8020954:	d864      	bhi.n	8020a20 <_scanf_float+0x11c>
 8020956:	2b40      	cmp	r3, #64	; 0x40
 8020958:	d83c      	bhi.n	80209d4 <_scanf_float+0xd0>
 802095a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 802095e:	b2c8      	uxtb	r0, r1
 8020960:	280e      	cmp	r0, #14
 8020962:	d93a      	bls.n	80209da <_scanf_float+0xd6>
 8020964:	f1b9 0f00 	cmp.w	r9, #0
 8020968:	d003      	beq.n	8020972 <_scanf_float+0x6e>
 802096a:	6823      	ldr	r3, [r4, #0]
 802096c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020970:	6023      	str	r3, [r4, #0]
 8020972:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8020976:	f1ba 0f01 	cmp.w	sl, #1
 802097a:	f200 8113 	bhi.w	8020ba4 <_scanf_float+0x2a0>
 802097e:	455e      	cmp	r6, fp
 8020980:	f200 8105 	bhi.w	8020b8e <_scanf_float+0x28a>
 8020984:	2501      	movs	r5, #1
 8020986:	4628      	mov	r0, r5
 8020988:	b007      	add	sp, #28
 802098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802098e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8020992:	2a0d      	cmp	r2, #13
 8020994:	d8e6      	bhi.n	8020964 <_scanf_float+0x60>
 8020996:	a101      	add	r1, pc, #4	; (adr r1, 802099c <_scanf_float+0x98>)
 8020998:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802099c:	08020adb 	.word	0x08020adb
 80209a0:	08020965 	.word	0x08020965
 80209a4:	08020965 	.word	0x08020965
 80209a8:	08020965 	.word	0x08020965
 80209ac:	08020b3b 	.word	0x08020b3b
 80209b0:	08020b13 	.word	0x08020b13
 80209b4:	08020965 	.word	0x08020965
 80209b8:	08020965 	.word	0x08020965
 80209bc:	08020ae9 	.word	0x08020ae9
 80209c0:	08020965 	.word	0x08020965
 80209c4:	08020965 	.word	0x08020965
 80209c8:	08020965 	.word	0x08020965
 80209cc:	08020965 	.word	0x08020965
 80209d0:	08020aa1 	.word	0x08020aa1
 80209d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80209d8:	e7db      	b.n	8020992 <_scanf_float+0x8e>
 80209da:	290e      	cmp	r1, #14
 80209dc:	d8c2      	bhi.n	8020964 <_scanf_float+0x60>
 80209de:	a001      	add	r0, pc, #4	; (adr r0, 80209e4 <_scanf_float+0xe0>)
 80209e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80209e4:	08020a93 	.word	0x08020a93
 80209e8:	08020965 	.word	0x08020965
 80209ec:	08020a93 	.word	0x08020a93
 80209f0:	08020b27 	.word	0x08020b27
 80209f4:	08020965 	.word	0x08020965
 80209f8:	08020a41 	.word	0x08020a41
 80209fc:	08020a7d 	.word	0x08020a7d
 8020a00:	08020a7d 	.word	0x08020a7d
 8020a04:	08020a7d 	.word	0x08020a7d
 8020a08:	08020a7d 	.word	0x08020a7d
 8020a0c:	08020a7d 	.word	0x08020a7d
 8020a10:	08020a7d 	.word	0x08020a7d
 8020a14:	08020a7d 	.word	0x08020a7d
 8020a18:	08020a7d 	.word	0x08020a7d
 8020a1c:	08020a7d 	.word	0x08020a7d
 8020a20:	2b6e      	cmp	r3, #110	; 0x6e
 8020a22:	d809      	bhi.n	8020a38 <_scanf_float+0x134>
 8020a24:	2b60      	cmp	r3, #96	; 0x60
 8020a26:	d8b2      	bhi.n	802098e <_scanf_float+0x8a>
 8020a28:	2b54      	cmp	r3, #84	; 0x54
 8020a2a:	d077      	beq.n	8020b1c <_scanf_float+0x218>
 8020a2c:	2b59      	cmp	r3, #89	; 0x59
 8020a2e:	d199      	bne.n	8020964 <_scanf_float+0x60>
 8020a30:	2d07      	cmp	r5, #7
 8020a32:	d197      	bne.n	8020964 <_scanf_float+0x60>
 8020a34:	2508      	movs	r5, #8
 8020a36:	e029      	b.n	8020a8c <_scanf_float+0x188>
 8020a38:	2b74      	cmp	r3, #116	; 0x74
 8020a3a:	d06f      	beq.n	8020b1c <_scanf_float+0x218>
 8020a3c:	2b79      	cmp	r3, #121	; 0x79
 8020a3e:	e7f6      	b.n	8020a2e <_scanf_float+0x12a>
 8020a40:	6821      	ldr	r1, [r4, #0]
 8020a42:	05c8      	lsls	r0, r1, #23
 8020a44:	d51a      	bpl.n	8020a7c <_scanf_float+0x178>
 8020a46:	9b02      	ldr	r3, [sp, #8]
 8020a48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8020a4c:	6021      	str	r1, [r4, #0]
 8020a4e:	f109 0901 	add.w	r9, r9, #1
 8020a52:	b11b      	cbz	r3, 8020a5c <_scanf_float+0x158>
 8020a54:	3b01      	subs	r3, #1
 8020a56:	3201      	adds	r2, #1
 8020a58:	9302      	str	r3, [sp, #8]
 8020a5a:	60a2      	str	r2, [r4, #8]
 8020a5c:	68a3      	ldr	r3, [r4, #8]
 8020a5e:	3b01      	subs	r3, #1
 8020a60:	60a3      	str	r3, [r4, #8]
 8020a62:	6923      	ldr	r3, [r4, #16]
 8020a64:	3301      	adds	r3, #1
 8020a66:	6123      	str	r3, [r4, #16]
 8020a68:	687b      	ldr	r3, [r7, #4]
 8020a6a:	3b01      	subs	r3, #1
 8020a6c:	2b00      	cmp	r3, #0
 8020a6e:	607b      	str	r3, [r7, #4]
 8020a70:	f340 8084 	ble.w	8020b7c <_scanf_float+0x278>
 8020a74:	683b      	ldr	r3, [r7, #0]
 8020a76:	3301      	adds	r3, #1
 8020a78:	603b      	str	r3, [r7, #0]
 8020a7a:	e766      	b.n	802094a <_scanf_float+0x46>
 8020a7c:	eb1a 0f05 	cmn.w	sl, r5
 8020a80:	f47f af70 	bne.w	8020964 <_scanf_float+0x60>
 8020a84:	6822      	ldr	r2, [r4, #0]
 8020a86:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8020a8a:	6022      	str	r2, [r4, #0]
 8020a8c:	f806 3b01 	strb.w	r3, [r6], #1
 8020a90:	e7e4      	b.n	8020a5c <_scanf_float+0x158>
 8020a92:	6822      	ldr	r2, [r4, #0]
 8020a94:	0610      	lsls	r0, r2, #24
 8020a96:	f57f af65 	bpl.w	8020964 <_scanf_float+0x60>
 8020a9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8020a9e:	e7f4      	b.n	8020a8a <_scanf_float+0x186>
 8020aa0:	f1ba 0f00 	cmp.w	sl, #0
 8020aa4:	d10e      	bne.n	8020ac4 <_scanf_float+0x1c0>
 8020aa6:	f1b9 0f00 	cmp.w	r9, #0
 8020aaa:	d10e      	bne.n	8020aca <_scanf_float+0x1c6>
 8020aac:	6822      	ldr	r2, [r4, #0]
 8020aae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020ab2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8020ab6:	d108      	bne.n	8020aca <_scanf_float+0x1c6>
 8020ab8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020abc:	6022      	str	r2, [r4, #0]
 8020abe:	f04f 0a01 	mov.w	sl, #1
 8020ac2:	e7e3      	b.n	8020a8c <_scanf_float+0x188>
 8020ac4:	f1ba 0f02 	cmp.w	sl, #2
 8020ac8:	d055      	beq.n	8020b76 <_scanf_float+0x272>
 8020aca:	2d01      	cmp	r5, #1
 8020acc:	d002      	beq.n	8020ad4 <_scanf_float+0x1d0>
 8020ace:	2d04      	cmp	r5, #4
 8020ad0:	f47f af48 	bne.w	8020964 <_scanf_float+0x60>
 8020ad4:	3501      	adds	r5, #1
 8020ad6:	b2ed      	uxtb	r5, r5
 8020ad8:	e7d8      	b.n	8020a8c <_scanf_float+0x188>
 8020ada:	f1ba 0f01 	cmp.w	sl, #1
 8020ade:	f47f af41 	bne.w	8020964 <_scanf_float+0x60>
 8020ae2:	f04f 0a02 	mov.w	sl, #2
 8020ae6:	e7d1      	b.n	8020a8c <_scanf_float+0x188>
 8020ae8:	b97d      	cbnz	r5, 8020b0a <_scanf_float+0x206>
 8020aea:	f1b9 0f00 	cmp.w	r9, #0
 8020aee:	f47f af3c 	bne.w	802096a <_scanf_float+0x66>
 8020af2:	6822      	ldr	r2, [r4, #0]
 8020af4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020af8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8020afc:	f47f af39 	bne.w	8020972 <_scanf_float+0x6e>
 8020b00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020b04:	6022      	str	r2, [r4, #0]
 8020b06:	2501      	movs	r5, #1
 8020b08:	e7c0      	b.n	8020a8c <_scanf_float+0x188>
 8020b0a:	2d03      	cmp	r5, #3
 8020b0c:	d0e2      	beq.n	8020ad4 <_scanf_float+0x1d0>
 8020b0e:	2d05      	cmp	r5, #5
 8020b10:	e7de      	b.n	8020ad0 <_scanf_float+0x1cc>
 8020b12:	2d02      	cmp	r5, #2
 8020b14:	f47f af26 	bne.w	8020964 <_scanf_float+0x60>
 8020b18:	2503      	movs	r5, #3
 8020b1a:	e7b7      	b.n	8020a8c <_scanf_float+0x188>
 8020b1c:	2d06      	cmp	r5, #6
 8020b1e:	f47f af21 	bne.w	8020964 <_scanf_float+0x60>
 8020b22:	2507      	movs	r5, #7
 8020b24:	e7b2      	b.n	8020a8c <_scanf_float+0x188>
 8020b26:	6822      	ldr	r2, [r4, #0]
 8020b28:	0591      	lsls	r1, r2, #22
 8020b2a:	f57f af1b 	bpl.w	8020964 <_scanf_float+0x60>
 8020b2e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8020b32:	6022      	str	r2, [r4, #0]
 8020b34:	f8cd 9004 	str.w	r9, [sp, #4]
 8020b38:	e7a8      	b.n	8020a8c <_scanf_float+0x188>
 8020b3a:	6822      	ldr	r2, [r4, #0]
 8020b3c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8020b40:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8020b44:	d006      	beq.n	8020b54 <_scanf_float+0x250>
 8020b46:	0550      	lsls	r0, r2, #21
 8020b48:	f57f af0c 	bpl.w	8020964 <_scanf_float+0x60>
 8020b4c:	f1b9 0f00 	cmp.w	r9, #0
 8020b50:	f43f af0f 	beq.w	8020972 <_scanf_float+0x6e>
 8020b54:	0591      	lsls	r1, r2, #22
 8020b56:	bf58      	it	pl
 8020b58:	9901      	ldrpl	r1, [sp, #4]
 8020b5a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020b5e:	bf58      	it	pl
 8020b60:	eba9 0101 	subpl.w	r1, r9, r1
 8020b64:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8020b68:	bf58      	it	pl
 8020b6a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8020b6e:	6022      	str	r2, [r4, #0]
 8020b70:	f04f 0900 	mov.w	r9, #0
 8020b74:	e78a      	b.n	8020a8c <_scanf_float+0x188>
 8020b76:	f04f 0a03 	mov.w	sl, #3
 8020b7a:	e787      	b.n	8020a8c <_scanf_float+0x188>
 8020b7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020b80:	4639      	mov	r1, r7
 8020b82:	4640      	mov	r0, r8
 8020b84:	4798      	blx	r3
 8020b86:	2800      	cmp	r0, #0
 8020b88:	f43f aedf 	beq.w	802094a <_scanf_float+0x46>
 8020b8c:	e6ea      	b.n	8020964 <_scanf_float+0x60>
 8020b8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020b92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020b96:	463a      	mov	r2, r7
 8020b98:	4640      	mov	r0, r8
 8020b9a:	4798      	blx	r3
 8020b9c:	6923      	ldr	r3, [r4, #16]
 8020b9e:	3b01      	subs	r3, #1
 8020ba0:	6123      	str	r3, [r4, #16]
 8020ba2:	e6ec      	b.n	802097e <_scanf_float+0x7a>
 8020ba4:	1e6b      	subs	r3, r5, #1
 8020ba6:	2b06      	cmp	r3, #6
 8020ba8:	d825      	bhi.n	8020bf6 <_scanf_float+0x2f2>
 8020baa:	2d02      	cmp	r5, #2
 8020bac:	d836      	bhi.n	8020c1c <_scanf_float+0x318>
 8020bae:	455e      	cmp	r6, fp
 8020bb0:	f67f aee8 	bls.w	8020984 <_scanf_float+0x80>
 8020bb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020bb8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020bbc:	463a      	mov	r2, r7
 8020bbe:	4640      	mov	r0, r8
 8020bc0:	4798      	blx	r3
 8020bc2:	6923      	ldr	r3, [r4, #16]
 8020bc4:	3b01      	subs	r3, #1
 8020bc6:	6123      	str	r3, [r4, #16]
 8020bc8:	e7f1      	b.n	8020bae <_scanf_float+0x2aa>
 8020bca:	9802      	ldr	r0, [sp, #8]
 8020bcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020bd0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8020bd4:	9002      	str	r0, [sp, #8]
 8020bd6:	463a      	mov	r2, r7
 8020bd8:	4640      	mov	r0, r8
 8020bda:	4798      	blx	r3
 8020bdc:	6923      	ldr	r3, [r4, #16]
 8020bde:	3b01      	subs	r3, #1
 8020be0:	6123      	str	r3, [r4, #16]
 8020be2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8020be6:	fa5f fa8a 	uxtb.w	sl, sl
 8020bea:	f1ba 0f02 	cmp.w	sl, #2
 8020bee:	d1ec      	bne.n	8020bca <_scanf_float+0x2c6>
 8020bf0:	3d03      	subs	r5, #3
 8020bf2:	b2ed      	uxtb	r5, r5
 8020bf4:	1b76      	subs	r6, r6, r5
 8020bf6:	6823      	ldr	r3, [r4, #0]
 8020bf8:	05da      	lsls	r2, r3, #23
 8020bfa:	d52f      	bpl.n	8020c5c <_scanf_float+0x358>
 8020bfc:	055b      	lsls	r3, r3, #21
 8020bfe:	d510      	bpl.n	8020c22 <_scanf_float+0x31e>
 8020c00:	455e      	cmp	r6, fp
 8020c02:	f67f aebf 	bls.w	8020984 <_scanf_float+0x80>
 8020c06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020c0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020c0e:	463a      	mov	r2, r7
 8020c10:	4640      	mov	r0, r8
 8020c12:	4798      	blx	r3
 8020c14:	6923      	ldr	r3, [r4, #16]
 8020c16:	3b01      	subs	r3, #1
 8020c18:	6123      	str	r3, [r4, #16]
 8020c1a:	e7f1      	b.n	8020c00 <_scanf_float+0x2fc>
 8020c1c:	46aa      	mov	sl, r5
 8020c1e:	9602      	str	r6, [sp, #8]
 8020c20:	e7df      	b.n	8020be2 <_scanf_float+0x2de>
 8020c22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8020c26:	6923      	ldr	r3, [r4, #16]
 8020c28:	2965      	cmp	r1, #101	; 0x65
 8020c2a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8020c2e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8020c32:	6123      	str	r3, [r4, #16]
 8020c34:	d00c      	beq.n	8020c50 <_scanf_float+0x34c>
 8020c36:	2945      	cmp	r1, #69	; 0x45
 8020c38:	d00a      	beq.n	8020c50 <_scanf_float+0x34c>
 8020c3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020c3e:	463a      	mov	r2, r7
 8020c40:	4640      	mov	r0, r8
 8020c42:	4798      	blx	r3
 8020c44:	6923      	ldr	r3, [r4, #16]
 8020c46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8020c4a:	3b01      	subs	r3, #1
 8020c4c:	1eb5      	subs	r5, r6, #2
 8020c4e:	6123      	str	r3, [r4, #16]
 8020c50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020c54:	463a      	mov	r2, r7
 8020c56:	4640      	mov	r0, r8
 8020c58:	4798      	blx	r3
 8020c5a:	462e      	mov	r6, r5
 8020c5c:	6825      	ldr	r5, [r4, #0]
 8020c5e:	f015 0510 	ands.w	r5, r5, #16
 8020c62:	d14d      	bne.n	8020d00 <_scanf_float+0x3fc>
 8020c64:	7035      	strb	r5, [r6, #0]
 8020c66:	6823      	ldr	r3, [r4, #0]
 8020c68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8020c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020c70:	d11a      	bne.n	8020ca8 <_scanf_float+0x3a4>
 8020c72:	9b01      	ldr	r3, [sp, #4]
 8020c74:	454b      	cmp	r3, r9
 8020c76:	eba3 0209 	sub.w	r2, r3, r9
 8020c7a:	d122      	bne.n	8020cc2 <_scanf_float+0x3be>
 8020c7c:	2200      	movs	r2, #0
 8020c7e:	4659      	mov	r1, fp
 8020c80:	4640      	mov	r0, r8
 8020c82:	f000 ff4b 	bl	8021b1c <_strtod_r>
 8020c86:	9b03      	ldr	r3, [sp, #12]
 8020c88:	6821      	ldr	r1, [r4, #0]
 8020c8a:	681b      	ldr	r3, [r3, #0]
 8020c8c:	f011 0f02 	tst.w	r1, #2
 8020c90:	f103 0204 	add.w	r2, r3, #4
 8020c94:	d020      	beq.n	8020cd8 <_scanf_float+0x3d4>
 8020c96:	9903      	ldr	r1, [sp, #12]
 8020c98:	600a      	str	r2, [r1, #0]
 8020c9a:	681b      	ldr	r3, [r3, #0]
 8020c9c:	ed83 0b00 	vstr	d0, [r3]
 8020ca0:	68e3      	ldr	r3, [r4, #12]
 8020ca2:	3301      	adds	r3, #1
 8020ca4:	60e3      	str	r3, [r4, #12]
 8020ca6:	e66e      	b.n	8020986 <_scanf_float+0x82>
 8020ca8:	9b04      	ldr	r3, [sp, #16]
 8020caa:	2b00      	cmp	r3, #0
 8020cac:	d0e6      	beq.n	8020c7c <_scanf_float+0x378>
 8020cae:	9905      	ldr	r1, [sp, #20]
 8020cb0:	230a      	movs	r3, #10
 8020cb2:	462a      	mov	r2, r5
 8020cb4:	3101      	adds	r1, #1
 8020cb6:	4640      	mov	r0, r8
 8020cb8:	f000 ffba 	bl	8021c30 <_strtol_r>
 8020cbc:	9b04      	ldr	r3, [sp, #16]
 8020cbe:	9e05      	ldr	r6, [sp, #20]
 8020cc0:	1ac2      	subs	r2, r0, r3
 8020cc2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8020cc6:	429e      	cmp	r6, r3
 8020cc8:	bf28      	it	cs
 8020cca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8020cce:	490d      	ldr	r1, [pc, #52]	; (8020d04 <_scanf_float+0x400>)
 8020cd0:	4630      	mov	r0, r6
 8020cd2:	f000 f8ff 	bl	8020ed4 <siprintf>
 8020cd6:	e7d1      	b.n	8020c7c <_scanf_float+0x378>
 8020cd8:	f011 0f04 	tst.w	r1, #4
 8020cdc:	9903      	ldr	r1, [sp, #12]
 8020cde:	600a      	str	r2, [r1, #0]
 8020ce0:	d1db      	bne.n	8020c9a <_scanf_float+0x396>
 8020ce2:	eeb4 0b40 	vcmp.f64	d0, d0
 8020ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cea:	681e      	ldr	r6, [r3, #0]
 8020cec:	d705      	bvc.n	8020cfa <_scanf_float+0x3f6>
 8020cee:	4806      	ldr	r0, [pc, #24]	; (8020d08 <_scanf_float+0x404>)
 8020cf0:	f000 f8ea 	bl	8020ec8 <nanf>
 8020cf4:	ed86 0a00 	vstr	s0, [r6]
 8020cf8:	e7d2      	b.n	8020ca0 <_scanf_float+0x39c>
 8020cfa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8020cfe:	e7f9      	b.n	8020cf4 <_scanf_float+0x3f0>
 8020d00:	2500      	movs	r5, #0
 8020d02:	e640      	b.n	8020986 <_scanf_float+0x82>
 8020d04:	08029528 	.word	0x08029528
 8020d08:	08029633 	.word	0x08029633

08020d0c <iprintf>:
 8020d0c:	b40f      	push	{r0, r1, r2, r3}
 8020d0e:	4b0a      	ldr	r3, [pc, #40]	; (8020d38 <iprintf+0x2c>)
 8020d10:	b513      	push	{r0, r1, r4, lr}
 8020d12:	681c      	ldr	r4, [r3, #0]
 8020d14:	b124      	cbz	r4, 8020d20 <iprintf+0x14>
 8020d16:	69a3      	ldr	r3, [r4, #24]
 8020d18:	b913      	cbnz	r3, 8020d20 <iprintf+0x14>
 8020d1a:	4620      	mov	r0, r4
 8020d1c:	f001 ff96 	bl	8022c4c <__sinit>
 8020d20:	ab05      	add	r3, sp, #20
 8020d22:	9a04      	ldr	r2, [sp, #16]
 8020d24:	68a1      	ldr	r1, [r4, #8]
 8020d26:	9301      	str	r3, [sp, #4]
 8020d28:	4620      	mov	r0, r4
 8020d2a:	f003 fa87 	bl	802423c <_vfiprintf_r>
 8020d2e:	b002      	add	sp, #8
 8020d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020d34:	b004      	add	sp, #16
 8020d36:	4770      	bx	lr
 8020d38:	24003844 	.word	0x24003844

08020d3c <_puts_r>:
 8020d3c:	b570      	push	{r4, r5, r6, lr}
 8020d3e:	460e      	mov	r6, r1
 8020d40:	4605      	mov	r5, r0
 8020d42:	b118      	cbz	r0, 8020d4c <_puts_r+0x10>
 8020d44:	6983      	ldr	r3, [r0, #24]
 8020d46:	b90b      	cbnz	r3, 8020d4c <_puts_r+0x10>
 8020d48:	f001 ff80 	bl	8022c4c <__sinit>
 8020d4c:	69ab      	ldr	r3, [r5, #24]
 8020d4e:	68ac      	ldr	r4, [r5, #8]
 8020d50:	b913      	cbnz	r3, 8020d58 <_puts_r+0x1c>
 8020d52:	4628      	mov	r0, r5
 8020d54:	f001 ff7a 	bl	8022c4c <__sinit>
 8020d58:	4b2c      	ldr	r3, [pc, #176]	; (8020e0c <_puts_r+0xd0>)
 8020d5a:	429c      	cmp	r4, r3
 8020d5c:	d120      	bne.n	8020da0 <_puts_r+0x64>
 8020d5e:	686c      	ldr	r4, [r5, #4]
 8020d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020d62:	07db      	lsls	r3, r3, #31
 8020d64:	d405      	bmi.n	8020d72 <_puts_r+0x36>
 8020d66:	89a3      	ldrh	r3, [r4, #12]
 8020d68:	0598      	lsls	r0, r3, #22
 8020d6a:	d402      	bmi.n	8020d72 <_puts_r+0x36>
 8020d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020d6e:	f002 fb90 	bl	8023492 <__retarget_lock_acquire_recursive>
 8020d72:	89a3      	ldrh	r3, [r4, #12]
 8020d74:	0719      	lsls	r1, r3, #28
 8020d76:	d51d      	bpl.n	8020db4 <_puts_r+0x78>
 8020d78:	6923      	ldr	r3, [r4, #16]
 8020d7a:	b1db      	cbz	r3, 8020db4 <_puts_r+0x78>
 8020d7c:	3e01      	subs	r6, #1
 8020d7e:	68a3      	ldr	r3, [r4, #8]
 8020d80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020d84:	3b01      	subs	r3, #1
 8020d86:	60a3      	str	r3, [r4, #8]
 8020d88:	bb39      	cbnz	r1, 8020dda <_puts_r+0x9e>
 8020d8a:	2b00      	cmp	r3, #0
 8020d8c:	da38      	bge.n	8020e00 <_puts_r+0xc4>
 8020d8e:	4622      	mov	r2, r4
 8020d90:	210a      	movs	r1, #10
 8020d92:	4628      	mov	r0, r5
 8020d94:	f000 ff4e 	bl	8021c34 <__swbuf_r>
 8020d98:	3001      	adds	r0, #1
 8020d9a:	d011      	beq.n	8020dc0 <_puts_r+0x84>
 8020d9c:	250a      	movs	r5, #10
 8020d9e:	e011      	b.n	8020dc4 <_puts_r+0x88>
 8020da0:	4b1b      	ldr	r3, [pc, #108]	; (8020e10 <_puts_r+0xd4>)
 8020da2:	429c      	cmp	r4, r3
 8020da4:	d101      	bne.n	8020daa <_puts_r+0x6e>
 8020da6:	68ac      	ldr	r4, [r5, #8]
 8020da8:	e7da      	b.n	8020d60 <_puts_r+0x24>
 8020daa:	4b1a      	ldr	r3, [pc, #104]	; (8020e14 <_puts_r+0xd8>)
 8020dac:	429c      	cmp	r4, r3
 8020dae:	bf08      	it	eq
 8020db0:	68ec      	ldreq	r4, [r5, #12]
 8020db2:	e7d5      	b.n	8020d60 <_puts_r+0x24>
 8020db4:	4621      	mov	r1, r4
 8020db6:	4628      	mov	r0, r5
 8020db8:	f000 ff8e 	bl	8021cd8 <__swsetup_r>
 8020dbc:	2800      	cmp	r0, #0
 8020dbe:	d0dd      	beq.n	8020d7c <_puts_r+0x40>
 8020dc0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020dc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020dc6:	07da      	lsls	r2, r3, #31
 8020dc8:	d405      	bmi.n	8020dd6 <_puts_r+0x9a>
 8020dca:	89a3      	ldrh	r3, [r4, #12]
 8020dcc:	059b      	lsls	r3, r3, #22
 8020dce:	d402      	bmi.n	8020dd6 <_puts_r+0x9a>
 8020dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020dd2:	f002 fb5f 	bl	8023494 <__retarget_lock_release_recursive>
 8020dd6:	4628      	mov	r0, r5
 8020dd8:	bd70      	pop	{r4, r5, r6, pc}
 8020dda:	2b00      	cmp	r3, #0
 8020ddc:	da04      	bge.n	8020de8 <_puts_r+0xac>
 8020dde:	69a2      	ldr	r2, [r4, #24]
 8020de0:	429a      	cmp	r2, r3
 8020de2:	dc06      	bgt.n	8020df2 <_puts_r+0xb6>
 8020de4:	290a      	cmp	r1, #10
 8020de6:	d004      	beq.n	8020df2 <_puts_r+0xb6>
 8020de8:	6823      	ldr	r3, [r4, #0]
 8020dea:	1c5a      	adds	r2, r3, #1
 8020dec:	6022      	str	r2, [r4, #0]
 8020dee:	7019      	strb	r1, [r3, #0]
 8020df0:	e7c5      	b.n	8020d7e <_puts_r+0x42>
 8020df2:	4622      	mov	r2, r4
 8020df4:	4628      	mov	r0, r5
 8020df6:	f000 ff1d 	bl	8021c34 <__swbuf_r>
 8020dfa:	3001      	adds	r0, #1
 8020dfc:	d1bf      	bne.n	8020d7e <_puts_r+0x42>
 8020dfe:	e7df      	b.n	8020dc0 <_puts_r+0x84>
 8020e00:	6823      	ldr	r3, [r4, #0]
 8020e02:	250a      	movs	r5, #10
 8020e04:	1c5a      	adds	r2, r3, #1
 8020e06:	6022      	str	r2, [r4, #0]
 8020e08:	701d      	strb	r5, [r3, #0]
 8020e0a:	e7db      	b.n	8020dc4 <_puts_r+0x88>
 8020e0c:	080296d4 	.word	0x080296d4
 8020e10:	080296f4 	.word	0x080296f4
 8020e14:	080296b4 	.word	0x080296b4

08020e18 <puts>:
 8020e18:	4b02      	ldr	r3, [pc, #8]	; (8020e24 <puts+0xc>)
 8020e1a:	4601      	mov	r1, r0
 8020e1c:	6818      	ldr	r0, [r3, #0]
 8020e1e:	f7ff bf8d 	b.w	8020d3c <_puts_r>
 8020e22:	bf00      	nop
 8020e24:	24003844 	.word	0x24003844

08020e28 <rand>:
 8020e28:	4b17      	ldr	r3, [pc, #92]	; (8020e88 <rand+0x60>)
 8020e2a:	b510      	push	{r4, lr}
 8020e2c:	681c      	ldr	r4, [r3, #0]
 8020e2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020e30:	b9b3      	cbnz	r3, 8020e60 <rand+0x38>
 8020e32:	2018      	movs	r0, #24
 8020e34:	f7ff f832 	bl	801fe9c <malloc>
 8020e38:	63a0      	str	r0, [r4, #56]	; 0x38
 8020e3a:	b928      	cbnz	r0, 8020e48 <rand+0x20>
 8020e3c:	4602      	mov	r2, r0
 8020e3e:	4b13      	ldr	r3, [pc, #76]	; (8020e8c <rand+0x64>)
 8020e40:	4813      	ldr	r0, [pc, #76]	; (8020e90 <rand+0x68>)
 8020e42:	214e      	movs	r1, #78	; 0x4e
 8020e44:	f000 ffb6 	bl	8021db4 <__assert_func>
 8020e48:	4a12      	ldr	r2, [pc, #72]	; (8020e94 <rand+0x6c>)
 8020e4a:	4b13      	ldr	r3, [pc, #76]	; (8020e98 <rand+0x70>)
 8020e4c:	e9c0 2300 	strd	r2, r3, [r0]
 8020e50:	4b12      	ldr	r3, [pc, #72]	; (8020e9c <rand+0x74>)
 8020e52:	6083      	str	r3, [r0, #8]
 8020e54:	230b      	movs	r3, #11
 8020e56:	8183      	strh	r3, [r0, #12]
 8020e58:	2201      	movs	r2, #1
 8020e5a:	2300      	movs	r3, #0
 8020e5c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8020e60:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020e62:	480f      	ldr	r0, [pc, #60]	; (8020ea0 <rand+0x78>)
 8020e64:	690a      	ldr	r2, [r1, #16]
 8020e66:	694b      	ldr	r3, [r1, #20]
 8020e68:	4c0e      	ldr	r4, [pc, #56]	; (8020ea4 <rand+0x7c>)
 8020e6a:	4350      	muls	r0, r2
 8020e6c:	fb04 0003 	mla	r0, r4, r3, r0
 8020e70:	fba2 3404 	umull	r3, r4, r2, r4
 8020e74:	1c5a      	adds	r2, r3, #1
 8020e76:	4404      	add	r4, r0
 8020e78:	f144 0000 	adc.w	r0, r4, #0
 8020e7c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8020e80:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020e84:	bd10      	pop	{r4, pc}
 8020e86:	bf00      	nop
 8020e88:	24003844 	.word	0x24003844
 8020e8c:	0802952d 	.word	0x0802952d
 8020e90:	08029544 	.word	0x08029544
 8020e94:	abcd330e 	.word	0xabcd330e
 8020e98:	e66d1234 	.word	0xe66d1234
 8020e9c:	0005deec 	.word	0x0005deec
 8020ea0:	5851f42d 	.word	0x5851f42d
 8020ea4:	4c957f2d 	.word	0x4c957f2d

08020ea8 <_sbrk_r>:
 8020ea8:	b538      	push	{r3, r4, r5, lr}
 8020eaa:	4d06      	ldr	r5, [pc, #24]	; (8020ec4 <_sbrk_r+0x1c>)
 8020eac:	2300      	movs	r3, #0
 8020eae:	4604      	mov	r4, r0
 8020eb0:	4608      	mov	r0, r1
 8020eb2:	602b      	str	r3, [r5, #0]
 8020eb4:	f7e2 f97e 	bl	80031b4 <_sbrk>
 8020eb8:	1c43      	adds	r3, r0, #1
 8020eba:	d102      	bne.n	8020ec2 <_sbrk_r+0x1a>
 8020ebc:	682b      	ldr	r3, [r5, #0]
 8020ebe:	b103      	cbz	r3, 8020ec2 <_sbrk_r+0x1a>
 8020ec0:	6023      	str	r3, [r4, #0]
 8020ec2:	bd38      	pop	{r3, r4, r5, pc}
 8020ec4:	2400d6c8 	.word	0x2400d6c8

08020ec8 <nanf>:
 8020ec8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8020ed0 <nanf+0x8>
 8020ecc:	4770      	bx	lr
 8020ece:	bf00      	nop
 8020ed0:	7fc00000 	.word	0x7fc00000

08020ed4 <siprintf>:
 8020ed4:	b40e      	push	{r1, r2, r3}
 8020ed6:	b500      	push	{lr}
 8020ed8:	b09c      	sub	sp, #112	; 0x70
 8020eda:	ab1d      	add	r3, sp, #116	; 0x74
 8020edc:	9002      	str	r0, [sp, #8]
 8020ede:	9006      	str	r0, [sp, #24]
 8020ee0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020ee4:	4809      	ldr	r0, [pc, #36]	; (8020f0c <siprintf+0x38>)
 8020ee6:	9107      	str	r1, [sp, #28]
 8020ee8:	9104      	str	r1, [sp, #16]
 8020eea:	4909      	ldr	r1, [pc, #36]	; (8020f10 <siprintf+0x3c>)
 8020eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8020ef0:	9105      	str	r1, [sp, #20]
 8020ef2:	6800      	ldr	r0, [r0, #0]
 8020ef4:	9301      	str	r3, [sp, #4]
 8020ef6:	a902      	add	r1, sp, #8
 8020ef8:	f003 f876 	bl	8023fe8 <_svfiprintf_r>
 8020efc:	9b02      	ldr	r3, [sp, #8]
 8020efe:	2200      	movs	r2, #0
 8020f00:	701a      	strb	r2, [r3, #0]
 8020f02:	b01c      	add	sp, #112	; 0x70
 8020f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8020f08:	b003      	add	sp, #12
 8020f0a:	4770      	bx	lr
 8020f0c:	24003844 	.word	0x24003844
 8020f10:	ffff0208 	.word	0xffff0208

08020f14 <strncmp>:
 8020f14:	b510      	push	{r4, lr}
 8020f16:	b16a      	cbz	r2, 8020f34 <strncmp+0x20>
 8020f18:	3901      	subs	r1, #1
 8020f1a:	1884      	adds	r4, r0, r2
 8020f1c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020f20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8020f24:	4293      	cmp	r3, r2
 8020f26:	d103      	bne.n	8020f30 <strncmp+0x1c>
 8020f28:	42a0      	cmp	r0, r4
 8020f2a:	d001      	beq.n	8020f30 <strncmp+0x1c>
 8020f2c:	2b00      	cmp	r3, #0
 8020f2e:	d1f5      	bne.n	8020f1c <strncmp+0x8>
 8020f30:	1a98      	subs	r0, r3, r2
 8020f32:	bd10      	pop	{r4, pc}
 8020f34:	4610      	mov	r0, r2
 8020f36:	e7fc      	b.n	8020f32 <strncmp+0x1e>

08020f38 <sulp>:
 8020f38:	b570      	push	{r4, r5, r6, lr}
 8020f3a:	4604      	mov	r4, r0
 8020f3c:	460d      	mov	r5, r1
 8020f3e:	4616      	mov	r6, r2
 8020f40:	ec45 4b10 	vmov	d0, r4, r5
 8020f44:	f002 fe96 	bl	8023c74 <__ulp>
 8020f48:	b17e      	cbz	r6, 8020f6a <sulp+0x32>
 8020f4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8020f4e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8020f52:	2b00      	cmp	r3, #0
 8020f54:	dd09      	ble.n	8020f6a <sulp+0x32>
 8020f56:	051b      	lsls	r3, r3, #20
 8020f58:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8020f5c:	2000      	movs	r0, #0
 8020f5e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8020f62:	ec41 0b17 	vmov	d7, r0, r1
 8020f66:	ee20 0b07 	vmul.f64	d0, d0, d7
 8020f6a:	bd70      	pop	{r4, r5, r6, pc}
 8020f6c:	0000      	movs	r0, r0
	...

08020f70 <_strtod_l>:
 8020f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f74:	ed2d 8b0c 	vpush	{d8-d13}
 8020f78:	b09d      	sub	sp, #116	; 0x74
 8020f7a:	461f      	mov	r7, r3
 8020f7c:	2300      	movs	r3, #0
 8020f7e:	9318      	str	r3, [sp, #96]	; 0x60
 8020f80:	4ba6      	ldr	r3, [pc, #664]	; (802121c <_strtod_l+0x2ac>)
 8020f82:	9213      	str	r2, [sp, #76]	; 0x4c
 8020f84:	681b      	ldr	r3, [r3, #0]
 8020f86:	9308      	str	r3, [sp, #32]
 8020f88:	4604      	mov	r4, r0
 8020f8a:	4618      	mov	r0, r3
 8020f8c:	468a      	mov	sl, r1
 8020f8e:	f7df f9a7 	bl	80002e0 <strlen>
 8020f92:	f04f 0800 	mov.w	r8, #0
 8020f96:	4605      	mov	r5, r0
 8020f98:	f04f 0900 	mov.w	r9, #0
 8020f9c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8020fa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020fa2:	781a      	ldrb	r2, [r3, #0]
 8020fa4:	2a2b      	cmp	r2, #43	; 0x2b
 8020fa6:	d04d      	beq.n	8021044 <_strtod_l+0xd4>
 8020fa8:	d83a      	bhi.n	8021020 <_strtod_l+0xb0>
 8020faa:	2a0d      	cmp	r2, #13
 8020fac:	d833      	bhi.n	8021016 <_strtod_l+0xa6>
 8020fae:	2a08      	cmp	r2, #8
 8020fb0:	d833      	bhi.n	802101a <_strtod_l+0xaa>
 8020fb2:	2a00      	cmp	r2, #0
 8020fb4:	d03d      	beq.n	8021032 <_strtod_l+0xc2>
 8020fb6:	2300      	movs	r3, #0
 8020fb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8020fba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8020fbc:	7833      	ldrb	r3, [r6, #0]
 8020fbe:	2b30      	cmp	r3, #48	; 0x30
 8020fc0:	f040 80b6 	bne.w	8021130 <_strtod_l+0x1c0>
 8020fc4:	7873      	ldrb	r3, [r6, #1]
 8020fc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8020fca:	2b58      	cmp	r3, #88	; 0x58
 8020fcc:	d16d      	bne.n	80210aa <_strtod_l+0x13a>
 8020fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020fd0:	9301      	str	r3, [sp, #4]
 8020fd2:	ab18      	add	r3, sp, #96	; 0x60
 8020fd4:	9702      	str	r7, [sp, #8]
 8020fd6:	9300      	str	r3, [sp, #0]
 8020fd8:	4a91      	ldr	r2, [pc, #580]	; (8021220 <_strtod_l+0x2b0>)
 8020fda:	ab19      	add	r3, sp, #100	; 0x64
 8020fdc:	a917      	add	r1, sp, #92	; 0x5c
 8020fde:	4620      	mov	r0, r4
 8020fe0:	f001 ff4a 	bl	8022e78 <__gethex>
 8020fe4:	f010 0507 	ands.w	r5, r0, #7
 8020fe8:	4607      	mov	r7, r0
 8020fea:	d005      	beq.n	8020ff8 <_strtod_l+0x88>
 8020fec:	2d06      	cmp	r5, #6
 8020fee:	d12b      	bne.n	8021048 <_strtod_l+0xd8>
 8020ff0:	3601      	adds	r6, #1
 8020ff2:	2300      	movs	r3, #0
 8020ff4:	9617      	str	r6, [sp, #92]	; 0x5c
 8020ff6:	930b      	str	r3, [sp, #44]	; 0x2c
 8020ff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020ffa:	2b00      	cmp	r3, #0
 8020ffc:	f040 856e 	bne.w	8021adc <_strtod_l+0xb6c>
 8021000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021002:	b1e3      	cbz	r3, 802103e <_strtod_l+0xce>
 8021004:	ec49 8b17 	vmov	d7, r8, r9
 8021008:	eeb1 0b47 	vneg.f64	d0, d7
 802100c:	b01d      	add	sp, #116	; 0x74
 802100e:	ecbd 8b0c 	vpop	{d8-d13}
 8021012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021016:	2a20      	cmp	r2, #32
 8021018:	d1cd      	bne.n	8020fb6 <_strtod_l+0x46>
 802101a:	3301      	adds	r3, #1
 802101c:	9317      	str	r3, [sp, #92]	; 0x5c
 802101e:	e7bf      	b.n	8020fa0 <_strtod_l+0x30>
 8021020:	2a2d      	cmp	r2, #45	; 0x2d
 8021022:	d1c8      	bne.n	8020fb6 <_strtod_l+0x46>
 8021024:	2201      	movs	r2, #1
 8021026:	920b      	str	r2, [sp, #44]	; 0x2c
 8021028:	1c5a      	adds	r2, r3, #1
 802102a:	9217      	str	r2, [sp, #92]	; 0x5c
 802102c:	785b      	ldrb	r3, [r3, #1]
 802102e:	2b00      	cmp	r3, #0
 8021030:	d1c3      	bne.n	8020fba <_strtod_l+0x4a>
 8021032:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021034:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8021038:	2b00      	cmp	r3, #0
 802103a:	f040 854d 	bne.w	8021ad8 <_strtod_l+0xb68>
 802103e:	ec49 8b10 	vmov	d0, r8, r9
 8021042:	e7e3      	b.n	802100c <_strtod_l+0x9c>
 8021044:	2200      	movs	r2, #0
 8021046:	e7ee      	b.n	8021026 <_strtod_l+0xb6>
 8021048:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802104a:	b13a      	cbz	r2, 802105c <_strtod_l+0xec>
 802104c:	2135      	movs	r1, #53	; 0x35
 802104e:	a81a      	add	r0, sp, #104	; 0x68
 8021050:	f002 ff1c 	bl	8023e8c <__copybits>
 8021054:	9918      	ldr	r1, [sp, #96]	; 0x60
 8021056:	4620      	mov	r0, r4
 8021058:	f002 fae0 	bl	802361c <_Bfree>
 802105c:	3d01      	subs	r5, #1
 802105e:	2d05      	cmp	r5, #5
 8021060:	d807      	bhi.n	8021072 <_strtod_l+0x102>
 8021062:	e8df f005 	tbb	[pc, r5]
 8021066:	0b0e      	.short	0x0b0e
 8021068:	030e1d18 	.word	0x030e1d18
 802106c:	f04f 0900 	mov.w	r9, #0
 8021070:	46c8      	mov	r8, r9
 8021072:	073b      	lsls	r3, r7, #28
 8021074:	d5c0      	bpl.n	8020ff8 <_strtod_l+0x88>
 8021076:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 802107a:	e7bd      	b.n	8020ff8 <_strtod_l+0x88>
 802107c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8021080:	e7f7      	b.n	8021072 <_strtod_l+0x102>
 8021082:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8021086:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8021088:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802108c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8021090:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8021094:	e7ed      	b.n	8021072 <_strtod_l+0x102>
 8021096:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8021224 <_strtod_l+0x2b4>
 802109a:	f04f 0800 	mov.w	r8, #0
 802109e:	e7e8      	b.n	8021072 <_strtod_l+0x102>
 80210a0:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80210a4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80210a8:	e7e3      	b.n	8021072 <_strtod_l+0x102>
 80210aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80210ac:	1c5a      	adds	r2, r3, #1
 80210ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80210b0:	785b      	ldrb	r3, [r3, #1]
 80210b2:	2b30      	cmp	r3, #48	; 0x30
 80210b4:	d0f9      	beq.n	80210aa <_strtod_l+0x13a>
 80210b6:	2b00      	cmp	r3, #0
 80210b8:	d09e      	beq.n	8020ff8 <_strtod_l+0x88>
 80210ba:	2301      	movs	r3, #1
 80210bc:	9306      	str	r3, [sp, #24]
 80210be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80210c0:	930c      	str	r3, [sp, #48]	; 0x30
 80210c2:	2300      	movs	r3, #0
 80210c4:	9304      	str	r3, [sp, #16]
 80210c6:	930a      	str	r3, [sp, #40]	; 0x28
 80210c8:	461e      	mov	r6, r3
 80210ca:	220a      	movs	r2, #10
 80210cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80210ce:	f890 b000 	ldrb.w	fp, [r0]
 80210d2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 80210d6:	b2d9      	uxtb	r1, r3
 80210d8:	2909      	cmp	r1, #9
 80210da:	d92b      	bls.n	8021134 <_strtod_l+0x1c4>
 80210dc:	9908      	ldr	r1, [sp, #32]
 80210de:	462a      	mov	r2, r5
 80210e0:	f7ff ff18 	bl	8020f14 <strncmp>
 80210e4:	2800      	cmp	r0, #0
 80210e6:	d035      	beq.n	8021154 <_strtod_l+0x1e4>
 80210e8:	2000      	movs	r0, #0
 80210ea:	465a      	mov	r2, fp
 80210ec:	4633      	mov	r3, r6
 80210ee:	4683      	mov	fp, r0
 80210f0:	4601      	mov	r1, r0
 80210f2:	2a65      	cmp	r2, #101	; 0x65
 80210f4:	d001      	beq.n	80210fa <_strtod_l+0x18a>
 80210f6:	2a45      	cmp	r2, #69	; 0x45
 80210f8:	d118      	bne.n	802112c <_strtod_l+0x1bc>
 80210fa:	b91b      	cbnz	r3, 8021104 <_strtod_l+0x194>
 80210fc:	9b06      	ldr	r3, [sp, #24]
 80210fe:	4303      	orrs	r3, r0
 8021100:	d097      	beq.n	8021032 <_strtod_l+0xc2>
 8021102:	2300      	movs	r3, #0
 8021104:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8021108:	f10a 0201 	add.w	r2, sl, #1
 802110c:	9217      	str	r2, [sp, #92]	; 0x5c
 802110e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021112:	2a2b      	cmp	r2, #43	; 0x2b
 8021114:	d077      	beq.n	8021206 <_strtod_l+0x296>
 8021116:	2a2d      	cmp	r2, #45	; 0x2d
 8021118:	d07d      	beq.n	8021216 <_strtod_l+0x2a6>
 802111a:	f04f 0e00 	mov.w	lr, #0
 802111e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8021122:	2d09      	cmp	r5, #9
 8021124:	f240 8084 	bls.w	8021230 <_strtod_l+0x2c0>
 8021128:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 802112c:	2500      	movs	r5, #0
 802112e:	e09f      	b.n	8021270 <_strtod_l+0x300>
 8021130:	2300      	movs	r3, #0
 8021132:	e7c3      	b.n	80210bc <_strtod_l+0x14c>
 8021134:	2e08      	cmp	r6, #8
 8021136:	bfd5      	itete	le
 8021138:	990a      	ldrle	r1, [sp, #40]	; 0x28
 802113a:	9904      	ldrgt	r1, [sp, #16]
 802113c:	fb02 3301 	mlale	r3, r2, r1, r3
 8021140:	fb02 3301 	mlagt	r3, r2, r1, r3
 8021144:	f100 0001 	add.w	r0, r0, #1
 8021148:	bfd4      	ite	le
 802114a:	930a      	strle	r3, [sp, #40]	; 0x28
 802114c:	9304      	strgt	r3, [sp, #16]
 802114e:	3601      	adds	r6, #1
 8021150:	9017      	str	r0, [sp, #92]	; 0x5c
 8021152:	e7bb      	b.n	80210cc <_strtod_l+0x15c>
 8021154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021156:	195a      	adds	r2, r3, r5
 8021158:	9217      	str	r2, [sp, #92]	; 0x5c
 802115a:	5d5a      	ldrb	r2, [r3, r5]
 802115c:	b3ae      	cbz	r6, 80211ca <_strtod_l+0x25a>
 802115e:	4683      	mov	fp, r0
 8021160:	4633      	mov	r3, r6
 8021162:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8021166:	2909      	cmp	r1, #9
 8021168:	d912      	bls.n	8021190 <_strtod_l+0x220>
 802116a:	2101      	movs	r1, #1
 802116c:	e7c1      	b.n	80210f2 <_strtod_l+0x182>
 802116e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021170:	1c5a      	adds	r2, r3, #1
 8021172:	9217      	str	r2, [sp, #92]	; 0x5c
 8021174:	785a      	ldrb	r2, [r3, #1]
 8021176:	3001      	adds	r0, #1
 8021178:	2a30      	cmp	r2, #48	; 0x30
 802117a:	d0f8      	beq.n	802116e <_strtod_l+0x1fe>
 802117c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8021180:	2b08      	cmp	r3, #8
 8021182:	f200 84b0 	bhi.w	8021ae6 <_strtod_l+0xb76>
 8021186:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021188:	930c      	str	r3, [sp, #48]	; 0x30
 802118a:	4683      	mov	fp, r0
 802118c:	2000      	movs	r0, #0
 802118e:	4603      	mov	r3, r0
 8021190:	3a30      	subs	r2, #48	; 0x30
 8021192:	f100 0101 	add.w	r1, r0, #1
 8021196:	d012      	beq.n	80211be <_strtod_l+0x24e>
 8021198:	448b      	add	fp, r1
 802119a:	eb00 0c03 	add.w	ip, r0, r3
 802119e:	4619      	mov	r1, r3
 80211a0:	250a      	movs	r5, #10
 80211a2:	4561      	cmp	r1, ip
 80211a4:	d113      	bne.n	80211ce <_strtod_l+0x25e>
 80211a6:	1819      	adds	r1, r3, r0
 80211a8:	2908      	cmp	r1, #8
 80211aa:	f103 0301 	add.w	r3, r3, #1
 80211ae:	4403      	add	r3, r0
 80211b0:	dc1d      	bgt.n	80211ee <_strtod_l+0x27e>
 80211b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80211b4:	210a      	movs	r1, #10
 80211b6:	fb01 2200 	mla	r2, r1, r0, r2
 80211ba:	920a      	str	r2, [sp, #40]	; 0x28
 80211bc:	2100      	movs	r1, #0
 80211be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80211c0:	1c50      	adds	r0, r2, #1
 80211c2:	9017      	str	r0, [sp, #92]	; 0x5c
 80211c4:	7852      	ldrb	r2, [r2, #1]
 80211c6:	4608      	mov	r0, r1
 80211c8:	e7cb      	b.n	8021162 <_strtod_l+0x1f2>
 80211ca:	4630      	mov	r0, r6
 80211cc:	e7d4      	b.n	8021178 <_strtod_l+0x208>
 80211ce:	2908      	cmp	r1, #8
 80211d0:	dc04      	bgt.n	80211dc <_strtod_l+0x26c>
 80211d2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80211d4:	436f      	muls	r7, r5
 80211d6:	970a      	str	r7, [sp, #40]	; 0x28
 80211d8:	3101      	adds	r1, #1
 80211da:	e7e2      	b.n	80211a2 <_strtod_l+0x232>
 80211dc:	f101 0e01 	add.w	lr, r1, #1
 80211e0:	f1be 0f10 	cmp.w	lr, #16
 80211e4:	bfde      	ittt	le
 80211e6:	9f04      	ldrle	r7, [sp, #16]
 80211e8:	436f      	mulle	r7, r5
 80211ea:	9704      	strle	r7, [sp, #16]
 80211ec:	e7f4      	b.n	80211d8 <_strtod_l+0x268>
 80211ee:	2b10      	cmp	r3, #16
 80211f0:	bfdf      	itttt	le
 80211f2:	9804      	ldrle	r0, [sp, #16]
 80211f4:	210a      	movle	r1, #10
 80211f6:	fb01 2200 	mlale	r2, r1, r0, r2
 80211fa:	9204      	strle	r2, [sp, #16]
 80211fc:	e7de      	b.n	80211bc <_strtod_l+0x24c>
 80211fe:	f04f 0b00 	mov.w	fp, #0
 8021202:	2101      	movs	r1, #1
 8021204:	e77a      	b.n	80210fc <_strtod_l+0x18c>
 8021206:	f04f 0e00 	mov.w	lr, #0
 802120a:	f10a 0202 	add.w	r2, sl, #2
 802120e:	9217      	str	r2, [sp, #92]	; 0x5c
 8021210:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8021214:	e783      	b.n	802111e <_strtod_l+0x1ae>
 8021216:	f04f 0e01 	mov.w	lr, #1
 802121a:	e7f6      	b.n	802120a <_strtod_l+0x29a>
 802121c:	08029780 	.word	0x08029780
 8021220:	080295a4 	.word	0x080295a4
 8021224:	7ff00000 	.word	0x7ff00000
 8021228:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802122a:	1c55      	adds	r5, r2, #1
 802122c:	9517      	str	r5, [sp, #92]	; 0x5c
 802122e:	7852      	ldrb	r2, [r2, #1]
 8021230:	2a30      	cmp	r2, #48	; 0x30
 8021232:	d0f9      	beq.n	8021228 <_strtod_l+0x2b8>
 8021234:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8021238:	2d08      	cmp	r5, #8
 802123a:	f63f af77 	bhi.w	802112c <_strtod_l+0x1bc>
 802123e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8021242:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8021244:	9208      	str	r2, [sp, #32]
 8021246:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8021248:	1c55      	adds	r5, r2, #1
 802124a:	9517      	str	r5, [sp, #92]	; 0x5c
 802124c:	7852      	ldrb	r2, [r2, #1]
 802124e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8021252:	2f09      	cmp	r7, #9
 8021254:	d937      	bls.n	80212c6 <_strtod_l+0x356>
 8021256:	9f08      	ldr	r7, [sp, #32]
 8021258:	1bed      	subs	r5, r5, r7
 802125a:	2d08      	cmp	r5, #8
 802125c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8021260:	dc02      	bgt.n	8021268 <_strtod_l+0x2f8>
 8021262:	4565      	cmp	r5, ip
 8021264:	bfa8      	it	ge
 8021266:	4665      	movge	r5, ip
 8021268:	f1be 0f00 	cmp.w	lr, #0
 802126c:	d000      	beq.n	8021270 <_strtod_l+0x300>
 802126e:	426d      	negs	r5, r5
 8021270:	2b00      	cmp	r3, #0
 8021272:	d14f      	bne.n	8021314 <_strtod_l+0x3a4>
 8021274:	9b06      	ldr	r3, [sp, #24]
 8021276:	4303      	orrs	r3, r0
 8021278:	f47f aebe 	bne.w	8020ff8 <_strtod_l+0x88>
 802127c:	2900      	cmp	r1, #0
 802127e:	f47f aed8 	bne.w	8021032 <_strtod_l+0xc2>
 8021282:	2a69      	cmp	r2, #105	; 0x69
 8021284:	d027      	beq.n	80212d6 <_strtod_l+0x366>
 8021286:	dc24      	bgt.n	80212d2 <_strtod_l+0x362>
 8021288:	2a49      	cmp	r2, #73	; 0x49
 802128a:	d024      	beq.n	80212d6 <_strtod_l+0x366>
 802128c:	2a4e      	cmp	r2, #78	; 0x4e
 802128e:	f47f aed0 	bne.w	8021032 <_strtod_l+0xc2>
 8021292:	499b      	ldr	r1, [pc, #620]	; (8021500 <_strtod_l+0x590>)
 8021294:	a817      	add	r0, sp, #92	; 0x5c
 8021296:	f002 f847 	bl	8023328 <__match>
 802129a:	2800      	cmp	r0, #0
 802129c:	f43f aec9 	beq.w	8021032 <_strtod_l+0xc2>
 80212a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80212a2:	781b      	ldrb	r3, [r3, #0]
 80212a4:	2b28      	cmp	r3, #40	; 0x28
 80212a6:	d12d      	bne.n	8021304 <_strtod_l+0x394>
 80212a8:	4996      	ldr	r1, [pc, #600]	; (8021504 <_strtod_l+0x594>)
 80212aa:	aa1a      	add	r2, sp, #104	; 0x68
 80212ac:	a817      	add	r0, sp, #92	; 0x5c
 80212ae:	f002 f84f 	bl	8023350 <__hexnan>
 80212b2:	2805      	cmp	r0, #5
 80212b4:	d126      	bne.n	8021304 <_strtod_l+0x394>
 80212b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80212b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80212bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80212c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80212c4:	e698      	b.n	8020ff8 <_strtod_l+0x88>
 80212c6:	250a      	movs	r5, #10
 80212c8:	fb05 250c 	mla	r5, r5, ip, r2
 80212cc:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80212d0:	e7b9      	b.n	8021246 <_strtod_l+0x2d6>
 80212d2:	2a6e      	cmp	r2, #110	; 0x6e
 80212d4:	e7db      	b.n	802128e <_strtod_l+0x31e>
 80212d6:	498c      	ldr	r1, [pc, #560]	; (8021508 <_strtod_l+0x598>)
 80212d8:	a817      	add	r0, sp, #92	; 0x5c
 80212da:	f002 f825 	bl	8023328 <__match>
 80212de:	2800      	cmp	r0, #0
 80212e0:	f43f aea7 	beq.w	8021032 <_strtod_l+0xc2>
 80212e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80212e6:	4989      	ldr	r1, [pc, #548]	; (802150c <_strtod_l+0x59c>)
 80212e8:	3b01      	subs	r3, #1
 80212ea:	a817      	add	r0, sp, #92	; 0x5c
 80212ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80212ee:	f002 f81b 	bl	8023328 <__match>
 80212f2:	b910      	cbnz	r0, 80212fa <_strtod_l+0x38a>
 80212f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80212f6:	3301      	adds	r3, #1
 80212f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80212fa:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8021520 <_strtod_l+0x5b0>
 80212fe:	f04f 0800 	mov.w	r8, #0
 8021302:	e679      	b.n	8020ff8 <_strtod_l+0x88>
 8021304:	4882      	ldr	r0, [pc, #520]	; (8021510 <_strtod_l+0x5a0>)
 8021306:	f003 f8cb 	bl	80244a0 <nan>
 802130a:	ed8d 0b04 	vstr	d0, [sp, #16]
 802130e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8021312:	e671      	b.n	8020ff8 <_strtod_l+0x88>
 8021314:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8021318:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802131c:	eba5 020b 	sub.w	r2, r5, fp
 8021320:	2e00      	cmp	r6, #0
 8021322:	bf08      	it	eq
 8021324:	461e      	moveq	r6, r3
 8021326:	2b10      	cmp	r3, #16
 8021328:	ed8d 7b08 	vstr	d7, [sp, #32]
 802132c:	9206      	str	r2, [sp, #24]
 802132e:	461a      	mov	r2, r3
 8021330:	bfa8      	it	ge
 8021332:	2210      	movge	r2, #16
 8021334:	2b09      	cmp	r3, #9
 8021336:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 802133a:	dd0e      	ble.n	802135a <_strtod_l+0x3ea>
 802133c:	4975      	ldr	r1, [pc, #468]	; (8021514 <_strtod_l+0x5a4>)
 802133e:	eddd 7a04 	vldr	s15, [sp, #16]
 8021342:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8021346:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 802134a:	ed9d 5b08 	vldr	d5, [sp, #32]
 802134e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8021352:	eea5 7b06 	vfma.f64	d7, d5, d6
 8021356:	ec59 8b17 	vmov	r8, r9, d7
 802135a:	2b0f      	cmp	r3, #15
 802135c:	dc37      	bgt.n	80213ce <_strtod_l+0x45e>
 802135e:	9906      	ldr	r1, [sp, #24]
 8021360:	2900      	cmp	r1, #0
 8021362:	f43f ae49 	beq.w	8020ff8 <_strtod_l+0x88>
 8021366:	dd23      	ble.n	80213b0 <_strtod_l+0x440>
 8021368:	2916      	cmp	r1, #22
 802136a:	dc0b      	bgt.n	8021384 <_strtod_l+0x414>
 802136c:	4b69      	ldr	r3, [pc, #420]	; (8021514 <_strtod_l+0x5a4>)
 802136e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8021372:	ed93 7b00 	vldr	d7, [r3]
 8021376:	ec49 8b16 	vmov	d6, r8, r9
 802137a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802137e:	ec59 8b17 	vmov	r8, r9, d7
 8021382:	e639      	b.n	8020ff8 <_strtod_l+0x88>
 8021384:	9806      	ldr	r0, [sp, #24]
 8021386:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 802138a:	4281      	cmp	r1, r0
 802138c:	db1f      	blt.n	80213ce <_strtod_l+0x45e>
 802138e:	4a61      	ldr	r2, [pc, #388]	; (8021514 <_strtod_l+0x5a4>)
 8021390:	f1c3 030f 	rsb	r3, r3, #15
 8021394:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8021398:	ed91 7b00 	vldr	d7, [r1]
 802139c:	ec49 8b16 	vmov	d6, r8, r9
 80213a0:	1ac3      	subs	r3, r0, r3
 80213a2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80213a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80213aa:	ed92 6b00 	vldr	d6, [r2]
 80213ae:	e7e4      	b.n	802137a <_strtod_l+0x40a>
 80213b0:	9906      	ldr	r1, [sp, #24]
 80213b2:	3116      	adds	r1, #22
 80213b4:	db0b      	blt.n	80213ce <_strtod_l+0x45e>
 80213b6:	4b57      	ldr	r3, [pc, #348]	; (8021514 <_strtod_l+0x5a4>)
 80213b8:	ebab 0505 	sub.w	r5, fp, r5
 80213bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80213c0:	ed95 7b00 	vldr	d7, [r5]
 80213c4:	ec49 8b16 	vmov	d6, r8, r9
 80213c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80213cc:	e7d7      	b.n	802137e <_strtod_l+0x40e>
 80213ce:	9906      	ldr	r1, [sp, #24]
 80213d0:	1a9a      	subs	r2, r3, r2
 80213d2:	440a      	add	r2, r1
 80213d4:	2a00      	cmp	r2, #0
 80213d6:	dd74      	ble.n	80214c2 <_strtod_l+0x552>
 80213d8:	f012 000f 	ands.w	r0, r2, #15
 80213dc:	d00a      	beq.n	80213f4 <_strtod_l+0x484>
 80213de:	494d      	ldr	r1, [pc, #308]	; (8021514 <_strtod_l+0x5a4>)
 80213e0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80213e4:	ed91 7b00 	vldr	d7, [r1]
 80213e8:	ec49 8b16 	vmov	d6, r8, r9
 80213ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80213f0:	ec59 8b17 	vmov	r8, r9, d7
 80213f4:	f032 020f 	bics.w	r2, r2, #15
 80213f8:	d04f      	beq.n	802149a <_strtod_l+0x52a>
 80213fa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80213fe:	dd22      	ble.n	8021446 <_strtod_l+0x4d6>
 8021400:	2500      	movs	r5, #0
 8021402:	462e      	mov	r6, r5
 8021404:	950a      	str	r5, [sp, #40]	; 0x28
 8021406:	462f      	mov	r7, r5
 8021408:	2322      	movs	r3, #34	; 0x22
 802140a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8021520 <_strtod_l+0x5b0>
 802140e:	6023      	str	r3, [r4, #0]
 8021410:	f04f 0800 	mov.w	r8, #0
 8021414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021416:	2b00      	cmp	r3, #0
 8021418:	f43f adee 	beq.w	8020ff8 <_strtod_l+0x88>
 802141c:	9918      	ldr	r1, [sp, #96]	; 0x60
 802141e:	4620      	mov	r0, r4
 8021420:	f002 f8fc 	bl	802361c <_Bfree>
 8021424:	4639      	mov	r1, r7
 8021426:	4620      	mov	r0, r4
 8021428:	f002 f8f8 	bl	802361c <_Bfree>
 802142c:	4631      	mov	r1, r6
 802142e:	4620      	mov	r0, r4
 8021430:	f002 f8f4 	bl	802361c <_Bfree>
 8021434:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021436:	4620      	mov	r0, r4
 8021438:	f002 f8f0 	bl	802361c <_Bfree>
 802143c:	4629      	mov	r1, r5
 802143e:	4620      	mov	r0, r4
 8021440:	f002 f8ec 	bl	802361c <_Bfree>
 8021444:	e5d8      	b.n	8020ff8 <_strtod_l+0x88>
 8021446:	e9cd 8904 	strd	r8, r9, [sp, #16]
 802144a:	2000      	movs	r0, #0
 802144c:	4f32      	ldr	r7, [pc, #200]	; (8021518 <_strtod_l+0x5a8>)
 802144e:	1112      	asrs	r2, r2, #4
 8021450:	4601      	mov	r1, r0
 8021452:	2a01      	cmp	r2, #1
 8021454:	dc24      	bgt.n	80214a0 <_strtod_l+0x530>
 8021456:	b108      	cbz	r0, 802145c <_strtod_l+0x4ec>
 8021458:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 802145c:	4a2e      	ldr	r2, [pc, #184]	; (8021518 <_strtod_l+0x5a8>)
 802145e:	482f      	ldr	r0, [pc, #188]	; (802151c <_strtod_l+0x5ac>)
 8021460:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8021464:	ed91 7b00 	vldr	d7, [r1]
 8021468:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 802146c:	ec49 8b16 	vmov	d6, r8, r9
 8021470:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021474:	ed8d 7b04 	vstr	d7, [sp, #16]
 8021478:	9905      	ldr	r1, [sp, #20]
 802147a:	4a29      	ldr	r2, [pc, #164]	; (8021520 <_strtod_l+0x5b0>)
 802147c:	400a      	ands	r2, r1
 802147e:	4282      	cmp	r2, r0
 8021480:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8021484:	d8bc      	bhi.n	8021400 <_strtod_l+0x490>
 8021486:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 802148a:	4282      	cmp	r2, r0
 802148c:	bf86      	itte	hi
 802148e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8021524 <_strtod_l+0x5b4>
 8021492:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8021496:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 802149a:	2200      	movs	r2, #0
 802149c:	9204      	str	r2, [sp, #16]
 802149e:	e07f      	b.n	80215a0 <_strtod_l+0x630>
 80214a0:	f012 0f01 	tst.w	r2, #1
 80214a4:	d00a      	beq.n	80214bc <_strtod_l+0x54c>
 80214a6:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 80214aa:	ed90 7b00 	vldr	d7, [r0]
 80214ae:	ed9d 6b04 	vldr	d6, [sp, #16]
 80214b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80214b6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80214ba:	2001      	movs	r0, #1
 80214bc:	3101      	adds	r1, #1
 80214be:	1052      	asrs	r2, r2, #1
 80214c0:	e7c7      	b.n	8021452 <_strtod_l+0x4e2>
 80214c2:	d0ea      	beq.n	802149a <_strtod_l+0x52a>
 80214c4:	4252      	negs	r2, r2
 80214c6:	f012 000f 	ands.w	r0, r2, #15
 80214ca:	d00a      	beq.n	80214e2 <_strtod_l+0x572>
 80214cc:	4911      	ldr	r1, [pc, #68]	; (8021514 <_strtod_l+0x5a4>)
 80214ce:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80214d2:	ed91 7b00 	vldr	d7, [r1]
 80214d6:	ec49 8b16 	vmov	d6, r8, r9
 80214da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80214de:	ec59 8b17 	vmov	r8, r9, d7
 80214e2:	1112      	asrs	r2, r2, #4
 80214e4:	d0d9      	beq.n	802149a <_strtod_l+0x52a>
 80214e6:	2a1f      	cmp	r2, #31
 80214e8:	dd1e      	ble.n	8021528 <_strtod_l+0x5b8>
 80214ea:	2500      	movs	r5, #0
 80214ec:	462e      	mov	r6, r5
 80214ee:	950a      	str	r5, [sp, #40]	; 0x28
 80214f0:	462f      	mov	r7, r5
 80214f2:	2322      	movs	r3, #34	; 0x22
 80214f4:	f04f 0800 	mov.w	r8, #0
 80214f8:	f04f 0900 	mov.w	r9, #0
 80214fc:	6023      	str	r3, [r4, #0]
 80214fe:	e789      	b.n	8021414 <_strtod_l+0x4a4>
 8021500:	08029501 	.word	0x08029501
 8021504:	080295b8 	.word	0x080295b8
 8021508:	080294f9 	.word	0x080294f9
 802150c:	08029637 	.word	0x08029637
 8021510:	08029633 	.word	0x08029633
 8021514:	08029820 	.word	0x08029820
 8021518:	080297f8 	.word	0x080297f8
 802151c:	7ca00000 	.word	0x7ca00000
 8021520:	7ff00000 	.word	0x7ff00000
 8021524:	7fefffff 	.word	0x7fefffff
 8021528:	f012 0110 	ands.w	r1, r2, #16
 802152c:	bf18      	it	ne
 802152e:	216a      	movne	r1, #106	; 0x6a
 8021530:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8021534:	9104      	str	r1, [sp, #16]
 8021536:	49c0      	ldr	r1, [pc, #768]	; (8021838 <_strtod_l+0x8c8>)
 8021538:	2000      	movs	r0, #0
 802153a:	07d7      	lsls	r7, r2, #31
 802153c:	d508      	bpl.n	8021550 <_strtod_l+0x5e0>
 802153e:	ed9d 6b08 	vldr	d6, [sp, #32]
 8021542:	ed91 7b00 	vldr	d7, [r1]
 8021546:	ee26 7b07 	vmul.f64	d7, d6, d7
 802154a:	ed8d 7b08 	vstr	d7, [sp, #32]
 802154e:	2001      	movs	r0, #1
 8021550:	1052      	asrs	r2, r2, #1
 8021552:	f101 0108 	add.w	r1, r1, #8
 8021556:	d1f0      	bne.n	802153a <_strtod_l+0x5ca>
 8021558:	b108      	cbz	r0, 802155e <_strtod_l+0x5ee>
 802155a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 802155e:	9a04      	ldr	r2, [sp, #16]
 8021560:	b1ba      	cbz	r2, 8021592 <_strtod_l+0x622>
 8021562:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8021566:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 802156a:	2a00      	cmp	r2, #0
 802156c:	4649      	mov	r1, r9
 802156e:	dd10      	ble.n	8021592 <_strtod_l+0x622>
 8021570:	2a1f      	cmp	r2, #31
 8021572:	f340 8132 	ble.w	80217da <_strtod_l+0x86a>
 8021576:	2a34      	cmp	r2, #52	; 0x34
 8021578:	bfde      	ittt	le
 802157a:	3a20      	suble	r2, #32
 802157c:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 8021580:	fa00 f202 	lslle.w	r2, r0, r2
 8021584:	f04f 0800 	mov.w	r8, #0
 8021588:	bfcc      	ite	gt
 802158a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 802158e:	ea02 0901 	andle.w	r9, r2, r1
 8021592:	ec49 8b17 	vmov	d7, r8, r9
 8021596:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802159a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802159e:	d0a4      	beq.n	80214ea <_strtod_l+0x57a>
 80215a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80215a2:	9200      	str	r2, [sp, #0]
 80215a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80215a6:	4632      	mov	r2, r6
 80215a8:	4620      	mov	r0, r4
 80215aa:	f002 f8a3 	bl	80236f4 <__s2b>
 80215ae:	900a      	str	r0, [sp, #40]	; 0x28
 80215b0:	2800      	cmp	r0, #0
 80215b2:	f43f af25 	beq.w	8021400 <_strtod_l+0x490>
 80215b6:	9b06      	ldr	r3, [sp, #24]
 80215b8:	ebab 0505 	sub.w	r5, fp, r5
 80215bc:	2b00      	cmp	r3, #0
 80215be:	bfb4      	ite	lt
 80215c0:	462b      	movlt	r3, r5
 80215c2:	2300      	movge	r3, #0
 80215c4:	930c      	str	r3, [sp, #48]	; 0x30
 80215c6:	9b06      	ldr	r3, [sp, #24]
 80215c8:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8021820 <_strtod_l+0x8b0>
 80215cc:	ed9f ab96 	vldr	d10, [pc, #600]	; 8021828 <_strtod_l+0x8b8>
 80215d0:	ed9f bb97 	vldr	d11, [pc, #604]	; 8021830 <_strtod_l+0x8c0>
 80215d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80215d8:	2500      	movs	r5, #0
 80215da:	9312      	str	r3, [sp, #72]	; 0x48
 80215dc:	462e      	mov	r6, r5
 80215de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80215e0:	4620      	mov	r0, r4
 80215e2:	6859      	ldr	r1, [r3, #4]
 80215e4:	f001 ffda 	bl	802359c <_Balloc>
 80215e8:	4607      	mov	r7, r0
 80215ea:	2800      	cmp	r0, #0
 80215ec:	f43f af0c 	beq.w	8021408 <_strtod_l+0x498>
 80215f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80215f2:	691a      	ldr	r2, [r3, #16]
 80215f4:	3202      	adds	r2, #2
 80215f6:	f103 010c 	add.w	r1, r3, #12
 80215fa:	0092      	lsls	r2, r2, #2
 80215fc:	300c      	adds	r0, #12
 80215fe:	f7fe fc63 	bl	801fec8 <memcpy>
 8021602:	ec49 8b10 	vmov	d0, r8, r9
 8021606:	aa1a      	add	r2, sp, #104	; 0x68
 8021608:	a919      	add	r1, sp, #100	; 0x64
 802160a:	4620      	mov	r0, r4
 802160c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8021610:	f002 fbac 	bl	8023d6c <__d2b>
 8021614:	9018      	str	r0, [sp, #96]	; 0x60
 8021616:	2800      	cmp	r0, #0
 8021618:	f43f aef6 	beq.w	8021408 <_strtod_l+0x498>
 802161c:	2101      	movs	r1, #1
 802161e:	4620      	mov	r0, r4
 8021620:	f002 f902 	bl	8023828 <__i2b>
 8021624:	4606      	mov	r6, r0
 8021626:	2800      	cmp	r0, #0
 8021628:	f43f aeee 	beq.w	8021408 <_strtod_l+0x498>
 802162c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802162e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8021630:	2b00      	cmp	r3, #0
 8021632:	bfab      	itete	ge
 8021634:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8021636:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8021638:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 802163c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8021640:	bfac      	ite	ge
 8021642:	eb03 0b02 	addge.w	fp, r3, r2
 8021646:	eba2 0a03 	sublt.w	sl, r2, r3
 802164a:	9a04      	ldr	r2, [sp, #16]
 802164c:	1a9b      	subs	r3, r3, r2
 802164e:	440b      	add	r3, r1
 8021650:	4a7a      	ldr	r2, [pc, #488]	; (802183c <_strtod_l+0x8cc>)
 8021652:	3b01      	subs	r3, #1
 8021654:	4293      	cmp	r3, r2
 8021656:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 802165a:	f280 80d1 	bge.w	8021800 <_strtod_l+0x890>
 802165e:	1ad2      	subs	r2, r2, r3
 8021660:	2a1f      	cmp	r2, #31
 8021662:	eba1 0102 	sub.w	r1, r1, r2
 8021666:	f04f 0001 	mov.w	r0, #1
 802166a:	f300 80bd 	bgt.w	80217e8 <_strtod_l+0x878>
 802166e:	fa00 f302 	lsl.w	r3, r0, r2
 8021672:	930e      	str	r3, [sp, #56]	; 0x38
 8021674:	2300      	movs	r3, #0
 8021676:	930d      	str	r3, [sp, #52]	; 0x34
 8021678:	eb0b 0301 	add.w	r3, fp, r1
 802167c:	9a04      	ldr	r2, [sp, #16]
 802167e:	459b      	cmp	fp, r3
 8021680:	448a      	add	sl, r1
 8021682:	4492      	add	sl, r2
 8021684:	465a      	mov	r2, fp
 8021686:	bfa8      	it	ge
 8021688:	461a      	movge	r2, r3
 802168a:	4552      	cmp	r2, sl
 802168c:	bfa8      	it	ge
 802168e:	4652      	movge	r2, sl
 8021690:	2a00      	cmp	r2, #0
 8021692:	bfc2      	ittt	gt
 8021694:	1a9b      	subgt	r3, r3, r2
 8021696:	ebaa 0a02 	subgt.w	sl, sl, r2
 802169a:	ebab 0b02 	subgt.w	fp, fp, r2
 802169e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80216a0:	2a00      	cmp	r2, #0
 80216a2:	dd18      	ble.n	80216d6 <_strtod_l+0x766>
 80216a4:	4631      	mov	r1, r6
 80216a6:	4620      	mov	r0, r4
 80216a8:	9315      	str	r3, [sp, #84]	; 0x54
 80216aa:	f002 f979 	bl	80239a0 <__pow5mult>
 80216ae:	4606      	mov	r6, r0
 80216b0:	2800      	cmp	r0, #0
 80216b2:	f43f aea9 	beq.w	8021408 <_strtod_l+0x498>
 80216b6:	4601      	mov	r1, r0
 80216b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80216ba:	4620      	mov	r0, r4
 80216bc:	f002 f8ca 	bl	8023854 <__multiply>
 80216c0:	9014      	str	r0, [sp, #80]	; 0x50
 80216c2:	2800      	cmp	r0, #0
 80216c4:	f43f aea0 	beq.w	8021408 <_strtod_l+0x498>
 80216c8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80216ca:	4620      	mov	r0, r4
 80216cc:	f001 ffa6 	bl	802361c <_Bfree>
 80216d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80216d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80216d4:	9218      	str	r2, [sp, #96]	; 0x60
 80216d6:	2b00      	cmp	r3, #0
 80216d8:	f300 8097 	bgt.w	802180a <_strtod_l+0x89a>
 80216dc:	9b06      	ldr	r3, [sp, #24]
 80216de:	2b00      	cmp	r3, #0
 80216e0:	dd08      	ble.n	80216f4 <_strtod_l+0x784>
 80216e2:	4639      	mov	r1, r7
 80216e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80216e6:	4620      	mov	r0, r4
 80216e8:	f002 f95a 	bl	80239a0 <__pow5mult>
 80216ec:	4607      	mov	r7, r0
 80216ee:	2800      	cmp	r0, #0
 80216f0:	f43f ae8a 	beq.w	8021408 <_strtod_l+0x498>
 80216f4:	f1ba 0f00 	cmp.w	sl, #0
 80216f8:	dd08      	ble.n	802170c <_strtod_l+0x79c>
 80216fa:	4639      	mov	r1, r7
 80216fc:	4652      	mov	r2, sl
 80216fe:	4620      	mov	r0, r4
 8021700:	f002 f9a8 	bl	8023a54 <__lshift>
 8021704:	4607      	mov	r7, r0
 8021706:	2800      	cmp	r0, #0
 8021708:	f43f ae7e 	beq.w	8021408 <_strtod_l+0x498>
 802170c:	f1bb 0f00 	cmp.w	fp, #0
 8021710:	dd08      	ble.n	8021724 <_strtod_l+0x7b4>
 8021712:	4631      	mov	r1, r6
 8021714:	465a      	mov	r2, fp
 8021716:	4620      	mov	r0, r4
 8021718:	f002 f99c 	bl	8023a54 <__lshift>
 802171c:	4606      	mov	r6, r0
 802171e:	2800      	cmp	r0, #0
 8021720:	f43f ae72 	beq.w	8021408 <_strtod_l+0x498>
 8021724:	9918      	ldr	r1, [sp, #96]	; 0x60
 8021726:	463a      	mov	r2, r7
 8021728:	4620      	mov	r0, r4
 802172a:	f002 fa1b 	bl	8023b64 <__mdiff>
 802172e:	4605      	mov	r5, r0
 8021730:	2800      	cmp	r0, #0
 8021732:	f43f ae69 	beq.w	8021408 <_strtod_l+0x498>
 8021736:	2300      	movs	r3, #0
 8021738:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 802173c:	60c3      	str	r3, [r0, #12]
 802173e:	4631      	mov	r1, r6
 8021740:	f002 f9f4 	bl	8023b2c <__mcmp>
 8021744:	2800      	cmp	r0, #0
 8021746:	da7f      	bge.n	8021848 <_strtod_l+0x8d8>
 8021748:	ea5a 0308 	orrs.w	r3, sl, r8
 802174c:	f040 80a5 	bne.w	802189a <_strtod_l+0x92a>
 8021750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021754:	2b00      	cmp	r3, #0
 8021756:	f040 80a0 	bne.w	802189a <_strtod_l+0x92a>
 802175a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802175e:	0d1b      	lsrs	r3, r3, #20
 8021760:	051b      	lsls	r3, r3, #20
 8021762:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8021766:	f240 8098 	bls.w	802189a <_strtod_l+0x92a>
 802176a:	696b      	ldr	r3, [r5, #20]
 802176c:	b91b      	cbnz	r3, 8021776 <_strtod_l+0x806>
 802176e:	692b      	ldr	r3, [r5, #16]
 8021770:	2b01      	cmp	r3, #1
 8021772:	f340 8092 	ble.w	802189a <_strtod_l+0x92a>
 8021776:	4629      	mov	r1, r5
 8021778:	2201      	movs	r2, #1
 802177a:	4620      	mov	r0, r4
 802177c:	f002 f96a 	bl	8023a54 <__lshift>
 8021780:	4631      	mov	r1, r6
 8021782:	4605      	mov	r5, r0
 8021784:	f002 f9d2 	bl	8023b2c <__mcmp>
 8021788:	2800      	cmp	r0, #0
 802178a:	f340 8086 	ble.w	802189a <_strtod_l+0x92a>
 802178e:	9904      	ldr	r1, [sp, #16]
 8021790:	4a2b      	ldr	r2, [pc, #172]	; (8021840 <_strtod_l+0x8d0>)
 8021792:	464b      	mov	r3, r9
 8021794:	2900      	cmp	r1, #0
 8021796:	f000 80a1 	beq.w	80218dc <_strtod_l+0x96c>
 802179a:	ea02 0109 	and.w	r1, r2, r9
 802179e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80217a2:	f300 809b 	bgt.w	80218dc <_strtod_l+0x96c>
 80217a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80217aa:	f77f aea2 	ble.w	80214f2 <_strtod_l+0x582>
 80217ae:	4a25      	ldr	r2, [pc, #148]	; (8021844 <_strtod_l+0x8d4>)
 80217b0:	2300      	movs	r3, #0
 80217b2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80217b6:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 80217ba:	ec49 8b17 	vmov	d7, r8, r9
 80217be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80217c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80217c6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80217ca:	4313      	orrs	r3, r2
 80217cc:	bf08      	it	eq
 80217ce:	2322      	moveq	r3, #34	; 0x22
 80217d0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80217d4:	bf08      	it	eq
 80217d6:	6023      	streq	r3, [r4, #0]
 80217d8:	e620      	b.n	802141c <_strtod_l+0x4ac>
 80217da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80217de:	fa01 f202 	lsl.w	r2, r1, r2
 80217e2:	ea02 0808 	and.w	r8, r2, r8
 80217e6:	e6d4      	b.n	8021592 <_strtod_l+0x622>
 80217e8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80217ec:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80217f0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80217f4:	33e2      	adds	r3, #226	; 0xe2
 80217f6:	fa00 f303 	lsl.w	r3, r0, r3
 80217fa:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 80217fe:	e73b      	b.n	8021678 <_strtod_l+0x708>
 8021800:	2000      	movs	r0, #0
 8021802:	2301      	movs	r3, #1
 8021804:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8021808:	e736      	b.n	8021678 <_strtod_l+0x708>
 802180a:	9918      	ldr	r1, [sp, #96]	; 0x60
 802180c:	461a      	mov	r2, r3
 802180e:	4620      	mov	r0, r4
 8021810:	f002 f920 	bl	8023a54 <__lshift>
 8021814:	9018      	str	r0, [sp, #96]	; 0x60
 8021816:	2800      	cmp	r0, #0
 8021818:	f47f af60 	bne.w	80216dc <_strtod_l+0x76c>
 802181c:	e5f4      	b.n	8021408 <_strtod_l+0x498>
 802181e:	bf00      	nop
 8021820:	94a03595 	.word	0x94a03595
 8021824:	3fcfffff 	.word	0x3fcfffff
 8021828:	94a03595 	.word	0x94a03595
 802182c:	3fdfffff 	.word	0x3fdfffff
 8021830:	35afe535 	.word	0x35afe535
 8021834:	3fe00000 	.word	0x3fe00000
 8021838:	080295d0 	.word	0x080295d0
 802183c:	fffffc02 	.word	0xfffffc02
 8021840:	7ff00000 	.word	0x7ff00000
 8021844:	39500000 	.word	0x39500000
 8021848:	46cb      	mov	fp, r9
 802184a:	d165      	bne.n	8021918 <_strtod_l+0x9a8>
 802184c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021850:	f1ba 0f00 	cmp.w	sl, #0
 8021854:	d02a      	beq.n	80218ac <_strtod_l+0x93c>
 8021856:	4aaa      	ldr	r2, [pc, #680]	; (8021b00 <_strtod_l+0xb90>)
 8021858:	4293      	cmp	r3, r2
 802185a:	d12b      	bne.n	80218b4 <_strtod_l+0x944>
 802185c:	9b04      	ldr	r3, [sp, #16]
 802185e:	4641      	mov	r1, r8
 8021860:	b1fb      	cbz	r3, 80218a2 <_strtod_l+0x932>
 8021862:	4aa8      	ldr	r2, [pc, #672]	; (8021b04 <_strtod_l+0xb94>)
 8021864:	ea09 0202 	and.w	r2, r9, r2
 8021868:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 802186c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021870:	d81a      	bhi.n	80218a8 <_strtod_l+0x938>
 8021872:	0d12      	lsrs	r2, r2, #20
 8021874:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8021878:	fa00 f303 	lsl.w	r3, r0, r3
 802187c:	4299      	cmp	r1, r3
 802187e:	d119      	bne.n	80218b4 <_strtod_l+0x944>
 8021880:	4ba1      	ldr	r3, [pc, #644]	; (8021b08 <_strtod_l+0xb98>)
 8021882:	459b      	cmp	fp, r3
 8021884:	d102      	bne.n	802188c <_strtod_l+0x91c>
 8021886:	3101      	adds	r1, #1
 8021888:	f43f adbe 	beq.w	8021408 <_strtod_l+0x498>
 802188c:	4b9d      	ldr	r3, [pc, #628]	; (8021b04 <_strtod_l+0xb94>)
 802188e:	ea0b 0303 	and.w	r3, fp, r3
 8021892:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8021896:	f04f 0800 	mov.w	r8, #0
 802189a:	9b04      	ldr	r3, [sp, #16]
 802189c:	2b00      	cmp	r3, #0
 802189e:	d186      	bne.n	80217ae <_strtod_l+0x83e>
 80218a0:	e5bc      	b.n	802141c <_strtod_l+0x4ac>
 80218a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80218a6:	e7e9      	b.n	802187c <_strtod_l+0x90c>
 80218a8:	4603      	mov	r3, r0
 80218aa:	e7e7      	b.n	802187c <_strtod_l+0x90c>
 80218ac:	ea53 0308 	orrs.w	r3, r3, r8
 80218b0:	f43f af6d 	beq.w	802178e <_strtod_l+0x81e>
 80218b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80218b6:	b1db      	cbz	r3, 80218f0 <_strtod_l+0x980>
 80218b8:	ea13 0f0b 	tst.w	r3, fp
 80218bc:	d0ed      	beq.n	802189a <_strtod_l+0x92a>
 80218be:	9a04      	ldr	r2, [sp, #16]
 80218c0:	4640      	mov	r0, r8
 80218c2:	4649      	mov	r1, r9
 80218c4:	f1ba 0f00 	cmp.w	sl, #0
 80218c8:	d016      	beq.n	80218f8 <_strtod_l+0x988>
 80218ca:	f7ff fb35 	bl	8020f38 <sulp>
 80218ce:	ed9d 7b08 	vldr	d7, [sp, #32]
 80218d2:	ee37 7b00 	vadd.f64	d7, d7, d0
 80218d6:	ec59 8b17 	vmov	r8, r9, d7
 80218da:	e7de      	b.n	802189a <_strtod_l+0x92a>
 80218dc:	4013      	ands	r3, r2
 80218de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80218e2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80218e6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80218ea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80218ee:	e7d4      	b.n	802189a <_strtod_l+0x92a>
 80218f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80218f2:	ea13 0f08 	tst.w	r3, r8
 80218f6:	e7e1      	b.n	80218bc <_strtod_l+0x94c>
 80218f8:	f7ff fb1e 	bl	8020f38 <sulp>
 80218fc:	ed9d 7b08 	vldr	d7, [sp, #32]
 8021900:	ee37 7b40 	vsub.f64	d7, d7, d0
 8021904:	ed8d 7b06 	vstr	d7, [sp, #24]
 8021908:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021910:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8021914:	d1c1      	bne.n	802189a <_strtod_l+0x92a>
 8021916:	e5ec      	b.n	80214f2 <_strtod_l+0x582>
 8021918:	4631      	mov	r1, r6
 802191a:	4628      	mov	r0, r5
 802191c:	f002 fa82 	bl	8023e24 <__ratio>
 8021920:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8021924:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8021928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802192c:	d867      	bhi.n	80219fe <_strtod_l+0xa8e>
 802192e:	f1ba 0f00 	cmp.w	sl, #0
 8021932:	d044      	beq.n	80219be <_strtod_l+0xa4e>
 8021934:	4b75      	ldr	r3, [pc, #468]	; (8021b0c <_strtod_l+0xb9c>)
 8021936:	2200      	movs	r2, #0
 8021938:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 802193c:	4971      	ldr	r1, [pc, #452]	; (8021b04 <_strtod_l+0xb94>)
 802193e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8021b18 <_strtod_l+0xba8>
 8021942:	ea0b 0001 	and.w	r0, fp, r1
 8021946:	4560      	cmp	r0, ip
 8021948:	900d      	str	r0, [sp, #52]	; 0x34
 802194a:	f040 808b 	bne.w	8021a64 <_strtod_l+0xaf4>
 802194e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8021952:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8021956:	ec49 8b10 	vmov	d0, r8, r9
 802195a:	ec43 2b1c 	vmov	d12, r2, r3
 802195e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8021962:	f002 f987 	bl	8023c74 <__ulp>
 8021966:	ec49 8b1d 	vmov	d13, r8, r9
 802196a:	eeac db00 	vfma.f64	d13, d12, d0
 802196e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8021972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021974:	4963      	ldr	r1, [pc, #396]	; (8021b04 <_strtod_l+0xb94>)
 8021976:	4a66      	ldr	r2, [pc, #408]	; (8021b10 <_strtod_l+0xba0>)
 8021978:	4019      	ands	r1, r3
 802197a:	4291      	cmp	r1, r2
 802197c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8021980:	d947      	bls.n	8021a12 <_strtod_l+0xaa2>
 8021982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021984:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8021988:	4293      	cmp	r3, r2
 802198a:	d103      	bne.n	8021994 <_strtod_l+0xa24>
 802198c:	9b08      	ldr	r3, [sp, #32]
 802198e:	3301      	adds	r3, #1
 8021990:	f43f ad3a 	beq.w	8021408 <_strtod_l+0x498>
 8021994:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8021b08 <_strtod_l+0xb98>
 8021998:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 802199c:	9918      	ldr	r1, [sp, #96]	; 0x60
 802199e:	4620      	mov	r0, r4
 80219a0:	f001 fe3c 	bl	802361c <_Bfree>
 80219a4:	4639      	mov	r1, r7
 80219a6:	4620      	mov	r0, r4
 80219a8:	f001 fe38 	bl	802361c <_Bfree>
 80219ac:	4631      	mov	r1, r6
 80219ae:	4620      	mov	r0, r4
 80219b0:	f001 fe34 	bl	802361c <_Bfree>
 80219b4:	4629      	mov	r1, r5
 80219b6:	4620      	mov	r0, r4
 80219b8:	f001 fe30 	bl	802361c <_Bfree>
 80219bc:	e60f      	b.n	80215de <_strtod_l+0x66e>
 80219be:	f1b8 0f00 	cmp.w	r8, #0
 80219c2:	d112      	bne.n	80219ea <_strtod_l+0xa7a>
 80219c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80219c8:	b9b3      	cbnz	r3, 80219f8 <_strtod_l+0xa88>
 80219ca:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80219ce:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80219d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219d6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80219da:	d401      	bmi.n	80219e0 <_strtod_l+0xa70>
 80219dc:	ee20 8b08 	vmul.f64	d8, d0, d8
 80219e0:	eeb1 7b48 	vneg.f64	d7, d8
 80219e4:	ec53 2b17 	vmov	r2, r3, d7
 80219e8:	e7a8      	b.n	802193c <_strtod_l+0x9cc>
 80219ea:	f1b8 0f01 	cmp.w	r8, #1
 80219ee:	d103      	bne.n	80219f8 <_strtod_l+0xa88>
 80219f0:	f1b9 0f00 	cmp.w	r9, #0
 80219f4:	f43f ad7d 	beq.w	80214f2 <_strtod_l+0x582>
 80219f8:	4b46      	ldr	r3, [pc, #280]	; (8021b14 <_strtod_l+0xba4>)
 80219fa:	2200      	movs	r2, #0
 80219fc:	e79c      	b.n	8021938 <_strtod_l+0x9c8>
 80219fe:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8021a02:	ee20 8b08 	vmul.f64	d8, d0, d8
 8021a06:	f1ba 0f00 	cmp.w	sl, #0
 8021a0a:	d0e9      	beq.n	80219e0 <_strtod_l+0xa70>
 8021a0c:	ec53 2b18 	vmov	r2, r3, d8
 8021a10:	e794      	b.n	802193c <_strtod_l+0x9cc>
 8021a12:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8021a16:	9b04      	ldr	r3, [sp, #16]
 8021a18:	2b00      	cmp	r3, #0
 8021a1a:	d1bf      	bne.n	802199c <_strtod_l+0xa2c>
 8021a1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8021a20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021a22:	0d1b      	lsrs	r3, r3, #20
 8021a24:	051b      	lsls	r3, r3, #20
 8021a26:	429a      	cmp	r2, r3
 8021a28:	d1b8      	bne.n	802199c <_strtod_l+0xa2c>
 8021a2a:	ec51 0b18 	vmov	r0, r1, d8
 8021a2e:	f7de fe83 	bl	8000738 <__aeabi_d2lz>
 8021a32:	f7de fe3b 	bl	80006ac <__aeabi_l2d>
 8021a36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021a3a:	ec41 0b17 	vmov	d7, r0, r1
 8021a3e:	ea43 0308 	orr.w	r3, r3, r8
 8021a42:	ea53 030a 	orrs.w	r3, r3, sl
 8021a46:	ee38 8b47 	vsub.f64	d8, d8, d7
 8021a4a:	d03e      	beq.n	8021aca <_strtod_l+0xb5a>
 8021a4c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8021a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a54:	f53f ace2 	bmi.w	802141c <_strtod_l+0x4ac>
 8021a58:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8021a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a60:	dd9c      	ble.n	802199c <_strtod_l+0xa2c>
 8021a62:	e4db      	b.n	802141c <_strtod_l+0x4ac>
 8021a64:	9904      	ldr	r1, [sp, #16]
 8021a66:	b301      	cbz	r1, 8021aaa <_strtod_l+0xb3a>
 8021a68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021a6a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8021a6e:	d81c      	bhi.n	8021aaa <_strtod_l+0xb3a>
 8021a70:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8021af8 <_strtod_l+0xb88>
 8021a74:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8021a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a7c:	d811      	bhi.n	8021aa2 <_strtod_l+0xb32>
 8021a7e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8021a82:	ee18 3a10 	vmov	r3, s16
 8021a86:	2b01      	cmp	r3, #1
 8021a88:	bf38      	it	cc
 8021a8a:	2301      	movcc	r3, #1
 8021a8c:	ee08 3a10 	vmov	s16, r3
 8021a90:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8021a94:	f1ba 0f00 	cmp.w	sl, #0
 8021a98:	d114      	bne.n	8021ac4 <_strtod_l+0xb54>
 8021a9a:	eeb1 7b48 	vneg.f64	d7, d8
 8021a9e:	ec53 2b17 	vmov	r2, r3, d7
 8021aa2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021aa4:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8021aa8:	1a0b      	subs	r3, r1, r0
 8021aaa:	ed9d 0b08 	vldr	d0, [sp, #32]
 8021aae:	ec43 2b1c 	vmov	d12, r2, r3
 8021ab2:	f002 f8df 	bl	8023c74 <__ulp>
 8021ab6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8021aba:	eeac 7b00 	vfma.f64	d7, d12, d0
 8021abe:	ec59 8b17 	vmov	r8, r9, d7
 8021ac2:	e7a8      	b.n	8021a16 <_strtod_l+0xaa6>
 8021ac4:	ec53 2b18 	vmov	r2, r3, d8
 8021ac8:	e7eb      	b.n	8021aa2 <_strtod_l+0xb32>
 8021aca:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8021ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ad2:	f57f af63 	bpl.w	802199c <_strtod_l+0xa2c>
 8021ad6:	e4a1      	b.n	802141c <_strtod_l+0x4ac>
 8021ad8:	2300      	movs	r3, #0
 8021ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8021adc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021ade:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021ae0:	6013      	str	r3, [r2, #0]
 8021ae2:	f7ff ba8d 	b.w	8021000 <_strtod_l+0x90>
 8021ae6:	2a65      	cmp	r2, #101	; 0x65
 8021ae8:	f43f ab89 	beq.w	80211fe <_strtod_l+0x28e>
 8021aec:	2a45      	cmp	r2, #69	; 0x45
 8021aee:	f43f ab86 	beq.w	80211fe <_strtod_l+0x28e>
 8021af2:	2101      	movs	r1, #1
 8021af4:	f7ff bbbe 	b.w	8021274 <_strtod_l+0x304>
 8021af8:	ffc00000 	.word	0xffc00000
 8021afc:	41dfffff 	.word	0x41dfffff
 8021b00:	000fffff 	.word	0x000fffff
 8021b04:	7ff00000 	.word	0x7ff00000
 8021b08:	7fefffff 	.word	0x7fefffff
 8021b0c:	3ff00000 	.word	0x3ff00000
 8021b10:	7c9fffff 	.word	0x7c9fffff
 8021b14:	bff00000 	.word	0xbff00000
 8021b18:	7fe00000 	.word	0x7fe00000

08021b1c <_strtod_r>:
 8021b1c:	4b01      	ldr	r3, [pc, #4]	; (8021b24 <_strtod_r+0x8>)
 8021b1e:	f7ff ba27 	b.w	8020f70 <_strtod_l>
 8021b22:	bf00      	nop
 8021b24:	240038ac 	.word	0x240038ac

08021b28 <_strtol_l.isra.0>:
 8021b28:	2b01      	cmp	r3, #1
 8021b2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b2e:	d001      	beq.n	8021b34 <_strtol_l.isra.0+0xc>
 8021b30:	2b24      	cmp	r3, #36	; 0x24
 8021b32:	d906      	bls.n	8021b42 <_strtol_l.isra.0+0x1a>
 8021b34:	f000 ff6a 	bl	8022a0c <__errno>
 8021b38:	2316      	movs	r3, #22
 8021b3a:	6003      	str	r3, [r0, #0]
 8021b3c:	2000      	movs	r0, #0
 8021b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021b42:	4f3a      	ldr	r7, [pc, #232]	; (8021c2c <_strtol_l.isra.0+0x104>)
 8021b44:	468e      	mov	lr, r1
 8021b46:	4676      	mov	r6, lr
 8021b48:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021b4c:	5de5      	ldrb	r5, [r4, r7]
 8021b4e:	f015 0508 	ands.w	r5, r5, #8
 8021b52:	d1f8      	bne.n	8021b46 <_strtol_l.isra.0+0x1e>
 8021b54:	2c2d      	cmp	r4, #45	; 0x2d
 8021b56:	d134      	bne.n	8021bc2 <_strtol_l.isra.0+0x9a>
 8021b58:	f89e 4000 	ldrb.w	r4, [lr]
 8021b5c:	f04f 0801 	mov.w	r8, #1
 8021b60:	f106 0e02 	add.w	lr, r6, #2
 8021b64:	2b00      	cmp	r3, #0
 8021b66:	d05c      	beq.n	8021c22 <_strtol_l.isra.0+0xfa>
 8021b68:	2b10      	cmp	r3, #16
 8021b6a:	d10c      	bne.n	8021b86 <_strtol_l.isra.0+0x5e>
 8021b6c:	2c30      	cmp	r4, #48	; 0x30
 8021b6e:	d10a      	bne.n	8021b86 <_strtol_l.isra.0+0x5e>
 8021b70:	f89e 4000 	ldrb.w	r4, [lr]
 8021b74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021b78:	2c58      	cmp	r4, #88	; 0x58
 8021b7a:	d14d      	bne.n	8021c18 <_strtol_l.isra.0+0xf0>
 8021b7c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8021b80:	2310      	movs	r3, #16
 8021b82:	f10e 0e02 	add.w	lr, lr, #2
 8021b86:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8021b8a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8021b8e:	2600      	movs	r6, #0
 8021b90:	fbbc f9f3 	udiv	r9, ip, r3
 8021b94:	4635      	mov	r5, r6
 8021b96:	fb03 ca19 	mls	sl, r3, r9, ip
 8021b9a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021b9e:	2f09      	cmp	r7, #9
 8021ba0:	d818      	bhi.n	8021bd4 <_strtol_l.isra.0+0xac>
 8021ba2:	463c      	mov	r4, r7
 8021ba4:	42a3      	cmp	r3, r4
 8021ba6:	dd24      	ble.n	8021bf2 <_strtol_l.isra.0+0xca>
 8021ba8:	2e00      	cmp	r6, #0
 8021baa:	db1f      	blt.n	8021bec <_strtol_l.isra.0+0xc4>
 8021bac:	45a9      	cmp	r9, r5
 8021bae:	d31d      	bcc.n	8021bec <_strtol_l.isra.0+0xc4>
 8021bb0:	d101      	bne.n	8021bb6 <_strtol_l.isra.0+0x8e>
 8021bb2:	45a2      	cmp	sl, r4
 8021bb4:	db1a      	blt.n	8021bec <_strtol_l.isra.0+0xc4>
 8021bb6:	fb05 4503 	mla	r5, r5, r3, r4
 8021bba:	2601      	movs	r6, #1
 8021bbc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021bc0:	e7eb      	b.n	8021b9a <_strtol_l.isra.0+0x72>
 8021bc2:	2c2b      	cmp	r4, #43	; 0x2b
 8021bc4:	bf08      	it	eq
 8021bc6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021bca:	46a8      	mov	r8, r5
 8021bcc:	bf08      	it	eq
 8021bce:	f106 0e02 	addeq.w	lr, r6, #2
 8021bd2:	e7c7      	b.n	8021b64 <_strtol_l.isra.0+0x3c>
 8021bd4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021bd8:	2f19      	cmp	r7, #25
 8021bda:	d801      	bhi.n	8021be0 <_strtol_l.isra.0+0xb8>
 8021bdc:	3c37      	subs	r4, #55	; 0x37
 8021bde:	e7e1      	b.n	8021ba4 <_strtol_l.isra.0+0x7c>
 8021be0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021be4:	2f19      	cmp	r7, #25
 8021be6:	d804      	bhi.n	8021bf2 <_strtol_l.isra.0+0xca>
 8021be8:	3c57      	subs	r4, #87	; 0x57
 8021bea:	e7db      	b.n	8021ba4 <_strtol_l.isra.0+0x7c>
 8021bec:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8021bf0:	e7e4      	b.n	8021bbc <_strtol_l.isra.0+0x94>
 8021bf2:	2e00      	cmp	r6, #0
 8021bf4:	da05      	bge.n	8021c02 <_strtol_l.isra.0+0xda>
 8021bf6:	2322      	movs	r3, #34	; 0x22
 8021bf8:	6003      	str	r3, [r0, #0]
 8021bfa:	4665      	mov	r5, ip
 8021bfc:	b942      	cbnz	r2, 8021c10 <_strtol_l.isra.0+0xe8>
 8021bfe:	4628      	mov	r0, r5
 8021c00:	e79d      	b.n	8021b3e <_strtol_l.isra.0+0x16>
 8021c02:	f1b8 0f00 	cmp.w	r8, #0
 8021c06:	d000      	beq.n	8021c0a <_strtol_l.isra.0+0xe2>
 8021c08:	426d      	negs	r5, r5
 8021c0a:	2a00      	cmp	r2, #0
 8021c0c:	d0f7      	beq.n	8021bfe <_strtol_l.isra.0+0xd6>
 8021c0e:	b10e      	cbz	r6, 8021c14 <_strtol_l.isra.0+0xec>
 8021c10:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8021c14:	6011      	str	r1, [r2, #0]
 8021c16:	e7f2      	b.n	8021bfe <_strtol_l.isra.0+0xd6>
 8021c18:	2430      	movs	r4, #48	; 0x30
 8021c1a:	2b00      	cmp	r3, #0
 8021c1c:	d1b3      	bne.n	8021b86 <_strtol_l.isra.0+0x5e>
 8021c1e:	2308      	movs	r3, #8
 8021c20:	e7b1      	b.n	8021b86 <_strtol_l.isra.0+0x5e>
 8021c22:	2c30      	cmp	r4, #48	; 0x30
 8021c24:	d0a4      	beq.n	8021b70 <_strtol_l.isra.0+0x48>
 8021c26:	230a      	movs	r3, #10
 8021c28:	e7ad      	b.n	8021b86 <_strtol_l.isra.0+0x5e>
 8021c2a:	bf00      	nop
 8021c2c:	080293ed 	.word	0x080293ed

08021c30 <_strtol_r>:
 8021c30:	f7ff bf7a 	b.w	8021b28 <_strtol_l.isra.0>

08021c34 <__swbuf_r>:
 8021c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c36:	460e      	mov	r6, r1
 8021c38:	4614      	mov	r4, r2
 8021c3a:	4605      	mov	r5, r0
 8021c3c:	b118      	cbz	r0, 8021c46 <__swbuf_r+0x12>
 8021c3e:	6983      	ldr	r3, [r0, #24]
 8021c40:	b90b      	cbnz	r3, 8021c46 <__swbuf_r+0x12>
 8021c42:	f001 f803 	bl	8022c4c <__sinit>
 8021c46:	4b21      	ldr	r3, [pc, #132]	; (8021ccc <__swbuf_r+0x98>)
 8021c48:	429c      	cmp	r4, r3
 8021c4a:	d12b      	bne.n	8021ca4 <__swbuf_r+0x70>
 8021c4c:	686c      	ldr	r4, [r5, #4]
 8021c4e:	69a3      	ldr	r3, [r4, #24]
 8021c50:	60a3      	str	r3, [r4, #8]
 8021c52:	89a3      	ldrh	r3, [r4, #12]
 8021c54:	071a      	lsls	r2, r3, #28
 8021c56:	d52f      	bpl.n	8021cb8 <__swbuf_r+0x84>
 8021c58:	6923      	ldr	r3, [r4, #16]
 8021c5a:	b36b      	cbz	r3, 8021cb8 <__swbuf_r+0x84>
 8021c5c:	6923      	ldr	r3, [r4, #16]
 8021c5e:	6820      	ldr	r0, [r4, #0]
 8021c60:	1ac0      	subs	r0, r0, r3
 8021c62:	6963      	ldr	r3, [r4, #20]
 8021c64:	b2f6      	uxtb	r6, r6
 8021c66:	4283      	cmp	r3, r0
 8021c68:	4637      	mov	r7, r6
 8021c6a:	dc04      	bgt.n	8021c76 <__swbuf_r+0x42>
 8021c6c:	4621      	mov	r1, r4
 8021c6e:	4628      	mov	r0, r5
 8021c70:	f000 ff58 	bl	8022b24 <_fflush_r>
 8021c74:	bb30      	cbnz	r0, 8021cc4 <__swbuf_r+0x90>
 8021c76:	68a3      	ldr	r3, [r4, #8]
 8021c78:	3b01      	subs	r3, #1
 8021c7a:	60a3      	str	r3, [r4, #8]
 8021c7c:	6823      	ldr	r3, [r4, #0]
 8021c7e:	1c5a      	adds	r2, r3, #1
 8021c80:	6022      	str	r2, [r4, #0]
 8021c82:	701e      	strb	r6, [r3, #0]
 8021c84:	6963      	ldr	r3, [r4, #20]
 8021c86:	3001      	adds	r0, #1
 8021c88:	4283      	cmp	r3, r0
 8021c8a:	d004      	beq.n	8021c96 <__swbuf_r+0x62>
 8021c8c:	89a3      	ldrh	r3, [r4, #12]
 8021c8e:	07db      	lsls	r3, r3, #31
 8021c90:	d506      	bpl.n	8021ca0 <__swbuf_r+0x6c>
 8021c92:	2e0a      	cmp	r6, #10
 8021c94:	d104      	bne.n	8021ca0 <__swbuf_r+0x6c>
 8021c96:	4621      	mov	r1, r4
 8021c98:	4628      	mov	r0, r5
 8021c9a:	f000 ff43 	bl	8022b24 <_fflush_r>
 8021c9e:	b988      	cbnz	r0, 8021cc4 <__swbuf_r+0x90>
 8021ca0:	4638      	mov	r0, r7
 8021ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021ca4:	4b0a      	ldr	r3, [pc, #40]	; (8021cd0 <__swbuf_r+0x9c>)
 8021ca6:	429c      	cmp	r4, r3
 8021ca8:	d101      	bne.n	8021cae <__swbuf_r+0x7a>
 8021caa:	68ac      	ldr	r4, [r5, #8]
 8021cac:	e7cf      	b.n	8021c4e <__swbuf_r+0x1a>
 8021cae:	4b09      	ldr	r3, [pc, #36]	; (8021cd4 <__swbuf_r+0xa0>)
 8021cb0:	429c      	cmp	r4, r3
 8021cb2:	bf08      	it	eq
 8021cb4:	68ec      	ldreq	r4, [r5, #12]
 8021cb6:	e7ca      	b.n	8021c4e <__swbuf_r+0x1a>
 8021cb8:	4621      	mov	r1, r4
 8021cba:	4628      	mov	r0, r5
 8021cbc:	f000 f80c 	bl	8021cd8 <__swsetup_r>
 8021cc0:	2800      	cmp	r0, #0
 8021cc2:	d0cb      	beq.n	8021c5c <__swbuf_r+0x28>
 8021cc4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8021cc8:	e7ea      	b.n	8021ca0 <__swbuf_r+0x6c>
 8021cca:	bf00      	nop
 8021ccc:	080296d4 	.word	0x080296d4
 8021cd0:	080296f4 	.word	0x080296f4
 8021cd4:	080296b4 	.word	0x080296b4

08021cd8 <__swsetup_r>:
 8021cd8:	4b32      	ldr	r3, [pc, #200]	; (8021da4 <__swsetup_r+0xcc>)
 8021cda:	b570      	push	{r4, r5, r6, lr}
 8021cdc:	681d      	ldr	r5, [r3, #0]
 8021cde:	4606      	mov	r6, r0
 8021ce0:	460c      	mov	r4, r1
 8021ce2:	b125      	cbz	r5, 8021cee <__swsetup_r+0x16>
 8021ce4:	69ab      	ldr	r3, [r5, #24]
 8021ce6:	b913      	cbnz	r3, 8021cee <__swsetup_r+0x16>
 8021ce8:	4628      	mov	r0, r5
 8021cea:	f000 ffaf 	bl	8022c4c <__sinit>
 8021cee:	4b2e      	ldr	r3, [pc, #184]	; (8021da8 <__swsetup_r+0xd0>)
 8021cf0:	429c      	cmp	r4, r3
 8021cf2:	d10f      	bne.n	8021d14 <__swsetup_r+0x3c>
 8021cf4:	686c      	ldr	r4, [r5, #4]
 8021cf6:	89a3      	ldrh	r3, [r4, #12]
 8021cf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021cfc:	0719      	lsls	r1, r3, #28
 8021cfe:	d42c      	bmi.n	8021d5a <__swsetup_r+0x82>
 8021d00:	06dd      	lsls	r5, r3, #27
 8021d02:	d411      	bmi.n	8021d28 <__swsetup_r+0x50>
 8021d04:	2309      	movs	r3, #9
 8021d06:	6033      	str	r3, [r6, #0]
 8021d08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021d0c:	81a3      	strh	r3, [r4, #12]
 8021d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021d12:	e03e      	b.n	8021d92 <__swsetup_r+0xba>
 8021d14:	4b25      	ldr	r3, [pc, #148]	; (8021dac <__swsetup_r+0xd4>)
 8021d16:	429c      	cmp	r4, r3
 8021d18:	d101      	bne.n	8021d1e <__swsetup_r+0x46>
 8021d1a:	68ac      	ldr	r4, [r5, #8]
 8021d1c:	e7eb      	b.n	8021cf6 <__swsetup_r+0x1e>
 8021d1e:	4b24      	ldr	r3, [pc, #144]	; (8021db0 <__swsetup_r+0xd8>)
 8021d20:	429c      	cmp	r4, r3
 8021d22:	bf08      	it	eq
 8021d24:	68ec      	ldreq	r4, [r5, #12]
 8021d26:	e7e6      	b.n	8021cf6 <__swsetup_r+0x1e>
 8021d28:	0758      	lsls	r0, r3, #29
 8021d2a:	d512      	bpl.n	8021d52 <__swsetup_r+0x7a>
 8021d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021d2e:	b141      	cbz	r1, 8021d42 <__swsetup_r+0x6a>
 8021d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021d34:	4299      	cmp	r1, r3
 8021d36:	d002      	beq.n	8021d3e <__swsetup_r+0x66>
 8021d38:	4630      	mov	r0, r6
 8021d3a:	f7fe f8f5 	bl	801ff28 <_free_r>
 8021d3e:	2300      	movs	r3, #0
 8021d40:	6363      	str	r3, [r4, #52]	; 0x34
 8021d42:	89a3      	ldrh	r3, [r4, #12]
 8021d44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021d48:	81a3      	strh	r3, [r4, #12]
 8021d4a:	2300      	movs	r3, #0
 8021d4c:	6063      	str	r3, [r4, #4]
 8021d4e:	6923      	ldr	r3, [r4, #16]
 8021d50:	6023      	str	r3, [r4, #0]
 8021d52:	89a3      	ldrh	r3, [r4, #12]
 8021d54:	f043 0308 	orr.w	r3, r3, #8
 8021d58:	81a3      	strh	r3, [r4, #12]
 8021d5a:	6923      	ldr	r3, [r4, #16]
 8021d5c:	b94b      	cbnz	r3, 8021d72 <__swsetup_r+0x9a>
 8021d5e:	89a3      	ldrh	r3, [r4, #12]
 8021d60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021d68:	d003      	beq.n	8021d72 <__swsetup_r+0x9a>
 8021d6a:	4621      	mov	r1, r4
 8021d6c:	4630      	mov	r0, r6
 8021d6e:	f001 fbb7 	bl	80234e0 <__smakebuf_r>
 8021d72:	89a0      	ldrh	r0, [r4, #12]
 8021d74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021d78:	f010 0301 	ands.w	r3, r0, #1
 8021d7c:	d00a      	beq.n	8021d94 <__swsetup_r+0xbc>
 8021d7e:	2300      	movs	r3, #0
 8021d80:	60a3      	str	r3, [r4, #8]
 8021d82:	6963      	ldr	r3, [r4, #20]
 8021d84:	425b      	negs	r3, r3
 8021d86:	61a3      	str	r3, [r4, #24]
 8021d88:	6923      	ldr	r3, [r4, #16]
 8021d8a:	b943      	cbnz	r3, 8021d9e <__swsetup_r+0xc6>
 8021d8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021d90:	d1ba      	bne.n	8021d08 <__swsetup_r+0x30>
 8021d92:	bd70      	pop	{r4, r5, r6, pc}
 8021d94:	0781      	lsls	r1, r0, #30
 8021d96:	bf58      	it	pl
 8021d98:	6963      	ldrpl	r3, [r4, #20]
 8021d9a:	60a3      	str	r3, [r4, #8]
 8021d9c:	e7f4      	b.n	8021d88 <__swsetup_r+0xb0>
 8021d9e:	2000      	movs	r0, #0
 8021da0:	e7f7      	b.n	8021d92 <__swsetup_r+0xba>
 8021da2:	bf00      	nop
 8021da4:	24003844 	.word	0x24003844
 8021da8:	080296d4 	.word	0x080296d4
 8021dac:	080296f4 	.word	0x080296f4
 8021db0:	080296b4 	.word	0x080296b4

08021db4 <__assert_func>:
 8021db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021db6:	4614      	mov	r4, r2
 8021db8:	461a      	mov	r2, r3
 8021dba:	4b09      	ldr	r3, [pc, #36]	; (8021de0 <__assert_func+0x2c>)
 8021dbc:	681b      	ldr	r3, [r3, #0]
 8021dbe:	4605      	mov	r5, r0
 8021dc0:	68d8      	ldr	r0, [r3, #12]
 8021dc2:	b14c      	cbz	r4, 8021dd8 <__assert_func+0x24>
 8021dc4:	4b07      	ldr	r3, [pc, #28]	; (8021de4 <__assert_func+0x30>)
 8021dc6:	9100      	str	r1, [sp, #0]
 8021dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021dcc:	4906      	ldr	r1, [pc, #24]	; (8021de8 <__assert_func+0x34>)
 8021dce:	462b      	mov	r3, r5
 8021dd0:	f000 ffba 	bl	8022d48 <fiprintf>
 8021dd4:	f002 fbce 	bl	8024574 <abort>
 8021dd8:	4b04      	ldr	r3, [pc, #16]	; (8021dec <__assert_func+0x38>)
 8021dda:	461c      	mov	r4, r3
 8021ddc:	e7f3      	b.n	8021dc6 <__assert_func+0x12>
 8021dde:	bf00      	nop
 8021de0:	24003844 	.word	0x24003844
 8021de4:	080295f8 	.word	0x080295f8
 8021de8:	08029605 	.word	0x08029605
 8021dec:	08029633 	.word	0x08029633

08021df0 <quorem>:
 8021df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021df4:	6903      	ldr	r3, [r0, #16]
 8021df6:	690c      	ldr	r4, [r1, #16]
 8021df8:	42a3      	cmp	r3, r4
 8021dfa:	4607      	mov	r7, r0
 8021dfc:	f2c0 8081 	blt.w	8021f02 <quorem+0x112>
 8021e00:	3c01      	subs	r4, #1
 8021e02:	f101 0814 	add.w	r8, r1, #20
 8021e06:	f100 0514 	add.w	r5, r0, #20
 8021e0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021e0e:	9301      	str	r3, [sp, #4]
 8021e10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8021e14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021e18:	3301      	adds	r3, #1
 8021e1a:	429a      	cmp	r2, r3
 8021e1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8021e20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8021e24:	fbb2 f6f3 	udiv	r6, r2, r3
 8021e28:	d331      	bcc.n	8021e8e <quorem+0x9e>
 8021e2a:	f04f 0e00 	mov.w	lr, #0
 8021e2e:	4640      	mov	r0, r8
 8021e30:	46ac      	mov	ip, r5
 8021e32:	46f2      	mov	sl, lr
 8021e34:	f850 2b04 	ldr.w	r2, [r0], #4
 8021e38:	b293      	uxth	r3, r2
 8021e3a:	fb06 e303 	mla	r3, r6, r3, lr
 8021e3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8021e42:	b29b      	uxth	r3, r3
 8021e44:	ebaa 0303 	sub.w	r3, sl, r3
 8021e48:	0c12      	lsrs	r2, r2, #16
 8021e4a:	f8dc a000 	ldr.w	sl, [ip]
 8021e4e:	fb06 e202 	mla	r2, r6, r2, lr
 8021e52:	fa13 f38a 	uxtah	r3, r3, sl
 8021e56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8021e5a:	fa1f fa82 	uxth.w	sl, r2
 8021e5e:	f8dc 2000 	ldr.w	r2, [ip]
 8021e62:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8021e66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021e6a:	b29b      	uxth	r3, r3
 8021e6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021e70:	4581      	cmp	r9, r0
 8021e72:	f84c 3b04 	str.w	r3, [ip], #4
 8021e76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8021e7a:	d2db      	bcs.n	8021e34 <quorem+0x44>
 8021e7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8021e80:	b92b      	cbnz	r3, 8021e8e <quorem+0x9e>
 8021e82:	9b01      	ldr	r3, [sp, #4]
 8021e84:	3b04      	subs	r3, #4
 8021e86:	429d      	cmp	r5, r3
 8021e88:	461a      	mov	r2, r3
 8021e8a:	d32e      	bcc.n	8021eea <quorem+0xfa>
 8021e8c:	613c      	str	r4, [r7, #16]
 8021e8e:	4638      	mov	r0, r7
 8021e90:	f001 fe4c 	bl	8023b2c <__mcmp>
 8021e94:	2800      	cmp	r0, #0
 8021e96:	db24      	blt.n	8021ee2 <quorem+0xf2>
 8021e98:	3601      	adds	r6, #1
 8021e9a:	4628      	mov	r0, r5
 8021e9c:	f04f 0c00 	mov.w	ip, #0
 8021ea0:	f858 2b04 	ldr.w	r2, [r8], #4
 8021ea4:	f8d0 e000 	ldr.w	lr, [r0]
 8021ea8:	b293      	uxth	r3, r2
 8021eaa:	ebac 0303 	sub.w	r3, ip, r3
 8021eae:	0c12      	lsrs	r2, r2, #16
 8021eb0:	fa13 f38e 	uxtah	r3, r3, lr
 8021eb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8021eb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021ebc:	b29b      	uxth	r3, r3
 8021ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021ec2:	45c1      	cmp	r9, r8
 8021ec4:	f840 3b04 	str.w	r3, [r0], #4
 8021ec8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8021ecc:	d2e8      	bcs.n	8021ea0 <quorem+0xb0>
 8021ece:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021ed2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021ed6:	b922      	cbnz	r2, 8021ee2 <quorem+0xf2>
 8021ed8:	3b04      	subs	r3, #4
 8021eda:	429d      	cmp	r5, r3
 8021edc:	461a      	mov	r2, r3
 8021ede:	d30a      	bcc.n	8021ef6 <quorem+0x106>
 8021ee0:	613c      	str	r4, [r7, #16]
 8021ee2:	4630      	mov	r0, r6
 8021ee4:	b003      	add	sp, #12
 8021ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eea:	6812      	ldr	r2, [r2, #0]
 8021eec:	3b04      	subs	r3, #4
 8021eee:	2a00      	cmp	r2, #0
 8021ef0:	d1cc      	bne.n	8021e8c <quorem+0x9c>
 8021ef2:	3c01      	subs	r4, #1
 8021ef4:	e7c7      	b.n	8021e86 <quorem+0x96>
 8021ef6:	6812      	ldr	r2, [r2, #0]
 8021ef8:	3b04      	subs	r3, #4
 8021efa:	2a00      	cmp	r2, #0
 8021efc:	d1f0      	bne.n	8021ee0 <quorem+0xf0>
 8021efe:	3c01      	subs	r4, #1
 8021f00:	e7eb      	b.n	8021eda <quorem+0xea>
 8021f02:	2000      	movs	r0, #0
 8021f04:	e7ee      	b.n	8021ee4 <quorem+0xf4>
	...

08021f08 <_dtoa_r>:
 8021f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f0c:	ec59 8b10 	vmov	r8, r9, d0
 8021f10:	b095      	sub	sp, #84	; 0x54
 8021f12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8021f14:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8021f16:	9107      	str	r1, [sp, #28]
 8021f18:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8021f1c:	4606      	mov	r6, r0
 8021f1e:	9209      	str	r2, [sp, #36]	; 0x24
 8021f20:	9310      	str	r3, [sp, #64]	; 0x40
 8021f22:	b975      	cbnz	r5, 8021f42 <_dtoa_r+0x3a>
 8021f24:	2010      	movs	r0, #16
 8021f26:	f7fd ffb9 	bl	801fe9c <malloc>
 8021f2a:	4602      	mov	r2, r0
 8021f2c:	6270      	str	r0, [r6, #36]	; 0x24
 8021f2e:	b920      	cbnz	r0, 8021f3a <_dtoa_r+0x32>
 8021f30:	4bab      	ldr	r3, [pc, #684]	; (80221e0 <_dtoa_r+0x2d8>)
 8021f32:	21ea      	movs	r1, #234	; 0xea
 8021f34:	48ab      	ldr	r0, [pc, #684]	; (80221e4 <_dtoa_r+0x2dc>)
 8021f36:	f7ff ff3d 	bl	8021db4 <__assert_func>
 8021f3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8021f3e:	6005      	str	r5, [r0, #0]
 8021f40:	60c5      	str	r5, [r0, #12]
 8021f42:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8021f44:	6819      	ldr	r1, [r3, #0]
 8021f46:	b151      	cbz	r1, 8021f5e <_dtoa_r+0x56>
 8021f48:	685a      	ldr	r2, [r3, #4]
 8021f4a:	604a      	str	r2, [r1, #4]
 8021f4c:	2301      	movs	r3, #1
 8021f4e:	4093      	lsls	r3, r2
 8021f50:	608b      	str	r3, [r1, #8]
 8021f52:	4630      	mov	r0, r6
 8021f54:	f001 fb62 	bl	802361c <_Bfree>
 8021f58:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8021f5a:	2200      	movs	r2, #0
 8021f5c:	601a      	str	r2, [r3, #0]
 8021f5e:	f1b9 0300 	subs.w	r3, r9, #0
 8021f62:	bfbb      	ittet	lt
 8021f64:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8021f68:	9303      	strlt	r3, [sp, #12]
 8021f6a:	2300      	movge	r3, #0
 8021f6c:	2201      	movlt	r2, #1
 8021f6e:	bfac      	ite	ge
 8021f70:	6023      	strge	r3, [r4, #0]
 8021f72:	6022      	strlt	r2, [r4, #0]
 8021f74:	4b9c      	ldr	r3, [pc, #624]	; (80221e8 <_dtoa_r+0x2e0>)
 8021f76:	9c03      	ldr	r4, [sp, #12]
 8021f78:	43a3      	bics	r3, r4
 8021f7a:	d11a      	bne.n	8021fb2 <_dtoa_r+0xaa>
 8021f7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021f7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8021f82:	6013      	str	r3, [r2, #0]
 8021f84:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8021f88:	ea53 0308 	orrs.w	r3, r3, r8
 8021f8c:	f000 8512 	beq.w	80229b4 <_dtoa_r+0xaac>
 8021f90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021f92:	b953      	cbnz	r3, 8021faa <_dtoa_r+0xa2>
 8021f94:	4b95      	ldr	r3, [pc, #596]	; (80221ec <_dtoa_r+0x2e4>)
 8021f96:	e01f      	b.n	8021fd8 <_dtoa_r+0xd0>
 8021f98:	4b95      	ldr	r3, [pc, #596]	; (80221f0 <_dtoa_r+0x2e8>)
 8021f9a:	9300      	str	r3, [sp, #0]
 8021f9c:	3308      	adds	r3, #8
 8021f9e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021fa0:	6013      	str	r3, [r2, #0]
 8021fa2:	9800      	ldr	r0, [sp, #0]
 8021fa4:	b015      	add	sp, #84	; 0x54
 8021fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021faa:	4b90      	ldr	r3, [pc, #576]	; (80221ec <_dtoa_r+0x2e4>)
 8021fac:	9300      	str	r3, [sp, #0]
 8021fae:	3303      	adds	r3, #3
 8021fb0:	e7f5      	b.n	8021f9e <_dtoa_r+0x96>
 8021fb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021fb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021fbe:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8021fc2:	d10b      	bne.n	8021fdc <_dtoa_r+0xd4>
 8021fc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021fc6:	2301      	movs	r3, #1
 8021fc8:	6013      	str	r3, [r2, #0]
 8021fca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021fcc:	2b00      	cmp	r3, #0
 8021fce:	f000 84ee 	beq.w	80229ae <_dtoa_r+0xaa6>
 8021fd2:	4888      	ldr	r0, [pc, #544]	; (80221f4 <_dtoa_r+0x2ec>)
 8021fd4:	6018      	str	r0, [r3, #0]
 8021fd6:	1e43      	subs	r3, r0, #1
 8021fd8:	9300      	str	r3, [sp, #0]
 8021fda:	e7e2      	b.n	8021fa2 <_dtoa_r+0x9a>
 8021fdc:	a913      	add	r1, sp, #76	; 0x4c
 8021fde:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8021fe2:	aa12      	add	r2, sp, #72	; 0x48
 8021fe4:	4630      	mov	r0, r6
 8021fe6:	f001 fec1 	bl	8023d6c <__d2b>
 8021fea:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8021fee:	4605      	mov	r5, r0
 8021ff0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021ff2:	2900      	cmp	r1, #0
 8021ff4:	d047      	beq.n	8022086 <_dtoa_r+0x17e>
 8021ff6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021ff8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8021ffc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8022000:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8022004:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022008:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802200c:	2400      	movs	r4, #0
 802200e:	ec43 2b16 	vmov	d6, r2, r3
 8022012:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8022016:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80221c8 <_dtoa_r+0x2c0>
 802201a:	ee36 7b47 	vsub.f64	d7, d6, d7
 802201e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80221d0 <_dtoa_r+0x2c8>
 8022022:	eea7 6b05 	vfma.f64	d6, d7, d5
 8022026:	eeb0 7b46 	vmov.f64	d7, d6
 802202a:	ee06 1a90 	vmov	s13, r1
 802202e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8022032:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80221d8 <_dtoa_r+0x2d0>
 8022036:	eea5 7b06 	vfma.f64	d7, d5, d6
 802203a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802203e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8022042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022046:	ee16 ba90 	vmov	fp, s13
 802204a:	9411      	str	r4, [sp, #68]	; 0x44
 802204c:	d508      	bpl.n	8022060 <_dtoa_r+0x158>
 802204e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8022052:	eeb4 6b47 	vcmp.f64	d6, d7
 8022056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802205a:	bf18      	it	ne
 802205c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8022060:	f1bb 0f16 	cmp.w	fp, #22
 8022064:	d832      	bhi.n	80220cc <_dtoa_r+0x1c4>
 8022066:	4b64      	ldr	r3, [pc, #400]	; (80221f8 <_dtoa_r+0x2f0>)
 8022068:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802206c:	ed93 7b00 	vldr	d7, [r3]
 8022070:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8022074:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802207c:	d501      	bpl.n	8022082 <_dtoa_r+0x17a>
 802207e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8022082:	2300      	movs	r3, #0
 8022084:	e023      	b.n	80220ce <_dtoa_r+0x1c6>
 8022086:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8022088:	4401      	add	r1, r0
 802208a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 802208e:	2b20      	cmp	r3, #32
 8022090:	bfc3      	ittte	gt
 8022092:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8022096:	fa04 f303 	lslgt.w	r3, r4, r3
 802209a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 802209e:	f1c3 0320 	rsble	r3, r3, #32
 80220a2:	bfc6      	itte	gt
 80220a4:	fa28 f804 	lsrgt.w	r8, r8, r4
 80220a8:	ea43 0308 	orrgt.w	r3, r3, r8
 80220ac:	fa08 f303 	lslle.w	r3, r8, r3
 80220b0:	ee07 3a90 	vmov	s15, r3
 80220b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80220b8:	3901      	subs	r1, #1
 80220ba:	ed8d 7b00 	vstr	d7, [sp]
 80220be:	9c01      	ldr	r4, [sp, #4]
 80220c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80220c4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80220c8:	2401      	movs	r4, #1
 80220ca:	e7a0      	b.n	802200e <_dtoa_r+0x106>
 80220cc:	2301      	movs	r3, #1
 80220ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80220d0:	1a43      	subs	r3, r0, r1
 80220d2:	1e5a      	subs	r2, r3, #1
 80220d4:	bf45      	ittet	mi
 80220d6:	f1c3 0301 	rsbmi	r3, r3, #1
 80220da:	9305      	strmi	r3, [sp, #20]
 80220dc:	2300      	movpl	r3, #0
 80220de:	2300      	movmi	r3, #0
 80220e0:	9206      	str	r2, [sp, #24]
 80220e2:	bf54      	ite	pl
 80220e4:	9305      	strpl	r3, [sp, #20]
 80220e6:	9306      	strmi	r3, [sp, #24]
 80220e8:	f1bb 0f00 	cmp.w	fp, #0
 80220ec:	db18      	blt.n	8022120 <_dtoa_r+0x218>
 80220ee:	9b06      	ldr	r3, [sp, #24]
 80220f0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80220f4:	445b      	add	r3, fp
 80220f6:	9306      	str	r3, [sp, #24]
 80220f8:	2300      	movs	r3, #0
 80220fa:	9a07      	ldr	r2, [sp, #28]
 80220fc:	2a09      	cmp	r2, #9
 80220fe:	d849      	bhi.n	8022194 <_dtoa_r+0x28c>
 8022100:	2a05      	cmp	r2, #5
 8022102:	bfc4      	itt	gt
 8022104:	3a04      	subgt	r2, #4
 8022106:	9207      	strgt	r2, [sp, #28]
 8022108:	9a07      	ldr	r2, [sp, #28]
 802210a:	f1a2 0202 	sub.w	r2, r2, #2
 802210e:	bfcc      	ite	gt
 8022110:	2400      	movgt	r4, #0
 8022112:	2401      	movle	r4, #1
 8022114:	2a03      	cmp	r2, #3
 8022116:	d848      	bhi.n	80221aa <_dtoa_r+0x2a2>
 8022118:	e8df f002 	tbb	[pc, r2]
 802211c:	3a2c2e0b 	.word	0x3a2c2e0b
 8022120:	9b05      	ldr	r3, [sp, #20]
 8022122:	2200      	movs	r2, #0
 8022124:	eba3 030b 	sub.w	r3, r3, fp
 8022128:	9305      	str	r3, [sp, #20]
 802212a:	920e      	str	r2, [sp, #56]	; 0x38
 802212c:	f1cb 0300 	rsb	r3, fp, #0
 8022130:	e7e3      	b.n	80220fa <_dtoa_r+0x1f2>
 8022132:	2200      	movs	r2, #0
 8022134:	9208      	str	r2, [sp, #32]
 8022136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022138:	2a00      	cmp	r2, #0
 802213a:	dc39      	bgt.n	80221b0 <_dtoa_r+0x2a8>
 802213c:	f04f 0a01 	mov.w	sl, #1
 8022140:	46d1      	mov	r9, sl
 8022142:	4652      	mov	r2, sl
 8022144:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8022148:	6a77      	ldr	r7, [r6, #36]	; 0x24
 802214a:	2100      	movs	r1, #0
 802214c:	6079      	str	r1, [r7, #4]
 802214e:	2004      	movs	r0, #4
 8022150:	f100 0c14 	add.w	ip, r0, #20
 8022154:	4594      	cmp	ip, r2
 8022156:	6879      	ldr	r1, [r7, #4]
 8022158:	d92f      	bls.n	80221ba <_dtoa_r+0x2b2>
 802215a:	4630      	mov	r0, r6
 802215c:	930c      	str	r3, [sp, #48]	; 0x30
 802215e:	f001 fa1d 	bl	802359c <_Balloc>
 8022162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022164:	9000      	str	r0, [sp, #0]
 8022166:	4602      	mov	r2, r0
 8022168:	2800      	cmp	r0, #0
 802216a:	d149      	bne.n	8022200 <_dtoa_r+0x2f8>
 802216c:	4b23      	ldr	r3, [pc, #140]	; (80221fc <_dtoa_r+0x2f4>)
 802216e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8022172:	e6df      	b.n	8021f34 <_dtoa_r+0x2c>
 8022174:	2201      	movs	r2, #1
 8022176:	e7dd      	b.n	8022134 <_dtoa_r+0x22c>
 8022178:	2200      	movs	r2, #0
 802217a:	9208      	str	r2, [sp, #32]
 802217c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802217e:	eb0b 0a02 	add.w	sl, fp, r2
 8022182:	f10a 0901 	add.w	r9, sl, #1
 8022186:	464a      	mov	r2, r9
 8022188:	2a01      	cmp	r2, #1
 802218a:	bfb8      	it	lt
 802218c:	2201      	movlt	r2, #1
 802218e:	e7db      	b.n	8022148 <_dtoa_r+0x240>
 8022190:	2201      	movs	r2, #1
 8022192:	e7f2      	b.n	802217a <_dtoa_r+0x272>
 8022194:	2401      	movs	r4, #1
 8022196:	2200      	movs	r2, #0
 8022198:	e9cd 2407 	strd	r2, r4, [sp, #28]
 802219c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80221a0:	2100      	movs	r1, #0
 80221a2:	46d1      	mov	r9, sl
 80221a4:	2212      	movs	r2, #18
 80221a6:	9109      	str	r1, [sp, #36]	; 0x24
 80221a8:	e7ce      	b.n	8022148 <_dtoa_r+0x240>
 80221aa:	2201      	movs	r2, #1
 80221ac:	9208      	str	r2, [sp, #32]
 80221ae:	e7f5      	b.n	802219c <_dtoa_r+0x294>
 80221b0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80221b4:	46d1      	mov	r9, sl
 80221b6:	4652      	mov	r2, sl
 80221b8:	e7c6      	b.n	8022148 <_dtoa_r+0x240>
 80221ba:	3101      	adds	r1, #1
 80221bc:	6079      	str	r1, [r7, #4]
 80221be:	0040      	lsls	r0, r0, #1
 80221c0:	e7c6      	b.n	8022150 <_dtoa_r+0x248>
 80221c2:	bf00      	nop
 80221c4:	f3af 8000 	nop.w
 80221c8:	636f4361 	.word	0x636f4361
 80221cc:	3fd287a7 	.word	0x3fd287a7
 80221d0:	8b60c8b3 	.word	0x8b60c8b3
 80221d4:	3fc68a28 	.word	0x3fc68a28
 80221d8:	509f79fb 	.word	0x509f79fb
 80221dc:	3fd34413 	.word	0x3fd34413
 80221e0:	0802952d 	.word	0x0802952d
 80221e4:	08029641 	.word	0x08029641
 80221e8:	7ff00000 	.word	0x7ff00000
 80221ec:	0802963d 	.word	0x0802963d
 80221f0:	08029634 	.word	0x08029634
 80221f4:	08029505 	.word	0x08029505
 80221f8:	08029820 	.word	0x08029820
 80221fc:	080296a0 	.word	0x080296a0
 8022200:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8022202:	9900      	ldr	r1, [sp, #0]
 8022204:	6011      	str	r1, [r2, #0]
 8022206:	f1b9 0f0e 	cmp.w	r9, #14
 802220a:	d872      	bhi.n	80222f2 <_dtoa_r+0x3ea>
 802220c:	2c00      	cmp	r4, #0
 802220e:	d070      	beq.n	80222f2 <_dtoa_r+0x3ea>
 8022210:	f1bb 0f00 	cmp.w	fp, #0
 8022214:	f340 80a6 	ble.w	8022364 <_dtoa_r+0x45c>
 8022218:	49ca      	ldr	r1, [pc, #808]	; (8022544 <_dtoa_r+0x63c>)
 802221a:	f00b 020f 	and.w	r2, fp, #15
 802221e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8022222:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8022226:	ed92 7b00 	vldr	d7, [r2]
 802222a:	ea4f 112b 	mov.w	r1, fp, asr #4
 802222e:	f000 808d 	beq.w	802234c <_dtoa_r+0x444>
 8022232:	4ac5      	ldr	r2, [pc, #788]	; (8022548 <_dtoa_r+0x640>)
 8022234:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8022238:	ed92 6b08 	vldr	d6, [r2, #32]
 802223c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8022240:	ed8d 6b02 	vstr	d6, [sp, #8]
 8022244:	f001 010f 	and.w	r1, r1, #15
 8022248:	2203      	movs	r2, #3
 802224a:	48bf      	ldr	r0, [pc, #764]	; (8022548 <_dtoa_r+0x640>)
 802224c:	2900      	cmp	r1, #0
 802224e:	d17f      	bne.n	8022350 <_dtoa_r+0x448>
 8022250:	ed9d 6b02 	vldr	d6, [sp, #8]
 8022254:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8022258:	ed8d 7b02 	vstr	d7, [sp, #8]
 802225c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802225e:	2900      	cmp	r1, #0
 8022260:	f000 80b2 	beq.w	80223c8 <_dtoa_r+0x4c0>
 8022264:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8022268:	ed9d 7b02 	vldr	d7, [sp, #8]
 802226c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8022270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022274:	f140 80a8 	bpl.w	80223c8 <_dtoa_r+0x4c0>
 8022278:	f1b9 0f00 	cmp.w	r9, #0
 802227c:	f000 80a4 	beq.w	80223c8 <_dtoa_r+0x4c0>
 8022280:	f1ba 0f00 	cmp.w	sl, #0
 8022284:	dd31      	ble.n	80222ea <_dtoa_r+0x3e2>
 8022286:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802228a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802228e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022292:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8022296:	3201      	adds	r2, #1
 8022298:	4650      	mov	r0, sl
 802229a:	ed9d 6b02 	vldr	d6, [sp, #8]
 802229e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80222a2:	ee07 2a90 	vmov	s15, r2
 80222a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80222aa:	eea7 5b06 	vfma.f64	d5, d7, d6
 80222ae:	ed8d 5b02 	vstr	d5, [sp, #8]
 80222b2:	9c03      	ldr	r4, [sp, #12]
 80222b4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80222b8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80222bc:	2800      	cmp	r0, #0
 80222be:	f040 8086 	bne.w	80223ce <_dtoa_r+0x4c6>
 80222c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80222c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80222ca:	ec42 1b17 	vmov	d7, r1, r2
 80222ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80222d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222d6:	f300 8272 	bgt.w	80227be <_dtoa_r+0x8b6>
 80222da:	eeb1 7b47 	vneg.f64	d7, d7
 80222de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80222e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222e6:	f100 8267 	bmi.w	80227b8 <_dtoa_r+0x8b0>
 80222ea:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80222ee:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80222f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80222f4:	2a00      	cmp	r2, #0
 80222f6:	f2c0 8129 	blt.w	802254c <_dtoa_r+0x644>
 80222fa:	f1bb 0f0e 	cmp.w	fp, #14
 80222fe:	f300 8125 	bgt.w	802254c <_dtoa_r+0x644>
 8022302:	4b90      	ldr	r3, [pc, #576]	; (8022544 <_dtoa_r+0x63c>)
 8022304:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8022308:	ed93 6b00 	vldr	d6, [r3]
 802230c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802230e:	2b00      	cmp	r3, #0
 8022310:	f280 80c3 	bge.w	802249a <_dtoa_r+0x592>
 8022314:	f1b9 0f00 	cmp.w	r9, #0
 8022318:	f300 80bf 	bgt.w	802249a <_dtoa_r+0x592>
 802231c:	f040 824c 	bne.w	80227b8 <_dtoa_r+0x8b0>
 8022320:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8022324:	ee26 6b07 	vmul.f64	d6, d6, d7
 8022328:	ed9d 7b02 	vldr	d7, [sp, #8]
 802232c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022334:	464c      	mov	r4, r9
 8022336:	464f      	mov	r7, r9
 8022338:	f280 8222 	bge.w	8022780 <_dtoa_r+0x878>
 802233c:	f8dd 8000 	ldr.w	r8, [sp]
 8022340:	2331      	movs	r3, #49	; 0x31
 8022342:	f808 3b01 	strb.w	r3, [r8], #1
 8022346:	f10b 0b01 	add.w	fp, fp, #1
 802234a:	e21e      	b.n	802278a <_dtoa_r+0x882>
 802234c:	2202      	movs	r2, #2
 802234e:	e77c      	b.n	802224a <_dtoa_r+0x342>
 8022350:	07cc      	lsls	r4, r1, #31
 8022352:	d504      	bpl.n	802235e <_dtoa_r+0x456>
 8022354:	ed90 6b00 	vldr	d6, [r0]
 8022358:	3201      	adds	r2, #1
 802235a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802235e:	1049      	asrs	r1, r1, #1
 8022360:	3008      	adds	r0, #8
 8022362:	e773      	b.n	802224c <_dtoa_r+0x344>
 8022364:	d02e      	beq.n	80223c4 <_dtoa_r+0x4bc>
 8022366:	f1cb 0100 	rsb	r1, fp, #0
 802236a:	4a76      	ldr	r2, [pc, #472]	; (8022544 <_dtoa_r+0x63c>)
 802236c:	f001 000f 	and.w	r0, r1, #15
 8022370:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8022374:	ed92 7b00 	vldr	d7, [r2]
 8022378:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 802237c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022380:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8022384:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8022388:	e9cd 7802 	strd	r7, r8, [sp, #8]
 802238c:	486e      	ldr	r0, [pc, #440]	; (8022548 <_dtoa_r+0x640>)
 802238e:	1109      	asrs	r1, r1, #4
 8022390:	2400      	movs	r4, #0
 8022392:	2202      	movs	r2, #2
 8022394:	b939      	cbnz	r1, 80223a6 <_dtoa_r+0x49e>
 8022396:	2c00      	cmp	r4, #0
 8022398:	f43f af60 	beq.w	802225c <_dtoa_r+0x354>
 802239c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80223a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80223a4:	e75a      	b.n	802225c <_dtoa_r+0x354>
 80223a6:	07cf      	lsls	r7, r1, #31
 80223a8:	d509      	bpl.n	80223be <_dtoa_r+0x4b6>
 80223aa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80223ae:	ed90 7b00 	vldr	d7, [r0]
 80223b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80223b6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80223ba:	3201      	adds	r2, #1
 80223bc:	2401      	movs	r4, #1
 80223be:	1049      	asrs	r1, r1, #1
 80223c0:	3008      	adds	r0, #8
 80223c2:	e7e7      	b.n	8022394 <_dtoa_r+0x48c>
 80223c4:	2202      	movs	r2, #2
 80223c6:	e749      	b.n	802225c <_dtoa_r+0x354>
 80223c8:	465f      	mov	r7, fp
 80223ca:	4648      	mov	r0, r9
 80223cc:	e765      	b.n	802229a <_dtoa_r+0x392>
 80223ce:	ec42 1b17 	vmov	d7, r1, r2
 80223d2:	4a5c      	ldr	r2, [pc, #368]	; (8022544 <_dtoa_r+0x63c>)
 80223d4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80223d8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80223dc:	9a00      	ldr	r2, [sp, #0]
 80223de:	1814      	adds	r4, r2, r0
 80223e0:	9a08      	ldr	r2, [sp, #32]
 80223e2:	b352      	cbz	r2, 802243a <_dtoa_r+0x532>
 80223e4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80223e8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80223ec:	f8dd 8000 	ldr.w	r8, [sp]
 80223f0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80223f4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80223f8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80223fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8022400:	ee14 2a90 	vmov	r2, s9
 8022404:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8022408:	3230      	adds	r2, #48	; 0x30
 802240a:	ee36 6b45 	vsub.f64	d6, d6, d5
 802240e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022416:	f808 2b01 	strb.w	r2, [r8], #1
 802241a:	d439      	bmi.n	8022490 <_dtoa_r+0x588>
 802241c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8022420:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8022424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022428:	d472      	bmi.n	8022510 <_dtoa_r+0x608>
 802242a:	45a0      	cmp	r8, r4
 802242c:	f43f af5d 	beq.w	80222ea <_dtoa_r+0x3e2>
 8022430:	ee27 7b03 	vmul.f64	d7, d7, d3
 8022434:	ee26 6b03 	vmul.f64	d6, d6, d3
 8022438:	e7e0      	b.n	80223fc <_dtoa_r+0x4f4>
 802243a:	f8dd 8000 	ldr.w	r8, [sp]
 802243e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022442:	4621      	mov	r1, r4
 8022444:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8022448:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802244c:	ee14 2a90 	vmov	r2, s9
 8022450:	3230      	adds	r2, #48	; 0x30
 8022452:	f808 2b01 	strb.w	r2, [r8], #1
 8022456:	45a0      	cmp	r8, r4
 8022458:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802245c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8022460:	d118      	bne.n	8022494 <_dtoa_r+0x58c>
 8022462:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8022466:	ee37 4b05 	vadd.f64	d4, d7, d5
 802246a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802246e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022472:	dc4d      	bgt.n	8022510 <_dtoa_r+0x608>
 8022474:	ee35 7b47 	vsub.f64	d7, d5, d7
 8022478:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022480:	f57f af33 	bpl.w	80222ea <_dtoa_r+0x3e2>
 8022484:	4688      	mov	r8, r1
 8022486:	3901      	subs	r1, #1
 8022488:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802248c:	2b30      	cmp	r3, #48	; 0x30
 802248e:	d0f9      	beq.n	8022484 <_dtoa_r+0x57c>
 8022490:	46bb      	mov	fp, r7
 8022492:	e02a      	b.n	80224ea <_dtoa_r+0x5e2>
 8022494:	ee26 6b03 	vmul.f64	d6, d6, d3
 8022498:	e7d6      	b.n	8022448 <_dtoa_r+0x540>
 802249a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802249e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80224a2:	f8dd 8000 	ldr.w	r8, [sp]
 80224a6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80224aa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80224ae:	ee15 3a10 	vmov	r3, s10
 80224b2:	3330      	adds	r3, #48	; 0x30
 80224b4:	f808 3b01 	strb.w	r3, [r8], #1
 80224b8:	9b00      	ldr	r3, [sp, #0]
 80224ba:	eba8 0303 	sub.w	r3, r8, r3
 80224be:	4599      	cmp	r9, r3
 80224c0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80224c4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80224c8:	d133      	bne.n	8022532 <_dtoa_r+0x62a>
 80224ca:	ee37 7b07 	vadd.f64	d7, d7, d7
 80224ce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80224d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224d6:	dc1a      	bgt.n	802250e <_dtoa_r+0x606>
 80224d8:	eeb4 7b46 	vcmp.f64	d7, d6
 80224dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224e0:	d103      	bne.n	80224ea <_dtoa_r+0x5e2>
 80224e2:	ee15 3a10 	vmov	r3, s10
 80224e6:	07d9      	lsls	r1, r3, #31
 80224e8:	d411      	bmi.n	802250e <_dtoa_r+0x606>
 80224ea:	4629      	mov	r1, r5
 80224ec:	4630      	mov	r0, r6
 80224ee:	f001 f895 	bl	802361c <_Bfree>
 80224f2:	2300      	movs	r3, #0
 80224f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80224f6:	f888 3000 	strb.w	r3, [r8]
 80224fa:	f10b 0301 	add.w	r3, fp, #1
 80224fe:	6013      	str	r3, [r2, #0]
 8022500:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022502:	2b00      	cmp	r3, #0
 8022504:	f43f ad4d 	beq.w	8021fa2 <_dtoa_r+0x9a>
 8022508:	f8c3 8000 	str.w	r8, [r3]
 802250c:	e549      	b.n	8021fa2 <_dtoa_r+0x9a>
 802250e:	465f      	mov	r7, fp
 8022510:	4643      	mov	r3, r8
 8022512:	4698      	mov	r8, r3
 8022514:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022518:	2a39      	cmp	r2, #57	; 0x39
 802251a:	d106      	bne.n	802252a <_dtoa_r+0x622>
 802251c:	9a00      	ldr	r2, [sp, #0]
 802251e:	429a      	cmp	r2, r3
 8022520:	d1f7      	bne.n	8022512 <_dtoa_r+0x60a>
 8022522:	9900      	ldr	r1, [sp, #0]
 8022524:	2230      	movs	r2, #48	; 0x30
 8022526:	3701      	adds	r7, #1
 8022528:	700a      	strb	r2, [r1, #0]
 802252a:	781a      	ldrb	r2, [r3, #0]
 802252c:	3201      	adds	r2, #1
 802252e:	701a      	strb	r2, [r3, #0]
 8022530:	e7ae      	b.n	8022490 <_dtoa_r+0x588>
 8022532:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022536:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802253a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802253e:	d1b2      	bne.n	80224a6 <_dtoa_r+0x59e>
 8022540:	e7d3      	b.n	80224ea <_dtoa_r+0x5e2>
 8022542:	bf00      	nop
 8022544:	08029820 	.word	0x08029820
 8022548:	080297f8 	.word	0x080297f8
 802254c:	9908      	ldr	r1, [sp, #32]
 802254e:	2900      	cmp	r1, #0
 8022550:	f000 80d1 	beq.w	80226f6 <_dtoa_r+0x7ee>
 8022554:	9907      	ldr	r1, [sp, #28]
 8022556:	2901      	cmp	r1, #1
 8022558:	f300 80b4 	bgt.w	80226c4 <_dtoa_r+0x7bc>
 802255c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802255e:	2900      	cmp	r1, #0
 8022560:	f000 80ac 	beq.w	80226bc <_dtoa_r+0x7b4>
 8022564:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8022568:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802256c:	461c      	mov	r4, r3
 802256e:	930a      	str	r3, [sp, #40]	; 0x28
 8022570:	9b05      	ldr	r3, [sp, #20]
 8022572:	4413      	add	r3, r2
 8022574:	9305      	str	r3, [sp, #20]
 8022576:	9b06      	ldr	r3, [sp, #24]
 8022578:	2101      	movs	r1, #1
 802257a:	4413      	add	r3, r2
 802257c:	4630      	mov	r0, r6
 802257e:	9306      	str	r3, [sp, #24]
 8022580:	f001 f952 	bl	8023828 <__i2b>
 8022584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022586:	4607      	mov	r7, r0
 8022588:	f1b8 0f00 	cmp.w	r8, #0
 802258c:	dd0d      	ble.n	80225aa <_dtoa_r+0x6a2>
 802258e:	9a06      	ldr	r2, [sp, #24]
 8022590:	2a00      	cmp	r2, #0
 8022592:	dd0a      	ble.n	80225aa <_dtoa_r+0x6a2>
 8022594:	4542      	cmp	r2, r8
 8022596:	9905      	ldr	r1, [sp, #20]
 8022598:	bfa8      	it	ge
 802259a:	4642      	movge	r2, r8
 802259c:	1a89      	subs	r1, r1, r2
 802259e:	9105      	str	r1, [sp, #20]
 80225a0:	9906      	ldr	r1, [sp, #24]
 80225a2:	eba8 0802 	sub.w	r8, r8, r2
 80225a6:	1a8a      	subs	r2, r1, r2
 80225a8:	9206      	str	r2, [sp, #24]
 80225aa:	b303      	cbz	r3, 80225ee <_dtoa_r+0x6e6>
 80225ac:	9a08      	ldr	r2, [sp, #32]
 80225ae:	2a00      	cmp	r2, #0
 80225b0:	f000 80a6 	beq.w	8022700 <_dtoa_r+0x7f8>
 80225b4:	2c00      	cmp	r4, #0
 80225b6:	dd13      	ble.n	80225e0 <_dtoa_r+0x6d8>
 80225b8:	4639      	mov	r1, r7
 80225ba:	4622      	mov	r2, r4
 80225bc:	4630      	mov	r0, r6
 80225be:	930c      	str	r3, [sp, #48]	; 0x30
 80225c0:	f001 f9ee 	bl	80239a0 <__pow5mult>
 80225c4:	462a      	mov	r2, r5
 80225c6:	4601      	mov	r1, r0
 80225c8:	4607      	mov	r7, r0
 80225ca:	4630      	mov	r0, r6
 80225cc:	f001 f942 	bl	8023854 <__multiply>
 80225d0:	4629      	mov	r1, r5
 80225d2:	900a      	str	r0, [sp, #40]	; 0x28
 80225d4:	4630      	mov	r0, r6
 80225d6:	f001 f821 	bl	802361c <_Bfree>
 80225da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80225dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80225de:	4615      	mov	r5, r2
 80225e0:	1b1a      	subs	r2, r3, r4
 80225e2:	d004      	beq.n	80225ee <_dtoa_r+0x6e6>
 80225e4:	4629      	mov	r1, r5
 80225e6:	4630      	mov	r0, r6
 80225e8:	f001 f9da 	bl	80239a0 <__pow5mult>
 80225ec:	4605      	mov	r5, r0
 80225ee:	2101      	movs	r1, #1
 80225f0:	4630      	mov	r0, r6
 80225f2:	f001 f919 	bl	8023828 <__i2b>
 80225f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80225f8:	2b00      	cmp	r3, #0
 80225fa:	4604      	mov	r4, r0
 80225fc:	f340 8082 	ble.w	8022704 <_dtoa_r+0x7fc>
 8022600:	461a      	mov	r2, r3
 8022602:	4601      	mov	r1, r0
 8022604:	4630      	mov	r0, r6
 8022606:	f001 f9cb 	bl	80239a0 <__pow5mult>
 802260a:	9b07      	ldr	r3, [sp, #28]
 802260c:	2b01      	cmp	r3, #1
 802260e:	4604      	mov	r4, r0
 8022610:	dd7b      	ble.n	802270a <_dtoa_r+0x802>
 8022612:	2300      	movs	r3, #0
 8022614:	930a      	str	r3, [sp, #40]	; 0x28
 8022616:	6922      	ldr	r2, [r4, #16]
 8022618:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802261c:	6910      	ldr	r0, [r2, #16]
 802261e:	f001 f8b3 	bl	8023788 <__hi0bits>
 8022622:	f1c0 0020 	rsb	r0, r0, #32
 8022626:	9b06      	ldr	r3, [sp, #24]
 8022628:	4418      	add	r0, r3
 802262a:	f010 001f 	ands.w	r0, r0, #31
 802262e:	f000 808d 	beq.w	802274c <_dtoa_r+0x844>
 8022632:	f1c0 0220 	rsb	r2, r0, #32
 8022636:	2a04      	cmp	r2, #4
 8022638:	f340 8086 	ble.w	8022748 <_dtoa_r+0x840>
 802263c:	f1c0 001c 	rsb	r0, r0, #28
 8022640:	9b05      	ldr	r3, [sp, #20]
 8022642:	4403      	add	r3, r0
 8022644:	9305      	str	r3, [sp, #20]
 8022646:	9b06      	ldr	r3, [sp, #24]
 8022648:	4403      	add	r3, r0
 802264a:	4480      	add	r8, r0
 802264c:	9306      	str	r3, [sp, #24]
 802264e:	9b05      	ldr	r3, [sp, #20]
 8022650:	2b00      	cmp	r3, #0
 8022652:	dd05      	ble.n	8022660 <_dtoa_r+0x758>
 8022654:	4629      	mov	r1, r5
 8022656:	461a      	mov	r2, r3
 8022658:	4630      	mov	r0, r6
 802265a:	f001 f9fb 	bl	8023a54 <__lshift>
 802265e:	4605      	mov	r5, r0
 8022660:	9b06      	ldr	r3, [sp, #24]
 8022662:	2b00      	cmp	r3, #0
 8022664:	dd05      	ble.n	8022672 <_dtoa_r+0x76a>
 8022666:	4621      	mov	r1, r4
 8022668:	461a      	mov	r2, r3
 802266a:	4630      	mov	r0, r6
 802266c:	f001 f9f2 	bl	8023a54 <__lshift>
 8022670:	4604      	mov	r4, r0
 8022672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022674:	2b00      	cmp	r3, #0
 8022676:	d06b      	beq.n	8022750 <_dtoa_r+0x848>
 8022678:	4621      	mov	r1, r4
 802267a:	4628      	mov	r0, r5
 802267c:	f001 fa56 	bl	8023b2c <__mcmp>
 8022680:	2800      	cmp	r0, #0
 8022682:	da65      	bge.n	8022750 <_dtoa_r+0x848>
 8022684:	2300      	movs	r3, #0
 8022686:	4629      	mov	r1, r5
 8022688:	220a      	movs	r2, #10
 802268a:	4630      	mov	r0, r6
 802268c:	f000 ffe8 	bl	8023660 <__multadd>
 8022690:	9b08      	ldr	r3, [sp, #32]
 8022692:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8022696:	4605      	mov	r5, r0
 8022698:	2b00      	cmp	r3, #0
 802269a:	f000 8192 	beq.w	80229c2 <_dtoa_r+0xaba>
 802269e:	4639      	mov	r1, r7
 80226a0:	2300      	movs	r3, #0
 80226a2:	220a      	movs	r2, #10
 80226a4:	4630      	mov	r0, r6
 80226a6:	f000 ffdb 	bl	8023660 <__multadd>
 80226aa:	f1ba 0f00 	cmp.w	sl, #0
 80226ae:	4607      	mov	r7, r0
 80226b0:	f300 808e 	bgt.w	80227d0 <_dtoa_r+0x8c8>
 80226b4:	9b07      	ldr	r3, [sp, #28]
 80226b6:	2b02      	cmp	r3, #2
 80226b8:	dc51      	bgt.n	802275e <_dtoa_r+0x856>
 80226ba:	e089      	b.n	80227d0 <_dtoa_r+0x8c8>
 80226bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80226be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80226c2:	e751      	b.n	8022568 <_dtoa_r+0x660>
 80226c4:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80226c8:	42a3      	cmp	r3, r4
 80226ca:	bfbf      	itttt	lt
 80226cc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80226ce:	1ae3      	sublt	r3, r4, r3
 80226d0:	18d2      	addlt	r2, r2, r3
 80226d2:	4613      	movlt	r3, r2
 80226d4:	bfb7      	itett	lt
 80226d6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80226d8:	1b1c      	subge	r4, r3, r4
 80226da:	4623      	movlt	r3, r4
 80226dc:	2400      	movlt	r4, #0
 80226de:	f1b9 0f00 	cmp.w	r9, #0
 80226e2:	bfb5      	itete	lt
 80226e4:	9a05      	ldrlt	r2, [sp, #20]
 80226e6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80226ea:	eba2 0809 	sublt.w	r8, r2, r9
 80226ee:	464a      	movge	r2, r9
 80226f0:	bfb8      	it	lt
 80226f2:	2200      	movlt	r2, #0
 80226f4:	e73b      	b.n	802256e <_dtoa_r+0x666>
 80226f6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80226fa:	9f08      	ldr	r7, [sp, #32]
 80226fc:	461c      	mov	r4, r3
 80226fe:	e743      	b.n	8022588 <_dtoa_r+0x680>
 8022700:	461a      	mov	r2, r3
 8022702:	e76f      	b.n	80225e4 <_dtoa_r+0x6dc>
 8022704:	9b07      	ldr	r3, [sp, #28]
 8022706:	2b01      	cmp	r3, #1
 8022708:	dc18      	bgt.n	802273c <_dtoa_r+0x834>
 802270a:	9b02      	ldr	r3, [sp, #8]
 802270c:	b9b3      	cbnz	r3, 802273c <_dtoa_r+0x834>
 802270e:	9b03      	ldr	r3, [sp, #12]
 8022710:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8022714:	b9a2      	cbnz	r2, 8022740 <_dtoa_r+0x838>
 8022716:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802271a:	0d12      	lsrs	r2, r2, #20
 802271c:	0512      	lsls	r2, r2, #20
 802271e:	b18a      	cbz	r2, 8022744 <_dtoa_r+0x83c>
 8022720:	9b05      	ldr	r3, [sp, #20]
 8022722:	3301      	adds	r3, #1
 8022724:	9305      	str	r3, [sp, #20]
 8022726:	9b06      	ldr	r3, [sp, #24]
 8022728:	3301      	adds	r3, #1
 802272a:	9306      	str	r3, [sp, #24]
 802272c:	2301      	movs	r3, #1
 802272e:	930a      	str	r3, [sp, #40]	; 0x28
 8022730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022732:	2b00      	cmp	r3, #0
 8022734:	f47f af6f 	bne.w	8022616 <_dtoa_r+0x70e>
 8022738:	2001      	movs	r0, #1
 802273a:	e774      	b.n	8022626 <_dtoa_r+0x71e>
 802273c:	2300      	movs	r3, #0
 802273e:	e7f6      	b.n	802272e <_dtoa_r+0x826>
 8022740:	9b02      	ldr	r3, [sp, #8]
 8022742:	e7f4      	b.n	802272e <_dtoa_r+0x826>
 8022744:	920a      	str	r2, [sp, #40]	; 0x28
 8022746:	e7f3      	b.n	8022730 <_dtoa_r+0x828>
 8022748:	d081      	beq.n	802264e <_dtoa_r+0x746>
 802274a:	4610      	mov	r0, r2
 802274c:	301c      	adds	r0, #28
 802274e:	e777      	b.n	8022640 <_dtoa_r+0x738>
 8022750:	f1b9 0f00 	cmp.w	r9, #0
 8022754:	dc37      	bgt.n	80227c6 <_dtoa_r+0x8be>
 8022756:	9b07      	ldr	r3, [sp, #28]
 8022758:	2b02      	cmp	r3, #2
 802275a:	dd34      	ble.n	80227c6 <_dtoa_r+0x8be>
 802275c:	46ca      	mov	sl, r9
 802275e:	f1ba 0f00 	cmp.w	sl, #0
 8022762:	d10d      	bne.n	8022780 <_dtoa_r+0x878>
 8022764:	4621      	mov	r1, r4
 8022766:	4653      	mov	r3, sl
 8022768:	2205      	movs	r2, #5
 802276a:	4630      	mov	r0, r6
 802276c:	f000 ff78 	bl	8023660 <__multadd>
 8022770:	4601      	mov	r1, r0
 8022772:	4604      	mov	r4, r0
 8022774:	4628      	mov	r0, r5
 8022776:	f001 f9d9 	bl	8023b2c <__mcmp>
 802277a:	2800      	cmp	r0, #0
 802277c:	f73f adde 	bgt.w	802233c <_dtoa_r+0x434>
 8022780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022782:	f8dd 8000 	ldr.w	r8, [sp]
 8022786:	ea6f 0b03 	mvn.w	fp, r3
 802278a:	f04f 0900 	mov.w	r9, #0
 802278e:	4621      	mov	r1, r4
 8022790:	4630      	mov	r0, r6
 8022792:	f000 ff43 	bl	802361c <_Bfree>
 8022796:	2f00      	cmp	r7, #0
 8022798:	f43f aea7 	beq.w	80224ea <_dtoa_r+0x5e2>
 802279c:	f1b9 0f00 	cmp.w	r9, #0
 80227a0:	d005      	beq.n	80227ae <_dtoa_r+0x8a6>
 80227a2:	45b9      	cmp	r9, r7
 80227a4:	d003      	beq.n	80227ae <_dtoa_r+0x8a6>
 80227a6:	4649      	mov	r1, r9
 80227a8:	4630      	mov	r0, r6
 80227aa:	f000 ff37 	bl	802361c <_Bfree>
 80227ae:	4639      	mov	r1, r7
 80227b0:	4630      	mov	r0, r6
 80227b2:	f000 ff33 	bl	802361c <_Bfree>
 80227b6:	e698      	b.n	80224ea <_dtoa_r+0x5e2>
 80227b8:	2400      	movs	r4, #0
 80227ba:	4627      	mov	r7, r4
 80227bc:	e7e0      	b.n	8022780 <_dtoa_r+0x878>
 80227be:	46bb      	mov	fp, r7
 80227c0:	4604      	mov	r4, r0
 80227c2:	4607      	mov	r7, r0
 80227c4:	e5ba      	b.n	802233c <_dtoa_r+0x434>
 80227c6:	9b08      	ldr	r3, [sp, #32]
 80227c8:	46ca      	mov	sl, r9
 80227ca:	2b00      	cmp	r3, #0
 80227cc:	f000 8100 	beq.w	80229d0 <_dtoa_r+0xac8>
 80227d0:	f1b8 0f00 	cmp.w	r8, #0
 80227d4:	dd05      	ble.n	80227e2 <_dtoa_r+0x8da>
 80227d6:	4639      	mov	r1, r7
 80227d8:	4642      	mov	r2, r8
 80227da:	4630      	mov	r0, r6
 80227dc:	f001 f93a 	bl	8023a54 <__lshift>
 80227e0:	4607      	mov	r7, r0
 80227e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80227e4:	2b00      	cmp	r3, #0
 80227e6:	d05d      	beq.n	80228a4 <_dtoa_r+0x99c>
 80227e8:	6879      	ldr	r1, [r7, #4]
 80227ea:	4630      	mov	r0, r6
 80227ec:	f000 fed6 	bl	802359c <_Balloc>
 80227f0:	4680      	mov	r8, r0
 80227f2:	b928      	cbnz	r0, 8022800 <_dtoa_r+0x8f8>
 80227f4:	4b82      	ldr	r3, [pc, #520]	; (8022a00 <_dtoa_r+0xaf8>)
 80227f6:	4602      	mov	r2, r0
 80227f8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80227fc:	f7ff bb9a 	b.w	8021f34 <_dtoa_r+0x2c>
 8022800:	693a      	ldr	r2, [r7, #16]
 8022802:	3202      	adds	r2, #2
 8022804:	0092      	lsls	r2, r2, #2
 8022806:	f107 010c 	add.w	r1, r7, #12
 802280a:	300c      	adds	r0, #12
 802280c:	f7fd fb5c 	bl	801fec8 <memcpy>
 8022810:	2201      	movs	r2, #1
 8022812:	4641      	mov	r1, r8
 8022814:	4630      	mov	r0, r6
 8022816:	f001 f91d 	bl	8023a54 <__lshift>
 802281a:	9b00      	ldr	r3, [sp, #0]
 802281c:	3301      	adds	r3, #1
 802281e:	9305      	str	r3, [sp, #20]
 8022820:	9b00      	ldr	r3, [sp, #0]
 8022822:	4453      	add	r3, sl
 8022824:	9309      	str	r3, [sp, #36]	; 0x24
 8022826:	9b02      	ldr	r3, [sp, #8]
 8022828:	f003 0301 	and.w	r3, r3, #1
 802282c:	46b9      	mov	r9, r7
 802282e:	9308      	str	r3, [sp, #32]
 8022830:	4607      	mov	r7, r0
 8022832:	9b05      	ldr	r3, [sp, #20]
 8022834:	4621      	mov	r1, r4
 8022836:	3b01      	subs	r3, #1
 8022838:	4628      	mov	r0, r5
 802283a:	9302      	str	r3, [sp, #8]
 802283c:	f7ff fad8 	bl	8021df0 <quorem>
 8022840:	4603      	mov	r3, r0
 8022842:	3330      	adds	r3, #48	; 0x30
 8022844:	9006      	str	r0, [sp, #24]
 8022846:	4649      	mov	r1, r9
 8022848:	4628      	mov	r0, r5
 802284a:	930a      	str	r3, [sp, #40]	; 0x28
 802284c:	f001 f96e 	bl	8023b2c <__mcmp>
 8022850:	463a      	mov	r2, r7
 8022852:	4682      	mov	sl, r0
 8022854:	4621      	mov	r1, r4
 8022856:	4630      	mov	r0, r6
 8022858:	f001 f984 	bl	8023b64 <__mdiff>
 802285c:	68c2      	ldr	r2, [r0, #12]
 802285e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022860:	4680      	mov	r8, r0
 8022862:	bb0a      	cbnz	r2, 80228a8 <_dtoa_r+0x9a0>
 8022864:	4601      	mov	r1, r0
 8022866:	4628      	mov	r0, r5
 8022868:	f001 f960 	bl	8023b2c <__mcmp>
 802286c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802286e:	4602      	mov	r2, r0
 8022870:	4641      	mov	r1, r8
 8022872:	4630      	mov	r0, r6
 8022874:	920e      	str	r2, [sp, #56]	; 0x38
 8022876:	930a      	str	r3, [sp, #40]	; 0x28
 8022878:	f000 fed0 	bl	802361c <_Bfree>
 802287c:	9b07      	ldr	r3, [sp, #28]
 802287e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022880:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8022884:	ea43 0102 	orr.w	r1, r3, r2
 8022888:	9b08      	ldr	r3, [sp, #32]
 802288a:	430b      	orrs	r3, r1
 802288c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802288e:	d10d      	bne.n	80228ac <_dtoa_r+0x9a4>
 8022890:	2b39      	cmp	r3, #57	; 0x39
 8022892:	d029      	beq.n	80228e8 <_dtoa_r+0x9e0>
 8022894:	f1ba 0f00 	cmp.w	sl, #0
 8022898:	dd01      	ble.n	802289e <_dtoa_r+0x996>
 802289a:	9b06      	ldr	r3, [sp, #24]
 802289c:	3331      	adds	r3, #49	; 0x31
 802289e:	9a02      	ldr	r2, [sp, #8]
 80228a0:	7013      	strb	r3, [r2, #0]
 80228a2:	e774      	b.n	802278e <_dtoa_r+0x886>
 80228a4:	4638      	mov	r0, r7
 80228a6:	e7b8      	b.n	802281a <_dtoa_r+0x912>
 80228a8:	2201      	movs	r2, #1
 80228aa:	e7e1      	b.n	8022870 <_dtoa_r+0x968>
 80228ac:	f1ba 0f00 	cmp.w	sl, #0
 80228b0:	db06      	blt.n	80228c0 <_dtoa_r+0x9b8>
 80228b2:	9907      	ldr	r1, [sp, #28]
 80228b4:	ea41 0a0a 	orr.w	sl, r1, sl
 80228b8:	9908      	ldr	r1, [sp, #32]
 80228ba:	ea5a 0101 	orrs.w	r1, sl, r1
 80228be:	d120      	bne.n	8022902 <_dtoa_r+0x9fa>
 80228c0:	2a00      	cmp	r2, #0
 80228c2:	ddec      	ble.n	802289e <_dtoa_r+0x996>
 80228c4:	4629      	mov	r1, r5
 80228c6:	2201      	movs	r2, #1
 80228c8:	4630      	mov	r0, r6
 80228ca:	9305      	str	r3, [sp, #20]
 80228cc:	f001 f8c2 	bl	8023a54 <__lshift>
 80228d0:	4621      	mov	r1, r4
 80228d2:	4605      	mov	r5, r0
 80228d4:	f001 f92a 	bl	8023b2c <__mcmp>
 80228d8:	2800      	cmp	r0, #0
 80228da:	9b05      	ldr	r3, [sp, #20]
 80228dc:	dc02      	bgt.n	80228e4 <_dtoa_r+0x9dc>
 80228de:	d1de      	bne.n	802289e <_dtoa_r+0x996>
 80228e0:	07da      	lsls	r2, r3, #31
 80228e2:	d5dc      	bpl.n	802289e <_dtoa_r+0x996>
 80228e4:	2b39      	cmp	r3, #57	; 0x39
 80228e6:	d1d8      	bne.n	802289a <_dtoa_r+0x992>
 80228e8:	9a02      	ldr	r2, [sp, #8]
 80228ea:	2339      	movs	r3, #57	; 0x39
 80228ec:	7013      	strb	r3, [r2, #0]
 80228ee:	4643      	mov	r3, r8
 80228f0:	4698      	mov	r8, r3
 80228f2:	3b01      	subs	r3, #1
 80228f4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80228f8:	2a39      	cmp	r2, #57	; 0x39
 80228fa:	d051      	beq.n	80229a0 <_dtoa_r+0xa98>
 80228fc:	3201      	adds	r2, #1
 80228fe:	701a      	strb	r2, [r3, #0]
 8022900:	e745      	b.n	802278e <_dtoa_r+0x886>
 8022902:	2a00      	cmp	r2, #0
 8022904:	dd03      	ble.n	802290e <_dtoa_r+0xa06>
 8022906:	2b39      	cmp	r3, #57	; 0x39
 8022908:	d0ee      	beq.n	80228e8 <_dtoa_r+0x9e0>
 802290a:	3301      	adds	r3, #1
 802290c:	e7c7      	b.n	802289e <_dtoa_r+0x996>
 802290e:	9a05      	ldr	r2, [sp, #20]
 8022910:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022912:	f802 3c01 	strb.w	r3, [r2, #-1]
 8022916:	428a      	cmp	r2, r1
 8022918:	d02b      	beq.n	8022972 <_dtoa_r+0xa6a>
 802291a:	4629      	mov	r1, r5
 802291c:	2300      	movs	r3, #0
 802291e:	220a      	movs	r2, #10
 8022920:	4630      	mov	r0, r6
 8022922:	f000 fe9d 	bl	8023660 <__multadd>
 8022926:	45b9      	cmp	r9, r7
 8022928:	4605      	mov	r5, r0
 802292a:	f04f 0300 	mov.w	r3, #0
 802292e:	f04f 020a 	mov.w	r2, #10
 8022932:	4649      	mov	r1, r9
 8022934:	4630      	mov	r0, r6
 8022936:	d107      	bne.n	8022948 <_dtoa_r+0xa40>
 8022938:	f000 fe92 	bl	8023660 <__multadd>
 802293c:	4681      	mov	r9, r0
 802293e:	4607      	mov	r7, r0
 8022940:	9b05      	ldr	r3, [sp, #20]
 8022942:	3301      	adds	r3, #1
 8022944:	9305      	str	r3, [sp, #20]
 8022946:	e774      	b.n	8022832 <_dtoa_r+0x92a>
 8022948:	f000 fe8a 	bl	8023660 <__multadd>
 802294c:	4639      	mov	r1, r7
 802294e:	4681      	mov	r9, r0
 8022950:	2300      	movs	r3, #0
 8022952:	220a      	movs	r2, #10
 8022954:	4630      	mov	r0, r6
 8022956:	f000 fe83 	bl	8023660 <__multadd>
 802295a:	4607      	mov	r7, r0
 802295c:	e7f0      	b.n	8022940 <_dtoa_r+0xa38>
 802295e:	f1ba 0f00 	cmp.w	sl, #0
 8022962:	9a00      	ldr	r2, [sp, #0]
 8022964:	bfcc      	ite	gt
 8022966:	46d0      	movgt	r8, sl
 8022968:	f04f 0801 	movle.w	r8, #1
 802296c:	4490      	add	r8, r2
 802296e:	f04f 0900 	mov.w	r9, #0
 8022972:	4629      	mov	r1, r5
 8022974:	2201      	movs	r2, #1
 8022976:	4630      	mov	r0, r6
 8022978:	9302      	str	r3, [sp, #8]
 802297a:	f001 f86b 	bl	8023a54 <__lshift>
 802297e:	4621      	mov	r1, r4
 8022980:	4605      	mov	r5, r0
 8022982:	f001 f8d3 	bl	8023b2c <__mcmp>
 8022986:	2800      	cmp	r0, #0
 8022988:	dcb1      	bgt.n	80228ee <_dtoa_r+0x9e6>
 802298a:	d102      	bne.n	8022992 <_dtoa_r+0xa8a>
 802298c:	9b02      	ldr	r3, [sp, #8]
 802298e:	07db      	lsls	r3, r3, #31
 8022990:	d4ad      	bmi.n	80228ee <_dtoa_r+0x9e6>
 8022992:	4643      	mov	r3, r8
 8022994:	4698      	mov	r8, r3
 8022996:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802299a:	2a30      	cmp	r2, #48	; 0x30
 802299c:	d0fa      	beq.n	8022994 <_dtoa_r+0xa8c>
 802299e:	e6f6      	b.n	802278e <_dtoa_r+0x886>
 80229a0:	9a00      	ldr	r2, [sp, #0]
 80229a2:	429a      	cmp	r2, r3
 80229a4:	d1a4      	bne.n	80228f0 <_dtoa_r+0x9e8>
 80229a6:	f10b 0b01 	add.w	fp, fp, #1
 80229aa:	2331      	movs	r3, #49	; 0x31
 80229ac:	e778      	b.n	80228a0 <_dtoa_r+0x998>
 80229ae:	4b15      	ldr	r3, [pc, #84]	; (8022a04 <_dtoa_r+0xafc>)
 80229b0:	f7ff bb12 	b.w	8021fd8 <_dtoa_r+0xd0>
 80229b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80229b6:	2b00      	cmp	r3, #0
 80229b8:	f47f aaee 	bne.w	8021f98 <_dtoa_r+0x90>
 80229bc:	4b12      	ldr	r3, [pc, #72]	; (8022a08 <_dtoa_r+0xb00>)
 80229be:	f7ff bb0b 	b.w	8021fd8 <_dtoa_r+0xd0>
 80229c2:	f1ba 0f00 	cmp.w	sl, #0
 80229c6:	dc03      	bgt.n	80229d0 <_dtoa_r+0xac8>
 80229c8:	9b07      	ldr	r3, [sp, #28]
 80229ca:	2b02      	cmp	r3, #2
 80229cc:	f73f aec7 	bgt.w	802275e <_dtoa_r+0x856>
 80229d0:	f8dd 8000 	ldr.w	r8, [sp]
 80229d4:	4621      	mov	r1, r4
 80229d6:	4628      	mov	r0, r5
 80229d8:	f7ff fa0a 	bl	8021df0 <quorem>
 80229dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80229e0:	f808 3b01 	strb.w	r3, [r8], #1
 80229e4:	9a00      	ldr	r2, [sp, #0]
 80229e6:	eba8 0202 	sub.w	r2, r8, r2
 80229ea:	4592      	cmp	sl, r2
 80229ec:	ddb7      	ble.n	802295e <_dtoa_r+0xa56>
 80229ee:	4629      	mov	r1, r5
 80229f0:	2300      	movs	r3, #0
 80229f2:	220a      	movs	r2, #10
 80229f4:	4630      	mov	r0, r6
 80229f6:	f000 fe33 	bl	8023660 <__multadd>
 80229fa:	4605      	mov	r5, r0
 80229fc:	e7ea      	b.n	80229d4 <_dtoa_r+0xacc>
 80229fe:	bf00      	nop
 8022a00:	080296a0 	.word	0x080296a0
 8022a04:	08029504 	.word	0x08029504
 8022a08:	08029634 	.word	0x08029634

08022a0c <__errno>:
 8022a0c:	4b01      	ldr	r3, [pc, #4]	; (8022a14 <__errno+0x8>)
 8022a0e:	6818      	ldr	r0, [r3, #0]
 8022a10:	4770      	bx	lr
 8022a12:	bf00      	nop
 8022a14:	24003844 	.word	0x24003844

08022a18 <__sflush_r>:
 8022a18:	898a      	ldrh	r2, [r1, #12]
 8022a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a1e:	4605      	mov	r5, r0
 8022a20:	0710      	lsls	r0, r2, #28
 8022a22:	460c      	mov	r4, r1
 8022a24:	d458      	bmi.n	8022ad8 <__sflush_r+0xc0>
 8022a26:	684b      	ldr	r3, [r1, #4]
 8022a28:	2b00      	cmp	r3, #0
 8022a2a:	dc05      	bgt.n	8022a38 <__sflush_r+0x20>
 8022a2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022a2e:	2b00      	cmp	r3, #0
 8022a30:	dc02      	bgt.n	8022a38 <__sflush_r+0x20>
 8022a32:	2000      	movs	r0, #0
 8022a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022a3a:	2e00      	cmp	r6, #0
 8022a3c:	d0f9      	beq.n	8022a32 <__sflush_r+0x1a>
 8022a3e:	2300      	movs	r3, #0
 8022a40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022a44:	682f      	ldr	r7, [r5, #0]
 8022a46:	602b      	str	r3, [r5, #0]
 8022a48:	d032      	beq.n	8022ab0 <__sflush_r+0x98>
 8022a4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022a4c:	89a3      	ldrh	r3, [r4, #12]
 8022a4e:	075a      	lsls	r2, r3, #29
 8022a50:	d505      	bpl.n	8022a5e <__sflush_r+0x46>
 8022a52:	6863      	ldr	r3, [r4, #4]
 8022a54:	1ac0      	subs	r0, r0, r3
 8022a56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022a58:	b10b      	cbz	r3, 8022a5e <__sflush_r+0x46>
 8022a5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022a5c:	1ac0      	subs	r0, r0, r3
 8022a5e:	2300      	movs	r3, #0
 8022a60:	4602      	mov	r2, r0
 8022a62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022a64:	6a21      	ldr	r1, [r4, #32]
 8022a66:	4628      	mov	r0, r5
 8022a68:	47b0      	blx	r6
 8022a6a:	1c43      	adds	r3, r0, #1
 8022a6c:	89a3      	ldrh	r3, [r4, #12]
 8022a6e:	d106      	bne.n	8022a7e <__sflush_r+0x66>
 8022a70:	6829      	ldr	r1, [r5, #0]
 8022a72:	291d      	cmp	r1, #29
 8022a74:	d82c      	bhi.n	8022ad0 <__sflush_r+0xb8>
 8022a76:	4a2a      	ldr	r2, [pc, #168]	; (8022b20 <__sflush_r+0x108>)
 8022a78:	40ca      	lsrs	r2, r1
 8022a7a:	07d6      	lsls	r6, r2, #31
 8022a7c:	d528      	bpl.n	8022ad0 <__sflush_r+0xb8>
 8022a7e:	2200      	movs	r2, #0
 8022a80:	6062      	str	r2, [r4, #4]
 8022a82:	04d9      	lsls	r1, r3, #19
 8022a84:	6922      	ldr	r2, [r4, #16]
 8022a86:	6022      	str	r2, [r4, #0]
 8022a88:	d504      	bpl.n	8022a94 <__sflush_r+0x7c>
 8022a8a:	1c42      	adds	r2, r0, #1
 8022a8c:	d101      	bne.n	8022a92 <__sflush_r+0x7a>
 8022a8e:	682b      	ldr	r3, [r5, #0]
 8022a90:	b903      	cbnz	r3, 8022a94 <__sflush_r+0x7c>
 8022a92:	6560      	str	r0, [r4, #84]	; 0x54
 8022a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022a96:	602f      	str	r7, [r5, #0]
 8022a98:	2900      	cmp	r1, #0
 8022a9a:	d0ca      	beq.n	8022a32 <__sflush_r+0x1a>
 8022a9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022aa0:	4299      	cmp	r1, r3
 8022aa2:	d002      	beq.n	8022aaa <__sflush_r+0x92>
 8022aa4:	4628      	mov	r0, r5
 8022aa6:	f7fd fa3f 	bl	801ff28 <_free_r>
 8022aaa:	2000      	movs	r0, #0
 8022aac:	6360      	str	r0, [r4, #52]	; 0x34
 8022aae:	e7c1      	b.n	8022a34 <__sflush_r+0x1c>
 8022ab0:	6a21      	ldr	r1, [r4, #32]
 8022ab2:	2301      	movs	r3, #1
 8022ab4:	4628      	mov	r0, r5
 8022ab6:	47b0      	blx	r6
 8022ab8:	1c41      	adds	r1, r0, #1
 8022aba:	d1c7      	bne.n	8022a4c <__sflush_r+0x34>
 8022abc:	682b      	ldr	r3, [r5, #0]
 8022abe:	2b00      	cmp	r3, #0
 8022ac0:	d0c4      	beq.n	8022a4c <__sflush_r+0x34>
 8022ac2:	2b1d      	cmp	r3, #29
 8022ac4:	d001      	beq.n	8022aca <__sflush_r+0xb2>
 8022ac6:	2b16      	cmp	r3, #22
 8022ac8:	d101      	bne.n	8022ace <__sflush_r+0xb6>
 8022aca:	602f      	str	r7, [r5, #0]
 8022acc:	e7b1      	b.n	8022a32 <__sflush_r+0x1a>
 8022ace:	89a3      	ldrh	r3, [r4, #12]
 8022ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022ad4:	81a3      	strh	r3, [r4, #12]
 8022ad6:	e7ad      	b.n	8022a34 <__sflush_r+0x1c>
 8022ad8:	690f      	ldr	r7, [r1, #16]
 8022ada:	2f00      	cmp	r7, #0
 8022adc:	d0a9      	beq.n	8022a32 <__sflush_r+0x1a>
 8022ade:	0793      	lsls	r3, r2, #30
 8022ae0:	680e      	ldr	r6, [r1, #0]
 8022ae2:	bf08      	it	eq
 8022ae4:	694b      	ldreq	r3, [r1, #20]
 8022ae6:	600f      	str	r7, [r1, #0]
 8022ae8:	bf18      	it	ne
 8022aea:	2300      	movne	r3, #0
 8022aec:	eba6 0807 	sub.w	r8, r6, r7
 8022af0:	608b      	str	r3, [r1, #8]
 8022af2:	f1b8 0f00 	cmp.w	r8, #0
 8022af6:	dd9c      	ble.n	8022a32 <__sflush_r+0x1a>
 8022af8:	6a21      	ldr	r1, [r4, #32]
 8022afa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022afc:	4643      	mov	r3, r8
 8022afe:	463a      	mov	r2, r7
 8022b00:	4628      	mov	r0, r5
 8022b02:	47b0      	blx	r6
 8022b04:	2800      	cmp	r0, #0
 8022b06:	dc06      	bgt.n	8022b16 <__sflush_r+0xfe>
 8022b08:	89a3      	ldrh	r3, [r4, #12]
 8022b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022b0e:	81a3      	strh	r3, [r4, #12]
 8022b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022b14:	e78e      	b.n	8022a34 <__sflush_r+0x1c>
 8022b16:	4407      	add	r7, r0
 8022b18:	eba8 0800 	sub.w	r8, r8, r0
 8022b1c:	e7e9      	b.n	8022af2 <__sflush_r+0xda>
 8022b1e:	bf00      	nop
 8022b20:	20400001 	.word	0x20400001

08022b24 <_fflush_r>:
 8022b24:	b538      	push	{r3, r4, r5, lr}
 8022b26:	690b      	ldr	r3, [r1, #16]
 8022b28:	4605      	mov	r5, r0
 8022b2a:	460c      	mov	r4, r1
 8022b2c:	b913      	cbnz	r3, 8022b34 <_fflush_r+0x10>
 8022b2e:	2500      	movs	r5, #0
 8022b30:	4628      	mov	r0, r5
 8022b32:	bd38      	pop	{r3, r4, r5, pc}
 8022b34:	b118      	cbz	r0, 8022b3e <_fflush_r+0x1a>
 8022b36:	6983      	ldr	r3, [r0, #24]
 8022b38:	b90b      	cbnz	r3, 8022b3e <_fflush_r+0x1a>
 8022b3a:	f000 f887 	bl	8022c4c <__sinit>
 8022b3e:	4b14      	ldr	r3, [pc, #80]	; (8022b90 <_fflush_r+0x6c>)
 8022b40:	429c      	cmp	r4, r3
 8022b42:	d11b      	bne.n	8022b7c <_fflush_r+0x58>
 8022b44:	686c      	ldr	r4, [r5, #4]
 8022b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022b4a:	2b00      	cmp	r3, #0
 8022b4c:	d0ef      	beq.n	8022b2e <_fflush_r+0xa>
 8022b4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022b50:	07d0      	lsls	r0, r2, #31
 8022b52:	d404      	bmi.n	8022b5e <_fflush_r+0x3a>
 8022b54:	0599      	lsls	r1, r3, #22
 8022b56:	d402      	bmi.n	8022b5e <_fflush_r+0x3a>
 8022b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022b5a:	f000 fc9a 	bl	8023492 <__retarget_lock_acquire_recursive>
 8022b5e:	4628      	mov	r0, r5
 8022b60:	4621      	mov	r1, r4
 8022b62:	f7ff ff59 	bl	8022a18 <__sflush_r>
 8022b66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022b68:	07da      	lsls	r2, r3, #31
 8022b6a:	4605      	mov	r5, r0
 8022b6c:	d4e0      	bmi.n	8022b30 <_fflush_r+0xc>
 8022b6e:	89a3      	ldrh	r3, [r4, #12]
 8022b70:	059b      	lsls	r3, r3, #22
 8022b72:	d4dd      	bmi.n	8022b30 <_fflush_r+0xc>
 8022b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022b76:	f000 fc8d 	bl	8023494 <__retarget_lock_release_recursive>
 8022b7a:	e7d9      	b.n	8022b30 <_fflush_r+0xc>
 8022b7c:	4b05      	ldr	r3, [pc, #20]	; (8022b94 <_fflush_r+0x70>)
 8022b7e:	429c      	cmp	r4, r3
 8022b80:	d101      	bne.n	8022b86 <_fflush_r+0x62>
 8022b82:	68ac      	ldr	r4, [r5, #8]
 8022b84:	e7df      	b.n	8022b46 <_fflush_r+0x22>
 8022b86:	4b04      	ldr	r3, [pc, #16]	; (8022b98 <_fflush_r+0x74>)
 8022b88:	429c      	cmp	r4, r3
 8022b8a:	bf08      	it	eq
 8022b8c:	68ec      	ldreq	r4, [r5, #12]
 8022b8e:	e7da      	b.n	8022b46 <_fflush_r+0x22>
 8022b90:	080296d4 	.word	0x080296d4
 8022b94:	080296f4 	.word	0x080296f4
 8022b98:	080296b4 	.word	0x080296b4

08022b9c <std>:
 8022b9c:	2300      	movs	r3, #0
 8022b9e:	b510      	push	{r4, lr}
 8022ba0:	4604      	mov	r4, r0
 8022ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8022ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022baa:	6083      	str	r3, [r0, #8]
 8022bac:	8181      	strh	r1, [r0, #12]
 8022bae:	6643      	str	r3, [r0, #100]	; 0x64
 8022bb0:	81c2      	strh	r2, [r0, #14]
 8022bb2:	6183      	str	r3, [r0, #24]
 8022bb4:	4619      	mov	r1, r3
 8022bb6:	2208      	movs	r2, #8
 8022bb8:	305c      	adds	r0, #92	; 0x5c
 8022bba:	f7fd f9ad 	bl	801ff18 <memset>
 8022bbe:	4b05      	ldr	r3, [pc, #20]	; (8022bd4 <std+0x38>)
 8022bc0:	6263      	str	r3, [r4, #36]	; 0x24
 8022bc2:	4b05      	ldr	r3, [pc, #20]	; (8022bd8 <std+0x3c>)
 8022bc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8022bc6:	4b05      	ldr	r3, [pc, #20]	; (8022bdc <std+0x40>)
 8022bc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022bca:	4b05      	ldr	r3, [pc, #20]	; (8022be0 <std+0x44>)
 8022bcc:	6224      	str	r4, [r4, #32]
 8022bce:	6323      	str	r3, [r4, #48]	; 0x30
 8022bd0:	bd10      	pop	{r4, pc}
 8022bd2:	bf00      	nop
 8022bd4:	080244b1 	.word	0x080244b1
 8022bd8:	080244d3 	.word	0x080244d3
 8022bdc:	0802450b 	.word	0x0802450b
 8022be0:	0802452f 	.word	0x0802452f

08022be4 <_cleanup_r>:
 8022be4:	4901      	ldr	r1, [pc, #4]	; (8022bec <_cleanup_r+0x8>)
 8022be6:	f000 b8c1 	b.w	8022d6c <_fwalk_reent>
 8022bea:	bf00      	nop
 8022bec:	08022b25 	.word	0x08022b25

08022bf0 <__sfmoreglue>:
 8022bf0:	b570      	push	{r4, r5, r6, lr}
 8022bf2:	1e4a      	subs	r2, r1, #1
 8022bf4:	2568      	movs	r5, #104	; 0x68
 8022bf6:	4355      	muls	r5, r2
 8022bf8:	460e      	mov	r6, r1
 8022bfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022bfe:	f7fd f9e3 	bl	801ffc8 <_malloc_r>
 8022c02:	4604      	mov	r4, r0
 8022c04:	b140      	cbz	r0, 8022c18 <__sfmoreglue+0x28>
 8022c06:	2100      	movs	r1, #0
 8022c08:	e9c0 1600 	strd	r1, r6, [r0]
 8022c0c:	300c      	adds	r0, #12
 8022c0e:	60a0      	str	r0, [r4, #8]
 8022c10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022c14:	f7fd f980 	bl	801ff18 <memset>
 8022c18:	4620      	mov	r0, r4
 8022c1a:	bd70      	pop	{r4, r5, r6, pc}

08022c1c <__sfp_lock_acquire>:
 8022c1c:	4801      	ldr	r0, [pc, #4]	; (8022c24 <__sfp_lock_acquire+0x8>)
 8022c1e:	f000 bc38 	b.w	8023492 <__retarget_lock_acquire_recursive>
 8022c22:	bf00      	nop
 8022c24:	2400d6d4 	.word	0x2400d6d4

08022c28 <__sfp_lock_release>:
 8022c28:	4801      	ldr	r0, [pc, #4]	; (8022c30 <__sfp_lock_release+0x8>)
 8022c2a:	f000 bc33 	b.w	8023494 <__retarget_lock_release_recursive>
 8022c2e:	bf00      	nop
 8022c30:	2400d6d4 	.word	0x2400d6d4

08022c34 <__sinit_lock_acquire>:
 8022c34:	4801      	ldr	r0, [pc, #4]	; (8022c3c <__sinit_lock_acquire+0x8>)
 8022c36:	f000 bc2c 	b.w	8023492 <__retarget_lock_acquire_recursive>
 8022c3a:	bf00      	nop
 8022c3c:	2400d6cf 	.word	0x2400d6cf

08022c40 <__sinit_lock_release>:
 8022c40:	4801      	ldr	r0, [pc, #4]	; (8022c48 <__sinit_lock_release+0x8>)
 8022c42:	f000 bc27 	b.w	8023494 <__retarget_lock_release_recursive>
 8022c46:	bf00      	nop
 8022c48:	2400d6cf 	.word	0x2400d6cf

08022c4c <__sinit>:
 8022c4c:	b510      	push	{r4, lr}
 8022c4e:	4604      	mov	r4, r0
 8022c50:	f7ff fff0 	bl	8022c34 <__sinit_lock_acquire>
 8022c54:	69a3      	ldr	r3, [r4, #24]
 8022c56:	b11b      	cbz	r3, 8022c60 <__sinit+0x14>
 8022c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022c5c:	f7ff bff0 	b.w	8022c40 <__sinit_lock_release>
 8022c60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022c64:	6523      	str	r3, [r4, #80]	; 0x50
 8022c66:	4b13      	ldr	r3, [pc, #76]	; (8022cb4 <__sinit+0x68>)
 8022c68:	4a13      	ldr	r2, [pc, #76]	; (8022cb8 <__sinit+0x6c>)
 8022c6a:	681b      	ldr	r3, [r3, #0]
 8022c6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8022c6e:	42a3      	cmp	r3, r4
 8022c70:	bf04      	itt	eq
 8022c72:	2301      	moveq	r3, #1
 8022c74:	61a3      	streq	r3, [r4, #24]
 8022c76:	4620      	mov	r0, r4
 8022c78:	f000 f820 	bl	8022cbc <__sfp>
 8022c7c:	6060      	str	r0, [r4, #4]
 8022c7e:	4620      	mov	r0, r4
 8022c80:	f000 f81c 	bl	8022cbc <__sfp>
 8022c84:	60a0      	str	r0, [r4, #8]
 8022c86:	4620      	mov	r0, r4
 8022c88:	f000 f818 	bl	8022cbc <__sfp>
 8022c8c:	2200      	movs	r2, #0
 8022c8e:	60e0      	str	r0, [r4, #12]
 8022c90:	2104      	movs	r1, #4
 8022c92:	6860      	ldr	r0, [r4, #4]
 8022c94:	f7ff ff82 	bl	8022b9c <std>
 8022c98:	68a0      	ldr	r0, [r4, #8]
 8022c9a:	2201      	movs	r2, #1
 8022c9c:	2109      	movs	r1, #9
 8022c9e:	f7ff ff7d 	bl	8022b9c <std>
 8022ca2:	68e0      	ldr	r0, [r4, #12]
 8022ca4:	2202      	movs	r2, #2
 8022ca6:	2112      	movs	r1, #18
 8022ca8:	f7ff ff78 	bl	8022b9c <std>
 8022cac:	2301      	movs	r3, #1
 8022cae:	61a3      	str	r3, [r4, #24]
 8022cb0:	e7d2      	b.n	8022c58 <__sinit+0xc>
 8022cb2:	bf00      	nop
 8022cb4:	080294f0 	.word	0x080294f0
 8022cb8:	08022be5 	.word	0x08022be5

08022cbc <__sfp>:
 8022cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022cbe:	4607      	mov	r7, r0
 8022cc0:	f7ff ffac 	bl	8022c1c <__sfp_lock_acquire>
 8022cc4:	4b1e      	ldr	r3, [pc, #120]	; (8022d40 <__sfp+0x84>)
 8022cc6:	681e      	ldr	r6, [r3, #0]
 8022cc8:	69b3      	ldr	r3, [r6, #24]
 8022cca:	b913      	cbnz	r3, 8022cd2 <__sfp+0x16>
 8022ccc:	4630      	mov	r0, r6
 8022cce:	f7ff ffbd 	bl	8022c4c <__sinit>
 8022cd2:	3648      	adds	r6, #72	; 0x48
 8022cd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022cd8:	3b01      	subs	r3, #1
 8022cda:	d503      	bpl.n	8022ce4 <__sfp+0x28>
 8022cdc:	6833      	ldr	r3, [r6, #0]
 8022cde:	b30b      	cbz	r3, 8022d24 <__sfp+0x68>
 8022ce0:	6836      	ldr	r6, [r6, #0]
 8022ce2:	e7f7      	b.n	8022cd4 <__sfp+0x18>
 8022ce4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022ce8:	b9d5      	cbnz	r5, 8022d20 <__sfp+0x64>
 8022cea:	4b16      	ldr	r3, [pc, #88]	; (8022d44 <__sfp+0x88>)
 8022cec:	60e3      	str	r3, [r4, #12]
 8022cee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8022cf2:	6665      	str	r5, [r4, #100]	; 0x64
 8022cf4:	f000 fbcc 	bl	8023490 <__retarget_lock_init_recursive>
 8022cf8:	f7ff ff96 	bl	8022c28 <__sfp_lock_release>
 8022cfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8022d00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8022d04:	6025      	str	r5, [r4, #0]
 8022d06:	61a5      	str	r5, [r4, #24]
 8022d08:	2208      	movs	r2, #8
 8022d0a:	4629      	mov	r1, r5
 8022d0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022d10:	f7fd f902 	bl	801ff18 <memset>
 8022d14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022d18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022d1c:	4620      	mov	r0, r4
 8022d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022d20:	3468      	adds	r4, #104	; 0x68
 8022d22:	e7d9      	b.n	8022cd8 <__sfp+0x1c>
 8022d24:	2104      	movs	r1, #4
 8022d26:	4638      	mov	r0, r7
 8022d28:	f7ff ff62 	bl	8022bf0 <__sfmoreglue>
 8022d2c:	4604      	mov	r4, r0
 8022d2e:	6030      	str	r0, [r6, #0]
 8022d30:	2800      	cmp	r0, #0
 8022d32:	d1d5      	bne.n	8022ce0 <__sfp+0x24>
 8022d34:	f7ff ff78 	bl	8022c28 <__sfp_lock_release>
 8022d38:	230c      	movs	r3, #12
 8022d3a:	603b      	str	r3, [r7, #0]
 8022d3c:	e7ee      	b.n	8022d1c <__sfp+0x60>
 8022d3e:	bf00      	nop
 8022d40:	080294f0 	.word	0x080294f0
 8022d44:	ffff0001 	.word	0xffff0001

08022d48 <fiprintf>:
 8022d48:	b40e      	push	{r1, r2, r3}
 8022d4a:	b503      	push	{r0, r1, lr}
 8022d4c:	4601      	mov	r1, r0
 8022d4e:	ab03      	add	r3, sp, #12
 8022d50:	4805      	ldr	r0, [pc, #20]	; (8022d68 <fiprintf+0x20>)
 8022d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8022d56:	6800      	ldr	r0, [r0, #0]
 8022d58:	9301      	str	r3, [sp, #4]
 8022d5a:	f001 fa6f 	bl	802423c <_vfiprintf_r>
 8022d5e:	b002      	add	sp, #8
 8022d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8022d64:	b003      	add	sp, #12
 8022d66:	4770      	bx	lr
 8022d68:	24003844 	.word	0x24003844

08022d6c <_fwalk_reent>:
 8022d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022d70:	4606      	mov	r6, r0
 8022d72:	4688      	mov	r8, r1
 8022d74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022d78:	2700      	movs	r7, #0
 8022d7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022d7e:	f1b9 0901 	subs.w	r9, r9, #1
 8022d82:	d505      	bpl.n	8022d90 <_fwalk_reent+0x24>
 8022d84:	6824      	ldr	r4, [r4, #0]
 8022d86:	2c00      	cmp	r4, #0
 8022d88:	d1f7      	bne.n	8022d7a <_fwalk_reent+0xe>
 8022d8a:	4638      	mov	r0, r7
 8022d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022d90:	89ab      	ldrh	r3, [r5, #12]
 8022d92:	2b01      	cmp	r3, #1
 8022d94:	d907      	bls.n	8022da6 <_fwalk_reent+0x3a>
 8022d96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022d9a:	3301      	adds	r3, #1
 8022d9c:	d003      	beq.n	8022da6 <_fwalk_reent+0x3a>
 8022d9e:	4629      	mov	r1, r5
 8022da0:	4630      	mov	r0, r6
 8022da2:	47c0      	blx	r8
 8022da4:	4307      	orrs	r7, r0
 8022da6:	3568      	adds	r5, #104	; 0x68
 8022da8:	e7e9      	b.n	8022d7e <_fwalk_reent+0x12>

08022daa <rshift>:
 8022daa:	6903      	ldr	r3, [r0, #16]
 8022dac:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8022db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022db4:	ea4f 1261 	mov.w	r2, r1, asr #5
 8022db8:	f100 0414 	add.w	r4, r0, #20
 8022dbc:	dd45      	ble.n	8022e4a <rshift+0xa0>
 8022dbe:	f011 011f 	ands.w	r1, r1, #31
 8022dc2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8022dc6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8022dca:	d10c      	bne.n	8022de6 <rshift+0x3c>
 8022dcc:	f100 0710 	add.w	r7, r0, #16
 8022dd0:	4629      	mov	r1, r5
 8022dd2:	42b1      	cmp	r1, r6
 8022dd4:	d334      	bcc.n	8022e40 <rshift+0x96>
 8022dd6:	1a9b      	subs	r3, r3, r2
 8022dd8:	009b      	lsls	r3, r3, #2
 8022dda:	1eea      	subs	r2, r5, #3
 8022ddc:	4296      	cmp	r6, r2
 8022dde:	bf38      	it	cc
 8022de0:	2300      	movcc	r3, #0
 8022de2:	4423      	add	r3, r4
 8022de4:	e015      	b.n	8022e12 <rshift+0x68>
 8022de6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8022dea:	f1c1 0820 	rsb	r8, r1, #32
 8022dee:	40cf      	lsrs	r7, r1
 8022df0:	f105 0e04 	add.w	lr, r5, #4
 8022df4:	46a1      	mov	r9, r4
 8022df6:	4576      	cmp	r6, lr
 8022df8:	46f4      	mov	ip, lr
 8022dfa:	d815      	bhi.n	8022e28 <rshift+0x7e>
 8022dfc:	1a9b      	subs	r3, r3, r2
 8022dfe:	009a      	lsls	r2, r3, #2
 8022e00:	3a04      	subs	r2, #4
 8022e02:	3501      	adds	r5, #1
 8022e04:	42ae      	cmp	r6, r5
 8022e06:	bf38      	it	cc
 8022e08:	2200      	movcc	r2, #0
 8022e0a:	18a3      	adds	r3, r4, r2
 8022e0c:	50a7      	str	r7, [r4, r2]
 8022e0e:	b107      	cbz	r7, 8022e12 <rshift+0x68>
 8022e10:	3304      	adds	r3, #4
 8022e12:	1b1a      	subs	r2, r3, r4
 8022e14:	42a3      	cmp	r3, r4
 8022e16:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8022e1a:	bf08      	it	eq
 8022e1c:	2300      	moveq	r3, #0
 8022e1e:	6102      	str	r2, [r0, #16]
 8022e20:	bf08      	it	eq
 8022e22:	6143      	streq	r3, [r0, #20]
 8022e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022e28:	f8dc c000 	ldr.w	ip, [ip]
 8022e2c:	fa0c fc08 	lsl.w	ip, ip, r8
 8022e30:	ea4c 0707 	orr.w	r7, ip, r7
 8022e34:	f849 7b04 	str.w	r7, [r9], #4
 8022e38:	f85e 7b04 	ldr.w	r7, [lr], #4
 8022e3c:	40cf      	lsrs	r7, r1
 8022e3e:	e7da      	b.n	8022df6 <rshift+0x4c>
 8022e40:	f851 cb04 	ldr.w	ip, [r1], #4
 8022e44:	f847 cf04 	str.w	ip, [r7, #4]!
 8022e48:	e7c3      	b.n	8022dd2 <rshift+0x28>
 8022e4a:	4623      	mov	r3, r4
 8022e4c:	e7e1      	b.n	8022e12 <rshift+0x68>

08022e4e <__hexdig_fun>:
 8022e4e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8022e52:	2b09      	cmp	r3, #9
 8022e54:	d802      	bhi.n	8022e5c <__hexdig_fun+0xe>
 8022e56:	3820      	subs	r0, #32
 8022e58:	b2c0      	uxtb	r0, r0
 8022e5a:	4770      	bx	lr
 8022e5c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8022e60:	2b05      	cmp	r3, #5
 8022e62:	d801      	bhi.n	8022e68 <__hexdig_fun+0x1a>
 8022e64:	3847      	subs	r0, #71	; 0x47
 8022e66:	e7f7      	b.n	8022e58 <__hexdig_fun+0xa>
 8022e68:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8022e6c:	2b05      	cmp	r3, #5
 8022e6e:	d801      	bhi.n	8022e74 <__hexdig_fun+0x26>
 8022e70:	3827      	subs	r0, #39	; 0x27
 8022e72:	e7f1      	b.n	8022e58 <__hexdig_fun+0xa>
 8022e74:	2000      	movs	r0, #0
 8022e76:	4770      	bx	lr

08022e78 <__gethex>:
 8022e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e7c:	ed2d 8b02 	vpush	{d8}
 8022e80:	b089      	sub	sp, #36	; 0x24
 8022e82:	ee08 0a10 	vmov	s16, r0
 8022e86:	9304      	str	r3, [sp, #16]
 8022e88:	4bbc      	ldr	r3, [pc, #752]	; (802317c <__gethex+0x304>)
 8022e8a:	681b      	ldr	r3, [r3, #0]
 8022e8c:	9301      	str	r3, [sp, #4]
 8022e8e:	4618      	mov	r0, r3
 8022e90:	468b      	mov	fp, r1
 8022e92:	4690      	mov	r8, r2
 8022e94:	f7dd fa24 	bl	80002e0 <strlen>
 8022e98:	9b01      	ldr	r3, [sp, #4]
 8022e9a:	f8db 2000 	ldr.w	r2, [fp]
 8022e9e:	4403      	add	r3, r0
 8022ea0:	4682      	mov	sl, r0
 8022ea2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022ea6:	9305      	str	r3, [sp, #20]
 8022ea8:	1c93      	adds	r3, r2, #2
 8022eaa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8022eae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8022eb2:	32fe      	adds	r2, #254	; 0xfe
 8022eb4:	18d1      	adds	r1, r2, r3
 8022eb6:	461f      	mov	r7, r3
 8022eb8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8022ebc:	9100      	str	r1, [sp, #0]
 8022ebe:	2830      	cmp	r0, #48	; 0x30
 8022ec0:	d0f8      	beq.n	8022eb4 <__gethex+0x3c>
 8022ec2:	f7ff ffc4 	bl	8022e4e <__hexdig_fun>
 8022ec6:	4604      	mov	r4, r0
 8022ec8:	2800      	cmp	r0, #0
 8022eca:	d13a      	bne.n	8022f42 <__gethex+0xca>
 8022ecc:	9901      	ldr	r1, [sp, #4]
 8022ece:	4652      	mov	r2, sl
 8022ed0:	4638      	mov	r0, r7
 8022ed2:	f7fe f81f 	bl	8020f14 <strncmp>
 8022ed6:	4605      	mov	r5, r0
 8022ed8:	2800      	cmp	r0, #0
 8022eda:	d168      	bne.n	8022fae <__gethex+0x136>
 8022edc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8022ee0:	eb07 060a 	add.w	r6, r7, sl
 8022ee4:	f7ff ffb3 	bl	8022e4e <__hexdig_fun>
 8022ee8:	2800      	cmp	r0, #0
 8022eea:	d062      	beq.n	8022fb2 <__gethex+0x13a>
 8022eec:	4633      	mov	r3, r6
 8022eee:	7818      	ldrb	r0, [r3, #0]
 8022ef0:	2830      	cmp	r0, #48	; 0x30
 8022ef2:	461f      	mov	r7, r3
 8022ef4:	f103 0301 	add.w	r3, r3, #1
 8022ef8:	d0f9      	beq.n	8022eee <__gethex+0x76>
 8022efa:	f7ff ffa8 	bl	8022e4e <__hexdig_fun>
 8022efe:	2301      	movs	r3, #1
 8022f00:	fab0 f480 	clz	r4, r0
 8022f04:	0964      	lsrs	r4, r4, #5
 8022f06:	4635      	mov	r5, r6
 8022f08:	9300      	str	r3, [sp, #0]
 8022f0a:	463a      	mov	r2, r7
 8022f0c:	4616      	mov	r6, r2
 8022f0e:	3201      	adds	r2, #1
 8022f10:	7830      	ldrb	r0, [r6, #0]
 8022f12:	f7ff ff9c 	bl	8022e4e <__hexdig_fun>
 8022f16:	2800      	cmp	r0, #0
 8022f18:	d1f8      	bne.n	8022f0c <__gethex+0x94>
 8022f1a:	9901      	ldr	r1, [sp, #4]
 8022f1c:	4652      	mov	r2, sl
 8022f1e:	4630      	mov	r0, r6
 8022f20:	f7fd fff8 	bl	8020f14 <strncmp>
 8022f24:	b980      	cbnz	r0, 8022f48 <__gethex+0xd0>
 8022f26:	b94d      	cbnz	r5, 8022f3c <__gethex+0xc4>
 8022f28:	eb06 050a 	add.w	r5, r6, sl
 8022f2c:	462a      	mov	r2, r5
 8022f2e:	4616      	mov	r6, r2
 8022f30:	3201      	adds	r2, #1
 8022f32:	7830      	ldrb	r0, [r6, #0]
 8022f34:	f7ff ff8b 	bl	8022e4e <__hexdig_fun>
 8022f38:	2800      	cmp	r0, #0
 8022f3a:	d1f8      	bne.n	8022f2e <__gethex+0xb6>
 8022f3c:	1bad      	subs	r5, r5, r6
 8022f3e:	00ad      	lsls	r5, r5, #2
 8022f40:	e004      	b.n	8022f4c <__gethex+0xd4>
 8022f42:	2400      	movs	r4, #0
 8022f44:	4625      	mov	r5, r4
 8022f46:	e7e0      	b.n	8022f0a <__gethex+0x92>
 8022f48:	2d00      	cmp	r5, #0
 8022f4a:	d1f7      	bne.n	8022f3c <__gethex+0xc4>
 8022f4c:	7833      	ldrb	r3, [r6, #0]
 8022f4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8022f52:	2b50      	cmp	r3, #80	; 0x50
 8022f54:	d13b      	bne.n	8022fce <__gethex+0x156>
 8022f56:	7873      	ldrb	r3, [r6, #1]
 8022f58:	2b2b      	cmp	r3, #43	; 0x2b
 8022f5a:	d02c      	beq.n	8022fb6 <__gethex+0x13e>
 8022f5c:	2b2d      	cmp	r3, #45	; 0x2d
 8022f5e:	d02e      	beq.n	8022fbe <__gethex+0x146>
 8022f60:	1c71      	adds	r1, r6, #1
 8022f62:	f04f 0900 	mov.w	r9, #0
 8022f66:	7808      	ldrb	r0, [r1, #0]
 8022f68:	f7ff ff71 	bl	8022e4e <__hexdig_fun>
 8022f6c:	1e43      	subs	r3, r0, #1
 8022f6e:	b2db      	uxtb	r3, r3
 8022f70:	2b18      	cmp	r3, #24
 8022f72:	d82c      	bhi.n	8022fce <__gethex+0x156>
 8022f74:	f1a0 0210 	sub.w	r2, r0, #16
 8022f78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8022f7c:	f7ff ff67 	bl	8022e4e <__hexdig_fun>
 8022f80:	1e43      	subs	r3, r0, #1
 8022f82:	b2db      	uxtb	r3, r3
 8022f84:	2b18      	cmp	r3, #24
 8022f86:	d91d      	bls.n	8022fc4 <__gethex+0x14c>
 8022f88:	f1b9 0f00 	cmp.w	r9, #0
 8022f8c:	d000      	beq.n	8022f90 <__gethex+0x118>
 8022f8e:	4252      	negs	r2, r2
 8022f90:	4415      	add	r5, r2
 8022f92:	f8cb 1000 	str.w	r1, [fp]
 8022f96:	b1e4      	cbz	r4, 8022fd2 <__gethex+0x15a>
 8022f98:	9b00      	ldr	r3, [sp, #0]
 8022f9a:	2b00      	cmp	r3, #0
 8022f9c:	bf14      	ite	ne
 8022f9e:	2700      	movne	r7, #0
 8022fa0:	2706      	moveq	r7, #6
 8022fa2:	4638      	mov	r0, r7
 8022fa4:	b009      	add	sp, #36	; 0x24
 8022fa6:	ecbd 8b02 	vpop	{d8}
 8022faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fae:	463e      	mov	r6, r7
 8022fb0:	4625      	mov	r5, r4
 8022fb2:	2401      	movs	r4, #1
 8022fb4:	e7ca      	b.n	8022f4c <__gethex+0xd4>
 8022fb6:	f04f 0900 	mov.w	r9, #0
 8022fba:	1cb1      	adds	r1, r6, #2
 8022fbc:	e7d3      	b.n	8022f66 <__gethex+0xee>
 8022fbe:	f04f 0901 	mov.w	r9, #1
 8022fc2:	e7fa      	b.n	8022fba <__gethex+0x142>
 8022fc4:	230a      	movs	r3, #10
 8022fc6:	fb03 0202 	mla	r2, r3, r2, r0
 8022fca:	3a10      	subs	r2, #16
 8022fcc:	e7d4      	b.n	8022f78 <__gethex+0x100>
 8022fce:	4631      	mov	r1, r6
 8022fd0:	e7df      	b.n	8022f92 <__gethex+0x11a>
 8022fd2:	1bf3      	subs	r3, r6, r7
 8022fd4:	3b01      	subs	r3, #1
 8022fd6:	4621      	mov	r1, r4
 8022fd8:	2b07      	cmp	r3, #7
 8022fda:	dc0b      	bgt.n	8022ff4 <__gethex+0x17c>
 8022fdc:	ee18 0a10 	vmov	r0, s16
 8022fe0:	f000 fadc 	bl	802359c <_Balloc>
 8022fe4:	4604      	mov	r4, r0
 8022fe6:	b940      	cbnz	r0, 8022ffa <__gethex+0x182>
 8022fe8:	4b65      	ldr	r3, [pc, #404]	; (8023180 <__gethex+0x308>)
 8022fea:	4602      	mov	r2, r0
 8022fec:	21de      	movs	r1, #222	; 0xde
 8022fee:	4865      	ldr	r0, [pc, #404]	; (8023184 <__gethex+0x30c>)
 8022ff0:	f7fe fee0 	bl	8021db4 <__assert_func>
 8022ff4:	3101      	adds	r1, #1
 8022ff6:	105b      	asrs	r3, r3, #1
 8022ff8:	e7ee      	b.n	8022fd8 <__gethex+0x160>
 8022ffa:	f100 0914 	add.w	r9, r0, #20
 8022ffe:	f04f 0b00 	mov.w	fp, #0
 8023002:	f1ca 0301 	rsb	r3, sl, #1
 8023006:	f8cd 9008 	str.w	r9, [sp, #8]
 802300a:	f8cd b000 	str.w	fp, [sp]
 802300e:	9306      	str	r3, [sp, #24]
 8023010:	42b7      	cmp	r7, r6
 8023012:	d340      	bcc.n	8023096 <__gethex+0x21e>
 8023014:	9802      	ldr	r0, [sp, #8]
 8023016:	9b00      	ldr	r3, [sp, #0]
 8023018:	f840 3b04 	str.w	r3, [r0], #4
 802301c:	eba0 0009 	sub.w	r0, r0, r9
 8023020:	1080      	asrs	r0, r0, #2
 8023022:	0146      	lsls	r6, r0, #5
 8023024:	6120      	str	r0, [r4, #16]
 8023026:	4618      	mov	r0, r3
 8023028:	f000 fbae 	bl	8023788 <__hi0bits>
 802302c:	1a30      	subs	r0, r6, r0
 802302e:	f8d8 6000 	ldr.w	r6, [r8]
 8023032:	42b0      	cmp	r0, r6
 8023034:	dd63      	ble.n	80230fe <__gethex+0x286>
 8023036:	1b87      	subs	r7, r0, r6
 8023038:	4639      	mov	r1, r7
 802303a:	4620      	mov	r0, r4
 802303c:	f000 ff49 	bl	8023ed2 <__any_on>
 8023040:	4682      	mov	sl, r0
 8023042:	b1a8      	cbz	r0, 8023070 <__gethex+0x1f8>
 8023044:	1e7b      	subs	r3, r7, #1
 8023046:	1159      	asrs	r1, r3, #5
 8023048:	f003 021f 	and.w	r2, r3, #31
 802304c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8023050:	f04f 0a01 	mov.w	sl, #1
 8023054:	fa0a f202 	lsl.w	r2, sl, r2
 8023058:	420a      	tst	r2, r1
 802305a:	d009      	beq.n	8023070 <__gethex+0x1f8>
 802305c:	4553      	cmp	r3, sl
 802305e:	dd05      	ble.n	802306c <__gethex+0x1f4>
 8023060:	1eb9      	subs	r1, r7, #2
 8023062:	4620      	mov	r0, r4
 8023064:	f000 ff35 	bl	8023ed2 <__any_on>
 8023068:	2800      	cmp	r0, #0
 802306a:	d145      	bne.n	80230f8 <__gethex+0x280>
 802306c:	f04f 0a02 	mov.w	sl, #2
 8023070:	4639      	mov	r1, r7
 8023072:	4620      	mov	r0, r4
 8023074:	f7ff fe99 	bl	8022daa <rshift>
 8023078:	443d      	add	r5, r7
 802307a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802307e:	42ab      	cmp	r3, r5
 8023080:	da4c      	bge.n	802311c <__gethex+0x2a4>
 8023082:	ee18 0a10 	vmov	r0, s16
 8023086:	4621      	mov	r1, r4
 8023088:	f000 fac8 	bl	802361c <_Bfree>
 802308c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802308e:	2300      	movs	r3, #0
 8023090:	6013      	str	r3, [r2, #0]
 8023092:	27a3      	movs	r7, #163	; 0xa3
 8023094:	e785      	b.n	8022fa2 <__gethex+0x12a>
 8023096:	1e73      	subs	r3, r6, #1
 8023098:	9a05      	ldr	r2, [sp, #20]
 802309a:	9303      	str	r3, [sp, #12]
 802309c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80230a0:	4293      	cmp	r3, r2
 80230a2:	d019      	beq.n	80230d8 <__gethex+0x260>
 80230a4:	f1bb 0f20 	cmp.w	fp, #32
 80230a8:	d107      	bne.n	80230ba <__gethex+0x242>
 80230aa:	9b02      	ldr	r3, [sp, #8]
 80230ac:	9a00      	ldr	r2, [sp, #0]
 80230ae:	f843 2b04 	str.w	r2, [r3], #4
 80230b2:	9302      	str	r3, [sp, #8]
 80230b4:	2300      	movs	r3, #0
 80230b6:	9300      	str	r3, [sp, #0]
 80230b8:	469b      	mov	fp, r3
 80230ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80230be:	f7ff fec6 	bl	8022e4e <__hexdig_fun>
 80230c2:	9b00      	ldr	r3, [sp, #0]
 80230c4:	f000 000f 	and.w	r0, r0, #15
 80230c8:	fa00 f00b 	lsl.w	r0, r0, fp
 80230cc:	4303      	orrs	r3, r0
 80230ce:	9300      	str	r3, [sp, #0]
 80230d0:	f10b 0b04 	add.w	fp, fp, #4
 80230d4:	9b03      	ldr	r3, [sp, #12]
 80230d6:	e00d      	b.n	80230f4 <__gethex+0x27c>
 80230d8:	9b03      	ldr	r3, [sp, #12]
 80230da:	9a06      	ldr	r2, [sp, #24]
 80230dc:	4413      	add	r3, r2
 80230de:	42bb      	cmp	r3, r7
 80230e0:	d3e0      	bcc.n	80230a4 <__gethex+0x22c>
 80230e2:	4618      	mov	r0, r3
 80230e4:	9901      	ldr	r1, [sp, #4]
 80230e6:	9307      	str	r3, [sp, #28]
 80230e8:	4652      	mov	r2, sl
 80230ea:	f7fd ff13 	bl	8020f14 <strncmp>
 80230ee:	9b07      	ldr	r3, [sp, #28]
 80230f0:	2800      	cmp	r0, #0
 80230f2:	d1d7      	bne.n	80230a4 <__gethex+0x22c>
 80230f4:	461e      	mov	r6, r3
 80230f6:	e78b      	b.n	8023010 <__gethex+0x198>
 80230f8:	f04f 0a03 	mov.w	sl, #3
 80230fc:	e7b8      	b.n	8023070 <__gethex+0x1f8>
 80230fe:	da0a      	bge.n	8023116 <__gethex+0x29e>
 8023100:	1a37      	subs	r7, r6, r0
 8023102:	4621      	mov	r1, r4
 8023104:	ee18 0a10 	vmov	r0, s16
 8023108:	463a      	mov	r2, r7
 802310a:	f000 fca3 	bl	8023a54 <__lshift>
 802310e:	1bed      	subs	r5, r5, r7
 8023110:	4604      	mov	r4, r0
 8023112:	f100 0914 	add.w	r9, r0, #20
 8023116:	f04f 0a00 	mov.w	sl, #0
 802311a:	e7ae      	b.n	802307a <__gethex+0x202>
 802311c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8023120:	42a8      	cmp	r0, r5
 8023122:	dd72      	ble.n	802320a <__gethex+0x392>
 8023124:	1b45      	subs	r5, r0, r5
 8023126:	42ae      	cmp	r6, r5
 8023128:	dc36      	bgt.n	8023198 <__gethex+0x320>
 802312a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802312e:	2b02      	cmp	r3, #2
 8023130:	d02a      	beq.n	8023188 <__gethex+0x310>
 8023132:	2b03      	cmp	r3, #3
 8023134:	d02c      	beq.n	8023190 <__gethex+0x318>
 8023136:	2b01      	cmp	r3, #1
 8023138:	d115      	bne.n	8023166 <__gethex+0x2ee>
 802313a:	42ae      	cmp	r6, r5
 802313c:	d113      	bne.n	8023166 <__gethex+0x2ee>
 802313e:	2e01      	cmp	r6, #1
 8023140:	d10b      	bne.n	802315a <__gethex+0x2e2>
 8023142:	9a04      	ldr	r2, [sp, #16]
 8023144:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8023148:	6013      	str	r3, [r2, #0]
 802314a:	2301      	movs	r3, #1
 802314c:	6123      	str	r3, [r4, #16]
 802314e:	f8c9 3000 	str.w	r3, [r9]
 8023152:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023154:	2762      	movs	r7, #98	; 0x62
 8023156:	601c      	str	r4, [r3, #0]
 8023158:	e723      	b.n	8022fa2 <__gethex+0x12a>
 802315a:	1e71      	subs	r1, r6, #1
 802315c:	4620      	mov	r0, r4
 802315e:	f000 feb8 	bl	8023ed2 <__any_on>
 8023162:	2800      	cmp	r0, #0
 8023164:	d1ed      	bne.n	8023142 <__gethex+0x2ca>
 8023166:	ee18 0a10 	vmov	r0, s16
 802316a:	4621      	mov	r1, r4
 802316c:	f000 fa56 	bl	802361c <_Bfree>
 8023170:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023172:	2300      	movs	r3, #0
 8023174:	6013      	str	r3, [r2, #0]
 8023176:	2750      	movs	r7, #80	; 0x50
 8023178:	e713      	b.n	8022fa2 <__gethex+0x12a>
 802317a:	bf00      	nop
 802317c:	08029780 	.word	0x08029780
 8023180:	080296a0 	.word	0x080296a0
 8023184:	08029714 	.word	0x08029714
 8023188:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802318a:	2b00      	cmp	r3, #0
 802318c:	d1eb      	bne.n	8023166 <__gethex+0x2ee>
 802318e:	e7d8      	b.n	8023142 <__gethex+0x2ca>
 8023190:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023192:	2b00      	cmp	r3, #0
 8023194:	d1d5      	bne.n	8023142 <__gethex+0x2ca>
 8023196:	e7e6      	b.n	8023166 <__gethex+0x2ee>
 8023198:	1e6f      	subs	r7, r5, #1
 802319a:	f1ba 0f00 	cmp.w	sl, #0
 802319e:	d131      	bne.n	8023204 <__gethex+0x38c>
 80231a0:	b127      	cbz	r7, 80231ac <__gethex+0x334>
 80231a2:	4639      	mov	r1, r7
 80231a4:	4620      	mov	r0, r4
 80231a6:	f000 fe94 	bl	8023ed2 <__any_on>
 80231aa:	4682      	mov	sl, r0
 80231ac:	117b      	asrs	r3, r7, #5
 80231ae:	2101      	movs	r1, #1
 80231b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80231b4:	f007 071f 	and.w	r7, r7, #31
 80231b8:	fa01 f707 	lsl.w	r7, r1, r7
 80231bc:	421f      	tst	r7, r3
 80231be:	4629      	mov	r1, r5
 80231c0:	4620      	mov	r0, r4
 80231c2:	bf18      	it	ne
 80231c4:	f04a 0a02 	orrne.w	sl, sl, #2
 80231c8:	1b76      	subs	r6, r6, r5
 80231ca:	f7ff fdee 	bl	8022daa <rshift>
 80231ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80231d2:	2702      	movs	r7, #2
 80231d4:	f1ba 0f00 	cmp.w	sl, #0
 80231d8:	d048      	beq.n	802326c <__gethex+0x3f4>
 80231da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80231de:	2b02      	cmp	r3, #2
 80231e0:	d015      	beq.n	802320e <__gethex+0x396>
 80231e2:	2b03      	cmp	r3, #3
 80231e4:	d017      	beq.n	8023216 <__gethex+0x39e>
 80231e6:	2b01      	cmp	r3, #1
 80231e8:	d109      	bne.n	80231fe <__gethex+0x386>
 80231ea:	f01a 0f02 	tst.w	sl, #2
 80231ee:	d006      	beq.n	80231fe <__gethex+0x386>
 80231f0:	f8d9 0000 	ldr.w	r0, [r9]
 80231f4:	ea4a 0a00 	orr.w	sl, sl, r0
 80231f8:	f01a 0f01 	tst.w	sl, #1
 80231fc:	d10e      	bne.n	802321c <__gethex+0x3a4>
 80231fe:	f047 0710 	orr.w	r7, r7, #16
 8023202:	e033      	b.n	802326c <__gethex+0x3f4>
 8023204:	f04f 0a01 	mov.w	sl, #1
 8023208:	e7d0      	b.n	80231ac <__gethex+0x334>
 802320a:	2701      	movs	r7, #1
 802320c:	e7e2      	b.n	80231d4 <__gethex+0x35c>
 802320e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023210:	f1c3 0301 	rsb	r3, r3, #1
 8023214:	9315      	str	r3, [sp, #84]	; 0x54
 8023216:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023218:	2b00      	cmp	r3, #0
 802321a:	d0f0      	beq.n	80231fe <__gethex+0x386>
 802321c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8023220:	f104 0314 	add.w	r3, r4, #20
 8023224:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8023228:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802322c:	f04f 0c00 	mov.w	ip, #0
 8023230:	4618      	mov	r0, r3
 8023232:	f853 2b04 	ldr.w	r2, [r3], #4
 8023236:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 802323a:	d01c      	beq.n	8023276 <__gethex+0x3fe>
 802323c:	3201      	adds	r2, #1
 802323e:	6002      	str	r2, [r0, #0]
 8023240:	2f02      	cmp	r7, #2
 8023242:	f104 0314 	add.w	r3, r4, #20
 8023246:	d13f      	bne.n	80232c8 <__gethex+0x450>
 8023248:	f8d8 2000 	ldr.w	r2, [r8]
 802324c:	3a01      	subs	r2, #1
 802324e:	42b2      	cmp	r2, r6
 8023250:	d10a      	bne.n	8023268 <__gethex+0x3f0>
 8023252:	1171      	asrs	r1, r6, #5
 8023254:	2201      	movs	r2, #1
 8023256:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802325a:	f006 061f 	and.w	r6, r6, #31
 802325e:	fa02 f606 	lsl.w	r6, r2, r6
 8023262:	421e      	tst	r6, r3
 8023264:	bf18      	it	ne
 8023266:	4617      	movne	r7, r2
 8023268:	f047 0720 	orr.w	r7, r7, #32
 802326c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802326e:	601c      	str	r4, [r3, #0]
 8023270:	9b04      	ldr	r3, [sp, #16]
 8023272:	601d      	str	r5, [r3, #0]
 8023274:	e695      	b.n	8022fa2 <__gethex+0x12a>
 8023276:	4299      	cmp	r1, r3
 8023278:	f843 cc04 	str.w	ip, [r3, #-4]
 802327c:	d8d8      	bhi.n	8023230 <__gethex+0x3b8>
 802327e:	68a3      	ldr	r3, [r4, #8]
 8023280:	459b      	cmp	fp, r3
 8023282:	db19      	blt.n	80232b8 <__gethex+0x440>
 8023284:	6861      	ldr	r1, [r4, #4]
 8023286:	ee18 0a10 	vmov	r0, s16
 802328a:	3101      	adds	r1, #1
 802328c:	f000 f986 	bl	802359c <_Balloc>
 8023290:	4681      	mov	r9, r0
 8023292:	b918      	cbnz	r0, 802329c <__gethex+0x424>
 8023294:	4b1a      	ldr	r3, [pc, #104]	; (8023300 <__gethex+0x488>)
 8023296:	4602      	mov	r2, r0
 8023298:	2184      	movs	r1, #132	; 0x84
 802329a:	e6a8      	b.n	8022fee <__gethex+0x176>
 802329c:	6922      	ldr	r2, [r4, #16]
 802329e:	3202      	adds	r2, #2
 80232a0:	f104 010c 	add.w	r1, r4, #12
 80232a4:	0092      	lsls	r2, r2, #2
 80232a6:	300c      	adds	r0, #12
 80232a8:	f7fc fe0e 	bl	801fec8 <memcpy>
 80232ac:	4621      	mov	r1, r4
 80232ae:	ee18 0a10 	vmov	r0, s16
 80232b2:	f000 f9b3 	bl	802361c <_Bfree>
 80232b6:	464c      	mov	r4, r9
 80232b8:	6923      	ldr	r3, [r4, #16]
 80232ba:	1c5a      	adds	r2, r3, #1
 80232bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80232c0:	6122      	str	r2, [r4, #16]
 80232c2:	2201      	movs	r2, #1
 80232c4:	615a      	str	r2, [r3, #20]
 80232c6:	e7bb      	b.n	8023240 <__gethex+0x3c8>
 80232c8:	6922      	ldr	r2, [r4, #16]
 80232ca:	455a      	cmp	r2, fp
 80232cc:	dd0b      	ble.n	80232e6 <__gethex+0x46e>
 80232ce:	2101      	movs	r1, #1
 80232d0:	4620      	mov	r0, r4
 80232d2:	f7ff fd6a 	bl	8022daa <rshift>
 80232d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80232da:	3501      	adds	r5, #1
 80232dc:	42ab      	cmp	r3, r5
 80232de:	f6ff aed0 	blt.w	8023082 <__gethex+0x20a>
 80232e2:	2701      	movs	r7, #1
 80232e4:	e7c0      	b.n	8023268 <__gethex+0x3f0>
 80232e6:	f016 061f 	ands.w	r6, r6, #31
 80232ea:	d0fa      	beq.n	80232e2 <__gethex+0x46a>
 80232ec:	449a      	add	sl, r3
 80232ee:	f1c6 0620 	rsb	r6, r6, #32
 80232f2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80232f6:	f000 fa47 	bl	8023788 <__hi0bits>
 80232fa:	42b0      	cmp	r0, r6
 80232fc:	dbe7      	blt.n	80232ce <__gethex+0x456>
 80232fe:	e7f0      	b.n	80232e2 <__gethex+0x46a>
 8023300:	080296a0 	.word	0x080296a0

08023304 <L_shift>:
 8023304:	f1c2 0208 	rsb	r2, r2, #8
 8023308:	0092      	lsls	r2, r2, #2
 802330a:	b570      	push	{r4, r5, r6, lr}
 802330c:	f1c2 0620 	rsb	r6, r2, #32
 8023310:	6843      	ldr	r3, [r0, #4]
 8023312:	6804      	ldr	r4, [r0, #0]
 8023314:	fa03 f506 	lsl.w	r5, r3, r6
 8023318:	432c      	orrs	r4, r5
 802331a:	40d3      	lsrs	r3, r2
 802331c:	6004      	str	r4, [r0, #0]
 802331e:	f840 3f04 	str.w	r3, [r0, #4]!
 8023322:	4288      	cmp	r0, r1
 8023324:	d3f4      	bcc.n	8023310 <L_shift+0xc>
 8023326:	bd70      	pop	{r4, r5, r6, pc}

08023328 <__match>:
 8023328:	b530      	push	{r4, r5, lr}
 802332a:	6803      	ldr	r3, [r0, #0]
 802332c:	3301      	adds	r3, #1
 802332e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023332:	b914      	cbnz	r4, 802333a <__match+0x12>
 8023334:	6003      	str	r3, [r0, #0]
 8023336:	2001      	movs	r0, #1
 8023338:	bd30      	pop	{r4, r5, pc}
 802333a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802333e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8023342:	2d19      	cmp	r5, #25
 8023344:	bf98      	it	ls
 8023346:	3220      	addls	r2, #32
 8023348:	42a2      	cmp	r2, r4
 802334a:	d0f0      	beq.n	802332e <__match+0x6>
 802334c:	2000      	movs	r0, #0
 802334e:	e7f3      	b.n	8023338 <__match+0x10>

08023350 <__hexnan>:
 8023350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023354:	680b      	ldr	r3, [r1, #0]
 8023356:	6801      	ldr	r1, [r0, #0]
 8023358:	115e      	asrs	r6, r3, #5
 802335a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802335e:	f013 031f 	ands.w	r3, r3, #31
 8023362:	b087      	sub	sp, #28
 8023364:	bf18      	it	ne
 8023366:	3604      	addne	r6, #4
 8023368:	2500      	movs	r5, #0
 802336a:	1f37      	subs	r7, r6, #4
 802336c:	4682      	mov	sl, r0
 802336e:	4690      	mov	r8, r2
 8023370:	9301      	str	r3, [sp, #4]
 8023372:	f846 5c04 	str.w	r5, [r6, #-4]
 8023376:	46b9      	mov	r9, r7
 8023378:	463c      	mov	r4, r7
 802337a:	9502      	str	r5, [sp, #8]
 802337c:	46ab      	mov	fp, r5
 802337e:	784a      	ldrb	r2, [r1, #1]
 8023380:	1c4b      	adds	r3, r1, #1
 8023382:	9303      	str	r3, [sp, #12]
 8023384:	b342      	cbz	r2, 80233d8 <__hexnan+0x88>
 8023386:	4610      	mov	r0, r2
 8023388:	9105      	str	r1, [sp, #20]
 802338a:	9204      	str	r2, [sp, #16]
 802338c:	f7ff fd5f 	bl	8022e4e <__hexdig_fun>
 8023390:	2800      	cmp	r0, #0
 8023392:	d14f      	bne.n	8023434 <__hexnan+0xe4>
 8023394:	9a04      	ldr	r2, [sp, #16]
 8023396:	9905      	ldr	r1, [sp, #20]
 8023398:	2a20      	cmp	r2, #32
 802339a:	d818      	bhi.n	80233ce <__hexnan+0x7e>
 802339c:	9b02      	ldr	r3, [sp, #8]
 802339e:	459b      	cmp	fp, r3
 80233a0:	dd13      	ble.n	80233ca <__hexnan+0x7a>
 80233a2:	454c      	cmp	r4, r9
 80233a4:	d206      	bcs.n	80233b4 <__hexnan+0x64>
 80233a6:	2d07      	cmp	r5, #7
 80233a8:	dc04      	bgt.n	80233b4 <__hexnan+0x64>
 80233aa:	462a      	mov	r2, r5
 80233ac:	4649      	mov	r1, r9
 80233ae:	4620      	mov	r0, r4
 80233b0:	f7ff ffa8 	bl	8023304 <L_shift>
 80233b4:	4544      	cmp	r4, r8
 80233b6:	d950      	bls.n	802345a <__hexnan+0x10a>
 80233b8:	2300      	movs	r3, #0
 80233ba:	f1a4 0904 	sub.w	r9, r4, #4
 80233be:	f844 3c04 	str.w	r3, [r4, #-4]
 80233c2:	f8cd b008 	str.w	fp, [sp, #8]
 80233c6:	464c      	mov	r4, r9
 80233c8:	461d      	mov	r5, r3
 80233ca:	9903      	ldr	r1, [sp, #12]
 80233cc:	e7d7      	b.n	802337e <__hexnan+0x2e>
 80233ce:	2a29      	cmp	r2, #41	; 0x29
 80233d0:	d156      	bne.n	8023480 <__hexnan+0x130>
 80233d2:	3102      	adds	r1, #2
 80233d4:	f8ca 1000 	str.w	r1, [sl]
 80233d8:	f1bb 0f00 	cmp.w	fp, #0
 80233dc:	d050      	beq.n	8023480 <__hexnan+0x130>
 80233de:	454c      	cmp	r4, r9
 80233e0:	d206      	bcs.n	80233f0 <__hexnan+0xa0>
 80233e2:	2d07      	cmp	r5, #7
 80233e4:	dc04      	bgt.n	80233f0 <__hexnan+0xa0>
 80233e6:	462a      	mov	r2, r5
 80233e8:	4649      	mov	r1, r9
 80233ea:	4620      	mov	r0, r4
 80233ec:	f7ff ff8a 	bl	8023304 <L_shift>
 80233f0:	4544      	cmp	r4, r8
 80233f2:	d934      	bls.n	802345e <__hexnan+0x10e>
 80233f4:	f1a8 0204 	sub.w	r2, r8, #4
 80233f8:	4623      	mov	r3, r4
 80233fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80233fe:	f842 1f04 	str.w	r1, [r2, #4]!
 8023402:	429f      	cmp	r7, r3
 8023404:	d2f9      	bcs.n	80233fa <__hexnan+0xaa>
 8023406:	1b3b      	subs	r3, r7, r4
 8023408:	f023 0303 	bic.w	r3, r3, #3
 802340c:	3304      	adds	r3, #4
 802340e:	3401      	adds	r4, #1
 8023410:	3e03      	subs	r6, #3
 8023412:	42b4      	cmp	r4, r6
 8023414:	bf88      	it	hi
 8023416:	2304      	movhi	r3, #4
 8023418:	4443      	add	r3, r8
 802341a:	2200      	movs	r2, #0
 802341c:	f843 2b04 	str.w	r2, [r3], #4
 8023420:	429f      	cmp	r7, r3
 8023422:	d2fb      	bcs.n	802341c <__hexnan+0xcc>
 8023424:	683b      	ldr	r3, [r7, #0]
 8023426:	b91b      	cbnz	r3, 8023430 <__hexnan+0xe0>
 8023428:	4547      	cmp	r7, r8
 802342a:	d127      	bne.n	802347c <__hexnan+0x12c>
 802342c:	2301      	movs	r3, #1
 802342e:	603b      	str	r3, [r7, #0]
 8023430:	2005      	movs	r0, #5
 8023432:	e026      	b.n	8023482 <__hexnan+0x132>
 8023434:	3501      	adds	r5, #1
 8023436:	2d08      	cmp	r5, #8
 8023438:	f10b 0b01 	add.w	fp, fp, #1
 802343c:	dd06      	ble.n	802344c <__hexnan+0xfc>
 802343e:	4544      	cmp	r4, r8
 8023440:	d9c3      	bls.n	80233ca <__hexnan+0x7a>
 8023442:	2300      	movs	r3, #0
 8023444:	f844 3c04 	str.w	r3, [r4, #-4]
 8023448:	2501      	movs	r5, #1
 802344a:	3c04      	subs	r4, #4
 802344c:	6822      	ldr	r2, [r4, #0]
 802344e:	f000 000f 	and.w	r0, r0, #15
 8023452:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8023456:	6022      	str	r2, [r4, #0]
 8023458:	e7b7      	b.n	80233ca <__hexnan+0x7a>
 802345a:	2508      	movs	r5, #8
 802345c:	e7b5      	b.n	80233ca <__hexnan+0x7a>
 802345e:	9b01      	ldr	r3, [sp, #4]
 8023460:	2b00      	cmp	r3, #0
 8023462:	d0df      	beq.n	8023424 <__hexnan+0xd4>
 8023464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023468:	f1c3 0320 	rsb	r3, r3, #32
 802346c:	fa22 f303 	lsr.w	r3, r2, r3
 8023470:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8023474:	401a      	ands	r2, r3
 8023476:	f846 2c04 	str.w	r2, [r6, #-4]
 802347a:	e7d3      	b.n	8023424 <__hexnan+0xd4>
 802347c:	3f04      	subs	r7, #4
 802347e:	e7d1      	b.n	8023424 <__hexnan+0xd4>
 8023480:	2004      	movs	r0, #4
 8023482:	b007      	add	sp, #28
 8023484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023488 <_localeconv_r>:
 8023488:	4800      	ldr	r0, [pc, #0]	; (802348c <_localeconv_r+0x4>)
 802348a:	4770      	bx	lr
 802348c:	2400399c 	.word	0x2400399c

08023490 <__retarget_lock_init_recursive>:
 8023490:	4770      	bx	lr

08023492 <__retarget_lock_acquire_recursive>:
 8023492:	4770      	bx	lr

08023494 <__retarget_lock_release_recursive>:
 8023494:	4770      	bx	lr

08023496 <__swhatbuf_r>:
 8023496:	b570      	push	{r4, r5, r6, lr}
 8023498:	460e      	mov	r6, r1
 802349a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802349e:	2900      	cmp	r1, #0
 80234a0:	b096      	sub	sp, #88	; 0x58
 80234a2:	4614      	mov	r4, r2
 80234a4:	461d      	mov	r5, r3
 80234a6:	da07      	bge.n	80234b8 <__swhatbuf_r+0x22>
 80234a8:	2300      	movs	r3, #0
 80234aa:	602b      	str	r3, [r5, #0]
 80234ac:	89b3      	ldrh	r3, [r6, #12]
 80234ae:	061a      	lsls	r2, r3, #24
 80234b0:	d410      	bmi.n	80234d4 <__swhatbuf_r+0x3e>
 80234b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80234b6:	e00e      	b.n	80234d6 <__swhatbuf_r+0x40>
 80234b8:	466a      	mov	r2, sp
 80234ba:	f001 f873 	bl	80245a4 <_fstat_r>
 80234be:	2800      	cmp	r0, #0
 80234c0:	dbf2      	blt.n	80234a8 <__swhatbuf_r+0x12>
 80234c2:	9a01      	ldr	r2, [sp, #4]
 80234c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80234c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80234cc:	425a      	negs	r2, r3
 80234ce:	415a      	adcs	r2, r3
 80234d0:	602a      	str	r2, [r5, #0]
 80234d2:	e7ee      	b.n	80234b2 <__swhatbuf_r+0x1c>
 80234d4:	2340      	movs	r3, #64	; 0x40
 80234d6:	2000      	movs	r0, #0
 80234d8:	6023      	str	r3, [r4, #0]
 80234da:	b016      	add	sp, #88	; 0x58
 80234dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080234e0 <__smakebuf_r>:
 80234e0:	898b      	ldrh	r3, [r1, #12]
 80234e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80234e4:	079d      	lsls	r5, r3, #30
 80234e6:	4606      	mov	r6, r0
 80234e8:	460c      	mov	r4, r1
 80234ea:	d507      	bpl.n	80234fc <__smakebuf_r+0x1c>
 80234ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80234f0:	6023      	str	r3, [r4, #0]
 80234f2:	6123      	str	r3, [r4, #16]
 80234f4:	2301      	movs	r3, #1
 80234f6:	6163      	str	r3, [r4, #20]
 80234f8:	b002      	add	sp, #8
 80234fa:	bd70      	pop	{r4, r5, r6, pc}
 80234fc:	ab01      	add	r3, sp, #4
 80234fe:	466a      	mov	r2, sp
 8023500:	f7ff ffc9 	bl	8023496 <__swhatbuf_r>
 8023504:	9900      	ldr	r1, [sp, #0]
 8023506:	4605      	mov	r5, r0
 8023508:	4630      	mov	r0, r6
 802350a:	f7fc fd5d 	bl	801ffc8 <_malloc_r>
 802350e:	b948      	cbnz	r0, 8023524 <__smakebuf_r+0x44>
 8023510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023514:	059a      	lsls	r2, r3, #22
 8023516:	d4ef      	bmi.n	80234f8 <__smakebuf_r+0x18>
 8023518:	f023 0303 	bic.w	r3, r3, #3
 802351c:	f043 0302 	orr.w	r3, r3, #2
 8023520:	81a3      	strh	r3, [r4, #12]
 8023522:	e7e3      	b.n	80234ec <__smakebuf_r+0xc>
 8023524:	4b0d      	ldr	r3, [pc, #52]	; (802355c <__smakebuf_r+0x7c>)
 8023526:	62b3      	str	r3, [r6, #40]	; 0x28
 8023528:	89a3      	ldrh	r3, [r4, #12]
 802352a:	6020      	str	r0, [r4, #0]
 802352c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023530:	81a3      	strh	r3, [r4, #12]
 8023532:	9b00      	ldr	r3, [sp, #0]
 8023534:	6163      	str	r3, [r4, #20]
 8023536:	9b01      	ldr	r3, [sp, #4]
 8023538:	6120      	str	r0, [r4, #16]
 802353a:	b15b      	cbz	r3, 8023554 <__smakebuf_r+0x74>
 802353c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023540:	4630      	mov	r0, r6
 8023542:	f001 f841 	bl	80245c8 <_isatty_r>
 8023546:	b128      	cbz	r0, 8023554 <__smakebuf_r+0x74>
 8023548:	89a3      	ldrh	r3, [r4, #12]
 802354a:	f023 0303 	bic.w	r3, r3, #3
 802354e:	f043 0301 	orr.w	r3, r3, #1
 8023552:	81a3      	strh	r3, [r4, #12]
 8023554:	89a0      	ldrh	r0, [r4, #12]
 8023556:	4305      	orrs	r5, r0
 8023558:	81a5      	strh	r5, [r4, #12]
 802355a:	e7cd      	b.n	80234f8 <__smakebuf_r+0x18>
 802355c:	08022be5 	.word	0x08022be5

08023560 <__ascii_mbtowc>:
 8023560:	b082      	sub	sp, #8
 8023562:	b901      	cbnz	r1, 8023566 <__ascii_mbtowc+0x6>
 8023564:	a901      	add	r1, sp, #4
 8023566:	b142      	cbz	r2, 802357a <__ascii_mbtowc+0x1a>
 8023568:	b14b      	cbz	r3, 802357e <__ascii_mbtowc+0x1e>
 802356a:	7813      	ldrb	r3, [r2, #0]
 802356c:	600b      	str	r3, [r1, #0]
 802356e:	7812      	ldrb	r2, [r2, #0]
 8023570:	1e10      	subs	r0, r2, #0
 8023572:	bf18      	it	ne
 8023574:	2001      	movne	r0, #1
 8023576:	b002      	add	sp, #8
 8023578:	4770      	bx	lr
 802357a:	4610      	mov	r0, r2
 802357c:	e7fb      	b.n	8023576 <__ascii_mbtowc+0x16>
 802357e:	f06f 0001 	mvn.w	r0, #1
 8023582:	e7f8      	b.n	8023576 <__ascii_mbtowc+0x16>

08023584 <__malloc_lock>:
 8023584:	4801      	ldr	r0, [pc, #4]	; (802358c <__malloc_lock+0x8>)
 8023586:	f7ff bf84 	b.w	8023492 <__retarget_lock_acquire_recursive>
 802358a:	bf00      	nop
 802358c:	2400d6d0 	.word	0x2400d6d0

08023590 <__malloc_unlock>:
 8023590:	4801      	ldr	r0, [pc, #4]	; (8023598 <__malloc_unlock+0x8>)
 8023592:	f7ff bf7f 	b.w	8023494 <__retarget_lock_release_recursive>
 8023596:	bf00      	nop
 8023598:	2400d6d0 	.word	0x2400d6d0

0802359c <_Balloc>:
 802359c:	b570      	push	{r4, r5, r6, lr}
 802359e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80235a0:	4604      	mov	r4, r0
 80235a2:	460d      	mov	r5, r1
 80235a4:	b976      	cbnz	r6, 80235c4 <_Balloc+0x28>
 80235a6:	2010      	movs	r0, #16
 80235a8:	f7fc fc78 	bl	801fe9c <malloc>
 80235ac:	4602      	mov	r2, r0
 80235ae:	6260      	str	r0, [r4, #36]	; 0x24
 80235b0:	b920      	cbnz	r0, 80235bc <_Balloc+0x20>
 80235b2:	4b18      	ldr	r3, [pc, #96]	; (8023614 <_Balloc+0x78>)
 80235b4:	4818      	ldr	r0, [pc, #96]	; (8023618 <_Balloc+0x7c>)
 80235b6:	2166      	movs	r1, #102	; 0x66
 80235b8:	f7fe fbfc 	bl	8021db4 <__assert_func>
 80235bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80235c0:	6006      	str	r6, [r0, #0]
 80235c2:	60c6      	str	r6, [r0, #12]
 80235c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80235c6:	68f3      	ldr	r3, [r6, #12]
 80235c8:	b183      	cbz	r3, 80235ec <_Balloc+0x50>
 80235ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80235cc:	68db      	ldr	r3, [r3, #12]
 80235ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80235d2:	b9b8      	cbnz	r0, 8023604 <_Balloc+0x68>
 80235d4:	2101      	movs	r1, #1
 80235d6:	fa01 f605 	lsl.w	r6, r1, r5
 80235da:	1d72      	adds	r2, r6, #5
 80235dc:	0092      	lsls	r2, r2, #2
 80235de:	4620      	mov	r0, r4
 80235e0:	f000 fc98 	bl	8023f14 <_calloc_r>
 80235e4:	b160      	cbz	r0, 8023600 <_Balloc+0x64>
 80235e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80235ea:	e00e      	b.n	802360a <_Balloc+0x6e>
 80235ec:	2221      	movs	r2, #33	; 0x21
 80235ee:	2104      	movs	r1, #4
 80235f0:	4620      	mov	r0, r4
 80235f2:	f000 fc8f 	bl	8023f14 <_calloc_r>
 80235f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80235f8:	60f0      	str	r0, [r6, #12]
 80235fa:	68db      	ldr	r3, [r3, #12]
 80235fc:	2b00      	cmp	r3, #0
 80235fe:	d1e4      	bne.n	80235ca <_Balloc+0x2e>
 8023600:	2000      	movs	r0, #0
 8023602:	bd70      	pop	{r4, r5, r6, pc}
 8023604:	6802      	ldr	r2, [r0, #0]
 8023606:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802360a:	2300      	movs	r3, #0
 802360c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023610:	e7f7      	b.n	8023602 <_Balloc+0x66>
 8023612:	bf00      	nop
 8023614:	0802952d 	.word	0x0802952d
 8023618:	08029794 	.word	0x08029794

0802361c <_Bfree>:
 802361c:	b570      	push	{r4, r5, r6, lr}
 802361e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023620:	4605      	mov	r5, r0
 8023622:	460c      	mov	r4, r1
 8023624:	b976      	cbnz	r6, 8023644 <_Bfree+0x28>
 8023626:	2010      	movs	r0, #16
 8023628:	f7fc fc38 	bl	801fe9c <malloc>
 802362c:	4602      	mov	r2, r0
 802362e:	6268      	str	r0, [r5, #36]	; 0x24
 8023630:	b920      	cbnz	r0, 802363c <_Bfree+0x20>
 8023632:	4b09      	ldr	r3, [pc, #36]	; (8023658 <_Bfree+0x3c>)
 8023634:	4809      	ldr	r0, [pc, #36]	; (802365c <_Bfree+0x40>)
 8023636:	218a      	movs	r1, #138	; 0x8a
 8023638:	f7fe fbbc 	bl	8021db4 <__assert_func>
 802363c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023640:	6006      	str	r6, [r0, #0]
 8023642:	60c6      	str	r6, [r0, #12]
 8023644:	b13c      	cbz	r4, 8023656 <_Bfree+0x3a>
 8023646:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8023648:	6862      	ldr	r2, [r4, #4]
 802364a:	68db      	ldr	r3, [r3, #12]
 802364c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023650:	6021      	str	r1, [r4, #0]
 8023652:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8023656:	bd70      	pop	{r4, r5, r6, pc}
 8023658:	0802952d 	.word	0x0802952d
 802365c:	08029794 	.word	0x08029794

08023660 <__multadd>:
 8023660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023664:	690e      	ldr	r6, [r1, #16]
 8023666:	4607      	mov	r7, r0
 8023668:	4698      	mov	r8, r3
 802366a:	460c      	mov	r4, r1
 802366c:	f101 0014 	add.w	r0, r1, #20
 8023670:	2300      	movs	r3, #0
 8023672:	6805      	ldr	r5, [r0, #0]
 8023674:	b2a9      	uxth	r1, r5
 8023676:	fb02 8101 	mla	r1, r2, r1, r8
 802367a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802367e:	0c2d      	lsrs	r5, r5, #16
 8023680:	fb02 c505 	mla	r5, r2, r5, ip
 8023684:	b289      	uxth	r1, r1
 8023686:	3301      	adds	r3, #1
 8023688:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 802368c:	429e      	cmp	r6, r3
 802368e:	f840 1b04 	str.w	r1, [r0], #4
 8023692:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8023696:	dcec      	bgt.n	8023672 <__multadd+0x12>
 8023698:	f1b8 0f00 	cmp.w	r8, #0
 802369c:	d022      	beq.n	80236e4 <__multadd+0x84>
 802369e:	68a3      	ldr	r3, [r4, #8]
 80236a0:	42b3      	cmp	r3, r6
 80236a2:	dc19      	bgt.n	80236d8 <__multadd+0x78>
 80236a4:	6861      	ldr	r1, [r4, #4]
 80236a6:	4638      	mov	r0, r7
 80236a8:	3101      	adds	r1, #1
 80236aa:	f7ff ff77 	bl	802359c <_Balloc>
 80236ae:	4605      	mov	r5, r0
 80236b0:	b928      	cbnz	r0, 80236be <__multadd+0x5e>
 80236b2:	4602      	mov	r2, r0
 80236b4:	4b0d      	ldr	r3, [pc, #52]	; (80236ec <__multadd+0x8c>)
 80236b6:	480e      	ldr	r0, [pc, #56]	; (80236f0 <__multadd+0x90>)
 80236b8:	21b5      	movs	r1, #181	; 0xb5
 80236ba:	f7fe fb7b 	bl	8021db4 <__assert_func>
 80236be:	6922      	ldr	r2, [r4, #16]
 80236c0:	3202      	adds	r2, #2
 80236c2:	f104 010c 	add.w	r1, r4, #12
 80236c6:	0092      	lsls	r2, r2, #2
 80236c8:	300c      	adds	r0, #12
 80236ca:	f7fc fbfd 	bl	801fec8 <memcpy>
 80236ce:	4621      	mov	r1, r4
 80236d0:	4638      	mov	r0, r7
 80236d2:	f7ff ffa3 	bl	802361c <_Bfree>
 80236d6:	462c      	mov	r4, r5
 80236d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80236dc:	3601      	adds	r6, #1
 80236de:	f8c3 8014 	str.w	r8, [r3, #20]
 80236e2:	6126      	str	r6, [r4, #16]
 80236e4:	4620      	mov	r0, r4
 80236e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80236ea:	bf00      	nop
 80236ec:	080296a0 	.word	0x080296a0
 80236f0:	08029794 	.word	0x08029794

080236f4 <__s2b>:
 80236f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80236f8:	460c      	mov	r4, r1
 80236fa:	4615      	mov	r5, r2
 80236fc:	461f      	mov	r7, r3
 80236fe:	2209      	movs	r2, #9
 8023700:	3308      	adds	r3, #8
 8023702:	4606      	mov	r6, r0
 8023704:	fb93 f3f2 	sdiv	r3, r3, r2
 8023708:	2100      	movs	r1, #0
 802370a:	2201      	movs	r2, #1
 802370c:	429a      	cmp	r2, r3
 802370e:	db09      	blt.n	8023724 <__s2b+0x30>
 8023710:	4630      	mov	r0, r6
 8023712:	f7ff ff43 	bl	802359c <_Balloc>
 8023716:	b940      	cbnz	r0, 802372a <__s2b+0x36>
 8023718:	4602      	mov	r2, r0
 802371a:	4b19      	ldr	r3, [pc, #100]	; (8023780 <__s2b+0x8c>)
 802371c:	4819      	ldr	r0, [pc, #100]	; (8023784 <__s2b+0x90>)
 802371e:	21ce      	movs	r1, #206	; 0xce
 8023720:	f7fe fb48 	bl	8021db4 <__assert_func>
 8023724:	0052      	lsls	r2, r2, #1
 8023726:	3101      	adds	r1, #1
 8023728:	e7f0      	b.n	802370c <__s2b+0x18>
 802372a:	9b08      	ldr	r3, [sp, #32]
 802372c:	6143      	str	r3, [r0, #20]
 802372e:	2d09      	cmp	r5, #9
 8023730:	f04f 0301 	mov.w	r3, #1
 8023734:	6103      	str	r3, [r0, #16]
 8023736:	dd16      	ble.n	8023766 <__s2b+0x72>
 8023738:	f104 0909 	add.w	r9, r4, #9
 802373c:	46c8      	mov	r8, r9
 802373e:	442c      	add	r4, r5
 8023740:	f818 3b01 	ldrb.w	r3, [r8], #1
 8023744:	4601      	mov	r1, r0
 8023746:	3b30      	subs	r3, #48	; 0x30
 8023748:	220a      	movs	r2, #10
 802374a:	4630      	mov	r0, r6
 802374c:	f7ff ff88 	bl	8023660 <__multadd>
 8023750:	45a0      	cmp	r8, r4
 8023752:	d1f5      	bne.n	8023740 <__s2b+0x4c>
 8023754:	f1a5 0408 	sub.w	r4, r5, #8
 8023758:	444c      	add	r4, r9
 802375a:	1b2d      	subs	r5, r5, r4
 802375c:	1963      	adds	r3, r4, r5
 802375e:	42bb      	cmp	r3, r7
 8023760:	db04      	blt.n	802376c <__s2b+0x78>
 8023762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023766:	340a      	adds	r4, #10
 8023768:	2509      	movs	r5, #9
 802376a:	e7f6      	b.n	802375a <__s2b+0x66>
 802376c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023770:	4601      	mov	r1, r0
 8023772:	3b30      	subs	r3, #48	; 0x30
 8023774:	220a      	movs	r2, #10
 8023776:	4630      	mov	r0, r6
 8023778:	f7ff ff72 	bl	8023660 <__multadd>
 802377c:	e7ee      	b.n	802375c <__s2b+0x68>
 802377e:	bf00      	nop
 8023780:	080296a0 	.word	0x080296a0
 8023784:	08029794 	.word	0x08029794

08023788 <__hi0bits>:
 8023788:	0c03      	lsrs	r3, r0, #16
 802378a:	041b      	lsls	r3, r3, #16
 802378c:	b9d3      	cbnz	r3, 80237c4 <__hi0bits+0x3c>
 802378e:	0400      	lsls	r0, r0, #16
 8023790:	2310      	movs	r3, #16
 8023792:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8023796:	bf04      	itt	eq
 8023798:	0200      	lsleq	r0, r0, #8
 802379a:	3308      	addeq	r3, #8
 802379c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80237a0:	bf04      	itt	eq
 80237a2:	0100      	lsleq	r0, r0, #4
 80237a4:	3304      	addeq	r3, #4
 80237a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80237aa:	bf04      	itt	eq
 80237ac:	0080      	lsleq	r0, r0, #2
 80237ae:	3302      	addeq	r3, #2
 80237b0:	2800      	cmp	r0, #0
 80237b2:	db05      	blt.n	80237c0 <__hi0bits+0x38>
 80237b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80237b8:	f103 0301 	add.w	r3, r3, #1
 80237bc:	bf08      	it	eq
 80237be:	2320      	moveq	r3, #32
 80237c0:	4618      	mov	r0, r3
 80237c2:	4770      	bx	lr
 80237c4:	2300      	movs	r3, #0
 80237c6:	e7e4      	b.n	8023792 <__hi0bits+0xa>

080237c8 <__lo0bits>:
 80237c8:	6803      	ldr	r3, [r0, #0]
 80237ca:	f013 0207 	ands.w	r2, r3, #7
 80237ce:	4601      	mov	r1, r0
 80237d0:	d00b      	beq.n	80237ea <__lo0bits+0x22>
 80237d2:	07da      	lsls	r2, r3, #31
 80237d4:	d424      	bmi.n	8023820 <__lo0bits+0x58>
 80237d6:	0798      	lsls	r0, r3, #30
 80237d8:	bf49      	itett	mi
 80237da:	085b      	lsrmi	r3, r3, #1
 80237dc:	089b      	lsrpl	r3, r3, #2
 80237de:	2001      	movmi	r0, #1
 80237e0:	600b      	strmi	r3, [r1, #0]
 80237e2:	bf5c      	itt	pl
 80237e4:	600b      	strpl	r3, [r1, #0]
 80237e6:	2002      	movpl	r0, #2
 80237e8:	4770      	bx	lr
 80237ea:	b298      	uxth	r0, r3
 80237ec:	b9b0      	cbnz	r0, 802381c <__lo0bits+0x54>
 80237ee:	0c1b      	lsrs	r3, r3, #16
 80237f0:	2010      	movs	r0, #16
 80237f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80237f6:	bf04      	itt	eq
 80237f8:	0a1b      	lsreq	r3, r3, #8
 80237fa:	3008      	addeq	r0, #8
 80237fc:	071a      	lsls	r2, r3, #28
 80237fe:	bf04      	itt	eq
 8023800:	091b      	lsreq	r3, r3, #4
 8023802:	3004      	addeq	r0, #4
 8023804:	079a      	lsls	r2, r3, #30
 8023806:	bf04      	itt	eq
 8023808:	089b      	lsreq	r3, r3, #2
 802380a:	3002      	addeq	r0, #2
 802380c:	07da      	lsls	r2, r3, #31
 802380e:	d403      	bmi.n	8023818 <__lo0bits+0x50>
 8023810:	085b      	lsrs	r3, r3, #1
 8023812:	f100 0001 	add.w	r0, r0, #1
 8023816:	d005      	beq.n	8023824 <__lo0bits+0x5c>
 8023818:	600b      	str	r3, [r1, #0]
 802381a:	4770      	bx	lr
 802381c:	4610      	mov	r0, r2
 802381e:	e7e8      	b.n	80237f2 <__lo0bits+0x2a>
 8023820:	2000      	movs	r0, #0
 8023822:	4770      	bx	lr
 8023824:	2020      	movs	r0, #32
 8023826:	4770      	bx	lr

08023828 <__i2b>:
 8023828:	b510      	push	{r4, lr}
 802382a:	460c      	mov	r4, r1
 802382c:	2101      	movs	r1, #1
 802382e:	f7ff feb5 	bl	802359c <_Balloc>
 8023832:	4602      	mov	r2, r0
 8023834:	b928      	cbnz	r0, 8023842 <__i2b+0x1a>
 8023836:	4b05      	ldr	r3, [pc, #20]	; (802384c <__i2b+0x24>)
 8023838:	4805      	ldr	r0, [pc, #20]	; (8023850 <__i2b+0x28>)
 802383a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802383e:	f7fe fab9 	bl	8021db4 <__assert_func>
 8023842:	2301      	movs	r3, #1
 8023844:	6144      	str	r4, [r0, #20]
 8023846:	6103      	str	r3, [r0, #16]
 8023848:	bd10      	pop	{r4, pc}
 802384a:	bf00      	nop
 802384c:	080296a0 	.word	0x080296a0
 8023850:	08029794 	.word	0x08029794

08023854 <__multiply>:
 8023854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023858:	4614      	mov	r4, r2
 802385a:	690a      	ldr	r2, [r1, #16]
 802385c:	6923      	ldr	r3, [r4, #16]
 802385e:	429a      	cmp	r2, r3
 8023860:	bfb8      	it	lt
 8023862:	460b      	movlt	r3, r1
 8023864:	460d      	mov	r5, r1
 8023866:	bfbc      	itt	lt
 8023868:	4625      	movlt	r5, r4
 802386a:	461c      	movlt	r4, r3
 802386c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8023870:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023874:	68ab      	ldr	r3, [r5, #8]
 8023876:	6869      	ldr	r1, [r5, #4]
 8023878:	eb0a 0709 	add.w	r7, sl, r9
 802387c:	42bb      	cmp	r3, r7
 802387e:	b085      	sub	sp, #20
 8023880:	bfb8      	it	lt
 8023882:	3101      	addlt	r1, #1
 8023884:	f7ff fe8a 	bl	802359c <_Balloc>
 8023888:	b930      	cbnz	r0, 8023898 <__multiply+0x44>
 802388a:	4602      	mov	r2, r0
 802388c:	4b42      	ldr	r3, [pc, #264]	; (8023998 <__multiply+0x144>)
 802388e:	4843      	ldr	r0, [pc, #268]	; (802399c <__multiply+0x148>)
 8023890:	f240 115d 	movw	r1, #349	; 0x15d
 8023894:	f7fe fa8e 	bl	8021db4 <__assert_func>
 8023898:	f100 0614 	add.w	r6, r0, #20
 802389c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80238a0:	4633      	mov	r3, r6
 80238a2:	2200      	movs	r2, #0
 80238a4:	4543      	cmp	r3, r8
 80238a6:	d31e      	bcc.n	80238e6 <__multiply+0x92>
 80238a8:	f105 0c14 	add.w	ip, r5, #20
 80238ac:	f104 0314 	add.w	r3, r4, #20
 80238b0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80238b4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80238b8:	9202      	str	r2, [sp, #8]
 80238ba:	ebac 0205 	sub.w	r2, ip, r5
 80238be:	3a15      	subs	r2, #21
 80238c0:	f022 0203 	bic.w	r2, r2, #3
 80238c4:	3204      	adds	r2, #4
 80238c6:	f105 0115 	add.w	r1, r5, #21
 80238ca:	458c      	cmp	ip, r1
 80238cc:	bf38      	it	cc
 80238ce:	2204      	movcc	r2, #4
 80238d0:	9201      	str	r2, [sp, #4]
 80238d2:	9a02      	ldr	r2, [sp, #8]
 80238d4:	9303      	str	r3, [sp, #12]
 80238d6:	429a      	cmp	r2, r3
 80238d8:	d808      	bhi.n	80238ec <__multiply+0x98>
 80238da:	2f00      	cmp	r7, #0
 80238dc:	dc55      	bgt.n	802398a <__multiply+0x136>
 80238de:	6107      	str	r7, [r0, #16]
 80238e0:	b005      	add	sp, #20
 80238e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238e6:	f843 2b04 	str.w	r2, [r3], #4
 80238ea:	e7db      	b.n	80238a4 <__multiply+0x50>
 80238ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80238f0:	f1ba 0f00 	cmp.w	sl, #0
 80238f4:	d020      	beq.n	8023938 <__multiply+0xe4>
 80238f6:	f105 0e14 	add.w	lr, r5, #20
 80238fa:	46b1      	mov	r9, r6
 80238fc:	2200      	movs	r2, #0
 80238fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8023902:	f8d9 b000 	ldr.w	fp, [r9]
 8023906:	b2a1      	uxth	r1, r4
 8023908:	fa1f fb8b 	uxth.w	fp, fp
 802390c:	fb0a b101 	mla	r1, sl, r1, fp
 8023910:	4411      	add	r1, r2
 8023912:	f8d9 2000 	ldr.w	r2, [r9]
 8023916:	0c24      	lsrs	r4, r4, #16
 8023918:	0c12      	lsrs	r2, r2, #16
 802391a:	fb0a 2404 	mla	r4, sl, r4, r2
 802391e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8023922:	b289      	uxth	r1, r1
 8023924:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8023928:	45f4      	cmp	ip, lr
 802392a:	f849 1b04 	str.w	r1, [r9], #4
 802392e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8023932:	d8e4      	bhi.n	80238fe <__multiply+0xaa>
 8023934:	9901      	ldr	r1, [sp, #4]
 8023936:	5072      	str	r2, [r6, r1]
 8023938:	9a03      	ldr	r2, [sp, #12]
 802393a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802393e:	3304      	adds	r3, #4
 8023940:	f1b9 0f00 	cmp.w	r9, #0
 8023944:	d01f      	beq.n	8023986 <__multiply+0x132>
 8023946:	6834      	ldr	r4, [r6, #0]
 8023948:	f105 0114 	add.w	r1, r5, #20
 802394c:	46b6      	mov	lr, r6
 802394e:	f04f 0a00 	mov.w	sl, #0
 8023952:	880a      	ldrh	r2, [r1, #0]
 8023954:	f8be b002 	ldrh.w	fp, [lr, #2]
 8023958:	fb09 b202 	mla	r2, r9, r2, fp
 802395c:	4492      	add	sl, r2
 802395e:	b2a4      	uxth	r4, r4
 8023960:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8023964:	f84e 4b04 	str.w	r4, [lr], #4
 8023968:	f851 4b04 	ldr.w	r4, [r1], #4
 802396c:	f8be 2000 	ldrh.w	r2, [lr]
 8023970:	0c24      	lsrs	r4, r4, #16
 8023972:	fb09 2404 	mla	r4, r9, r4, r2
 8023976:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802397a:	458c      	cmp	ip, r1
 802397c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8023980:	d8e7      	bhi.n	8023952 <__multiply+0xfe>
 8023982:	9a01      	ldr	r2, [sp, #4]
 8023984:	50b4      	str	r4, [r6, r2]
 8023986:	3604      	adds	r6, #4
 8023988:	e7a3      	b.n	80238d2 <__multiply+0x7e>
 802398a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802398e:	2b00      	cmp	r3, #0
 8023990:	d1a5      	bne.n	80238de <__multiply+0x8a>
 8023992:	3f01      	subs	r7, #1
 8023994:	e7a1      	b.n	80238da <__multiply+0x86>
 8023996:	bf00      	nop
 8023998:	080296a0 	.word	0x080296a0
 802399c:	08029794 	.word	0x08029794

080239a0 <__pow5mult>:
 80239a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80239a4:	4615      	mov	r5, r2
 80239a6:	f012 0203 	ands.w	r2, r2, #3
 80239aa:	4606      	mov	r6, r0
 80239ac:	460f      	mov	r7, r1
 80239ae:	d007      	beq.n	80239c0 <__pow5mult+0x20>
 80239b0:	4c25      	ldr	r4, [pc, #148]	; (8023a48 <__pow5mult+0xa8>)
 80239b2:	3a01      	subs	r2, #1
 80239b4:	2300      	movs	r3, #0
 80239b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80239ba:	f7ff fe51 	bl	8023660 <__multadd>
 80239be:	4607      	mov	r7, r0
 80239c0:	10ad      	asrs	r5, r5, #2
 80239c2:	d03d      	beq.n	8023a40 <__pow5mult+0xa0>
 80239c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80239c6:	b97c      	cbnz	r4, 80239e8 <__pow5mult+0x48>
 80239c8:	2010      	movs	r0, #16
 80239ca:	f7fc fa67 	bl	801fe9c <malloc>
 80239ce:	4602      	mov	r2, r0
 80239d0:	6270      	str	r0, [r6, #36]	; 0x24
 80239d2:	b928      	cbnz	r0, 80239e0 <__pow5mult+0x40>
 80239d4:	4b1d      	ldr	r3, [pc, #116]	; (8023a4c <__pow5mult+0xac>)
 80239d6:	481e      	ldr	r0, [pc, #120]	; (8023a50 <__pow5mult+0xb0>)
 80239d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80239dc:	f7fe f9ea 	bl	8021db4 <__assert_func>
 80239e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80239e4:	6004      	str	r4, [r0, #0]
 80239e6:	60c4      	str	r4, [r0, #12]
 80239e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80239ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80239f0:	b94c      	cbnz	r4, 8023a06 <__pow5mult+0x66>
 80239f2:	f240 2171 	movw	r1, #625	; 0x271
 80239f6:	4630      	mov	r0, r6
 80239f8:	f7ff ff16 	bl	8023828 <__i2b>
 80239fc:	2300      	movs	r3, #0
 80239fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8023a02:	4604      	mov	r4, r0
 8023a04:	6003      	str	r3, [r0, #0]
 8023a06:	f04f 0900 	mov.w	r9, #0
 8023a0a:	07eb      	lsls	r3, r5, #31
 8023a0c:	d50a      	bpl.n	8023a24 <__pow5mult+0x84>
 8023a0e:	4639      	mov	r1, r7
 8023a10:	4622      	mov	r2, r4
 8023a12:	4630      	mov	r0, r6
 8023a14:	f7ff ff1e 	bl	8023854 <__multiply>
 8023a18:	4639      	mov	r1, r7
 8023a1a:	4680      	mov	r8, r0
 8023a1c:	4630      	mov	r0, r6
 8023a1e:	f7ff fdfd 	bl	802361c <_Bfree>
 8023a22:	4647      	mov	r7, r8
 8023a24:	106d      	asrs	r5, r5, #1
 8023a26:	d00b      	beq.n	8023a40 <__pow5mult+0xa0>
 8023a28:	6820      	ldr	r0, [r4, #0]
 8023a2a:	b938      	cbnz	r0, 8023a3c <__pow5mult+0x9c>
 8023a2c:	4622      	mov	r2, r4
 8023a2e:	4621      	mov	r1, r4
 8023a30:	4630      	mov	r0, r6
 8023a32:	f7ff ff0f 	bl	8023854 <__multiply>
 8023a36:	6020      	str	r0, [r4, #0]
 8023a38:	f8c0 9000 	str.w	r9, [r0]
 8023a3c:	4604      	mov	r4, r0
 8023a3e:	e7e4      	b.n	8023a0a <__pow5mult+0x6a>
 8023a40:	4638      	mov	r0, r7
 8023a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023a46:	bf00      	nop
 8023a48:	080298e8 	.word	0x080298e8
 8023a4c:	0802952d 	.word	0x0802952d
 8023a50:	08029794 	.word	0x08029794

08023a54 <__lshift>:
 8023a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023a58:	460c      	mov	r4, r1
 8023a5a:	6849      	ldr	r1, [r1, #4]
 8023a5c:	6923      	ldr	r3, [r4, #16]
 8023a5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8023a62:	68a3      	ldr	r3, [r4, #8]
 8023a64:	4607      	mov	r7, r0
 8023a66:	4691      	mov	r9, r2
 8023a68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8023a6c:	f108 0601 	add.w	r6, r8, #1
 8023a70:	42b3      	cmp	r3, r6
 8023a72:	db0b      	blt.n	8023a8c <__lshift+0x38>
 8023a74:	4638      	mov	r0, r7
 8023a76:	f7ff fd91 	bl	802359c <_Balloc>
 8023a7a:	4605      	mov	r5, r0
 8023a7c:	b948      	cbnz	r0, 8023a92 <__lshift+0x3e>
 8023a7e:	4602      	mov	r2, r0
 8023a80:	4b28      	ldr	r3, [pc, #160]	; (8023b24 <__lshift+0xd0>)
 8023a82:	4829      	ldr	r0, [pc, #164]	; (8023b28 <__lshift+0xd4>)
 8023a84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8023a88:	f7fe f994 	bl	8021db4 <__assert_func>
 8023a8c:	3101      	adds	r1, #1
 8023a8e:	005b      	lsls	r3, r3, #1
 8023a90:	e7ee      	b.n	8023a70 <__lshift+0x1c>
 8023a92:	2300      	movs	r3, #0
 8023a94:	f100 0114 	add.w	r1, r0, #20
 8023a98:	f100 0210 	add.w	r2, r0, #16
 8023a9c:	4618      	mov	r0, r3
 8023a9e:	4553      	cmp	r3, sl
 8023aa0:	db33      	blt.n	8023b0a <__lshift+0xb6>
 8023aa2:	6920      	ldr	r0, [r4, #16]
 8023aa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8023aa8:	f104 0314 	add.w	r3, r4, #20
 8023aac:	f019 091f 	ands.w	r9, r9, #31
 8023ab0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8023ab4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8023ab8:	d02b      	beq.n	8023b12 <__lshift+0xbe>
 8023aba:	f1c9 0e20 	rsb	lr, r9, #32
 8023abe:	468a      	mov	sl, r1
 8023ac0:	2200      	movs	r2, #0
 8023ac2:	6818      	ldr	r0, [r3, #0]
 8023ac4:	fa00 f009 	lsl.w	r0, r0, r9
 8023ac8:	4302      	orrs	r2, r0
 8023aca:	f84a 2b04 	str.w	r2, [sl], #4
 8023ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8023ad2:	459c      	cmp	ip, r3
 8023ad4:	fa22 f20e 	lsr.w	r2, r2, lr
 8023ad8:	d8f3      	bhi.n	8023ac2 <__lshift+0x6e>
 8023ada:	ebac 0304 	sub.w	r3, ip, r4
 8023ade:	3b15      	subs	r3, #21
 8023ae0:	f023 0303 	bic.w	r3, r3, #3
 8023ae4:	3304      	adds	r3, #4
 8023ae6:	f104 0015 	add.w	r0, r4, #21
 8023aea:	4584      	cmp	ip, r0
 8023aec:	bf38      	it	cc
 8023aee:	2304      	movcc	r3, #4
 8023af0:	50ca      	str	r2, [r1, r3]
 8023af2:	b10a      	cbz	r2, 8023af8 <__lshift+0xa4>
 8023af4:	f108 0602 	add.w	r6, r8, #2
 8023af8:	3e01      	subs	r6, #1
 8023afa:	4638      	mov	r0, r7
 8023afc:	612e      	str	r6, [r5, #16]
 8023afe:	4621      	mov	r1, r4
 8023b00:	f7ff fd8c 	bl	802361c <_Bfree>
 8023b04:	4628      	mov	r0, r5
 8023b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8023b0e:	3301      	adds	r3, #1
 8023b10:	e7c5      	b.n	8023a9e <__lshift+0x4a>
 8023b12:	3904      	subs	r1, #4
 8023b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8023b18:	f841 2f04 	str.w	r2, [r1, #4]!
 8023b1c:	459c      	cmp	ip, r3
 8023b1e:	d8f9      	bhi.n	8023b14 <__lshift+0xc0>
 8023b20:	e7ea      	b.n	8023af8 <__lshift+0xa4>
 8023b22:	bf00      	nop
 8023b24:	080296a0 	.word	0x080296a0
 8023b28:	08029794 	.word	0x08029794

08023b2c <__mcmp>:
 8023b2c:	b530      	push	{r4, r5, lr}
 8023b2e:	6902      	ldr	r2, [r0, #16]
 8023b30:	690c      	ldr	r4, [r1, #16]
 8023b32:	1b12      	subs	r2, r2, r4
 8023b34:	d10e      	bne.n	8023b54 <__mcmp+0x28>
 8023b36:	f100 0314 	add.w	r3, r0, #20
 8023b3a:	3114      	adds	r1, #20
 8023b3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8023b40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8023b44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8023b48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8023b4c:	42a5      	cmp	r5, r4
 8023b4e:	d003      	beq.n	8023b58 <__mcmp+0x2c>
 8023b50:	d305      	bcc.n	8023b5e <__mcmp+0x32>
 8023b52:	2201      	movs	r2, #1
 8023b54:	4610      	mov	r0, r2
 8023b56:	bd30      	pop	{r4, r5, pc}
 8023b58:	4283      	cmp	r3, r0
 8023b5a:	d3f3      	bcc.n	8023b44 <__mcmp+0x18>
 8023b5c:	e7fa      	b.n	8023b54 <__mcmp+0x28>
 8023b5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023b62:	e7f7      	b.n	8023b54 <__mcmp+0x28>

08023b64 <__mdiff>:
 8023b64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b68:	460c      	mov	r4, r1
 8023b6a:	4606      	mov	r6, r0
 8023b6c:	4611      	mov	r1, r2
 8023b6e:	4620      	mov	r0, r4
 8023b70:	4617      	mov	r7, r2
 8023b72:	f7ff ffdb 	bl	8023b2c <__mcmp>
 8023b76:	1e05      	subs	r5, r0, #0
 8023b78:	d110      	bne.n	8023b9c <__mdiff+0x38>
 8023b7a:	4629      	mov	r1, r5
 8023b7c:	4630      	mov	r0, r6
 8023b7e:	f7ff fd0d 	bl	802359c <_Balloc>
 8023b82:	b930      	cbnz	r0, 8023b92 <__mdiff+0x2e>
 8023b84:	4b39      	ldr	r3, [pc, #228]	; (8023c6c <__mdiff+0x108>)
 8023b86:	4602      	mov	r2, r0
 8023b88:	f240 2132 	movw	r1, #562	; 0x232
 8023b8c:	4838      	ldr	r0, [pc, #224]	; (8023c70 <__mdiff+0x10c>)
 8023b8e:	f7fe f911 	bl	8021db4 <__assert_func>
 8023b92:	2301      	movs	r3, #1
 8023b94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8023b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b9c:	bfa4      	itt	ge
 8023b9e:	463b      	movge	r3, r7
 8023ba0:	4627      	movge	r7, r4
 8023ba2:	4630      	mov	r0, r6
 8023ba4:	6879      	ldr	r1, [r7, #4]
 8023ba6:	bfa6      	itte	ge
 8023ba8:	461c      	movge	r4, r3
 8023baa:	2500      	movge	r5, #0
 8023bac:	2501      	movlt	r5, #1
 8023bae:	f7ff fcf5 	bl	802359c <_Balloc>
 8023bb2:	b920      	cbnz	r0, 8023bbe <__mdiff+0x5a>
 8023bb4:	4b2d      	ldr	r3, [pc, #180]	; (8023c6c <__mdiff+0x108>)
 8023bb6:	4602      	mov	r2, r0
 8023bb8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8023bbc:	e7e6      	b.n	8023b8c <__mdiff+0x28>
 8023bbe:	693e      	ldr	r6, [r7, #16]
 8023bc0:	60c5      	str	r5, [r0, #12]
 8023bc2:	6925      	ldr	r5, [r4, #16]
 8023bc4:	f107 0114 	add.w	r1, r7, #20
 8023bc8:	f104 0914 	add.w	r9, r4, #20
 8023bcc:	f100 0e14 	add.w	lr, r0, #20
 8023bd0:	f107 0210 	add.w	r2, r7, #16
 8023bd4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8023bd8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8023bdc:	46f2      	mov	sl, lr
 8023bde:	2700      	movs	r7, #0
 8023be0:	f859 3b04 	ldr.w	r3, [r9], #4
 8023be4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8023be8:	fa1f f883 	uxth.w	r8, r3
 8023bec:	fa17 f78b 	uxtah	r7, r7, fp
 8023bf0:	0c1b      	lsrs	r3, r3, #16
 8023bf2:	eba7 0808 	sub.w	r8, r7, r8
 8023bf6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8023bfa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8023bfe:	fa1f f888 	uxth.w	r8, r8
 8023c02:	141f      	asrs	r7, r3, #16
 8023c04:	454d      	cmp	r5, r9
 8023c06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8023c0a:	f84a 3b04 	str.w	r3, [sl], #4
 8023c0e:	d8e7      	bhi.n	8023be0 <__mdiff+0x7c>
 8023c10:	1b2b      	subs	r3, r5, r4
 8023c12:	3b15      	subs	r3, #21
 8023c14:	f023 0303 	bic.w	r3, r3, #3
 8023c18:	3304      	adds	r3, #4
 8023c1a:	3415      	adds	r4, #21
 8023c1c:	42a5      	cmp	r5, r4
 8023c1e:	bf38      	it	cc
 8023c20:	2304      	movcc	r3, #4
 8023c22:	4419      	add	r1, r3
 8023c24:	4473      	add	r3, lr
 8023c26:	469e      	mov	lr, r3
 8023c28:	460d      	mov	r5, r1
 8023c2a:	4565      	cmp	r5, ip
 8023c2c:	d30e      	bcc.n	8023c4c <__mdiff+0xe8>
 8023c2e:	f10c 0203 	add.w	r2, ip, #3
 8023c32:	1a52      	subs	r2, r2, r1
 8023c34:	f022 0203 	bic.w	r2, r2, #3
 8023c38:	3903      	subs	r1, #3
 8023c3a:	458c      	cmp	ip, r1
 8023c3c:	bf38      	it	cc
 8023c3e:	2200      	movcc	r2, #0
 8023c40:	441a      	add	r2, r3
 8023c42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8023c46:	b17b      	cbz	r3, 8023c68 <__mdiff+0x104>
 8023c48:	6106      	str	r6, [r0, #16]
 8023c4a:	e7a5      	b.n	8023b98 <__mdiff+0x34>
 8023c4c:	f855 8b04 	ldr.w	r8, [r5], #4
 8023c50:	fa17 f488 	uxtah	r4, r7, r8
 8023c54:	1422      	asrs	r2, r4, #16
 8023c56:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8023c5a:	b2a4      	uxth	r4, r4
 8023c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8023c60:	f84e 4b04 	str.w	r4, [lr], #4
 8023c64:	1417      	asrs	r7, r2, #16
 8023c66:	e7e0      	b.n	8023c2a <__mdiff+0xc6>
 8023c68:	3e01      	subs	r6, #1
 8023c6a:	e7ea      	b.n	8023c42 <__mdiff+0xde>
 8023c6c:	080296a0 	.word	0x080296a0
 8023c70:	08029794 	.word	0x08029794

08023c74 <__ulp>:
 8023c74:	b082      	sub	sp, #8
 8023c76:	ed8d 0b00 	vstr	d0, [sp]
 8023c7a:	9b01      	ldr	r3, [sp, #4]
 8023c7c:	4912      	ldr	r1, [pc, #72]	; (8023cc8 <__ulp+0x54>)
 8023c7e:	4019      	ands	r1, r3
 8023c80:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8023c84:	2900      	cmp	r1, #0
 8023c86:	dd05      	ble.n	8023c94 <__ulp+0x20>
 8023c88:	2200      	movs	r2, #0
 8023c8a:	460b      	mov	r3, r1
 8023c8c:	ec43 2b10 	vmov	d0, r2, r3
 8023c90:	b002      	add	sp, #8
 8023c92:	4770      	bx	lr
 8023c94:	4249      	negs	r1, r1
 8023c96:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8023c9a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8023c9e:	f04f 0200 	mov.w	r2, #0
 8023ca2:	f04f 0300 	mov.w	r3, #0
 8023ca6:	da04      	bge.n	8023cb2 <__ulp+0x3e>
 8023ca8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8023cac:	fa41 f300 	asr.w	r3, r1, r0
 8023cb0:	e7ec      	b.n	8023c8c <__ulp+0x18>
 8023cb2:	f1a0 0114 	sub.w	r1, r0, #20
 8023cb6:	291e      	cmp	r1, #30
 8023cb8:	bfda      	itte	le
 8023cba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8023cbe:	fa20 f101 	lsrle.w	r1, r0, r1
 8023cc2:	2101      	movgt	r1, #1
 8023cc4:	460a      	mov	r2, r1
 8023cc6:	e7e1      	b.n	8023c8c <__ulp+0x18>
 8023cc8:	7ff00000 	.word	0x7ff00000

08023ccc <__b2d>:
 8023ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023cce:	6905      	ldr	r5, [r0, #16]
 8023cd0:	f100 0714 	add.w	r7, r0, #20
 8023cd4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8023cd8:	1f2e      	subs	r6, r5, #4
 8023cda:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8023cde:	4620      	mov	r0, r4
 8023ce0:	f7ff fd52 	bl	8023788 <__hi0bits>
 8023ce4:	f1c0 0320 	rsb	r3, r0, #32
 8023ce8:	280a      	cmp	r0, #10
 8023cea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8023d68 <__b2d+0x9c>
 8023cee:	600b      	str	r3, [r1, #0]
 8023cf0:	dc14      	bgt.n	8023d1c <__b2d+0x50>
 8023cf2:	f1c0 0e0b 	rsb	lr, r0, #11
 8023cf6:	fa24 f10e 	lsr.w	r1, r4, lr
 8023cfa:	42b7      	cmp	r7, r6
 8023cfc:	ea41 030c 	orr.w	r3, r1, ip
 8023d00:	bf34      	ite	cc
 8023d02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8023d06:	2100      	movcs	r1, #0
 8023d08:	3015      	adds	r0, #21
 8023d0a:	fa04 f000 	lsl.w	r0, r4, r0
 8023d0e:	fa21 f10e 	lsr.w	r1, r1, lr
 8023d12:	ea40 0201 	orr.w	r2, r0, r1
 8023d16:	ec43 2b10 	vmov	d0, r2, r3
 8023d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023d1c:	42b7      	cmp	r7, r6
 8023d1e:	bf3a      	itte	cc
 8023d20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8023d24:	f1a5 0608 	subcc.w	r6, r5, #8
 8023d28:	2100      	movcs	r1, #0
 8023d2a:	380b      	subs	r0, #11
 8023d2c:	d017      	beq.n	8023d5e <__b2d+0x92>
 8023d2e:	f1c0 0c20 	rsb	ip, r0, #32
 8023d32:	fa04 f500 	lsl.w	r5, r4, r0
 8023d36:	42be      	cmp	r6, r7
 8023d38:	fa21 f40c 	lsr.w	r4, r1, ip
 8023d3c:	ea45 0504 	orr.w	r5, r5, r4
 8023d40:	bf8c      	ite	hi
 8023d42:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8023d46:	2400      	movls	r4, #0
 8023d48:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8023d4c:	fa01 f000 	lsl.w	r0, r1, r0
 8023d50:	fa24 f40c 	lsr.w	r4, r4, ip
 8023d54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8023d58:	ea40 0204 	orr.w	r2, r0, r4
 8023d5c:	e7db      	b.n	8023d16 <__b2d+0x4a>
 8023d5e:	ea44 030c 	orr.w	r3, r4, ip
 8023d62:	460a      	mov	r2, r1
 8023d64:	e7d7      	b.n	8023d16 <__b2d+0x4a>
 8023d66:	bf00      	nop
 8023d68:	3ff00000 	.word	0x3ff00000

08023d6c <__d2b>:
 8023d6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023d70:	4689      	mov	r9, r1
 8023d72:	2101      	movs	r1, #1
 8023d74:	ec57 6b10 	vmov	r6, r7, d0
 8023d78:	4690      	mov	r8, r2
 8023d7a:	f7ff fc0f 	bl	802359c <_Balloc>
 8023d7e:	4604      	mov	r4, r0
 8023d80:	b930      	cbnz	r0, 8023d90 <__d2b+0x24>
 8023d82:	4602      	mov	r2, r0
 8023d84:	4b25      	ldr	r3, [pc, #148]	; (8023e1c <__d2b+0xb0>)
 8023d86:	4826      	ldr	r0, [pc, #152]	; (8023e20 <__d2b+0xb4>)
 8023d88:	f240 310a 	movw	r1, #778	; 0x30a
 8023d8c:	f7fe f812 	bl	8021db4 <__assert_func>
 8023d90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8023d94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8023d98:	bb35      	cbnz	r5, 8023de8 <__d2b+0x7c>
 8023d9a:	2e00      	cmp	r6, #0
 8023d9c:	9301      	str	r3, [sp, #4]
 8023d9e:	d028      	beq.n	8023df2 <__d2b+0x86>
 8023da0:	4668      	mov	r0, sp
 8023da2:	9600      	str	r6, [sp, #0]
 8023da4:	f7ff fd10 	bl	80237c8 <__lo0bits>
 8023da8:	9900      	ldr	r1, [sp, #0]
 8023daa:	b300      	cbz	r0, 8023dee <__d2b+0x82>
 8023dac:	9a01      	ldr	r2, [sp, #4]
 8023dae:	f1c0 0320 	rsb	r3, r0, #32
 8023db2:	fa02 f303 	lsl.w	r3, r2, r3
 8023db6:	430b      	orrs	r3, r1
 8023db8:	40c2      	lsrs	r2, r0
 8023dba:	6163      	str	r3, [r4, #20]
 8023dbc:	9201      	str	r2, [sp, #4]
 8023dbe:	9b01      	ldr	r3, [sp, #4]
 8023dc0:	61a3      	str	r3, [r4, #24]
 8023dc2:	2b00      	cmp	r3, #0
 8023dc4:	bf14      	ite	ne
 8023dc6:	2202      	movne	r2, #2
 8023dc8:	2201      	moveq	r2, #1
 8023dca:	6122      	str	r2, [r4, #16]
 8023dcc:	b1d5      	cbz	r5, 8023e04 <__d2b+0x98>
 8023dce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8023dd2:	4405      	add	r5, r0
 8023dd4:	f8c9 5000 	str.w	r5, [r9]
 8023dd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8023ddc:	f8c8 0000 	str.w	r0, [r8]
 8023de0:	4620      	mov	r0, r4
 8023de2:	b003      	add	sp, #12
 8023de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8023dec:	e7d5      	b.n	8023d9a <__d2b+0x2e>
 8023dee:	6161      	str	r1, [r4, #20]
 8023df0:	e7e5      	b.n	8023dbe <__d2b+0x52>
 8023df2:	a801      	add	r0, sp, #4
 8023df4:	f7ff fce8 	bl	80237c8 <__lo0bits>
 8023df8:	9b01      	ldr	r3, [sp, #4]
 8023dfa:	6163      	str	r3, [r4, #20]
 8023dfc:	2201      	movs	r2, #1
 8023dfe:	6122      	str	r2, [r4, #16]
 8023e00:	3020      	adds	r0, #32
 8023e02:	e7e3      	b.n	8023dcc <__d2b+0x60>
 8023e04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8023e08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8023e0c:	f8c9 0000 	str.w	r0, [r9]
 8023e10:	6918      	ldr	r0, [r3, #16]
 8023e12:	f7ff fcb9 	bl	8023788 <__hi0bits>
 8023e16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8023e1a:	e7df      	b.n	8023ddc <__d2b+0x70>
 8023e1c:	080296a0 	.word	0x080296a0
 8023e20:	08029794 	.word	0x08029794

08023e24 <__ratio>:
 8023e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e28:	468a      	mov	sl, r1
 8023e2a:	4669      	mov	r1, sp
 8023e2c:	4683      	mov	fp, r0
 8023e2e:	f7ff ff4d 	bl	8023ccc <__b2d>
 8023e32:	a901      	add	r1, sp, #4
 8023e34:	4650      	mov	r0, sl
 8023e36:	ec59 8b10 	vmov	r8, r9, d0
 8023e3a:	ee10 6a10 	vmov	r6, s0
 8023e3e:	f7ff ff45 	bl	8023ccc <__b2d>
 8023e42:	f8db 3010 	ldr.w	r3, [fp, #16]
 8023e46:	f8da 2010 	ldr.w	r2, [sl, #16]
 8023e4a:	eba3 0c02 	sub.w	ip, r3, r2
 8023e4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8023e52:	1a9b      	subs	r3, r3, r2
 8023e54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8023e58:	ec55 4b10 	vmov	r4, r5, d0
 8023e5c:	2b00      	cmp	r3, #0
 8023e5e:	ee10 0a10 	vmov	r0, s0
 8023e62:	bfce      	itee	gt
 8023e64:	464a      	movgt	r2, r9
 8023e66:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8023e6a:	462a      	movle	r2, r5
 8023e6c:	464f      	mov	r7, r9
 8023e6e:	4629      	mov	r1, r5
 8023e70:	bfcc      	ite	gt
 8023e72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8023e76:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8023e7a:	ec47 6b17 	vmov	d7, r6, r7
 8023e7e:	ec41 0b16 	vmov	d6, r0, r1
 8023e82:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8023e86:	b003      	add	sp, #12
 8023e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023e8c <__copybits>:
 8023e8c:	3901      	subs	r1, #1
 8023e8e:	b570      	push	{r4, r5, r6, lr}
 8023e90:	1149      	asrs	r1, r1, #5
 8023e92:	6914      	ldr	r4, [r2, #16]
 8023e94:	3101      	adds	r1, #1
 8023e96:	f102 0314 	add.w	r3, r2, #20
 8023e9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8023e9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8023ea2:	1f05      	subs	r5, r0, #4
 8023ea4:	42a3      	cmp	r3, r4
 8023ea6:	d30c      	bcc.n	8023ec2 <__copybits+0x36>
 8023ea8:	1aa3      	subs	r3, r4, r2
 8023eaa:	3b11      	subs	r3, #17
 8023eac:	f023 0303 	bic.w	r3, r3, #3
 8023eb0:	3211      	adds	r2, #17
 8023eb2:	42a2      	cmp	r2, r4
 8023eb4:	bf88      	it	hi
 8023eb6:	2300      	movhi	r3, #0
 8023eb8:	4418      	add	r0, r3
 8023eba:	2300      	movs	r3, #0
 8023ebc:	4288      	cmp	r0, r1
 8023ebe:	d305      	bcc.n	8023ecc <__copybits+0x40>
 8023ec0:	bd70      	pop	{r4, r5, r6, pc}
 8023ec2:	f853 6b04 	ldr.w	r6, [r3], #4
 8023ec6:	f845 6f04 	str.w	r6, [r5, #4]!
 8023eca:	e7eb      	b.n	8023ea4 <__copybits+0x18>
 8023ecc:	f840 3b04 	str.w	r3, [r0], #4
 8023ed0:	e7f4      	b.n	8023ebc <__copybits+0x30>

08023ed2 <__any_on>:
 8023ed2:	f100 0214 	add.w	r2, r0, #20
 8023ed6:	6900      	ldr	r0, [r0, #16]
 8023ed8:	114b      	asrs	r3, r1, #5
 8023eda:	4298      	cmp	r0, r3
 8023edc:	b510      	push	{r4, lr}
 8023ede:	db11      	blt.n	8023f04 <__any_on+0x32>
 8023ee0:	dd0a      	ble.n	8023ef8 <__any_on+0x26>
 8023ee2:	f011 011f 	ands.w	r1, r1, #31
 8023ee6:	d007      	beq.n	8023ef8 <__any_on+0x26>
 8023ee8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8023eec:	fa24 f001 	lsr.w	r0, r4, r1
 8023ef0:	fa00 f101 	lsl.w	r1, r0, r1
 8023ef4:	428c      	cmp	r4, r1
 8023ef6:	d10b      	bne.n	8023f10 <__any_on+0x3e>
 8023ef8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023efc:	4293      	cmp	r3, r2
 8023efe:	d803      	bhi.n	8023f08 <__any_on+0x36>
 8023f00:	2000      	movs	r0, #0
 8023f02:	bd10      	pop	{r4, pc}
 8023f04:	4603      	mov	r3, r0
 8023f06:	e7f7      	b.n	8023ef8 <__any_on+0x26>
 8023f08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8023f0c:	2900      	cmp	r1, #0
 8023f0e:	d0f5      	beq.n	8023efc <__any_on+0x2a>
 8023f10:	2001      	movs	r0, #1
 8023f12:	e7f6      	b.n	8023f02 <__any_on+0x30>

08023f14 <_calloc_r>:
 8023f14:	b513      	push	{r0, r1, r4, lr}
 8023f16:	434a      	muls	r2, r1
 8023f18:	4611      	mov	r1, r2
 8023f1a:	9201      	str	r2, [sp, #4]
 8023f1c:	f7fc f854 	bl	801ffc8 <_malloc_r>
 8023f20:	4604      	mov	r4, r0
 8023f22:	b118      	cbz	r0, 8023f2c <_calloc_r+0x18>
 8023f24:	9a01      	ldr	r2, [sp, #4]
 8023f26:	2100      	movs	r1, #0
 8023f28:	f7fb fff6 	bl	801ff18 <memset>
 8023f2c:	4620      	mov	r0, r4
 8023f2e:	b002      	add	sp, #8
 8023f30:	bd10      	pop	{r4, pc}

08023f32 <__ssputs_r>:
 8023f32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023f36:	688e      	ldr	r6, [r1, #8]
 8023f38:	429e      	cmp	r6, r3
 8023f3a:	4682      	mov	sl, r0
 8023f3c:	460c      	mov	r4, r1
 8023f3e:	4690      	mov	r8, r2
 8023f40:	461f      	mov	r7, r3
 8023f42:	d838      	bhi.n	8023fb6 <__ssputs_r+0x84>
 8023f44:	898a      	ldrh	r2, [r1, #12]
 8023f46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023f4a:	d032      	beq.n	8023fb2 <__ssputs_r+0x80>
 8023f4c:	6825      	ldr	r5, [r4, #0]
 8023f4e:	6909      	ldr	r1, [r1, #16]
 8023f50:	eba5 0901 	sub.w	r9, r5, r1
 8023f54:	6965      	ldr	r5, [r4, #20]
 8023f56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023f5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023f5e:	3301      	adds	r3, #1
 8023f60:	444b      	add	r3, r9
 8023f62:	106d      	asrs	r5, r5, #1
 8023f64:	429d      	cmp	r5, r3
 8023f66:	bf38      	it	cc
 8023f68:	461d      	movcc	r5, r3
 8023f6a:	0553      	lsls	r3, r2, #21
 8023f6c:	d531      	bpl.n	8023fd2 <__ssputs_r+0xa0>
 8023f6e:	4629      	mov	r1, r5
 8023f70:	f7fc f82a 	bl	801ffc8 <_malloc_r>
 8023f74:	4606      	mov	r6, r0
 8023f76:	b950      	cbnz	r0, 8023f8e <__ssputs_r+0x5c>
 8023f78:	230c      	movs	r3, #12
 8023f7a:	f8ca 3000 	str.w	r3, [sl]
 8023f7e:	89a3      	ldrh	r3, [r4, #12]
 8023f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023f84:	81a3      	strh	r3, [r4, #12]
 8023f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023f8e:	6921      	ldr	r1, [r4, #16]
 8023f90:	464a      	mov	r2, r9
 8023f92:	f7fb ff99 	bl	801fec8 <memcpy>
 8023f96:	89a3      	ldrh	r3, [r4, #12]
 8023f98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023fa0:	81a3      	strh	r3, [r4, #12]
 8023fa2:	6126      	str	r6, [r4, #16]
 8023fa4:	6165      	str	r5, [r4, #20]
 8023fa6:	444e      	add	r6, r9
 8023fa8:	eba5 0509 	sub.w	r5, r5, r9
 8023fac:	6026      	str	r6, [r4, #0]
 8023fae:	60a5      	str	r5, [r4, #8]
 8023fb0:	463e      	mov	r6, r7
 8023fb2:	42be      	cmp	r6, r7
 8023fb4:	d900      	bls.n	8023fb8 <__ssputs_r+0x86>
 8023fb6:	463e      	mov	r6, r7
 8023fb8:	4632      	mov	r2, r6
 8023fba:	6820      	ldr	r0, [r4, #0]
 8023fbc:	4641      	mov	r1, r8
 8023fbe:	f7fb ff91 	bl	801fee4 <memmove>
 8023fc2:	68a3      	ldr	r3, [r4, #8]
 8023fc4:	6822      	ldr	r2, [r4, #0]
 8023fc6:	1b9b      	subs	r3, r3, r6
 8023fc8:	4432      	add	r2, r6
 8023fca:	60a3      	str	r3, [r4, #8]
 8023fcc:	6022      	str	r2, [r4, #0]
 8023fce:	2000      	movs	r0, #0
 8023fd0:	e7db      	b.n	8023f8a <__ssputs_r+0x58>
 8023fd2:	462a      	mov	r2, r5
 8023fd4:	f000 fb1a 	bl	802460c <_realloc_r>
 8023fd8:	4606      	mov	r6, r0
 8023fda:	2800      	cmp	r0, #0
 8023fdc:	d1e1      	bne.n	8023fa2 <__ssputs_r+0x70>
 8023fde:	6921      	ldr	r1, [r4, #16]
 8023fe0:	4650      	mov	r0, sl
 8023fe2:	f7fb ffa1 	bl	801ff28 <_free_r>
 8023fe6:	e7c7      	b.n	8023f78 <__ssputs_r+0x46>

08023fe8 <_svfiprintf_r>:
 8023fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fec:	4698      	mov	r8, r3
 8023fee:	898b      	ldrh	r3, [r1, #12]
 8023ff0:	061b      	lsls	r3, r3, #24
 8023ff2:	b09d      	sub	sp, #116	; 0x74
 8023ff4:	4607      	mov	r7, r0
 8023ff6:	460d      	mov	r5, r1
 8023ff8:	4614      	mov	r4, r2
 8023ffa:	d50e      	bpl.n	802401a <_svfiprintf_r+0x32>
 8023ffc:	690b      	ldr	r3, [r1, #16]
 8023ffe:	b963      	cbnz	r3, 802401a <_svfiprintf_r+0x32>
 8024000:	2140      	movs	r1, #64	; 0x40
 8024002:	f7fb ffe1 	bl	801ffc8 <_malloc_r>
 8024006:	6028      	str	r0, [r5, #0]
 8024008:	6128      	str	r0, [r5, #16]
 802400a:	b920      	cbnz	r0, 8024016 <_svfiprintf_r+0x2e>
 802400c:	230c      	movs	r3, #12
 802400e:	603b      	str	r3, [r7, #0]
 8024010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024014:	e0d1      	b.n	80241ba <_svfiprintf_r+0x1d2>
 8024016:	2340      	movs	r3, #64	; 0x40
 8024018:	616b      	str	r3, [r5, #20]
 802401a:	2300      	movs	r3, #0
 802401c:	9309      	str	r3, [sp, #36]	; 0x24
 802401e:	2320      	movs	r3, #32
 8024020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024024:	f8cd 800c 	str.w	r8, [sp, #12]
 8024028:	2330      	movs	r3, #48	; 0x30
 802402a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80241d4 <_svfiprintf_r+0x1ec>
 802402e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024032:	f04f 0901 	mov.w	r9, #1
 8024036:	4623      	mov	r3, r4
 8024038:	469a      	mov	sl, r3
 802403a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802403e:	b10a      	cbz	r2, 8024044 <_svfiprintf_r+0x5c>
 8024040:	2a25      	cmp	r2, #37	; 0x25
 8024042:	d1f9      	bne.n	8024038 <_svfiprintf_r+0x50>
 8024044:	ebba 0b04 	subs.w	fp, sl, r4
 8024048:	d00b      	beq.n	8024062 <_svfiprintf_r+0x7a>
 802404a:	465b      	mov	r3, fp
 802404c:	4622      	mov	r2, r4
 802404e:	4629      	mov	r1, r5
 8024050:	4638      	mov	r0, r7
 8024052:	f7ff ff6e 	bl	8023f32 <__ssputs_r>
 8024056:	3001      	adds	r0, #1
 8024058:	f000 80aa 	beq.w	80241b0 <_svfiprintf_r+0x1c8>
 802405c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802405e:	445a      	add	r2, fp
 8024060:	9209      	str	r2, [sp, #36]	; 0x24
 8024062:	f89a 3000 	ldrb.w	r3, [sl]
 8024066:	2b00      	cmp	r3, #0
 8024068:	f000 80a2 	beq.w	80241b0 <_svfiprintf_r+0x1c8>
 802406c:	2300      	movs	r3, #0
 802406e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024076:	f10a 0a01 	add.w	sl, sl, #1
 802407a:	9304      	str	r3, [sp, #16]
 802407c:	9307      	str	r3, [sp, #28]
 802407e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024082:	931a      	str	r3, [sp, #104]	; 0x68
 8024084:	4654      	mov	r4, sl
 8024086:	2205      	movs	r2, #5
 8024088:	f814 1b01 	ldrb.w	r1, [r4], #1
 802408c:	4851      	ldr	r0, [pc, #324]	; (80241d4 <_svfiprintf_r+0x1ec>)
 802408e:	f7dc f92f 	bl	80002f0 <memchr>
 8024092:	9a04      	ldr	r2, [sp, #16]
 8024094:	b9d8      	cbnz	r0, 80240ce <_svfiprintf_r+0xe6>
 8024096:	06d0      	lsls	r0, r2, #27
 8024098:	bf44      	itt	mi
 802409a:	2320      	movmi	r3, #32
 802409c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80240a0:	0711      	lsls	r1, r2, #28
 80240a2:	bf44      	itt	mi
 80240a4:	232b      	movmi	r3, #43	; 0x2b
 80240a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80240aa:	f89a 3000 	ldrb.w	r3, [sl]
 80240ae:	2b2a      	cmp	r3, #42	; 0x2a
 80240b0:	d015      	beq.n	80240de <_svfiprintf_r+0xf6>
 80240b2:	9a07      	ldr	r2, [sp, #28]
 80240b4:	4654      	mov	r4, sl
 80240b6:	2000      	movs	r0, #0
 80240b8:	f04f 0c0a 	mov.w	ip, #10
 80240bc:	4621      	mov	r1, r4
 80240be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80240c2:	3b30      	subs	r3, #48	; 0x30
 80240c4:	2b09      	cmp	r3, #9
 80240c6:	d94e      	bls.n	8024166 <_svfiprintf_r+0x17e>
 80240c8:	b1b0      	cbz	r0, 80240f8 <_svfiprintf_r+0x110>
 80240ca:	9207      	str	r2, [sp, #28]
 80240cc:	e014      	b.n	80240f8 <_svfiprintf_r+0x110>
 80240ce:	eba0 0308 	sub.w	r3, r0, r8
 80240d2:	fa09 f303 	lsl.w	r3, r9, r3
 80240d6:	4313      	orrs	r3, r2
 80240d8:	9304      	str	r3, [sp, #16]
 80240da:	46a2      	mov	sl, r4
 80240dc:	e7d2      	b.n	8024084 <_svfiprintf_r+0x9c>
 80240de:	9b03      	ldr	r3, [sp, #12]
 80240e0:	1d19      	adds	r1, r3, #4
 80240e2:	681b      	ldr	r3, [r3, #0]
 80240e4:	9103      	str	r1, [sp, #12]
 80240e6:	2b00      	cmp	r3, #0
 80240e8:	bfbb      	ittet	lt
 80240ea:	425b      	neglt	r3, r3
 80240ec:	f042 0202 	orrlt.w	r2, r2, #2
 80240f0:	9307      	strge	r3, [sp, #28]
 80240f2:	9307      	strlt	r3, [sp, #28]
 80240f4:	bfb8      	it	lt
 80240f6:	9204      	strlt	r2, [sp, #16]
 80240f8:	7823      	ldrb	r3, [r4, #0]
 80240fa:	2b2e      	cmp	r3, #46	; 0x2e
 80240fc:	d10c      	bne.n	8024118 <_svfiprintf_r+0x130>
 80240fe:	7863      	ldrb	r3, [r4, #1]
 8024100:	2b2a      	cmp	r3, #42	; 0x2a
 8024102:	d135      	bne.n	8024170 <_svfiprintf_r+0x188>
 8024104:	9b03      	ldr	r3, [sp, #12]
 8024106:	1d1a      	adds	r2, r3, #4
 8024108:	681b      	ldr	r3, [r3, #0]
 802410a:	9203      	str	r2, [sp, #12]
 802410c:	2b00      	cmp	r3, #0
 802410e:	bfb8      	it	lt
 8024110:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8024114:	3402      	adds	r4, #2
 8024116:	9305      	str	r3, [sp, #20]
 8024118:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80241e4 <_svfiprintf_r+0x1fc>
 802411c:	7821      	ldrb	r1, [r4, #0]
 802411e:	2203      	movs	r2, #3
 8024120:	4650      	mov	r0, sl
 8024122:	f7dc f8e5 	bl	80002f0 <memchr>
 8024126:	b140      	cbz	r0, 802413a <_svfiprintf_r+0x152>
 8024128:	2340      	movs	r3, #64	; 0x40
 802412a:	eba0 000a 	sub.w	r0, r0, sl
 802412e:	fa03 f000 	lsl.w	r0, r3, r0
 8024132:	9b04      	ldr	r3, [sp, #16]
 8024134:	4303      	orrs	r3, r0
 8024136:	3401      	adds	r4, #1
 8024138:	9304      	str	r3, [sp, #16]
 802413a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802413e:	4826      	ldr	r0, [pc, #152]	; (80241d8 <_svfiprintf_r+0x1f0>)
 8024140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024144:	2206      	movs	r2, #6
 8024146:	f7dc f8d3 	bl	80002f0 <memchr>
 802414a:	2800      	cmp	r0, #0
 802414c:	d038      	beq.n	80241c0 <_svfiprintf_r+0x1d8>
 802414e:	4b23      	ldr	r3, [pc, #140]	; (80241dc <_svfiprintf_r+0x1f4>)
 8024150:	bb1b      	cbnz	r3, 802419a <_svfiprintf_r+0x1b2>
 8024152:	9b03      	ldr	r3, [sp, #12]
 8024154:	3307      	adds	r3, #7
 8024156:	f023 0307 	bic.w	r3, r3, #7
 802415a:	3308      	adds	r3, #8
 802415c:	9303      	str	r3, [sp, #12]
 802415e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024160:	4433      	add	r3, r6
 8024162:	9309      	str	r3, [sp, #36]	; 0x24
 8024164:	e767      	b.n	8024036 <_svfiprintf_r+0x4e>
 8024166:	fb0c 3202 	mla	r2, ip, r2, r3
 802416a:	460c      	mov	r4, r1
 802416c:	2001      	movs	r0, #1
 802416e:	e7a5      	b.n	80240bc <_svfiprintf_r+0xd4>
 8024170:	2300      	movs	r3, #0
 8024172:	3401      	adds	r4, #1
 8024174:	9305      	str	r3, [sp, #20]
 8024176:	4619      	mov	r1, r3
 8024178:	f04f 0c0a 	mov.w	ip, #10
 802417c:	4620      	mov	r0, r4
 802417e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024182:	3a30      	subs	r2, #48	; 0x30
 8024184:	2a09      	cmp	r2, #9
 8024186:	d903      	bls.n	8024190 <_svfiprintf_r+0x1a8>
 8024188:	2b00      	cmp	r3, #0
 802418a:	d0c5      	beq.n	8024118 <_svfiprintf_r+0x130>
 802418c:	9105      	str	r1, [sp, #20]
 802418e:	e7c3      	b.n	8024118 <_svfiprintf_r+0x130>
 8024190:	fb0c 2101 	mla	r1, ip, r1, r2
 8024194:	4604      	mov	r4, r0
 8024196:	2301      	movs	r3, #1
 8024198:	e7f0      	b.n	802417c <_svfiprintf_r+0x194>
 802419a:	ab03      	add	r3, sp, #12
 802419c:	9300      	str	r3, [sp, #0]
 802419e:	462a      	mov	r2, r5
 80241a0:	4b0f      	ldr	r3, [pc, #60]	; (80241e0 <_svfiprintf_r+0x1f8>)
 80241a2:	a904      	add	r1, sp, #16
 80241a4:	4638      	mov	r0, r7
 80241a6:	f7fb fffb 	bl	80201a0 <_printf_float>
 80241aa:	1c42      	adds	r2, r0, #1
 80241ac:	4606      	mov	r6, r0
 80241ae:	d1d6      	bne.n	802415e <_svfiprintf_r+0x176>
 80241b0:	89ab      	ldrh	r3, [r5, #12]
 80241b2:	065b      	lsls	r3, r3, #25
 80241b4:	f53f af2c 	bmi.w	8024010 <_svfiprintf_r+0x28>
 80241b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80241ba:	b01d      	add	sp, #116	; 0x74
 80241bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241c0:	ab03      	add	r3, sp, #12
 80241c2:	9300      	str	r3, [sp, #0]
 80241c4:	462a      	mov	r2, r5
 80241c6:	4b06      	ldr	r3, [pc, #24]	; (80241e0 <_svfiprintf_r+0x1f8>)
 80241c8:	a904      	add	r1, sp, #16
 80241ca:	4638      	mov	r0, r7
 80241cc:	f7fc fa74 	bl	80206b8 <_printf_i>
 80241d0:	e7eb      	b.n	80241aa <_svfiprintf_r+0x1c2>
 80241d2:	bf00      	nop
 80241d4:	080298f4 	.word	0x080298f4
 80241d8:	080298fe 	.word	0x080298fe
 80241dc:	080201a1 	.word	0x080201a1
 80241e0:	08023f33 	.word	0x08023f33
 80241e4:	080298fa 	.word	0x080298fa

080241e8 <__sfputc_r>:
 80241e8:	6893      	ldr	r3, [r2, #8]
 80241ea:	3b01      	subs	r3, #1
 80241ec:	2b00      	cmp	r3, #0
 80241ee:	b410      	push	{r4}
 80241f0:	6093      	str	r3, [r2, #8]
 80241f2:	da08      	bge.n	8024206 <__sfputc_r+0x1e>
 80241f4:	6994      	ldr	r4, [r2, #24]
 80241f6:	42a3      	cmp	r3, r4
 80241f8:	db01      	blt.n	80241fe <__sfputc_r+0x16>
 80241fa:	290a      	cmp	r1, #10
 80241fc:	d103      	bne.n	8024206 <__sfputc_r+0x1e>
 80241fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024202:	f7fd bd17 	b.w	8021c34 <__swbuf_r>
 8024206:	6813      	ldr	r3, [r2, #0]
 8024208:	1c58      	adds	r0, r3, #1
 802420a:	6010      	str	r0, [r2, #0]
 802420c:	7019      	strb	r1, [r3, #0]
 802420e:	4608      	mov	r0, r1
 8024210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024214:	4770      	bx	lr

08024216 <__sfputs_r>:
 8024216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024218:	4606      	mov	r6, r0
 802421a:	460f      	mov	r7, r1
 802421c:	4614      	mov	r4, r2
 802421e:	18d5      	adds	r5, r2, r3
 8024220:	42ac      	cmp	r4, r5
 8024222:	d101      	bne.n	8024228 <__sfputs_r+0x12>
 8024224:	2000      	movs	r0, #0
 8024226:	e007      	b.n	8024238 <__sfputs_r+0x22>
 8024228:	f814 1b01 	ldrb.w	r1, [r4], #1
 802422c:	463a      	mov	r2, r7
 802422e:	4630      	mov	r0, r6
 8024230:	f7ff ffda 	bl	80241e8 <__sfputc_r>
 8024234:	1c43      	adds	r3, r0, #1
 8024236:	d1f3      	bne.n	8024220 <__sfputs_r+0xa>
 8024238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802423c <_vfiprintf_r>:
 802423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024240:	460d      	mov	r5, r1
 8024242:	b09d      	sub	sp, #116	; 0x74
 8024244:	4614      	mov	r4, r2
 8024246:	4698      	mov	r8, r3
 8024248:	4606      	mov	r6, r0
 802424a:	b118      	cbz	r0, 8024254 <_vfiprintf_r+0x18>
 802424c:	6983      	ldr	r3, [r0, #24]
 802424e:	b90b      	cbnz	r3, 8024254 <_vfiprintf_r+0x18>
 8024250:	f7fe fcfc 	bl	8022c4c <__sinit>
 8024254:	4b89      	ldr	r3, [pc, #548]	; (802447c <_vfiprintf_r+0x240>)
 8024256:	429d      	cmp	r5, r3
 8024258:	d11b      	bne.n	8024292 <_vfiprintf_r+0x56>
 802425a:	6875      	ldr	r5, [r6, #4]
 802425c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802425e:	07d9      	lsls	r1, r3, #31
 8024260:	d405      	bmi.n	802426e <_vfiprintf_r+0x32>
 8024262:	89ab      	ldrh	r3, [r5, #12]
 8024264:	059a      	lsls	r2, r3, #22
 8024266:	d402      	bmi.n	802426e <_vfiprintf_r+0x32>
 8024268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802426a:	f7ff f912 	bl	8023492 <__retarget_lock_acquire_recursive>
 802426e:	89ab      	ldrh	r3, [r5, #12]
 8024270:	071b      	lsls	r3, r3, #28
 8024272:	d501      	bpl.n	8024278 <_vfiprintf_r+0x3c>
 8024274:	692b      	ldr	r3, [r5, #16]
 8024276:	b9eb      	cbnz	r3, 80242b4 <_vfiprintf_r+0x78>
 8024278:	4629      	mov	r1, r5
 802427a:	4630      	mov	r0, r6
 802427c:	f7fd fd2c 	bl	8021cd8 <__swsetup_r>
 8024280:	b1c0      	cbz	r0, 80242b4 <_vfiprintf_r+0x78>
 8024282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024284:	07dc      	lsls	r4, r3, #31
 8024286:	d50e      	bpl.n	80242a6 <_vfiprintf_r+0x6a>
 8024288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802428c:	b01d      	add	sp, #116	; 0x74
 802428e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024292:	4b7b      	ldr	r3, [pc, #492]	; (8024480 <_vfiprintf_r+0x244>)
 8024294:	429d      	cmp	r5, r3
 8024296:	d101      	bne.n	802429c <_vfiprintf_r+0x60>
 8024298:	68b5      	ldr	r5, [r6, #8]
 802429a:	e7df      	b.n	802425c <_vfiprintf_r+0x20>
 802429c:	4b79      	ldr	r3, [pc, #484]	; (8024484 <_vfiprintf_r+0x248>)
 802429e:	429d      	cmp	r5, r3
 80242a0:	bf08      	it	eq
 80242a2:	68f5      	ldreq	r5, [r6, #12]
 80242a4:	e7da      	b.n	802425c <_vfiprintf_r+0x20>
 80242a6:	89ab      	ldrh	r3, [r5, #12]
 80242a8:	0598      	lsls	r0, r3, #22
 80242aa:	d4ed      	bmi.n	8024288 <_vfiprintf_r+0x4c>
 80242ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80242ae:	f7ff f8f1 	bl	8023494 <__retarget_lock_release_recursive>
 80242b2:	e7e9      	b.n	8024288 <_vfiprintf_r+0x4c>
 80242b4:	2300      	movs	r3, #0
 80242b6:	9309      	str	r3, [sp, #36]	; 0x24
 80242b8:	2320      	movs	r3, #32
 80242ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80242be:	f8cd 800c 	str.w	r8, [sp, #12]
 80242c2:	2330      	movs	r3, #48	; 0x30
 80242c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8024488 <_vfiprintf_r+0x24c>
 80242c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80242cc:	f04f 0901 	mov.w	r9, #1
 80242d0:	4623      	mov	r3, r4
 80242d2:	469a      	mov	sl, r3
 80242d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80242d8:	b10a      	cbz	r2, 80242de <_vfiprintf_r+0xa2>
 80242da:	2a25      	cmp	r2, #37	; 0x25
 80242dc:	d1f9      	bne.n	80242d2 <_vfiprintf_r+0x96>
 80242de:	ebba 0b04 	subs.w	fp, sl, r4
 80242e2:	d00b      	beq.n	80242fc <_vfiprintf_r+0xc0>
 80242e4:	465b      	mov	r3, fp
 80242e6:	4622      	mov	r2, r4
 80242e8:	4629      	mov	r1, r5
 80242ea:	4630      	mov	r0, r6
 80242ec:	f7ff ff93 	bl	8024216 <__sfputs_r>
 80242f0:	3001      	adds	r0, #1
 80242f2:	f000 80aa 	beq.w	802444a <_vfiprintf_r+0x20e>
 80242f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80242f8:	445a      	add	r2, fp
 80242fa:	9209      	str	r2, [sp, #36]	; 0x24
 80242fc:	f89a 3000 	ldrb.w	r3, [sl]
 8024300:	2b00      	cmp	r3, #0
 8024302:	f000 80a2 	beq.w	802444a <_vfiprintf_r+0x20e>
 8024306:	2300      	movs	r3, #0
 8024308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802430c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024310:	f10a 0a01 	add.w	sl, sl, #1
 8024314:	9304      	str	r3, [sp, #16]
 8024316:	9307      	str	r3, [sp, #28]
 8024318:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802431c:	931a      	str	r3, [sp, #104]	; 0x68
 802431e:	4654      	mov	r4, sl
 8024320:	2205      	movs	r2, #5
 8024322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024326:	4858      	ldr	r0, [pc, #352]	; (8024488 <_vfiprintf_r+0x24c>)
 8024328:	f7db ffe2 	bl	80002f0 <memchr>
 802432c:	9a04      	ldr	r2, [sp, #16]
 802432e:	b9d8      	cbnz	r0, 8024368 <_vfiprintf_r+0x12c>
 8024330:	06d1      	lsls	r1, r2, #27
 8024332:	bf44      	itt	mi
 8024334:	2320      	movmi	r3, #32
 8024336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802433a:	0713      	lsls	r3, r2, #28
 802433c:	bf44      	itt	mi
 802433e:	232b      	movmi	r3, #43	; 0x2b
 8024340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024344:	f89a 3000 	ldrb.w	r3, [sl]
 8024348:	2b2a      	cmp	r3, #42	; 0x2a
 802434a:	d015      	beq.n	8024378 <_vfiprintf_r+0x13c>
 802434c:	9a07      	ldr	r2, [sp, #28]
 802434e:	4654      	mov	r4, sl
 8024350:	2000      	movs	r0, #0
 8024352:	f04f 0c0a 	mov.w	ip, #10
 8024356:	4621      	mov	r1, r4
 8024358:	f811 3b01 	ldrb.w	r3, [r1], #1
 802435c:	3b30      	subs	r3, #48	; 0x30
 802435e:	2b09      	cmp	r3, #9
 8024360:	d94e      	bls.n	8024400 <_vfiprintf_r+0x1c4>
 8024362:	b1b0      	cbz	r0, 8024392 <_vfiprintf_r+0x156>
 8024364:	9207      	str	r2, [sp, #28]
 8024366:	e014      	b.n	8024392 <_vfiprintf_r+0x156>
 8024368:	eba0 0308 	sub.w	r3, r0, r8
 802436c:	fa09 f303 	lsl.w	r3, r9, r3
 8024370:	4313      	orrs	r3, r2
 8024372:	9304      	str	r3, [sp, #16]
 8024374:	46a2      	mov	sl, r4
 8024376:	e7d2      	b.n	802431e <_vfiprintf_r+0xe2>
 8024378:	9b03      	ldr	r3, [sp, #12]
 802437a:	1d19      	adds	r1, r3, #4
 802437c:	681b      	ldr	r3, [r3, #0]
 802437e:	9103      	str	r1, [sp, #12]
 8024380:	2b00      	cmp	r3, #0
 8024382:	bfbb      	ittet	lt
 8024384:	425b      	neglt	r3, r3
 8024386:	f042 0202 	orrlt.w	r2, r2, #2
 802438a:	9307      	strge	r3, [sp, #28]
 802438c:	9307      	strlt	r3, [sp, #28]
 802438e:	bfb8      	it	lt
 8024390:	9204      	strlt	r2, [sp, #16]
 8024392:	7823      	ldrb	r3, [r4, #0]
 8024394:	2b2e      	cmp	r3, #46	; 0x2e
 8024396:	d10c      	bne.n	80243b2 <_vfiprintf_r+0x176>
 8024398:	7863      	ldrb	r3, [r4, #1]
 802439a:	2b2a      	cmp	r3, #42	; 0x2a
 802439c:	d135      	bne.n	802440a <_vfiprintf_r+0x1ce>
 802439e:	9b03      	ldr	r3, [sp, #12]
 80243a0:	1d1a      	adds	r2, r3, #4
 80243a2:	681b      	ldr	r3, [r3, #0]
 80243a4:	9203      	str	r2, [sp, #12]
 80243a6:	2b00      	cmp	r3, #0
 80243a8:	bfb8      	it	lt
 80243aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80243ae:	3402      	adds	r4, #2
 80243b0:	9305      	str	r3, [sp, #20]
 80243b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024498 <_vfiprintf_r+0x25c>
 80243b6:	7821      	ldrb	r1, [r4, #0]
 80243b8:	2203      	movs	r2, #3
 80243ba:	4650      	mov	r0, sl
 80243bc:	f7db ff98 	bl	80002f0 <memchr>
 80243c0:	b140      	cbz	r0, 80243d4 <_vfiprintf_r+0x198>
 80243c2:	2340      	movs	r3, #64	; 0x40
 80243c4:	eba0 000a 	sub.w	r0, r0, sl
 80243c8:	fa03 f000 	lsl.w	r0, r3, r0
 80243cc:	9b04      	ldr	r3, [sp, #16]
 80243ce:	4303      	orrs	r3, r0
 80243d0:	3401      	adds	r4, #1
 80243d2:	9304      	str	r3, [sp, #16]
 80243d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80243d8:	482c      	ldr	r0, [pc, #176]	; (802448c <_vfiprintf_r+0x250>)
 80243da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80243de:	2206      	movs	r2, #6
 80243e0:	f7db ff86 	bl	80002f0 <memchr>
 80243e4:	2800      	cmp	r0, #0
 80243e6:	d03f      	beq.n	8024468 <_vfiprintf_r+0x22c>
 80243e8:	4b29      	ldr	r3, [pc, #164]	; (8024490 <_vfiprintf_r+0x254>)
 80243ea:	bb1b      	cbnz	r3, 8024434 <_vfiprintf_r+0x1f8>
 80243ec:	9b03      	ldr	r3, [sp, #12]
 80243ee:	3307      	adds	r3, #7
 80243f0:	f023 0307 	bic.w	r3, r3, #7
 80243f4:	3308      	adds	r3, #8
 80243f6:	9303      	str	r3, [sp, #12]
 80243f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243fa:	443b      	add	r3, r7
 80243fc:	9309      	str	r3, [sp, #36]	; 0x24
 80243fe:	e767      	b.n	80242d0 <_vfiprintf_r+0x94>
 8024400:	fb0c 3202 	mla	r2, ip, r2, r3
 8024404:	460c      	mov	r4, r1
 8024406:	2001      	movs	r0, #1
 8024408:	e7a5      	b.n	8024356 <_vfiprintf_r+0x11a>
 802440a:	2300      	movs	r3, #0
 802440c:	3401      	adds	r4, #1
 802440e:	9305      	str	r3, [sp, #20]
 8024410:	4619      	mov	r1, r3
 8024412:	f04f 0c0a 	mov.w	ip, #10
 8024416:	4620      	mov	r0, r4
 8024418:	f810 2b01 	ldrb.w	r2, [r0], #1
 802441c:	3a30      	subs	r2, #48	; 0x30
 802441e:	2a09      	cmp	r2, #9
 8024420:	d903      	bls.n	802442a <_vfiprintf_r+0x1ee>
 8024422:	2b00      	cmp	r3, #0
 8024424:	d0c5      	beq.n	80243b2 <_vfiprintf_r+0x176>
 8024426:	9105      	str	r1, [sp, #20]
 8024428:	e7c3      	b.n	80243b2 <_vfiprintf_r+0x176>
 802442a:	fb0c 2101 	mla	r1, ip, r1, r2
 802442e:	4604      	mov	r4, r0
 8024430:	2301      	movs	r3, #1
 8024432:	e7f0      	b.n	8024416 <_vfiprintf_r+0x1da>
 8024434:	ab03      	add	r3, sp, #12
 8024436:	9300      	str	r3, [sp, #0]
 8024438:	462a      	mov	r2, r5
 802443a:	4b16      	ldr	r3, [pc, #88]	; (8024494 <_vfiprintf_r+0x258>)
 802443c:	a904      	add	r1, sp, #16
 802443e:	4630      	mov	r0, r6
 8024440:	f7fb feae 	bl	80201a0 <_printf_float>
 8024444:	4607      	mov	r7, r0
 8024446:	1c78      	adds	r0, r7, #1
 8024448:	d1d6      	bne.n	80243f8 <_vfiprintf_r+0x1bc>
 802444a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802444c:	07d9      	lsls	r1, r3, #31
 802444e:	d405      	bmi.n	802445c <_vfiprintf_r+0x220>
 8024450:	89ab      	ldrh	r3, [r5, #12]
 8024452:	059a      	lsls	r2, r3, #22
 8024454:	d402      	bmi.n	802445c <_vfiprintf_r+0x220>
 8024456:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024458:	f7ff f81c 	bl	8023494 <__retarget_lock_release_recursive>
 802445c:	89ab      	ldrh	r3, [r5, #12]
 802445e:	065b      	lsls	r3, r3, #25
 8024460:	f53f af12 	bmi.w	8024288 <_vfiprintf_r+0x4c>
 8024464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024466:	e711      	b.n	802428c <_vfiprintf_r+0x50>
 8024468:	ab03      	add	r3, sp, #12
 802446a:	9300      	str	r3, [sp, #0]
 802446c:	462a      	mov	r2, r5
 802446e:	4b09      	ldr	r3, [pc, #36]	; (8024494 <_vfiprintf_r+0x258>)
 8024470:	a904      	add	r1, sp, #16
 8024472:	4630      	mov	r0, r6
 8024474:	f7fc f920 	bl	80206b8 <_printf_i>
 8024478:	e7e4      	b.n	8024444 <_vfiprintf_r+0x208>
 802447a:	bf00      	nop
 802447c:	080296d4 	.word	0x080296d4
 8024480:	080296f4 	.word	0x080296f4
 8024484:	080296b4 	.word	0x080296b4
 8024488:	080298f4 	.word	0x080298f4
 802448c:	080298fe 	.word	0x080298fe
 8024490:	080201a1 	.word	0x080201a1
 8024494:	08024217 	.word	0x08024217
 8024498:	080298fa 	.word	0x080298fa
 802449c:	00000000 	.word	0x00000000

080244a0 <nan>:
 80244a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80244a8 <nan+0x8>
 80244a4:	4770      	bx	lr
 80244a6:	bf00      	nop
 80244a8:	00000000 	.word	0x00000000
 80244ac:	7ff80000 	.word	0x7ff80000

080244b0 <__sread>:
 80244b0:	b510      	push	{r4, lr}
 80244b2:	460c      	mov	r4, r1
 80244b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80244b8:	f000 f8ce 	bl	8024658 <_read_r>
 80244bc:	2800      	cmp	r0, #0
 80244be:	bfab      	itete	ge
 80244c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80244c2:	89a3      	ldrhlt	r3, [r4, #12]
 80244c4:	181b      	addge	r3, r3, r0
 80244c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80244ca:	bfac      	ite	ge
 80244cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80244ce:	81a3      	strhlt	r3, [r4, #12]
 80244d0:	bd10      	pop	{r4, pc}

080244d2 <__swrite>:
 80244d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80244d6:	461f      	mov	r7, r3
 80244d8:	898b      	ldrh	r3, [r1, #12]
 80244da:	05db      	lsls	r3, r3, #23
 80244dc:	4605      	mov	r5, r0
 80244de:	460c      	mov	r4, r1
 80244e0:	4616      	mov	r6, r2
 80244e2:	d505      	bpl.n	80244f0 <__swrite+0x1e>
 80244e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80244e8:	2302      	movs	r3, #2
 80244ea:	2200      	movs	r2, #0
 80244ec:	f000 f87c 	bl	80245e8 <_lseek_r>
 80244f0:	89a3      	ldrh	r3, [r4, #12]
 80244f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80244f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80244fa:	81a3      	strh	r3, [r4, #12]
 80244fc:	4632      	mov	r2, r6
 80244fe:	463b      	mov	r3, r7
 8024500:	4628      	mov	r0, r5
 8024502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024506:	f000 b823 	b.w	8024550 <_write_r>

0802450a <__sseek>:
 802450a:	b510      	push	{r4, lr}
 802450c:	460c      	mov	r4, r1
 802450e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024512:	f000 f869 	bl	80245e8 <_lseek_r>
 8024516:	1c43      	adds	r3, r0, #1
 8024518:	89a3      	ldrh	r3, [r4, #12]
 802451a:	bf15      	itete	ne
 802451c:	6560      	strne	r0, [r4, #84]	; 0x54
 802451e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024522:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024526:	81a3      	strheq	r3, [r4, #12]
 8024528:	bf18      	it	ne
 802452a:	81a3      	strhne	r3, [r4, #12]
 802452c:	bd10      	pop	{r4, pc}

0802452e <__sclose>:
 802452e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024532:	f000 b827 	b.w	8024584 <_close_r>

08024536 <__ascii_wctomb>:
 8024536:	b149      	cbz	r1, 802454c <__ascii_wctomb+0x16>
 8024538:	2aff      	cmp	r2, #255	; 0xff
 802453a:	bf85      	ittet	hi
 802453c:	238a      	movhi	r3, #138	; 0x8a
 802453e:	6003      	strhi	r3, [r0, #0]
 8024540:	700a      	strbls	r2, [r1, #0]
 8024542:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8024546:	bf98      	it	ls
 8024548:	2001      	movls	r0, #1
 802454a:	4770      	bx	lr
 802454c:	4608      	mov	r0, r1
 802454e:	4770      	bx	lr

08024550 <_write_r>:
 8024550:	b538      	push	{r3, r4, r5, lr}
 8024552:	4d07      	ldr	r5, [pc, #28]	; (8024570 <_write_r+0x20>)
 8024554:	4604      	mov	r4, r0
 8024556:	4608      	mov	r0, r1
 8024558:	4611      	mov	r1, r2
 802455a:	2200      	movs	r2, #0
 802455c:	602a      	str	r2, [r5, #0]
 802455e:	461a      	mov	r2, r3
 8024560:	f7de fdd7 	bl	8003112 <_write>
 8024564:	1c43      	adds	r3, r0, #1
 8024566:	d102      	bne.n	802456e <_write_r+0x1e>
 8024568:	682b      	ldr	r3, [r5, #0]
 802456a:	b103      	cbz	r3, 802456e <_write_r+0x1e>
 802456c:	6023      	str	r3, [r4, #0]
 802456e:	bd38      	pop	{r3, r4, r5, pc}
 8024570:	2400d6c8 	.word	0x2400d6c8

08024574 <abort>:
 8024574:	b508      	push	{r3, lr}
 8024576:	2006      	movs	r0, #6
 8024578:	f000 f8a8 	bl	80246cc <raise>
 802457c:	2001      	movs	r0, #1
 802457e:	f7de fda1 	bl	80030c4 <_exit>
	...

08024584 <_close_r>:
 8024584:	b538      	push	{r3, r4, r5, lr}
 8024586:	4d06      	ldr	r5, [pc, #24]	; (80245a0 <_close_r+0x1c>)
 8024588:	2300      	movs	r3, #0
 802458a:	4604      	mov	r4, r0
 802458c:	4608      	mov	r0, r1
 802458e:	602b      	str	r3, [r5, #0]
 8024590:	f7de fddb 	bl	800314a <_close>
 8024594:	1c43      	adds	r3, r0, #1
 8024596:	d102      	bne.n	802459e <_close_r+0x1a>
 8024598:	682b      	ldr	r3, [r5, #0]
 802459a:	b103      	cbz	r3, 802459e <_close_r+0x1a>
 802459c:	6023      	str	r3, [r4, #0]
 802459e:	bd38      	pop	{r3, r4, r5, pc}
 80245a0:	2400d6c8 	.word	0x2400d6c8

080245a4 <_fstat_r>:
 80245a4:	b538      	push	{r3, r4, r5, lr}
 80245a6:	4d07      	ldr	r5, [pc, #28]	; (80245c4 <_fstat_r+0x20>)
 80245a8:	2300      	movs	r3, #0
 80245aa:	4604      	mov	r4, r0
 80245ac:	4608      	mov	r0, r1
 80245ae:	4611      	mov	r1, r2
 80245b0:	602b      	str	r3, [r5, #0]
 80245b2:	f7de fdd6 	bl	8003162 <_fstat>
 80245b6:	1c43      	adds	r3, r0, #1
 80245b8:	d102      	bne.n	80245c0 <_fstat_r+0x1c>
 80245ba:	682b      	ldr	r3, [r5, #0]
 80245bc:	b103      	cbz	r3, 80245c0 <_fstat_r+0x1c>
 80245be:	6023      	str	r3, [r4, #0]
 80245c0:	bd38      	pop	{r3, r4, r5, pc}
 80245c2:	bf00      	nop
 80245c4:	2400d6c8 	.word	0x2400d6c8

080245c8 <_isatty_r>:
 80245c8:	b538      	push	{r3, r4, r5, lr}
 80245ca:	4d06      	ldr	r5, [pc, #24]	; (80245e4 <_isatty_r+0x1c>)
 80245cc:	2300      	movs	r3, #0
 80245ce:	4604      	mov	r4, r0
 80245d0:	4608      	mov	r0, r1
 80245d2:	602b      	str	r3, [r5, #0]
 80245d4:	f7de fdd5 	bl	8003182 <_isatty>
 80245d8:	1c43      	adds	r3, r0, #1
 80245da:	d102      	bne.n	80245e2 <_isatty_r+0x1a>
 80245dc:	682b      	ldr	r3, [r5, #0]
 80245de:	b103      	cbz	r3, 80245e2 <_isatty_r+0x1a>
 80245e0:	6023      	str	r3, [r4, #0]
 80245e2:	bd38      	pop	{r3, r4, r5, pc}
 80245e4:	2400d6c8 	.word	0x2400d6c8

080245e8 <_lseek_r>:
 80245e8:	b538      	push	{r3, r4, r5, lr}
 80245ea:	4d07      	ldr	r5, [pc, #28]	; (8024608 <_lseek_r+0x20>)
 80245ec:	4604      	mov	r4, r0
 80245ee:	4608      	mov	r0, r1
 80245f0:	4611      	mov	r1, r2
 80245f2:	2200      	movs	r2, #0
 80245f4:	602a      	str	r2, [r5, #0]
 80245f6:	461a      	mov	r2, r3
 80245f8:	f7de fdce 	bl	8003198 <_lseek>
 80245fc:	1c43      	adds	r3, r0, #1
 80245fe:	d102      	bne.n	8024606 <_lseek_r+0x1e>
 8024600:	682b      	ldr	r3, [r5, #0]
 8024602:	b103      	cbz	r3, 8024606 <_lseek_r+0x1e>
 8024604:	6023      	str	r3, [r4, #0]
 8024606:	bd38      	pop	{r3, r4, r5, pc}
 8024608:	2400d6c8 	.word	0x2400d6c8

0802460c <_realloc_r>:
 802460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802460e:	4607      	mov	r7, r0
 8024610:	4614      	mov	r4, r2
 8024612:	460e      	mov	r6, r1
 8024614:	b921      	cbnz	r1, 8024620 <_realloc_r+0x14>
 8024616:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802461a:	4611      	mov	r1, r2
 802461c:	f7fb bcd4 	b.w	801ffc8 <_malloc_r>
 8024620:	b922      	cbnz	r2, 802462c <_realloc_r+0x20>
 8024622:	f7fb fc81 	bl	801ff28 <_free_r>
 8024626:	4625      	mov	r5, r4
 8024628:	4628      	mov	r0, r5
 802462a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802462c:	f000 f86a 	bl	8024704 <_malloc_usable_size_r>
 8024630:	42a0      	cmp	r0, r4
 8024632:	d20f      	bcs.n	8024654 <_realloc_r+0x48>
 8024634:	4621      	mov	r1, r4
 8024636:	4638      	mov	r0, r7
 8024638:	f7fb fcc6 	bl	801ffc8 <_malloc_r>
 802463c:	4605      	mov	r5, r0
 802463e:	2800      	cmp	r0, #0
 8024640:	d0f2      	beq.n	8024628 <_realloc_r+0x1c>
 8024642:	4631      	mov	r1, r6
 8024644:	4622      	mov	r2, r4
 8024646:	f7fb fc3f 	bl	801fec8 <memcpy>
 802464a:	4631      	mov	r1, r6
 802464c:	4638      	mov	r0, r7
 802464e:	f7fb fc6b 	bl	801ff28 <_free_r>
 8024652:	e7e9      	b.n	8024628 <_realloc_r+0x1c>
 8024654:	4635      	mov	r5, r6
 8024656:	e7e7      	b.n	8024628 <_realloc_r+0x1c>

08024658 <_read_r>:
 8024658:	b538      	push	{r3, r4, r5, lr}
 802465a:	4d07      	ldr	r5, [pc, #28]	; (8024678 <_read_r+0x20>)
 802465c:	4604      	mov	r4, r0
 802465e:	4608      	mov	r0, r1
 8024660:	4611      	mov	r1, r2
 8024662:	2200      	movs	r2, #0
 8024664:	602a      	str	r2, [r5, #0]
 8024666:	461a      	mov	r2, r3
 8024668:	f7de fd36 	bl	80030d8 <_read>
 802466c:	1c43      	adds	r3, r0, #1
 802466e:	d102      	bne.n	8024676 <_read_r+0x1e>
 8024670:	682b      	ldr	r3, [r5, #0]
 8024672:	b103      	cbz	r3, 8024676 <_read_r+0x1e>
 8024674:	6023      	str	r3, [r4, #0]
 8024676:	bd38      	pop	{r3, r4, r5, pc}
 8024678:	2400d6c8 	.word	0x2400d6c8

0802467c <_raise_r>:
 802467c:	291f      	cmp	r1, #31
 802467e:	b538      	push	{r3, r4, r5, lr}
 8024680:	4604      	mov	r4, r0
 8024682:	460d      	mov	r5, r1
 8024684:	d904      	bls.n	8024690 <_raise_r+0x14>
 8024686:	2316      	movs	r3, #22
 8024688:	6003      	str	r3, [r0, #0]
 802468a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802468e:	bd38      	pop	{r3, r4, r5, pc}
 8024690:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8024692:	b112      	cbz	r2, 802469a <_raise_r+0x1e>
 8024694:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024698:	b94b      	cbnz	r3, 80246ae <_raise_r+0x32>
 802469a:	4620      	mov	r0, r4
 802469c:	f000 f830 	bl	8024700 <_getpid_r>
 80246a0:	462a      	mov	r2, r5
 80246a2:	4601      	mov	r1, r0
 80246a4:	4620      	mov	r0, r4
 80246a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80246aa:	f000 b817 	b.w	80246dc <_kill_r>
 80246ae:	2b01      	cmp	r3, #1
 80246b0:	d00a      	beq.n	80246c8 <_raise_r+0x4c>
 80246b2:	1c59      	adds	r1, r3, #1
 80246b4:	d103      	bne.n	80246be <_raise_r+0x42>
 80246b6:	2316      	movs	r3, #22
 80246b8:	6003      	str	r3, [r0, #0]
 80246ba:	2001      	movs	r0, #1
 80246bc:	e7e7      	b.n	802468e <_raise_r+0x12>
 80246be:	2400      	movs	r4, #0
 80246c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80246c4:	4628      	mov	r0, r5
 80246c6:	4798      	blx	r3
 80246c8:	2000      	movs	r0, #0
 80246ca:	e7e0      	b.n	802468e <_raise_r+0x12>

080246cc <raise>:
 80246cc:	4b02      	ldr	r3, [pc, #8]	; (80246d8 <raise+0xc>)
 80246ce:	4601      	mov	r1, r0
 80246d0:	6818      	ldr	r0, [r3, #0]
 80246d2:	f7ff bfd3 	b.w	802467c <_raise_r>
 80246d6:	bf00      	nop
 80246d8:	24003844 	.word	0x24003844

080246dc <_kill_r>:
 80246dc:	b538      	push	{r3, r4, r5, lr}
 80246de:	4d07      	ldr	r5, [pc, #28]	; (80246fc <_kill_r+0x20>)
 80246e0:	2300      	movs	r3, #0
 80246e2:	4604      	mov	r4, r0
 80246e4:	4608      	mov	r0, r1
 80246e6:	4611      	mov	r1, r2
 80246e8:	602b      	str	r3, [r5, #0]
 80246ea:	f7de fcd9 	bl	80030a0 <_kill>
 80246ee:	1c43      	adds	r3, r0, #1
 80246f0:	d102      	bne.n	80246f8 <_kill_r+0x1c>
 80246f2:	682b      	ldr	r3, [r5, #0]
 80246f4:	b103      	cbz	r3, 80246f8 <_kill_r+0x1c>
 80246f6:	6023      	str	r3, [r4, #0]
 80246f8:	bd38      	pop	{r3, r4, r5, pc}
 80246fa:	bf00      	nop
 80246fc:	2400d6c8 	.word	0x2400d6c8

08024700 <_getpid_r>:
 8024700:	f7de bcc6 	b.w	8003090 <_getpid>

08024704 <_malloc_usable_size_r>:
 8024704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024708:	1f18      	subs	r0, r3, #4
 802470a:	2b00      	cmp	r3, #0
 802470c:	bfbc      	itt	lt
 802470e:	580b      	ldrlt	r3, [r1, r0]
 8024710:	18c0      	addlt	r0, r0, r3
 8024712:	4770      	bx	lr

08024714 <checkint>:
 8024714:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8024718:	f240 33fe 	movw	r3, #1022	; 0x3fe
 802471c:	429a      	cmp	r2, r3
 802471e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024720:	dd2b      	ble.n	802477a <checkint+0x66>
 8024722:	f240 4333 	movw	r3, #1075	; 0x433
 8024726:	429a      	cmp	r2, r3
 8024728:	dc25      	bgt.n	8024776 <checkint+0x62>
 802472a:	1a9b      	subs	r3, r3, r2
 802472c:	f1a3 0620 	sub.w	r6, r3, #32
 8024730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024734:	fa02 f606 	lsl.w	r6, r2, r6
 8024738:	fa02 f403 	lsl.w	r4, r2, r3
 802473c:	f1c3 0520 	rsb	r5, r3, #32
 8024740:	4334      	orrs	r4, r6
 8024742:	fa22 f505 	lsr.w	r5, r2, r5
 8024746:	432c      	orrs	r4, r5
 8024748:	409a      	lsls	r2, r3
 802474a:	ea20 0602 	bic.w	r6, r0, r2
 802474e:	ea21 0704 	bic.w	r7, r1, r4
 8024752:	ea56 0207 	orrs.w	r2, r6, r7
 8024756:	f1a3 0420 	sub.w	r4, r3, #32
 802475a:	f1c3 0220 	rsb	r2, r3, #32
 802475e:	d10c      	bne.n	802477a <checkint+0x66>
 8024760:	40d8      	lsrs	r0, r3
 8024762:	fa01 f302 	lsl.w	r3, r1, r2
 8024766:	4318      	orrs	r0, r3
 8024768:	40e1      	lsrs	r1, r4
 802476a:	4308      	orrs	r0, r1
 802476c:	f000 0301 	and.w	r3, r0, #1
 8024770:	f1c3 0002 	rsb	r0, r3, #2
 8024774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024776:	2002      	movs	r0, #2
 8024778:	e7fc      	b.n	8024774 <checkint+0x60>
 802477a:	2000      	movs	r0, #0
 802477c:	e7fa      	b.n	8024774 <checkint+0x60>
	...

08024780 <pow>:
 8024780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024784:	ed2d 8b0a 	vpush	{d8-d12}
 8024788:	b09b      	sub	sp, #108	; 0x6c
 802478a:	ed8d 0b02 	vstr	d0, [sp, #8]
 802478e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8024792:	ed8d 1b00 	vstr	d1, [sp]
 8024796:	ea4f 5915 	mov.w	r9, r5, lsr #20
 802479a:	e9dd 6700 	ldrd	r6, r7, [sp]
 802479e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80247a2:	f240 71fd 	movw	r1, #2045	; 0x7fd
 80247a6:	4288      	cmp	r0, r1
 80247a8:	46cc      	mov	ip, r9
 80247aa:	ea4f 5817 	mov.w	r8, r7, lsr #20
 80247ae:	d806      	bhi.n	80247be <pow+0x3e>
 80247b0:	f3c8 010a 	ubfx	r1, r8, #0, #11
 80247b4:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 80247b8:	297f      	cmp	r1, #127	; 0x7f
 80247ba:	f240 81ab 	bls.w	8024b14 <pow+0x394>
 80247be:	19b1      	adds	r1, r6, r6
 80247c0:	9104      	str	r1, [sp, #16]
 80247c2:	eb47 0107 	adc.w	r1, r7, r7
 80247c6:	9105      	str	r1, [sp, #20]
 80247c8:	9904      	ldr	r1, [sp, #16]
 80247ca:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
 80247ce:	460a      	mov	r2, r1
 80247d0:	9905      	ldr	r1, [sp, #20]
 80247d2:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 80247d6:	460b      	mov	r3, r1
 80247d8:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 80247dc:	f06f 0001 	mvn.w	r0, #1
 80247e0:	4299      	cmp	r1, r3
 80247e2:	bf08      	it	eq
 80247e4:	4290      	cmpeq	r0, r2
 80247e6:	d260      	bcs.n	80248aa <pow+0x12a>
 80247e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80247ec:	4313      	orrs	r3, r2
 80247ee:	d11a      	bne.n	8024826 <pow+0xa6>
 80247f0:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 80247f4:	1923      	adds	r3, r4, r4
 80247f6:	930c      	str	r3, [sp, #48]	; 0x30
 80247f8:	eb42 0302 	adc.w	r3, r2, r2
 80247fc:	930d      	str	r3, [sp, #52]	; 0x34
 80247fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8024802:	4bcf      	ldr	r3, [pc, #828]	; (8024b40 <pow+0x3c0>)
 8024804:	2200      	movs	r2, #0
 8024806:	428b      	cmp	r3, r1
 8024808:	bf08      	it	eq
 802480a:	4282      	cmpeq	r2, r0
 802480c:	f080 8265 	bcs.w	8024cda <pow+0x55a>
 8024810:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024814:	ed9d 6b00 	vldr	d6, [sp]
 8024818:	ee37 0b06 	vadd.f64	d0, d7, d6
 802481c:	b01b      	add	sp, #108	; 0x6c
 802481e:	ecbd 8b0a 	vpop	{d8-d12}
 8024822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024826:	49c7      	ldr	r1, [pc, #796]	; (8024b44 <pow+0x3c4>)
 8024828:	2000      	movs	r0, #0
 802482a:	428d      	cmp	r5, r1
 802482c:	bf08      	it	eq
 802482e:	4284      	cmpeq	r4, r0
 8024830:	d10b      	bne.n	802484a <pow+0xca>
 8024832:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8024836:	19b3      	adds	r3, r6, r6
 8024838:	930e      	str	r3, [sp, #56]	; 0x38
 802483a:	eb42 0302 	adc.w	r3, r2, r2
 802483e:	930f      	str	r3, [sp, #60]	; 0x3c
 8024840:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8024844:	4bbe      	ldr	r3, [pc, #760]	; (8024b40 <pow+0x3c0>)
 8024846:	2200      	movs	r2, #0
 8024848:	e7dd      	b.n	8024806 <pow+0x86>
 802484a:	1921      	adds	r1, r4, r4
 802484c:	9106      	str	r1, [sp, #24]
 802484e:	eb45 0105 	adc.w	r1, r5, r5
 8024852:	9107      	str	r1, [sp, #28]
 8024854:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8024858:	49bb      	ldr	r1, [pc, #748]	; (8024b48 <pow+0x3c8>)
 802485a:	2000      	movs	r0, #0
 802485c:	42a1      	cmp	r1, r4
 802485e:	bf08      	it	eq
 8024860:	4298      	cmpeq	r0, r3
 8024862:	d3d5      	bcc.n	8024810 <pow+0x90>
 8024864:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8024868:	428c      	cmp	r4, r1
 802486a:	bf08      	it	eq
 802486c:	4283      	cmpeq	r3, r0
 802486e:	d1cf      	bne.n	8024810 <pow+0x90>
 8024870:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8024874:	49b5      	ldr	r1, [pc, #724]	; (8024b4c <pow+0x3cc>)
 8024876:	2000      	movs	r0, #0
 8024878:	428c      	cmp	r4, r1
 802487a:	bf08      	it	eq
 802487c:	4283      	cmpeq	r3, r0
 802487e:	f000 822c 	beq.w	8024cda <pow+0x55a>
 8024882:	49b3      	ldr	r1, [pc, #716]	; (8024b50 <pow+0x3d0>)
 8024884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024888:	42a1      	cmp	r1, r4
 802488a:	bf08      	it	eq
 802488c:	4298      	cmpeq	r0, r3
 802488e:	ea6f 0307 	mvn.w	r3, r7
 8024892:	bf34      	ite	cc
 8024894:	2201      	movcc	r2, #1
 8024896:	2200      	movcs	r2, #0
 8024898:	0fdb      	lsrs	r3, r3, #31
 802489a:	429a      	cmp	r2, r3
 802489c:	f040 821a 	bne.w	8024cd4 <pow+0x554>
 80248a0:	ed9d 7b00 	vldr	d7, [sp]
 80248a4:	ee27 0b07 	vmul.f64	d0, d7, d7
 80248a8:	e7b8      	b.n	802481c <pow+0x9c>
 80248aa:	1923      	adds	r3, r4, r4
 80248ac:	9308      	str	r3, [sp, #32]
 80248ae:	eb45 0305 	adc.w	r3, r5, r5
 80248b2:	9309      	str	r3, [sp, #36]	; 0x24
 80248b4:	9b08      	ldr	r3, [sp, #32]
 80248b6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80248ba:	9310      	str	r3, [sp, #64]	; 0x40
 80248bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248be:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80248c2:	9311      	str	r3, [sp, #68]	; 0x44
 80248c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80248c8:	4299      	cmp	r1, r3
 80248ca:	bf08      	it	eq
 80248cc:	4290      	cmpeq	r0, r2
 80248ce:	d22d      	bcs.n	802492c <pow+0x1ac>
 80248d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80248d4:	2c00      	cmp	r4, #0
 80248d6:	f175 0300 	sbcs.w	r3, r5, #0
 80248da:	ee27 0b07 	vmul.f64	d0, d7, d7
 80248de:	da16      	bge.n	802490e <pow+0x18e>
 80248e0:	4630      	mov	r0, r6
 80248e2:	4639      	mov	r1, r7
 80248e4:	f7ff ff16 	bl	8024714 <checkint>
 80248e8:	2801      	cmp	r0, #1
 80248ea:	d110      	bne.n	802490e <pow+0x18e>
 80248ec:	eeb1 0b40 	vneg.f64	d0, d0
 80248f0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80248f4:	4323      	orrs	r3, r4
 80248f6:	d10c      	bne.n	8024912 <pow+0x192>
 80248f8:	2e00      	cmp	r6, #0
 80248fa:	f177 0300 	sbcs.w	r3, r7, #0
 80248fe:	da8d      	bge.n	802481c <pow+0x9c>
 8024900:	b01b      	add	sp, #108	; 0x6c
 8024902:	ecbd 8b0a 	vpop	{d8-d12}
 8024906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802490a:	f001 b8a1 	b.w	8025a50 <__math_divzero>
 802490e:	2000      	movs	r0, #0
 8024910:	e7ee      	b.n	80248f0 <pow+0x170>
 8024912:	2e00      	cmp	r6, #0
 8024914:	f177 0300 	sbcs.w	r3, r7, #0
 8024918:	da80      	bge.n	802481c <pow+0x9c>
 802491a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802491e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8024922:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8024926:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 802492a:	e777      	b.n	802481c <pow+0x9c>
 802492c:	2c00      	cmp	r4, #0
 802492e:	f175 0300 	sbcs.w	r3, r5, #0
 8024932:	da35      	bge.n	80249a0 <pow+0x220>
 8024934:	4630      	mov	r0, r6
 8024936:	4639      	mov	r1, r7
 8024938:	f7ff feec 	bl	8024714 <checkint>
 802493c:	b940      	cbnz	r0, 8024950 <pow+0x1d0>
 802493e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8024942:	b01b      	add	sp, #108	; 0x6c
 8024944:	ecbd 8b0a 	vpop	{d8-d12}
 8024948:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802494c:	f001 b898 	b.w	8025a80 <__math_invalid>
 8024950:	2801      	cmp	r0, #1
 8024952:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024956:	bf14      	ite	ne
 8024958:	2000      	movne	r0, #0
 802495a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 802495e:	461d      	mov	r5, r3
 8024960:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8024964:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8024968:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 802496c:	2a7f      	cmp	r2, #127	; 0x7f
 802496e:	d933      	bls.n	80249d8 <pow+0x258>
 8024970:	4974      	ldr	r1, [pc, #464]	; (8024b44 <pow+0x3c4>)
 8024972:	2000      	movs	r0, #0
 8024974:	428d      	cmp	r5, r1
 8024976:	bf08      	it	eq
 8024978:	4284      	cmpeq	r4, r0
 802497a:	f000 81ae 	beq.w	8024cda <pow+0x55a>
 802497e:	f240 32bd 	movw	r2, #957	; 0x3bd
 8024982:	4293      	cmp	r3, r2
 8024984:	d80e      	bhi.n	80249a4 <pow+0x224>
 8024986:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 802498a:	ed9d 7b00 	vldr	d7, [sp]
 802498e:	42a9      	cmp	r1, r5
 8024990:	bf08      	it	eq
 8024992:	42a0      	cmpeq	r0, r4
 8024994:	bf34      	ite	cc
 8024996:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 802499a:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 802499e:	e73d      	b.n	802481c <pow+0x9c>
 80249a0:	2000      	movs	r0, #0
 80249a2:	e7df      	b.n	8024964 <pow+0x1e4>
 80249a4:	42a9      	cmp	r1, r5
 80249a6:	bf08      	it	eq
 80249a8:	42a0      	cmpeq	r0, r4
 80249aa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80249ae:	bf2c      	ite	cs
 80249b0:	2301      	movcs	r3, #1
 80249b2:	2300      	movcc	r3, #0
 80249b4:	4590      	cmp	r8, r2
 80249b6:	bf8c      	ite	hi
 80249b8:	f04f 0800 	movhi.w	r8, #0
 80249bc:	f04f 0801 	movls.w	r8, #1
 80249c0:	4543      	cmp	r3, r8
 80249c2:	f04f 0000 	mov.w	r0, #0
 80249c6:	f000 80af 	beq.w	8024b28 <pow+0x3a8>
 80249ca:	b01b      	add	sp, #108	; 0x6c
 80249cc:	ecbd 8b0a 	vpop	{d8-d12}
 80249d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249d4:	f001 b834 	b.w	8025a40 <__math_oflow>
 80249d8:	f1bc 0f00 	cmp.w	ip, #0
 80249dc:	d10e      	bne.n	80249fc <pow+0x27c>
 80249de:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8024b38 <pow+0x3b8>
 80249e2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80249e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80249ea:	ec57 6b17 	vmov	r6, r7, d7
 80249ee:	4b59      	ldr	r3, [pc, #356]	; (8024b54 <pow+0x3d4>)
 80249f0:	2100      	movs	r1, #0
 80249f2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80249f6:	1874      	adds	r4, r6, r1
 80249f8:	eb42 0503 	adc.w	r5, r2, r3
 80249fc:	2300      	movs	r3, #0
 80249fe:	18e3      	adds	r3, r4, r3
 8024a00:	4b55      	ldr	r3, [pc, #340]	; (8024b58 <pow+0x3d8>)
 8024a02:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8024a06:	eb45 0303 	adc.w	r3, r5, r3
 8024a0a:	1519      	asrs	r1, r3, #20
 8024a0c:	ee03 1a10 	vmov	s6, r1
 8024a10:	0d1e      	lsrs	r6, r3, #20
 8024a12:	2100      	movs	r1, #0
 8024a14:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8024a18:	0536      	lsls	r6, r6, #20
 8024a1a:	1a63      	subs	r3, r4, r1
 8024a1c:	9312      	str	r3, [sp, #72]	; 0x48
 8024a1e:	eb65 0306 	sbc.w	r3, r5, r6
 8024a22:	9313      	str	r3, [sp, #76]	; 0x4c
 8024a24:	4b4d      	ldr	r3, [pc, #308]	; (8024b5c <pow+0x3dc>)
 8024a26:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8024a2a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8024a2e:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8024a32:	eea5 6b07 	vfma.f64	d6, d5, d7
 8024a36:	ed93 7b00 	vldr	d7, [r3]
 8024a3a:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8024a3e:	ed93 4b02 	vldr	d4, [r3, #8]
 8024a42:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8024a46:	eea3 5b07 	vfma.f64	d5, d3, d7
 8024a4a:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8024a4e:	ee36 9b05 	vadd.f64	d9, d6, d5
 8024a52:	ee35 5b49 	vsub.f64	d5, d5, d9
 8024a56:	eea3 7b04 	vfma.f64	d7, d3, d4
 8024a5a:	ed93 4b04 	vldr	d4, [r3, #16]
 8024a5e:	ee35 5b06 	vadd.f64	d5, d5, d6
 8024a62:	ee37 7b05 	vadd.f64	d7, d7, d5
 8024a66:	ee26 4b04 	vmul.f64	d4, d6, d4
 8024a6a:	ed93 3b08 	vldr	d3, [r3, #32]
 8024a6e:	ee26 0b04 	vmul.f64	d0, d6, d4
 8024a72:	eeb0 8b40 	vmov.f64	d8, d0
 8024a76:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8024a7a:	ed93 4b06 	vldr	d4, [r3, #24]
 8024a7e:	ee26 ab00 	vmul.f64	d10, d6, d0
 8024a82:	ee39 1b00 	vadd.f64	d1, d9, d0
 8024a86:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8024a8a:	eea6 4b03 	vfma.f64	d4, d6, d3
 8024a8e:	ee39 9b41 	vsub.f64	d9, d9, d1
 8024a92:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8024a96:	ee37 8b08 	vadd.f64	d8, d7, d8
 8024a9a:	ee39 9b00 	vadd.f64	d9, d9, d0
 8024a9e:	eea6 3b02 	vfma.f64	d3, d6, d2
 8024aa2:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8024aa6:	ee38 9b09 	vadd.f64	d9, d8, d9
 8024aaa:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8024aae:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8024ab2:	ed9d 6b00 	vldr	d6, [sp]
 8024ab6:	eea0 3b02 	vfma.f64	d3, d0, d2
 8024aba:	eea0 4b03 	vfma.f64	d4, d0, d3
 8024abe:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8024ac2:	ee31 7b09 	vadd.f64	d7, d1, d9
 8024ac6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8024aca:	ed8d 6b02 	vstr	d6, [sp, #8]
 8024ace:	eeb0 3b46 	vmov.f64	d3, d6
 8024ad2:	ee31 1b47 	vsub.f64	d1, d1, d7
 8024ad6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024ada:	ee31 9b09 	vadd.f64	d9, d1, d9
 8024ade:	ed9d 6b00 	vldr	d6, [sp]
 8024ae2:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8024ae6:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8024aea:	193c      	adds	r4, r7, r4
 8024aec:	2c3e      	cmp	r4, #62	; 0x3e
 8024aee:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8024af2:	eea6 3b09 	vfma.f64	d3, d6, d9
 8024af6:	d934      	bls.n	8024b62 <pow+0x3e2>
 8024af8:	428c      	cmp	r4, r1
 8024afa:	da0d      	bge.n	8024b18 <pow+0x398>
 8024afc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8024b00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024b04:	ee37 0b00 	vadd.f64	d0, d7, d0
 8024b08:	2800      	cmp	r0, #0
 8024b0a:	f43f ae87 	beq.w	802481c <pow+0x9c>
 8024b0e:	eeb1 0b40 	vneg.f64	d0, d0
 8024b12:	e683      	b.n	802481c <pow+0x9c>
 8024b14:	2000      	movs	r0, #0
 8024b16:	e771      	b.n	80249fc <pow+0x27c>
 8024b18:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8024b1c:	d920      	bls.n	8024b60 <pow+0x3e0>
 8024b1e:	2a00      	cmp	r2, #0
 8024b20:	f173 0300 	sbcs.w	r3, r3, #0
 8024b24:	f6bf af51 	bge.w	80249ca <pow+0x24a>
 8024b28:	b01b      	add	sp, #108	; 0x6c
 8024b2a:	ecbd 8b0a 	vpop	{d8-d12}
 8024b2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b32:	f000 bf7d 	b.w	8025a30 <__math_uflow>
 8024b36:	bf00      	nop
 8024b38:	00000000 	.word	0x00000000
 8024b3c:	43300000 	.word	0x43300000
 8024b40:	fff00000 	.word	0xfff00000
 8024b44:	3ff00000 	.word	0x3ff00000
 8024b48:	ffe00000 	.word	0xffe00000
 8024b4c:	7fe00000 	.word	0x7fe00000
 8024b50:	7fdfffff 	.word	0x7fdfffff
 8024b54:	fcc00000 	.word	0xfcc00000
 8024b58:	c0196aab 	.word	0xc0196aab
 8024b5c:	08029908 	.word	0x08029908
 8024b60:	460f      	mov	r7, r1
 8024b62:	4e65      	ldr	r6, [pc, #404]	; (8024cf8 <pow+0x578>)
 8024b64:	ed9d 4b02 	vldr	d4, [sp, #8]
 8024b68:	ed96 6b02 	vldr	d6, [r6, #8]
 8024b6c:	ed96 7b00 	vldr	d7, [r6]
 8024b70:	eeb0 5b46 	vmov.f64	d5, d6
 8024b74:	eea4 5b07 	vfma.f64	d5, d4, d7
 8024b78:	ed8d 5b00 	vstr	d5, [sp]
 8024b7c:	ee35 6b46 	vsub.f64	d6, d5, d6
 8024b80:	eeb0 5b44 	vmov.f64	d5, d4
 8024b84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024b88:	ed96 7b04 	vldr	d7, [r6, #16]
 8024b8c:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8024b90:	eea6 5b07 	vfma.f64	d5, d6, d7
 8024b94:	eeb0 7b45 	vmov.f64	d7, d5
 8024b98:	ed96 5b06 	vldr	d5, [r6, #24]
 8024b9c:	1849      	adds	r1, r1, r1
 8024b9e:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8024ba2:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8024ba6:	eea6 7b05 	vfma.f64	d7, d6, d5
 8024baa:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8024bae:	ee33 3b07 	vadd.f64	d3, d3, d7
 8024bb2:	ee23 6b03 	vmul.f64	d6, d3, d3
 8024bb6:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8024bba:	ed96 5b08 	vldr	d5, [r6, #32]
 8024bbe:	ee33 7b07 	vadd.f64	d7, d3, d7
 8024bc2:	1814      	adds	r4, r2, r0
 8024bc4:	0365      	lsls	r5, r4, #13
 8024bc6:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8024bca:	eea3 5b04 	vfma.f64	d5, d3, d4
 8024bce:	eea6 7b05 	vfma.f64	d7, d6, d5
 8024bd2:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 8024bd6:	ee26 6b06 	vmul.f64	d6, d6, d6
 8024bda:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8024bde:	2000      	movs	r0, #0
 8024be0:	eb10 0a04 	adds.w	sl, r0, r4
 8024be4:	eea3 5b04 	vfma.f64	d5, d3, d4
 8024be8:	eb45 0b0c 	adc.w	fp, r5, ip
 8024bec:	eea6 7b05 	vfma.f64	d7, d6, d5
 8024bf0:	2f00      	cmp	r7, #0
 8024bf2:	d16a      	bne.n	8024cca <pow+0x54a>
 8024bf4:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8024bf8:	4639      	mov	r1, r7
 8024bfa:	ea50 0301 	orrs.w	r3, r0, r1
 8024bfe:	f04f 0300 	mov.w	r3, #0
 8024c02:	d115      	bne.n	8024c30 <pow+0x4b0>
 8024c04:	eb1a 0303 	adds.w	r3, sl, r3
 8024c08:	ee0b 3a10 	vmov	s22, r3
 8024c0c:	4b3b      	ldr	r3, [pc, #236]	; (8024cfc <pow+0x57c>)
 8024c0e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8024ce0 <pow+0x560>
 8024c12:	eb4b 0303 	adc.w	r3, fp, r3
 8024c16:	ee0b 3a90 	vmov	s23, r3
 8024c1a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8024c1e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 8024c22:	b01b      	add	sp, #108	; 0x6c
 8024c24:	ecbd 8b0a 	vpop	{d8-d12}
 8024c28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c2c:	f000 bf40 	b.w	8025ab0 <__math_check_oflow>
 8024c30:	eb1a 0303 	adds.w	r3, sl, r3
 8024c34:	930a      	str	r3, [sp, #40]	; 0x28
 8024c36:	4b32      	ldr	r3, [pc, #200]	; (8024d00 <pow+0x580>)
 8024c38:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8024c3c:	eb4b 0303 	adc.w	r3, fp, r3
 8024c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8024c42:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8024c46:	ee27 6b05 	vmul.f64	d6, d7, d5
 8024c4a:	ee35 7b06 	vadd.f64	d7, d5, d6
 8024c4e:	eeb0 3bc7 	vabs.f64	d3, d7
 8024c52:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8024c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024c5a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8024ce8 <pow+0x568>
 8024c5e:	d52b      	bpl.n	8024cb8 <pow+0x538>
 8024c60:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8024c64:	ee35 5b47 	vsub.f64	d5, d5, d7
 8024c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024c6c:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8024c70:	ee35 6b06 	vadd.f64	d6, d5, d6
 8024c74:	bf48      	it	mi
 8024c76:	eeb0 4b43 	vmovmi.f64	d4, d3
 8024c7a:	ee37 3b04 	vadd.f64	d3, d7, d4
 8024c7e:	ee34 5b43 	vsub.f64	d5, d4, d3
 8024c82:	ee35 7b07 	vadd.f64	d7, d5, d7
 8024c86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8024c8a:	ee37 7b03 	vadd.f64	d7, d7, d3
 8024c8e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8024c92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024c9a:	d105      	bne.n	8024ca8 <pow+0x528>
 8024c9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024c9e:	463a      	mov	r2, r7
 8024ca0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8024ca4:	ec43 2b17 	vmov	d7, r2, r3
 8024ca8:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8024cac:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8024cb0:	ee26 6b00 	vmul.f64	d6, d6, d0
 8024cb4:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8024cb8:	ee27 0b00 	vmul.f64	d0, d7, d0
 8024cbc:	b01b      	add	sp, #108	; 0x6c
 8024cbe:	ecbd 8b0a 	vpop	{d8-d12}
 8024cc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cc6:	f000 beea 	b.w	8025a9e <__math_check_uflow>
 8024cca:	ec4b ab10 	vmov	d0, sl, fp
 8024cce:	eea7 0b00 	vfma.f64	d0, d7, d0
 8024cd2:	e5a3      	b.n	802481c <pow+0x9c>
 8024cd4:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8024cf0 <pow+0x570>
 8024cd8:	e5a0      	b.n	802481c <pow+0x9c>
 8024cda:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8024cde:	e59d      	b.n	802481c <pow+0x9c>
 8024ce0:	00000000 	.word	0x00000000
 8024ce4:	7f000000 	.word	0x7f000000
 8024ce8:	00000000 	.word	0x00000000
 8024cec:	00100000 	.word	0x00100000
	...
 8024cf8:	0802ac00 	.word	0x0802ac00
 8024cfc:	c0f00000 	.word	0xc0f00000
 8024d00:	3fe00000 	.word	0x3fe00000
 8024d04:	00000000 	.word	0x00000000

08024d08 <sin>:
 8024d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024d0a:	eeb0 7b40 	vmov.f64	d7, d0
 8024d0e:	ee17 3a90 	vmov	r3, s15
 8024d12:	4a1f      	ldr	r2, [pc, #124]	; (8024d90 <sin+0x88>)
 8024d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024d18:	4293      	cmp	r3, r2
 8024d1a:	dc05      	bgt.n	8024d28 <sin+0x20>
 8024d1c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8024d88 <sin+0x80>
 8024d20:	2000      	movs	r0, #0
 8024d22:	f000 fe11 	bl	8025948 <__kernel_sin>
 8024d26:	e004      	b.n	8024d32 <sin+0x2a>
 8024d28:	4a1a      	ldr	r2, [pc, #104]	; (8024d94 <sin+0x8c>)
 8024d2a:	4293      	cmp	r3, r2
 8024d2c:	dd04      	ble.n	8024d38 <sin+0x30>
 8024d2e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8024d32:	b005      	add	sp, #20
 8024d34:	f85d fb04 	ldr.w	pc, [sp], #4
 8024d38:	4668      	mov	r0, sp
 8024d3a:	f000 f9d5 	bl	80250e8 <__ieee754_rem_pio2>
 8024d3e:	f000 0003 	and.w	r0, r0, #3
 8024d42:	2801      	cmp	r0, #1
 8024d44:	d008      	beq.n	8024d58 <sin+0x50>
 8024d46:	2802      	cmp	r0, #2
 8024d48:	d00d      	beq.n	8024d66 <sin+0x5e>
 8024d4a:	b9b0      	cbnz	r0, 8024d7a <sin+0x72>
 8024d4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024d50:	ed9d 0b00 	vldr	d0, [sp]
 8024d54:	2001      	movs	r0, #1
 8024d56:	e7e4      	b.n	8024d22 <sin+0x1a>
 8024d58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024d5c:	ed9d 0b00 	vldr	d0, [sp]
 8024d60:	f000 fb06 	bl	8025370 <__kernel_cos>
 8024d64:	e7e5      	b.n	8024d32 <sin+0x2a>
 8024d66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024d6a:	ed9d 0b00 	vldr	d0, [sp]
 8024d6e:	2001      	movs	r0, #1
 8024d70:	f000 fdea 	bl	8025948 <__kernel_sin>
 8024d74:	eeb1 0b40 	vneg.f64	d0, d0
 8024d78:	e7db      	b.n	8024d32 <sin+0x2a>
 8024d7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024d7e:	ed9d 0b00 	vldr	d0, [sp]
 8024d82:	f000 faf5 	bl	8025370 <__kernel_cos>
 8024d86:	e7f5      	b.n	8024d74 <sin+0x6c>
	...
 8024d90:	3fe921fb 	.word	0x3fe921fb
 8024d94:	7fefffff 	.word	0x7fefffff

08024d98 <checkint>:
 8024d98:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8024d9c:	2b7e      	cmp	r3, #126	; 0x7e
 8024d9e:	dd10      	ble.n	8024dc2 <checkint+0x2a>
 8024da0:	2b96      	cmp	r3, #150	; 0x96
 8024da2:	dc0c      	bgt.n	8024dbe <checkint+0x26>
 8024da4:	2201      	movs	r2, #1
 8024da6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8024daa:	fa02 f303 	lsl.w	r3, r2, r3
 8024dae:	1e5a      	subs	r2, r3, #1
 8024db0:	4202      	tst	r2, r0
 8024db2:	d106      	bne.n	8024dc2 <checkint+0x2a>
 8024db4:	4203      	tst	r3, r0
 8024db6:	bf0c      	ite	eq
 8024db8:	2002      	moveq	r0, #2
 8024dba:	2001      	movne	r0, #1
 8024dbc:	4770      	bx	lr
 8024dbe:	2002      	movs	r0, #2
 8024dc0:	4770      	bx	lr
 8024dc2:	2000      	movs	r0, #0
 8024dc4:	4770      	bx	lr
	...

08024dc8 <powf>:
 8024dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024dca:	ee10 1a10 	vmov	r1, s0
 8024dce:	ee10 6a90 	vmov	r6, s1
 8024dd2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8024dd6:	0072      	lsls	r2, r6, #1
 8024dd8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8024ddc:	b085      	sub	sp, #20
 8024dde:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8024de2:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8024de6:	d256      	bcs.n	8024e96 <powf+0xce>
 8024de8:	4298      	cmp	r0, r3
 8024dea:	d256      	bcs.n	8024e9a <powf+0xd2>
 8024dec:	2000      	movs	r0, #0
 8024dee:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8024df2:	4ea3      	ldr	r6, [pc, #652]	; (8025080 <powf+0x2b8>)
 8024df4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8024df8:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8024dfc:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 8024e00:	0dd2      	lsrs	r2, r2, #23
 8024e02:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 8024e06:	05d2      	lsls	r2, r2, #23
 8024e08:	1a8b      	subs	r3, r1, r2
 8024e0a:	ed97 5b00 	vldr	d5, [r7]
 8024e0e:	ee07 3a90 	vmov	s15, r3
 8024e12:	15d2      	asrs	r2, r2, #23
 8024e14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8024e18:	eea5 6b07 	vfma.f64	d6, d5, d7
 8024e1c:	ed97 5b02 	vldr	d5, [r7, #8]
 8024e20:	ee26 2b06 	vmul.f64	d2, d6, d6
 8024e24:	ee22 1b02 	vmul.f64	d1, d2, d2
 8024e28:	ee07 2a90 	vmov	s15, r2
 8024e2c:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 8024e30:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8024e34:	ee37 7b05 	vadd.f64	d7, d7, d5
 8024e38:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 8024e3c:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 8024e40:	eea6 5b04 	vfma.f64	d5, d6, d4
 8024e44:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 8024e48:	eea6 4b03 	vfma.f64	d4, d6, d3
 8024e4c:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 8024e50:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8024e54:	eea6 7b03 	vfma.f64	d7, d6, d3
 8024e58:	eea2 7b04 	vfma.f64	d7, d2, d4
 8024e5c:	eea5 7b01 	vfma.f64	d7, d5, d1
 8024e60:	ee20 0b07 	vmul.f64	d0, d0, d7
 8024e64:	ee10 1a90 	vmov	r1, s1
 8024e68:	2300      	movs	r3, #0
 8024e6a:	2700      	movs	r7, #0
 8024e6c:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 8024e70:	f248 06be 	movw	r6, #32958	; 0x80be
 8024e74:	429f      	cmp	r7, r3
 8024e76:	bf08      	it	eq
 8024e78:	4296      	cmpeq	r6, r2
 8024e7a:	f080 80b1 	bcs.w	8024fe0 <powf+0x218>
 8024e7e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 8025060 <powf+0x298>
 8024e82:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8024e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e8a:	dd79      	ble.n	8024f80 <powf+0x1b8>
 8024e8c:	b005      	add	sp, #20
 8024e8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8024e92:	f000 be43 	b.w	8025b1c <__math_oflowf>
 8024e96:	4298      	cmp	r0, r3
 8024e98:	d32d      	bcc.n	8024ef6 <powf+0x12e>
 8024e9a:	b952      	cbnz	r2, 8024eb2 <powf+0xea>
 8024e9c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8024ea0:	005b      	lsls	r3, r3, #1
 8024ea2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8024ea6:	f240 80cd 	bls.w	8025044 <powf+0x27c>
 8024eaa:	ee30 0a20 	vadd.f32	s0, s0, s1
 8024eae:	b005      	add	sp, #20
 8024eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024eb2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8024eb6:	d105      	bne.n	8024ec4 <powf+0xfc>
 8024eb8:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8024ebc:	0076      	lsls	r6, r6, #1
 8024ebe:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8024ec2:	e7f0      	b.n	8024ea6 <powf+0xde>
 8024ec4:	004b      	lsls	r3, r1, #1
 8024ec6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8024eca:	d8ee      	bhi.n	8024eaa <powf+0xe2>
 8024ecc:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8024ed0:	d1eb      	bne.n	8024eaa <powf+0xe2>
 8024ed2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8024ed6:	f000 80b5 	beq.w	8025044 <powf+0x27c>
 8024eda:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8024ede:	ea6f 0606 	mvn.w	r6, r6
 8024ee2:	bf34      	ite	cc
 8024ee4:	2300      	movcc	r3, #0
 8024ee6:	2301      	movcs	r3, #1
 8024ee8:	0ff6      	lsrs	r6, r6, #31
 8024eea:	42b3      	cmp	r3, r6
 8024eec:	f040 80ad 	bne.w	802504a <powf+0x282>
 8024ef0:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8024ef4:	e7db      	b.n	8024eae <powf+0xe6>
 8024ef6:	004f      	lsls	r7, r1, #1
 8024ef8:	1e7a      	subs	r2, r7, #1
 8024efa:	429a      	cmp	r2, r3
 8024efc:	d31c      	bcc.n	8024f38 <powf+0x170>
 8024efe:	2900      	cmp	r1, #0
 8024f00:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024f04:	da0f      	bge.n	8024f26 <powf+0x15e>
 8024f06:	ee10 0a90 	vmov	r0, s1
 8024f0a:	f7ff ff45 	bl	8024d98 <checkint>
 8024f0e:	2801      	cmp	r0, #1
 8024f10:	d109      	bne.n	8024f26 <powf+0x15e>
 8024f12:	eeb1 0a40 	vneg.f32	s0, s0
 8024f16:	b947      	cbnz	r7, 8024f2a <powf+0x162>
 8024f18:	2e00      	cmp	r6, #0
 8024f1a:	dac8      	bge.n	8024eae <powf+0xe6>
 8024f1c:	b005      	add	sp, #20
 8024f1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8024f22:	f000 be01 	b.w	8025b28 <__math_divzerof>
 8024f26:	2000      	movs	r0, #0
 8024f28:	e7f5      	b.n	8024f16 <powf+0x14e>
 8024f2a:	2e00      	cmp	r6, #0
 8024f2c:	dabf      	bge.n	8024eae <powf+0xe6>
 8024f2e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024f32:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8024f36:	e7ba      	b.n	8024eae <powf+0xe6>
 8024f38:	2900      	cmp	r1, #0
 8024f3a:	da1f      	bge.n	8024f7c <powf+0x1b4>
 8024f3c:	ee10 0a90 	vmov	r0, s1
 8024f40:	f7ff ff2a 	bl	8024d98 <checkint>
 8024f44:	b920      	cbnz	r0, 8024f50 <powf+0x188>
 8024f46:	b005      	add	sp, #20
 8024f48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8024f4c:	f000 bdfc 	b.w	8025b48 <__math_invalidf>
 8024f50:	2801      	cmp	r0, #1
 8024f52:	bf14      	ite	ne
 8024f54:	2000      	movne	r0, #0
 8024f56:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8024f5a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8024f5e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8024f62:	f4bf af44 	bcs.w	8024dee <powf+0x26>
 8024f66:	eddf 7a47 	vldr	s15, [pc, #284]	; 8025084 <powf+0x2bc>
 8024f6a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8024f6e:	ee10 3a10 	vmov	r3, s0
 8024f72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024f76:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8024f7a:	e738      	b.n	8024dee <powf+0x26>
 8024f7c:	2000      	movs	r0, #0
 8024f7e:	e7ee      	b.n	8024f5e <powf+0x196>
 8024f80:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8025068 <powf+0x2a0>
 8024f84:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8024f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024f8c:	dd10      	ble.n	8024fb0 <powf+0x1e8>
 8024f8e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8024f92:	2800      	cmp	r0, #0
 8024f94:	d15c      	bne.n	8025050 <powf+0x288>
 8024f96:	9302      	str	r3, [sp, #8]
 8024f98:	eddd 7a02 	vldr	s15, [sp, #8]
 8024f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024fa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024fa4:	eef4 7a47 	vcmp.f32	s15, s14
 8024fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024fac:	f47f af6e 	bne.w	8024e8c <powf+0xc4>
 8024fb0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8025070 <powf+0x2a8>
 8024fb4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8024fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024fbc:	d804      	bhi.n	8024fc8 <powf+0x200>
 8024fbe:	b005      	add	sp, #20
 8024fc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8024fc4:	f000 bd9e 	b.w	8025b04 <__math_uflowf>
 8024fc8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8025078 <powf+0x2b0>
 8024fcc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8024fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024fd4:	d504      	bpl.n	8024fe0 <powf+0x218>
 8024fd6:	b005      	add	sp, #20
 8024fd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8024fdc:	f000 bd98 	b.w	8025b10 <__math_may_uflowf>
 8024fe0:	4b29      	ldr	r3, [pc, #164]	; (8025088 <powf+0x2c0>)
 8024fe2:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8024fe6:	ee30 6b07 	vadd.f64	d6, d0, d7
 8024fea:	ed8d 6b00 	vstr	d6, [sp]
 8024fee:	ee36 7b47 	vsub.f64	d7, d6, d7
 8024ff2:	ee30 7b47 	vsub.f64	d7, d0, d7
 8024ff6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8024ffa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8024ffe:	f006 011f 	and.w	r1, r6, #31
 8025002:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8025006:	e9d1 ce00 	ldrd	ip, lr, [r1]
 802500a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 802500e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8025012:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 8025016:	eea7 6b05 	vfma.f64	d6, d7, d5
 802501a:	ee27 5b07 	vmul.f64	d5, d7, d7
 802501e:	1836      	adds	r6, r6, r0
 8025020:	2300      	movs	r3, #0
 8025022:	eb13 040c 	adds.w	r4, r3, ip
 8025026:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 802502a:	eb41 050e 	adc.w	r5, r1, lr
 802502e:	eea7 0b04 	vfma.f64	d0, d7, d4
 8025032:	ec45 4b17 	vmov	d7, r4, r5
 8025036:	eea6 0b05 	vfma.f64	d0, d6, d5
 802503a:	ee20 0b07 	vmul.f64	d0, d0, d7
 802503e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8025042:	e734      	b.n	8024eae <powf+0xe6>
 8025044:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8025048:	e731      	b.n	8024eae <powf+0xe6>
 802504a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 802508c <powf+0x2c4>
 802504e:	e72e      	b.n	8024eae <powf+0xe6>
 8025050:	9303      	str	r3, [sp, #12]
 8025052:	eddd 7a03 	vldr	s15, [sp, #12]
 8025056:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802505a:	ee77 7a67 	vsub.f32	s15, s14, s15
 802505e:	e7a1      	b.n	8024fa4 <powf+0x1dc>
 8025060:	ffd1d571 	.word	0xffd1d571
 8025064:	405fffff 	.word	0x405fffff
 8025068:	ffa3aae2 	.word	0xffa3aae2
 802506c:	405fffff 	.word	0x405fffff
 8025070:	00000000 	.word	0x00000000
 8025074:	c062c000 	.word	0xc062c000
 8025078:	00000000 	.word	0x00000000
 802507c:	c062a000 	.word	0xc062a000
 8025080:	0802a950 	.word	0x0802a950
 8025084:	4b000000 	.word	0x4b000000
 8025088:	0802b4c0 	.word	0x0802b4c0
 802508c:	00000000 	.word	0x00000000

08025090 <sqrt>:
 8025090:	b508      	push	{r3, lr}
 8025092:	ed2d 8b04 	vpush	{d8-d9}
 8025096:	eeb0 8b40 	vmov.f64	d8, d0
 802509a:	f000 f965 	bl	8025368 <__ieee754_sqrt>
 802509e:	4b10      	ldr	r3, [pc, #64]	; (80250e0 <sqrt+0x50>)
 80250a0:	f993 3000 	ldrsb.w	r3, [r3]
 80250a4:	3301      	adds	r3, #1
 80250a6:	d011      	beq.n	80250cc <sqrt+0x3c>
 80250a8:	eeb4 8b48 	vcmp.f64	d8, d8
 80250ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80250b0:	d60c      	bvs.n	80250cc <sqrt+0x3c>
 80250b2:	ed9f 9b09 	vldr	d9, [pc, #36]	; 80250d8 <sqrt+0x48>
 80250b6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80250ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80250be:	d505      	bpl.n	80250cc <sqrt+0x3c>
 80250c0:	f7fd fca4 	bl	8022a0c <__errno>
 80250c4:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80250c8:	2321      	movs	r3, #33	; 0x21
 80250ca:	6003      	str	r3, [r0, #0]
 80250cc:	ecbd 8b04 	vpop	{d8-d9}
 80250d0:	bd08      	pop	{r3, pc}
 80250d2:	bf00      	nop
 80250d4:	f3af 8000 	nop.w
	...
 80250e0:	24003a18 	.word	0x24003a18
 80250e4:	00000000 	.word	0x00000000

080250e8 <__ieee754_rem_pio2>:
 80250e8:	b570      	push	{r4, r5, r6, lr}
 80250ea:	eeb0 7b40 	vmov.f64	d7, d0
 80250ee:	ee17 5a90 	vmov	r5, s15
 80250f2:	4b97      	ldr	r3, [pc, #604]	; (8025350 <__ieee754_rem_pio2+0x268>)
 80250f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80250f8:	429e      	cmp	r6, r3
 80250fa:	b088      	sub	sp, #32
 80250fc:	4604      	mov	r4, r0
 80250fe:	dc07      	bgt.n	8025110 <__ieee754_rem_pio2+0x28>
 8025100:	2200      	movs	r2, #0
 8025102:	2300      	movs	r3, #0
 8025104:	ed84 0b00 	vstr	d0, [r4]
 8025108:	e9c0 2302 	strd	r2, r3, [r0, #8]
 802510c:	2000      	movs	r0, #0
 802510e:	e01b      	b.n	8025148 <__ieee754_rem_pio2+0x60>
 8025110:	4b90      	ldr	r3, [pc, #576]	; (8025354 <__ieee754_rem_pio2+0x26c>)
 8025112:	429e      	cmp	r6, r3
 8025114:	dc3b      	bgt.n	802518e <__ieee754_rem_pio2+0xa6>
 8025116:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 802511a:	2d00      	cmp	r5, #0
 802511c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8025310 <__ieee754_rem_pio2+0x228>
 8025120:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8025124:	dd19      	ble.n	802515a <__ieee754_rem_pio2+0x72>
 8025126:	ee30 7b46 	vsub.f64	d7, d0, d6
 802512a:	429e      	cmp	r6, r3
 802512c:	d00e      	beq.n	802514c <__ieee754_rem_pio2+0x64>
 802512e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8025318 <__ieee754_rem_pio2+0x230>
 8025132:	ee37 5b46 	vsub.f64	d5, d7, d6
 8025136:	ee37 7b45 	vsub.f64	d7, d7, d5
 802513a:	ed84 5b00 	vstr	d5, [r4]
 802513e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8025142:	ed84 7b02 	vstr	d7, [r4, #8]
 8025146:	2001      	movs	r0, #1
 8025148:	b008      	add	sp, #32
 802514a:	bd70      	pop	{r4, r5, r6, pc}
 802514c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8025320 <__ieee754_rem_pio2+0x238>
 8025150:	ee37 7b46 	vsub.f64	d7, d7, d6
 8025154:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8025328 <__ieee754_rem_pio2+0x240>
 8025158:	e7eb      	b.n	8025132 <__ieee754_rem_pio2+0x4a>
 802515a:	429e      	cmp	r6, r3
 802515c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8025160:	d00e      	beq.n	8025180 <__ieee754_rem_pio2+0x98>
 8025162:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8025318 <__ieee754_rem_pio2+0x230>
 8025166:	ee37 5b06 	vadd.f64	d5, d7, d6
 802516a:	ee37 7b45 	vsub.f64	d7, d7, d5
 802516e:	ed84 5b00 	vstr	d5, [r4]
 8025172:	ee37 7b06 	vadd.f64	d7, d7, d6
 8025176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802517a:	ed84 7b02 	vstr	d7, [r4, #8]
 802517e:	e7e3      	b.n	8025148 <__ieee754_rem_pio2+0x60>
 8025180:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8025320 <__ieee754_rem_pio2+0x238>
 8025184:	ee37 7b06 	vadd.f64	d7, d7, d6
 8025188:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8025328 <__ieee754_rem_pio2+0x240>
 802518c:	e7eb      	b.n	8025166 <__ieee754_rem_pio2+0x7e>
 802518e:	4b72      	ldr	r3, [pc, #456]	; (8025358 <__ieee754_rem_pio2+0x270>)
 8025190:	429e      	cmp	r6, r3
 8025192:	dc6e      	bgt.n	8025272 <__ieee754_rem_pio2+0x18a>
 8025194:	f000 fce7 	bl	8025b66 <fabs>
 8025198:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802519c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8025330 <__ieee754_rem_pio2+0x248>
 80251a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80251a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80251a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80251ac:	ee17 0a90 	vmov	r0, s15
 80251b0:	eeb1 4b45 	vneg.f64	d4, d5
 80251b4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8025310 <__ieee754_rem_pio2+0x228>
 80251b8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80251bc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8025318 <__ieee754_rem_pio2+0x230>
 80251c0:	281f      	cmp	r0, #31
 80251c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80251c6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80251ca:	dc08      	bgt.n	80251de <__ieee754_rem_pio2+0xf6>
 80251cc:	4b63      	ldr	r3, [pc, #396]	; (802535c <__ieee754_rem_pio2+0x274>)
 80251ce:	1e42      	subs	r2, r0, #1
 80251d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80251d4:	42b3      	cmp	r3, r6
 80251d6:	d002      	beq.n	80251de <__ieee754_rem_pio2+0xf6>
 80251d8:	ed84 6b00 	vstr	d6, [r4]
 80251dc:	e024      	b.n	8025228 <__ieee754_rem_pio2+0x140>
 80251de:	ee16 3a90 	vmov	r3, s13
 80251e2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80251e6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80251ea:	2b10      	cmp	r3, #16
 80251ec:	ea4f 5226 	mov.w	r2, r6, asr #20
 80251f0:	ddf2      	ble.n	80251d8 <__ieee754_rem_pio2+0xf0>
 80251f2:	eeb0 6b40 	vmov.f64	d6, d0
 80251f6:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8025320 <__ieee754_rem_pio2+0x238>
 80251fa:	eea4 6b03 	vfma.f64	d6, d4, d3
 80251fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8025202:	eea4 7b03 	vfma.f64	d7, d4, d3
 8025206:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8025328 <__ieee754_rem_pio2+0x240>
 802520a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 802520e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8025212:	ee13 3a90 	vmov	r3, s7
 8025216:	f3c3 530a 	ubfx	r3, r3, #20, #11
 802521a:	1ad3      	subs	r3, r2, r3
 802521c:	2b31      	cmp	r3, #49	; 0x31
 802521e:	dc17      	bgt.n	8025250 <__ieee754_rem_pio2+0x168>
 8025220:	eeb0 0b46 	vmov.f64	d0, d6
 8025224:	ed84 3b00 	vstr	d3, [r4]
 8025228:	ed94 6b00 	vldr	d6, [r4]
 802522c:	2d00      	cmp	r5, #0
 802522e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8025232:	ee30 7b47 	vsub.f64	d7, d0, d7
 8025236:	ed84 7b02 	vstr	d7, [r4, #8]
 802523a:	da85      	bge.n	8025148 <__ieee754_rem_pio2+0x60>
 802523c:	eeb1 6b46 	vneg.f64	d6, d6
 8025240:	ed84 6b00 	vstr	d6, [r4]
 8025244:	eeb1 7b47 	vneg.f64	d7, d7
 8025248:	4240      	negs	r0, r0
 802524a:	ed84 7b02 	vstr	d7, [r4, #8]
 802524e:	e77b      	b.n	8025148 <__ieee754_rem_pio2+0x60>
 8025250:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8025338 <__ieee754_rem_pio2+0x250>
 8025254:	eeb0 0b46 	vmov.f64	d0, d6
 8025258:	eea4 0b03 	vfma.f64	d0, d4, d3
 802525c:	ee36 7b40 	vsub.f64	d7, d6, d0
 8025260:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8025340 <__ieee754_rem_pio2+0x258>
 8025264:	eea4 7b03 	vfma.f64	d7, d4, d3
 8025268:	ee95 7b06 	vfnms.f64	d7, d5, d6
 802526c:	ee30 6b47 	vsub.f64	d6, d0, d7
 8025270:	e7b2      	b.n	80251d8 <__ieee754_rem_pio2+0xf0>
 8025272:	4b3b      	ldr	r3, [pc, #236]	; (8025360 <__ieee754_rem_pio2+0x278>)
 8025274:	429e      	cmp	r6, r3
 8025276:	dd06      	ble.n	8025286 <__ieee754_rem_pio2+0x19e>
 8025278:	ee30 7b40 	vsub.f64	d7, d0, d0
 802527c:	ed80 7b02 	vstr	d7, [r0, #8]
 8025280:	ed80 7b00 	vstr	d7, [r0]
 8025284:	e742      	b.n	802510c <__ieee754_rem_pio2+0x24>
 8025286:	1532      	asrs	r2, r6, #20
 8025288:	ee10 0a10 	vmov	r0, s0
 802528c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8025290:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8025294:	ec41 0b17 	vmov	d7, r0, r1
 8025298:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 802529c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8025348 <__ieee754_rem_pio2+0x260>
 80252a0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80252a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80252a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80252ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 80252b0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80252b4:	a902      	add	r1, sp, #8
 80252b6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80252ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80252be:	ed8d 6b04 	vstr	d6, [sp, #16]
 80252c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80252c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80252ca:	2603      	movs	r6, #3
 80252cc:	4608      	mov	r0, r1
 80252ce:	ed91 7b04 	vldr	d7, [r1, #16]
 80252d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80252d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252da:	4633      	mov	r3, r6
 80252dc:	f1a1 0108 	sub.w	r1, r1, #8
 80252e0:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80252e4:	d0f3      	beq.n	80252ce <__ieee754_rem_pio2+0x1e6>
 80252e6:	491f      	ldr	r1, [pc, #124]	; (8025364 <__ieee754_rem_pio2+0x27c>)
 80252e8:	9101      	str	r1, [sp, #4]
 80252ea:	2102      	movs	r1, #2
 80252ec:	9100      	str	r1, [sp, #0]
 80252ee:	4621      	mov	r1, r4
 80252f0:	f000 f8aa 	bl	8025448 <__kernel_rem_pio2>
 80252f4:	2d00      	cmp	r5, #0
 80252f6:	f6bf af27 	bge.w	8025148 <__ieee754_rem_pio2+0x60>
 80252fa:	ed94 7b00 	vldr	d7, [r4]
 80252fe:	eeb1 7b47 	vneg.f64	d7, d7
 8025302:	ed84 7b00 	vstr	d7, [r4]
 8025306:	ed94 7b02 	vldr	d7, [r4, #8]
 802530a:	e79b      	b.n	8025244 <__ieee754_rem_pio2+0x15c>
 802530c:	f3af 8000 	nop.w
 8025310:	54400000 	.word	0x54400000
 8025314:	3ff921fb 	.word	0x3ff921fb
 8025318:	1a626331 	.word	0x1a626331
 802531c:	3dd0b461 	.word	0x3dd0b461
 8025320:	1a600000 	.word	0x1a600000
 8025324:	3dd0b461 	.word	0x3dd0b461
 8025328:	2e037073 	.word	0x2e037073
 802532c:	3ba3198a 	.word	0x3ba3198a
 8025330:	6dc9c883 	.word	0x6dc9c883
 8025334:	3fe45f30 	.word	0x3fe45f30
 8025338:	2e000000 	.word	0x2e000000
 802533c:	3ba3198a 	.word	0x3ba3198a
 8025340:	252049c1 	.word	0x252049c1
 8025344:	397b839a 	.word	0x397b839a
 8025348:	00000000 	.word	0x00000000
 802534c:	41700000 	.word	0x41700000
 8025350:	3fe921fb 	.word	0x3fe921fb
 8025354:	4002d97b 	.word	0x4002d97b
 8025358:	413921fb 	.word	0x413921fb
 802535c:	0802aa78 	.word	0x0802aa78
 8025360:	7fefffff 	.word	0x7fefffff
 8025364:	0802aaf8 	.word	0x0802aaf8

08025368 <__ieee754_sqrt>:
 8025368:	eeb1 0bc0 	vsqrt.f64	d0, d0
 802536c:	4770      	bx	lr
	...

08025370 <__kernel_cos>:
 8025370:	ee10 1a90 	vmov	r1, s1
 8025374:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8025378:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802537c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8025380:	da05      	bge.n	802538e <__kernel_cos+0x1e>
 8025382:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8025386:	ee17 3a90 	vmov	r3, s15
 802538a:	2b00      	cmp	r3, #0
 802538c:	d03d      	beq.n	802540a <__kernel_cos+0x9a>
 802538e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8025392:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8025410 <__kernel_cos+0xa0>
 8025396:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8025418 <__kernel_cos+0xa8>
 802539a:	eea3 6b07 	vfma.f64	d6, d3, d7
 802539e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8025420 <__kernel_cos+0xb0>
 80253a2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80253a6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8025428 <__kernel_cos+0xb8>
 80253aa:	eea7 6b03 	vfma.f64	d6, d7, d3
 80253ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8025430 <__kernel_cos+0xc0>
 80253b2:	4b23      	ldr	r3, [pc, #140]	; (8025440 <__kernel_cos+0xd0>)
 80253b4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80253b8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8025438 <__kernel_cos+0xc8>
 80253bc:	4299      	cmp	r1, r3
 80253be:	eea7 6b03 	vfma.f64	d6, d7, d3
 80253c2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80253c6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80253ca:	ee23 7b07 	vmul.f64	d7, d3, d7
 80253ce:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80253d2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80253d6:	dc04      	bgt.n	80253e2 <__kernel_cos+0x72>
 80253d8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80253dc:	ee34 0b46 	vsub.f64	d0, d4, d6
 80253e0:	4770      	bx	lr
 80253e2:	4b18      	ldr	r3, [pc, #96]	; (8025444 <__kernel_cos+0xd4>)
 80253e4:	4299      	cmp	r1, r3
 80253e6:	dc0d      	bgt.n	8025404 <__kernel_cos+0x94>
 80253e8:	2200      	movs	r2, #0
 80253ea:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80253ee:	ec43 2b15 	vmov	d5, r2, r3
 80253f2:	ee34 0b45 	vsub.f64	d0, d4, d5
 80253f6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80253fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80253fe:	ee30 0b47 	vsub.f64	d0, d0, d7
 8025402:	4770      	bx	lr
 8025404:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8025408:	e7f3      	b.n	80253f2 <__kernel_cos+0x82>
 802540a:	eeb0 0b44 	vmov.f64	d0, d4
 802540e:	4770      	bx	lr
 8025410:	be8838d4 	.word	0xbe8838d4
 8025414:	bda8fae9 	.word	0xbda8fae9
 8025418:	bdb4b1c4 	.word	0xbdb4b1c4
 802541c:	3e21ee9e 	.word	0x3e21ee9e
 8025420:	809c52ad 	.word	0x809c52ad
 8025424:	be927e4f 	.word	0xbe927e4f
 8025428:	19cb1590 	.word	0x19cb1590
 802542c:	3efa01a0 	.word	0x3efa01a0
 8025430:	16c15177 	.word	0x16c15177
 8025434:	bf56c16c 	.word	0xbf56c16c
 8025438:	5555554c 	.word	0x5555554c
 802543c:	3fa55555 	.word	0x3fa55555
 8025440:	3fd33332 	.word	0x3fd33332
 8025444:	3fe90000 	.word	0x3fe90000

08025448 <__kernel_rem_pio2>:
 8025448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802544c:	ed2d 8b06 	vpush	{d8-d10}
 8025450:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8025454:	469b      	mov	fp, r3
 8025456:	460f      	mov	r7, r1
 8025458:	4bcf      	ldr	r3, [pc, #828]	; (8025798 <__kernel_rem_pio2+0x350>)
 802545a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 802545c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8025460:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8025464:	9000      	str	r0, [sp, #0]
 8025466:	f112 0f14 	cmn.w	r2, #20
 802546a:	bfa8      	it	ge
 802546c:	2318      	movge	r3, #24
 802546e:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 8025472:	bfb8      	it	lt
 8025474:	2300      	movlt	r3, #0
 8025476:	f06f 0417 	mvn.w	r4, #23
 802547a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8025780 <__kernel_rem_pio2+0x338>
 802547e:	bfa4      	itt	ge
 8025480:	f1a2 0a03 	subge.w	sl, r2, #3
 8025484:	fb9a f3f3 	sdivge	r3, sl, r3
 8025488:	fb03 4404 	mla	r4, r3, r4, r4
 802548c:	1a5d      	subs	r5, r3, r1
 802548e:	4414      	add	r4, r2
 8025490:	eb09 0601 	add.w	r6, r9, r1
 8025494:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8025498:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 802549c:	2200      	movs	r2, #0
 802549e:	42b2      	cmp	r2, r6
 80254a0:	dd12      	ble.n	80254c8 <__kernel_rem_pio2+0x80>
 80254a2:	aa18      	add	r2, sp, #96	; 0x60
 80254a4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80254a8:	460e      	mov	r6, r1
 80254aa:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 80254ae:	f1cb 0a01 	rsb	sl, fp, #1
 80254b2:	eb0a 0006 	add.w	r0, sl, r6
 80254b6:	4581      	cmp	r9, r0
 80254b8:	db25      	blt.n	8025506 <__kernel_rem_pio2+0xbe>
 80254ba:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8025780 <__kernel_rem_pio2+0x338>
 80254be:	f8dd e000 	ldr.w	lr, [sp]
 80254c2:	4615      	mov	r5, r2
 80254c4:	2000      	movs	r0, #0
 80254c6:	e015      	b.n	80254f4 <__kernel_rem_pio2+0xac>
 80254c8:	42d5      	cmn	r5, r2
 80254ca:	d409      	bmi.n	80254e0 <__kernel_rem_pio2+0x98>
 80254cc:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 80254d0:	ee07 0a90 	vmov	s15, r0
 80254d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80254d8:	eca8 7b02 	vstmia	r8!, {d7}
 80254dc:	3201      	adds	r2, #1
 80254de:	e7de      	b.n	802549e <__kernel_rem_pio2+0x56>
 80254e0:	eeb0 7b46 	vmov.f64	d7, d6
 80254e4:	e7f8      	b.n	80254d8 <__kernel_rem_pio2+0x90>
 80254e6:	ecbe 5b02 	vldmia	lr!, {d5}
 80254ea:	ed95 6b00 	vldr	d6, [r5]
 80254ee:	3001      	adds	r0, #1
 80254f0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80254f4:	4288      	cmp	r0, r1
 80254f6:	f1a5 0508 	sub.w	r5, r5, #8
 80254fa:	ddf4      	ble.n	80254e6 <__kernel_rem_pio2+0x9e>
 80254fc:	eca8 7b02 	vstmia	r8!, {d7}
 8025500:	3208      	adds	r2, #8
 8025502:	3601      	adds	r6, #1
 8025504:	e7d5      	b.n	80254b2 <__kernel_rem_pio2+0x6a>
 8025506:	aa04      	add	r2, sp, #16
 8025508:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8025788 <__kernel_rem_pio2+0x340>
 802550c:	ed9f aba0 	vldr	d10, [pc, #640]	; 8025790 <__kernel_rem_pio2+0x348>
 8025510:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8025514:	9201      	str	r2, [sp, #4]
 8025516:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 802551a:	464e      	mov	r6, r9
 802551c:	ab90      	add	r3, sp, #576	; 0x240
 802551e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8025522:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8025526:	ab04      	add	r3, sp, #16
 8025528:	4618      	mov	r0, r3
 802552a:	4632      	mov	r2, r6
 802552c:	2a00      	cmp	r2, #0
 802552e:	dc4e      	bgt.n	80255ce <__kernel_rem_pio2+0x186>
 8025530:	4620      	mov	r0, r4
 8025532:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8025536:	f000 fb93 	bl	8025c60 <scalbn>
 802553a:	eeb0 8b40 	vmov.f64	d8, d0
 802553e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8025542:	ee28 0b00 	vmul.f64	d0, d8, d0
 8025546:	f000 fb17 	bl	8025b78 <floor>
 802554a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 802554e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8025552:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8025556:	2c00      	cmp	r4, #0
 8025558:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 802555c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8025560:	ee38 8b40 	vsub.f64	d8, d8, d0
 8025564:	ee17 8a90 	vmov	r8, s15
 8025568:	dd46      	ble.n	80255f8 <__kernel_rem_pio2+0x1b0>
 802556a:	1e70      	subs	r0, r6, #1
 802556c:	aa04      	add	r2, sp, #16
 802556e:	f1c4 0c18 	rsb	ip, r4, #24
 8025572:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8025576:	fa45 f20c 	asr.w	r2, r5, ip
 802557a:	4490      	add	r8, r2
 802557c:	fa02 f20c 	lsl.w	r2, r2, ip
 8025580:	1aad      	subs	r5, r5, r2
 8025582:	aa04      	add	r2, sp, #16
 8025584:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8025588:	f1c4 0217 	rsb	r2, r4, #23
 802558c:	4115      	asrs	r5, r2
 802558e:	2d00      	cmp	r5, #0
 8025590:	dd41      	ble.n	8025616 <__kernel_rem_pio2+0x1ce>
 8025592:	f04f 0c00 	mov.w	ip, #0
 8025596:	f108 0801 	add.w	r8, r8, #1
 802559a:	4660      	mov	r0, ip
 802559c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80255a0:	4566      	cmp	r6, ip
 80255a2:	dc69      	bgt.n	8025678 <__kernel_rem_pio2+0x230>
 80255a4:	2c00      	cmp	r4, #0
 80255a6:	dd03      	ble.n	80255b0 <__kernel_rem_pio2+0x168>
 80255a8:	2c01      	cmp	r4, #1
 80255aa:	d076      	beq.n	802569a <__kernel_rem_pio2+0x252>
 80255ac:	2c02      	cmp	r4, #2
 80255ae:	d07f      	beq.n	80256b0 <__kernel_rem_pio2+0x268>
 80255b0:	2d02      	cmp	r5, #2
 80255b2:	d130      	bne.n	8025616 <__kernel_rem_pio2+0x1ce>
 80255b4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80255b8:	ee30 8b48 	vsub.f64	d8, d0, d8
 80255bc:	b358      	cbz	r0, 8025616 <__kernel_rem_pio2+0x1ce>
 80255be:	4620      	mov	r0, r4
 80255c0:	9102      	str	r1, [sp, #8]
 80255c2:	f000 fb4d 	bl	8025c60 <scalbn>
 80255c6:	9902      	ldr	r1, [sp, #8]
 80255c8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80255cc:	e023      	b.n	8025616 <__kernel_rem_pio2+0x1ce>
 80255ce:	ee20 7b09 	vmul.f64	d7, d0, d9
 80255d2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80255d6:	3a01      	subs	r2, #1
 80255d8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80255dc:	ad68      	add	r5, sp, #416	; 0x1a0
 80255de:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80255e2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80255e6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 80255ea:	eca0 0a01 	vstmia	r0!, {s0}
 80255ee:	ed95 0b00 	vldr	d0, [r5]
 80255f2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80255f6:	e799      	b.n	802552c <__kernel_rem_pio2+0xe4>
 80255f8:	d105      	bne.n	8025606 <__kernel_rem_pio2+0x1be>
 80255fa:	1e72      	subs	r2, r6, #1
 80255fc:	a804      	add	r0, sp, #16
 80255fe:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8025602:	15ed      	asrs	r5, r5, #23
 8025604:	e7c3      	b.n	802558e <__kernel_rem_pio2+0x146>
 8025606:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802560a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802560e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025612:	da2f      	bge.n	8025674 <__kernel_rem_pio2+0x22c>
 8025614:	2500      	movs	r5, #0
 8025616:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802561a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802561e:	f040 8087 	bne.w	8025730 <__kernel_rem_pio2+0x2e8>
 8025622:	1e73      	subs	r3, r6, #1
 8025624:	4618      	mov	r0, r3
 8025626:	f04f 0c00 	mov.w	ip, #0
 802562a:	4548      	cmp	r0, r9
 802562c:	da47      	bge.n	80256be <__kernel_rem_pio2+0x276>
 802562e:	f1bc 0f00 	cmp.w	ip, #0
 8025632:	d070      	beq.n	8025716 <__kernel_rem_pio2+0x2ce>
 8025634:	aa04      	add	r2, sp, #16
 8025636:	3c18      	subs	r4, #24
 8025638:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802563c:	2a00      	cmp	r2, #0
 802563e:	d075      	beq.n	802572c <__kernel_rem_pio2+0x2e4>
 8025640:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8025644:	4620      	mov	r0, r4
 8025646:	9300      	str	r3, [sp, #0]
 8025648:	f000 fb0a 	bl	8025c60 <scalbn>
 802564c:	9b00      	ldr	r3, [sp, #0]
 802564e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8025788 <__kernel_rem_pio2+0x340>
 8025652:	461a      	mov	r2, r3
 8025654:	2a00      	cmp	r2, #0
 8025656:	f280 80ac 	bge.w	80257b2 <__kernel_rem_pio2+0x36a>
 802565a:	4619      	mov	r1, r3
 802565c:	2000      	movs	r0, #0
 802565e:	2900      	cmp	r1, #0
 8025660:	f2c0 80cd 	blt.w	80257fe <__kernel_rem_pio2+0x3b6>
 8025664:	aa68      	add	r2, sp, #416	; 0x1a0
 8025666:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 802566a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8025780 <__kernel_rem_pio2+0x338>
 802566e:	4e4b      	ldr	r6, [pc, #300]	; (802579c <__kernel_rem_pio2+0x354>)
 8025670:	2200      	movs	r2, #0
 8025672:	e0b8      	b.n	80257e6 <__kernel_rem_pio2+0x39e>
 8025674:	2502      	movs	r5, #2
 8025676:	e78c      	b.n	8025592 <__kernel_rem_pio2+0x14a>
 8025678:	681a      	ldr	r2, [r3, #0]
 802567a:	b948      	cbnz	r0, 8025690 <__kernel_rem_pio2+0x248>
 802567c:	b11a      	cbz	r2, 8025686 <__kernel_rem_pio2+0x23e>
 802567e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8025682:	601a      	str	r2, [r3, #0]
 8025684:	2201      	movs	r2, #1
 8025686:	f10c 0c01 	add.w	ip, ip, #1
 802568a:	3304      	adds	r3, #4
 802568c:	4610      	mov	r0, r2
 802568e:	e787      	b.n	80255a0 <__kernel_rem_pio2+0x158>
 8025690:	ebae 0202 	sub.w	r2, lr, r2
 8025694:	601a      	str	r2, [r3, #0]
 8025696:	4602      	mov	r2, r0
 8025698:	e7f5      	b.n	8025686 <__kernel_rem_pio2+0x23e>
 802569a:	1e72      	subs	r2, r6, #1
 802569c:	ab04      	add	r3, sp, #16
 802569e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80256a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80256a6:	f10d 0c10 	add.w	ip, sp, #16
 80256aa:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 80256ae:	e77f      	b.n	80255b0 <__kernel_rem_pio2+0x168>
 80256b0:	1e72      	subs	r2, r6, #1
 80256b2:	ab04      	add	r3, sp, #16
 80256b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80256b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80256bc:	e7f3      	b.n	80256a6 <__kernel_rem_pio2+0x25e>
 80256be:	aa04      	add	r2, sp, #16
 80256c0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80256c4:	3801      	subs	r0, #1
 80256c6:	ea4c 0c02 	orr.w	ip, ip, r2
 80256ca:	e7ae      	b.n	802562a <__kernel_rem_pio2+0x1e2>
 80256cc:	3001      	adds	r0, #1
 80256ce:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80256d2:	2a00      	cmp	r2, #0
 80256d4:	d0fa      	beq.n	80256cc <__kernel_rem_pio2+0x284>
 80256d6:	eb06 020b 	add.w	r2, r6, fp
 80256da:	ad18      	add	r5, sp, #96	; 0x60
 80256dc:	1c73      	adds	r3, r6, #1
 80256de:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80256e2:	4406      	add	r6, r0
 80256e4:	429e      	cmp	r6, r3
 80256e6:	f6ff af19 	blt.w	802551c <__kernel_rem_pio2+0xd4>
 80256ea:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80256ee:	9d00      	ldr	r5, [sp, #0]
 80256f0:	ee07 0a90 	vmov	s15, r0
 80256f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80256f8:	2000      	movs	r0, #0
 80256fa:	eca2 7b02 	vstmia	r2!, {d7}
 80256fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8025780 <__kernel_rem_pio2+0x338>
 8025702:	4694      	mov	ip, r2
 8025704:	4288      	cmp	r0, r1
 8025706:	dd09      	ble.n	802571c <__kernel_rem_pio2+0x2d4>
 8025708:	a868      	add	r0, sp, #416	; 0x1a0
 802570a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 802570e:	ed80 7b00 	vstr	d7, [r0]
 8025712:	3301      	adds	r3, #1
 8025714:	e7e6      	b.n	80256e4 <__kernel_rem_pio2+0x29c>
 8025716:	9b01      	ldr	r3, [sp, #4]
 8025718:	2001      	movs	r0, #1
 802571a:	e7d8      	b.n	80256ce <__kernel_rem_pio2+0x286>
 802571c:	ecb5 5b02 	vldmia	r5!, {d5}
 8025720:	ed3c 6b02 	vldmdb	ip!, {d6}
 8025724:	3001      	adds	r0, #1
 8025726:	eea5 7b06 	vfma.f64	d7, d5, d6
 802572a:	e7eb      	b.n	8025704 <__kernel_rem_pio2+0x2bc>
 802572c:	3b01      	subs	r3, #1
 802572e:	e781      	b.n	8025634 <__kernel_rem_pio2+0x1ec>
 8025730:	4260      	negs	r0, r4
 8025732:	eeb0 0b48 	vmov.f64	d0, d8
 8025736:	f000 fa93 	bl	8025c60 <scalbn>
 802573a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8025790 <__kernel_rem_pio2+0x348>
 802573e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8025742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025746:	db2b      	blt.n	80257a0 <__kernel_rem_pio2+0x358>
 8025748:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8025788 <__kernel_rem_pio2+0x340>
 802574c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8025750:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8025754:	aa04      	add	r2, sp, #16
 8025756:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 802575a:	eea5 0b46 	vfms.f64	d0, d5, d6
 802575e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8025762:	a904      	add	r1, sp, #16
 8025764:	ee10 3a10 	vmov	r3, s0
 8025768:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802576c:	ee17 2a10 	vmov	r2, s14
 8025770:	1c73      	adds	r3, r6, #1
 8025772:	3418      	adds	r4, #24
 8025774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8025778:	e762      	b.n	8025640 <__kernel_rem_pio2+0x1f8>
 802577a:	bf00      	nop
 802577c:	f3af 8000 	nop.w
	...
 802578c:	3e700000 	.word	0x3e700000
 8025790:	00000000 	.word	0x00000000
 8025794:	41700000 	.word	0x41700000
 8025798:	0802b4b0 	.word	0x0802b4b0
 802579c:	0802b470 	.word	0x0802b470
 80257a0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80257a4:	aa04      	add	r2, sp, #16
 80257a6:	ee10 3a10 	vmov	r3, s0
 80257aa:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80257ae:	4633      	mov	r3, r6
 80257b0:	e746      	b.n	8025640 <__kernel_rem_pio2+0x1f8>
 80257b2:	a804      	add	r0, sp, #16
 80257b4:	a968      	add	r1, sp, #416	; 0x1a0
 80257b6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80257ba:	9000      	str	r0, [sp, #0]
 80257bc:	ee07 0a90 	vmov	s15, r0
 80257c0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80257c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80257c8:	3a01      	subs	r2, #1
 80257ca:	ee27 7b00 	vmul.f64	d7, d7, d0
 80257ce:	ee20 0b06 	vmul.f64	d0, d0, d6
 80257d2:	ed81 7b00 	vstr	d7, [r1]
 80257d6:	e73d      	b.n	8025654 <__kernel_rem_pio2+0x20c>
 80257d8:	ecb6 5b02 	vldmia	r6!, {d5}
 80257dc:	ecb4 6b02 	vldmia	r4!, {d6}
 80257e0:	3201      	adds	r2, #1
 80257e2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80257e6:	454a      	cmp	r2, r9
 80257e8:	dc01      	bgt.n	80257ee <__kernel_rem_pio2+0x3a6>
 80257ea:	4290      	cmp	r0, r2
 80257ec:	daf4      	bge.n	80257d8 <__kernel_rem_pio2+0x390>
 80257ee:	aa40      	add	r2, sp, #256	; 0x100
 80257f0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80257f4:	ed82 7b00 	vstr	d7, [r2]
 80257f8:	3901      	subs	r1, #1
 80257fa:	3001      	adds	r0, #1
 80257fc:	e72f      	b.n	802565e <__kernel_rem_pio2+0x216>
 80257fe:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8025800:	2a02      	cmp	r2, #2
 8025802:	dc0a      	bgt.n	802581a <__kernel_rem_pio2+0x3d2>
 8025804:	2a00      	cmp	r2, #0
 8025806:	dc5a      	bgt.n	80258be <__kernel_rem_pio2+0x476>
 8025808:	d039      	beq.n	802587e <__kernel_rem_pio2+0x436>
 802580a:	f008 0007 	and.w	r0, r8, #7
 802580e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8025812:	ecbd 8b06 	vpop	{d8-d10}
 8025816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802581a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 802581c:	2a03      	cmp	r2, #3
 802581e:	d1f4      	bne.n	802580a <__kernel_rem_pio2+0x3c2>
 8025820:	aa40      	add	r2, sp, #256	; 0x100
 8025822:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8025826:	4611      	mov	r1, r2
 8025828:	4618      	mov	r0, r3
 802582a:	2800      	cmp	r0, #0
 802582c:	f1a1 0108 	sub.w	r1, r1, #8
 8025830:	dc52      	bgt.n	80258d8 <__kernel_rem_pio2+0x490>
 8025832:	4619      	mov	r1, r3
 8025834:	2901      	cmp	r1, #1
 8025836:	f1a2 0208 	sub.w	r2, r2, #8
 802583a:	dc5d      	bgt.n	80258f8 <__kernel_rem_pio2+0x4b0>
 802583c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8025940 <__kernel_rem_pio2+0x4f8>
 8025840:	2b01      	cmp	r3, #1
 8025842:	dc69      	bgt.n	8025918 <__kernel_rem_pio2+0x4d0>
 8025844:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8025848:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 802584c:	2d00      	cmp	r5, #0
 802584e:	d16c      	bne.n	802592a <__kernel_rem_pio2+0x4e2>
 8025850:	ed87 5b00 	vstr	d5, [r7]
 8025854:	ed87 6b02 	vstr	d6, [r7, #8]
 8025858:	ed87 7b04 	vstr	d7, [r7, #16]
 802585c:	e7d5      	b.n	802580a <__kernel_rem_pio2+0x3c2>
 802585e:	aa40      	add	r2, sp, #256	; 0x100
 8025860:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8025864:	ed92 6b00 	vldr	d6, [r2]
 8025868:	3b01      	subs	r3, #1
 802586a:	ee37 7b06 	vadd.f64	d7, d7, d6
 802586e:	2b00      	cmp	r3, #0
 8025870:	daf5      	bge.n	802585e <__kernel_rem_pio2+0x416>
 8025872:	b10d      	cbz	r5, 8025878 <__kernel_rem_pio2+0x430>
 8025874:	eeb1 7b47 	vneg.f64	d7, d7
 8025878:	ed87 7b00 	vstr	d7, [r7]
 802587c:	e7c5      	b.n	802580a <__kernel_rem_pio2+0x3c2>
 802587e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8025940 <__kernel_rem_pio2+0x4f8>
 8025882:	e7f4      	b.n	802586e <__kernel_rem_pio2+0x426>
 8025884:	a940      	add	r1, sp, #256	; 0x100
 8025886:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802588a:	ed91 7b00 	vldr	d7, [r1]
 802588e:	3a01      	subs	r2, #1
 8025890:	ee36 6b07 	vadd.f64	d6, d6, d7
 8025894:	2a00      	cmp	r2, #0
 8025896:	daf5      	bge.n	8025884 <__kernel_rem_pio2+0x43c>
 8025898:	b1ad      	cbz	r5, 80258c6 <__kernel_rem_pio2+0x47e>
 802589a:	eeb1 7b46 	vneg.f64	d7, d6
 802589e:	ed87 7b00 	vstr	d7, [r7]
 80258a2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 80258a6:	a942      	add	r1, sp, #264	; 0x108
 80258a8:	2201      	movs	r2, #1
 80258aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80258ae:	4293      	cmp	r3, r2
 80258b0:	da0c      	bge.n	80258cc <__kernel_rem_pio2+0x484>
 80258b2:	b10d      	cbz	r5, 80258b8 <__kernel_rem_pio2+0x470>
 80258b4:	eeb1 7b47 	vneg.f64	d7, d7
 80258b8:	ed87 7b02 	vstr	d7, [r7, #8]
 80258bc:	e7a5      	b.n	802580a <__kernel_rem_pio2+0x3c2>
 80258be:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8025940 <__kernel_rem_pio2+0x4f8>
 80258c2:	461a      	mov	r2, r3
 80258c4:	e7e6      	b.n	8025894 <__kernel_rem_pio2+0x44c>
 80258c6:	eeb0 7b46 	vmov.f64	d7, d6
 80258ca:	e7e8      	b.n	802589e <__kernel_rem_pio2+0x456>
 80258cc:	ecb1 6b02 	vldmia	r1!, {d6}
 80258d0:	3201      	adds	r2, #1
 80258d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80258d6:	e7ea      	b.n	80258ae <__kernel_rem_pio2+0x466>
 80258d8:	ed91 7b00 	vldr	d7, [r1]
 80258dc:	ed91 5b02 	vldr	d5, [r1, #8]
 80258e0:	3801      	subs	r0, #1
 80258e2:	ee37 6b05 	vadd.f64	d6, d7, d5
 80258e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80258ea:	ed81 6b00 	vstr	d6, [r1]
 80258ee:	ee37 7b05 	vadd.f64	d7, d7, d5
 80258f2:	ed81 7b02 	vstr	d7, [r1, #8]
 80258f6:	e798      	b.n	802582a <__kernel_rem_pio2+0x3e2>
 80258f8:	ed92 7b00 	vldr	d7, [r2]
 80258fc:	ed92 5b02 	vldr	d5, [r2, #8]
 8025900:	3901      	subs	r1, #1
 8025902:	ee37 6b05 	vadd.f64	d6, d7, d5
 8025906:	ee37 7b46 	vsub.f64	d7, d7, d6
 802590a:	ed82 6b00 	vstr	d6, [r2]
 802590e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8025912:	ed82 7b02 	vstr	d7, [r2, #8]
 8025916:	e78d      	b.n	8025834 <__kernel_rem_pio2+0x3ec>
 8025918:	aa40      	add	r2, sp, #256	; 0x100
 802591a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802591e:	ed92 6b00 	vldr	d6, [r2]
 8025922:	3b01      	subs	r3, #1
 8025924:	ee37 7b06 	vadd.f64	d7, d7, d6
 8025928:	e78a      	b.n	8025840 <__kernel_rem_pio2+0x3f8>
 802592a:	eeb1 5b45 	vneg.f64	d5, d5
 802592e:	eeb1 6b46 	vneg.f64	d6, d6
 8025932:	ed87 5b00 	vstr	d5, [r7]
 8025936:	eeb1 7b47 	vneg.f64	d7, d7
 802593a:	ed87 6b02 	vstr	d6, [r7, #8]
 802593e:	e78b      	b.n	8025858 <__kernel_rem_pio2+0x410>
	...

08025948 <__kernel_sin>:
 8025948:	ee10 3a90 	vmov	r3, s1
 802594c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025950:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8025954:	da04      	bge.n	8025960 <__kernel_sin+0x18>
 8025956:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 802595a:	ee17 3a90 	vmov	r3, s15
 802595e:	b35b      	cbz	r3, 80259b8 <__kernel_sin+0x70>
 8025960:	ee20 6b00 	vmul.f64	d6, d0, d0
 8025964:	ee20 5b06 	vmul.f64	d5, d0, d6
 8025968:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80259c0 <__kernel_sin+0x78>
 802596c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80259c8 <__kernel_sin+0x80>
 8025970:	eea6 4b07 	vfma.f64	d4, d6, d7
 8025974:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80259d0 <__kernel_sin+0x88>
 8025978:	eea4 7b06 	vfma.f64	d7, d4, d6
 802597c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80259d8 <__kernel_sin+0x90>
 8025980:	eea7 4b06 	vfma.f64	d4, d7, d6
 8025984:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80259e0 <__kernel_sin+0x98>
 8025988:	eea4 7b06 	vfma.f64	d7, d4, d6
 802598c:	b930      	cbnz	r0, 802599c <__kernel_sin+0x54>
 802598e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80259e8 <__kernel_sin+0xa0>
 8025992:	eea6 4b07 	vfma.f64	d4, d6, d7
 8025996:	eea4 0b05 	vfma.f64	d0, d4, d5
 802599a:	4770      	bx	lr
 802599c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80259a0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80259a4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80259a8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80259ac:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80259f0 <__kernel_sin+0xa8>
 80259b0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80259b4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80259b8:	4770      	bx	lr
 80259ba:	bf00      	nop
 80259bc:	f3af 8000 	nop.w
 80259c0:	5acfd57c 	.word	0x5acfd57c
 80259c4:	3de5d93a 	.word	0x3de5d93a
 80259c8:	8a2b9ceb 	.word	0x8a2b9ceb
 80259cc:	be5ae5e6 	.word	0xbe5ae5e6
 80259d0:	57b1fe7d 	.word	0x57b1fe7d
 80259d4:	3ec71de3 	.word	0x3ec71de3
 80259d8:	19c161d5 	.word	0x19c161d5
 80259dc:	bf2a01a0 	.word	0xbf2a01a0
 80259e0:	1110f8a6 	.word	0x1110f8a6
 80259e4:	3f811111 	.word	0x3f811111
 80259e8:	55555549 	.word	0x55555549
 80259ec:	bfc55555 	.word	0xbfc55555
 80259f0:	55555549 	.word	0x55555549
 80259f4:	3fc55555 	.word	0x3fc55555

080259f8 <with_errno>:
 80259f8:	b513      	push	{r0, r1, r4, lr}
 80259fa:	4604      	mov	r4, r0
 80259fc:	ed8d 0b00 	vstr	d0, [sp]
 8025a00:	f7fd f804 	bl	8022a0c <__errno>
 8025a04:	ed9d 0b00 	vldr	d0, [sp]
 8025a08:	6004      	str	r4, [r0, #0]
 8025a0a:	b002      	add	sp, #8
 8025a0c:	bd10      	pop	{r4, pc}

08025a0e <xflow>:
 8025a0e:	b082      	sub	sp, #8
 8025a10:	b158      	cbz	r0, 8025a2a <xflow+0x1c>
 8025a12:	eeb1 7b40 	vneg.f64	d7, d0
 8025a16:	ed8d 7b00 	vstr	d7, [sp]
 8025a1a:	ed9d 7b00 	vldr	d7, [sp]
 8025a1e:	2022      	movs	r0, #34	; 0x22
 8025a20:	ee20 0b07 	vmul.f64	d0, d0, d7
 8025a24:	b002      	add	sp, #8
 8025a26:	f7ff bfe7 	b.w	80259f8 <with_errno>
 8025a2a:	eeb0 7b40 	vmov.f64	d7, d0
 8025a2e:	e7f2      	b.n	8025a16 <xflow+0x8>

08025a30 <__math_uflow>:
 8025a30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8025a38 <__math_uflow+0x8>
 8025a34:	f7ff bfeb 	b.w	8025a0e <xflow>
 8025a38:	00000000 	.word	0x00000000
 8025a3c:	10000000 	.word	0x10000000

08025a40 <__math_oflow>:
 8025a40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8025a48 <__math_oflow+0x8>
 8025a44:	f7ff bfe3 	b.w	8025a0e <xflow>
 8025a48:	00000000 	.word	0x00000000
 8025a4c:	70000000 	.word	0x70000000

08025a50 <__math_divzero>:
 8025a50:	b082      	sub	sp, #8
 8025a52:	2800      	cmp	r0, #0
 8025a54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8025a58:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8025a5c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8025a60:	ed8d 7b00 	vstr	d7, [sp]
 8025a64:	ed9d 0b00 	vldr	d0, [sp]
 8025a68:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8025a78 <__math_divzero+0x28>
 8025a6c:	2022      	movs	r0, #34	; 0x22
 8025a6e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8025a72:	b002      	add	sp, #8
 8025a74:	f7ff bfc0 	b.w	80259f8 <with_errno>
	...

08025a80 <__math_invalid>:
 8025a80:	eeb0 7b40 	vmov.f64	d7, d0
 8025a84:	eeb4 7b47 	vcmp.f64	d7, d7
 8025a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a8c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8025a90:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8025a94:	d602      	bvs.n	8025a9c <__math_invalid+0x1c>
 8025a96:	2021      	movs	r0, #33	; 0x21
 8025a98:	f7ff bfae 	b.w	80259f8 <with_errno>
 8025a9c:	4770      	bx	lr

08025a9e <__math_check_uflow>:
 8025a9e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8025aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025aa6:	d102      	bne.n	8025aae <__math_check_uflow+0x10>
 8025aa8:	2022      	movs	r0, #34	; 0x22
 8025aaa:	f7ff bfa5 	b.w	80259f8 <with_errno>
 8025aae:	4770      	bx	lr

08025ab0 <__math_check_oflow>:
 8025ab0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8025ad0 <__math_check_oflow+0x20>
 8025ab4:	eeb0 7bc0 	vabs.f64	d7, d0
 8025ab8:	eeb4 7b46 	vcmp.f64	d7, d6
 8025abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ac0:	dd02      	ble.n	8025ac8 <__math_check_oflow+0x18>
 8025ac2:	2022      	movs	r0, #34	; 0x22
 8025ac4:	f7ff bf98 	b.w	80259f8 <with_errno>
 8025ac8:	4770      	bx	lr
 8025aca:	bf00      	nop
 8025acc:	f3af 8000 	nop.w
 8025ad0:	ffffffff 	.word	0xffffffff
 8025ad4:	7fefffff 	.word	0x7fefffff

08025ad8 <with_errnof>:
 8025ad8:	b513      	push	{r0, r1, r4, lr}
 8025ada:	4604      	mov	r4, r0
 8025adc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8025ae0:	f7fc ff94 	bl	8022a0c <__errno>
 8025ae4:	ed9d 0a01 	vldr	s0, [sp, #4]
 8025ae8:	6004      	str	r4, [r0, #0]
 8025aea:	b002      	add	sp, #8
 8025aec:	bd10      	pop	{r4, pc}

08025aee <xflowf>:
 8025aee:	b130      	cbz	r0, 8025afe <xflowf+0x10>
 8025af0:	eef1 7a40 	vneg.f32	s15, s0
 8025af4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8025af8:	2022      	movs	r0, #34	; 0x22
 8025afa:	f7ff bfed 	b.w	8025ad8 <with_errnof>
 8025afe:	eef0 7a40 	vmov.f32	s15, s0
 8025b02:	e7f7      	b.n	8025af4 <xflowf+0x6>

08025b04 <__math_uflowf>:
 8025b04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025b0c <__math_uflowf+0x8>
 8025b08:	f7ff bff1 	b.w	8025aee <xflowf>
 8025b0c:	10000000 	.word	0x10000000

08025b10 <__math_may_uflowf>:
 8025b10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025b18 <__math_may_uflowf+0x8>
 8025b14:	f7ff bfeb 	b.w	8025aee <xflowf>
 8025b18:	1a200000 	.word	0x1a200000

08025b1c <__math_oflowf>:
 8025b1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025b24 <__math_oflowf+0x8>
 8025b20:	f7ff bfe5 	b.w	8025aee <xflowf>
 8025b24:	70000000 	.word	0x70000000

08025b28 <__math_divzerof>:
 8025b28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8025b2c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8025b30:	2800      	cmp	r0, #0
 8025b32:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8025b36:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8025b44 <__math_divzerof+0x1c>
 8025b3a:	2022      	movs	r0, #34	; 0x22
 8025b3c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8025b40:	f7ff bfca 	b.w	8025ad8 <with_errnof>
 8025b44:	00000000 	.word	0x00000000

08025b48 <__math_invalidf>:
 8025b48:	eef0 7a40 	vmov.f32	s15, s0
 8025b4c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8025b50:	eef4 7a67 	vcmp.f32	s15, s15
 8025b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b58:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8025b5c:	d602      	bvs.n	8025b64 <__math_invalidf+0x1c>
 8025b5e:	2021      	movs	r0, #33	; 0x21
 8025b60:	f7ff bfba 	b.w	8025ad8 <with_errnof>
 8025b64:	4770      	bx	lr

08025b66 <fabs>:
 8025b66:	ec51 0b10 	vmov	r0, r1, d0
 8025b6a:	ee10 2a10 	vmov	r2, s0
 8025b6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8025b72:	ec43 2b10 	vmov	d0, r2, r3
 8025b76:	4770      	bx	lr

08025b78 <floor>:
 8025b78:	ee10 1a90 	vmov	r1, s1
 8025b7c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8025b80:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8025b84:	2b13      	cmp	r3, #19
 8025b86:	b530      	push	{r4, r5, lr}
 8025b88:	ee10 0a10 	vmov	r0, s0
 8025b8c:	ee10 5a10 	vmov	r5, s0
 8025b90:	dc31      	bgt.n	8025bf6 <floor+0x7e>
 8025b92:	2b00      	cmp	r3, #0
 8025b94:	da15      	bge.n	8025bc2 <floor+0x4a>
 8025b96:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8025c50 <floor+0xd8>
 8025b9a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8025b9e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ba6:	dd07      	ble.n	8025bb8 <floor+0x40>
 8025ba8:	2900      	cmp	r1, #0
 8025baa:	da4e      	bge.n	8025c4a <floor+0xd2>
 8025bac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8025bb0:	4318      	orrs	r0, r3
 8025bb2:	d001      	beq.n	8025bb8 <floor+0x40>
 8025bb4:	4928      	ldr	r1, [pc, #160]	; (8025c58 <floor+0xe0>)
 8025bb6:	2000      	movs	r0, #0
 8025bb8:	460b      	mov	r3, r1
 8025bba:	4602      	mov	r2, r0
 8025bbc:	ec43 2b10 	vmov	d0, r2, r3
 8025bc0:	e020      	b.n	8025c04 <floor+0x8c>
 8025bc2:	4a26      	ldr	r2, [pc, #152]	; (8025c5c <floor+0xe4>)
 8025bc4:	411a      	asrs	r2, r3
 8025bc6:	ea01 0402 	and.w	r4, r1, r2
 8025bca:	4304      	orrs	r4, r0
 8025bcc:	d01a      	beq.n	8025c04 <floor+0x8c>
 8025bce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8025c50 <floor+0xd8>
 8025bd2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8025bd6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025bde:	ddeb      	ble.n	8025bb8 <floor+0x40>
 8025be0:	2900      	cmp	r1, #0
 8025be2:	bfbe      	ittt	lt
 8025be4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8025be8:	fa40 f303 	asrlt.w	r3, r0, r3
 8025bec:	18c9      	addlt	r1, r1, r3
 8025bee:	ea21 0102 	bic.w	r1, r1, r2
 8025bf2:	2000      	movs	r0, #0
 8025bf4:	e7e0      	b.n	8025bb8 <floor+0x40>
 8025bf6:	2b33      	cmp	r3, #51	; 0x33
 8025bf8:	dd05      	ble.n	8025c06 <floor+0x8e>
 8025bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025bfe:	d101      	bne.n	8025c04 <floor+0x8c>
 8025c00:	ee30 0b00 	vadd.f64	d0, d0, d0
 8025c04:	bd30      	pop	{r4, r5, pc}
 8025c06:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8025c0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025c0e:	40e2      	lsrs	r2, r4
 8025c10:	4202      	tst	r2, r0
 8025c12:	d0f7      	beq.n	8025c04 <floor+0x8c>
 8025c14:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8025c50 <floor+0xd8>
 8025c18:	ee30 0b07 	vadd.f64	d0, d0, d7
 8025c1c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c24:	ddc8      	ble.n	8025bb8 <floor+0x40>
 8025c26:	2900      	cmp	r1, #0
 8025c28:	da02      	bge.n	8025c30 <floor+0xb8>
 8025c2a:	2b14      	cmp	r3, #20
 8025c2c:	d103      	bne.n	8025c36 <floor+0xbe>
 8025c2e:	3101      	adds	r1, #1
 8025c30:	ea20 0002 	bic.w	r0, r0, r2
 8025c34:	e7c0      	b.n	8025bb8 <floor+0x40>
 8025c36:	2401      	movs	r4, #1
 8025c38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8025c3c:	fa04 f303 	lsl.w	r3, r4, r3
 8025c40:	4418      	add	r0, r3
 8025c42:	42a8      	cmp	r0, r5
 8025c44:	bf38      	it	cc
 8025c46:	1909      	addcc	r1, r1, r4
 8025c48:	e7f2      	b.n	8025c30 <floor+0xb8>
 8025c4a:	2000      	movs	r0, #0
 8025c4c:	4601      	mov	r1, r0
 8025c4e:	e7b3      	b.n	8025bb8 <floor+0x40>
 8025c50:	8800759c 	.word	0x8800759c
 8025c54:	7e37e43c 	.word	0x7e37e43c
 8025c58:	bff00000 	.word	0xbff00000
 8025c5c:	000fffff 	.word	0x000fffff

08025c60 <scalbn>:
 8025c60:	b082      	sub	sp, #8
 8025c62:	ed8d 0b00 	vstr	d0, [sp]
 8025c66:	9b01      	ldr	r3, [sp, #4]
 8025c68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8025c6c:	b9a2      	cbnz	r2, 8025c98 <scalbn+0x38>
 8025c6e:	9a00      	ldr	r2, [sp, #0]
 8025c70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025c74:	4313      	orrs	r3, r2
 8025c76:	d03a      	beq.n	8025cee <scalbn+0x8e>
 8025c78:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8025d50 <scalbn+0xf0>
 8025c7c:	4b40      	ldr	r3, [pc, #256]	; (8025d80 <scalbn+0x120>)
 8025c7e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8025c82:	4298      	cmp	r0, r3
 8025c84:	ed8d 7b00 	vstr	d7, [sp]
 8025c88:	da11      	bge.n	8025cae <scalbn+0x4e>
 8025c8a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8025d58 <scalbn+0xf8>
 8025c8e:	ed9d 6b00 	vldr	d6, [sp]
 8025c92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025c96:	e007      	b.n	8025ca8 <scalbn+0x48>
 8025c98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8025c9c:	428a      	cmp	r2, r1
 8025c9e:	d10a      	bne.n	8025cb6 <scalbn+0x56>
 8025ca0:	ed9d 7b00 	vldr	d7, [sp]
 8025ca4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8025ca8:	ed8d 7b00 	vstr	d7, [sp]
 8025cac:	e01f      	b.n	8025cee <scalbn+0x8e>
 8025cae:	9b01      	ldr	r3, [sp, #4]
 8025cb0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8025cb4:	3a36      	subs	r2, #54	; 0x36
 8025cb6:	4402      	add	r2, r0
 8025cb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8025cbc:	428a      	cmp	r2, r1
 8025cbe:	dd0a      	ble.n	8025cd6 <scalbn+0x76>
 8025cc0:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8025d60 <scalbn+0x100>
 8025cc4:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8025d68 <scalbn+0x108>
 8025cc8:	eeb0 6b47 	vmov.f64	d6, d7
 8025ccc:	9b01      	ldr	r3, [sp, #4]
 8025cce:	2b00      	cmp	r3, #0
 8025cd0:	fe27 7b05 	vselge.f64	d7, d7, d5
 8025cd4:	e7dd      	b.n	8025c92 <scalbn+0x32>
 8025cd6:	2a00      	cmp	r2, #0
 8025cd8:	dd0d      	ble.n	8025cf6 <scalbn+0x96>
 8025cda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025cde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025ce2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025ce6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8025cea:	e9cd 0100 	strd	r0, r1, [sp]
 8025cee:	ed9d 0b00 	vldr	d0, [sp]
 8025cf2:	b002      	add	sp, #8
 8025cf4:	4770      	bx	lr
 8025cf6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8025cfa:	da18      	bge.n	8025d2e <scalbn+0xce>
 8025cfc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8025d00:	4298      	cmp	r0, r3
 8025d02:	9b01      	ldr	r3, [sp, #4]
 8025d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8025d08:	dd09      	ble.n	8025d1e <scalbn+0xbe>
 8025d0a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8025d60 <scalbn+0x100>
 8025d0e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8025d68 <scalbn+0x108>
 8025d12:	eeb0 6b47 	vmov.f64	d6, d7
 8025d16:	2b00      	cmp	r3, #0
 8025d18:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8025d1c:	e7b9      	b.n	8025c92 <scalbn+0x32>
 8025d1e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8025d58 <scalbn+0xf8>
 8025d22:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8025d70 <scalbn+0x110>
 8025d26:	eeb0 6b47 	vmov.f64	d6, d7
 8025d2a:	2b00      	cmp	r3, #0
 8025d2c:	e7f4      	b.n	8025d18 <scalbn+0xb8>
 8025d2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025d32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025d36:	3236      	adds	r2, #54	; 0x36
 8025d38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025d3c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8025d40:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8025d78 <scalbn+0x118>
 8025d44:	ec41 0b17 	vmov	d7, r0, r1
 8025d48:	e7a3      	b.n	8025c92 <scalbn+0x32>
 8025d4a:	bf00      	nop
 8025d4c:	f3af 8000 	nop.w
 8025d50:	00000000 	.word	0x00000000
 8025d54:	43500000 	.word	0x43500000
 8025d58:	c2f8f359 	.word	0xc2f8f359
 8025d5c:	01a56e1f 	.word	0x01a56e1f
 8025d60:	8800759c 	.word	0x8800759c
 8025d64:	7e37e43c 	.word	0x7e37e43c
 8025d68:	8800759c 	.word	0x8800759c
 8025d6c:	fe37e43c 	.word	0xfe37e43c
 8025d70:	c2f8f359 	.word	0xc2f8f359
 8025d74:	81a56e1f 	.word	0x81a56e1f
 8025d78:	00000000 	.word	0x00000000
 8025d7c:	3c900000 	.word	0x3c900000
 8025d80:	ffff3cb0 	.word	0xffff3cb0

08025d84 <_init>:
 8025d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d86:	bf00      	nop
 8025d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025d8a:	bc08      	pop	{r3}
 8025d8c:	469e      	mov	lr, r3
 8025d8e:	4770      	bx	lr

08025d90 <_fini>:
 8025d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d92:	bf00      	nop
 8025d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025d96:	bc08      	pop	{r3}
 8025d98:	469e      	mov	lr, r3
 8025d9a:	4770      	bx	lr
