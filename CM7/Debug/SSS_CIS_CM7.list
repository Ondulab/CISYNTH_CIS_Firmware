
SSS_CIS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e464  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003458  0800e708  0800e708  0001e708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b60  08011b60  000302c0  2**0
                  CONTENTS
  4 .ARM          00000008  08011b60  08011b60  00021b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b68  08011b68  000302c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b68  08011b68  00021b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b6c  08011b6c  00021b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  24000000  08011b70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000200  08011d70  00030200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000260  08011dd0  00030260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000105c4  240002c0  08011e30  000302c0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24010884  08011e30  00030884  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003fc76  00000000  00000000  000302ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006389  00000000  00000000  0006ff64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ee0  00000000  00000000  000762f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001cc8  00000000  00000000  000781d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000087e8  00000000  00000000  00079e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002962e  00000000  00000000  00082680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001aade1  00000000  00000000  000abcae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00256a8f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000093bc  00000000  00000000  00256ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002c0 	.word	0x240002c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e6ec 	.word	0x0800e6ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002c4 	.word	0x240002c4
 80002dc:	0800e6ec 	.word	0x0800e6ec

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007e2:	4a30      	ldr	r2, [pc, #192]	; (80008a4 <MX_ADC1_Init+0xe8>)
 80007e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007fa:	2204      	movs	r2, #4
 80007fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000800:	2200      	movs	r2, #0
 8000802:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000806:	2200      	movs	r2, #0
 8000808:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800080c:	2201      	movs	r2, #1
 800080e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000812:	2200      	movs	r2, #0
 8000814:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000824:	2200      	movs	r2, #0
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800082a:	2200      	movs	r2, #0
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000830:	2200      	movs	r2, #0
 8000832:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800083c:	4818      	ldr	r0, [pc, #96]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800083e:	f001 ffcb 	bl	80027d8 <HAL_ADC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000848:	f000 fdee 	bl	8001428 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4812      	ldr	r0, [pc, #72]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000858:	f002 fdde 	bl	8003418 <HAL_ADCEx_MultiModeConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000862:	f000 fde1 	bl	8001428 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000866:	2301      	movs	r3, #1
 8000868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800086a:	2306      	movs	r3, #6
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000872:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000876:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000878:	2304      	movs	r3, #4
 800087a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800088a:	f002 f945 	bl	8002b18 <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000894:	f000 fdc8 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	24010360 	.word	0x24010360
 80008a4:	40022000 	.word	0x40022000

080008a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
 80008bc:	615a      	str	r2, [r3, #20]
 80008be:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80008c0:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008c2:	4a2a      	ldr	r2, [pc, #168]	; (800096c <MX_ADC2_Init+0xc4>)
 80008c4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008c6:	4b28      	ldr	r3, [pc, #160]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80008cc:	4b26      	ldr	r3, [pc, #152]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d2:	4b25      	ldr	r3, [pc, #148]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008da:	2204      	movs	r2, #4
 80008dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008de:	4b22      	ldr	r3, [pc, #136]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008e4:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_ADC2_Init+0xc0>)
 8000904:	2200      	movs	r2, #0
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_ADC2_Init+0xc0>)
 800090a:	2200      	movs	r2, #0
 800090c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_ADC2_Init+0xc0>)
 8000910:	2200      	movs	r2, #0
 8000912:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_ADC2_Init+0xc0>)
 8000916:	2200      	movs	r2, #0
 8000918:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800091c:	4812      	ldr	r0, [pc, #72]	; (8000968 <MX_ADC2_Init+0xc0>)
 800091e:	f001 ff5b 	bl	80027d8 <HAL_ADC_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000928:	f000 fd7e 	bl	8001428 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_ADC2_Init+0xc8>)
 800092e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000930:	2306      	movs	r3, #6
 8000932:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000938:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800093c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800093e:	2304      	movs	r3, #4
 8000940:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <MX_ADC2_Init+0xc0>)
 8000950:	f002 f8e2 	bl	8002b18 <HAL_ADC_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800095a:	f000 fd65 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	240102fc 	.word	0x240102fc
 800096c:	40022100 	.word	0x40022100
 8000970:	04300002 	.word	0x04300002

08000974 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800098c:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <MX_ADC3_Init+0xc0>)
 800098e:	4a2a      	ldr	r2, [pc, #168]	; (8000a38 <MX_ADC3_Init+0xc4>)
 8000990:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <MX_ADC3_Init+0xc0>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000998:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <MX_ADC3_Init+0xc0>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a4:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009a6:	2204      	movs	r2, #4
 80009a8:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009e8:	4812      	ldr	r0, [pc, #72]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009ea:	f001 fef5 	bl	80027d8 <HAL_ADC_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80009f4:	f000 fd18 	bl	8001428 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_ADC3_Init+0xc8>)
 80009fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fc:	2306      	movs	r3, #6
 80009fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a04:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a08:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <MX_ADC3_Init+0xc0>)
 8000a1c:	f002 f87c 	bl	8002b18 <HAL_ADC_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000a26:	f000 fcff 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	240103c4 	.word	0x240103c4
 8000a38:	58026000 	.word	0x58026000
 8000a3c:	04300002 	.word	0x04300002

08000a40 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a48      	ldr	r2, [pc, #288]	; (8000b70 <HAL_ADC_MspInit+0x130>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d12d      	bne.n	8000aae <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a52:	4b48      	ldr	r3, [pc, #288]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	4a46      	ldr	r2, [pc, #280]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000a5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a5c:	4b45      	ldr	r3, [pc, #276]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d10e      	bne.n	8000a82 <HAL_ADC_MspInit+0x42>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a64:	4b44      	ldr	r3, [pc, #272]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a6a:	4a43      	ldr	r2, [pc, #268]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a6c:	f043 0320 	orr.w	r3, r3, #32
 8000a70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a74:	4b40      	ldr	r3, [pc, #256]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a7a:	f003 0320 	and.w	r3, r3, #32
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	4a3b      	ldr	r2, [pc, #236]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a92:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000aa0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000aa4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000aa8:	f001 fce0 	bl	800246c <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000aac:	e05b      	b.n	8000b66 <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC2)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <HAL_ADC_MspInit+0x13c>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d12d      	bne.n	8000b14 <HAL_ADC_MspInit+0xd4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	4a2d      	ldr	r2, [pc, #180]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000ac0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d10e      	bne.n	8000ae8 <HAL_ADC_MspInit+0xa8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000acc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad0:	4a29      	ldr	r2, [pc, #164]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000ad2:	f043 0320 	orr.w	r3, r3, #32
 8000ad6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ada:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ae0:	f003 0320 	and.w	r3, r3, #32
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000b06:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000b0a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000b0e:	f001 fcad 	bl	800246c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000b12:	e028      	b.n	8000b66 <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC3)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a19      	ldr	r2, [pc, #100]	; (8000b80 <HAL_ADC_MspInit+0x140>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d123      	bne.n	8000b66 <HAL_ADC_MspInit+0x126>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b42:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000b5a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000b5e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000b62:	f001 fc83 	bl	800246c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40022000 	.word	0x40022000
 8000b74:	240002dc 	.word	0x240002dc
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	40022100 	.word	0x40022100
 8000b80:	58026000 	.word	0x58026000

08000b84 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b88:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <MX_ETH_Init+0x90>)
 8000b8a:	4a23      	ldr	r2, [pc, #140]	; (8000c18 <MX_ETH_Init+0x94>)
 8000b8c:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000b8e:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <MX_ETH_Init+0x90>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000b96:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <MX_ETH_Init+0x90>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <MX_ETH_Init+0x90>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	3302      	adds	r3, #2
 8000ba6:	22e1      	movs	r2, #225	; 0xe1
 8000ba8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_ETH_Init+0x90>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	3303      	adds	r3, #3
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_ETH_Init+0x90>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_ETH_Init+0x90>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	3305      	adds	r3, #5
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_ETH_Init+0x90>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_ETH_Init+0x90>)
 8000bd0:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <MX_ETH_Init+0x98>)
 8000bd2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_ETH_Init+0x90>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <MX_ETH_Init+0x9c>)
 8000bd8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_ETH_Init+0x90>)
 8000bdc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000be0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000be2:	480c      	ldr	r0, [pc, #48]	; (8000c14 <MX_ETH_Init+0x90>)
 8000be4:	f002 fdda 	bl	800379c <HAL_ETH_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000bee:	f000 fc1b 	bl	8001428 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bf2:	2234      	movs	r2, #52	; 0x34
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	480b      	ldr	r0, [pc, #44]	; (8000c24 <MX_ETH_Init+0xa0>)
 8000bf8:	f00a f962 	bl	800aec0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_ETH_Init+0xa0>)
 8000bfe:	2221      	movs	r2, #33	; 0x21
 8000c00:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_ETH_Init+0xa0>)
 8000c04:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c08:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_ETH_Init+0xa0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	24010428 	.word	0x24010428
 8000c18:	40028000 	.word	0x40028000
 8000c1c:	24000260 	.word	0x24000260
 8000c20:	24000200 	.word	0x24000200
 8000c24:	240104b0 	.word	0x240104b0

08000c28 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08e      	sub	sp, #56	; 0x38
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a49      	ldr	r2, [pc, #292]	; (8000d6c <HAL_ETH_MspInit+0x144>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	f040 808b 	bne.w	8000d62 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c4c:	4b48      	ldr	r3, [pc, #288]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000c4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c52:	4a47      	ldr	r2, [pc, #284]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c5c:	4b44      	ldr	r3, [pc, #272]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000c5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c66:	623b      	str	r3, [r7, #32]
 8000c68:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c6a:	4b41      	ldr	r3, [pc, #260]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000c6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c70:	4a3f      	ldr	r2, [pc, #252]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000c7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c84:	61fb      	str	r3, [r7, #28]
 8000c86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c88:	4b39      	ldr	r3, [pc, #228]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c8e:	4a38      	ldr	r2, [pc, #224]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c98:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000c9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca6:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	4a30      	ldr	r2, [pc, #192]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb6:	4b2e      	ldr	r3, [pc, #184]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cca:	4a29      	ldr	r2, [pc, #164]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd4:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <HAL_ETH_MspInit+0x148>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ETH_CRS_DV
    PA1     ------> ETH_REF_CLK
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000d00:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d12:	230b      	movs	r3, #11
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4815      	ldr	r0, [pc, #84]	; (8000d74 <HAL_ETH_MspInit+0x14c>)
 8000d1e:	f003 f953 	bl	8003fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8000d22:	2332      	movs	r3, #50	; 0x32
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d32:	230b      	movs	r3, #11
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480e      	ldr	r0, [pc, #56]	; (8000d78 <HAL_ETH_MspInit+0x150>)
 8000d3e:	f003 f943 	bl	8003fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 8000d42:	2386      	movs	r3, #134	; 0x86
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d52:	230b      	movs	r3, #11
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4807      	ldr	r0, [pc, #28]	; (8000d7c <HAL_ETH_MspInit+0x154>)
 8000d5e:	f003 f933 	bl	8003fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000d62:	bf00      	nop
 8000d64:	3738      	adds	r7, #56	; 0x38
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40028000 	.word	0x40028000
 8000d70:	58024400 	.word	0x58024400
 8000d74:	58021800 	.word	0x58021800
 8000d78:	58020800 	.word	0x58020800
 8000d7c:	58020000 	.word	0x58020000

08000d80 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	615a      	str	r2, [r3, #20]
 8000d98:	619a      	str	r2, [r3, #24]
  FMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000dac:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000dae:	4a33      	ldr	r2, [pc, #204]	; (8000e7c <MX_FMC_Init+0xfc>)
 8000db0:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000db4:	4a32      	ldr	r2, [pc, #200]	; (8000e80 <MX_FMC_Init+0x100>)
 8000db6:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000db8:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000dbe:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000dca:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000dd0:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000dd6:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000ddc:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000de2:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000de4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
 8000df0:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000df2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000e16:	230f      	movs	r3, #15
 8000e18:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8000e1e:	23ff      	movs	r3, #255	; 0xff
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000e22:	230f      	movs	r3, #15
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000e26:	2310      	movs	r3, #16
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000e2a:	2311      	movs	r3, #17
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8000e32:	230f      	movs	r3, #15
 8000e34:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000e36:	230f      	movs	r3, #15
 8000e38:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8000e3a:	23ff      	movs	r3, #255	; 0xff
 8000e3c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8000e3e:	230f      	movs	r3, #15
 8000e40:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000e42:	2310      	movs	r3, #16
 8000e44:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000e46:	2311      	movs	r3, #17
 8000e48:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FMC_ACCESS_MODE_A;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000e4e:	463a      	mov	r2, r7
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	4808      	ldr	r0, [pc, #32]	; (8000e78 <MX_FMC_Init+0xf8>)
 8000e58:	f007 f9fc 	bl	8008254 <HAL_SRAM_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_FMC_Init+0xe6>
  {
    Error_Handler( );
 8000e62:	f000 fae1 	bl	8001428 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8000e66:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000e6a:	f001 fb15 	bl	8002498 <HAL_SetFMCMemorySwappingConfig>
  /* USER CODE END FMC_Init 2 */
}
 8000e6e:	bf00      	nop
 8000e70:	3738      	adds	r7, #56	; 0x38
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	240104e4 	.word	0x240104e4
 8000e7c:	52004000 	.word	0x52004000
 8000e80:	52004104 	.word	0x52004104

08000e84 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0b6      	sub	sp, #216	; 0xd8
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000e9a:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <HAL_FMC_MspInit+0xfc>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d169      	bne.n	8000f76 <HAL_FMC_MspInit+0xf2>
    return;
  }
  FMC_Initialized = 1;
 8000ea2:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <HAL_FMC_MspInit+0xfc>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	22bc      	movs	r2, #188	; 0xbc
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f00a f805 	bl	800aec0 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000eb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eba:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 fa87 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 8000ed0:	f000 faaa 	bl	8001428 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <HAL_FMC_MspInit+0x100>)
 8000ed6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000eda:	4a2a      	ldr	r2, [pc, #168]	; (8000f84 <HAL_FMC_MspInit+0x100>)
 8000edc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000ee4:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <HAL_FMC_MspInit+0x100>)
 8000ee6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000eea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE9   ------> FMC_D6
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4
 8000ef2:	f24c 03b3 	movw	r3, #49331	; 0xc0b3
 8000ef6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f0c:	230c      	movs	r3, #12
 8000f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f12:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f16:	4619      	mov	r1, r3
 8000f18:	481b      	ldr	r0, [pc, #108]	; (8000f88 <HAL_FMC_MspInit+0x104>)
 8000f1a:	f003 f855 	bl	8003fc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f36:	230c      	movs	r3, #12
 8000f38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4812      	ldr	r0, [pc, #72]	; (8000f8c <HAL_FMC_MspInit+0x108>)
 8000f44:	f003 f840 	bl	8003fc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_9;
 8000f48:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000f4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f62:	230c      	movs	r3, #12
 8000f64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <HAL_FMC_MspInit+0x10c>)
 8000f70:	f003 f82a 	bl	8003fc8 <HAL_GPIO_Init>
 8000f74:	e000      	b.n	8000f78 <HAL_FMC_MspInit+0xf4>
    return;
 8000f76:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f78:	37d8      	adds	r7, #216	; 0xd8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	240002e0 	.word	0x240002e0
 8000f84:	58024400 	.word	0x58024400
 8000f88:	58020c00 	.word	0x58020c00
 8000f8c:	58021400 	.word	0x58021400
 8000f90:	58021000 	.word	0x58021000

08000f94 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f9c:	f7ff ff72 	bl	8000e84 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08e      	sub	sp, #56	; 0x38
 8000fac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b7a      	ldr	r3, [pc, #488]	; (80011a8 <MX_GPIO_Init+0x200>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a78      	ldr	r2, [pc, #480]	; (80011a8 <MX_GPIO_Init+0x200>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b76      	ldr	r3, [pc, #472]	; (80011a8 <MX_GPIO_Init+0x200>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	623b      	str	r3, [r7, #32]
 8000fda:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fdc:	4b72      	ldr	r3, [pc, #456]	; (80011a8 <MX_GPIO_Init+0x200>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	4a71      	ldr	r2, [pc, #452]	; (80011a8 <MX_GPIO_Init+0x200>)
 8000fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fec:	4b6e      	ldr	r3, [pc, #440]	; (80011a8 <MX_GPIO_Init+0x200>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	4b6b      	ldr	r3, [pc, #428]	; (80011a8 <MX_GPIO_Init+0x200>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	4a69      	ldr	r2, [pc, #420]	; (80011a8 <MX_GPIO_Init+0x200>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100a:	4b67      	ldr	r3, [pc, #412]	; (80011a8 <MX_GPIO_Init+0x200>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	4b63      	ldr	r3, [pc, #396]	; (80011a8 <MX_GPIO_Init+0x200>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	4a62      	ldr	r2, [pc, #392]	; (80011a8 <MX_GPIO_Init+0x200>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001028:	4b5f      	ldr	r3, [pc, #380]	; (80011a8 <MX_GPIO_Init+0x200>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001036:	4b5c      	ldr	r3, [pc, #368]	; (80011a8 <MX_GPIO_Init+0x200>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	4a5a      	ldr	r2, [pc, #360]	; (80011a8 <MX_GPIO_Init+0x200>)
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001046:	4b58      	ldr	r3, [pc, #352]	; (80011a8 <MX_GPIO_Init+0x200>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	f003 0310 	and.w	r3, r3, #16
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001054:	4b54      	ldr	r3, [pc, #336]	; (80011a8 <MX_GPIO_Init+0x200>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105a:	4a53      	ldr	r2, [pc, #332]	; (80011a8 <MX_GPIO_Init+0x200>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001064:	4b50      	ldr	r3, [pc, #320]	; (80011a8 <MX_GPIO_Init+0x200>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001072:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <MX_GPIO_Init+0x200>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001078:	4a4b      	ldr	r2, [pc, #300]	; (80011a8 <MX_GPIO_Init+0x200>)
 800107a:	f043 0320 	orr.w	r3, r3, #32
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001082:	4b49      	ldr	r3, [pc, #292]	; (80011a8 <MX_GPIO_Init+0x200>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	f003 0320 	and.w	r3, r3, #32
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001090:	4b45      	ldr	r3, [pc, #276]	; (80011a8 <MX_GPIO_Init+0x200>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001096:	4a44      	ldr	r2, [pc, #272]	; (80011a8 <MX_GPIO_Init+0x200>)
 8001098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a0:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <MX_GPIO_Init+0x200>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b4:	483d      	ldr	r0, [pc, #244]	; (80011ac <MX_GPIO_Init+0x204>)
 80010b6:	f003 f937 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MEMS_Pin|CIS_RS_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80010c0:	483b      	ldr	r0, [pc, #236]	; (80011b0 <MX_GPIO_Init+0x208>)
 80010c2:	f003 f931 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAC_FLT_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f242 0104 	movw	r1, #8196	; 0x2004
 80010cc:	4839      	ldr	r0, [pc, #228]	; (80011b4 <MX_GPIO_Init+0x20c>)
 80010ce:	f003 f92b 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, EN_12V_Pin|EN_5V_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2124      	movs	r1, #36	; 0x24
 80010d6:	4838      	ldr	r0, [pc, #224]	; (80011b8 <MX_GPIO_Init+0x210>)
 80010d8:	f003 f926 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2140      	movs	r1, #64	; 0x40
 80010e0:	4836      	ldr	r0, [pc, #216]	; (80011bc <MX_GPIO_Init+0x214>)
 80010e2:	f003 f921 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_Pin|DAC_DEMP_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2148      	movs	r1, #72	; 0x48
 80010ea:	4835      	ldr	r0, [pc, #212]	; (80011c0 <MX_GPIO_Init+0x218>)
 80010ec:	f003 f91c 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 80010f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001106:	4619      	mov	r1, r3
 8001108:	4828      	ldr	r0, [pc, #160]	; (80011ac <MX_GPIO_Init+0x204>)
 800110a:	f002 ff5d 	bl	8003fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_Pin|CIS_RS_Pin;
 800110e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001124:	4619      	mov	r1, r3
 8001126:	4822      	ldr	r0, [pc, #136]	; (80011b0 <MX_GPIO_Init+0x208>)
 8001128:	f002 ff4e 	bl	8003fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAC_FLT_Pin|DAC_XSMT_Pin;
 800112c:	f242 0304 	movw	r3, #8196	; 0x2004
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	4619      	mov	r1, r3
 8001144:	481b      	ldr	r0, [pc, #108]	; (80011b4 <MX_GPIO_Init+0x20c>)
 8001146:	f002 ff3f 	bl	8003fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|EN_5V_Pin;
 800114a:	2324      	movs	r3, #36	; 0x24
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	4815      	ldr	r0, [pc, #84]	; (80011b8 <MX_GPIO_Init+0x210>)
 8001162:	f002 ff31 	bl	8003fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_FMT_Pin;
 8001166:	2340      	movs	r3, #64	; 0x40
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_FMT_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	4619      	mov	r1, r3
 800117c:	480f      	ldr	r0, [pc, #60]	; (80011bc <MX_GPIO_Init+0x214>)
 800117e:	f002 ff23 	bl	8003fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LED_Pin|DAC_DEMP_Pin;
 8001182:	2348      	movs	r3, #72	; 0x48
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	4809      	ldr	r0, [pc, #36]	; (80011c0 <MX_GPIO_Init+0x218>)
 800119a:	f002 ff15 	bl	8003fc8 <HAL_GPIO_Init>

}
 800119e:	bf00      	nop
 80011a0:	3738      	adds	r7, #56	; 0x38
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	58024400 	.word	0x58024400
 80011ac:	58020400 	.word	0x58020400
 80011b0:	58020000 	.word	0x58020000
 80011b4:	58020800 	.word	0x58020800
 80011b8:	58021800 	.word	0x58021800
 80011bc:	58021400 	.word	0x58021400
 80011c0:	58021c00 	.word	0x58021c00

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80011ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ce:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80011d0:	bf00      	nop
 80011d2:	4b39      	ldr	r3, [pc, #228]	; (80012b8 <main+0xf4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d004      	beq.n	80011e8 <main+0x24>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	1e5a      	subs	r2, r3, #1
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	dcf4      	bgt.n	80011d2 <main+0xe>
  if ( timeout < 0 )
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	da01      	bge.n	80011f2 <main+0x2e>
  {
  Error_Handler();
 80011ee:	f000 f91b 	bl	8001428 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f001 f865 	bl	80022c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f6:	f000 f865 	bl	80012c4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011fa:	f000 f8e9 	bl	80013d0 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <main+0xf4>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001204:	4a2c      	ldr	r2, [pc, #176]	; (80012b8 <main+0xf4>)
 8001206:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800120a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <main+0xf4>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800121c:	2000      	movs	r0, #0
 800121e:	f003 f8b7 	bl	8004390 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001222:	2100      	movs	r1, #0
 8001224:	2000      	movs	r0, #0
 8001226:	f003 f8cd 	bl	80043c4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800122a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800122e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001230:	bf00      	nop
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <main+0xf4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d104      	bne.n	8001248 <main+0x84>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	1e5a      	subs	r2, r3, #1
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	dcf4      	bgt.n	8001232 <main+0x6e>
if ( timeout < 0 )
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	da01      	bge.n	8001252 <main+0x8e>
{
Error_Handler();
 800124e:	f000 f8eb 	bl	8001428 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f7ff fea9 	bl	8000fa8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001256:	f7ff fab1 	bl	80007bc <MX_ADC1_Init>
  MX_ADC2_Init();
 800125a:	f7ff fb25 	bl	80008a8 <MX_ADC2_Init>
  MX_ADC3_Init();
 800125e:	f7ff fb89 	bl	8000974 <MX_ADC3_Init>
  MX_FMC_Init();
 8001262:	f7ff fd8d 	bl	8000d80 <MX_FMC_Init>
  MX_SAI1_Init();
 8001266:	f000 f933 	bl	80014d0 <MX_SAI1_Init>
  MX_ETH_Init();
 800126a:	f7ff fc8b 	bl	8000b84 <MX_ETH_Init>
  MX_SPI2_Init();
 800126e:	f000 f9d5 	bl	800161c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001272:	f000 ff4b 	bl	800210c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001276:	f000 fbbd 	bl	80019f4 <MX_TIM1_Init>
  MX_TIM3_Init();
 800127a:	f000 fc4b 	bl	8001b14 <MX_TIM3_Init>
  MX_TIM4_Init();
 800127e:	f000 fca3 	bl	8001bc8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001282:	f000 fcfb 	bl	8001c7c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001286:	f000 fd53 	bl	8001d30 <MX_TIM8_Init>
  MX_RNG_Init();
 800128a:	f000 f8d3 	bl	8001434 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	2120      	movs	r1, #32
 8001292:	480a      	ldr	r0, [pc, #40]	; (80012bc <main+0xf8>)
 8001294:	f003 f848 	bl	8004328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	2104      	movs	r1, #4
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <main+0xf8>)
 800129e:	f003 f843 	bl	8004328 <HAL_GPIO_WritePin>

  ssd1362_TestAll();
 80012a2:	f009 fd79 	bl	800ad98 <ssd1362_TestAll>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80012a6:	2140      	movs	r1, #64	; 0x40
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <main+0xfc>)
 80012aa:	f003 f856 	bl	800435a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80012ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b2:	f001 f897 	bl	80023e4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80012b6:	e7f6      	b.n	80012a6 <main+0xe2>
 80012b8:	58024400 	.word	0x58024400
 80012bc:	58021800 	.word	0x58021800
 80012c0:	58021c00 	.word	0x58021c00

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b09c      	sub	sp, #112	; 0x70
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ce:	224c      	movs	r2, #76	; 0x4c
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f009 fdf4 	bl	800aec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2220      	movs	r2, #32
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f009 fdee 	bl	800aec0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80012e4:	2004      	movs	r0, #4
 80012e6:	f003 f881 	bl	80043ec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <SystemClock_Config+0x100>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	4a34      	ldr	r2, [pc, #208]	; (80013c4 <SystemClock_Config+0x100>)
 80012f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012f8:	6193      	str	r3, [r2, #24]
 80012fa:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <SystemClock_Config+0x100>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <SystemClock_Config+0x104>)
 8001306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001308:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <SystemClock_Config+0x104>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <SystemClock_Config+0x104>)
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800131c:	bf00      	nop
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <SystemClock_Config+0x100>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800132a:	d1f8      	bne.n	800131e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <SystemClock_Config+0x108>)
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	f023 0303 	bic.w	r3, r3, #3
 8001334:	4a25      	ldr	r2, [pc, #148]	; (80013cc <SystemClock_Config+0x108>)
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800133c:	2321      	movs	r3, #33	; 0x21
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001340:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001346:	2301      	movs	r3, #1
 8001348:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134a:	2302      	movs	r3, #2
 800134c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134e:	2302      	movs	r3, #2
 8001350:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001352:	2305      	movs	r3, #5
 8001354:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001356:	23c0      	movs	r3, #192	; 0xc0
 8001358:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800135a:	2302      	movs	r3, #2
 800135c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800135e:	2308      	movs	r3, #8
 8001360:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 8001362:	2308      	movs	r3, #8
 8001364:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001366:	2308      	movs	r3, #8
 8001368:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800136a:	2300      	movs	r3, #0
 800136c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001376:	4618      	mov	r0, r3
 8001378:	f003 f892 	bl	80044a0 <HAL_RCC_OscConfig>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001382:	f000 f851 	bl	8001428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001386:	233f      	movs	r3, #63	; 0x3f
 8001388:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138a:	2303      	movs	r3, #3
 800138c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001392:	2308      	movs	r3, #8
 8001394:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001396:	2340      	movs	r3, #64	; 0x40
 8001398:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800139a:	2340      	movs	r3, #64	; 0x40
 800139c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800139e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013a4:	2340      	movs	r3, #64	; 0x40
 80013a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2104      	movs	r1, #4
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 fc87 	bl	8004cc0 <HAL_RCC_ClockConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80013b8:	f000 f836 	bl	8001428 <Error_Handler>
  }
}
 80013bc:	bf00      	nop
 80013be:	3770      	adds	r7, #112	; 0x70
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	58024800 	.word	0x58024800
 80013c8:	58000400 	.word	0x58000400
 80013cc:	58024400 	.word	0x58024400

080013d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0b0      	sub	sp, #192	; 0xc0
 80013d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	22bc      	movs	r2, #188	; 0xbc
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f009 fd6f 	bl	800aec0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80013e6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 6;
 80013e8:	2306      	movs	r3, #6
 80013ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 80013ec:	23c0      	movs	r3, #192	; 0xc0
 80013ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 10;
 80013f0:	230a      	movs	r3, #10
 80013f2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 80013f4:	230a      	movs	r3, #10
 80013f6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 10;
 80013f8:	230a      	movs	r3, #10
 80013fa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	4618      	mov	r0, r3
 8001412:	f003 ffe1 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 800141c:	f000 f804 	bl	8001428 <Error_Handler>
  }
}
 8001420:	bf00      	nop
 8001422:	37c0      	adds	r7, #192	; 0xc0
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	e7fe      	b.n	8001430 <Error_Handler+0x8>
	...

08001434 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <MX_RNG_Init+0x24>)
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <MX_RNG_Init+0x28>)
 800143c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_RNG_Init+0x24>)
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <MX_RNG_Init+0x24>)
 8001446:	f006 f94d 	bl	80076e4 <HAL_RNG_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001450:	f7ff ffea 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	24010530 	.word	0x24010530
 800145c:	48021800 	.word	0x48021800

08001460 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0b2      	sub	sp, #200	; 0xc8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	22bc      	movs	r2, #188	; 0xbc
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f009 fd25 	bl	800aec0 <memset>
  if(rngHandle->Instance==RNG)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <HAL_RNG_MspInit+0x68>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d11e      	bne.n	80014be <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001484:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	4618      	mov	r0, r3
 8001492:	f003 ffa1 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800149c:	f7ff ffc4 	bl	8001428 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_RNG_MspInit+0x6c>)
 80014a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <HAL_RNG_MspInit+0x6c>)
 80014a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ac:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_RNG_MspInit+0x6c>)
 80014b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80014b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	37c8      	adds	r7, #200	; 0xc8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	48021800 	.word	0x48021800
 80014cc:	58024400 	.word	0x58024400

080014d0 <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_SAI1_Init+0x60>)
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <MX_SAI1_Init+0x64>)
 80014d8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_SAI1_Init+0x60>)
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_SAI1_Init+0x60>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_SAI1_Init+0x60>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_SAI1_Init+0x60>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_SAI1_Init+0x60>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <MX_SAI1_Init+0x60>)
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <MX_SAI1_Init+0x68>)
 80014fc:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_SAI1_Init+0x60>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <MX_SAI1_Init+0x60>)
 8001506:	2200      	movs	r2, #0
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_SAI1_Init+0x60>)
 800150c:	2200      	movs	r2, #0
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <MX_SAI1_Init+0x60>)
 8001512:	2200      	movs	r2, #0
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001516:	2302      	movs	r3, #2
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <MX_SAI1_Init+0x60>)
 800151e:	f006 f93c 	bl	800779a <HAL_SAI_InitProtocol>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8001528:	f7ff ff7e 	bl	8001428 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	24010544 	.word	0x24010544
 8001534:	40015804 	.word	0x40015804
 8001538:	0002ee00 	.word	0x0002ee00

0800153c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0b8      	sub	sp, #224	; 0xe0
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	22bc      	movs	r2, #188	; 0xbc
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f009 fcb7 	bl	800aec0 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a2c      	ldr	r2, [pc, #176]	; (8001608 <HAL_SAI_MspInit+0xcc>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d150      	bne.n	80015fe <HAL_SAI_MspInit+0xc2>
    {
    /* SAI1 clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800155c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001560:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8001562:	2300      	movs	r3, #0
 8001564:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	4618      	mov	r0, r3
 800156c:	f003 ff34 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_SAI_MspInit+0x3e>
    {
      Error_Handler();
 8001576:	f7ff ff57 	bl	8001428 <Error_Handler>
    }

    if (SAI1_client == 0)
 800157a:	4b24      	ldr	r3, [pc, #144]	; (800160c <HAL_SAI_MspInit+0xd0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10e      	bne.n	80015a0 <HAL_SAI_MspInit+0x64>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001582:	4b23      	ldr	r3, [pc, #140]	; (8001610 <HAL_SAI_MspInit+0xd4>)
 8001584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001588:	4a21      	ldr	r2, [pc, #132]	; (8001610 <HAL_SAI_MspInit+0xd4>)
 800158a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800158e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <HAL_SAI_MspInit+0xd4>)
 8001594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_SAI_MspInit+0xd0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_SAI_MspInit+0xd0>)
 80015a8:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_5;
 80015aa:	2334      	movs	r3, #52	; 0x34
 80015ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80015c2:	2306      	movs	r3, #6
 80015c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015cc:	4619      	mov	r1, r3
 80015ce:	4811      	ldr	r0, [pc, #68]	; (8001614 <HAL_SAI_MspInit+0xd8>)
 80015d0:	f002 fcfa 	bl	8003fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015d4:	2340      	movs	r3, #64	; 0x40
 80015d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80015ec:	2306      	movs	r3, #6
 80015ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015f6:	4619      	mov	r1, r3
 80015f8:	4807      	ldr	r0, [pc, #28]	; (8001618 <HAL_SAI_MspInit+0xdc>)
 80015fa:	f002 fce5 	bl	8003fc8 <HAL_GPIO_Init>

    }
}
 80015fe:	bf00      	nop
 8001600:	37e0      	adds	r7, #224	; 0xe0
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40015804 	.word	0x40015804
 800160c:	240002e4 	.word	0x240002e4
 8001610:	58024400 	.word	0x58024400
 8001614:	58021000 	.word	0x58021000
 8001618:	58020c00 	.word	0x58020c00

0800161c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <MX_SPI2_Init+0xa4>)
 8001622:	4a28      	ldr	r2, [pc, #160]	; (80016c4 <MX_SPI2_Init+0xa8>)
 8001624:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <MX_SPI2_Init+0xa4>)
 8001628:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800162c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <MX_SPI2_Init+0xa4>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <MX_SPI2_Init+0xa4>)
 8001636:	2203      	movs	r2, #3
 8001638:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800163a:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <MX_SPI2_Init+0xa4>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <MX_SPI2_Init+0xa4>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001646:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <MX_SPI2_Init+0xa4>)
 8001648:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800164c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MX_SPI2_Init+0xa4>)
 8001650:	2200      	movs	r2, #0
 8001652:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <MX_SPI2_Init+0xa4>)
 8001656:	2200      	movs	r2, #0
 8001658:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_SPI2_Init+0xa4>)
 800165c:	2200      	movs	r2, #0
 800165e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_SPI2_Init+0xa4>)
 8001662:	2200      	movs	r2, #0
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_SPI2_Init+0xa4>)
 8001668:	2200      	movs	r2, #0
 800166a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_SPI2_Init+0xa4>)
 800166e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001672:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_SPI2_Init+0xa4>)
 8001676:	2200      	movs	r2, #0
 8001678:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_SPI2_Init+0xa4>)
 800167c:	2200      	movs	r2, #0
 800167e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_SPI2_Init+0xa4>)
 8001682:	2200      	movs	r2, #0
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_SPI2_Init+0xa4>)
 8001688:	2200      	movs	r2, #0
 800168a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_SPI2_Init+0xa4>)
 800168e:	2200      	movs	r2, #0
 8001690:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_SPI2_Init+0xa4>)
 8001694:	2200      	movs	r2, #0
 8001696:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_SPI2_Init+0xa4>)
 800169a:	2200      	movs	r2, #0
 800169c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <MX_SPI2_Init+0xa4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_SPI2_Init+0xa4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_SPI2_Init+0xa4>)
 80016ac:	f006 fcb4 	bl	8008018 <HAL_SPI_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80016b6:	f7ff feb7 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	240105dc 	.word	0x240105dc
 80016c4:	40003800 	.word	0x40003800

080016c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0ba      	sub	sp, #232	; 0xe8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e0:	f107 0318 	add.w	r3, r7, #24
 80016e4:	22bc      	movs	r2, #188	; 0xbc
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f009 fbe9 	bl	800aec0 <memset>
  if(spiHandle->Instance==SPI2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a37      	ldr	r2, [pc, #220]	; (80017d0 <HAL_SPI_MspInit+0x108>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d166      	bne.n	80017c6 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80016f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80016fe:	2300      	movs	r3, #0
 8001700:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001702:	f107 0318 	add.w	r3, r7, #24
 8001706:	4618      	mov	r0, r3
 8001708:	f003 fe66 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001712:	f7ff fe89 	bl	8001428 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001716:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <HAL_SPI_MspInit+0x10c>)
 8001718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800171c:	4a2d      	ldr	r2, [pc, #180]	; (80017d4 <HAL_SPI_MspInit+0x10c>)
 800171e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001722:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001726:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_SPI_MspInit+0x10c>)
 8001728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800172c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001734:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_SPI_MspInit+0x10c>)
 8001736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173a:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <HAL_SPI_MspInit+0x10c>)
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <HAL_SPI_MspInit+0x10c>)
 8001746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_SPI_MspInit+0x10c>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001758:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_SPI_MspInit+0x10c>)
 800175a:	f043 0302 	orr.w	r3, r3, #2
 800175e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_SPI_MspInit+0x10c>)
 8001764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> SPI2_SCK
    PB9     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001770:	2308      	movs	r3, #8
 8001772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001788:	2305      	movs	r3, #5
 800178a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001792:	4619      	mov	r1, r3
 8001794:	4810      	ldr	r0, [pc, #64]	; (80017d8 <HAL_SPI_MspInit+0x110>)
 8001796:	f002 fc17 	bl	8003fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 800179a:	f44f 4342 	mov.w	r3, #49664	; 0xc200
 800179e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017b4:	2305      	movs	r3, #5
 80017b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017be:	4619      	mov	r1, r3
 80017c0:	4806      	ldr	r0, [pc, #24]	; (80017dc <HAL_SPI_MspInit+0x114>)
 80017c2:	f002 fc01 	bl	8003fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80017c6:	bf00      	nop
 80017c8:	37e8      	adds	r7, #232	; 0xe8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40003800 	.word	0x40003800
 80017d4:	58024400 	.word	0x58024400
 80017d8:	58020c00 	.word	0x58020c00
 80017dc:	58020400 	.word	0x58020400

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_MspInit+0x30>)
 80017e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017ec:	4a08      	ldr	r2, [pc, #32]	; (8001810 <HAL_MspInit+0x30>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_MspInit+0x30>)
 80017f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	58024400 	.word	0x58024400

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <NMI_Handler+0x4>

0800181a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <HardFault_Handler+0x4>

08001820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <MemManage_Handler+0x4>

08001826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <BusFault_Handler+0x4>

0800182c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <UsageFault_Handler+0x4>

08001832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001860:	f000 fda0 	bl	80023a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
	return 1;
 800186c:	2301      	movs	r3, #1
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_kill>:

int _kill(int pid, int sig)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001882:	f009 fac3 	bl	800ae0c <__errno>
 8001886:	4603      	mov	r3, r0
 8001888:	2216      	movs	r2, #22
 800188a:	601a      	str	r2, [r3, #0]
	return -1;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_exit>:

void _exit (int status)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ffe7 	bl	8001878 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018aa:	e7fe      	b.n	80018aa <_exit+0x12>

080018ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e00a      	b.n	80018d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018be:	f3af 8000 	nop.w
 80018c2:	4601      	mov	r1, r0
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	60ba      	str	r2, [r7, #8]
 80018ca:	b2ca      	uxtb	r2, r1
 80018cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf0      	blt.n	80018be <_read+0x12>
	}

return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e009      	b.n	800190c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	60ba      	str	r2, [r7, #8]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	dbf1      	blt.n	80018f8 <_write+0x12>
	}
	return len;
 8001914:	687b      	ldr	r3, [r7, #4]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <_close>:

int _close(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
	return -1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001946:	605a      	str	r2, [r3, #4]
	return 0;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_isatty>:

int _isatty(int file)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
	return 1;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
	return 0;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <_sbrk+0x5c>)
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <_sbrk+0x60>)
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <_sbrk+0x64>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <_sbrk+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d207      	bcs.n	80019c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b8:	f009 fa28 	bl	800ae0c <__errno>
 80019bc:	4603      	mov	r3, r0
 80019be:	220c      	movs	r2, #12
 80019c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c6:	e009      	b.n	80019dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <_sbrk+0x64>)
 80019d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	24040000 	.word	0x24040000
 80019e8:	00000400 	.word	0x00000400
 80019ec:	240002e8 	.word	0x240002e8
 80019f0:	24010888 	.word	0x24010888

080019f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b096      	sub	sp, #88	; 0x58
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	611a      	str	r2, [r3, #16]
 8001a16:	615a      	str	r2, [r3, #20]
 8001a18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	222c      	movs	r2, #44	; 0x2c
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f009 fa4d 	bl	800aec0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a26:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <MX_TIM1_Init+0x118>)
 8001a28:	4a39      	ldr	r2, [pc, #228]	; (8001b10 <MX_TIM1_Init+0x11c>)
 8001a2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a2c:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <MX_TIM1_Init+0x118>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <MX_TIM1_Init+0x118>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a38:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <MX_TIM1_Init+0x118>)
 8001a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <MX_TIM1_Init+0x118>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <MX_TIM1_Init+0x118>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <MX_TIM1_Init+0x118>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001a52:	482e      	ldr	r0, [pc, #184]	; (8001b0c <MX_TIM1_Init+0x118>)
 8001a54:	f006 fc92 	bl	800837c <HAL_TIM_OC_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a5e:	f7ff fce3 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a72:	4619      	mov	r1, r3
 8001a74:	4825      	ldr	r0, [pc, #148]	; (8001b0c <MX_TIM1_Init+0x118>)
 8001a76:	f007 f8b7 	bl	8008be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a80:	f7ff fcd2 	bl	8001428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001a84:	2300      	movs	r3, #0
 8001a86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a90:	2300      	movs	r3, #0
 8001a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4818      	ldr	r0, [pc, #96]	; (8001b0c <MX_TIM1_Init+0x118>)
 8001aaa:	f006 fcbf 	bl	800842c <HAL_TIM_OC_ConfigChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ab4:	f7ff fcb8 	bl	8001428 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	4619      	mov	r1, r3
 8001aec:	4807      	ldr	r0, [pc, #28]	; (8001b0c <MX_TIM1_Init+0x118>)
 8001aee:	f007 f903 	bl	8008cf8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001af8:	f7ff fc96 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001afc:	4803      	ldr	r0, [pc, #12]	; (8001b0c <MX_TIM1_Init+0x118>)
 8001afe:	f000 fa25 	bl	8001f4c <HAL_TIM_MspPostInit>

}
 8001b02:	bf00      	nop
 8001b04:	3758      	adds	r7, #88	; 0x58
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	24010794 	.word	0x24010794
 8001b10:	40010000 	.word	0x40010000

08001b14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b26:	463b      	mov	r3, r7
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
 8001b34:	615a      	str	r2, [r3, #20]
 8001b36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b38:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <MX_TIM3_Init+0xac>)
 8001b3a:	4a22      	ldr	r2, [pc, #136]	; (8001bc4 <MX_TIM3_Init+0xb0>)
 8001b3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <MX_TIM3_Init+0xac>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b44:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <MX_TIM3_Init+0xac>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <MX_TIM3_Init+0xac>)
 8001b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <MX_TIM3_Init+0xac>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <MX_TIM3_Init+0xac>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001b5e:	4818      	ldr	r0, [pc, #96]	; (8001bc0 <MX_TIM3_Init+0xac>)
 8001b60:	f006 fc0c 	bl	800837c <HAL_TIM_OC_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001b6a:	f7ff fc5d 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4810      	ldr	r0, [pc, #64]	; (8001bc0 <MX_TIM3_Init+0xac>)
 8001b7e:	f007 f833 	bl	8008be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001b88:	f7ff fc4e 	bl	8001428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <MX_TIM3_Init+0xac>)
 8001ba4:	f006 fc42 	bl	800842c <HAL_TIM_OC_ConfigChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001bae:	f7ff fc3b 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bb2:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <MX_TIM3_Init+0xac>)
 8001bb4:	f000 f9ca 	bl	8001f4c <HAL_TIM_MspPostInit>

}
 8001bb8:	bf00      	nop
 8001bba:	3728      	adds	r7, #40	; 0x28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	24010748 	.word	0x24010748
 8001bc4:	40000400 	.word	0x40000400

08001bc8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	615a      	str	r2, [r3, #20]
 8001bea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <MX_TIM4_Init+0xac>)
 8001bee:	4a22      	ldr	r2, [pc, #136]	; (8001c78 <MX_TIM4_Init+0xb0>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <MX_TIM4_Init+0xac>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <MX_TIM4_Init+0xac>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <MX_TIM4_Init+0xac>)
 8001c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <MX_TIM4_Init+0xac>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <MX_TIM4_Init+0xac>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001c12:	4818      	ldr	r0, [pc, #96]	; (8001c74 <MX_TIM4_Init+0xac>)
 8001c14:	f006 fbb2 	bl	800837c <HAL_TIM_OC_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001c1e:	f7ff fc03 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4810      	ldr	r0, [pc, #64]	; (8001c74 <MX_TIM4_Init+0xac>)
 8001c32:	f006 ffd9 	bl	8008be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001c3c:	f7ff fbf4 	bl	8001428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c40:	2300      	movs	r3, #0
 8001c42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c50:	463b      	mov	r3, r7
 8001c52:	2204      	movs	r2, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4807      	ldr	r0, [pc, #28]	; (8001c74 <MX_TIM4_Init+0xac>)
 8001c58:	f006 fbe8 	bl	800842c <HAL_TIM_OC_ConfigChannel>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001c62:	f7ff fbe1 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c66:	4803      	ldr	r0, [pc, #12]	; (8001c74 <MX_TIM4_Init+0xac>)
 8001c68:	f000 f970 	bl	8001f4c <HAL_TIM_MspPostInit>

}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	; 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	240106b0 	.word	0x240106b0
 8001c78:	40000800 	.word	0x40000800

08001c7c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c82:	f107 031c 	add.w	r3, r7, #28
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8e:	463b      	mov	r3, r7
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
 8001c9c:	615a      	str	r2, [r3, #20]
 8001c9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <MX_TIM5_Init+0xac>)
 8001ca2:	4a22      	ldr	r2, [pc, #136]	; (8001d2c <MX_TIM5_Init+0xb0>)
 8001ca4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <MX_TIM5_Init+0xac>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <MX_TIM5_Init+0xac>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <MX_TIM5_Init+0xac>)
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <MX_TIM5_Init+0xac>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <MX_TIM5_Init+0xac>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001cc6:	4818      	ldr	r0, [pc, #96]	; (8001d28 <MX_TIM5_Init+0xac>)
 8001cc8:	f006 fb58 	bl	800837c <HAL_TIM_OC_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001cd2:	f7ff fba9 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cde:	f107 031c 	add.w	r3, r7, #28
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4810      	ldr	r0, [pc, #64]	; (8001d28 <MX_TIM5_Init+0xac>)
 8001ce6:	f006 ff7f 	bl	8008be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001cf0:	f7ff fb9a 	bl	8001428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d04:	463b      	mov	r3, r7
 8001d06:	2208      	movs	r2, #8
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4807      	ldr	r0, [pc, #28]	; (8001d28 <MX_TIM5_Init+0xac>)
 8001d0c:	f006 fb8e 	bl	800842c <HAL_TIM_OC_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001d16:	f7ff fb87 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001d1a:	4803      	ldr	r0, [pc, #12]	; (8001d28 <MX_TIM5_Init+0xac>)
 8001d1c:	f000 f916 	bl	8001f4c <HAL_TIM_MspPostInit>

}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	240106fc 	.word	0x240106fc
 8001d2c:	40000c00 	.word	0x40000c00

08001d30 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b096      	sub	sp, #88	; 0x58
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]
 8001d52:	615a      	str	r2, [r3, #20]
 8001d54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	222c      	movs	r2, #44	; 0x2c
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f009 f8af 	bl	800aec0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d62:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <MX_TIM8_Init+0x118>)
 8001d64:	4a39      	ldr	r2, [pc, #228]	; (8001e4c <MX_TIM8_Init+0x11c>)
 8001d66:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d68:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <MX_TIM8_Init+0x118>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6e:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <MX_TIM8_Init+0x118>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d74:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <MX_TIM8_Init+0x118>)
 8001d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7c:	4b32      	ldr	r3, [pc, #200]	; (8001e48 <MX_TIM8_Init+0x118>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d82:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <MX_TIM8_Init+0x118>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d88:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <MX_TIM8_Init+0x118>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001d8e:	482e      	ldr	r0, [pc, #184]	; (8001e48 <MX_TIM8_Init+0x118>)
 8001d90:	f006 faf4 	bl	800837c <HAL_TIM_OC_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001d9a:	f7ff fb45 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001daa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dae:	4619      	mov	r1, r3
 8001db0:	4825      	ldr	r0, [pc, #148]	; (8001e48 <MX_TIM8_Init+0x118>)
 8001db2:	f006 ff19 	bl	8008be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001dbc:	f7ff fb34 	bl	8001428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ddc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001de0:	2208      	movs	r2, #8
 8001de2:	4619      	mov	r1, r3
 8001de4:	4818      	ldr	r0, [pc, #96]	; (8001e48 <MX_TIM8_Init+0x118>)
 8001de6:	f006 fb21 	bl	800842c <HAL_TIM_OC_ConfigChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001df0:	f7ff fb1a 	bl	8001428 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	4807      	ldr	r0, [pc, #28]	; (8001e48 <MX_TIM8_Init+0x118>)
 8001e2a:	f006 ff65 	bl	8008cf8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001e34:	f7ff faf8 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e38:	4803      	ldr	r0, [pc, #12]	; (8001e48 <MX_TIM8_Init+0x118>)
 8001e3a:	f000 f887 	bl	8001f4c <HAL_TIM_MspPostInit>

}
 8001e3e:	bf00      	nop
 8001e40:	3758      	adds	r7, #88	; 0x58
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	24010664 	.word	0x24010664
 8001e4c:	40010400 	.word	0x40010400

08001e50 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a35      	ldr	r2, [pc, #212]	; (8001f34 <HAL_TIM_OC_MspInit+0xe4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d10f      	bne.n	8001e82 <HAL_TIM_OC_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e62:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <HAL_TIM_OC_MspInit+0xe8>)
 8001e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e68:	4a33      	ldr	r2, [pc, #204]	; (8001f38 <HAL_TIM_OC_MspInit+0xe8>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <HAL_TIM_OC_MspInit+0xe8>)
 8001e74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001e80:	e052      	b.n	8001f28 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM3)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a2d      	ldr	r2, [pc, #180]	; (8001f3c <HAL_TIM_OC_MspInit+0xec>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d10f      	bne.n	8001eac <HAL_TIM_OC_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <HAL_TIM_OC_MspInit+0xe8>)
 8001e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e92:	4a29      	ldr	r2, [pc, #164]	; (8001f38 <HAL_TIM_OC_MspInit+0xe8>)
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e9c:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <HAL_TIM_OC_MspInit+0xe8>)
 8001e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	69bb      	ldr	r3, [r7, #24]
}
 8001eaa:	e03d      	b.n	8001f28 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM4)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <HAL_TIM_OC_MspInit+0xf0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_TIM_OC_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_TIM_OC_MspInit+0xe8>)
 8001eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ebc:	4a1e      	ldr	r2, [pc, #120]	; (8001f38 <HAL_TIM_OC_MspInit+0xe8>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_TIM_OC_MspInit+0xe8>)
 8001ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697b      	ldr	r3, [r7, #20]
}
 8001ed4:	e028      	b.n	8001f28 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM5)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1a      	ldr	r2, [pc, #104]	; (8001f44 <HAL_TIM_OC_MspInit+0xf4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d10f      	bne.n	8001f00 <HAL_TIM_OC_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_TIM_OC_MspInit+0xe8>)
 8001ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee6:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <HAL_TIM_OC_MspInit+0xe8>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_TIM_OC_MspInit+0xe8>)
 8001ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
}
 8001efe:	e013      	b.n	8001f28 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM8)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a10      	ldr	r2, [pc, #64]	; (8001f48 <HAL_TIM_OC_MspInit+0xf8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_OC_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_TIM_OC_MspInit+0xe8>)
 8001f0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f10:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <HAL_TIM_OC_MspInit+0xe8>)
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <HAL_TIM_OC_MspInit+0xe8>)
 8001f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
}
 8001f28:	bf00      	nop
 8001f2a:	3724      	adds	r7, #36	; 0x24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40010000 	.word	0x40010000
 8001f38:	58024400 	.word	0x58024400
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40000800 	.word	0x40000800
 8001f44:	40000c00 	.word	0x40000c00
 8001f48:	40010400 	.word	0x40010400

08001f4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08c      	sub	sp, #48	; 0x30
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a5e      	ldr	r2, [pc, #376]	; (80020e4 <HAL_TIM_MspPostInit+0x198>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d120      	bne.n	8001fb0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	4b5e      	ldr	r3, [pc, #376]	; (80020e8 <HAL_TIM_MspPostInit+0x19c>)
 8001f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f74:	4a5c      	ldr	r2, [pc, #368]	; (80020e8 <HAL_TIM_MspPostInit+0x19c>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f7e:	4b5a      	ldr	r3, [pc, #360]	; (80020e8 <HAL_TIM_MspPostInit+0x19c>)
 8001f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CIS_CP_Pin;
 8001f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_CP_GPIO_Port, &GPIO_InitStruct);
 8001fa2:	f107 031c 	add.w	r3, r7, #28
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4850      	ldr	r0, [pc, #320]	; (80020ec <HAL_TIM_MspPostInit+0x1a0>)
 8001faa:	f002 f80d 	bl	8003fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001fae:	e095      	b.n	80020dc <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM3)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a4e      	ldr	r2, [pc, #312]	; (80020f0 <HAL_TIM_MspPostInit+0x1a4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d11f      	bne.n	8001ffa <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fba:	4b4b      	ldr	r3, [pc, #300]	; (80020e8 <HAL_TIM_MspPostInit+0x19c>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc0:	4a49      	ldr	r2, [pc, #292]	; (80020e8 <HAL_TIM_MspPostInit+0x19c>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_TIM_MspPostInit+0x19c>)
 8001fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = CIS_VLED_R_Pin;
 8001fd8:	2340      	movs	r3, #64	; 0x40
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_R_GPIO_Port, &GPIO_InitStruct);
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4840      	ldr	r0, [pc, #256]	; (80020f4 <HAL_TIM_MspPostInit+0x1a8>)
 8001ff4:	f001 ffe8 	bl	8003fc8 <HAL_GPIO_Init>
}
 8001ff8:	e070      	b.n	80020dc <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM4)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a3e      	ldr	r2, [pc, #248]	; (80020f8 <HAL_TIM_MspPostInit+0x1ac>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d120      	bne.n	8002046 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002004:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_TIM_MspPostInit+0x19c>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200a:	4a37      	ldr	r2, [pc, #220]	; (80020e8 <HAL_TIM_MspPostInit+0x19c>)
 800200c:	f043 0308 	orr.w	r3, r3, #8
 8002010:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002014:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <HAL_TIM_MspPostInit+0x19c>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CIS_VLED_G_Pin;
 8002022:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002034:	2302      	movs	r3, #2
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_G_GPIO_Port, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	482f      	ldr	r0, [pc, #188]	; (80020fc <HAL_TIM_MspPostInit+0x1b0>)
 8002040:	f001 ffc2 	bl	8003fc8 <HAL_GPIO_Init>
}
 8002044:	e04a      	b.n	80020dc <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM5)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a2d      	ldr	r2, [pc, #180]	; (8002100 <HAL_TIM_MspPostInit+0x1b4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d120      	bne.n	8002092 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002050:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_TIM_MspPostInit+0x19c>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002056:	4a24      	ldr	r2, [pc, #144]	; (80020e8 <HAL_TIM_MspPostInit+0x19c>)
 8002058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800205c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002060:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <HAL_TIM_MspPostInit+0x19c>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CIS_VLED_B_Pin;
 800206e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002080:	2302      	movs	r3, #2
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_B_GPIO_Port, &GPIO_InitStruct);
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	4619      	mov	r1, r3
 800208a:	481e      	ldr	r0, [pc, #120]	; (8002104 <HAL_TIM_MspPostInit+0x1b8>)
 800208c:	f001 ff9c 	bl	8003fc8 <HAL_GPIO_Init>
}
 8002090:	e024      	b.n	80020dc <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM8)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <HAL_TIM_MspPostInit+0x1bc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d11f      	bne.n	80020dc <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_TIM_MspPostInit+0x19c>)
 800209e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a2:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <HAL_TIM_MspPostInit+0x19c>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_TIM_MspPostInit+0x19c>)
 80020ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CIS_SP_Pin;
 80020ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80020cc:	2303      	movs	r3, #3
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_SP_GPIO_Port, &GPIO_InitStruct);
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	4619      	mov	r1, r3
 80020d6:	4807      	ldr	r0, [pc, #28]	; (80020f4 <HAL_TIM_MspPostInit+0x1a8>)
 80020d8:	f001 ff76 	bl	8003fc8 <HAL_GPIO_Init>
}
 80020dc:	bf00      	nop
 80020de:	3730      	adds	r7, #48	; 0x30
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40010000 	.word	0x40010000
 80020e8:	58024400 	.word	0x58024400
 80020ec:	58020000 	.word	0x58020000
 80020f0:	40000400 	.word	0x40000400
 80020f4:	58020800 	.word	0x58020800
 80020f8:	40000800 	.word	0x40000800
 80020fc:	58020c00 	.word	0x58020c00
 8002100:	40000c00 	.word	0x40000c00
 8002104:	58021c00 	.word	0x58021c00
 8002108:	40010400 	.word	0x40010400

0800210c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002110:	4b22      	ldr	r3, [pc, #136]	; (800219c <MX_USART1_UART_Init+0x90>)
 8002112:	4a23      	ldr	r2, [pc, #140]	; (80021a0 <MX_USART1_UART_Init+0x94>)
 8002114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002116:	4b21      	ldr	r3, [pc, #132]	; (800219c <MX_USART1_UART_Init+0x90>)
 8002118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800211c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800211e:	4b1f      	ldr	r3, [pc, #124]	; (800219c <MX_USART1_UART_Init+0x90>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <MX_USART1_UART_Init+0x90>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800212a:	4b1c      	ldr	r3, [pc, #112]	; (800219c <MX_USART1_UART_Init+0x90>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <MX_USART1_UART_Init+0x90>)
 8002132:	220c      	movs	r2, #12
 8002134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002136:	4b19      	ldr	r3, [pc, #100]	; (800219c <MX_USART1_UART_Init+0x90>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <MX_USART1_UART_Init+0x90>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <MX_USART1_UART_Init+0x90>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <MX_USART1_UART_Init+0x90>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <MX_USART1_UART_Init+0x90>)
 8002150:	2200      	movs	r2, #0
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002154:	4811      	ldr	r0, [pc, #68]	; (800219c <MX_USART1_UART_Init+0x90>)
 8002156:	f006 fe4d 	bl	8008df4 <HAL_UART_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002160:	f7ff f962 	bl	8001428 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002164:	2100      	movs	r1, #0
 8002166:	480d      	ldr	r0, [pc, #52]	; (800219c <MX_USART1_UART_Init+0x90>)
 8002168:	f007 fd9a 	bl	8009ca0 <HAL_UARTEx_SetTxFifoThreshold>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002172:	f7ff f959 	bl	8001428 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002176:	2100      	movs	r1, #0
 8002178:	4808      	ldr	r0, [pc, #32]	; (800219c <MX_USART1_UART_Init+0x90>)
 800217a:	f007 fdcf 	bl	8009d1c <HAL_UARTEx_SetRxFifoThreshold>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002184:	f7ff f950 	bl	8001428 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002188:	4804      	ldr	r0, [pc, #16]	; (800219c <MX_USART1_UART_Init+0x90>)
 800218a:	f007 fd50 	bl	8009c2e <HAL_UARTEx_DisableFifoMode>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002194:	f7ff f948 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	240107e0 	.word	0x240107e0
 80021a0:	40011000 	.word	0x40011000

080021a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b0b8      	sub	sp, #224	; 0xe0
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	22bc      	movs	r2, #188	; 0xbc
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f008 fe7b 	bl	800aec0 <memset>
  if(uartHandle->Instance==USART1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a24      	ldr	r2, [pc, #144]	; (8002260 <HAL_UART_MspInit+0xbc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d141      	bne.n	8002258 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021d4:	2301      	movs	r3, #1
 80021d6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 f8f8 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021ee:	f7ff f91b 	bl	8001428 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <HAL_UART_MspInit+0xc0>)
 80021f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021f8:	4a1a      	ldr	r2, [pc, #104]	; (8002264 <HAL_UART_MspInit+0xc0>)
 80021fa:	f043 0310 	orr.w	r3, r3, #16
 80021fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <HAL_UART_MspInit+0xc0>)
 8002204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_UART_MspInit+0xc0>)
 8002212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <HAL_UART_MspInit+0xc0>)
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002220:	4b10      	ldr	r3, [pc, #64]	; (8002264 <HAL_UART_MspInit+0xc0>)
 8002222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800222e:	23c0      	movs	r3, #192	; 0xc0
 8002230:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002246:	2307      	movs	r3, #7
 8002248:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002250:	4619      	mov	r1, r3
 8002252:	4805      	ldr	r0, [pc, #20]	; (8002268 <HAL_UART_MspInit+0xc4>)
 8002254:	f001 feb8 	bl	8003fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002258:	bf00      	nop
 800225a:	37e0      	adds	r7, #224	; 0xe0
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40011000 	.word	0x40011000
 8002264:	58024400 	.word	0x58024400
 8002268:	58020400 	.word	0x58020400

0800226c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800226c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002270:	f7fe fa0a 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002274:	480c      	ldr	r0, [pc, #48]	; (80022a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002276:	490d      	ldr	r1, [pc, #52]	; (80022ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800227c:	e002      	b.n	8002284 <LoopCopyDataInit>

0800227e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002282:	3304      	adds	r3, #4

08002284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002288:	d3f9      	bcc.n	800227e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800228c:	4c0a      	ldr	r4, [pc, #40]	; (80022b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002290:	e001      	b.n	8002296 <LoopFillZerobss>

08002292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002294:	3204      	adds	r2, #4

08002296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002298:	d3fb      	bcc.n	8002292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800229a:	f008 fdbd 	bl	800ae18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800229e:	f7fe ff91 	bl	80011c4 <main>
  bx  lr
 80022a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022a4:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80022a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80022ac:	24000200 	.word	0x24000200
  ldr r2, =_sidata
 80022b0:	08011b70 	.word	0x08011b70
  ldr r2, =_sbss
 80022b4:	240002c0 	.word	0x240002c0
  ldr r4, =_ebss
 80022b8:	24010884 	.word	0x24010884

080022bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC3_IRQHandler>
	...

080022c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c6:	2003      	movs	r0, #3
 80022c8:	f001 fa36 	bl	8003738 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022cc:	f002 feae 	bl	800502c <HAL_RCC_GetSysClockFreq>
 80022d0:	4602      	mov	r2, r0
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_Init+0x68>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	4913      	ldr	r1, [pc, #76]	; (800232c <HAL_Init+0x6c>)
 80022de:	5ccb      	ldrb	r3, [r1, r3]
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
 80022e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_Init+0x68>)
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	4a0e      	ldr	r2, [pc, #56]	; (800232c <HAL_Init+0x6c>)
 80022f4:	5cd3      	ldrb	r3, [r2, r3]
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002300:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <HAL_Init+0x70>)
 8002302:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002304:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <HAL_Init+0x74>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800230a:	2000      	movs	r0, #0
 800230c:	f000 f814 	bl	8002338 <HAL_InitTick>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e002      	b.n	8002320 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800231a:	f7ff fa61 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	58024400 	.word	0x58024400
 800232c:	0800e768 	.word	0x0800e768
 8002330:	24000004 	.word	0x24000004
 8002334:	24000000 	.word	0x24000000

08002338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_InitTick+0x60>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e021      	b.n	8002390 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_InitTick+0x64>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_InitTick+0x60>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4619      	mov	r1, r3
 8002356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235a:	fbb3 f3f1 	udiv	r3, r3, r1
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	4618      	mov	r0, r3
 8002364:	f001 fa0d 	bl	8003782 <HAL_SYSTICK_Config>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e00e      	b.n	8002390 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b0f      	cmp	r3, #15
 8002376:	d80a      	bhi.n	800238e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002378:	2200      	movs	r2, #0
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002380:	f001 f9e5 	bl	800374e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002384:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <HAL_InitTick+0x68>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	2400000c 	.word	0x2400000c
 800239c:	24000000 	.word	0x24000000
 80023a0:	24000008 	.word	0x24000008

080023a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_IncTick+0x20>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_IncTick+0x24>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <HAL_IncTick+0x24>)
 80023b6:	6013      	str	r3, [r2, #0]
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	2400000c 	.word	0x2400000c
 80023c8:	24010870 	.word	0x24010870

080023cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return uwTick;
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <HAL_GetTick+0x14>)
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	24010870 	.word	0x24010870

080023e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ec:	f7ff ffee 	bl	80023cc <HAL_GetTick>
 80023f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023fc:	d005      	beq.n	800240a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_Delay+0x44>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800240a:	bf00      	nop
 800240c:	f7ff ffde 	bl	80023cc <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	429a      	cmp	r2, r3
 800241a:	d8f7      	bhi.n	800240c <HAL_Delay+0x28>
  {
  }
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	2400000c 	.word	0x2400000c

0800242c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_GetREVID+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0c1b      	lsrs	r3, r3, #16
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	5c001000 	.word	0x5c001000

08002444 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002454:	4904      	ldr	r1, [pc, #16]	; (8002468 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	58000400 	.word	0x58000400

0800246c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	43db      	mvns	r3, r3
 800247e:	401a      	ands	r2, r3
 8002480:	4904      	ldr	r1, [pc, #16]	; (8002494 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	58000400 	.word	0x58000400

08002498 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_SetFMCMemorySwappingConfig+0x24>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024a8:	4904      	ldr	r1, [pc, #16]	; (80024bc <HAL_SetFMCMemorySwappingConfig+0x24>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	52004000 	.word	0x52004000

080024c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	609a      	str	r2, [r3, #8]
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	609a      	str	r2, [r3, #8]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3360      	adds	r3, #96	; 0x60
 800253a:	461a      	mov	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	430b      	orrs	r3, r1
 8002556:	431a      	orrs	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800255c:	bf00      	nop
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	431a      	orrs	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	611a      	str	r2, [r3, #16]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800259a:	b480      	push	{r7}
 800259c:	b087      	sub	sp, #28
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3360      	adds	r3, #96	; 0x60
 80025aa:	461a      	mov	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	431a      	orrs	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	601a      	str	r2, [r3, #0]
  }
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3330      	adds	r3, #48	; 0x30
 80025e0:	461a      	mov	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	4413      	add	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	211f      	movs	r1, #31
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	401a      	ands	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	0e9b      	lsrs	r3, r3, #26
 8002608:	f003 011f 	and.w	r1, r3, #31
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	431a      	orrs	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3314      	adds	r3, #20
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	0e5b      	lsrs	r3, r3, #25
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	4413      	add	r3, r2
 8002646:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	0d1b      	lsrs	r3, r3, #20
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	2107      	movs	r1, #7
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	401a      	ands	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	0d1b      	lsrs	r3, r3, #20
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	431a      	orrs	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002672:	bf00      	nop
 8002674:	371c      	adds	r7, #28
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002698:	43db      	mvns	r3, r3
 800269a:	401a      	ands	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f003 0318 	and.w	r3, r3, #24
 80026a2:	4908      	ldr	r1, [pc, #32]	; (80026c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026a4:	40d9      	lsrs	r1, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	400b      	ands	r3, r1
 80026aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026ae:	431a      	orrs	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	000fffff 	.word	0x000fffff

080026c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6093      	str	r3, [r2, #8]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	5fffffc0 	.word	0x5fffffc0

080026ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002700:	d101      	bne.n	8002706 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <LL_ADC_EnableInternalRegulator+0x24>)
 8002722:	4013      	ands	r3, r2
 8002724:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	6fffffc0 	.word	0x6fffffc0

0800273c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002750:	d101      	bne.n	8002756 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <LL_ADC_IsEnabled+0x18>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <LL_ADC_IsEnabled+0x1a>
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b04      	cmp	r3, #4
 800279c:	d101      	bne.n	80027a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d101      	bne.n	80027c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b089      	sub	sp, #36	; 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e18e      	b.n	8002b10 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7fe f91d 	bl	8000a40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff67 	bl	80026ec <LL_ADC_IsDeepPowerDownEnabled>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d004      	beq.n	800282e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff4d 	bl	80026c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff ff82 	bl	800273c <LL_ADC_IsInternalRegulatorEnabled>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d114      	bne.n	8002868 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ff66 	bl	8002714 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002848:	4b9a      	ldr	r3, [pc, #616]	; (8002ab4 <HAL_ADC_Init+0x2dc>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	099b      	lsrs	r3, r3, #6
 800284e:	4a9a      	ldr	r2, [pc, #616]	; (8002ab8 <HAL_ADC_Init+0x2e0>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	099b      	lsrs	r3, r3, #6
 8002856:	3301      	adds	r3, #1
 8002858:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800285a:	e002      	b.n	8002862 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	3b01      	subs	r3, #1
 8002860:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f9      	bne.n	800285c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff65 	bl	800273c <LL_ADC_IsInternalRegulatorEnabled>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10d      	bne.n	8002894 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	f043 0210 	orr.w	r2, r3, #16
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002888:	f043 0201 	orr.w	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff76 	bl	800278a <LL_ADC_REG_IsConversionOngoing>
 800289e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f040 8128 	bne.w	8002afe <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f040 8124 	bne.w	8002afe <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028be:	f043 0202 	orr.w	r2, r3, #2
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ff4a 	bl	8002764 <LL_ADC_IsEnabled>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d136      	bne.n	8002944 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a78      	ldr	r2, [pc, #480]	; (8002abc <HAL_ADC_Init+0x2e4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d004      	beq.n	80028ea <HAL_ADC_Init+0x112>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a76      	ldr	r2, [pc, #472]	; (8002ac0 <HAL_ADC_Init+0x2e8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10e      	bne.n	8002908 <HAL_ADC_Init+0x130>
 80028ea:	4874      	ldr	r0, [pc, #464]	; (8002abc <HAL_ADC_Init+0x2e4>)
 80028ec:	f7ff ff3a 	bl	8002764 <LL_ADC_IsEnabled>
 80028f0:	4604      	mov	r4, r0
 80028f2:	4873      	ldr	r0, [pc, #460]	; (8002ac0 <HAL_ADC_Init+0x2e8>)
 80028f4:	f7ff ff36 	bl	8002764 <LL_ADC_IsEnabled>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4323      	orrs	r3, r4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	e008      	b.n	800291a <HAL_ADC_Init+0x142>
 8002908:	486e      	ldr	r0, [pc, #440]	; (8002ac4 <HAL_ADC_Init+0x2ec>)
 800290a:	f7ff ff2b 	bl	8002764 <LL_ADC_IsEnabled>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf0c      	ite	eq
 8002914:	2301      	moveq	r3, #1
 8002916:	2300      	movne	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d012      	beq.n	8002944 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a66      	ldr	r2, [pc, #408]	; (8002abc <HAL_ADC_Init+0x2e4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d004      	beq.n	8002932 <HAL_ADC_Init+0x15a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a64      	ldr	r2, [pc, #400]	; (8002ac0 <HAL_ADC_Init+0x2e8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d101      	bne.n	8002936 <HAL_ADC_Init+0x15e>
 8002932:	4a65      	ldr	r2, [pc, #404]	; (8002ac8 <HAL_ADC_Init+0x2f0>)
 8002934:	e000      	b.n	8002938 <HAL_ADC_Init+0x160>
 8002936:	4a65      	ldr	r2, [pc, #404]	; (8002acc <HAL_ADC_Init+0x2f4>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4619      	mov	r1, r3
 800293e:	4610      	mov	r0, r2
 8002940:	f7ff fdbe 	bl	80024c0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002944:	f7ff fd72 	bl	800242c <HAL_GetREVID>
 8002948:	4603      	mov	r3, r0
 800294a:	f241 0203 	movw	r2, #4099	; 0x1003
 800294e:	4293      	cmp	r3, r2
 8002950:	d914      	bls.n	800297c <HAL_ADC_Init+0x1a4>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b10      	cmp	r3, #16
 8002958:	d110      	bne.n	800297c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	7d5b      	ldrb	r3, [r3, #21]
 800295e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002964:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800296a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7f1b      	ldrb	r3, [r3, #28]
 8002970:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002972:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002974:	f043 030c 	orr.w	r3, r3, #12
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	e00d      	b.n	8002998 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7d5b      	ldrb	r3, [r3, #21]
 8002980:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002986:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800298c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	7f1b      	ldrb	r3, [r3, #28]
 8002992:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7f1b      	ldrb	r3, [r3, #28]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d106      	bne.n	80029ae <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	045b      	lsls	r3, r3, #17
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	4b3f      	ldr	r3, [pc, #252]	; (8002ad0 <HAL_ADC_Init+0x2f8>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	69b9      	ldr	r1, [r7, #24]
 80029da:	430b      	orrs	r3, r1
 80029dc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fed1 	bl	800278a <LL_ADC_REG_IsConversionOngoing>
 80029e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fede 	bl	80027b0 <LL_ADC_INJ_IsConversionOngoing>
 80029f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d14a      	bne.n	8002a92 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d147      	bne.n	8002a92 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7d1b      	ldrb	r3, [r3, #20]
 8002a06:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	4b2f      	ldr	r3, [pc, #188]	; (8002ad4 <HAL_ADC_Init+0x2fc>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	69b9      	ldr	r1, [r7, #24]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d11b      	bne.n	8002a66 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <HAL_ADC_Init+0x300>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a42:	3a01      	subs	r2, #1
 8002a44:	0411      	lsls	r1, r2, #16
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a4a:	4311      	orrs	r1, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a50:	4311      	orrs	r1, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a56:	430a      	orrs	r2, r1
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	611a      	str	r2, [r3, #16]
 8002a64:	e007      	b.n	8002a76 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fb93 	bl	80031b8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d120      	bne.n	8002adc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	f023 010f 	bic.w	r1, r3, #15
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	1e5a      	subs	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ab2:	e01b      	b.n	8002aec <HAL_ADC_Init+0x314>
 8002ab4:	24000000 	.word	0x24000000
 8002ab8:	053e2d63 	.word	0x053e2d63
 8002abc:	40022000 	.word	0x40022000
 8002ac0:	40022100 	.word	0x40022100
 8002ac4:	58026000 	.word	0x58026000
 8002ac8:	40022300 	.word	0x40022300
 8002acc:	58026300 	.word	0x58026300
 8002ad0:	fff0c003 	.word	0xfff0c003
 8002ad4:	ffffbffc 	.word	0xffffbffc
 8002ad8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 020f 	bic.w	r2, r2, #15
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af0:	f023 0303 	bic.w	r3, r3, #3
 8002af4:	f043 0201 	orr.w	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
 8002afc:	e007      	b.n	8002b0e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	f043 0210 	orr.w	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3724      	adds	r7, #36	; 0x24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd90      	pop	{r4, r7, pc}

08002b18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b0a1      	sub	sp, #132	; 0x84
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a9d      	ldr	r2, [pc, #628]	; (8002da8 <HAL_ADC_ConfigChannel+0x290>)
 8002b32:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x2a>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e321      	b.n	8003186 <HAL_ADC_ConfigChannel+0x66e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fe1b 	bl	800278a <LL_ADC_REG_IsConversionOngoing>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 8306 	bne.w	8003168 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d108      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x62>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	2201      	movs	r2, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	e016      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x90>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b8a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002b92:	2320      	movs	r3, #32
 8002b94:	e003      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	69d1      	ldr	r1, [r2, #28]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f7ff fd04 	bl	80025d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fddc 	bl	800278a <LL_ADC_REG_IsConversionOngoing>
 8002bd2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fde9 	bl	80027b0 <LL_ADC_INJ_IsConversionOngoing>
 8002bde:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f040 80b3 	bne.w	8002d4e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 80af 	bne.w	8002d4e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6819      	ldr	r1, [r3, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f7ff fd13 	bl	8002628 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c02:	4b6a      	ldr	r3, [pc, #424]	; (8002dac <HAL_ADC_ConfigChannel+0x294>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c0e:	d10b      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x110>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	e01d      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x14c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x136>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	089b      	lsrs	r3, r3, #2
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	e00a      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x14c>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d027      	beq.n	8002cbe <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6919      	ldr	r1, [r3, #16]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c7c:	f7ff fc54 	bl	8002528 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	6919      	ldr	r1, [r3, #16]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	7e5b      	ldrb	r3, [r3, #25]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d102      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x17e>
 8002c90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c94:	e000      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x180>
 8002c96:	2300      	movs	r3, #0
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f7ff fc7e 	bl	800259a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6919      	ldr	r1, [r3, #16]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	7e1b      	ldrb	r3, [r3, #24]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d102      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x19c>
 8002cae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cb2:	e000      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x19e>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f7ff fc56 	bl	8002568 <LL_ADC_SetDataRightShift>
 8002cbc:	e047      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	069b      	lsls	r3, r3, #26
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d107      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ce0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	069b      	lsls	r3, r3, #26
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d107      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d04:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	069b      	lsls	r3, r3, #26
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d107      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d28:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	069b      	lsls	r3, r3, #26
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d107      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d4c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fd06 	bl	8002764 <LL_ADC_IsEnabled>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 820d 	bne.w	800317a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	6819      	ldr	r1, [r3, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	f7ff fc87 	bl	8002680 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <HAL_ADC_ConfigChannel+0x290>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	f040 8133 	bne.w	8002fe4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d110      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x298>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	0e9b      	lsrs	r3, r3, #26
 8002d94:	3301      	adds	r3, #1
 8002d96:	f003 031f 	and.w	r3, r3, #31
 8002d9a:	2b09      	cmp	r3, #9
 8002d9c:	bf94      	ite	ls
 8002d9e:	2301      	movls	r3, #1
 8002da0:	2300      	movhi	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	e01e      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x2cc>
 8002da6:	bf00      	nop
 8002da8:	47ff0000 	.word	0x47ff0000
 8002dac:	5c001000 	.word	0x5c001000
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e003      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2b09      	cmp	r3, #9
 8002ddc:	bf94      	ite	ls
 8002dde:	2301      	movls	r3, #1
 8002de0:	2300      	movhi	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d079      	beq.n	8002edc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d107      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x2ec>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	0e9b      	lsrs	r3, r3, #26
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	069b      	lsls	r3, r3, #26
 8002dfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e02:	e015      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x318>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e14:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	e003      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	069b      	lsls	r3, r3, #26
 8002e2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x338>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0e9b      	lsrs	r3, r3, #26
 8002e42:	3301      	adds	r3, #1
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	e017      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x368>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e60:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002e68:	2320      	movs	r3, #32
 8002e6a:	e003      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	ea42 0103 	orr.w	r1, r2, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x38e>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	0e9b      	lsrs	r3, r3, #26
 8002e96:	3301      	adds	r3, #1
 8002e98:	f003 021f 	and.w	r2, r3, #31
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	051b      	lsls	r3, r3, #20
 8002ea4:	e018      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x3c0>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	e003      	b.n	8002eca <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	e07e      	b.n	8002fda <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x3e0>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	0e9b      	lsrs	r3, r3, #26
 8002eee:	3301      	adds	r3, #1
 8002ef0:	069b      	lsls	r3, r3, #26
 8002ef2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ef6:	e015      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x40c>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002f10:	2320      	movs	r3, #32
 8002f12:	e003      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	069b      	lsls	r3, r3, #26
 8002f20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d109      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x42c>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	0e9b      	lsrs	r3, r3, #26
 8002f36:	3301      	adds	r3, #1
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	e017      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x45c>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	61bb      	str	r3, [r7, #24]
  return result;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	e003      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	2101      	movs	r1, #1
 8002f70:	fa01 f303 	lsl.w	r3, r1, r3
 8002f74:	ea42 0103 	orr.w	r1, r2, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10d      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x488>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	0e9b      	lsrs	r3, r3, #26
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f003 021f 	and.w	r2, r3, #31
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	3b1e      	subs	r3, #30
 8002f98:	051b      	lsls	r3, r3, #20
 8002f9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	e01b      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x4c0>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	60fb      	str	r3, [r7, #12]
  return result;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002fb8:	2320      	movs	r3, #32
 8002fba:	e003      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f003 021f 	and.w	r2, r3, #31
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	3b1e      	subs	r3, #30
 8002fd2:	051b      	lsls	r3, r3, #20
 8002fd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	6892      	ldr	r2, [r2, #8]
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f7ff fb22 	bl	8002628 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f280 80c6 	bge.w	800317a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a67      	ldr	r2, [pc, #412]	; (8003190 <HAL_ADC_ConfigChannel+0x678>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_ADC_ConfigChannel+0x4ea>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a65      	ldr	r2, [pc, #404]	; (8003194 <HAL_ADC_ConfigChannel+0x67c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x4ee>
 8003002:	4b65      	ldr	r3, [pc, #404]	; (8003198 <HAL_ADC_ConfigChannel+0x680>)
 8003004:	e000      	b.n	8003008 <HAL_ADC_ConfigChannel+0x4f0>
 8003006:	4b65      	ldr	r3, [pc, #404]	; (800319c <HAL_ADC_ConfigChannel+0x684>)
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fa7f 	bl	800250c <LL_ADC_GetCommonPathInternalCh>
 800300e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a5e      	ldr	r2, [pc, #376]	; (8003190 <HAL_ADC_ConfigChannel+0x678>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <HAL_ADC_ConfigChannel+0x50c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a5d      	ldr	r2, [pc, #372]	; (8003194 <HAL_ADC_ConfigChannel+0x67c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10e      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x52a>
 8003024:	485a      	ldr	r0, [pc, #360]	; (8003190 <HAL_ADC_ConfigChannel+0x678>)
 8003026:	f7ff fb9d 	bl	8002764 <LL_ADC_IsEnabled>
 800302a:	4604      	mov	r4, r0
 800302c:	4859      	ldr	r0, [pc, #356]	; (8003194 <HAL_ADC_ConfigChannel+0x67c>)
 800302e:	f7ff fb99 	bl	8002764 <LL_ADC_IsEnabled>
 8003032:	4603      	mov	r3, r0
 8003034:	4323      	orrs	r3, r4
 8003036:	2b00      	cmp	r3, #0
 8003038:	bf0c      	ite	eq
 800303a:	2301      	moveq	r3, #1
 800303c:	2300      	movne	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	e008      	b.n	8003054 <HAL_ADC_ConfigChannel+0x53c>
 8003042:	4857      	ldr	r0, [pc, #348]	; (80031a0 <HAL_ADC_ConfigChannel+0x688>)
 8003044:	f7ff fb8e 	bl	8002764 <LL_ADC_IsEnabled>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	bf0c      	ite	eq
 800304e:	2301      	moveq	r3, #1
 8003050:	2300      	movne	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d07d      	beq.n	8003154 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a51      	ldr	r2, [pc, #324]	; (80031a4 <HAL_ADC_ConfigChannel+0x68c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d130      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x5ac>
 8003062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d12b      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a4b      	ldr	r2, [pc, #300]	; (80031a0 <HAL_ADC_ConfigChannel+0x688>)
 8003072:	4293      	cmp	r3, r2
 8003074:	f040 8081 	bne.w	800317a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a44      	ldr	r2, [pc, #272]	; (8003190 <HAL_ADC_ConfigChannel+0x678>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_ADC_ConfigChannel+0x574>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a43      	ldr	r2, [pc, #268]	; (8003194 <HAL_ADC_ConfigChannel+0x67c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d101      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x578>
 800308c:	4a42      	ldr	r2, [pc, #264]	; (8003198 <HAL_ADC_ConfigChannel+0x680>)
 800308e:	e000      	b.n	8003092 <HAL_ADC_ConfigChannel+0x57a>
 8003090:	4a42      	ldr	r2, [pc, #264]	; (800319c <HAL_ADC_ConfigChannel+0x684>)
 8003092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003094:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f7ff fa23 	bl	80024e6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030a0:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_ADC_ConfigChannel+0x690>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	099b      	lsrs	r3, r3, #6
 80030a6:	4a41      	ldr	r2, [pc, #260]	; (80031ac <HAL_ADC_ConfigChannel+0x694>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	099b      	lsrs	r3, r3, #6
 80030ae:	3301      	adds	r3, #1
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80030b4:	e002      	b.n	80030bc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f9      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030c2:	e05a      	b.n	800317a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a39      	ldr	r2, [pc, #228]	; (80031b0 <HAL_ADC_ConfigChannel+0x698>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d11e      	bne.n	800310c <HAL_ADC_ConfigChannel+0x5f4>
 80030ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d119      	bne.n	800310c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a30      	ldr	r2, [pc, #192]	; (80031a0 <HAL_ADC_ConfigChannel+0x688>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d14b      	bne.n	800317a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <HAL_ADC_ConfigChannel+0x678>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d004      	beq.n	80030f6 <HAL_ADC_ConfigChannel+0x5de>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a28      	ldr	r2, [pc, #160]	; (8003194 <HAL_ADC_ConfigChannel+0x67c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x5e2>
 80030f6:	4a28      	ldr	r2, [pc, #160]	; (8003198 <HAL_ADC_ConfigChannel+0x680>)
 80030f8:	e000      	b.n	80030fc <HAL_ADC_ConfigChannel+0x5e4>
 80030fa:	4a28      	ldr	r2, [pc, #160]	; (800319c <HAL_ADC_ConfigChannel+0x684>)
 80030fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f7ff f9ee 	bl	80024e6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800310a:	e036      	b.n	800317a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a28      	ldr	r2, [pc, #160]	; (80031b4 <HAL_ADC_ConfigChannel+0x69c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d131      	bne.n	800317a <HAL_ADC_ConfigChannel+0x662>
 8003116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d12c      	bne.n	800317a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <HAL_ADC_ConfigChannel+0x688>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d127      	bne.n	800317a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a18      	ldr	r2, [pc, #96]	; (8003190 <HAL_ADC_ConfigChannel+0x678>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d004      	beq.n	800313e <HAL_ADC_ConfigChannel+0x626>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a16      	ldr	r2, [pc, #88]	; (8003194 <HAL_ADC_ConfigChannel+0x67c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x62a>
 800313e:	4a16      	ldr	r2, [pc, #88]	; (8003198 <HAL_ADC_ConfigChannel+0x680>)
 8003140:	e000      	b.n	8003144 <HAL_ADC_ConfigChannel+0x62c>
 8003142:	4a16      	ldr	r2, [pc, #88]	; (800319c <HAL_ADC_ConfigChannel+0x684>)
 8003144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003146:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800314a:	4619      	mov	r1, r3
 800314c:	4610      	mov	r0, r2
 800314e:	f7ff f9ca 	bl	80024e6 <LL_ADC_SetCommonPathInternalCh>
 8003152:	e012      	b.n	800317a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003166:	e008      	b.n	800317a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003182:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003186:	4618      	mov	r0, r3
 8003188:	3784      	adds	r7, #132	; 0x84
 800318a:	46bd      	mov	sp, r7
 800318c:	bd90      	pop	{r4, r7, pc}
 800318e:	bf00      	nop
 8003190:	40022000 	.word	0x40022000
 8003194:	40022100 	.word	0x40022100
 8003198:	40022300 	.word	0x40022300
 800319c:	58026300 	.word	0x58026300
 80031a0:	58026000 	.word	0x58026000
 80031a4:	cb840000 	.word	0xcb840000
 80031a8:	24000000 	.word	0x24000000
 80031ac:	053e2d63 	.word	0x053e2d63
 80031b0:	c7520000 	.word	0xc7520000
 80031b4:	cfb80000 	.word	0xcfb80000

080031b8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a79      	ldr	r2, [pc, #484]	; (80033ac <ADC_ConfigureBoostMode+0x1f4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <ADC_ConfigureBoostMode+0x1c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a78      	ldr	r2, [pc, #480]	; (80033b0 <ADC_ConfigureBoostMode+0x1f8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d109      	bne.n	80031e8 <ADC_ConfigureBoostMode+0x30>
 80031d4:	4b77      	ldr	r3, [pc, #476]	; (80033b4 <ADC_ConfigureBoostMode+0x1fc>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf14      	ite	ne
 80031e0:	2301      	movne	r3, #1
 80031e2:	2300      	moveq	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	e008      	b.n	80031fa <ADC_ConfigureBoostMode+0x42>
 80031e8:	4b73      	ldr	r3, [pc, #460]	; (80033b8 <ADC_ConfigureBoostMode+0x200>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01c      	beq.n	8003238 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80031fe:	f002 f88f 	bl	8005320 <HAL_RCC_GetHCLKFreq>
 8003202:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800320c:	d010      	beq.n	8003230 <ADC_ConfigureBoostMode+0x78>
 800320e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003212:	d871      	bhi.n	80032f8 <ADC_ConfigureBoostMode+0x140>
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003218:	d002      	beq.n	8003220 <ADC_ConfigureBoostMode+0x68>
 800321a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800321e:	d16b      	bne.n	80032f8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	0c1b      	lsrs	r3, r3, #16
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	60fb      	str	r3, [r7, #12]
        break;
 800322e:	e066      	b.n	80032fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	60fb      	str	r3, [r7, #12]
        break;
 8003236:	e062      	b.n	80032fe <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003238:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800323c:	f003 f80c 	bl	8006258 <HAL_RCCEx_GetPeriphCLKFreq>
 8003240:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800324a:	d051      	beq.n	80032f0 <ADC_ConfigureBoostMode+0x138>
 800324c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003250:	d854      	bhi.n	80032fc <ADC_ConfigureBoostMode+0x144>
 8003252:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003256:	d047      	beq.n	80032e8 <ADC_ConfigureBoostMode+0x130>
 8003258:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800325c:	d84e      	bhi.n	80032fc <ADC_ConfigureBoostMode+0x144>
 800325e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003262:	d03d      	beq.n	80032e0 <ADC_ConfigureBoostMode+0x128>
 8003264:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003268:	d848      	bhi.n	80032fc <ADC_ConfigureBoostMode+0x144>
 800326a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800326e:	d033      	beq.n	80032d8 <ADC_ConfigureBoostMode+0x120>
 8003270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003274:	d842      	bhi.n	80032fc <ADC_ConfigureBoostMode+0x144>
 8003276:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800327a:	d029      	beq.n	80032d0 <ADC_ConfigureBoostMode+0x118>
 800327c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003280:	d83c      	bhi.n	80032fc <ADC_ConfigureBoostMode+0x144>
 8003282:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003286:	d01a      	beq.n	80032be <ADC_ConfigureBoostMode+0x106>
 8003288:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800328c:	d836      	bhi.n	80032fc <ADC_ConfigureBoostMode+0x144>
 800328e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003292:	d014      	beq.n	80032be <ADC_ConfigureBoostMode+0x106>
 8003294:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003298:	d830      	bhi.n	80032fc <ADC_ConfigureBoostMode+0x144>
 800329a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800329e:	d00e      	beq.n	80032be <ADC_ConfigureBoostMode+0x106>
 80032a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a4:	d82a      	bhi.n	80032fc <ADC_ConfigureBoostMode+0x144>
 80032a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80032aa:	d008      	beq.n	80032be <ADC_ConfigureBoostMode+0x106>
 80032ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80032b0:	d824      	bhi.n	80032fc <ADC_ConfigureBoostMode+0x144>
 80032b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032b6:	d002      	beq.n	80032be <ADC_ConfigureBoostMode+0x106>
 80032b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032bc:	d11e      	bne.n	80032fc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	0c9b      	lsrs	r3, r3, #18
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	60fb      	str	r3, [r7, #12]
        break;
 80032ce:	e016      	b.n	80032fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]
        break;
 80032d6:	e012      	b.n	80032fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	60fb      	str	r3, [r7, #12]
        break;
 80032de:	e00e      	b.n	80032fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	099b      	lsrs	r3, r3, #6
 80032e4:	60fb      	str	r3, [r7, #12]
        break;
 80032e6:	e00a      	b.n	80032fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	09db      	lsrs	r3, r3, #7
 80032ec:	60fb      	str	r3, [r7, #12]
        break;
 80032ee:	e006      	b.n	80032fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	60fb      	str	r3, [r7, #12]
        break;
 80032f6:	e002      	b.n	80032fe <ADC_ConfigureBoostMode+0x146>
        break;
 80032f8:	bf00      	nop
 80032fa:	e000      	b.n	80032fe <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80032fc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80032fe:	f7ff f895 	bl	800242c <HAL_GetREVID>
 8003302:	4603      	mov	r3, r0
 8003304:	f241 0203 	movw	r2, #4099	; 0x1003
 8003308:	4293      	cmp	r3, r2
 800330a:	d815      	bhi.n	8003338 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4a2b      	ldr	r2, [pc, #172]	; (80033bc <ADC_ConfigureBoostMode+0x204>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d908      	bls.n	8003326 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003322:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003324:	e03e      	b.n	80033a4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003334:	609a      	str	r2, [r3, #8]
}
 8003336:	e035      	b.n	80033a4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4a1f      	ldr	r2, [pc, #124]	; (80033c0 <ADC_ConfigureBoostMode+0x208>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d808      	bhi.n	8003358 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003354:	609a      	str	r2, [r3, #8]
}
 8003356:	e025      	b.n	80033a4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4a1a      	ldr	r2, [pc, #104]	; (80033c4 <ADC_ConfigureBoostMode+0x20c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d80a      	bhi.n	8003376 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003372:	609a      	str	r2, [r3, #8]
}
 8003374:	e016      	b.n	80033a4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a13      	ldr	r2, [pc, #76]	; (80033c8 <ADC_ConfigureBoostMode+0x210>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d80a      	bhi.n	8003394 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003390:	609a      	str	r2, [r3, #8]
}
 8003392:	e007      	b.n	80033a4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80033a2:	609a      	str	r2, [r3, #8]
}
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40022000 	.word	0x40022000
 80033b0:	40022100 	.word	0x40022100
 80033b4:	40022300 	.word	0x40022300
 80033b8:	58026300 	.word	0x58026300
 80033bc:	01312d00 	.word	0x01312d00
 80033c0:	005f5e10 	.word	0x005f5e10
 80033c4:	00bebc20 	.word	0x00bebc20
 80033c8:	017d7840 	.word	0x017d7840

080033cc <LL_ADC_IsEnabled>:
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <LL_ADC_IsEnabled+0x18>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <LL_ADC_IsEnabled+0x1a>
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b04      	cmp	r3, #4
 8003404:	d101      	bne.n	800340a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b09f      	sub	sp, #124	; 0x7c
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003432:	2302      	movs	r3, #2
 8003434:	e0be      	b.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003442:	2300      	movs	r3, #0
 8003444:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a5c      	ldr	r2, [pc, #368]	; (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d102      	bne.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003450:	4b5b      	ldr	r3, [pc, #364]	; (80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	e001      	b.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10b      	bne.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	f043 0220 	orr.w	r2, r3, #32
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e09d      	b.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff ffb9 	bl	80033f2 <LL_ADC_REG_IsConversionOngoing>
 8003480:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff ffb3 	bl	80033f2 <LL_ADC_REG_IsConversionOngoing>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d17f      	bne.n	8003592 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003494:	2b00      	cmp	r3, #0
 8003496:	d17c      	bne.n	8003592 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a47      	ldr	r2, [pc, #284]	; (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d004      	beq.n	80034ac <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a46      	ldr	r2, [pc, #280]	; (80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d101      	bne.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80034ac:	4b45      	ldr	r3, [pc, #276]	; (80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80034ae:	e000      	b.n	80034b2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80034b0:	4b45      	ldr	r3, [pc, #276]	; (80035c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80034b2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d039      	beq.n	8003530 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80034bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034cc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a3a      	ldr	r2, [pc, #232]	; (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d004      	beq.n	80034e2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a38      	ldr	r2, [pc, #224]	; (80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10e      	bne.n	8003500 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80034e2:	4836      	ldr	r0, [pc, #216]	; (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034e4:	f7ff ff72 	bl	80033cc <LL_ADC_IsEnabled>
 80034e8:	4604      	mov	r4, r0
 80034ea:	4835      	ldr	r0, [pc, #212]	; (80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034ec:	f7ff ff6e 	bl	80033cc <LL_ADC_IsEnabled>
 80034f0:	4603      	mov	r3, r0
 80034f2:	4323      	orrs	r3, r4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e008      	b.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003500:	4832      	ldr	r0, [pc, #200]	; (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003502:	f7ff ff63 	bl	80033cc <LL_ADC_IsEnabled>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d047      	beq.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800351c:	4013      	ands	r3, r2
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	6811      	ldr	r1, [r2, #0]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	6892      	ldr	r2, [r2, #8]
 8003526:	430a      	orrs	r2, r1
 8003528:	431a      	orrs	r2, r3
 800352a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800352e:	e03a      	b.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1e      	ldr	r2, [pc, #120]	; (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d10e      	bne.n	800356e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003550:	481a      	ldr	r0, [pc, #104]	; (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003552:	f7ff ff3b 	bl	80033cc <LL_ADC_IsEnabled>
 8003556:	4604      	mov	r4, r0
 8003558:	4819      	ldr	r0, [pc, #100]	; (80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800355a:	f7ff ff37 	bl	80033cc <LL_ADC_IsEnabled>
 800355e:	4603      	mov	r3, r0
 8003560:	4323      	orrs	r3, r4
 8003562:	2b00      	cmp	r3, #0
 8003564:	bf0c      	ite	eq
 8003566:	2301      	moveq	r3, #1
 8003568:	2300      	movne	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	e008      	b.n	8003580 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800356e:	4817      	ldr	r0, [pc, #92]	; (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003570:	f7ff ff2c 	bl	80033cc <LL_ADC_IsEnabled>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d010      	beq.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800358a:	4013      	ands	r3, r2
 800358c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800358e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003590:	e009      	b.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	f043 0220 	orr.w	r2, r3, #32
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80035a4:	e000      	b.n	80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035a6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	377c      	adds	r7, #124	; 0x7c
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd90      	pop	{r4, r7, pc}
 80035bc:	40022000 	.word	0x40022000
 80035c0:	40022100 	.word	0x40022100
 80035c4:	40022300 	.word	0x40022300
 80035c8:	58026300 	.word	0x58026300
 80035cc:	58026000 	.word	0x58026000
 80035d0:	fffff0e0 	.word	0xfffff0e0

080035d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <__NVIC_SetPriorityGrouping+0x40>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f0:	4013      	ands	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003602:	4a04      	ldr	r2, [pc, #16]	; (8003614 <__NVIC_SetPriorityGrouping+0x40>)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	60d3      	str	r3, [r2, #12]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000ed00 	.word	0xe000ed00
 8003618:	05fa0000 	.word	0x05fa0000

0800361c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003620:	4b04      	ldr	r3, [pc, #16]	; (8003634 <__NVIC_GetPriorityGrouping+0x18>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	f003 0307 	and.w	r3, r3, #7
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	6039      	str	r1, [r7, #0]
 8003642:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003648:	2b00      	cmp	r3, #0
 800364a:	db0a      	blt.n	8003662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	b2da      	uxtb	r2, r3
 8003650:	490c      	ldr	r1, [pc, #48]	; (8003684 <__NVIC_SetPriority+0x4c>)
 8003652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003656:	0112      	lsls	r2, r2, #4
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	440b      	add	r3, r1
 800365c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003660:	e00a      	b.n	8003678 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	4908      	ldr	r1, [pc, #32]	; (8003688 <__NVIC_SetPriority+0x50>)
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	3b04      	subs	r3, #4
 8003670:	0112      	lsls	r2, r2, #4
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	440b      	add	r3, r1
 8003676:	761a      	strb	r2, [r3, #24]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	e000e100 	.word	0xe000e100
 8003688:	e000ed00 	.word	0xe000ed00

0800368c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800368c:	b480      	push	{r7}
 800368e:	b089      	sub	sp, #36	; 0x24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f1c3 0307 	rsb	r3, r3, #7
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	bf28      	it	cs
 80036aa:	2304      	movcs	r3, #4
 80036ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3304      	adds	r3, #4
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d902      	bls.n	80036bc <NVIC_EncodePriority+0x30>
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3b03      	subs	r3, #3
 80036ba:	e000      	b.n	80036be <NVIC_EncodePriority+0x32>
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43da      	mvns	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	401a      	ands	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	fa01 f303 	lsl.w	r3, r1, r3
 80036de:	43d9      	mvns	r1, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e4:	4313      	orrs	r3, r2
         );
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3724      	adds	r7, #36	; 0x24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3b01      	subs	r3, #1
 8003700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003704:	d301      	bcc.n	800370a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003706:	2301      	movs	r3, #1
 8003708:	e00f      	b.n	800372a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800370a:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <SysTick_Config+0x40>)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3b01      	subs	r3, #1
 8003710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003712:	210f      	movs	r1, #15
 8003714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003718:	f7ff ff8e 	bl	8003638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <SysTick_Config+0x40>)
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003722:	4b04      	ldr	r3, [pc, #16]	; (8003734 <SysTick_Config+0x40>)
 8003724:	2207      	movs	r2, #7
 8003726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	e000e010 	.word	0xe000e010

08003738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff47 	bl	80035d4 <__NVIC_SetPriorityGrouping>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	4603      	mov	r3, r0
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800375c:	f7ff ff5e 	bl	800361c <__NVIC_GetPriorityGrouping>
 8003760:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	6978      	ldr	r0, [r7, #20]
 8003768:	f7ff ff90 	bl	800368c <NVIC_EncodePriority>
 800376c:	4602      	mov	r2, r0
 800376e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff5f 	bl	8003638 <__NVIC_SetPriority>
}
 800377a:	bf00      	nop
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ffb2 	bl	80036f4 <SysTick_Config>
 8003790:	4603      	mov	r3, r0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e0c6      	b.n	800393c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd fa36 	bl	8000c28 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2223      	movs	r2, #35	; 0x23
 80037c0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c2:	4b60      	ldr	r3, [pc, #384]	; (8003944 <HAL_ETH_Init+0x1a8>)
 80037c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037c8:	4a5e      	ldr	r2, [pc, #376]	; (8003944 <HAL_ETH_Init+0x1a8>)
 80037ca:	f043 0302 	orr.w	r3, r3, #2
 80037ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80037d2:	4b5c      	ldr	r3, [pc, #368]	; (8003944 <HAL_ETH_Init+0x1a8>)
 80037d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	7a1b      	ldrb	r3, [r3, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d103      	bne.n	80037f0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80037e8:	2000      	movs	r0, #0
 80037ea:	f7fe fe2b 	bl	8002444 <HAL_SYSCFG_ETHInterfaceSelect>
 80037ee:	e003      	b.n	80037f8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80037f0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80037f4:	f7fe fe26 	bl	8002444 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800380e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003810:	f7fe fddc 	bl	80023cc <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003816:	e00f      	b.n	8003838 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003818:	f7fe fdd8 	bl	80023cc <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003826:	d907      	bls.n	8003838 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2204      	movs	r2, #4
 800382c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	22e0      	movs	r2, #224	; 0xe0
 8003832:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e081      	b.n	800393c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e6      	bne.n	8003818 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fac0 	bl	8003dd0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003850:	f001 fd66 	bl	8005320 <HAL_RCC_GetHCLKFreq>
 8003854:	4603      	mov	r3, r0
 8003856:	4a3c      	ldr	r2, [pc, #240]	; (8003948 <HAL_ETH_Init+0x1ac>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	0c9a      	lsrs	r2, r3, #18
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3a01      	subs	r2, #1
 8003864:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fa13 	bl	8003c94 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003884:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003888:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	22e0      	movs	r2, #224	; 0xe0
 80038a0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e04a      	b.n	800393c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	f241 1308 	movw	r3, #4360	; 0x1108
 80038ae:	4413      	add	r3, r2
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4b26      	ldr	r3, [pc, #152]	; (800394c <HAL_ETH_Init+0x1b0>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6952      	ldr	r2, [r2, #20]
 80038ba:	0052      	lsls	r2, r2, #1
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	6809      	ldr	r1, [r1, #0]
 80038c0:	431a      	orrs	r2, r3
 80038c2:	f241 1308 	movw	r3, #4360	; 0x1108
 80038c6:	440b      	add	r3, r1
 80038c8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fad8 	bl	8003e80 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fb1c 	bl	8003f0e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	3305      	adds	r3, #5
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	021a      	lsls	r2, r3, #8
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	3304      	adds	r3, #4
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	4619      	mov	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	3303      	adds	r3, #3
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	061a      	lsls	r2, r3, #24
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	3302      	adds	r3, #2
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	3301      	adds	r3, #1
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003914:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003922:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003924:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2210      	movs	r2, #16
 8003932:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2210      	movs	r2, #16
 8003938:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	58024400 	.word	0x58024400
 8003948:	431bde83 	.word	0x431bde83
 800394c:	ffff8001 	.word	0xffff8001

08003950 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003962:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	791b      	ldrb	r3, [r3, #4]
 8003968:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800396a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	7b1b      	ldrb	r3, [r3, #12]
 8003970:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003972:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	7b5b      	ldrb	r3, [r3, #13]
 8003978:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800397a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	7b9b      	ldrb	r3, [r3, #14]
 8003980:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003982:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	7bdb      	ldrb	r3, [r3, #15]
 8003988:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800398a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	7c12      	ldrb	r2, [r2, #16]
 8003990:	2a00      	cmp	r2, #0
 8003992:	d102      	bne.n	800399a <ETH_SetMACConfig+0x4a>
 8003994:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003998:	e000      	b.n	800399c <ETH_SetMACConfig+0x4c>
 800399a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800399c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	7c52      	ldrb	r2, [r2, #17]
 80039a2:	2a00      	cmp	r2, #0
 80039a4:	d102      	bne.n	80039ac <ETH_SetMACConfig+0x5c>
 80039a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039aa:	e000      	b.n	80039ae <ETH_SetMACConfig+0x5e>
 80039ac:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80039ae:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	7c9b      	ldrb	r3, [r3, #18]
 80039b4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80039b6:	431a      	orrs	r2, r3
                                macconf->Speed |
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80039bc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80039c2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	7f1b      	ldrb	r3, [r3, #28]
 80039c8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80039ca:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	7f5b      	ldrb	r3, [r3, #29]
 80039d0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80039d2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	7f92      	ldrb	r2, [r2, #30]
 80039d8:	2a00      	cmp	r2, #0
 80039da:	d102      	bne.n	80039e2 <ETH_SetMACConfig+0x92>
 80039dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039e0:	e000      	b.n	80039e4 <ETH_SetMACConfig+0x94>
 80039e2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80039e4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	7fdb      	ldrb	r3, [r3, #31]
 80039ea:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80039ec:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80039f4:	2a00      	cmp	r2, #0
 80039f6:	d102      	bne.n	80039fe <ETH_SetMACConfig+0xae>
 80039f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039fc:	e000      	b.n	8003a00 <ETH_SetMACConfig+0xb0>
 80039fe:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003a00:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003a06:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a0e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003a10:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b56      	ldr	r3, [pc, #344]	; (8003b7c <ETH_SetMACConfig+0x22c>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	68f9      	ldr	r1, [r7, #12]
 8003a2a:	430b      	orrs	r3, r1
 8003a2c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a3a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003a3c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a44:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003a46:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003a4e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003a50:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003a58:	2a00      	cmp	r2, #0
 8003a5a:	d102      	bne.n	8003a62 <ETH_SetMACConfig+0x112>
 8003a5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a60:	e000      	b.n	8003a64 <ETH_SetMACConfig+0x114>
 8003a62:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003a64:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	4b42      	ldr	r3, [pc, #264]	; (8003b80 <ETH_SetMACConfig+0x230>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	68f9      	ldr	r1, [r7, #12]
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a88:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	4b3a      	ldr	r3, [pc, #232]	; (8003b84 <ETH_SetMACConfig+0x234>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	68f9      	ldr	r1, [r7, #12]
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003aac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003ab2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003aba:	2a00      	cmp	r2, #0
 8003abc:	d101      	bne.n	8003ac2 <ETH_SetMACConfig+0x172>
 8003abe:	2280      	movs	r2, #128	; 0x80
 8003ac0:	e000      	b.n	8003ac4 <ETH_SetMACConfig+0x174>
 8003ac2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003ac4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ad6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003ada:	4013      	ands	r3, r2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	68f9      	ldr	r1, [r7, #12]
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003aec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003af4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f023 0103 	bic.w	r1, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003b1a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003b36:	2a00      	cmp	r2, #0
 8003b38:	d101      	bne.n	8003b3e <ETH_SetMACConfig+0x1ee>
 8003b3a:	2240      	movs	r2, #64	; 0x40
 8003b3c:	e000      	b.n	8003b40 <ETH_SetMACConfig+0x1f0>
 8003b3e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003b40:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003b48:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003b4a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003b52:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003b60:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	00048083 	.word	0x00048083
 8003b80:	c0f88000 	.word	0xc0f88000
 8003b84:	fffffef0 	.word	0xfffffef0

08003b88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4b38      	ldr	r3, [pc, #224]	; (8003c80 <ETH_SetDMAConfig+0xf8>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	6809      	ldr	r1, [r1, #0]
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003bae:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	791b      	ldrb	r3, [r3, #4]
 8003bb4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003bba:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	7b1b      	ldrb	r3, [r3, #12]
 8003bc0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	f241 0304 	movw	r3, #4100	; 0x1004
 8003bce:	4413      	add	r3, r2
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b2c      	ldr	r3, [pc, #176]	; (8003c84 <ETH_SetDMAConfig+0xfc>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6811      	ldr	r1, [r2, #0]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	f241 0304 	movw	r3, #4100	; 0x1004
 8003be2:	440b      	add	r3, r1
 8003be4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	7b5b      	ldrb	r3, [r3, #13]
 8003bea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <ETH_SetDMAConfig+0x100>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6811      	ldr	r1, [r2, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8003c0e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	7d1b      	ldrb	r3, [r3, #20]
 8003c18:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c1a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	7f5b      	ldrb	r3, [r3, #29]
 8003c20:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	f241 1304 	movw	r3, #4356	; 0x1104
 8003c2e:	4413      	add	r3, r2
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <ETH_SetDMAConfig+0x104>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6811      	ldr	r1, [r2, #0]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	f241 1304 	movw	r3, #4356	; 0x1104
 8003c42:	440b      	add	r3, r1
 8003c44:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	7f1b      	ldrb	r3, [r3, #28]
 8003c4a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	f241 1308 	movw	r3, #4360	; 0x1108
 8003c5c:	4413      	add	r3, r2
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <ETH_SetDMAConfig+0x108>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6811      	ldr	r1, [r2, #0]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	f241 1308 	movw	r3, #4360	; 0x1108
 8003c70:	440b      	add	r3, r1
 8003c72:	601a      	str	r2, [r3, #0]
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	ffff87fd 	.word	0xffff87fd
 8003c84:	ffff2ffe 	.word	0xffff2ffe
 8003c88:	fffec000 	.word	0xfffec000
 8003c8c:	ffc0efef 	.word	0xffc0efef
 8003c90:	7fc0ffff 	.word	0x7fc0ffff

08003c94 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b0a4      	sub	sp, #144	; 0x90
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003cac:	2300      	movs	r3, #0
 8003cae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cd4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003cec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003cf0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003d16:	2300      	movs	r3, #0
 8003d18:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003d2c:	2320      	movs	r3, #32
 8003d2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003d3e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003d44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d48:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003d50:	2302      	movs	r3, #2
 8003d52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fde6 	bl	8003950 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003d84:	2301      	movs	r3, #1
 8003d86:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003d9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003da2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003da8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003dac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003db4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003dba:	f107 0308 	add.w	r3, r7, #8
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff fee1 	bl	8003b88 <ETH_SetDMAConfig>
}
 8003dc6:	bf00      	nop
 8003dc8:	3790      	adds	r7, #144	; 0x90
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003dea:	f001 fa99 	bl	8005320 <HAL_RCC_GetHCLKFreq>
 8003dee:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4a1e      	ldr	r2, [pc, #120]	; (8003e6c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d908      	bls.n	8003e0a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4a1d      	ldr	r2, [pc, #116]	; (8003e70 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d804      	bhi.n	8003e0a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e027      	b.n	8003e5a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	4a18      	ldr	r2, [pc, #96]	; (8003e70 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d908      	bls.n	8003e24 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4a17      	ldr	r2, [pc, #92]	; (8003e74 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d204      	bcs.n	8003e24 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	e01a      	b.n	8003e5a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d303      	bcc.n	8003e34 <ETH_MAC_MDIO_ClkConfig+0x64>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d911      	bls.n	8003e58 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4a10      	ldr	r2, [pc, #64]	; (8003e78 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d908      	bls.n	8003e4e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4a0f      	ldr	r2, [pc, #60]	; (8003e7c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d804      	bhi.n	8003e4e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	e005      	b.n	8003e5a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	e000      	b.n	8003e5a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003e58:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	01312cff 	.word	0x01312cff
 8003e70:	02160ebf 	.word	0x02160ebf
 8003e74:	03938700 	.word	0x03938700
 8003e78:	05f5e0ff 	.word	0x05f5e0ff
 8003e7c:	08f0d17f 	.word	0x08f0d17f

08003e80 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e01d      	b.n	8003eca <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68d9      	ldr	r1, [r3, #12]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4613      	mov	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4413      	add	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	440b      	add	r3, r1
 8003e9e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	3206      	adds	r2, #6
 8003ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d9de      	bls.n	8003e8e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	f241 132c 	movw	r3, #4396	; 0x112c
 8003ede:	4413      	add	r3, r2
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68d9      	ldr	r1, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	f241 1314 	movw	r3, #4372	; 0x1114
 8003ef0:	4413      	add	r3, r2
 8003ef2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003f00:	601a      	str	r2, [r3, #0]
}
 8003f02:	bf00      	nop
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b085      	sub	sp, #20
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	e024      	b.n	8003f66 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6919      	ldr	r1, [r3, #16]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4613      	mov	r3, r2
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	4413      	add	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	440b      	add	r3, r1
 8003f2c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2200      	movs	r2, #0
 8003f38:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2200      	movs	r2, #0
 8003f44:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3310      	adds	r3, #16
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3301      	adds	r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d9d7      	bls.n	8003f1c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	f241 1330 	movw	r3, #4400	; 0x1130
 8003f92:	4413      	add	r3, r2
 8003f94:	2203      	movs	r2, #3
 8003f96:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6919      	ldr	r1, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	f241 131c 	movw	r3, #4380	; 0x111c
 8003fa4:	4413      	add	r3, r2
 8003fa6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	f241 1328 	movw	r3, #4392	; 0x1128
 8003fb8:	4413      	add	r3, r2
 8003fba:	6019      	str	r1, [r3, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b089      	sub	sp, #36	; 0x24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003fd6:	4b89      	ldr	r3, [pc, #548]	; (80041fc <HAL_GPIO_Init+0x234>)
 8003fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003fda:	e194      	b.n	8004306 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 8186 	beq.w	8004300 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d00b      	beq.n	8004014 <HAL_GPIO_Init+0x4c>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b02      	cmp	r3, #2
 8004002:	d007      	beq.n	8004014 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004008:	2b11      	cmp	r3, #17
 800400a:	d003      	beq.n	8004014 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b12      	cmp	r3, #18
 8004012:	d130      	bne.n	8004076 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	2203      	movs	r2, #3
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800404a:	2201      	movs	r2, #1
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4013      	ands	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	f003 0201 	and.w	r2, r3, #1
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4313      	orrs	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	2203      	movs	r2, #3
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4013      	ands	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_Init+0xee>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b12      	cmp	r3, #18
 80040b4:	d123      	bne.n	80040fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	08da      	lsrs	r2, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3208      	adds	r2, #8
 80040be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	220f      	movs	r2, #15
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43db      	mvns	r3, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4013      	ands	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	08da      	lsrs	r2, r3, #3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3208      	adds	r2, #8
 80040f8:	69b9      	ldr	r1, [r7, #24]
 80040fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	2203      	movs	r2, #3
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4013      	ands	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 0203 	and.w	r2, r3, #3
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4313      	orrs	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 80e0 	beq.w	8004300 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004140:	4b2f      	ldr	r3, [pc, #188]	; (8004200 <HAL_GPIO_Init+0x238>)
 8004142:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004146:	4a2e      	ldr	r2, [pc, #184]	; (8004200 <HAL_GPIO_Init+0x238>)
 8004148:	f043 0302 	orr.w	r3, r3, #2
 800414c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004150:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <HAL_GPIO_Init+0x238>)
 8004152:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800415e:	4a29      	ldr	r2, [pc, #164]	; (8004204 <HAL_GPIO_Init+0x23c>)
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	089b      	lsrs	r3, r3, #2
 8004164:	3302      	adds	r3, #2
 8004166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	220f      	movs	r2, #15
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a20      	ldr	r2, [pc, #128]	; (8004208 <HAL_GPIO_Init+0x240>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d052      	beq.n	8004230 <HAL_GPIO_Init+0x268>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1f      	ldr	r2, [pc, #124]	; (800420c <HAL_GPIO_Init+0x244>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d031      	beq.n	80041f6 <HAL_GPIO_Init+0x22e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a1e      	ldr	r2, [pc, #120]	; (8004210 <HAL_GPIO_Init+0x248>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d02b      	beq.n	80041f2 <HAL_GPIO_Init+0x22a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <HAL_GPIO_Init+0x24c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d025      	beq.n	80041ee <HAL_GPIO_Init+0x226>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a1c      	ldr	r2, [pc, #112]	; (8004218 <HAL_GPIO_Init+0x250>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01f      	beq.n	80041ea <HAL_GPIO_Init+0x222>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a1b      	ldr	r2, [pc, #108]	; (800421c <HAL_GPIO_Init+0x254>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d019      	beq.n	80041e6 <HAL_GPIO_Init+0x21e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a1a      	ldr	r2, [pc, #104]	; (8004220 <HAL_GPIO_Init+0x258>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <HAL_GPIO_Init+0x21a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a19      	ldr	r2, [pc, #100]	; (8004224 <HAL_GPIO_Init+0x25c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00d      	beq.n	80041de <HAL_GPIO_Init+0x216>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a18      	ldr	r2, [pc, #96]	; (8004228 <HAL_GPIO_Init+0x260>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d007      	beq.n	80041da <HAL_GPIO_Init+0x212>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a17      	ldr	r2, [pc, #92]	; (800422c <HAL_GPIO_Init+0x264>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d101      	bne.n	80041d6 <HAL_GPIO_Init+0x20e>
 80041d2:	2309      	movs	r3, #9
 80041d4:	e02d      	b.n	8004232 <HAL_GPIO_Init+0x26a>
 80041d6:	230a      	movs	r3, #10
 80041d8:	e02b      	b.n	8004232 <HAL_GPIO_Init+0x26a>
 80041da:	2308      	movs	r3, #8
 80041dc:	e029      	b.n	8004232 <HAL_GPIO_Init+0x26a>
 80041de:	2307      	movs	r3, #7
 80041e0:	e027      	b.n	8004232 <HAL_GPIO_Init+0x26a>
 80041e2:	2306      	movs	r3, #6
 80041e4:	e025      	b.n	8004232 <HAL_GPIO_Init+0x26a>
 80041e6:	2305      	movs	r3, #5
 80041e8:	e023      	b.n	8004232 <HAL_GPIO_Init+0x26a>
 80041ea:	2304      	movs	r3, #4
 80041ec:	e021      	b.n	8004232 <HAL_GPIO_Init+0x26a>
 80041ee:	2303      	movs	r3, #3
 80041f0:	e01f      	b.n	8004232 <HAL_GPIO_Init+0x26a>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e01d      	b.n	8004232 <HAL_GPIO_Init+0x26a>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e01b      	b.n	8004232 <HAL_GPIO_Init+0x26a>
 80041fa:	bf00      	nop
 80041fc:	58000080 	.word	0x58000080
 8004200:	58024400 	.word	0x58024400
 8004204:	58000400 	.word	0x58000400
 8004208:	58020000 	.word	0x58020000
 800420c:	58020400 	.word	0x58020400
 8004210:	58020800 	.word	0x58020800
 8004214:	58020c00 	.word	0x58020c00
 8004218:	58021000 	.word	0x58021000
 800421c:	58021400 	.word	0x58021400
 8004220:	58021800 	.word	0x58021800
 8004224:	58021c00 	.word	0x58021c00
 8004228:	58022000 	.word	0x58022000
 800422c:	58022400 	.word	0x58022400
 8004230:	2300      	movs	r3, #0
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	f002 0203 	and.w	r2, r2, #3
 8004238:	0092      	lsls	r2, r2, #2
 800423a:	4093      	lsls	r3, r2
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004242:	4938      	ldr	r1, [pc, #224]	; (8004324 <HAL_GPIO_Init+0x35c>)
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	089b      	lsrs	r3, r3, #2
 8004248:	3302      	adds	r3, #2
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	43db      	mvns	r3, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4013      	ands	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	43db      	mvns	r3, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4013      	ands	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80042ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80042d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	43db      	mvns	r3, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4013      	ands	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80042f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	3301      	adds	r3, #1
 8004304:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	f47f ae63 	bne.w	8003fdc <HAL_GPIO_Init+0x14>
  }
}
 8004316:	bf00      	nop
 8004318:	bf00      	nop
 800431a:	3724      	adds	r7, #36	; 0x24
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	58000400 	.word	0x58000400

08004328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	807b      	strh	r3, [r7, #2]
 8004334:	4613      	mov	r3, r2
 8004336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004338:	787b      	ldrb	r3, [r7, #1]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800433e:	887a      	ldrh	r2, [r7, #2]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004344:	e003      	b.n	800434e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004346:	887b      	ldrh	r3, [r7, #2]
 8004348:	041a      	lsls	r2, r3, #16
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	619a      	str	r2, [r3, #24]
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800435a:	b480      	push	{r7}
 800435c:	b085      	sub	sp, #20
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	460b      	mov	r3, r1
 8004364:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800436c:	887a      	ldrh	r2, [r7, #2]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4013      	ands	r3, r2
 8004372:	041a      	lsls	r2, r3, #16
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	43d9      	mvns	r1, r3
 8004378:	887b      	ldrh	r3, [r7, #2]
 800437a:	400b      	ands	r3, r1
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	619a      	str	r2, [r3, #24]
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004398:	4a08      	ldr	r2, [pc, #32]	; (80043bc <HAL_HSEM_FastTake+0x2c>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3320      	adds	r3, #32
 800439e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a2:	4a07      	ldr	r2, [pc, #28]	; (80043c0 <HAL_HSEM_FastTake+0x30>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d101      	bne.n	80043ac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	58026400 	.word	0x58026400
 80043c0:	80000300 	.word	0x80000300

080043c4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80043ce:	4906      	ldr	r1, [pc, #24]	; (80043e8 <HAL_HSEM_Release+0x24>)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	58026400 	.word	0x58026400

080043ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80043f4:	4b29      	ldr	r3, [pc, #164]	; (800449c <HAL_PWREx_ConfigSupply+0xb0>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	2b06      	cmp	r3, #6
 80043fe:	d00a      	beq.n	8004416 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004400:	4b26      	ldr	r3, [pc, #152]	; (800449c <HAL_PWREx_ConfigSupply+0xb0>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	429a      	cmp	r2, r3
 800440c:	d001      	beq.n	8004412 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e040      	b.n	8004494 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	e03e      	b.n	8004494 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004416:	4b21      	ldr	r3, [pc, #132]	; (800449c <HAL_PWREx_ConfigSupply+0xb0>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800441e:	491f      	ldr	r1, [pc, #124]	; (800449c <HAL_PWREx_ConfigSupply+0xb0>)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4313      	orrs	r3, r2
 8004424:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004426:	f7fd ffd1 	bl	80023cc <HAL_GetTick>
 800442a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800442c:	e009      	b.n	8004442 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800442e:	f7fd ffcd 	bl	80023cc <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800443c:	d901      	bls.n	8004442 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e028      	b.n	8004494 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004442:	4b16      	ldr	r3, [pc, #88]	; (800449c <HAL_PWREx_ConfigSupply+0xb0>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800444a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800444e:	d1ee      	bne.n	800442e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b1e      	cmp	r3, #30
 8004454:	d008      	beq.n	8004468 <HAL_PWREx_ConfigSupply+0x7c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b2e      	cmp	r3, #46	; 0x2e
 800445a:	d005      	beq.n	8004468 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b1d      	cmp	r3, #29
 8004460:	d002      	beq.n	8004468 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b2d      	cmp	r3, #45	; 0x2d
 8004466:	d114      	bne.n	8004492 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004468:	f7fd ffb0 	bl	80023cc <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800446e:	e009      	b.n	8004484 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004470:	f7fd ffac 	bl	80023cc <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800447e:	d901      	bls.n	8004484 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e007      	b.n	8004494 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_PWREx_ConfigSupply+0xb0>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004490:	d1ee      	bne.n	8004470 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	58024800 	.word	0x58024800

080044a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08c      	sub	sp, #48	; 0x30
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e3ff      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 8087 	beq.w	80045ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044c0:	4b99      	ldr	r3, [pc, #612]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044ca:	4b97      	ldr	r3, [pc, #604]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80044d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d007      	beq.n	80044e6 <HAL_RCC_OscConfig+0x46>
 80044d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d8:	2b18      	cmp	r3, #24
 80044da:	d110      	bne.n	80044fe <HAL_RCC_OscConfig+0x5e>
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d10b      	bne.n	80044fe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e6:	4b90      	ldr	r3, [pc, #576]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d06c      	beq.n	80045cc <HAL_RCC_OscConfig+0x12c>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d168      	bne.n	80045cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e3d9      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004506:	d106      	bne.n	8004516 <HAL_RCC_OscConfig+0x76>
 8004508:	4b87      	ldr	r3, [pc, #540]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a86      	ldr	r2, [pc, #536]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 800450e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	e02e      	b.n	8004574 <HAL_RCC_OscConfig+0xd4>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10c      	bne.n	8004538 <HAL_RCC_OscConfig+0x98>
 800451e:	4b82      	ldr	r3, [pc, #520]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a81      	ldr	r2, [pc, #516]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4b7f      	ldr	r3, [pc, #508]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a7e      	ldr	r2, [pc, #504]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e01d      	b.n	8004574 <HAL_RCC_OscConfig+0xd4>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004540:	d10c      	bne.n	800455c <HAL_RCC_OscConfig+0xbc>
 8004542:	4b79      	ldr	r3, [pc, #484]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a78      	ldr	r2, [pc, #480]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	4b76      	ldr	r3, [pc, #472]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a75      	ldr	r2, [pc, #468]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	e00b      	b.n	8004574 <HAL_RCC_OscConfig+0xd4>
 800455c:	4b72      	ldr	r3, [pc, #456]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a71      	ldr	r2, [pc, #452]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	4b6f      	ldr	r3, [pc, #444]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a6e      	ldr	r2, [pc, #440]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 800456e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d013      	beq.n	80045a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fd ff26 	bl	80023cc <HAL_GetTick>
 8004580:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004584:	f7fd ff22 	bl	80023cc <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b64      	cmp	r3, #100	; 0x64
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e38d      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004596:	4b64      	ldr	r3, [pc, #400]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0xe4>
 80045a2:	e014      	b.n	80045ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fd ff12 	bl	80023cc <HAL_GetTick>
 80045a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045ac:	f7fd ff0e 	bl	80023cc <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	; 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e379      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045be:	4b5a      	ldr	r3, [pc, #360]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0x10c>
 80045ca:	e000      	b.n	80045ce <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 80ae 	beq.w	8004738 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045dc:	4b52      	ldr	r3, [pc, #328]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045e6:	4b50      	ldr	r3, [pc, #320]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <HAL_RCC_OscConfig+0x162>
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	2b18      	cmp	r3, #24
 80045f6:	d13a      	bne.n	800466e <HAL_RCC_OscConfig+0x1ce>
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d135      	bne.n	800466e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004602:	4b49      	ldr	r3, [pc, #292]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_RCC_OscConfig+0x17a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e34b      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461a:	f7fd ff07 	bl	800242c <HAL_GetREVID>
 800461e:	4603      	mov	r3, r0
 8004620:	f241 0203 	movw	r2, #4099	; 0x1003
 8004624:	4293      	cmp	r3, r2
 8004626:	d817      	bhi.n	8004658 <HAL_RCC_OscConfig+0x1b8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	d108      	bne.n	8004642 <HAL_RCC_OscConfig+0x1a2>
 8004630:	4b3d      	ldr	r3, [pc, #244]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004638:	4a3b      	ldr	r2, [pc, #236]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 800463a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800463e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004640:	e07a      	b.n	8004738 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004642:	4b39      	ldr	r3, [pc, #228]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	031b      	lsls	r3, r3, #12
 8004650:	4935      	ldr	r1, [pc, #212]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004652:	4313      	orrs	r3, r2
 8004654:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004656:	e06f      	b.n	8004738 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004658:	4b33      	ldr	r3, [pc, #204]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	061b      	lsls	r3, r3, #24
 8004666:	4930      	ldr	r1, [pc, #192]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800466c:	e064      	b.n	8004738 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d045      	beq.n	8004702 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004676:	4b2c      	ldr	r3, [pc, #176]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f023 0219 	bic.w	r2, r3, #25
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	4929      	ldr	r1, [pc, #164]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004684:	4313      	orrs	r3, r2
 8004686:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fd fea0 	bl	80023cc <HAL_GetTick>
 800468c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004690:	f7fd fe9c 	bl	80023cc <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e307      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046a2:	4b21      	ldr	r3, [pc, #132]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ae:	f7fd febd 	bl	800242c <HAL_GetREVID>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d817      	bhi.n	80046ec <HAL_RCC_OscConfig+0x24c>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d108      	bne.n	80046d6 <HAL_RCC_OscConfig+0x236>
 80046c4:	4b18      	ldr	r3, [pc, #96]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80046cc:	4a16      	ldr	r2, [pc, #88]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 80046ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046d2:	6053      	str	r3, [r2, #4]
 80046d4:	e030      	b.n	8004738 <HAL_RCC_OscConfig+0x298>
 80046d6:	4b14      	ldr	r3, [pc, #80]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	031b      	lsls	r3, r3, #12
 80046e4:	4910      	ldr	r1, [pc, #64]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	604b      	str	r3, [r1, #4]
 80046ea:	e025      	b.n	8004738 <HAL_RCC_OscConfig+0x298>
 80046ec:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	061b      	lsls	r3, r3, #24
 80046fa:	490b      	ldr	r1, [pc, #44]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]
 8004700:	e01a      	b.n	8004738 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a08      	ldr	r2, [pc, #32]	; (8004728 <HAL_RCC_OscConfig+0x288>)
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470e:	f7fd fe5d 	bl	80023cc <HAL_GetTick>
 8004712:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004714:	e00a      	b.n	800472c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004716:	f7fd fe59 	bl	80023cc <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d903      	bls.n	800472c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e2c4      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
 8004728:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800472c:	4ba4      	ldr	r3, [pc, #656]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1ee      	bne.n	8004716 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80a9 	beq.w	8004898 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004746:	4b9e      	ldr	r3, [pc, #632]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800474e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004750:	4b9b      	ldr	r3, [pc, #620]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b08      	cmp	r3, #8
 800475a:	d007      	beq.n	800476c <HAL_RCC_OscConfig+0x2cc>
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	2b18      	cmp	r3, #24
 8004760:	d13a      	bne.n	80047d8 <HAL_RCC_OscConfig+0x338>
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	2b01      	cmp	r3, #1
 800476a:	d135      	bne.n	80047d8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800476c:	4b94      	ldr	r3, [pc, #592]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_OscConfig+0x2e4>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	2b80      	cmp	r3, #128	; 0x80
 800477e:	d001      	beq.n	8004784 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e296      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004784:	f7fd fe52 	bl	800242c <HAL_GetREVID>
 8004788:	4603      	mov	r3, r0
 800478a:	f241 0203 	movw	r2, #4099	; 0x1003
 800478e:	4293      	cmp	r3, r2
 8004790:	d817      	bhi.n	80047c2 <HAL_RCC_OscConfig+0x322>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	2b20      	cmp	r3, #32
 8004798:	d108      	bne.n	80047ac <HAL_RCC_OscConfig+0x30c>
 800479a:	4b89      	ldr	r3, [pc, #548]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80047a2:	4a87      	ldr	r2, [pc, #540]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 80047a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047a8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047aa:	e075      	b.n	8004898 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047ac:	4b84      	ldr	r3, [pc, #528]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	069b      	lsls	r3, r3, #26
 80047ba:	4981      	ldr	r1, [pc, #516]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047c0:	e06a      	b.n	8004898 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047c2:	4b7f      	ldr	r3, [pc, #508]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	061b      	lsls	r3, r3, #24
 80047d0:	497b      	ldr	r1, [pc, #492]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047d6:	e05f      	b.n	8004898 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d042      	beq.n	8004866 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80047e0:	4b77      	ldr	r3, [pc, #476]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a76      	ldr	r2, [pc, #472]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 80047e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fd fdee 	bl	80023cc <HAL_GetTick>
 80047f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80047f4:	f7fd fdea 	bl	80023cc <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e255      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004806:	4b6e      	ldr	r3, [pc, #440]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004812:	f7fd fe0b 	bl	800242c <HAL_GetREVID>
 8004816:	4603      	mov	r3, r0
 8004818:	f241 0203 	movw	r2, #4099	; 0x1003
 800481c:	4293      	cmp	r3, r2
 800481e:	d817      	bhi.n	8004850 <HAL_RCC_OscConfig+0x3b0>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	2b20      	cmp	r3, #32
 8004826:	d108      	bne.n	800483a <HAL_RCC_OscConfig+0x39a>
 8004828:	4b65      	ldr	r3, [pc, #404]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004830:	4a63      	ldr	r2, [pc, #396]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 8004832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004836:	6053      	str	r3, [r2, #4]
 8004838:	e02e      	b.n	8004898 <HAL_RCC_OscConfig+0x3f8>
 800483a:	4b61      	ldr	r3, [pc, #388]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	069b      	lsls	r3, r3, #26
 8004848:	495d      	ldr	r1, [pc, #372]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 800484a:	4313      	orrs	r3, r2
 800484c:	604b      	str	r3, [r1, #4]
 800484e:	e023      	b.n	8004898 <HAL_RCC_OscConfig+0x3f8>
 8004850:	4b5b      	ldr	r3, [pc, #364]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	4958      	ldr	r1, [pc, #352]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 8004860:	4313      	orrs	r3, r2
 8004862:	60cb      	str	r3, [r1, #12]
 8004864:	e018      	b.n	8004898 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004866:	4b56      	ldr	r3, [pc, #344]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a55      	ldr	r2, [pc, #340]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 800486c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7fd fdab 	bl	80023cc <HAL_GetTick>
 8004876:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800487a:	f7fd fda7 	bl	80023cc <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e212      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800488c:	4b4c      	ldr	r3, [pc, #304]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d036      	beq.n	8004912 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d019      	beq.n	80048e0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ac:	4b44      	ldr	r3, [pc, #272]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 80048ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b0:	4a43      	ldr	r2, [pc, #268]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fd fd88 	bl	80023cc <HAL_GetTick>
 80048bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c0:	f7fd fd84 	bl	80023cc <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e1ef      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048d2:	4b3b      	ldr	r3, [pc, #236]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 80048d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <HAL_RCC_OscConfig+0x420>
 80048de:	e018      	b.n	8004912 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e0:	4b37      	ldr	r3, [pc, #220]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 80048e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e4:	4a36      	ldr	r2, [pc, #216]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ec:	f7fd fd6e 	bl	80023cc <HAL_GetTick>
 80048f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048f4:	f7fd fd6a 	bl	80023cc <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e1d5      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004906:	4b2e      	ldr	r3, [pc, #184]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 8004908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d036      	beq.n	800498c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d019      	beq.n	800495a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004926:	4b26      	ldr	r3, [pc, #152]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a25      	ldr	r2, [pc, #148]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 800492c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004930:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004932:	f7fd fd4b 	bl	80023cc <HAL_GetTick>
 8004936:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800493a:	f7fd fd47 	bl	80023cc <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e1b2      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800494c:	4b1c      	ldr	r3, [pc, #112]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0f0      	beq.n	800493a <HAL_RCC_OscConfig+0x49a>
 8004958:	e018      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800495a:	4b19      	ldr	r3, [pc, #100]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a18      	ldr	r2, [pc, #96]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 8004960:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004964:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004966:	f7fd fd31 	bl	80023cc <HAL_GetTick>
 800496a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800496e:	f7fd fd2d 	bl	80023cc <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e198      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <HAL_RCC_OscConfig+0x520>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1f0      	bne.n	800496e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8085 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800499a:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <HAL_RCC_OscConfig+0x524>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a09      	ldr	r2, [pc, #36]	; (80049c4 <HAL_RCC_OscConfig+0x524>)
 80049a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049a6:	f7fd fd11 	bl	80023cc <HAL_GetTick>
 80049aa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049ac:	e00c      	b.n	80049c8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80049ae:	f7fd fd0d 	bl	80023cc <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b64      	cmp	r3, #100	; 0x64
 80049ba:	d905      	bls.n	80049c8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e178      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
 80049c0:	58024400 	.word	0x58024400
 80049c4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049c8:	4b96      	ldr	r3, [pc, #600]	; (8004c24 <HAL_RCC_OscConfig+0x784>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0ec      	beq.n	80049ae <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d106      	bne.n	80049ea <HAL_RCC_OscConfig+0x54a>
 80049dc:	4b92      	ldr	r3, [pc, #584]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 80049de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e0:	4a91      	ldr	r2, [pc, #580]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	6713      	str	r3, [r2, #112]	; 0x70
 80049e8:	e02d      	b.n	8004a46 <HAL_RCC_OscConfig+0x5a6>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x56c>
 80049f2:	4b8d      	ldr	r3, [pc, #564]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	4a8c      	ldr	r2, [pc, #560]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	6713      	str	r3, [r2, #112]	; 0x70
 80049fe:	4b8a      	ldr	r3, [pc, #552]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	4a89      	ldr	r2, [pc, #548]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004a04:	f023 0304 	bic.w	r3, r3, #4
 8004a08:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0a:	e01c      	b.n	8004a46 <HAL_RCC_OscConfig+0x5a6>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	d10c      	bne.n	8004a2e <HAL_RCC_OscConfig+0x58e>
 8004a14:	4b84      	ldr	r3, [pc, #528]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	4a83      	ldr	r2, [pc, #524]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004a1a:	f043 0304 	orr.w	r3, r3, #4
 8004a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a20:	4b81      	ldr	r3, [pc, #516]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	4a80      	ldr	r2, [pc, #512]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004a26:	f043 0301 	orr.w	r3, r3, #1
 8004a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a2c:	e00b      	b.n	8004a46 <HAL_RCC_OscConfig+0x5a6>
 8004a2e:	4b7e      	ldr	r3, [pc, #504]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	4a7d      	ldr	r2, [pc, #500]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3a:	4b7b      	ldr	r3, [pc, #492]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	4a7a      	ldr	r2, [pc, #488]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004a40:	f023 0304 	bic.w	r3, r3, #4
 8004a44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d015      	beq.n	8004a7a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4e:	f7fd fcbd 	bl	80023cc <HAL_GetTick>
 8004a52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a54:	e00a      	b.n	8004a6c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a56:	f7fd fcb9 	bl	80023cc <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e122      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a6c:	4b6e      	ldr	r3, [pc, #440]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0ee      	beq.n	8004a56 <HAL_RCC_OscConfig+0x5b6>
 8004a78:	e014      	b.n	8004aa4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7a:	f7fd fca7 	bl	80023cc <HAL_GetTick>
 8004a7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a80:	e00a      	b.n	8004a98 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f7fd fca3 	bl	80023cc <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e10c      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a98:	4b63      	ldr	r3, [pc, #396]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ee      	bne.n	8004a82 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8101 	beq.w	8004cb0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004aae:	4b5e      	ldr	r3, [pc, #376]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ab6:	2b18      	cmp	r3, #24
 8004ab8:	f000 80bc 	beq.w	8004c34 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	f040 8095 	bne.w	8004bf0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac6:	4b58      	ldr	r3, [pc, #352]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a57      	ldr	r2, [pc, #348]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004acc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad2:	f7fd fc7b 	bl	80023cc <HAL_GetTick>
 8004ad6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ada:	f7fd fc77 	bl	80023cc <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e0e2      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aec:	4b4e      	ldr	r3, [pc, #312]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f0      	bne.n	8004ada <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004af8:	4b4b      	ldr	r3, [pc, #300]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004afa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004afc:	4b4b      	ldr	r3, [pc, #300]	; (8004c2c <HAL_RCC_OscConfig+0x78c>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b08:	0112      	lsls	r2, r2, #4
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	4946      	ldr	r1, [pc, #280]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	628b      	str	r3, [r1, #40]	; 0x28
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b16:	3b01      	subs	r3, #1
 8004b18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	3b01      	subs	r3, #1
 8004b22:	025b      	lsls	r3, r3, #9
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	041b      	lsls	r3, r3, #16
 8004b30:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	061b      	lsls	r3, r3, #24
 8004b3e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b42:	4939      	ldr	r1, [pc, #228]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004b48:	4b37      	ldr	r3, [pc, #220]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	4a36      	ldr	r2, [pc, #216]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b54:	4b34      	ldr	r3, [pc, #208]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b58:	4b35      	ldr	r3, [pc, #212]	; (8004c30 <HAL_RCC_OscConfig+0x790>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b60:	00d2      	lsls	r2, r2, #3
 8004b62:	4931      	ldr	r1, [pc, #196]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b68:	4b2f      	ldr	r3, [pc, #188]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	f023 020c 	bic.w	r2, r3, #12
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	492c      	ldr	r1, [pc, #176]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b7a:	4b2b      	ldr	r3, [pc, #172]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	f023 0202 	bic.w	r2, r3, #2
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	4928      	ldr	r1, [pc, #160]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b8c:	4b26      	ldr	r3, [pc, #152]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	4a25      	ldr	r2, [pc, #148]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b98:	4b23      	ldr	r3, [pc, #140]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	4a22      	ldr	r2, [pc, #136]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ba4:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	4a1f      	ldr	r2, [pc, #124]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004baa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004bb0:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	4a1c      	ldr	r2, [pc, #112]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fd fc00 	bl	80023cc <HAL_GetTick>
 8004bcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fd fbfc 	bl	80023cc <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e067      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004be2:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x730>
 8004bee:	e05f      	b.n	8004cb0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf0:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a0c      	ldr	r2, [pc, #48]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fd fbe6 	bl	80023cc <HAL_GetTick>
 8004c00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c04:	f7fd fbe2 	bl	80023cc <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e04d      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c16:	4b04      	ldr	r3, [pc, #16]	; (8004c28 <HAL_RCC_OscConfig+0x788>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x764>
 8004c22:	e045      	b.n	8004cb0 <HAL_RCC_OscConfig+0x810>
 8004c24:	58024800 	.word	0x58024800
 8004c28:	58024400 	.word	0x58024400
 8004c2c:	fffffc0c 	.word	0xfffffc0c
 8004c30:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004c34:	4b21      	ldr	r3, [pc, #132]	; (8004cbc <HAL_RCC_OscConfig+0x81c>)
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c3a:	4b20      	ldr	r3, [pc, #128]	; (8004cbc <HAL_RCC_OscConfig+0x81c>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d031      	beq.n	8004cac <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f003 0203 	and.w	r2, r3, #3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d12a      	bne.n	8004cac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d122      	bne.n	8004cac <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d11a      	bne.n	8004cac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	0a5b      	lsrs	r3, r3, #9
 8004c7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c82:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d111      	bne.n	8004cac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	0c1b      	lsrs	r3, r3, #16
 8004c8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d108      	bne.n	8004cac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	0e1b      	lsrs	r3, r3, #24
 8004c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3730      	adds	r7, #48	; 0x30
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	58024400 	.word	0x58024400

08004cc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e19c      	b.n	800500e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cd4:	4b8a      	ldr	r3, [pc, #552]	; (8004f00 <HAL_RCC_ClockConfig+0x240>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d910      	bls.n	8004d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce2:	4b87      	ldr	r3, [pc, #540]	; (8004f00 <HAL_RCC_ClockConfig+0x240>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f023 020f 	bic.w	r2, r3, #15
 8004cea:	4985      	ldr	r1, [pc, #532]	; (8004f00 <HAL_RCC_ClockConfig+0x240>)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	4b83      	ldr	r3, [pc, #524]	; (8004f00 <HAL_RCC_ClockConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e184      	b.n	800500e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d010      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	4b7b      	ldr	r3, [pc, #492]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d908      	bls.n	8004d32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d20:	4b78      	ldr	r3, [pc, #480]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	4975      	ldr	r1, [pc, #468]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d010      	beq.n	8004d60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	4b70      	ldr	r3, [pc, #448]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d908      	bls.n	8004d60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d4e:	4b6d      	ldr	r3, [pc, #436]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	496a      	ldr	r1, [pc, #424]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d010      	beq.n	8004d8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699a      	ldr	r2, [r3, #24]
 8004d70:	4b64      	ldr	r3, [pc, #400]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d908      	bls.n	8004d8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d7c:	4b61      	ldr	r3, [pc, #388]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	495e      	ldr	r1, [pc, #376]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d010      	beq.n	8004dbc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69da      	ldr	r2, [r3, #28]
 8004d9e:	4b59      	ldr	r3, [pc, #356]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d908      	bls.n	8004dbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004daa:	4b56      	ldr	r3, [pc, #344]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	4953      	ldr	r1, [pc, #332]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d010      	beq.n	8004dea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	4b4d      	ldr	r3, [pc, #308]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d908      	bls.n	8004dea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd8:	4b4a      	ldr	r3, [pc, #296]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f023 020f 	bic.w	r2, r3, #15
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	4947      	ldr	r1, [pc, #284]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d055      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004df6:	4b43      	ldr	r3, [pc, #268]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	4940      	ldr	r1, [pc, #256]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d107      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e10:	4b3c      	ldr	r3, [pc, #240]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d121      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0f6      	b.n	800500e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d107      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e28:	4b36      	ldr	r3, [pc, #216]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d115      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0ea      	b.n	800500e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d107      	bne.n	8004e50 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e40:	4b30      	ldr	r3, [pc, #192]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d109      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e0de      	b.n	800500e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e50:	4b2c      	ldr	r3, [pc, #176]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0d6      	b.n	800500e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e60:	4b28      	ldr	r3, [pc, #160]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f023 0207 	bic.w	r2, r3, #7
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	4925      	ldr	r1, [pc, #148]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e72:	f7fd faab 	bl	80023cc <HAL_GetTick>
 8004e76:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e78:	e00a      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e7a:	f7fd faa7 	bl	80023cc <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e0be      	b.n	800500e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e90:	4b1c      	ldr	r3, [pc, #112]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d1eb      	bne.n	8004e7a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d010      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	4b14      	ldr	r3, [pc, #80]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d208      	bcs.n	8004ed0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ebe:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f023 020f 	bic.w	r2, r3, #15
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	490e      	ldr	r1, [pc, #56]	; (8004f04 <HAL_RCC_ClockConfig+0x244>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <HAL_RCC_ClockConfig+0x240>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d214      	bcs.n	8004f08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ede:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <HAL_RCC_ClockConfig+0x240>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f023 020f 	bic.w	r2, r3, #15
 8004ee6:	4906      	ldr	r1, [pc, #24]	; (8004f00 <HAL_RCC_ClockConfig+0x240>)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <HAL_RCC_ClockConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d005      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e086      	b.n	800500e <HAL_RCC_ClockConfig+0x34e>
 8004f00:	52002000 	.word	0x52002000
 8004f04:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d010      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	4b3f      	ldr	r3, [pc, #252]	; (8005018 <HAL_RCC_ClockConfig+0x358>)
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d208      	bcs.n	8004f36 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f24:	4b3c      	ldr	r3, [pc, #240]	; (8005018 <HAL_RCC_ClockConfig+0x358>)
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	4939      	ldr	r1, [pc, #228]	; (8005018 <HAL_RCC_ClockConfig+0x358>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d010      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	4b34      	ldr	r3, [pc, #208]	; (8005018 <HAL_RCC_ClockConfig+0x358>)
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d208      	bcs.n	8004f64 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f52:	4b31      	ldr	r3, [pc, #196]	; (8005018 <HAL_RCC_ClockConfig+0x358>)
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	492e      	ldr	r1, [pc, #184]	; (8005018 <HAL_RCC_ClockConfig+0x358>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0310 	and.w	r3, r3, #16
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d010      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699a      	ldr	r2, [r3, #24]
 8004f74:	4b28      	ldr	r3, [pc, #160]	; (8005018 <HAL_RCC_ClockConfig+0x358>)
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d208      	bcs.n	8004f92 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f80:	4b25      	ldr	r3, [pc, #148]	; (8005018 <HAL_RCC_ClockConfig+0x358>)
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	4922      	ldr	r1, [pc, #136]	; (8005018 <HAL_RCC_ClockConfig+0x358>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d010      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69da      	ldr	r2, [r3, #28]
 8004fa2:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <HAL_RCC_ClockConfig+0x358>)
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d208      	bcs.n	8004fc0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004fae:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <HAL_RCC_ClockConfig+0x358>)
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	4917      	ldr	r1, [pc, #92]	; (8005018 <HAL_RCC_ClockConfig+0x358>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004fc0:	f000 f834 	bl	800502c <HAL_RCC_GetSysClockFreq>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	4b14      	ldr	r3, [pc, #80]	; (8005018 <HAL_RCC_ClockConfig+0x358>)
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	0a1b      	lsrs	r3, r3, #8
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	4912      	ldr	r1, [pc, #72]	; (800501c <HAL_RCC_ClockConfig+0x35c>)
 8004fd2:	5ccb      	ldrb	r3, [r1, r3]
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fdc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fde:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <HAL_RCC_ClockConfig+0x358>)
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	4a0d      	ldr	r2, [pc, #52]	; (800501c <HAL_RCC_ClockConfig+0x35c>)
 8004fe8:	5cd3      	ldrb	r3, [r2, r3]
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff4:	4a0a      	ldr	r2, [pc, #40]	; (8005020 <HAL_RCC_ClockConfig+0x360>)
 8004ff6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ff8:	4a0a      	ldr	r2, [pc, #40]	; (8005024 <HAL_RCC_ClockConfig+0x364>)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004ffe:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <HAL_RCC_ClockConfig+0x368>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f7fd f998 	bl	8002338 <HAL_InitTick>
 8005008:	4603      	mov	r3, r0
 800500a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	58024400 	.word	0x58024400
 800501c:	0800e768 	.word	0x0800e768
 8005020:	24000004 	.word	0x24000004
 8005024:	24000000 	.word	0x24000000
 8005028:	24000008 	.word	0x24000008

0800502c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800502c:	b480      	push	{r7}
 800502e:	b089      	sub	sp, #36	; 0x24
 8005030:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005032:	4bb3      	ldr	r3, [pc, #716]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800503a:	2b18      	cmp	r3, #24
 800503c:	f200 8155 	bhi.w	80052ea <HAL_RCC_GetSysClockFreq+0x2be>
 8005040:	a201      	add	r2, pc, #4	; (adr r2, 8005048 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005046:	bf00      	nop
 8005048:	080050ad 	.word	0x080050ad
 800504c:	080052eb 	.word	0x080052eb
 8005050:	080052eb 	.word	0x080052eb
 8005054:	080052eb 	.word	0x080052eb
 8005058:	080052eb 	.word	0x080052eb
 800505c:	080052eb 	.word	0x080052eb
 8005060:	080052eb 	.word	0x080052eb
 8005064:	080052eb 	.word	0x080052eb
 8005068:	080050d3 	.word	0x080050d3
 800506c:	080052eb 	.word	0x080052eb
 8005070:	080052eb 	.word	0x080052eb
 8005074:	080052eb 	.word	0x080052eb
 8005078:	080052eb 	.word	0x080052eb
 800507c:	080052eb 	.word	0x080052eb
 8005080:	080052eb 	.word	0x080052eb
 8005084:	080052eb 	.word	0x080052eb
 8005088:	080050d9 	.word	0x080050d9
 800508c:	080052eb 	.word	0x080052eb
 8005090:	080052eb 	.word	0x080052eb
 8005094:	080052eb 	.word	0x080052eb
 8005098:	080052eb 	.word	0x080052eb
 800509c:	080052eb 	.word	0x080052eb
 80050a0:	080052eb 	.word	0x080052eb
 80050a4:	080052eb 	.word	0x080052eb
 80050a8:	080050df 	.word	0x080050df
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050ac:	4b94      	ldr	r3, [pc, #592]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0320 	and.w	r3, r3, #32
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d009      	beq.n	80050cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050b8:	4b91      	ldr	r3, [pc, #580]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	08db      	lsrs	r3, r3, #3
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	4a90      	ldr	r2, [pc, #576]	; (8005304 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
 80050c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80050ca:	e111      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050cc:	4b8d      	ldr	r3, [pc, #564]	; (8005304 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050ce:	61bb      	str	r3, [r7, #24]
    break;
 80050d0:	e10e      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80050d2:	4b8d      	ldr	r3, [pc, #564]	; (8005308 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050d4:	61bb      	str	r3, [r7, #24]
    break;
 80050d6:	e10b      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80050d8:	4b8c      	ldr	r3, [pc, #560]	; (800530c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050da:	61bb      	str	r3, [r7, #24]
    break;
 80050dc:	e108      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050de:	4b88      	ldr	r3, [pc, #544]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80050e8:	4b85      	ldr	r3, [pc, #532]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	091b      	lsrs	r3, r3, #4
 80050ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80050f4:	4b82      	ldr	r3, [pc, #520]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80050fe:	4b80      	ldr	r3, [pc, #512]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005102:	08db      	lsrs	r3, r3, #3
 8005104:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	fb02 f303 	mul.w	r3, r2, r3
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80e1 	beq.w	80052e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b02      	cmp	r3, #2
 8005126:	f000 8083 	beq.w	8005230 <HAL_RCC_GetSysClockFreq+0x204>
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b02      	cmp	r3, #2
 800512e:	f200 80a1 	bhi.w	8005274 <HAL_RCC_GetSysClockFreq+0x248>
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x114>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d056      	beq.n	80051ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800513e:	e099      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005140:	4b6f      	ldr	r3, [pc, #444]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d02d      	beq.n	80051a8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800514c:	4b6c      	ldr	r3, [pc, #432]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	08db      	lsrs	r3, r3, #3
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	4a6b      	ldr	r2, [pc, #428]	; (8005304 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
 800515c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	ee07 3a90 	vmov	s15, r3
 8005164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005176:	4b62      	ldr	r3, [pc, #392]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005186:	ed97 6a02 	vldr	s12, [r7, #8]
 800518a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005310 <HAL_RCC_GetSysClockFreq+0x2e4>
 800518e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800519a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80051a6:	e087      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005314 <HAL_RCC_GetSysClockFreq+0x2e8>
 80051b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ba:	4b51      	ldr	r3, [pc, #324]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005310 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ea:	e065      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005318 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051fe:	4b40      	ldr	r3, [pc, #256]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800520e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005212:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005310 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800521a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800521e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800522e:	e043      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800531c <HAL_RCC_GetSysClockFreq+0x2f0>
 800523e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005242:	4b2f      	ldr	r3, [pc, #188]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524a:	ee07 3a90 	vmov	s15, r3
 800524e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005252:	ed97 6a02 	vldr	s12, [r7, #8]
 8005256:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005310 <HAL_RCC_GetSysClockFreq+0x2e4>
 800525a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800525e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800526a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005272:	e021      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005318 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005286:	4b1e      	ldr	r3, [pc, #120]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005296:	ed97 6a02 	vldr	s12, [r7, #8]
 800529a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005310 <HAL_RCC_GetSysClockFreq+0x2e4>
 800529e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052b6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80052b8:	4b11      	ldr	r3, [pc, #68]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	0a5b      	lsrs	r3, r3, #9
 80052be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052c2:	3301      	adds	r3, #1
 80052c4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	ee07 3a90 	vmov	s15, r3
 80052cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80052d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052dc:	ee17 3a90 	vmov	r3, s15
 80052e0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80052e2:	e005      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61bb      	str	r3, [r7, #24]
    break;
 80052e8:	e002      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80052ea:	4b07      	ldr	r3, [pc, #28]	; (8005308 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052ec:	61bb      	str	r3, [r7, #24]
    break;
 80052ee:	bf00      	nop
  }

  return sysclockfreq;
 80052f0:	69bb      	ldr	r3, [r7, #24]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3724      	adds	r7, #36	; 0x24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	58024400 	.word	0x58024400
 8005304:	03d09000 	.word	0x03d09000
 8005308:	003d0900 	.word	0x003d0900
 800530c:	017d7840 	.word	0x017d7840
 8005310:	46000000 	.word	0x46000000
 8005314:	4c742400 	.word	0x4c742400
 8005318:	4a742400 	.word	0x4a742400
 800531c:	4bbebc20 	.word	0x4bbebc20

08005320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005326:	f7ff fe81 	bl	800502c <HAL_RCC_GetSysClockFreq>
 800532a:	4602      	mov	r2, r0
 800532c:	4b10      	ldr	r3, [pc, #64]	; (8005370 <HAL_RCC_GetHCLKFreq+0x50>)
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	0a1b      	lsrs	r3, r3, #8
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	490f      	ldr	r1, [pc, #60]	; (8005374 <HAL_RCC_GetHCLKFreq+0x54>)
 8005338:	5ccb      	ldrb	r3, [r1, r3]
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	fa22 f303 	lsr.w	r3, r2, r3
 8005342:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005344:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <HAL_RCC_GetHCLKFreq+0x50>)
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	4a09      	ldr	r2, [pc, #36]	; (8005374 <HAL_RCC_GetHCLKFreq+0x54>)
 800534e:	5cd3      	ldrb	r3, [r2, r3]
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	fa22 f303 	lsr.w	r3, r2, r3
 800535a:	4a07      	ldr	r2, [pc, #28]	; (8005378 <HAL_RCC_GetHCLKFreq+0x58>)
 800535c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800535e:	4a07      	ldr	r2, [pc, #28]	; (800537c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005364:	4b04      	ldr	r3, [pc, #16]	; (8005378 <HAL_RCC_GetHCLKFreq+0x58>)
 8005366:	681b      	ldr	r3, [r3, #0]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	58024400 	.word	0x58024400
 8005374:	0800e768 	.word	0x0800e768
 8005378:	24000004 	.word	0x24000004
 800537c:	24000000 	.word	0x24000000

08005380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005384:	f7ff ffcc 	bl	8005320 <HAL_RCC_GetHCLKFreq>
 8005388:	4602      	mov	r2, r0
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	091b      	lsrs	r3, r3, #4
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	4904      	ldr	r1, [pc, #16]	; (80053a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005396:	5ccb      	ldrb	r3, [r1, r3]
 8005398:	f003 031f 	and.w	r3, r3, #31
 800539c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	58024400 	.word	0x58024400
 80053a8:	0800e768 	.word	0x0800e768

080053ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80053b0:	f7ff ffb6 	bl	8005320 <HAL_RCC_GetHCLKFreq>
 80053b4:	4602      	mov	r2, r0
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	0a1b      	lsrs	r3, r3, #8
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	4904      	ldr	r1, [pc, #16]	; (80053d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053c2:	5ccb      	ldrb	r3, [r1, r3]
 80053c4:	f003 031f 	and.w	r3, r3, #31
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	58024400 	.word	0x58024400
 80053d4:	0800e768 	.word	0x0800e768

080053d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053e0:	2300      	movs	r3, #0
 80053e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053e4:	2300      	movs	r3, #0
 80053e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d03f      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053fc:	d02a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80053fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005402:	d824      	bhi.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005404:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005408:	d018      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800540a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800540e:	d81e      	bhi.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005418:	d007      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800541a:	e018      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800541c:	4bab      	ldr	r3, [pc, #684]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	4aaa      	ldr	r2, [pc, #680]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005426:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005428:	e015      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3304      	adds	r3, #4
 800542e:	2102      	movs	r1, #2
 8005430:	4618      	mov	r0, r3
 8005432:	f001 fff3 	bl	800741c <RCCEx_PLL2_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800543a:	e00c      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3324      	adds	r3, #36	; 0x24
 8005440:	2102      	movs	r1, #2
 8005442:	4618      	mov	r0, r3
 8005444:	f002 f89c 	bl	8007580 <RCCEx_PLL3_Config>
 8005448:	4603      	mov	r3, r0
 800544a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800544c:	e003      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	75fb      	strb	r3, [r7, #23]
      break;
 8005452:	e000      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005456:	7dfb      	ldrb	r3, [r7, #23]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d109      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800545c:	4b9b      	ldr	r3, [pc, #620]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800545e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005460:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005468:	4998      	ldr	r1, [pc, #608]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800546a:	4313      	orrs	r3, r2
 800546c:	650b      	str	r3, [r1, #80]	; 0x50
 800546e:	e001      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	7dfb      	ldrb	r3, [r7, #23]
 8005472:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547c:	2b00      	cmp	r3, #0
 800547e:	d03d      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005484:	2b04      	cmp	r3, #4
 8005486:	d826      	bhi.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054a5 	.word	0x080054a5
 8005494:	080054b3 	.word	0x080054b3
 8005498:	080054c5 	.word	0x080054c5
 800549c:	080054dd 	.word	0x080054dd
 80054a0:	080054dd 	.word	0x080054dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a4:	4b89      	ldr	r3, [pc, #548]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	4a88      	ldr	r2, [pc, #544]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054b0:	e015      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3304      	adds	r3, #4
 80054b6:	2100      	movs	r1, #0
 80054b8:	4618      	mov	r0, r3
 80054ba:	f001 ffaf 	bl	800741c <RCCEx_PLL2_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054c2:	e00c      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3324      	adds	r3, #36	; 0x24
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f002 f858 	bl	8007580 <RCCEx_PLL3_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054d4:	e003      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	75fb      	strb	r3, [r7, #23]
      break;
 80054da:	e000      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80054dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054de:	7dfb      	ldrb	r3, [r7, #23]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d109      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054e4:	4b79      	ldr	r3, [pc, #484]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e8:	f023 0207 	bic.w	r2, r3, #7
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f0:	4976      	ldr	r1, [pc, #472]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	650b      	str	r3, [r1, #80]	; 0x50
 80054f6:	e001      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
 80054fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005504:	2b00      	cmp	r3, #0
 8005506:	d042      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005510:	d02b      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005516:	d825      	bhi.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005518:	2bc0      	cmp	r3, #192	; 0xc0
 800551a:	d028      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800551c:	2bc0      	cmp	r3, #192	; 0xc0
 800551e:	d821      	bhi.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005520:	2b80      	cmp	r3, #128	; 0x80
 8005522:	d016      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005524:	2b80      	cmp	r3, #128	; 0x80
 8005526:	d81d      	bhi.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800552c:	2b40      	cmp	r3, #64	; 0x40
 800552e:	d007      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005530:	e018      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005532:	4b66      	ldr	r3, [pc, #408]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	4a65      	ldr	r2, [pc, #404]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800553c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800553e:	e017      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3304      	adds	r3, #4
 8005544:	2100      	movs	r1, #0
 8005546:	4618      	mov	r0, r3
 8005548:	f001 ff68 	bl	800741c <RCCEx_PLL2_Config>
 800554c:	4603      	mov	r3, r0
 800554e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005550:	e00e      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3324      	adds	r3, #36	; 0x24
 8005556:	2100      	movs	r1, #0
 8005558:	4618      	mov	r0, r3
 800555a:	f002 f811 	bl	8007580 <RCCEx_PLL3_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005562:	e005      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	75fb      	strb	r3, [r7, #23]
      break;
 8005568:	e002      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800556a:	bf00      	nop
 800556c:	e000      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800556e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005570:	7dfb      	ldrb	r3, [r7, #23]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d109      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005576:	4b55      	ldr	r3, [pc, #340]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005582:	4952      	ldr	r1, [pc, #328]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005584:	4313      	orrs	r3, r2
 8005586:	650b      	str	r3, [r1, #80]	; 0x50
 8005588:	e001      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005596:	2b00      	cmp	r3, #0
 8005598:	d049      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055a4:	d030      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80055a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055aa:	d82a      	bhi.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80055ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055b0:	d02c      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80055b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055b6:	d824      	bhi.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80055b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055bc:	d018      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80055be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c2:	d81e      	bhi.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80055c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055cc:	d007      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x206>
 80055ce:	e018      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d0:	4b3e      	ldr	r3, [pc, #248]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	4a3d      	ldr	r2, [pc, #244]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055dc:	e017      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3304      	adds	r3, #4
 80055e2:	2100      	movs	r1, #0
 80055e4:	4618      	mov	r0, r3
 80055e6:	f001 ff19 	bl	800741c <RCCEx_PLL2_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80055ee:	e00e      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3324      	adds	r3, #36	; 0x24
 80055f4:	2100      	movs	r1, #0
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 ffc2 	bl	8007580 <RCCEx_PLL3_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005600:	e005      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]
      break;
 8005606:	e002      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005608:	bf00      	nop
 800560a:	e000      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800560c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800560e:	7dfb      	ldrb	r3, [r7, #23]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005614:	4b2d      	ldr	r3, [pc, #180]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005618:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005622:	492a      	ldr	r1, [pc, #168]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005624:	4313      	orrs	r3, r2
 8005626:	658b      	str	r3, [r1, #88]	; 0x58
 8005628:	e001      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562a:	7dfb      	ldrb	r3, [r7, #23]
 800562c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005636:	2b00      	cmp	r3, #0
 8005638:	d04c      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005640:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005644:	d030      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005646:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800564a:	d82a      	bhi.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800564c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005650:	d02c      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005652:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005656:	d824      	bhi.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800565c:	d018      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800565e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005662:	d81e      	bhi.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800566c:	d007      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800566e:	e018      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005670:	4b16      	ldr	r3, [pc, #88]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	4a15      	ldr	r2, [pc, #84]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800567a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800567c:	e017      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	3304      	adds	r3, #4
 8005682:	2100      	movs	r1, #0
 8005684:	4618      	mov	r0, r3
 8005686:	f001 fec9 	bl	800741c <RCCEx_PLL2_Config>
 800568a:	4603      	mov	r3, r0
 800568c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800568e:	e00e      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3324      	adds	r3, #36	; 0x24
 8005694:	2100      	movs	r1, #0
 8005696:	4618      	mov	r0, r3
 8005698:	f001 ff72 	bl	8007580 <RCCEx_PLL3_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056a0:	e005      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75fb      	strb	r3, [r7, #23]
      break;
 80056a6:	e002      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80056a8:	bf00      	nop
 80056aa:	e000      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80056ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10d      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80056c2:	4902      	ldr	r1, [pc, #8]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	658b      	str	r3, [r1, #88]	; 0x58
 80056c8:	e004      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80056ca:	bf00      	nop
 80056cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
 80056d2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d032      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e4:	2b30      	cmp	r3, #48	; 0x30
 80056e6:	d01c      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80056e8:	2b30      	cmp	r3, #48	; 0x30
 80056ea:	d817      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	d00c      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x332>
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d813      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d016      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d10f      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056fc:	4baf      	ldr	r3, [pc, #700]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005700:	4aae      	ldr	r2, [pc, #696]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005706:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005708:	e00e      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3304      	adds	r3, #4
 800570e:	2102      	movs	r1, #2
 8005710:	4618      	mov	r0, r3
 8005712:	f001 fe83 	bl	800741c <RCCEx_PLL2_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800571a:	e005      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	75fb      	strb	r3, [r7, #23]
      break;
 8005720:	e002      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005726:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005728:	7dfb      	ldrb	r3, [r7, #23]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d109      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800572e:	4ba3      	ldr	r3, [pc, #652]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005732:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800573a:	49a0      	ldr	r1, [pc, #640]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800573c:	4313      	orrs	r3, r2
 800573e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005740:	e001      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
 8005744:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d047      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005756:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800575a:	d030      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800575c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005760:	d82a      	bhi.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005762:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005766:	d02c      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005768:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800576c:	d824      	bhi.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800576e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005772:	d018      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005778:	d81e      	bhi.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800577e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005782:	d007      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005784:	e018      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005786:	4b8d      	ldr	r3, [pc, #564]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	4a8c      	ldr	r2, [pc, #560]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800578c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005790:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005792:	e017      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3304      	adds	r3, #4
 8005798:	2100      	movs	r1, #0
 800579a:	4618      	mov	r0, r3
 800579c:	f001 fe3e 	bl	800741c <RCCEx_PLL2_Config>
 80057a0:	4603      	mov	r3, r0
 80057a2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80057a4:	e00e      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3324      	adds	r3, #36	; 0x24
 80057aa:	2100      	movs	r1, #0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f001 fee7 	bl	8007580 <RCCEx_PLL3_Config>
 80057b2:	4603      	mov	r3, r0
 80057b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80057b6:	e005      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	75fb      	strb	r3, [r7, #23]
      break;
 80057bc:	e002      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80057be:	bf00      	nop
 80057c0:	e000      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80057c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80057ca:	4b7c      	ldr	r3, [pc, #496]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80057cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d6:	4979      	ldr	r1, [pc, #484]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	650b      	str	r3, [r1, #80]	; 0x50
 80057dc:	e001      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057de:	7dfb      	ldrb	r3, [r7, #23]
 80057e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d049      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057f6:	d02e      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80057f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057fc:	d828      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80057fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005802:	d02a      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005804:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005808:	d822      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800580a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800580e:	d026      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005810:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005814:	d81c      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005816:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800581a:	d010      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800581c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005820:	d816      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005822:	2b00      	cmp	r3, #0
 8005824:	d01d      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582a:	d111      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3304      	adds	r3, #4
 8005830:	2101      	movs	r1, #1
 8005832:	4618      	mov	r0, r3
 8005834:	f001 fdf2 	bl	800741c <RCCEx_PLL2_Config>
 8005838:	4603      	mov	r3, r0
 800583a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800583c:	e012      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3324      	adds	r3, #36	; 0x24
 8005842:	2101      	movs	r1, #1
 8005844:	4618      	mov	r0, r3
 8005846:	f001 fe9b 	bl	8007580 <RCCEx_PLL3_Config>
 800584a:	4603      	mov	r3, r0
 800584c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800584e:	e009      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	75fb      	strb	r3, [r7, #23]
      break;
 8005854:	e006      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005856:	bf00      	nop
 8005858:	e004      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800585a:	bf00      	nop
 800585c:	e002      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800585e:	bf00      	nop
 8005860:	e000      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005864:	7dfb      	ldrb	r3, [r7, #23]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d109      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800586a:	4b54      	ldr	r3, [pc, #336]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800586c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005876:	4951      	ldr	r1, [pc, #324]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005878:	4313      	orrs	r3, r2
 800587a:	650b      	str	r3, [r1, #80]	; 0x50
 800587c:	e001      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587e:	7dfb      	ldrb	r3, [r7, #23]
 8005880:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d04b      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005894:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005898:	d02e      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800589a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800589e:	d828      	bhi.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80058a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a4:	d02a      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80058a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058aa:	d822      	bhi.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80058ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058b0:	d026      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80058b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058b6:	d81c      	bhi.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80058b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058bc:	d010      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80058be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058c2:	d816      	bhi.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01d      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80058c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058cc:	d111      	bne.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3304      	adds	r3, #4
 80058d2:	2101      	movs	r1, #1
 80058d4:	4618      	mov	r0, r3
 80058d6:	f001 fda1 	bl	800741c <RCCEx_PLL2_Config>
 80058da:	4603      	mov	r3, r0
 80058dc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80058de:	e012      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3324      	adds	r3, #36	; 0x24
 80058e4:	2101      	movs	r1, #1
 80058e6:	4618      	mov	r0, r3
 80058e8:	f001 fe4a 	bl	8007580 <RCCEx_PLL3_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80058f0:	e009      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	75fb      	strb	r3, [r7, #23]
      break;
 80058f6:	e006      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80058f8:	bf00      	nop
 80058fa:	e004      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80058fc:	bf00      	nop
 80058fe:	e002      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005900:	bf00      	nop
 8005902:	e000      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800590c:	4b2b      	ldr	r3, [pc, #172]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800590e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005910:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800591a:	4928      	ldr	r1, [pc, #160]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800591c:	4313      	orrs	r3, r2
 800591e:	658b      	str	r3, [r1, #88]	; 0x58
 8005920:	e001      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005922:	7dfb      	ldrb	r3, [r7, #23]
 8005924:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d02f      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800593a:	d00e      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800593c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005940:	d814      	bhi.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005942:	2b00      	cmp	r3, #0
 8005944:	d015      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800594a:	d10f      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800594c:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	4a1a      	ldr	r2, [pc, #104]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005956:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005958:	e00c      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3304      	adds	r3, #4
 800595e:	2101      	movs	r1, #1
 8005960:	4618      	mov	r0, r3
 8005962:	f001 fd5b 	bl	800741c <RCCEx_PLL2_Config>
 8005966:	4603      	mov	r3, r0
 8005968:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800596a:	e003      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	75fb      	strb	r3, [r7, #23]
      break;
 8005970:	e000      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005974:	7dfb      	ldrb	r3, [r7, #23]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d109      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800597c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800597e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005986:	490d      	ldr	r1, [pc, #52]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005988:	4313      	orrs	r3, r2
 800598a:	650b      	str	r3, [r1, #80]	; 0x50
 800598c:	e001      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d033      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d81c      	bhi.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80059a6:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80059a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ac:	080059e7 	.word	0x080059e7
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059cf 	.word	0x080059cf
 80059b8:	080059e7 	.word	0x080059e7
 80059bc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c0:	4bb8      	ldr	r3, [pc, #736]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	4ab7      	ldr	r2, [pc, #732]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80059c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80059cc:	e00c      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3304      	adds	r3, #4
 80059d2:	2102      	movs	r1, #2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 fd21 	bl	800741c <RCCEx_PLL2_Config>
 80059da:	4603      	mov	r3, r0
 80059dc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80059de:	e003      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	75fb      	strb	r3, [r7, #23]
      break;
 80059e4:	e000      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80059e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d109      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80059ee:	4bad      	ldr	r3, [pc, #692]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80059f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f2:	f023 0203 	bic.w	r2, r3, #3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	49aa      	ldr	r1, [pc, #680]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a00:	e001      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
 8005a04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 8086 	beq.w	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a14:	4ba4      	ldr	r3, [pc, #656]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4aa3      	ldr	r2, [pc, #652]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a20:	f7fc fcd4 	bl	80023cc <HAL_GetTick>
 8005a24:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a26:	e009      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a28:	f7fc fcd0 	bl	80023cc <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b64      	cmp	r3, #100	; 0x64
 8005a34:	d902      	bls.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	75fb      	strb	r3, [r7, #23]
        break;
 8005a3a:	e005      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a3c:	4b9a      	ldr	r3, [pc, #616]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0ef      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d166      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a4e:	4b95      	ldr	r3, [pc, #596]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a58:	4053      	eors	r3, r2
 8005a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d013      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a62:	4b90      	ldr	r3, [pc, #576]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a6c:	4b8d      	ldr	r3, [pc, #564]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a70:	4a8c      	ldr	r2, [pc, #560]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a76:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a78:	4b8a      	ldr	r3, [pc, #552]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7c:	4a89      	ldr	r2, [pc, #548]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a82:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005a84:	4a87      	ldr	r2, [pc, #540]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a94:	d115      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a96:	f7fc fc99 	bl	80023cc <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a9c:	e00b      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a9e:	f7fc fc95 	bl	80023cc <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d902      	bls.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ab4:	e005      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ab6:	4b7b      	ldr	r3, [pc, #492]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0ed      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005ac2:	7dfb      	ldrb	r3, [r7, #23]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d126      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ad6:	d10d      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005ad8:	4b72      	ldr	r3, [pc, #456]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ae6:	0919      	lsrs	r1, r3, #4
 8005ae8:	4b70      	ldr	r3, [pc, #448]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005aea:	400b      	ands	r3, r1
 8005aec:	496d      	ldr	r1, [pc, #436]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	610b      	str	r3, [r1, #16]
 8005af2:	e005      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005af4:	4b6b      	ldr	r3, [pc, #428]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	4a6a      	ldr	r2, [pc, #424]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005afa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005afe:	6113      	str	r3, [r2, #16]
 8005b00:	4b68      	ldr	r3, [pc, #416]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005b02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b0e:	4965      	ldr	r1, [pc, #404]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	670b      	str	r3, [r1, #112]	; 0x70
 8005b14:	e004      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b16:	7dfb      	ldrb	r3, [r7, #23]
 8005b18:	75bb      	strb	r3, [r7, #22]
 8005b1a:	e001      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
 8005b1e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d07e      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b30:	2b28      	cmp	r3, #40	; 0x28
 8005b32:	d867      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005b34:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3a:	bf00      	nop
 8005b3c:	08005c0b 	.word	0x08005c0b
 8005b40:	08005c05 	.word	0x08005c05
 8005b44:	08005c05 	.word	0x08005c05
 8005b48:	08005c05 	.word	0x08005c05
 8005b4c:	08005c05 	.word	0x08005c05
 8005b50:	08005c05 	.word	0x08005c05
 8005b54:	08005c05 	.word	0x08005c05
 8005b58:	08005c05 	.word	0x08005c05
 8005b5c:	08005be1 	.word	0x08005be1
 8005b60:	08005c05 	.word	0x08005c05
 8005b64:	08005c05 	.word	0x08005c05
 8005b68:	08005c05 	.word	0x08005c05
 8005b6c:	08005c05 	.word	0x08005c05
 8005b70:	08005c05 	.word	0x08005c05
 8005b74:	08005c05 	.word	0x08005c05
 8005b78:	08005c05 	.word	0x08005c05
 8005b7c:	08005bf3 	.word	0x08005bf3
 8005b80:	08005c05 	.word	0x08005c05
 8005b84:	08005c05 	.word	0x08005c05
 8005b88:	08005c05 	.word	0x08005c05
 8005b8c:	08005c05 	.word	0x08005c05
 8005b90:	08005c05 	.word	0x08005c05
 8005b94:	08005c05 	.word	0x08005c05
 8005b98:	08005c05 	.word	0x08005c05
 8005b9c:	08005c0b 	.word	0x08005c0b
 8005ba0:	08005c05 	.word	0x08005c05
 8005ba4:	08005c05 	.word	0x08005c05
 8005ba8:	08005c05 	.word	0x08005c05
 8005bac:	08005c05 	.word	0x08005c05
 8005bb0:	08005c05 	.word	0x08005c05
 8005bb4:	08005c05 	.word	0x08005c05
 8005bb8:	08005c05 	.word	0x08005c05
 8005bbc:	08005c0b 	.word	0x08005c0b
 8005bc0:	08005c05 	.word	0x08005c05
 8005bc4:	08005c05 	.word	0x08005c05
 8005bc8:	08005c05 	.word	0x08005c05
 8005bcc:	08005c05 	.word	0x08005c05
 8005bd0:	08005c05 	.word	0x08005c05
 8005bd4:	08005c05 	.word	0x08005c05
 8005bd8:	08005c05 	.word	0x08005c05
 8005bdc:	08005c0b 	.word	0x08005c0b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3304      	adds	r3, #4
 8005be4:	2101      	movs	r1, #1
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 fc18 	bl	800741c <RCCEx_PLL2_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005bf0:	e00c      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3324      	adds	r3, #36	; 0x24
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f001 fcc1 	bl	8007580 <RCCEx_PLL3_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005c02:	e003      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	75fb      	strb	r3, [r7, #23]
      break;
 8005c08:	e000      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005c0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c12:	4b24      	ldr	r3, [pc, #144]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c1e:	4921      	ldr	r1, [pc, #132]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	654b      	str	r3, [r1, #84]	; 0x54
 8005c24:	e001      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d03e      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c3a:	2b05      	cmp	r3, #5
 8005c3c:	d820      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005c3e:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c44:	08005c87 	.word	0x08005c87
 8005c48:	08005c5d 	.word	0x08005c5d
 8005c4c:	08005c6f 	.word	0x08005c6f
 8005c50:	08005c87 	.word	0x08005c87
 8005c54:	08005c87 	.word	0x08005c87
 8005c58:	08005c87 	.word	0x08005c87
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	2101      	movs	r1, #1
 8005c62:	4618      	mov	r0, r3
 8005c64:	f001 fbda 	bl	800741c <RCCEx_PLL2_Config>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005c6c:	e00c      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	3324      	adds	r3, #36	; 0x24
 8005c72:	2101      	movs	r1, #1
 8005c74:	4618      	mov	r0, r3
 8005c76:	f001 fc83 	bl	8007580 <RCCEx_PLL3_Config>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005c7e:	e003      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	75fb      	strb	r3, [r7, #23]
      break;
 8005c84:	e000      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005c86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c88:	7dfb      	ldrb	r3, [r7, #23]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d110      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c8e:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c92:	f023 0207 	bic.w	r2, r3, #7
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c9a:	4902      	ldr	r1, [pc, #8]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	654b      	str	r3, [r1, #84]	; 0x54
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005ca2:	bf00      	nop
 8005ca4:	58024400 	.word	0x58024400
 8005ca8:	58024800 	.word	0x58024800
 8005cac:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
 8005cb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d039      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc6:	2b05      	cmp	r3, #5
 8005cc8:	d820      	bhi.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005cca:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd0:	08005d13 	.word	0x08005d13
 8005cd4:	08005ce9 	.word	0x08005ce9
 8005cd8:	08005cfb 	.word	0x08005cfb
 8005cdc:	08005d13 	.word	0x08005d13
 8005ce0:	08005d13 	.word	0x08005d13
 8005ce4:	08005d13 	.word	0x08005d13
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3304      	adds	r3, #4
 8005cec:	2101      	movs	r1, #1
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 fb94 	bl	800741c <RCCEx_PLL2_Config>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005cf8:	e00c      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3324      	adds	r3, #36	; 0x24
 8005cfe:	2101      	movs	r1, #1
 8005d00:	4618      	mov	r0, r3
 8005d02:	f001 fc3d 	bl	8007580 <RCCEx_PLL3_Config>
 8005d06:	4603      	mov	r3, r0
 8005d08:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005d0a:	e003      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d10:	e000      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10a      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d1a:	4bb7      	ldr	r3, [pc, #732]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1e:	f023 0207 	bic.w	r2, r3, #7
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d28:	49b3      	ldr	r1, [pc, #716]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	658b      	str	r3, [r1, #88]	; 0x58
 8005d2e:	e001      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
 8005d32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d04b      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d4a:	d02e      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d50:	d828      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d56:	d02a      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5c:	d822      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005d5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d62:	d026      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005d64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d68:	d81c      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d6e:	d010      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d74:	d816      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d01d      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d7e:	d111      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3304      	adds	r3, #4
 8005d84:	2100      	movs	r1, #0
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 fb48 	bl	800741c <RCCEx_PLL2_Config>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005d90:	e012      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3324      	adds	r3, #36	; 0x24
 8005d96:	2102      	movs	r1, #2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f001 fbf1 	bl	8007580 <RCCEx_PLL3_Config>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005da2:	e009      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	75fb      	strb	r3, [r7, #23]
      break;
 8005da8:	e006      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005daa:	bf00      	nop
 8005dac:	e004      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005dae:	bf00      	nop
 8005db0:	e002      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005db2:	bf00      	nop
 8005db4:	e000      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005db6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10a      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dbe:	4b8e      	ldr	r3, [pc, #568]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dcc:	498a      	ldr	r1, [pc, #552]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	654b      	str	r3, [r1, #84]	; 0x54
 8005dd2:	e001      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
 8005dd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d04b      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005dee:	d02e      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005df0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005df4:	d828      	bhi.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfa:	d02a      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e00:	d822      	bhi.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005e02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e06:	d026      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005e08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e0c:	d81c      	bhi.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e12:	d010      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e18:	d816      	bhi.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d01d      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e22:	d111      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3304      	adds	r3, #4
 8005e28:	2100      	movs	r1, #0
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 faf6 	bl	800741c <RCCEx_PLL2_Config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005e34:	e012      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3324      	adds	r3, #36	; 0x24
 8005e3a:	2102      	movs	r1, #2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f001 fb9f 	bl	8007580 <RCCEx_PLL3_Config>
 8005e42:	4603      	mov	r3, r0
 8005e44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005e46:	e009      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e4c:	e006      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005e4e:	bf00      	nop
 8005e50:	e004      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005e52:	bf00      	nop
 8005e54:	e002      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005e56:	bf00      	nop
 8005e58:	e000      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e62:	4b65      	ldr	r3, [pc, #404]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e66:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e70:	4961      	ldr	r1, [pc, #388]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	658b      	str	r3, [r1, #88]	; 0x58
 8005e76:	e001      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e78:	7dfb      	ldrb	r3, [r7, #23]
 8005e7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d04b      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e8e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e92:	d02e      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005e94:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e98:	d828      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e9e:	d02a      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea4:	d822      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005ea6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005eaa:	d026      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005eac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005eb0:	d81c      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005eb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eb6:	d010      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ebc:	d816      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d01d      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec6:	d111      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	2100      	movs	r1, #0
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f001 faa4 	bl	800741c <RCCEx_PLL2_Config>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005ed8:	e012      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3324      	adds	r3, #36	; 0x24
 8005ede:	2102      	movs	r1, #2
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f001 fb4d 	bl	8007580 <RCCEx_PLL3_Config>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005eea:	e009      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef0:	e006      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005ef2:	bf00      	nop
 8005ef4:	e004      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005ef6:	bf00      	nop
 8005ef8:	e002      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005efa:	bf00      	nop
 8005efc:	e000      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10a      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f06:	4b3c      	ldr	r3, [pc, #240]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f14:	4938      	ldr	r1, [pc, #224]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	658b      	str	r3, [r1, #88]	; 0x58
 8005f1a:	e001      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01a      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f36:	d10a      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3324      	adds	r3, #36	; 0x24
 8005f3c:	2102      	movs	r1, #2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 fb1e 	bl	8007580 <RCCEx_PLL3_Config>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005f4e:	4b2a      	ldr	r3, [pc, #168]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f5c:	4926      	ldr	r1, [pc, #152]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d01a      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f78:	d10a      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3324      	adds	r3, #36	; 0x24
 8005f7e:	2102      	movs	r1, #2
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 fafd 	bl	8007580 <RCCEx_PLL3_Config>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f90:	4b19      	ldr	r3, [pc, #100]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f9e:	4916      	ldr	r1, [pc, #88]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d036      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005fb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fba:	d01f      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fc0:	d817      	bhi.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fca:	d009      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005fcc:	e011      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f001 fa21 	bl	800741c <RCCEx_PLL2_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005fde:	e00e      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3324      	adds	r3, #36	; 0x24
 8005fe4:	2102      	movs	r1, #2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 faca 	bl	8007580 <RCCEx_PLL3_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005ff0:	e005      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff6:	e002      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005ff8:	58024400 	.word	0x58024400
      break;
 8005ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006004:	4b93      	ldr	r3, [pc, #588]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006008:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006012:	4990      	ldr	r1, [pc, #576]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006014:	4313      	orrs	r3, r2
 8006016:	658b      	str	r3, [r1, #88]	; 0x58
 8006018:	e001      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601a:	7dfb      	ldrb	r3, [r7, #23]
 800601c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d033      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006030:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006034:	d01c      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006036:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800603a:	d816      	bhi.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800603c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006040:	d003      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006046:	d007      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006048:	e00f      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800604a:	4b82      	ldr	r3, [pc, #520]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604e:	4a81      	ldr	r2, [pc, #516]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006054:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006056:	e00c      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3324      	adds	r3, #36	; 0x24
 800605c:	2101      	movs	r1, #1
 800605e:	4618      	mov	r0, r3
 8006060:	f001 fa8e 	bl	8007580 <RCCEx_PLL3_Config>
 8006064:	4603      	mov	r3, r0
 8006066:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006068:	e003      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	75fb      	strb	r3, [r7, #23]
      break;
 800606e:	e000      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006078:	4b76      	ldr	r3, [pc, #472]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800607a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006086:	4973      	ldr	r1, [pc, #460]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006088:	4313      	orrs	r3, r2
 800608a:	654b      	str	r3, [r1, #84]	; 0x54
 800608c:	e001      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d029      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80060a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060aa:	d007      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80060ac:	e00f      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ae:	4b69      	ldr	r3, [pc, #420]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	4a68      	ldr	r2, [pc, #416]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80060ba:	e00b      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3304      	adds	r3, #4
 80060c0:	2102      	movs	r1, #2
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 f9aa 	bl	800741c <RCCEx_PLL2_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80060cc:	e002      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	75fb      	strb	r3, [r7, #23]
      break;
 80060d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80060da:	4b5e      	ldr	r3, [pc, #376]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e6:	495b      	ldr	r1, [pc, #364]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80060ec:	e001      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3324      	adds	r3, #36	; 0x24
 8006102:	2102      	movs	r1, #2
 8006104:	4618      	mov	r0, r3
 8006106:	f001 fa3b 	bl	8007580 <RCCEx_PLL3_Config>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d030      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006124:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006128:	d017      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800612a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800612e:	d811      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006134:	d013      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800613a:	d80b      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800613c:	2b00      	cmp	r3, #0
 800613e:	d010      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006144:	d106      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006146:	4b43      	ldr	r3, [pc, #268]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	4a42      	ldr	r2, [pc, #264]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800614c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006150:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006152:	e007      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	75fb      	strb	r3, [r7, #23]
      break;
 8006158:	e004      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800615a:	bf00      	nop
 800615c:	e002      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800615e:	bf00      	nop
 8006160:	e000      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006164:	7dfb      	ldrb	r3, [r7, #23]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d109      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800616a:	4b3a      	ldr	r3, [pc, #232]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800616c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006176:	4937      	ldr	r1, [pc, #220]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006178:	4313      	orrs	r3, r2
 800617a:	654b      	str	r3, [r1, #84]	; 0x54
 800617c:	e001      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617e:	7dfb      	ldrb	r3, [r7, #23]
 8006180:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d008      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800618e:	4b31      	ldr	r3, [pc, #196]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006192:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619a:	492e      	ldr	r1, [pc, #184]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800619c:	4313      	orrs	r3, r2
 800619e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d009      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80061ac:	4b29      	ldr	r3, [pc, #164]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80061ba:	4926      	ldr	r1, [pc, #152]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d008      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80061cc:	4b21      	ldr	r3, [pc, #132]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80061ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d8:	491e      	ldr	r1, [pc, #120]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00d      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061ea:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	4a19      	ldr	r2, [pc, #100]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80061f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061f4:	6113      	str	r3, [r2, #16]
 80061f6:	4b17      	ldr	r3, [pc, #92]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006200:	4914      	ldr	r1, [pc, #80]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006202:	4313      	orrs	r3, r2
 8006204:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	da08      	bge.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800620e:	4b11      	ldr	r3, [pc, #68]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006212:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621a:	490e      	ldr	r1, [pc, #56]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800621c:	4313      	orrs	r3, r2
 800621e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d009      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800622c:	4b09      	ldr	r3, [pc, #36]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800622e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006230:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623a:	4906      	ldr	r1, [pc, #24]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800623c:	4313      	orrs	r3, r2
 800623e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006240:	7dbb      	ldrb	r3, [r7, #22]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	e000      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	58024400 	.word	0x58024400

08006258 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b090      	sub	sp, #64	; 0x40
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006266:	f040 8095 	bne.w	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800626a:	4bae      	ldr	r3, [pc, #696]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800626c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	633b      	str	r3, [r7, #48]	; 0x30
 8006274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006276:	2b04      	cmp	r3, #4
 8006278:	f200 8088 	bhi.w	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800627c:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	08006299 	.word	0x08006299
 8006288:	080062c1 	.word	0x080062c1
 800628c:	080062e9 	.word	0x080062e9
 8006290:	08006385 	.word	0x08006385
 8006294:	08006311 	.word	0x08006311

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006298:	4ba2      	ldr	r3, [pc, #648]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062a4:	d108      	bne.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 ff64 	bl	8007178 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80062b4:	f000 bc95 	b.w	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80062b8:	2300      	movs	r3, #0
 80062ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062bc:	f000 bc91 	b.w	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062c0:	4b98      	ldr	r3, [pc, #608]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062cc:	d108      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062ce:	f107 0318 	add.w	r3, r7, #24
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fca8 	bl	8006c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80062dc:	f000 bc81 	b.w	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80062e0:	2300      	movs	r3, #0
 80062e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062e4:	f000 bc7d 	b.w	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80062e8:	4b8e      	ldr	r3, [pc, #568]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f4:	d108      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062f6:	f107 030c 	add.w	r3, r7, #12
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 fde8 	bl	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006304:	f000 bc6d 	b.w	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800630c:	f000 bc69 	b.w	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006310:	4b84      	ldr	r3, [pc, #528]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006314:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006318:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800631a:	4b82      	ldr	r3, [pc, #520]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b04      	cmp	r3, #4
 8006324:	d10c      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006328:	2b00      	cmp	r3, #0
 800632a:	d109      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800632c:	4b7d      	ldr	r3, [pc, #500]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	08db      	lsrs	r3, r3, #3
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	4a7c      	ldr	r2, [pc, #496]	; (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006338:	fa22 f303 	lsr.w	r3, r2, r3
 800633c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800633e:	e01f      	b.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006340:	4b78      	ldr	r3, [pc, #480]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800634c:	d106      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800634e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006354:	d102      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006356:	4b75      	ldr	r3, [pc, #468]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800635a:	e011      	b.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800635c:	4b71      	ldr	r3, [pc, #452]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006368:	d106      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800636a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006370:	d102      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006372:	4b6f      	ldr	r3, [pc, #444]	; (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006376:	e003      	b.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006378:	2300      	movs	r3, #0
 800637a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800637c:	f000 bc31 	b.w	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006380:	f000 bc2f 	b.w	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006384:	4b6b      	ldr	r3, [pc, #428]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006386:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006388:	f000 bc2b 	b.w	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800638c:	2300      	movs	r3, #0
 800638e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006390:	f000 bc27 	b.w	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800639a:	f040 8095 	bne.w	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800639e:	4b61      	ldr	r3, [pc, #388]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80063a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80063a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ae:	d04d      	beq.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b6:	f200 8084 	bhi.w	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	2bc0      	cmp	r3, #192	; 0xc0
 80063be:	d07d      	beq.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	2bc0      	cmp	r3, #192	; 0xc0
 80063c4:	d87d      	bhi.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	2b80      	cmp	r3, #128	; 0x80
 80063ca:	d02d      	beq.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	2b80      	cmp	r3, #128	; 0x80
 80063d0:	d877      	bhi.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	2b40      	cmp	r3, #64	; 0x40
 80063dc:	d012      	beq.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80063de:	e070      	b.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063e0:	4b50      	ldr	r3, [pc, #320]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063ec:	d107      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fec0 	bl	8007178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063fc:	e3f1      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006402:	e3ee      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006404:	4b47      	ldr	r3, [pc, #284]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800640c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006410:	d107      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006412:	f107 0318 	add.w	r3, r7, #24
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fc06 	bl	8006c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006420:	e3df      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006422:	2300      	movs	r3, #0
 8006424:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006426:	e3dc      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006428:	4b3e      	ldr	r3, [pc, #248]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006434:	d107      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006436:	f107 030c 	add.w	r3, r7, #12
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fd48 	bl	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006444:	e3cd      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006446:	2300      	movs	r3, #0
 8006448:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800644a:	e3ca      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800644c:	4b35      	ldr	r3, [pc, #212]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800644e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006450:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006454:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006456:	4b33      	ldr	r3, [pc, #204]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b04      	cmp	r3, #4
 8006460:	d10c      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006464:	2b00      	cmp	r3, #0
 8006466:	d109      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006468:	4b2e      	ldr	r3, [pc, #184]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	08db      	lsrs	r3, r3, #3
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	4a2d      	ldr	r2, [pc, #180]	; (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006474:	fa22 f303 	lsr.w	r3, r2, r3
 8006478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800647a:	e01e      	b.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800647c:	4b29      	ldr	r3, [pc, #164]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006488:	d106      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800648a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006490:	d102      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006492:	4b26      	ldr	r3, [pc, #152]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006496:	e010      	b.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006498:	4b22      	ldr	r3, [pc, #136]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064a4:	d106      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80064a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ac:	d102      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80064ae:	4b20      	ldr	r3, [pc, #128]	; (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80064b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064b2:	e002      	b.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80064b8:	e393      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80064ba:	e392      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80064bc:	4b1d      	ldr	r3, [pc, #116]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80064be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064c0:	e38f      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064c6:	e38c      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ce:	f040 80a7 	bne.w	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80064d2:	4b14      	ldr	r3, [pc, #80]	; (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80064d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80064da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064e2:	d05f      	beq.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064ea:	f200 8096 	bhi.w	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064f4:	f000 808e 	beq.w	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064fe:	f200 808c 	bhi.w	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006508:	d03a      	beq.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006510:	f200 8083 	bhi.w	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00e      	beq.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006520:	d01c      	beq.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006522:	e07a      	b.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006524:	58024400 	.word	0x58024400
 8006528:	03d09000 	.word	0x03d09000
 800652c:	003d0900 	.word	0x003d0900
 8006530:	017d7840 	.word	0x017d7840
 8006534:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006538:	4baa      	ldr	r3, [pc, #680]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006544:	d107      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fe14 	bl	8007178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006554:	e345      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800655a:	e342      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800655c:	4ba1      	ldr	r3, [pc, #644]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006568:	d107      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800656a:	f107 0318 	add.w	r3, r7, #24
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fb5a 	bl	8006c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006578:	e333      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800657a:	2300      	movs	r3, #0
 800657c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800657e:	e330      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006580:	4b98      	ldr	r3, [pc, #608]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800658c:	d107      	bne.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800658e:	f107 030c 	add.w	r3, r7, #12
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fc9c 	bl	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800659c:	e321      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800659e:	2300      	movs	r3, #0
 80065a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065a2:	e31e      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80065a4:	4b8f      	ldr	r3, [pc, #572]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80065a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065ac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065ae:	4b8d      	ldr	r3, [pc, #564]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d10c      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80065ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d109      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065c0:	4b88      	ldr	r3, [pc, #544]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	08db      	lsrs	r3, r3, #3
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	4a87      	ldr	r2, [pc, #540]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80065cc:	fa22 f303 	lsr.w	r3, r2, r3
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065d2:	e01e      	b.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065d4:	4b83      	ldr	r3, [pc, #524]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e0:	d106      	bne.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80065e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065e8:	d102      	bne.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80065ea:	4b80      	ldr	r3, [pc, #512]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80065ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ee:	e010      	b.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065f0:	4b7c      	ldr	r3, [pc, #496]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065fc:	d106      	bne.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80065fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006604:	d102      	bne.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006606:	4b7a      	ldr	r3, [pc, #488]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800660a:	e002      	b.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800660c:	2300      	movs	r3, #0
 800660e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006610:	e2e7      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006612:	e2e6      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006614:	4b77      	ldr	r3, [pc, #476]	; (80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006616:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006618:	e2e3      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800661a:	2300      	movs	r3, #0
 800661c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800661e:	e2e0      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006626:	f040 809c 	bne.w	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800662a:	4b6e      	ldr	r3, [pc, #440]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800662c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006632:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800663a:	d054      	beq.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006642:	f200 808b 	bhi.w	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800664c:	f000 8083 	beq.w	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006656:	f200 8081 	bhi.w	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006660:	d02f      	beq.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006668:	d878      	bhi.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	2b00      	cmp	r3, #0
 800666e:	d004      	beq.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006676:	d012      	beq.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006678:	e070      	b.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800667a:	4b5a      	ldr	r3, [pc, #360]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006686:	d107      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800668c:	4618      	mov	r0, r3
 800668e:	f000 fd73 	bl	8007178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006696:	e2a4      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800669c:	e2a1      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800669e:	4b51      	ldr	r3, [pc, #324]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066aa:	d107      	bne.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066ac:	f107 0318 	add.w	r3, r7, #24
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fab9 	bl	8006c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80066ba:	e292      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80066bc:	2300      	movs	r3, #0
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066c0:	e28f      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066c2:	4b48      	ldr	r3, [pc, #288]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ce:	d107      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066d0:	f107 030c 	add.w	r3, r7, #12
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fbfb 	bl	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066de:	e280      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80066e0:	2300      	movs	r3, #0
 80066e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066e4:	e27d      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80066e6:	4b3f      	ldr	r3, [pc, #252]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80066e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066ee:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066f0:	4b3c      	ldr	r3, [pc, #240]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d10c      	bne.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80066fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d109      	bne.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006702:	4b38      	ldr	r3, [pc, #224]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	08db      	lsrs	r3, r3, #3
 8006708:	f003 0303 	and.w	r3, r3, #3
 800670c:	4a36      	ldr	r2, [pc, #216]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800670e:	fa22 f303 	lsr.w	r3, r2, r3
 8006712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006714:	e01e      	b.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006716:	4b33      	ldr	r3, [pc, #204]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006722:	d106      	bne.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800672a:	d102      	bne.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800672c:	4b2f      	ldr	r3, [pc, #188]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006730:	e010      	b.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006732:	4b2c      	ldr	r3, [pc, #176]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800673e:	d106      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006746:	d102      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006748:	4b29      	ldr	r3, [pc, #164]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800674a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800674c:	e002      	b.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800674e:	2300      	movs	r3, #0
 8006750:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006752:	e246      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006754:	e245      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006756:	4b27      	ldr	r3, [pc, #156]	; (80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006758:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800675a:	e242      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006760:	e23f      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006768:	f040 80a8 	bne.w	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800676c:	4b1d      	ldr	r3, [pc, #116]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800676e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006770:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006774:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800677c:	d060      	beq.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006784:	f200 8097 	bhi.w	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800678e:	f000 808f 	beq.w	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006798:	f200 808d 	bhi.w	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800679c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a2:	d03b      	beq.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80067a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067aa:	f200 8084 	bhi.w	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80067ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d004      	beq.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ba:	d01d      	beq.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80067bc:	e07b      	b.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067be:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067ca:	d107      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fcd1 	bl	8007178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067da:	e202      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067e0:	e1ff      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80067e2:	bf00      	nop
 80067e4:	58024400 	.word	0x58024400
 80067e8:	03d09000 	.word	0x03d09000
 80067ec:	003d0900 	.word	0x003d0900
 80067f0:	017d7840 	.word	0x017d7840
 80067f4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067f8:	4ba3      	ldr	r3, [pc, #652]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006804:	d107      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006806:	f107 0318 	add.w	r3, r7, #24
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fa0c 	bl	8006c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006814:	e1e5      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800681a:	e1e2      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800681c:	4b9a      	ldr	r3, [pc, #616]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006828:	d107      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800682a:	f107 030c 	add.w	r3, r7, #12
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fb4e 	bl	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006838:	e1d3      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800683a:	2300      	movs	r3, #0
 800683c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800683e:	e1d0      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006840:	4b91      	ldr	r3, [pc, #580]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006844:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006848:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800684a:	4b8f      	ldr	r3, [pc, #572]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b04      	cmp	r3, #4
 8006854:	d10c      	bne.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006858:	2b00      	cmp	r3, #0
 800685a:	d109      	bne.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800685c:	4b8a      	ldr	r3, [pc, #552]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	08db      	lsrs	r3, r3, #3
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	4a89      	ldr	r2, [pc, #548]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006868:	fa22 f303 	lsr.w	r3, r2, r3
 800686c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800686e:	e01e      	b.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006870:	4b85      	ldr	r3, [pc, #532]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687c:	d106      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800687e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006884:	d102      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006886:	4b82      	ldr	r3, [pc, #520]	; (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800688a:	e010      	b.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800688c:	4b7e      	ldr	r3, [pc, #504]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006898:	d106      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800689a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a0:	d102      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80068a2:	4b7c      	ldr	r3, [pc, #496]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a6:	e002      	b.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80068ac:	e199      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80068ae:	e198      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80068b0:	4b79      	ldr	r3, [pc, #484]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80068b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068b4:	e195      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068ba:	e192      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068c2:	d173      	bne.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80068c4:	4b70      	ldr	r3, [pc, #448]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80068c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068cc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80068ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d4:	d02f      	beq.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80068d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068dc:	d863      	bhi.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80068de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d004      	beq.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ea:	d012      	beq.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80068ec:	e05b      	b.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068ee:	4b66      	ldr	r3, [pc, #408]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068fa:	d107      	bne.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068fc:	f107 0318 	add.w	r3, r7, #24
 8006900:	4618      	mov	r0, r3
 8006902:	f000 f991 	bl	8006c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800690a:	e16a      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800690c:	2300      	movs	r3, #0
 800690e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006910:	e167      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006912:	4b5d      	ldr	r3, [pc, #372]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800691a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800691e:	d107      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006920:	f107 030c 	add.w	r3, r7, #12
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fad3 	bl	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800692e:	e158      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006934:	e155      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006936:	4b54      	ldr	r3, [pc, #336]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800693a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800693e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006940:	4b51      	ldr	r3, [pc, #324]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b04      	cmp	r3, #4
 800694a:	d10c      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800694c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694e:	2b00      	cmp	r3, #0
 8006950:	d109      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006952:	4b4d      	ldr	r3, [pc, #308]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	08db      	lsrs	r3, r3, #3
 8006958:	f003 0303 	and.w	r3, r3, #3
 800695c:	4a4b      	ldr	r2, [pc, #300]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800695e:	fa22 f303 	lsr.w	r3, r2, r3
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006964:	e01e      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006966:	4b48      	ldr	r3, [pc, #288]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006972:	d106      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800697a:	d102      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800697c:	4b44      	ldr	r3, [pc, #272]	; (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006980:	e010      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006982:	4b41      	ldr	r3, [pc, #260]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800698e:	d106      	bne.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006996:	d102      	bne.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006998:	4b3e      	ldr	r3, [pc, #248]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800699a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800699c:	e002      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800699e:	2300      	movs	r3, #0
 80069a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80069a2:	e11e      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80069a4:	e11d      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069aa:	e11a      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b2:	d133      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80069b4:	4b34      	ldr	r3, [pc, #208]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80069b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d004      	beq.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ca:	d012      	beq.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80069cc:	e023      	b.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069ce:	4b2e      	ldr	r3, [pc, #184]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069da:	d107      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 fbc9 	bl	8007178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80069ea:	e0fa      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069f0:	e0f7      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069f2:	4b25      	ldr	r3, [pc, #148]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069fe:	d107      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a00:	f107 0318 	add.w	r3, r7, #24
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 f90f 	bl	8006c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a0e:	e0e8      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a14:	e0e5      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a1a:	e0e2      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a22:	f040 808f 	bne.w	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006a26:	4b18      	ldr	r3, [pc, #96]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006a2e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a36:	d075      	beq.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8006a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a3e:	d87e      	bhi.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a46:	d060      	beq.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a4e:	d876      	bhi.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a56:	d045      	beq.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a5e:	d86e      	bhi.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a66:	d02b      	beq.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a6e:	d866      	bhi.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d004      	beq.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a7c:	d00e      	beq.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006a7e:	e05e      	b.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006a80:	f000 f8bc 	bl	8006bfc <HAL_RCCEx_GetD3PCLK1Freq>
 8006a84:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006a86:	e0ac      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a88:	58024400 	.word	0x58024400
 8006a8c:	03d09000 	.word	0x03d09000
 8006a90:	003d0900 	.word	0x003d0900
 8006a94:	017d7840 	.word	0x017d7840
 8006a98:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a9c:	4b53      	ldr	r3, [pc, #332]	; (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aa8:	d107      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aaa:	f107 0318 	add.w	r3, r7, #24
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 f8ba 	bl	8006c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ab8:	e093      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006abe:	e090      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ac0:	4b4a      	ldr	r3, [pc, #296]	; (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006acc:	d107      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ace:	f107 030c 	add.w	r3, r7, #12
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 f9fc 	bl	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006adc:	e081      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ae2:	e07e      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ae4:	4b41      	ldr	r3, [pc, #260]	; (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d109      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006af0:	4b3e      	ldr	r3, [pc, #248]	; (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	08db      	lsrs	r3, r3, #3
 8006af6:	f003 0303 	and.w	r3, r3, #3
 8006afa:	4a3d      	ldr	r2, [pc, #244]	; (8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006afc:	fa22 f303 	lsr.w	r3, r2, r3
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b02:	e06e      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b08:	e06b      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006b0a:	4b38      	ldr	r3, [pc, #224]	; (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b16:	d102      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8006b18:	4b36      	ldr	r3, [pc, #216]	; (8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b1c:	e061      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b22:	e05e      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b24:	4b31      	ldr	r3, [pc, #196]	; (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b30:	d102      	bne.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8006b32:	4b31      	ldr	r3, [pc, #196]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006b34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b36:	e054      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b3c:	e051      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b42:	e04e      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b4a:	d148      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006b4c:	4b27      	ldr	r3, [pc, #156]	; (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b54:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b5c:	d02a      	beq.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b64:	d838      	bhi.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d004      	beq.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b72:	d00d      	beq.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006b74:	e030      	b.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b76:	4b1d      	ldr	r3, [pc, #116]	; (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b82:	d102      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8006b84:	4b1c      	ldr	r3, [pc, #112]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006b86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b88:	e02b      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b8e:	e028      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b90:	4b16      	ldr	r3, [pc, #88]	; (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b9c:	d107      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fae8 	bl	8007178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006bac:	e019      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bb2:	e016      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bb4:	4b0d      	ldr	r3, [pc, #52]	; (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bc0:	d107      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bc2:	f107 0318 	add.w	r3, r7, #24
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 f82e 	bl	8006c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006bd0:	e007      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bd6:	e004      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bdc:	e001      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3740      	adds	r7, #64	; 0x40
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	58024400 	.word	0x58024400
 8006bf0:	03d09000 	.word	0x03d09000
 8006bf4:	003d0900 	.word	0x003d0900
 8006bf8:	017d7840 	.word	0x017d7840

08006bfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006c00:	f7fe fb8e 	bl	8005320 <HAL_RCC_GetHCLKFreq>
 8006c04:	4602      	mov	r2, r0
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	091b      	lsrs	r3, r3, #4
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	4904      	ldr	r1, [pc, #16]	; (8006c24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006c12:	5ccb      	ldrb	r3, [r1, r3]
 8006c14:	f003 031f 	and.w	r3, r3, #31
 8006c18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	58024400 	.word	0x58024400
 8006c24:	0800e768 	.word	0x0800e768

08006c28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b089      	sub	sp, #36	; 0x24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c30:	4ba1      	ldr	r3, [pc, #644]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	f003 0303 	and.w	r3, r3, #3
 8006c38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006c3a:	4b9f      	ldr	r3, [pc, #636]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	0b1b      	lsrs	r3, r3, #12
 8006c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006c46:	4b9c      	ldr	r3, [pc, #624]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	091b      	lsrs	r3, r3, #4
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006c52:	4b99      	ldr	r3, [pc, #612]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c56:	08db      	lsrs	r3, r3, #3
 8006c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	fb02 f303 	mul.w	r3, r2, r3
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 8111 	beq.w	8006e98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	f000 8083 	beq.w	8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	f200 80a1 	bhi.w	8006dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d056      	beq.n	8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c92:	e099      	b.n	8006dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c94:	4b88      	ldr	r3, [pc, #544]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d02d      	beq.n	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ca0:	4b85      	ldr	r3, [pc, #532]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	08db      	lsrs	r3, r3, #3
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	4a84      	ldr	r2, [pc, #528]	; (8006ebc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006cac:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	ee07 3a90 	vmov	s15, r3
 8006cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cca:	4b7b      	ldr	r3, [pc, #492]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cde:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006cfa:	e087      	b.n	8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0e:	4b6a      	ldr	r3, [pc, #424]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d22:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d3e:	e065      	b.n	8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d52:	4b59      	ldr	r3, [pc, #356]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d66:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d82:	e043      	b.n	8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d96:	4b48      	ldr	r3, [pc, #288]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006daa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dc6:	e021      	b.n	8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dda:	4b37      	ldr	r3, [pc, #220]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de2:	ee07 3a90 	vmov	s15, r3
 8006de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006e0c:	4b2a      	ldr	r3, [pc, #168]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e10:	0a5b      	lsrs	r3, r3, #9
 8006e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e32:	ee17 2a90 	vmov	r2, s15
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006e3a:	4b1f      	ldr	r3, [pc, #124]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3e:	0c1b      	lsrs	r3, r3, #16
 8006e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e44:	ee07 3a90 	vmov	s15, r3
 8006e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e54:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e60:	ee17 2a90 	vmov	r2, s15
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006e68:	4b13      	ldr	r3, [pc, #76]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6c:	0e1b      	lsrs	r3, r3, #24
 8006e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e8e:	ee17 2a90 	vmov	r2, s15
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e96:	e008      	b.n	8006eaa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	609a      	str	r2, [r3, #8]
}
 8006eaa:	bf00      	nop
 8006eac:	3724      	adds	r7, #36	; 0x24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	58024400 	.word	0x58024400
 8006ebc:	03d09000 	.word	0x03d09000
 8006ec0:	46000000 	.word	0x46000000
 8006ec4:	4c742400 	.word	0x4c742400
 8006ec8:	4a742400 	.word	0x4a742400
 8006ecc:	4bbebc20 	.word	0x4bbebc20

08006ed0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b089      	sub	sp, #36	; 0x24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ed8:	4ba1      	ldr	r3, [pc, #644]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006ee2:	4b9f      	ldr	r3, [pc, #636]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee6:	0d1b      	lsrs	r3, r3, #20
 8006ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006eee:	4b9c      	ldr	r3, [pc, #624]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	0a1b      	lsrs	r3, r3, #8
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006efa:	4b99      	ldr	r3, [pc, #612]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efe:	08db      	lsrs	r3, r3, #3
 8006f00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	fb02 f303 	mul.w	r3, r2, r3
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8111 	beq.w	8007140 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	f000 8083 	beq.w	800702c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	f200 80a1 	bhi.w	8007070 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d056      	beq.n	8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006f3a:	e099      	b.n	8007070 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f3c:	4b88      	ldr	r3, [pc, #544]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0320 	and.w	r3, r3, #32
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d02d      	beq.n	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f48:	4b85      	ldr	r3, [pc, #532]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	08db      	lsrs	r3, r3, #3
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	4a84      	ldr	r2, [pc, #528]	; (8007164 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006f54:	fa22 f303 	lsr.w	r3, r2, r3
 8006f58:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	ee07 3a90 	vmov	s15, r3
 8006f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f72:	4b7b      	ldr	r3, [pc, #492]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006fa2:	e087      	b.n	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800716c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb6:	4b6a      	ldr	r3, [pc, #424]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fe6:	e065      	b.n	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffa:	4b59      	ldr	r3, [pc, #356]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700a:	ed97 6a03 	vldr	s12, [r7, #12]
 800700e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800701e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800702a:	e043      	b.n	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007036:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007174 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800703a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800703e:	4b48      	ldr	r3, [pc, #288]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007052:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800706e:	e021      	b.n	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800707e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007082:	4b37      	ldr	r3, [pc, #220]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007092:	ed97 6a03 	vldr	s12, [r7, #12]
 8007096:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800709a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80070b4:	4b2a      	ldr	r3, [pc, #168]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	0a5b      	lsrs	r3, r3, #9
 80070ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80070d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070da:	ee17 2a90 	vmov	r2, s15
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80070e2:	4b1f      	ldr	r3, [pc, #124]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	0c1b      	lsrs	r3, r3, #16
 80070e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ec:	ee07 3a90 	vmov	s15, r3
 80070f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007108:	ee17 2a90 	vmov	r2, s15
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007110:	4b13      	ldr	r3, [pc, #76]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007114:	0e1b      	lsrs	r3, r3, #24
 8007116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800712a:	edd7 6a07 	vldr	s13, [r7, #28]
 800712e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007136:	ee17 2a90 	vmov	r2, s15
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800713e:	e008      	b.n	8007152 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	609a      	str	r2, [r3, #8]
}
 8007152:	bf00      	nop
 8007154:	3724      	adds	r7, #36	; 0x24
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	58024400 	.word	0x58024400
 8007164:	03d09000 	.word	0x03d09000
 8007168:	46000000 	.word	0x46000000
 800716c:	4c742400 	.word	0x4c742400
 8007170:	4a742400 	.word	0x4a742400
 8007174:	4bbebc20 	.word	0x4bbebc20

08007178 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007178:	b480      	push	{r7}
 800717a:	b089      	sub	sp, #36	; 0x24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007180:	4ba0      	ldr	r3, [pc, #640]	; (8007404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	f003 0303 	and.w	r3, r3, #3
 8007188:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800718a:	4b9e      	ldr	r3, [pc, #632]	; (8007404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718e:	091b      	lsrs	r3, r3, #4
 8007190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007194:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007196:	4b9b      	ldr	r3, [pc, #620]	; (8007404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80071a0:	4b98      	ldr	r3, [pc, #608]	; (8007404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a4:	08db      	lsrs	r3, r3, #3
 80071a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	fb02 f303 	mul.w	r3, r2, r3
 80071b0:	ee07 3a90 	vmov	s15, r3
 80071b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 8111 	beq.w	80073e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	f000 8083 	beq.w	80072d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	f200 80a1 	bhi.w	8007316 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d056      	beq.n	800728e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80071e0:	e099      	b.n	8007316 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071e2:	4b88      	ldr	r3, [pc, #544]	; (8007404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0320 	and.w	r3, r3, #32
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d02d      	beq.n	800724a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071ee:	4b85      	ldr	r3, [pc, #532]	; (8007404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	08db      	lsrs	r3, r3, #3
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	4a83      	ldr	r2, [pc, #524]	; (8007408 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80071fa:	fa22 f303 	lsr.w	r3, r2, r3
 80071fe:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	ee07 3a90 	vmov	s15, r3
 8007210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007218:	4b7a      	ldr	r3, [pc, #488]	; (8007404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800721a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007220:	ee07 3a90 	vmov	s15, r3
 8007224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007228:	ed97 6a03 	vldr	s12, [r7, #12]
 800722c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800740c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800723c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007244:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007248:	e087      	b.n	800735a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	ee07 3a90 	vmov	s15, r3
 8007250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007254:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725c:	4b69      	ldr	r3, [pc, #420]	; (8007404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800725e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007264:	ee07 3a90 	vmov	s15, r3
 8007268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007270:	eddf 5a66 	vldr	s11, [pc, #408]	; 800740c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007288:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800728c:	e065      	b.n	800735a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007298:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007414 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800729c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a0:	4b58      	ldr	r3, [pc, #352]	; (8007404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a8:	ee07 3a90 	vmov	s15, r3
 80072ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80072b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800740c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072d0:	e043      	b.n	800735a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	ee07 3a90 	vmov	s15, r3
 80072d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007418 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80072e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e4:	4b47      	ldr	r3, [pc, #284]	; (8007404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ec:	ee07 3a90 	vmov	s15, r3
 80072f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80072f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800740c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007310:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007314:	e021      	b.n	800735a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	ee07 3a90 	vmov	s15, r3
 800731c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007320:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007328:	4b36      	ldr	r3, [pc, #216]	; (8007404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800732a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007330:	ee07 3a90 	vmov	s15, r3
 8007334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007338:	ed97 6a03 	vldr	s12, [r7, #12]
 800733c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800740c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007340:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007344:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007348:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800734c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007354:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007358:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800735a:	4b2a      	ldr	r3, [pc, #168]	; (8007404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800735c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735e:	0a5b      	lsrs	r3, r3, #9
 8007360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007364:	ee07 3a90 	vmov	s15, r3
 8007368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007370:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007374:	edd7 6a07 	vldr	s13, [r7, #28]
 8007378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800737c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007380:	ee17 2a90 	vmov	r2, s15
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007388:	4b1e      	ldr	r3, [pc, #120]	; (8007404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800738a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738c:	0c1b      	lsrs	r3, r3, #16
 800738e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800739e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ae:	ee17 2a90 	vmov	r2, s15
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80073b6:	4b13      	ldr	r3, [pc, #76]	; (8007404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ba:	0e1b      	lsrs	r3, r3, #24
 80073bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c0:	ee07 3a90 	vmov	s15, r3
 80073c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80073d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073dc:	ee17 2a90 	vmov	r2, s15
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80073e4:	e008      	b.n	80073f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	609a      	str	r2, [r3, #8]
}
 80073f8:	bf00      	nop
 80073fa:	3724      	adds	r7, #36	; 0x24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	58024400 	.word	0x58024400
 8007408:	03d09000 	.word	0x03d09000
 800740c:	46000000 	.word	0x46000000
 8007410:	4c742400 	.word	0x4c742400
 8007414:	4a742400 	.word	0x4a742400
 8007418:	4bbebc20 	.word	0x4bbebc20

0800741c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800742a:	4b53      	ldr	r3, [pc, #332]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 800742c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	2b03      	cmp	r3, #3
 8007434:	d101      	bne.n	800743a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e099      	b.n	800756e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800743a:	4b4f      	ldr	r3, [pc, #316]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a4e      	ldr	r2, [pc, #312]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007440:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007446:	f7fa ffc1 	bl	80023cc <HAL_GetTick>
 800744a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800744c:	e008      	b.n	8007460 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800744e:	f7fa ffbd 	bl	80023cc <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	2b02      	cmp	r3, #2
 800745a:	d901      	bls.n	8007460 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e086      	b.n	800756e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007460:	4b45      	ldr	r3, [pc, #276]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1f0      	bne.n	800744e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800746c:	4b42      	ldr	r3, [pc, #264]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 800746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007470:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	031b      	lsls	r3, r3, #12
 800747a:	493f      	ldr	r1, [pc, #252]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 800747c:	4313      	orrs	r3, r2
 800747e:	628b      	str	r3, [r1, #40]	; 0x28
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	3b01      	subs	r3, #1
 8007486:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	3b01      	subs	r3, #1
 8007490:	025b      	lsls	r3, r3, #9
 8007492:	b29b      	uxth	r3, r3
 8007494:	431a      	orrs	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	3b01      	subs	r3, #1
 800749c:	041b      	lsls	r3, r3, #16
 800749e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074a2:	431a      	orrs	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	3b01      	subs	r3, #1
 80074aa:	061b      	lsls	r3, r3, #24
 80074ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074b0:	4931      	ldr	r1, [pc, #196]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80074b6:	4b30      	ldr	r3, [pc, #192]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	492d      	ldr	r1, [pc, #180]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80074c8:	4b2b      	ldr	r3, [pc, #172]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	f023 0220 	bic.w	r2, r3, #32
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	4928      	ldr	r1, [pc, #160]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80074da:	4b27      	ldr	r3, [pc, #156]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074de:	4a26      	ldr	r2, [pc, #152]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074e0:	f023 0310 	bic.w	r3, r3, #16
 80074e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80074e6:	4b24      	ldr	r3, [pc, #144]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074ea:	4b24      	ldr	r3, [pc, #144]	; (800757c <RCCEx_PLL2_Config+0x160>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	69d2      	ldr	r2, [r2, #28]
 80074f2:	00d2      	lsls	r2, r2, #3
 80074f4:	4920      	ldr	r1, [pc, #128]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074fa:	4b1f      	ldr	r3, [pc, #124]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fe:	4a1e      	ldr	r2, [pc, #120]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007500:	f043 0310 	orr.w	r3, r3, #16
 8007504:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d106      	bne.n	800751a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800750c:	4b1a      	ldr	r3, [pc, #104]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 800750e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007510:	4a19      	ldr	r2, [pc, #100]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007516:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007518:	e00f      	b.n	800753a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d106      	bne.n	800752e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007520:	4b15      	ldr	r3, [pc, #84]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	4a14      	ldr	r2, [pc, #80]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800752a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800752c:	e005      	b.n	800753a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800752e:	4b12      	ldr	r3, [pc, #72]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007532:	4a11      	ldr	r2, [pc, #68]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007538:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800753a:	4b0f      	ldr	r3, [pc, #60]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a0e      	ldr	r2, [pc, #56]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007540:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007546:	f7fa ff41 	bl	80023cc <HAL_GetTick>
 800754a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800754c:	e008      	b.n	8007560 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800754e:	f7fa ff3d 	bl	80023cc <HAL_GetTick>
 8007552:	4602      	mov	r2, r0
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	2b02      	cmp	r3, #2
 800755a:	d901      	bls.n	8007560 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e006      	b.n	800756e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007560:	4b05      	ldr	r3, [pc, #20]	; (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d0f0      	beq.n	800754e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	58024400 	.word	0x58024400
 800757c:	ffff0007 	.word	0xffff0007

08007580 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800758e:	4b53      	ldr	r3, [pc, #332]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	2b03      	cmp	r3, #3
 8007598:	d101      	bne.n	800759e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e099      	b.n	80076d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800759e:	4b4f      	ldr	r3, [pc, #316]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a4e      	ldr	r2, [pc, #312]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 80075a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075aa:	f7fa ff0f 	bl	80023cc <HAL_GetTick>
 80075ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075b0:	e008      	b.n	80075c4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80075b2:	f7fa ff0b 	bl	80023cc <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d901      	bls.n	80075c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e086      	b.n	80076d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075c4:	4b45      	ldr	r3, [pc, #276]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1f0      	bne.n	80075b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80075d0:	4b42      	ldr	r3, [pc, #264]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 80075d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	051b      	lsls	r3, r3, #20
 80075de:	493f      	ldr	r1, [pc, #252]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	628b      	str	r3, [r1, #40]	; 0x28
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	025b      	lsls	r3, r3, #9
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	431a      	orrs	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	3b01      	subs	r3, #1
 8007600:	041b      	lsls	r3, r3, #16
 8007602:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	3b01      	subs	r3, #1
 800760e:	061b      	lsls	r3, r3, #24
 8007610:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007614:	4931      	ldr	r1, [pc, #196]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007616:	4313      	orrs	r3, r2
 8007618:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800761a:	4b30      	ldr	r3, [pc, #192]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	492d      	ldr	r1, [pc, #180]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007628:	4313      	orrs	r3, r2
 800762a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800762c:	4b2b      	ldr	r3, [pc, #172]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	4928      	ldr	r1, [pc, #160]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 800763a:	4313      	orrs	r3, r2
 800763c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800763e:	4b27      	ldr	r3, [pc, #156]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007642:	4a26      	ldr	r2, [pc, #152]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007648:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800764a:	4b24      	ldr	r3, [pc, #144]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 800764c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800764e:	4b24      	ldr	r3, [pc, #144]	; (80076e0 <RCCEx_PLL3_Config+0x160>)
 8007650:	4013      	ands	r3, r2
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	69d2      	ldr	r2, [r2, #28]
 8007656:	00d2      	lsls	r2, r2, #3
 8007658:	4920      	ldr	r1, [pc, #128]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 800765a:	4313      	orrs	r3, r2
 800765c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800765e:	4b1f      	ldr	r3, [pc, #124]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007662:	4a1e      	ldr	r2, [pc, #120]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007668:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d106      	bne.n	800767e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007670:	4b1a      	ldr	r3, [pc, #104]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	4a19      	ldr	r2, [pc, #100]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007676:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800767a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800767c:	e00f      	b.n	800769e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d106      	bne.n	8007692 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007684:	4b15      	ldr	r3, [pc, #84]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	4a14      	ldr	r2, [pc, #80]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 800768a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800768e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007690:	e005      	b.n	800769e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007692:	4b12      	ldr	r3, [pc, #72]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007696:	4a11      	ldr	r2, [pc, #68]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007698:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800769c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800769e:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a0e      	ldr	r2, [pc, #56]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 80076a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076aa:	f7fa fe8f 	bl	80023cc <HAL_GetTick>
 80076ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076b0:	e008      	b.n	80076c4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80076b2:	f7fa fe8b 	bl	80023cc <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d901      	bls.n	80076c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e006      	b.n	80076d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076c4:	4b05      	ldr	r3, [pc, #20]	; (80076dc <RCCEx_PLL3_Config+0x15c>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0f0      	beq.n	80076b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	58024400 	.word	0x58024400
 80076e0:	ffff0007 	.word	0xffff0007

080076e4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e04d      	b.n	8007792 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	7a5b      	ldrb	r3, [r3, #9]
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d105      	bne.n	800770c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7f9 feaa 	bl	8001460 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f023 0120 	bic.w	r1, r3, #32
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0204 	orr.w	r2, r2, #4
 8007736:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007742:	2b40      	cmp	r3, #64	; 0x40
 8007744:	d104      	bne.n	8007750 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2204      	movs	r2, #4
 800774a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e020      	b.n	8007792 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8007750:	f7fa fe3c 	bl	80023cc <HAL_GetTick>
 8007754:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8007756:	e00e      	b.n	8007776 <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007758:	f7fa fe38 	bl	80023cc <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d907      	bls.n	8007776 <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2204      	movs	r2, #4
 800776a:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e00d      	b.n	8007792 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b04      	cmp	r3, #4
 8007782:	d0e9      	beq.n	8007758 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b086      	sub	sp, #24
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	607a      	str	r2, [r7, #4]
 80077a6:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d904      	bls.n	80077b8 <HAL_SAI_InitProtocol+0x1e>
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	3b03      	subs	r3, #3
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d812      	bhi.n	80077dc <HAL_SAI_InitProtocol+0x42>
 80077b6:	e008      	b.n	80077ca <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 fabc 	bl	8007d3c <SAI_InitI2S>
 80077c4:	4603      	mov	r3, r0
 80077c6:	75fb      	strb	r3, [r7, #23]
      break;
 80077c8:	e00b      	b.n	80077e2 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	68b9      	ldr	r1, [r7, #8]
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 fb65 	bl	8007ea0 <SAI_InitPCM>
 80077d6:	4603      	mov	r3, r0
 80077d8:	75fb      	strb	r3, [r7, #23]
      break;
 80077da:	e002      	b.n	80077e2 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	75fb      	strb	r3, [r7, #23]
      break;
 80077e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 f807 	bl	80077fc <HAL_SAI_Init>
 80077ee:	4603      	mov	r3, r0
 80077f0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08a      	sub	sp, #40	; 0x28
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e283      	b.n	8007d16 <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800780e:	f7fa fe0d 	bl	800242c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007818:	2b01      	cmp	r3, #1
 800781a:	d113      	bne.n	8007844 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a94      	ldr	r2, [pc, #592]	; (8007a74 <HAL_SAI_Init+0x278>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d004      	beq.n	8007830 <HAL_SAI_Init+0x34>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a93      	ldr	r2, [pc, #588]	; (8007a78 <HAL_SAI_Init+0x27c>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d107      	bne.n	8007840 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007834:	2b01      	cmp	r3, #1
 8007836:	d103      	bne.n	8007840 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e268      	b.n	8007d16 <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a8a      	ldr	r2, [pc, #552]	; (8007a74 <HAL_SAI_Init+0x278>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d004      	beq.n	8007858 <HAL_SAI_Init+0x5c>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a8a      	ldr	r2, [pc, #552]	; (8007a7c <HAL_SAI_Init+0x280>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d102      	bne.n	800785e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8007858:	4b89      	ldr	r3, [pc, #548]	; (8007a80 <HAL_SAI_Init+0x284>)
 800785a:	61bb      	str	r3, [r7, #24]
 800785c:	e028      	b.n	80078b0 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a88      	ldr	r2, [pc, #544]	; (8007a84 <HAL_SAI_Init+0x288>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d004      	beq.n	8007872 <HAL_SAI_Init+0x76>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a86      	ldr	r2, [pc, #536]	; (8007a88 <HAL_SAI_Init+0x28c>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d102      	bne.n	8007878 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8007872:	4b86      	ldr	r3, [pc, #536]	; (8007a8c <HAL_SAI_Init+0x290>)
 8007874:	61bb      	str	r3, [r7, #24]
 8007876:	e01b      	b.n	80078b0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a84      	ldr	r2, [pc, #528]	; (8007a90 <HAL_SAI_Init+0x294>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d004      	beq.n	800788c <HAL_SAI_Init+0x90>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a83      	ldr	r2, [pc, #524]	; (8007a94 <HAL_SAI_Init+0x298>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d102      	bne.n	8007892 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800788c:	4b82      	ldr	r3, [pc, #520]	; (8007a98 <HAL_SAI_Init+0x29c>)
 800788e:	61bb      	str	r3, [r7, #24]
 8007890:	e00e      	b.n	80078b0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a78      	ldr	r2, [pc, #480]	; (8007a78 <HAL_SAI_Init+0x27c>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d004      	beq.n	80078a6 <HAL_SAI_Init+0xaa>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a7e      	ldr	r2, [pc, #504]	; (8007a9c <HAL_SAI_Init+0x2a0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d102      	bne.n	80078ac <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 80078a6:	4b7e      	ldr	r3, [pc, #504]	; (8007aa0 <HAL_SAI_Init+0x2a4>)
 80078a8:	61bb      	str	r3, [r7, #24]
 80078aa:	e001      	b.n	80078b0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e232      	b.n	8007d16 <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d106      	bne.n	80078ca <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7f9 fe39 	bl	800153c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fb6a 	bl	8007fa4 <SAI_Disable>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e21d      	b.n	8007d16 <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2202      	movs	r2, #2
 80078de:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d00c      	beq.n	8007904 <HAL_SAI_Init+0x108>
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d80d      	bhi.n	800790a <HAL_SAI_Init+0x10e>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <HAL_SAI_Init+0xfc>
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d003      	beq.n	80078fe <HAL_SAI_Init+0x102>
 80078f6:	e008      	b.n	800790a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80078fc:	e008      	b.n	8007910 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80078fe:	2310      	movs	r3, #16
 8007900:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007902:	e005      	b.n	8007910 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007904:	2320      	movs	r3, #32
 8007906:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007908:	e002      	b.n	8007910 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800790e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	2b05      	cmp	r3, #5
 8007916:	d832      	bhi.n	800797e <HAL_SAI_Init+0x182>
 8007918:	a201      	add	r2, pc, #4	; (adr r2, 8007920 <HAL_SAI_Init+0x124>)
 800791a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791e:	bf00      	nop
 8007920:	08007939 	.word	0x08007939
 8007924:	0800793f 	.word	0x0800793f
 8007928:	08007947 	.word	0x08007947
 800792c:	0800794f 	.word	0x0800794f
 8007930:	0800795f 	.word	0x0800795f
 8007934:	0800796f 	.word	0x0800796f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007938:	2300      	movs	r3, #0
 800793a:	61fb      	str	r3, [r7, #28]
      break;
 800793c:	e022      	b.n	8007984 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800793e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007942:	61fb      	str	r3, [r7, #28]
      break;
 8007944:	e01e      	b.n	8007984 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007946:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800794a:	61fb      	str	r3, [r7, #28]
      break;
 800794c:	e01a      	b.n	8007984 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800794e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007952:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	f043 0301 	orr.w	r3, r3, #1
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800795c:	e012      	b.n	8007984 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800795e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007962:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	f043 0302 	orr.w	r3, r3, #2
 800796a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800796c:	e00a      	b.n	8007984 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800796e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007972:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	f043 0303 	orr.w	r3, r3, #3
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800797c:	e002      	b.n	8007984 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800797e:	2300      	movs	r3, #0
 8007980:	61fb      	str	r3, [r7, #28]
      break;
 8007982:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007988:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 80ba 	beq.w	8007b08 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8007994:	2300      	movs	r3, #0
 8007996:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a35      	ldr	r2, [pc, #212]	; (8007a74 <HAL_SAI_Init+0x278>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d004      	beq.n	80079ac <HAL_SAI_Init+0x1b0>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a35      	ldr	r2, [pc, #212]	; (8007a7c <HAL_SAI_Init+0x280>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d104      	bne.n	80079b6 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80079ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80079b0:	f7fe fc52 	bl	8006258 <HAL_RCCEx_GetPeriphCLKFreq>
 80079b4:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a32      	ldr	r2, [pc, #200]	; (8007a84 <HAL_SAI_Init+0x288>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d004      	beq.n	80079ca <HAL_SAI_Init+0x1ce>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a30      	ldr	r2, [pc, #192]	; (8007a88 <HAL_SAI_Init+0x28c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d104      	bne.n	80079d4 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80079ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80079ce:	f7fe fc43 	bl	8006258 <HAL_RCCEx_GetPeriphCLKFreq>
 80079d2:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a2d      	ldr	r2, [pc, #180]	; (8007a90 <HAL_SAI_Init+0x294>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d004      	beq.n	80079e8 <HAL_SAI_Init+0x1ec>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a2c      	ldr	r2, [pc, #176]	; (8007a94 <HAL_SAI_Init+0x298>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d104      	bne.n	80079f2 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80079e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80079ec:	f7fe fc34 	bl	8006258 <HAL_RCCEx_GetPeriphCLKFreq>
 80079f0:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a20      	ldr	r2, [pc, #128]	; (8007a78 <HAL_SAI_Init+0x27c>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d104      	bne.n	8007a06 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80079fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007a00:	f7fe fc2a 	bl	8006258 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a04:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a24      	ldr	r2, [pc, #144]	; (8007a9c <HAL_SAI_Init+0x2a0>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d104      	bne.n	8007a1a <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007a10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007a14:	f7fe fc20 	bl	8006258 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a18:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a22:	d120      	bne.n	8007a66 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a28:	2b04      	cmp	r3, #4
 8007a2a:	d102      	bne.n	8007a32 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8007a2c:	2340      	movs	r3, #64	; 0x40
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	e00a      	b.n	8007a48 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a36:	2b08      	cmp	r3, #8
 8007a38:	d103      	bne.n	8007a42 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8007a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a3e:	60fb      	str	r3, [r7, #12]
 8007a40:	e002      	b.n	8007a48 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a46:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	4619      	mov	r1, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	fb02 f303 	mul.w	r3, r2, r3
 8007a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	e02f      	b.n	8007ac6 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a6e:	d119      	bne.n	8007aa4 <HAL_SAI_Init+0x2a8>
 8007a70:	2302      	movs	r3, #2
 8007a72:	e018      	b.n	8007aa6 <HAL_SAI_Init+0x2aa>
 8007a74:	40015804 	.word	0x40015804
 8007a78:	58005404 	.word	0x58005404
 8007a7c:	40015824 	.word	0x40015824
 8007a80:	40015800 	.word	0x40015800
 8007a84:	40015c04 	.word	0x40015c04
 8007a88:	40015c24 	.word	0x40015c24
 8007a8c:	40015c00 	.word	0x40015c00
 8007a90:	40016004 	.word	0x40016004
 8007a94:	40016024 	.word	0x40016024
 8007a98:	40016000 	.word	0x40016000
 8007a9c:	58005424 	.word	0x58005424
 8007aa0:	58005400 	.word	0x58005400
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	fb02 f303 	mul.w	r3, r2, r3
 8007abe:	021b      	lsls	r3, r3, #8
 8007ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ac4:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	4a95      	ldr	r2, [pc, #596]	; (8007d20 <HAL_SAI_Init+0x524>)
 8007aca:	fba2 2303 	umull	r2, r3, r2, r3
 8007ace:	08da      	lsrs	r2, r3, #3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007ad4:	6939      	ldr	r1, [r7, #16]
 8007ad6:	4b92      	ldr	r3, [pc, #584]	; (8007d20 <HAL_SAI_Init+0x524>)
 8007ad8:	fba3 2301 	umull	r2, r3, r3, r1
 8007adc:	08da      	lsrs	r2, r3, #3
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	1aca      	subs	r2, r1, r3
 8007ae8:	2a08      	cmp	r2, #8
 8007aea:	d904      	bls.n	8007af6 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	1c5a      	adds	r2, r3, #1
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d104      	bne.n	8007b08 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	085a      	lsrs	r2, r3, #1
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <HAL_SAI_Init+0x31c>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d109      	bne.n	8007b2c <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d101      	bne.n	8007b24 <HAL_SAI_Init+0x328>
 8007b20:	2300      	movs	r3, #0
 8007b22:	e001      	b.n	8007b28 <HAL_SAI_Init+0x32c>
 8007b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b28:	623b      	str	r3, [r7, #32]
 8007b2a:	e008      	b.n	8007b3e <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d102      	bne.n	8007b3a <HAL_SAI_Init+0x33e>
 8007b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b38:	e000      	b.n	8007b3c <HAL_SAI_Init+0x340>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007b3e:	f7fa fc75 	bl	800242c <HAL_GetREVID>
 8007b42:	4603      	mov	r3, r0
 8007b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b48:	d331      	bcc.n	8007bae <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6819      	ldr	r1, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	4b73      	ldr	r3, [pc, #460]	; (8007d24 <HAL_SAI_Init+0x528>)
 8007b56:	400b      	ands	r3, r1
 8007b58:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6819      	ldr	r1, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b68:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b6e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b74:	431a      	orrs	r2, r3
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007b82:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b8e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	051b      	lsls	r3, r3, #20
 8007b96:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007b9c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	e02d      	b.n	8007c0a <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6819      	ldr	r1, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	4b5b      	ldr	r3, [pc, #364]	; (8007d28 <HAL_SAI_Init+0x52c>)
 8007bba:	400b      	ands	r3, r1
 8007bbc:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6819      	ldr	r1, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bcc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007bd2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8007be6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007bf2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	051b      	lsls	r3, r3, #20
 8007bfa:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007c00:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6859      	ldr	r1, [r3, #4]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	4b45      	ldr	r3, [pc, #276]	; (8007d2c <HAL_SAI_Init+0x530>)
 8007c16:	400b      	ands	r3, r1
 8007c18:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6859      	ldr	r1, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	69da      	ldr	r2, [r3, #28]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	430a      	orrs	r2, r1
 8007c36:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6899      	ldr	r1, [r3, #8]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	4b3b      	ldr	r3, [pc, #236]	; (8007d30 <HAL_SAI_Init+0x534>)
 8007c44:	400b      	ands	r3, r1
 8007c46:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6899      	ldr	r1, [r3, #8]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c52:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007c58:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8007c5e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8007c64:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007c6e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68d9      	ldr	r1, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007c86:	400b      	ands	r3, r1
 8007c88:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68d9      	ldr	r1, [r3, #12]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c98:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c9e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007ca0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	021b      	lsls	r3, r3, #8
 8007caa:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a1e      	ldr	r2, [pc, #120]	; (8007d34 <HAL_SAI_Init+0x538>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d004      	beq.n	8007cc8 <HAL_SAI_Init+0x4cc>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a1d      	ldr	r2, [pc, #116]	; (8007d38 <HAL_SAI_Init+0x53c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d119      	bne.n	8007cfc <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ccc:	f023 0201 	bic.w	r2, r3, #1
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d10e      	bne.n	8007cfc <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007cea:	431a      	orrs	r2, r3
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf4:	f043 0201 	orr.w	r2, r3, #1
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3728      	adds	r7, #40	; 0x28
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	cccccccd 	.word	0xcccccccd
 8007d24:	f005c010 	.word	0xf005c010
 8007d28:	f805c010 	.word	0xf805c010
 8007d2c:	ffff1ff0 	.word	0xffff1ff0
 8007d30:	fff88000 	.word	0xfff88000
 8007d34:	40015804 	.word	0x40015804
 8007d38:	58005404 	.word	0x58005404

08007d3c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <SAI_InitI2S+0x2e>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d103      	bne.n	8007d72 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	651a      	str	r2, [r3, #80]	; 0x50
 8007d70:	e002      	b.n	8007d78 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2201      	movs	r2, #1
 8007d76:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007d7e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d86:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e077      	b.n	8007e92 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d107      	bne.n	8007db8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007db4:	665a      	str	r2, [r3, #100]	; 0x64
 8007db6:	e006      	b.n	8007dc6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007dbe:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	665a      	str	r2, [r3, #100]	; 0x64
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d84f      	bhi.n	8007e6c <SAI_InitI2S+0x130>
 8007dcc:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <SAI_InitI2S+0x98>)
 8007dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd2:	bf00      	nop
 8007dd4:	08007de5 	.word	0x08007de5
 8007dd8:	08007e07 	.word	0x08007e07
 8007ddc:	08007e29 	.word	0x08007e29
 8007de0:	08007e4b 	.word	0x08007e4b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2280      	movs	r2, #128	; 0x80
 8007de8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	085b      	lsrs	r3, r3, #1
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	085b      	lsrs	r3, r3, #1
 8007df8:	011a      	lsls	r2, r3, #4
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2240      	movs	r2, #64	; 0x40
 8007e02:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007e04:	e035      	b.n	8007e72 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2280      	movs	r2, #128	; 0x80
 8007e0a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	085b      	lsrs	r3, r3, #1
 8007e10:	019a      	lsls	r2, r3, #6
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	085b      	lsrs	r3, r3, #1
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2280      	movs	r2, #128	; 0x80
 8007e24:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007e26:	e024      	b.n	8007e72 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	22c0      	movs	r2, #192	; 0xc0
 8007e2c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	085b      	lsrs	r3, r3, #1
 8007e32:	019a      	lsls	r2, r3, #6
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	085b      	lsrs	r3, r3, #1
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2280      	movs	r2, #128	; 0x80
 8007e46:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007e48:	e013      	b.n	8007e72 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	22e0      	movs	r2, #224	; 0xe0
 8007e4e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	085b      	lsrs	r3, r3, #1
 8007e54:	019a      	lsls	r2, r3, #6
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	085b      	lsrs	r3, r3, #1
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2280      	movs	r2, #128	; 0x80
 8007e68:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007e6a:	e002      	b.n	8007e72 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e70:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d10b      	bne.n	8007e90 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d102      	bne.n	8007e84 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2210      	movs	r2, #16
 8007e82:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d102      	bne.n	8007e90 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2208      	movs	r2, #8
 8007e8e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8007e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop

08007ea0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <SAI_InitPCM+0x2e>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d103      	bne.n	8007ed6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	651a      	str	r2, [r3, #80]	; 0x50
 8007ed4:	e002      	b.n	8007edc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007ee8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007ef0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f04:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	d103      	bne.n	8007f14 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	659a      	str	r2, [r3, #88]	; 0x58
 8007f12:	e002      	b.n	8007f1a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	220d      	movs	r2, #13
 8007f18:	659a      	str	r2, [r3, #88]	; 0x58
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b03      	cmp	r3, #3
 8007f1e:	d837      	bhi.n	8007f90 <SAI_InitPCM+0xf0>
 8007f20:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <SAI_InitPCM+0x88>)
 8007f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f26:	bf00      	nop
 8007f28:	08007f39 	.word	0x08007f39
 8007f2c:	08007f4f 	.word	0x08007f4f
 8007f30:	08007f65 	.word	0x08007f65
 8007f34:	08007f7b 	.word	0x08007f7b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2280      	movs	r2, #128	; 0x80
 8007f3c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	011a      	lsls	r2, r3, #4
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2240      	movs	r2, #64	; 0x40
 8007f4a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f4c:	e023      	b.n	8007f96 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2280      	movs	r2, #128	; 0x80
 8007f52:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2280      	movs	r2, #128	; 0x80
 8007f60:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f62:	e018      	b.n	8007f96 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	22c0      	movs	r2, #192	; 0xc0
 8007f68:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2280      	movs	r2, #128	; 0x80
 8007f76:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f78:	e00d      	b.n	8007f96 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	22e0      	movs	r2, #224	; 0xe0
 8007f7e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2280      	movs	r2, #128	; 0x80
 8007f8c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f8e:	e002      	b.n	8007f96 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	75fb      	strb	r3, [r7, #23]
      break;
 8007f94:	bf00      	nop
  }

  return status;
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	371c      	adds	r7, #28
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007fac:	4b18      	ldr	r3, [pc, #96]	; (8008010 <SAI_Disable+0x6c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a18      	ldr	r2, [pc, #96]	; (8008014 <SAI_Disable+0x70>)
 8007fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb6:	0b1b      	lsrs	r3, r3, #12
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007fce:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10a      	bne.n	8007fec <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	72fb      	strb	r3, [r7, #11]
      break;
 8007fea:	e009      	b.n	8008000 <SAI_Disable+0x5c>
    }
    count--;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e7      	bne.n	8007fd0 <SAI_Disable+0x2c>

  return status;
 8008000:	7afb      	ldrb	r3, [r7, #11]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	24000000 	.word	0x24000000
 8008014:	95cbec1b 	.word	0x95cbec1b

08008018 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e0eb      	b.n	8008206 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a75      	ldr	r2, [pc, #468]	; (8008210 <HAL_SPI_Init+0x1f8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d00f      	beq.n	800805e <HAL_SPI_Init+0x46>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a74      	ldr	r2, [pc, #464]	; (8008214 <HAL_SPI_Init+0x1fc>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00a      	beq.n	800805e <HAL_SPI_Init+0x46>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a72      	ldr	r2, [pc, #456]	; (8008218 <HAL_SPI_Init+0x200>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d005      	beq.n	800805e <HAL_SPI_Init+0x46>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	2b0f      	cmp	r3, #15
 8008058:	d901      	bls.n	800805e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e0d3      	b.n	8008206 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f8dc 	bl	800821c <SPI_GetPacketSize>
 8008064:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a69      	ldr	r2, [pc, #420]	; (8008210 <HAL_SPI_Init+0x1f8>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d00c      	beq.n	800808a <HAL_SPI_Init+0x72>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a67      	ldr	r2, [pc, #412]	; (8008214 <HAL_SPI_Init+0x1fc>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d007      	beq.n	800808a <HAL_SPI_Init+0x72>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a66      	ldr	r2, [pc, #408]	; (8008218 <HAL_SPI_Init+0x200>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d002      	beq.n	800808a <HAL_SPI_Init+0x72>
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b08      	cmp	r3, #8
 8008088:	d811      	bhi.n	80080ae <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800808e:	4a60      	ldr	r2, [pc, #384]	; (8008210 <HAL_SPI_Init+0x1f8>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d009      	beq.n	80080a8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a5e      	ldr	r2, [pc, #376]	; (8008214 <HAL_SPI_Init+0x1fc>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d004      	beq.n	80080a8 <HAL_SPI_Init+0x90>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a5d      	ldr	r2, [pc, #372]	; (8008218 <HAL_SPI_Init+0x200>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d104      	bne.n	80080b2 <HAL_SPI_Init+0x9a>
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b10      	cmp	r3, #16
 80080ac:	d901      	bls.n	80080b2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e0a9      	b.n	8008206 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d106      	bne.n	80080cc <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7f9 fafe 	bl	80016c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f022 0201 	bic.w	r2, r2, #1
 80080e2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080ec:	d119      	bne.n	8008122 <HAL_SPI_Init+0x10a>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080f6:	d103      	bne.n	8008100 <HAL_SPI_Init+0xe8>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d008      	beq.n	8008112 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10c      	bne.n	8008122 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008110:	d107      	bne.n	8008122 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008120:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	69da      	ldr	r2, [r3, #28]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812a:	431a      	orrs	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	431a      	orrs	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008134:	ea42 0103 	orr.w	r1, r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68da      	ldr	r2, [r3, #12]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	431a      	orrs	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008152:	431a      	orrs	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	431a      	orrs	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	431a      	orrs	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	431a      	orrs	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	431a      	orrs	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008176:	431a      	orrs	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	431a      	orrs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008182:	ea42 0103 	orr.w	r1, r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d113      	bne.n	80081c2 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0201 	bic.w	r2, r2, #1
 80081d0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	430a      	orrs	r2, r1
 80081f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	40013000 	.word	0x40013000
 8008214:	40003800 	.word	0x40003800
 8008218:	40003c00 	.word	0x40003c00

0800821c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008228:	095b      	lsrs	r3, r3, #5
 800822a:	3301      	adds	r3, #1
 800822c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	3301      	adds	r3, #1
 8008234:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	3307      	adds	r3, #7
 800823a:	08db      	lsrs	r3, r3, #3
 800823c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	fb02 f303 	mul.w	r3, r2, r3
}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
	...

08008254 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e03e      	b.n	80082e8 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d106      	bne.n	8008284 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f7f8 fe88 	bl	8000f94 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	3308      	adds	r3, #8
 800828c:	4619      	mov	r1, r3
 800828e:	4610      	mov	r0, r2
 8008290:	f001 fdd0 	bl	8009e34 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	461a      	mov	r2, r3
 800829e:	68b9      	ldr	r1, [r7, #8]
 80082a0:	f001 fe58 	bl	8009f54 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6858      	ldr	r0, [r3, #4]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b0:	6879      	ldr	r1, [r7, #4]
 80082b2:	f001 fe9f 	bl	8009ff4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	6892      	ldr	r2, [r2, #8]
 80082be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	6892      	ldr	r2, [r2, #8]
 80082ca:	f041 0101 	orr.w	r1, r1, #1
 80082ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80082d2:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <HAL_SRAM_Init+0x9c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a06      	ldr	r2, [pc, #24]	; (80082f0 <HAL_SRAM_Init+0x9c>)
 80082d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082dc:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	52004000 	.word	0x52004000

080082f4 <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b089      	sub	sp, #36	; 0x24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b01      	cmp	r3, #1
 8008314:	d12b      	bne.n	800836e <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800831c:	2b01      	cmp	r3, #1
 800831e:	d101      	bne.n	8008324 <HAL_SRAM_Write_8b+0x30>
 8008320:	2302      	movs	r3, #2
 8008322:	e025      	b.n	8008370 <HAL_SRAM_Write_8b+0x7c>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	61fb      	str	r3, [r7, #28]
 8008338:	e00c      	b.n	8008354 <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	781a      	ldrb	r2, [r3, #0]
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	3301      	adds	r3, #1
 8008346:	617b      	str	r3, [r7, #20]
      psramaddress++;
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	3301      	adds	r3, #1
 800834c:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	3b01      	subs	r3, #1
 8008352:	61fb      	str	r3, [r7, #28]
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1ef      	bne.n	800833a <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	e000      	b.n	8008370 <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
}
 8008370:	4618      	mov	r0, r3
 8008372:	3724      	adds	r7, #36	; 0x24
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e049      	b.n	8008422 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d106      	bne.n	80083a8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7f9 fd54 	bl	8001e50 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3304      	adds	r3, #4
 80083b8:	4619      	mov	r1, r3
 80083ba:	4610      	mov	r0, r2
 80083bc:	f000 f8ac 	bl	8008518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800843e:	2b01      	cmp	r3, #1
 8008440:	d101      	bne.n	8008446 <HAL_TIM_OC_ConfigChannel+0x1a>
 8008442:	2302      	movs	r3, #2
 8008444:	e064      	b.n	8008510 <HAL_TIM_OC_ConfigChannel+0xe4>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b14      	cmp	r3, #20
 8008452:	d857      	bhi.n	8008504 <HAL_TIM_OC_ConfigChannel+0xd8>
 8008454:	a201      	add	r2, pc, #4	; (adr r2, 800845c <HAL_TIM_OC_ConfigChannel+0x30>)
 8008456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845a:	bf00      	nop
 800845c:	080084b1 	.word	0x080084b1
 8008460:	08008505 	.word	0x08008505
 8008464:	08008505 	.word	0x08008505
 8008468:	08008505 	.word	0x08008505
 800846c:	080084bf 	.word	0x080084bf
 8008470:	08008505 	.word	0x08008505
 8008474:	08008505 	.word	0x08008505
 8008478:	08008505 	.word	0x08008505
 800847c:	080084cd 	.word	0x080084cd
 8008480:	08008505 	.word	0x08008505
 8008484:	08008505 	.word	0x08008505
 8008488:	08008505 	.word	0x08008505
 800848c:	080084db 	.word	0x080084db
 8008490:	08008505 	.word	0x08008505
 8008494:	08008505 	.word	0x08008505
 8008498:	08008505 	.word	0x08008505
 800849c:	080084e9 	.word	0x080084e9
 80084a0:	08008505 	.word	0x08008505
 80084a4:	08008505 	.word	0x08008505
 80084a8:	08008505 	.word	0x08008505
 80084ac:	080084f7 	.word	0x080084f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68b9      	ldr	r1, [r7, #8]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 f8c8 	bl	800864c <TIM_OC1_SetConfig>
      break;
 80084bc:	e023      	b.n	8008506 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68b9      	ldr	r1, [r7, #8]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 f951 	bl	800876c <TIM_OC2_SetConfig>
      break;
 80084ca:	e01c      	b.n	8008506 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68b9      	ldr	r1, [r7, #8]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f9d4 	bl	8008880 <TIM_OC3_SetConfig>
      break;
 80084d8:	e015      	b.n	8008506 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68b9      	ldr	r1, [r7, #8]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fa53 	bl	800898c <TIM_OC4_SetConfig>
      break;
 80084e6:	e00e      	b.n	8008506 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fab4 	bl	8008a5c <TIM_OC5_SetConfig>
      break;
 80084f4:	e007      	b.n	8008506 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68b9      	ldr	r1, [r7, #8]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fb0f 	bl	8008b20 <TIM_OC6_SetConfig>
      break;
 8008502:	e000      	b.n	8008506 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8008504:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a40      	ldr	r2, [pc, #256]	; (800862c <TIM_Base_SetConfig+0x114>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d013      	beq.n	8008558 <TIM_Base_SetConfig+0x40>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008536:	d00f      	beq.n	8008558 <TIM_Base_SetConfig+0x40>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a3d      	ldr	r2, [pc, #244]	; (8008630 <TIM_Base_SetConfig+0x118>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d00b      	beq.n	8008558 <TIM_Base_SetConfig+0x40>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a3c      	ldr	r2, [pc, #240]	; (8008634 <TIM_Base_SetConfig+0x11c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d007      	beq.n	8008558 <TIM_Base_SetConfig+0x40>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a3b      	ldr	r2, [pc, #236]	; (8008638 <TIM_Base_SetConfig+0x120>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d003      	beq.n	8008558 <TIM_Base_SetConfig+0x40>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a3a      	ldr	r2, [pc, #232]	; (800863c <TIM_Base_SetConfig+0x124>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d108      	bne.n	800856a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4313      	orrs	r3, r2
 8008568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a2f      	ldr	r2, [pc, #188]	; (800862c <TIM_Base_SetConfig+0x114>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d01f      	beq.n	80085b2 <TIM_Base_SetConfig+0x9a>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008578:	d01b      	beq.n	80085b2 <TIM_Base_SetConfig+0x9a>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a2c      	ldr	r2, [pc, #176]	; (8008630 <TIM_Base_SetConfig+0x118>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d017      	beq.n	80085b2 <TIM_Base_SetConfig+0x9a>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a2b      	ldr	r2, [pc, #172]	; (8008634 <TIM_Base_SetConfig+0x11c>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d013      	beq.n	80085b2 <TIM_Base_SetConfig+0x9a>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a2a      	ldr	r2, [pc, #168]	; (8008638 <TIM_Base_SetConfig+0x120>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d00f      	beq.n	80085b2 <TIM_Base_SetConfig+0x9a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a29      	ldr	r2, [pc, #164]	; (800863c <TIM_Base_SetConfig+0x124>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d00b      	beq.n	80085b2 <TIM_Base_SetConfig+0x9a>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a28      	ldr	r2, [pc, #160]	; (8008640 <TIM_Base_SetConfig+0x128>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d007      	beq.n	80085b2 <TIM_Base_SetConfig+0x9a>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a27      	ldr	r2, [pc, #156]	; (8008644 <TIM_Base_SetConfig+0x12c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d003      	beq.n	80085b2 <TIM_Base_SetConfig+0x9a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a26      	ldr	r2, [pc, #152]	; (8008648 <TIM_Base_SetConfig+0x130>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d108      	bne.n	80085c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	689a      	ldr	r2, [r3, #8]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a10      	ldr	r2, [pc, #64]	; (800862c <TIM_Base_SetConfig+0x114>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d00f      	beq.n	8008610 <TIM_Base_SetConfig+0xf8>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a12      	ldr	r2, [pc, #72]	; (800863c <TIM_Base_SetConfig+0x124>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d00b      	beq.n	8008610 <TIM_Base_SetConfig+0xf8>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a11      	ldr	r2, [pc, #68]	; (8008640 <TIM_Base_SetConfig+0x128>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d007      	beq.n	8008610 <TIM_Base_SetConfig+0xf8>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a10      	ldr	r2, [pc, #64]	; (8008644 <TIM_Base_SetConfig+0x12c>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d003      	beq.n	8008610 <TIM_Base_SetConfig+0xf8>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a0f      	ldr	r2, [pc, #60]	; (8008648 <TIM_Base_SetConfig+0x130>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d103      	bne.n	8008618 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	691a      	ldr	r2, [r3, #16]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	615a      	str	r2, [r3, #20]
}
 800861e:	bf00      	nop
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	40010000 	.word	0x40010000
 8008630:	40000400 	.word	0x40000400
 8008634:	40000800 	.word	0x40000800
 8008638:	40000c00 	.word	0x40000c00
 800863c:	40010400 	.word	0x40010400
 8008640:	40014000 	.word	0x40014000
 8008644:	40014400 	.word	0x40014400
 8008648:	40014800 	.word	0x40014800

0800864c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	f023 0201 	bic.w	r2, r3, #1
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4b37      	ldr	r3, [pc, #220]	; (8008754 <TIM_OC1_SetConfig+0x108>)
 8008678:	4013      	ands	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f023 0303 	bic.w	r3, r3, #3
 8008682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f023 0302 	bic.w	r3, r3, #2
 8008694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	4313      	orrs	r3, r2
 800869e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a2d      	ldr	r2, [pc, #180]	; (8008758 <TIM_OC1_SetConfig+0x10c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d00f      	beq.n	80086c8 <TIM_OC1_SetConfig+0x7c>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a2c      	ldr	r2, [pc, #176]	; (800875c <TIM_OC1_SetConfig+0x110>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d00b      	beq.n	80086c8 <TIM_OC1_SetConfig+0x7c>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a2b      	ldr	r2, [pc, #172]	; (8008760 <TIM_OC1_SetConfig+0x114>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d007      	beq.n	80086c8 <TIM_OC1_SetConfig+0x7c>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a2a      	ldr	r2, [pc, #168]	; (8008764 <TIM_OC1_SetConfig+0x118>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d003      	beq.n	80086c8 <TIM_OC1_SetConfig+0x7c>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a29      	ldr	r2, [pc, #164]	; (8008768 <TIM_OC1_SetConfig+0x11c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d10c      	bne.n	80086e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f023 0308 	bic.w	r3, r3, #8
 80086ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f023 0304 	bic.w	r3, r3, #4
 80086e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a1c      	ldr	r2, [pc, #112]	; (8008758 <TIM_OC1_SetConfig+0x10c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d00f      	beq.n	800870a <TIM_OC1_SetConfig+0xbe>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a1b      	ldr	r2, [pc, #108]	; (800875c <TIM_OC1_SetConfig+0x110>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d00b      	beq.n	800870a <TIM_OC1_SetConfig+0xbe>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a1a      	ldr	r2, [pc, #104]	; (8008760 <TIM_OC1_SetConfig+0x114>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d007      	beq.n	800870a <TIM_OC1_SetConfig+0xbe>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a19      	ldr	r2, [pc, #100]	; (8008764 <TIM_OC1_SetConfig+0x118>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d003      	beq.n	800870a <TIM_OC1_SetConfig+0xbe>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a18      	ldr	r2, [pc, #96]	; (8008768 <TIM_OC1_SetConfig+0x11c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d111      	bne.n	800872e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	4313      	orrs	r3, r2
 8008722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	4313      	orrs	r3, r2
 800872c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685a      	ldr	r2, [r3, #4]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	621a      	str	r2, [r3, #32]
}
 8008748:	bf00      	nop
 800874a:	371c      	adds	r7, #28
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	fffeff8f 	.word	0xfffeff8f
 8008758:	40010000 	.word	0x40010000
 800875c:	40010400 	.word	0x40010400
 8008760:	40014000 	.word	0x40014000
 8008764:	40014400 	.word	0x40014400
 8008768:	40014800 	.word	0x40014800

0800876c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	f023 0210 	bic.w	r2, r3, #16
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	4b34      	ldr	r3, [pc, #208]	; (8008868 <TIM_OC2_SetConfig+0xfc>)
 8008798:	4013      	ands	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	021b      	lsls	r3, r3, #8
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f023 0320 	bic.w	r3, r3, #32
 80087b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	011b      	lsls	r3, r3, #4
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a29      	ldr	r2, [pc, #164]	; (800886c <TIM_OC2_SetConfig+0x100>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d003      	beq.n	80087d4 <TIM_OC2_SetConfig+0x68>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a28      	ldr	r2, [pc, #160]	; (8008870 <TIM_OC2_SetConfig+0x104>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d10d      	bne.n	80087f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	011b      	lsls	r3, r3, #4
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a1e      	ldr	r2, [pc, #120]	; (800886c <TIM_OC2_SetConfig+0x100>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d00f      	beq.n	8008818 <TIM_OC2_SetConfig+0xac>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a1d      	ldr	r2, [pc, #116]	; (8008870 <TIM_OC2_SetConfig+0x104>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00b      	beq.n	8008818 <TIM_OC2_SetConfig+0xac>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a1c      	ldr	r2, [pc, #112]	; (8008874 <TIM_OC2_SetConfig+0x108>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d007      	beq.n	8008818 <TIM_OC2_SetConfig+0xac>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a1b      	ldr	r2, [pc, #108]	; (8008878 <TIM_OC2_SetConfig+0x10c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d003      	beq.n	8008818 <TIM_OC2_SetConfig+0xac>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a1a      	ldr	r2, [pc, #104]	; (800887c <TIM_OC2_SetConfig+0x110>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d113      	bne.n	8008840 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800881e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008826:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	4313      	orrs	r3, r2
 8008832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	4313      	orrs	r3, r2
 800883e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	621a      	str	r2, [r3, #32]
}
 800885a:	bf00      	nop
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	feff8fff 	.word	0xfeff8fff
 800886c:	40010000 	.word	0x40010000
 8008870:	40010400 	.word	0x40010400
 8008874:	40014000 	.word	0x40014000
 8008878:	40014400 	.word	0x40014400
 800887c:	40014800 	.word	0x40014800

08008880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f023 0303 	bic.w	r3, r3, #3
 80088b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	4313      	orrs	r3, r2
 80088c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	021b      	lsls	r3, r3, #8
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a27      	ldr	r2, [pc, #156]	; (8008978 <TIM_OC3_SetConfig+0xf8>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d003      	beq.n	80088e6 <TIM_OC3_SetConfig+0x66>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a26      	ldr	r2, [pc, #152]	; (800897c <TIM_OC3_SetConfig+0xfc>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d10d      	bne.n	8008902 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	021b      	lsls	r3, r3, #8
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a1c      	ldr	r2, [pc, #112]	; (8008978 <TIM_OC3_SetConfig+0xf8>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d00f      	beq.n	800892a <TIM_OC3_SetConfig+0xaa>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a1b      	ldr	r2, [pc, #108]	; (800897c <TIM_OC3_SetConfig+0xfc>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d00b      	beq.n	800892a <TIM_OC3_SetConfig+0xaa>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a1a      	ldr	r2, [pc, #104]	; (8008980 <TIM_OC3_SetConfig+0x100>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d007      	beq.n	800892a <TIM_OC3_SetConfig+0xaa>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a19      	ldr	r2, [pc, #100]	; (8008984 <TIM_OC3_SetConfig+0x104>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d003      	beq.n	800892a <TIM_OC3_SetConfig+0xaa>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a18      	ldr	r2, [pc, #96]	; (8008988 <TIM_OC3_SetConfig+0x108>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d113      	bne.n	8008952 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	4313      	orrs	r3, r2
 8008944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	011b      	lsls	r3, r3, #4
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	4313      	orrs	r3, r2
 8008950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	621a      	str	r2, [r3, #32]
}
 800896c:	bf00      	nop
 800896e:	371c      	adds	r7, #28
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	40010000 	.word	0x40010000
 800897c:	40010400 	.word	0x40010400
 8008980:	40014000 	.word	0x40014000
 8008984:	40014400 	.word	0x40014400
 8008988:	40014800 	.word	0x40014800

0800898c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800898c:	b480      	push	{r7}
 800898e:	b087      	sub	sp, #28
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	021b      	lsls	r3, r3, #8
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	031b      	lsls	r3, r3, #12
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a18      	ldr	r2, [pc, #96]	; (8008a48 <TIM_OC4_SetConfig+0xbc>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d00f      	beq.n	8008a0c <TIM_OC4_SetConfig+0x80>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a17      	ldr	r2, [pc, #92]	; (8008a4c <TIM_OC4_SetConfig+0xc0>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d00b      	beq.n	8008a0c <TIM_OC4_SetConfig+0x80>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a16      	ldr	r2, [pc, #88]	; (8008a50 <TIM_OC4_SetConfig+0xc4>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d007      	beq.n	8008a0c <TIM_OC4_SetConfig+0x80>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a15      	ldr	r2, [pc, #84]	; (8008a54 <TIM_OC4_SetConfig+0xc8>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d003      	beq.n	8008a0c <TIM_OC4_SetConfig+0x80>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a14      	ldr	r2, [pc, #80]	; (8008a58 <TIM_OC4_SetConfig+0xcc>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d109      	bne.n	8008a20 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	019b      	lsls	r3, r3, #6
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	621a      	str	r2, [r3, #32]
}
 8008a3a:	bf00      	nop
 8008a3c:	371c      	adds	r7, #28
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	40010000 	.word	0x40010000
 8008a4c:	40010400 	.word	0x40010400
 8008a50:	40014000 	.word	0x40014000
 8008a54:	40014400 	.word	0x40014400
 8008a58:	40014800 	.word	0x40014800

08008a5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b087      	sub	sp, #28
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	041b      	lsls	r3, r3, #16
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a17      	ldr	r2, [pc, #92]	; (8008b0c <TIM_OC5_SetConfig+0xb0>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d00f      	beq.n	8008ad2 <TIM_OC5_SetConfig+0x76>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a16      	ldr	r2, [pc, #88]	; (8008b10 <TIM_OC5_SetConfig+0xb4>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d00b      	beq.n	8008ad2 <TIM_OC5_SetConfig+0x76>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a15      	ldr	r2, [pc, #84]	; (8008b14 <TIM_OC5_SetConfig+0xb8>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d007      	beq.n	8008ad2 <TIM_OC5_SetConfig+0x76>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a14      	ldr	r2, [pc, #80]	; (8008b18 <TIM_OC5_SetConfig+0xbc>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d003      	beq.n	8008ad2 <TIM_OC5_SetConfig+0x76>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a13      	ldr	r2, [pc, #76]	; (8008b1c <TIM_OC5_SetConfig+0xc0>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d109      	bne.n	8008ae6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	021b      	lsls	r3, r3, #8
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	621a      	str	r2, [r3, #32]
}
 8008b00:	bf00      	nop
 8008b02:	371c      	adds	r7, #28
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	40010000 	.word	0x40010000
 8008b10:	40010400 	.word	0x40010400
 8008b14:	40014000 	.word	0x40014000
 8008b18:	40014400 	.word	0x40014400
 8008b1c:	40014800 	.word	0x40014800

08008b20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b087      	sub	sp, #28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	021b      	lsls	r3, r3, #8
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	051b      	lsls	r3, r3, #20
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a18      	ldr	r2, [pc, #96]	; (8008bd4 <TIM_OC6_SetConfig+0xb4>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d00f      	beq.n	8008b98 <TIM_OC6_SetConfig+0x78>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a17      	ldr	r2, [pc, #92]	; (8008bd8 <TIM_OC6_SetConfig+0xb8>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d00b      	beq.n	8008b98 <TIM_OC6_SetConfig+0x78>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a16      	ldr	r2, [pc, #88]	; (8008bdc <TIM_OC6_SetConfig+0xbc>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d007      	beq.n	8008b98 <TIM_OC6_SetConfig+0x78>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a15      	ldr	r2, [pc, #84]	; (8008be0 <TIM_OC6_SetConfig+0xc0>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d003      	beq.n	8008b98 <TIM_OC6_SetConfig+0x78>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a14      	ldr	r2, [pc, #80]	; (8008be4 <TIM_OC6_SetConfig+0xc4>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d109      	bne.n	8008bac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	029b      	lsls	r3, r3, #10
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	621a      	str	r2, [r3, #32]
}
 8008bc6:	bf00      	nop
 8008bc8:	371c      	adds	r7, #28
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	40010000 	.word	0x40010000
 8008bd8:	40010400 	.word	0x40010400
 8008bdc:	40014000 	.word	0x40014000
 8008be0:	40014400 	.word	0x40014400
 8008be4:	40014800 	.word	0x40014800

08008be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d101      	bne.n	8008c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e068      	b.n	8008cd2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a2e      	ldr	r2, [pc, #184]	; (8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d004      	beq.n	8008c34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a2d      	ldr	r2, [pc, #180]	; (8008ce4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d108      	bne.n	8008c46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a1e      	ldr	r2, [pc, #120]	; (8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d01d      	beq.n	8008ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c72:	d018      	beq.n	8008ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a1b      	ldr	r2, [pc, #108]	; (8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d013      	beq.n	8008ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a1a      	ldr	r2, [pc, #104]	; (8008cec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d00e      	beq.n	8008ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a18      	ldr	r2, [pc, #96]	; (8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d009      	beq.n	8008ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a13      	ldr	r2, [pc, #76]	; (8008ce4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d004      	beq.n	8008ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a14      	ldr	r2, [pc, #80]	; (8008cf4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d10c      	bne.n	8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	40010000 	.word	0x40010000
 8008ce4:	40010400 	.word	0x40010400
 8008ce8:	40000400 	.word	0x40000400
 8008cec:	40000800 	.word	0x40000800
 8008cf0:	40000c00 	.word	0x40000c00
 8008cf4:	40001800 	.word	0x40001800

08008cf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d02:	2300      	movs	r3, #0
 8008d04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d101      	bne.n	8008d14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d10:	2302      	movs	r3, #2
 8008d12:	e065      	b.n	8008de0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	041b      	lsls	r3, r3, #16
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a16      	ldr	r2, [pc, #88]	; (8008dec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d004      	beq.n	8008da2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a14      	ldr	r2, [pc, #80]	; (8008df0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d115      	bne.n	8008dce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	051b      	lsls	r3, r3, #20
 8008dae:	4313      	orrs	r3, r2
 8008db0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	69db      	ldr	r3, [r3, #28]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	40010000 	.word	0x40010000
 8008df0:	40010400 	.word	0x40010400

08008df4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e042      	b.n	8008e8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d106      	bne.n	8008e1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7f9 f9c3 	bl	80021a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2224      	movs	r2, #36	; 0x24
 8008e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f022 0201 	bic.w	r2, r2, #1
 8008e34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f82c 	bl	8008e94 <UART_SetConfig>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d101      	bne.n	8008e46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e022      	b.n	8008e8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fd80 	bl	8009954 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	685a      	ldr	r2, [r3, #4]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	689a      	ldr	r2, [r3, #8]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 0201 	orr.w	r2, r2, #1
 8008e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fe07 	bl	8009a98 <UART_CheckIdleState>
 8008e8a:	4603      	mov	r3, r0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e94:	b5b0      	push	{r4, r5, r7, lr}
 8008e96:	b08e      	sub	sp, #56	; 0x38
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	689a      	ldr	r2, [r3, #8]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	431a      	orrs	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	4bbf      	ldr	r3, [pc, #764]	; (80091c0 <UART_SetConfig+0x32c>)
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	6812      	ldr	r2, [r2, #0]
 8008ec8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008eca:	430b      	orrs	r3, r1
 8008ecc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	68da      	ldr	r2, [r3, #12]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	430a      	orrs	r2, r1
 8008ee2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4ab5      	ldr	r2, [pc, #724]	; (80091c4 <UART_SetConfig+0x330>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d004      	beq.n	8008efe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a1b      	ldr	r3, [r3, #32]
 8008ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008efa:	4313      	orrs	r3, r2
 8008efc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689a      	ldr	r2, [r3, #8]
 8008f04:	4bb0      	ldr	r3, [pc, #704]	; (80091c8 <UART_SetConfig+0x334>)
 8008f06:	4013      	ands	r3, r2
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	6812      	ldr	r2, [r2, #0]
 8008f0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f0e:	430b      	orrs	r3, r1
 8008f10:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f18:	f023 010f 	bic.w	r1, r3, #15
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	430a      	orrs	r2, r1
 8008f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4aa7      	ldr	r2, [pc, #668]	; (80091cc <UART_SetConfig+0x338>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d176      	bne.n	8009020 <UART_SetConfig+0x18c>
 8008f32:	4ba7      	ldr	r3, [pc, #668]	; (80091d0 <UART_SetConfig+0x33c>)
 8008f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f3a:	2b28      	cmp	r3, #40	; 0x28
 8008f3c:	d86c      	bhi.n	8009018 <UART_SetConfig+0x184>
 8008f3e:	a201      	add	r2, pc, #4	; (adr r2, 8008f44 <UART_SetConfig+0xb0>)
 8008f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f44:	08008fe9 	.word	0x08008fe9
 8008f48:	08009019 	.word	0x08009019
 8008f4c:	08009019 	.word	0x08009019
 8008f50:	08009019 	.word	0x08009019
 8008f54:	08009019 	.word	0x08009019
 8008f58:	08009019 	.word	0x08009019
 8008f5c:	08009019 	.word	0x08009019
 8008f60:	08009019 	.word	0x08009019
 8008f64:	08008ff1 	.word	0x08008ff1
 8008f68:	08009019 	.word	0x08009019
 8008f6c:	08009019 	.word	0x08009019
 8008f70:	08009019 	.word	0x08009019
 8008f74:	08009019 	.word	0x08009019
 8008f78:	08009019 	.word	0x08009019
 8008f7c:	08009019 	.word	0x08009019
 8008f80:	08009019 	.word	0x08009019
 8008f84:	08008ff9 	.word	0x08008ff9
 8008f88:	08009019 	.word	0x08009019
 8008f8c:	08009019 	.word	0x08009019
 8008f90:	08009019 	.word	0x08009019
 8008f94:	08009019 	.word	0x08009019
 8008f98:	08009019 	.word	0x08009019
 8008f9c:	08009019 	.word	0x08009019
 8008fa0:	08009019 	.word	0x08009019
 8008fa4:	08009001 	.word	0x08009001
 8008fa8:	08009019 	.word	0x08009019
 8008fac:	08009019 	.word	0x08009019
 8008fb0:	08009019 	.word	0x08009019
 8008fb4:	08009019 	.word	0x08009019
 8008fb8:	08009019 	.word	0x08009019
 8008fbc:	08009019 	.word	0x08009019
 8008fc0:	08009019 	.word	0x08009019
 8008fc4:	08009009 	.word	0x08009009
 8008fc8:	08009019 	.word	0x08009019
 8008fcc:	08009019 	.word	0x08009019
 8008fd0:	08009019 	.word	0x08009019
 8008fd4:	08009019 	.word	0x08009019
 8008fd8:	08009019 	.word	0x08009019
 8008fdc:	08009019 	.word	0x08009019
 8008fe0:	08009019 	.word	0x08009019
 8008fe4:	08009011 	.word	0x08009011
 8008fe8:	2301      	movs	r3, #1
 8008fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fee:	e222      	b.n	8009436 <UART_SetConfig+0x5a2>
 8008ff0:	2304      	movs	r3, #4
 8008ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ff6:	e21e      	b.n	8009436 <UART_SetConfig+0x5a2>
 8008ff8:	2308      	movs	r3, #8
 8008ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ffe:	e21a      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009000:	2310      	movs	r3, #16
 8009002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009006:	e216      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009008:	2320      	movs	r3, #32
 800900a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800900e:	e212      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009010:	2340      	movs	r3, #64	; 0x40
 8009012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009016:	e20e      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009018:	2380      	movs	r3, #128	; 0x80
 800901a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800901e:	e20a      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a6b      	ldr	r2, [pc, #428]	; (80091d4 <UART_SetConfig+0x340>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d130      	bne.n	800908c <UART_SetConfig+0x1f8>
 800902a:	4b69      	ldr	r3, [pc, #420]	; (80091d0 <UART_SetConfig+0x33c>)
 800902c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800902e:	f003 0307 	and.w	r3, r3, #7
 8009032:	2b05      	cmp	r3, #5
 8009034:	d826      	bhi.n	8009084 <UART_SetConfig+0x1f0>
 8009036:	a201      	add	r2, pc, #4	; (adr r2, 800903c <UART_SetConfig+0x1a8>)
 8009038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903c:	08009055 	.word	0x08009055
 8009040:	0800905d 	.word	0x0800905d
 8009044:	08009065 	.word	0x08009065
 8009048:	0800906d 	.word	0x0800906d
 800904c:	08009075 	.word	0x08009075
 8009050:	0800907d 	.word	0x0800907d
 8009054:	2300      	movs	r3, #0
 8009056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800905a:	e1ec      	b.n	8009436 <UART_SetConfig+0x5a2>
 800905c:	2304      	movs	r3, #4
 800905e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009062:	e1e8      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009064:	2308      	movs	r3, #8
 8009066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800906a:	e1e4      	b.n	8009436 <UART_SetConfig+0x5a2>
 800906c:	2310      	movs	r3, #16
 800906e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009072:	e1e0      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009074:	2320      	movs	r3, #32
 8009076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800907a:	e1dc      	b.n	8009436 <UART_SetConfig+0x5a2>
 800907c:	2340      	movs	r3, #64	; 0x40
 800907e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009082:	e1d8      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009084:	2380      	movs	r3, #128	; 0x80
 8009086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800908a:	e1d4      	b.n	8009436 <UART_SetConfig+0x5a2>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a51      	ldr	r2, [pc, #324]	; (80091d8 <UART_SetConfig+0x344>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d130      	bne.n	80090f8 <UART_SetConfig+0x264>
 8009096:	4b4e      	ldr	r3, [pc, #312]	; (80091d0 <UART_SetConfig+0x33c>)
 8009098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800909a:	f003 0307 	and.w	r3, r3, #7
 800909e:	2b05      	cmp	r3, #5
 80090a0:	d826      	bhi.n	80090f0 <UART_SetConfig+0x25c>
 80090a2:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <UART_SetConfig+0x214>)
 80090a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a8:	080090c1 	.word	0x080090c1
 80090ac:	080090c9 	.word	0x080090c9
 80090b0:	080090d1 	.word	0x080090d1
 80090b4:	080090d9 	.word	0x080090d9
 80090b8:	080090e1 	.word	0x080090e1
 80090bc:	080090e9 	.word	0x080090e9
 80090c0:	2300      	movs	r3, #0
 80090c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090c6:	e1b6      	b.n	8009436 <UART_SetConfig+0x5a2>
 80090c8:	2304      	movs	r3, #4
 80090ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ce:	e1b2      	b.n	8009436 <UART_SetConfig+0x5a2>
 80090d0:	2308      	movs	r3, #8
 80090d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090d6:	e1ae      	b.n	8009436 <UART_SetConfig+0x5a2>
 80090d8:	2310      	movs	r3, #16
 80090da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090de:	e1aa      	b.n	8009436 <UART_SetConfig+0x5a2>
 80090e0:	2320      	movs	r3, #32
 80090e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090e6:	e1a6      	b.n	8009436 <UART_SetConfig+0x5a2>
 80090e8:	2340      	movs	r3, #64	; 0x40
 80090ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ee:	e1a2      	b.n	8009436 <UART_SetConfig+0x5a2>
 80090f0:	2380      	movs	r3, #128	; 0x80
 80090f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090f6:	e19e      	b.n	8009436 <UART_SetConfig+0x5a2>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a37      	ldr	r2, [pc, #220]	; (80091dc <UART_SetConfig+0x348>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d130      	bne.n	8009164 <UART_SetConfig+0x2d0>
 8009102:	4b33      	ldr	r3, [pc, #204]	; (80091d0 <UART_SetConfig+0x33c>)
 8009104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009106:	f003 0307 	and.w	r3, r3, #7
 800910a:	2b05      	cmp	r3, #5
 800910c:	d826      	bhi.n	800915c <UART_SetConfig+0x2c8>
 800910e:	a201      	add	r2, pc, #4	; (adr r2, 8009114 <UART_SetConfig+0x280>)
 8009110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009114:	0800912d 	.word	0x0800912d
 8009118:	08009135 	.word	0x08009135
 800911c:	0800913d 	.word	0x0800913d
 8009120:	08009145 	.word	0x08009145
 8009124:	0800914d 	.word	0x0800914d
 8009128:	08009155 	.word	0x08009155
 800912c:	2300      	movs	r3, #0
 800912e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009132:	e180      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009134:	2304      	movs	r3, #4
 8009136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800913a:	e17c      	b.n	8009436 <UART_SetConfig+0x5a2>
 800913c:	2308      	movs	r3, #8
 800913e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009142:	e178      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009144:	2310      	movs	r3, #16
 8009146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800914a:	e174      	b.n	8009436 <UART_SetConfig+0x5a2>
 800914c:	2320      	movs	r3, #32
 800914e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009152:	e170      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009154:	2340      	movs	r3, #64	; 0x40
 8009156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800915a:	e16c      	b.n	8009436 <UART_SetConfig+0x5a2>
 800915c:	2380      	movs	r3, #128	; 0x80
 800915e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009162:	e168      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a1d      	ldr	r2, [pc, #116]	; (80091e0 <UART_SetConfig+0x34c>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d142      	bne.n	80091f4 <UART_SetConfig+0x360>
 800916e:	4b18      	ldr	r3, [pc, #96]	; (80091d0 <UART_SetConfig+0x33c>)
 8009170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009172:	f003 0307 	and.w	r3, r3, #7
 8009176:	2b05      	cmp	r3, #5
 8009178:	d838      	bhi.n	80091ec <UART_SetConfig+0x358>
 800917a:	a201      	add	r2, pc, #4	; (adr r2, 8009180 <UART_SetConfig+0x2ec>)
 800917c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009180:	08009199 	.word	0x08009199
 8009184:	080091a1 	.word	0x080091a1
 8009188:	080091a9 	.word	0x080091a9
 800918c:	080091b1 	.word	0x080091b1
 8009190:	080091b9 	.word	0x080091b9
 8009194:	080091e5 	.word	0x080091e5
 8009198:	2300      	movs	r3, #0
 800919a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800919e:	e14a      	b.n	8009436 <UART_SetConfig+0x5a2>
 80091a0:	2304      	movs	r3, #4
 80091a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091a6:	e146      	b.n	8009436 <UART_SetConfig+0x5a2>
 80091a8:	2308      	movs	r3, #8
 80091aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ae:	e142      	b.n	8009436 <UART_SetConfig+0x5a2>
 80091b0:	2310      	movs	r3, #16
 80091b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091b6:	e13e      	b.n	8009436 <UART_SetConfig+0x5a2>
 80091b8:	2320      	movs	r3, #32
 80091ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091be:	e13a      	b.n	8009436 <UART_SetConfig+0x5a2>
 80091c0:	cfff69f3 	.word	0xcfff69f3
 80091c4:	58000c00 	.word	0x58000c00
 80091c8:	11fff4ff 	.word	0x11fff4ff
 80091cc:	40011000 	.word	0x40011000
 80091d0:	58024400 	.word	0x58024400
 80091d4:	40004400 	.word	0x40004400
 80091d8:	40004800 	.word	0x40004800
 80091dc:	40004c00 	.word	0x40004c00
 80091e0:	40005000 	.word	0x40005000
 80091e4:	2340      	movs	r3, #64	; 0x40
 80091e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ea:	e124      	b.n	8009436 <UART_SetConfig+0x5a2>
 80091ec:	2380      	movs	r3, #128	; 0x80
 80091ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091f2:	e120      	b.n	8009436 <UART_SetConfig+0x5a2>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4acc      	ldr	r2, [pc, #816]	; (800952c <UART_SetConfig+0x698>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d176      	bne.n	80092ec <UART_SetConfig+0x458>
 80091fe:	4bcc      	ldr	r3, [pc, #816]	; (8009530 <UART_SetConfig+0x69c>)
 8009200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009206:	2b28      	cmp	r3, #40	; 0x28
 8009208:	d86c      	bhi.n	80092e4 <UART_SetConfig+0x450>
 800920a:	a201      	add	r2, pc, #4	; (adr r2, 8009210 <UART_SetConfig+0x37c>)
 800920c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009210:	080092b5 	.word	0x080092b5
 8009214:	080092e5 	.word	0x080092e5
 8009218:	080092e5 	.word	0x080092e5
 800921c:	080092e5 	.word	0x080092e5
 8009220:	080092e5 	.word	0x080092e5
 8009224:	080092e5 	.word	0x080092e5
 8009228:	080092e5 	.word	0x080092e5
 800922c:	080092e5 	.word	0x080092e5
 8009230:	080092bd 	.word	0x080092bd
 8009234:	080092e5 	.word	0x080092e5
 8009238:	080092e5 	.word	0x080092e5
 800923c:	080092e5 	.word	0x080092e5
 8009240:	080092e5 	.word	0x080092e5
 8009244:	080092e5 	.word	0x080092e5
 8009248:	080092e5 	.word	0x080092e5
 800924c:	080092e5 	.word	0x080092e5
 8009250:	080092c5 	.word	0x080092c5
 8009254:	080092e5 	.word	0x080092e5
 8009258:	080092e5 	.word	0x080092e5
 800925c:	080092e5 	.word	0x080092e5
 8009260:	080092e5 	.word	0x080092e5
 8009264:	080092e5 	.word	0x080092e5
 8009268:	080092e5 	.word	0x080092e5
 800926c:	080092e5 	.word	0x080092e5
 8009270:	080092cd 	.word	0x080092cd
 8009274:	080092e5 	.word	0x080092e5
 8009278:	080092e5 	.word	0x080092e5
 800927c:	080092e5 	.word	0x080092e5
 8009280:	080092e5 	.word	0x080092e5
 8009284:	080092e5 	.word	0x080092e5
 8009288:	080092e5 	.word	0x080092e5
 800928c:	080092e5 	.word	0x080092e5
 8009290:	080092d5 	.word	0x080092d5
 8009294:	080092e5 	.word	0x080092e5
 8009298:	080092e5 	.word	0x080092e5
 800929c:	080092e5 	.word	0x080092e5
 80092a0:	080092e5 	.word	0x080092e5
 80092a4:	080092e5 	.word	0x080092e5
 80092a8:	080092e5 	.word	0x080092e5
 80092ac:	080092e5 	.word	0x080092e5
 80092b0:	080092dd 	.word	0x080092dd
 80092b4:	2301      	movs	r3, #1
 80092b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ba:	e0bc      	b.n	8009436 <UART_SetConfig+0x5a2>
 80092bc:	2304      	movs	r3, #4
 80092be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092c2:	e0b8      	b.n	8009436 <UART_SetConfig+0x5a2>
 80092c4:	2308      	movs	r3, #8
 80092c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ca:	e0b4      	b.n	8009436 <UART_SetConfig+0x5a2>
 80092cc:	2310      	movs	r3, #16
 80092ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092d2:	e0b0      	b.n	8009436 <UART_SetConfig+0x5a2>
 80092d4:	2320      	movs	r3, #32
 80092d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092da:	e0ac      	b.n	8009436 <UART_SetConfig+0x5a2>
 80092dc:	2340      	movs	r3, #64	; 0x40
 80092de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092e2:	e0a8      	b.n	8009436 <UART_SetConfig+0x5a2>
 80092e4:	2380      	movs	r3, #128	; 0x80
 80092e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ea:	e0a4      	b.n	8009436 <UART_SetConfig+0x5a2>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a90      	ldr	r2, [pc, #576]	; (8009534 <UART_SetConfig+0x6a0>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d130      	bne.n	8009358 <UART_SetConfig+0x4c4>
 80092f6:	4b8e      	ldr	r3, [pc, #568]	; (8009530 <UART_SetConfig+0x69c>)
 80092f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092fa:	f003 0307 	and.w	r3, r3, #7
 80092fe:	2b05      	cmp	r3, #5
 8009300:	d826      	bhi.n	8009350 <UART_SetConfig+0x4bc>
 8009302:	a201      	add	r2, pc, #4	; (adr r2, 8009308 <UART_SetConfig+0x474>)
 8009304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009308:	08009321 	.word	0x08009321
 800930c:	08009329 	.word	0x08009329
 8009310:	08009331 	.word	0x08009331
 8009314:	08009339 	.word	0x08009339
 8009318:	08009341 	.word	0x08009341
 800931c:	08009349 	.word	0x08009349
 8009320:	2300      	movs	r3, #0
 8009322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009326:	e086      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009328:	2304      	movs	r3, #4
 800932a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800932e:	e082      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009330:	2308      	movs	r3, #8
 8009332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009336:	e07e      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009338:	2310      	movs	r3, #16
 800933a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800933e:	e07a      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009340:	2320      	movs	r3, #32
 8009342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009346:	e076      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009348:	2340      	movs	r3, #64	; 0x40
 800934a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800934e:	e072      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009350:	2380      	movs	r3, #128	; 0x80
 8009352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009356:	e06e      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a76      	ldr	r2, [pc, #472]	; (8009538 <UART_SetConfig+0x6a4>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d130      	bne.n	80093c4 <UART_SetConfig+0x530>
 8009362:	4b73      	ldr	r3, [pc, #460]	; (8009530 <UART_SetConfig+0x69c>)
 8009364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009366:	f003 0307 	and.w	r3, r3, #7
 800936a:	2b05      	cmp	r3, #5
 800936c:	d826      	bhi.n	80093bc <UART_SetConfig+0x528>
 800936e:	a201      	add	r2, pc, #4	; (adr r2, 8009374 <UART_SetConfig+0x4e0>)
 8009370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009374:	0800938d 	.word	0x0800938d
 8009378:	08009395 	.word	0x08009395
 800937c:	0800939d 	.word	0x0800939d
 8009380:	080093a5 	.word	0x080093a5
 8009384:	080093ad 	.word	0x080093ad
 8009388:	080093b5 	.word	0x080093b5
 800938c:	2300      	movs	r3, #0
 800938e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009392:	e050      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009394:	2304      	movs	r3, #4
 8009396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800939a:	e04c      	b.n	8009436 <UART_SetConfig+0x5a2>
 800939c:	2308      	movs	r3, #8
 800939e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093a2:	e048      	b.n	8009436 <UART_SetConfig+0x5a2>
 80093a4:	2310      	movs	r3, #16
 80093a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093aa:	e044      	b.n	8009436 <UART_SetConfig+0x5a2>
 80093ac:	2320      	movs	r3, #32
 80093ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093b2:	e040      	b.n	8009436 <UART_SetConfig+0x5a2>
 80093b4:	2340      	movs	r3, #64	; 0x40
 80093b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ba:	e03c      	b.n	8009436 <UART_SetConfig+0x5a2>
 80093bc:	2380      	movs	r3, #128	; 0x80
 80093be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093c2:	e038      	b.n	8009436 <UART_SetConfig+0x5a2>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a5c      	ldr	r2, [pc, #368]	; (800953c <UART_SetConfig+0x6a8>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d130      	bne.n	8009430 <UART_SetConfig+0x59c>
 80093ce:	4b58      	ldr	r3, [pc, #352]	; (8009530 <UART_SetConfig+0x69c>)
 80093d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093d2:	f003 0307 	and.w	r3, r3, #7
 80093d6:	2b05      	cmp	r3, #5
 80093d8:	d826      	bhi.n	8009428 <UART_SetConfig+0x594>
 80093da:	a201      	add	r2, pc, #4	; (adr r2, 80093e0 <UART_SetConfig+0x54c>)
 80093dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e0:	080093f9 	.word	0x080093f9
 80093e4:	08009401 	.word	0x08009401
 80093e8:	08009409 	.word	0x08009409
 80093ec:	08009411 	.word	0x08009411
 80093f0:	08009419 	.word	0x08009419
 80093f4:	08009421 	.word	0x08009421
 80093f8:	2302      	movs	r3, #2
 80093fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093fe:	e01a      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009400:	2304      	movs	r3, #4
 8009402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009406:	e016      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009408:	2308      	movs	r3, #8
 800940a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800940e:	e012      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009410:	2310      	movs	r3, #16
 8009412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009416:	e00e      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009418:	2320      	movs	r3, #32
 800941a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800941e:	e00a      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009420:	2340      	movs	r3, #64	; 0x40
 8009422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009426:	e006      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009428:	2380      	movs	r3, #128	; 0x80
 800942a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800942e:	e002      	b.n	8009436 <UART_SetConfig+0x5a2>
 8009430:	2380      	movs	r3, #128	; 0x80
 8009432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a40      	ldr	r2, [pc, #256]	; (800953c <UART_SetConfig+0x6a8>)
 800943c:	4293      	cmp	r3, r2
 800943e:	f040 80ef 	bne.w	8009620 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009442:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009446:	2b20      	cmp	r3, #32
 8009448:	dc46      	bgt.n	80094d8 <UART_SetConfig+0x644>
 800944a:	2b02      	cmp	r3, #2
 800944c:	f2c0 8081 	blt.w	8009552 <UART_SetConfig+0x6be>
 8009450:	3b02      	subs	r3, #2
 8009452:	2b1e      	cmp	r3, #30
 8009454:	d87d      	bhi.n	8009552 <UART_SetConfig+0x6be>
 8009456:	a201      	add	r2, pc, #4	; (adr r2, 800945c <UART_SetConfig+0x5c8>)
 8009458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945c:	080094df 	.word	0x080094df
 8009460:	08009553 	.word	0x08009553
 8009464:	080094e7 	.word	0x080094e7
 8009468:	08009553 	.word	0x08009553
 800946c:	08009553 	.word	0x08009553
 8009470:	08009553 	.word	0x08009553
 8009474:	080094f7 	.word	0x080094f7
 8009478:	08009553 	.word	0x08009553
 800947c:	08009553 	.word	0x08009553
 8009480:	08009553 	.word	0x08009553
 8009484:	08009553 	.word	0x08009553
 8009488:	08009553 	.word	0x08009553
 800948c:	08009553 	.word	0x08009553
 8009490:	08009553 	.word	0x08009553
 8009494:	08009507 	.word	0x08009507
 8009498:	08009553 	.word	0x08009553
 800949c:	08009553 	.word	0x08009553
 80094a0:	08009553 	.word	0x08009553
 80094a4:	08009553 	.word	0x08009553
 80094a8:	08009553 	.word	0x08009553
 80094ac:	08009553 	.word	0x08009553
 80094b0:	08009553 	.word	0x08009553
 80094b4:	08009553 	.word	0x08009553
 80094b8:	08009553 	.word	0x08009553
 80094bc:	08009553 	.word	0x08009553
 80094c0:	08009553 	.word	0x08009553
 80094c4:	08009553 	.word	0x08009553
 80094c8:	08009553 	.word	0x08009553
 80094cc:	08009553 	.word	0x08009553
 80094d0:	08009553 	.word	0x08009553
 80094d4:	08009545 	.word	0x08009545
 80094d8:	2b40      	cmp	r3, #64	; 0x40
 80094da:	d036      	beq.n	800954a <UART_SetConfig+0x6b6>
 80094dc:	e039      	b.n	8009552 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80094de:	f7fd fb8d 	bl	8006bfc <HAL_RCCEx_GetD3PCLK1Freq>
 80094e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80094e4:	e03b      	b.n	800955e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094e6:	f107 0314 	add.w	r3, r7, #20
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fd fb9c 	bl	8006c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094f4:	e033      	b.n	800955e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094f6:	f107 0308 	add.w	r3, r7, #8
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fd fce8 	bl	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009504:	e02b      	b.n	800955e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009506:	4b0a      	ldr	r3, [pc, #40]	; (8009530 <UART_SetConfig+0x69c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 0320 	and.w	r3, r3, #32
 800950e:	2b00      	cmp	r3, #0
 8009510:	d009      	beq.n	8009526 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009512:	4b07      	ldr	r3, [pc, #28]	; (8009530 <UART_SetConfig+0x69c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	08db      	lsrs	r3, r3, #3
 8009518:	f003 0303 	and.w	r3, r3, #3
 800951c:	4a08      	ldr	r2, [pc, #32]	; (8009540 <UART_SetConfig+0x6ac>)
 800951e:	fa22 f303 	lsr.w	r3, r2, r3
 8009522:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009524:	e01b      	b.n	800955e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009526:	4b06      	ldr	r3, [pc, #24]	; (8009540 <UART_SetConfig+0x6ac>)
 8009528:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800952a:	e018      	b.n	800955e <UART_SetConfig+0x6ca>
 800952c:	40011400 	.word	0x40011400
 8009530:	58024400 	.word	0x58024400
 8009534:	40007800 	.word	0x40007800
 8009538:	40007c00 	.word	0x40007c00
 800953c:	58000c00 	.word	0x58000c00
 8009540:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009544:	4bc4      	ldr	r3, [pc, #784]	; (8009858 <UART_SetConfig+0x9c4>)
 8009546:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009548:	e009      	b.n	800955e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800954a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800954e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009550:	e005      	b.n	800955e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009552:	2300      	movs	r3, #0
 8009554:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800955c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800955e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 81da 	beq.w	800991a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956a:	4abc      	ldr	r2, [pc, #752]	; (800985c <UART_SetConfig+0x9c8>)
 800956c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009570:	461a      	mov	r2, r3
 8009572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009574:	fbb3 f3f2 	udiv	r3, r3, r2
 8009578:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685a      	ldr	r2, [r3, #4]
 800957e:	4613      	mov	r3, r2
 8009580:	005b      	lsls	r3, r3, #1
 8009582:	4413      	add	r3, r2
 8009584:	6a3a      	ldr	r2, [r7, #32]
 8009586:	429a      	cmp	r2, r3
 8009588:	d305      	bcc.n	8009596 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009590:	6a3a      	ldr	r2, [r7, #32]
 8009592:	429a      	cmp	r2, r3
 8009594:	d903      	bls.n	800959e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800959c:	e1bd      	b.n	800991a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a0:	4618      	mov	r0, r3
 80095a2:	f04f 0100 	mov.w	r1, #0
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095aa:	4aac      	ldr	r2, [pc, #688]	; (800985c <UART_SetConfig+0x9c8>)
 80095ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	f04f 0300 	mov.w	r3, #0
 80095b6:	f7f6 feeb 	bl	8000390 <__aeabi_uldivmod>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	4610      	mov	r0, r2
 80095c0:	4619      	mov	r1, r3
 80095c2:	f04f 0200 	mov.w	r2, #0
 80095c6:	f04f 0300 	mov.w	r3, #0
 80095ca:	020b      	lsls	r3, r1, #8
 80095cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80095d0:	0202      	lsls	r2, r0, #8
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	6849      	ldr	r1, [r1, #4]
 80095d6:	0849      	lsrs	r1, r1, #1
 80095d8:	4608      	mov	r0, r1
 80095da:	f04f 0100 	mov.w	r1, #0
 80095de:	1814      	adds	r4, r2, r0
 80095e0:	eb43 0501 	adc.w	r5, r3, r1
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	461a      	mov	r2, r3
 80095ea:	f04f 0300 	mov.w	r3, #0
 80095ee:	4620      	mov	r0, r4
 80095f0:	4629      	mov	r1, r5
 80095f2:	f7f6 fecd 	bl	8000390 <__aeabi_uldivmod>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	4613      	mov	r3, r2
 80095fc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80095fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009604:	d308      	bcc.n	8009618 <UART_SetConfig+0x784>
 8009606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800960c:	d204      	bcs.n	8009618 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009614:	60da      	str	r2, [r3, #12]
 8009616:	e180      	b.n	800991a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800961e:	e17c      	b.n	800991a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	69db      	ldr	r3, [r3, #28]
 8009624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009628:	f040 80bf 	bne.w	80097aa <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800962c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009630:	2b20      	cmp	r3, #32
 8009632:	dc49      	bgt.n	80096c8 <UART_SetConfig+0x834>
 8009634:	2b00      	cmp	r3, #0
 8009636:	db7c      	blt.n	8009732 <UART_SetConfig+0x89e>
 8009638:	2b20      	cmp	r3, #32
 800963a:	d87a      	bhi.n	8009732 <UART_SetConfig+0x89e>
 800963c:	a201      	add	r2, pc, #4	; (adr r2, 8009644 <UART_SetConfig+0x7b0>)
 800963e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009642:	bf00      	nop
 8009644:	080096cf 	.word	0x080096cf
 8009648:	080096d7 	.word	0x080096d7
 800964c:	08009733 	.word	0x08009733
 8009650:	08009733 	.word	0x08009733
 8009654:	080096df 	.word	0x080096df
 8009658:	08009733 	.word	0x08009733
 800965c:	08009733 	.word	0x08009733
 8009660:	08009733 	.word	0x08009733
 8009664:	080096ef 	.word	0x080096ef
 8009668:	08009733 	.word	0x08009733
 800966c:	08009733 	.word	0x08009733
 8009670:	08009733 	.word	0x08009733
 8009674:	08009733 	.word	0x08009733
 8009678:	08009733 	.word	0x08009733
 800967c:	08009733 	.word	0x08009733
 8009680:	08009733 	.word	0x08009733
 8009684:	080096ff 	.word	0x080096ff
 8009688:	08009733 	.word	0x08009733
 800968c:	08009733 	.word	0x08009733
 8009690:	08009733 	.word	0x08009733
 8009694:	08009733 	.word	0x08009733
 8009698:	08009733 	.word	0x08009733
 800969c:	08009733 	.word	0x08009733
 80096a0:	08009733 	.word	0x08009733
 80096a4:	08009733 	.word	0x08009733
 80096a8:	08009733 	.word	0x08009733
 80096ac:	08009733 	.word	0x08009733
 80096b0:	08009733 	.word	0x08009733
 80096b4:	08009733 	.word	0x08009733
 80096b8:	08009733 	.word	0x08009733
 80096bc:	08009733 	.word	0x08009733
 80096c0:	08009733 	.word	0x08009733
 80096c4:	08009725 	.word	0x08009725
 80096c8:	2b40      	cmp	r3, #64	; 0x40
 80096ca:	d02e      	beq.n	800972a <UART_SetConfig+0x896>
 80096cc:	e031      	b.n	8009732 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096ce:	f7fb fe57 	bl	8005380 <HAL_RCC_GetPCLK1Freq>
 80096d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80096d4:	e033      	b.n	800973e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096d6:	f7fb fe69 	bl	80053ac <HAL_RCC_GetPCLK2Freq>
 80096da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80096dc:	e02f      	b.n	800973e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096de:	f107 0314 	add.w	r3, r7, #20
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fd faa0 	bl	8006c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096ec:	e027      	b.n	800973e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096ee:	f107 0308 	add.w	r3, r7, #8
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fd fbec 	bl	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096fc:	e01f      	b.n	800973e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096fe:	4b58      	ldr	r3, [pc, #352]	; (8009860 <UART_SetConfig+0x9cc>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0320 	and.w	r3, r3, #32
 8009706:	2b00      	cmp	r3, #0
 8009708:	d009      	beq.n	800971e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800970a:	4b55      	ldr	r3, [pc, #340]	; (8009860 <UART_SetConfig+0x9cc>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	08db      	lsrs	r3, r3, #3
 8009710:	f003 0303 	and.w	r3, r3, #3
 8009714:	4a53      	ldr	r2, [pc, #332]	; (8009864 <UART_SetConfig+0x9d0>)
 8009716:	fa22 f303 	lsr.w	r3, r2, r3
 800971a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800971c:	e00f      	b.n	800973e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800971e:	4b51      	ldr	r3, [pc, #324]	; (8009864 <UART_SetConfig+0x9d0>)
 8009720:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009722:	e00c      	b.n	800973e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009724:	4b4c      	ldr	r3, [pc, #304]	; (8009858 <UART_SetConfig+0x9c4>)
 8009726:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009728:	e009      	b.n	800973e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800972a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800972e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009730:	e005      	b.n	800973e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009732:	2300      	movs	r3, #0
 8009734:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800973c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 80ea 	beq.w	800991a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	4a44      	ldr	r2, [pc, #272]	; (800985c <UART_SetConfig+0x9c8>)
 800974c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009750:	461a      	mov	r2, r3
 8009752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009754:	fbb3 f3f2 	udiv	r3, r3, r2
 8009758:	005a      	lsls	r2, r3, #1
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	085b      	lsrs	r3, r3, #1
 8009760:	441a      	add	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	fbb2 f3f3 	udiv	r3, r2, r3
 800976a:	b29b      	uxth	r3, r3
 800976c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	2b0f      	cmp	r3, #15
 8009772:	d916      	bls.n	80097a2 <UART_SetConfig+0x90e>
 8009774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800977a:	d212      	bcs.n	80097a2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	b29b      	uxth	r3, r3
 8009780:	f023 030f 	bic.w	r3, r3, #15
 8009784:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009788:	085b      	lsrs	r3, r3, #1
 800978a:	b29b      	uxth	r3, r3
 800978c:	f003 0307 	and.w	r3, r3, #7
 8009790:	b29a      	uxth	r2, r3
 8009792:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009794:	4313      	orrs	r3, r2
 8009796:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800979e:	60da      	str	r2, [r3, #12]
 80097a0:	e0bb      	b.n	800991a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80097a8:	e0b7      	b.n	800991a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097ae:	2b20      	cmp	r3, #32
 80097b0:	dc4a      	bgt.n	8009848 <UART_SetConfig+0x9b4>
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f2c0 8086 	blt.w	80098c4 <UART_SetConfig+0xa30>
 80097b8:	2b20      	cmp	r3, #32
 80097ba:	f200 8083 	bhi.w	80098c4 <UART_SetConfig+0xa30>
 80097be:	a201      	add	r2, pc, #4	; (adr r2, 80097c4 <UART_SetConfig+0x930>)
 80097c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c4:	0800984f 	.word	0x0800984f
 80097c8:	08009869 	.word	0x08009869
 80097cc:	080098c5 	.word	0x080098c5
 80097d0:	080098c5 	.word	0x080098c5
 80097d4:	08009871 	.word	0x08009871
 80097d8:	080098c5 	.word	0x080098c5
 80097dc:	080098c5 	.word	0x080098c5
 80097e0:	080098c5 	.word	0x080098c5
 80097e4:	08009881 	.word	0x08009881
 80097e8:	080098c5 	.word	0x080098c5
 80097ec:	080098c5 	.word	0x080098c5
 80097f0:	080098c5 	.word	0x080098c5
 80097f4:	080098c5 	.word	0x080098c5
 80097f8:	080098c5 	.word	0x080098c5
 80097fc:	080098c5 	.word	0x080098c5
 8009800:	080098c5 	.word	0x080098c5
 8009804:	08009891 	.word	0x08009891
 8009808:	080098c5 	.word	0x080098c5
 800980c:	080098c5 	.word	0x080098c5
 8009810:	080098c5 	.word	0x080098c5
 8009814:	080098c5 	.word	0x080098c5
 8009818:	080098c5 	.word	0x080098c5
 800981c:	080098c5 	.word	0x080098c5
 8009820:	080098c5 	.word	0x080098c5
 8009824:	080098c5 	.word	0x080098c5
 8009828:	080098c5 	.word	0x080098c5
 800982c:	080098c5 	.word	0x080098c5
 8009830:	080098c5 	.word	0x080098c5
 8009834:	080098c5 	.word	0x080098c5
 8009838:	080098c5 	.word	0x080098c5
 800983c:	080098c5 	.word	0x080098c5
 8009840:	080098c5 	.word	0x080098c5
 8009844:	080098b7 	.word	0x080098b7
 8009848:	2b40      	cmp	r3, #64	; 0x40
 800984a:	d037      	beq.n	80098bc <UART_SetConfig+0xa28>
 800984c:	e03a      	b.n	80098c4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800984e:	f7fb fd97 	bl	8005380 <HAL_RCC_GetPCLK1Freq>
 8009852:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009854:	e03c      	b.n	80098d0 <UART_SetConfig+0xa3c>
 8009856:	bf00      	nop
 8009858:	003d0900 	.word	0x003d0900
 800985c:	0800e778 	.word	0x0800e778
 8009860:	58024400 	.word	0x58024400
 8009864:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009868:	f7fb fda0 	bl	80053ac <HAL_RCC_GetPCLK2Freq>
 800986c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800986e:	e02f      	b.n	80098d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009870:	f107 0314 	add.w	r3, r7, #20
 8009874:	4618      	mov	r0, r3
 8009876:	f7fd f9d7 	bl	8006c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800987e:	e027      	b.n	80098d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009880:	f107 0308 	add.w	r3, r7, #8
 8009884:	4618      	mov	r0, r3
 8009886:	f7fd fb23 	bl	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800988e:	e01f      	b.n	80098d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009890:	4b2c      	ldr	r3, [pc, #176]	; (8009944 <UART_SetConfig+0xab0>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0320 	and.w	r3, r3, #32
 8009898:	2b00      	cmp	r3, #0
 800989a:	d009      	beq.n	80098b0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800989c:	4b29      	ldr	r3, [pc, #164]	; (8009944 <UART_SetConfig+0xab0>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	08db      	lsrs	r3, r3, #3
 80098a2:	f003 0303 	and.w	r3, r3, #3
 80098a6:	4a28      	ldr	r2, [pc, #160]	; (8009948 <UART_SetConfig+0xab4>)
 80098a8:	fa22 f303 	lsr.w	r3, r2, r3
 80098ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80098ae:	e00f      	b.n	80098d0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80098b0:	4b25      	ldr	r3, [pc, #148]	; (8009948 <UART_SetConfig+0xab4>)
 80098b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098b4:	e00c      	b.n	80098d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80098b6:	4b25      	ldr	r3, [pc, #148]	; (800994c <UART_SetConfig+0xab8>)
 80098b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098ba:	e009      	b.n	80098d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098c2:	e005      	b.n	80098d0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80098ce:	bf00      	nop
    }

    if (pclk != 0U)
 80098d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d021      	beq.n	800991a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098da:	4a1d      	ldr	r2, [pc, #116]	; (8009950 <UART_SetConfig+0xabc>)
 80098dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098e0:	461a      	mov	r2, r3
 80098e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	085b      	lsrs	r3, r3, #1
 80098ee:	441a      	add	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fe:	2b0f      	cmp	r3, #15
 8009900:	d908      	bls.n	8009914 <UART_SetConfig+0xa80>
 8009902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009908:	d204      	bcs.n	8009914 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009910:	60da      	str	r2, [r3, #12]
 8009912:	e002      	b.n	800991a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2201      	movs	r2, #1
 800991e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2201      	movs	r2, #1
 8009926:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009936:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800993a:	4618      	mov	r0, r3
 800993c:	3738      	adds	r7, #56	; 0x38
 800993e:	46bd      	mov	sp, r7
 8009940:	bdb0      	pop	{r4, r5, r7, pc}
 8009942:	bf00      	nop
 8009944:	58024400 	.word	0x58024400
 8009948:	03d09000 	.word	0x03d09000
 800994c:	003d0900 	.word	0x003d0900
 8009950:	0800e778 	.word	0x0800e778

08009954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009960:	f003 0301 	and.w	r3, r3, #1
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00a      	beq.n	800997e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	430a      	orrs	r2, r1
 800997c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009982:	f003 0302 	and.w	r3, r3, #2
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00a      	beq.n	80099a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	430a      	orrs	r2, r1
 800999e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a4:	f003 0304 	and.w	r3, r3, #4
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00a      	beq.n	80099c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c6:	f003 0308 	and.w	r3, r3, #8
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00a      	beq.n	80099e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	430a      	orrs	r2, r1
 80099e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e8:	f003 0310 	and.w	r3, r3, #16
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00a      	beq.n	8009a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0a:	f003 0320 	and.w	r3, r3, #32
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00a      	beq.n	8009a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	430a      	orrs	r2, r1
 8009a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d01a      	beq.n	8009a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	430a      	orrs	r2, r1
 8009a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a52:	d10a      	bne.n	8009a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	430a      	orrs	r2, r1
 8009a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00a      	beq.n	8009a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	605a      	str	r2, [r3, #4]
  }
}
 8009a8c:	bf00      	nop
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af02      	add	r7, sp, #8
 8009a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009aa8:	f7f8 fc90 	bl	80023cc <HAL_GetTick>
 8009aac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0308 	and.w	r3, r3, #8
 8009ab8:	2b08      	cmp	r3, #8
 8009aba:	d10e      	bne.n	8009ada <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009abc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f82f 	bl	8009b2e <UART_WaitOnFlagUntilTimeout>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e025      	b.n	8009b26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 0304 	and.w	r3, r3, #4
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	d10e      	bne.n	8009b06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f819 	bl	8009b2e <UART_WaitOnFlagUntilTimeout>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e00f      	b.n	8009b26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2220      	movs	r2, #32
 8009b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b084      	sub	sp, #16
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	60b9      	str	r1, [r7, #8]
 8009b38:	603b      	str	r3, [r7, #0]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b3e:	e062      	b.n	8009c06 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b46:	d05e      	beq.n	8009c06 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b48:	f7f8 fc40 	bl	80023cc <HAL_GetTick>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d302      	bcc.n	8009b5e <UART_WaitOnFlagUntilTimeout+0x30>
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d11d      	bne.n	8009b9a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009b6c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	689a      	ldr	r2, [r3, #8]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f022 0201 	bic.w	r2, r2, #1
 8009b7c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2220      	movs	r2, #32
 8009b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2220      	movs	r2, #32
 8009b8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	e045      	b.n	8009c26 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f003 0304 	and.w	r3, r3, #4
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d02e      	beq.n	8009c06 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	69db      	ldr	r3, [r3, #28]
 8009bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bb6:	d126      	bne.n	8009c06 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009bc0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009bd0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689a      	ldr	r2, [r3, #8]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 0201 	bic.w	r2, r2, #1
 8009be0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2220      	movs	r2, #32
 8009be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2220      	movs	r2, #32
 8009bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009c02:	2303      	movs	r3, #3
 8009c04:	e00f      	b.n	8009c26 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	69da      	ldr	r2, [r3, #28]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	4013      	ands	r3, r2
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	bf0c      	ite	eq
 8009c16:	2301      	moveq	r3, #1
 8009c18:	2300      	movne	r3, #0
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	79fb      	ldrb	r3, [r7, #7]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d08d      	beq.n	8009b40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c2e:	b480      	push	{r7}
 8009c30:	b085      	sub	sp, #20
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d101      	bne.n	8009c44 <HAL_UARTEx_DisableFifoMode+0x16>
 8009c40:	2302      	movs	r3, #2
 8009c42:	e027      	b.n	8009c94 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2224      	movs	r2, #36	; 0x24
 8009c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 0201 	bic.w	r2, r2, #1
 8009c6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009c72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2220      	movs	r2, #32
 8009c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d101      	bne.n	8009cb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	e02d      	b.n	8009d14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2224      	movs	r2, #36	; 0x24
 8009cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f022 0201 	bic.w	r2, r2, #1
 8009cde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	430a      	orrs	r2, r1
 8009cf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f84f 	bl	8009d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2220      	movs	r2, #32
 8009d06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d101      	bne.n	8009d34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d30:	2302      	movs	r3, #2
 8009d32:	e02d      	b.n	8009d90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2224      	movs	r2, #36	; 0x24
 8009d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f022 0201 	bic.w	r2, r2, #1
 8009d5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f811 	bl	8009d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2220      	movs	r2, #32
 8009d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d108      	bne.n	8009dba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009db8:	e031      	b.n	8009e1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009dba:	2310      	movs	r3, #16
 8009dbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009dbe:	2310      	movs	r3, #16
 8009dc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	0e5b      	lsrs	r3, r3, #25
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	f003 0307 	and.w	r3, r3, #7
 8009dd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	0f5b      	lsrs	r3, r3, #29
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	f003 0307 	and.w	r3, r3, #7
 8009de0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
 8009de4:	7b3a      	ldrb	r2, [r7, #12]
 8009de6:	4911      	ldr	r1, [pc, #68]	; (8009e2c <UARTEx_SetNbDataToProcess+0x94>)
 8009de8:	5c8a      	ldrb	r2, [r1, r2]
 8009dea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009dee:	7b3a      	ldrb	r2, [r7, #12]
 8009df0:	490f      	ldr	r1, [pc, #60]	; (8009e30 <UARTEx_SetNbDataToProcess+0x98>)
 8009df2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009df4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	7b7a      	ldrb	r2, [r7, #13]
 8009e04:	4909      	ldr	r1, [pc, #36]	; (8009e2c <UARTEx_SetNbDataToProcess+0x94>)
 8009e06:	5c8a      	ldrb	r2, [r1, r2]
 8009e08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e0c:	7b7a      	ldrb	r2, [r7, #13]
 8009e0e:	4908      	ldr	r1, [pc, #32]	; (8009e30 <UARTEx_SetNbDataToProcess+0x98>)
 8009e10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e12:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009e1e:	bf00      	nop
 8009e20:	3714      	adds	r7, #20
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	0800e790 	.word	0x0800e790
 8009e30:	0800e798 	.word	0x0800e798

08009e34 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b087      	sub	sp, #28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	6812      	ldr	r2, [r2, #0]
 8009e4c:	f023 0101 	bic.w	r1, r3, #1
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	2b08      	cmp	r3, #8
 8009e5c:	d102      	bne.n	8009e64 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009e5e:	2340      	movs	r3, #64	; 0x40
 8009e60:	617b      	str	r3, [r7, #20]
 8009e62:	e001      	b.n	8009e68 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009e64:	2300      	movs	r3, #0
 8009e66:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009e74:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009e7a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009e80:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009e86:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8009e8c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8009e92:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8009e98:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8009e9e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8009ea4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb2:	693a      	ldr	r2, [r7, #16]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8009ecc:	4b20      	ldr	r3, [pc, #128]	; (8009f50 <FMC_NORSRAM_Init+0x11c>)
 8009ece:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ed6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ede:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009ee6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	43db      	mvns	r3, r3
 8009ef6:	ea02 0103 	and.w	r1, r2, r3
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	4319      	orrs	r1, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f10:	d10c      	bne.n	8009f2c <FMC_NORSRAM_Init+0xf8>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d008      	beq.n	8009f2c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f26:	431a      	orrs	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d006      	beq.n	8009f42 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	371c      	adds	r7, #28
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	0008fb7f 	.word	0x0008fb7f

08009f54 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b087      	sub	sp, #28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	1c5a      	adds	r2, r3, #1
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f6a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	011b      	lsls	r3, r3, #4
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	021b      	lsls	r3, r3, #8
 8009f80:	431a      	orrs	r2, r3
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	041b      	lsls	r3, r3, #16
 8009f88:	431a      	orrs	r2, r3
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	051b      	lsls	r3, r3, #20
 8009f92:	431a      	orrs	r2, r3
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	695b      	ldr	r3, [r3, #20]
 8009f98:	3b02      	subs	r3, #2
 8009f9a:	061b      	lsls	r3, r3, #24
 8009f9c:	431a      	orrs	r2, r3
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	3201      	adds	r2, #1
 8009fa8:	4319      	orrs	r1, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fbc:	d113      	bne.n	8009fe6 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009fc6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	051b      	lsls	r3, r3, #20
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	431a      	orrs	r2, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	371c      	adds	r7, #28
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
 800a000:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a008:	d11d      	bne.n	800a046 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a012:	4b13      	ldr	r3, [pc, #76]	; (800a060 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a014:	4013      	ands	r3, r2
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	6811      	ldr	r1, [r2, #0]
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	6852      	ldr	r2, [r2, #4]
 800a01e:	0112      	lsls	r2, r2, #4
 800a020:	4311      	orrs	r1, r2
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	6892      	ldr	r2, [r2, #8]
 800a026:	0212      	lsls	r2, r2, #8
 800a028:	4311      	orrs	r1, r2
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	6992      	ldr	r2, [r2, #24]
 800a02e:	4311      	orrs	r1, r2
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	68d2      	ldr	r2, [r2, #12]
 800a034:	0412      	lsls	r2, r2, #16
 800a036:	430a      	orrs	r2, r1
 800a038:	ea43 0102 	orr.w	r1, r3, r2
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a044:	e005      	b.n	800a052 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a04e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3714      	adds	r7, #20
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr
 800a060:	cff00000 	.word	0xcff00000

0800a064 <ssd1362_Reset>:
    HAL_GPIO_WritePin(SSD1362_CS_Port, SSD1362_CS_Pin, GPIO_PIN_SET); // un-select OLED
}

#elif defined(SSD1362_USE_8080)  //todo add correct peripheral calls

void ssd1362_Reset(void) {
 800a064:	b580      	push	{r7, lr}
 800a066:	af00      	add	r7, sp, #0
    // Reset the OLED
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_RESET);
 800a068:	2200      	movs	r2, #0
 800a06a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a06e:	4808      	ldr	r0, [pc, #32]	; (800a090 <ssd1362_Reset+0x2c>)
 800a070:	f7fa f95a 	bl	8004328 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800a074:	200a      	movs	r0, #10
 800a076:	f7f8 f9b5 	bl	80023e4 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_SET);
 800a07a:	2201      	movs	r2, #1
 800a07c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a080:	4803      	ldr	r0, [pc, #12]	; (800a090 <ssd1362_Reset+0x2c>)
 800a082:	f7fa f951 	bl	8004328 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800a086:	200a      	movs	r0, #10
 800a088:	f7f8 f9ac 	bl	80023e4 <HAL_Delay>
}
 800a08c:	bf00      	nop
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	58020400 	.word	0x58020400

0800a094 <ssd1362_WriteCommand>:

// Send a byte to the command register
void ssd1362_WriteCommand(uint8_t byte) {
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	4603      	mov	r3, r0
 800a09c:	71fb      	strb	r3, [r7, #7]
    HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_REG, (uint8_t *)&byte, 1);
 800a09e:	1dfa      	adds	r2, r7, #7
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800a0a6:	4803      	ldr	r0, [pc, #12]	; (800a0b4 <ssd1362_WriteCommand+0x20>)
 800a0a8:	f7fe f924 	bl	80082f4 <HAL_SRAM_Write_8b>
}
 800a0ac:	bf00      	nop
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	240104e4 	.word	0x240104e4

0800a0b8 <ssd1362_WriteData>:
// Send data
//void ssd1362_WriteData(uint8_t byte) {
//	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_RAM, (uint8_t *)&byte, 1);
//}

void ssd1362_WriteData(uint8_t* buffer, size_t buff_size) {
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
    HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_RAM, (uint8_t *)&buffer, buff_size);
 800a0c2:	1d3a      	adds	r2, r7, #4
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	4904      	ldr	r1, [pc, #16]	; (800a0d8 <ssd1362_WriteData+0x20>)
 800a0c8:	4804      	ldr	r0, [pc, #16]	; (800a0dc <ssd1362_WriteData+0x24>)
 800a0ca:	f7fe f913 	bl	80082f4 <HAL_SRAM_Write_8b>
}
 800a0ce:	bf00      	nop
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	c0010000 	.word	0xc0010000
 800a0dc:	240104e4 	.word	0x240104e4

0800a0e0 <ssd1362_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1362_Init(void) {
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1362_Reset();
 800a0e4:	f7ff ffbe 	bl	800a064 <ssd1362_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800a0e8:	2064      	movs	r0, #100	; 0x64
 800a0ea:	f7f8 f97b 	bl	80023e4 <HAL_Delay>

    // Init OLED
    ssd1362_WriteCommand(0XFD); //Set Command Lock
 800a0ee:	20fd      	movs	r0, #253	; 0xfd
 800a0f0:	f7ff ffd0 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0X12, 1); //(12H=Unlock,16H=Lock)
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	2012      	movs	r0, #18
 800a0f8:	f7ff ffde 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0XAE); //Display OFF(Sleep Mode)
 800a0fc:	20ae      	movs	r0, #174	; 0xae
 800a0fe:	f7ff ffc9 	bl	800a094 <ssd1362_WriteCommand>

    ssd1362_WriteCommand(0X15); //Set column Address
 800a102:	2015      	movs	r0, #21
 800a104:	f7ff ffc6 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0X00, 1); //Start column Address
 800a108:	2101      	movs	r1, #1
 800a10a:	2000      	movs	r0, #0
 800a10c:	f7ff ffd4 	bl	800a0b8 <ssd1362_WriteData>
    ssd1362_WriteData((uint8_t *)0X7F, 1); //End column Address
 800a110:	2101      	movs	r1, #1
 800a112:	207f      	movs	r0, #127	; 0x7f
 800a114:	f7ff ffd0 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0X75); //Set Row Address
 800a118:	2075      	movs	r0, #117	; 0x75
 800a11a:	f7ff ffbb 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0X00, 1); //Start Row Address
 800a11e:	2101      	movs	r1, #1
 800a120:	2000      	movs	r0, #0
 800a122:	f7ff ffc9 	bl	800a0b8 <ssd1362_WriteData>
    ssd1362_WriteData((uint8_t *)0X3F, 1); //End Row Address
 800a126:	2101      	movs	r1, #1
 800a128:	203f      	movs	r0, #63	; 0x3f
 800a12a:	f7ff ffc5 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0X81); //Set contrast
 800a12e:	2081      	movs	r0, #129	; 0x81
 800a130:	f7ff ffb0 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0x2f, 1);
 800a134:	2101      	movs	r1, #1
 800a136:	202f      	movs	r0, #47	; 0x2f
 800a138:	f7ff ffbe 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0XA0); //Set Remap
 800a13c:	20a0      	movs	r0, #160	; 0xa0
 800a13e:	f7ff ffa9 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0XC3, 1);
 800a142:	2101      	movs	r1, #1
 800a144:	20c3      	movs	r0, #195	; 0xc3
 800a146:	f7ff ffb7 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0XA1); //Set Display Start Line
 800a14a:	20a1      	movs	r0, #161	; 0xa1
 800a14c:	f7ff ffa2 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0X00, 1);
 800a150:	2101      	movs	r1, #1
 800a152:	2000      	movs	r0, #0
 800a154:	f7ff ffb0 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0XA2); //Set Display Offset
 800a158:	20a2      	movs	r0, #162	; 0xa2
 800a15a:	f7ff ff9b 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0X00, 1);
 800a15e:	2101      	movs	r1, #1
 800a160:	2000      	movs	r0, #0
 800a162:	f7ff ffa9 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0XA4); //Normal Display
 800a166:	20a4      	movs	r0, #164	; 0xa4
 800a168:	f7ff ff94 	bl	800a094 <ssd1362_WriteCommand>

    ssd1362_WriteCommand(0XA8); //Set Multiplex Ratio
 800a16c:	20a8      	movs	r0, #168	; 0xa8
 800a16e:	f7ff ff91 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0X3F, 1);
 800a172:	2101      	movs	r1, #1
 800a174:	203f      	movs	r0, #63	; 0x3f
 800a176:	f7ff ff9f 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0XAB); //Set VDD regulator
 800a17a:	20ab      	movs	r0, #171	; 0xab
 800a17c:	f7ff ff8a 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0X01, 1); //Regulator Enable
 800a180:	2101      	movs	r1, #1
 800a182:	2001      	movs	r0, #1
 800a184:	f7ff ff98 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0XAD); //External /Internal IREF Selection
 800a188:	20ad      	movs	r0, #173	; 0xad
 800a18a:	f7ff ff83 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0X8E, 1);
 800a18e:	2101      	movs	r1, #1
 800a190:	208e      	movs	r0, #142	; 0x8e
 800a192:	f7ff ff91 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0XB1); //Set Phase Length
 800a196:	20b1      	movs	r0, #177	; 0xb1
 800a198:	f7ff ff7c 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0X22, 1);
 800a19c:	2101      	movs	r1, #1
 800a19e:	2022      	movs	r0, #34	; 0x22
 800a1a0:	f7ff ff8a 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0XB3); //Display clock Divider
 800a1a4:	20b3      	movs	r0, #179	; 0xb3
 800a1a6:	f7ff ff75 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0XA0, 1);
 800a1aa:	2101      	movs	r1, #1
 800a1ac:	20a0      	movs	r0, #160	; 0xa0
 800a1ae:	f7ff ff83 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0XB6); //Set Second pre-charge Period
 800a1b2:	20b6      	movs	r0, #182	; 0xb6
 800a1b4:	f7ff ff6e 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0X04, 1);
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	2004      	movs	r0, #4
 800a1bc:	f7ff ff7c 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0XB9); //Set Linear LUT
 800a1c0:	20b9      	movs	r0, #185	; 0xb9
 800a1c2:	f7ff ff67 	bl	800a094 <ssd1362_WriteCommand>

    ssd1362_WriteCommand(0XBc); //Set pre-charge voltage level
 800a1c6:	20bc      	movs	r0, #188	; 0xbc
 800a1c8:	f7ff ff64 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0X10, 1); //0.5*Vcc
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	2010      	movs	r0, #16
 800a1d0:	f7ff ff72 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0XBD); //Pre-charge voltage capacitor Selection
 800a1d4:	20bd      	movs	r0, #189	; 0xbd
 800a1d6:	f7ff ff5d 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0X01, 1);
 800a1da:	2101      	movs	r1, #1
 800a1dc:	2001      	movs	r0, #1
 800a1de:	f7ff ff6b 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0XBE); //Set COM deselect voltage level
 800a1e2:	20be      	movs	r0, #190	; 0xbe
 800a1e4:	f7ff ff56 	bl	800a094 <ssd1362_WriteCommand>
    ssd1362_WriteData((uint8_t *)0X07, 1); //0.82*Vcc
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	2007      	movs	r0, #7
 800a1ec:	f7ff ff64 	bl	800a0b8 <ssd1362_WriteData>

    ssd1362_WriteCommand(0XAF); //Display ON
 800a1f0:	20af      	movs	r0, #175	; 0xaf
 800a1f2:	f7ff ff4f 	bl	800a094 <ssd1362_WriteCommand>

    // Clear screen
    ssd1362_Fill(White);
 800a1f6:	2001      	movs	r0, #1
 800a1f8:	f000 f810 	bl	800a21c <ssd1362_Fill>
    
    // Flush buffer to screen
    ssd1362_UpdateScreen();
 800a1fc:	f000 f832 	bl	800a264 <ssd1362_UpdateScreen>
    
    // Set default values for screen object
    SSD1362.CurrentX = 0;
 800a200:	4b05      	ldr	r3, [pc, #20]	; (800a218 <ssd1362_Init+0x138>)
 800a202:	2200      	movs	r2, #0
 800a204:	801a      	strh	r2, [r3, #0]
    SSD1362.CurrentY = 0;
 800a206:	4b04      	ldr	r3, [pc, #16]	; (800a218 <ssd1362_Init+0x138>)
 800a208:	2200      	movs	r2, #0
 800a20a:	805a      	strh	r2, [r3, #2]
    
    SSD1362.Initialized = 1;
 800a20c:	4b02      	ldr	r3, [pc, #8]	; (800a218 <ssd1362_Init+0x138>)
 800a20e:	2201      	movs	r2, #1
 800a210:	715a      	strb	r2, [r3, #5]
}
 800a212:	bf00      	nop
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	240102ec 	.word	0x240102ec

0800a21c <ssd1362_Fill>:

// Fill the whole screen with the given color
void ssd1362_Fill(SSD1362_COLOR color) {
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1362_Buffer); i++) {
 800a226:	2300      	movs	r3, #0
 800a228:	60fb      	str	r3, [r7, #12]
 800a22a:	e00d      	b.n	800a248 <ssd1362_Fill+0x2c>
        SSD1362_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800a22c:	79fb      	ldrb	r3, [r7, #7]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <ssd1362_Fill+0x1a>
 800a232:	2100      	movs	r1, #0
 800a234:	e000      	b.n	800a238 <ssd1362_Fill+0x1c>
 800a236:	21ff      	movs	r1, #255	; 0xff
 800a238:	4a09      	ldr	r2, [pc, #36]	; (800a260 <ssd1362_Fill+0x44>)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	4413      	add	r3, r2
 800a23e:	460a      	mov	r2, r1
 800a240:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1362_Buffer); i++) {
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3301      	adds	r3, #1
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a24e:	d3ed      	bcc.n	800a22c <ssd1362_Fill+0x10>
    }
}
 800a250:	bf00      	nop
 800a252:	bf00      	nop
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	240002ec 	.word	0x240002ec

0800a264 <ssd1362_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1362_UpdateScreen(void) {
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
//        ssd1362_WriteCommand(0x00);
//        ssd1362_WriteCommand(0x10);
//        ssd1362_WriteData(&SSD1362_Buffer[SSD1362_WIDTH*i],SSD1362_WIDTH);
//    }

	    for(uint8_t i = 0; i < SSD1362_HEIGHT; i++) {
 800a26a:	2300      	movs	r3, #0
 800a26c:	71fb      	strb	r3, [r7, #7]
 800a26e:	e00b      	b.n	800a288 <ssd1362_UpdateScreen+0x24>
//	        ssd1362_WriteCommand(0xA1 + i); // Set the current RAM page address.
//	        ssd1362_WriteCommand(0x00 + i);
//	        ssd1362_WriteCommand(0x10);
	        ssd1362_WriteData(&SSD1362_Buffer[SSD1362_WIDTH*i],SSD1362_WIDTH * 4);
 800a270:	79fb      	ldrb	r3, [r7, #7]
 800a272:	021b      	lsls	r3, r3, #8
 800a274:	4a08      	ldr	r2, [pc, #32]	; (800a298 <ssd1362_UpdateScreen+0x34>)
 800a276:	4413      	add	r3, r2
 800a278:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7ff ff1b 	bl	800a0b8 <ssd1362_WriteData>
	    for(uint8_t i = 0; i < SSD1362_HEIGHT; i++) {
 800a282:	79fb      	ldrb	r3, [r7, #7]
 800a284:	3301      	adds	r3, #1
 800a286:	71fb      	strb	r3, [r7, #7]
 800a288:	79fb      	ldrb	r3, [r7, #7]
 800a28a:	2b3f      	cmp	r3, #63	; 0x3f
 800a28c:	d9f0      	bls.n	800a270 <ssd1362_UpdateScreen+0xc>
	    }

}
 800a28e:	bf00      	nop
 800a290:	bf00      	nop
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	240002ec 	.word	0x240002ec

0800a29c <ssd1362_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1362_DrawPixel(uint8_t x, uint8_t y, SSD1362_COLOR color) {
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	71fb      	strb	r3, [r7, #7]
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	71bb      	strb	r3, [r7, #6]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1362_WIDTH || y >= SSD1362_HEIGHT) {
 800a2ae:	79bb      	ldrb	r3, [r7, #6]
 800a2b0:	2b3f      	cmp	r3, #63	; 0x3f
 800a2b2:	d845      	bhi.n	800a340 <ssd1362_DrawPixel+0xa4>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1362.Inverted) {
 800a2b4:	4b25      	ldr	r3, [pc, #148]	; (800a34c <ssd1362_DrawPixel+0xb0>)
 800a2b6:	791b      	ldrb	r3, [r3, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d006      	beq.n	800a2ca <ssd1362_DrawPixel+0x2e>
        color = (SSD1362_COLOR)!color;
 800a2bc:	797b      	ldrb	r3, [r7, #5]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	bf0c      	ite	eq
 800a2c2:	2301      	moveq	r3, #1
 800a2c4:	2300      	movne	r3, #0
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 800a2ca:	797b      	ldrb	r3, [r7, #5]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d11a      	bne.n	800a306 <ssd1362_DrawPixel+0x6a>
        SSD1362_Buffer[x + (y / 8) * SSD1362_WIDTH] |= 1 << (y % 8);
 800a2d0:	79fa      	ldrb	r2, [r7, #7]
 800a2d2:	79bb      	ldrb	r3, [r7, #6]
 800a2d4:	08db      	lsrs	r3, r3, #3
 800a2d6:	b2d8      	uxtb	r0, r3
 800a2d8:	4603      	mov	r3, r0
 800a2da:	021b      	lsls	r3, r3, #8
 800a2dc:	4413      	add	r3, r2
 800a2de:	4a1c      	ldr	r2, [pc, #112]	; (800a350 <ssd1362_DrawPixel+0xb4>)
 800a2e0:	5cd3      	ldrb	r3, [r2, r3]
 800a2e2:	b25a      	sxtb	r2, r3
 800a2e4:	79bb      	ldrb	r3, [r7, #6]
 800a2e6:	f003 0307 	and.w	r3, r3, #7
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a2f0:	b25b      	sxtb	r3, r3
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	b259      	sxtb	r1, r3
 800a2f6:	79fa      	ldrb	r2, [r7, #7]
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	021b      	lsls	r3, r3, #8
 800a2fc:	4413      	add	r3, r2
 800a2fe:	b2c9      	uxtb	r1, r1
 800a300:	4a13      	ldr	r2, [pc, #76]	; (800a350 <ssd1362_DrawPixel+0xb4>)
 800a302:	54d1      	strb	r1, [r2, r3]
 800a304:	e01d      	b.n	800a342 <ssd1362_DrawPixel+0xa6>
    } else { 
        SSD1362_Buffer[x + (y / 8) * SSD1362_WIDTH] &= ~(1 << (y % 8));
 800a306:	79fa      	ldrb	r2, [r7, #7]
 800a308:	79bb      	ldrb	r3, [r7, #6]
 800a30a:	08db      	lsrs	r3, r3, #3
 800a30c:	b2d8      	uxtb	r0, r3
 800a30e:	4603      	mov	r3, r0
 800a310:	021b      	lsls	r3, r3, #8
 800a312:	4413      	add	r3, r2
 800a314:	4a0e      	ldr	r2, [pc, #56]	; (800a350 <ssd1362_DrawPixel+0xb4>)
 800a316:	5cd3      	ldrb	r3, [r2, r3]
 800a318:	b25a      	sxtb	r2, r3
 800a31a:	79bb      	ldrb	r3, [r7, #6]
 800a31c:	f003 0307 	and.w	r3, r3, #7
 800a320:	2101      	movs	r1, #1
 800a322:	fa01 f303 	lsl.w	r3, r1, r3
 800a326:	b25b      	sxtb	r3, r3
 800a328:	43db      	mvns	r3, r3
 800a32a:	b25b      	sxtb	r3, r3
 800a32c:	4013      	ands	r3, r2
 800a32e:	b259      	sxtb	r1, r3
 800a330:	79fa      	ldrb	r2, [r7, #7]
 800a332:	4603      	mov	r3, r0
 800a334:	021b      	lsls	r3, r3, #8
 800a336:	4413      	add	r3, r2
 800a338:	b2c9      	uxtb	r1, r1
 800a33a:	4a05      	ldr	r2, [pc, #20]	; (800a350 <ssd1362_DrawPixel+0xb4>)
 800a33c:	54d1      	strb	r1, [r2, r3]
 800a33e:	e000      	b.n	800a342 <ssd1362_DrawPixel+0xa6>
        return;
 800a340:	bf00      	nop
    }
}
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	240102ec 	.word	0x240102ec
 800a350:	240002ec 	.word	0x240002ec

0800a354 <ssd1362_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1362_WriteChar(char ch, FontDef Font, SSD1362_COLOR color) {
 800a354:	b590      	push	{r4, r7, lr}
 800a356:	b089      	sub	sp, #36	; 0x24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4604      	mov	r4, r0
 800a35c:	1d38      	adds	r0, r7, #4
 800a35e:	e880 0006 	stmia.w	r0, {r1, r2}
 800a362:	461a      	mov	r2, r3
 800a364:	4623      	mov	r3, r4
 800a366:	73fb      	strb	r3, [r7, #15]
 800a368:	4613      	mov	r3, r2
 800a36a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
 800a36e:	2b1f      	cmp	r3, #31
 800a370:	d902      	bls.n	800a378 <ssd1362_WriteChar+0x24>
 800a372:	7bfb      	ldrb	r3, [r7, #15]
 800a374:	2b7e      	cmp	r3, #126	; 0x7e
 800a376:	d901      	bls.n	800a37c <ssd1362_WriteChar+0x28>
        return 0;
 800a378:	2300      	movs	r3, #0
 800a37a:	e06e      	b.n	800a45a <ssd1362_WriteChar+0x106>
    
    // Check remaining space on current line
    if (SSD1362_WIDTH < (SSD1362.CurrentX + Font.FontWidth) ||
 800a37c:	4b39      	ldr	r3, [pc, #228]	; (800a464 <ssd1362_WriteChar+0x110>)
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	461a      	mov	r2, r3
 800a382:	793b      	ldrb	r3, [r7, #4]
 800a384:	4413      	add	r3, r2
 800a386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a38a:	dc06      	bgt.n	800a39a <ssd1362_WriteChar+0x46>
        SSD1362_HEIGHT < (SSD1362.CurrentY + Font.FontHeight))
 800a38c:	4b35      	ldr	r3, [pc, #212]	; (800a464 <ssd1362_WriteChar+0x110>)
 800a38e:	885b      	ldrh	r3, [r3, #2]
 800a390:	461a      	mov	r2, r3
 800a392:	797b      	ldrb	r3, [r7, #5]
 800a394:	4413      	add	r3, r2
    if (SSD1362_WIDTH < (SSD1362.CurrentX + Font.FontWidth) ||
 800a396:	2b40      	cmp	r3, #64	; 0x40
 800a398:	dd01      	ble.n	800a39e <ssd1362_WriteChar+0x4a>
    {
        // Not enough space on current line
        return 0;
 800a39a:	2300      	movs	r3, #0
 800a39c:	e05d      	b.n	800a45a <ssd1362_WriteChar+0x106>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800a39e:	2300      	movs	r3, #0
 800a3a0:	61fb      	str	r3, [r7, #28]
 800a3a2:	e04c      	b.n	800a43e <ssd1362_WriteChar+0xea>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
 800a3a8:	3b20      	subs	r3, #32
 800a3aa:	7979      	ldrb	r1, [r7, #5]
 800a3ac:	fb01 f303 	mul.w	r3, r1, r3
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	440b      	add	r3, r1
 800a3b6:	005b      	lsls	r3, r3, #1
 800a3b8:	4413      	add	r3, r2
 800a3ba:	881b      	ldrh	r3, [r3, #0]
 800a3bc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800a3be:	2300      	movs	r3, #0
 800a3c0:	61bb      	str	r3, [r7, #24]
 800a3c2:	e034      	b.n	800a42e <ssd1362_WriteChar+0xda>
            if((b << j) & 0x8000)  {
 800a3c4:	697a      	ldr	r2, [r7, #20]
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d012      	beq.n	800a3fa <ssd1362_WriteChar+0xa6>
                ssd1362_DrawPixel(SSD1362.CurrentX + j, (SSD1362.CurrentY + i), (SSD1362_COLOR) color);
 800a3d4:	4b23      	ldr	r3, [pc, #140]	; (800a464 <ssd1362_WriteChar+0x110>)
 800a3d6:	881b      	ldrh	r3, [r3, #0]
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	4413      	add	r3, r2
 800a3e0:	b2d8      	uxtb	r0, r3
 800a3e2:	4b20      	ldr	r3, [pc, #128]	; (800a464 <ssd1362_WriteChar+0x110>)
 800a3e4:	885b      	ldrh	r3, [r3, #2]
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	4413      	add	r3, r2
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	7bba      	ldrb	r2, [r7, #14]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	f7ff ff52 	bl	800a29c <ssd1362_DrawPixel>
 800a3f8:	e016      	b.n	800a428 <ssd1362_WriteChar+0xd4>
            } else {
                ssd1362_DrawPixel(SSD1362.CurrentX + j, (SSD1362.CurrentY + i), (SSD1362_COLOR)!color);
 800a3fa:	4b1a      	ldr	r3, [pc, #104]	; (800a464 <ssd1362_WriteChar+0x110>)
 800a3fc:	881b      	ldrh	r3, [r3, #0]
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	b2db      	uxtb	r3, r3
 800a404:	4413      	add	r3, r2
 800a406:	b2d8      	uxtb	r0, r3
 800a408:	4b16      	ldr	r3, [pc, #88]	; (800a464 <ssd1362_WriteChar+0x110>)
 800a40a:	885b      	ldrh	r3, [r3, #2]
 800a40c:	b2da      	uxtb	r2, r3
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	b2db      	uxtb	r3, r3
 800a412:	4413      	add	r3, r2
 800a414:	b2d9      	uxtb	r1, r3
 800a416:	7bbb      	ldrb	r3, [r7, #14]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	bf0c      	ite	eq
 800a41c:	2301      	moveq	r3, #1
 800a41e:	2300      	movne	r3, #0
 800a420:	b2db      	uxtb	r3, r3
 800a422:	461a      	mov	r2, r3
 800a424:	f7ff ff3a 	bl	800a29c <ssd1362_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	3301      	adds	r3, #1
 800a42c:	61bb      	str	r3, [r7, #24]
 800a42e:	793b      	ldrb	r3, [r7, #4]
 800a430:	461a      	mov	r2, r3
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	4293      	cmp	r3, r2
 800a436:	d3c5      	bcc.n	800a3c4 <ssd1362_WriteChar+0x70>
    for(i = 0; i < Font.FontHeight; i++) {
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	3301      	adds	r3, #1
 800a43c:	61fb      	str	r3, [r7, #28]
 800a43e:	797b      	ldrb	r3, [r7, #5]
 800a440:	461a      	mov	r2, r3
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	4293      	cmp	r3, r2
 800a446:	d3ad      	bcc.n	800a3a4 <ssd1362_WriteChar+0x50>
            }
        }
    }
    
    // The current space is now taken
    SSD1362.CurrentX += Font.FontWidth;
 800a448:	4b06      	ldr	r3, [pc, #24]	; (800a464 <ssd1362_WriteChar+0x110>)
 800a44a:	881a      	ldrh	r2, [r3, #0]
 800a44c:	793b      	ldrb	r3, [r7, #4]
 800a44e:	b29b      	uxth	r3, r3
 800a450:	4413      	add	r3, r2
 800a452:	b29a      	uxth	r2, r3
 800a454:	4b03      	ldr	r3, [pc, #12]	; (800a464 <ssd1362_WriteChar+0x110>)
 800a456:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800a458:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3724      	adds	r7, #36	; 0x24
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd90      	pop	{r4, r7, pc}
 800a462:	bf00      	nop
 800a464:	240102ec 	.word	0x240102ec

0800a468 <ssd1362_WriteString>:

// Write full string to screenbuffer
char ssd1362_WriteString(char* str, FontDef Font, SSD1362_COLOR color) {
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	1d38      	adds	r0, r7, #4
 800a472:	e880 0006 	stmia.w	r0, {r1, r2}
 800a476:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800a478:	e012      	b.n	800a4a0 <ssd1362_WriteString+0x38>
        if (ssd1362_WriteChar(*str, Font, color) != *str) {
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	7818      	ldrb	r0, [r3, #0]
 800a47e:	78fb      	ldrb	r3, [r7, #3]
 800a480:	1d3a      	adds	r2, r7, #4
 800a482:	ca06      	ldmia	r2, {r1, r2}
 800a484:	f7ff ff66 	bl	800a354 <ssd1362_WriteChar>
 800a488:	4603      	mov	r3, r0
 800a48a:	461a      	mov	r2, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	429a      	cmp	r2, r3
 800a492:	d002      	beq.n	800a49a <ssd1362_WriteString+0x32>
            // Char could not be written
            return *str;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	e008      	b.n	800a4ac <ssd1362_WriteString+0x44>
        }
        
        // Next char
        str++;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3301      	adds	r3, #1
 800a49e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1e8      	bne.n	800a47a <ssd1362_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <ssd1362_SetCursor>:

// Position the cursor
void ssd1362_SetCursor(uint8_t x, uint8_t y) {
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	460a      	mov	r2, r1
 800a4be:	71fb      	strb	r3, [r7, #7]
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	71bb      	strb	r3, [r7, #6]
    SSD1362.CurrentX = x;
 800a4c4:	79fb      	ldrb	r3, [r7, #7]
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	4b05      	ldr	r3, [pc, #20]	; (800a4e0 <ssd1362_SetCursor+0x2c>)
 800a4ca:	801a      	strh	r2, [r3, #0]
    SSD1362.CurrentY = y;
 800a4cc:	79bb      	ldrb	r3, [r7, #6]
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	4b03      	ldr	r3, [pc, #12]	; (800a4e0 <ssd1362_SetCursor+0x2c>)
 800a4d2:	805a      	strh	r2, [r3, #2]
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	240102ec 	.word	0x240102ec

0800a4e4 <ssd1362_Line>:

// Draw line by Bresenhem's algorithm
void ssd1362_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1362_COLOR color) {
 800a4e4:	b590      	push	{r4, r7, lr}
 800a4e6:	b089      	sub	sp, #36	; 0x24
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	4608      	mov	r0, r1
 800a4ee:	4611      	mov	r1, r2
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	4623      	mov	r3, r4
 800a4f4:	71fb      	strb	r3, [r7, #7]
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	71bb      	strb	r3, [r7, #6]
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	717b      	strb	r3, [r7, #5]
 800a4fe:	4613      	mov	r3, r2
 800a500:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800a502:	797a      	ldrb	r2, [r7, #5]
 800a504:	79fb      	ldrb	r3, [r7, #7]
 800a506:	1ad3      	subs	r3, r2, r3
 800a508:	2b00      	cmp	r3, #0
 800a50a:	bfb8      	it	lt
 800a50c:	425b      	neglt	r3, r3
 800a50e:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 800a510:	793a      	ldrb	r2, [r7, #4]
 800a512:	79bb      	ldrb	r3, [r7, #6]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	bfb8      	it	lt
 800a51a:	425b      	neglt	r3, r3
 800a51c:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 800a51e:	79fa      	ldrb	r2, [r7, #7]
 800a520:	797b      	ldrb	r3, [r7, #5]
 800a522:	429a      	cmp	r2, r3
 800a524:	d201      	bcs.n	800a52a <ssd1362_Line+0x46>
 800a526:	2301      	movs	r3, #1
 800a528:	e001      	b.n	800a52e <ssd1362_Line+0x4a>
 800a52a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a52e:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 800a530:	79ba      	ldrb	r2, [r7, #6]
 800a532:	793b      	ldrb	r3, [r7, #4]
 800a534:	429a      	cmp	r2, r3
 800a536:	d201      	bcs.n	800a53c <ssd1362_Line+0x58>
 800a538:	2301      	movs	r3, #1
 800a53a:	e001      	b.n	800a540 <ssd1362_Line+0x5c>
 800a53c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a540:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800a542:	69ba      	ldr	r2, [r7, #24]
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1362_DrawPixel(x2, y2, color);
 800a54a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800a54e:	7939      	ldrb	r1, [r7, #4]
 800a550:	797b      	ldrb	r3, [r7, #5]
 800a552:	4618      	mov	r0, r3
 800a554:	f7ff fea2 	bl	800a29c <ssd1362_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 800a558:	e024      	b.n	800a5a4 <ssd1362_Line+0xc0>
    {
    ssd1362_DrawPixel(x1, y1, color);
 800a55a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800a55e:	79b9      	ldrb	r1, [r7, #6]
 800a560:	79fb      	ldrb	r3, [r7, #7]
 800a562:	4618      	mov	r0, r3
 800a564:	f7ff fe9a 	bl	800a29c <ssd1362_DrawPixel>
    error2 = error * 2;
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	005b      	lsls	r3, r3, #1
 800a56c:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	425b      	negs	r3, r3
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	429a      	cmp	r2, r3
 800a576:	dd08      	ble.n	800a58a <ssd1362_Line+0xa6>
    {
      error -= deltaY;
 800a578:	69fa      	ldr	r2, [r7, #28]
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	b2da      	uxtb	r2, r3
 800a584:	79fb      	ldrb	r3, [r7, #7]
 800a586:	4413      	add	r3, r2
 800a588:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	429a      	cmp	r2, r3
 800a590:	da08      	bge.n	800a5a4 <ssd1362_Line+0xc0>
    {
      error += deltaX;
 800a592:	69fa      	ldr	r2, [r7, #28]
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	4413      	add	r3, r2
 800a598:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	b2da      	uxtb	r2, r3
 800a59e:	79bb      	ldrb	r3, [r7, #6]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 800a5a4:	79fa      	ldrb	r2, [r7, #7]
 800a5a6:	797b      	ldrb	r3, [r7, #5]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d1d6      	bne.n	800a55a <ssd1362_Line+0x76>
 800a5ac:	79ba      	ldrb	r2, [r7, #6]
 800a5ae:	793b      	ldrb	r3, [r7, #4]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d1d2      	bne.n	800a55a <ssd1362_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 800a5b4:	bf00      	nop
}
 800a5b6:	3724      	adds	r7, #36	; 0x24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd90      	pop	{r4, r7, pc}

0800a5bc <ssd1362_Polyline>:
//Draw polyline
void ssd1362_Polyline(const SSD1362_VERTEX *par_vertex, uint16_t par_size, SSD1362_COLOR color) {
 800a5bc:	b590      	push	{r4, r7, lr}
 800a5be:	b087      	sub	sp, #28
 800a5c0:	af02      	add	r7, sp, #8
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	807b      	strh	r3, [r7, #2]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	707b      	strb	r3, [r7, #1]
  uint16_t i;
  if(par_vertex != 0){
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d02a      	beq.n	800a628 <ssd1362_Polyline+0x6c>
    for(i = 1; i < par_size; i++){
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	81fb      	strh	r3, [r7, #14]
 800a5d6:	e022      	b.n	800a61e <ssd1362_Polyline+0x62>
      ssd1362_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 800a5d8:	89fa      	ldrh	r2, [r7, #14]
 800a5da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a5de:	4413      	add	r3, r2
 800a5e0:	005b      	lsls	r3, r3, #1
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	7818      	ldrb	r0, [r3, #0]
 800a5e8:	89fa      	ldrh	r2, [r7, #14]
 800a5ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a5ee:	4413      	add	r3, r2
 800a5f0:	005b      	lsls	r3, r3, #1
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	7859      	ldrb	r1, [r3, #1]
 800a5f8:	89fb      	ldrh	r3, [r7, #14]
 800a5fa:	005b      	lsls	r3, r3, #1
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	4413      	add	r3, r2
 800a600:	781c      	ldrb	r4, [r3, #0]
 800a602:	89fb      	ldrh	r3, [r7, #14]
 800a604:	005b      	lsls	r3, r3, #1
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	4413      	add	r3, r2
 800a60a:	785a      	ldrb	r2, [r3, #1]
 800a60c:	787b      	ldrb	r3, [r7, #1]
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	4613      	mov	r3, r2
 800a612:	4622      	mov	r2, r4
 800a614:	f7ff ff66 	bl	800a4e4 <ssd1362_Line>
    for(i = 1; i < par_size; i++){
 800a618:	89fb      	ldrh	r3, [r7, #14]
 800a61a:	3301      	adds	r3, #1
 800a61c:	81fb      	strh	r3, [r7, #14]
 800a61e:	89fa      	ldrh	r2, [r7, #14]
 800a620:	887b      	ldrh	r3, [r7, #2]
 800a622:	429a      	cmp	r2, r3
 800a624:	d3d8      	bcc.n	800a5d8 <ssd1362_Polyline+0x1c>
  }
  else
  {
    /*nothing to do*/
  }
  return;
 800a626:	bf00      	nop
 800a628:	bf00      	nop
}
 800a62a:	3714      	adds	r7, #20
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd90      	pop	{r4, r7, pc}

0800a630 <ssd1362_DegToRad>:
/*Convert Degrees to Radians*/
static float ssd1362_DegToRad(float par_deg) {
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * 3.14 / 180.0;
 800a63a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a63e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a642:	ed9f 6b09 	vldr	d6, [pc, #36]	; 800a668 <ssd1362_DegToRad+0x38>
 800a646:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a64a:	ed9f 5b09 	vldr	d5, [pc, #36]	; 800a670 <ssd1362_DegToRad+0x40>
 800a64e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a652:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800a656:	eeb0 0a67 	vmov.f32	s0, s15
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	f3af 8000 	nop.w
 800a668:	51eb851f 	.word	0x51eb851f
 800a66c:	40091eb8 	.word	0x40091eb8
 800a670:	00000000 	.word	0x00000000
 800a674:	40668000 	.word	0x40668000

0800a678 <ssd1362_NormalizeTo0_360>:
/*Normalize degree to [0;360]*/
static uint16_t ssd1362_NormalizeTo0_360(uint16_t par_deg) {
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	4603      	mov	r3, r0
 800a680:	80fb      	strh	r3, [r7, #6]
  uint16_t loc_angle;
  if(par_deg <= 360)
 800a682:	88fb      	ldrh	r3, [r7, #6]
 800a684:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800a688:	d802      	bhi.n	800a690 <ssd1362_NormalizeTo0_360+0x18>
  {
    loc_angle = par_deg;
 800a68a:	88fb      	ldrh	r3, [r7, #6]
 800a68c:	81fb      	strh	r3, [r7, #14]
 800a68e:	e013      	b.n	800a6b8 <ssd1362_NormalizeTo0_360+0x40>
  }
  else
  {
    loc_angle = par_deg % 360;
 800a690:	88fb      	ldrh	r3, [r7, #6]
 800a692:	08da      	lsrs	r2, r3, #3
 800a694:	490c      	ldr	r1, [pc, #48]	; (800a6c8 <ssd1362_NormalizeTo0_360+0x50>)
 800a696:	fba1 1202 	umull	r1, r2, r1, r2
 800a69a:	0892      	lsrs	r2, r2, #2
 800a69c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800a6a0:	fb01 f202 	mul.w	r2, r1, r2
 800a6a4:	1a9b      	subs	r3, r3, r2
 800a6a6:	81fb      	strh	r3, [r7, #14]
    loc_angle = ((par_deg != 0)?par_deg:360);
 800a6a8:	88fb      	ldrh	r3, [r7, #6]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d001      	beq.n	800a6b2 <ssd1362_NormalizeTo0_360+0x3a>
 800a6ae:	88fb      	ldrh	r3, [r7, #6]
 800a6b0:	e001      	b.n	800a6b6 <ssd1362_NormalizeTo0_360+0x3e>
 800a6b2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800a6b6:	81fb      	strh	r3, [r7, #14]
  }
  return loc_angle;
 800a6b8:	89fb      	ldrh	r3, [r7, #14]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	16c16c17 	.word	0x16c16c17

0800a6cc <ssd1362_DrawArc>:
/*DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1362_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1362_COLOR color) {
 800a6cc:	b590      	push	{r4, r7, lr}
 800a6ce:	b08d      	sub	sp, #52	; 0x34
 800a6d0:	af02      	add	r7, sp, #8
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	4608      	mov	r0, r1
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	461a      	mov	r2, r3
 800a6da:	4623      	mov	r3, r4
 800a6dc:	73fb      	strb	r3, [r7, #15]
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73bb      	strb	r3, [r7, #14]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	737b      	strb	r3, [r7, #13]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	817b      	strh	r3, [r7, #10]
    #define CIRCLE_APPROXIMATION_SEGMENTS 36
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1,xp2;
    uint8_t yp1,yp2;
    uint32_t count = 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t loc_sweep = 0;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	61fb      	str	r3, [r7, #28]
    float rad;
    
    loc_sweep = ssd1362_NormalizeTo0_360(sweep);
 800a6f2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7ff ffbf 	bl	800a678 <ssd1362_NormalizeTo0_360>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1362_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800a6fe:	897b      	ldrh	r3, [r7, #10]
 800a700:	4618      	mov	r0, r3
 800a702:	f7ff ffb9 	bl	800a678 <ssd1362_NormalizeTo0_360>
 800a706:	4603      	mov	r3, r0
 800a708:	4a68      	ldr	r2, [pc, #416]	; (800a8ac <ssd1362_DrawArc+0x1e0>)
 800a70a:	fb82 1203 	smull	r1, r2, r2, r3
 800a70e:	1092      	asrs	r2, r2, #2
 800a710:	17db      	asrs	r3, r3, #31
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	627b      	str	r3, [r7, #36]	; 0x24
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800a716:	69fa      	ldr	r2, [r7, #28]
 800a718:	4613      	mov	r3, r2
 800a71a:	00db      	lsls	r3, r3, #3
 800a71c:	4413      	add	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	08db      	lsrs	r3, r3, #3
 800a722:	4a63      	ldr	r2, [pc, #396]	; (800a8b0 <ssd1362_DrawArc+0x1e4>)
 800a724:	fba2 2303 	umull	r2, r3, r2, r3
 800a728:	089b      	lsrs	r3, r3, #2
 800a72a:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	ee07 3a90 	vmov	s15, r3
 800a732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	ee07 3a90 	vmov	s15, r3
 800a73c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a744:	edc7 7a05 	vstr	s15, [r7, #20]
    while(count < approx_segments)
 800a748:	e0a6      	b.n	800a898 <ssd1362_DrawArc+0x1cc>
    {
        rad = ssd1362_DegToRad(count*approx_degree);
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	ee07 3a90 	vmov	s15, r3
 800a750:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a754:	edd7 7a05 	vldr	s15, [r7, #20]
 800a758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a75c:	eeb0 0a67 	vmov.f32	s0, s15
 800a760:	f7ff ff66 	bl	800a630 <ssd1362_DegToRad>
 800a764:	ed87 0a08 	vstr	s0, [r7, #32]
        xp1 = x + (int8_t)(sin(rad)*radius);
 800a768:	edd7 7a08 	vldr	s15, [r7, #32]
 800a76c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a770:	eeb0 0b47 	vmov.f64	d0, d7
 800a774:	f003 f9dc 	bl	800db30 <sin>
 800a778:	eeb0 6b40 	vmov.f64	d6, d0
 800a77c:	7b7b      	ldrb	r3, [r7, #13]
 800a77e:	ee07 3a90 	vmov	s15, r3
 800a782:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a786:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a78a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a78e:	edc7 7a01 	vstr	s15, [r7, #4]
 800a792:	793b      	ldrb	r3, [r7, #4]
 800a794:	b25b      	sxtb	r3, r3
 800a796:	b2da      	uxtb	r2, r3
 800a798:	7bfb      	ldrb	r3, [r7, #15]
 800a79a:	4413      	add	r3, r2
 800a79c:	74fb      	strb	r3, [r7, #19]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 800a79e:	edd7 7a08 	vldr	s15, [r7, #32]
 800a7a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a7a6:	eeb0 0b47 	vmov.f64	d0, d7
 800a7aa:	f003 f979 	bl	800daa0 <cos>
 800a7ae:	eeb0 6b40 	vmov.f64	d6, d0
 800a7b2:	7b7b      	ldrb	r3, [r7, #13]
 800a7b4:	ee07 3a90 	vmov	s15, r3
 800a7b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a7bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a7c0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a7c4:	edc7 7a01 	vstr	s15, [r7, #4]
 800a7c8:	793b      	ldrb	r3, [r7, #4]
 800a7ca:	b25b      	sxtb	r3, r3
 800a7cc:	b2da      	uxtb	r2, r3
 800a7ce:	7bbb      	ldrb	r3, [r7, #14]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	74bb      	strb	r3, [r7, #18]
        count++;
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	627b      	str	r3, [r7, #36]	; 0x24
        if(count != approx_segments)
 800a7da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d00f      	beq.n	800a802 <ssd1362_DrawArc+0x136>
        {
            rad = ssd1362_DegToRad(count*approx_degree);
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e4:	ee07 3a90 	vmov	s15, r3
 800a7e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a7ec:	edd7 7a05 	vldr	s15, [r7, #20]
 800a7f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f4:	eeb0 0a67 	vmov.f32	s0, s15
 800a7f8:	f7ff ff1a 	bl	800a630 <ssd1362_DegToRad>
 800a7fc:	ed87 0a08 	vstr	s0, [r7, #32]
 800a800:	e00a      	b.n	800a818 <ssd1362_DrawArc+0x14c>
        }
        else
        {            
            rad = ssd1362_DegToRad(loc_sweep);
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	ee07 3a90 	vmov	s15, r3
 800a808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a80c:	eeb0 0a67 	vmov.f32	s0, s15
 800a810:	f7ff ff0e 	bl	800a630 <ssd1362_DegToRad>
 800a814:	ed87 0a08 	vstr	s0, [r7, #32]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 800a818:	edd7 7a08 	vldr	s15, [r7, #32]
 800a81c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a820:	eeb0 0b47 	vmov.f64	d0, d7
 800a824:	f003 f984 	bl	800db30 <sin>
 800a828:	eeb0 6b40 	vmov.f64	d6, d0
 800a82c:	7b7b      	ldrb	r3, [r7, #13]
 800a82e:	ee07 3a90 	vmov	s15, r3
 800a832:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a836:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a83a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a83e:	edc7 7a01 	vstr	s15, [r7, #4]
 800a842:	793b      	ldrb	r3, [r7, #4]
 800a844:	b25b      	sxtb	r3, r3
 800a846:	b2da      	uxtb	r2, r3
 800a848:	7bfb      	ldrb	r3, [r7, #15]
 800a84a:	4413      	add	r3, r2
 800a84c:	747b      	strb	r3, [r7, #17]
        yp2 = y + (int8_t)(cos(rad)*radius);    
 800a84e:	edd7 7a08 	vldr	s15, [r7, #32]
 800a852:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a856:	eeb0 0b47 	vmov.f64	d0, d7
 800a85a:	f003 f921 	bl	800daa0 <cos>
 800a85e:	eeb0 6b40 	vmov.f64	d6, d0
 800a862:	7b7b      	ldrb	r3, [r7, #13]
 800a864:	ee07 3a90 	vmov	s15, r3
 800a868:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a86c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a870:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a874:	edc7 7a01 	vstr	s15, [r7, #4]
 800a878:	793b      	ldrb	r3, [r7, #4]
 800a87a:	b25b      	sxtb	r3, r3
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
 800a880:	4413      	add	r3, r2
 800a882:	743b      	strb	r3, [r7, #16]
        ssd1362_Line(xp1,yp1,xp2,yp2,color);
 800a884:	7c3c      	ldrb	r4, [r7, #16]
 800a886:	7c7a      	ldrb	r2, [r7, #17]
 800a888:	7cb9      	ldrb	r1, [r7, #18]
 800a88a:	7cf8      	ldrb	r0, [r7, #19]
 800a88c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	4623      	mov	r3, r4
 800a894:	f7ff fe26 	bl	800a4e4 <ssd1362_Line>
    while(count < approx_segments)
 800a898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	f4ff af54 	bcc.w	800a74a <ssd1362_DrawArc+0x7e>
    }
    
    return;
 800a8a2:	bf00      	nop
}
 800a8a4:	372c      	adds	r7, #44	; 0x2c
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd90      	pop	{r4, r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	66666667 	.word	0x66666667
 800a8b0:	16c16c17 	.word	0x16c16c17

0800a8b4 <ssd1362_DrawCircle>:
//Draw circle by Bresenhem's algorithm
void ssd1362_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1362_COLOR par_color) {
 800a8b4:	b590      	push	{r4, r7, lr}
 800a8b6:	b087      	sub	sp, #28
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	4608      	mov	r0, r1
 800a8be:	4611      	mov	r1, r2
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	4623      	mov	r3, r4
 800a8c4:	71fb      	strb	r3, [r7, #7]
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	71bb      	strb	r3, [r7, #6]
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	717b      	strb	r3, [r7, #5]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 800a8d2:	797b      	ldrb	r3, [r7, #5]
 800a8d4:	425b      	negs	r3, r3
 800a8d6:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 800a8dc:	797b      	ldrb	r3, [r7, #5]
 800a8de:	f1c3 0301 	rsb	r3, r3, #1
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1362_WIDTH || par_y >= SSD1362_HEIGHT) {
 800a8e6:	79bb      	ldrb	r3, [r7, #6]
 800a8e8:	2b3f      	cmp	r3, #63	; 0x3f
 800a8ea:	d862      	bhi.n	800a9b2 <ssd1362_DrawCircle+0xfe>
    return;
  }

    do {
      ssd1362_DrawPixel(par_x - x, par_y + y, par_color);
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	79fa      	ldrb	r2, [r7, #7]
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	b2d8      	uxtb	r0, r3
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	79bb      	ldrb	r3, [r7, #6]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	793a      	ldrb	r2, [r7, #4]
 800a902:	4619      	mov	r1, r3
 800a904:	f7ff fcca 	bl	800a29c <ssd1362_DrawPixel>
      ssd1362_DrawPixel(par_x + x, par_y + y, par_color);
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	79fb      	ldrb	r3, [r7, #7]
 800a90e:	4413      	add	r3, r2
 800a910:	b2d8      	uxtb	r0, r3
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	b2da      	uxtb	r2, r3
 800a916:	79bb      	ldrb	r3, [r7, #6]
 800a918:	4413      	add	r3, r2
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	793a      	ldrb	r2, [r7, #4]
 800a91e:	4619      	mov	r1, r3
 800a920:	f7ff fcbc 	bl	800a29c <ssd1362_DrawPixel>
      ssd1362_DrawPixel(par_x + x, par_y - y, par_color);
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	b2da      	uxtb	r2, r3
 800a928:	79fb      	ldrb	r3, [r7, #7]
 800a92a:	4413      	add	r3, r2
 800a92c:	b2d8      	uxtb	r0, r3
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	b2db      	uxtb	r3, r3
 800a932:	79ba      	ldrb	r2, [r7, #6]
 800a934:	1ad3      	subs	r3, r2, r3
 800a936:	b2db      	uxtb	r3, r3
 800a938:	793a      	ldrb	r2, [r7, #4]
 800a93a:	4619      	mov	r1, r3
 800a93c:	f7ff fcae 	bl	800a29c <ssd1362_DrawPixel>
      ssd1362_DrawPixel(par_x - x, par_y - y, par_color);
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	b2db      	uxtb	r3, r3
 800a944:	79fa      	ldrb	r2, [r7, #7]
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	b2d8      	uxtb	r0, r3
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	79ba      	ldrb	r2, [r7, #6]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	b2db      	uxtb	r3, r3
 800a954:	793a      	ldrb	r2, [r7, #4]
 800a956:	4619      	mov	r1, r3
 800a958:	f7ff fca0 	bl	800a29c <ssd1362_DrawPixel>
        e2 = err;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	429a      	cmp	r2, r3
 800a966:	dc13      	bgt.n	800a990 <ssd1362_DrawCircle+0xdc>
            y++;
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	3301      	adds	r3, #1
 800a96c:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	005b      	lsls	r3, r3, #1
 800a972:	3301      	adds	r3, #1
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	4413      	add	r3, r2
 800a978:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	425b      	negs	r3, r3
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	429a      	cmp	r2, r3
 800a982:	d105      	bne.n	800a990 <ssd1362_DrawCircle+0xdc>
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	429a      	cmp	r2, r3
 800a98a:	dc01      	bgt.n	800a990 <ssd1362_DrawCircle+0xdc>
              e2 = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	429a      	cmp	r2, r3
 800a996:	dd08      	ble.n	800a9aa <ssd1362_DrawCircle+0xf6>
          x++;
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	3301      	adds	r3, #1
 800a99c:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	005b      	lsls	r3, r3, #1
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	dd9d      	ble.n	800a8ec <ssd1362_DrawCircle+0x38>

    return;
 800a9b0:	e000      	b.n	800a9b4 <ssd1362_DrawCircle+0x100>
    return;
 800a9b2:	bf00      	nop
}
 800a9b4:	371c      	adds	r7, #28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd90      	pop	{r4, r7, pc}

0800a9ba <ssd1362_DrawRectangle>:

//Draw rectangle
void ssd1362_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1362_COLOR color) {
 800a9ba:	b590      	push	{r4, r7, lr}
 800a9bc:	b085      	sub	sp, #20
 800a9be:	af02      	add	r7, sp, #8
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	4608      	mov	r0, r1
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	4623      	mov	r3, r4
 800a9ca:	71fb      	strb	r3, [r7, #7]
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	71bb      	strb	r3, [r7, #6]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	717b      	strb	r3, [r7, #5]
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	713b      	strb	r3, [r7, #4]
  ssd1362_Line(x1,y1,x2,y1,color);
 800a9d8:	79bc      	ldrb	r4, [r7, #6]
 800a9da:	797a      	ldrb	r2, [r7, #5]
 800a9dc:	79b9      	ldrb	r1, [r7, #6]
 800a9de:	79f8      	ldrb	r0, [r7, #7]
 800a9e0:	7e3b      	ldrb	r3, [r7, #24]
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	4623      	mov	r3, r4
 800a9e6:	f7ff fd7d 	bl	800a4e4 <ssd1362_Line>
  ssd1362_Line(x2,y1,x2,y2,color);
 800a9ea:	793c      	ldrb	r4, [r7, #4]
 800a9ec:	797a      	ldrb	r2, [r7, #5]
 800a9ee:	79b9      	ldrb	r1, [r7, #6]
 800a9f0:	7978      	ldrb	r0, [r7, #5]
 800a9f2:	7e3b      	ldrb	r3, [r7, #24]
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	4623      	mov	r3, r4
 800a9f8:	f7ff fd74 	bl	800a4e4 <ssd1362_Line>
  ssd1362_Line(x2,y2,x1,y2,color);
 800a9fc:	793c      	ldrb	r4, [r7, #4]
 800a9fe:	79fa      	ldrb	r2, [r7, #7]
 800aa00:	7939      	ldrb	r1, [r7, #4]
 800aa02:	7978      	ldrb	r0, [r7, #5]
 800aa04:	7e3b      	ldrb	r3, [r7, #24]
 800aa06:	9300      	str	r3, [sp, #0]
 800aa08:	4623      	mov	r3, r4
 800aa0a:	f7ff fd6b 	bl	800a4e4 <ssd1362_Line>
  ssd1362_Line(x1,y2,x1,y1,color);
 800aa0e:	79bc      	ldrb	r4, [r7, #6]
 800aa10:	79fa      	ldrb	r2, [r7, #7]
 800aa12:	7939      	ldrb	r1, [r7, #4]
 800aa14:	79f8      	ldrb	r0, [r7, #7]
 800aa16:	7e3b      	ldrb	r3, [r7, #24]
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	4623      	mov	r3, r4
 800aa1c:	f7ff fd62 	bl	800a4e4 <ssd1362_Line>

  return;
 800aa20:	bf00      	nop
}
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd90      	pop	{r4, r7, pc}

0800aa28 <ssd1362_TestBorder>:
#include <string.h>
#include <stdio.h>
#include "ssd1362.h"
#include "ssd1362_tests.h"

void ssd1362_TestBorder() {
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
    ssd1362_Fill(Black);
 800aa2e:	2000      	movs	r0, #0
 800aa30:	f7ff fbf4 	bl	800a21c <ssd1362_Fill>
   
    uint32_t start = HAL_GetTick();
 800aa34:	f7f7 fcca 	bl	80023cc <HAL_GetTick>
 800aa38:	60b8      	str	r0, [r7, #8]
    uint32_t end = start;
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	73bb      	strb	r3, [r7, #14]
    do {
        ssd1362_DrawPixel(x, y, Black);
 800aa46:	7bb9      	ldrb	r1, [r7, #14]
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7ff fc25 	bl	800a29c <ssd1362_DrawPixel>

        if((y == 0) && (x < 127))
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d106      	bne.n	800aa66 <ssd1362_TestBorder+0x3e>
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
 800aa5a:	2b7e      	cmp	r3, #126	; 0x7e
 800aa5c:	d803      	bhi.n	800aa66 <ssd1362_TestBorder+0x3e>
            x++;
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	3301      	adds	r3, #1
 800aa62:	73fb      	strb	r3, [r7, #15]
 800aa64:	e016      	b.n	800aa94 <ssd1362_TestBorder+0x6c>
        else if((x == 127) && (y < (SSD1362_HEIGHT-1)))
 800aa66:	7bfb      	ldrb	r3, [r7, #15]
 800aa68:	2b7f      	cmp	r3, #127	; 0x7f
 800aa6a:	d106      	bne.n	800aa7a <ssd1362_TestBorder+0x52>
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	2b3e      	cmp	r3, #62	; 0x3e
 800aa70:	d803      	bhi.n	800aa7a <ssd1362_TestBorder+0x52>
            y++;
 800aa72:	7bbb      	ldrb	r3, [r7, #14]
 800aa74:	3301      	adds	r3, #1
 800aa76:	73bb      	strb	r3, [r7, #14]
 800aa78:	e00c      	b.n	800aa94 <ssd1362_TestBorder+0x6c>
        else if((y == (SSD1362_HEIGHT-1)) && (x > 0))
 800aa7a:	7bbb      	ldrb	r3, [r7, #14]
 800aa7c:	2b3f      	cmp	r3, #63	; 0x3f
 800aa7e:	d106      	bne.n	800aa8e <ssd1362_TestBorder+0x66>
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d003      	beq.n	800aa8e <ssd1362_TestBorder+0x66>
            x--;
 800aa86:	7bfb      	ldrb	r3, [r7, #15]
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	73fb      	strb	r3, [r7, #15]
 800aa8c:	e002      	b.n	800aa94 <ssd1362_TestBorder+0x6c>
        else
            y--;
 800aa8e:	7bbb      	ldrb	r3, [r7, #14]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	73bb      	strb	r3, [r7, #14]

        ssd1362_DrawPixel(x, y, White);
 800aa94:	7bb9      	ldrb	r1, [r7, #14]
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7ff fbfe 	bl	800a29c <ssd1362_DrawPixel>
        ssd1362_UpdateScreen();
 800aaa0:	f7ff fbe0 	bl	800a264 <ssd1362_UpdateScreen>
    
        HAL_Delay(5);
 800aaa4:	2005      	movs	r0, #5
 800aaa6:	f7f7 fc9d 	bl	80023e4 <HAL_Delay>
        end = HAL_GetTick();
 800aaaa:	f7f7 fc8f 	bl	80023cc <HAL_GetTick>
 800aaae:	6078      	str	r0, [r7, #4]
    } while((end - start) < 8000);
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800aaba:	d3c4      	bcc.n	800aa46 <ssd1362_TestBorder+0x1e>
   
    HAL_Delay(1000);
 800aabc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aac0:	f7f7 fc90 	bl	80023e4 <HAL_Delay>
}
 800aac4:	bf00      	nop
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <ssd1362_TestFonts>:

void ssd1362_TestFonts() {
 800aacc:	b580      	push	{r7, lr}
 800aace:	af00      	add	r7, sp, #0
    ssd1362_Fill(Black);
 800aad0:	2000      	movs	r0, #0
 800aad2:	f7ff fba3 	bl	800a21c <ssd1362_Fill>
    ssd1362_SetCursor(2, 0);
 800aad6:	2100      	movs	r1, #0
 800aad8:	2002      	movs	r0, #2
 800aada:	f7ff fceb 	bl	800a4b4 <ssd1362_SetCursor>
    ssd1362_WriteString("Font 16x26", Font_16x26, White);
 800aade:	4a14      	ldr	r2, [pc, #80]	; (800ab30 <ssd1362_TestFonts+0x64>)
 800aae0:	2301      	movs	r3, #1
 800aae2:	ca06      	ldmia	r2, {r1, r2}
 800aae4:	4813      	ldr	r0, [pc, #76]	; (800ab34 <ssd1362_TestFonts+0x68>)
 800aae6:	f7ff fcbf 	bl	800a468 <ssd1362_WriteString>
    ssd1362_SetCursor(2, 26);
 800aaea:	211a      	movs	r1, #26
 800aaec:	2002      	movs	r0, #2
 800aaee:	f7ff fce1 	bl	800a4b4 <ssd1362_SetCursor>
    ssd1362_WriteString("Font 11x18", Font_11x18, White);
 800aaf2:	4a11      	ldr	r2, [pc, #68]	; (800ab38 <ssd1362_TestFonts+0x6c>)
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	ca06      	ldmia	r2, {r1, r2}
 800aaf8:	4810      	ldr	r0, [pc, #64]	; (800ab3c <ssd1362_TestFonts+0x70>)
 800aafa:	f7ff fcb5 	bl	800a468 <ssd1362_WriteString>
    ssd1362_SetCursor(2, 26+18);
 800aafe:	212c      	movs	r1, #44	; 0x2c
 800ab00:	2002      	movs	r0, #2
 800ab02:	f7ff fcd7 	bl	800a4b4 <ssd1362_SetCursor>
    ssd1362_WriteString("Font 7x10", Font_7x10, White);
 800ab06:	4a0e      	ldr	r2, [pc, #56]	; (800ab40 <ssd1362_TestFonts+0x74>)
 800ab08:	2301      	movs	r3, #1
 800ab0a:	ca06      	ldmia	r2, {r1, r2}
 800ab0c:	480d      	ldr	r0, [pc, #52]	; (800ab44 <ssd1362_TestFonts+0x78>)
 800ab0e:	f7ff fcab 	bl	800a468 <ssd1362_WriteString>
    ssd1362_SetCursor(2, 26+18+10);
 800ab12:	2136      	movs	r1, #54	; 0x36
 800ab14:	2002      	movs	r0, #2
 800ab16:	f7ff fccd 	bl	800a4b4 <ssd1362_SetCursor>
    ssd1362_WriteString("Font 6x8", Font_6x8, White);
 800ab1a:	4a0b      	ldr	r2, [pc, #44]	; (800ab48 <ssd1362_TestFonts+0x7c>)
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	ca06      	ldmia	r2, {r1, r2}
 800ab20:	480a      	ldr	r0, [pc, #40]	; (800ab4c <ssd1362_TestFonts+0x80>)
 800ab22:	f7ff fca1 	bl	800a468 <ssd1362_WriteString>
    ssd1362_UpdateScreen();
 800ab26:	f7ff fb9d 	bl	800a264 <ssd1362_UpdateScreen>
}
 800ab2a:	bf00      	nop
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	24000028 	.word	0x24000028
 800ab34:	0800e708 	.word	0x0800e708
 800ab38:	24000020 	.word	0x24000020
 800ab3c:	0800e714 	.word	0x0800e714
 800ab40:	24000018 	.word	0x24000018
 800ab44:	0800e720 	.word	0x0800e720
 800ab48:	24000010 	.word	0x24000010
 800ab4c:	0800e72c 	.word	0x0800e72c

0800ab50 <ssd1362_TestFPS>:

void ssd1362_TestFPS() {
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b098      	sub	sp, #96	; 0x60
 800ab54:	af00      	add	r7, sp, #0
    ssd1362_Fill(White);
 800ab56:	2001      	movs	r0, #1
 800ab58:	f7ff fb60 	bl	800a21c <ssd1362_Fill>
   
    uint32_t start = HAL_GetTick();
 800ab5c:	f7f7 fc36 	bl	80023cc <HAL_GetTick>
 800ab60:	65b8      	str	r0, [r7, #88]	; 0x58
    uint32_t end = start;
 800ab62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab64:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 800ab66:	2300      	movs	r3, #0
 800ab68:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 800ab6a:	4a3b      	ldr	r2, [pc, #236]	; (800ac58 <ssd1362_TestFPS+0x108>)
 800ab6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ab70:	ca07      	ldmia	r2, {r0, r1, r2}
 800ab72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1362_SetCursor(2,0);
 800ab76:	2100      	movs	r1, #0
 800ab78:	2002      	movs	r0, #2
 800ab7a:	f7ff fc9b 	bl	800a4b4 <ssd1362_SetCursor>
    ssd1362_WriteString("Testing...", Font_11x18, Black);
 800ab7e:	4a37      	ldr	r2, [pc, #220]	; (800ac5c <ssd1362_TestFPS+0x10c>)
 800ab80:	2300      	movs	r3, #0
 800ab82:	ca06      	ldmia	r2, {r1, r2}
 800ab84:	4836      	ldr	r0, [pc, #216]	; (800ac60 <ssd1362_TestFPS+0x110>)
 800ab86:	f7ff fc6f 	bl	800a468 <ssd1362_WriteString>
   
    do {
        ssd1362_SetCursor(2, 18);
 800ab8a:	2112      	movs	r1, #18
 800ab8c:	2002      	movs	r0, #2
 800ab8e:	f7ff fc91 	bl	800a4b4 <ssd1362_SetCursor>
        ssd1362_WriteString(message, Font_11x18, Black);
 800ab92:	4a32      	ldr	r2, [pc, #200]	; (800ac5c <ssd1362_TestFPS+0x10c>)
 800ab94:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800ab98:	2300      	movs	r3, #0
 800ab9a:	ca06      	ldmia	r2, {r1, r2}
 800ab9c:	f7ff fc64 	bl	800a468 <ssd1362_WriteString>
        ssd1362_UpdateScreen();
 800aba0:	f7ff fb60 	bl	800a264 <ssd1362_UpdateScreen>
       
        char ch = message[0];
 800aba4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800aba8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        memmove(message, message+1, sizeof(message)-2);
 800abac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800abb0:	3301      	adds	r3, #1
 800abb2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800abb6:	220a      	movs	r2, #10
 800abb8:	4619      	mov	r1, r3
 800abba:	f000 f967 	bl	800ae8c <memmove>
        message[sizeof(message)-2] = ch;
 800abbe:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800abc2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        fps++;
 800abc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abc8:	3301      	adds	r3, #1
 800abca:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 800abcc:	f7f7 fbfe 	bl	80023cc <HAL_GetTick>
 800abd0:	6578      	str	r0, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 800abd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800abd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	f241 3287 	movw	r2, #4999	; 0x1387
 800abdc:	4293      	cmp	r3, r2
 800abde:	d9d4      	bls.n	800ab8a <ssd1362_TestFPS+0x3a>
   
    HAL_Delay(1000);
 800abe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800abe4:	f7f7 fbfe 	bl	80023e4 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 800abe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abea:	ee07 3a90 	vmov	s15, r3
 800abee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abf2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800abf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800abf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	ee07 3a90 	vmov	s15, r3
 800ac00:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ac04:	ed9f 4b12 	vldr	d4, [pc, #72]	; 800ac50 <ssd1362_TestFPS+0x100>
 800ac08:	ee87 6b04 	vdiv.f64	d6, d7, d4
 800ac0c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800ac10:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ac14:	ee17 3a90 	vmov	r3, s15
 800ac18:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 800ac1a:	1d38      	adds	r0, r7, #4
 800ac1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac1e:	4a11      	ldr	r2, [pc, #68]	; (800ac64 <ssd1362_TestFPS+0x114>)
 800ac20:	2140      	movs	r1, #64	; 0x40
 800ac22:	f000 fe53 	bl	800b8cc <sniprintf>
   
    ssd1362_Fill(White);
 800ac26:	2001      	movs	r0, #1
 800ac28:	f7ff faf8 	bl	800a21c <ssd1362_Fill>
    ssd1362_SetCursor(2, 2);
 800ac2c:	2102      	movs	r1, #2
 800ac2e:	2002      	movs	r0, #2
 800ac30:	f7ff fc40 	bl	800a4b4 <ssd1362_SetCursor>
    ssd1362_WriteString(buff, Font_11x18, Black);
 800ac34:	4a09      	ldr	r2, [pc, #36]	; (800ac5c <ssd1362_TestFPS+0x10c>)
 800ac36:	1d38      	adds	r0, r7, #4
 800ac38:	2300      	movs	r3, #0
 800ac3a:	ca06      	ldmia	r2, {r1, r2}
 800ac3c:	f7ff fc14 	bl	800a468 <ssd1362_WriteString>
    ssd1362_UpdateScreen();
 800ac40:	f7ff fb10 	bl	800a264 <ssd1362_UpdateScreen>
}
 800ac44:	bf00      	nop
 800ac46:	3760      	adds	r7, #96	; 0x60
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	f3af 8000 	nop.w
 800ac50:	00000000 	.word	0x00000000
 800ac54:	408f4000 	.word	0x408f4000
 800ac58:	0800e74c 	.word	0x0800e74c
 800ac5c:	24000020 	.word	0x24000020
 800ac60:	0800e738 	.word	0x0800e738
 800ac64:	0800e744 	.word	0x0800e744

0800ac68 <ssd1362_TestLine>:

void ssd1362_TestLine() {
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af02      	add	r7, sp, #8

  ssd1362_Line(1,1,SSD1362_WIDTH - 1,SSD1362_HEIGHT - 1,White);
 800ac6e:	2301      	movs	r3, #1
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	233f      	movs	r3, #63	; 0x3f
 800ac74:	22ff      	movs	r2, #255	; 0xff
 800ac76:	2101      	movs	r1, #1
 800ac78:	2001      	movs	r0, #1
 800ac7a:	f7ff fc33 	bl	800a4e4 <ssd1362_Line>
  ssd1362_Line(SSD1362_WIDTH - 1,1,1,SSD1362_HEIGHT - 1,White);
 800ac7e:	2301      	movs	r3, #1
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	233f      	movs	r3, #63	; 0x3f
 800ac84:	2201      	movs	r2, #1
 800ac86:	2101      	movs	r1, #1
 800ac88:	20ff      	movs	r0, #255	; 0xff
 800ac8a:	f7ff fc2b 	bl	800a4e4 <ssd1362_Line>
  ssd1362_UpdateScreen();
 800ac8e:	f7ff fae9 	bl	800a264 <ssd1362_UpdateScreen>
  return;
 800ac92:	bf00      	nop
}
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <ssd1362_TestRectangle>:

void ssd1362_TestRectangle() {
 800ac98:	b590      	push	{r4, r7, lr}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 800ac9e:	2300      	movs	r3, #0
 800aca0:	607b      	str	r3, [r7, #4]
 800aca2:	e027      	b.n	800acf4 <ssd1362_TestRectangle+0x5c>
    ssd1362_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1362_WIDTH-1 - (5*delta),SSD1362_HEIGHT-1 - (5*delta),White);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	461a      	mov	r2, r3
 800acaa:	0092      	lsls	r2, r2, #2
 800acac:	4413      	add	r3, r2
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	3301      	adds	r3, #1
 800acb2:	b2d8      	uxtb	r0, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	461a      	mov	r2, r3
 800acba:	0092      	lsls	r2, r2, #2
 800acbc:	4413      	add	r3, r2
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	3301      	adds	r3, #1
 800acc2:	b2d9      	uxtb	r1, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	461a      	mov	r2, r3
 800acca:	0092      	lsls	r2, r2, #2
 800accc:	4413      	add	r3, r2
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	43db      	mvns	r3, r3
 800acd2:	b2da      	uxtb	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	461c      	mov	r4, r3
 800acda:	00a4      	lsls	r4, r4, #2
 800acdc:	4423      	add	r3, r4
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2401      	movs	r4, #1
 800ace8:	9400      	str	r4, [sp, #0]
 800acea:	f7ff fe66 	bl	800a9ba <ssd1362_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	3301      	adds	r3, #1
 800acf2:	607b      	str	r3, [r7, #4]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2b04      	cmp	r3, #4
 800acf8:	d9d4      	bls.n	800aca4 <ssd1362_TestRectangle+0xc>
  }
  ssd1362_UpdateScreen();
 800acfa:	f7ff fab3 	bl	800a264 <ssd1362_UpdateScreen>
  return;
 800acfe:	bf00      	nop
}
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd90      	pop	{r4, r7, pc}

0800ad06 <ssd1362_TestCircle>:

void ssd1362_TestCircle() {
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b082      	sub	sp, #8
 800ad0a:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	607b      	str	r3, [r7, #4]
 800ad10:	e010      	b.n	800ad34 <ssd1362_TestCircle+0x2e>
    ssd1362_DrawCircle(20* delta+30, 15, 10, White);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	461a      	mov	r2, r3
 800ad18:	0092      	lsls	r2, r2, #2
 800ad1a:	4413      	add	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	331e      	adds	r3, #30
 800ad22:	b2d8      	uxtb	r0, r3
 800ad24:	2301      	movs	r3, #1
 800ad26:	220a      	movs	r2, #10
 800ad28:	210f      	movs	r1, #15
 800ad2a:	f7ff fdc3 	bl	800a8b4 <ssd1362_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	3301      	adds	r3, #1
 800ad32:	607b      	str	r3, [r7, #4]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2b04      	cmp	r3, #4
 800ad38:	d9eb      	bls.n	800ad12 <ssd1362_TestCircle+0xc>
  }
  ssd1362_UpdateScreen();
 800ad3a:	f7ff fa93 	bl	800a264 <ssd1362_UpdateScreen>
  return;
 800ad3e:	bf00      	nop
}
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <ssd1362_TestArc>:

void ssd1362_TestArc() {
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b082      	sub	sp, #8
 800ad4a:	af02      	add	r7, sp, #8
  ssd1362_DrawArc(30, 30, 30, 20, 270, White);
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	2314      	movs	r3, #20
 800ad58:	221e      	movs	r2, #30
 800ad5a:	211e      	movs	r1, #30
 800ad5c:	201e      	movs	r0, #30
 800ad5e:	f7ff fcb5 	bl	800a6cc <ssd1362_DrawArc>
  ssd1362_UpdateScreen();
 800ad62:	f7ff fa7f 	bl	800a264 <ssd1362_UpdateScreen>
  return;
 800ad66:	bf00      	nop
}
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <ssd1362_TestPolyline>:

void ssd1362_TestPolyline() {
 800ad6c:	b590      	push	{r4, r7, lr}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af00      	add	r7, sp, #0
  SSD1362_VERTEX loc_vertex[] =
 800ad72:	4b08      	ldr	r3, [pc, #32]	; (800ad94 <ssd1362_TestPolyline+0x28>)
 800ad74:	463c      	mov	r4, r7
 800ad76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad78:	c407      	stmia	r4!, {r0, r1, r2}
 800ad7a:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1362_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 800ad7c:	463b      	mov	r3, r7
 800ad7e:	2201      	movs	r2, #1
 800ad80:	2107      	movs	r1, #7
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7ff fc1a 	bl	800a5bc <ssd1362_Polyline>
  ssd1362_UpdateScreen();
 800ad88:	f7ff fa6c 	bl	800a264 <ssd1362_UpdateScreen>
  return;
 800ad8c:	bf00      	nop
}
 800ad8e:	3714      	adds	r7, #20
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd90      	pop	{r4, r7, pc}
 800ad94:	0800e758 	.word	0x0800e758

0800ad98 <ssd1362_TestAll>:

void ssd1362_TestAll() {
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	af00      	add	r7, sp, #0
    ssd1362_Init();
 800ad9c:	f7ff f9a0 	bl	800a0e0 <ssd1362_Init>
    ssd1362_TestFPS();
 800ada0:	f7ff fed6 	bl	800ab50 <ssd1362_TestFPS>
    HAL_Delay(3000);
 800ada4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ada8:	f7f7 fb1c 	bl	80023e4 <HAL_Delay>
    ssd1362_TestBorder();
 800adac:	f7ff fe3c 	bl	800aa28 <ssd1362_TestBorder>
    ssd1362_TestFonts();
 800adb0:	f7ff fe8c 	bl	800aacc <ssd1362_TestFonts>
    HAL_Delay(3000);
 800adb4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800adb8:	f7f7 fb14 	bl	80023e4 <HAL_Delay>
    ssd1362_Fill(Black);
 800adbc:	2000      	movs	r0, #0
 800adbe:	f7ff fa2d 	bl	800a21c <ssd1362_Fill>
    ssd1362_TestRectangle();
 800adc2:	f7ff ff69 	bl	800ac98 <ssd1362_TestRectangle>
    ssd1362_TestLine();
 800adc6:	f7ff ff4f 	bl	800ac68 <ssd1362_TestLine>
    HAL_Delay(3000);
 800adca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800adce:	f7f7 fb09 	bl	80023e4 <HAL_Delay>
    ssd1362_Fill(Black);
 800add2:	2000      	movs	r0, #0
 800add4:	f7ff fa22 	bl	800a21c <ssd1362_Fill>
    ssd1362_TestPolyline();
 800add8:	f7ff ffc8 	bl	800ad6c <ssd1362_TestPolyline>
    HAL_Delay(3000);
 800addc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ade0:	f7f7 fb00 	bl	80023e4 <HAL_Delay>
    ssd1362_Fill(Black);
 800ade4:	2000      	movs	r0, #0
 800ade6:	f7ff fa19 	bl	800a21c <ssd1362_Fill>
    ssd1362_TestArc();
 800adea:	f7ff ffac 	bl	800ad46 <ssd1362_TestArc>
    HAL_Delay(3000);
 800adee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800adf2:	f7f7 faf7 	bl	80023e4 <HAL_Delay>
    ssd1362_Fill(Black);
 800adf6:	2000      	movs	r0, #0
 800adf8:	f7ff fa10 	bl	800a21c <ssd1362_Fill>
    ssd1362_TestCircle();
 800adfc:	f7ff ff83 	bl	800ad06 <ssd1362_TestCircle>
    HAL_Delay(3000);
 800ae00:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ae04:	f7f7 faee 	bl	80023e4 <HAL_Delay>
}
 800ae08:	bf00      	nop
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <__errno>:
 800ae0c:	4b01      	ldr	r3, [pc, #4]	; (800ae14 <__errno+0x8>)
 800ae0e:	6818      	ldr	r0, [r3, #0]
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	24000030 	.word	0x24000030

0800ae18 <__libc_init_array>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	4d0d      	ldr	r5, [pc, #52]	; (800ae50 <__libc_init_array+0x38>)
 800ae1c:	4c0d      	ldr	r4, [pc, #52]	; (800ae54 <__libc_init_array+0x3c>)
 800ae1e:	1b64      	subs	r4, r4, r5
 800ae20:	10a4      	asrs	r4, r4, #2
 800ae22:	2600      	movs	r6, #0
 800ae24:	42a6      	cmp	r6, r4
 800ae26:	d109      	bne.n	800ae3c <__libc_init_array+0x24>
 800ae28:	4d0b      	ldr	r5, [pc, #44]	; (800ae58 <__libc_init_array+0x40>)
 800ae2a:	4c0c      	ldr	r4, [pc, #48]	; (800ae5c <__libc_init_array+0x44>)
 800ae2c:	f003 fc5e 	bl	800e6ec <_init>
 800ae30:	1b64      	subs	r4, r4, r5
 800ae32:	10a4      	asrs	r4, r4, #2
 800ae34:	2600      	movs	r6, #0
 800ae36:	42a6      	cmp	r6, r4
 800ae38:	d105      	bne.n	800ae46 <__libc_init_array+0x2e>
 800ae3a:	bd70      	pop	{r4, r5, r6, pc}
 800ae3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae40:	4798      	blx	r3
 800ae42:	3601      	adds	r6, #1
 800ae44:	e7ee      	b.n	800ae24 <__libc_init_array+0xc>
 800ae46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae4a:	4798      	blx	r3
 800ae4c:	3601      	adds	r6, #1
 800ae4e:	e7f2      	b.n	800ae36 <__libc_init_array+0x1e>
 800ae50:	08011b68 	.word	0x08011b68
 800ae54:	08011b68 	.word	0x08011b68
 800ae58:	08011b68 	.word	0x08011b68
 800ae5c:	08011b6c 	.word	0x08011b6c

0800ae60 <malloc>:
 800ae60:	4b02      	ldr	r3, [pc, #8]	; (800ae6c <malloc+0xc>)
 800ae62:	4601      	mov	r1, r0
 800ae64:	6818      	ldr	r0, [r3, #0]
 800ae66:	f000 b883 	b.w	800af70 <_malloc_r>
 800ae6a:	bf00      	nop
 800ae6c:	24000030 	.word	0x24000030

0800ae70 <memcpy>:
 800ae70:	440a      	add	r2, r1
 800ae72:	4291      	cmp	r1, r2
 800ae74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ae78:	d100      	bne.n	800ae7c <memcpy+0xc>
 800ae7a:	4770      	bx	lr
 800ae7c:	b510      	push	{r4, lr}
 800ae7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae86:	4291      	cmp	r1, r2
 800ae88:	d1f9      	bne.n	800ae7e <memcpy+0xe>
 800ae8a:	bd10      	pop	{r4, pc}

0800ae8c <memmove>:
 800ae8c:	4288      	cmp	r0, r1
 800ae8e:	b510      	push	{r4, lr}
 800ae90:	eb01 0402 	add.w	r4, r1, r2
 800ae94:	d902      	bls.n	800ae9c <memmove+0x10>
 800ae96:	4284      	cmp	r4, r0
 800ae98:	4623      	mov	r3, r4
 800ae9a:	d807      	bhi.n	800aeac <memmove+0x20>
 800ae9c:	1e43      	subs	r3, r0, #1
 800ae9e:	42a1      	cmp	r1, r4
 800aea0:	d008      	beq.n	800aeb4 <memmove+0x28>
 800aea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeaa:	e7f8      	b.n	800ae9e <memmove+0x12>
 800aeac:	4402      	add	r2, r0
 800aeae:	4601      	mov	r1, r0
 800aeb0:	428a      	cmp	r2, r1
 800aeb2:	d100      	bne.n	800aeb6 <memmove+0x2a>
 800aeb4:	bd10      	pop	{r4, pc}
 800aeb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aeba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aebe:	e7f7      	b.n	800aeb0 <memmove+0x24>

0800aec0 <memset>:
 800aec0:	4402      	add	r2, r0
 800aec2:	4603      	mov	r3, r0
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d100      	bne.n	800aeca <memset+0xa>
 800aec8:	4770      	bx	lr
 800aeca:	f803 1b01 	strb.w	r1, [r3], #1
 800aece:	e7f9      	b.n	800aec4 <memset+0x4>

0800aed0 <_free_r>:
 800aed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aed2:	2900      	cmp	r1, #0
 800aed4:	d048      	beq.n	800af68 <_free_r+0x98>
 800aed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeda:	9001      	str	r0, [sp, #4]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f1a1 0404 	sub.w	r4, r1, #4
 800aee2:	bfb8      	it	lt
 800aee4:	18e4      	addlt	r4, r4, r3
 800aee6:	f001 fe19 	bl	800cb1c <__malloc_lock>
 800aeea:	4a20      	ldr	r2, [pc, #128]	; (800af6c <_free_r+0x9c>)
 800aeec:	9801      	ldr	r0, [sp, #4]
 800aeee:	6813      	ldr	r3, [r2, #0]
 800aef0:	4615      	mov	r5, r2
 800aef2:	b933      	cbnz	r3, 800af02 <_free_r+0x32>
 800aef4:	6063      	str	r3, [r4, #4]
 800aef6:	6014      	str	r4, [r2, #0]
 800aef8:	b003      	add	sp, #12
 800aefa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aefe:	f001 be13 	b.w	800cb28 <__malloc_unlock>
 800af02:	42a3      	cmp	r3, r4
 800af04:	d90b      	bls.n	800af1e <_free_r+0x4e>
 800af06:	6821      	ldr	r1, [r4, #0]
 800af08:	1862      	adds	r2, r4, r1
 800af0a:	4293      	cmp	r3, r2
 800af0c:	bf04      	itt	eq
 800af0e:	681a      	ldreq	r2, [r3, #0]
 800af10:	685b      	ldreq	r3, [r3, #4]
 800af12:	6063      	str	r3, [r4, #4]
 800af14:	bf04      	itt	eq
 800af16:	1852      	addeq	r2, r2, r1
 800af18:	6022      	streq	r2, [r4, #0]
 800af1a:	602c      	str	r4, [r5, #0]
 800af1c:	e7ec      	b.n	800aef8 <_free_r+0x28>
 800af1e:	461a      	mov	r2, r3
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	b10b      	cbz	r3, 800af28 <_free_r+0x58>
 800af24:	42a3      	cmp	r3, r4
 800af26:	d9fa      	bls.n	800af1e <_free_r+0x4e>
 800af28:	6811      	ldr	r1, [r2, #0]
 800af2a:	1855      	adds	r5, r2, r1
 800af2c:	42a5      	cmp	r5, r4
 800af2e:	d10b      	bne.n	800af48 <_free_r+0x78>
 800af30:	6824      	ldr	r4, [r4, #0]
 800af32:	4421      	add	r1, r4
 800af34:	1854      	adds	r4, r2, r1
 800af36:	42a3      	cmp	r3, r4
 800af38:	6011      	str	r1, [r2, #0]
 800af3a:	d1dd      	bne.n	800aef8 <_free_r+0x28>
 800af3c:	681c      	ldr	r4, [r3, #0]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	6053      	str	r3, [r2, #4]
 800af42:	4421      	add	r1, r4
 800af44:	6011      	str	r1, [r2, #0]
 800af46:	e7d7      	b.n	800aef8 <_free_r+0x28>
 800af48:	d902      	bls.n	800af50 <_free_r+0x80>
 800af4a:	230c      	movs	r3, #12
 800af4c:	6003      	str	r3, [r0, #0]
 800af4e:	e7d3      	b.n	800aef8 <_free_r+0x28>
 800af50:	6825      	ldr	r5, [r4, #0]
 800af52:	1961      	adds	r1, r4, r5
 800af54:	428b      	cmp	r3, r1
 800af56:	bf04      	itt	eq
 800af58:	6819      	ldreq	r1, [r3, #0]
 800af5a:	685b      	ldreq	r3, [r3, #4]
 800af5c:	6063      	str	r3, [r4, #4]
 800af5e:	bf04      	itt	eq
 800af60:	1949      	addeq	r1, r1, r5
 800af62:	6021      	streq	r1, [r4, #0]
 800af64:	6054      	str	r4, [r2, #4]
 800af66:	e7c7      	b.n	800aef8 <_free_r+0x28>
 800af68:	b003      	add	sp, #12
 800af6a:	bd30      	pop	{r4, r5, pc}
 800af6c:	240102f4 	.word	0x240102f4

0800af70 <_malloc_r>:
 800af70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af72:	1ccd      	adds	r5, r1, #3
 800af74:	f025 0503 	bic.w	r5, r5, #3
 800af78:	3508      	adds	r5, #8
 800af7a:	2d0c      	cmp	r5, #12
 800af7c:	bf38      	it	cc
 800af7e:	250c      	movcc	r5, #12
 800af80:	2d00      	cmp	r5, #0
 800af82:	4606      	mov	r6, r0
 800af84:	db01      	blt.n	800af8a <_malloc_r+0x1a>
 800af86:	42a9      	cmp	r1, r5
 800af88:	d903      	bls.n	800af92 <_malloc_r+0x22>
 800af8a:	230c      	movs	r3, #12
 800af8c:	6033      	str	r3, [r6, #0]
 800af8e:	2000      	movs	r0, #0
 800af90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af92:	f001 fdc3 	bl	800cb1c <__malloc_lock>
 800af96:	4921      	ldr	r1, [pc, #132]	; (800b01c <_malloc_r+0xac>)
 800af98:	680a      	ldr	r2, [r1, #0]
 800af9a:	4614      	mov	r4, r2
 800af9c:	b99c      	cbnz	r4, 800afc6 <_malloc_r+0x56>
 800af9e:	4f20      	ldr	r7, [pc, #128]	; (800b020 <_malloc_r+0xb0>)
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	b923      	cbnz	r3, 800afae <_malloc_r+0x3e>
 800afa4:	4621      	mov	r1, r4
 800afa6:	4630      	mov	r0, r6
 800afa8:	f000 fc80 	bl	800b8ac <_sbrk_r>
 800afac:	6038      	str	r0, [r7, #0]
 800afae:	4629      	mov	r1, r5
 800afb0:	4630      	mov	r0, r6
 800afb2:	f000 fc7b 	bl	800b8ac <_sbrk_r>
 800afb6:	1c43      	adds	r3, r0, #1
 800afb8:	d123      	bne.n	800b002 <_malloc_r+0x92>
 800afba:	230c      	movs	r3, #12
 800afbc:	6033      	str	r3, [r6, #0]
 800afbe:	4630      	mov	r0, r6
 800afc0:	f001 fdb2 	bl	800cb28 <__malloc_unlock>
 800afc4:	e7e3      	b.n	800af8e <_malloc_r+0x1e>
 800afc6:	6823      	ldr	r3, [r4, #0]
 800afc8:	1b5b      	subs	r3, r3, r5
 800afca:	d417      	bmi.n	800affc <_malloc_r+0x8c>
 800afcc:	2b0b      	cmp	r3, #11
 800afce:	d903      	bls.n	800afd8 <_malloc_r+0x68>
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	441c      	add	r4, r3
 800afd4:	6025      	str	r5, [r4, #0]
 800afd6:	e004      	b.n	800afe2 <_malloc_r+0x72>
 800afd8:	6863      	ldr	r3, [r4, #4]
 800afda:	42a2      	cmp	r2, r4
 800afdc:	bf0c      	ite	eq
 800afde:	600b      	streq	r3, [r1, #0]
 800afe0:	6053      	strne	r3, [r2, #4]
 800afe2:	4630      	mov	r0, r6
 800afe4:	f001 fda0 	bl	800cb28 <__malloc_unlock>
 800afe8:	f104 000b 	add.w	r0, r4, #11
 800afec:	1d23      	adds	r3, r4, #4
 800afee:	f020 0007 	bic.w	r0, r0, #7
 800aff2:	1ac2      	subs	r2, r0, r3
 800aff4:	d0cc      	beq.n	800af90 <_malloc_r+0x20>
 800aff6:	1a1b      	subs	r3, r3, r0
 800aff8:	50a3      	str	r3, [r4, r2]
 800affa:	e7c9      	b.n	800af90 <_malloc_r+0x20>
 800affc:	4622      	mov	r2, r4
 800affe:	6864      	ldr	r4, [r4, #4]
 800b000:	e7cc      	b.n	800af9c <_malloc_r+0x2c>
 800b002:	1cc4      	adds	r4, r0, #3
 800b004:	f024 0403 	bic.w	r4, r4, #3
 800b008:	42a0      	cmp	r0, r4
 800b00a:	d0e3      	beq.n	800afd4 <_malloc_r+0x64>
 800b00c:	1a21      	subs	r1, r4, r0
 800b00e:	4630      	mov	r0, r6
 800b010:	f000 fc4c 	bl	800b8ac <_sbrk_r>
 800b014:	3001      	adds	r0, #1
 800b016:	d1dd      	bne.n	800afd4 <_malloc_r+0x64>
 800b018:	e7cf      	b.n	800afba <_malloc_r+0x4a>
 800b01a:	bf00      	nop
 800b01c:	240102f4 	.word	0x240102f4
 800b020:	240102f8 	.word	0x240102f8

0800b024 <__cvt>:
 800b024:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b026:	ed2d 8b02 	vpush	{d8}
 800b02a:	eeb0 8b40 	vmov.f64	d8, d0
 800b02e:	b085      	sub	sp, #20
 800b030:	4617      	mov	r7, r2
 800b032:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b034:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b036:	ee18 2a90 	vmov	r2, s17
 800b03a:	f025 0520 	bic.w	r5, r5, #32
 800b03e:	2a00      	cmp	r2, #0
 800b040:	bfb6      	itet	lt
 800b042:	222d      	movlt	r2, #45	; 0x2d
 800b044:	2200      	movge	r2, #0
 800b046:	eeb1 8b40 	vneglt.f64	d8, d0
 800b04a:	2d46      	cmp	r5, #70	; 0x46
 800b04c:	460c      	mov	r4, r1
 800b04e:	701a      	strb	r2, [r3, #0]
 800b050:	d004      	beq.n	800b05c <__cvt+0x38>
 800b052:	2d45      	cmp	r5, #69	; 0x45
 800b054:	d100      	bne.n	800b058 <__cvt+0x34>
 800b056:	3401      	adds	r4, #1
 800b058:	2102      	movs	r1, #2
 800b05a:	e000      	b.n	800b05e <__cvt+0x3a>
 800b05c:	2103      	movs	r1, #3
 800b05e:	ab03      	add	r3, sp, #12
 800b060:	9301      	str	r3, [sp, #4]
 800b062:	ab02      	add	r3, sp, #8
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	4622      	mov	r2, r4
 800b068:	4633      	mov	r3, r6
 800b06a:	eeb0 0b48 	vmov.f64	d0, d8
 800b06e:	f000 fdaf 	bl	800bbd0 <_dtoa_r>
 800b072:	2d47      	cmp	r5, #71	; 0x47
 800b074:	d109      	bne.n	800b08a <__cvt+0x66>
 800b076:	07fb      	lsls	r3, r7, #31
 800b078:	d407      	bmi.n	800b08a <__cvt+0x66>
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b07e:	1a1b      	subs	r3, r3, r0
 800b080:	6013      	str	r3, [r2, #0]
 800b082:	b005      	add	sp, #20
 800b084:	ecbd 8b02 	vpop	{d8}
 800b088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b08a:	2d46      	cmp	r5, #70	; 0x46
 800b08c:	eb00 0204 	add.w	r2, r0, r4
 800b090:	d10c      	bne.n	800b0ac <__cvt+0x88>
 800b092:	7803      	ldrb	r3, [r0, #0]
 800b094:	2b30      	cmp	r3, #48	; 0x30
 800b096:	d107      	bne.n	800b0a8 <__cvt+0x84>
 800b098:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0a0:	bf1c      	itt	ne
 800b0a2:	f1c4 0401 	rsbne	r4, r4, #1
 800b0a6:	6034      	strne	r4, [r6, #0]
 800b0a8:	6833      	ldr	r3, [r6, #0]
 800b0aa:	441a      	add	r2, r3
 800b0ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b4:	bf08      	it	eq
 800b0b6:	9203      	streq	r2, [sp, #12]
 800b0b8:	2130      	movs	r1, #48	; 0x30
 800b0ba:	9b03      	ldr	r3, [sp, #12]
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d2dc      	bcs.n	800b07a <__cvt+0x56>
 800b0c0:	1c5c      	adds	r4, r3, #1
 800b0c2:	9403      	str	r4, [sp, #12]
 800b0c4:	7019      	strb	r1, [r3, #0]
 800b0c6:	e7f8      	b.n	800b0ba <__cvt+0x96>

0800b0c8 <__exponent>:
 800b0c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2900      	cmp	r1, #0
 800b0ce:	bfb8      	it	lt
 800b0d0:	4249      	neglt	r1, r1
 800b0d2:	f803 2b02 	strb.w	r2, [r3], #2
 800b0d6:	bfb4      	ite	lt
 800b0d8:	222d      	movlt	r2, #45	; 0x2d
 800b0da:	222b      	movge	r2, #43	; 0x2b
 800b0dc:	2909      	cmp	r1, #9
 800b0de:	7042      	strb	r2, [r0, #1]
 800b0e0:	dd2a      	ble.n	800b138 <__exponent+0x70>
 800b0e2:	f10d 0407 	add.w	r4, sp, #7
 800b0e6:	46a4      	mov	ip, r4
 800b0e8:	270a      	movs	r7, #10
 800b0ea:	46a6      	mov	lr, r4
 800b0ec:	460a      	mov	r2, r1
 800b0ee:	fb91 f6f7 	sdiv	r6, r1, r7
 800b0f2:	fb07 1516 	mls	r5, r7, r6, r1
 800b0f6:	3530      	adds	r5, #48	; 0x30
 800b0f8:	2a63      	cmp	r2, #99	; 0x63
 800b0fa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b0fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b102:	4631      	mov	r1, r6
 800b104:	dcf1      	bgt.n	800b0ea <__exponent+0x22>
 800b106:	3130      	adds	r1, #48	; 0x30
 800b108:	f1ae 0502 	sub.w	r5, lr, #2
 800b10c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b110:	1c44      	adds	r4, r0, #1
 800b112:	4629      	mov	r1, r5
 800b114:	4561      	cmp	r1, ip
 800b116:	d30a      	bcc.n	800b12e <__exponent+0x66>
 800b118:	f10d 0209 	add.w	r2, sp, #9
 800b11c:	eba2 020e 	sub.w	r2, r2, lr
 800b120:	4565      	cmp	r5, ip
 800b122:	bf88      	it	hi
 800b124:	2200      	movhi	r2, #0
 800b126:	4413      	add	r3, r2
 800b128:	1a18      	subs	r0, r3, r0
 800b12a:	b003      	add	sp, #12
 800b12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b12e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b132:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b136:	e7ed      	b.n	800b114 <__exponent+0x4c>
 800b138:	2330      	movs	r3, #48	; 0x30
 800b13a:	3130      	adds	r1, #48	; 0x30
 800b13c:	7083      	strb	r3, [r0, #2]
 800b13e:	70c1      	strb	r1, [r0, #3]
 800b140:	1d03      	adds	r3, r0, #4
 800b142:	e7f1      	b.n	800b128 <__exponent+0x60>
 800b144:	0000      	movs	r0, r0
	...

0800b148 <_printf_float>:
 800b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	b08b      	sub	sp, #44	; 0x2c
 800b14e:	460c      	mov	r4, r1
 800b150:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b154:	4616      	mov	r6, r2
 800b156:	461f      	mov	r7, r3
 800b158:	4605      	mov	r5, r0
 800b15a:	f001 fc73 	bl	800ca44 <_localeconv_r>
 800b15e:	f8d0 b000 	ldr.w	fp, [r0]
 800b162:	4658      	mov	r0, fp
 800b164:	f7f5 f8bc 	bl	80002e0 <strlen>
 800b168:	2300      	movs	r3, #0
 800b16a:	9308      	str	r3, [sp, #32]
 800b16c:	f8d8 3000 	ldr.w	r3, [r8]
 800b170:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b174:	6822      	ldr	r2, [r4, #0]
 800b176:	3307      	adds	r3, #7
 800b178:	f023 0307 	bic.w	r3, r3, #7
 800b17c:	f103 0108 	add.w	r1, r3, #8
 800b180:	f8c8 1000 	str.w	r1, [r8]
 800b184:	4682      	mov	sl, r0
 800b186:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b18a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b18e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800b3f0 <_printf_float+0x2a8>
 800b192:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b196:	eeb0 6bc0 	vabs.f64	d6, d0
 800b19a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a2:	dd24      	ble.n	800b1ee <_printf_float+0xa6>
 800b1a4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ac:	d502      	bpl.n	800b1b4 <_printf_float+0x6c>
 800b1ae:	232d      	movs	r3, #45	; 0x2d
 800b1b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1b4:	4b90      	ldr	r3, [pc, #576]	; (800b3f8 <_printf_float+0x2b0>)
 800b1b6:	4891      	ldr	r0, [pc, #580]	; (800b3fc <_printf_float+0x2b4>)
 800b1b8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b1bc:	bf94      	ite	ls
 800b1be:	4698      	movls	r8, r3
 800b1c0:	4680      	movhi	r8, r0
 800b1c2:	2303      	movs	r3, #3
 800b1c4:	6123      	str	r3, [r4, #16]
 800b1c6:	f022 0204 	bic.w	r2, r2, #4
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	6022      	str	r2, [r4, #0]
 800b1ce:	9304      	str	r3, [sp, #16]
 800b1d0:	9700      	str	r7, [sp, #0]
 800b1d2:	4633      	mov	r3, r6
 800b1d4:	aa09      	add	r2, sp, #36	; 0x24
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	4628      	mov	r0, r5
 800b1da:	f000 f9d3 	bl	800b584 <_printf_common>
 800b1de:	3001      	adds	r0, #1
 800b1e0:	f040 808a 	bne.w	800b2f8 <_printf_float+0x1b0>
 800b1e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1e8:	b00b      	add	sp, #44	; 0x2c
 800b1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ee:	eeb4 0b40 	vcmp.f64	d0, d0
 800b1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f6:	d709      	bvc.n	800b20c <_printf_float+0xc4>
 800b1f8:	ee10 3a90 	vmov	r3, s1
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	bfbc      	itt	lt
 800b200:	232d      	movlt	r3, #45	; 0x2d
 800b202:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b206:	487e      	ldr	r0, [pc, #504]	; (800b400 <_printf_float+0x2b8>)
 800b208:	4b7e      	ldr	r3, [pc, #504]	; (800b404 <_printf_float+0x2bc>)
 800b20a:	e7d5      	b.n	800b1b8 <_printf_float+0x70>
 800b20c:	6863      	ldr	r3, [r4, #4]
 800b20e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b212:	9104      	str	r1, [sp, #16]
 800b214:	1c59      	adds	r1, r3, #1
 800b216:	d13c      	bne.n	800b292 <_printf_float+0x14a>
 800b218:	2306      	movs	r3, #6
 800b21a:	6063      	str	r3, [r4, #4]
 800b21c:	2300      	movs	r3, #0
 800b21e:	9303      	str	r3, [sp, #12]
 800b220:	ab08      	add	r3, sp, #32
 800b222:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b226:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b22a:	ab07      	add	r3, sp, #28
 800b22c:	6861      	ldr	r1, [r4, #4]
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	6022      	str	r2, [r4, #0]
 800b232:	f10d 031b 	add.w	r3, sp, #27
 800b236:	4628      	mov	r0, r5
 800b238:	f7ff fef4 	bl	800b024 <__cvt>
 800b23c:	9b04      	ldr	r3, [sp, #16]
 800b23e:	9907      	ldr	r1, [sp, #28]
 800b240:	2b47      	cmp	r3, #71	; 0x47
 800b242:	4680      	mov	r8, r0
 800b244:	d108      	bne.n	800b258 <_printf_float+0x110>
 800b246:	1cc8      	adds	r0, r1, #3
 800b248:	db02      	blt.n	800b250 <_printf_float+0x108>
 800b24a:	6863      	ldr	r3, [r4, #4]
 800b24c:	4299      	cmp	r1, r3
 800b24e:	dd41      	ble.n	800b2d4 <_printf_float+0x18c>
 800b250:	f1a9 0902 	sub.w	r9, r9, #2
 800b254:	fa5f f989 	uxtb.w	r9, r9
 800b258:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b25c:	d820      	bhi.n	800b2a0 <_printf_float+0x158>
 800b25e:	3901      	subs	r1, #1
 800b260:	464a      	mov	r2, r9
 800b262:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b266:	9107      	str	r1, [sp, #28]
 800b268:	f7ff ff2e 	bl	800b0c8 <__exponent>
 800b26c:	9a08      	ldr	r2, [sp, #32]
 800b26e:	9004      	str	r0, [sp, #16]
 800b270:	1813      	adds	r3, r2, r0
 800b272:	2a01      	cmp	r2, #1
 800b274:	6123      	str	r3, [r4, #16]
 800b276:	dc02      	bgt.n	800b27e <_printf_float+0x136>
 800b278:	6822      	ldr	r2, [r4, #0]
 800b27a:	07d2      	lsls	r2, r2, #31
 800b27c:	d501      	bpl.n	800b282 <_printf_float+0x13a>
 800b27e:	3301      	adds	r3, #1
 800b280:	6123      	str	r3, [r4, #16]
 800b282:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d0a2      	beq.n	800b1d0 <_printf_float+0x88>
 800b28a:	232d      	movs	r3, #45	; 0x2d
 800b28c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b290:	e79e      	b.n	800b1d0 <_printf_float+0x88>
 800b292:	9904      	ldr	r1, [sp, #16]
 800b294:	2947      	cmp	r1, #71	; 0x47
 800b296:	d1c1      	bne.n	800b21c <_printf_float+0xd4>
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1bf      	bne.n	800b21c <_printf_float+0xd4>
 800b29c:	2301      	movs	r3, #1
 800b29e:	e7bc      	b.n	800b21a <_printf_float+0xd2>
 800b2a0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b2a4:	d118      	bne.n	800b2d8 <_printf_float+0x190>
 800b2a6:	2900      	cmp	r1, #0
 800b2a8:	6863      	ldr	r3, [r4, #4]
 800b2aa:	dd0b      	ble.n	800b2c4 <_printf_float+0x17c>
 800b2ac:	6121      	str	r1, [r4, #16]
 800b2ae:	b913      	cbnz	r3, 800b2b6 <_printf_float+0x16e>
 800b2b0:	6822      	ldr	r2, [r4, #0]
 800b2b2:	07d0      	lsls	r0, r2, #31
 800b2b4:	d502      	bpl.n	800b2bc <_printf_float+0x174>
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	440b      	add	r3, r1
 800b2ba:	6123      	str	r3, [r4, #16]
 800b2bc:	2300      	movs	r3, #0
 800b2be:	65a1      	str	r1, [r4, #88]	; 0x58
 800b2c0:	9304      	str	r3, [sp, #16]
 800b2c2:	e7de      	b.n	800b282 <_printf_float+0x13a>
 800b2c4:	b913      	cbnz	r3, 800b2cc <_printf_float+0x184>
 800b2c6:	6822      	ldr	r2, [r4, #0]
 800b2c8:	07d2      	lsls	r2, r2, #31
 800b2ca:	d501      	bpl.n	800b2d0 <_printf_float+0x188>
 800b2cc:	3302      	adds	r3, #2
 800b2ce:	e7f4      	b.n	800b2ba <_printf_float+0x172>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	e7f2      	b.n	800b2ba <_printf_float+0x172>
 800b2d4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b2d8:	9b08      	ldr	r3, [sp, #32]
 800b2da:	4299      	cmp	r1, r3
 800b2dc:	db05      	blt.n	800b2ea <_printf_float+0x1a2>
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	6121      	str	r1, [r4, #16]
 800b2e2:	07d8      	lsls	r0, r3, #31
 800b2e4:	d5ea      	bpl.n	800b2bc <_printf_float+0x174>
 800b2e6:	1c4b      	adds	r3, r1, #1
 800b2e8:	e7e7      	b.n	800b2ba <_printf_float+0x172>
 800b2ea:	2900      	cmp	r1, #0
 800b2ec:	bfd4      	ite	le
 800b2ee:	f1c1 0202 	rsble	r2, r1, #2
 800b2f2:	2201      	movgt	r2, #1
 800b2f4:	4413      	add	r3, r2
 800b2f6:	e7e0      	b.n	800b2ba <_printf_float+0x172>
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	055a      	lsls	r2, r3, #21
 800b2fc:	d407      	bmi.n	800b30e <_printf_float+0x1c6>
 800b2fe:	6923      	ldr	r3, [r4, #16]
 800b300:	4642      	mov	r2, r8
 800b302:	4631      	mov	r1, r6
 800b304:	4628      	mov	r0, r5
 800b306:	47b8      	blx	r7
 800b308:	3001      	adds	r0, #1
 800b30a:	d12a      	bne.n	800b362 <_printf_float+0x21a>
 800b30c:	e76a      	b.n	800b1e4 <_printf_float+0x9c>
 800b30e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b312:	f240 80e2 	bls.w	800b4da <_printf_float+0x392>
 800b316:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b31a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b322:	d133      	bne.n	800b38c <_printf_float+0x244>
 800b324:	4a38      	ldr	r2, [pc, #224]	; (800b408 <_printf_float+0x2c0>)
 800b326:	2301      	movs	r3, #1
 800b328:	4631      	mov	r1, r6
 800b32a:	4628      	mov	r0, r5
 800b32c:	47b8      	blx	r7
 800b32e:	3001      	adds	r0, #1
 800b330:	f43f af58 	beq.w	800b1e4 <_printf_float+0x9c>
 800b334:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b338:	429a      	cmp	r2, r3
 800b33a:	db02      	blt.n	800b342 <_printf_float+0x1fa>
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	07d8      	lsls	r0, r3, #31
 800b340:	d50f      	bpl.n	800b362 <_printf_float+0x21a>
 800b342:	4653      	mov	r3, sl
 800b344:	465a      	mov	r2, fp
 800b346:	4631      	mov	r1, r6
 800b348:	4628      	mov	r0, r5
 800b34a:	47b8      	blx	r7
 800b34c:	3001      	adds	r0, #1
 800b34e:	f43f af49 	beq.w	800b1e4 <_printf_float+0x9c>
 800b352:	f04f 0800 	mov.w	r8, #0
 800b356:	f104 091a 	add.w	r9, r4, #26
 800b35a:	9b08      	ldr	r3, [sp, #32]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	4543      	cmp	r3, r8
 800b360:	dc09      	bgt.n	800b376 <_printf_float+0x22e>
 800b362:	6823      	ldr	r3, [r4, #0]
 800b364:	079b      	lsls	r3, r3, #30
 800b366:	f100 8108 	bmi.w	800b57a <_printf_float+0x432>
 800b36a:	68e0      	ldr	r0, [r4, #12]
 800b36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b36e:	4298      	cmp	r0, r3
 800b370:	bfb8      	it	lt
 800b372:	4618      	movlt	r0, r3
 800b374:	e738      	b.n	800b1e8 <_printf_float+0xa0>
 800b376:	2301      	movs	r3, #1
 800b378:	464a      	mov	r2, r9
 800b37a:	4631      	mov	r1, r6
 800b37c:	4628      	mov	r0, r5
 800b37e:	47b8      	blx	r7
 800b380:	3001      	adds	r0, #1
 800b382:	f43f af2f 	beq.w	800b1e4 <_printf_float+0x9c>
 800b386:	f108 0801 	add.w	r8, r8, #1
 800b38a:	e7e6      	b.n	800b35a <_printf_float+0x212>
 800b38c:	9b07      	ldr	r3, [sp, #28]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	dc3c      	bgt.n	800b40c <_printf_float+0x2c4>
 800b392:	4a1d      	ldr	r2, [pc, #116]	; (800b408 <_printf_float+0x2c0>)
 800b394:	2301      	movs	r3, #1
 800b396:	4631      	mov	r1, r6
 800b398:	4628      	mov	r0, r5
 800b39a:	47b8      	blx	r7
 800b39c:	3001      	adds	r0, #1
 800b39e:	f43f af21 	beq.w	800b1e4 <_printf_float+0x9c>
 800b3a2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	d102      	bne.n	800b3b0 <_printf_float+0x268>
 800b3aa:	6823      	ldr	r3, [r4, #0]
 800b3ac:	07d9      	lsls	r1, r3, #31
 800b3ae:	d5d8      	bpl.n	800b362 <_printf_float+0x21a>
 800b3b0:	4653      	mov	r3, sl
 800b3b2:	465a      	mov	r2, fp
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	47b8      	blx	r7
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	f43f af12 	beq.w	800b1e4 <_printf_float+0x9c>
 800b3c0:	f04f 0900 	mov.w	r9, #0
 800b3c4:	f104 0a1a 	add.w	sl, r4, #26
 800b3c8:	9b07      	ldr	r3, [sp, #28]
 800b3ca:	425b      	negs	r3, r3
 800b3cc:	454b      	cmp	r3, r9
 800b3ce:	dc01      	bgt.n	800b3d4 <_printf_float+0x28c>
 800b3d0:	9b08      	ldr	r3, [sp, #32]
 800b3d2:	e795      	b.n	800b300 <_printf_float+0x1b8>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	4652      	mov	r2, sl
 800b3d8:	4631      	mov	r1, r6
 800b3da:	4628      	mov	r0, r5
 800b3dc:	47b8      	blx	r7
 800b3de:	3001      	adds	r0, #1
 800b3e0:	f43f af00 	beq.w	800b1e4 <_printf_float+0x9c>
 800b3e4:	f109 0901 	add.w	r9, r9, #1
 800b3e8:	e7ee      	b.n	800b3c8 <_printf_float+0x280>
 800b3ea:	bf00      	nop
 800b3ec:	f3af 8000 	nop.w
 800b3f0:	ffffffff 	.word	0xffffffff
 800b3f4:	7fefffff 	.word	0x7fefffff
 800b3f8:	080115a8 	.word	0x080115a8
 800b3fc:	080115ac 	.word	0x080115ac
 800b400:	080115b4 	.word	0x080115b4
 800b404:	080115b0 	.word	0x080115b0
 800b408:	080115b8 	.word	0x080115b8
 800b40c:	9a08      	ldr	r2, [sp, #32]
 800b40e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b410:	429a      	cmp	r2, r3
 800b412:	bfa8      	it	ge
 800b414:	461a      	movge	r2, r3
 800b416:	2a00      	cmp	r2, #0
 800b418:	4691      	mov	r9, r2
 800b41a:	dc38      	bgt.n	800b48e <_printf_float+0x346>
 800b41c:	2300      	movs	r3, #0
 800b41e:	9305      	str	r3, [sp, #20]
 800b420:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b424:	f104 021a 	add.w	r2, r4, #26
 800b428:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b42a:	9905      	ldr	r1, [sp, #20]
 800b42c:	9304      	str	r3, [sp, #16]
 800b42e:	eba3 0309 	sub.w	r3, r3, r9
 800b432:	428b      	cmp	r3, r1
 800b434:	dc33      	bgt.n	800b49e <_printf_float+0x356>
 800b436:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	db3c      	blt.n	800b4b8 <_printf_float+0x370>
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	07da      	lsls	r2, r3, #31
 800b442:	d439      	bmi.n	800b4b8 <_printf_float+0x370>
 800b444:	9a08      	ldr	r2, [sp, #32]
 800b446:	9b04      	ldr	r3, [sp, #16]
 800b448:	9907      	ldr	r1, [sp, #28]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	eba2 0901 	sub.w	r9, r2, r1
 800b450:	4599      	cmp	r9, r3
 800b452:	bfa8      	it	ge
 800b454:	4699      	movge	r9, r3
 800b456:	f1b9 0f00 	cmp.w	r9, #0
 800b45a:	dc35      	bgt.n	800b4c8 <_printf_float+0x380>
 800b45c:	f04f 0800 	mov.w	r8, #0
 800b460:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b464:	f104 0a1a 	add.w	sl, r4, #26
 800b468:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b46c:	1a9b      	subs	r3, r3, r2
 800b46e:	eba3 0309 	sub.w	r3, r3, r9
 800b472:	4543      	cmp	r3, r8
 800b474:	f77f af75 	ble.w	800b362 <_printf_float+0x21a>
 800b478:	2301      	movs	r3, #1
 800b47a:	4652      	mov	r2, sl
 800b47c:	4631      	mov	r1, r6
 800b47e:	4628      	mov	r0, r5
 800b480:	47b8      	blx	r7
 800b482:	3001      	adds	r0, #1
 800b484:	f43f aeae 	beq.w	800b1e4 <_printf_float+0x9c>
 800b488:	f108 0801 	add.w	r8, r8, #1
 800b48c:	e7ec      	b.n	800b468 <_printf_float+0x320>
 800b48e:	4613      	mov	r3, r2
 800b490:	4631      	mov	r1, r6
 800b492:	4642      	mov	r2, r8
 800b494:	4628      	mov	r0, r5
 800b496:	47b8      	blx	r7
 800b498:	3001      	adds	r0, #1
 800b49a:	d1bf      	bne.n	800b41c <_printf_float+0x2d4>
 800b49c:	e6a2      	b.n	800b1e4 <_printf_float+0x9c>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	4631      	mov	r1, r6
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	9204      	str	r2, [sp, #16]
 800b4a6:	47b8      	blx	r7
 800b4a8:	3001      	adds	r0, #1
 800b4aa:	f43f ae9b 	beq.w	800b1e4 <_printf_float+0x9c>
 800b4ae:	9b05      	ldr	r3, [sp, #20]
 800b4b0:	9a04      	ldr	r2, [sp, #16]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	9305      	str	r3, [sp, #20]
 800b4b6:	e7b7      	b.n	800b428 <_printf_float+0x2e0>
 800b4b8:	4653      	mov	r3, sl
 800b4ba:	465a      	mov	r2, fp
 800b4bc:	4631      	mov	r1, r6
 800b4be:	4628      	mov	r0, r5
 800b4c0:	47b8      	blx	r7
 800b4c2:	3001      	adds	r0, #1
 800b4c4:	d1be      	bne.n	800b444 <_printf_float+0x2fc>
 800b4c6:	e68d      	b.n	800b1e4 <_printf_float+0x9c>
 800b4c8:	9a04      	ldr	r2, [sp, #16]
 800b4ca:	464b      	mov	r3, r9
 800b4cc:	4442      	add	r2, r8
 800b4ce:	4631      	mov	r1, r6
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	47b8      	blx	r7
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	d1c1      	bne.n	800b45c <_printf_float+0x314>
 800b4d8:	e684      	b.n	800b1e4 <_printf_float+0x9c>
 800b4da:	9a08      	ldr	r2, [sp, #32]
 800b4dc:	2a01      	cmp	r2, #1
 800b4de:	dc01      	bgt.n	800b4e4 <_printf_float+0x39c>
 800b4e0:	07db      	lsls	r3, r3, #31
 800b4e2:	d537      	bpl.n	800b554 <_printf_float+0x40c>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	4642      	mov	r2, r8
 800b4e8:	4631      	mov	r1, r6
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	47b8      	blx	r7
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	f43f ae78 	beq.w	800b1e4 <_printf_float+0x9c>
 800b4f4:	4653      	mov	r3, sl
 800b4f6:	465a      	mov	r2, fp
 800b4f8:	4631      	mov	r1, r6
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	47b8      	blx	r7
 800b4fe:	3001      	adds	r0, #1
 800b500:	f43f ae70 	beq.w	800b1e4 <_printf_float+0x9c>
 800b504:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b508:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b510:	d01b      	beq.n	800b54a <_printf_float+0x402>
 800b512:	9b08      	ldr	r3, [sp, #32]
 800b514:	f108 0201 	add.w	r2, r8, #1
 800b518:	3b01      	subs	r3, #1
 800b51a:	4631      	mov	r1, r6
 800b51c:	4628      	mov	r0, r5
 800b51e:	47b8      	blx	r7
 800b520:	3001      	adds	r0, #1
 800b522:	d10e      	bne.n	800b542 <_printf_float+0x3fa>
 800b524:	e65e      	b.n	800b1e4 <_printf_float+0x9c>
 800b526:	2301      	movs	r3, #1
 800b528:	464a      	mov	r2, r9
 800b52a:	4631      	mov	r1, r6
 800b52c:	4628      	mov	r0, r5
 800b52e:	47b8      	blx	r7
 800b530:	3001      	adds	r0, #1
 800b532:	f43f ae57 	beq.w	800b1e4 <_printf_float+0x9c>
 800b536:	f108 0801 	add.w	r8, r8, #1
 800b53a:	9b08      	ldr	r3, [sp, #32]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	4543      	cmp	r3, r8
 800b540:	dcf1      	bgt.n	800b526 <_printf_float+0x3de>
 800b542:	9b04      	ldr	r3, [sp, #16]
 800b544:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b548:	e6db      	b.n	800b302 <_printf_float+0x1ba>
 800b54a:	f04f 0800 	mov.w	r8, #0
 800b54e:	f104 091a 	add.w	r9, r4, #26
 800b552:	e7f2      	b.n	800b53a <_printf_float+0x3f2>
 800b554:	2301      	movs	r3, #1
 800b556:	4642      	mov	r2, r8
 800b558:	e7df      	b.n	800b51a <_printf_float+0x3d2>
 800b55a:	2301      	movs	r3, #1
 800b55c:	464a      	mov	r2, r9
 800b55e:	4631      	mov	r1, r6
 800b560:	4628      	mov	r0, r5
 800b562:	47b8      	blx	r7
 800b564:	3001      	adds	r0, #1
 800b566:	f43f ae3d 	beq.w	800b1e4 <_printf_float+0x9c>
 800b56a:	f108 0801 	add.w	r8, r8, #1
 800b56e:	68e3      	ldr	r3, [r4, #12]
 800b570:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b572:	1a5b      	subs	r3, r3, r1
 800b574:	4543      	cmp	r3, r8
 800b576:	dcf0      	bgt.n	800b55a <_printf_float+0x412>
 800b578:	e6f7      	b.n	800b36a <_printf_float+0x222>
 800b57a:	f04f 0800 	mov.w	r8, #0
 800b57e:	f104 0919 	add.w	r9, r4, #25
 800b582:	e7f4      	b.n	800b56e <_printf_float+0x426>

0800b584 <_printf_common>:
 800b584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b588:	4616      	mov	r6, r2
 800b58a:	4699      	mov	r9, r3
 800b58c:	688a      	ldr	r2, [r1, #8]
 800b58e:	690b      	ldr	r3, [r1, #16]
 800b590:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b594:	4293      	cmp	r3, r2
 800b596:	bfb8      	it	lt
 800b598:	4613      	movlt	r3, r2
 800b59a:	6033      	str	r3, [r6, #0]
 800b59c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5a0:	4607      	mov	r7, r0
 800b5a2:	460c      	mov	r4, r1
 800b5a4:	b10a      	cbz	r2, 800b5aa <_printf_common+0x26>
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	6033      	str	r3, [r6, #0]
 800b5aa:	6823      	ldr	r3, [r4, #0]
 800b5ac:	0699      	lsls	r1, r3, #26
 800b5ae:	bf42      	ittt	mi
 800b5b0:	6833      	ldrmi	r3, [r6, #0]
 800b5b2:	3302      	addmi	r3, #2
 800b5b4:	6033      	strmi	r3, [r6, #0]
 800b5b6:	6825      	ldr	r5, [r4, #0]
 800b5b8:	f015 0506 	ands.w	r5, r5, #6
 800b5bc:	d106      	bne.n	800b5cc <_printf_common+0x48>
 800b5be:	f104 0a19 	add.w	sl, r4, #25
 800b5c2:	68e3      	ldr	r3, [r4, #12]
 800b5c4:	6832      	ldr	r2, [r6, #0]
 800b5c6:	1a9b      	subs	r3, r3, r2
 800b5c8:	42ab      	cmp	r3, r5
 800b5ca:	dc26      	bgt.n	800b61a <_printf_common+0x96>
 800b5cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5d0:	1e13      	subs	r3, r2, #0
 800b5d2:	6822      	ldr	r2, [r4, #0]
 800b5d4:	bf18      	it	ne
 800b5d6:	2301      	movne	r3, #1
 800b5d8:	0692      	lsls	r2, r2, #26
 800b5da:	d42b      	bmi.n	800b634 <_printf_common+0xb0>
 800b5dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5e0:	4649      	mov	r1, r9
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	47c0      	blx	r8
 800b5e6:	3001      	adds	r0, #1
 800b5e8:	d01e      	beq.n	800b628 <_printf_common+0xa4>
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	68e5      	ldr	r5, [r4, #12]
 800b5ee:	6832      	ldr	r2, [r6, #0]
 800b5f0:	f003 0306 	and.w	r3, r3, #6
 800b5f4:	2b04      	cmp	r3, #4
 800b5f6:	bf08      	it	eq
 800b5f8:	1aad      	subeq	r5, r5, r2
 800b5fa:	68a3      	ldr	r3, [r4, #8]
 800b5fc:	6922      	ldr	r2, [r4, #16]
 800b5fe:	bf0c      	ite	eq
 800b600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b604:	2500      	movne	r5, #0
 800b606:	4293      	cmp	r3, r2
 800b608:	bfc4      	itt	gt
 800b60a:	1a9b      	subgt	r3, r3, r2
 800b60c:	18ed      	addgt	r5, r5, r3
 800b60e:	2600      	movs	r6, #0
 800b610:	341a      	adds	r4, #26
 800b612:	42b5      	cmp	r5, r6
 800b614:	d11a      	bne.n	800b64c <_printf_common+0xc8>
 800b616:	2000      	movs	r0, #0
 800b618:	e008      	b.n	800b62c <_printf_common+0xa8>
 800b61a:	2301      	movs	r3, #1
 800b61c:	4652      	mov	r2, sl
 800b61e:	4649      	mov	r1, r9
 800b620:	4638      	mov	r0, r7
 800b622:	47c0      	blx	r8
 800b624:	3001      	adds	r0, #1
 800b626:	d103      	bne.n	800b630 <_printf_common+0xac>
 800b628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b630:	3501      	adds	r5, #1
 800b632:	e7c6      	b.n	800b5c2 <_printf_common+0x3e>
 800b634:	18e1      	adds	r1, r4, r3
 800b636:	1c5a      	adds	r2, r3, #1
 800b638:	2030      	movs	r0, #48	; 0x30
 800b63a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b63e:	4422      	add	r2, r4
 800b640:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b644:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b648:	3302      	adds	r3, #2
 800b64a:	e7c7      	b.n	800b5dc <_printf_common+0x58>
 800b64c:	2301      	movs	r3, #1
 800b64e:	4622      	mov	r2, r4
 800b650:	4649      	mov	r1, r9
 800b652:	4638      	mov	r0, r7
 800b654:	47c0      	blx	r8
 800b656:	3001      	adds	r0, #1
 800b658:	d0e6      	beq.n	800b628 <_printf_common+0xa4>
 800b65a:	3601      	adds	r6, #1
 800b65c:	e7d9      	b.n	800b612 <_printf_common+0x8e>
	...

0800b660 <_printf_i>:
 800b660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b664:	460c      	mov	r4, r1
 800b666:	4691      	mov	r9, r2
 800b668:	7e27      	ldrb	r7, [r4, #24]
 800b66a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b66c:	2f78      	cmp	r7, #120	; 0x78
 800b66e:	4680      	mov	r8, r0
 800b670:	469a      	mov	sl, r3
 800b672:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b676:	d807      	bhi.n	800b688 <_printf_i+0x28>
 800b678:	2f62      	cmp	r7, #98	; 0x62
 800b67a:	d80a      	bhi.n	800b692 <_printf_i+0x32>
 800b67c:	2f00      	cmp	r7, #0
 800b67e:	f000 80d8 	beq.w	800b832 <_printf_i+0x1d2>
 800b682:	2f58      	cmp	r7, #88	; 0x58
 800b684:	f000 80a3 	beq.w	800b7ce <_printf_i+0x16e>
 800b688:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b68c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b690:	e03a      	b.n	800b708 <_printf_i+0xa8>
 800b692:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b696:	2b15      	cmp	r3, #21
 800b698:	d8f6      	bhi.n	800b688 <_printf_i+0x28>
 800b69a:	a001      	add	r0, pc, #4	; (adr r0, 800b6a0 <_printf_i+0x40>)
 800b69c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b6a0:	0800b6f9 	.word	0x0800b6f9
 800b6a4:	0800b70d 	.word	0x0800b70d
 800b6a8:	0800b689 	.word	0x0800b689
 800b6ac:	0800b689 	.word	0x0800b689
 800b6b0:	0800b689 	.word	0x0800b689
 800b6b4:	0800b689 	.word	0x0800b689
 800b6b8:	0800b70d 	.word	0x0800b70d
 800b6bc:	0800b689 	.word	0x0800b689
 800b6c0:	0800b689 	.word	0x0800b689
 800b6c4:	0800b689 	.word	0x0800b689
 800b6c8:	0800b689 	.word	0x0800b689
 800b6cc:	0800b819 	.word	0x0800b819
 800b6d0:	0800b73d 	.word	0x0800b73d
 800b6d4:	0800b7fb 	.word	0x0800b7fb
 800b6d8:	0800b689 	.word	0x0800b689
 800b6dc:	0800b689 	.word	0x0800b689
 800b6e0:	0800b83b 	.word	0x0800b83b
 800b6e4:	0800b689 	.word	0x0800b689
 800b6e8:	0800b73d 	.word	0x0800b73d
 800b6ec:	0800b689 	.word	0x0800b689
 800b6f0:	0800b689 	.word	0x0800b689
 800b6f4:	0800b803 	.word	0x0800b803
 800b6f8:	680b      	ldr	r3, [r1, #0]
 800b6fa:	1d1a      	adds	r2, r3, #4
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	600a      	str	r2, [r1, #0]
 800b700:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b708:	2301      	movs	r3, #1
 800b70a:	e0a3      	b.n	800b854 <_printf_i+0x1f4>
 800b70c:	6825      	ldr	r5, [r4, #0]
 800b70e:	6808      	ldr	r0, [r1, #0]
 800b710:	062e      	lsls	r6, r5, #24
 800b712:	f100 0304 	add.w	r3, r0, #4
 800b716:	d50a      	bpl.n	800b72e <_printf_i+0xce>
 800b718:	6805      	ldr	r5, [r0, #0]
 800b71a:	600b      	str	r3, [r1, #0]
 800b71c:	2d00      	cmp	r5, #0
 800b71e:	da03      	bge.n	800b728 <_printf_i+0xc8>
 800b720:	232d      	movs	r3, #45	; 0x2d
 800b722:	426d      	negs	r5, r5
 800b724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b728:	485e      	ldr	r0, [pc, #376]	; (800b8a4 <_printf_i+0x244>)
 800b72a:	230a      	movs	r3, #10
 800b72c:	e019      	b.n	800b762 <_printf_i+0x102>
 800b72e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b732:	6805      	ldr	r5, [r0, #0]
 800b734:	600b      	str	r3, [r1, #0]
 800b736:	bf18      	it	ne
 800b738:	b22d      	sxthne	r5, r5
 800b73a:	e7ef      	b.n	800b71c <_printf_i+0xbc>
 800b73c:	680b      	ldr	r3, [r1, #0]
 800b73e:	6825      	ldr	r5, [r4, #0]
 800b740:	1d18      	adds	r0, r3, #4
 800b742:	6008      	str	r0, [r1, #0]
 800b744:	0628      	lsls	r0, r5, #24
 800b746:	d501      	bpl.n	800b74c <_printf_i+0xec>
 800b748:	681d      	ldr	r5, [r3, #0]
 800b74a:	e002      	b.n	800b752 <_printf_i+0xf2>
 800b74c:	0669      	lsls	r1, r5, #25
 800b74e:	d5fb      	bpl.n	800b748 <_printf_i+0xe8>
 800b750:	881d      	ldrh	r5, [r3, #0]
 800b752:	4854      	ldr	r0, [pc, #336]	; (800b8a4 <_printf_i+0x244>)
 800b754:	2f6f      	cmp	r7, #111	; 0x6f
 800b756:	bf0c      	ite	eq
 800b758:	2308      	moveq	r3, #8
 800b75a:	230a      	movne	r3, #10
 800b75c:	2100      	movs	r1, #0
 800b75e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b762:	6866      	ldr	r6, [r4, #4]
 800b764:	60a6      	str	r6, [r4, #8]
 800b766:	2e00      	cmp	r6, #0
 800b768:	bfa2      	ittt	ge
 800b76a:	6821      	ldrge	r1, [r4, #0]
 800b76c:	f021 0104 	bicge.w	r1, r1, #4
 800b770:	6021      	strge	r1, [r4, #0]
 800b772:	b90d      	cbnz	r5, 800b778 <_printf_i+0x118>
 800b774:	2e00      	cmp	r6, #0
 800b776:	d04d      	beq.n	800b814 <_printf_i+0x1b4>
 800b778:	4616      	mov	r6, r2
 800b77a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b77e:	fb03 5711 	mls	r7, r3, r1, r5
 800b782:	5dc7      	ldrb	r7, [r0, r7]
 800b784:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b788:	462f      	mov	r7, r5
 800b78a:	42bb      	cmp	r3, r7
 800b78c:	460d      	mov	r5, r1
 800b78e:	d9f4      	bls.n	800b77a <_printf_i+0x11a>
 800b790:	2b08      	cmp	r3, #8
 800b792:	d10b      	bne.n	800b7ac <_printf_i+0x14c>
 800b794:	6823      	ldr	r3, [r4, #0]
 800b796:	07df      	lsls	r7, r3, #31
 800b798:	d508      	bpl.n	800b7ac <_printf_i+0x14c>
 800b79a:	6923      	ldr	r3, [r4, #16]
 800b79c:	6861      	ldr	r1, [r4, #4]
 800b79e:	4299      	cmp	r1, r3
 800b7a0:	bfde      	ittt	le
 800b7a2:	2330      	movle	r3, #48	; 0x30
 800b7a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7a8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800b7ac:	1b92      	subs	r2, r2, r6
 800b7ae:	6122      	str	r2, [r4, #16]
 800b7b0:	f8cd a000 	str.w	sl, [sp]
 800b7b4:	464b      	mov	r3, r9
 800b7b6:	aa03      	add	r2, sp, #12
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	4640      	mov	r0, r8
 800b7bc:	f7ff fee2 	bl	800b584 <_printf_common>
 800b7c0:	3001      	adds	r0, #1
 800b7c2:	d14c      	bne.n	800b85e <_printf_i+0x1fe>
 800b7c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7c8:	b004      	add	sp, #16
 800b7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ce:	4835      	ldr	r0, [pc, #212]	; (800b8a4 <_printf_i+0x244>)
 800b7d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b7d4:	6823      	ldr	r3, [r4, #0]
 800b7d6:	680e      	ldr	r6, [r1, #0]
 800b7d8:	061f      	lsls	r7, r3, #24
 800b7da:	f856 5b04 	ldr.w	r5, [r6], #4
 800b7de:	600e      	str	r6, [r1, #0]
 800b7e0:	d514      	bpl.n	800b80c <_printf_i+0x1ac>
 800b7e2:	07d9      	lsls	r1, r3, #31
 800b7e4:	bf44      	itt	mi
 800b7e6:	f043 0320 	orrmi.w	r3, r3, #32
 800b7ea:	6023      	strmi	r3, [r4, #0]
 800b7ec:	b91d      	cbnz	r5, 800b7f6 <_printf_i+0x196>
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	f023 0320 	bic.w	r3, r3, #32
 800b7f4:	6023      	str	r3, [r4, #0]
 800b7f6:	2310      	movs	r3, #16
 800b7f8:	e7b0      	b.n	800b75c <_printf_i+0xfc>
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	f043 0320 	orr.w	r3, r3, #32
 800b800:	6023      	str	r3, [r4, #0]
 800b802:	2378      	movs	r3, #120	; 0x78
 800b804:	4828      	ldr	r0, [pc, #160]	; (800b8a8 <_printf_i+0x248>)
 800b806:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b80a:	e7e3      	b.n	800b7d4 <_printf_i+0x174>
 800b80c:	065e      	lsls	r6, r3, #25
 800b80e:	bf48      	it	mi
 800b810:	b2ad      	uxthmi	r5, r5
 800b812:	e7e6      	b.n	800b7e2 <_printf_i+0x182>
 800b814:	4616      	mov	r6, r2
 800b816:	e7bb      	b.n	800b790 <_printf_i+0x130>
 800b818:	680b      	ldr	r3, [r1, #0]
 800b81a:	6826      	ldr	r6, [r4, #0]
 800b81c:	6960      	ldr	r0, [r4, #20]
 800b81e:	1d1d      	adds	r5, r3, #4
 800b820:	600d      	str	r5, [r1, #0]
 800b822:	0635      	lsls	r5, r6, #24
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	d501      	bpl.n	800b82c <_printf_i+0x1cc>
 800b828:	6018      	str	r0, [r3, #0]
 800b82a:	e002      	b.n	800b832 <_printf_i+0x1d2>
 800b82c:	0671      	lsls	r1, r6, #25
 800b82e:	d5fb      	bpl.n	800b828 <_printf_i+0x1c8>
 800b830:	8018      	strh	r0, [r3, #0]
 800b832:	2300      	movs	r3, #0
 800b834:	6123      	str	r3, [r4, #16]
 800b836:	4616      	mov	r6, r2
 800b838:	e7ba      	b.n	800b7b0 <_printf_i+0x150>
 800b83a:	680b      	ldr	r3, [r1, #0]
 800b83c:	1d1a      	adds	r2, r3, #4
 800b83e:	600a      	str	r2, [r1, #0]
 800b840:	681e      	ldr	r6, [r3, #0]
 800b842:	6862      	ldr	r2, [r4, #4]
 800b844:	2100      	movs	r1, #0
 800b846:	4630      	mov	r0, r6
 800b848:	f7f4 fd52 	bl	80002f0 <memchr>
 800b84c:	b108      	cbz	r0, 800b852 <_printf_i+0x1f2>
 800b84e:	1b80      	subs	r0, r0, r6
 800b850:	6060      	str	r0, [r4, #4]
 800b852:	6863      	ldr	r3, [r4, #4]
 800b854:	6123      	str	r3, [r4, #16]
 800b856:	2300      	movs	r3, #0
 800b858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b85c:	e7a8      	b.n	800b7b0 <_printf_i+0x150>
 800b85e:	6923      	ldr	r3, [r4, #16]
 800b860:	4632      	mov	r2, r6
 800b862:	4649      	mov	r1, r9
 800b864:	4640      	mov	r0, r8
 800b866:	47d0      	blx	sl
 800b868:	3001      	adds	r0, #1
 800b86a:	d0ab      	beq.n	800b7c4 <_printf_i+0x164>
 800b86c:	6823      	ldr	r3, [r4, #0]
 800b86e:	079b      	lsls	r3, r3, #30
 800b870:	d413      	bmi.n	800b89a <_printf_i+0x23a>
 800b872:	68e0      	ldr	r0, [r4, #12]
 800b874:	9b03      	ldr	r3, [sp, #12]
 800b876:	4298      	cmp	r0, r3
 800b878:	bfb8      	it	lt
 800b87a:	4618      	movlt	r0, r3
 800b87c:	e7a4      	b.n	800b7c8 <_printf_i+0x168>
 800b87e:	2301      	movs	r3, #1
 800b880:	4632      	mov	r2, r6
 800b882:	4649      	mov	r1, r9
 800b884:	4640      	mov	r0, r8
 800b886:	47d0      	blx	sl
 800b888:	3001      	adds	r0, #1
 800b88a:	d09b      	beq.n	800b7c4 <_printf_i+0x164>
 800b88c:	3501      	adds	r5, #1
 800b88e:	68e3      	ldr	r3, [r4, #12]
 800b890:	9903      	ldr	r1, [sp, #12]
 800b892:	1a5b      	subs	r3, r3, r1
 800b894:	42ab      	cmp	r3, r5
 800b896:	dcf2      	bgt.n	800b87e <_printf_i+0x21e>
 800b898:	e7eb      	b.n	800b872 <_printf_i+0x212>
 800b89a:	2500      	movs	r5, #0
 800b89c:	f104 0619 	add.w	r6, r4, #25
 800b8a0:	e7f5      	b.n	800b88e <_printf_i+0x22e>
 800b8a2:	bf00      	nop
 800b8a4:	080115ba 	.word	0x080115ba
 800b8a8:	080115cb 	.word	0x080115cb

0800b8ac <_sbrk_r>:
 800b8ac:	b538      	push	{r3, r4, r5, lr}
 800b8ae:	4d06      	ldr	r5, [pc, #24]	; (800b8c8 <_sbrk_r+0x1c>)
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	4608      	mov	r0, r1
 800b8b6:	602b      	str	r3, [r5, #0]
 800b8b8:	f7f6 f866 	bl	8001988 <_sbrk>
 800b8bc:	1c43      	adds	r3, r0, #1
 800b8be:	d102      	bne.n	800b8c6 <_sbrk_r+0x1a>
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	b103      	cbz	r3, 800b8c6 <_sbrk_r+0x1a>
 800b8c4:	6023      	str	r3, [r4, #0]
 800b8c6:	bd38      	pop	{r3, r4, r5, pc}
 800b8c8:	24010880 	.word	0x24010880

0800b8cc <sniprintf>:
 800b8cc:	b40c      	push	{r2, r3}
 800b8ce:	b530      	push	{r4, r5, lr}
 800b8d0:	4b17      	ldr	r3, [pc, #92]	; (800b930 <sniprintf+0x64>)
 800b8d2:	1e0c      	subs	r4, r1, #0
 800b8d4:	681d      	ldr	r5, [r3, #0]
 800b8d6:	b09d      	sub	sp, #116	; 0x74
 800b8d8:	da08      	bge.n	800b8ec <sniprintf+0x20>
 800b8da:	238b      	movs	r3, #139	; 0x8b
 800b8dc:	602b      	str	r3, [r5, #0]
 800b8de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8e2:	b01d      	add	sp, #116	; 0x74
 800b8e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8e8:	b002      	add	sp, #8
 800b8ea:	4770      	bx	lr
 800b8ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b8f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b8f4:	bf14      	ite	ne
 800b8f6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b8fa:	4623      	moveq	r3, r4
 800b8fc:	9304      	str	r3, [sp, #16]
 800b8fe:	9307      	str	r3, [sp, #28]
 800b900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b904:	9002      	str	r0, [sp, #8]
 800b906:	9006      	str	r0, [sp, #24]
 800b908:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b90c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b90e:	ab21      	add	r3, sp, #132	; 0x84
 800b910:	a902      	add	r1, sp, #8
 800b912:	4628      	mov	r0, r5
 800b914:	9301      	str	r3, [sp, #4]
 800b916:	f001 fcf5 	bl	800d304 <_svfiprintf_r>
 800b91a:	1c43      	adds	r3, r0, #1
 800b91c:	bfbc      	itt	lt
 800b91e:	238b      	movlt	r3, #139	; 0x8b
 800b920:	602b      	strlt	r3, [r5, #0]
 800b922:	2c00      	cmp	r4, #0
 800b924:	d0dd      	beq.n	800b8e2 <sniprintf+0x16>
 800b926:	9b02      	ldr	r3, [sp, #8]
 800b928:	2200      	movs	r2, #0
 800b92a:	701a      	strb	r2, [r3, #0]
 800b92c:	e7d9      	b.n	800b8e2 <sniprintf+0x16>
 800b92e:	bf00      	nop
 800b930:	24000030 	.word	0x24000030

0800b934 <__swbuf_r>:
 800b934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b936:	460e      	mov	r6, r1
 800b938:	4614      	mov	r4, r2
 800b93a:	4605      	mov	r5, r0
 800b93c:	b118      	cbz	r0, 800b946 <__swbuf_r+0x12>
 800b93e:	6983      	ldr	r3, [r0, #24]
 800b940:	b90b      	cbnz	r3, 800b946 <__swbuf_r+0x12>
 800b942:	f000 ffe1 	bl	800c908 <__sinit>
 800b946:	4b21      	ldr	r3, [pc, #132]	; (800b9cc <__swbuf_r+0x98>)
 800b948:	429c      	cmp	r4, r3
 800b94a:	d12b      	bne.n	800b9a4 <__swbuf_r+0x70>
 800b94c:	686c      	ldr	r4, [r5, #4]
 800b94e:	69a3      	ldr	r3, [r4, #24]
 800b950:	60a3      	str	r3, [r4, #8]
 800b952:	89a3      	ldrh	r3, [r4, #12]
 800b954:	071a      	lsls	r2, r3, #28
 800b956:	d52f      	bpl.n	800b9b8 <__swbuf_r+0x84>
 800b958:	6923      	ldr	r3, [r4, #16]
 800b95a:	b36b      	cbz	r3, 800b9b8 <__swbuf_r+0x84>
 800b95c:	6923      	ldr	r3, [r4, #16]
 800b95e:	6820      	ldr	r0, [r4, #0]
 800b960:	1ac0      	subs	r0, r0, r3
 800b962:	6963      	ldr	r3, [r4, #20]
 800b964:	b2f6      	uxtb	r6, r6
 800b966:	4283      	cmp	r3, r0
 800b968:	4637      	mov	r7, r6
 800b96a:	dc04      	bgt.n	800b976 <__swbuf_r+0x42>
 800b96c:	4621      	mov	r1, r4
 800b96e:	4628      	mov	r0, r5
 800b970:	f000 ff36 	bl	800c7e0 <_fflush_r>
 800b974:	bb30      	cbnz	r0, 800b9c4 <__swbuf_r+0x90>
 800b976:	68a3      	ldr	r3, [r4, #8]
 800b978:	3b01      	subs	r3, #1
 800b97a:	60a3      	str	r3, [r4, #8]
 800b97c:	6823      	ldr	r3, [r4, #0]
 800b97e:	1c5a      	adds	r2, r3, #1
 800b980:	6022      	str	r2, [r4, #0]
 800b982:	701e      	strb	r6, [r3, #0]
 800b984:	6963      	ldr	r3, [r4, #20]
 800b986:	3001      	adds	r0, #1
 800b988:	4283      	cmp	r3, r0
 800b98a:	d004      	beq.n	800b996 <__swbuf_r+0x62>
 800b98c:	89a3      	ldrh	r3, [r4, #12]
 800b98e:	07db      	lsls	r3, r3, #31
 800b990:	d506      	bpl.n	800b9a0 <__swbuf_r+0x6c>
 800b992:	2e0a      	cmp	r6, #10
 800b994:	d104      	bne.n	800b9a0 <__swbuf_r+0x6c>
 800b996:	4621      	mov	r1, r4
 800b998:	4628      	mov	r0, r5
 800b99a:	f000 ff21 	bl	800c7e0 <_fflush_r>
 800b99e:	b988      	cbnz	r0, 800b9c4 <__swbuf_r+0x90>
 800b9a0:	4638      	mov	r0, r7
 800b9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9a4:	4b0a      	ldr	r3, [pc, #40]	; (800b9d0 <__swbuf_r+0x9c>)
 800b9a6:	429c      	cmp	r4, r3
 800b9a8:	d101      	bne.n	800b9ae <__swbuf_r+0x7a>
 800b9aa:	68ac      	ldr	r4, [r5, #8]
 800b9ac:	e7cf      	b.n	800b94e <__swbuf_r+0x1a>
 800b9ae:	4b09      	ldr	r3, [pc, #36]	; (800b9d4 <__swbuf_r+0xa0>)
 800b9b0:	429c      	cmp	r4, r3
 800b9b2:	bf08      	it	eq
 800b9b4:	68ec      	ldreq	r4, [r5, #12]
 800b9b6:	e7ca      	b.n	800b94e <__swbuf_r+0x1a>
 800b9b8:	4621      	mov	r1, r4
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	f000 f80c 	bl	800b9d8 <__swsetup_r>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d0cb      	beq.n	800b95c <__swbuf_r+0x28>
 800b9c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b9c8:	e7ea      	b.n	800b9a0 <__swbuf_r+0x6c>
 800b9ca:	bf00      	nop
 800b9cc:	08011690 	.word	0x08011690
 800b9d0:	080116b0 	.word	0x080116b0
 800b9d4:	08011670 	.word	0x08011670

0800b9d8 <__swsetup_r>:
 800b9d8:	4b32      	ldr	r3, [pc, #200]	; (800baa4 <__swsetup_r+0xcc>)
 800b9da:	b570      	push	{r4, r5, r6, lr}
 800b9dc:	681d      	ldr	r5, [r3, #0]
 800b9de:	4606      	mov	r6, r0
 800b9e0:	460c      	mov	r4, r1
 800b9e2:	b125      	cbz	r5, 800b9ee <__swsetup_r+0x16>
 800b9e4:	69ab      	ldr	r3, [r5, #24]
 800b9e6:	b913      	cbnz	r3, 800b9ee <__swsetup_r+0x16>
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	f000 ff8d 	bl	800c908 <__sinit>
 800b9ee:	4b2e      	ldr	r3, [pc, #184]	; (800baa8 <__swsetup_r+0xd0>)
 800b9f0:	429c      	cmp	r4, r3
 800b9f2:	d10f      	bne.n	800ba14 <__swsetup_r+0x3c>
 800b9f4:	686c      	ldr	r4, [r5, #4]
 800b9f6:	89a3      	ldrh	r3, [r4, #12]
 800b9f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9fc:	0719      	lsls	r1, r3, #28
 800b9fe:	d42c      	bmi.n	800ba5a <__swsetup_r+0x82>
 800ba00:	06dd      	lsls	r5, r3, #27
 800ba02:	d411      	bmi.n	800ba28 <__swsetup_r+0x50>
 800ba04:	2309      	movs	r3, #9
 800ba06:	6033      	str	r3, [r6, #0]
 800ba08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba0c:	81a3      	strh	r3, [r4, #12]
 800ba0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba12:	e03e      	b.n	800ba92 <__swsetup_r+0xba>
 800ba14:	4b25      	ldr	r3, [pc, #148]	; (800baac <__swsetup_r+0xd4>)
 800ba16:	429c      	cmp	r4, r3
 800ba18:	d101      	bne.n	800ba1e <__swsetup_r+0x46>
 800ba1a:	68ac      	ldr	r4, [r5, #8]
 800ba1c:	e7eb      	b.n	800b9f6 <__swsetup_r+0x1e>
 800ba1e:	4b24      	ldr	r3, [pc, #144]	; (800bab0 <__swsetup_r+0xd8>)
 800ba20:	429c      	cmp	r4, r3
 800ba22:	bf08      	it	eq
 800ba24:	68ec      	ldreq	r4, [r5, #12]
 800ba26:	e7e6      	b.n	800b9f6 <__swsetup_r+0x1e>
 800ba28:	0758      	lsls	r0, r3, #29
 800ba2a:	d512      	bpl.n	800ba52 <__swsetup_r+0x7a>
 800ba2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba2e:	b141      	cbz	r1, 800ba42 <__swsetup_r+0x6a>
 800ba30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba34:	4299      	cmp	r1, r3
 800ba36:	d002      	beq.n	800ba3e <__swsetup_r+0x66>
 800ba38:	4630      	mov	r0, r6
 800ba3a:	f7ff fa49 	bl	800aed0 <_free_r>
 800ba3e:	2300      	movs	r3, #0
 800ba40:	6363      	str	r3, [r4, #52]	; 0x34
 800ba42:	89a3      	ldrh	r3, [r4, #12]
 800ba44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba48:	81a3      	strh	r3, [r4, #12]
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	6063      	str	r3, [r4, #4]
 800ba4e:	6923      	ldr	r3, [r4, #16]
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	89a3      	ldrh	r3, [r4, #12]
 800ba54:	f043 0308 	orr.w	r3, r3, #8
 800ba58:	81a3      	strh	r3, [r4, #12]
 800ba5a:	6923      	ldr	r3, [r4, #16]
 800ba5c:	b94b      	cbnz	r3, 800ba72 <__swsetup_r+0x9a>
 800ba5e:	89a3      	ldrh	r3, [r4, #12]
 800ba60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba68:	d003      	beq.n	800ba72 <__swsetup_r+0x9a>
 800ba6a:	4621      	mov	r1, r4
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f001 f815 	bl	800ca9c <__smakebuf_r>
 800ba72:	89a0      	ldrh	r0, [r4, #12]
 800ba74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba78:	f010 0301 	ands.w	r3, r0, #1
 800ba7c:	d00a      	beq.n	800ba94 <__swsetup_r+0xbc>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	60a3      	str	r3, [r4, #8]
 800ba82:	6963      	ldr	r3, [r4, #20]
 800ba84:	425b      	negs	r3, r3
 800ba86:	61a3      	str	r3, [r4, #24]
 800ba88:	6923      	ldr	r3, [r4, #16]
 800ba8a:	b943      	cbnz	r3, 800ba9e <__swsetup_r+0xc6>
 800ba8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba90:	d1ba      	bne.n	800ba08 <__swsetup_r+0x30>
 800ba92:	bd70      	pop	{r4, r5, r6, pc}
 800ba94:	0781      	lsls	r1, r0, #30
 800ba96:	bf58      	it	pl
 800ba98:	6963      	ldrpl	r3, [r4, #20]
 800ba9a:	60a3      	str	r3, [r4, #8]
 800ba9c:	e7f4      	b.n	800ba88 <__swsetup_r+0xb0>
 800ba9e:	2000      	movs	r0, #0
 800baa0:	e7f7      	b.n	800ba92 <__swsetup_r+0xba>
 800baa2:	bf00      	nop
 800baa4:	24000030 	.word	0x24000030
 800baa8:	08011690 	.word	0x08011690
 800baac:	080116b0 	.word	0x080116b0
 800bab0:	08011670 	.word	0x08011670

0800bab4 <quorem>:
 800bab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	6903      	ldr	r3, [r0, #16]
 800baba:	690c      	ldr	r4, [r1, #16]
 800babc:	42a3      	cmp	r3, r4
 800babe:	4607      	mov	r7, r0
 800bac0:	f2c0 8081 	blt.w	800bbc6 <quorem+0x112>
 800bac4:	3c01      	subs	r4, #1
 800bac6:	f101 0814 	add.w	r8, r1, #20
 800baca:	f100 0514 	add.w	r5, r0, #20
 800bace:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bad2:	9301      	str	r3, [sp, #4]
 800bad4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bad8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800badc:	3301      	adds	r3, #1
 800bade:	429a      	cmp	r2, r3
 800bae0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bae4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bae8:	fbb2 f6f3 	udiv	r6, r2, r3
 800baec:	d331      	bcc.n	800bb52 <quorem+0x9e>
 800baee:	f04f 0e00 	mov.w	lr, #0
 800baf2:	4640      	mov	r0, r8
 800baf4:	46ac      	mov	ip, r5
 800baf6:	46f2      	mov	sl, lr
 800baf8:	f850 2b04 	ldr.w	r2, [r0], #4
 800bafc:	b293      	uxth	r3, r2
 800bafe:	fb06 e303 	mla	r3, r6, r3, lr
 800bb02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	ebaa 0303 	sub.w	r3, sl, r3
 800bb0c:	0c12      	lsrs	r2, r2, #16
 800bb0e:	f8dc a000 	ldr.w	sl, [ip]
 800bb12:	fb06 e202 	mla	r2, r6, r2, lr
 800bb16:	fa13 f38a 	uxtah	r3, r3, sl
 800bb1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bb1e:	fa1f fa82 	uxth.w	sl, r2
 800bb22:	f8dc 2000 	ldr.w	r2, [ip]
 800bb26:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bb2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb34:	4581      	cmp	r9, r0
 800bb36:	f84c 3b04 	str.w	r3, [ip], #4
 800bb3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bb3e:	d2db      	bcs.n	800baf8 <quorem+0x44>
 800bb40:	f855 300b 	ldr.w	r3, [r5, fp]
 800bb44:	b92b      	cbnz	r3, 800bb52 <quorem+0x9e>
 800bb46:	9b01      	ldr	r3, [sp, #4]
 800bb48:	3b04      	subs	r3, #4
 800bb4a:	429d      	cmp	r5, r3
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	d32e      	bcc.n	800bbae <quorem+0xfa>
 800bb50:	613c      	str	r4, [r7, #16]
 800bb52:	4638      	mov	r0, r7
 800bb54:	f001 fa6c 	bl	800d030 <__mcmp>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	db24      	blt.n	800bba6 <quorem+0xf2>
 800bb5c:	3601      	adds	r6, #1
 800bb5e:	4628      	mov	r0, r5
 800bb60:	f04f 0c00 	mov.w	ip, #0
 800bb64:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb68:	f8d0 e000 	ldr.w	lr, [r0]
 800bb6c:	b293      	uxth	r3, r2
 800bb6e:	ebac 0303 	sub.w	r3, ip, r3
 800bb72:	0c12      	lsrs	r2, r2, #16
 800bb74:	fa13 f38e 	uxtah	r3, r3, lr
 800bb78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bb7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb86:	45c1      	cmp	r9, r8
 800bb88:	f840 3b04 	str.w	r3, [r0], #4
 800bb8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bb90:	d2e8      	bcs.n	800bb64 <quorem+0xb0>
 800bb92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb9a:	b922      	cbnz	r2, 800bba6 <quorem+0xf2>
 800bb9c:	3b04      	subs	r3, #4
 800bb9e:	429d      	cmp	r5, r3
 800bba0:	461a      	mov	r2, r3
 800bba2:	d30a      	bcc.n	800bbba <quorem+0x106>
 800bba4:	613c      	str	r4, [r7, #16]
 800bba6:	4630      	mov	r0, r6
 800bba8:	b003      	add	sp, #12
 800bbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbae:	6812      	ldr	r2, [r2, #0]
 800bbb0:	3b04      	subs	r3, #4
 800bbb2:	2a00      	cmp	r2, #0
 800bbb4:	d1cc      	bne.n	800bb50 <quorem+0x9c>
 800bbb6:	3c01      	subs	r4, #1
 800bbb8:	e7c7      	b.n	800bb4a <quorem+0x96>
 800bbba:	6812      	ldr	r2, [r2, #0]
 800bbbc:	3b04      	subs	r3, #4
 800bbbe:	2a00      	cmp	r2, #0
 800bbc0:	d1f0      	bne.n	800bba4 <quorem+0xf0>
 800bbc2:	3c01      	subs	r4, #1
 800bbc4:	e7eb      	b.n	800bb9e <quorem+0xea>
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	e7ee      	b.n	800bba8 <quorem+0xf4>
 800bbca:	0000      	movs	r0, r0
 800bbcc:	0000      	movs	r0, r0
	...

0800bbd0 <_dtoa_r>:
 800bbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd4:	ec59 8b10 	vmov	r8, r9, d0
 800bbd8:	b095      	sub	sp, #84	; 0x54
 800bbda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bbdc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800bbde:	9107      	str	r1, [sp, #28]
 800bbe0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800bbe4:	4606      	mov	r6, r0
 800bbe6:	9209      	str	r2, [sp, #36]	; 0x24
 800bbe8:	9310      	str	r3, [sp, #64]	; 0x40
 800bbea:	b975      	cbnz	r5, 800bc0a <_dtoa_r+0x3a>
 800bbec:	2010      	movs	r0, #16
 800bbee:	f7ff f937 	bl	800ae60 <malloc>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	6270      	str	r0, [r6, #36]	; 0x24
 800bbf6:	b920      	cbnz	r0, 800bc02 <_dtoa_r+0x32>
 800bbf8:	4bab      	ldr	r3, [pc, #684]	; (800bea8 <_dtoa_r+0x2d8>)
 800bbfa:	21ea      	movs	r1, #234	; 0xea
 800bbfc:	48ab      	ldr	r0, [pc, #684]	; (800beac <_dtoa_r+0x2dc>)
 800bbfe:	f001 fe31 	bl	800d864 <__assert_func>
 800bc02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bc06:	6005      	str	r5, [r0, #0]
 800bc08:	60c5      	str	r5, [r0, #12]
 800bc0a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bc0c:	6819      	ldr	r1, [r3, #0]
 800bc0e:	b151      	cbz	r1, 800bc26 <_dtoa_r+0x56>
 800bc10:	685a      	ldr	r2, [r3, #4]
 800bc12:	604a      	str	r2, [r1, #4]
 800bc14:	2301      	movs	r3, #1
 800bc16:	4093      	lsls	r3, r2
 800bc18:	608b      	str	r3, [r1, #8]
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	f000 ffca 	bl	800cbb4 <_Bfree>
 800bc20:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bc22:	2200      	movs	r2, #0
 800bc24:	601a      	str	r2, [r3, #0]
 800bc26:	f1b9 0300 	subs.w	r3, r9, #0
 800bc2a:	bfbb      	ittet	lt
 800bc2c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bc30:	9303      	strlt	r3, [sp, #12]
 800bc32:	2300      	movge	r3, #0
 800bc34:	2201      	movlt	r2, #1
 800bc36:	bfac      	ite	ge
 800bc38:	6023      	strge	r3, [r4, #0]
 800bc3a:	6022      	strlt	r2, [r4, #0]
 800bc3c:	4b9c      	ldr	r3, [pc, #624]	; (800beb0 <_dtoa_r+0x2e0>)
 800bc3e:	9c03      	ldr	r4, [sp, #12]
 800bc40:	43a3      	bics	r3, r4
 800bc42:	d11a      	bne.n	800bc7a <_dtoa_r+0xaa>
 800bc44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc46:	f242 730f 	movw	r3, #9999	; 0x270f
 800bc4a:	6013      	str	r3, [r2, #0]
 800bc4c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bc50:	ea53 0308 	orrs.w	r3, r3, r8
 800bc54:	f000 8512 	beq.w	800c67c <_dtoa_r+0xaac>
 800bc58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc5a:	b953      	cbnz	r3, 800bc72 <_dtoa_r+0xa2>
 800bc5c:	4b95      	ldr	r3, [pc, #596]	; (800beb4 <_dtoa_r+0x2e4>)
 800bc5e:	e01f      	b.n	800bca0 <_dtoa_r+0xd0>
 800bc60:	4b95      	ldr	r3, [pc, #596]	; (800beb8 <_dtoa_r+0x2e8>)
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	3308      	adds	r3, #8
 800bc66:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bc68:	6013      	str	r3, [r2, #0]
 800bc6a:	9800      	ldr	r0, [sp, #0]
 800bc6c:	b015      	add	sp, #84	; 0x54
 800bc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc72:	4b90      	ldr	r3, [pc, #576]	; (800beb4 <_dtoa_r+0x2e4>)
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	3303      	adds	r3, #3
 800bc78:	e7f5      	b.n	800bc66 <_dtoa_r+0x96>
 800bc7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc86:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bc8a:	d10b      	bne.n	800bca4 <_dtoa_r+0xd4>
 800bc8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc8e:	2301      	movs	r3, #1
 800bc90:	6013      	str	r3, [r2, #0]
 800bc92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f000 84ee 	beq.w	800c676 <_dtoa_r+0xaa6>
 800bc9a:	4888      	ldr	r0, [pc, #544]	; (800bebc <_dtoa_r+0x2ec>)
 800bc9c:	6018      	str	r0, [r3, #0]
 800bc9e:	1e43      	subs	r3, r0, #1
 800bca0:	9300      	str	r3, [sp, #0]
 800bca2:	e7e2      	b.n	800bc6a <_dtoa_r+0x9a>
 800bca4:	a913      	add	r1, sp, #76	; 0x4c
 800bca6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bcaa:	aa12      	add	r2, sp, #72	; 0x48
 800bcac:	4630      	mov	r0, r6
 800bcae:	f001 fa63 	bl	800d178 <__d2b>
 800bcb2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bcba:	2900      	cmp	r1, #0
 800bcbc:	d047      	beq.n	800bd4e <_dtoa_r+0x17e>
 800bcbe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bcc0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bcc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bcc8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800bccc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bcd0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bcd4:	2400      	movs	r4, #0
 800bcd6:	ec43 2b16 	vmov	d6, r2, r3
 800bcda:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800bcde:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800be90 <_dtoa_r+0x2c0>
 800bce2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bce6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800be98 <_dtoa_r+0x2c8>
 800bcea:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bcee:	eeb0 7b46 	vmov.f64	d7, d6
 800bcf2:	ee06 1a90 	vmov	s13, r1
 800bcf6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800bcfa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800bea0 <_dtoa_r+0x2d0>
 800bcfe:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bd02:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bd06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd0e:	ee16 ba90 	vmov	fp, s13
 800bd12:	9411      	str	r4, [sp, #68]	; 0x44
 800bd14:	d508      	bpl.n	800bd28 <_dtoa_r+0x158>
 800bd16:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bd1a:	eeb4 6b47 	vcmp.f64	d6, d7
 800bd1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd22:	bf18      	it	ne
 800bd24:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800bd28:	f1bb 0f16 	cmp.w	fp, #22
 800bd2c:	d832      	bhi.n	800bd94 <_dtoa_r+0x1c4>
 800bd2e:	4b64      	ldr	r3, [pc, #400]	; (800bec0 <_dtoa_r+0x2f0>)
 800bd30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd34:	ed93 7b00 	vldr	d7, [r3]
 800bd38:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800bd3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd44:	d501      	bpl.n	800bd4a <_dtoa_r+0x17a>
 800bd46:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	e023      	b.n	800bd96 <_dtoa_r+0x1c6>
 800bd4e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bd50:	4401      	add	r1, r0
 800bd52:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800bd56:	2b20      	cmp	r3, #32
 800bd58:	bfc3      	ittte	gt
 800bd5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bd5e:	fa04 f303 	lslgt.w	r3, r4, r3
 800bd62:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800bd66:	f1c3 0320 	rsble	r3, r3, #32
 800bd6a:	bfc6      	itte	gt
 800bd6c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800bd70:	ea43 0308 	orrgt.w	r3, r3, r8
 800bd74:	fa08 f303 	lslle.w	r3, r8, r3
 800bd78:	ee07 3a90 	vmov	s15, r3
 800bd7c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bd80:	3901      	subs	r1, #1
 800bd82:	ed8d 7b00 	vstr	d7, [sp]
 800bd86:	9c01      	ldr	r4, [sp, #4]
 800bd88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd8c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800bd90:	2401      	movs	r4, #1
 800bd92:	e7a0      	b.n	800bcd6 <_dtoa_r+0x106>
 800bd94:	2301      	movs	r3, #1
 800bd96:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd98:	1a43      	subs	r3, r0, r1
 800bd9a:	1e5a      	subs	r2, r3, #1
 800bd9c:	bf45      	ittet	mi
 800bd9e:	f1c3 0301 	rsbmi	r3, r3, #1
 800bda2:	9305      	strmi	r3, [sp, #20]
 800bda4:	2300      	movpl	r3, #0
 800bda6:	2300      	movmi	r3, #0
 800bda8:	9206      	str	r2, [sp, #24]
 800bdaa:	bf54      	ite	pl
 800bdac:	9305      	strpl	r3, [sp, #20]
 800bdae:	9306      	strmi	r3, [sp, #24]
 800bdb0:	f1bb 0f00 	cmp.w	fp, #0
 800bdb4:	db18      	blt.n	800bde8 <_dtoa_r+0x218>
 800bdb6:	9b06      	ldr	r3, [sp, #24]
 800bdb8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800bdbc:	445b      	add	r3, fp
 800bdbe:	9306      	str	r3, [sp, #24]
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	9a07      	ldr	r2, [sp, #28]
 800bdc4:	2a09      	cmp	r2, #9
 800bdc6:	d849      	bhi.n	800be5c <_dtoa_r+0x28c>
 800bdc8:	2a05      	cmp	r2, #5
 800bdca:	bfc4      	itt	gt
 800bdcc:	3a04      	subgt	r2, #4
 800bdce:	9207      	strgt	r2, [sp, #28]
 800bdd0:	9a07      	ldr	r2, [sp, #28]
 800bdd2:	f1a2 0202 	sub.w	r2, r2, #2
 800bdd6:	bfcc      	ite	gt
 800bdd8:	2400      	movgt	r4, #0
 800bdda:	2401      	movle	r4, #1
 800bddc:	2a03      	cmp	r2, #3
 800bdde:	d848      	bhi.n	800be72 <_dtoa_r+0x2a2>
 800bde0:	e8df f002 	tbb	[pc, r2]
 800bde4:	3a2c2e0b 	.word	0x3a2c2e0b
 800bde8:	9b05      	ldr	r3, [sp, #20]
 800bdea:	2200      	movs	r2, #0
 800bdec:	eba3 030b 	sub.w	r3, r3, fp
 800bdf0:	9305      	str	r3, [sp, #20]
 800bdf2:	920e      	str	r2, [sp, #56]	; 0x38
 800bdf4:	f1cb 0300 	rsb	r3, fp, #0
 800bdf8:	e7e3      	b.n	800bdc2 <_dtoa_r+0x1f2>
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	9208      	str	r2, [sp, #32]
 800bdfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be00:	2a00      	cmp	r2, #0
 800be02:	dc39      	bgt.n	800be78 <_dtoa_r+0x2a8>
 800be04:	f04f 0a01 	mov.w	sl, #1
 800be08:	46d1      	mov	r9, sl
 800be0a:	4652      	mov	r2, sl
 800be0c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800be10:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800be12:	2100      	movs	r1, #0
 800be14:	6079      	str	r1, [r7, #4]
 800be16:	2004      	movs	r0, #4
 800be18:	f100 0c14 	add.w	ip, r0, #20
 800be1c:	4594      	cmp	ip, r2
 800be1e:	6879      	ldr	r1, [r7, #4]
 800be20:	d92f      	bls.n	800be82 <_dtoa_r+0x2b2>
 800be22:	4630      	mov	r0, r6
 800be24:	930c      	str	r3, [sp, #48]	; 0x30
 800be26:	f000 fe85 	bl	800cb34 <_Balloc>
 800be2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be2c:	9000      	str	r0, [sp, #0]
 800be2e:	4602      	mov	r2, r0
 800be30:	2800      	cmp	r0, #0
 800be32:	d149      	bne.n	800bec8 <_dtoa_r+0x2f8>
 800be34:	4b23      	ldr	r3, [pc, #140]	; (800bec4 <_dtoa_r+0x2f4>)
 800be36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800be3a:	e6df      	b.n	800bbfc <_dtoa_r+0x2c>
 800be3c:	2201      	movs	r2, #1
 800be3e:	e7dd      	b.n	800bdfc <_dtoa_r+0x22c>
 800be40:	2200      	movs	r2, #0
 800be42:	9208      	str	r2, [sp, #32]
 800be44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be46:	eb0b 0a02 	add.w	sl, fp, r2
 800be4a:	f10a 0901 	add.w	r9, sl, #1
 800be4e:	464a      	mov	r2, r9
 800be50:	2a01      	cmp	r2, #1
 800be52:	bfb8      	it	lt
 800be54:	2201      	movlt	r2, #1
 800be56:	e7db      	b.n	800be10 <_dtoa_r+0x240>
 800be58:	2201      	movs	r2, #1
 800be5a:	e7f2      	b.n	800be42 <_dtoa_r+0x272>
 800be5c:	2401      	movs	r4, #1
 800be5e:	2200      	movs	r2, #0
 800be60:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800be64:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800be68:	2100      	movs	r1, #0
 800be6a:	46d1      	mov	r9, sl
 800be6c:	2212      	movs	r2, #18
 800be6e:	9109      	str	r1, [sp, #36]	; 0x24
 800be70:	e7ce      	b.n	800be10 <_dtoa_r+0x240>
 800be72:	2201      	movs	r2, #1
 800be74:	9208      	str	r2, [sp, #32]
 800be76:	e7f5      	b.n	800be64 <_dtoa_r+0x294>
 800be78:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800be7c:	46d1      	mov	r9, sl
 800be7e:	4652      	mov	r2, sl
 800be80:	e7c6      	b.n	800be10 <_dtoa_r+0x240>
 800be82:	3101      	adds	r1, #1
 800be84:	6079      	str	r1, [r7, #4]
 800be86:	0040      	lsls	r0, r0, #1
 800be88:	e7c6      	b.n	800be18 <_dtoa_r+0x248>
 800be8a:	bf00      	nop
 800be8c:	f3af 8000 	nop.w
 800be90:	636f4361 	.word	0x636f4361
 800be94:	3fd287a7 	.word	0x3fd287a7
 800be98:	8b60c8b3 	.word	0x8b60c8b3
 800be9c:	3fc68a28 	.word	0x3fc68a28
 800bea0:	509f79fb 	.word	0x509f79fb
 800bea4:	3fd34413 	.word	0x3fd34413
 800bea8:	080115e9 	.word	0x080115e9
 800beac:	08011600 	.word	0x08011600
 800beb0:	7ff00000 	.word	0x7ff00000
 800beb4:	080115e5 	.word	0x080115e5
 800beb8:	080115dc 	.word	0x080115dc
 800bebc:	080115b9 	.word	0x080115b9
 800bec0:	08011758 	.word	0x08011758
 800bec4:	0801165f 	.word	0x0801165f
 800bec8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800beca:	9900      	ldr	r1, [sp, #0]
 800becc:	6011      	str	r1, [r2, #0]
 800bece:	f1b9 0f0e 	cmp.w	r9, #14
 800bed2:	d872      	bhi.n	800bfba <_dtoa_r+0x3ea>
 800bed4:	2c00      	cmp	r4, #0
 800bed6:	d070      	beq.n	800bfba <_dtoa_r+0x3ea>
 800bed8:	f1bb 0f00 	cmp.w	fp, #0
 800bedc:	f340 80a6 	ble.w	800c02c <_dtoa_r+0x45c>
 800bee0:	49ca      	ldr	r1, [pc, #808]	; (800c20c <_dtoa_r+0x63c>)
 800bee2:	f00b 020f 	and.w	r2, fp, #15
 800bee6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800beea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800beee:	ed92 7b00 	vldr	d7, [r2]
 800bef2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800bef6:	f000 808d 	beq.w	800c014 <_dtoa_r+0x444>
 800befa:	4ac5      	ldr	r2, [pc, #788]	; (800c210 <_dtoa_r+0x640>)
 800befc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800bf00:	ed92 6b08 	vldr	d6, [r2, #32]
 800bf04:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800bf08:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bf0c:	f001 010f 	and.w	r1, r1, #15
 800bf10:	2203      	movs	r2, #3
 800bf12:	48bf      	ldr	r0, [pc, #764]	; (800c210 <_dtoa_r+0x640>)
 800bf14:	2900      	cmp	r1, #0
 800bf16:	d17f      	bne.n	800c018 <_dtoa_r+0x448>
 800bf18:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bf1c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bf20:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bf26:	2900      	cmp	r1, #0
 800bf28:	f000 80b2 	beq.w	800c090 <_dtoa_r+0x4c0>
 800bf2c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bf30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bf38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf3c:	f140 80a8 	bpl.w	800c090 <_dtoa_r+0x4c0>
 800bf40:	f1b9 0f00 	cmp.w	r9, #0
 800bf44:	f000 80a4 	beq.w	800c090 <_dtoa_r+0x4c0>
 800bf48:	f1ba 0f00 	cmp.w	sl, #0
 800bf4c:	dd31      	ble.n	800bfb2 <_dtoa_r+0x3e2>
 800bf4e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800bf52:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf56:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf5a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800bf5e:	3201      	adds	r2, #1
 800bf60:	4650      	mov	r0, sl
 800bf62:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bf66:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800bf6a:	ee07 2a90 	vmov	s15, r2
 800bf6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bf72:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bf76:	ed8d 5b02 	vstr	d5, [sp, #8]
 800bf7a:	9c03      	ldr	r4, [sp, #12]
 800bf7c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bf80:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800bf84:	2800      	cmp	r0, #0
 800bf86:	f040 8086 	bne.w	800c096 <_dtoa_r+0x4c6>
 800bf8a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bf8e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bf92:	ec42 1b17 	vmov	d7, r1, r2
 800bf96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf9e:	f300 8272 	bgt.w	800c486 <_dtoa_r+0x8b6>
 800bfa2:	eeb1 7b47 	vneg.f64	d7, d7
 800bfa6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bfaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfae:	f100 8267 	bmi.w	800c480 <_dtoa_r+0x8b0>
 800bfb2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800bfb6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bfba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bfbc:	2a00      	cmp	r2, #0
 800bfbe:	f2c0 8129 	blt.w	800c214 <_dtoa_r+0x644>
 800bfc2:	f1bb 0f0e 	cmp.w	fp, #14
 800bfc6:	f300 8125 	bgt.w	800c214 <_dtoa_r+0x644>
 800bfca:	4b90      	ldr	r3, [pc, #576]	; (800c20c <_dtoa_r+0x63c>)
 800bfcc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bfd0:	ed93 6b00 	vldr	d6, [r3]
 800bfd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	f280 80c3 	bge.w	800c162 <_dtoa_r+0x592>
 800bfdc:	f1b9 0f00 	cmp.w	r9, #0
 800bfe0:	f300 80bf 	bgt.w	800c162 <_dtoa_r+0x592>
 800bfe4:	f040 824c 	bne.w	800c480 <_dtoa_r+0x8b0>
 800bfe8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bfec:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bff0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bff4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bffc:	464c      	mov	r4, r9
 800bffe:	464f      	mov	r7, r9
 800c000:	f280 8222 	bge.w	800c448 <_dtoa_r+0x878>
 800c004:	f8dd 8000 	ldr.w	r8, [sp]
 800c008:	2331      	movs	r3, #49	; 0x31
 800c00a:	f808 3b01 	strb.w	r3, [r8], #1
 800c00e:	f10b 0b01 	add.w	fp, fp, #1
 800c012:	e21e      	b.n	800c452 <_dtoa_r+0x882>
 800c014:	2202      	movs	r2, #2
 800c016:	e77c      	b.n	800bf12 <_dtoa_r+0x342>
 800c018:	07cc      	lsls	r4, r1, #31
 800c01a:	d504      	bpl.n	800c026 <_dtoa_r+0x456>
 800c01c:	ed90 6b00 	vldr	d6, [r0]
 800c020:	3201      	adds	r2, #1
 800c022:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c026:	1049      	asrs	r1, r1, #1
 800c028:	3008      	adds	r0, #8
 800c02a:	e773      	b.n	800bf14 <_dtoa_r+0x344>
 800c02c:	d02e      	beq.n	800c08c <_dtoa_r+0x4bc>
 800c02e:	f1cb 0100 	rsb	r1, fp, #0
 800c032:	4a76      	ldr	r2, [pc, #472]	; (800c20c <_dtoa_r+0x63c>)
 800c034:	f001 000f 	and.w	r0, r1, #15
 800c038:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c03c:	ed92 7b00 	vldr	d7, [r2]
 800c040:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800c044:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c048:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c04c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800c050:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800c054:	486e      	ldr	r0, [pc, #440]	; (800c210 <_dtoa_r+0x640>)
 800c056:	1109      	asrs	r1, r1, #4
 800c058:	2400      	movs	r4, #0
 800c05a:	2202      	movs	r2, #2
 800c05c:	b939      	cbnz	r1, 800c06e <_dtoa_r+0x49e>
 800c05e:	2c00      	cmp	r4, #0
 800c060:	f43f af60 	beq.w	800bf24 <_dtoa_r+0x354>
 800c064:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c06c:	e75a      	b.n	800bf24 <_dtoa_r+0x354>
 800c06e:	07cf      	lsls	r7, r1, #31
 800c070:	d509      	bpl.n	800c086 <_dtoa_r+0x4b6>
 800c072:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800c076:	ed90 7b00 	vldr	d7, [r0]
 800c07a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c07e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c082:	3201      	adds	r2, #1
 800c084:	2401      	movs	r4, #1
 800c086:	1049      	asrs	r1, r1, #1
 800c088:	3008      	adds	r0, #8
 800c08a:	e7e7      	b.n	800c05c <_dtoa_r+0x48c>
 800c08c:	2202      	movs	r2, #2
 800c08e:	e749      	b.n	800bf24 <_dtoa_r+0x354>
 800c090:	465f      	mov	r7, fp
 800c092:	4648      	mov	r0, r9
 800c094:	e765      	b.n	800bf62 <_dtoa_r+0x392>
 800c096:	ec42 1b17 	vmov	d7, r1, r2
 800c09a:	4a5c      	ldr	r2, [pc, #368]	; (800c20c <_dtoa_r+0x63c>)
 800c09c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c0a0:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c0a4:	9a00      	ldr	r2, [sp, #0]
 800c0a6:	1814      	adds	r4, r2, r0
 800c0a8:	9a08      	ldr	r2, [sp, #32]
 800c0aa:	b352      	cbz	r2, 800c102 <_dtoa_r+0x532>
 800c0ac:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c0b0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c0b4:	f8dd 8000 	ldr.w	r8, [sp]
 800c0b8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c0bc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c0c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c0c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c0c8:	ee14 2a90 	vmov	r2, s9
 800c0cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c0d0:	3230      	adds	r2, #48	; 0x30
 800c0d2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c0d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0de:	f808 2b01 	strb.w	r2, [r8], #1
 800c0e2:	d439      	bmi.n	800c158 <_dtoa_r+0x588>
 800c0e4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c0e8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f0:	d472      	bmi.n	800c1d8 <_dtoa_r+0x608>
 800c0f2:	45a0      	cmp	r8, r4
 800c0f4:	f43f af5d 	beq.w	800bfb2 <_dtoa_r+0x3e2>
 800c0f8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c0fc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c100:	e7e0      	b.n	800c0c4 <_dtoa_r+0x4f4>
 800c102:	f8dd 8000 	ldr.w	r8, [sp]
 800c106:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c10a:	4621      	mov	r1, r4
 800c10c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c110:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c114:	ee14 2a90 	vmov	r2, s9
 800c118:	3230      	adds	r2, #48	; 0x30
 800c11a:	f808 2b01 	strb.w	r2, [r8], #1
 800c11e:	45a0      	cmp	r8, r4
 800c120:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c124:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c128:	d118      	bne.n	800c15c <_dtoa_r+0x58c>
 800c12a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c12e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c132:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13a:	dc4d      	bgt.n	800c1d8 <_dtoa_r+0x608>
 800c13c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c140:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c148:	f57f af33 	bpl.w	800bfb2 <_dtoa_r+0x3e2>
 800c14c:	4688      	mov	r8, r1
 800c14e:	3901      	subs	r1, #1
 800c150:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c154:	2b30      	cmp	r3, #48	; 0x30
 800c156:	d0f9      	beq.n	800c14c <_dtoa_r+0x57c>
 800c158:	46bb      	mov	fp, r7
 800c15a:	e02a      	b.n	800c1b2 <_dtoa_r+0x5e2>
 800c15c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c160:	e7d6      	b.n	800c110 <_dtoa_r+0x540>
 800c162:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c166:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c16a:	f8dd 8000 	ldr.w	r8, [sp]
 800c16e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c172:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c176:	ee15 3a10 	vmov	r3, s10
 800c17a:	3330      	adds	r3, #48	; 0x30
 800c17c:	f808 3b01 	strb.w	r3, [r8], #1
 800c180:	9b00      	ldr	r3, [sp, #0]
 800c182:	eba8 0303 	sub.w	r3, r8, r3
 800c186:	4599      	cmp	r9, r3
 800c188:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c18c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c190:	d133      	bne.n	800c1fa <_dtoa_r+0x62a>
 800c192:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c196:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c19e:	dc1a      	bgt.n	800c1d6 <_dtoa_r+0x606>
 800c1a0:	eeb4 7b46 	vcmp.f64	d7, d6
 800c1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a8:	d103      	bne.n	800c1b2 <_dtoa_r+0x5e2>
 800c1aa:	ee15 3a10 	vmov	r3, s10
 800c1ae:	07d9      	lsls	r1, r3, #31
 800c1b0:	d411      	bmi.n	800c1d6 <_dtoa_r+0x606>
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	f000 fcfd 	bl	800cbb4 <_Bfree>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c1be:	f888 3000 	strb.w	r3, [r8]
 800c1c2:	f10b 0301 	add.w	r3, fp, #1
 800c1c6:	6013      	str	r3, [r2, #0]
 800c1c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f43f ad4d 	beq.w	800bc6a <_dtoa_r+0x9a>
 800c1d0:	f8c3 8000 	str.w	r8, [r3]
 800c1d4:	e549      	b.n	800bc6a <_dtoa_r+0x9a>
 800c1d6:	465f      	mov	r7, fp
 800c1d8:	4643      	mov	r3, r8
 800c1da:	4698      	mov	r8, r3
 800c1dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1e0:	2a39      	cmp	r2, #57	; 0x39
 800c1e2:	d106      	bne.n	800c1f2 <_dtoa_r+0x622>
 800c1e4:	9a00      	ldr	r2, [sp, #0]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d1f7      	bne.n	800c1da <_dtoa_r+0x60a>
 800c1ea:	9900      	ldr	r1, [sp, #0]
 800c1ec:	2230      	movs	r2, #48	; 0x30
 800c1ee:	3701      	adds	r7, #1
 800c1f0:	700a      	strb	r2, [r1, #0]
 800c1f2:	781a      	ldrb	r2, [r3, #0]
 800c1f4:	3201      	adds	r2, #1
 800c1f6:	701a      	strb	r2, [r3, #0]
 800c1f8:	e7ae      	b.n	800c158 <_dtoa_r+0x588>
 800c1fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c1fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c206:	d1b2      	bne.n	800c16e <_dtoa_r+0x59e>
 800c208:	e7d3      	b.n	800c1b2 <_dtoa_r+0x5e2>
 800c20a:	bf00      	nop
 800c20c:	08011758 	.word	0x08011758
 800c210:	08011730 	.word	0x08011730
 800c214:	9908      	ldr	r1, [sp, #32]
 800c216:	2900      	cmp	r1, #0
 800c218:	f000 80d1 	beq.w	800c3be <_dtoa_r+0x7ee>
 800c21c:	9907      	ldr	r1, [sp, #28]
 800c21e:	2901      	cmp	r1, #1
 800c220:	f300 80b4 	bgt.w	800c38c <_dtoa_r+0x7bc>
 800c224:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c226:	2900      	cmp	r1, #0
 800c228:	f000 80ac 	beq.w	800c384 <_dtoa_r+0x7b4>
 800c22c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c230:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c234:	461c      	mov	r4, r3
 800c236:	930a      	str	r3, [sp, #40]	; 0x28
 800c238:	9b05      	ldr	r3, [sp, #20]
 800c23a:	4413      	add	r3, r2
 800c23c:	9305      	str	r3, [sp, #20]
 800c23e:	9b06      	ldr	r3, [sp, #24]
 800c240:	2101      	movs	r1, #1
 800c242:	4413      	add	r3, r2
 800c244:	4630      	mov	r0, r6
 800c246:	9306      	str	r3, [sp, #24]
 800c248:	f000 fd70 	bl	800cd2c <__i2b>
 800c24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c24e:	4607      	mov	r7, r0
 800c250:	f1b8 0f00 	cmp.w	r8, #0
 800c254:	dd0d      	ble.n	800c272 <_dtoa_r+0x6a2>
 800c256:	9a06      	ldr	r2, [sp, #24]
 800c258:	2a00      	cmp	r2, #0
 800c25a:	dd0a      	ble.n	800c272 <_dtoa_r+0x6a2>
 800c25c:	4542      	cmp	r2, r8
 800c25e:	9905      	ldr	r1, [sp, #20]
 800c260:	bfa8      	it	ge
 800c262:	4642      	movge	r2, r8
 800c264:	1a89      	subs	r1, r1, r2
 800c266:	9105      	str	r1, [sp, #20]
 800c268:	9906      	ldr	r1, [sp, #24]
 800c26a:	eba8 0802 	sub.w	r8, r8, r2
 800c26e:	1a8a      	subs	r2, r1, r2
 800c270:	9206      	str	r2, [sp, #24]
 800c272:	b303      	cbz	r3, 800c2b6 <_dtoa_r+0x6e6>
 800c274:	9a08      	ldr	r2, [sp, #32]
 800c276:	2a00      	cmp	r2, #0
 800c278:	f000 80a6 	beq.w	800c3c8 <_dtoa_r+0x7f8>
 800c27c:	2c00      	cmp	r4, #0
 800c27e:	dd13      	ble.n	800c2a8 <_dtoa_r+0x6d8>
 800c280:	4639      	mov	r1, r7
 800c282:	4622      	mov	r2, r4
 800c284:	4630      	mov	r0, r6
 800c286:	930c      	str	r3, [sp, #48]	; 0x30
 800c288:	f000 fe0c 	bl	800cea4 <__pow5mult>
 800c28c:	462a      	mov	r2, r5
 800c28e:	4601      	mov	r1, r0
 800c290:	4607      	mov	r7, r0
 800c292:	4630      	mov	r0, r6
 800c294:	f000 fd60 	bl	800cd58 <__multiply>
 800c298:	4629      	mov	r1, r5
 800c29a:	900a      	str	r0, [sp, #40]	; 0x28
 800c29c:	4630      	mov	r0, r6
 800c29e:	f000 fc89 	bl	800cbb4 <_Bfree>
 800c2a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2a6:	4615      	mov	r5, r2
 800c2a8:	1b1a      	subs	r2, r3, r4
 800c2aa:	d004      	beq.n	800c2b6 <_dtoa_r+0x6e6>
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	f000 fdf8 	bl	800cea4 <__pow5mult>
 800c2b4:	4605      	mov	r5, r0
 800c2b6:	2101      	movs	r1, #1
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	f000 fd37 	bl	800cd2c <__i2b>
 800c2be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	f340 8082 	ble.w	800c3cc <_dtoa_r+0x7fc>
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	4601      	mov	r1, r0
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f000 fde9 	bl	800cea4 <__pow5mult>
 800c2d2:	9b07      	ldr	r3, [sp, #28]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	dd7b      	ble.n	800c3d2 <_dtoa_r+0x802>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	930a      	str	r3, [sp, #40]	; 0x28
 800c2de:	6922      	ldr	r2, [r4, #16]
 800c2e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c2e4:	6910      	ldr	r0, [r2, #16]
 800c2e6:	f000 fcd1 	bl	800cc8c <__hi0bits>
 800c2ea:	f1c0 0020 	rsb	r0, r0, #32
 800c2ee:	9b06      	ldr	r3, [sp, #24]
 800c2f0:	4418      	add	r0, r3
 800c2f2:	f010 001f 	ands.w	r0, r0, #31
 800c2f6:	f000 808d 	beq.w	800c414 <_dtoa_r+0x844>
 800c2fa:	f1c0 0220 	rsb	r2, r0, #32
 800c2fe:	2a04      	cmp	r2, #4
 800c300:	f340 8086 	ble.w	800c410 <_dtoa_r+0x840>
 800c304:	f1c0 001c 	rsb	r0, r0, #28
 800c308:	9b05      	ldr	r3, [sp, #20]
 800c30a:	4403      	add	r3, r0
 800c30c:	9305      	str	r3, [sp, #20]
 800c30e:	9b06      	ldr	r3, [sp, #24]
 800c310:	4403      	add	r3, r0
 800c312:	4480      	add	r8, r0
 800c314:	9306      	str	r3, [sp, #24]
 800c316:	9b05      	ldr	r3, [sp, #20]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	dd05      	ble.n	800c328 <_dtoa_r+0x758>
 800c31c:	4629      	mov	r1, r5
 800c31e:	461a      	mov	r2, r3
 800c320:	4630      	mov	r0, r6
 800c322:	f000 fe19 	bl	800cf58 <__lshift>
 800c326:	4605      	mov	r5, r0
 800c328:	9b06      	ldr	r3, [sp, #24]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	dd05      	ble.n	800c33a <_dtoa_r+0x76a>
 800c32e:	4621      	mov	r1, r4
 800c330:	461a      	mov	r2, r3
 800c332:	4630      	mov	r0, r6
 800c334:	f000 fe10 	bl	800cf58 <__lshift>
 800c338:	4604      	mov	r4, r0
 800c33a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d06b      	beq.n	800c418 <_dtoa_r+0x848>
 800c340:	4621      	mov	r1, r4
 800c342:	4628      	mov	r0, r5
 800c344:	f000 fe74 	bl	800d030 <__mcmp>
 800c348:	2800      	cmp	r0, #0
 800c34a:	da65      	bge.n	800c418 <_dtoa_r+0x848>
 800c34c:	2300      	movs	r3, #0
 800c34e:	4629      	mov	r1, r5
 800c350:	220a      	movs	r2, #10
 800c352:	4630      	mov	r0, r6
 800c354:	f000 fc50 	bl	800cbf8 <__multadd>
 800c358:	9b08      	ldr	r3, [sp, #32]
 800c35a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c35e:	4605      	mov	r5, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	f000 8192 	beq.w	800c68a <_dtoa_r+0xaba>
 800c366:	4639      	mov	r1, r7
 800c368:	2300      	movs	r3, #0
 800c36a:	220a      	movs	r2, #10
 800c36c:	4630      	mov	r0, r6
 800c36e:	f000 fc43 	bl	800cbf8 <__multadd>
 800c372:	f1ba 0f00 	cmp.w	sl, #0
 800c376:	4607      	mov	r7, r0
 800c378:	f300 808e 	bgt.w	800c498 <_dtoa_r+0x8c8>
 800c37c:	9b07      	ldr	r3, [sp, #28]
 800c37e:	2b02      	cmp	r3, #2
 800c380:	dc51      	bgt.n	800c426 <_dtoa_r+0x856>
 800c382:	e089      	b.n	800c498 <_dtoa_r+0x8c8>
 800c384:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c386:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c38a:	e751      	b.n	800c230 <_dtoa_r+0x660>
 800c38c:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800c390:	42a3      	cmp	r3, r4
 800c392:	bfbf      	itttt	lt
 800c394:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800c396:	1ae3      	sublt	r3, r4, r3
 800c398:	18d2      	addlt	r2, r2, r3
 800c39a:	4613      	movlt	r3, r2
 800c39c:	bfb7      	itett	lt
 800c39e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c3a0:	1b1c      	subge	r4, r3, r4
 800c3a2:	4623      	movlt	r3, r4
 800c3a4:	2400      	movlt	r4, #0
 800c3a6:	f1b9 0f00 	cmp.w	r9, #0
 800c3aa:	bfb5      	itete	lt
 800c3ac:	9a05      	ldrlt	r2, [sp, #20]
 800c3ae:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800c3b2:	eba2 0809 	sublt.w	r8, r2, r9
 800c3b6:	464a      	movge	r2, r9
 800c3b8:	bfb8      	it	lt
 800c3ba:	2200      	movlt	r2, #0
 800c3bc:	e73b      	b.n	800c236 <_dtoa_r+0x666>
 800c3be:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c3c2:	9f08      	ldr	r7, [sp, #32]
 800c3c4:	461c      	mov	r4, r3
 800c3c6:	e743      	b.n	800c250 <_dtoa_r+0x680>
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	e76f      	b.n	800c2ac <_dtoa_r+0x6dc>
 800c3cc:	9b07      	ldr	r3, [sp, #28]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	dc18      	bgt.n	800c404 <_dtoa_r+0x834>
 800c3d2:	9b02      	ldr	r3, [sp, #8]
 800c3d4:	b9b3      	cbnz	r3, 800c404 <_dtoa_r+0x834>
 800c3d6:	9b03      	ldr	r3, [sp, #12]
 800c3d8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c3dc:	b9a2      	cbnz	r2, 800c408 <_dtoa_r+0x838>
 800c3de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c3e2:	0d12      	lsrs	r2, r2, #20
 800c3e4:	0512      	lsls	r2, r2, #20
 800c3e6:	b18a      	cbz	r2, 800c40c <_dtoa_r+0x83c>
 800c3e8:	9b05      	ldr	r3, [sp, #20]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	9305      	str	r3, [sp, #20]
 800c3ee:	9b06      	ldr	r3, [sp, #24]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	9306      	str	r3, [sp, #24]
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	930a      	str	r3, [sp, #40]	; 0x28
 800c3f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f47f af6f 	bne.w	800c2de <_dtoa_r+0x70e>
 800c400:	2001      	movs	r0, #1
 800c402:	e774      	b.n	800c2ee <_dtoa_r+0x71e>
 800c404:	2300      	movs	r3, #0
 800c406:	e7f6      	b.n	800c3f6 <_dtoa_r+0x826>
 800c408:	9b02      	ldr	r3, [sp, #8]
 800c40a:	e7f4      	b.n	800c3f6 <_dtoa_r+0x826>
 800c40c:	920a      	str	r2, [sp, #40]	; 0x28
 800c40e:	e7f3      	b.n	800c3f8 <_dtoa_r+0x828>
 800c410:	d081      	beq.n	800c316 <_dtoa_r+0x746>
 800c412:	4610      	mov	r0, r2
 800c414:	301c      	adds	r0, #28
 800c416:	e777      	b.n	800c308 <_dtoa_r+0x738>
 800c418:	f1b9 0f00 	cmp.w	r9, #0
 800c41c:	dc37      	bgt.n	800c48e <_dtoa_r+0x8be>
 800c41e:	9b07      	ldr	r3, [sp, #28]
 800c420:	2b02      	cmp	r3, #2
 800c422:	dd34      	ble.n	800c48e <_dtoa_r+0x8be>
 800c424:	46ca      	mov	sl, r9
 800c426:	f1ba 0f00 	cmp.w	sl, #0
 800c42a:	d10d      	bne.n	800c448 <_dtoa_r+0x878>
 800c42c:	4621      	mov	r1, r4
 800c42e:	4653      	mov	r3, sl
 800c430:	2205      	movs	r2, #5
 800c432:	4630      	mov	r0, r6
 800c434:	f000 fbe0 	bl	800cbf8 <__multadd>
 800c438:	4601      	mov	r1, r0
 800c43a:	4604      	mov	r4, r0
 800c43c:	4628      	mov	r0, r5
 800c43e:	f000 fdf7 	bl	800d030 <__mcmp>
 800c442:	2800      	cmp	r0, #0
 800c444:	f73f adde 	bgt.w	800c004 <_dtoa_r+0x434>
 800c448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c44a:	f8dd 8000 	ldr.w	r8, [sp]
 800c44e:	ea6f 0b03 	mvn.w	fp, r3
 800c452:	f04f 0900 	mov.w	r9, #0
 800c456:	4621      	mov	r1, r4
 800c458:	4630      	mov	r0, r6
 800c45a:	f000 fbab 	bl	800cbb4 <_Bfree>
 800c45e:	2f00      	cmp	r7, #0
 800c460:	f43f aea7 	beq.w	800c1b2 <_dtoa_r+0x5e2>
 800c464:	f1b9 0f00 	cmp.w	r9, #0
 800c468:	d005      	beq.n	800c476 <_dtoa_r+0x8a6>
 800c46a:	45b9      	cmp	r9, r7
 800c46c:	d003      	beq.n	800c476 <_dtoa_r+0x8a6>
 800c46e:	4649      	mov	r1, r9
 800c470:	4630      	mov	r0, r6
 800c472:	f000 fb9f 	bl	800cbb4 <_Bfree>
 800c476:	4639      	mov	r1, r7
 800c478:	4630      	mov	r0, r6
 800c47a:	f000 fb9b 	bl	800cbb4 <_Bfree>
 800c47e:	e698      	b.n	800c1b2 <_dtoa_r+0x5e2>
 800c480:	2400      	movs	r4, #0
 800c482:	4627      	mov	r7, r4
 800c484:	e7e0      	b.n	800c448 <_dtoa_r+0x878>
 800c486:	46bb      	mov	fp, r7
 800c488:	4604      	mov	r4, r0
 800c48a:	4607      	mov	r7, r0
 800c48c:	e5ba      	b.n	800c004 <_dtoa_r+0x434>
 800c48e:	9b08      	ldr	r3, [sp, #32]
 800c490:	46ca      	mov	sl, r9
 800c492:	2b00      	cmp	r3, #0
 800c494:	f000 8100 	beq.w	800c698 <_dtoa_r+0xac8>
 800c498:	f1b8 0f00 	cmp.w	r8, #0
 800c49c:	dd05      	ble.n	800c4aa <_dtoa_r+0x8da>
 800c49e:	4639      	mov	r1, r7
 800c4a0:	4642      	mov	r2, r8
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	f000 fd58 	bl	800cf58 <__lshift>
 800c4a8:	4607      	mov	r7, r0
 800c4aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d05d      	beq.n	800c56c <_dtoa_r+0x99c>
 800c4b0:	6879      	ldr	r1, [r7, #4]
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	f000 fb3e 	bl	800cb34 <_Balloc>
 800c4b8:	4680      	mov	r8, r0
 800c4ba:	b928      	cbnz	r0, 800c4c8 <_dtoa_r+0x8f8>
 800c4bc:	4b82      	ldr	r3, [pc, #520]	; (800c6c8 <_dtoa_r+0xaf8>)
 800c4be:	4602      	mov	r2, r0
 800c4c0:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c4c4:	f7ff bb9a 	b.w	800bbfc <_dtoa_r+0x2c>
 800c4c8:	693a      	ldr	r2, [r7, #16]
 800c4ca:	3202      	adds	r2, #2
 800c4cc:	0092      	lsls	r2, r2, #2
 800c4ce:	f107 010c 	add.w	r1, r7, #12
 800c4d2:	300c      	adds	r0, #12
 800c4d4:	f7fe fccc 	bl	800ae70 <memcpy>
 800c4d8:	2201      	movs	r2, #1
 800c4da:	4641      	mov	r1, r8
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f000 fd3b 	bl	800cf58 <__lshift>
 800c4e2:	9b00      	ldr	r3, [sp, #0]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	9305      	str	r3, [sp, #20]
 800c4e8:	9b00      	ldr	r3, [sp, #0]
 800c4ea:	4453      	add	r3, sl
 800c4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ee:	9b02      	ldr	r3, [sp, #8]
 800c4f0:	f003 0301 	and.w	r3, r3, #1
 800c4f4:	46b9      	mov	r9, r7
 800c4f6:	9308      	str	r3, [sp, #32]
 800c4f8:	4607      	mov	r7, r0
 800c4fa:	9b05      	ldr	r3, [sp, #20]
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	3b01      	subs	r3, #1
 800c500:	4628      	mov	r0, r5
 800c502:	9302      	str	r3, [sp, #8]
 800c504:	f7ff fad6 	bl	800bab4 <quorem>
 800c508:	4603      	mov	r3, r0
 800c50a:	3330      	adds	r3, #48	; 0x30
 800c50c:	9006      	str	r0, [sp, #24]
 800c50e:	4649      	mov	r1, r9
 800c510:	4628      	mov	r0, r5
 800c512:	930a      	str	r3, [sp, #40]	; 0x28
 800c514:	f000 fd8c 	bl	800d030 <__mcmp>
 800c518:	463a      	mov	r2, r7
 800c51a:	4682      	mov	sl, r0
 800c51c:	4621      	mov	r1, r4
 800c51e:	4630      	mov	r0, r6
 800c520:	f000 fda2 	bl	800d068 <__mdiff>
 800c524:	68c2      	ldr	r2, [r0, #12]
 800c526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c528:	4680      	mov	r8, r0
 800c52a:	bb0a      	cbnz	r2, 800c570 <_dtoa_r+0x9a0>
 800c52c:	4601      	mov	r1, r0
 800c52e:	4628      	mov	r0, r5
 800c530:	f000 fd7e 	bl	800d030 <__mcmp>
 800c534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c536:	4602      	mov	r2, r0
 800c538:	4641      	mov	r1, r8
 800c53a:	4630      	mov	r0, r6
 800c53c:	920e      	str	r2, [sp, #56]	; 0x38
 800c53e:	930a      	str	r3, [sp, #40]	; 0x28
 800c540:	f000 fb38 	bl	800cbb4 <_Bfree>
 800c544:	9b07      	ldr	r3, [sp, #28]
 800c546:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c548:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c54c:	ea43 0102 	orr.w	r1, r3, r2
 800c550:	9b08      	ldr	r3, [sp, #32]
 800c552:	430b      	orrs	r3, r1
 800c554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c556:	d10d      	bne.n	800c574 <_dtoa_r+0x9a4>
 800c558:	2b39      	cmp	r3, #57	; 0x39
 800c55a:	d029      	beq.n	800c5b0 <_dtoa_r+0x9e0>
 800c55c:	f1ba 0f00 	cmp.w	sl, #0
 800c560:	dd01      	ble.n	800c566 <_dtoa_r+0x996>
 800c562:	9b06      	ldr	r3, [sp, #24]
 800c564:	3331      	adds	r3, #49	; 0x31
 800c566:	9a02      	ldr	r2, [sp, #8]
 800c568:	7013      	strb	r3, [r2, #0]
 800c56a:	e774      	b.n	800c456 <_dtoa_r+0x886>
 800c56c:	4638      	mov	r0, r7
 800c56e:	e7b8      	b.n	800c4e2 <_dtoa_r+0x912>
 800c570:	2201      	movs	r2, #1
 800c572:	e7e1      	b.n	800c538 <_dtoa_r+0x968>
 800c574:	f1ba 0f00 	cmp.w	sl, #0
 800c578:	db06      	blt.n	800c588 <_dtoa_r+0x9b8>
 800c57a:	9907      	ldr	r1, [sp, #28]
 800c57c:	ea41 0a0a 	orr.w	sl, r1, sl
 800c580:	9908      	ldr	r1, [sp, #32]
 800c582:	ea5a 0101 	orrs.w	r1, sl, r1
 800c586:	d120      	bne.n	800c5ca <_dtoa_r+0x9fa>
 800c588:	2a00      	cmp	r2, #0
 800c58a:	ddec      	ble.n	800c566 <_dtoa_r+0x996>
 800c58c:	4629      	mov	r1, r5
 800c58e:	2201      	movs	r2, #1
 800c590:	4630      	mov	r0, r6
 800c592:	9305      	str	r3, [sp, #20]
 800c594:	f000 fce0 	bl	800cf58 <__lshift>
 800c598:	4621      	mov	r1, r4
 800c59a:	4605      	mov	r5, r0
 800c59c:	f000 fd48 	bl	800d030 <__mcmp>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	9b05      	ldr	r3, [sp, #20]
 800c5a4:	dc02      	bgt.n	800c5ac <_dtoa_r+0x9dc>
 800c5a6:	d1de      	bne.n	800c566 <_dtoa_r+0x996>
 800c5a8:	07da      	lsls	r2, r3, #31
 800c5aa:	d5dc      	bpl.n	800c566 <_dtoa_r+0x996>
 800c5ac:	2b39      	cmp	r3, #57	; 0x39
 800c5ae:	d1d8      	bne.n	800c562 <_dtoa_r+0x992>
 800c5b0:	9a02      	ldr	r2, [sp, #8]
 800c5b2:	2339      	movs	r3, #57	; 0x39
 800c5b4:	7013      	strb	r3, [r2, #0]
 800c5b6:	4643      	mov	r3, r8
 800c5b8:	4698      	mov	r8, r3
 800c5ba:	3b01      	subs	r3, #1
 800c5bc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c5c0:	2a39      	cmp	r2, #57	; 0x39
 800c5c2:	d051      	beq.n	800c668 <_dtoa_r+0xa98>
 800c5c4:	3201      	adds	r2, #1
 800c5c6:	701a      	strb	r2, [r3, #0]
 800c5c8:	e745      	b.n	800c456 <_dtoa_r+0x886>
 800c5ca:	2a00      	cmp	r2, #0
 800c5cc:	dd03      	ble.n	800c5d6 <_dtoa_r+0xa06>
 800c5ce:	2b39      	cmp	r3, #57	; 0x39
 800c5d0:	d0ee      	beq.n	800c5b0 <_dtoa_r+0x9e0>
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	e7c7      	b.n	800c566 <_dtoa_r+0x996>
 800c5d6:	9a05      	ldr	r2, [sp, #20]
 800c5d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5da:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c5de:	428a      	cmp	r2, r1
 800c5e0:	d02b      	beq.n	800c63a <_dtoa_r+0xa6a>
 800c5e2:	4629      	mov	r1, r5
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	220a      	movs	r2, #10
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	f000 fb05 	bl	800cbf8 <__multadd>
 800c5ee:	45b9      	cmp	r9, r7
 800c5f0:	4605      	mov	r5, r0
 800c5f2:	f04f 0300 	mov.w	r3, #0
 800c5f6:	f04f 020a 	mov.w	r2, #10
 800c5fa:	4649      	mov	r1, r9
 800c5fc:	4630      	mov	r0, r6
 800c5fe:	d107      	bne.n	800c610 <_dtoa_r+0xa40>
 800c600:	f000 fafa 	bl	800cbf8 <__multadd>
 800c604:	4681      	mov	r9, r0
 800c606:	4607      	mov	r7, r0
 800c608:	9b05      	ldr	r3, [sp, #20]
 800c60a:	3301      	adds	r3, #1
 800c60c:	9305      	str	r3, [sp, #20]
 800c60e:	e774      	b.n	800c4fa <_dtoa_r+0x92a>
 800c610:	f000 faf2 	bl	800cbf8 <__multadd>
 800c614:	4639      	mov	r1, r7
 800c616:	4681      	mov	r9, r0
 800c618:	2300      	movs	r3, #0
 800c61a:	220a      	movs	r2, #10
 800c61c:	4630      	mov	r0, r6
 800c61e:	f000 faeb 	bl	800cbf8 <__multadd>
 800c622:	4607      	mov	r7, r0
 800c624:	e7f0      	b.n	800c608 <_dtoa_r+0xa38>
 800c626:	f1ba 0f00 	cmp.w	sl, #0
 800c62a:	9a00      	ldr	r2, [sp, #0]
 800c62c:	bfcc      	ite	gt
 800c62e:	46d0      	movgt	r8, sl
 800c630:	f04f 0801 	movle.w	r8, #1
 800c634:	4490      	add	r8, r2
 800c636:	f04f 0900 	mov.w	r9, #0
 800c63a:	4629      	mov	r1, r5
 800c63c:	2201      	movs	r2, #1
 800c63e:	4630      	mov	r0, r6
 800c640:	9302      	str	r3, [sp, #8]
 800c642:	f000 fc89 	bl	800cf58 <__lshift>
 800c646:	4621      	mov	r1, r4
 800c648:	4605      	mov	r5, r0
 800c64a:	f000 fcf1 	bl	800d030 <__mcmp>
 800c64e:	2800      	cmp	r0, #0
 800c650:	dcb1      	bgt.n	800c5b6 <_dtoa_r+0x9e6>
 800c652:	d102      	bne.n	800c65a <_dtoa_r+0xa8a>
 800c654:	9b02      	ldr	r3, [sp, #8]
 800c656:	07db      	lsls	r3, r3, #31
 800c658:	d4ad      	bmi.n	800c5b6 <_dtoa_r+0x9e6>
 800c65a:	4643      	mov	r3, r8
 800c65c:	4698      	mov	r8, r3
 800c65e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c662:	2a30      	cmp	r2, #48	; 0x30
 800c664:	d0fa      	beq.n	800c65c <_dtoa_r+0xa8c>
 800c666:	e6f6      	b.n	800c456 <_dtoa_r+0x886>
 800c668:	9a00      	ldr	r2, [sp, #0]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d1a4      	bne.n	800c5b8 <_dtoa_r+0x9e8>
 800c66e:	f10b 0b01 	add.w	fp, fp, #1
 800c672:	2331      	movs	r3, #49	; 0x31
 800c674:	e778      	b.n	800c568 <_dtoa_r+0x998>
 800c676:	4b15      	ldr	r3, [pc, #84]	; (800c6cc <_dtoa_r+0xafc>)
 800c678:	f7ff bb12 	b.w	800bca0 <_dtoa_r+0xd0>
 800c67c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c67e:	2b00      	cmp	r3, #0
 800c680:	f47f aaee 	bne.w	800bc60 <_dtoa_r+0x90>
 800c684:	4b12      	ldr	r3, [pc, #72]	; (800c6d0 <_dtoa_r+0xb00>)
 800c686:	f7ff bb0b 	b.w	800bca0 <_dtoa_r+0xd0>
 800c68a:	f1ba 0f00 	cmp.w	sl, #0
 800c68e:	dc03      	bgt.n	800c698 <_dtoa_r+0xac8>
 800c690:	9b07      	ldr	r3, [sp, #28]
 800c692:	2b02      	cmp	r3, #2
 800c694:	f73f aec7 	bgt.w	800c426 <_dtoa_r+0x856>
 800c698:	f8dd 8000 	ldr.w	r8, [sp]
 800c69c:	4621      	mov	r1, r4
 800c69e:	4628      	mov	r0, r5
 800c6a0:	f7ff fa08 	bl	800bab4 <quorem>
 800c6a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c6a8:	f808 3b01 	strb.w	r3, [r8], #1
 800c6ac:	9a00      	ldr	r2, [sp, #0]
 800c6ae:	eba8 0202 	sub.w	r2, r8, r2
 800c6b2:	4592      	cmp	sl, r2
 800c6b4:	ddb7      	ble.n	800c626 <_dtoa_r+0xa56>
 800c6b6:	4629      	mov	r1, r5
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	220a      	movs	r2, #10
 800c6bc:	4630      	mov	r0, r6
 800c6be:	f000 fa9b 	bl	800cbf8 <__multadd>
 800c6c2:	4605      	mov	r5, r0
 800c6c4:	e7ea      	b.n	800c69c <_dtoa_r+0xacc>
 800c6c6:	bf00      	nop
 800c6c8:	0801165f 	.word	0x0801165f
 800c6cc:	080115b8 	.word	0x080115b8
 800c6d0:	080115dc 	.word	0x080115dc

0800c6d4 <__sflush_r>:
 800c6d4:	898a      	ldrh	r2, [r1, #12]
 800c6d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6da:	4605      	mov	r5, r0
 800c6dc:	0710      	lsls	r0, r2, #28
 800c6de:	460c      	mov	r4, r1
 800c6e0:	d458      	bmi.n	800c794 <__sflush_r+0xc0>
 800c6e2:	684b      	ldr	r3, [r1, #4]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	dc05      	bgt.n	800c6f4 <__sflush_r+0x20>
 800c6e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	dc02      	bgt.n	800c6f4 <__sflush_r+0x20>
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6f6:	2e00      	cmp	r6, #0
 800c6f8:	d0f9      	beq.n	800c6ee <__sflush_r+0x1a>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c700:	682f      	ldr	r7, [r5, #0]
 800c702:	602b      	str	r3, [r5, #0]
 800c704:	d032      	beq.n	800c76c <__sflush_r+0x98>
 800c706:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	075a      	lsls	r2, r3, #29
 800c70c:	d505      	bpl.n	800c71a <__sflush_r+0x46>
 800c70e:	6863      	ldr	r3, [r4, #4]
 800c710:	1ac0      	subs	r0, r0, r3
 800c712:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c714:	b10b      	cbz	r3, 800c71a <__sflush_r+0x46>
 800c716:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c718:	1ac0      	subs	r0, r0, r3
 800c71a:	2300      	movs	r3, #0
 800c71c:	4602      	mov	r2, r0
 800c71e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c720:	6a21      	ldr	r1, [r4, #32]
 800c722:	4628      	mov	r0, r5
 800c724:	47b0      	blx	r6
 800c726:	1c43      	adds	r3, r0, #1
 800c728:	89a3      	ldrh	r3, [r4, #12]
 800c72a:	d106      	bne.n	800c73a <__sflush_r+0x66>
 800c72c:	6829      	ldr	r1, [r5, #0]
 800c72e:	291d      	cmp	r1, #29
 800c730:	d82c      	bhi.n	800c78c <__sflush_r+0xb8>
 800c732:	4a2a      	ldr	r2, [pc, #168]	; (800c7dc <__sflush_r+0x108>)
 800c734:	40ca      	lsrs	r2, r1
 800c736:	07d6      	lsls	r6, r2, #31
 800c738:	d528      	bpl.n	800c78c <__sflush_r+0xb8>
 800c73a:	2200      	movs	r2, #0
 800c73c:	6062      	str	r2, [r4, #4]
 800c73e:	04d9      	lsls	r1, r3, #19
 800c740:	6922      	ldr	r2, [r4, #16]
 800c742:	6022      	str	r2, [r4, #0]
 800c744:	d504      	bpl.n	800c750 <__sflush_r+0x7c>
 800c746:	1c42      	adds	r2, r0, #1
 800c748:	d101      	bne.n	800c74e <__sflush_r+0x7a>
 800c74a:	682b      	ldr	r3, [r5, #0]
 800c74c:	b903      	cbnz	r3, 800c750 <__sflush_r+0x7c>
 800c74e:	6560      	str	r0, [r4, #84]	; 0x54
 800c750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c752:	602f      	str	r7, [r5, #0]
 800c754:	2900      	cmp	r1, #0
 800c756:	d0ca      	beq.n	800c6ee <__sflush_r+0x1a>
 800c758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c75c:	4299      	cmp	r1, r3
 800c75e:	d002      	beq.n	800c766 <__sflush_r+0x92>
 800c760:	4628      	mov	r0, r5
 800c762:	f7fe fbb5 	bl	800aed0 <_free_r>
 800c766:	2000      	movs	r0, #0
 800c768:	6360      	str	r0, [r4, #52]	; 0x34
 800c76a:	e7c1      	b.n	800c6f0 <__sflush_r+0x1c>
 800c76c:	6a21      	ldr	r1, [r4, #32]
 800c76e:	2301      	movs	r3, #1
 800c770:	4628      	mov	r0, r5
 800c772:	47b0      	blx	r6
 800c774:	1c41      	adds	r1, r0, #1
 800c776:	d1c7      	bne.n	800c708 <__sflush_r+0x34>
 800c778:	682b      	ldr	r3, [r5, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d0c4      	beq.n	800c708 <__sflush_r+0x34>
 800c77e:	2b1d      	cmp	r3, #29
 800c780:	d001      	beq.n	800c786 <__sflush_r+0xb2>
 800c782:	2b16      	cmp	r3, #22
 800c784:	d101      	bne.n	800c78a <__sflush_r+0xb6>
 800c786:	602f      	str	r7, [r5, #0]
 800c788:	e7b1      	b.n	800c6ee <__sflush_r+0x1a>
 800c78a:	89a3      	ldrh	r3, [r4, #12]
 800c78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c790:	81a3      	strh	r3, [r4, #12]
 800c792:	e7ad      	b.n	800c6f0 <__sflush_r+0x1c>
 800c794:	690f      	ldr	r7, [r1, #16]
 800c796:	2f00      	cmp	r7, #0
 800c798:	d0a9      	beq.n	800c6ee <__sflush_r+0x1a>
 800c79a:	0793      	lsls	r3, r2, #30
 800c79c:	680e      	ldr	r6, [r1, #0]
 800c79e:	bf08      	it	eq
 800c7a0:	694b      	ldreq	r3, [r1, #20]
 800c7a2:	600f      	str	r7, [r1, #0]
 800c7a4:	bf18      	it	ne
 800c7a6:	2300      	movne	r3, #0
 800c7a8:	eba6 0807 	sub.w	r8, r6, r7
 800c7ac:	608b      	str	r3, [r1, #8]
 800c7ae:	f1b8 0f00 	cmp.w	r8, #0
 800c7b2:	dd9c      	ble.n	800c6ee <__sflush_r+0x1a>
 800c7b4:	6a21      	ldr	r1, [r4, #32]
 800c7b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7b8:	4643      	mov	r3, r8
 800c7ba:	463a      	mov	r2, r7
 800c7bc:	4628      	mov	r0, r5
 800c7be:	47b0      	blx	r6
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	dc06      	bgt.n	800c7d2 <__sflush_r+0xfe>
 800c7c4:	89a3      	ldrh	r3, [r4, #12]
 800c7c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7ca:	81a3      	strh	r3, [r4, #12]
 800c7cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7d0:	e78e      	b.n	800c6f0 <__sflush_r+0x1c>
 800c7d2:	4407      	add	r7, r0
 800c7d4:	eba8 0800 	sub.w	r8, r8, r0
 800c7d8:	e7e9      	b.n	800c7ae <__sflush_r+0xda>
 800c7da:	bf00      	nop
 800c7dc:	20400001 	.word	0x20400001

0800c7e0 <_fflush_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	690b      	ldr	r3, [r1, #16]
 800c7e4:	4605      	mov	r5, r0
 800c7e6:	460c      	mov	r4, r1
 800c7e8:	b913      	cbnz	r3, 800c7f0 <_fflush_r+0x10>
 800c7ea:	2500      	movs	r5, #0
 800c7ec:	4628      	mov	r0, r5
 800c7ee:	bd38      	pop	{r3, r4, r5, pc}
 800c7f0:	b118      	cbz	r0, 800c7fa <_fflush_r+0x1a>
 800c7f2:	6983      	ldr	r3, [r0, #24]
 800c7f4:	b90b      	cbnz	r3, 800c7fa <_fflush_r+0x1a>
 800c7f6:	f000 f887 	bl	800c908 <__sinit>
 800c7fa:	4b14      	ldr	r3, [pc, #80]	; (800c84c <_fflush_r+0x6c>)
 800c7fc:	429c      	cmp	r4, r3
 800c7fe:	d11b      	bne.n	800c838 <_fflush_r+0x58>
 800c800:	686c      	ldr	r4, [r5, #4]
 800c802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d0ef      	beq.n	800c7ea <_fflush_r+0xa>
 800c80a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c80c:	07d0      	lsls	r0, r2, #31
 800c80e:	d404      	bmi.n	800c81a <_fflush_r+0x3a>
 800c810:	0599      	lsls	r1, r3, #22
 800c812:	d402      	bmi.n	800c81a <_fflush_r+0x3a>
 800c814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c816:	f000 f91a 	bl	800ca4e <__retarget_lock_acquire_recursive>
 800c81a:	4628      	mov	r0, r5
 800c81c:	4621      	mov	r1, r4
 800c81e:	f7ff ff59 	bl	800c6d4 <__sflush_r>
 800c822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c824:	07da      	lsls	r2, r3, #31
 800c826:	4605      	mov	r5, r0
 800c828:	d4e0      	bmi.n	800c7ec <_fflush_r+0xc>
 800c82a:	89a3      	ldrh	r3, [r4, #12]
 800c82c:	059b      	lsls	r3, r3, #22
 800c82e:	d4dd      	bmi.n	800c7ec <_fflush_r+0xc>
 800c830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c832:	f000 f90d 	bl	800ca50 <__retarget_lock_release_recursive>
 800c836:	e7d9      	b.n	800c7ec <_fflush_r+0xc>
 800c838:	4b05      	ldr	r3, [pc, #20]	; (800c850 <_fflush_r+0x70>)
 800c83a:	429c      	cmp	r4, r3
 800c83c:	d101      	bne.n	800c842 <_fflush_r+0x62>
 800c83e:	68ac      	ldr	r4, [r5, #8]
 800c840:	e7df      	b.n	800c802 <_fflush_r+0x22>
 800c842:	4b04      	ldr	r3, [pc, #16]	; (800c854 <_fflush_r+0x74>)
 800c844:	429c      	cmp	r4, r3
 800c846:	bf08      	it	eq
 800c848:	68ec      	ldreq	r4, [r5, #12]
 800c84a:	e7da      	b.n	800c802 <_fflush_r+0x22>
 800c84c:	08011690 	.word	0x08011690
 800c850:	080116b0 	.word	0x080116b0
 800c854:	08011670 	.word	0x08011670

0800c858 <std>:
 800c858:	2300      	movs	r3, #0
 800c85a:	b510      	push	{r4, lr}
 800c85c:	4604      	mov	r4, r0
 800c85e:	e9c0 3300 	strd	r3, r3, [r0]
 800c862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c866:	6083      	str	r3, [r0, #8]
 800c868:	8181      	strh	r1, [r0, #12]
 800c86a:	6643      	str	r3, [r0, #100]	; 0x64
 800c86c:	81c2      	strh	r2, [r0, #14]
 800c86e:	6183      	str	r3, [r0, #24]
 800c870:	4619      	mov	r1, r3
 800c872:	2208      	movs	r2, #8
 800c874:	305c      	adds	r0, #92	; 0x5c
 800c876:	f7fe fb23 	bl	800aec0 <memset>
 800c87a:	4b05      	ldr	r3, [pc, #20]	; (800c890 <std+0x38>)
 800c87c:	6263      	str	r3, [r4, #36]	; 0x24
 800c87e:	4b05      	ldr	r3, [pc, #20]	; (800c894 <std+0x3c>)
 800c880:	62a3      	str	r3, [r4, #40]	; 0x28
 800c882:	4b05      	ldr	r3, [pc, #20]	; (800c898 <std+0x40>)
 800c884:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c886:	4b05      	ldr	r3, [pc, #20]	; (800c89c <std+0x44>)
 800c888:	6224      	str	r4, [r4, #32]
 800c88a:	6323      	str	r3, [r4, #48]	; 0x30
 800c88c:	bd10      	pop	{r4, pc}
 800c88e:	bf00      	nop
 800c890:	0800d7b9 	.word	0x0800d7b9
 800c894:	0800d7db 	.word	0x0800d7db
 800c898:	0800d813 	.word	0x0800d813
 800c89c:	0800d837 	.word	0x0800d837

0800c8a0 <_cleanup_r>:
 800c8a0:	4901      	ldr	r1, [pc, #4]	; (800c8a8 <_cleanup_r+0x8>)
 800c8a2:	f000 b8af 	b.w	800ca04 <_fwalk_reent>
 800c8a6:	bf00      	nop
 800c8a8:	0800c7e1 	.word	0x0800c7e1

0800c8ac <__sfmoreglue>:
 800c8ac:	b570      	push	{r4, r5, r6, lr}
 800c8ae:	1e4a      	subs	r2, r1, #1
 800c8b0:	2568      	movs	r5, #104	; 0x68
 800c8b2:	4355      	muls	r5, r2
 800c8b4:	460e      	mov	r6, r1
 800c8b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c8ba:	f7fe fb59 	bl	800af70 <_malloc_r>
 800c8be:	4604      	mov	r4, r0
 800c8c0:	b140      	cbz	r0, 800c8d4 <__sfmoreglue+0x28>
 800c8c2:	2100      	movs	r1, #0
 800c8c4:	e9c0 1600 	strd	r1, r6, [r0]
 800c8c8:	300c      	adds	r0, #12
 800c8ca:	60a0      	str	r0, [r4, #8]
 800c8cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c8d0:	f7fe faf6 	bl	800aec0 <memset>
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	bd70      	pop	{r4, r5, r6, pc}

0800c8d8 <__sfp_lock_acquire>:
 800c8d8:	4801      	ldr	r0, [pc, #4]	; (800c8e0 <__sfp_lock_acquire+0x8>)
 800c8da:	f000 b8b8 	b.w	800ca4e <__retarget_lock_acquire_recursive>
 800c8de:	bf00      	nop
 800c8e0:	2401087c 	.word	0x2401087c

0800c8e4 <__sfp_lock_release>:
 800c8e4:	4801      	ldr	r0, [pc, #4]	; (800c8ec <__sfp_lock_release+0x8>)
 800c8e6:	f000 b8b3 	b.w	800ca50 <__retarget_lock_release_recursive>
 800c8ea:	bf00      	nop
 800c8ec:	2401087c 	.word	0x2401087c

0800c8f0 <__sinit_lock_acquire>:
 800c8f0:	4801      	ldr	r0, [pc, #4]	; (800c8f8 <__sinit_lock_acquire+0x8>)
 800c8f2:	f000 b8ac 	b.w	800ca4e <__retarget_lock_acquire_recursive>
 800c8f6:	bf00      	nop
 800c8f8:	24010877 	.word	0x24010877

0800c8fc <__sinit_lock_release>:
 800c8fc:	4801      	ldr	r0, [pc, #4]	; (800c904 <__sinit_lock_release+0x8>)
 800c8fe:	f000 b8a7 	b.w	800ca50 <__retarget_lock_release_recursive>
 800c902:	bf00      	nop
 800c904:	24010877 	.word	0x24010877

0800c908 <__sinit>:
 800c908:	b510      	push	{r4, lr}
 800c90a:	4604      	mov	r4, r0
 800c90c:	f7ff fff0 	bl	800c8f0 <__sinit_lock_acquire>
 800c910:	69a3      	ldr	r3, [r4, #24]
 800c912:	b11b      	cbz	r3, 800c91c <__sinit+0x14>
 800c914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c918:	f7ff bff0 	b.w	800c8fc <__sinit_lock_release>
 800c91c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c920:	6523      	str	r3, [r4, #80]	; 0x50
 800c922:	4b13      	ldr	r3, [pc, #76]	; (800c970 <__sinit+0x68>)
 800c924:	4a13      	ldr	r2, [pc, #76]	; (800c974 <__sinit+0x6c>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	62a2      	str	r2, [r4, #40]	; 0x28
 800c92a:	42a3      	cmp	r3, r4
 800c92c:	bf04      	itt	eq
 800c92e:	2301      	moveq	r3, #1
 800c930:	61a3      	streq	r3, [r4, #24]
 800c932:	4620      	mov	r0, r4
 800c934:	f000 f820 	bl	800c978 <__sfp>
 800c938:	6060      	str	r0, [r4, #4]
 800c93a:	4620      	mov	r0, r4
 800c93c:	f000 f81c 	bl	800c978 <__sfp>
 800c940:	60a0      	str	r0, [r4, #8]
 800c942:	4620      	mov	r0, r4
 800c944:	f000 f818 	bl	800c978 <__sfp>
 800c948:	2200      	movs	r2, #0
 800c94a:	60e0      	str	r0, [r4, #12]
 800c94c:	2104      	movs	r1, #4
 800c94e:	6860      	ldr	r0, [r4, #4]
 800c950:	f7ff ff82 	bl	800c858 <std>
 800c954:	68a0      	ldr	r0, [r4, #8]
 800c956:	2201      	movs	r2, #1
 800c958:	2109      	movs	r1, #9
 800c95a:	f7ff ff7d 	bl	800c858 <std>
 800c95e:	68e0      	ldr	r0, [r4, #12]
 800c960:	2202      	movs	r2, #2
 800c962:	2112      	movs	r1, #18
 800c964:	f7ff ff78 	bl	800c858 <std>
 800c968:	2301      	movs	r3, #1
 800c96a:	61a3      	str	r3, [r4, #24]
 800c96c:	e7d2      	b.n	800c914 <__sinit+0xc>
 800c96e:	bf00      	nop
 800c970:	080115a4 	.word	0x080115a4
 800c974:	0800c8a1 	.word	0x0800c8a1

0800c978 <__sfp>:
 800c978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97a:	4607      	mov	r7, r0
 800c97c:	f7ff ffac 	bl	800c8d8 <__sfp_lock_acquire>
 800c980:	4b1e      	ldr	r3, [pc, #120]	; (800c9fc <__sfp+0x84>)
 800c982:	681e      	ldr	r6, [r3, #0]
 800c984:	69b3      	ldr	r3, [r6, #24]
 800c986:	b913      	cbnz	r3, 800c98e <__sfp+0x16>
 800c988:	4630      	mov	r0, r6
 800c98a:	f7ff ffbd 	bl	800c908 <__sinit>
 800c98e:	3648      	adds	r6, #72	; 0x48
 800c990:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c994:	3b01      	subs	r3, #1
 800c996:	d503      	bpl.n	800c9a0 <__sfp+0x28>
 800c998:	6833      	ldr	r3, [r6, #0]
 800c99a:	b30b      	cbz	r3, 800c9e0 <__sfp+0x68>
 800c99c:	6836      	ldr	r6, [r6, #0]
 800c99e:	e7f7      	b.n	800c990 <__sfp+0x18>
 800c9a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c9a4:	b9d5      	cbnz	r5, 800c9dc <__sfp+0x64>
 800c9a6:	4b16      	ldr	r3, [pc, #88]	; (800ca00 <__sfp+0x88>)
 800c9a8:	60e3      	str	r3, [r4, #12]
 800c9aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c9ae:	6665      	str	r5, [r4, #100]	; 0x64
 800c9b0:	f000 f84c 	bl	800ca4c <__retarget_lock_init_recursive>
 800c9b4:	f7ff ff96 	bl	800c8e4 <__sfp_lock_release>
 800c9b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c9bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c9c0:	6025      	str	r5, [r4, #0]
 800c9c2:	61a5      	str	r5, [r4, #24]
 800c9c4:	2208      	movs	r2, #8
 800c9c6:	4629      	mov	r1, r5
 800c9c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c9cc:	f7fe fa78 	bl	800aec0 <memset>
 800c9d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c9d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c9d8:	4620      	mov	r0, r4
 800c9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9dc:	3468      	adds	r4, #104	; 0x68
 800c9de:	e7d9      	b.n	800c994 <__sfp+0x1c>
 800c9e0:	2104      	movs	r1, #4
 800c9e2:	4638      	mov	r0, r7
 800c9e4:	f7ff ff62 	bl	800c8ac <__sfmoreglue>
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	6030      	str	r0, [r6, #0]
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	d1d5      	bne.n	800c99c <__sfp+0x24>
 800c9f0:	f7ff ff78 	bl	800c8e4 <__sfp_lock_release>
 800c9f4:	230c      	movs	r3, #12
 800c9f6:	603b      	str	r3, [r7, #0]
 800c9f8:	e7ee      	b.n	800c9d8 <__sfp+0x60>
 800c9fa:	bf00      	nop
 800c9fc:	080115a4 	.word	0x080115a4
 800ca00:	ffff0001 	.word	0xffff0001

0800ca04 <_fwalk_reent>:
 800ca04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca08:	4606      	mov	r6, r0
 800ca0a:	4688      	mov	r8, r1
 800ca0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ca10:	2700      	movs	r7, #0
 800ca12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca16:	f1b9 0901 	subs.w	r9, r9, #1
 800ca1a:	d505      	bpl.n	800ca28 <_fwalk_reent+0x24>
 800ca1c:	6824      	ldr	r4, [r4, #0]
 800ca1e:	2c00      	cmp	r4, #0
 800ca20:	d1f7      	bne.n	800ca12 <_fwalk_reent+0xe>
 800ca22:	4638      	mov	r0, r7
 800ca24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca28:	89ab      	ldrh	r3, [r5, #12]
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d907      	bls.n	800ca3e <_fwalk_reent+0x3a>
 800ca2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca32:	3301      	adds	r3, #1
 800ca34:	d003      	beq.n	800ca3e <_fwalk_reent+0x3a>
 800ca36:	4629      	mov	r1, r5
 800ca38:	4630      	mov	r0, r6
 800ca3a:	47c0      	blx	r8
 800ca3c:	4307      	orrs	r7, r0
 800ca3e:	3568      	adds	r5, #104	; 0x68
 800ca40:	e7e9      	b.n	800ca16 <_fwalk_reent+0x12>
	...

0800ca44 <_localeconv_r>:
 800ca44:	4800      	ldr	r0, [pc, #0]	; (800ca48 <_localeconv_r+0x4>)
 800ca46:	4770      	bx	lr
 800ca48:	24000184 	.word	0x24000184

0800ca4c <__retarget_lock_init_recursive>:
 800ca4c:	4770      	bx	lr

0800ca4e <__retarget_lock_acquire_recursive>:
 800ca4e:	4770      	bx	lr

0800ca50 <__retarget_lock_release_recursive>:
 800ca50:	4770      	bx	lr

0800ca52 <__swhatbuf_r>:
 800ca52:	b570      	push	{r4, r5, r6, lr}
 800ca54:	460e      	mov	r6, r1
 800ca56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca5a:	2900      	cmp	r1, #0
 800ca5c:	b096      	sub	sp, #88	; 0x58
 800ca5e:	4614      	mov	r4, r2
 800ca60:	461d      	mov	r5, r3
 800ca62:	da07      	bge.n	800ca74 <__swhatbuf_r+0x22>
 800ca64:	2300      	movs	r3, #0
 800ca66:	602b      	str	r3, [r5, #0]
 800ca68:	89b3      	ldrh	r3, [r6, #12]
 800ca6a:	061a      	lsls	r2, r3, #24
 800ca6c:	d410      	bmi.n	800ca90 <__swhatbuf_r+0x3e>
 800ca6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca72:	e00e      	b.n	800ca92 <__swhatbuf_r+0x40>
 800ca74:	466a      	mov	r2, sp
 800ca76:	f000 ff35 	bl	800d8e4 <_fstat_r>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	dbf2      	blt.n	800ca64 <__swhatbuf_r+0x12>
 800ca7e:	9a01      	ldr	r2, [sp, #4]
 800ca80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca88:	425a      	negs	r2, r3
 800ca8a:	415a      	adcs	r2, r3
 800ca8c:	602a      	str	r2, [r5, #0]
 800ca8e:	e7ee      	b.n	800ca6e <__swhatbuf_r+0x1c>
 800ca90:	2340      	movs	r3, #64	; 0x40
 800ca92:	2000      	movs	r0, #0
 800ca94:	6023      	str	r3, [r4, #0]
 800ca96:	b016      	add	sp, #88	; 0x58
 800ca98:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ca9c <__smakebuf_r>:
 800ca9c:	898b      	ldrh	r3, [r1, #12]
 800ca9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800caa0:	079d      	lsls	r5, r3, #30
 800caa2:	4606      	mov	r6, r0
 800caa4:	460c      	mov	r4, r1
 800caa6:	d507      	bpl.n	800cab8 <__smakebuf_r+0x1c>
 800caa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800caac:	6023      	str	r3, [r4, #0]
 800caae:	6123      	str	r3, [r4, #16]
 800cab0:	2301      	movs	r3, #1
 800cab2:	6163      	str	r3, [r4, #20]
 800cab4:	b002      	add	sp, #8
 800cab6:	bd70      	pop	{r4, r5, r6, pc}
 800cab8:	ab01      	add	r3, sp, #4
 800caba:	466a      	mov	r2, sp
 800cabc:	f7ff ffc9 	bl	800ca52 <__swhatbuf_r>
 800cac0:	9900      	ldr	r1, [sp, #0]
 800cac2:	4605      	mov	r5, r0
 800cac4:	4630      	mov	r0, r6
 800cac6:	f7fe fa53 	bl	800af70 <_malloc_r>
 800caca:	b948      	cbnz	r0, 800cae0 <__smakebuf_r+0x44>
 800cacc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cad0:	059a      	lsls	r2, r3, #22
 800cad2:	d4ef      	bmi.n	800cab4 <__smakebuf_r+0x18>
 800cad4:	f023 0303 	bic.w	r3, r3, #3
 800cad8:	f043 0302 	orr.w	r3, r3, #2
 800cadc:	81a3      	strh	r3, [r4, #12]
 800cade:	e7e3      	b.n	800caa8 <__smakebuf_r+0xc>
 800cae0:	4b0d      	ldr	r3, [pc, #52]	; (800cb18 <__smakebuf_r+0x7c>)
 800cae2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cae4:	89a3      	ldrh	r3, [r4, #12]
 800cae6:	6020      	str	r0, [r4, #0]
 800cae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caec:	81a3      	strh	r3, [r4, #12]
 800caee:	9b00      	ldr	r3, [sp, #0]
 800caf0:	6163      	str	r3, [r4, #20]
 800caf2:	9b01      	ldr	r3, [sp, #4]
 800caf4:	6120      	str	r0, [r4, #16]
 800caf6:	b15b      	cbz	r3, 800cb10 <__smakebuf_r+0x74>
 800caf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cafc:	4630      	mov	r0, r6
 800cafe:	f000 ff03 	bl	800d908 <_isatty_r>
 800cb02:	b128      	cbz	r0, 800cb10 <__smakebuf_r+0x74>
 800cb04:	89a3      	ldrh	r3, [r4, #12]
 800cb06:	f023 0303 	bic.w	r3, r3, #3
 800cb0a:	f043 0301 	orr.w	r3, r3, #1
 800cb0e:	81a3      	strh	r3, [r4, #12]
 800cb10:	89a0      	ldrh	r0, [r4, #12]
 800cb12:	4305      	orrs	r5, r0
 800cb14:	81a5      	strh	r5, [r4, #12]
 800cb16:	e7cd      	b.n	800cab4 <__smakebuf_r+0x18>
 800cb18:	0800c8a1 	.word	0x0800c8a1

0800cb1c <__malloc_lock>:
 800cb1c:	4801      	ldr	r0, [pc, #4]	; (800cb24 <__malloc_lock+0x8>)
 800cb1e:	f7ff bf96 	b.w	800ca4e <__retarget_lock_acquire_recursive>
 800cb22:	bf00      	nop
 800cb24:	24010878 	.word	0x24010878

0800cb28 <__malloc_unlock>:
 800cb28:	4801      	ldr	r0, [pc, #4]	; (800cb30 <__malloc_unlock+0x8>)
 800cb2a:	f7ff bf91 	b.w	800ca50 <__retarget_lock_release_recursive>
 800cb2e:	bf00      	nop
 800cb30:	24010878 	.word	0x24010878

0800cb34 <_Balloc>:
 800cb34:	b570      	push	{r4, r5, r6, lr}
 800cb36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb38:	4604      	mov	r4, r0
 800cb3a:	460d      	mov	r5, r1
 800cb3c:	b976      	cbnz	r6, 800cb5c <_Balloc+0x28>
 800cb3e:	2010      	movs	r0, #16
 800cb40:	f7fe f98e 	bl	800ae60 <malloc>
 800cb44:	4602      	mov	r2, r0
 800cb46:	6260      	str	r0, [r4, #36]	; 0x24
 800cb48:	b920      	cbnz	r0, 800cb54 <_Balloc+0x20>
 800cb4a:	4b18      	ldr	r3, [pc, #96]	; (800cbac <_Balloc+0x78>)
 800cb4c:	4818      	ldr	r0, [pc, #96]	; (800cbb0 <_Balloc+0x7c>)
 800cb4e:	2166      	movs	r1, #102	; 0x66
 800cb50:	f000 fe88 	bl	800d864 <__assert_func>
 800cb54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb58:	6006      	str	r6, [r0, #0]
 800cb5a:	60c6      	str	r6, [r0, #12]
 800cb5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb5e:	68f3      	ldr	r3, [r6, #12]
 800cb60:	b183      	cbz	r3, 800cb84 <_Balloc+0x50>
 800cb62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb6a:	b9b8      	cbnz	r0, 800cb9c <_Balloc+0x68>
 800cb6c:	2101      	movs	r1, #1
 800cb6e:	fa01 f605 	lsl.w	r6, r1, r5
 800cb72:	1d72      	adds	r2, r6, #5
 800cb74:	0092      	lsls	r2, r2, #2
 800cb76:	4620      	mov	r0, r4
 800cb78:	f000 fb5a 	bl	800d230 <_calloc_r>
 800cb7c:	b160      	cbz	r0, 800cb98 <_Balloc+0x64>
 800cb7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb82:	e00e      	b.n	800cba2 <_Balloc+0x6e>
 800cb84:	2221      	movs	r2, #33	; 0x21
 800cb86:	2104      	movs	r1, #4
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f000 fb51 	bl	800d230 <_calloc_r>
 800cb8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb90:	60f0      	str	r0, [r6, #12]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1e4      	bne.n	800cb62 <_Balloc+0x2e>
 800cb98:	2000      	movs	r0, #0
 800cb9a:	bd70      	pop	{r4, r5, r6, pc}
 800cb9c:	6802      	ldr	r2, [r0, #0]
 800cb9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cba2:	2300      	movs	r3, #0
 800cba4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cba8:	e7f7      	b.n	800cb9a <_Balloc+0x66>
 800cbaa:	bf00      	nop
 800cbac:	080115e9 	.word	0x080115e9
 800cbb0:	080116d0 	.word	0x080116d0

0800cbb4 <_Bfree>:
 800cbb4:	b570      	push	{r4, r5, r6, lr}
 800cbb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cbb8:	4605      	mov	r5, r0
 800cbba:	460c      	mov	r4, r1
 800cbbc:	b976      	cbnz	r6, 800cbdc <_Bfree+0x28>
 800cbbe:	2010      	movs	r0, #16
 800cbc0:	f7fe f94e 	bl	800ae60 <malloc>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	6268      	str	r0, [r5, #36]	; 0x24
 800cbc8:	b920      	cbnz	r0, 800cbd4 <_Bfree+0x20>
 800cbca:	4b09      	ldr	r3, [pc, #36]	; (800cbf0 <_Bfree+0x3c>)
 800cbcc:	4809      	ldr	r0, [pc, #36]	; (800cbf4 <_Bfree+0x40>)
 800cbce:	218a      	movs	r1, #138	; 0x8a
 800cbd0:	f000 fe48 	bl	800d864 <__assert_func>
 800cbd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbd8:	6006      	str	r6, [r0, #0]
 800cbda:	60c6      	str	r6, [r0, #12]
 800cbdc:	b13c      	cbz	r4, 800cbee <_Bfree+0x3a>
 800cbde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cbe0:	6862      	ldr	r2, [r4, #4]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbe8:	6021      	str	r1, [r4, #0]
 800cbea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	080115e9 	.word	0x080115e9
 800cbf4:	080116d0 	.word	0x080116d0

0800cbf8 <__multadd>:
 800cbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbfc:	690e      	ldr	r6, [r1, #16]
 800cbfe:	4607      	mov	r7, r0
 800cc00:	4698      	mov	r8, r3
 800cc02:	460c      	mov	r4, r1
 800cc04:	f101 0014 	add.w	r0, r1, #20
 800cc08:	2300      	movs	r3, #0
 800cc0a:	6805      	ldr	r5, [r0, #0]
 800cc0c:	b2a9      	uxth	r1, r5
 800cc0e:	fb02 8101 	mla	r1, r2, r1, r8
 800cc12:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cc16:	0c2d      	lsrs	r5, r5, #16
 800cc18:	fb02 c505 	mla	r5, r2, r5, ip
 800cc1c:	b289      	uxth	r1, r1
 800cc1e:	3301      	adds	r3, #1
 800cc20:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cc24:	429e      	cmp	r6, r3
 800cc26:	f840 1b04 	str.w	r1, [r0], #4
 800cc2a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cc2e:	dcec      	bgt.n	800cc0a <__multadd+0x12>
 800cc30:	f1b8 0f00 	cmp.w	r8, #0
 800cc34:	d022      	beq.n	800cc7c <__multadd+0x84>
 800cc36:	68a3      	ldr	r3, [r4, #8]
 800cc38:	42b3      	cmp	r3, r6
 800cc3a:	dc19      	bgt.n	800cc70 <__multadd+0x78>
 800cc3c:	6861      	ldr	r1, [r4, #4]
 800cc3e:	4638      	mov	r0, r7
 800cc40:	3101      	adds	r1, #1
 800cc42:	f7ff ff77 	bl	800cb34 <_Balloc>
 800cc46:	4605      	mov	r5, r0
 800cc48:	b928      	cbnz	r0, 800cc56 <__multadd+0x5e>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	4b0d      	ldr	r3, [pc, #52]	; (800cc84 <__multadd+0x8c>)
 800cc4e:	480e      	ldr	r0, [pc, #56]	; (800cc88 <__multadd+0x90>)
 800cc50:	21b5      	movs	r1, #181	; 0xb5
 800cc52:	f000 fe07 	bl	800d864 <__assert_func>
 800cc56:	6922      	ldr	r2, [r4, #16]
 800cc58:	3202      	adds	r2, #2
 800cc5a:	f104 010c 	add.w	r1, r4, #12
 800cc5e:	0092      	lsls	r2, r2, #2
 800cc60:	300c      	adds	r0, #12
 800cc62:	f7fe f905 	bl	800ae70 <memcpy>
 800cc66:	4621      	mov	r1, r4
 800cc68:	4638      	mov	r0, r7
 800cc6a:	f7ff ffa3 	bl	800cbb4 <_Bfree>
 800cc6e:	462c      	mov	r4, r5
 800cc70:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cc74:	3601      	adds	r6, #1
 800cc76:	f8c3 8014 	str.w	r8, [r3, #20]
 800cc7a:	6126      	str	r6, [r4, #16]
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc82:	bf00      	nop
 800cc84:	0801165f 	.word	0x0801165f
 800cc88:	080116d0 	.word	0x080116d0

0800cc8c <__hi0bits>:
 800cc8c:	0c03      	lsrs	r3, r0, #16
 800cc8e:	041b      	lsls	r3, r3, #16
 800cc90:	b9d3      	cbnz	r3, 800ccc8 <__hi0bits+0x3c>
 800cc92:	0400      	lsls	r0, r0, #16
 800cc94:	2310      	movs	r3, #16
 800cc96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc9a:	bf04      	itt	eq
 800cc9c:	0200      	lsleq	r0, r0, #8
 800cc9e:	3308      	addeq	r3, #8
 800cca0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cca4:	bf04      	itt	eq
 800cca6:	0100      	lsleq	r0, r0, #4
 800cca8:	3304      	addeq	r3, #4
 800ccaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ccae:	bf04      	itt	eq
 800ccb0:	0080      	lsleq	r0, r0, #2
 800ccb2:	3302      	addeq	r3, #2
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	db05      	blt.n	800ccc4 <__hi0bits+0x38>
 800ccb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ccbc:	f103 0301 	add.w	r3, r3, #1
 800ccc0:	bf08      	it	eq
 800ccc2:	2320      	moveq	r3, #32
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	4770      	bx	lr
 800ccc8:	2300      	movs	r3, #0
 800ccca:	e7e4      	b.n	800cc96 <__hi0bits+0xa>

0800cccc <__lo0bits>:
 800cccc:	6803      	ldr	r3, [r0, #0]
 800ccce:	f013 0207 	ands.w	r2, r3, #7
 800ccd2:	4601      	mov	r1, r0
 800ccd4:	d00b      	beq.n	800ccee <__lo0bits+0x22>
 800ccd6:	07da      	lsls	r2, r3, #31
 800ccd8:	d424      	bmi.n	800cd24 <__lo0bits+0x58>
 800ccda:	0798      	lsls	r0, r3, #30
 800ccdc:	bf49      	itett	mi
 800ccde:	085b      	lsrmi	r3, r3, #1
 800cce0:	089b      	lsrpl	r3, r3, #2
 800cce2:	2001      	movmi	r0, #1
 800cce4:	600b      	strmi	r3, [r1, #0]
 800cce6:	bf5c      	itt	pl
 800cce8:	600b      	strpl	r3, [r1, #0]
 800ccea:	2002      	movpl	r0, #2
 800ccec:	4770      	bx	lr
 800ccee:	b298      	uxth	r0, r3
 800ccf0:	b9b0      	cbnz	r0, 800cd20 <__lo0bits+0x54>
 800ccf2:	0c1b      	lsrs	r3, r3, #16
 800ccf4:	2010      	movs	r0, #16
 800ccf6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ccfa:	bf04      	itt	eq
 800ccfc:	0a1b      	lsreq	r3, r3, #8
 800ccfe:	3008      	addeq	r0, #8
 800cd00:	071a      	lsls	r2, r3, #28
 800cd02:	bf04      	itt	eq
 800cd04:	091b      	lsreq	r3, r3, #4
 800cd06:	3004      	addeq	r0, #4
 800cd08:	079a      	lsls	r2, r3, #30
 800cd0a:	bf04      	itt	eq
 800cd0c:	089b      	lsreq	r3, r3, #2
 800cd0e:	3002      	addeq	r0, #2
 800cd10:	07da      	lsls	r2, r3, #31
 800cd12:	d403      	bmi.n	800cd1c <__lo0bits+0x50>
 800cd14:	085b      	lsrs	r3, r3, #1
 800cd16:	f100 0001 	add.w	r0, r0, #1
 800cd1a:	d005      	beq.n	800cd28 <__lo0bits+0x5c>
 800cd1c:	600b      	str	r3, [r1, #0]
 800cd1e:	4770      	bx	lr
 800cd20:	4610      	mov	r0, r2
 800cd22:	e7e8      	b.n	800ccf6 <__lo0bits+0x2a>
 800cd24:	2000      	movs	r0, #0
 800cd26:	4770      	bx	lr
 800cd28:	2020      	movs	r0, #32
 800cd2a:	4770      	bx	lr

0800cd2c <__i2b>:
 800cd2c:	b510      	push	{r4, lr}
 800cd2e:	460c      	mov	r4, r1
 800cd30:	2101      	movs	r1, #1
 800cd32:	f7ff feff 	bl	800cb34 <_Balloc>
 800cd36:	4602      	mov	r2, r0
 800cd38:	b928      	cbnz	r0, 800cd46 <__i2b+0x1a>
 800cd3a:	4b05      	ldr	r3, [pc, #20]	; (800cd50 <__i2b+0x24>)
 800cd3c:	4805      	ldr	r0, [pc, #20]	; (800cd54 <__i2b+0x28>)
 800cd3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cd42:	f000 fd8f 	bl	800d864 <__assert_func>
 800cd46:	2301      	movs	r3, #1
 800cd48:	6144      	str	r4, [r0, #20]
 800cd4a:	6103      	str	r3, [r0, #16]
 800cd4c:	bd10      	pop	{r4, pc}
 800cd4e:	bf00      	nop
 800cd50:	0801165f 	.word	0x0801165f
 800cd54:	080116d0 	.word	0x080116d0

0800cd58 <__multiply>:
 800cd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5c:	4614      	mov	r4, r2
 800cd5e:	690a      	ldr	r2, [r1, #16]
 800cd60:	6923      	ldr	r3, [r4, #16]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	bfb8      	it	lt
 800cd66:	460b      	movlt	r3, r1
 800cd68:	460d      	mov	r5, r1
 800cd6a:	bfbc      	itt	lt
 800cd6c:	4625      	movlt	r5, r4
 800cd6e:	461c      	movlt	r4, r3
 800cd70:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cd74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cd78:	68ab      	ldr	r3, [r5, #8]
 800cd7a:	6869      	ldr	r1, [r5, #4]
 800cd7c:	eb0a 0709 	add.w	r7, sl, r9
 800cd80:	42bb      	cmp	r3, r7
 800cd82:	b085      	sub	sp, #20
 800cd84:	bfb8      	it	lt
 800cd86:	3101      	addlt	r1, #1
 800cd88:	f7ff fed4 	bl	800cb34 <_Balloc>
 800cd8c:	b930      	cbnz	r0, 800cd9c <__multiply+0x44>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	4b42      	ldr	r3, [pc, #264]	; (800ce9c <__multiply+0x144>)
 800cd92:	4843      	ldr	r0, [pc, #268]	; (800cea0 <__multiply+0x148>)
 800cd94:	f240 115d 	movw	r1, #349	; 0x15d
 800cd98:	f000 fd64 	bl	800d864 <__assert_func>
 800cd9c:	f100 0614 	add.w	r6, r0, #20
 800cda0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cda4:	4633      	mov	r3, r6
 800cda6:	2200      	movs	r2, #0
 800cda8:	4543      	cmp	r3, r8
 800cdaa:	d31e      	bcc.n	800cdea <__multiply+0x92>
 800cdac:	f105 0c14 	add.w	ip, r5, #20
 800cdb0:	f104 0314 	add.w	r3, r4, #20
 800cdb4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cdb8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cdbc:	9202      	str	r2, [sp, #8]
 800cdbe:	ebac 0205 	sub.w	r2, ip, r5
 800cdc2:	3a15      	subs	r2, #21
 800cdc4:	f022 0203 	bic.w	r2, r2, #3
 800cdc8:	3204      	adds	r2, #4
 800cdca:	f105 0115 	add.w	r1, r5, #21
 800cdce:	458c      	cmp	ip, r1
 800cdd0:	bf38      	it	cc
 800cdd2:	2204      	movcc	r2, #4
 800cdd4:	9201      	str	r2, [sp, #4]
 800cdd6:	9a02      	ldr	r2, [sp, #8]
 800cdd8:	9303      	str	r3, [sp, #12]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d808      	bhi.n	800cdf0 <__multiply+0x98>
 800cdde:	2f00      	cmp	r7, #0
 800cde0:	dc55      	bgt.n	800ce8e <__multiply+0x136>
 800cde2:	6107      	str	r7, [r0, #16]
 800cde4:	b005      	add	sp, #20
 800cde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdea:	f843 2b04 	str.w	r2, [r3], #4
 800cdee:	e7db      	b.n	800cda8 <__multiply+0x50>
 800cdf0:	f8b3 a000 	ldrh.w	sl, [r3]
 800cdf4:	f1ba 0f00 	cmp.w	sl, #0
 800cdf8:	d020      	beq.n	800ce3c <__multiply+0xe4>
 800cdfa:	f105 0e14 	add.w	lr, r5, #20
 800cdfe:	46b1      	mov	r9, r6
 800ce00:	2200      	movs	r2, #0
 800ce02:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ce06:	f8d9 b000 	ldr.w	fp, [r9]
 800ce0a:	b2a1      	uxth	r1, r4
 800ce0c:	fa1f fb8b 	uxth.w	fp, fp
 800ce10:	fb0a b101 	mla	r1, sl, r1, fp
 800ce14:	4411      	add	r1, r2
 800ce16:	f8d9 2000 	ldr.w	r2, [r9]
 800ce1a:	0c24      	lsrs	r4, r4, #16
 800ce1c:	0c12      	lsrs	r2, r2, #16
 800ce1e:	fb0a 2404 	mla	r4, sl, r4, r2
 800ce22:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ce26:	b289      	uxth	r1, r1
 800ce28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ce2c:	45f4      	cmp	ip, lr
 800ce2e:	f849 1b04 	str.w	r1, [r9], #4
 800ce32:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ce36:	d8e4      	bhi.n	800ce02 <__multiply+0xaa>
 800ce38:	9901      	ldr	r1, [sp, #4]
 800ce3a:	5072      	str	r2, [r6, r1]
 800ce3c:	9a03      	ldr	r2, [sp, #12]
 800ce3e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ce42:	3304      	adds	r3, #4
 800ce44:	f1b9 0f00 	cmp.w	r9, #0
 800ce48:	d01f      	beq.n	800ce8a <__multiply+0x132>
 800ce4a:	6834      	ldr	r4, [r6, #0]
 800ce4c:	f105 0114 	add.w	r1, r5, #20
 800ce50:	46b6      	mov	lr, r6
 800ce52:	f04f 0a00 	mov.w	sl, #0
 800ce56:	880a      	ldrh	r2, [r1, #0]
 800ce58:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ce5c:	fb09 b202 	mla	r2, r9, r2, fp
 800ce60:	4492      	add	sl, r2
 800ce62:	b2a4      	uxth	r4, r4
 800ce64:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ce68:	f84e 4b04 	str.w	r4, [lr], #4
 800ce6c:	f851 4b04 	ldr.w	r4, [r1], #4
 800ce70:	f8be 2000 	ldrh.w	r2, [lr]
 800ce74:	0c24      	lsrs	r4, r4, #16
 800ce76:	fb09 2404 	mla	r4, r9, r4, r2
 800ce7a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ce7e:	458c      	cmp	ip, r1
 800ce80:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ce84:	d8e7      	bhi.n	800ce56 <__multiply+0xfe>
 800ce86:	9a01      	ldr	r2, [sp, #4]
 800ce88:	50b4      	str	r4, [r6, r2]
 800ce8a:	3604      	adds	r6, #4
 800ce8c:	e7a3      	b.n	800cdd6 <__multiply+0x7e>
 800ce8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d1a5      	bne.n	800cde2 <__multiply+0x8a>
 800ce96:	3f01      	subs	r7, #1
 800ce98:	e7a1      	b.n	800cdde <__multiply+0x86>
 800ce9a:	bf00      	nop
 800ce9c:	0801165f 	.word	0x0801165f
 800cea0:	080116d0 	.word	0x080116d0

0800cea4 <__pow5mult>:
 800cea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cea8:	4615      	mov	r5, r2
 800ceaa:	f012 0203 	ands.w	r2, r2, #3
 800ceae:	4606      	mov	r6, r0
 800ceb0:	460f      	mov	r7, r1
 800ceb2:	d007      	beq.n	800cec4 <__pow5mult+0x20>
 800ceb4:	4c25      	ldr	r4, [pc, #148]	; (800cf4c <__pow5mult+0xa8>)
 800ceb6:	3a01      	subs	r2, #1
 800ceb8:	2300      	movs	r3, #0
 800ceba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cebe:	f7ff fe9b 	bl	800cbf8 <__multadd>
 800cec2:	4607      	mov	r7, r0
 800cec4:	10ad      	asrs	r5, r5, #2
 800cec6:	d03d      	beq.n	800cf44 <__pow5mult+0xa0>
 800cec8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ceca:	b97c      	cbnz	r4, 800ceec <__pow5mult+0x48>
 800cecc:	2010      	movs	r0, #16
 800cece:	f7fd ffc7 	bl	800ae60 <malloc>
 800ced2:	4602      	mov	r2, r0
 800ced4:	6270      	str	r0, [r6, #36]	; 0x24
 800ced6:	b928      	cbnz	r0, 800cee4 <__pow5mult+0x40>
 800ced8:	4b1d      	ldr	r3, [pc, #116]	; (800cf50 <__pow5mult+0xac>)
 800ceda:	481e      	ldr	r0, [pc, #120]	; (800cf54 <__pow5mult+0xb0>)
 800cedc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cee0:	f000 fcc0 	bl	800d864 <__assert_func>
 800cee4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cee8:	6004      	str	r4, [r0, #0]
 800ceea:	60c4      	str	r4, [r0, #12]
 800ceec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cef0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cef4:	b94c      	cbnz	r4, 800cf0a <__pow5mult+0x66>
 800cef6:	f240 2171 	movw	r1, #625	; 0x271
 800cefa:	4630      	mov	r0, r6
 800cefc:	f7ff ff16 	bl	800cd2c <__i2b>
 800cf00:	2300      	movs	r3, #0
 800cf02:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf06:	4604      	mov	r4, r0
 800cf08:	6003      	str	r3, [r0, #0]
 800cf0a:	f04f 0900 	mov.w	r9, #0
 800cf0e:	07eb      	lsls	r3, r5, #31
 800cf10:	d50a      	bpl.n	800cf28 <__pow5mult+0x84>
 800cf12:	4639      	mov	r1, r7
 800cf14:	4622      	mov	r2, r4
 800cf16:	4630      	mov	r0, r6
 800cf18:	f7ff ff1e 	bl	800cd58 <__multiply>
 800cf1c:	4639      	mov	r1, r7
 800cf1e:	4680      	mov	r8, r0
 800cf20:	4630      	mov	r0, r6
 800cf22:	f7ff fe47 	bl	800cbb4 <_Bfree>
 800cf26:	4647      	mov	r7, r8
 800cf28:	106d      	asrs	r5, r5, #1
 800cf2a:	d00b      	beq.n	800cf44 <__pow5mult+0xa0>
 800cf2c:	6820      	ldr	r0, [r4, #0]
 800cf2e:	b938      	cbnz	r0, 800cf40 <__pow5mult+0x9c>
 800cf30:	4622      	mov	r2, r4
 800cf32:	4621      	mov	r1, r4
 800cf34:	4630      	mov	r0, r6
 800cf36:	f7ff ff0f 	bl	800cd58 <__multiply>
 800cf3a:	6020      	str	r0, [r4, #0]
 800cf3c:	f8c0 9000 	str.w	r9, [r0]
 800cf40:	4604      	mov	r4, r0
 800cf42:	e7e4      	b.n	800cf0e <__pow5mult+0x6a>
 800cf44:	4638      	mov	r0, r7
 800cf46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf4a:	bf00      	nop
 800cf4c:	08011820 	.word	0x08011820
 800cf50:	080115e9 	.word	0x080115e9
 800cf54:	080116d0 	.word	0x080116d0

0800cf58 <__lshift>:
 800cf58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf5c:	460c      	mov	r4, r1
 800cf5e:	6849      	ldr	r1, [r1, #4]
 800cf60:	6923      	ldr	r3, [r4, #16]
 800cf62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf66:	68a3      	ldr	r3, [r4, #8]
 800cf68:	4607      	mov	r7, r0
 800cf6a:	4691      	mov	r9, r2
 800cf6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf70:	f108 0601 	add.w	r6, r8, #1
 800cf74:	42b3      	cmp	r3, r6
 800cf76:	db0b      	blt.n	800cf90 <__lshift+0x38>
 800cf78:	4638      	mov	r0, r7
 800cf7a:	f7ff fddb 	bl	800cb34 <_Balloc>
 800cf7e:	4605      	mov	r5, r0
 800cf80:	b948      	cbnz	r0, 800cf96 <__lshift+0x3e>
 800cf82:	4602      	mov	r2, r0
 800cf84:	4b28      	ldr	r3, [pc, #160]	; (800d028 <__lshift+0xd0>)
 800cf86:	4829      	ldr	r0, [pc, #164]	; (800d02c <__lshift+0xd4>)
 800cf88:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cf8c:	f000 fc6a 	bl	800d864 <__assert_func>
 800cf90:	3101      	adds	r1, #1
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	e7ee      	b.n	800cf74 <__lshift+0x1c>
 800cf96:	2300      	movs	r3, #0
 800cf98:	f100 0114 	add.w	r1, r0, #20
 800cf9c:	f100 0210 	add.w	r2, r0, #16
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	4553      	cmp	r3, sl
 800cfa4:	db33      	blt.n	800d00e <__lshift+0xb6>
 800cfa6:	6920      	ldr	r0, [r4, #16]
 800cfa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfac:	f104 0314 	add.w	r3, r4, #20
 800cfb0:	f019 091f 	ands.w	r9, r9, #31
 800cfb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cfb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cfbc:	d02b      	beq.n	800d016 <__lshift+0xbe>
 800cfbe:	f1c9 0e20 	rsb	lr, r9, #32
 800cfc2:	468a      	mov	sl, r1
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	6818      	ldr	r0, [r3, #0]
 800cfc8:	fa00 f009 	lsl.w	r0, r0, r9
 800cfcc:	4302      	orrs	r2, r0
 800cfce:	f84a 2b04 	str.w	r2, [sl], #4
 800cfd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfd6:	459c      	cmp	ip, r3
 800cfd8:	fa22 f20e 	lsr.w	r2, r2, lr
 800cfdc:	d8f3      	bhi.n	800cfc6 <__lshift+0x6e>
 800cfde:	ebac 0304 	sub.w	r3, ip, r4
 800cfe2:	3b15      	subs	r3, #21
 800cfe4:	f023 0303 	bic.w	r3, r3, #3
 800cfe8:	3304      	adds	r3, #4
 800cfea:	f104 0015 	add.w	r0, r4, #21
 800cfee:	4584      	cmp	ip, r0
 800cff0:	bf38      	it	cc
 800cff2:	2304      	movcc	r3, #4
 800cff4:	50ca      	str	r2, [r1, r3]
 800cff6:	b10a      	cbz	r2, 800cffc <__lshift+0xa4>
 800cff8:	f108 0602 	add.w	r6, r8, #2
 800cffc:	3e01      	subs	r6, #1
 800cffe:	4638      	mov	r0, r7
 800d000:	612e      	str	r6, [r5, #16]
 800d002:	4621      	mov	r1, r4
 800d004:	f7ff fdd6 	bl	800cbb4 <_Bfree>
 800d008:	4628      	mov	r0, r5
 800d00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d00e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d012:	3301      	adds	r3, #1
 800d014:	e7c5      	b.n	800cfa2 <__lshift+0x4a>
 800d016:	3904      	subs	r1, #4
 800d018:	f853 2b04 	ldr.w	r2, [r3], #4
 800d01c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d020:	459c      	cmp	ip, r3
 800d022:	d8f9      	bhi.n	800d018 <__lshift+0xc0>
 800d024:	e7ea      	b.n	800cffc <__lshift+0xa4>
 800d026:	bf00      	nop
 800d028:	0801165f 	.word	0x0801165f
 800d02c:	080116d0 	.word	0x080116d0

0800d030 <__mcmp>:
 800d030:	b530      	push	{r4, r5, lr}
 800d032:	6902      	ldr	r2, [r0, #16]
 800d034:	690c      	ldr	r4, [r1, #16]
 800d036:	1b12      	subs	r2, r2, r4
 800d038:	d10e      	bne.n	800d058 <__mcmp+0x28>
 800d03a:	f100 0314 	add.w	r3, r0, #20
 800d03e:	3114      	adds	r1, #20
 800d040:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d044:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d048:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d04c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d050:	42a5      	cmp	r5, r4
 800d052:	d003      	beq.n	800d05c <__mcmp+0x2c>
 800d054:	d305      	bcc.n	800d062 <__mcmp+0x32>
 800d056:	2201      	movs	r2, #1
 800d058:	4610      	mov	r0, r2
 800d05a:	bd30      	pop	{r4, r5, pc}
 800d05c:	4283      	cmp	r3, r0
 800d05e:	d3f3      	bcc.n	800d048 <__mcmp+0x18>
 800d060:	e7fa      	b.n	800d058 <__mcmp+0x28>
 800d062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d066:	e7f7      	b.n	800d058 <__mcmp+0x28>

0800d068 <__mdiff>:
 800d068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06c:	460c      	mov	r4, r1
 800d06e:	4606      	mov	r6, r0
 800d070:	4611      	mov	r1, r2
 800d072:	4620      	mov	r0, r4
 800d074:	4617      	mov	r7, r2
 800d076:	f7ff ffdb 	bl	800d030 <__mcmp>
 800d07a:	1e05      	subs	r5, r0, #0
 800d07c:	d110      	bne.n	800d0a0 <__mdiff+0x38>
 800d07e:	4629      	mov	r1, r5
 800d080:	4630      	mov	r0, r6
 800d082:	f7ff fd57 	bl	800cb34 <_Balloc>
 800d086:	b930      	cbnz	r0, 800d096 <__mdiff+0x2e>
 800d088:	4b39      	ldr	r3, [pc, #228]	; (800d170 <__mdiff+0x108>)
 800d08a:	4602      	mov	r2, r0
 800d08c:	f240 2132 	movw	r1, #562	; 0x232
 800d090:	4838      	ldr	r0, [pc, #224]	; (800d174 <__mdiff+0x10c>)
 800d092:	f000 fbe7 	bl	800d864 <__assert_func>
 800d096:	2301      	movs	r3, #1
 800d098:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d09c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a0:	bfa4      	itt	ge
 800d0a2:	463b      	movge	r3, r7
 800d0a4:	4627      	movge	r7, r4
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	6879      	ldr	r1, [r7, #4]
 800d0aa:	bfa6      	itte	ge
 800d0ac:	461c      	movge	r4, r3
 800d0ae:	2500      	movge	r5, #0
 800d0b0:	2501      	movlt	r5, #1
 800d0b2:	f7ff fd3f 	bl	800cb34 <_Balloc>
 800d0b6:	b920      	cbnz	r0, 800d0c2 <__mdiff+0x5a>
 800d0b8:	4b2d      	ldr	r3, [pc, #180]	; (800d170 <__mdiff+0x108>)
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d0c0:	e7e6      	b.n	800d090 <__mdiff+0x28>
 800d0c2:	693e      	ldr	r6, [r7, #16]
 800d0c4:	60c5      	str	r5, [r0, #12]
 800d0c6:	6925      	ldr	r5, [r4, #16]
 800d0c8:	f107 0114 	add.w	r1, r7, #20
 800d0cc:	f104 0914 	add.w	r9, r4, #20
 800d0d0:	f100 0e14 	add.w	lr, r0, #20
 800d0d4:	f107 0210 	add.w	r2, r7, #16
 800d0d8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d0dc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d0e0:	46f2      	mov	sl, lr
 800d0e2:	2700      	movs	r7, #0
 800d0e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d0e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d0ec:	fa1f f883 	uxth.w	r8, r3
 800d0f0:	fa17 f78b 	uxtah	r7, r7, fp
 800d0f4:	0c1b      	lsrs	r3, r3, #16
 800d0f6:	eba7 0808 	sub.w	r8, r7, r8
 800d0fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d102:	fa1f f888 	uxth.w	r8, r8
 800d106:	141f      	asrs	r7, r3, #16
 800d108:	454d      	cmp	r5, r9
 800d10a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d10e:	f84a 3b04 	str.w	r3, [sl], #4
 800d112:	d8e7      	bhi.n	800d0e4 <__mdiff+0x7c>
 800d114:	1b2b      	subs	r3, r5, r4
 800d116:	3b15      	subs	r3, #21
 800d118:	f023 0303 	bic.w	r3, r3, #3
 800d11c:	3304      	adds	r3, #4
 800d11e:	3415      	adds	r4, #21
 800d120:	42a5      	cmp	r5, r4
 800d122:	bf38      	it	cc
 800d124:	2304      	movcc	r3, #4
 800d126:	4419      	add	r1, r3
 800d128:	4473      	add	r3, lr
 800d12a:	469e      	mov	lr, r3
 800d12c:	460d      	mov	r5, r1
 800d12e:	4565      	cmp	r5, ip
 800d130:	d30e      	bcc.n	800d150 <__mdiff+0xe8>
 800d132:	f10c 0203 	add.w	r2, ip, #3
 800d136:	1a52      	subs	r2, r2, r1
 800d138:	f022 0203 	bic.w	r2, r2, #3
 800d13c:	3903      	subs	r1, #3
 800d13e:	458c      	cmp	ip, r1
 800d140:	bf38      	it	cc
 800d142:	2200      	movcc	r2, #0
 800d144:	441a      	add	r2, r3
 800d146:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d14a:	b17b      	cbz	r3, 800d16c <__mdiff+0x104>
 800d14c:	6106      	str	r6, [r0, #16]
 800d14e:	e7a5      	b.n	800d09c <__mdiff+0x34>
 800d150:	f855 8b04 	ldr.w	r8, [r5], #4
 800d154:	fa17 f488 	uxtah	r4, r7, r8
 800d158:	1422      	asrs	r2, r4, #16
 800d15a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d15e:	b2a4      	uxth	r4, r4
 800d160:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d164:	f84e 4b04 	str.w	r4, [lr], #4
 800d168:	1417      	asrs	r7, r2, #16
 800d16a:	e7e0      	b.n	800d12e <__mdiff+0xc6>
 800d16c:	3e01      	subs	r6, #1
 800d16e:	e7ea      	b.n	800d146 <__mdiff+0xde>
 800d170:	0801165f 	.word	0x0801165f
 800d174:	080116d0 	.word	0x080116d0

0800d178 <__d2b>:
 800d178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d17c:	4689      	mov	r9, r1
 800d17e:	2101      	movs	r1, #1
 800d180:	ec57 6b10 	vmov	r6, r7, d0
 800d184:	4690      	mov	r8, r2
 800d186:	f7ff fcd5 	bl	800cb34 <_Balloc>
 800d18a:	4604      	mov	r4, r0
 800d18c:	b930      	cbnz	r0, 800d19c <__d2b+0x24>
 800d18e:	4602      	mov	r2, r0
 800d190:	4b25      	ldr	r3, [pc, #148]	; (800d228 <__d2b+0xb0>)
 800d192:	4826      	ldr	r0, [pc, #152]	; (800d22c <__d2b+0xb4>)
 800d194:	f240 310a 	movw	r1, #778	; 0x30a
 800d198:	f000 fb64 	bl	800d864 <__assert_func>
 800d19c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d1a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d1a4:	bb35      	cbnz	r5, 800d1f4 <__d2b+0x7c>
 800d1a6:	2e00      	cmp	r6, #0
 800d1a8:	9301      	str	r3, [sp, #4]
 800d1aa:	d028      	beq.n	800d1fe <__d2b+0x86>
 800d1ac:	4668      	mov	r0, sp
 800d1ae:	9600      	str	r6, [sp, #0]
 800d1b0:	f7ff fd8c 	bl	800cccc <__lo0bits>
 800d1b4:	9900      	ldr	r1, [sp, #0]
 800d1b6:	b300      	cbz	r0, 800d1fa <__d2b+0x82>
 800d1b8:	9a01      	ldr	r2, [sp, #4]
 800d1ba:	f1c0 0320 	rsb	r3, r0, #32
 800d1be:	fa02 f303 	lsl.w	r3, r2, r3
 800d1c2:	430b      	orrs	r3, r1
 800d1c4:	40c2      	lsrs	r2, r0
 800d1c6:	6163      	str	r3, [r4, #20]
 800d1c8:	9201      	str	r2, [sp, #4]
 800d1ca:	9b01      	ldr	r3, [sp, #4]
 800d1cc:	61a3      	str	r3, [r4, #24]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	bf14      	ite	ne
 800d1d2:	2202      	movne	r2, #2
 800d1d4:	2201      	moveq	r2, #1
 800d1d6:	6122      	str	r2, [r4, #16]
 800d1d8:	b1d5      	cbz	r5, 800d210 <__d2b+0x98>
 800d1da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d1de:	4405      	add	r5, r0
 800d1e0:	f8c9 5000 	str.w	r5, [r9]
 800d1e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d1e8:	f8c8 0000 	str.w	r0, [r8]
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	b003      	add	sp, #12
 800d1f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1f8:	e7d5      	b.n	800d1a6 <__d2b+0x2e>
 800d1fa:	6161      	str	r1, [r4, #20]
 800d1fc:	e7e5      	b.n	800d1ca <__d2b+0x52>
 800d1fe:	a801      	add	r0, sp, #4
 800d200:	f7ff fd64 	bl	800cccc <__lo0bits>
 800d204:	9b01      	ldr	r3, [sp, #4]
 800d206:	6163      	str	r3, [r4, #20]
 800d208:	2201      	movs	r2, #1
 800d20a:	6122      	str	r2, [r4, #16]
 800d20c:	3020      	adds	r0, #32
 800d20e:	e7e3      	b.n	800d1d8 <__d2b+0x60>
 800d210:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d214:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d218:	f8c9 0000 	str.w	r0, [r9]
 800d21c:	6918      	ldr	r0, [r3, #16]
 800d21e:	f7ff fd35 	bl	800cc8c <__hi0bits>
 800d222:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d226:	e7df      	b.n	800d1e8 <__d2b+0x70>
 800d228:	0801165f 	.word	0x0801165f
 800d22c:	080116d0 	.word	0x080116d0

0800d230 <_calloc_r>:
 800d230:	b513      	push	{r0, r1, r4, lr}
 800d232:	434a      	muls	r2, r1
 800d234:	4611      	mov	r1, r2
 800d236:	9201      	str	r2, [sp, #4]
 800d238:	f7fd fe9a 	bl	800af70 <_malloc_r>
 800d23c:	4604      	mov	r4, r0
 800d23e:	b118      	cbz	r0, 800d248 <_calloc_r+0x18>
 800d240:	9a01      	ldr	r2, [sp, #4]
 800d242:	2100      	movs	r1, #0
 800d244:	f7fd fe3c 	bl	800aec0 <memset>
 800d248:	4620      	mov	r0, r4
 800d24a:	b002      	add	sp, #8
 800d24c:	bd10      	pop	{r4, pc}

0800d24e <__ssputs_r>:
 800d24e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d252:	688e      	ldr	r6, [r1, #8]
 800d254:	429e      	cmp	r6, r3
 800d256:	4682      	mov	sl, r0
 800d258:	460c      	mov	r4, r1
 800d25a:	4690      	mov	r8, r2
 800d25c:	461f      	mov	r7, r3
 800d25e:	d838      	bhi.n	800d2d2 <__ssputs_r+0x84>
 800d260:	898a      	ldrh	r2, [r1, #12]
 800d262:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d266:	d032      	beq.n	800d2ce <__ssputs_r+0x80>
 800d268:	6825      	ldr	r5, [r4, #0]
 800d26a:	6909      	ldr	r1, [r1, #16]
 800d26c:	eba5 0901 	sub.w	r9, r5, r1
 800d270:	6965      	ldr	r5, [r4, #20]
 800d272:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d276:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d27a:	3301      	adds	r3, #1
 800d27c:	444b      	add	r3, r9
 800d27e:	106d      	asrs	r5, r5, #1
 800d280:	429d      	cmp	r5, r3
 800d282:	bf38      	it	cc
 800d284:	461d      	movcc	r5, r3
 800d286:	0553      	lsls	r3, r2, #21
 800d288:	d531      	bpl.n	800d2ee <__ssputs_r+0xa0>
 800d28a:	4629      	mov	r1, r5
 800d28c:	f7fd fe70 	bl	800af70 <_malloc_r>
 800d290:	4606      	mov	r6, r0
 800d292:	b950      	cbnz	r0, 800d2aa <__ssputs_r+0x5c>
 800d294:	230c      	movs	r3, #12
 800d296:	f8ca 3000 	str.w	r3, [sl]
 800d29a:	89a3      	ldrh	r3, [r4, #12]
 800d29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2a0:	81a3      	strh	r3, [r4, #12]
 800d2a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2aa:	6921      	ldr	r1, [r4, #16]
 800d2ac:	464a      	mov	r2, r9
 800d2ae:	f7fd fddf 	bl	800ae70 <memcpy>
 800d2b2:	89a3      	ldrh	r3, [r4, #12]
 800d2b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2bc:	81a3      	strh	r3, [r4, #12]
 800d2be:	6126      	str	r6, [r4, #16]
 800d2c0:	6165      	str	r5, [r4, #20]
 800d2c2:	444e      	add	r6, r9
 800d2c4:	eba5 0509 	sub.w	r5, r5, r9
 800d2c8:	6026      	str	r6, [r4, #0]
 800d2ca:	60a5      	str	r5, [r4, #8]
 800d2cc:	463e      	mov	r6, r7
 800d2ce:	42be      	cmp	r6, r7
 800d2d0:	d900      	bls.n	800d2d4 <__ssputs_r+0x86>
 800d2d2:	463e      	mov	r6, r7
 800d2d4:	4632      	mov	r2, r6
 800d2d6:	6820      	ldr	r0, [r4, #0]
 800d2d8:	4641      	mov	r1, r8
 800d2da:	f7fd fdd7 	bl	800ae8c <memmove>
 800d2de:	68a3      	ldr	r3, [r4, #8]
 800d2e0:	6822      	ldr	r2, [r4, #0]
 800d2e2:	1b9b      	subs	r3, r3, r6
 800d2e4:	4432      	add	r2, r6
 800d2e6:	60a3      	str	r3, [r4, #8]
 800d2e8:	6022      	str	r2, [r4, #0]
 800d2ea:	2000      	movs	r0, #0
 800d2ec:	e7db      	b.n	800d2a6 <__ssputs_r+0x58>
 800d2ee:	462a      	mov	r2, r5
 800d2f0:	f000 fb3e 	bl	800d970 <_realloc_r>
 800d2f4:	4606      	mov	r6, r0
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d1e1      	bne.n	800d2be <__ssputs_r+0x70>
 800d2fa:	6921      	ldr	r1, [r4, #16]
 800d2fc:	4650      	mov	r0, sl
 800d2fe:	f7fd fde7 	bl	800aed0 <_free_r>
 800d302:	e7c7      	b.n	800d294 <__ssputs_r+0x46>

0800d304 <_svfiprintf_r>:
 800d304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d308:	4698      	mov	r8, r3
 800d30a:	898b      	ldrh	r3, [r1, #12]
 800d30c:	061b      	lsls	r3, r3, #24
 800d30e:	b09d      	sub	sp, #116	; 0x74
 800d310:	4607      	mov	r7, r0
 800d312:	460d      	mov	r5, r1
 800d314:	4614      	mov	r4, r2
 800d316:	d50e      	bpl.n	800d336 <_svfiprintf_r+0x32>
 800d318:	690b      	ldr	r3, [r1, #16]
 800d31a:	b963      	cbnz	r3, 800d336 <_svfiprintf_r+0x32>
 800d31c:	2140      	movs	r1, #64	; 0x40
 800d31e:	f7fd fe27 	bl	800af70 <_malloc_r>
 800d322:	6028      	str	r0, [r5, #0]
 800d324:	6128      	str	r0, [r5, #16]
 800d326:	b920      	cbnz	r0, 800d332 <_svfiprintf_r+0x2e>
 800d328:	230c      	movs	r3, #12
 800d32a:	603b      	str	r3, [r7, #0]
 800d32c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d330:	e0d1      	b.n	800d4d6 <_svfiprintf_r+0x1d2>
 800d332:	2340      	movs	r3, #64	; 0x40
 800d334:	616b      	str	r3, [r5, #20]
 800d336:	2300      	movs	r3, #0
 800d338:	9309      	str	r3, [sp, #36]	; 0x24
 800d33a:	2320      	movs	r3, #32
 800d33c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d340:	f8cd 800c 	str.w	r8, [sp, #12]
 800d344:	2330      	movs	r3, #48	; 0x30
 800d346:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d4f0 <_svfiprintf_r+0x1ec>
 800d34a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d34e:	f04f 0901 	mov.w	r9, #1
 800d352:	4623      	mov	r3, r4
 800d354:	469a      	mov	sl, r3
 800d356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d35a:	b10a      	cbz	r2, 800d360 <_svfiprintf_r+0x5c>
 800d35c:	2a25      	cmp	r2, #37	; 0x25
 800d35e:	d1f9      	bne.n	800d354 <_svfiprintf_r+0x50>
 800d360:	ebba 0b04 	subs.w	fp, sl, r4
 800d364:	d00b      	beq.n	800d37e <_svfiprintf_r+0x7a>
 800d366:	465b      	mov	r3, fp
 800d368:	4622      	mov	r2, r4
 800d36a:	4629      	mov	r1, r5
 800d36c:	4638      	mov	r0, r7
 800d36e:	f7ff ff6e 	bl	800d24e <__ssputs_r>
 800d372:	3001      	adds	r0, #1
 800d374:	f000 80aa 	beq.w	800d4cc <_svfiprintf_r+0x1c8>
 800d378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d37a:	445a      	add	r2, fp
 800d37c:	9209      	str	r2, [sp, #36]	; 0x24
 800d37e:	f89a 3000 	ldrb.w	r3, [sl]
 800d382:	2b00      	cmp	r3, #0
 800d384:	f000 80a2 	beq.w	800d4cc <_svfiprintf_r+0x1c8>
 800d388:	2300      	movs	r3, #0
 800d38a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d38e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d392:	f10a 0a01 	add.w	sl, sl, #1
 800d396:	9304      	str	r3, [sp, #16]
 800d398:	9307      	str	r3, [sp, #28]
 800d39a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d39e:	931a      	str	r3, [sp, #104]	; 0x68
 800d3a0:	4654      	mov	r4, sl
 800d3a2:	2205      	movs	r2, #5
 800d3a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3a8:	4851      	ldr	r0, [pc, #324]	; (800d4f0 <_svfiprintf_r+0x1ec>)
 800d3aa:	f7f2 ffa1 	bl	80002f0 <memchr>
 800d3ae:	9a04      	ldr	r2, [sp, #16]
 800d3b0:	b9d8      	cbnz	r0, 800d3ea <_svfiprintf_r+0xe6>
 800d3b2:	06d0      	lsls	r0, r2, #27
 800d3b4:	bf44      	itt	mi
 800d3b6:	2320      	movmi	r3, #32
 800d3b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3bc:	0711      	lsls	r1, r2, #28
 800d3be:	bf44      	itt	mi
 800d3c0:	232b      	movmi	r3, #43	; 0x2b
 800d3c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3c6:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ca:	2b2a      	cmp	r3, #42	; 0x2a
 800d3cc:	d015      	beq.n	800d3fa <_svfiprintf_r+0xf6>
 800d3ce:	9a07      	ldr	r2, [sp, #28]
 800d3d0:	4654      	mov	r4, sl
 800d3d2:	2000      	movs	r0, #0
 800d3d4:	f04f 0c0a 	mov.w	ip, #10
 800d3d8:	4621      	mov	r1, r4
 800d3da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3de:	3b30      	subs	r3, #48	; 0x30
 800d3e0:	2b09      	cmp	r3, #9
 800d3e2:	d94e      	bls.n	800d482 <_svfiprintf_r+0x17e>
 800d3e4:	b1b0      	cbz	r0, 800d414 <_svfiprintf_r+0x110>
 800d3e6:	9207      	str	r2, [sp, #28]
 800d3e8:	e014      	b.n	800d414 <_svfiprintf_r+0x110>
 800d3ea:	eba0 0308 	sub.w	r3, r0, r8
 800d3ee:	fa09 f303 	lsl.w	r3, r9, r3
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	9304      	str	r3, [sp, #16]
 800d3f6:	46a2      	mov	sl, r4
 800d3f8:	e7d2      	b.n	800d3a0 <_svfiprintf_r+0x9c>
 800d3fa:	9b03      	ldr	r3, [sp, #12]
 800d3fc:	1d19      	adds	r1, r3, #4
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	9103      	str	r1, [sp, #12]
 800d402:	2b00      	cmp	r3, #0
 800d404:	bfbb      	ittet	lt
 800d406:	425b      	neglt	r3, r3
 800d408:	f042 0202 	orrlt.w	r2, r2, #2
 800d40c:	9307      	strge	r3, [sp, #28]
 800d40e:	9307      	strlt	r3, [sp, #28]
 800d410:	bfb8      	it	lt
 800d412:	9204      	strlt	r2, [sp, #16]
 800d414:	7823      	ldrb	r3, [r4, #0]
 800d416:	2b2e      	cmp	r3, #46	; 0x2e
 800d418:	d10c      	bne.n	800d434 <_svfiprintf_r+0x130>
 800d41a:	7863      	ldrb	r3, [r4, #1]
 800d41c:	2b2a      	cmp	r3, #42	; 0x2a
 800d41e:	d135      	bne.n	800d48c <_svfiprintf_r+0x188>
 800d420:	9b03      	ldr	r3, [sp, #12]
 800d422:	1d1a      	adds	r2, r3, #4
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	9203      	str	r2, [sp, #12]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	bfb8      	it	lt
 800d42c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d430:	3402      	adds	r4, #2
 800d432:	9305      	str	r3, [sp, #20]
 800d434:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d500 <_svfiprintf_r+0x1fc>
 800d438:	7821      	ldrb	r1, [r4, #0]
 800d43a:	2203      	movs	r2, #3
 800d43c:	4650      	mov	r0, sl
 800d43e:	f7f2 ff57 	bl	80002f0 <memchr>
 800d442:	b140      	cbz	r0, 800d456 <_svfiprintf_r+0x152>
 800d444:	2340      	movs	r3, #64	; 0x40
 800d446:	eba0 000a 	sub.w	r0, r0, sl
 800d44a:	fa03 f000 	lsl.w	r0, r3, r0
 800d44e:	9b04      	ldr	r3, [sp, #16]
 800d450:	4303      	orrs	r3, r0
 800d452:	3401      	adds	r4, #1
 800d454:	9304      	str	r3, [sp, #16]
 800d456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d45a:	4826      	ldr	r0, [pc, #152]	; (800d4f4 <_svfiprintf_r+0x1f0>)
 800d45c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d460:	2206      	movs	r2, #6
 800d462:	f7f2 ff45 	bl	80002f0 <memchr>
 800d466:	2800      	cmp	r0, #0
 800d468:	d038      	beq.n	800d4dc <_svfiprintf_r+0x1d8>
 800d46a:	4b23      	ldr	r3, [pc, #140]	; (800d4f8 <_svfiprintf_r+0x1f4>)
 800d46c:	bb1b      	cbnz	r3, 800d4b6 <_svfiprintf_r+0x1b2>
 800d46e:	9b03      	ldr	r3, [sp, #12]
 800d470:	3307      	adds	r3, #7
 800d472:	f023 0307 	bic.w	r3, r3, #7
 800d476:	3308      	adds	r3, #8
 800d478:	9303      	str	r3, [sp, #12]
 800d47a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d47c:	4433      	add	r3, r6
 800d47e:	9309      	str	r3, [sp, #36]	; 0x24
 800d480:	e767      	b.n	800d352 <_svfiprintf_r+0x4e>
 800d482:	fb0c 3202 	mla	r2, ip, r2, r3
 800d486:	460c      	mov	r4, r1
 800d488:	2001      	movs	r0, #1
 800d48a:	e7a5      	b.n	800d3d8 <_svfiprintf_r+0xd4>
 800d48c:	2300      	movs	r3, #0
 800d48e:	3401      	adds	r4, #1
 800d490:	9305      	str	r3, [sp, #20]
 800d492:	4619      	mov	r1, r3
 800d494:	f04f 0c0a 	mov.w	ip, #10
 800d498:	4620      	mov	r0, r4
 800d49a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d49e:	3a30      	subs	r2, #48	; 0x30
 800d4a0:	2a09      	cmp	r2, #9
 800d4a2:	d903      	bls.n	800d4ac <_svfiprintf_r+0x1a8>
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d0c5      	beq.n	800d434 <_svfiprintf_r+0x130>
 800d4a8:	9105      	str	r1, [sp, #20]
 800d4aa:	e7c3      	b.n	800d434 <_svfiprintf_r+0x130>
 800d4ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4b0:	4604      	mov	r4, r0
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e7f0      	b.n	800d498 <_svfiprintf_r+0x194>
 800d4b6:	ab03      	add	r3, sp, #12
 800d4b8:	9300      	str	r3, [sp, #0]
 800d4ba:	462a      	mov	r2, r5
 800d4bc:	4b0f      	ldr	r3, [pc, #60]	; (800d4fc <_svfiprintf_r+0x1f8>)
 800d4be:	a904      	add	r1, sp, #16
 800d4c0:	4638      	mov	r0, r7
 800d4c2:	f7fd fe41 	bl	800b148 <_printf_float>
 800d4c6:	1c42      	adds	r2, r0, #1
 800d4c8:	4606      	mov	r6, r0
 800d4ca:	d1d6      	bne.n	800d47a <_svfiprintf_r+0x176>
 800d4cc:	89ab      	ldrh	r3, [r5, #12]
 800d4ce:	065b      	lsls	r3, r3, #25
 800d4d0:	f53f af2c 	bmi.w	800d32c <_svfiprintf_r+0x28>
 800d4d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4d6:	b01d      	add	sp, #116	; 0x74
 800d4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4dc:	ab03      	add	r3, sp, #12
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	462a      	mov	r2, r5
 800d4e2:	4b06      	ldr	r3, [pc, #24]	; (800d4fc <_svfiprintf_r+0x1f8>)
 800d4e4:	a904      	add	r1, sp, #16
 800d4e6:	4638      	mov	r0, r7
 800d4e8:	f7fe f8ba 	bl	800b660 <_printf_i>
 800d4ec:	e7eb      	b.n	800d4c6 <_svfiprintf_r+0x1c2>
 800d4ee:	bf00      	nop
 800d4f0:	0801182c 	.word	0x0801182c
 800d4f4:	08011836 	.word	0x08011836
 800d4f8:	0800b149 	.word	0x0800b149
 800d4fc:	0800d24f 	.word	0x0800d24f
 800d500:	08011832 	.word	0x08011832

0800d504 <__sfputc_r>:
 800d504:	6893      	ldr	r3, [r2, #8]
 800d506:	3b01      	subs	r3, #1
 800d508:	2b00      	cmp	r3, #0
 800d50a:	b410      	push	{r4}
 800d50c:	6093      	str	r3, [r2, #8]
 800d50e:	da08      	bge.n	800d522 <__sfputc_r+0x1e>
 800d510:	6994      	ldr	r4, [r2, #24]
 800d512:	42a3      	cmp	r3, r4
 800d514:	db01      	blt.n	800d51a <__sfputc_r+0x16>
 800d516:	290a      	cmp	r1, #10
 800d518:	d103      	bne.n	800d522 <__sfputc_r+0x1e>
 800d51a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d51e:	f7fe ba09 	b.w	800b934 <__swbuf_r>
 800d522:	6813      	ldr	r3, [r2, #0]
 800d524:	1c58      	adds	r0, r3, #1
 800d526:	6010      	str	r0, [r2, #0]
 800d528:	7019      	strb	r1, [r3, #0]
 800d52a:	4608      	mov	r0, r1
 800d52c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d530:	4770      	bx	lr

0800d532 <__sfputs_r>:
 800d532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d534:	4606      	mov	r6, r0
 800d536:	460f      	mov	r7, r1
 800d538:	4614      	mov	r4, r2
 800d53a:	18d5      	adds	r5, r2, r3
 800d53c:	42ac      	cmp	r4, r5
 800d53e:	d101      	bne.n	800d544 <__sfputs_r+0x12>
 800d540:	2000      	movs	r0, #0
 800d542:	e007      	b.n	800d554 <__sfputs_r+0x22>
 800d544:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d548:	463a      	mov	r2, r7
 800d54a:	4630      	mov	r0, r6
 800d54c:	f7ff ffda 	bl	800d504 <__sfputc_r>
 800d550:	1c43      	adds	r3, r0, #1
 800d552:	d1f3      	bne.n	800d53c <__sfputs_r+0xa>
 800d554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d558 <_vfiprintf_r>:
 800d558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d55c:	460d      	mov	r5, r1
 800d55e:	b09d      	sub	sp, #116	; 0x74
 800d560:	4614      	mov	r4, r2
 800d562:	4698      	mov	r8, r3
 800d564:	4606      	mov	r6, r0
 800d566:	b118      	cbz	r0, 800d570 <_vfiprintf_r+0x18>
 800d568:	6983      	ldr	r3, [r0, #24]
 800d56a:	b90b      	cbnz	r3, 800d570 <_vfiprintf_r+0x18>
 800d56c:	f7ff f9cc 	bl	800c908 <__sinit>
 800d570:	4b89      	ldr	r3, [pc, #548]	; (800d798 <_vfiprintf_r+0x240>)
 800d572:	429d      	cmp	r5, r3
 800d574:	d11b      	bne.n	800d5ae <_vfiprintf_r+0x56>
 800d576:	6875      	ldr	r5, [r6, #4]
 800d578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d57a:	07d9      	lsls	r1, r3, #31
 800d57c:	d405      	bmi.n	800d58a <_vfiprintf_r+0x32>
 800d57e:	89ab      	ldrh	r3, [r5, #12]
 800d580:	059a      	lsls	r2, r3, #22
 800d582:	d402      	bmi.n	800d58a <_vfiprintf_r+0x32>
 800d584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d586:	f7ff fa62 	bl	800ca4e <__retarget_lock_acquire_recursive>
 800d58a:	89ab      	ldrh	r3, [r5, #12]
 800d58c:	071b      	lsls	r3, r3, #28
 800d58e:	d501      	bpl.n	800d594 <_vfiprintf_r+0x3c>
 800d590:	692b      	ldr	r3, [r5, #16]
 800d592:	b9eb      	cbnz	r3, 800d5d0 <_vfiprintf_r+0x78>
 800d594:	4629      	mov	r1, r5
 800d596:	4630      	mov	r0, r6
 800d598:	f7fe fa1e 	bl	800b9d8 <__swsetup_r>
 800d59c:	b1c0      	cbz	r0, 800d5d0 <_vfiprintf_r+0x78>
 800d59e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5a0:	07dc      	lsls	r4, r3, #31
 800d5a2:	d50e      	bpl.n	800d5c2 <_vfiprintf_r+0x6a>
 800d5a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5a8:	b01d      	add	sp, #116	; 0x74
 800d5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ae:	4b7b      	ldr	r3, [pc, #492]	; (800d79c <_vfiprintf_r+0x244>)
 800d5b0:	429d      	cmp	r5, r3
 800d5b2:	d101      	bne.n	800d5b8 <_vfiprintf_r+0x60>
 800d5b4:	68b5      	ldr	r5, [r6, #8]
 800d5b6:	e7df      	b.n	800d578 <_vfiprintf_r+0x20>
 800d5b8:	4b79      	ldr	r3, [pc, #484]	; (800d7a0 <_vfiprintf_r+0x248>)
 800d5ba:	429d      	cmp	r5, r3
 800d5bc:	bf08      	it	eq
 800d5be:	68f5      	ldreq	r5, [r6, #12]
 800d5c0:	e7da      	b.n	800d578 <_vfiprintf_r+0x20>
 800d5c2:	89ab      	ldrh	r3, [r5, #12]
 800d5c4:	0598      	lsls	r0, r3, #22
 800d5c6:	d4ed      	bmi.n	800d5a4 <_vfiprintf_r+0x4c>
 800d5c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5ca:	f7ff fa41 	bl	800ca50 <__retarget_lock_release_recursive>
 800d5ce:	e7e9      	b.n	800d5a4 <_vfiprintf_r+0x4c>
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d5d4:	2320      	movs	r3, #32
 800d5d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5da:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5de:	2330      	movs	r3, #48	; 0x30
 800d5e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d7a4 <_vfiprintf_r+0x24c>
 800d5e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5e8:	f04f 0901 	mov.w	r9, #1
 800d5ec:	4623      	mov	r3, r4
 800d5ee:	469a      	mov	sl, r3
 800d5f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5f4:	b10a      	cbz	r2, 800d5fa <_vfiprintf_r+0xa2>
 800d5f6:	2a25      	cmp	r2, #37	; 0x25
 800d5f8:	d1f9      	bne.n	800d5ee <_vfiprintf_r+0x96>
 800d5fa:	ebba 0b04 	subs.w	fp, sl, r4
 800d5fe:	d00b      	beq.n	800d618 <_vfiprintf_r+0xc0>
 800d600:	465b      	mov	r3, fp
 800d602:	4622      	mov	r2, r4
 800d604:	4629      	mov	r1, r5
 800d606:	4630      	mov	r0, r6
 800d608:	f7ff ff93 	bl	800d532 <__sfputs_r>
 800d60c:	3001      	adds	r0, #1
 800d60e:	f000 80aa 	beq.w	800d766 <_vfiprintf_r+0x20e>
 800d612:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d614:	445a      	add	r2, fp
 800d616:	9209      	str	r2, [sp, #36]	; 0x24
 800d618:	f89a 3000 	ldrb.w	r3, [sl]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	f000 80a2 	beq.w	800d766 <_vfiprintf_r+0x20e>
 800d622:	2300      	movs	r3, #0
 800d624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d62c:	f10a 0a01 	add.w	sl, sl, #1
 800d630:	9304      	str	r3, [sp, #16]
 800d632:	9307      	str	r3, [sp, #28]
 800d634:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d638:	931a      	str	r3, [sp, #104]	; 0x68
 800d63a:	4654      	mov	r4, sl
 800d63c:	2205      	movs	r2, #5
 800d63e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d642:	4858      	ldr	r0, [pc, #352]	; (800d7a4 <_vfiprintf_r+0x24c>)
 800d644:	f7f2 fe54 	bl	80002f0 <memchr>
 800d648:	9a04      	ldr	r2, [sp, #16]
 800d64a:	b9d8      	cbnz	r0, 800d684 <_vfiprintf_r+0x12c>
 800d64c:	06d1      	lsls	r1, r2, #27
 800d64e:	bf44      	itt	mi
 800d650:	2320      	movmi	r3, #32
 800d652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d656:	0713      	lsls	r3, r2, #28
 800d658:	bf44      	itt	mi
 800d65a:	232b      	movmi	r3, #43	; 0x2b
 800d65c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d660:	f89a 3000 	ldrb.w	r3, [sl]
 800d664:	2b2a      	cmp	r3, #42	; 0x2a
 800d666:	d015      	beq.n	800d694 <_vfiprintf_r+0x13c>
 800d668:	9a07      	ldr	r2, [sp, #28]
 800d66a:	4654      	mov	r4, sl
 800d66c:	2000      	movs	r0, #0
 800d66e:	f04f 0c0a 	mov.w	ip, #10
 800d672:	4621      	mov	r1, r4
 800d674:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d678:	3b30      	subs	r3, #48	; 0x30
 800d67a:	2b09      	cmp	r3, #9
 800d67c:	d94e      	bls.n	800d71c <_vfiprintf_r+0x1c4>
 800d67e:	b1b0      	cbz	r0, 800d6ae <_vfiprintf_r+0x156>
 800d680:	9207      	str	r2, [sp, #28]
 800d682:	e014      	b.n	800d6ae <_vfiprintf_r+0x156>
 800d684:	eba0 0308 	sub.w	r3, r0, r8
 800d688:	fa09 f303 	lsl.w	r3, r9, r3
 800d68c:	4313      	orrs	r3, r2
 800d68e:	9304      	str	r3, [sp, #16]
 800d690:	46a2      	mov	sl, r4
 800d692:	e7d2      	b.n	800d63a <_vfiprintf_r+0xe2>
 800d694:	9b03      	ldr	r3, [sp, #12]
 800d696:	1d19      	adds	r1, r3, #4
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	9103      	str	r1, [sp, #12]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	bfbb      	ittet	lt
 800d6a0:	425b      	neglt	r3, r3
 800d6a2:	f042 0202 	orrlt.w	r2, r2, #2
 800d6a6:	9307      	strge	r3, [sp, #28]
 800d6a8:	9307      	strlt	r3, [sp, #28]
 800d6aa:	bfb8      	it	lt
 800d6ac:	9204      	strlt	r2, [sp, #16]
 800d6ae:	7823      	ldrb	r3, [r4, #0]
 800d6b0:	2b2e      	cmp	r3, #46	; 0x2e
 800d6b2:	d10c      	bne.n	800d6ce <_vfiprintf_r+0x176>
 800d6b4:	7863      	ldrb	r3, [r4, #1]
 800d6b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d6b8:	d135      	bne.n	800d726 <_vfiprintf_r+0x1ce>
 800d6ba:	9b03      	ldr	r3, [sp, #12]
 800d6bc:	1d1a      	adds	r2, r3, #4
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	9203      	str	r2, [sp, #12]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	bfb8      	it	lt
 800d6c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d6ca:	3402      	adds	r4, #2
 800d6cc:	9305      	str	r3, [sp, #20]
 800d6ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d7b4 <_vfiprintf_r+0x25c>
 800d6d2:	7821      	ldrb	r1, [r4, #0]
 800d6d4:	2203      	movs	r2, #3
 800d6d6:	4650      	mov	r0, sl
 800d6d8:	f7f2 fe0a 	bl	80002f0 <memchr>
 800d6dc:	b140      	cbz	r0, 800d6f0 <_vfiprintf_r+0x198>
 800d6de:	2340      	movs	r3, #64	; 0x40
 800d6e0:	eba0 000a 	sub.w	r0, r0, sl
 800d6e4:	fa03 f000 	lsl.w	r0, r3, r0
 800d6e8:	9b04      	ldr	r3, [sp, #16]
 800d6ea:	4303      	orrs	r3, r0
 800d6ec:	3401      	adds	r4, #1
 800d6ee:	9304      	str	r3, [sp, #16]
 800d6f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6f4:	482c      	ldr	r0, [pc, #176]	; (800d7a8 <_vfiprintf_r+0x250>)
 800d6f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6fa:	2206      	movs	r2, #6
 800d6fc:	f7f2 fdf8 	bl	80002f0 <memchr>
 800d700:	2800      	cmp	r0, #0
 800d702:	d03f      	beq.n	800d784 <_vfiprintf_r+0x22c>
 800d704:	4b29      	ldr	r3, [pc, #164]	; (800d7ac <_vfiprintf_r+0x254>)
 800d706:	bb1b      	cbnz	r3, 800d750 <_vfiprintf_r+0x1f8>
 800d708:	9b03      	ldr	r3, [sp, #12]
 800d70a:	3307      	adds	r3, #7
 800d70c:	f023 0307 	bic.w	r3, r3, #7
 800d710:	3308      	adds	r3, #8
 800d712:	9303      	str	r3, [sp, #12]
 800d714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d716:	443b      	add	r3, r7
 800d718:	9309      	str	r3, [sp, #36]	; 0x24
 800d71a:	e767      	b.n	800d5ec <_vfiprintf_r+0x94>
 800d71c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d720:	460c      	mov	r4, r1
 800d722:	2001      	movs	r0, #1
 800d724:	e7a5      	b.n	800d672 <_vfiprintf_r+0x11a>
 800d726:	2300      	movs	r3, #0
 800d728:	3401      	adds	r4, #1
 800d72a:	9305      	str	r3, [sp, #20]
 800d72c:	4619      	mov	r1, r3
 800d72e:	f04f 0c0a 	mov.w	ip, #10
 800d732:	4620      	mov	r0, r4
 800d734:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d738:	3a30      	subs	r2, #48	; 0x30
 800d73a:	2a09      	cmp	r2, #9
 800d73c:	d903      	bls.n	800d746 <_vfiprintf_r+0x1ee>
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d0c5      	beq.n	800d6ce <_vfiprintf_r+0x176>
 800d742:	9105      	str	r1, [sp, #20]
 800d744:	e7c3      	b.n	800d6ce <_vfiprintf_r+0x176>
 800d746:	fb0c 2101 	mla	r1, ip, r1, r2
 800d74a:	4604      	mov	r4, r0
 800d74c:	2301      	movs	r3, #1
 800d74e:	e7f0      	b.n	800d732 <_vfiprintf_r+0x1da>
 800d750:	ab03      	add	r3, sp, #12
 800d752:	9300      	str	r3, [sp, #0]
 800d754:	462a      	mov	r2, r5
 800d756:	4b16      	ldr	r3, [pc, #88]	; (800d7b0 <_vfiprintf_r+0x258>)
 800d758:	a904      	add	r1, sp, #16
 800d75a:	4630      	mov	r0, r6
 800d75c:	f7fd fcf4 	bl	800b148 <_printf_float>
 800d760:	4607      	mov	r7, r0
 800d762:	1c78      	adds	r0, r7, #1
 800d764:	d1d6      	bne.n	800d714 <_vfiprintf_r+0x1bc>
 800d766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d768:	07d9      	lsls	r1, r3, #31
 800d76a:	d405      	bmi.n	800d778 <_vfiprintf_r+0x220>
 800d76c:	89ab      	ldrh	r3, [r5, #12]
 800d76e:	059a      	lsls	r2, r3, #22
 800d770:	d402      	bmi.n	800d778 <_vfiprintf_r+0x220>
 800d772:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d774:	f7ff f96c 	bl	800ca50 <__retarget_lock_release_recursive>
 800d778:	89ab      	ldrh	r3, [r5, #12]
 800d77a:	065b      	lsls	r3, r3, #25
 800d77c:	f53f af12 	bmi.w	800d5a4 <_vfiprintf_r+0x4c>
 800d780:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d782:	e711      	b.n	800d5a8 <_vfiprintf_r+0x50>
 800d784:	ab03      	add	r3, sp, #12
 800d786:	9300      	str	r3, [sp, #0]
 800d788:	462a      	mov	r2, r5
 800d78a:	4b09      	ldr	r3, [pc, #36]	; (800d7b0 <_vfiprintf_r+0x258>)
 800d78c:	a904      	add	r1, sp, #16
 800d78e:	4630      	mov	r0, r6
 800d790:	f7fd ff66 	bl	800b660 <_printf_i>
 800d794:	e7e4      	b.n	800d760 <_vfiprintf_r+0x208>
 800d796:	bf00      	nop
 800d798:	08011690 	.word	0x08011690
 800d79c:	080116b0 	.word	0x080116b0
 800d7a0:	08011670 	.word	0x08011670
 800d7a4:	0801182c 	.word	0x0801182c
 800d7a8:	08011836 	.word	0x08011836
 800d7ac:	0800b149 	.word	0x0800b149
 800d7b0:	0800d533 	.word	0x0800d533
 800d7b4:	08011832 	.word	0x08011832

0800d7b8 <__sread>:
 800d7b8:	b510      	push	{r4, lr}
 800d7ba:	460c      	mov	r4, r1
 800d7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7c0:	f000 f8fc 	bl	800d9bc <_read_r>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	bfab      	itete	ge
 800d7c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d7ca:	89a3      	ldrhlt	r3, [r4, #12]
 800d7cc:	181b      	addge	r3, r3, r0
 800d7ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d7d2:	bfac      	ite	ge
 800d7d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d7d6:	81a3      	strhlt	r3, [r4, #12]
 800d7d8:	bd10      	pop	{r4, pc}

0800d7da <__swrite>:
 800d7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7de:	461f      	mov	r7, r3
 800d7e0:	898b      	ldrh	r3, [r1, #12]
 800d7e2:	05db      	lsls	r3, r3, #23
 800d7e4:	4605      	mov	r5, r0
 800d7e6:	460c      	mov	r4, r1
 800d7e8:	4616      	mov	r6, r2
 800d7ea:	d505      	bpl.n	800d7f8 <__swrite+0x1e>
 800d7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7f0:	2302      	movs	r3, #2
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f000 f898 	bl	800d928 <_lseek_r>
 800d7f8:	89a3      	ldrh	r3, [r4, #12]
 800d7fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d802:	81a3      	strh	r3, [r4, #12]
 800d804:	4632      	mov	r2, r6
 800d806:	463b      	mov	r3, r7
 800d808:	4628      	mov	r0, r5
 800d80a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d80e:	f000 b817 	b.w	800d840 <_write_r>

0800d812 <__sseek>:
 800d812:	b510      	push	{r4, lr}
 800d814:	460c      	mov	r4, r1
 800d816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d81a:	f000 f885 	bl	800d928 <_lseek_r>
 800d81e:	1c43      	adds	r3, r0, #1
 800d820:	89a3      	ldrh	r3, [r4, #12]
 800d822:	bf15      	itete	ne
 800d824:	6560      	strne	r0, [r4, #84]	; 0x54
 800d826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d82a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d82e:	81a3      	strheq	r3, [r4, #12]
 800d830:	bf18      	it	ne
 800d832:	81a3      	strhne	r3, [r4, #12]
 800d834:	bd10      	pop	{r4, pc}

0800d836 <__sclose>:
 800d836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d83a:	f000 b831 	b.w	800d8a0 <_close_r>
	...

0800d840 <_write_r>:
 800d840:	b538      	push	{r3, r4, r5, lr}
 800d842:	4d07      	ldr	r5, [pc, #28]	; (800d860 <_write_r+0x20>)
 800d844:	4604      	mov	r4, r0
 800d846:	4608      	mov	r0, r1
 800d848:	4611      	mov	r1, r2
 800d84a:	2200      	movs	r2, #0
 800d84c:	602a      	str	r2, [r5, #0]
 800d84e:	461a      	mov	r2, r3
 800d850:	f7f4 f849 	bl	80018e6 <_write>
 800d854:	1c43      	adds	r3, r0, #1
 800d856:	d102      	bne.n	800d85e <_write_r+0x1e>
 800d858:	682b      	ldr	r3, [r5, #0]
 800d85a:	b103      	cbz	r3, 800d85e <_write_r+0x1e>
 800d85c:	6023      	str	r3, [r4, #0]
 800d85e:	bd38      	pop	{r3, r4, r5, pc}
 800d860:	24010880 	.word	0x24010880

0800d864 <__assert_func>:
 800d864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d866:	4614      	mov	r4, r2
 800d868:	461a      	mov	r2, r3
 800d86a:	4b09      	ldr	r3, [pc, #36]	; (800d890 <__assert_func+0x2c>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4605      	mov	r5, r0
 800d870:	68d8      	ldr	r0, [r3, #12]
 800d872:	b14c      	cbz	r4, 800d888 <__assert_func+0x24>
 800d874:	4b07      	ldr	r3, [pc, #28]	; (800d894 <__assert_func+0x30>)
 800d876:	9100      	str	r1, [sp, #0]
 800d878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d87c:	4906      	ldr	r1, [pc, #24]	; (800d898 <__assert_func+0x34>)
 800d87e:	462b      	mov	r3, r5
 800d880:	f000 f81e 	bl	800d8c0 <fiprintf>
 800d884:	f000 f8b9 	bl	800d9fa <abort>
 800d888:	4b04      	ldr	r3, [pc, #16]	; (800d89c <__assert_func+0x38>)
 800d88a:	461c      	mov	r4, r3
 800d88c:	e7f3      	b.n	800d876 <__assert_func+0x12>
 800d88e:	bf00      	nop
 800d890:	24000030 	.word	0x24000030
 800d894:	0801183d 	.word	0x0801183d
 800d898:	0801184a 	.word	0x0801184a
 800d89c:	08011878 	.word	0x08011878

0800d8a0 <_close_r>:
 800d8a0:	b538      	push	{r3, r4, r5, lr}
 800d8a2:	4d06      	ldr	r5, [pc, #24]	; (800d8bc <_close_r+0x1c>)
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	4608      	mov	r0, r1
 800d8aa:	602b      	str	r3, [r5, #0]
 800d8ac:	f7f4 f837 	bl	800191e <_close>
 800d8b0:	1c43      	adds	r3, r0, #1
 800d8b2:	d102      	bne.n	800d8ba <_close_r+0x1a>
 800d8b4:	682b      	ldr	r3, [r5, #0]
 800d8b6:	b103      	cbz	r3, 800d8ba <_close_r+0x1a>
 800d8b8:	6023      	str	r3, [r4, #0]
 800d8ba:	bd38      	pop	{r3, r4, r5, pc}
 800d8bc:	24010880 	.word	0x24010880

0800d8c0 <fiprintf>:
 800d8c0:	b40e      	push	{r1, r2, r3}
 800d8c2:	b503      	push	{r0, r1, lr}
 800d8c4:	4601      	mov	r1, r0
 800d8c6:	ab03      	add	r3, sp, #12
 800d8c8:	4805      	ldr	r0, [pc, #20]	; (800d8e0 <fiprintf+0x20>)
 800d8ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ce:	6800      	ldr	r0, [r0, #0]
 800d8d0:	9301      	str	r3, [sp, #4]
 800d8d2:	f7ff fe41 	bl	800d558 <_vfiprintf_r>
 800d8d6:	b002      	add	sp, #8
 800d8d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8dc:	b003      	add	sp, #12
 800d8de:	4770      	bx	lr
 800d8e0:	24000030 	.word	0x24000030

0800d8e4 <_fstat_r>:
 800d8e4:	b538      	push	{r3, r4, r5, lr}
 800d8e6:	4d07      	ldr	r5, [pc, #28]	; (800d904 <_fstat_r+0x20>)
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	4608      	mov	r0, r1
 800d8ee:	4611      	mov	r1, r2
 800d8f0:	602b      	str	r3, [r5, #0]
 800d8f2:	f7f4 f820 	bl	8001936 <_fstat>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	d102      	bne.n	800d900 <_fstat_r+0x1c>
 800d8fa:	682b      	ldr	r3, [r5, #0]
 800d8fc:	b103      	cbz	r3, 800d900 <_fstat_r+0x1c>
 800d8fe:	6023      	str	r3, [r4, #0]
 800d900:	bd38      	pop	{r3, r4, r5, pc}
 800d902:	bf00      	nop
 800d904:	24010880 	.word	0x24010880

0800d908 <_isatty_r>:
 800d908:	b538      	push	{r3, r4, r5, lr}
 800d90a:	4d06      	ldr	r5, [pc, #24]	; (800d924 <_isatty_r+0x1c>)
 800d90c:	2300      	movs	r3, #0
 800d90e:	4604      	mov	r4, r0
 800d910:	4608      	mov	r0, r1
 800d912:	602b      	str	r3, [r5, #0]
 800d914:	f7f4 f81f 	bl	8001956 <_isatty>
 800d918:	1c43      	adds	r3, r0, #1
 800d91a:	d102      	bne.n	800d922 <_isatty_r+0x1a>
 800d91c:	682b      	ldr	r3, [r5, #0]
 800d91e:	b103      	cbz	r3, 800d922 <_isatty_r+0x1a>
 800d920:	6023      	str	r3, [r4, #0]
 800d922:	bd38      	pop	{r3, r4, r5, pc}
 800d924:	24010880 	.word	0x24010880

0800d928 <_lseek_r>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4d07      	ldr	r5, [pc, #28]	; (800d948 <_lseek_r+0x20>)
 800d92c:	4604      	mov	r4, r0
 800d92e:	4608      	mov	r0, r1
 800d930:	4611      	mov	r1, r2
 800d932:	2200      	movs	r2, #0
 800d934:	602a      	str	r2, [r5, #0]
 800d936:	461a      	mov	r2, r3
 800d938:	f7f4 f818 	bl	800196c <_lseek>
 800d93c:	1c43      	adds	r3, r0, #1
 800d93e:	d102      	bne.n	800d946 <_lseek_r+0x1e>
 800d940:	682b      	ldr	r3, [r5, #0]
 800d942:	b103      	cbz	r3, 800d946 <_lseek_r+0x1e>
 800d944:	6023      	str	r3, [r4, #0]
 800d946:	bd38      	pop	{r3, r4, r5, pc}
 800d948:	24010880 	.word	0x24010880

0800d94c <__ascii_mbtowc>:
 800d94c:	b082      	sub	sp, #8
 800d94e:	b901      	cbnz	r1, 800d952 <__ascii_mbtowc+0x6>
 800d950:	a901      	add	r1, sp, #4
 800d952:	b142      	cbz	r2, 800d966 <__ascii_mbtowc+0x1a>
 800d954:	b14b      	cbz	r3, 800d96a <__ascii_mbtowc+0x1e>
 800d956:	7813      	ldrb	r3, [r2, #0]
 800d958:	600b      	str	r3, [r1, #0]
 800d95a:	7812      	ldrb	r2, [r2, #0]
 800d95c:	1e10      	subs	r0, r2, #0
 800d95e:	bf18      	it	ne
 800d960:	2001      	movne	r0, #1
 800d962:	b002      	add	sp, #8
 800d964:	4770      	bx	lr
 800d966:	4610      	mov	r0, r2
 800d968:	e7fb      	b.n	800d962 <__ascii_mbtowc+0x16>
 800d96a:	f06f 0001 	mvn.w	r0, #1
 800d96e:	e7f8      	b.n	800d962 <__ascii_mbtowc+0x16>

0800d970 <_realloc_r>:
 800d970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d972:	4607      	mov	r7, r0
 800d974:	4614      	mov	r4, r2
 800d976:	460e      	mov	r6, r1
 800d978:	b921      	cbnz	r1, 800d984 <_realloc_r+0x14>
 800d97a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d97e:	4611      	mov	r1, r2
 800d980:	f7fd baf6 	b.w	800af70 <_malloc_r>
 800d984:	b922      	cbnz	r2, 800d990 <_realloc_r+0x20>
 800d986:	f7fd faa3 	bl	800aed0 <_free_r>
 800d98a:	4625      	mov	r5, r4
 800d98c:	4628      	mov	r0, r5
 800d98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d990:	f000 f83a 	bl	800da08 <_malloc_usable_size_r>
 800d994:	42a0      	cmp	r0, r4
 800d996:	d20f      	bcs.n	800d9b8 <_realloc_r+0x48>
 800d998:	4621      	mov	r1, r4
 800d99a:	4638      	mov	r0, r7
 800d99c:	f7fd fae8 	bl	800af70 <_malloc_r>
 800d9a0:	4605      	mov	r5, r0
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	d0f2      	beq.n	800d98c <_realloc_r+0x1c>
 800d9a6:	4631      	mov	r1, r6
 800d9a8:	4622      	mov	r2, r4
 800d9aa:	f7fd fa61 	bl	800ae70 <memcpy>
 800d9ae:	4631      	mov	r1, r6
 800d9b0:	4638      	mov	r0, r7
 800d9b2:	f7fd fa8d 	bl	800aed0 <_free_r>
 800d9b6:	e7e9      	b.n	800d98c <_realloc_r+0x1c>
 800d9b8:	4635      	mov	r5, r6
 800d9ba:	e7e7      	b.n	800d98c <_realloc_r+0x1c>

0800d9bc <_read_r>:
 800d9bc:	b538      	push	{r3, r4, r5, lr}
 800d9be:	4d07      	ldr	r5, [pc, #28]	; (800d9dc <_read_r+0x20>)
 800d9c0:	4604      	mov	r4, r0
 800d9c2:	4608      	mov	r0, r1
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	602a      	str	r2, [r5, #0]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	f7f3 ff6e 	bl	80018ac <_read>
 800d9d0:	1c43      	adds	r3, r0, #1
 800d9d2:	d102      	bne.n	800d9da <_read_r+0x1e>
 800d9d4:	682b      	ldr	r3, [r5, #0]
 800d9d6:	b103      	cbz	r3, 800d9da <_read_r+0x1e>
 800d9d8:	6023      	str	r3, [r4, #0]
 800d9da:	bd38      	pop	{r3, r4, r5, pc}
 800d9dc:	24010880 	.word	0x24010880

0800d9e0 <__ascii_wctomb>:
 800d9e0:	b149      	cbz	r1, 800d9f6 <__ascii_wctomb+0x16>
 800d9e2:	2aff      	cmp	r2, #255	; 0xff
 800d9e4:	bf85      	ittet	hi
 800d9e6:	238a      	movhi	r3, #138	; 0x8a
 800d9e8:	6003      	strhi	r3, [r0, #0]
 800d9ea:	700a      	strbls	r2, [r1, #0]
 800d9ec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d9f0:	bf98      	it	ls
 800d9f2:	2001      	movls	r0, #1
 800d9f4:	4770      	bx	lr
 800d9f6:	4608      	mov	r0, r1
 800d9f8:	4770      	bx	lr

0800d9fa <abort>:
 800d9fa:	b508      	push	{r3, lr}
 800d9fc:	2006      	movs	r0, #6
 800d9fe:	f000 f833 	bl	800da68 <raise>
 800da02:	2001      	movs	r0, #1
 800da04:	f7f3 ff48 	bl	8001898 <_exit>

0800da08 <_malloc_usable_size_r>:
 800da08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da0c:	1f18      	subs	r0, r3, #4
 800da0e:	2b00      	cmp	r3, #0
 800da10:	bfbc      	itt	lt
 800da12:	580b      	ldrlt	r3, [r1, r0]
 800da14:	18c0      	addlt	r0, r0, r3
 800da16:	4770      	bx	lr

0800da18 <_raise_r>:
 800da18:	291f      	cmp	r1, #31
 800da1a:	b538      	push	{r3, r4, r5, lr}
 800da1c:	4604      	mov	r4, r0
 800da1e:	460d      	mov	r5, r1
 800da20:	d904      	bls.n	800da2c <_raise_r+0x14>
 800da22:	2316      	movs	r3, #22
 800da24:	6003      	str	r3, [r0, #0]
 800da26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da2a:	bd38      	pop	{r3, r4, r5, pc}
 800da2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da2e:	b112      	cbz	r2, 800da36 <_raise_r+0x1e>
 800da30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da34:	b94b      	cbnz	r3, 800da4a <_raise_r+0x32>
 800da36:	4620      	mov	r0, r4
 800da38:	f000 f830 	bl	800da9c <_getpid_r>
 800da3c:	462a      	mov	r2, r5
 800da3e:	4601      	mov	r1, r0
 800da40:	4620      	mov	r0, r4
 800da42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da46:	f000 b817 	b.w	800da78 <_kill_r>
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d00a      	beq.n	800da64 <_raise_r+0x4c>
 800da4e:	1c59      	adds	r1, r3, #1
 800da50:	d103      	bne.n	800da5a <_raise_r+0x42>
 800da52:	2316      	movs	r3, #22
 800da54:	6003      	str	r3, [r0, #0]
 800da56:	2001      	movs	r0, #1
 800da58:	e7e7      	b.n	800da2a <_raise_r+0x12>
 800da5a:	2400      	movs	r4, #0
 800da5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da60:	4628      	mov	r0, r5
 800da62:	4798      	blx	r3
 800da64:	2000      	movs	r0, #0
 800da66:	e7e0      	b.n	800da2a <_raise_r+0x12>

0800da68 <raise>:
 800da68:	4b02      	ldr	r3, [pc, #8]	; (800da74 <raise+0xc>)
 800da6a:	4601      	mov	r1, r0
 800da6c:	6818      	ldr	r0, [r3, #0]
 800da6e:	f7ff bfd3 	b.w	800da18 <_raise_r>
 800da72:	bf00      	nop
 800da74:	24000030 	.word	0x24000030

0800da78 <_kill_r>:
 800da78:	b538      	push	{r3, r4, r5, lr}
 800da7a:	4d07      	ldr	r5, [pc, #28]	; (800da98 <_kill_r+0x20>)
 800da7c:	2300      	movs	r3, #0
 800da7e:	4604      	mov	r4, r0
 800da80:	4608      	mov	r0, r1
 800da82:	4611      	mov	r1, r2
 800da84:	602b      	str	r3, [r5, #0]
 800da86:	f7f3 fef7 	bl	8001878 <_kill>
 800da8a:	1c43      	adds	r3, r0, #1
 800da8c:	d102      	bne.n	800da94 <_kill_r+0x1c>
 800da8e:	682b      	ldr	r3, [r5, #0]
 800da90:	b103      	cbz	r3, 800da94 <_kill_r+0x1c>
 800da92:	6023      	str	r3, [r4, #0]
 800da94:	bd38      	pop	{r3, r4, r5, pc}
 800da96:	bf00      	nop
 800da98:	24010880 	.word	0x24010880

0800da9c <_getpid_r>:
 800da9c:	f7f3 bee4 	b.w	8001868 <_getpid>

0800daa0 <cos>:
 800daa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800daa2:	eeb0 7b40 	vmov.f64	d7, d0
 800daa6:	ee17 3a90 	vmov	r3, s15
 800daaa:	4a1f      	ldr	r2, [pc, #124]	; (800db28 <cos+0x88>)
 800daac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dab0:	4293      	cmp	r3, r2
 800dab2:	dc04      	bgt.n	800dabe <cos+0x1e>
 800dab4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800db20 <cos+0x80>
 800dab8:	f000 f9c2 	bl	800de40 <__kernel_cos>
 800dabc:	e004      	b.n	800dac8 <cos+0x28>
 800dabe:	4a1b      	ldr	r2, [pc, #108]	; (800db2c <cos+0x8c>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	dd04      	ble.n	800dace <cos+0x2e>
 800dac4:	ee30 0b40 	vsub.f64	d0, d0, d0
 800dac8:	b005      	add	sp, #20
 800daca:	f85d fb04 	ldr.w	pc, [sp], #4
 800dace:	4668      	mov	r0, sp
 800dad0:	f000 f876 	bl	800dbc0 <__ieee754_rem_pio2>
 800dad4:	f000 0003 	and.w	r0, r0, #3
 800dad8:	2801      	cmp	r0, #1
 800dada:	d007      	beq.n	800daec <cos+0x4c>
 800dadc:	2802      	cmp	r0, #2
 800dade:	d00e      	beq.n	800dafe <cos+0x5e>
 800dae0:	b9a0      	cbnz	r0, 800db0c <cos+0x6c>
 800dae2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dae6:	ed9d 0b00 	vldr	d0, [sp]
 800daea:	e7e5      	b.n	800dab8 <cos+0x18>
 800daec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800daf0:	ed9d 0b00 	vldr	d0, [sp]
 800daf4:	f000 fc90 	bl	800e418 <__kernel_sin>
 800daf8:	eeb1 0b40 	vneg.f64	d0, d0
 800dafc:	e7e4      	b.n	800dac8 <cos+0x28>
 800dafe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db02:	ed9d 0b00 	vldr	d0, [sp]
 800db06:	f000 f99b 	bl	800de40 <__kernel_cos>
 800db0a:	e7f5      	b.n	800daf8 <cos+0x58>
 800db0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db10:	ed9d 0b00 	vldr	d0, [sp]
 800db14:	2001      	movs	r0, #1
 800db16:	f000 fc7f 	bl	800e418 <__kernel_sin>
 800db1a:	e7d5      	b.n	800dac8 <cos+0x28>
 800db1c:	f3af 8000 	nop.w
	...
 800db28:	3fe921fb 	.word	0x3fe921fb
 800db2c:	7fefffff 	.word	0x7fefffff

0800db30 <sin>:
 800db30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db32:	eeb0 7b40 	vmov.f64	d7, d0
 800db36:	ee17 3a90 	vmov	r3, s15
 800db3a:	4a1f      	ldr	r2, [pc, #124]	; (800dbb8 <sin+0x88>)
 800db3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db40:	4293      	cmp	r3, r2
 800db42:	dc05      	bgt.n	800db50 <sin+0x20>
 800db44:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800dbb0 <sin+0x80>
 800db48:	2000      	movs	r0, #0
 800db4a:	f000 fc65 	bl	800e418 <__kernel_sin>
 800db4e:	e004      	b.n	800db5a <sin+0x2a>
 800db50:	4a1a      	ldr	r2, [pc, #104]	; (800dbbc <sin+0x8c>)
 800db52:	4293      	cmp	r3, r2
 800db54:	dd04      	ble.n	800db60 <sin+0x30>
 800db56:	ee30 0b40 	vsub.f64	d0, d0, d0
 800db5a:	b005      	add	sp, #20
 800db5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800db60:	4668      	mov	r0, sp
 800db62:	f000 f82d 	bl	800dbc0 <__ieee754_rem_pio2>
 800db66:	f000 0003 	and.w	r0, r0, #3
 800db6a:	2801      	cmp	r0, #1
 800db6c:	d008      	beq.n	800db80 <sin+0x50>
 800db6e:	2802      	cmp	r0, #2
 800db70:	d00d      	beq.n	800db8e <sin+0x5e>
 800db72:	b9b0      	cbnz	r0, 800dba2 <sin+0x72>
 800db74:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db78:	ed9d 0b00 	vldr	d0, [sp]
 800db7c:	2001      	movs	r0, #1
 800db7e:	e7e4      	b.n	800db4a <sin+0x1a>
 800db80:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db84:	ed9d 0b00 	vldr	d0, [sp]
 800db88:	f000 f95a 	bl	800de40 <__kernel_cos>
 800db8c:	e7e5      	b.n	800db5a <sin+0x2a>
 800db8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db92:	ed9d 0b00 	vldr	d0, [sp]
 800db96:	2001      	movs	r0, #1
 800db98:	f000 fc3e 	bl	800e418 <__kernel_sin>
 800db9c:	eeb1 0b40 	vneg.f64	d0, d0
 800dba0:	e7db      	b.n	800db5a <sin+0x2a>
 800dba2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dba6:	ed9d 0b00 	vldr	d0, [sp]
 800dbaa:	f000 f949 	bl	800de40 <__kernel_cos>
 800dbae:	e7f5      	b.n	800db9c <sin+0x6c>
	...
 800dbb8:	3fe921fb 	.word	0x3fe921fb
 800dbbc:	7fefffff 	.word	0x7fefffff

0800dbc0 <__ieee754_rem_pio2>:
 800dbc0:	b570      	push	{r4, r5, r6, lr}
 800dbc2:	eeb0 7b40 	vmov.f64	d7, d0
 800dbc6:	ee17 5a90 	vmov	r5, s15
 800dbca:	4b97      	ldr	r3, [pc, #604]	; (800de28 <__ieee754_rem_pio2+0x268>)
 800dbcc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dbd0:	429e      	cmp	r6, r3
 800dbd2:	b088      	sub	sp, #32
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	dc07      	bgt.n	800dbe8 <__ieee754_rem_pio2+0x28>
 800dbd8:	2200      	movs	r2, #0
 800dbda:	2300      	movs	r3, #0
 800dbdc:	ed84 0b00 	vstr	d0, [r4]
 800dbe0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	e01b      	b.n	800dc20 <__ieee754_rem_pio2+0x60>
 800dbe8:	4b90      	ldr	r3, [pc, #576]	; (800de2c <__ieee754_rem_pio2+0x26c>)
 800dbea:	429e      	cmp	r6, r3
 800dbec:	dc3b      	bgt.n	800dc66 <__ieee754_rem_pio2+0xa6>
 800dbee:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800dbf2:	2d00      	cmp	r5, #0
 800dbf4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800dde8 <__ieee754_rem_pio2+0x228>
 800dbf8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800dbfc:	dd19      	ble.n	800dc32 <__ieee754_rem_pio2+0x72>
 800dbfe:	ee30 7b46 	vsub.f64	d7, d0, d6
 800dc02:	429e      	cmp	r6, r3
 800dc04:	d00e      	beq.n	800dc24 <__ieee754_rem_pio2+0x64>
 800dc06:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800ddf0 <__ieee754_rem_pio2+0x230>
 800dc0a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800dc0e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dc12:	ed84 5b00 	vstr	d5, [r4]
 800dc16:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dc1a:	ed84 7b02 	vstr	d7, [r4, #8]
 800dc1e:	2001      	movs	r0, #1
 800dc20:	b008      	add	sp, #32
 800dc22:	bd70      	pop	{r4, r5, r6, pc}
 800dc24:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800ddf8 <__ieee754_rem_pio2+0x238>
 800dc28:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dc2c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800de00 <__ieee754_rem_pio2+0x240>
 800dc30:	e7eb      	b.n	800dc0a <__ieee754_rem_pio2+0x4a>
 800dc32:	429e      	cmp	r6, r3
 800dc34:	ee30 7b06 	vadd.f64	d7, d0, d6
 800dc38:	d00e      	beq.n	800dc58 <__ieee754_rem_pio2+0x98>
 800dc3a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800ddf0 <__ieee754_rem_pio2+0x230>
 800dc3e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800dc42:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dc46:	ed84 5b00 	vstr	d5, [r4]
 800dc4a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dc4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc52:	ed84 7b02 	vstr	d7, [r4, #8]
 800dc56:	e7e3      	b.n	800dc20 <__ieee754_rem_pio2+0x60>
 800dc58:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800ddf8 <__ieee754_rem_pio2+0x238>
 800dc5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dc60:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800de00 <__ieee754_rem_pio2+0x240>
 800dc64:	e7eb      	b.n	800dc3e <__ieee754_rem_pio2+0x7e>
 800dc66:	4b72      	ldr	r3, [pc, #456]	; (800de30 <__ieee754_rem_pio2+0x270>)
 800dc68:	429e      	cmp	r6, r3
 800dc6a:	dc6e      	bgt.n	800dd4a <__ieee754_rem_pio2+0x18a>
 800dc6c:	f000 fc2c 	bl	800e4c8 <fabs>
 800dc70:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dc74:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800de08 <__ieee754_rem_pio2+0x248>
 800dc78:	eea0 7b06 	vfma.f64	d7, d0, d6
 800dc7c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800dc80:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800dc84:	ee17 0a90 	vmov	r0, s15
 800dc88:	eeb1 4b45 	vneg.f64	d4, d5
 800dc8c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800dde8 <__ieee754_rem_pio2+0x228>
 800dc90:	eea5 0b47 	vfms.f64	d0, d5, d7
 800dc94:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800ddf0 <__ieee754_rem_pio2+0x230>
 800dc98:	281f      	cmp	r0, #31
 800dc9a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800dc9e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800dca2:	dc08      	bgt.n	800dcb6 <__ieee754_rem_pio2+0xf6>
 800dca4:	4b63      	ldr	r3, [pc, #396]	; (800de34 <__ieee754_rem_pio2+0x274>)
 800dca6:	1e42      	subs	r2, r0, #1
 800dca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcac:	42b3      	cmp	r3, r6
 800dcae:	d002      	beq.n	800dcb6 <__ieee754_rem_pio2+0xf6>
 800dcb0:	ed84 6b00 	vstr	d6, [r4]
 800dcb4:	e024      	b.n	800dd00 <__ieee754_rem_pio2+0x140>
 800dcb6:	ee16 3a90 	vmov	r3, s13
 800dcba:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800dcbe:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800dcc2:	2b10      	cmp	r3, #16
 800dcc4:	ea4f 5226 	mov.w	r2, r6, asr #20
 800dcc8:	ddf2      	ble.n	800dcb0 <__ieee754_rem_pio2+0xf0>
 800dcca:	eeb0 6b40 	vmov.f64	d6, d0
 800dcce:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800ddf8 <__ieee754_rem_pio2+0x238>
 800dcd2:	eea4 6b03 	vfma.f64	d6, d4, d3
 800dcd6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800dcda:	eea4 7b03 	vfma.f64	d7, d4, d3
 800dcde:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800de00 <__ieee754_rem_pio2+0x240>
 800dce2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800dce6:	ee36 3b47 	vsub.f64	d3, d6, d7
 800dcea:	ee13 3a90 	vmov	r3, s7
 800dcee:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800dcf2:	1ad3      	subs	r3, r2, r3
 800dcf4:	2b31      	cmp	r3, #49	; 0x31
 800dcf6:	dc17      	bgt.n	800dd28 <__ieee754_rem_pio2+0x168>
 800dcf8:	eeb0 0b46 	vmov.f64	d0, d6
 800dcfc:	ed84 3b00 	vstr	d3, [r4]
 800dd00:	ed94 6b00 	vldr	d6, [r4]
 800dd04:	2d00      	cmp	r5, #0
 800dd06:	ee30 0b46 	vsub.f64	d0, d0, d6
 800dd0a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800dd0e:	ed84 7b02 	vstr	d7, [r4, #8]
 800dd12:	da85      	bge.n	800dc20 <__ieee754_rem_pio2+0x60>
 800dd14:	eeb1 6b46 	vneg.f64	d6, d6
 800dd18:	ed84 6b00 	vstr	d6, [r4]
 800dd1c:	eeb1 7b47 	vneg.f64	d7, d7
 800dd20:	4240      	negs	r0, r0
 800dd22:	ed84 7b02 	vstr	d7, [r4, #8]
 800dd26:	e77b      	b.n	800dc20 <__ieee754_rem_pio2+0x60>
 800dd28:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800de10 <__ieee754_rem_pio2+0x250>
 800dd2c:	eeb0 0b46 	vmov.f64	d0, d6
 800dd30:	eea4 0b03 	vfma.f64	d0, d4, d3
 800dd34:	ee36 7b40 	vsub.f64	d7, d6, d0
 800dd38:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800de18 <__ieee754_rem_pio2+0x258>
 800dd3c:	eea4 7b03 	vfma.f64	d7, d4, d3
 800dd40:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800dd44:	ee30 6b47 	vsub.f64	d6, d0, d7
 800dd48:	e7b2      	b.n	800dcb0 <__ieee754_rem_pio2+0xf0>
 800dd4a:	4b3b      	ldr	r3, [pc, #236]	; (800de38 <__ieee754_rem_pio2+0x278>)
 800dd4c:	429e      	cmp	r6, r3
 800dd4e:	dd06      	ble.n	800dd5e <__ieee754_rem_pio2+0x19e>
 800dd50:	ee30 7b40 	vsub.f64	d7, d0, d0
 800dd54:	ed80 7b02 	vstr	d7, [r0, #8]
 800dd58:	ed80 7b00 	vstr	d7, [r0]
 800dd5c:	e742      	b.n	800dbe4 <__ieee754_rem_pio2+0x24>
 800dd5e:	1532      	asrs	r2, r6, #20
 800dd60:	ee10 0a10 	vmov	r0, s0
 800dd64:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800dd68:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800dd6c:	ec41 0b17 	vmov	d7, r0, r1
 800dd70:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800dd74:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800de20 <__ieee754_rem_pio2+0x260>
 800dd78:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800dd7c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dd80:	ed8d 6b02 	vstr	d6, [sp, #8]
 800dd84:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dd88:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800dd8c:	a902      	add	r1, sp, #8
 800dd8e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800dd92:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dd96:	ed8d 6b04 	vstr	d6, [sp, #16]
 800dd9a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dd9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dda2:	2603      	movs	r6, #3
 800dda4:	4608      	mov	r0, r1
 800dda6:	ed91 7b04 	vldr	d7, [r1, #16]
 800ddaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ddae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb2:	4633      	mov	r3, r6
 800ddb4:	f1a1 0108 	sub.w	r1, r1, #8
 800ddb8:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800ddbc:	d0f3      	beq.n	800dda6 <__ieee754_rem_pio2+0x1e6>
 800ddbe:	491f      	ldr	r1, [pc, #124]	; (800de3c <__ieee754_rem_pio2+0x27c>)
 800ddc0:	9101      	str	r1, [sp, #4]
 800ddc2:	2102      	movs	r1, #2
 800ddc4:	9100      	str	r1, [sp, #0]
 800ddc6:	4621      	mov	r1, r4
 800ddc8:	f000 f8a6 	bl	800df18 <__kernel_rem_pio2>
 800ddcc:	2d00      	cmp	r5, #0
 800ddce:	f6bf af27 	bge.w	800dc20 <__ieee754_rem_pio2+0x60>
 800ddd2:	ed94 7b00 	vldr	d7, [r4]
 800ddd6:	eeb1 7b47 	vneg.f64	d7, d7
 800ddda:	ed84 7b00 	vstr	d7, [r4]
 800ddde:	ed94 7b02 	vldr	d7, [r4, #8]
 800dde2:	e79b      	b.n	800dd1c <__ieee754_rem_pio2+0x15c>
 800dde4:	f3af 8000 	nop.w
 800dde8:	54400000 	.word	0x54400000
 800ddec:	3ff921fb 	.word	0x3ff921fb
 800ddf0:	1a626331 	.word	0x1a626331
 800ddf4:	3dd0b461 	.word	0x3dd0b461
 800ddf8:	1a600000 	.word	0x1a600000
 800ddfc:	3dd0b461 	.word	0x3dd0b461
 800de00:	2e037073 	.word	0x2e037073
 800de04:	3ba3198a 	.word	0x3ba3198a
 800de08:	6dc9c883 	.word	0x6dc9c883
 800de0c:	3fe45f30 	.word	0x3fe45f30
 800de10:	2e000000 	.word	0x2e000000
 800de14:	3ba3198a 	.word	0x3ba3198a
 800de18:	252049c1 	.word	0x252049c1
 800de1c:	397b839a 	.word	0x397b839a
 800de20:	00000000 	.word	0x00000000
 800de24:	41700000 	.word	0x41700000
 800de28:	3fe921fb 	.word	0x3fe921fb
 800de2c:	4002d97b 	.word	0x4002d97b
 800de30:	413921fb 	.word	0x413921fb
 800de34:	08011984 	.word	0x08011984
 800de38:	7fefffff 	.word	0x7fefffff
 800de3c:	08011a04 	.word	0x08011a04

0800de40 <__kernel_cos>:
 800de40:	ee10 1a90 	vmov	r1, s1
 800de44:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800de48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800de4c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800de50:	da05      	bge.n	800de5e <__kernel_cos+0x1e>
 800de52:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800de56:	ee17 3a90 	vmov	r3, s15
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d03d      	beq.n	800deda <__kernel_cos+0x9a>
 800de5e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800de62:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800dee0 <__kernel_cos+0xa0>
 800de66:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800dee8 <__kernel_cos+0xa8>
 800de6a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800de6e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800def0 <__kernel_cos+0xb0>
 800de72:	eea6 7b03 	vfma.f64	d7, d6, d3
 800de76:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800def8 <__kernel_cos+0xb8>
 800de7a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800de7e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800df00 <__kernel_cos+0xc0>
 800de82:	4b23      	ldr	r3, [pc, #140]	; (800df10 <__kernel_cos+0xd0>)
 800de84:	eea6 7b03 	vfma.f64	d7, d6, d3
 800de88:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800df08 <__kernel_cos+0xc8>
 800de8c:	4299      	cmp	r1, r3
 800de8e:	eea7 6b03 	vfma.f64	d6, d7, d3
 800de92:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800de96:	ee26 5b03 	vmul.f64	d5, d6, d3
 800de9a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800de9e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800dea2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800dea6:	dc04      	bgt.n	800deb2 <__kernel_cos+0x72>
 800dea8:	ee37 6b46 	vsub.f64	d6, d7, d6
 800deac:	ee34 0b46 	vsub.f64	d0, d4, d6
 800deb0:	4770      	bx	lr
 800deb2:	4b18      	ldr	r3, [pc, #96]	; (800df14 <__kernel_cos+0xd4>)
 800deb4:	4299      	cmp	r1, r3
 800deb6:	dc0d      	bgt.n	800ded4 <__kernel_cos+0x94>
 800deb8:	2200      	movs	r2, #0
 800deba:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800debe:	ec43 2b15 	vmov	d5, r2, r3
 800dec2:	ee34 0b45 	vsub.f64	d0, d4, d5
 800dec6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800deca:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dece:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ded2:	4770      	bx	lr
 800ded4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ded8:	e7f3      	b.n	800dec2 <__kernel_cos+0x82>
 800deda:	eeb0 0b44 	vmov.f64	d0, d4
 800dede:	4770      	bx	lr
 800dee0:	be8838d4 	.word	0xbe8838d4
 800dee4:	bda8fae9 	.word	0xbda8fae9
 800dee8:	bdb4b1c4 	.word	0xbdb4b1c4
 800deec:	3e21ee9e 	.word	0x3e21ee9e
 800def0:	809c52ad 	.word	0x809c52ad
 800def4:	be927e4f 	.word	0xbe927e4f
 800def8:	19cb1590 	.word	0x19cb1590
 800defc:	3efa01a0 	.word	0x3efa01a0
 800df00:	16c15177 	.word	0x16c15177
 800df04:	bf56c16c 	.word	0xbf56c16c
 800df08:	5555554c 	.word	0x5555554c
 800df0c:	3fa55555 	.word	0x3fa55555
 800df10:	3fd33332 	.word	0x3fd33332
 800df14:	3fe90000 	.word	0x3fe90000

0800df18 <__kernel_rem_pio2>:
 800df18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df1c:	ed2d 8b06 	vpush	{d8-d10}
 800df20:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800df24:	469b      	mov	fp, r3
 800df26:	460f      	mov	r7, r1
 800df28:	4bcf      	ldr	r3, [pc, #828]	; (800e268 <__kernel_rem_pio2+0x350>)
 800df2a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800df2c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800df30:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800df34:	9000      	str	r0, [sp, #0]
 800df36:	f112 0f14 	cmn.w	r2, #20
 800df3a:	bfa8      	it	ge
 800df3c:	2318      	movge	r3, #24
 800df3e:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 800df42:	bfb8      	it	lt
 800df44:	2300      	movlt	r3, #0
 800df46:	f06f 0417 	mvn.w	r4, #23
 800df4a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800e250 <__kernel_rem_pio2+0x338>
 800df4e:	bfa4      	itt	ge
 800df50:	f1a2 0a03 	subge.w	sl, r2, #3
 800df54:	fb9a f3f3 	sdivge	r3, sl, r3
 800df58:	fb03 4404 	mla	r4, r3, r4, r4
 800df5c:	1a5d      	subs	r5, r3, r1
 800df5e:	4414      	add	r4, r2
 800df60:	eb09 0601 	add.w	r6, r9, r1
 800df64:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800df68:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800df6c:	2200      	movs	r2, #0
 800df6e:	42b2      	cmp	r2, r6
 800df70:	dd12      	ble.n	800df98 <__kernel_rem_pio2+0x80>
 800df72:	aa18      	add	r2, sp, #96	; 0x60
 800df74:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800df78:	460e      	mov	r6, r1
 800df7a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800df7e:	f1cb 0a01 	rsb	sl, fp, #1
 800df82:	eb0a 0006 	add.w	r0, sl, r6
 800df86:	4581      	cmp	r9, r0
 800df88:	db25      	blt.n	800dfd6 <__kernel_rem_pio2+0xbe>
 800df8a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800e250 <__kernel_rem_pio2+0x338>
 800df8e:	f8dd e000 	ldr.w	lr, [sp]
 800df92:	4615      	mov	r5, r2
 800df94:	2000      	movs	r0, #0
 800df96:	e015      	b.n	800dfc4 <__kernel_rem_pio2+0xac>
 800df98:	42d5      	cmn	r5, r2
 800df9a:	d409      	bmi.n	800dfb0 <__kernel_rem_pio2+0x98>
 800df9c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800dfa0:	ee07 0a90 	vmov	s15, r0
 800dfa4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dfa8:	eca8 7b02 	vstmia	r8!, {d7}
 800dfac:	3201      	adds	r2, #1
 800dfae:	e7de      	b.n	800df6e <__kernel_rem_pio2+0x56>
 800dfb0:	eeb0 7b46 	vmov.f64	d7, d6
 800dfb4:	e7f8      	b.n	800dfa8 <__kernel_rem_pio2+0x90>
 800dfb6:	ecbe 5b02 	vldmia	lr!, {d5}
 800dfba:	ed95 6b00 	vldr	d6, [r5]
 800dfbe:	3001      	adds	r0, #1
 800dfc0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dfc4:	4288      	cmp	r0, r1
 800dfc6:	f1a5 0508 	sub.w	r5, r5, #8
 800dfca:	ddf4      	ble.n	800dfb6 <__kernel_rem_pio2+0x9e>
 800dfcc:	eca8 7b02 	vstmia	r8!, {d7}
 800dfd0:	3208      	adds	r2, #8
 800dfd2:	3601      	adds	r6, #1
 800dfd4:	e7d5      	b.n	800df82 <__kernel_rem_pio2+0x6a>
 800dfd6:	aa04      	add	r2, sp, #16
 800dfd8:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800e258 <__kernel_rem_pio2+0x340>
 800dfdc:	ed9f aba0 	vldr	d10, [pc, #640]	; 800e260 <__kernel_rem_pio2+0x348>
 800dfe0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800dfe4:	9201      	str	r2, [sp, #4]
 800dfe6:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800dfea:	464e      	mov	r6, r9
 800dfec:	ab90      	add	r3, sp, #576	; 0x240
 800dfee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dff2:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800dff6:	ab04      	add	r3, sp, #16
 800dff8:	4618      	mov	r0, r3
 800dffa:	4632      	mov	r2, r6
 800dffc:	2a00      	cmp	r2, #0
 800dffe:	dc4e      	bgt.n	800e09e <__kernel_rem_pio2+0x186>
 800e000:	4620      	mov	r0, r4
 800e002:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800e006:	f000 fadf 	bl	800e5c8 <scalbn>
 800e00a:	eeb0 8b40 	vmov.f64	d8, d0
 800e00e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800e012:	ee28 0b00 	vmul.f64	d0, d8, d0
 800e016:	f000 fa63 	bl	800e4e0 <floor>
 800e01a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800e01e:	eea0 8b47 	vfms.f64	d8, d0, d7
 800e022:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800e026:	2c00      	cmp	r4, #0
 800e028:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800e02c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800e030:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e034:	ee17 8a90 	vmov	r8, s15
 800e038:	dd46      	ble.n	800e0c8 <__kernel_rem_pio2+0x1b0>
 800e03a:	1e70      	subs	r0, r6, #1
 800e03c:	aa04      	add	r2, sp, #16
 800e03e:	f1c4 0c18 	rsb	ip, r4, #24
 800e042:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800e046:	fa45 f20c 	asr.w	r2, r5, ip
 800e04a:	4490      	add	r8, r2
 800e04c:	fa02 f20c 	lsl.w	r2, r2, ip
 800e050:	1aad      	subs	r5, r5, r2
 800e052:	aa04      	add	r2, sp, #16
 800e054:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800e058:	f1c4 0217 	rsb	r2, r4, #23
 800e05c:	4115      	asrs	r5, r2
 800e05e:	2d00      	cmp	r5, #0
 800e060:	dd41      	ble.n	800e0e6 <__kernel_rem_pio2+0x1ce>
 800e062:	f04f 0c00 	mov.w	ip, #0
 800e066:	f108 0801 	add.w	r8, r8, #1
 800e06a:	4660      	mov	r0, ip
 800e06c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800e070:	4566      	cmp	r6, ip
 800e072:	dc69      	bgt.n	800e148 <__kernel_rem_pio2+0x230>
 800e074:	2c00      	cmp	r4, #0
 800e076:	dd03      	ble.n	800e080 <__kernel_rem_pio2+0x168>
 800e078:	2c01      	cmp	r4, #1
 800e07a:	d076      	beq.n	800e16a <__kernel_rem_pio2+0x252>
 800e07c:	2c02      	cmp	r4, #2
 800e07e:	d07f      	beq.n	800e180 <__kernel_rem_pio2+0x268>
 800e080:	2d02      	cmp	r5, #2
 800e082:	d130      	bne.n	800e0e6 <__kernel_rem_pio2+0x1ce>
 800e084:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e088:	ee30 8b48 	vsub.f64	d8, d0, d8
 800e08c:	b358      	cbz	r0, 800e0e6 <__kernel_rem_pio2+0x1ce>
 800e08e:	4620      	mov	r0, r4
 800e090:	9102      	str	r1, [sp, #8]
 800e092:	f000 fa99 	bl	800e5c8 <scalbn>
 800e096:	9902      	ldr	r1, [sp, #8]
 800e098:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e09c:	e023      	b.n	800e0e6 <__kernel_rem_pio2+0x1ce>
 800e09e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800e0a2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e0a6:	3a01      	subs	r2, #1
 800e0a8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800e0ac:	ad68      	add	r5, sp, #416	; 0x1a0
 800e0ae:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800e0b2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e0b6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800e0ba:	eca0 0a01 	vstmia	r0!, {s0}
 800e0be:	ed95 0b00 	vldr	d0, [r5]
 800e0c2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e0c6:	e799      	b.n	800dffc <__kernel_rem_pio2+0xe4>
 800e0c8:	d105      	bne.n	800e0d6 <__kernel_rem_pio2+0x1be>
 800e0ca:	1e72      	subs	r2, r6, #1
 800e0cc:	a804      	add	r0, sp, #16
 800e0ce:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800e0d2:	15ed      	asrs	r5, r5, #23
 800e0d4:	e7c3      	b.n	800e05e <__kernel_rem_pio2+0x146>
 800e0d6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e0da:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0e2:	da2f      	bge.n	800e144 <__kernel_rem_pio2+0x22c>
 800e0e4:	2500      	movs	r5, #0
 800e0e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ee:	f040 8087 	bne.w	800e200 <__kernel_rem_pio2+0x2e8>
 800e0f2:	1e73      	subs	r3, r6, #1
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f04f 0c00 	mov.w	ip, #0
 800e0fa:	4548      	cmp	r0, r9
 800e0fc:	da47      	bge.n	800e18e <__kernel_rem_pio2+0x276>
 800e0fe:	f1bc 0f00 	cmp.w	ip, #0
 800e102:	d070      	beq.n	800e1e6 <__kernel_rem_pio2+0x2ce>
 800e104:	aa04      	add	r2, sp, #16
 800e106:	3c18      	subs	r4, #24
 800e108:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e10c:	2a00      	cmp	r2, #0
 800e10e:	d075      	beq.n	800e1fc <__kernel_rem_pio2+0x2e4>
 800e110:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e114:	4620      	mov	r0, r4
 800e116:	9300      	str	r3, [sp, #0]
 800e118:	f000 fa56 	bl	800e5c8 <scalbn>
 800e11c:	9b00      	ldr	r3, [sp, #0]
 800e11e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800e258 <__kernel_rem_pio2+0x340>
 800e122:	461a      	mov	r2, r3
 800e124:	2a00      	cmp	r2, #0
 800e126:	f280 80ac 	bge.w	800e282 <__kernel_rem_pio2+0x36a>
 800e12a:	4619      	mov	r1, r3
 800e12c:	2000      	movs	r0, #0
 800e12e:	2900      	cmp	r1, #0
 800e130:	f2c0 80cd 	blt.w	800e2ce <__kernel_rem_pio2+0x3b6>
 800e134:	aa68      	add	r2, sp, #416	; 0x1a0
 800e136:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800e13a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800e250 <__kernel_rem_pio2+0x338>
 800e13e:	4e4b      	ldr	r6, [pc, #300]	; (800e26c <__kernel_rem_pio2+0x354>)
 800e140:	2200      	movs	r2, #0
 800e142:	e0b8      	b.n	800e2b6 <__kernel_rem_pio2+0x39e>
 800e144:	2502      	movs	r5, #2
 800e146:	e78c      	b.n	800e062 <__kernel_rem_pio2+0x14a>
 800e148:	681a      	ldr	r2, [r3, #0]
 800e14a:	b948      	cbnz	r0, 800e160 <__kernel_rem_pio2+0x248>
 800e14c:	b11a      	cbz	r2, 800e156 <__kernel_rem_pio2+0x23e>
 800e14e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800e152:	601a      	str	r2, [r3, #0]
 800e154:	2201      	movs	r2, #1
 800e156:	f10c 0c01 	add.w	ip, ip, #1
 800e15a:	3304      	adds	r3, #4
 800e15c:	4610      	mov	r0, r2
 800e15e:	e787      	b.n	800e070 <__kernel_rem_pio2+0x158>
 800e160:	ebae 0202 	sub.w	r2, lr, r2
 800e164:	601a      	str	r2, [r3, #0]
 800e166:	4602      	mov	r2, r0
 800e168:	e7f5      	b.n	800e156 <__kernel_rem_pio2+0x23e>
 800e16a:	1e72      	subs	r2, r6, #1
 800e16c:	ab04      	add	r3, sp, #16
 800e16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e172:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e176:	f10d 0c10 	add.w	ip, sp, #16
 800e17a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800e17e:	e77f      	b.n	800e080 <__kernel_rem_pio2+0x168>
 800e180:	1e72      	subs	r2, r6, #1
 800e182:	ab04      	add	r3, sp, #16
 800e184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e188:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e18c:	e7f3      	b.n	800e176 <__kernel_rem_pio2+0x25e>
 800e18e:	aa04      	add	r2, sp, #16
 800e190:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800e194:	3801      	subs	r0, #1
 800e196:	ea4c 0c02 	orr.w	ip, ip, r2
 800e19a:	e7ae      	b.n	800e0fa <__kernel_rem_pio2+0x1e2>
 800e19c:	3001      	adds	r0, #1
 800e19e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e1a2:	2a00      	cmp	r2, #0
 800e1a4:	d0fa      	beq.n	800e19c <__kernel_rem_pio2+0x284>
 800e1a6:	eb06 020b 	add.w	r2, r6, fp
 800e1aa:	ad18      	add	r5, sp, #96	; 0x60
 800e1ac:	1c73      	adds	r3, r6, #1
 800e1ae:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800e1b2:	4406      	add	r6, r0
 800e1b4:	429e      	cmp	r6, r3
 800e1b6:	f6ff af19 	blt.w	800dfec <__kernel_rem_pio2+0xd4>
 800e1ba:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800e1be:	9d00      	ldr	r5, [sp, #0]
 800e1c0:	ee07 0a90 	vmov	s15, r0
 800e1c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	eca2 7b02 	vstmia	r2!, {d7}
 800e1ce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e250 <__kernel_rem_pio2+0x338>
 800e1d2:	4694      	mov	ip, r2
 800e1d4:	4288      	cmp	r0, r1
 800e1d6:	dd09      	ble.n	800e1ec <__kernel_rem_pio2+0x2d4>
 800e1d8:	a868      	add	r0, sp, #416	; 0x1a0
 800e1da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800e1de:	ed80 7b00 	vstr	d7, [r0]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	e7e6      	b.n	800e1b4 <__kernel_rem_pio2+0x29c>
 800e1e6:	9b01      	ldr	r3, [sp, #4]
 800e1e8:	2001      	movs	r0, #1
 800e1ea:	e7d8      	b.n	800e19e <__kernel_rem_pio2+0x286>
 800e1ec:	ecb5 5b02 	vldmia	r5!, {d5}
 800e1f0:	ed3c 6b02 	vldmdb	ip!, {d6}
 800e1f4:	3001      	adds	r0, #1
 800e1f6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e1fa:	e7eb      	b.n	800e1d4 <__kernel_rem_pio2+0x2bc>
 800e1fc:	3b01      	subs	r3, #1
 800e1fe:	e781      	b.n	800e104 <__kernel_rem_pio2+0x1ec>
 800e200:	4260      	negs	r0, r4
 800e202:	eeb0 0b48 	vmov.f64	d0, d8
 800e206:	f000 f9df 	bl	800e5c8 <scalbn>
 800e20a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800e260 <__kernel_rem_pio2+0x348>
 800e20e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e216:	db2b      	blt.n	800e270 <__kernel_rem_pio2+0x358>
 800e218:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800e258 <__kernel_rem_pio2+0x340>
 800e21c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e220:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e224:	aa04      	add	r2, sp, #16
 800e226:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e22a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e22e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e232:	a904      	add	r1, sp, #16
 800e234:	ee10 3a10 	vmov	r3, s0
 800e238:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e23c:	ee17 2a10 	vmov	r2, s14
 800e240:	1c73      	adds	r3, r6, #1
 800e242:	3418      	adds	r4, #24
 800e244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e248:	e762      	b.n	800e110 <__kernel_rem_pio2+0x1f8>
 800e24a:	bf00      	nop
 800e24c:	f3af 8000 	nop.w
	...
 800e25c:	3e700000 	.word	0x3e700000
 800e260:	00000000 	.word	0x00000000
 800e264:	41700000 	.word	0x41700000
 800e268:	08011b50 	.word	0x08011b50
 800e26c:	08011b10 	.word	0x08011b10
 800e270:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e274:	aa04      	add	r2, sp, #16
 800e276:	ee10 3a10 	vmov	r3, s0
 800e27a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e27e:	4633      	mov	r3, r6
 800e280:	e746      	b.n	800e110 <__kernel_rem_pio2+0x1f8>
 800e282:	a804      	add	r0, sp, #16
 800e284:	a968      	add	r1, sp, #416	; 0x1a0
 800e286:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800e28a:	9000      	str	r0, [sp, #0]
 800e28c:	ee07 0a90 	vmov	s15, r0
 800e290:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e294:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e298:	3a01      	subs	r2, #1
 800e29a:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e29e:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e2a2:	ed81 7b00 	vstr	d7, [r1]
 800e2a6:	e73d      	b.n	800e124 <__kernel_rem_pio2+0x20c>
 800e2a8:	ecb6 5b02 	vldmia	r6!, {d5}
 800e2ac:	ecb4 6b02 	vldmia	r4!, {d6}
 800e2b0:	3201      	adds	r2, #1
 800e2b2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e2b6:	454a      	cmp	r2, r9
 800e2b8:	dc01      	bgt.n	800e2be <__kernel_rem_pio2+0x3a6>
 800e2ba:	4290      	cmp	r0, r2
 800e2bc:	daf4      	bge.n	800e2a8 <__kernel_rem_pio2+0x390>
 800e2be:	aa40      	add	r2, sp, #256	; 0x100
 800e2c0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e2c4:	ed82 7b00 	vstr	d7, [r2]
 800e2c8:	3901      	subs	r1, #1
 800e2ca:	3001      	adds	r0, #1
 800e2cc:	e72f      	b.n	800e12e <__kernel_rem_pio2+0x216>
 800e2ce:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800e2d0:	2a02      	cmp	r2, #2
 800e2d2:	dc0a      	bgt.n	800e2ea <__kernel_rem_pio2+0x3d2>
 800e2d4:	2a00      	cmp	r2, #0
 800e2d6:	dc5a      	bgt.n	800e38e <__kernel_rem_pio2+0x476>
 800e2d8:	d039      	beq.n	800e34e <__kernel_rem_pio2+0x436>
 800e2da:	f008 0007 	and.w	r0, r8, #7
 800e2de:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800e2e2:	ecbd 8b06 	vpop	{d8-d10}
 800e2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ea:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800e2ec:	2a03      	cmp	r2, #3
 800e2ee:	d1f4      	bne.n	800e2da <__kernel_rem_pio2+0x3c2>
 800e2f0:	aa40      	add	r2, sp, #256	; 0x100
 800e2f2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e2f6:	4611      	mov	r1, r2
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	f1a1 0108 	sub.w	r1, r1, #8
 800e300:	dc52      	bgt.n	800e3a8 <__kernel_rem_pio2+0x490>
 800e302:	4619      	mov	r1, r3
 800e304:	2901      	cmp	r1, #1
 800e306:	f1a2 0208 	sub.w	r2, r2, #8
 800e30a:	dc5d      	bgt.n	800e3c8 <__kernel_rem_pio2+0x4b0>
 800e30c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800e410 <__kernel_rem_pio2+0x4f8>
 800e310:	2b01      	cmp	r3, #1
 800e312:	dc69      	bgt.n	800e3e8 <__kernel_rem_pio2+0x4d0>
 800e314:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800e318:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800e31c:	2d00      	cmp	r5, #0
 800e31e:	d16c      	bne.n	800e3fa <__kernel_rem_pio2+0x4e2>
 800e320:	ed87 5b00 	vstr	d5, [r7]
 800e324:	ed87 6b02 	vstr	d6, [r7, #8]
 800e328:	ed87 7b04 	vstr	d7, [r7, #16]
 800e32c:	e7d5      	b.n	800e2da <__kernel_rem_pio2+0x3c2>
 800e32e:	aa40      	add	r2, sp, #256	; 0x100
 800e330:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e334:	ed92 6b00 	vldr	d6, [r2]
 800e338:	3b01      	subs	r3, #1
 800e33a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e33e:	2b00      	cmp	r3, #0
 800e340:	daf5      	bge.n	800e32e <__kernel_rem_pio2+0x416>
 800e342:	b10d      	cbz	r5, 800e348 <__kernel_rem_pio2+0x430>
 800e344:	eeb1 7b47 	vneg.f64	d7, d7
 800e348:	ed87 7b00 	vstr	d7, [r7]
 800e34c:	e7c5      	b.n	800e2da <__kernel_rem_pio2+0x3c2>
 800e34e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e410 <__kernel_rem_pio2+0x4f8>
 800e352:	e7f4      	b.n	800e33e <__kernel_rem_pio2+0x426>
 800e354:	a940      	add	r1, sp, #256	; 0x100
 800e356:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e35a:	ed91 7b00 	vldr	d7, [r1]
 800e35e:	3a01      	subs	r2, #1
 800e360:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e364:	2a00      	cmp	r2, #0
 800e366:	daf5      	bge.n	800e354 <__kernel_rem_pio2+0x43c>
 800e368:	b1ad      	cbz	r5, 800e396 <__kernel_rem_pio2+0x47e>
 800e36a:	eeb1 7b46 	vneg.f64	d7, d6
 800e36e:	ed87 7b00 	vstr	d7, [r7]
 800e372:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800e376:	a942      	add	r1, sp, #264	; 0x108
 800e378:	2201      	movs	r2, #1
 800e37a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e37e:	4293      	cmp	r3, r2
 800e380:	da0c      	bge.n	800e39c <__kernel_rem_pio2+0x484>
 800e382:	b10d      	cbz	r5, 800e388 <__kernel_rem_pio2+0x470>
 800e384:	eeb1 7b47 	vneg.f64	d7, d7
 800e388:	ed87 7b02 	vstr	d7, [r7, #8]
 800e38c:	e7a5      	b.n	800e2da <__kernel_rem_pio2+0x3c2>
 800e38e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e410 <__kernel_rem_pio2+0x4f8>
 800e392:	461a      	mov	r2, r3
 800e394:	e7e6      	b.n	800e364 <__kernel_rem_pio2+0x44c>
 800e396:	eeb0 7b46 	vmov.f64	d7, d6
 800e39a:	e7e8      	b.n	800e36e <__kernel_rem_pio2+0x456>
 800e39c:	ecb1 6b02 	vldmia	r1!, {d6}
 800e3a0:	3201      	adds	r2, #1
 800e3a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e3a6:	e7ea      	b.n	800e37e <__kernel_rem_pio2+0x466>
 800e3a8:	ed91 7b00 	vldr	d7, [r1]
 800e3ac:	ed91 5b02 	vldr	d5, [r1, #8]
 800e3b0:	3801      	subs	r0, #1
 800e3b2:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e3b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e3ba:	ed81 6b00 	vstr	d6, [r1]
 800e3be:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e3c2:	ed81 7b02 	vstr	d7, [r1, #8]
 800e3c6:	e798      	b.n	800e2fa <__kernel_rem_pio2+0x3e2>
 800e3c8:	ed92 7b00 	vldr	d7, [r2]
 800e3cc:	ed92 5b02 	vldr	d5, [r2, #8]
 800e3d0:	3901      	subs	r1, #1
 800e3d2:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e3d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e3da:	ed82 6b00 	vstr	d6, [r2]
 800e3de:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e3e2:	ed82 7b02 	vstr	d7, [r2, #8]
 800e3e6:	e78d      	b.n	800e304 <__kernel_rem_pio2+0x3ec>
 800e3e8:	aa40      	add	r2, sp, #256	; 0x100
 800e3ea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e3ee:	ed92 6b00 	vldr	d6, [r2]
 800e3f2:	3b01      	subs	r3, #1
 800e3f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e3f8:	e78a      	b.n	800e310 <__kernel_rem_pio2+0x3f8>
 800e3fa:	eeb1 5b45 	vneg.f64	d5, d5
 800e3fe:	eeb1 6b46 	vneg.f64	d6, d6
 800e402:	ed87 5b00 	vstr	d5, [r7]
 800e406:	eeb1 7b47 	vneg.f64	d7, d7
 800e40a:	ed87 6b02 	vstr	d6, [r7, #8]
 800e40e:	e78b      	b.n	800e328 <__kernel_rem_pio2+0x410>
	...

0800e418 <__kernel_sin>:
 800e418:	ee10 3a90 	vmov	r3, s1
 800e41c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e420:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e424:	da04      	bge.n	800e430 <__kernel_sin+0x18>
 800e426:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e42a:	ee17 3a90 	vmov	r3, s15
 800e42e:	b35b      	cbz	r3, 800e488 <__kernel_sin+0x70>
 800e430:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e434:	ee20 5b06 	vmul.f64	d5, d0, d6
 800e438:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800e490 <__kernel_sin+0x78>
 800e43c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e498 <__kernel_sin+0x80>
 800e440:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e444:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e4a0 <__kernel_sin+0x88>
 800e448:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e44c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e4a8 <__kernel_sin+0x90>
 800e450:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e454:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e4b0 <__kernel_sin+0x98>
 800e458:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e45c:	b930      	cbnz	r0, 800e46c <__kernel_sin+0x54>
 800e45e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e4b8 <__kernel_sin+0xa0>
 800e462:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e466:	eea4 0b05 	vfma.f64	d0, d4, d5
 800e46a:	4770      	bx	lr
 800e46c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800e470:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e474:	eea1 7b04 	vfma.f64	d7, d1, d4
 800e478:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800e47c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800e4c0 <__kernel_sin+0xa8>
 800e480:	eea5 1b07 	vfma.f64	d1, d5, d7
 800e484:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e488:	4770      	bx	lr
 800e48a:	bf00      	nop
 800e48c:	f3af 8000 	nop.w
 800e490:	5acfd57c 	.word	0x5acfd57c
 800e494:	3de5d93a 	.word	0x3de5d93a
 800e498:	8a2b9ceb 	.word	0x8a2b9ceb
 800e49c:	be5ae5e6 	.word	0xbe5ae5e6
 800e4a0:	57b1fe7d 	.word	0x57b1fe7d
 800e4a4:	3ec71de3 	.word	0x3ec71de3
 800e4a8:	19c161d5 	.word	0x19c161d5
 800e4ac:	bf2a01a0 	.word	0xbf2a01a0
 800e4b0:	1110f8a6 	.word	0x1110f8a6
 800e4b4:	3f811111 	.word	0x3f811111
 800e4b8:	55555549 	.word	0x55555549
 800e4bc:	bfc55555 	.word	0xbfc55555
 800e4c0:	55555549 	.word	0x55555549
 800e4c4:	3fc55555 	.word	0x3fc55555

0800e4c8 <fabs>:
 800e4c8:	ec51 0b10 	vmov	r0, r1, d0
 800e4cc:	ee10 2a10 	vmov	r2, s0
 800e4d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e4d4:	ec43 2b10 	vmov	d0, r2, r3
 800e4d8:	4770      	bx	lr
 800e4da:	0000      	movs	r0, r0
 800e4dc:	0000      	movs	r0, r0
	...

0800e4e0 <floor>:
 800e4e0:	ee10 1a90 	vmov	r1, s1
 800e4e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e4e8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e4ec:	2b13      	cmp	r3, #19
 800e4ee:	b530      	push	{r4, r5, lr}
 800e4f0:	ee10 0a10 	vmov	r0, s0
 800e4f4:	ee10 5a10 	vmov	r5, s0
 800e4f8:	dc31      	bgt.n	800e55e <floor+0x7e>
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	da15      	bge.n	800e52a <floor+0x4a>
 800e4fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e5b8 <floor+0xd8>
 800e502:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e506:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e50e:	dd07      	ble.n	800e520 <floor+0x40>
 800e510:	2900      	cmp	r1, #0
 800e512:	da4e      	bge.n	800e5b2 <floor+0xd2>
 800e514:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e518:	4318      	orrs	r0, r3
 800e51a:	d001      	beq.n	800e520 <floor+0x40>
 800e51c:	4928      	ldr	r1, [pc, #160]	; (800e5c0 <floor+0xe0>)
 800e51e:	2000      	movs	r0, #0
 800e520:	460b      	mov	r3, r1
 800e522:	4602      	mov	r2, r0
 800e524:	ec43 2b10 	vmov	d0, r2, r3
 800e528:	e020      	b.n	800e56c <floor+0x8c>
 800e52a:	4a26      	ldr	r2, [pc, #152]	; (800e5c4 <floor+0xe4>)
 800e52c:	411a      	asrs	r2, r3
 800e52e:	ea01 0402 	and.w	r4, r1, r2
 800e532:	4304      	orrs	r4, r0
 800e534:	d01a      	beq.n	800e56c <floor+0x8c>
 800e536:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e5b8 <floor+0xd8>
 800e53a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e53e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e546:	ddeb      	ble.n	800e520 <floor+0x40>
 800e548:	2900      	cmp	r1, #0
 800e54a:	bfbe      	ittt	lt
 800e54c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800e550:	fa40 f303 	asrlt.w	r3, r0, r3
 800e554:	18c9      	addlt	r1, r1, r3
 800e556:	ea21 0102 	bic.w	r1, r1, r2
 800e55a:	2000      	movs	r0, #0
 800e55c:	e7e0      	b.n	800e520 <floor+0x40>
 800e55e:	2b33      	cmp	r3, #51	; 0x33
 800e560:	dd05      	ble.n	800e56e <floor+0x8e>
 800e562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e566:	d101      	bne.n	800e56c <floor+0x8c>
 800e568:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e56c:	bd30      	pop	{r4, r5, pc}
 800e56e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e576:	40e2      	lsrs	r2, r4
 800e578:	4202      	tst	r2, r0
 800e57a:	d0f7      	beq.n	800e56c <floor+0x8c>
 800e57c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800e5b8 <floor+0xd8>
 800e580:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e584:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e58c:	ddc8      	ble.n	800e520 <floor+0x40>
 800e58e:	2900      	cmp	r1, #0
 800e590:	da02      	bge.n	800e598 <floor+0xb8>
 800e592:	2b14      	cmp	r3, #20
 800e594:	d103      	bne.n	800e59e <floor+0xbe>
 800e596:	3101      	adds	r1, #1
 800e598:	ea20 0002 	bic.w	r0, r0, r2
 800e59c:	e7c0      	b.n	800e520 <floor+0x40>
 800e59e:	2401      	movs	r4, #1
 800e5a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e5a4:	fa04 f303 	lsl.w	r3, r4, r3
 800e5a8:	4418      	add	r0, r3
 800e5aa:	42a8      	cmp	r0, r5
 800e5ac:	bf38      	it	cc
 800e5ae:	1909      	addcc	r1, r1, r4
 800e5b0:	e7f2      	b.n	800e598 <floor+0xb8>
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	4601      	mov	r1, r0
 800e5b6:	e7b3      	b.n	800e520 <floor+0x40>
 800e5b8:	8800759c 	.word	0x8800759c
 800e5bc:	7e37e43c 	.word	0x7e37e43c
 800e5c0:	bff00000 	.word	0xbff00000
 800e5c4:	000fffff 	.word	0x000fffff

0800e5c8 <scalbn>:
 800e5c8:	b082      	sub	sp, #8
 800e5ca:	ed8d 0b00 	vstr	d0, [sp]
 800e5ce:	9b01      	ldr	r3, [sp, #4]
 800e5d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e5d4:	b9a2      	cbnz	r2, 800e600 <scalbn+0x38>
 800e5d6:	9a00      	ldr	r2, [sp, #0]
 800e5d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	d03a      	beq.n	800e656 <scalbn+0x8e>
 800e5e0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800e6b8 <scalbn+0xf0>
 800e5e4:	4b40      	ldr	r3, [pc, #256]	; (800e6e8 <scalbn+0x120>)
 800e5e6:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e5ea:	4298      	cmp	r0, r3
 800e5ec:	ed8d 7b00 	vstr	d7, [sp]
 800e5f0:	da11      	bge.n	800e616 <scalbn+0x4e>
 800e5f2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800e6c0 <scalbn+0xf8>
 800e5f6:	ed9d 6b00 	vldr	d6, [sp]
 800e5fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e5fe:	e007      	b.n	800e610 <scalbn+0x48>
 800e600:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e604:	428a      	cmp	r2, r1
 800e606:	d10a      	bne.n	800e61e <scalbn+0x56>
 800e608:	ed9d 7b00 	vldr	d7, [sp]
 800e60c:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e610:	ed8d 7b00 	vstr	d7, [sp]
 800e614:	e01f      	b.n	800e656 <scalbn+0x8e>
 800e616:	9b01      	ldr	r3, [sp, #4]
 800e618:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e61c:	3a36      	subs	r2, #54	; 0x36
 800e61e:	4402      	add	r2, r0
 800e620:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e624:	428a      	cmp	r2, r1
 800e626:	dd0a      	ble.n	800e63e <scalbn+0x76>
 800e628:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800e6c8 <scalbn+0x100>
 800e62c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800e6d0 <scalbn+0x108>
 800e630:	eeb0 6b47 	vmov.f64	d6, d7
 800e634:	9b01      	ldr	r3, [sp, #4]
 800e636:	2b00      	cmp	r3, #0
 800e638:	fe27 7b05 	vselge.f64	d7, d7, d5
 800e63c:	e7dd      	b.n	800e5fa <scalbn+0x32>
 800e63e:	2a00      	cmp	r2, #0
 800e640:	dd0d      	ble.n	800e65e <scalbn+0x96>
 800e642:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e646:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e64a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e64e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e652:	e9cd 0100 	strd	r0, r1, [sp]
 800e656:	ed9d 0b00 	vldr	d0, [sp]
 800e65a:	b002      	add	sp, #8
 800e65c:	4770      	bx	lr
 800e65e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e662:	da18      	bge.n	800e696 <scalbn+0xce>
 800e664:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e668:	4298      	cmp	r0, r3
 800e66a:	9b01      	ldr	r3, [sp, #4]
 800e66c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e670:	dd09      	ble.n	800e686 <scalbn+0xbe>
 800e672:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800e6c8 <scalbn+0x100>
 800e676:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800e6d0 <scalbn+0x108>
 800e67a:	eeb0 6b47 	vmov.f64	d6, d7
 800e67e:	2b00      	cmp	r3, #0
 800e680:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800e684:	e7b9      	b.n	800e5fa <scalbn+0x32>
 800e686:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800e6c0 <scalbn+0xf8>
 800e68a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800e6d8 <scalbn+0x110>
 800e68e:	eeb0 6b47 	vmov.f64	d6, d7
 800e692:	2b00      	cmp	r3, #0
 800e694:	e7f4      	b.n	800e680 <scalbn+0xb8>
 800e696:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e69a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e69e:	3236      	adds	r2, #54	; 0x36
 800e6a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e6a4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e6a8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800e6e0 <scalbn+0x118>
 800e6ac:	ec41 0b17 	vmov	d7, r0, r1
 800e6b0:	e7a3      	b.n	800e5fa <scalbn+0x32>
 800e6b2:	bf00      	nop
 800e6b4:	f3af 8000 	nop.w
 800e6b8:	00000000 	.word	0x00000000
 800e6bc:	43500000 	.word	0x43500000
 800e6c0:	c2f8f359 	.word	0xc2f8f359
 800e6c4:	01a56e1f 	.word	0x01a56e1f
 800e6c8:	8800759c 	.word	0x8800759c
 800e6cc:	7e37e43c 	.word	0x7e37e43c
 800e6d0:	8800759c 	.word	0x8800759c
 800e6d4:	fe37e43c 	.word	0xfe37e43c
 800e6d8:	c2f8f359 	.word	0xc2f8f359
 800e6dc:	81a56e1f 	.word	0x81a56e1f
 800e6e0:	00000000 	.word	0x00000000
 800e6e4:	3c900000 	.word	0x3c900000
 800e6e8:	ffff3cb0 	.word	0xffff3cb0

0800e6ec <_init>:
 800e6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ee:	bf00      	nop
 800e6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6f2:	bc08      	pop	{r3}
 800e6f4:	469e      	mov	lr, r3
 800e6f6:	4770      	bx	lr

0800e6f8 <_fini>:
 800e6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6fa:	bf00      	nop
 800e6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6fe:	bc08      	pop	{r3}
 800e700:	469e      	mov	lr, r3
 800e702:	4770      	bx	lr
